{
    "openapi": "3.0.0",
    "info": {
        "title": "Payhawk API",
        "description": "Developer API for integration with Payhawk",
        "termsOfService": "",
        "version": "v3"
    },
    "servers": [],
    "security": [
        {
            "PayhawkApiKey": []
        }
    ],
    "components": {
        "securitySchemes": {
            "PayhawkApiKey": {
                "type": "apiKey",
                "description": "Authentication with an API key",
                "name": "X-Payhawk-ApiKey",
                "in": "header"
            }
        },
        "schemas": {
            "IAccountUserFilter": {
                "type": "object",
                "properties": {
                    "externalId": {
                        "type": "object",
                        "properties": {
                            "equal": {
                                "type": "string"
                            }
                        },
                        "additionalProperties": false
                    }
                },
                "additionalProperties": true,
                "description": "Filter for account user objects"
            },
            "IAccountUserQueryParams": {
                "type": "object",
                "properties": {
                    "filter": {
                        "$ref": "#/components/schemas/IAccountUserFilter"
                    }
                },
                "additionalProperties": true,
                "description": "Query parameters definition for Users endpoint that supports filtering"
            },
            "IBankStatementFilter": {
                "type": "object",
                "properties": {
                    "date": {
                        "type": "object",
                        "properties": {
                            "$lessThanEqual": {
                                "type": "string",
                                "format": "date-time"
                            },
                            "$greaterThanEqual": {
                                "type": "string",
                                "format": "date-time"
                            }
                        },
                        "additionalProperties": false
                    },
                    "$and": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IBankStatementFilter"
                        },
                        "minItems": 1
                    }
                },
                "additionalProperties": false,
                "description": "Filter for bank statement"
            },
            "IBankStatementOrderBy": {
                "type": "array",
                "items": {
                    "type": "object",
                    "properties": {
                        "date": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "description": "Order by bank statement line date"
                        }
                    },
                    "additionalProperties": false
                },
                "maxItems": 1,
                "description": "Sorting for bank statement line objects"
            },
            "IBankStatementQueryParams": {
                "type": "object",
                "properties": {
                    "$skip": {
                        "type": "integer",
                        "minimum": 0,
                        "description": "Used for pagination. Number of objects to skip from the result set beginning"
                    },
                    "$take": {
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 1000,
                        "description": "Used for pagination. Number of objects to include in the current page"
                    },
                    "$filter": {
                        "$ref": "#/components/schemas/IBankStatementFilter"
                    },
                    "$orderBy": {
                        "$ref": "#/components/schemas/IBankStatementOrderBy"
                    }
                },
                "additionalProperties": false,
                "description": "Query parameters definition for Bank Statement endpoint that supports filtering"
            },
            "ICardFilter": {
                "type": "object",
                "properties": {
                    "userId": {
                        "type": "object",
                        "properties": {
                            "$equal": {
                                "type": "string",
                                "format": "uuid"
                            }
                        },
                        "additionalProperties": false
                    },
                    "status": {
                        "type": "object",
                        "properties": {
                            "$equal": {
                                "type": "string",
                                "enum": [
                                    "processing",
                                    "cardholder_registration_pending",
                                    "cardholder_verification_pending",
                                    "cardholder_verification_processing",
                                    "cardholder_additional_data_required",
                                    "issuing",
                                    "inactive",
                                    "activation_blocked_by_payhawk",
                                    "active",
                                    "blocked_by_user",
                                    "blocked_by_admin",
                                    "blocked_by_manager",
                                    "blocked_by_payhawk",
                                    "blocked_by_policy",
                                    "closed",
                                    "closed_by_payhawk",
                                    "account_full_verification_pending"
                                ]
                            }
                        },
                        "additionalProperties": false
                    },
                    "$and": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ICardFilter"
                        },
                        "minItems": 1
                    }
                },
                "additionalProperties": false,
                "description": "Filter for card objects"
            },
            "ICardQueryParams": {
                "type": "object",
                "properties": {
                    "$skip": {
                        "type": "integer",
                        "minimum": 0,
                        "description": "Used for pagination. Number of objects to skip from the result set beginning"
                    },
                    "$take": {
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 1000,
                        "description": "Used for pagination. Number of objects to include in the current page"
                    },
                    "$filter": {
                        "$ref": "#/components/schemas/ICardFilter"
                    }
                },
                "additionalProperties": false,
                "description": "Query parameters definition for Cards endpoint that supports filtering"
            },
            "IDepositFilter": {
                "type": "object",
                "properties": {
                    "date": {
                        "type": "object",
                        "properties": {
                            "$equal": {
                                "type": "string",
                                "format": "date-time"
                            },
                            "$lessThanEqual": {
                                "type": "string",
                                "format": "date-time"
                            },
                            "$greaterThanEqual": {
                                "type": "string",
                                "format": "date-time"
                            }
                        },
                        "additionalProperties": false
                    },
                    "$and": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IDepositFilter"
                        },
                        "minItems": 1
                    }
                },
                "additionalProperties": false,
                "description": "Filter for deposit objects"
            },
            "IDepositQueryParams": {
                "type": "object",
                "properties": {
                    "$skip": {
                        "type": "integer",
                        "minimum": 0,
                        "description": "Used for pagination. Number of objects to skip from the result set beginning"
                    },
                    "$take": {
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 1000,
                        "description": "Used for pagination. Number of objects to include in the current page"
                    },
                    "$filter": {
                        "$ref": "#/components/schemas/IDepositFilter"
                    }
                },
                "additionalProperties": false,
                "description": "Query parameters definition for Deposits endpoint that supports filtering"
            },
            "IExpenseFilter": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "object",
                        "properties": {
                            "$equal": {
                                "type": "string"
                            },
                            "$in": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        "additionalProperties": false
                    },
                    "status": {
                        "type": "object",
                        "properties": {
                            "$equal": {
                                "type": "string",
                                "enum": [
                                    "archived",
                                    "draft",
                                    "ready"
                                ]
                            }
                        },
                        "additionalProperties": false
                    },
                    "createdAt": {
                        "type": "object",
                        "properties": {
                            "$equal": {
                                "type": "string",
                                "format": "date-time"
                            },
                            "$lessThan": {
                                "type": "string",
                                "format": "date-time"
                            },
                            "$greaterThan": {
                                "type": "string",
                                "format": "date-time"
                            },
                            "$empty": {
                                "type": "boolean"
                            }
                        },
                        "additionalProperties": false
                    },
                    "settledAt": {
                        "type": "object",
                        "properties": {
                            "$equal": {
                                "type": "string",
                                "format": "date-time"
                            },
                            "$lessThan": {
                                "type": "string",
                                "format": "date-time"
                            },
                            "$greaterThan": {
                                "type": "string",
                                "format": "date-time"
                            },
                            "$empty": {
                                "type": "boolean"
                            }
                        },
                        "additionalProperties": false
                    },
                    "reviewedAt": {
                        "type": "object",
                        "properties": {
                            "$equal": {
                                "type": "string",
                                "format": "date-time"
                            },
                            "$lessThan": {
                                "type": "string",
                                "format": "date-time"
                            },
                            "$greaterThan": {
                                "type": "string",
                                "format": "date-time"
                            },
                            "$empty": {
                                "type": "boolean"
                            }
                        },
                        "additionalProperties": false
                    },
                    "title": {
                        "type": "object",
                        "properties": {
                            "$equal": {
                                "type": "string"
                            },
                            "$notEqual": {
                                "type": "string"
                            },
                            "$contains": {
                                "type": "string"
                            },
                            "$empty": {
                                "type": "boolean"
                            }
                        },
                        "additionalProperties": false
                    },
                    "type": {
                        "type": "object",
                        "properties": {
                            "$equal": {
                                "type": "string"
                            },
                            "$notEqual": {
                                "type": "string"
                            },
                            "$contains": {
                                "type": "string"
                            },
                            "$empty": {
                                "type": "boolean"
                            }
                        },
                        "additionalProperties": false
                    },
                    "category.id": {
                        "type": "object",
                        "properties": {
                            "$equal": {
                                "type": "string"
                            },
                            "$notEqual": {
                                "type": "string"
                            },
                            "$contains": {
                                "type": "string"
                            },
                            "$empty": {
                                "type": "boolean"
                            }
                        },
                        "additionalProperties": false
                    },
                    "createdBy.id": {
                        "type": "object",
                        "properties": {
                            "$equal": {
                                "type": "string"
                            },
                            "$notEqual": {
                                "type": "string"
                            },
                            "$contains": {
                                "type": "string"
                            },
                            "$empty": {
                                "type": "boolean"
                            }
                        },
                        "additionalProperties": false
                    },
                    "document.documentDate": {
                        "type": "object",
                        "properties": {
                            "$equal": {
                                "type": "string",
                                "format": "date-time"
                            },
                            "$lessThan": {
                                "type": "string",
                                "format": "date-time"
                            },
                            "$greaterThan": {
                                "type": "string",
                                "format": "date-time"
                            },
                            "$empty": {
                                "type": "boolean"
                            }
                        },
                        "additionalProperties": false
                    },
                    "document.documentNumber": {
                        "type": "object",
                        "properties": {
                            "$equal": {
                                "type": "string"
                            },
                            "$notEqual": {
                                "type": "string"
                            },
                            "$contains": {
                                "type": "string"
                            },
                            "$empty": {
                                "type": "boolean"
                            }
                        },
                        "additionalProperties": false
                    },
                    "document.dueDate": {
                        "type": "object",
                        "properties": {
                            "$equal": {
                                "type": "string",
                                "format": "date-time"
                            },
                            "$lessThan": {
                                "type": "string",
                                "format": "date-time"
                            },
                            "$greaterThan": {
                                "type": "string",
                                "format": "date-time"
                            },
                            "$empty": {
                                "type": "boolean"
                            }
                        },
                        "additionalProperties": false
                    },
                    "document.serviceDate": {
                        "type": "object",
                        "properties": {
                            "$equal": {
                                "type": "string",
                                "format": "date-time"
                            },
                            "$lessThan": {
                                "type": "string",
                                "format": "date-time"
                            },
                            "$greaterThan": {
                                "type": "string",
                                "format": "date-time"
                            },
                            "$empty": {
                                "type": "boolean"
                            }
                        },
                        "additionalProperties": false
                    },
                    "reconciliation.baseTotalAmount": {
                        "type": "object",
                        "properties": {
                            "$equal": {
                                "type": "number",
                                "format": "float"
                            },
                            "$notEqual": {
                                "type": "number",
                                "format": "float"
                            },
                            "$lessThan": {
                                "type": "number",
                                "format": "float"
                            },
                            "$greaterThan": {
                                "type": "number",
                                "format": "float"
                            },
                            "$empty": {
                                "type": "boolean"
                            }
                        },
                        "additionalProperties": false
                    },
                    "supplier.name": {
                        "type": "object",
                        "properties": {
                            "$equal": {
                                "type": "string"
                            },
                            "$notEqual": {
                                "type": "string"
                            },
                            "$contains": {
                                "type": "string"
                            },
                            "$empty": {
                                "type": "boolean"
                            }
                        },
                        "additionalProperties": false
                    },
                    "card.id": {
                        "type": "object",
                        "properties": {
                            "$equal": {
                                "type": "string"
                            },
                            "$in": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        "additionalProperties": false
                    },
                    "$and": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IExpenseFilter"
                        },
                        "minItems": 1
                    },
                    "$or": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IExpenseFilter"
                        },
                        "minItems": 1
                    }
                },
                "additionalProperties": false,
                "description": "Filter for expense objects"
            },
            "IExpenseOrderBy": {
                "type": "array",
                "items": {
                    "type": "object",
                    "properties": {
                        "id": {
                            "type": "string",
                            "enum": [
                                "asc"
                            ],
                            "description": "Order by expense id"
                        },
                        "createdAt": {
                            "type": "string",
                            "enum": [
                                "asc"
                            ],
                            "description": "Order by expense creation date"
                        }
                    },
                    "additionalProperties": false
                },
                "maxItems": 1,
                "description": "Sorting for expense objects"
            },
            "IExpenseQueryParams": {
                "type": "object",
                "properties": {
                    "$skip": {
                        "type": "integer",
                        "minimum": 0,
                        "description": "Used for pagination. Number of objects to skip from the result set beginning"
                    },
                    "$take": {
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 1000,
                        "description": "Used for pagination. Number of objects to include in the current page"
                    },
                    "$filter": {
                        "$ref": "#/components/schemas/IExpenseFilter"
                    },
                    "$orderBy": {
                        "$ref": "#/components/schemas/IExpenseOrderBy"
                    }
                },
                "additionalProperties": false,
                "description": "Query parameters definition for Expenses endpoint that supports filtering, sorting and pagination"
            },
            "IPagingQueryParams": {
                "type": "object",
                "properties": {
                    "$skip": {
                        "type": "integer",
                        "minimum": 0,
                        "description": "Used for pagination. Number of objects to skip from the result set beginning"
                    },
                    "$take": {
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 1000,
                        "description": "Used for pagination. Number of objects to include in the current page"
                    }
                },
                "additionalProperties": false,
                "description": "Query parameters for pagination"
            },
            "IPurchaseOrderFilter": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "object",
                        "properties": {
                            "$equal": {
                                "type": "string",
                                "enum": [
                                    "draft",
                                    "pending_approval",
                                    "open",
                                    "returned",
                                    "rejected",
                                    "closed"
                                ]
                            }
                        },
                        "additionalProperties": false
                    },
                    "purchaseOrderNumber": {
                        "type": "object",
                        "properties": {
                            "$contains": {
                                "type": "string"
                            }
                        },
                        "additionalProperties": false
                    },
                    "modifiedAt": {
                        "type": "object",
                        "properties": {
                            "$equal": {
                                "type": "string",
                                "format": "date-time"
                            },
                            "$lessThan": {
                                "type": "string",
                                "format": "date-time"
                            },
                            "$greaterThan": {
                                "type": "string",
                                "format": "date-time"
                            }
                        },
                        "additionalProperties": false
                    },
                    "$and": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IPurchaseOrderFilter"
                        },
                        "minItems": 1
                    }
                },
                "additionalProperties": false,
                "description": "Filter for Purchase Order objects"
            },
            "IPurchaseOrderQueryParams": {
                "type": "object",
                "properties": {
                    "$skip": {
                        "type": "integer",
                        "minimum": 0,
                        "description": "Used for pagination. Number of objects to skip from the result set beginning"
                    },
                    "$take": {
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 1000,
                        "description": "Used for pagination. Number of objects to include in the current page"
                    },
                    "$filter": {
                        "$ref": "#/components/schemas/IPurchaseOrderFilter"
                    }
                },
                "additionalProperties": false,
                "description": "Query parameters definition for the Purchase Orders endpoint that supports filtering"
            },
            "ISuppliersFilter": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "object",
                        "properties": {
                            "$equal": {
                                "type": "string",
                                "enum": [
                                    "active",
                                    "archived"
                                ]
                            }
                        },
                        "required": [
                            "$equal"
                        ],
                        "additionalProperties": false
                    }
                },
                "required": [
                    "status"
                ],
                "additionalProperties": false,
                "description": "Filter for supplier objects"
            },
            "ISuppliersQueryParams": {
                "type": "object",
                "properties": {
                    "$skip": {
                        "type": "integer",
                        "minimum": 0,
                        "description": "Used for pagination. Number of objects to skip from the result set beginning"
                    },
                    "$take": {
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 1000,
                        "description": "Used for pagination. Number of objects to include in the current page"
                    },
                    "$filter": {
                        "$ref": "#/components/schemas/ISuppliersFilter"
                    }
                },
                "required": [
                    "$filter"
                ],
                "additionalProperties": false,
                "description": "Query parameters definition for Suppliers endpoint that supports filtering by status and pagination"
            },
            "IAccount": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the account"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the account. Usually the name of the company owning the account"
                    },
                    "uic": {
                        "type": "string",
                        "description": "Unified identification code of the company"
                    },
                    "vat": {
                        "type": "string",
                        "description": "Company identifier for VAT purposes"
                    },
                    "baseCurrency": {
                        "type": "string",
                        "description": "Base currency of the account"
                    }
                },
                "required": [
                    "id",
                    "name",
                    "uic",
                    "baseCurrency"
                ],
                "additionalProperties": false,
                "description": "Payhawk account object"
            },
            "IAccountsResponse": {
                "type": "object",
                "properties": {
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IAccount"
                        },
                        "description": "Array of IAccount objects"
                    },
                    "total": {
                        "type": "number",
                        "format": "float",
                        "minimum": 0,
                        "description": "Total count of objects. If using pagination, this is the sum of all pages"
                    }
                },
                "required": [
                    "items",
                    "total"
                ],
                "additionalProperties": false,
                "description": "Response of multiple IAccount objects"
            },
            "INewAccountCode": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the account code"
                    },
                    "code": {
                        "type": "string",
                        "description": "Unique identifier of the account code"
                    },
                    "defaultTaxCode": {
                        "type": "string",
                        "description": "Default tax rate for expenses with this account code"
                    }
                },
                "required": [
                    "name",
                    "code"
                ],
                "additionalProperties": false,
                "description": "Account code object without autogenerated fields"
            },
            "IAccountCode": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the account code"
                    },
                    "code": {
                        "type": "string",
                        "description": "Unique identifier of the account code"
                    },
                    "defaultTaxCode": {
                        "type": "string",
                        "description": "Default tax rate for expenses with this account code"
                    }
                },
                "required": [
                    "name",
                    "code"
                ],
                "additionalProperties": false,
                "description": "Account code object"
            },
            "INewAccountCodes": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/INewAccountCode"
                },
                "description": "Array of new account code objects"
            },
            "IAccountCodesResponse": {
                "type": "object",
                "properties": {
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IAccountCode"
                        },
                        "description": "Array of IAccountCode objects"
                    },
                    "total": {
                        "type": "number",
                        "format": "float",
                        "minimum": 0,
                        "description": "Total count of objects. If using pagination, this is the sum of all pages"
                    }
                },
                "required": [
                    "items",
                    "total"
                ],
                "additionalProperties": false,
                "description": "Response of multiple IAccountCode objects"
            },
            "INewGroupAccountCode": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the account code"
                    },
                    "code": {
                        "type": "string",
                        "description": "Unique identifier of the account code"
                    },
                    "defaultTaxCode": {
                        "type": "string",
                        "description": "Default tax rate for expenses with this account code"
                    },
                    "entityVisibility": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Array of accountIds with access to this account code"
                    }
                },
                "required": [
                    "name",
                    "code",
                    "entityVisibility"
                ],
                "additionalProperties": false,
                "description": "Group Account code object without autogenerated fields"
            },
            "IGroupAccountCode": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the account code"
                    },
                    "code": {
                        "type": "string",
                        "description": "Unique identifier of the account code"
                    },
                    "defaultTaxCode": {
                        "type": "string",
                        "description": "Default tax rate for expenses with this account code"
                    },
                    "entityVisibility": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Array of accountIds with access to this account code"
                    }
                },
                "required": [
                    "name",
                    "code",
                    "entityVisibility"
                ],
                "additionalProperties": false,
                "description": "Group Account code object"
            },
            "INewGroupAccountCodes": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/INewGroupAccountCode"
                },
                "description": "Array of new account code objects"
            },
            "IGroupAccountCodesResponse": {
                "type": "object",
                "properties": {
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IGroupAccountCode"
                        },
                        "description": "Array of IGroupAccountCode objects"
                    },
                    "total": {
                        "type": "number",
                        "format": "float",
                        "minimum": 0,
                        "description": "Total count of objects. If using pagination, this is the sum of all pages"
                    }
                },
                "required": [
                    "items",
                    "total"
                ],
                "additionalProperties": false,
                "description": "Response of multiple IGroupAccountCode objects"
            },
            "IAccountUserPatch": {
                "type": "object",
                "properties": {
                    "role": {
                        "type": "string",
                        "enum": [
                            "admin",
                            "accounting",
                            "employee"
                        ],
                        "description": "New role of the user"
                    },
                    "externalId": {
                        "type": "string",
                        "description": "Unique identifier of the account user in the external system"
                    }
                },
                "additionalProperties": false,
                "description": "Minimal member object used for updating user"
            },
            "INewAccountUser": {
                "type": "object",
                "properties": {
                    "email": {
                        "type": "string",
                        "format": "email",
                        "description": "Email of the account user"
                    },
                    "role": {
                        "type": "string",
                        "enum": [
                            "admin",
                            "accounting",
                            "employee"
                        ],
                        "description": "Role of the user"
                    },
                    "firstName": {
                        "type": "string",
                        "description": "First name of the account user"
                    },
                    "lastName": {
                        "type": "string",
                        "description": "Last name of the account user"
                    }
                },
                "required": [
                    "email",
                    "role"
                ],
                "additionalProperties": false,
                "description": "Minimal member object used for inviting new user to account"
            },
            "IAccountUser": {
                "type": "object",
                "properties": {
                    "email": {
                        "type": "string",
                        "format": "email",
                        "description": "Email of the account user"
                    },
                    "role": {
                        "type": "string",
                        "enum": [
                            "admin",
                            "accounting",
                            "employee"
                        ],
                        "description": "Role of the user"
                    },
                    "firstName": {
                        "type": "string",
                        "description": "First name of the account user"
                    },
                    "lastName": {
                        "type": "string",
                        "description": "Last name of the account user"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the account user"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Date the account user was created"
                    },
                    "externalId": {
                        "type": "string",
                        "description": "Unique identifier of the account user in the external system"
                    }
                },
                "required": [
                    "email",
                    "role",
                    "id",
                    "createdAt"
                ],
                "additionalProperties": false,
                "description": "User belonging to an account"
            },
            "IAccountUsersResponse": {
                "type": "object",
                "properties": {
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IAccountUser"
                        },
                        "description": "Array of IAccountUser objects"
                    },
                    "total": {
                        "type": "number",
                        "format": "float",
                        "minimum": 0,
                        "description": "Total count of objects. If using pagination, this is the sum of all pages"
                    }
                },
                "required": [
                    "items",
                    "total"
                ],
                "additionalProperties": false,
                "description": "Response of multiple IAccountUser objects"
            },
            "IAccountUserReimbursementDetails": {
                "type": "object",
                "properties": {
                    "accountHolder": {
                        "type": "string",
                        "description": "The account holder name"
                    },
                    "currency": {
                        "type": "string",
                        "description": "The reimbursement currency"
                    }
                },
                "required": [
                    "currency"
                ],
                "additionalProperties": false,
                "description": "User reimbursement details"
            },
            "IActor": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the actor user"
                    },
                    "email": {
                        "type": "string",
                        "format": "email",
                        "description": "Email of the actor user"
                    },
                    "firstName": {
                        "type": "string",
                        "description": "First name of the actor user"
                    },
                    "lastName": {
                        "type": "string",
                        "description": "Last name of the actor user"
                    },
                    "externalId": {
                        "type": "string",
                        "description": "Unique identifier of the account user in the external system"
                    }
                },
                "required": [
                    "id",
                    "email"
                ],
                "additionalProperties": false,
                "description": "Actor user that last approved the expense"
            },
            "IBasicActor": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the user"
                    },
                    "fullName": {
                        "type": "string",
                        "description": "Full name of the user consisting of first and last name"
                    }
                },
                "required": [
                    "id"
                ],
                "additionalProperties": false,
                "description": "The person who approved/rejected/returned the purchase order."
            },
            "IAddress": {
                "type": "object",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The first address line"
                    },
                    "address2": {
                        "type": "string",
                        "description": "The second address line"
                    },
                    "country": {
                        "type": "string",
                        "maxLength": 2,
                        "minLength": 2,
                        "enum": [
                            "AD",
                            "AT",
                            "BE",
                            "BG",
                            "CH",
                            "CY",
                            "CZ",
                            "DE",
                            "DK",
                            "EE",
                            "ES",
                            "FI",
                            "FR",
                            "GB",
                            "GG",
                            "GI",
                            "GR",
                            "HR",
                            "HU",
                            "IC",
                            "IE",
                            "IM",
                            "IS",
                            "IT",
                            "JE",
                            "LI",
                            "LT",
                            "LU",
                            "LV",
                            "MC",
                            "MT",
                            "NL",
                            "NO",
                            "PL",
                            "PT",
                            "RO",
                            "SE",
                            "SI",
                            "SK",
                            "SM",
                            "US",
                            "VA"
                        ],
                        "description": "The country code where address is located"
                    },
                    "city": {
                        "type": "string",
                        "description": "The city where address is located"
                    },
                    "state": {
                        "type": "string",
                        "description": "The state where address is located"
                    },
                    "postalCode": {
                        "type": "string",
                        "description": "The postal code of the address"
                    }
                },
                "required": [
                    "address",
                    "country",
                    "city",
                    "postalCode"
                ],
                "additionalProperties": false,
                "description": "Object representing an address"
            },
            "IExpensePaymentFees": {
                "type": "object",
                "properties": {
                    "fx": {
                        "type": "number",
                        "format": "float",
                        "description": "Amount of currency exchange fees"
                    },
                    "pos": {
                        "type": "number",
                        "format": "float",
                        "description": "Amount of POS transaction fees"
                    },
                    "bank": {
                        "type": "number",
                        "format": "float",
                        "description": "Amount of bank transaction fees"
                    }
                },
                "required": [
                    "fx",
                    "pos",
                    "bank"
                ],
                "additionalProperties": false,
                "description": "Details for an expense payment fees"
            },
            "IBankStatementLine": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the bank statement line"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "debit",
                            "credit"
                        ],
                        "description": "Type of the bank statement line"
                    },
                    "paymentId": {
                        "type": "string",
                        "description": "Original identifier of the payment"
                    },
                    "fundAccountId": {
                        "type": "string",
                        "description": "Unique identifier of payment's fund account"
                    },
                    "date": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Date of the payment"
                    },
                    "currency": {
                        "type": "string",
                        "description": "Currency of the payment's fund account"
                    },
                    "amount": {
                        "type": "number",
                        "format": "float",
                        "description": "Amount taken out of payment's fund account"
                    },
                    "paidCurrency": {
                        "type": "string",
                        "description": "Currency of the payment"
                    },
                    "paidAmount": {
                        "type": "number",
                        "format": "float",
                        "description": "Amount of the payment"
                    },
                    "fxRate": {
                        "type": "number",
                        "format": "float",
                        "description": "FX rate of the payment"
                    },
                    "fees": {
                        "$ref": "#/components/schemas/IExpensePaymentFees"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the payment"
                    },
                    "expenseIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Related expenses that are paid via this payment (valid for debit payments only)"
                    }
                },
                "required": [
                    "id",
                    "type",
                    "paymentId",
                    "fundAccountId",
                    "date",
                    "currency",
                    "amount",
                    "paidCurrency",
                    "paidAmount",
                    "fxRate",
                    "fees"
                ],
                "additionalProperties": false,
                "description": "Bank statement line details"
            },
            "IBankStatementResponse": {
                "type": "object",
                "properties": {
                    "lines": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IBankStatementLine"
                        },
                        "description": "Array of IBankStatementLine objects"
                    },
                    "total": {
                        "type": "number",
                        "format": "float",
                        "minimum": 0,
                        "description": "Total count of objects. If using pagination, this is the sum of all pages"
                    }
                },
                "required": [
                    "lines",
                    "total"
                ],
                "additionalProperties": false,
                "description": "Response of multiple IBankStatementLine objects"
            },
            "INewCard": {
                "type": "object",
                "properties": {
                    "userId": {
                        "type": "string",
                        "description": "Unique identifier of the cardholder"
                    },
                    "fundAccountId": {
                        "type": "string",
                        "pattern": "^[0-9]+$",
                        "description": "Unique identifier of the fund account the card is linked to"
                    },
                    "limit": {
                        "type": "number",
                        "format": "float",
                        "description": "Recurring monthly limit of the card"
                    },
                    "isPhysical": {
                        "type": "boolean",
                        "description": "Indicates if the card is physical. If set to false, the card is virtual"
                    },
                    "isAtmAllowed": {
                        "type": "boolean",
                        "description": "Indicates if the card can be used with an ATM"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the card. Useful for differentiating cards"
                    },
                    "deliveryAddress": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/IAddress",
                                "x-required": true
                            }
                        ],
                        "description": "Address where the card will be delivered"
                    }
                },
                "required": [
                    "userId",
                    "fundAccountId",
                    "limit",
                    "isPhysical",
                    "isAtmAllowed"
                ],
                "additionalProperties": false,
                "description": "New Payhawk card object"
            },
            "ICard": {
                "type": "object",
                "properties": {
                    "userId": {
                        "type": "string",
                        "description": "Unique identifier of the cardholder"
                    },
                    "fundAccountId": {
                        "type": "string",
                        "pattern": "^[0-9]+$",
                        "description": "Unique identifier of the fund account the card is linked to"
                    },
                    "limit": {
                        "type": "number",
                        "format": "float",
                        "description": "Recurring monthly limit of the card"
                    },
                    "isPhysical": {
                        "type": "boolean",
                        "description": "Indicates if the card is physical. If set to false, the card is virtual"
                    },
                    "isAtmAllowed": {
                        "type": "boolean",
                        "description": "Indicates if the card can be used with an ATM"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the card. Useful for differentiating cards"
                    },
                    "deliveryAddress": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/IAddress",
                                "x-required": true
                            }
                        ],
                        "description": "Address where the card will be delivered"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the card"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Date the card was created"
                    },
                    "currency": {
                        "type": "string",
                        "description": "Currency of the card"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the card"
                    },
                    "budgetLeft": {
                        "type": "number",
                        "format": "float",
                        "description": "Available funds in the card"
                    },
                    "spentAmount": {
                        "type": "number",
                        "format": "float",
                        "description": "Spent amount in the current period"
                    },
                    "approvedFunds": {
                        "type": "number",
                        "format": "float",
                        "description": "Approved funds for the current period"
                    },
                    "embossName": {
                        "type": "string",
                        "description": "Name of the cardholder printed on the physical card"
                    },
                    "isSingleUse": {
                        "type": "boolean",
                        "description": "Indicates if the card is single-use"
                    }
                },
                "required": [
                    "userId",
                    "fundAccountId",
                    "limit",
                    "isPhysical",
                    "isAtmAllowed",
                    "id",
                    "createdAt",
                    "currency",
                    "status",
                    "budgetLeft",
                    "spentAmount",
                    "approvedFunds",
                    "isSingleUse"
                ],
                "additionalProperties": false,
                "description": "Payhawk card object"
            },
            "ICardPatch": {
                "type": "object",
                "properties": {
                    "budgetLeft": {
                        "type": "number",
                        "format": "float",
                        "minimum": 0,
                        "description": "Funds left in the card"
                    }
                },
                "additionalProperties": false,
                "description": "Payhawk card patch object used for partial update of a card"
            },
            "ICardStatusUpdate": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "enum": [
                            "active",
                            "blocked",
                            "closed"
                        ],
                        "description": "Requested card status"
                    }
                },
                "required": [
                    "status"
                ],
                "additionalProperties": false,
                "description": "Payhawk card status update request"
            },
            "ICardsResponse": {
                "type": "object",
                "properties": {
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ICard"
                        },
                        "description": "Array of ICard objects"
                    },
                    "total": {
                        "type": "number",
                        "format": "float",
                        "minimum": 0,
                        "description": "Total count of objects. If using pagination, this is the sum of all pages"
                    }
                },
                "required": [
                    "items",
                    "total"
                ],
                "additionalProperties": false,
                "description": "Response of multiple ICard objects"
            },
            "INewExternalCustomFieldValue": {
                "type": "object",
                "properties": {
                    "label": {
                        "type": "string",
                        "description": "Label of the custom field value"
                    },
                    "externalId": {
                        "type": "string",
                        "description": "Unique identifier of the custom field value in the external system"
                    },
                    "entityVisibility": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Array of accountIds with access to this custom field value"
                    }
                },
                "required": [
                    "label",
                    "externalId"
                ],
                "additionalProperties": false,
                "description": "Custom field value object without autogenerated fields"
            },
            "INewExternalCustomField": {
                "type": "object",
                "properties": {
                    "label": {
                        "type": "string",
                        "description": "Label of the custom field"
                    },
                    "externalId": {
                        "type": "string",
                        "description": "Unique identifier of the custom field in the external system"
                    },
                    "isRequired": {
                        "type": "boolean",
                        "description": "Indicates if the custom field is always required"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the custom field"
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/INewExternalCustomFieldValue"
                        },
                        "uniqueItems": true,
                        "description": "List of predefined values to choose from"
                    },
                    "entityVisibility": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Array of accountIds with access to this custom field"
                    },
                    "visibility": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of Roles that will be able to see this custom field"
                    }
                },
                "required": [
                    "label",
                    "externalId",
                    "values"
                ],
                "additionalProperties": false,
                "description": "Custom field object from external source without autogenerated fields"
            },
            "INewExternalCustomFields": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/INewExternalCustomField"
                },
                "uniqueItems": true,
                "description": "Array of external custom field objects without autogenerated fields"
            },
            "ICustomFieldValue": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the custom field"
                    },
                    "label": {
                        "type": "string",
                        "description": "Label of the custom field value"
                    },
                    "externalId": {
                        "type": "string",
                        "nullable": true,
                        "description": "Unique identifier of the custom field value in the external system"
                    }
                },
                "required": [
                    "id",
                    "label"
                ],
                "additionalProperties": false,
                "description": "Custom field value"
            },
            "IExternalCustomField": {
                "type": "object",
                "properties": {
                    "label": {
                        "type": "string",
                        "description": "Label of the custom field"
                    },
                    "isRequired": {
                        "type": "boolean",
                        "description": "Indicates if the custom field is always required"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the custom field"
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ICustomFieldValue"
                        },
                        "uniqueItems": true,
                        "description": "List of predefined values to choose from"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the custom field"
                    },
                    "externalId": {
                        "type": "string",
                        "nullable": true,
                        "description": "Unique identifier of the custom field in the external system"
                    },
                    "externalSource": {
                        "type": "string",
                        "description": "Unique identifier of the external system the field originates from"
                    }
                },
                "required": [
                    "label",
                    "values",
                    "id"
                ],
                "additionalProperties": false,
                "description": "Custom field object"
            },
            "IExternalCustomFieldsResponse": {
                "type": "object",
                "properties": {
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IExternalCustomField"
                        },
                        "description": "Array of IExternalCustomField objects"
                    },
                    "total": {
                        "type": "number",
                        "format": "float",
                        "minimum": 0,
                        "description": "Total count of objects. If using pagination, this is the sum of all pages"
                    }
                },
                "required": [
                    "items",
                    "total"
                ],
                "additionalProperties": false,
                "description": "Response of multiple IExternalCustomField objects"
            },
            "INewCustomField": {
                "type": "object",
                "properties": {
                    "label": {
                        "type": "string",
                        "description": "Label of the custom field"
                    },
                    "isRequired": {
                        "type": "boolean",
                        "description": "Indicates if the custom field is always required"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the custom field"
                    },
                    "externalId": {
                        "type": "string",
                        "nullable": true,
                        "description": "Unique identifier of the custom field in the external system"
                    },
                    "externalSource": {
                        "type": "string",
                        "nullable": true,
                        "description": "Unique identifier of the external system"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "dynamic_list",
                            "predefined_list",
                            "free_text_input",
                            "date"
                        ],
                        "description": "Type of the custom field, default is 'dynamic_list'"
                    }
                },
                "required": [
                    "label"
                ],
                "additionalProperties": false,
                "description": "Custom field object without autogenerated fields"
            },
            "ICustomFieldPatch": {
                "type": "object",
                "properties": {
                    "isRequired": {
                        "type": "boolean",
                        "description": "Indicates if the custom field is always required"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the custom field"
                    },
                    "externalId": {
                        "type": "string",
                        "nullable": true,
                        "description": "Unique identifier of the custom field in the external system"
                    },
                    "externalSource": {
                        "type": "string",
                        "nullable": true,
                        "description": "Unique identifier of the external system"
                    },
                    "label": {
                        "type": "string",
                        "description": "Label of the custom field"
                    }
                },
                "additionalProperties": false,
                "description": "Custom field object without autogenerated fields"
            },
            "INewCustomFields": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/INewCustomField"
                },
                "uniqueItems": true,
                "description": "Array of custom field objects without autogenerated fields"
            },
            "ICustomField": {
                "type": "object",
                "properties": {
                    "label": {
                        "type": "string",
                        "description": "Label of the custom field"
                    },
                    "isRequired": {
                        "type": "boolean",
                        "description": "Indicates if the custom field is always required"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the custom field"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "dynamic_list",
                            "predefined_list",
                            "free_text_input",
                            "date"
                        ],
                        "description": "Type of the custom field, default is 'dynamic_list'"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the custom field"
                    },
                    "externalId": {
                        "type": "string",
                        "nullable": true,
                        "description": "Unique identifier of the custom field in the external system"
                    },
                    "externalSource": {
                        "type": "string",
                        "description": "Unique identifier of the external system the field originates from"
                    }
                },
                "required": [
                    "label",
                    "id"
                ],
                "additionalProperties": false,
                "description": "Custom field object"
            },
            "ICustomFieldsResponse": {
                "type": "object",
                "properties": {
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ICustomField"
                        },
                        "description": "Array of ICustomField objects"
                    },
                    "total": {
                        "type": "number",
                        "format": "float",
                        "minimum": 0,
                        "description": "Total count of objects. If using pagination, this is the sum of all pages"
                    }
                },
                "required": [
                    "items",
                    "total"
                ],
                "additionalProperties": false,
                "description": "Response of multiple ICustomField objects"
            },
            "ICustomFieldDataValue": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the custom field value"
                    },
                    "label": {
                        "type": "string",
                        "description": "Label of the custom field value"
                    },
                    "externalId": {
                        "type": "string",
                        "description": "Unique identifier of the custom field value in the external system"
                    },
                    "owner": {
                        "type": "string",
                        "description": "Owner of the custom field value"
                    },
                    "parentId": {
                        "type": "string",
                        "description": "Unique identifier of a parent custom field value"
                    },
                    "childId": {
                        "type": "string",
                        "description": "Unique identifier of a child custom field value"
                    }
                },
                "required": [
                    "id",
                    "label"
                ],
                "additionalProperties": false,
                "description": "Custom field data value object"
            },
            "ICustomFieldData": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the custom field"
                    },
                    "label": {
                        "type": "string",
                        "description": "Label of the custom field"
                    },
                    "externalId": {
                        "type": "string",
                        "description": "Unique identifier of the custom field in the external system"
                    },
                    "externalSource": {
                        "type": "string",
                        "description": "Unique identifier of the external system the field originates from"
                    },
                    "selectedValues": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ICustomFieldDataValue"
                        },
                        "description": "Array of selected values from a predefined list"
                    },
                    "value": {
                        "type": "string",
                        "description": "Free text value. Used for text input custom fields"
                    }
                },
                "required": [
                    "id",
                    "label"
                ],
                "additionalProperties": false,
                "description": "Custom field data object"
            },
            "INewCustomFieldValue": {
                "type": "object",
                "properties": {
                    "label": {
                        "type": "string",
                        "description": "Label of the custom field value"
                    },
                    "externalId": {
                        "type": "string",
                        "nullable": true,
                        "description": "Unique identifier of the custom field value in the external system"
                    }
                },
                "required": [
                    "label"
                ],
                "additionalProperties": false,
                "description": "Custom field value object without autogenerated fields"
            },
            "ICustomFieldValuePatch": {
                "type": "object",
                "properties": {
                    "label": {
                        "type": "string",
                        "description": "Label of the custom field value"
                    },
                    "externalId": {
                        "type": "string",
                        "nullable": true,
                        "description": "Unique identifier of the custom field value in the external system"
                    }
                },
                "additionalProperties": false,
                "description": "Custom field value object without autogenerated fields"
            },
            "ICustomFieldValuesResponse": {
                "type": "object",
                "properties": {
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ICustomFieldValue"
                        },
                        "description": "Array of ICustomFieldValue objects"
                    },
                    "total": {
                        "type": "number",
                        "format": "float",
                        "minimum": 0,
                        "description": "Total count of objects. If using pagination, this is the sum of all pages"
                    }
                },
                "required": [
                    "items",
                    "total"
                ],
                "additionalProperties": false,
                "description": "Response of multiple ICustomFieldValue objects"
            },
            "IExternalCustomFieldValue": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the custom field"
                    },
                    "label": {
                        "type": "string",
                        "description": "Label of the custom field value"
                    },
                    "externalId": {
                        "type": "string",
                        "description": "Unique identifier of the custom field value in the external system"
                    }
                },
                "required": [
                    "id",
                    "label",
                    "externalId"
                ],
                "additionalProperties": false,
                "description": "Custom field value"
            },
            "IExternalCustomFieldValuesResponse": {
                "type": "object",
                "properties": {
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IExternalCustomFieldValue"
                        },
                        "description": "Array of IExternalCustomFieldValue objects"
                    },
                    "total": {
                        "type": "number",
                        "format": "float",
                        "minimum": 0,
                        "description": "Total count of objects. If using pagination, this is the sum of all pages"
                    }
                },
                "required": [
                    "items",
                    "total"
                ],
                "additionalProperties": false,
                "description": "Response of multiple IExternalCustomFieldValue objects"
            },
            "INewCustomFieldValueManager": {
                "type": "object",
                "properties": {
                    "userId": {
                        "type": "string",
                        "format": "uuid",
                        "description": "User ID in Payhawk"
                    }
                },
                "required": [
                    "userId"
                ],
                "additionalProperties": false,
                "description": "Custom field value manager object without autogenerated fields"
            },
            "ICustomFieldValueManagerPatch": {
                "type": "array",
                "items": {
                    "type": "object",
                    "properties": {
                        "userId": {
                            "type": "string",
                            "minLength": 1,
                            "description": "User ID in Payhawk"
                        }
                    },
                    "required": [
                        "userId"
                    ],
                    "additionalProperties": false
                },
                "minItems": 1,
                "description": "Custom field value manager array without autogenerated fields"
            },
            "ICustomFieldValueManager": {
                "type": "object",
                "properties": {
                    "userId": {
                        "type": "string",
                        "description": "User ID in Payhawk"
                    },
                    "email": {
                        "type": "string",
                        "description": "User email address in Payhawk"
                    }
                },
                "required": [
                    "userId",
                    "email"
                ],
                "additionalProperties": false,
                "description": "Custom field value manager"
            },
            "ICustomFieldValueManagersResponse": {
                "type": "object",
                "properties": {
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ICustomFieldValueManager"
                        },
                        "description": "Array of ICustomFieldValueManager objects"
                    },
                    "total": {
                        "type": "number",
                        "format": "float",
                        "minimum": 0,
                        "description": "Total count of objects. If using pagination, this is the sum of all pages"
                    }
                },
                "required": [
                    "items",
                    "total"
                ],
                "additionalProperties": false,
                "description": "Response of multiple ICustomFieldValueManager objects"
            },
            "IDepositSender": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the sender"
                    },
                    "iban": {
                        "type": "string",
                        "description": "IBAN of the sender"
                    },
                    "accountNumber": {
                        "type": "string",
                        "description": "Account identifier of the sender"
                    },
                    "swiftCode": {
                        "type": "string",
                        "description": "Swift code of sender's bank"
                    },
                    "sortCode": {
                        "type": "string",
                        "description": "Sort code of sender's bank"
                    }
                },
                "additionalProperties": false,
                "description": "Sender of a fund account deposit"
            },
            "IDeposit": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the deposit"
                    },
                    "amount": {
                        "type": "number",
                        "format": "float",
                        "description": "Amount of the deposit"
                    },
                    "currency": {
                        "type": "string",
                        "description": "Currency of the deposit"
                    },
                    "fundAccountId": {
                        "type": "string",
                        "description": "Identifier of the fund account for the deposit"
                    },
                    "fundAccountType": {
                        "type": "string",
                        "enum": [
                            "debit",
                            "credit",
                            "linked",
                            "linked_card"
                        ],
                        "description": "Type of the fund account for the deposit"
                    },
                    "date": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Date of the deposit"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the deposit"
                    },
                    "sender": {
                        "$ref": "#/components/schemas/IDepositSender"
                    }
                },
                "required": [
                    "id",
                    "amount",
                    "currency",
                    "fundAccountId",
                    "fundAccountType",
                    "date"
                ],
                "additionalProperties": false,
                "description": "Deposit in a fund account"
            },
            "IDepositsResponse": {
                "type": "object",
                "properties": {
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IDeposit"
                        },
                        "description": "Array of IDeposit objects"
                    },
                    "total": {
                        "type": "number",
                        "format": "float",
                        "minimum": 0,
                        "description": "Total count of objects. If using pagination, this is the sum of all pages"
                    }
                },
                "required": [
                    "items",
                    "total"
                ],
                "additionalProperties": false,
                "description": "Response of multiple IDeposit objects"
            },
            "IFile": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the file"
                    },
                    "url": {
                        "type": "string",
                        "description": "Download url of the file"
                    },
                    "contentType": {
                        "type": "string",
                        "description": "Content type of the file"
                    }
                },
                "required": [
                    "id",
                    "url",
                    "contentType"
                ],
                "additionalProperties": false,
                "description": "Expense document file"
            },
            "IDocument": {
                "type": "object",
                "properties": {
                    "documentDate": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Document issue date"
                    },
                    "documentNumber": {
                        "type": "string",
                        "description": "Unique identifier of the document"
                    },
                    "files": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IFile"
                        },
                        "description": "Array of files attached to this document"
                    }
                },
                "required": [
                    "files"
                ],
                "additionalProperties": false,
                "description": "Uploaded document details"
            },
            "IError": {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "Error code"
                    },
                    "message": {
                        "type": "string",
                        "description": "Error details"
                    }
                },
                "required": [
                    "code"
                ],
                "additionalProperties": false,
                "description": "Error object"
            },
            "IExpenseCategory": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the category"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the category"
                    },
                    "fullName": {
                        "type": "string",
                        "description": "The full name of the category showing the name of its parent too. (e.g. Travel / Taxis)"
                    },
                    "parentId": {
                        "type": "string",
                        "description": "Identifier of the parent category"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Date the category was created"
                    }
                },
                "required": [
                    "id"
                ],
                "additionalProperties": false,
                "description": "Expense category object"
            },
            "IReconciliation": {
                "type": "object",
                "properties": {
                    "totalAmount": {
                        "type": "number",
                        "format": "float",
                        "description": "Total amount in the paid currency"
                    },
                    "taxAmount": {
                        "type": "number",
                        "format": "float",
                        "description": "Tax amount in the paid currency"
                    },
                    "currency": {
                        "type": "string",
                        "description": "The paid currency"
                    },
                    "baseTotalAmount": {
                        "type": "number",
                        "format": "float",
                        "description": "Total amount in base currency calculated against the official exchange rate"
                    },
                    "baseTaxAmount": {
                        "type": "number",
                        "format": "float",
                        "description": "Tax amount in base currency calculated against the official exchange rate"
                    },
                    "baseCurrency": {
                        "type": "string",
                        "description": "Base currency in which expenses are reported"
                    },
                    "customFields": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ICustomFieldData"
                        },
                        "description": "Array of custom fields and their values"
                    },
                    "accountCode": {
                        "type": "string",
                        "description": "Account code"
                    },
                    "fxRate": {
                        "type": "number",
                        "format": "float",
                        "description": "Exchange rate to Payhawk base currency"
                    },
                    "fxRateToPaymentCurrency": {
                        "type": "number",
                        "format": "float",
                        "description": "Exchange rate to payment currency, if different than expense currency"
                    }
                },
                "required": [
                    "baseCurrency"
                ],
                "additionalProperties": false,
                "description": "Reconciliation details"
            },
            "INewTaxRate": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the tax rate"
                    },
                    "code": {
                        "type": "string",
                        "description": "Identification code of the tax rate"
                    },
                    "rate": {
                        "type": "number",
                        "format": "float",
                        "minimum": -100,
                        "maximum": 100,
                        "description": "Tax rate value"
                    }
                },
                "required": [
                    "name",
                    "code",
                    "rate"
                ],
                "additionalProperties": false,
                "description": "Tax rate object without autogenerated fields"
            },
            "IAmortization": {
                "type": "object",
                "properties": {
                    "label": {
                        "type": "string",
                        "description": "System Label of the amortization"
                    },
                    "externalId": {
                        "type": "string",
                        "description": "External ID of the amortization"
                    },
                    "startDate": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The start date for an amortizable expense"
                    },
                    "endDate": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The end date of an amortizable expense"
                    }
                },
                "additionalProperties": false,
                "description": "Amortization information"
            },
            "ILineItem": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the line item"
                    },
                    "categoryId": {
                        "type": "string",
                        "description": "Category id of the line item"
                    },
                    "category": {
                        "type": "string",
                        "description": "Category name of the line item"
                    },
                    "reconciliation": {
                        "$ref": "#/components/schemas/IReconciliation"
                    },
                    "taxRate": {
                        "$ref": "#/components/schemas/INewTaxRate"
                    },
                    "note": {
                        "type": "string",
                        "description": "Note for the line item"
                    },
                    "amortization": {
                        "$ref": "#/components/schemas/IAmortization"
                    }
                },
                "required": [
                    "id",
                    "reconciliation"
                ],
                "additionalProperties": false,
                "description": "Line item object of an expense"
            },
            "IExpenseDocument": {
                "type": "object",
                "properties": {
                    "documentDate": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Document issue date"
                    },
                    "documentNumber": {
                        "type": "string",
                        "description": "Unique identifier of the document"
                    },
                    "files": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IFile"
                        },
                        "description": "Array of files attached to this document"
                    },
                    "dueDate": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Payment due date"
                    },
                    "serviceDate": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Date indicating the service period of the document"
                    },
                    "documentType": {
                        "type": "string",
                        "enum": [
                            "receipt",
                            "invoice"
                        ],
                        "description": "Document type"
                    }
                },
                "required": [
                    "files"
                ],
                "additionalProperties": false,
                "description": "Document information for the expense"
            },
            "ISupplierBankAccount": {
                "type": "object",
                "properties": {
                    "paymentScheme": {
                        "type": "string",
                        "enum": [
                            "sepa",
                            "bisera",
                            "faster_payments",
                            "ach",
                            "wise",
                            "none"
                        ],
                        "description": "The name of the payment scheme"
                    },
                    "currency": {
                        "type": "string",
                        "enum": [
                            "EUR",
                            "BGN",
                            "GBP",
                            "USD",
                            "RON",
                            "PLN",
                            "DKK",
                            "AED",
                            "ARS",
                            "AUD",
                            "BDT",
                            "BRL",
                            "BWP",
                            "CAD",
                            "CHF",
                            "CLP",
                            "CNY",
                            "COP",
                            "CRC",
                            "CZK",
                            "EGP",
                            "FJD",
                            "GEL",
                            "GHS",
                            "HKD",
                            "HUF",
                            "IDR",
                            "ILS",
                            "INR",
                            "JPY",
                            "KES",
                            "KRW",
                            "LKR",
                            "MAD",
                            "MXN",
                            "MYR",
                            "NGN",
                            "NOK",
                            "NPR",
                            "NZD",
                            "PHP",
                            "PKR",
                            "RUB",
                            "SEK",
                            "SGD",
                            "THB",
                            "TRY",
                            "TZS",
                            "UAH",
                            "UGX",
                            "UYU",
                            "VND",
                            "XOF",
                            "ZAR",
                            "ZMW"
                        ],
                        "oneOf": [
                            {
                                "enum": [
                                    "EUR",
                                    "GBP",
                                    "USD",
                                    "BGN",
                                    "AED",
                                    "ARS",
                                    "AUD",
                                    "BDT",
                                    "BRL",
                                    "BWP",
                                    "CAD",
                                    "CHF",
                                    "CLP",
                                    "CNY",
                                    "COP",
                                    "CRC",
                                    "CZK",
                                    "DKK",
                                    "EGP",
                                    "FJD",
                                    "GEL",
                                    "GHS",
                                    "HKD",
                                    "HUF",
                                    "IDR",
                                    "ILS",
                                    "INR",
                                    "JPY",
                                    "KES",
                                    "KRW",
                                    "LKR",
                                    "MAD",
                                    "MXN",
                                    "MYR",
                                    "NGN",
                                    "NOK",
                                    "NPR",
                                    "NZD",
                                    "PHP",
                                    "PKR",
                                    "PLN",
                                    "RON",
                                    "RUB",
                                    "SEK",
                                    "SGD",
                                    "THB",
                                    "TRY",
                                    "TZS",
                                    "UAH",
                                    "UGX",
                                    "UYU",
                                    "VND",
                                    "XOF",
                                    "ZAR",
                                    "ZMW"
                                ]
                            }
                        ],
                        "description": "Bank account currency"
                    },
                    "accountHolder": {
                        "type": "string",
                        "description": "The name of the account holder"
                    },
                    "iban": {
                        "type": "string",
                        "anyOf": [
                            {
                                "x-required": true
                            }
                        ],
                        "description": "Bank account IBAN"
                    },
                    "bicSwift": {
                        "type": "string",
                        "anyOf": [
                            {
                                "x-required": true
                            }
                        ],
                        "description": "Bank account SWIFT BIC number"
                    },
                    "accountNumber": {
                        "type": "string",
                        "anyOf": [
                            {
                                "x-required": true
                            }
                        ],
                        "description": "Bank account number"
                    },
                    "routingNumber": {
                        "type": "string",
                        "oneOf": [
                            {
                                "x-required": true
                            }
                        ],
                        "description": "Bank account routing number"
                    },
                    "accountType": {
                        "type": "string",
                        "enum": [
                            "checking",
                            "savings",
                            "general_ledger",
                            "loan"
                        ],
                        "oneOf": [
                            {
                                "x-required": true
                            }
                        ],
                        "description": "Bank account type"
                    },
                    "country": {
                        "type": "string",
                        "oneOf": [
                            {
                                "x-required": true
                            }
                        ],
                        "description": "Account holder address country code"
                    },
                    "city": {
                        "type": "string",
                        "oneOf": [
                            {
                                "x-required": true
                            }
                        ],
                        "description": "Account holder address city"
                    },
                    "postalCode": {
                        "type": "string",
                        "oneOf": [
                            {
                                "x-required": true
                            }
                        ],
                        "description": "Account holder address postal code"
                    },
                    "address": {
                        "type": "string",
                        "oneOf": [
                            {
                                "x-required": true
                            }
                        ],
                        "description": "Account holder address"
                    }
                },
                "required": [
                    "paymentScheme",
                    "currency",
                    "accountHolder"
                ],
                "additionalProperties": false,
                "description": "Supplier bank account details"
            },
            "ISupplierCustomFieldData": {
                "type": "object",
                "properties": {
                    "externalId": {
                        "type": "string",
                        "description": "Unique identifier of the custom field in the external system"
                    },
                    "fieldId": {
                        "type": "string",
                        "oneOf": [
                            {},
                            {
                                "x-required": true
                            }
                        ],
                        "description": "Identifier of the custom field"
                    },
                    "externalSource": {
                        "type": "string",
                        "description": "Unique identifier of the external system the field originates from"
                    },
                    "valueId": {
                        "type": "string",
                        "description": "Selected value from a predefined list"
                    },
                    "valueExternalId": {
                        "type": "string",
                        "description": "Unique identifier of the external system the field originates from for selected value from a fixed list"
                    },
                    "value": {
                        "type": "string",
                        "description": "Free text value. Used for text input custom fields"
                    },
                    "fileId": {
                        "type": "string",
                        "description": "Identifier of the file. Used for file upload custom fields"
                    },
                    "fileName": {
                        "type": "string",
                        "description": "The name of the file. Used for file upload custom fields"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the custom field"
                    },
                    "label": {
                        "type": "string",
                        "description": "Label of the custom field"
                    }
                },
                "required": [
                    "id",
                    "label"
                ],
                "additionalProperties": false,
                "description": "Supplier custom field data object"
            },
            "IExpenseSupplier": {
                "type": "object",
                "properties": {
                    "taxId": {
                        "type": "string",
                        "description": "Tax ID of the supplier company"
                    },
                    "countryCode": {
                        "type": "string",
                        "description": "Short code of supplier's country"
                    },
                    "externalId": {
                        "type": "string",
                        "description": "Supplier's ID in the external system"
                    },
                    "address": {
                        "type": "string",
                        "description": "Address of the supplier company"
                    },
                    "uic": {
                        "type": "string",
                        "description": "Unified identification code of the supplier company"
                    },
                    "vat": {
                        "type": "string",
                        "description": "Tax number of the supplier company"
                    },
                    "contactName": {
                        "type": "string",
                        "description": "Contact name for the supplier"
                    },
                    "contactEmail": {
                        "type": "string",
                        "format": "email",
                        "description": "Contact email for the supplier"
                    },
                    "contactPhone": {
                        "type": "string",
                        "description": "Contact phone the supplier"
                    },
                    "bankAccounts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ISupplierBankAccount"
                        },
                        "maxItems": 1,
                        "description": "Supplier bank account details (Currently only a single bank account per supplier is supported)"
                    },
                    "externalSource": {
                        "type": "string",
                        "description": "Identifier of the external system the supplier originates from"
                    },
                    "customFields": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ISupplierCustomFieldData"
                        },
                        "description": "A list of supplier's custom field"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "active",
                            "archived"
                        ],
                        "description": "The supplier current status"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the supplier"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the supplier company"
                    }
                },
                "additionalProperties": false,
                "description": "Backwards compatible object containing all available information about the supplier for this expense"
            },
            "IExternalLink": {
                "type": "object",
                "properties": {
                    "title": {
                        "type": "string",
                        "description": "Title of the external link"
                    },
                    "url": {
                        "type": "string",
                        "description": "URL of the external link"
                    }
                },
                "required": [
                    "title",
                    "url"
                ],
                "additionalProperties": false,
                "description": "Link to an external system record corresponding to an expense"
            },
            "IExpensePerDiemStop": {
                "type": "object",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "Unique identifier of the category"
                    },
                    "date": {
                        "type": "string",
                        "format": "date-time",
                        "description": "First date in the given location"
                    },
                    "timezone": {
                        "type": "string",
                        "description": "Timezone of the given city"
                    },
                    "countryCode": {
                        "type": "string",
                        "description": "Country code"
                    },
                    "city": {
                        "type": "string",
                        "description": "Name of the city"
                    }
                },
                "required": [
                    "address",
                    "date",
                    "timezone",
                    "countryCode"
                ],
                "additionalProperties": false,
                "description": "Expense Per Diem Stop object"
            },
            "IExpensePerDiemAppliedRule": {
                "type": "object",
                "properties": {
                    "amount": {
                        "type": "number",
                        "format": "float",
                        "description": "Amount"
                    },
                    "currency": {
                        "type": "string",
                        "description": "Currency"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the rule"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "Deduction",
                            "Addition",
                            "Rate"
                        ],
                        "description": "Type of the rule, for example rate or deduction"
                    }
                },
                "required": [
                    "amount",
                    "currency",
                    "name",
                    "type"
                ],
                "additionalProperties": false,
                "description": "Expense Per Diem Applied Rule object"
            },
            "IExpensePerDiemDay": {
                "type": "object",
                "properties": {
                    "city": {
                        "type": "string",
                        "description": "City"
                    },
                    "countryCode": {
                        "type": "string",
                        "description": "Country Code"
                    },
                    "date": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Date"
                    },
                    "timezone": {
                        "type": "string",
                        "description": "Timezone of the given city"
                    },
                    "amount": {
                        "type": "number",
                        "format": "float",
                        "description": "Amount for the given day"
                    },
                    "currency": {
                        "type": "string",
                        "description": "Currency of the given amount"
                    },
                    "appliedRules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IExpensePerDiemAppliedRule"
                        },
                        "description": "The rules applied to the given day"
                    }
                },
                "required": [
                    "countryCode",
                    "date",
                    "timezone",
                    "amount",
                    "currency",
                    "appliedRules"
                ],
                "additionalProperties": false,
                "description": "Expense Per Diem day object"
            },
            "IExpensePerDiem": {
                "type": "object",
                "properties": {
                    "stops": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IExpensePerDiemStop"
                        },
                        "description": "Stops for the given Per Diem expense"
                    },
                    "days": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IExpensePerDiemDay"
                        },
                        "description": "Days covered by the given Per Diem expense"
                    }
                },
                "required": [
                    "stops",
                    "days"
                ],
                "additionalProperties": false,
                "description": "Per Diem information"
            },
            "IExpenseMileageStopCoordinates": {
                "type": "object",
                "properties": {
                    "latitude": {
                        "type": "string",
                        "description": "The latitude of the given route stop"
                    },
                    "longitude": {
                        "type": "string",
                        "description": "The longitude of the given route stop"
                    }
                },
                "required": [
                    "latitude",
                    "longitude"
                ],
                "additionalProperties": false,
                "description": "The coordinates for the given route stop"
            },
            "IExpenseMileageStop": {
                "type": "object",
                "properties": {
                    "label": {
                        "type": "string",
                        "description": "The label for the given route stop"
                    },
                    "coordinates": {
                        "$ref": "#/components/schemas/IExpenseMileageStopCoordinates"
                    }
                },
                "required": [
                    "label",
                    "coordinates"
                ],
                "additionalProperties": false,
                "description": "Expense Mileage Stop object"
            },
            "IExpenseMileageRate": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "enum": [
                            "Flat",
                            "Threshold"
                        ],
                        "description": "The type of the given rate"
                    },
                    "thresholdType": {
                        "type": "string",
                        "enum": [
                            "Accumulating",
                            "PerTrip"
                        ],
                        "description": "The threshold type of the given rate"
                    },
                    "accumulatedMilage": {
                        "type": "number",
                        "format": "float",
                        "description": "The accumulated mileage for a calendar. Does not include the created mileage expense distance"
                    },
                    "thresholdDefinitions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The threshold definitions for the given rate"
                    },
                    "rates": {
                        "type": "object",
                        "properties": {},
                        "additionalProperties": false,
                        "description": "The applied rates"
                    }
                },
                "required": [
                    "type",
                    "rates"
                ],
                "additionalProperties": false,
                "description": "The applied rates for this trip"
            },
            "IExpenseMileage": {
                "type": "object",
                "properties": {
                    "routeStops": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IExpenseMileageStop"
                        },
                        "description": "The route stops for this Mileage expense"
                    },
                    "isRoundTrip": {
                        "type": "boolean",
                        "description": "Is this a round trip"
                    },
                    "distance": {
                        "type": "number",
                        "format": "float",
                        "description": "The distance for this trip"
                    },
                    "distanceUnit": {
                        "type": "string",
                        "enum": [
                            "Kilometers",
                            "Miles"
                        ],
                        "description": "The unit of distance for this trip"
                    },
                    "editedDistance": {
                        "type": "number",
                        "format": "float",
                        "description": "The edited distance for this trip"
                    },
                    "vehicleType": {
                        "type": "string",
                        "description": "The vehicle type for this trip. E.g. car or bike"
                    },
                    "appliedRates": {
                        "$ref": "#/components/schemas/IExpenseMileageRate"
                    }
                },
                "required": [
                    "routeStops",
                    "isRoundTrip",
                    "distance",
                    "distanceUnit",
                    "editedDistance",
                    "vehicleType",
                    "appliedRates"
                ],
                "additionalProperties": false,
                "description": "Mileage information"
            },
            "IExpense": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the expense"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Date the expense was created"
                    },
                    "createdBy": {
                        "$ref": "#/components/schemas/IActor"
                    },
                    "settledAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Date the expense was settled"
                    },
                    "reviewedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Date the expense was reviewed"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "bank",
                            "card",
                            "cash",
                            "cashInAdvance",
                            "mileage",
                            "reimbursable",
                            "perDiem"
                        ],
                        "description": "Type of the expense payment"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "archived",
                            "draft",
                            "ready",
                            "deleted"
                        ],
                        "description": "Status of the expense"
                    },
                    "isPaid": {
                        "type": "boolean",
                        "description": "Indicates if the expense is paid"
                    },
                    "title": {
                        "type": "string",
                        "description": "User-friendly title of the expense"
                    },
                    "category": {
                        "$ref": "#/components/schemas/IExpenseCategory"
                    },
                    "note": {
                        "type": "string",
                        "description": "Note from the cardholder of the expense as submitted by the Payhawk mobile app"
                    },
                    "lineItems": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ILineItem"
                        },
                        "description": "Array of expense's line items"
                    },
                    "reconciliation": {
                        "$ref": "#/components/schemas/IReconciliation"
                    },
                    "taxRate": {
                        "$ref": "#/components/schemas/INewTaxRate"
                    },
                    "document": {
                        "$ref": "#/components/schemas/IExpenseDocument"
                    },
                    "supplier": {
                        "$ref": "#/components/schemas/IExpenseSupplier"
                    },
                    "externalLinks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IExternalLink"
                        },
                        "description": "Array of links to external system records"
                    },
                    "perDiem": {
                        "$ref": "#/components/schemas/IExpensePerDiem"
                    },
                    "mileage": {
                        "$ref": "#/components/schemas/IExpenseMileage"
                    },
                    "amortization": {
                        "$ref": "#/components/schemas/IAmortization"
                    }
                },
                "required": [
                    "id",
                    "createdAt",
                    "createdBy",
                    "type",
                    "status",
                    "isPaid",
                    "title",
                    "lineItems",
                    "reconciliation",
                    "externalLinks"
                ],
                "additionalProperties": false,
                "description": "Payhawk expense object"
            },
            "IExpensePatch": {
                "type": "object",
                "properties": {
                    "externalLinks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IExternalLink"
                        },
                        "description": "Array of links to external system records"
                    }
                },
                "additionalProperties": false,
                "description": "Payhawk expense patch object used for partial update of an expense"
            },
            "IExpensesResponse": {
                "type": "object",
                "properties": {
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IExpense"
                        },
                        "description": "Array of IExpense objects"
                    },
                    "total": {
                        "type": "number",
                        "format": "float",
                        "minimum": 0,
                        "description": "Total count of objects. If using pagination, this is the sum of all pages"
                    }
                },
                "required": [
                    "items",
                    "total"
                ],
                "additionalProperties": false,
                "description": "Response of multiple IExpense objects"
            },
            "IExpenseStatusPatch": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "enum": [
                            "ready",
                            "draft"
                        ],
                        "description": "Status of the expense"
                    }
                },
                "required": [
                    "status"
                ],
                "additionalProperties": false,
                "description": "Updates the status of an expense"
            },
            "IExpenseBankPaymentDetails": {
                "type": "object",
                "properties": {
                    "date": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Date of the payment"
                    },
                    "paymentReference": {
                        "type": "string",
                        "description": "Payment reference"
                    },
                    "accountNumber": {
                        "type": "string",
                        "description": "Bank account IBAN or number"
                    }
                },
                "required": [
                    "date"
                ],
                "additionalProperties": false,
                "description": "Add payment details to Payhawk bank expense and mark it as paid"
            },
            "INewExpenseAmortization": {
                "type": "object",
                "properties": {
                    "label": {
                        "type": "string",
                        "description": "Label of the amortization record"
                    },
                    "externalId": {
                        "type": "string",
                        "minLength": 1,
                        "description": "External ID of the amortization record"
                    }
                },
                "required": [
                    "label"
                ],
                "additionalProperties": false,
                "description": "Expense amortization object"
            },
            "IExpenseAmortization": {
                "type": "object",
                "properties": {
                    "label": {
                        "type": "string",
                        "description": "Label of the amortization record"
                    },
                    "externalId": {
                        "type": "string",
                        "minLength": 1,
                        "description": "External ID of the amortization record"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the amortization record"
                    }
                },
                "required": [
                    "label",
                    "id"
                ],
                "additionalProperties": false,
                "description": "Amortization record"
            },
            "INewExpenseAmortizations": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/INewExpenseAmortization"
                },
                "description": "Array of new amortization records"
            },
            "IExpenseAmortizationsResponse": {
                "type": "object",
                "properties": {
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IExpenseAmortization"
                        },
                        "description": "Array of IExpenseAmortization objects"
                    },
                    "total": {
                        "type": "number",
                        "format": "float",
                        "minimum": 0,
                        "description": "Total count of objects. If using pagination, this is the sum of all pages"
                    }
                },
                "required": [
                    "items",
                    "total"
                ],
                "additionalProperties": false,
                "description": "Response of multiple IExpenseAmortization objects"
            },
            "IExpenseCategoriesResponse": {
                "type": "object",
                "properties": {
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IExpenseCategory"
                        },
                        "description": "Array of IExpenseCategory objects"
                    },
                    "total": {
                        "type": "number",
                        "format": "float",
                        "minimum": 0,
                        "description": "Total count of objects. If using pagination, this is the sum of all pages"
                    }
                },
                "required": [
                    "items",
                    "total"
                ],
                "additionalProperties": false,
                "description": "Response of multiple IExpenseCategory objects"
            },
            "INewExpenseNotification": {
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string",
                        "description": "Notification message"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "error",
                            "info",
                            "warning"
                        ],
                        "description": "Notification type"
                    }
                },
                "required": [
                    "message",
                    "type"
                ],
                "additionalProperties": false,
                "description": "New expense notification message"
            },
            "IExpenseNotification": {
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string",
                        "description": "Notification message"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "error",
                            "info",
                            "warning"
                        ],
                        "description": "Notification type"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the notification"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Date the notification was created"
                    }
                },
                "required": [
                    "message",
                    "type",
                    "id",
                    "createdAt"
                ],
                "additionalProperties": false,
                "description": "Expense notification details"
            },
            "IExpenseNotificationsResponse": {
                "type": "object",
                "properties": {
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IExpenseNotification"
                        },
                        "description": "Array of IExpenseNotification objects"
                    },
                    "total": {
                        "type": "number",
                        "format": "float",
                        "minimum": 0,
                        "description": "Total count of objects. If using pagination, this is the sum of all pages"
                    }
                },
                "required": [
                    "items",
                    "total"
                ],
                "additionalProperties": false,
                "description": "Response of multiple IExpenseNotification objects"
            },
            "IDeletedExpenseNotifications": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "number",
                        "format": "float",
                        "description": "Number of deleted notifications"
                    }
                },
                "required": [
                    "count"
                ],
                "additionalProperties": false,
                "description": "Deleted expense notifications"
            },
            "IExpensePayment": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the payment"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "bank",
                            "card"
                        ],
                        "description": "Type of the payment"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "pending",
                            "settled",
                            "failed",
                            "reverted",
                            "expired"
                        ],
                        "description": "Status of the payment"
                    },
                    "amount": {
                        "type": "number",
                        "format": "float",
                        "description": "Amount of the payment"
                    },
                    "currency": {
                        "type": "string",
                        "description": "Currency of the payment"
                    },
                    "fees": {
                        "$ref": "#/components/schemas/IExpensePaymentFees"
                    },
                    "originalAmount": {
                        "type": "number",
                        "format": "float",
                        "description": "Original amount of the payment"
                    },
                    "originalCurrency": {
                        "type": "string",
                        "description": "Original currency of the payment"
                    },
                    "fundAccountId": {
                        "type": "string",
                        "description": "Unique identifier of payment's fund account"
                    },
                    "fundAccountType": {
                        "type": "string",
                        "enum": [
                            "debit",
                            "credit",
                            "linked",
                            "linked_card"
                        ],
                        "description": "Fund account type, for example debit or credit"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the payment that includes information for the merchant"
                    },
                    "date": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Date of the payment"
                    },
                    "fxRate": {
                        "type": "number",
                        "format": "float",
                        "description": "Currency exchange rate of the payment"
                    },
                    "cardId": {
                        "type": "string",
                        "description": "Id of the card used for payment, empty for bank transfers"
                    },
                    "cardLastDigits": {
                        "type": "string",
                        "description": "Last 4 digits of the card used for payment, empty for bank transfers"
                    },
                    "expenseIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Array with ids of all related expenses"
                    }
                },
                "required": [
                    "id",
                    "type",
                    "status",
                    "amount",
                    "currency",
                    "fees",
                    "originalAmount",
                    "originalCurrency",
                    "fundAccountId",
                    "fundAccountType",
                    "description",
                    "date",
                    "fxRate",
                    "expenseIds"
                ],
                "additionalProperties": false,
                "description": "Expense payment details"
            },
            "IExpensePaymentsResponse": {
                "type": "object",
                "properties": {
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IExpensePayment"
                        },
                        "description": "Array of IExpensePayment objects"
                    },
                    "total": {
                        "type": "number",
                        "format": "float",
                        "minimum": 0,
                        "description": "Total count of objects. If using pagination, this is the sum of all pages"
                    }
                },
                "required": [
                    "items",
                    "total"
                ],
                "additionalProperties": false,
                "description": "Response of multiple IExpensePayment objects"
            },
            "IExpensePaymentDetails": {
                "type": "object",
                "properties": {
                    "currency": {
                        "type": "string",
                        "description": "Payment currency"
                    }
                },
                "additionalProperties": false,
                "description": "Expense payment details object"
            },
            "IExpenseWorkflowStatus": {
                "type": "object",
                "properties": {
                    "approvalStatus": {
                        "type": "string",
                        "enum": [
                            "draft",
                            "pending",
                            "approved",
                            "rejected",
                            "cancelled"
                        ],
                        "description": "Approval status of the expense"
                    },
                    "approvedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Date the expense was last approved"
                    },
                    "approvedBy": {
                        "$ref": "#/components/schemas/IActor"
                    },
                    "reviewedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Date the expense was last reviewed"
                    },
                    "reviewedBy": {
                        "$ref": "#/components/schemas/IActor"
                    }
                },
                "required": [
                    "approvalStatus"
                ],
                "additionalProperties": false,
                "description": "Expense workflow details"
            },
            "INewExternalTeam": {
                "type": "object",
                "properties": {
                    "label": {
                        "type": "string",
                        "description": "Label of the external team"
                    },
                    "externalId": {
                        "type": "string",
                        "description": "Unique identifier of the team in the external system"
                    }
                },
                "required": [
                    "label",
                    "externalId"
                ],
                "additionalProperties": false,
                "description": "External team object without autogenerated fields"
            },
            "IExternalTeam": {
                "type": "object",
                "properties": {
                    "label": {
                        "type": "string",
                        "description": "Label of the external team"
                    },
                    "externalId": {
                        "type": "string",
                        "description": "Unique identifier of the team in the external system"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the external team"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Creation date of the external team"
                    }
                },
                "required": [
                    "label",
                    "externalId",
                    "id",
                    "createdAt"
                ],
                "additionalProperties": false,
                "description": "External team object"
            },
            "INewExternalTeams": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/INewExternalTeam"
                },
                "description": "Array of new external team objects"
            },
            "IExternalTeamsResponse": {
                "type": "object",
                "properties": {
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IExternalTeam"
                        },
                        "description": "Array of IExternalTeam objects"
                    },
                    "total": {
                        "type": "number",
                        "format": "float",
                        "minimum": 0,
                        "description": "Total count of objects. If using pagination, this is the sum of all pages"
                    }
                },
                "required": [
                    "items",
                    "total"
                ],
                "additionalProperties": false,
                "description": "Response of multiple IExternalTeam objects"
            },
            "IFilesResponse": {
                "type": "object",
                "properties": {
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IFile"
                        },
                        "description": "Array of IFile objects"
                    },
                    "total": {
                        "type": "number",
                        "format": "float",
                        "minimum": 0,
                        "description": "Total count of objects. If using pagination, this is the sum of all pages"
                    }
                },
                "required": [
                    "items",
                    "total"
                ],
                "additionalProperties": false,
                "description": "Response of multiple IFile objects"
            },
            "IFundAccount": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the fund account"
                    },
                    "currency": {
                        "type": "string",
                        "description": "Currency of the fund account"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "debit",
                            "credit",
                            "linked",
                            "linked_card"
                        ],
                        "description": "Type of the fund account, for example debit or credit"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "processing",
                            "active",
                            "blocked",
                            "closed"
                        ],
                        "description": "Status of the fund account"
                    }
                },
                "required": [
                    "id",
                    "currency",
                    "type",
                    "status"
                ],
                "additionalProperties": false,
                "description": "Payhawk fund account object"
            },
            "IFundAccountsResponse": {
                "type": "object",
                "properties": {
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IFundAccount"
                        },
                        "description": "Array of IFundAccount objects"
                    },
                    "total": {
                        "type": "number",
                        "format": "float",
                        "minimum": 0,
                        "description": "Total count of objects. If using pagination, this is the sum of all pages"
                    }
                },
                "required": [
                    "items",
                    "total"
                ],
                "additionalProperties": false,
                "description": "Response of multiple IFundAccount objects"
            },
            "IGoodsReceivedNoteItemQuantity": {
                "type": "object",
                "properties": {
                    "purchaseOrderItemId": {
                        "type": "string",
                        "description": "Id of the purchase order item"
                    },
                    "quantity": {
                        "type": "number",
                        "format": "float",
                        "description": "Quantity received of the purchase order item"
                    }
                },
                "required": [
                    "purchaseOrderItemId",
                    "quantity"
                ],
                "additionalProperties": false,
                "description": "Purchase order goods received item quantity"
            },
            "IGoodsReceivedNoteDocument": {
                "type": "object",
                "properties": {
                    "documentDate": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Document issue date"
                    },
                    "documentNumber": {
                        "type": "string",
                        "description": "Unique identifier of the document"
                    },
                    "files": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IFile"
                        },
                        "description": "Array of files attached to this document"
                    }
                },
                "additionalProperties": false,
                "description": "Details of the uploaded document"
            },
            "INewGoodsReceivedNote": {
                "type": "object",
                "properties": {
                    "note": {
                        "type": "string",
                        "description": "Description of the goods received"
                    },
                    "quantities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IGoodsReceivedNoteItemQuantity"
                        },
                        "description": "List of purchase order items and the quantities received"
                    },
                    "document": {
                        "$ref": "#/components/schemas/IGoodsReceivedNoteDocument"
                    }
                },
                "required": [
                    "note",
                    "quantities"
                ],
                "additionalProperties": false,
                "description": "New purchase order goods received note object"
            },
            "IGoodsReceivedNote": {
                "type": "object",
                "properties": {
                    "note": {
                        "type": "string",
                        "description": "Description of the goods received"
                    },
                    "quantities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IGoodsReceivedNoteItemQuantity"
                        },
                        "description": "List of purchase order items and the quantities received"
                    },
                    "document": {
                        "$ref": "#/components/schemas/IGoodsReceivedNoteDocument"
                    },
                    "id": {
                        "type": "string",
                        "description": "Id of the GRN"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Date the GRN was created"
                    }
                },
                "required": [
                    "note",
                    "quantities",
                    "id",
                    "createdAt"
                ],
                "additionalProperties": false,
                "description": "Purchase order goods received note object"
            },
            "IGoodsReceivedNotesResponse": {
                "type": "object",
                "properties": {
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IGoodsReceivedNote"
                        },
                        "description": "Array of IGoodsReceivedNote objects"
                    },
                    "total": {
                        "type": "number",
                        "format": "float",
                        "minimum": 0,
                        "description": "Total count of objects. If using pagination, this is the sum of all pages"
                    }
                },
                "required": [
                    "items",
                    "total"
                ],
                "additionalProperties": false,
                "description": "Response of multiple IGoodsReceivedNote objects"
            },
            "INewInvoiceItem": {
                "type": "object",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the invoice item"
                    },
                    "taxPercentage": {
                        "type": "string",
                        "description": "Tax percentage applied to the invoice item"
                    },
                    "taxAmount": {
                        "type": "string",
                        "description": "Tax amount of the invoice item"
                    },
                    "totalAmount": {
                        "type": "string",
                        "description": "Total amount of the invoice item"
                    }
                },
                "required": [
                    "description",
                    "taxPercentage",
                    "taxAmount",
                    "totalAmount"
                ],
                "additionalProperties": false,
                "description": "Invoice item part of an invoice"
            },
            "INewInvoice": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the invoice"
                    },
                    "provider": {
                        "type": "string",
                        "description": "Provider of the invoice"
                    },
                    "supplierName": {
                        "type": "string",
                        "description": "Supplier of the invoice"
                    },
                    "supplierVat": {
                        "type": "string",
                        "description": "VAT number of invoice's supplier"
                    },
                    "supplierCountry": {
                        "type": "string",
                        "description": "Country of invoice's supplier"
                    },
                    "totalAmount": {
                        "type": "number",
                        "format": "float",
                        "description": "Total amount of the invoice"
                    },
                    "taxAmount": {
                        "type": "number",
                        "format": "float",
                        "description": "Tax amount of the invoice"
                    },
                    "currency": {
                        "type": "string",
                        "description": "Currency of the invoice"
                    },
                    "paidAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Payment date of the invoice"
                    },
                    "documentDate": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Document issue date"
                    },
                    "documentNumber": {
                        "type": "string",
                        "description": "Document number"
                    },
                    "reference": {
                        "type": "string",
                        "description": "Additional reference of the invoice"
                    },
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/INewInvoiceItem"
                        },
                        "description": "Items of the invoice"
                    }
                },
                "required": [
                    "id",
                    "provider",
                    "supplierName",
                    "totalAmount",
                    "taxAmount",
                    "currency",
                    "paidAt",
                    "documentDate"
                ],
                "additionalProperties": false,
                "description": "Invoice metadata object submitted along with an invoice file"
            },
            "INewInvoiceRequest": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the invoice"
                    },
                    "provider": {
                        "type": "string",
                        "description": "Provider of the invoice"
                    },
                    "supplierName": {
                        "type": "string",
                        "description": "Supplier of the invoice"
                    },
                    "supplierVat": {
                        "type": "string",
                        "description": "VAT number of invoice's supplier"
                    },
                    "supplierCountry": {
                        "type": "string",
                        "description": "Country of invoice's supplier"
                    },
                    "totalAmount": {
                        "type": "number",
                        "format": "float",
                        "description": "Total amount of the invoice"
                    },
                    "taxAmount": {
                        "type": "number",
                        "format": "float",
                        "description": "Tax amount of the invoice"
                    },
                    "currency": {
                        "type": "string",
                        "description": "Currency of the invoice"
                    },
                    "paidAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Payment date of the invoice"
                    },
                    "documentDate": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Document issue date"
                    },
                    "documentNumber": {
                        "type": "string",
                        "description": "Document number"
                    },
                    "reference": {
                        "type": "string",
                        "description": "Additional reference of the invoice"
                    },
                    "items": {
                        "type": "string",
                        "description": "Array of `INewInvoiceItem` objects in a JSON-stringified form, suitable for form-data request"
                    },
                    "file": {
                        "type": "string",
                        "format": "binary",
                        "description": "Invoice document to upload"
                    }
                },
                "required": [
                    "id",
                    "provider",
                    "supplierName",
                    "totalAmount",
                    "taxAmount",
                    "currency",
                    "paidAt",
                    "documentDate",
                    "file"
                ],
                "additionalProperties": false,
                "description": "Invoice upload request payload consisting of a file and additional invoice metadata"
            },
            "ILinkedCardFundAccount": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the linked card fund account"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the linked card fund account"
                    },
                    "currency": {
                        "type": "string",
                        "description": "Currency of the linked card fund account"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "active",
                            "closed"
                        ],
                        "description": "Status of the linked card fund account"
                    },
                    "provider": {
                        "type": "string",
                        "enum": [
                            "amex"
                        ],
                        "description": "Underlying provider of the linked card fund account"
                    }
                },
                "required": [
                    "id",
                    "currency",
                    "status",
                    "provider"
                ],
                "additionalProperties": false,
                "description": "Payhawk linked card fund account object"
            },
            "ILinkedCardFundAccountsResponse": {
                "type": "object",
                "properties": {
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ILinkedCardFundAccount"
                        },
                        "description": "Array of ILinkedCardFundAccount objects"
                    },
                    "total": {
                        "type": "number",
                        "format": "float",
                        "minimum": 0,
                        "description": "Total count of objects. If using pagination, this is the sum of all pages"
                    }
                },
                "required": [
                    "items",
                    "total"
                ],
                "additionalProperties": false,
                "description": "Response of multiple ILinkedCardFundAccount objects"
            },
            "ILinkedFundAccount": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the linked fund account"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the linked fund account"
                    },
                    "currency": {
                        "type": "string",
                        "description": "Currency of the linked fund account"
                    },
                    "mask": {
                        "type": "string",
                        "description": "Portion of the linked fund account number that helps identify the linked fund account"
                    },
                    "provider": {
                        "type": "string",
                        "enum": [
                            "plaid",
                            "yapily"
                        ],
                        "description": "Underlying provider for the linked fund account"
                    }
                },
                "required": [
                    "id",
                    "provider"
                ],
                "additionalProperties": false,
                "description": "Payhawk linked fund account object"
            },
            "ILinkedFundAccountsResponse": {
                "type": "object",
                "properties": {
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ILinkedFundAccount"
                        },
                        "description": "Array of ILinkedFundAccount objects"
                    },
                    "total": {
                        "type": "number",
                        "format": "float",
                        "minimum": 0,
                        "description": "Total count of objects. If using pagination, this is the sum of all pages"
                    }
                },
                "required": [
                    "items",
                    "total"
                ],
                "additionalProperties": false,
                "description": "Response of multiple ILinkedFundAccount objects"
            },
            "IObjectReference": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the object"
                    }
                },
                "required": [
                    "id"
                ],
                "additionalProperties": false,
                "description": "Expense category of the purchase order item"
            },
            "INewPurchaseOrderItem": {
                "type": "object",
                "properties": {
                    "units": {
                        "type": "string",
                        "enum": [
                            "pieces",
                            "hours"
                        ],
                        "description": "Unit of the purchase order item"
                    },
                    "expenseCategory": {
                        "$ref": "#/components/schemas/IObjectReference"
                    },
                    "expenseCustomFields": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ICustomFieldData"
                        },
                        "description": "Custom fields of the purchase order item"
                    },
                    "amortization": {
                        "$ref": "#/components/schemas/IAmortization"
                    },
                    "description": {
                        "type": "string",
                        "description": "User-friendly description of the purchase order item"
                    },
                    "purchasedQuantity": {
                        "type": "number",
                        "format": "float",
                        "description": "Quantity of the purchase order item"
                    },
                    "unitPrice": {
                        "type": "number",
                        "format": "float",
                        "description": "Price of the purchase order item unit"
                    }
                },
                "required": [
                    "description",
                    "purchasedQuantity",
                    "unitPrice"
                ],
                "additionalProperties": false,
                "description": "Purchase order item object"
            },
            "INewPurchaseOrder": {
                "type": "object",
                "properties": {
                    "note": {
                        "type": "string",
                        "description": "Note from the creator of the purchase order"
                    },
                    "createdBy": {
                        "$ref": "#/components/schemas/IObjectReference"
                    },
                    "supplier": {
                        "$ref": "#/components/schemas/IObjectReference"
                    },
                    "purchaseOrderNumber": {
                        "type": "string",
                        "description": "Purchase Order Number. If not passed, it is autogenerated based on the settings set for the account on approval."
                    },
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/INewPurchaseOrderItem"
                        },
                        "maxItems": 100,
                        "description": "List of purchase order items"
                    }
                },
                "required": [
                    "note",
                    "createdBy"
                ],
                "additionalProperties": false,
                "description": "New purchase order object"
            },
            "ISupplier": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the supplier company"
                    },
                    "taxId": {
                        "type": "string",
                        "description": "Tax ID of the supplier company"
                    },
                    "countryCode": {
                        "type": "string",
                        "description": "Short code of supplier's country"
                    },
                    "externalId": {
                        "type": "string",
                        "description": "Supplier's ID in the external system"
                    },
                    "address": {
                        "type": "string",
                        "description": "Address of the supplier company"
                    },
                    "uic": {
                        "type": "string",
                        "description": "Unified identification code of the supplier company"
                    },
                    "vat": {
                        "type": "string",
                        "description": "Tax number of the supplier company"
                    },
                    "contactName": {
                        "type": "string",
                        "description": "Contact name for the supplier"
                    },
                    "contactEmail": {
                        "type": "string",
                        "format": "email",
                        "description": "Contact email for the supplier"
                    },
                    "contactPhone": {
                        "type": "string",
                        "description": "Contact phone the supplier"
                    },
                    "bankAccounts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ISupplierBankAccount"
                        },
                        "maxItems": 1,
                        "description": "Supplier bank account details (Currently only a single bank account per supplier is supported)"
                    },
                    "externalSource": {
                        "type": "string",
                        "description": "Identifier of the external system the supplier originates from"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the supplier"
                    },
                    "customFields": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ISupplierCustomFieldData"
                        },
                        "description": "A list of supplier's custom field"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "active",
                            "archived"
                        ],
                        "description": "The supplier current status"
                    }
                },
                "required": [
                    "name",
                    "id"
                ],
                "additionalProperties": false,
                "description": "Supplier details"
            },
            "IPurchaseOrderItem": {
                "type": "object",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "User-friendly description of the purchase order item"
                    },
                    "units": {
                        "type": "string",
                        "enum": [
                            "pieces",
                            "hours"
                        ],
                        "description": "Unit of the purchase order item"
                    },
                    "purchasedQuantity": {
                        "type": "number",
                        "format": "float",
                        "description": "Quantity of the purchase order item"
                    },
                    "unitPrice": {
                        "type": "number",
                        "format": "float",
                        "description": "Price of the purchase order item unit"
                    },
                    "expenseCategory": {
                        "$ref": "#/components/schemas/IObjectReference"
                    },
                    "expenseCustomFields": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ICustomFieldData"
                        },
                        "description": "Custom fields of the purchase order item"
                    },
                    "amortization": {
                        "$ref": "#/components/schemas/IAmortization"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the purchase order"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Date the purchase order was created"
                    },
                    "totalPurchasedAmount": {
                        "type": "number",
                        "format": "float",
                        "description": "Total amount of the purchase order item"
                    },
                    "quantityStatus": {
                        "type": "string",
                        "enum": [
                            "none",
                            "partial",
                            "full",
                            "discrepancy"
                        ],
                        "description": "Status of the purchase order item quantity"
                    },
                    "receivedQuantity": {
                        "type": "number",
                        "format": "float",
                        "description": "Aggregated amount of all receipt notes, representing the total received items"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "normal",
                            "receipt_note"
                        ],
                        "description": "Type of the purchase order item"
                    }
                },
                "required": [
                    "id",
                    "createdAt",
                    "totalPurchasedAmount"
                ],
                "additionalProperties": false,
                "description": "Purchase order item object"
            },
            "IPurchaseOrder": {
                "type": "object",
                "properties": {
                    "note": {
                        "type": "string",
                        "description": "Note from the creator of the purchase order"
                    },
                    "purchaseOrderNumber": {
                        "type": "string",
                        "description": "Purchase Order Number. If not passed, it is autogenerated based on the settings set for the account on approval."
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the purchase order"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Date the purchase order was created"
                    },
                    "modifiedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Date the purchase order was last modified"
                    },
                    "title": {
                        "type": "string",
                        "description": "User-friendly title of the purchase order"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "draft",
                            "pending_approval",
                            "open",
                            "returned",
                            "rejected",
                            "closed"
                        ],
                        "description": "Status of the purchase order"
                    },
                    "supplier": {
                        "$ref": "#/components/schemas/ISupplier"
                    },
                    "currency": {
                        "type": "string",
                        "enum": [
                            "AED",
                            "AFN",
                            "ALL",
                            "AMD",
                            "ANG",
                            "AOA",
                            "ARS",
                            "AUD",
                            "AWG",
                            "AZN",
                            "BAM",
                            "BBD",
                            "BDT",
                            "BGN",
                            "BHD",
                            "BIF",
                            "BMD",
                            "BND",
                            "BOB",
                            "BRL",
                            "BSD",
                            "BTN",
                            "BWP",
                            "BYN",
                            "BZD",
                            "CAD",
                            "CDF",
                            "CHF",
                            "CLP",
                            "CNY",
                            "COP",
                            "CRC",
                            "CUC",
                            "CUP",
                            "CVE",
                            "CZK",
                            "DJF",
                            "DKK",
                            "DOP",
                            "DZD",
                            "EGP",
                            "ERN",
                            "ETB",
                            "EUR",
                            "FJD",
                            "FKP",
                            "GBP",
                            "GEL",
                            "GGP",
                            "GHS",
                            "GIP",
                            "GMD",
                            "GNF",
                            "GTQ",
                            "GYD",
                            "HKD",
                            "HNL",
                            "HRK",
                            "HTG",
                            "HUF",
                            "IDR",
                            "ILS",
                            "IMP",
                            "INR",
                            "IQD",
                            "IRR",
                            "ISK",
                            "JEP",
                            "JMD",
                            "JOD",
                            "JPY",
                            "KES",
                            "KGS",
                            "KHR",
                            "KID",
                            "KMF",
                            "KRW",
                            "KWD",
                            "KYD",
                            "KZT",
                            "LAK",
                            "LBP",
                            "LKR",
                            "LRD",
                            "LSL",
                            "LTL",
                            "LVL",
                            "LYD",
                            "MAD",
                            "MDL",
                            "MGA",
                            "MKD",
                            "MMK",
                            "MNT",
                            "MOP",
                            "MRO",
                            "MUR",
                            "MVR",
                            "MWK",
                            "MXN",
                            "MYR",
                            "MZN",
                            "NAD",
                            "NGN",
                            "NIO",
                            "NOK",
                            "NPR",
                            "NZD",
                            "OMR",
                            "PAB",
                            "PEN",
                            "PGK",
                            "PHP",
                            "PKR",
                            "PLN",
                            "PYG",
                            "QAR",
                            "RON",
                            "RSD",
                            "RUB",
                            "RWF",
                            "SAR",
                            "SBD",
                            "SCR",
                            "SDG",
                            "SEK",
                            "SGD",
                            "SHP",
                            "SLL",
                            "SOS",
                            "SRD",
                            "SSP",
                            "STD",
                            "SVC",
                            "SYP",
                            "SZL",
                            "THB",
                            "TJS",
                            "TMT",
                            "TND",
                            "TOP",
                            "TRY",
                            "TTD",
                            "TWD",
                            "TZS",
                            "UAH",
                            "UGX",
                            "USD",
                            "UYU",
                            "UZS",
                            "VEF",
                            "VND",
                            "VUV",
                            "WST",
                            "XAF",
                            "XCD",
                            "XOF",
                            "XPF",
                            "YER",
                            "ZAR",
                            "ZMW",
                            "ZWL"
                        ],
                        "description": "Currency of the purchase order"
                    },
                    "approvalProcessState": {
                        "type": "object",
                        "properties": {
                            "modifiedBy": {
                                "$ref": "#/components/schemas/IBasicActor"
                            },
                            "date": {
                                "type": "string",
                                "format": "date-time",
                                "description": "Date on which the purchase order has been approved/rejected/returned."
                            },
                            "reason": {
                                "type": "string",
                                "description": "Reason for rejecting/returning the purchase order."
                            }
                        },
                        "required": [
                            "modifiedBy",
                            "date"
                        ],
                        "additionalProperties": false,
                        "description": "Based on the status this object may represent either the person who approved the PO or the one who rejected/returned it."
                    },
                    "createdBy": {
                        "$ref": "#/components/schemas/IBasicActor"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "normal",
                            "receipt_note"
                        ],
                        "description": "Item type of the purchase order"
                    },
                    "purchasedAmount": {
                        "type": "number",
                        "format": "float",
                        "description": "The sum of all purchase order items purchaseAmount property."
                    },
                    "invoicedAmount": {
                        "type": "number",
                        "format": "float",
                        "description": "The total invoiced amount (sum of all expenses total amounts) in the currency of the purchase order."
                    },
                    "invoicedAmountStatus": {
                        "type": "string",
                        "enum": [
                            "none",
                            "partial",
                            "matched",
                            "discrepancy"
                        ],
                        "description": "Represent the difference between the purchase order total amount and the invoiced amount."
                    },
                    "receivedQuantityStatus": {
                        "type": "string",
                        "enum": [
                            "none",
                            "partial",
                            "full",
                            "discrepancy"
                        ],
                        "description": "Represents the difference between the expected quantity and the received quantity for the purchase order. Applicable only when the PO is of type `receipt_note`."
                    },
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IPurchaseOrderItem"
                        },
                        "description": "List of purchase order items"
                    }
                },
                "required": [
                    "note",
                    "id",
                    "createdAt",
                    "modifiedAt",
                    "title",
                    "status",
                    "createdBy",
                    "type",
                    "purchasedAmount",
                    "invoicedAmount",
                    "invoicedAmountStatus",
                    "items"
                ],
                "additionalProperties": false,
                "description": "Purchase order object"
            },
            "IPurchaseOrdersResponse": {
                "type": "object",
                "properties": {
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IPurchaseOrder"
                        },
                        "description": "Array of IPurchaseOrder objects"
                    },
                    "total": {
                        "type": "number",
                        "format": "float",
                        "minimum": 0,
                        "description": "Total count of objects. If using pagination, this is the sum of all pages"
                    }
                },
                "required": [
                    "items",
                    "total"
                ],
                "additionalProperties": false,
                "description": "Response of multiple IPurchaseOrder objects"
            },
            "IPurchaseOrderPatch": {
                "type": "object",
                "properties": {
                    "note": {
                        "type": "string",
                        "description": "Note from the creator of the purchase order"
                    },
                    "supplier": {
                        "$ref": "#/components/schemas/IObjectReference"
                    },
                    "currency": {
                        "type": "string",
                        "enum": [
                            "AED",
                            "AFN",
                            "ALL",
                            "AMD",
                            "ANG",
                            "AOA",
                            "ARS",
                            "AUD",
                            "AWG",
                            "AZN",
                            "BAM",
                            "BBD",
                            "BDT",
                            "BGN",
                            "BHD",
                            "BIF",
                            "BMD",
                            "BND",
                            "BOB",
                            "BRL",
                            "BSD",
                            "BTN",
                            "BWP",
                            "BYN",
                            "BZD",
                            "CAD",
                            "CDF",
                            "CHF",
                            "CLP",
                            "CNY",
                            "COP",
                            "CRC",
                            "CUC",
                            "CUP",
                            "CVE",
                            "CZK",
                            "DJF",
                            "DKK",
                            "DOP",
                            "DZD",
                            "EGP",
                            "ERN",
                            "ETB",
                            "EUR",
                            "FJD",
                            "FKP",
                            "GBP",
                            "GEL",
                            "GGP",
                            "GHS",
                            "GIP",
                            "GMD",
                            "GNF",
                            "GTQ",
                            "GYD",
                            "HKD",
                            "HNL",
                            "HRK",
                            "HTG",
                            "HUF",
                            "IDR",
                            "ILS",
                            "IMP",
                            "INR",
                            "IQD",
                            "IRR",
                            "ISK",
                            "JEP",
                            "JMD",
                            "JOD",
                            "JPY",
                            "KES",
                            "KGS",
                            "KHR",
                            "KID",
                            "KMF",
                            "KRW",
                            "KWD",
                            "KYD",
                            "KZT",
                            "LAK",
                            "LBP",
                            "LKR",
                            "LRD",
                            "LSL",
                            "LTL",
                            "LVL",
                            "LYD",
                            "MAD",
                            "MDL",
                            "MGA",
                            "MKD",
                            "MMK",
                            "MNT",
                            "MOP",
                            "MRO",
                            "MUR",
                            "MVR",
                            "MWK",
                            "MXN",
                            "MYR",
                            "MZN",
                            "NAD",
                            "NGN",
                            "NIO",
                            "NOK",
                            "NPR",
                            "NZD",
                            "OMR",
                            "PAB",
                            "PEN",
                            "PGK",
                            "PHP",
                            "PKR",
                            "PLN",
                            "PYG",
                            "QAR",
                            "RON",
                            "RSD",
                            "RUB",
                            "RWF",
                            "SAR",
                            "SBD",
                            "SCR",
                            "SDG",
                            "SEK",
                            "SGD",
                            "SHP",
                            "SLL",
                            "SOS",
                            "SRD",
                            "SSP",
                            "STD",
                            "SVC",
                            "SYP",
                            "SZL",
                            "THB",
                            "TJS",
                            "TMT",
                            "TND",
                            "TOP",
                            "TRY",
                            "TTD",
                            "TWD",
                            "TZS",
                            "UAH",
                            "UGX",
                            "USD",
                            "UYU",
                            "UZS",
                            "VEF",
                            "VND",
                            "VUV",
                            "WST",
                            "XAF",
                            "XCD",
                            "XOF",
                            "XPF",
                            "YER",
                            "ZAR",
                            "ZMW",
                            "ZWL"
                        ],
                        "description": "Currency of the purchase order"
                    }
                },
                "additionalProperties": false,
                "description": "Purchase order item update request"
            },
            "IPurchaseOrderItemsResponse": {
                "type": "object",
                "properties": {
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IPurchaseOrderItem"
                        },
                        "description": "Array of IPurchaseOrderItem objects"
                    },
                    "total": {
                        "type": "number",
                        "format": "float",
                        "minimum": 0,
                        "description": "Total count of objects. If using pagination, this is the sum of all pages"
                    }
                },
                "required": [
                    "items",
                    "total"
                ],
                "additionalProperties": false,
                "description": "Response of multiple IPurchaseOrderItem objects"
            },
            "IPurchaseOrderItemPatch": {
                "type": "object",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "User-friendly description of the purchase order item"
                    },
                    "units": {
                        "type": "string",
                        "enum": [
                            "pieces",
                            "hours"
                        ],
                        "description": "Unit of the purchase order item"
                    },
                    "purchasedQuantity": {
                        "type": "number",
                        "format": "float",
                        "description": "Quantity of the purchase order item"
                    },
                    "unitPrice": {
                        "type": "number",
                        "format": "float",
                        "description": "Price of the purchase order item unit"
                    },
                    "expenseCategory": {
                        "$ref": "#/components/schemas/IObjectReference"
                    },
                    "expenseCustomFields": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ICustomFieldData"
                        },
                        "description": "Custom fields of the purchase order item"
                    },
                    "amortization": {
                        "$ref": "#/components/schemas/IAmortization"
                    }
                },
                "additionalProperties": false,
                "description": "Purchase order item update request"
            },
            "INewSupplierCustomFieldData": {
                "type": "object",
                "properties": {
                    "externalId": {
                        "type": "string",
                        "description": "Unique identifier of the custom field in the external system"
                    },
                    "fieldId": {
                        "type": "string",
                        "oneOf": [
                            {},
                            {
                                "x-required": true
                            }
                        ],
                        "description": "Identifier of the custom field"
                    },
                    "externalSource": {
                        "type": "string",
                        "description": "Unique identifier of the external system the field originates from"
                    },
                    "valueId": {
                        "type": "string",
                        "description": "Selected value from a predefined list"
                    },
                    "valueExternalId": {
                        "type": "string",
                        "description": "Unique identifier of the external system the field originates from for selected value from a fixed list"
                    },
                    "value": {
                        "type": "string",
                        "description": "Free text value. Used for text input custom fields"
                    },
                    "fileId": {
                        "type": "string",
                        "description": "Identifier of the file. Used for file upload custom fields"
                    },
                    "fileName": {
                        "type": "string",
                        "description": "The name of the file. Used for file upload custom fields"
                    }
                },
                "additionalProperties": false,
                "description": "New Supplier custom field data object"
            },
            "INewSupplier": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the supplier company"
                    },
                    "taxId": {
                        "type": "string",
                        "description": "Tax ID of the supplier company"
                    },
                    "countryCode": {
                        "type": "string",
                        "description": "Short code of supplier's country"
                    },
                    "externalId": {
                        "type": "string",
                        "description": "Supplier's ID in the external system"
                    },
                    "customFields": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/INewSupplierCustomFieldData"
                        },
                        "description": "A list of supplier's custom field"
                    },
                    "address": {
                        "type": "string",
                        "description": "Address of the supplier company"
                    },
                    "uic": {
                        "type": "string",
                        "description": "Unified identification code of the supplier company"
                    },
                    "vat": {
                        "type": "string",
                        "description": "Tax number of the supplier company"
                    },
                    "contactName": {
                        "type": "string",
                        "description": "Contact name for the supplier"
                    },
                    "contactEmail": {
                        "type": "string",
                        "format": "email",
                        "description": "Contact email for the supplier"
                    },
                    "contactPhone": {
                        "type": "string",
                        "description": "Contact phone the supplier"
                    },
                    "bankAccounts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ISupplierBankAccount"
                        },
                        "maxItems": 1,
                        "description": "Supplier bank account details (Currently only a single bank account per supplier is supported)"
                    }
                },
                "required": [
                    "name"
                ],
                "additionalProperties": false,
                "description": "New Supplier company details"
            },
            "INewExternalSupplier": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the supplier company"
                    },
                    "taxId": {
                        "type": "string",
                        "description": "Tax ID of the supplier company"
                    },
                    "countryCode": {
                        "type": "string",
                        "description": "Short code of supplier's country"
                    },
                    "externalId": {
                        "type": "string",
                        "description": "Supplier's ID in the external system"
                    },
                    "customFields": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/INewSupplierCustomFieldData"
                        },
                        "description": "A list of supplier's custom field"
                    },
                    "address": {
                        "type": "string",
                        "description": "Address of the supplier company"
                    },
                    "uic": {
                        "type": "string",
                        "description": "Unified identification code of the supplier company"
                    },
                    "vat": {
                        "type": "string",
                        "description": "Tax number of the supplier company"
                    },
                    "contactName": {
                        "type": "string",
                        "description": "Contact name for the supplier"
                    },
                    "contactEmail": {
                        "type": "string",
                        "format": "email",
                        "description": "Contact email for the supplier"
                    },
                    "contactPhone": {
                        "type": "string",
                        "description": "Contact phone the supplier"
                    },
                    "bankAccounts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ISupplierBankAccount"
                        },
                        "maxItems": 1,
                        "description": "Supplier bank account details (Currently only a single bank account per supplier is supported)"
                    },
                    "externalSource": {
                        "type": "string",
                        "description": "Identifier of the external system the supplier originates from"
                    }
                },
                "required": [
                    "name"
                ],
                "additionalProperties": false,
                "description": "New external supplier company details"
            },
            "ISupplierPatch": {
                "type": "object",
                "properties": {
                    "taxId": {
                        "type": "string",
                        "description": "Tax ID of the supplier company"
                    },
                    "countryCode": {
                        "type": "string",
                        "description": "Short code of supplier's country"
                    },
                    "externalId": {
                        "type": "string",
                        "description": "Supplier's ID in the external system"
                    },
                    "customFields": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/INewSupplierCustomFieldData"
                        },
                        "description": "A list of supplier's custom field"
                    },
                    "address": {
                        "type": "string",
                        "description": "Address of the supplier company"
                    },
                    "uic": {
                        "type": "string",
                        "description": "Unified identification code of the supplier company"
                    },
                    "vat": {
                        "type": "string",
                        "description": "Tax number of the supplier company"
                    },
                    "contactName": {
                        "type": "string",
                        "description": "Contact name for the supplier"
                    },
                    "contactEmail": {
                        "type": "string",
                        "format": "email",
                        "description": "Contact email for the supplier"
                    },
                    "contactPhone": {
                        "type": "string",
                        "description": "Contact phone the supplier"
                    },
                    "bankAccounts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ISupplierBankAccount"
                        },
                        "maxItems": 1,
                        "description": "Supplier bank account details (Currently only a single bank account per supplier is supported)"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the supplier company"
                    },
                    "externalSource": {
                        "type": "string",
                        "description": "Identifier of the external system the suppliers originate from"
                    },
                    "auditNote": {
                        "type": "string",
                        "description": "Optional audit note for the change"
                    }
                },
                "additionalProperties": false,
                "description": "Supplier updatable details"
            },
            "ISupplierStatusPatch": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "enum": [
                            "active",
                            "archived"
                        ],
                        "description": "The new status of the supplier"
                    }
                },
                "required": [
                    "status"
                ],
                "additionalProperties": false,
                "description": "Supplier status update"
            },
            "INewExternalSuppliers": {
                "type": "object",
                "properties": {
                    "externalSource": {
                        "type": "string",
                        "description": "Identifier of the external system the suppliers originate from"
                    },
                    "suppliers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/INewExternalSupplier"
                        }
                    }
                },
                "required": [
                    "externalSource",
                    "suppliers"
                ],
                "additionalProperties": false,
                "description": "Array of new suppliers from a given external source without autogenerated fields"
            },
            "ISuppliersResponse": {
                "type": "object",
                "properties": {
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ISupplier"
                        },
                        "description": "Array of ISupplier objects"
                    },
                    "total": {
                        "type": "number",
                        "format": "float",
                        "minimum": 0,
                        "description": "Total count of objects. If using pagination, this is the sum of all pages"
                    }
                },
                "required": [
                    "items",
                    "total"
                ],
                "additionalProperties": false,
                "description": "Response of multiple ISupplier objects"
            },
            "INewSupplierCustomFieldValue": {
                "type": "object",
                "properties": {
                    "label": {
                        "type": "string",
                        "description": "Label of the custom field value"
                    },
                    "externalId": {
                        "type": "string",
                        "nullable": true,
                        "description": "Unique identifier of the custom field value in the external system"
                    }
                },
                "required": [
                    "label"
                ],
                "additionalProperties": false
            },
            "INewSupplierCustomField": {
                "type": "object",
                "properties": {
                    "label": {
                        "type": "string",
                        "description": "Label of the custom field"
                    },
                    "externalId": {
                        "type": "string",
                        "nullable": true,
                        "description": "Unique identifier of the custom field in the external system"
                    },
                    "isRequired": {
                        "type": "boolean",
                        "description": "Indicates if the custom field is always required"
                    },
                    "isSystem": {
                        "type": "boolean",
                        "description": "Indicates if the custom field can be edited"
                    },
                    "externalSource": {
                        "type": "string",
                        "nullable": true,
                        "description": "Unique identifier of the external system"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "fixed_list",
                            "text",
                            "file_upload"
                        ],
                        "description": "Type of the custom field value - free text, a predefined list or a file uploaded previously on Payhawk' platform"
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/INewSupplierCustomFieldValue"
                        },
                        "description": "List of predefined values to choose from"
                    }
                },
                "required": [
                    "label",
                    "type"
                ],
                "additionalProperties": false
            },
            "INewSupplierCustomFields": {
                "type": "object",
                "properties": {
                    "externalSource": {
                        "type": "string",
                        "description": "Identifier of the external system the supplier custom fields originate from"
                    },
                    "customFields": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/INewSupplierCustomField"
                        }
                    }
                },
                "required": [
                    "externalSource",
                    "customFields"
                ],
                "additionalProperties": false,
                "description": "Array of supplier custom field objects without autogenerated fields"
            },
            "ISupplierCustomFieldValue": {
                "type": "object",
                "properties": {
                    "label": {
                        "type": "string",
                        "description": "Label of the custom field value"
                    },
                    "externalId": {
                        "type": "string",
                        "nullable": true,
                        "description": "Unique identifier of the custom field value in the external system"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the custom field"
                    }
                },
                "required": [
                    "label",
                    "id"
                ],
                "additionalProperties": false,
                "description": "Supplier custom field value"
            },
            "ISupplierCustomField": {
                "type": "object",
                "properties": {
                    "label": {
                        "type": "string",
                        "description": "Label of the custom field"
                    },
                    "externalId": {
                        "type": "string",
                        "nullable": true,
                        "description": "Unique identifier of the custom field in the external system"
                    },
                    "isRequired": {
                        "type": "boolean",
                        "description": "Indicates if the custom field is always required"
                    },
                    "isSystem": {
                        "type": "boolean",
                        "description": "Indicates if the custom field can be edited"
                    },
                    "externalSource": {
                        "type": "string",
                        "nullable": true,
                        "description": "Unique identifier of the external system"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "fixed_list",
                            "text",
                            "file_upload"
                        ],
                        "description": "Type of the custom field value - free text, a predefined list or a file uploaded previously on Payhawk' platform"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the supplier custom field"
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ISupplierCustomFieldValue"
                        },
                        "description": "List of predefined values to choose from"
                    }
                },
                "required": [
                    "label",
                    "type",
                    "id"
                ],
                "additionalProperties": false,
                "description": "Supplier custom field object"
            },
            "ISupplierCustomFieldsResponse": {
                "type": "object",
                "properties": {
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ISupplierCustomField"
                        },
                        "description": "Array of ISupplierCustomField objects"
                    },
                    "total": {
                        "type": "number",
                        "format": "float",
                        "minimum": 0,
                        "description": "Total count of objects. If using pagination, this is the sum of all pages"
                    }
                },
                "required": [
                    "items",
                    "total"
                ],
                "additionalProperties": false,
                "description": "Response of multiple ISupplierCustomField objects"
            },
            "ITaxRate": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the tax rate"
                    },
                    "code": {
                        "type": "string",
                        "description": "Identification code of the tax rate"
                    },
                    "rate": {
                        "type": "number",
                        "format": "float",
                        "minimum": -100,
                        "maximum": 100,
                        "description": "Tax rate value"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the tax rate"
                    }
                },
                "required": [
                    "name",
                    "code",
                    "rate",
                    "id"
                ],
                "additionalProperties": false,
                "description": "Tax rate object"
            },
            "INewTaxRates": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/INewTaxRate"
                },
                "description": "Array of new tax rate objects"
            },
            "ITaxRatesResponse": {
                "type": "object",
                "properties": {
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ITaxRate"
                        },
                        "description": "Array of ITaxRate objects"
                    },
                    "total": {
                        "type": "number",
                        "format": "float",
                        "minimum": 0,
                        "description": "Total count of objects. If using pagination, this is the sum of all pages"
                    }
                },
                "required": [
                    "items",
                    "total"
                ],
                "additionalProperties": false,
                "description": "Response of multiple ITaxRate objects"
            },
            "ITeam": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the Team"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Team"
                    },
                    "hierarchy": {
                        "type": "string",
                        "description": "Full naming of the team, including in it the hierarchy of parent teams"
                    },
                    "externalId": {
                        "type": "string",
                        "nullable": true,
                        "description": "Unique identifier of the Team in the external system"
                    },
                    "parentId": {
                        "type": "string",
                        "nullable": true,
                        "description": "Unique identifier of the parent of the Team"
                    }
                },
                "required": [
                    "id",
                    "name",
                    "hierarchy"
                ],
                "additionalProperties": false,
                "description": "Object, that is used for teams"
            },
            "ITeamResponse": {
                "type": "object",
                "properties": {
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ITeam"
                        },
                        "description": "Array of ITeam objects"
                    },
                    "total": {
                        "type": "number",
                        "format": "float",
                        "minimum": 0,
                        "description": "Total count of objects. If using pagination, this is the sum of all pages"
                    }
                },
                "required": [
                    "items",
                    "total"
                ],
                "additionalProperties": false,
                "description": "Response of multiple ITeam objects"
            },
            "ITeamCreate": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the Team"
                    },
                    "externalId": {
                        "type": "string",
                        "nullable": true,
                        "description": "Unique identifier of the Team in the external system"
                    },
                    "parentId": {
                        "type": "string",
                        "nullable": true,
                        "description": "Unique identifier of the parent of the Team"
                    }
                },
                "required": [
                    "name"
                ],
                "additionalProperties": false,
                "description": "Object, used for creation of a new team"
            },
            "ITeamPatch": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "nullable": true,
                        "description": "Name of the Team"
                    },
                    "externalId": {
                        "type": "string",
                        "nullable": true,
                        "description": "Unique identifier of the Team in the external system"
                    },
                    "parentId": {
                        "type": "string",
                        "nullable": true,
                        "description": "Unique identifier of the parent of the Team"
                    }
                },
                "additionalProperties": false,
                "description": "Object, used for partial update of a team"
            },
            "ITeamMember": {
                "type": "object",
                "properties": {
                    "memberId": {
                        "type": "string",
                        "description": "User ID in Payhawk"
                    },
                    "roles": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "employee",
                                "manager"
                            ]
                        },
                        "minItems": 1,
                        "description": "Roles granted to the team member"
                    }
                },
                "required": [
                    "memberId",
                    "roles"
                ],
                "additionalProperties": false,
                "description": "Object, that is used for team member response"
            },
            "ITeamMembersResponse": {
                "type": "object",
                "properties": {
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ITeamMember"
                        },
                        "description": "Array of ITeamMember objects"
                    },
                    "total": {
                        "type": "number",
                        "format": "float",
                        "minimum": 0,
                        "description": "Total count of objects. If using pagination, this is the sum of all pages"
                    }
                },
                "required": [
                    "items",
                    "total"
                ],
                "additionalProperties": false,
                "description": "Response of multiple ITeamMember objects"
            },
            "ITeamMemberPatch": {
                "type": "object",
                "properties": {
                    "roles": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "employee",
                                "manager"
                            ]
                        },
                        "minItems": 1,
                        "description": "Roles granted to the team member"
                    }
                },
                "required": [
                    "roles"
                ],
                "additionalProperties": false,
                "description": "Object, that is used for update of the team member object"
            },
            "INewWebhookSubscription": {
                "type": "object",
                "properties": {
                    "eventType": {
                        "type": "string",
                        "enum": [
                            "expense.created",
                            "expense.reviewed",
                            "expense.approved",
                            "expense.deleted",
                            "expense.payment-details.updated",
                            "expense.document.uploaded",
                            "payment.authorized",
                            "payment.reverted",
                            "payment.settled",
                            "payment.failed",
                            "deposit.received",
                            "supplier.created",
                            "supplier.updated",
                            "purchase-order.status.changed"
                        ],
                        "description": "Type of event to subscribe to"
                    },
                    "callbackUrl": {
                        "type": "string",
                        "description": "Callback URL - valid HTTPS uri"
                    }
                },
                "required": [
                    "eventType",
                    "callbackUrl"
                ],
                "additionalProperties": false,
                "description": "New webhook subscription object"
            },
            "IWebhookSubscription": {
                "type": "object",
                "properties": {
                    "eventType": {
                        "type": "string",
                        "enum": [
                            "expense.created",
                            "expense.reviewed",
                            "expense.approved",
                            "expense.deleted",
                            "expense.payment-details.updated",
                            "expense.document.uploaded",
                            "payment.authorized",
                            "payment.reverted",
                            "payment.settled",
                            "payment.failed",
                            "deposit.received",
                            "supplier.created",
                            "supplier.updated",
                            "purchase-order.status.changed"
                        ],
                        "description": "Type of event to subscribe to"
                    },
                    "callbackUrl": {
                        "type": "string",
                        "description": "Callback URL - valid HTTPS uri"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the webhook subscription"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Creation date of the webhook subscription"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "active",
                            "deactivated_by_payhawk",
                            "deactivated_by_user"
                        ],
                        "description": "Status of the webhook subscription"
                    }
                },
                "required": [
                    "eventType",
                    "callbackUrl",
                    "id",
                    "createdAt",
                    "status"
                ],
                "additionalProperties": false,
                "description": "Webhook subscription object"
            },
            "IWebhookSubscriptionsResponse": {
                "type": "object",
                "properties": {
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IWebhookSubscription"
                        },
                        "description": "Array of IWebhookSubscription objects"
                    },
                    "total": {
                        "type": "number",
                        "format": "float",
                        "minimum": 0,
                        "description": "Total count of objects. If using pagination, this is the sum of all pages"
                    }
                },
                "required": [
                    "items",
                    "total"
                ],
                "additionalProperties": false,
                "description": "Response of multiple IWebhookSubscription objects"
            }
        }
    },
    "paths": {
        "/api/v3/rsa-public-key": {
            "get": {
                "deprecated": false,
                "summary": "Get public key",
                "description": "Returns the public key needed to verify the signature of requests to external integrations.",
                "security": [],
                "responses": {
                    "200": {
                        "description": "An RSA public key",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests. API rate limit is 15 requests per 1 second sliding window. A Retry-After and RateLimit-Remaining headers are provided in each response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    }
                },
                "parameters": [],
                "tags": [
                    "System"
                ]
            }
        },
        "/api/v3/accounts": {
            "get": {
                "deprecated": false,
                "summary": "Get accounts",
                "description": "Returns all accounts accessible by the current user. With API Key auth returns just the account associated with the api key.",
                "security": [
                    {
                        "PayhawkApiKey": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An array of IAccount objects",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IAccountsResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests. API rate limit is 15 requests per 1 second sliding window. A Retry-After and RateLimit-Remaining headers are provided in each response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    }
                },
                "parameters": [],
                "tags": [
                    "Accounts"
                ]
            }
        },
        "/api/v3/accounts/{accountId}": {
            "get": {
                "deprecated": false,
                "summary": "Get account",
                "description": "Returns an account by id",
                "security": [
                    {
                        "PayhawkApiKey": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An IAccount object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IAccount"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Account not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests. API rate limit is 15 requests per 1 second sliding window. A Retry-After and RateLimit-Remaining headers are provided in each response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Identifier of the account to get",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Accounts"
                ]
            }
        },
        "/api/v3/accounts/{accountId}/users": {
            "get": {
                "deprecated": false,
                "summary": "Get account users",
                "description": "Returns all users for an account",
                "security": [
                    {
                        "PayhawkApiKey": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An array of IAccountUser objects",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IAccountUsersResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Account not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests. API rate limit is 15 requests per 1 second sliding window. A Retry-After and RateLimit-Remaining headers are provided in each response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Identifier of the account",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "$filter",
                        "in": "query",
                        "description": "JSON-stringified and URL-encoded filter expression object that conforms to `IAccountUserFilter` schema",
                        "required": false,
                        "deprecated": false,
                        "schema":{
                            "type": "object",
                            "additionalProperties": true
                        }

                    }
                ],
                "tags": [
                    "Accounts"
                ]
            },
            "post": {
                "deprecated": false,
                "summary": "Invite user to account",
                "description": "Returns newly invited user",
                "security": [
                    {
                        "PayhawkApiKey": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IAccountUser object for the invited user",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IAccount"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Account not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests. API rate limit is 15 requests per 1 second sliding window. A Retry-After and RateLimit-Remaining headers are provided in each response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Identifier of the account",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Accounts"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/INewAccountUser"
                            }
                        }
                    },
                    "description": "User to invite",
                    "required": true
                }
            }
        },
        "/api/v3/accounts/{accountId}/users/{userId}": {
            "patch": {
                "deprecated": false,
                "summary": "Update account user",
                "description": "Updates subset of user properties",
                "security": [
                    {
                        "PayhawkApiKey": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Empty response body"
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Account not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests. API rate limit is 15 requests per 1 second sliding window. A Retry-After and RateLimit-Remaining headers are provided in each response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Identifier of the account",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "Identifier of the user",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Accounts"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IAccountUserPatch"
                            }
                        }
                    },
                    "description": "User fields to update",
                    "required": true
                }
            },
            "delete": {
                "deprecated": false,
                "summary": "Remove account user",
                "description": "Removes user from account",
                "security": [
                    {
                        "PayhawkApiKey": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Empty response body"
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Account not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests. API rate limit is 15 requests per 1 second sliding window. A Retry-After and RateLimit-Remaining headers are provided in each response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Identifier of the account",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "Identifier of the user",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Accounts"
                ]
            }
        },
        "/api/v3/accounts/{accountId}/users/{userId}/reimbursement-details": {
            "get": {
                "deprecated": false,
                "summary": "Get user reimbursement details",
                "description": "Returns the reimbursement details for the user",
                "security": [
                    {
                        "PayhawkApiKey": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An IAccountUserReimbursementDetails object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IAccountUserReimbursementDetails"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "If the user does not have reimbursement details filled in"
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests. API rate limit is 15 requests per 1 second sliding window. A Retry-After and RateLimit-Remaining headers are provided in each response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Identifier of the account",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "Identifier of the user",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Accounts"
                ]
            }
        },
        "/api/v3/accounts/{accountId}/cards": {
            "get": {
                "deprecated": false,
                "summary": "Get cards",
                "description": "Returns all cards for an account",
                "security": [
                    {
                        "PayhawkApiKey": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An array of ICard objects",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ICardsResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Account not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests. API rate limit is 15 requests per 1 second sliding window. A Retry-After and RateLimit-Remaining headers are provided in each response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Identifier of the account",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "$filter",
                        "in": "query",
                        "description": "JSON-stringified and URL-encoded filter expression object that conforms to `ICardFilter` schema",
                        "required": false,
                        "deprecated": false,
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ICardFilter"
                                }
                            }
                        },
                        "examples": {
                            "none": {
                                "summary": "No filter",
                                "value": ""
                            },
                            "single": {
                                "summary": "Filter with single condition",
                                "value": {
                                    "status": {
                                        "$equal": "active"
                                    }
                                }
                            },
                            "multiple": {
                                "summary": "Filter with multiple conditions",
                                "value": {
                                    "$and": [
                                        {
                                            "status": {
                                                "$equal": "active"
                                            }
                                        },
                                        {
                                            "userId": {
                                                "$equal": "ccf8a08e-c41e-410e-a05c-786ba7327532"
                                            }
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    {
                        "name": "$skip",
                        "in": "query",
                        "description": "Number of objects to skip from the beginning of the result set",
                        "required": false,
                        "deprecated": false,
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "$take",
                        "in": "query",
                        "description": "Max number of objects to return",
                        "required": false,
                        "deprecated": false,
                        "schema": {
                            "type": "number"
                        }
                    }
                ],
                "tags": [
                    "Cards"
                ]
            },
            "post": {
                "deprecated": false,
                "summary": "Issue card",
                "description": "Issue new card for registered user",
                "security": [
                    {
                        "PayhawkApiKey": []
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The newly created card",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ICard"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Account not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests. API rate limit is 15 requests per 1 second sliding window. A Retry-After and RateLimit-Remaining headers are provided in each response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Identifier of the account",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Cards"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/INewCard"
                            }
                        }
                    },
                    "description": "Details of the card to issue",
                    "required": true
                }
            }
        },
        "/api/v3/accounts/{accountId}/cards/{cardId}": {
            "get": {
                "deprecated": false,
                "summary": "Get card",
                "description": "Returns card by id",
                "security": [
                    {
                        "PayhawkApiKey": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An ICard object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ICard"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Card not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests. API rate limit is 15 requests per 1 second sliding window. A Retry-After and RateLimit-Remaining headers are provided in each response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Identifier of the account",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "cardId",
                        "in": "path",
                        "description": "Identifier of the card to get",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Cards"
                ]
            },
            "patch": {
                "deprecated": false,
                "summary": "Update card",
                "description": "Partially updates a card with the provided fields. Returns the updated card",
                "security": [
                    {
                        "PayhawkApiKey": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An ICard object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ICard"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Card not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests. API rate limit is 15 requests per 1 second sliding window. A Retry-After and RateLimit-Remaining headers are provided in each response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Identifier of the account",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "cardId",
                        "in": "path",
                        "description": "Identifier of the card to update",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Cards"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ICardPatch"
                            }
                        }
                    },
                    "description": "Objects to update",
                    "required": true
                }
            }
        },
        "/api/v3/accounts/{accountId}/cards/{cardId}/status": {
            "post": {
                "deprecated": false,
                "summary": "Update card status",
                "description": "Partially updates a card status if transition is possible. Closed cards cannot be activated",
                "security": [
                    {
                        "PayhawkApiKey": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Empty response body"
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Card not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests. API rate limit is 15 requests per 1 second sliding window. A Retry-After and RateLimit-Remaining headers are provided in each response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Identifier of the account",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "cardId",
                        "in": "path",
                        "description": "Identifier of the card to update",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Cards"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ICardStatusUpdate"
                            }
                        }
                    },
                    "description": "Object containing the requested status state",
                    "required": true
                }
            }
        },
        "/api/v3/accounts/{accountId}/expenses": {
            "get": {
                "deprecated": false,
                "summary": "Get expenses",
                "description": "Returns all expenses for an account",
                "security": [
                    {
                        "PayhawkApiKey": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An array of IExpense objects",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IExpensesResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Account not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests. API rate limit is 15 requests per 1 second sliding window. A Retry-After and RateLimit-Remaining headers are provided in each response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Identifier of the account",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "$filter",
                        "in": "query",
                        "description": "JSON-stringified and URL-encoded filter expression object that conforms to `IExpenseFilter` schema. Filtering by Date fields ignores *time* data and compares by *date* part only. For example, `{ \"createdAt\": { \"$equal\": \"2023-03-26T23:59:59.000Z\" } }` would return all expenses created on March 26th.",
                        "required": false,
                        "deprecated": false,
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IExpenseFilter"
                                }
                            }
                        },
                        "examples": {
                            "none": {
                                "summary": "No filter",
                                "value": ""
                            },
                            "single": {
                                "summary": "Filter with single condition",
                                "value": {
                                    "status": {
                                        "$equal": "draft"
                                    }
                                }
                            },
                            "multiple": {
                                "summary": "Filter with multiple conditions",
                                "value": {
                                    "$and": [
                                        {
                                            "status": {
                                                "$equal": "draft"
                                            }
                                        },
                                        {
                                            "supplier.name": {
                                                "$contains": "Payhawk"
                                            }
                                        },
                                        {
                                            "document.documentDate": {
                                                "$greaterThan": "2022-06-03T00:00:00.000Z"
                                            }
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    {
                        "name": "$orderBy",
                        "in": "query",
                        "description": "JSON-stringified and URL-encoded sort expression object that conforms to `IExpenseOrderBy` schema",
                        "required": false,
                        "deprecated": false,
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IExpenseOrderBy"
                                }
                            }
                        },
                        "examples": {
                            "none": {
                                "summary": "Default order",
                                "value": ""
                            },
                            "single": {
                                "summary": "Order by creation date",
                                "value": [
                                    {
                                        "createdAt": "asc"
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "name": "$skip",
                        "in": "query",
                        "description": "Number of objects to skip from the beginning of the result set",
                        "required": false,
                        "deprecated": false,
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "$take",
                        "in": "query",
                        "description": "Max number of objects to return (maximum number of items that will be returned is 1000)",
                        "required": false,
                        "deprecated": false,
                        "schema": {
                            "type": "number"
                        }
                    }
                ],
                "tags": [
                    "Expenses"
                ]
            }
        },
        "/api/v3/accounts/{accountId}/expenses/{expenseId}": {
            "get": {
                "deprecated": false,
                "summary": "Get expense",
                "description": "Returns an expense by id",
                "security": [
                    {
                        "PayhawkApiKey": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An IExpense object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IExpense"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Expense not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests. API rate limit is 15 requests per 1 second sliding window. A Retry-After and RateLimit-Remaining headers are provided in each response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Identifier of the account",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "expenseId",
                        "in": "path",
                        "description": "Identifier of the expense to get",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Expenses"
                ]
            },
            "patch": {
                "deprecated": false,
                "summary": "Update expense",
                "description": "Partially updates an expense with the provided fields. Returns the updated expense",
                "security": [
                    {
                        "PayhawkApiKey": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An IExpense object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IExpense"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Expense not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests. API rate limit is 15 requests per 1 second sliding window. A Retry-After and RateLimit-Remaining headers are provided in each response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Identifier of the account",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "expenseId",
                        "in": "path",
                        "description": "Identifier of the expense to update",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Expenses"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IExpensePatch"
                            }
                        }
                    },
                    "description": "Objects to update",
                    "required": true
                }
            }
        },
        "/api/v3/accounts/{accountId}/expenses/{expenseId}/bank-payment-details": {
            "post": {
                "deprecated": false,
                "summary": "Add payment details to a bank expense and mark expense as paid",
                "description": "Add payment details to a bank expense and mark expense as paid",
                "security": [
                    {
                        "PayhawkApiKey": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Empty response body"
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Expense not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests. API rate limit is 15 requests per 1 second sliding window. A Retry-After and RateLimit-Remaining headers are provided in each response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Identifier of the account",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "expenseId",
                        "in": "path",
                        "description": "Identifier of the expense to update",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Expenses"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IExpenseBankPaymentDetails"
                            }
                        }
                    },
                    "description": "Objects to update",
                    "required": true
                }
            },
            "delete": {
                "deprecated": false,
                "summary": "Remove bank payment details from expense and mark it as unpaid",
                "description": "Remove bank payment details from expense and mark it as unpaid",
                "security": [
                    {
                        "PayhawkApiKey": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Empty response body"
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Expense not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests. API rate limit is 15 requests per 1 second sliding window. A Retry-After and RateLimit-Remaining headers are provided in each response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Identifier of the account",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "expenseId",
                        "in": "path",
                        "description": "Identifier of the expense to update",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Expenses"
                ]
            }
        },
        "/api/v3/accounts/{accountId}/expenses/{expenseId}/payments": {
            "get": {
                "deprecated": false,
                "summary": "Get expense payments",
                "description": "Returns all payments for an expense",
                "security": [
                    {
                        "PayhawkApiKey": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An array of IExpensePayment objects",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IExpensePaymentsResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Expense not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests. API rate limit is 15 requests per 1 second sliding window. A Retry-After and RateLimit-Remaining headers are provided in each response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Identifier of the account",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "expenseId",
                        "in": "path",
                        "description": "Identifier of the expense",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Expenses"
                ]
            }
        },
        "/api/v3/accounts/{accountId}/expenses/{expenseId}/payment-details": {
            "get": {
                "deprecated": false,
                "summary": "Get expense payment details",
                "description": "Returns payment details for an expense",
                "security": [
                    {
                        "PayhawkApiKey": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An IExpensePaymentDetails object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IExpensePaymentDetails"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Expense not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests. API rate limit is 15 requests per 1 second sliding window. A Retry-After and RateLimit-Remaining headers are provided in each response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Identifier of the account",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "expenseId",
                        "in": "path",
                        "description": "Identifier of the expense",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Expenses"
                ]
            }
        },
        "/api/v3/accounts/{accountId}/expenses/{expenseId}/workflow": {
            "get": {
                "deprecated": false,
                "summary": "Get expense workflow status",
                "description": "Returns details about the approval and review status of an expense",
                "security": [
                    {
                        "PayhawkApiKey": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An IExpenseWorkflowStatus objects",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IExpenseWorkflowStatus"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Expense not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests. API rate limit is 15 requests per 1 second sliding window. A Retry-After and RateLimit-Remaining headers are provided in each response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Identifier of the account",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "expenseId",
                        "in": "path",
                        "description": "Identifier of the expense",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Expenses"
                ]
            }
        },
        "/api/v3/accounts/{accountId}/invoices": {
            "post": {
                "deprecated": false,
                "summary": "Submit invoice",
                "description": "Imports an invoice file. Payhawk will try to match the invoice to a card expense based on the document data and the additional metadata provided in the request payload",
                "security": [
                    {
                        "PayhawkApiKey": []
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Invoice accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Account not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests. API rate limit is 15 requests per 1 second sliding window. A Retry-After and RateLimit-Remaining headers are provided in each response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Identifier of the account to get",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Expenses"
                ],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/INewInvoiceRequest"
                            }
                        }
                    },
                    "description": "Invoice details",
                    "required": true
                }
            }
        },
        "/api/v3/accounts/{accountId}/expenses/{expenseId}/files": {
            "post": {
                "deprecated": false,
                "summary": "Submit files",
                "description": "Imports a file for the provided expense.",
                "security": [
                    {
                        "PayhawkApiKey": []
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Files accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IFilesResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Expense not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests. API rate limit is 15 requests per 1 second sliding window. A Retry-After and RateLimit-Remaining headers are provided in each response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Identifier of the account",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "expenseId",
                        "in": "path",
                        "description": "Identifier of the expense",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Expenses"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object"
                            }
                        }
                    },
                    "description": "File- multipart/form-data",
                    "required": true
                }
            }
        },
        "/api/v3/accounts/{accountId}/fund-accounts": {
            "get": {
                "deprecated": false,
                "summary": "Get fund accounts",
                "description": "Returns all fund accounts for an account",
                "security": [
                    {
                        "PayhawkApiKey": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An array of IFundAccount objects",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IFundAccountsResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Account not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests. API rate limit is 15 requests per 1 second sliding window. A Retry-After and RateLimit-Remaining headers are provided in each response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Identifier of the account",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Fund Accounts"
                ]
            }
        },
        "/api/v3/accounts/{accountId}/fund-accounts/{fundAccountId}": {
            "get": {
                "deprecated": false,
                "summary": "Get fund account",
                "description": "Returns a fund account by id",
                "security": [
                    {
                        "PayhawkApiKey": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An IFundAccount object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IFundAccount"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Fund account not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests. API rate limit is 15 requests per 1 second sliding window. A Retry-After and RateLimit-Remaining headers are provided in each response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Identifier of the account",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fundAccountId",
                        "in": "path",
                        "description": "Identifier of the fund account",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Fund Accounts"
                ]
            }
        },
        "/api/v3/accounts/{accountId}/fund-accounts/{fundAccountId}/deposits": {
            "get": {
                "deprecated": false,
                "summary": "Get fund account deposits",
                "description": "Returns all deposits for a fund account",
                "security": [
                    {
                        "PayhawkApiKey": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An array of IDeposit objects",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IDepositsResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Fund account not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests. API rate limit is 15 requests per 1 second sliding window. A Retry-After and RateLimit-Remaining headers are provided in each response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Identifier of the account",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fundAccountId",
                        "in": "path",
                        "description": "Identifier of the fund account",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "$filter",
                        "in": "query",
                        "description": "JSON-stringified and URL-encoded filter expression object that conforms to `IDepositFilter` schema",
                        "required": false,
                        "deprecated": false,
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IDepositFilter"
                                }
                            }
                        },
                        "examples": {
                            "none": {
                                "summary": "No filter",
                                "value": ""
                            },
                            "single": {
                                "summary": "Filter with single condition",
                                "value": {
                                    "date": {
                                        "$equal": "2022-06-26T00:00:00.000Z"
                                    }
                                }
                            },
                            "multiple": {
                                "summary": "Filter with multiple conditions",
                                "value": {
                                    "$and": [
                                        {
                                            "date": {
                                                "$greaterThanEqual": "2022-06-03T00:00:00.000Z"
                                            }
                                        },
                                        {
                                            "date": {
                                                "$lessThanEqual": "2022-07-03T00:00:00.000Z"
                                            }
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    {
                        "name": "$skip",
                        "in": "query",
                        "description": "Number of objects to skip from the beginning of the result set",
                        "required": false,
                        "deprecated": false,
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "$take",
                        "in": "query",
                        "description": "Max number of objects to return",
                        "required": false,
                        "deprecated": false,
                        "schema": {
                            "type": "number"
                        }
                    }
                ],
                "tags": [
                    "Fund Accounts"
                ]
            }
        },
        "/api/v3/accounts/{accountId}/fund-accounts/{fundAccountId}/deposits/{depositId}": {
            "get": {
                "deprecated": false,
                "summary": "Get fund account deposit",
                "description": "Returns a deposit by id",
                "security": [
                    {
                        "PayhawkApiKey": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An IDeposit object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IDeposit"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Deposit not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests. API rate limit is 15 requests per 1 second sliding window. A Retry-After and RateLimit-Remaining headers are provided in each response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Identifier of the account",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fundAccountId",
                        "in": "path",
                        "description": "Identifier of the fund account",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "depositId",
                        "in": "path",
                        "description": "Identifier of the deposit to get",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Fund Accounts"
                ]
            }
        },
        "/api/v3/accounts/{accountId}/fund-accounts/{fundAccountId}/bank-statement": {
            "get": {
                "deprecated": false,
                "summary": "Get fund account bank statement",
                "description": "Returns bank statement for a fund account",
                "security": [
                    {
                        "PayhawkApiKey": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An array of IBankStatementLine objects",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IBankStatementResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests. API rate limit is 15 requests per 1 second sliding window. A Retry-After and RateLimit-Remaining headers are provided in each response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Identifier of the account",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fundAccountId",
                        "in": "path",
                        "description": "Identifier of the fund account",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "$filter",
                        "in": "query",
                        "description": "JSON-stringified and URL-encoded filter expression object that conforms to `IBankStatementFilter` schema",
                        "required": false,
                        "deprecated": false,
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IBankStatementFilter"
                                }
                            }
                        },
                        "examples": {
                            "none": {
                                "summary": "No filter",
                                "value": ""
                            },
                            "single": {
                                "summary": "Filter with single condition",
                                "value": {
                                    "date": {
                                        "$greaterThanEqual": "2022-06-03T00:00:00.000Z"
                                    }
                                }
                            },
                            "multiple": {
                                "summary": "Filter with multiple conditions",
                                "value": {
                                    "$and": [
                                        {
                                            "date": {
                                                "$greaterThanEqual": "2022-06-03T00:00:00.000Z"
                                            }
                                        },
                                        {
                                            "date": {
                                                "$lessThanEqual": "2022-07-03T00:00:00.000Z"
                                            }
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    {
                        "name": "$skip",
                        "in": "query",
                        "description": "Number of objects to skip from the beginning of the result set",
                        "required": false,
                        "deprecated": false,
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "$take",
                        "in": "query",
                        "description": "Max number of objects to return",
                        "required": false,
                        "deprecated": false,
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "$orderBy",
                        "in": "query",
                        "description": "JSON-stringified and URL-encoded sort expression object that conforms to `IBankStatementOrderBy` schema",
                        "required": false,
                        "deprecated": false,
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IBankStatementOrderBy"
                                }
                            }
                        },
                        "examples": {
                            "none": {
                                "summary": "Default order",
                                "value": ""
                            },
                            "single": {
                                "summary": "Order by bank statement line date",
                                "value": [
                                    {
                                        "date": "asc"
                                    }
                                ]
                            }
                        }
                    }
                ],
                "tags": [
                    "Fund Accounts"
                ]
            }
        },
        "/api/v3/accounts/{accountId}/account-codes": {
            "get": {
                "deprecated": false,
                "summary": "Get account codes",
                "description": "Returns all account codes for an account",
                "security": [
                    {
                        "PayhawkApiKey": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An array of IAccountCode objects",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IAccountCodesResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Account not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests. API rate limit is 15 requests per 1 second sliding window. A Retry-After and RateLimit-Remaining headers are provided in each response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Identifier of the account",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Account Codes"
                ]
            },
            "put": {
                "deprecated": false,
                "summary": "Update account codes",
                "description": "Replaces the account codes of an account. Returns the updated account codes",
                "security": [
                    {
                        "PayhawkApiKey": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An array of IAccountCode objects",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IAccountCodesResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Account not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests. API rate limit is 15 requests per 1 second sliding window. A Retry-After and RateLimit-Remaining headers are provided in each response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Identifier of the account",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Account Codes"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/INewAccountCodes"
                            }
                        }
                    },
                    "description": "The new account codes",
                    "required": true
                }
            }
        },
        "/api/v3/accounts/{accountId}/teams": {
            "get": {
                "deprecated": false,
                "summary": "List all team records within an account",
                "description": "Returns all teams for an account",
                "security": [
                    {
                        "PayhawkApiKey": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An ITeamResponse object, consisting of ITeam objects and a total count",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ITeamResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests. API rate limit is 15 requests per 1 second sliding window. A Retry-After and RateLimit-Remaining headers are provided in each response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Identifier of the account",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Account Teams"
                ]
            },
            "post": {
                "deprecated": false,
                "summary": "Create a team",
                "description": "Creates a team within an Account",
                "security": [
                    {
                        "PayhawkApiKey": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An ITeam object, consisting of ITeam objects and a total count",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ITeam"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests. API rate limit is 15 requests per 1 second sliding window. A Retry-After and RateLimit-Remaining headers are provided in each response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Identifier of the account",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Account Teams"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ITeamPatch"
                            }
                        }
                    },
                    "description": "Information of the team to be added to the Account",
                    "required": true
                }
            }
        },
        "/api/v3/accounts/{accountId}/teams/{teamId}": {
            "get": {
                "deprecated": false,
                "summary": "Get team information",
                "description": "Get information for a single team within the Account",
                "security": [
                    {
                        "PayhawkApiKey": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An ITeam object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ITeam"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests. API rate limit is 15 requests per 1 second sliding window. A Retry-After and RateLimit-Remaining headers are provided in each response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Identifier of the account",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "teamId",
                        "in": "path",
                        "description": "Identifier of the team",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Account Teams"
                ]
            },
            "patch": {
                "deprecated": false,
                "summary": "Update Team Information",
                "description": "Updates the information for a team within the Account boundary",
                "security": [
                    {
                        "PayhawkApiKey": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No content",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ITeam"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests. API rate limit is 15 requests per 1 second sliding window. A Retry-After and RateLimit-Remaining headers are provided in each response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Identifier of the account",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "teamId",
                        "in": "path",
                        "description": "Identifier of the team",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Account Teams"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ITeamPatch"
                            }
                        }
                    },
                    "description": "Information of the team to be updated",
                    "required": true
                }
            },
            "delete": {
                "deprecated": false,
                "summary": "Delete team",
                "description": "Deletes a team from the Account",
                "security": [
                    {
                        "PayhawkApiKey": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No content",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ITeam"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests. API rate limit is 15 requests per 1 second sliding window. A Retry-After and RateLimit-Remaining headers are provided in each response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Identifier of the account",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "teamId",
                        "in": "path",
                        "description": "Identifier of the team",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Account Teams"
                ]
            }
        },
        "/api/v3/accounts/{accountId}/teams/{teamId}/members": {
            "get": {
                "deprecated": false,
                "summary": "Display team members response object",
                "description": "Returns all account team members within an account",
                "security": [
                    {
                        "PayhawkApiKey": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An ITeamMembersResponse object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ITeamMembersResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests. API rate limit is 15 requests per 1 second sliding window. A Retry-After and RateLimit-Remaining headers are provided in each response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Identifier of the account",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "teamId",
                        "in": "path",
                        "description": "Identifier of the team",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Account Teams"
                ]
            },
            "post": {
                "deprecated": false,
                "summary": "Add member to a team",
                "description": "Adds a member to the given account team",
                "security": [
                    {
                        "PayhawkApiKey": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An ITeamMember object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ITeamMember"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests. API rate limit is 15 requests per 1 second sliding window. A Retry-After and RateLimit-Remaining headers are provided in each response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Identifier of the account",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "teamId",
                        "in": "path",
                        "description": "Identifier of the team",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Account Teams"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ITeamMember"
                            }
                        }
                    },
                    "description": "Information of the team member to be added",
                    "required": true
                }
            }
        },
        "/api/v3/accounts/{accountId}/teams/{teamId}/members/{memberId}": {
            "get": {
                "deprecated": false,
                "summary": "Display single team member response object",
                "description": "Returns all account team members within an account",
                "security": [
                    {
                        "PayhawkApiKey": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An ITeamMember object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ITeamMember"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests. API rate limit is 15 requests per 1 second sliding window. A Retry-After and RateLimit-Remaining headers are provided in each response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Identifier of the account",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "teamId",
                        "in": "path",
                        "description": "Identifier of the team",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "memberId",
                        "in": "path",
                        "description": "Identifier of the member (userId in Payhawk)",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Account Teams"
                ]
            },
            "patch": {
                "deprecated": false,
                "summary": "Update member role within a team",
                "description": "Update role of a member (employee and/or manager) in the team scope",
                "security": [
                    {
                        "PayhawkApiKey": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No content",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ITeamMember"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests. API rate limit is 15 requests per 1 second sliding window. A Retry-After and RateLimit-Remaining headers are provided in each response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Identifier of the account",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "teamId",
                        "in": "path",
                        "description": "Identifier of the team",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "memberId",
                        "in": "path",
                        "description": "Identifier of the member (userId in Payhawk)",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Account Teams"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ITeamMemberPatch"
                            }
                        }
                    },
                    "description": "Information of the team member to be added",
                    "required": true
                }
            },
            "delete": {
                "deprecated": false,
                "summary": "Delete team member",
                "description": "Deletes a team from the Account",
                "security": [
                    {
                        "PayhawkApiKey": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No content",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ITeamMember"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests. API rate limit is 15 requests per 1 second sliding window. A Retry-After and RateLimit-Remaining headers are provided in each response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Identifier of the account",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "teamId",
                        "in": "path",
                        "description": "Identifier of the team",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "memberId",
                        "in": "path",
                        "description": "Identifier of the member (userId in Payhawk)",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Account Teams"
                ]
            }
        },
        "/api/v3/groups/{groupId}/accounts": {
            "get": {
                "deprecated": false,
                "summary": "List all accounts within a Group",
                "description": "Returns all accounts for a Group",
                "security": [
                    {
                        "PayhawkApiKey": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An array of Payhawk accountIds as string",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests. API rate limit is 15 requests per 1 second sliding window. A Retry-After and RateLimit-Remaining headers are provided in each response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "groupId",
                        "in": "path",
                        "description": "Identifier of the Group",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Group Accounts"
                ]
            }
        },
        "/api/v3/groups/{groupId}/account-codes": {
            "get": {
                "deprecated": false,
                "summary": "Get group account codes",
                "description": "Returns all account codes for a group",
                "security": [
                    {
                        "PayhawkApiKey": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An array of IGroupAccountCode objects",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IGroupAccountCodesResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Account not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests. API rate limit is 15 requests per 1 second sliding window. A Retry-After and RateLimit-Remaining headers are provided in each response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "groupId",
                        "in": "path",
                        "description": "Identifier of the account",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Group Account Codes"
                ]
            },
            "put": {
                "deprecated": false,
                "summary": "Update account codes",
                "description": "Replaces the account codes of a group. Returns the updated account codes",
                "security": [
                    {
                        "PayhawkApiKey": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An array of IGroupAccountCode objects",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IGroupAccountCodesResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Account not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests. API rate limit is 15 requests per 1 second sliding window. A Retry-After and RateLimit-Remaining headers are provided in each response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "groupId",
                        "in": "path",
                        "description": "Identifier of the account",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Group Account Codes"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/INewAccountCodes"
                            }
                        }
                    },
                    "description": "The new account codes",
                    "required": true
                }
            }
        },
        "/api/v3/groups/{groupId}/teams": {
            "get": {
                "deprecated": false,
                "summary": "List all team records within a Group",
                "description": "Returns all teams for a Group",
                "security": [
                    {
                        "PayhawkApiKey": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An ITeamResponse object, consisting of ITeam objects and a total count",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ITeamResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests. API rate limit is 15 requests per 1 second sliding window. A Retry-After and RateLimit-Remaining headers are provided in each response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "groupId",
                        "in": "path",
                        "description": "Identifier of the Group",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Group Teams"
                ]
            },
            "post": {
                "deprecated": false,
                "summary": "Create a team",
                "description": "Creates a team within a Group",
                "security": [
                    {
                        "PayhawkApiKey": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An ITeam object, consisting of ITeam objects and a total count",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ITeam"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests. API rate limit is 15 requests per 1 second sliding window. A Retry-After and RateLimit-Remaining headers are provided in each response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "groupId",
                        "in": "path",
                        "description": "Identifier of the Group",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Group Teams"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ITeamPatch"
                            }
                        }
                    },
                    "description": "Information of the team to be added to the Group",
                    "required": true
                }
            }
        },
        "/api/v3/groups/{groupId}/teams/{teamId}": {
            "get": {
                "deprecated": false,
                "summary": "Get team information",
                "description": "Get information for a single team within the Group",
                "security": [
                    {
                        "PayhawkApiKey": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An ITeam object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ITeam"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests. API rate limit is 15 requests per 1 second sliding window. A Retry-After and RateLimit-Remaining headers are provided in each response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "groupId",
                        "in": "path",
                        "description": "Identifier of the Group",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "teamId",
                        "in": "path",
                        "description": "Identifier of the team",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Group Teams"
                ]
            },
            "patch": {
                "deprecated": false,
                "summary": "Update Team Information",
                "description": "Updates the information for a team within the Group boundary",
                "security": [
                    {
                        "PayhawkApiKey": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No content",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ITeam"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests. API rate limit is 15 requests per 1 second sliding window. A Retry-After and RateLimit-Remaining headers are provided in each response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "groupId",
                        "in": "path",
                        "description": "Identifier of the Group",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "teamId",
                        "in": "path",
                        "description": "Identifier of the team",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Group Teams"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ITeamPatch"
                            }
                        }
                    },
                    "description": "Information of the team to be updated",
                    "required": true
                }
            },
            "delete": {
                "deprecated": false,
                "summary": "Delete team",
                "description": "Deletes a team from the Group",
                "security": [
                    {
                        "PayhawkApiKey": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No content",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ITeam"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests. API rate limit is 15 requests per 1 second sliding window. A Retry-After and RateLimit-Remaining headers are provided in each response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "groupId",
                        "in": "path",
                        "description": "Identifier of the Group",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "teamId",
                        "in": "path",
                        "description": "Identifier of the team",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Group Teams"
                ]
            }
        },
        "/api/v3/groups/{groupId}/teams/{teamId}/members": {
            "get": {
                "deprecated": false,
                "summary": "Display team members response object",
                "description": "Returns all group team members within a Group",
                "security": [
                    {
                        "PayhawkApiKey": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An ITeamMembersResponse object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ITeamMembersResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests. API rate limit is 15 requests per 1 second sliding window. A Retry-After and RateLimit-Remaining headers are provided in each response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "groupId",
                        "in": "path",
                        "description": "Identifier of the Group",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "teamId",
                        "in": "path",
                        "description": "Identifier of the team",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Group Teams"
                ]
            },
            "post": {
                "deprecated": false,
                "summary": "Add member to a team",
                "description": "Adds a member to the given group team",
                "security": [
                    {
                        "PayhawkApiKey": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An ITeamMember object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ITeamMember"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests. API rate limit is 15 requests per 1 second sliding window. A Retry-After and RateLimit-Remaining headers are provided in each response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "groupId",
                        "in": "path",
                        "description": "Identifier of the Group",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "teamId",
                        "in": "path",
                        "description": "Identifier of the team",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Group Teams"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ITeamMember"
                            }
                        }
                    },
                    "description": "Information of the team member to be added",
                    "required": true
                }
            }
        },
        "/api/v3/groups/{groupId}/teams/{teamId}/members/{memberId}": {
            "get": {
                "deprecated": false,
                "summary": "Display single team member response object",
                "description": "Returns all group team members within a Group",
                "security": [
                    {
                        "PayhawkApiKey": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An ITeamMember object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ITeamMember"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests. API rate limit is 15 requests per 1 second sliding window. A Retry-After and RateLimit-Remaining headers are provided in each response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "groupId",
                        "in": "path",
                        "description": "Identifier of the Group",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "teamId",
                        "in": "path",
                        "description": "Identifier of the team",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "memberId",
                        "in": "path",
                        "description": "Identifier of the member (userId in Payhawk)",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Group Teams"
                ]
            },
            "patch": {
                "deprecated": false,
                "summary": "Update member role within a team",
                "description": "Update role of a member (employee and/or manager) in the team scope",
                "security": [
                    {
                        "PayhawkApiKey": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No content",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ITeamMember"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests. API rate limit is 15 requests per 1 second sliding window. A Retry-After and RateLimit-Remaining headers are provided in each response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "groupId",
                        "in": "path",
                        "description": "Identifier of the Group",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "teamId",
                        "in": "path",
                        "description": "Identifier of the team",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "memberId",
                        "in": "path",
                        "description": "Identifier of the member (userId in Payhawk)",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Group Teams"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ITeamMemberPatch"
                            }
                        }
                    },
                    "description": "Information of the team member to be added",
                    "required": true
                }
            },
            "delete": {
                "deprecated": false,
                "summary": "Delete team member",
                "description": "Deletes a team from the Group",
                "security": [
                    {
                        "PayhawkApiKey": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No content",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ITeamMember"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests. API rate limit is 15 requests per 1 second sliding window. A Retry-After and RateLimit-Remaining headers are provided in each response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "groupId",
                        "in": "path",
                        "description": "Identifier of the Group",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "teamId",
                        "in": "path",
                        "description": "Identifier of the team",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "memberId",
                        "in": "path",
                        "description": "Identifier of the member (userId in Payhawk)",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Group Teams"
                ]
            }
        },
        "/api/v3/accounts/{accountId}/custom-fields": {
            "get": {
                "deprecated": false,
                "summary": "Get custom fields",
                "description": "Returns all custom fields for an account",
                "security": [
                    {
                        "PayhawkApiKey": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An array of ICustomField objects",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ICustomFieldsResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Account not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests. API rate limit is 15 requests per 1 second sliding window. A Retry-After and RateLimit-Remaining headers are provided in each response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Identifier of the account",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Custom Fields"
                ]
            },
            "post": {
                "deprecated": false,
                "summary": "Create a new custom field",
                "description": "Creates a new custom field for an account",
                "security": [
                    {
                        "PayhawkApiKey": []
                    }
                ],
                "responses": {
                    "201": {
                        "description": "An ICustomField object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ICustomField"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Account not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests. API rate limit is 15 requests per 1 second sliding window. A Retry-After and RateLimit-Remaining headers are provided in each response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Identifier of the account",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Custom Fields"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/INewCustomField"
                            }
                        }
                    },
                    "description": "The new custom field",
                    "required": true
                }
            }
        },
        "/api/v3/accounts/{accountId}/custom-fields/{customFieldId}": {
            "get": {
                "deprecated": false,
                "summary": "Get custom field",
                "description": "Returns the custom field for this account",
                "security": [
                    {
                        "PayhawkApiKey": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An ICustomField object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ICustomField"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Account or custom field not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests. API rate limit is 15 requests per 1 second sliding window. A Retry-After and RateLimit-Remaining headers are provided in each response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Identifier of the account",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "customFieldId",
                        "in": "path",
                        "description": "Identifier of the custom field",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Custom Fields"
                ]
            },
            "patch": {
                "deprecated": false,
                "summary": "Update custom field",
                "description": "Returns the updated custom field",
                "security": [
                    {
                        "PayhawkApiKey": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An ICustomField object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ICustomField"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Account or custom field not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests. API rate limit is 15 requests per 1 second sliding window. A Retry-After and RateLimit-Remaining headers are provided in each response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Identifier of the account",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "customFieldId",
                        "in": "path",
                        "description": "Identifier of the custom field",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Custom Fields"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/INewCustomField"
                            }
                        }
                    },
                    "description": "The custom field patch",
                    "required": true
                }
            },
            "delete": {
                "deprecated": false,
                "summary": "Delete a custom field and all its values",
                "security": [
                    {
                        "PayhawkApiKey": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No content",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ICustomField"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Account or custom field not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests. API rate limit is 15 requests per 1 second sliding window. A Retry-After and RateLimit-Remaining headers are provided in each response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Identifier of the account",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "customFieldId",
                        "in": "path",
                        "description": "Identifier of the custom field",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Custom Fields"
                ]
            }
        },
        "/api/v3/accounts/{accountId}/custom-fields/{customFieldId}/values": {
            "get": {
                "deprecated": false,
                "summary": "Get custom field values",
                "description": "Returns the custom field values",
                "security": [
                    {
                        "PayhawkApiKey": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An array of ICustomFieldValue objects",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ICustomFieldValuesResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Account or custom field not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests. API rate limit is 15 requests per 1 second sliding window. A Retry-After and RateLimit-Remaining headers are provided in each response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Identifier of the account",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "customFieldId",
                        "in": "path",
                        "description": "Identifier of the custom field",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Custom Fields"
                ]
            },
            "post": {
                "deprecated": false,
                "summary": "Create a custom field value",
                "description": "Returns the created custom field value",
                "security": [
                    {
                        "PayhawkApiKey": []
                    }
                ],
                "responses": {
                    "201": {
                        "description": "An ICustomFieldValue object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ICustomFieldValue"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Account or custom field not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests. API rate limit is 15 requests per 1 second sliding window. A Retry-After and RateLimit-Remaining headers are provided in each response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Identifier of the account",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "customFieldId",
                        "in": "path",
                        "description": "Identifier of the custom field",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Custom Fields"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/INewCustomFieldValue"
                            }
                        }
                    },
                    "description": "The custom field value",
                    "required": true
                }
            },
            "delete": {
                "deprecated": false,
                "summary": "Delete custom field values",
                "description": "Deletes all values for a custom field",
                "security": [
                    {
                        "PayhawkApiKey": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No content"
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Account or custom field not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests. API rate limit is 15 requests per 1 second sliding window. A Retry-After and RateLimit-Remaining headers are provided in each response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Identifier of the account",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "customFieldId",
                        "in": "path",
                        "description": "Identifier of the custom field",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Custom Fields"
                ]
            }
        },
        "/api/v3/accounts/{accountId}/custom-fields/{customFieldId}/values/{customFieldValueId}": {
            "get": {
                "deprecated": false,
                "summary": "Get a custom field value",
                "description": "Gets a custom field value",
                "security": [
                    {
                        "PayhawkApiKey": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An {ICustomFieldValue}",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ICustomFieldValue"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Account, custom field or custom field value not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests. API rate limit is 15 requests per 1 second sliding window. A Retry-After and RateLimit-Remaining headers are provided in each response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Identifier of the account",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "customFieldId",
                        "in": "path",
                        "description": "Identifier of the custom field",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "customFieldValueId",
                        "in": "path",
                        "description": "Identifier of the custom field value",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Custom Fields"
                ]
            },
            "patch": {
                "deprecated": false,
                "summary": "Update a custom field value",
                "description": "Updates a custom field value",
                "security": [
                    {
                        "PayhawkApiKey": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An {ICustomFieldValue}",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ICustomFieldValue"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Account, custom field or custom field value not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests. API rate limit is 15 requests per 1 second sliding window. A Retry-After and RateLimit-Remaining headers are provided in each response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Identifier of the account",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "customFieldId",
                        "in": "path",
                        "description": "Identifier of the custom field",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "customFieldValueId",
                        "in": "path",
                        "description": "Identifier of the custom field value",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Custom Fields"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ICustomFieldValuePatch"
                            }
                        }
                    },
                    "description": "The custom field value patch",
                    "required": true
                }
            },
            "delete": {
                "deprecated": false,
                "summary": "Delete a custom field value",
                "description": "Deletes a custom field value",
                "security": [
                    {
                        "PayhawkApiKey": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No content"
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Account, custom field or custom field value not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests. API rate limit is 15 requests per 1 second sliding window. A Retry-After and RateLimit-Remaining headers are provided in each response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Identifier of the account",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "customFieldId",
                        "in": "path",
                        "description": "Identifier of the custom field",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "customFieldValueId",
                        "in": "path",
                        "description": "Identifier of the custom field value",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Custom Fields"
                ]
            }
        },
        "/api/v3/accounts/{accountId}/custom-fields/{customFieldId}/values/{customFieldValueId}/managers": {
            "get": {
                "deprecated": false,
                "summary": "Get managers for a specific custom field value",
                "description": "Get managers for a specific custom field value",
                "security": [
                    {
                        "PayhawkApiKey": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An array of ICustomFieldValueManager objects",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ICustomFieldValueManagersResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Account, custom field or custom field value not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests. API rate limit is 15 requests per 1 second sliding window. A Retry-After and RateLimit-Remaining headers are provided in each response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Identifier of the account",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "customFieldId",
                        "in": "path",
                        "description": "Identifier of the custom field",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "customFieldValueId",
                        "in": "path",
                        "description": "Identifier of the custom field value",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Custom Fields"
                ]
            },
            "post": {
                "deprecated": false,
                "summary": "Adds managers for a specific custom field value",
                "description": "Adds managers for a specific custom field value",
                "security": [
                    {
                        "PayhawkApiKey": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No content"
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Account, custom field or custom field value not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests. API rate limit is 15 requests per 1 second sliding window. A Retry-After and RateLimit-Remaining headers are provided in each response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Identifier of the account",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "customFieldId",
                        "in": "path",
                        "description": "Identifier of the custom field",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "customFieldValueId",
                        "in": "path",
                        "description": "Identifier of the custom field value",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Custom Fields"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ICustomFieldValueManagerPatch"
                            }
                        }
                    },
                    "description": "The custom field value managers to be added",
                    "required": true
                }
            },
            "put": {
                "deprecated": false,
                "summary": "Replaces managers for a specific custom field value",
                "description": "Replaces managers for a specific custom field value",
                "security": [
                    {
                        "PayhawkApiKey": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No content"
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Account, custom field or custom field value not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests. API rate limit is 15 requests per 1 second sliding window. A Retry-After and RateLimit-Remaining headers are provided in each response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Identifier of the account",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "customFieldId",
                        "in": "path",
                        "description": "Identifier of the custom field",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "customFieldValueId",
                        "in": "path",
                        "description": "Identifier of the custom field value",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Custom Fields"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ICustomFieldValueManagerPatch"
                            }
                        }
                    },
                    "description": "The custom field value managers that will replace old ones",
                    "required": true
                }
            },
            "delete": {
                "deprecated": false,
                "summary": "Removes managers for a specific custom field value",
                "description": "Removes managers for a specific custom field value",
                "security": [
                    {
                        "PayhawkApiKey": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No content"
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Account, custom field or custom field value not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests. API rate limit is 15 requests per 1 second sliding window. A Retry-After and RateLimit-Remaining headers are provided in each response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Identifier of the account",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "customFieldId",
                        "in": "path",
                        "description": "Identifier of the custom field",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "customFieldValueId",
                        "in": "path",
                        "description": "Identifier of the custom field value",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Custom Fields"
                ]
            }
        },
        "/api/v3/accounts/{accountId}/tax-rates": {
            "get": {
                "deprecated": false,
                "summary": "Get tax rates",
                "description": "Returns all tax rates for an account",
                "security": [
                    {
                        "PayhawkApiKey": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An array of ITaxRate objects",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ITaxRatesResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Account not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests. API rate limit is 15 requests per 1 second sliding window. A Retry-After and RateLimit-Remaining headers are provided in each response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Identifier of the account",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Tax Rates"
                ]
            },
            "put": {
                "deprecated": false,
                "summary": "Update tax rates",
                "description": "Replaces the tax rates of an account. Returns the updated tax rates",
                "security": [
                    {
                        "PayhawkApiKey": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An array of ITaxRate objects",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ITaxRatesResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Account not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests. API rate limit is 15 requests per 1 second sliding window. A Retry-After and RateLimit-Remaining headers are provided in each response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Identifier of the account",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Tax Rates"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/INewTaxRates"
                            }
                        }
                    },
                    "description": "The new tax rates",
                    "required": true
                }
            }
        },
        "/api/v3/accounts/{accountId}/amortizations": {
            "get": {
                "deprecated": false,
                "summary": "Get expense amortizations",
                "description": "Returns all amortizations for an account",
                "security": [
                    {
                        "PayhawkApiKey": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An array of IExpenseAmortization objects",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IExpenseAmortizationsResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Account not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests. API rate limit is 15 requests per 1 second sliding window. A Retry-After and RateLimit-Remaining headers are provided in each response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Identifier of the account",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Amortizations"
                ]
            },
            "put": {
                "deprecated": false,
                "summary": "Update amortizations",
                "description": "Replaces the amortizations of an account. Returns the updated amortizations",
                "security": [
                    {
                        "PayhawkApiKey": []
                    }
                ],
                "responses": {
                    "201": {
                        "description": "An array of the created IExpenseAmortization objects",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IExpenseAmortizationsResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Account not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests. API rate limit is 15 requests per 1 second sliding window. A Retry-After and RateLimit-Remaining headers are provided in each response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Identifier of the account",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Amortizations"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/INewExpenseAmortizations"
                            }
                        }
                    },
                    "description": "The new amortizations",
                    "required": true
                }
            }
        },
        "/api/v3/accounts/{accountId}/external-teams": {
            "get": {
                "deprecated": false,
                "summary": "Get external teams",
                "description": "Returns all external teams for an account",
                "security": [
                    {
                        "PayhawkApiKey": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An array of IExternalTeam objects",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IExternalTeamsResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Account not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests. API rate limit is 15 requests per 1 second sliding window. A Retry-After and RateLimit-Remaining headers are provided in each response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Identifier of the account",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "External Teams"
                ]
            },
            "put": {
                "deprecated": false,
                "summary": "Update external teams",
                "description": "Replaces the external teams of an account. Returns the updated external teams",
                "security": [
                    {
                        "PayhawkApiKey": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An array of IExternalTeam objects",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IExternalTeamsResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Account not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests. API rate limit is 15 requests per 1 second sliding window. A Retry-After and RateLimit-Remaining headers are provided in each response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Identifier of the account",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "External Teams"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/INewExternalTeams"
                            }
                        }
                    },
                    "description": "The new external teams",
                    "required": true
                }
            }
        },
        "/api/v3/accounts/{accountId}/webhooks": {
            "get": {
                "deprecated": false,
                "summary": "Get webhook subscriptions",
                "description": "Returns all webhook subscriptions for an account",
                "security": [
                    {
                        "PayhawkApiKey": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An array of IWebhookSubscription objects",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IWebhookSubscriptionsResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Account not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests. API rate limit is 15 requests per 1 second sliding window. A Retry-After and RateLimit-Remaining headers are provided in each response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Identifier of the account",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Webhook Subscriptions"
                ]
            },
            "post": {
                "deprecated": false,
                "summary": "Create webhook subscription",
                "description": "Creates a webhook subscription for an account",
                "security": [
                    {
                        "PayhawkApiKey": []
                    }
                ],
                "responses": {
                    "201": {
                        "description": "IWebhookSubscription object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IWebhookSubscription"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Account not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests. API rate limit is 15 requests per 1 second sliding window. A Retry-After and RateLimit-Remaining headers are provided in each response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Identifier of the account",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Webhook Subscriptions"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/INewWebhookSubscription"
                            }
                        }
                    },
                    "description": "The new webhook subscription",
                    "required": true
                }
            }
        },
        "/api/v3/accounts/{accountId}/webhooks/{subscriptionId}": {
            "get": {
                "deprecated": false,
                "summary": "Get webhook subscription",
                "description": "Returns a webhook subscription by id",
                "security": [
                    {
                        "PayhawkApiKey": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IWebhookSubscription object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IWebhookSubscription"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Webhook subscription not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests. API rate limit is 15 requests per 1 second sliding window. A Retry-After and RateLimit-Remaining headers are provided in each response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Identifier of the account",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "subscriptionId",
                        "in": "path",
                        "description": "Identifier of the subscription",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Webhook Subscriptions"
                ]
            },
            "delete": {
                "deprecated": false,
                "summary": "Remove webhook subscription",
                "description": "Removes a webhook subscription for an account",
                "security": [
                    {
                        "PayhawkApiKey": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Empty response body"
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Webhook subscription not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests. API rate limit is 15 requests per 1 second sliding window. A Retry-After and RateLimit-Remaining headers are provided in each response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Identifier of the account",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "subscriptionId",
                        "in": "path",
                        "description": "Identifier of the subscription",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Webhook Subscriptions"
                ]
            }
        },
        "/api/v3/accounts/{accountId}/suppliers": {
            "get": {
                "deprecated": false,
                "summary": "Get a list of the suppliers",
                "description": "Returns a list of the suppliers",
                "security": [
                    {
                        "PayhawkApiKey": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An array of ISupplier objects",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ISuppliersResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests. API rate limit is 15 requests per 1 second sliding window. A Retry-After and RateLimit-Remaining headers are provided in each response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Identifier of the account",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Suppliers"
                ]
            },
            "post": {
                "deprecated": false,
                "summary": "Creates a new supplier",
                "description": "Returns the newly created supplier",
                "security": [
                    {
                        "PayhawkApiKey": []
                    }
                ],
                "responses": {
                    "201": {
                        "description": "ISupplier object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ISupplier"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests. API rate limit is 15 requests per 1 second sliding window. A Retry-After and RateLimit-Remaining headers are provided in each response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Identifier of the account",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Suppliers"
                ]
            }
        },
        "/api/v3/accounts/{accountId}/suppliers/{supplierId}": {
            "get": {
                "deprecated": false,
                "summary": "Get a supplier",
                "description": "Returns a supplier by id",
                "security": [
                    {
                        "PayhawkApiKey": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ISupplier object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ISupplier"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Supplier not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests. API rate limit is 15 requests per 1 second sliding window. A Retry-After and RateLimit-Remaining headers are provided in each response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Identifier of the account",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "supplierId",
                        "in": "path",
                        "description": "Identifier of the supplier",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Suppliers"
                ]
            },
            "patch": {
                "deprecated": false,
                "summary": "Updates a supplier",
                "description": "Returns the updated supplier",
                "security": [
                    {
                        "PayhawkApiKey": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ISupplier object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ISupplier"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Supplier not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests. API rate limit is 15 requests per 1 second sliding window. A Retry-After and RateLimit-Remaining headers are provided in each response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Identifier of the account",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "supplierId",
                        "in": "path",
                        "description": "Identifier of the supplier",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Suppliers"
                ]
            }
        },
        "/api/v3/accounts/{accountId}/suppliers-custom-fields": {
            "get": {
                "deprecated": false,
                "summary": "Get a list of the supplier custom fields",
                "description": "Returns the a list of the supplier custom fields",
                "security": [
                    {
                        "PayhawkApiKey": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An array of ISupplierCustomField objects",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ISupplierCustomField"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests. API rate limit is 15 requests per 1 second sliding window. A Retry-After and RateLimit-Remaining headers are provided in each response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Identifier of the account",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Suppliers"
                ]
            }
        },
        "/api/v3/accounts/{accountId}/suppliers/{supplierId}/status": {
            "patch": {
                "deprecated": false,
                "summary": "Updates a supplier status",
                "description": "Returns the updated supplier",
                "security": [
                    {
                        "PayhawkApiKey": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ISupplier object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ISupplier"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Supplier not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests. API rate limit is 15 requests per 1 second sliding window. A Retry-After and RateLimit-Remaining headers are provided in each response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Identifier of the account",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "supplierId",
                        "in": "path",
                        "description": "Identifier of the supplier",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Suppliers"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ISupplierStatusPatch"
                            }
                        }
                    },
                    "description": "Supplier status",
                    "required": true
                }
            }
        },
        "/api/v3/accounts/{accountId}/suppliers/upload-file": {
            "post": {
                "deprecated": false,
                "summary": "Uploads a file to be used as a supplier custom field source",
                "description": "Returns the id of the uploaded file",
                "security": [
                    {
                        "PayhawkApiKey": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "string",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests. API rate limit is 15 requests per 1 second sliding window. A Retry-After and RateLimit-Remaining headers are provided in each response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Identifier of the account",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Suppliers"
                ]
            }
        },
        "/api/v3/accounts/{accountId}/purchase-orders": {
            "get": {
                "deprecated": false,
                "summary": "Get a list of purchase orders",
                "description": "Returns a list of purchase orders. Supports pagination and filtering by purchaseOrderNumber and status.",
                "security": [
                    {
                        "PayhawkApiKey": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of purchase orders",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IPurchaseOrdersResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests. API rate limit is 15 requests per 1 second sliding window. A Retry-After and RateLimit-Remaining headers are provided in each response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "$filter",
                        "in": "query",
                        "description": "JSON-stringified and URL-encoded filter expression object that conforms to `IPurchaseOrderFilter` schema.",
                        "required": false,
                        "deprecated": false,
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IPurchaseOrderFilter"
                                }
                            }
                        }
                    },
                    {
                        "name": "$skip",
                        "in": "query",
                        "description": "Number of objects to skip from the beginning of the result set.",
                        "required": false,
                        "deprecated": false,
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "$take",
                        "in": "query",
                        "description": "Max number of objects to return. The default value is 20. (maximum number of items that will be returned is 1000)",
                        "required": false,
                        "deprecated": false,
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Identifier of the account",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Purchase Orders"
                ]
            },
            "post": {
                "deprecated": false,
                "summary": "Create a new purchase order",
                "description": "Creates a new purchase order. Supports creating a purchase order including a list of line items.",
                "security": [
                    {
                        "PayhawkApiKey": []
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The newly created purchase order",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IPurchaseOrder"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests. API rate limit is 15 requests per 1 second sliding window. A Retry-After and RateLimit-Remaining headers are provided in each response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Identifier of the account",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Purchase Orders"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/INewPurchaseOrder"
                            }
                        }
                    },
                    "description": "Details of the purchase order",
                    "required": true
                }
            }
        },
        "/api/v3/accounts/{accountId}/purchase-orders/{purchaseOrderId}": {
            "get": {
                "deprecated": false,
                "summary": "Get a purchase order",
                "description": "Returns a purchase order by id.",
                "security": [
                    {
                        "PayhawkApiKey": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Purchase order including the line items",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IPurchaseOrder"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Purchase order not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests. API rate limit is 15 requests per 1 second sliding window. A Retry-After and RateLimit-Remaining headers are provided in each response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Identifier of the account",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "purchaseOrderId",
                        "in": "path",
                        "description": "Identifier of the purchase order",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Purchase Orders"
                ]
            },
            "patch": {
                "deprecated": false,
                "summary": "Update a purchase order",
                "description": "Updates an existing purchase order.",
                "security": [
                    {
                        "PayhawkApiKey": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The newly updated purchase order",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IPurchaseOrder"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests. API rate limit is 15 requests per 1 second sliding window. A Retry-After and RateLimit-Remaining headers are provided in each response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Identifier of the account",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "purchaseOrderId",
                        "in": "path",
                        "description": "Identifier of the purchase order",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Purchase Orders"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IPurchaseOrderPatch"
                            }
                        }
                    },
                    "description": "Details of the purchase order",
                    "required": true
                }
            }
        },
        "/api/v3/accounts/{accountId}/purchase-orders/{purchaseOrderId}/open": {
            "post": {
                "deprecated": false,
                "summary": "Open a purchase order",
                "description": "Opens directly an existing purchase order. Only purchase orders in status Draft/Returned can be opened.",
                "security": [
                    {
                        "PayhawkApiKey": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No content"
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests. API rate limit is 15 requests per 1 second sliding window. A Retry-After and RateLimit-Remaining headers are provided in each response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Identifier of the account",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "purchaseOrderId",
                        "in": "path",
                        "description": "Identifier of the purchase order",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Purchase Orders"
                ]
            }
        },
        "/api/v3/accounts/{accountId}/purchase-orders/{purchaseOrderId}/items": {
            "get": {
                "deprecated": false,
                "summary": "Get a list of purchase orders items for a specific purchase order",
                "description": "Returns a list of purchase orders items.",
                "security": [
                    {
                        "PayhawkApiKey": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of purchase order items",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IPurchaseOrderItemsResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Purchase order not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests. API rate limit is 15 requests per 1 second sliding window. A Retry-After and RateLimit-Remaining headers are provided in each response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Identifier of the account",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "purchaseOrderId",
                        "in": "path",
                        "description": "Identifier of the purchase order",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Purchase Orders"
                ]
            },
            "post": {
                "deprecated": false,
                "summary": "Create a purchase order item",
                "description": "Adds a new line item to an existing purchase order.",
                "security": [
                    {
                        "PayhawkApiKey": []
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Purchase order line item",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IPurchaseOrderItem"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests. API rate limit is 15 requests per 1 second sliding window. A Retry-After and RateLimit-Remaining headers are provided in each response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Identifier of the account",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "purchaseOrderId",
                        "in": "path",
                        "description": "Identifier of the purchase order",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Purchase Orders"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/INewPurchaseOrderItem"
                            }
                        }
                    },
                    "description": "Details of the purchase order item",
                    "required": true
                }
            }
        },
        "/api/v3/accounts/{accountId}/purchase-orders/{purchaseOrderId}/items/{purchaseOrderItemId}": {
            "get": {
                "deprecated": false,
                "summary": "Get a purchase order item",
                "description": "Returns a purchase order item by id.",
                "security": [
                    {
                        "PayhawkApiKey": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Purchase order line item",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IPurchaseOrderItem"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests. API rate limit is 15 requests per 1 second sliding window. A Retry-After and RateLimit-Remaining headers are provided in each response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Identifier of the account",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "purchaseOrderId",
                        "in": "path",
                        "description": "Identifier of the purchase order",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "purchaseOrderItemId",
                        "in": "path",
                        "description": "Identifier of the purchase order item",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Purchase Orders"
                ]
            },
            "patch": {
                "deprecated": false,
                "summary": "Update a purchase order item",
                "description": "Updates an existing purchase order line item.",
                "security": [
                    {
                        "PayhawkApiKey": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Purchase order line item",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IPurchaseOrderItem"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests. API rate limit is 15 requests per 1 second sliding window. A Retry-After and RateLimit-Remaining headers are provided in each response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Identifier of the account",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "purchaseOrderId",
                        "in": "path",
                        "description": "Identifier of the purchase order",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "purchaseOrderItemId",
                        "in": "path",
                        "description": "Identifier of the purchase order item",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Purchase Orders"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IPurchaseOrderItemPatch"
                            }
                        }
                    },
                    "description": "Details of the purchase order item",
                    "required": true
                }
            },
            "delete": {
                "deprecated": false,
                "summary": "Delete a purchase order item",
                "description": "Deletes a specific purchase order line item.",
                "security": [
                    {
                        "PayhawkApiKey": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No content"
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests. API rate limit is 15 requests per 1 second sliding window. A Retry-After and RateLimit-Remaining headers are provided in each response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Identifier of the account",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "purchaseOrderId",
                        "in": "path",
                        "description": "Identifier of the purchase order",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "purchaseOrderItemId",
                        "in": "path",
                        "description": "Identifier of the purchase order item",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Purchase Orders"
                ]
            }
        },
        "/api/v3/accounts/{accountId}/purchase-orders/{purchaseOrderId}/goods-received-notes": {
            "get": {
                "deprecated": false,
                "summary": "Get a list of goods received notes for a specific purchase order",
                "description": "Returns a list of goods received notes.",
                "security": [
                    {
                        "PayhawkApiKey": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of goods received notes",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IGoodsReceivedNotesResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Purchase order not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests. API rate limit is 15 requests per 1 second sliding window. A Retry-After and RateLimit-Remaining headers are provided in each response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Identifier of the account",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "purchaseOrderId",
                        "in": "path",
                        "description": "Identifier of the purchase order",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Purchase Orders"
                ]
            },
            "post": {
                "deprecated": false,
                "summary": "Create a goods received note",
                "description": "Creates a new goods received note and returns it.",
                "security": [
                    {
                        "PayhawkApiKey": []
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The newly created goods received note",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IGoodsReceivedNote"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Purchase order not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests. API rate limit is 15 requests per 1 second sliding window. A Retry-After and RateLimit-Remaining headers are provided in each response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Identifier of the account",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "purchaseOrderId",
                        "in": "path",
                        "description": "Identifier of the purchase order",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Purchase Orders"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/INewGoodsReceivedNote"
                            }
                        }
                    },
                    "description": "The GRN to be created",
                    "required": true
                }
            }
        },
        "/api/v3/accounts/{accountId}/purchase-orders/{purchaseOrderId}/goods-received-notes/{goodsReceivedNoteId}/files": {
            "post": {
                "deprecated": false,
                "summary": "Attach a file to a goods received note",
                "description": "Upload a file and attach it to a specific goods received note.",
                "security": [
                    {
                        "PayhawkApiKey": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No content"
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Purchase order not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests. API rate limit is 15 requests per 1 second sliding window. A Retry-After and RateLimit-Remaining headers are provided in each response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Identifier of the account",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "purchaseOrderId",
                        "in": "path",
                        "description": "Identifier of the purchase order",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "goodsReceivedNoteId",
                        "in": "path",
                        "description": "Identifier of the goods received note",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Purchase Orders"
                ],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object"
                            }
                        }
                    },
                    "description": "File",
                    "required": true
                }
            }
        },
        "/api/v3/accounts/{accountId}/purchase-orders/{purchaseOrderId}/goods-received-notes/{goodsReceivedNoteId}": {
            "delete": {
                "deprecated": false,
                "summary": "Delete a goods received note",
                "description": "Deletes a specific purchase order goods received note.",
                "security": [
                    {
                        "PayhawkApiKey": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No content"
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests. API rate limit is 15 requests per 1 second sliding window. A Retry-After and RateLimit-Remaining headers are provided in each response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Identifier of the account",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "purchaseOrderId",
                        "in": "path",
                        "description": "Identifier of the purchase order",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "goodsReceivedNoteId",
                        "in": "path",
                        "description": "Identifier of the goods received note",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Purchase Orders"
                ]
            }
        },
        "/api/v3/accounts/{accountId}/expense-categories": {
            "get": {
                "deprecated": false,
                "summary": "Get a list of all available expense categories",
                "description": "Returns a list of expense categories.",
                "security": [
                    {
                        "PayhawkApiKey": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An array of IExpenseCategory objects and a total count",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IExpenseCategoriesResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests. API rate limit is 15 requests per 1 second sliding window. A Retry-After and RateLimit-Remaining headers are provided in each response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Identifier of the account",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Expense Categories"
                ]
            }
        },
        "/api/v3/accounts/{accountId}/expense-categories/{categoryId}": {
            "get": {
                "deprecated": false,
                "summary": "Get an expense categories by id",
                "description": "Returns the requested expense categories.",
                "security": [
                    {
                        "PayhawkApiKey": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An object of type IExpenseCategory",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IExpenseCategory"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests. API rate limit is 15 requests per 1 second sliding window. A Retry-After and RateLimit-Remaining headers are provided in each response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IError"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Identifier of the account",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "categoryId",
                        "in": "path",
                        "description": "Identifier of the expense category",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Expense Categories"
                ]
            }
        }
    },
    "tags": [
        {
            "name": "Group Accounts",
            "description": ""
        },
        {
            "name": "Group Account Codes",
            "description": ""
        },
        {
            "name": "Accounts",
            "description": ""
        },
        {
            "name": "Expenses",
            "description": ""
        },
        {
            "name": "Purchase Orders",
            "description": ""
        },
        {
            "name": "Suppliers",
            "description": ""
        },
        {
            "name": "Fund Accounts",
            "description": ""
        },
        {
            "name": "Cards",
            "description": ""
        },
        {
            "name": "Expense Categories",
            "description": ""
        },
        {
            "name": "Tax Rates",
            "description": ""
        },
        {
            "name": "Amortizations",
            "description": ""
        },
        {
            "name": "Account Teams",
            "description": ""
        },
        {
            "name": "Account Codes",
            "description": ""
        },
        {
            "name": "External Teams",
            "description": ""
        },
        {
            "name": "Custom Fields",
            "description": ""
        },
        {
            "name": "Webhook Subscriptions",
            "description": ""
        },
        {
            "name": "Group Teams",
            "description": ""
        },
        {
            "name": "System",
            "description": ""
        }
    ]
}
