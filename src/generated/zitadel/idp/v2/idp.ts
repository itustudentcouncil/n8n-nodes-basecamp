// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: zitadel/idp/v2/idp.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Duration } from "../../../google/protobuf/duration.js";
import { Details } from "../../object/v2/object.js";

export const protobufPackage = "zitadel.idp.v2";

export enum IDPState {
  IDP_STATE_UNSPECIFIED = 0,
  IDP_STATE_ACTIVE = 1,
  IDP_STATE_INACTIVE = 2,
  IDP_STATE_REMOVED = 3,
  IDP_STATE_MIGRATED = 4,
  UNRECOGNIZED = -1,
}

export function iDPStateFromJSON(object: any): IDPState {
  switch (object) {
    case 0:
    case "IDP_STATE_UNSPECIFIED":
      return IDPState.IDP_STATE_UNSPECIFIED;
    case 1:
    case "IDP_STATE_ACTIVE":
      return IDPState.IDP_STATE_ACTIVE;
    case 2:
    case "IDP_STATE_INACTIVE":
      return IDPState.IDP_STATE_INACTIVE;
    case 3:
    case "IDP_STATE_REMOVED":
      return IDPState.IDP_STATE_REMOVED;
    case 4:
    case "IDP_STATE_MIGRATED":
      return IDPState.IDP_STATE_MIGRATED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return IDPState.UNRECOGNIZED;
  }
}

export function iDPStateToJSON(object: IDPState): string {
  switch (object) {
    case IDPState.IDP_STATE_UNSPECIFIED:
      return "IDP_STATE_UNSPECIFIED";
    case IDPState.IDP_STATE_ACTIVE:
      return "IDP_STATE_ACTIVE";
    case IDPState.IDP_STATE_INACTIVE:
      return "IDP_STATE_INACTIVE";
    case IDPState.IDP_STATE_REMOVED:
      return "IDP_STATE_REMOVED";
    case IDPState.IDP_STATE_MIGRATED:
      return "IDP_STATE_MIGRATED";
    case IDPState.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum IDPType {
  IDP_TYPE_UNSPECIFIED = 0,
  IDP_TYPE_OIDC = 1,
  IDP_TYPE_JWT = 2,
  IDP_TYPE_LDAP = 3,
  IDP_TYPE_OAUTH = 4,
  IDP_TYPE_AZURE_AD = 5,
  IDP_TYPE_GITHUB = 6,
  IDP_TYPE_GITHUB_ES = 7,
  IDP_TYPE_GITLAB = 8,
  IDP_TYPE_GITLAB_SELF_HOSTED = 9,
  IDP_TYPE_GOOGLE = 10,
  IDP_TYPE_APPLE = 11,
  IDP_TYPE_SAML = 12,
  UNRECOGNIZED = -1,
}

export function iDPTypeFromJSON(object: any): IDPType {
  switch (object) {
    case 0:
    case "IDP_TYPE_UNSPECIFIED":
      return IDPType.IDP_TYPE_UNSPECIFIED;
    case 1:
    case "IDP_TYPE_OIDC":
      return IDPType.IDP_TYPE_OIDC;
    case 2:
    case "IDP_TYPE_JWT":
      return IDPType.IDP_TYPE_JWT;
    case 3:
    case "IDP_TYPE_LDAP":
      return IDPType.IDP_TYPE_LDAP;
    case 4:
    case "IDP_TYPE_OAUTH":
      return IDPType.IDP_TYPE_OAUTH;
    case 5:
    case "IDP_TYPE_AZURE_AD":
      return IDPType.IDP_TYPE_AZURE_AD;
    case 6:
    case "IDP_TYPE_GITHUB":
      return IDPType.IDP_TYPE_GITHUB;
    case 7:
    case "IDP_TYPE_GITHUB_ES":
      return IDPType.IDP_TYPE_GITHUB_ES;
    case 8:
    case "IDP_TYPE_GITLAB":
      return IDPType.IDP_TYPE_GITLAB;
    case 9:
    case "IDP_TYPE_GITLAB_SELF_HOSTED":
      return IDPType.IDP_TYPE_GITLAB_SELF_HOSTED;
    case 10:
    case "IDP_TYPE_GOOGLE":
      return IDPType.IDP_TYPE_GOOGLE;
    case 11:
    case "IDP_TYPE_APPLE":
      return IDPType.IDP_TYPE_APPLE;
    case 12:
    case "IDP_TYPE_SAML":
      return IDPType.IDP_TYPE_SAML;
    case -1:
    case "UNRECOGNIZED":
    default:
      return IDPType.UNRECOGNIZED;
  }
}

export function iDPTypeToJSON(object: IDPType): string {
  switch (object) {
    case IDPType.IDP_TYPE_UNSPECIFIED:
      return "IDP_TYPE_UNSPECIFIED";
    case IDPType.IDP_TYPE_OIDC:
      return "IDP_TYPE_OIDC";
    case IDPType.IDP_TYPE_JWT:
      return "IDP_TYPE_JWT";
    case IDPType.IDP_TYPE_LDAP:
      return "IDP_TYPE_LDAP";
    case IDPType.IDP_TYPE_OAUTH:
      return "IDP_TYPE_OAUTH";
    case IDPType.IDP_TYPE_AZURE_AD:
      return "IDP_TYPE_AZURE_AD";
    case IDPType.IDP_TYPE_GITHUB:
      return "IDP_TYPE_GITHUB";
    case IDPType.IDP_TYPE_GITHUB_ES:
      return "IDP_TYPE_GITHUB_ES";
    case IDPType.IDP_TYPE_GITLAB:
      return "IDP_TYPE_GITLAB";
    case IDPType.IDP_TYPE_GITLAB_SELF_HOSTED:
      return "IDP_TYPE_GITLAB_SELF_HOSTED";
    case IDPType.IDP_TYPE_GOOGLE:
      return "IDP_TYPE_GOOGLE";
    case IDPType.IDP_TYPE_APPLE:
      return "IDP_TYPE_APPLE";
    case IDPType.IDP_TYPE_SAML:
      return "IDP_TYPE_SAML";
    case IDPType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum SAMLBinding {
  SAML_BINDING_UNSPECIFIED = 0,
  SAML_BINDING_POST = 1,
  SAML_BINDING_REDIRECT = 2,
  SAML_BINDING_ARTIFACT = 3,
  UNRECOGNIZED = -1,
}

export function sAMLBindingFromJSON(object: any): SAMLBinding {
  switch (object) {
    case 0:
    case "SAML_BINDING_UNSPECIFIED":
      return SAMLBinding.SAML_BINDING_UNSPECIFIED;
    case 1:
    case "SAML_BINDING_POST":
      return SAMLBinding.SAML_BINDING_POST;
    case 2:
    case "SAML_BINDING_REDIRECT":
      return SAMLBinding.SAML_BINDING_REDIRECT;
    case 3:
    case "SAML_BINDING_ARTIFACT":
      return SAMLBinding.SAML_BINDING_ARTIFACT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SAMLBinding.UNRECOGNIZED;
  }
}

export function sAMLBindingToJSON(object: SAMLBinding): string {
  switch (object) {
    case SAMLBinding.SAML_BINDING_UNSPECIFIED:
      return "SAML_BINDING_UNSPECIFIED";
    case SAMLBinding.SAML_BINDING_POST:
      return "SAML_BINDING_POST";
    case SAMLBinding.SAML_BINDING_REDIRECT:
      return "SAML_BINDING_REDIRECT";
    case SAMLBinding.SAML_BINDING_ARTIFACT:
      return "SAML_BINDING_ARTIFACT";
    case SAMLBinding.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum SAMLNameIDFormat {
  SAML_NAME_ID_FORMAT_UNSPECIFIED = 0,
  SAML_NAME_ID_FORMAT_EMAIL_ADDRESS = 1,
  SAML_NAME_ID_FORMAT_PERSISTENT = 2,
  SAML_NAME_ID_FORMAT_TRANSIENT = 3,
  UNRECOGNIZED = -1,
}

export function sAMLNameIDFormatFromJSON(object: any): SAMLNameIDFormat {
  switch (object) {
    case 0:
    case "SAML_NAME_ID_FORMAT_UNSPECIFIED":
      return SAMLNameIDFormat.SAML_NAME_ID_FORMAT_UNSPECIFIED;
    case 1:
    case "SAML_NAME_ID_FORMAT_EMAIL_ADDRESS":
      return SAMLNameIDFormat.SAML_NAME_ID_FORMAT_EMAIL_ADDRESS;
    case 2:
    case "SAML_NAME_ID_FORMAT_PERSISTENT":
      return SAMLNameIDFormat.SAML_NAME_ID_FORMAT_PERSISTENT;
    case 3:
    case "SAML_NAME_ID_FORMAT_TRANSIENT":
      return SAMLNameIDFormat.SAML_NAME_ID_FORMAT_TRANSIENT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SAMLNameIDFormat.UNRECOGNIZED;
  }
}

export function sAMLNameIDFormatToJSON(object: SAMLNameIDFormat): string {
  switch (object) {
    case SAMLNameIDFormat.SAML_NAME_ID_FORMAT_UNSPECIFIED:
      return "SAML_NAME_ID_FORMAT_UNSPECIFIED";
    case SAMLNameIDFormat.SAML_NAME_ID_FORMAT_EMAIL_ADDRESS:
      return "SAML_NAME_ID_FORMAT_EMAIL_ADDRESS";
    case SAMLNameIDFormat.SAML_NAME_ID_FORMAT_PERSISTENT:
      return "SAML_NAME_ID_FORMAT_PERSISTENT";
    case SAMLNameIDFormat.SAML_NAME_ID_FORMAT_TRANSIENT:
      return "SAML_NAME_ID_FORMAT_TRANSIENT";
    case SAMLNameIDFormat.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum AutoLinkingOption {
  /** AUTO_LINKING_OPTION_UNSPECIFIED - AUTO_LINKING_OPTION_UNSPECIFIED disables the auto linking prompt. */
  AUTO_LINKING_OPTION_UNSPECIFIED = 0,
  /** AUTO_LINKING_OPTION_USERNAME - AUTO_LINKING_OPTION_USERNAME will use the username of the external user to check for a corresponding ZITADEL user. */
  AUTO_LINKING_OPTION_USERNAME = 1,
  /**
   * AUTO_LINKING_OPTION_EMAIL - AUTO_LINKING_OPTION_EMAIL  will use the email of the external user to check for a corresponding ZITADEL user with the same verified email
   * Note that in case multiple users match, no prompt will be shown.
   */
  AUTO_LINKING_OPTION_EMAIL = 2,
  UNRECOGNIZED = -1,
}

export function autoLinkingOptionFromJSON(object: any): AutoLinkingOption {
  switch (object) {
    case 0:
    case "AUTO_LINKING_OPTION_UNSPECIFIED":
      return AutoLinkingOption.AUTO_LINKING_OPTION_UNSPECIFIED;
    case 1:
    case "AUTO_LINKING_OPTION_USERNAME":
      return AutoLinkingOption.AUTO_LINKING_OPTION_USERNAME;
    case 2:
    case "AUTO_LINKING_OPTION_EMAIL":
      return AutoLinkingOption.AUTO_LINKING_OPTION_EMAIL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AutoLinkingOption.UNRECOGNIZED;
  }
}

export function autoLinkingOptionToJSON(object: AutoLinkingOption): string {
  switch (object) {
    case AutoLinkingOption.AUTO_LINKING_OPTION_UNSPECIFIED:
      return "AUTO_LINKING_OPTION_UNSPECIFIED";
    case AutoLinkingOption.AUTO_LINKING_OPTION_USERNAME:
      return "AUTO_LINKING_OPTION_USERNAME";
    case AutoLinkingOption.AUTO_LINKING_OPTION_EMAIL:
      return "AUTO_LINKING_OPTION_EMAIL";
    case AutoLinkingOption.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum AzureADTenantType {
  AZURE_AD_TENANT_TYPE_COMMON = 0,
  AZURE_AD_TENANT_TYPE_ORGANISATIONS = 1,
  AZURE_AD_TENANT_TYPE_CONSUMERS = 2,
  UNRECOGNIZED = -1,
}

export function azureADTenantTypeFromJSON(object: any): AzureADTenantType {
  switch (object) {
    case 0:
    case "AZURE_AD_TENANT_TYPE_COMMON":
      return AzureADTenantType.AZURE_AD_TENANT_TYPE_COMMON;
    case 1:
    case "AZURE_AD_TENANT_TYPE_ORGANISATIONS":
      return AzureADTenantType.AZURE_AD_TENANT_TYPE_ORGANISATIONS;
    case 2:
    case "AZURE_AD_TENANT_TYPE_CONSUMERS":
      return AzureADTenantType.AZURE_AD_TENANT_TYPE_CONSUMERS;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AzureADTenantType.UNRECOGNIZED;
  }
}

export function azureADTenantTypeToJSON(object: AzureADTenantType): string {
  switch (object) {
    case AzureADTenantType.AZURE_AD_TENANT_TYPE_COMMON:
      return "AZURE_AD_TENANT_TYPE_COMMON";
    case AzureADTenantType.AZURE_AD_TENANT_TYPE_ORGANISATIONS:
      return "AZURE_AD_TENANT_TYPE_ORGANISATIONS";
    case AzureADTenantType.AZURE_AD_TENANT_TYPE_CONSUMERS:
      return "AZURE_AD_TENANT_TYPE_CONSUMERS";
    case AzureADTenantType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface IDP {
  /** Unique identifier for the identity provider. */
  id: string;
  details:
    | Details
    | undefined;
  /** Current state of the identity provider. */
  state: IDPState;
  name: string;
  /** Type of the identity provider, for example OIDC, JWT, LDAP and SAML. */
  type: IDPType;
  /** Configuration for the type of the identity provider. */
  config: IDPConfig | undefined;
}

export interface IDPConfig {
  options: Options | undefined;
  ldap?: LDAPConfig | undefined;
  google?: GoogleConfig | undefined;
  oauth?: OAuthConfig | undefined;
  oidc?: GenericOIDCConfig | undefined;
  jwt?: JWTConfig | undefined;
  github?: GitHubConfig | undefined;
  githubEs?: GitHubEnterpriseServerConfig | undefined;
  gitlab?: GitLabConfig | undefined;
  gitlabSelfHosted?: GitLabSelfHostedConfig | undefined;
  azureAd?: AzureADConfig | undefined;
  apple?: AppleConfig | undefined;
  saml?: SAMLConfig | undefined;
}

export interface JWTConfig {
  /** The endpoint where the JWT can be extracted. */
  jwtEndpoint: string;
  /** The issuer of the JWT (for validation). */
  issuer: string;
  /** The endpoint to the key (JWK) which is used to sign the JWT with. */
  keysEndpoint: string;
  /** The name of the header where the JWT is sent in, default is authorization. */
  headerName: string;
}

export interface OAuthConfig {
  /** Client id generated by the identity provider. */
  clientId: string;
  /** The endpoint where ZITADEL send the user to authenticate. */
  authorizationEndpoint: string;
  /** The endpoint where ZITADEL can get the token. */
  tokenEndpoint: string;
  /** The endpoint where ZITADEL can get the user information. */
  userEndpoint: string;
  /** The scopes requested by ZITADEL during the request on the identity provider. */
  scopes: string[];
  /** Defines how the attribute is called where ZITADEL can get the id of the user. */
  idAttribute: string;
}

export interface GenericOIDCConfig {
  /** The OIDC issuer of the identity provider. */
  issuer: string;
  /** Client id generated by the identity provider. */
  clientId: string;
  /** The scopes requested by ZITADEL during the request on the identity provider. */
  scopes: string[];
  /** If true, provider information get mapped from the id token, not from the userinfo endpoint. */
  isIdTokenMapping: boolean;
}

export interface GitHubConfig {
  /** The client ID of the GitHub App. */
  clientId: string;
  /** The scopes requested by ZITADEL during the request to GitHub. */
  scopes: string[];
}

export interface GitHubEnterpriseServerConfig {
  /** The client ID of the GitHub App. */
  clientId: string;
  authorizationEndpoint: string;
  tokenEndpoint: string;
  userEndpoint: string;
  /** The scopes requested by ZITADEL during the request to GitHub. */
  scopes: string[];
}

export interface GoogleConfig {
  /** Client id of the Google application. */
  clientId: string;
  /** The scopes requested by ZITADEL during the request to Google. */
  scopes: string[];
}

export interface GitLabConfig {
  /** Client id of the GitLab application. */
  clientId: string;
  /** The scopes requested by ZITADEL during the request to GitLab. */
  scopes: string[];
}

export interface GitLabSelfHostedConfig {
  issuer: string;
  /** Client id of the GitLab application. */
  clientId: string;
  /** The scopes requested by ZITADEL during the request to GitLab. */
  scopes: string[];
}

export interface LDAPConfig {
  servers: string[];
  startTls: boolean;
  baseDn: string;
  bindDn: string;
  userBase: string;
  userObjectClasses: string[];
  userFilters: string[];
  timeout: Duration | undefined;
  attributes: LDAPAttributes | undefined;
}

export interface SAMLConfig {
  /** Metadata of the SAML identity provider. */
  metadataXml: Buffer;
  /** Binding which defines the type of communication with the identity provider. */
  binding: SAMLBinding;
  /** Boolean which defines if the authentication requests are signed. */
  withSignedRequest: boolean;
  /** `nameid-format` for the SAML Request. */
  nameIdFormat: SAMLNameIDFormat;
  /**
   * Optional name of the attribute, which will be used to map the user
   * in case the nameid-format returned is `urn:oasis:names:tc:SAML:2.0:nameid-format:transient`.
   */
  transientMappingAttributeName?: string | undefined;
}

export interface AzureADConfig {
  /** Client id of the Azure AD application */
  clientId: string;
  /** Defines what user accounts should be able to login (Personal, Organizational, All). */
  tenant:
    | AzureADTenant
    | undefined;
  /** Azure AD doesn't send if the email has been verified. Enable this if the user email should always be added verified in ZITADEL (no verification emails will be sent). */
  emailVerified: boolean;
  /** The scopes requested by ZITADEL during the request to Azure AD. */
  scopes: string[];
}

export interface Options {
  /** Enable if users should be able to link an existing ZITADEL user with an external account. */
  isLinkingAllowed: boolean;
  /** Enable if users should be able to create a new account in ZITADEL when using an external account. */
  isCreationAllowed: boolean;
  /** Enable if a new account in ZITADEL should be created automatically when login with an external account. */
  isAutoCreation: boolean;
  /** Enable if a the ZITADEL account fields should be updated automatically on each login. */
  isAutoUpdate: boolean;
  /** Enable if users should get prompted to link an existing ZITADEL user to an external account if the selected attribute matches. */
  autoLinking: AutoLinkingOption;
}

export interface LDAPAttributes {
  idAttribute: string;
  firstNameAttribute: string;
  lastNameAttribute: string;
  displayNameAttribute: string;
  nickNameAttribute: string;
  preferredUsernameAttribute: string;
  emailAttribute: string;
  emailVerifiedAttribute: string;
  phoneAttribute: string;
  phoneVerifiedAttribute: string;
  preferredLanguageAttribute: string;
  avatarUrlAttribute: string;
  profileAttribute: string;
}

export interface AzureADTenant {
  tenantType?: AzureADTenantType | undefined;
  tenantId?: string | undefined;
}

export interface AppleConfig {
  /** Client id (App ID or Service ID) provided by Apple. */
  clientId: string;
  /** Team ID provided by Apple. */
  teamId: string;
  /** ID of the private key generated by Apple. */
  keyId: string;
  /** The scopes requested by ZITADEL during the request to Apple. */
  scopes: string[];
}

function createBaseIDP(): IDP {
  return { id: "", details: undefined, state: 0, name: "", type: 0, config: undefined };
}

export const IDP: MessageFns<IDP> = {
  encode(message: IDP, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.details !== undefined) {
      Details.encode(message.details, writer.uint32(18).fork()).join();
    }
    if (message.state !== 0) {
      writer.uint32(24).int32(message.state);
    }
    if (message.name !== "") {
      writer.uint32(34).string(message.name);
    }
    if (message.type !== 0) {
      writer.uint32(40).int32(message.type);
    }
    if (message.config !== undefined) {
      IDPConfig.encode(message.config, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IDP {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIDP();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.details = Details.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.name = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.config = IDPConfig.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IDP {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      details: isSet(object.details) ? Details.fromJSON(object.details) : undefined,
      state: isSet(object.state) ? iDPStateFromJSON(object.state) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      type: isSet(object.type) ? iDPTypeFromJSON(object.type) : 0,
      config: isSet(object.config) ? IDPConfig.fromJSON(object.config) : undefined,
    };
  },

  toJSON(message: IDP): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.details !== undefined) {
      obj.details = Details.toJSON(message.details);
    }
    if (message.state !== 0) {
      obj.state = iDPStateToJSON(message.state);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.type !== 0) {
      obj.type = iDPTypeToJSON(message.type);
    }
    if (message.config !== undefined) {
      obj.config = IDPConfig.toJSON(message.config);
    }
    return obj;
  },

  create(base?: DeepPartial<IDP>): IDP {
    return IDP.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<IDP>): IDP {
    const message = createBaseIDP();
    message.id = object.id ?? "";
    message.details = (object.details !== undefined && object.details !== null)
      ? Details.fromPartial(object.details)
      : undefined;
    message.state = object.state ?? 0;
    message.name = object.name ?? "";
    message.type = object.type ?? 0;
    message.config = (object.config !== undefined && object.config !== null)
      ? IDPConfig.fromPartial(object.config)
      : undefined;
    return message;
  },
};

function createBaseIDPConfig(): IDPConfig {
  return {
    options: undefined,
    ldap: undefined,
    google: undefined,
    oauth: undefined,
    oidc: undefined,
    jwt: undefined,
    github: undefined,
    githubEs: undefined,
    gitlab: undefined,
    gitlabSelfHosted: undefined,
    azureAd: undefined,
    apple: undefined,
    saml: undefined,
  };
}

export const IDPConfig: MessageFns<IDPConfig> = {
  encode(message: IDPConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.options !== undefined) {
      Options.encode(message.options, writer.uint32(10).fork()).join();
    }
    if (message.ldap !== undefined) {
      LDAPConfig.encode(message.ldap, writer.uint32(18).fork()).join();
    }
    if (message.google !== undefined) {
      GoogleConfig.encode(message.google, writer.uint32(26).fork()).join();
    }
    if (message.oauth !== undefined) {
      OAuthConfig.encode(message.oauth, writer.uint32(34).fork()).join();
    }
    if (message.oidc !== undefined) {
      GenericOIDCConfig.encode(message.oidc, writer.uint32(42).fork()).join();
    }
    if (message.jwt !== undefined) {
      JWTConfig.encode(message.jwt, writer.uint32(50).fork()).join();
    }
    if (message.github !== undefined) {
      GitHubConfig.encode(message.github, writer.uint32(58).fork()).join();
    }
    if (message.githubEs !== undefined) {
      GitHubEnterpriseServerConfig.encode(message.githubEs, writer.uint32(66).fork()).join();
    }
    if (message.gitlab !== undefined) {
      GitLabConfig.encode(message.gitlab, writer.uint32(74).fork()).join();
    }
    if (message.gitlabSelfHosted !== undefined) {
      GitLabSelfHostedConfig.encode(message.gitlabSelfHosted, writer.uint32(82).fork()).join();
    }
    if (message.azureAd !== undefined) {
      AzureADConfig.encode(message.azureAd, writer.uint32(90).fork()).join();
    }
    if (message.apple !== undefined) {
      AppleConfig.encode(message.apple, writer.uint32(98).fork()).join();
    }
    if (message.saml !== undefined) {
      SAMLConfig.encode(message.saml, writer.uint32(106).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IDPConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIDPConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.options = Options.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.ldap = LDAPConfig.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.google = GoogleConfig.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.oauth = OAuthConfig.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.oidc = GenericOIDCConfig.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.jwt = JWTConfig.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.github = GitHubConfig.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.githubEs = GitHubEnterpriseServerConfig.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.gitlab = GitLabConfig.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.gitlabSelfHosted = GitLabSelfHostedConfig.decode(reader, reader.uint32());
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.azureAd = AzureADConfig.decode(reader, reader.uint32());
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.apple = AppleConfig.decode(reader, reader.uint32());
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.saml = SAMLConfig.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IDPConfig {
    return {
      options: isSet(object.options) ? Options.fromJSON(object.options) : undefined,
      ldap: isSet(object.ldap) ? LDAPConfig.fromJSON(object.ldap) : undefined,
      google: isSet(object.google) ? GoogleConfig.fromJSON(object.google) : undefined,
      oauth: isSet(object.oauth) ? OAuthConfig.fromJSON(object.oauth) : undefined,
      oidc: isSet(object.oidc) ? GenericOIDCConfig.fromJSON(object.oidc) : undefined,
      jwt: isSet(object.jwt) ? JWTConfig.fromJSON(object.jwt) : undefined,
      github: isSet(object.github) ? GitHubConfig.fromJSON(object.github) : undefined,
      githubEs: isSet(object.githubEs) ? GitHubEnterpriseServerConfig.fromJSON(object.githubEs) : undefined,
      gitlab: isSet(object.gitlab) ? GitLabConfig.fromJSON(object.gitlab) : undefined,
      gitlabSelfHosted: isSet(object.gitlabSelfHosted)
        ? GitLabSelfHostedConfig.fromJSON(object.gitlabSelfHosted)
        : undefined,
      azureAd: isSet(object.azureAd) ? AzureADConfig.fromJSON(object.azureAd) : undefined,
      apple: isSet(object.apple) ? AppleConfig.fromJSON(object.apple) : undefined,
      saml: isSet(object.saml) ? SAMLConfig.fromJSON(object.saml) : undefined,
    };
  },

  toJSON(message: IDPConfig): unknown {
    const obj: any = {};
    if (message.options !== undefined) {
      obj.options = Options.toJSON(message.options);
    }
    if (message.ldap !== undefined) {
      obj.ldap = LDAPConfig.toJSON(message.ldap);
    }
    if (message.google !== undefined) {
      obj.google = GoogleConfig.toJSON(message.google);
    }
    if (message.oauth !== undefined) {
      obj.oauth = OAuthConfig.toJSON(message.oauth);
    }
    if (message.oidc !== undefined) {
      obj.oidc = GenericOIDCConfig.toJSON(message.oidc);
    }
    if (message.jwt !== undefined) {
      obj.jwt = JWTConfig.toJSON(message.jwt);
    }
    if (message.github !== undefined) {
      obj.github = GitHubConfig.toJSON(message.github);
    }
    if (message.githubEs !== undefined) {
      obj.githubEs = GitHubEnterpriseServerConfig.toJSON(message.githubEs);
    }
    if (message.gitlab !== undefined) {
      obj.gitlab = GitLabConfig.toJSON(message.gitlab);
    }
    if (message.gitlabSelfHosted !== undefined) {
      obj.gitlabSelfHosted = GitLabSelfHostedConfig.toJSON(message.gitlabSelfHosted);
    }
    if (message.azureAd !== undefined) {
      obj.azureAd = AzureADConfig.toJSON(message.azureAd);
    }
    if (message.apple !== undefined) {
      obj.apple = AppleConfig.toJSON(message.apple);
    }
    if (message.saml !== undefined) {
      obj.saml = SAMLConfig.toJSON(message.saml);
    }
    return obj;
  },

  create(base?: DeepPartial<IDPConfig>): IDPConfig {
    return IDPConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<IDPConfig>): IDPConfig {
    const message = createBaseIDPConfig();
    message.options = (object.options !== undefined && object.options !== null)
      ? Options.fromPartial(object.options)
      : undefined;
    message.ldap = (object.ldap !== undefined && object.ldap !== null)
      ? LDAPConfig.fromPartial(object.ldap)
      : undefined;
    message.google = (object.google !== undefined && object.google !== null)
      ? GoogleConfig.fromPartial(object.google)
      : undefined;
    message.oauth = (object.oauth !== undefined && object.oauth !== null)
      ? OAuthConfig.fromPartial(object.oauth)
      : undefined;
    message.oidc = (object.oidc !== undefined && object.oidc !== null)
      ? GenericOIDCConfig.fromPartial(object.oidc)
      : undefined;
    message.jwt = (object.jwt !== undefined && object.jwt !== null) ? JWTConfig.fromPartial(object.jwt) : undefined;
    message.github = (object.github !== undefined && object.github !== null)
      ? GitHubConfig.fromPartial(object.github)
      : undefined;
    message.githubEs = (object.githubEs !== undefined && object.githubEs !== null)
      ? GitHubEnterpriseServerConfig.fromPartial(object.githubEs)
      : undefined;
    message.gitlab = (object.gitlab !== undefined && object.gitlab !== null)
      ? GitLabConfig.fromPartial(object.gitlab)
      : undefined;
    message.gitlabSelfHosted = (object.gitlabSelfHosted !== undefined && object.gitlabSelfHosted !== null)
      ? GitLabSelfHostedConfig.fromPartial(object.gitlabSelfHosted)
      : undefined;
    message.azureAd = (object.azureAd !== undefined && object.azureAd !== null)
      ? AzureADConfig.fromPartial(object.azureAd)
      : undefined;
    message.apple = (object.apple !== undefined && object.apple !== null)
      ? AppleConfig.fromPartial(object.apple)
      : undefined;
    message.saml = (object.saml !== undefined && object.saml !== null)
      ? SAMLConfig.fromPartial(object.saml)
      : undefined;
    return message;
  },
};

function createBaseJWTConfig(): JWTConfig {
  return { jwtEndpoint: "", issuer: "", keysEndpoint: "", headerName: "" };
}

export const JWTConfig: MessageFns<JWTConfig> = {
  encode(message: JWTConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.jwtEndpoint !== "") {
      writer.uint32(10).string(message.jwtEndpoint);
    }
    if (message.issuer !== "") {
      writer.uint32(18).string(message.issuer);
    }
    if (message.keysEndpoint !== "") {
      writer.uint32(26).string(message.keysEndpoint);
    }
    if (message.headerName !== "") {
      writer.uint32(34).string(message.headerName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): JWTConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseJWTConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.jwtEndpoint = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.issuer = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.keysEndpoint = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.headerName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): JWTConfig {
    return {
      jwtEndpoint: isSet(object.jwtEndpoint) ? globalThis.String(object.jwtEndpoint) : "",
      issuer: isSet(object.issuer) ? globalThis.String(object.issuer) : "",
      keysEndpoint: isSet(object.keysEndpoint) ? globalThis.String(object.keysEndpoint) : "",
      headerName: isSet(object.headerName) ? globalThis.String(object.headerName) : "",
    };
  },

  toJSON(message: JWTConfig): unknown {
    const obj: any = {};
    if (message.jwtEndpoint !== "") {
      obj.jwtEndpoint = message.jwtEndpoint;
    }
    if (message.issuer !== "") {
      obj.issuer = message.issuer;
    }
    if (message.keysEndpoint !== "") {
      obj.keysEndpoint = message.keysEndpoint;
    }
    if (message.headerName !== "") {
      obj.headerName = message.headerName;
    }
    return obj;
  },

  create(base?: DeepPartial<JWTConfig>): JWTConfig {
    return JWTConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<JWTConfig>): JWTConfig {
    const message = createBaseJWTConfig();
    message.jwtEndpoint = object.jwtEndpoint ?? "";
    message.issuer = object.issuer ?? "";
    message.keysEndpoint = object.keysEndpoint ?? "";
    message.headerName = object.headerName ?? "";
    return message;
  },
};

function createBaseOAuthConfig(): OAuthConfig {
  return { clientId: "", authorizationEndpoint: "", tokenEndpoint: "", userEndpoint: "", scopes: [], idAttribute: "" };
}

export const OAuthConfig: MessageFns<OAuthConfig> = {
  encode(message: OAuthConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.clientId !== "") {
      writer.uint32(10).string(message.clientId);
    }
    if (message.authorizationEndpoint !== "") {
      writer.uint32(18).string(message.authorizationEndpoint);
    }
    if (message.tokenEndpoint !== "") {
      writer.uint32(26).string(message.tokenEndpoint);
    }
    if (message.userEndpoint !== "") {
      writer.uint32(34).string(message.userEndpoint);
    }
    for (const v of message.scopes) {
      writer.uint32(42).string(v!);
    }
    if (message.idAttribute !== "") {
      writer.uint32(50).string(message.idAttribute);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OAuthConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOAuthConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.clientId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.authorizationEndpoint = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.tokenEndpoint = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.userEndpoint = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.scopes.push(reader.string());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.idAttribute = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OAuthConfig {
    return {
      clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : "",
      authorizationEndpoint: isSet(object.authorizationEndpoint) ? globalThis.String(object.authorizationEndpoint) : "",
      tokenEndpoint: isSet(object.tokenEndpoint) ? globalThis.String(object.tokenEndpoint) : "",
      userEndpoint: isSet(object.userEndpoint) ? globalThis.String(object.userEndpoint) : "",
      scopes: globalThis.Array.isArray(object?.scopes) ? object.scopes.map((e: any) => globalThis.String(e)) : [],
      idAttribute: isSet(object.idAttribute) ? globalThis.String(object.idAttribute) : "",
    };
  },

  toJSON(message: OAuthConfig): unknown {
    const obj: any = {};
    if (message.clientId !== "") {
      obj.clientId = message.clientId;
    }
    if (message.authorizationEndpoint !== "") {
      obj.authorizationEndpoint = message.authorizationEndpoint;
    }
    if (message.tokenEndpoint !== "") {
      obj.tokenEndpoint = message.tokenEndpoint;
    }
    if (message.userEndpoint !== "") {
      obj.userEndpoint = message.userEndpoint;
    }
    if (message.scopes?.length) {
      obj.scopes = message.scopes;
    }
    if (message.idAttribute !== "") {
      obj.idAttribute = message.idAttribute;
    }
    return obj;
  },

  create(base?: DeepPartial<OAuthConfig>): OAuthConfig {
    return OAuthConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<OAuthConfig>): OAuthConfig {
    const message = createBaseOAuthConfig();
    message.clientId = object.clientId ?? "";
    message.authorizationEndpoint = object.authorizationEndpoint ?? "";
    message.tokenEndpoint = object.tokenEndpoint ?? "";
    message.userEndpoint = object.userEndpoint ?? "";
    message.scopes = object.scopes?.map((e) => e) || [];
    message.idAttribute = object.idAttribute ?? "";
    return message;
  },
};

function createBaseGenericOIDCConfig(): GenericOIDCConfig {
  return { issuer: "", clientId: "", scopes: [], isIdTokenMapping: false };
}

export const GenericOIDCConfig: MessageFns<GenericOIDCConfig> = {
  encode(message: GenericOIDCConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.issuer !== "") {
      writer.uint32(10).string(message.issuer);
    }
    if (message.clientId !== "") {
      writer.uint32(18).string(message.clientId);
    }
    for (const v of message.scopes) {
      writer.uint32(26).string(v!);
    }
    if (message.isIdTokenMapping !== false) {
      writer.uint32(32).bool(message.isIdTokenMapping);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GenericOIDCConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenericOIDCConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.issuer = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.clientId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.scopes.push(reader.string());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.isIdTokenMapping = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenericOIDCConfig {
    return {
      issuer: isSet(object.issuer) ? globalThis.String(object.issuer) : "",
      clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : "",
      scopes: globalThis.Array.isArray(object?.scopes) ? object.scopes.map((e: any) => globalThis.String(e)) : [],
      isIdTokenMapping: isSet(object.isIdTokenMapping) ? globalThis.Boolean(object.isIdTokenMapping) : false,
    };
  },

  toJSON(message: GenericOIDCConfig): unknown {
    const obj: any = {};
    if (message.issuer !== "") {
      obj.issuer = message.issuer;
    }
    if (message.clientId !== "") {
      obj.clientId = message.clientId;
    }
    if (message.scopes?.length) {
      obj.scopes = message.scopes;
    }
    if (message.isIdTokenMapping !== false) {
      obj.isIdTokenMapping = message.isIdTokenMapping;
    }
    return obj;
  },

  create(base?: DeepPartial<GenericOIDCConfig>): GenericOIDCConfig {
    return GenericOIDCConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GenericOIDCConfig>): GenericOIDCConfig {
    const message = createBaseGenericOIDCConfig();
    message.issuer = object.issuer ?? "";
    message.clientId = object.clientId ?? "";
    message.scopes = object.scopes?.map((e) => e) || [];
    message.isIdTokenMapping = object.isIdTokenMapping ?? false;
    return message;
  },
};

function createBaseGitHubConfig(): GitHubConfig {
  return { clientId: "", scopes: [] };
}

export const GitHubConfig: MessageFns<GitHubConfig> = {
  encode(message: GitHubConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.clientId !== "") {
      writer.uint32(10).string(message.clientId);
    }
    for (const v of message.scopes) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GitHubConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGitHubConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.clientId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.scopes.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GitHubConfig {
    return {
      clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : "",
      scopes: globalThis.Array.isArray(object?.scopes) ? object.scopes.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: GitHubConfig): unknown {
    const obj: any = {};
    if (message.clientId !== "") {
      obj.clientId = message.clientId;
    }
    if (message.scopes?.length) {
      obj.scopes = message.scopes;
    }
    return obj;
  },

  create(base?: DeepPartial<GitHubConfig>): GitHubConfig {
    return GitHubConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GitHubConfig>): GitHubConfig {
    const message = createBaseGitHubConfig();
    message.clientId = object.clientId ?? "";
    message.scopes = object.scopes?.map((e) => e) || [];
    return message;
  },
};

function createBaseGitHubEnterpriseServerConfig(): GitHubEnterpriseServerConfig {
  return { clientId: "", authorizationEndpoint: "", tokenEndpoint: "", userEndpoint: "", scopes: [] };
}

export const GitHubEnterpriseServerConfig: MessageFns<GitHubEnterpriseServerConfig> = {
  encode(message: GitHubEnterpriseServerConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.clientId !== "") {
      writer.uint32(10).string(message.clientId);
    }
    if (message.authorizationEndpoint !== "") {
      writer.uint32(18).string(message.authorizationEndpoint);
    }
    if (message.tokenEndpoint !== "") {
      writer.uint32(26).string(message.tokenEndpoint);
    }
    if (message.userEndpoint !== "") {
      writer.uint32(34).string(message.userEndpoint);
    }
    for (const v of message.scopes) {
      writer.uint32(42).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GitHubEnterpriseServerConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGitHubEnterpriseServerConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.clientId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.authorizationEndpoint = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.tokenEndpoint = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.userEndpoint = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.scopes.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GitHubEnterpriseServerConfig {
    return {
      clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : "",
      authorizationEndpoint: isSet(object.authorizationEndpoint) ? globalThis.String(object.authorizationEndpoint) : "",
      tokenEndpoint: isSet(object.tokenEndpoint) ? globalThis.String(object.tokenEndpoint) : "",
      userEndpoint: isSet(object.userEndpoint) ? globalThis.String(object.userEndpoint) : "",
      scopes: globalThis.Array.isArray(object?.scopes) ? object.scopes.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: GitHubEnterpriseServerConfig): unknown {
    const obj: any = {};
    if (message.clientId !== "") {
      obj.clientId = message.clientId;
    }
    if (message.authorizationEndpoint !== "") {
      obj.authorizationEndpoint = message.authorizationEndpoint;
    }
    if (message.tokenEndpoint !== "") {
      obj.tokenEndpoint = message.tokenEndpoint;
    }
    if (message.userEndpoint !== "") {
      obj.userEndpoint = message.userEndpoint;
    }
    if (message.scopes?.length) {
      obj.scopes = message.scopes;
    }
    return obj;
  },

  create(base?: DeepPartial<GitHubEnterpriseServerConfig>): GitHubEnterpriseServerConfig {
    return GitHubEnterpriseServerConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GitHubEnterpriseServerConfig>): GitHubEnterpriseServerConfig {
    const message = createBaseGitHubEnterpriseServerConfig();
    message.clientId = object.clientId ?? "";
    message.authorizationEndpoint = object.authorizationEndpoint ?? "";
    message.tokenEndpoint = object.tokenEndpoint ?? "";
    message.userEndpoint = object.userEndpoint ?? "";
    message.scopes = object.scopes?.map((e) => e) || [];
    return message;
  },
};

function createBaseGoogleConfig(): GoogleConfig {
  return { clientId: "", scopes: [] };
}

export const GoogleConfig: MessageFns<GoogleConfig> = {
  encode(message: GoogleConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.clientId !== "") {
      writer.uint32(10).string(message.clientId);
    }
    for (const v of message.scopes) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GoogleConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGoogleConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.clientId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.scopes.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GoogleConfig {
    return {
      clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : "",
      scopes: globalThis.Array.isArray(object?.scopes) ? object.scopes.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: GoogleConfig): unknown {
    const obj: any = {};
    if (message.clientId !== "") {
      obj.clientId = message.clientId;
    }
    if (message.scopes?.length) {
      obj.scopes = message.scopes;
    }
    return obj;
  },

  create(base?: DeepPartial<GoogleConfig>): GoogleConfig {
    return GoogleConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GoogleConfig>): GoogleConfig {
    const message = createBaseGoogleConfig();
    message.clientId = object.clientId ?? "";
    message.scopes = object.scopes?.map((e) => e) || [];
    return message;
  },
};

function createBaseGitLabConfig(): GitLabConfig {
  return { clientId: "", scopes: [] };
}

export const GitLabConfig: MessageFns<GitLabConfig> = {
  encode(message: GitLabConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.clientId !== "") {
      writer.uint32(10).string(message.clientId);
    }
    for (const v of message.scopes) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GitLabConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGitLabConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.clientId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.scopes.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GitLabConfig {
    return {
      clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : "",
      scopes: globalThis.Array.isArray(object?.scopes) ? object.scopes.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: GitLabConfig): unknown {
    const obj: any = {};
    if (message.clientId !== "") {
      obj.clientId = message.clientId;
    }
    if (message.scopes?.length) {
      obj.scopes = message.scopes;
    }
    return obj;
  },

  create(base?: DeepPartial<GitLabConfig>): GitLabConfig {
    return GitLabConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GitLabConfig>): GitLabConfig {
    const message = createBaseGitLabConfig();
    message.clientId = object.clientId ?? "";
    message.scopes = object.scopes?.map((e) => e) || [];
    return message;
  },
};

function createBaseGitLabSelfHostedConfig(): GitLabSelfHostedConfig {
  return { issuer: "", clientId: "", scopes: [] };
}

export const GitLabSelfHostedConfig: MessageFns<GitLabSelfHostedConfig> = {
  encode(message: GitLabSelfHostedConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.issuer !== "") {
      writer.uint32(10).string(message.issuer);
    }
    if (message.clientId !== "") {
      writer.uint32(18).string(message.clientId);
    }
    for (const v of message.scopes) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GitLabSelfHostedConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGitLabSelfHostedConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.issuer = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.clientId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.scopes.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GitLabSelfHostedConfig {
    return {
      issuer: isSet(object.issuer) ? globalThis.String(object.issuer) : "",
      clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : "",
      scopes: globalThis.Array.isArray(object?.scopes) ? object.scopes.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: GitLabSelfHostedConfig): unknown {
    const obj: any = {};
    if (message.issuer !== "") {
      obj.issuer = message.issuer;
    }
    if (message.clientId !== "") {
      obj.clientId = message.clientId;
    }
    if (message.scopes?.length) {
      obj.scopes = message.scopes;
    }
    return obj;
  },

  create(base?: DeepPartial<GitLabSelfHostedConfig>): GitLabSelfHostedConfig {
    return GitLabSelfHostedConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GitLabSelfHostedConfig>): GitLabSelfHostedConfig {
    const message = createBaseGitLabSelfHostedConfig();
    message.issuer = object.issuer ?? "";
    message.clientId = object.clientId ?? "";
    message.scopes = object.scopes?.map((e) => e) || [];
    return message;
  },
};

function createBaseLDAPConfig(): LDAPConfig {
  return {
    servers: [],
    startTls: false,
    baseDn: "",
    bindDn: "",
    userBase: "",
    userObjectClasses: [],
    userFilters: [],
    timeout: undefined,
    attributes: undefined,
  };
}

export const LDAPConfig: MessageFns<LDAPConfig> = {
  encode(message: LDAPConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.servers) {
      writer.uint32(10).string(v!);
    }
    if (message.startTls !== false) {
      writer.uint32(16).bool(message.startTls);
    }
    if (message.baseDn !== "") {
      writer.uint32(26).string(message.baseDn);
    }
    if (message.bindDn !== "") {
      writer.uint32(34).string(message.bindDn);
    }
    if (message.userBase !== "") {
      writer.uint32(42).string(message.userBase);
    }
    for (const v of message.userObjectClasses) {
      writer.uint32(50).string(v!);
    }
    for (const v of message.userFilters) {
      writer.uint32(58).string(v!);
    }
    if (message.timeout !== undefined) {
      Duration.encode(message.timeout, writer.uint32(66).fork()).join();
    }
    if (message.attributes !== undefined) {
      LDAPAttributes.encode(message.attributes, writer.uint32(74).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LDAPConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLDAPConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.servers.push(reader.string());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.startTls = reader.bool();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.baseDn = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.bindDn = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.userBase = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.userObjectClasses.push(reader.string());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.userFilters.push(reader.string());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.timeout = Duration.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.attributes = LDAPAttributes.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LDAPConfig {
    return {
      servers: globalThis.Array.isArray(object?.servers) ? object.servers.map((e: any) => globalThis.String(e)) : [],
      startTls: isSet(object.startTls) ? globalThis.Boolean(object.startTls) : false,
      baseDn: isSet(object.baseDn) ? globalThis.String(object.baseDn) : "",
      bindDn: isSet(object.bindDn) ? globalThis.String(object.bindDn) : "",
      userBase: isSet(object.userBase) ? globalThis.String(object.userBase) : "",
      userObjectClasses: globalThis.Array.isArray(object?.userObjectClasses)
        ? object.userObjectClasses.map((e: any) => globalThis.String(e))
        : [],
      userFilters: globalThis.Array.isArray(object?.userFilters)
        ? object.userFilters.map((e: any) => globalThis.String(e))
        : [],
      timeout: isSet(object.timeout) ? Duration.fromJSON(object.timeout) : undefined,
      attributes: isSet(object.attributes) ? LDAPAttributes.fromJSON(object.attributes) : undefined,
    };
  },

  toJSON(message: LDAPConfig): unknown {
    const obj: any = {};
    if (message.servers?.length) {
      obj.servers = message.servers;
    }
    if (message.startTls !== false) {
      obj.startTls = message.startTls;
    }
    if (message.baseDn !== "") {
      obj.baseDn = message.baseDn;
    }
    if (message.bindDn !== "") {
      obj.bindDn = message.bindDn;
    }
    if (message.userBase !== "") {
      obj.userBase = message.userBase;
    }
    if (message.userObjectClasses?.length) {
      obj.userObjectClasses = message.userObjectClasses;
    }
    if (message.userFilters?.length) {
      obj.userFilters = message.userFilters;
    }
    if (message.timeout !== undefined) {
      obj.timeout = Duration.toJSON(message.timeout);
    }
    if (message.attributes !== undefined) {
      obj.attributes = LDAPAttributes.toJSON(message.attributes);
    }
    return obj;
  },

  create(base?: DeepPartial<LDAPConfig>): LDAPConfig {
    return LDAPConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LDAPConfig>): LDAPConfig {
    const message = createBaseLDAPConfig();
    message.servers = object.servers?.map((e) => e) || [];
    message.startTls = object.startTls ?? false;
    message.baseDn = object.baseDn ?? "";
    message.bindDn = object.bindDn ?? "";
    message.userBase = object.userBase ?? "";
    message.userObjectClasses = object.userObjectClasses?.map((e) => e) || [];
    message.userFilters = object.userFilters?.map((e) => e) || [];
    message.timeout = (object.timeout !== undefined && object.timeout !== null)
      ? Duration.fromPartial(object.timeout)
      : undefined;
    message.attributes = (object.attributes !== undefined && object.attributes !== null)
      ? LDAPAttributes.fromPartial(object.attributes)
      : undefined;
    return message;
  },
};

function createBaseSAMLConfig(): SAMLConfig {
  return {
    metadataXml: Buffer.alloc(0),
    binding: 0,
    withSignedRequest: false,
    nameIdFormat: 0,
    transientMappingAttributeName: undefined,
  };
}

export const SAMLConfig: MessageFns<SAMLConfig> = {
  encode(message: SAMLConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.metadataXml.length !== 0) {
      writer.uint32(10).bytes(message.metadataXml);
    }
    if (message.binding !== 0) {
      writer.uint32(16).int32(message.binding);
    }
    if (message.withSignedRequest !== false) {
      writer.uint32(24).bool(message.withSignedRequest);
    }
    if (message.nameIdFormat !== 0) {
      writer.uint32(32).int32(message.nameIdFormat);
    }
    if (message.transientMappingAttributeName !== undefined) {
      writer.uint32(42).string(message.transientMappingAttributeName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SAMLConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSAMLConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.metadataXml = Buffer.from(reader.bytes());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.binding = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.withSignedRequest = reader.bool();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.nameIdFormat = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.transientMappingAttributeName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SAMLConfig {
    return {
      metadataXml: isSet(object.metadataXml) ? Buffer.from(bytesFromBase64(object.metadataXml)) : Buffer.alloc(0),
      binding: isSet(object.binding) ? sAMLBindingFromJSON(object.binding) : 0,
      withSignedRequest: isSet(object.withSignedRequest) ? globalThis.Boolean(object.withSignedRequest) : false,
      nameIdFormat: isSet(object.nameIdFormat) ? sAMLNameIDFormatFromJSON(object.nameIdFormat) : 0,
      transientMappingAttributeName: isSet(object.transientMappingAttributeName)
        ? globalThis.String(object.transientMappingAttributeName)
        : undefined,
    };
  },

  toJSON(message: SAMLConfig): unknown {
    const obj: any = {};
    if (message.metadataXml.length !== 0) {
      obj.metadataXml = base64FromBytes(message.metadataXml);
    }
    if (message.binding !== 0) {
      obj.binding = sAMLBindingToJSON(message.binding);
    }
    if (message.withSignedRequest !== false) {
      obj.withSignedRequest = message.withSignedRequest;
    }
    if (message.nameIdFormat !== 0) {
      obj.nameIdFormat = sAMLNameIDFormatToJSON(message.nameIdFormat);
    }
    if (message.transientMappingAttributeName !== undefined) {
      obj.transientMappingAttributeName = message.transientMappingAttributeName;
    }
    return obj;
  },

  create(base?: DeepPartial<SAMLConfig>): SAMLConfig {
    return SAMLConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SAMLConfig>): SAMLConfig {
    const message = createBaseSAMLConfig();
    message.metadataXml = object.metadataXml ?? Buffer.alloc(0);
    message.binding = object.binding ?? 0;
    message.withSignedRequest = object.withSignedRequest ?? false;
    message.nameIdFormat = object.nameIdFormat ?? 0;
    message.transientMappingAttributeName = object.transientMappingAttributeName ?? undefined;
    return message;
  },
};

function createBaseAzureADConfig(): AzureADConfig {
  return { clientId: "", tenant: undefined, emailVerified: false, scopes: [] };
}

export const AzureADConfig: MessageFns<AzureADConfig> = {
  encode(message: AzureADConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.clientId !== "") {
      writer.uint32(10).string(message.clientId);
    }
    if (message.tenant !== undefined) {
      AzureADTenant.encode(message.tenant, writer.uint32(18).fork()).join();
    }
    if (message.emailVerified !== false) {
      writer.uint32(24).bool(message.emailVerified);
    }
    for (const v of message.scopes) {
      writer.uint32(34).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AzureADConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAzureADConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.clientId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.tenant = AzureADTenant.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.emailVerified = reader.bool();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.scopes.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AzureADConfig {
    return {
      clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : "",
      tenant: isSet(object.tenant) ? AzureADTenant.fromJSON(object.tenant) : undefined,
      emailVerified: isSet(object.emailVerified) ? globalThis.Boolean(object.emailVerified) : false,
      scopes: globalThis.Array.isArray(object?.scopes) ? object.scopes.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: AzureADConfig): unknown {
    const obj: any = {};
    if (message.clientId !== "") {
      obj.clientId = message.clientId;
    }
    if (message.tenant !== undefined) {
      obj.tenant = AzureADTenant.toJSON(message.tenant);
    }
    if (message.emailVerified !== false) {
      obj.emailVerified = message.emailVerified;
    }
    if (message.scopes?.length) {
      obj.scopes = message.scopes;
    }
    return obj;
  },

  create(base?: DeepPartial<AzureADConfig>): AzureADConfig {
    return AzureADConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AzureADConfig>): AzureADConfig {
    const message = createBaseAzureADConfig();
    message.clientId = object.clientId ?? "";
    message.tenant = (object.tenant !== undefined && object.tenant !== null)
      ? AzureADTenant.fromPartial(object.tenant)
      : undefined;
    message.emailVerified = object.emailVerified ?? false;
    message.scopes = object.scopes?.map((e) => e) || [];
    return message;
  },
};

function createBaseOptions(): Options {
  return {
    isLinkingAllowed: false,
    isCreationAllowed: false,
    isAutoCreation: false,
    isAutoUpdate: false,
    autoLinking: 0,
  };
}

export const Options: MessageFns<Options> = {
  encode(message: Options, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.isLinkingAllowed !== false) {
      writer.uint32(8).bool(message.isLinkingAllowed);
    }
    if (message.isCreationAllowed !== false) {
      writer.uint32(16).bool(message.isCreationAllowed);
    }
    if (message.isAutoCreation !== false) {
      writer.uint32(24).bool(message.isAutoCreation);
    }
    if (message.isAutoUpdate !== false) {
      writer.uint32(32).bool(message.isAutoUpdate);
    }
    if (message.autoLinking !== 0) {
      writer.uint32(40).int32(message.autoLinking);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Options {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOptions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.isLinkingAllowed = reader.bool();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.isCreationAllowed = reader.bool();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.isAutoCreation = reader.bool();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.isAutoUpdate = reader.bool();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.autoLinking = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Options {
    return {
      isLinkingAllowed: isSet(object.isLinkingAllowed) ? globalThis.Boolean(object.isLinkingAllowed) : false,
      isCreationAllowed: isSet(object.isCreationAllowed) ? globalThis.Boolean(object.isCreationAllowed) : false,
      isAutoCreation: isSet(object.isAutoCreation) ? globalThis.Boolean(object.isAutoCreation) : false,
      isAutoUpdate: isSet(object.isAutoUpdate) ? globalThis.Boolean(object.isAutoUpdate) : false,
      autoLinking: isSet(object.autoLinking) ? autoLinkingOptionFromJSON(object.autoLinking) : 0,
    };
  },

  toJSON(message: Options): unknown {
    const obj: any = {};
    if (message.isLinkingAllowed !== false) {
      obj.isLinkingAllowed = message.isLinkingAllowed;
    }
    if (message.isCreationAllowed !== false) {
      obj.isCreationAllowed = message.isCreationAllowed;
    }
    if (message.isAutoCreation !== false) {
      obj.isAutoCreation = message.isAutoCreation;
    }
    if (message.isAutoUpdate !== false) {
      obj.isAutoUpdate = message.isAutoUpdate;
    }
    if (message.autoLinking !== 0) {
      obj.autoLinking = autoLinkingOptionToJSON(message.autoLinking);
    }
    return obj;
  },

  create(base?: DeepPartial<Options>): Options {
    return Options.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Options>): Options {
    const message = createBaseOptions();
    message.isLinkingAllowed = object.isLinkingAllowed ?? false;
    message.isCreationAllowed = object.isCreationAllowed ?? false;
    message.isAutoCreation = object.isAutoCreation ?? false;
    message.isAutoUpdate = object.isAutoUpdate ?? false;
    message.autoLinking = object.autoLinking ?? 0;
    return message;
  },
};

function createBaseLDAPAttributes(): LDAPAttributes {
  return {
    idAttribute: "",
    firstNameAttribute: "",
    lastNameAttribute: "",
    displayNameAttribute: "",
    nickNameAttribute: "",
    preferredUsernameAttribute: "",
    emailAttribute: "",
    emailVerifiedAttribute: "",
    phoneAttribute: "",
    phoneVerifiedAttribute: "",
    preferredLanguageAttribute: "",
    avatarUrlAttribute: "",
    profileAttribute: "",
  };
}

export const LDAPAttributes: MessageFns<LDAPAttributes> = {
  encode(message: LDAPAttributes, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.idAttribute !== "") {
      writer.uint32(10).string(message.idAttribute);
    }
    if (message.firstNameAttribute !== "") {
      writer.uint32(18).string(message.firstNameAttribute);
    }
    if (message.lastNameAttribute !== "") {
      writer.uint32(26).string(message.lastNameAttribute);
    }
    if (message.displayNameAttribute !== "") {
      writer.uint32(34).string(message.displayNameAttribute);
    }
    if (message.nickNameAttribute !== "") {
      writer.uint32(42).string(message.nickNameAttribute);
    }
    if (message.preferredUsernameAttribute !== "") {
      writer.uint32(50).string(message.preferredUsernameAttribute);
    }
    if (message.emailAttribute !== "") {
      writer.uint32(58).string(message.emailAttribute);
    }
    if (message.emailVerifiedAttribute !== "") {
      writer.uint32(66).string(message.emailVerifiedAttribute);
    }
    if (message.phoneAttribute !== "") {
      writer.uint32(74).string(message.phoneAttribute);
    }
    if (message.phoneVerifiedAttribute !== "") {
      writer.uint32(82).string(message.phoneVerifiedAttribute);
    }
    if (message.preferredLanguageAttribute !== "") {
      writer.uint32(90).string(message.preferredLanguageAttribute);
    }
    if (message.avatarUrlAttribute !== "") {
      writer.uint32(98).string(message.avatarUrlAttribute);
    }
    if (message.profileAttribute !== "") {
      writer.uint32(106).string(message.profileAttribute);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LDAPAttributes {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLDAPAttributes();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.idAttribute = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.firstNameAttribute = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.lastNameAttribute = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.displayNameAttribute = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.nickNameAttribute = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.preferredUsernameAttribute = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.emailAttribute = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.emailVerifiedAttribute = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.phoneAttribute = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.phoneVerifiedAttribute = reader.string();
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.preferredLanguageAttribute = reader.string();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.avatarUrlAttribute = reader.string();
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.profileAttribute = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LDAPAttributes {
    return {
      idAttribute: isSet(object.idAttribute) ? globalThis.String(object.idAttribute) : "",
      firstNameAttribute: isSet(object.firstNameAttribute) ? globalThis.String(object.firstNameAttribute) : "",
      lastNameAttribute: isSet(object.lastNameAttribute) ? globalThis.String(object.lastNameAttribute) : "",
      displayNameAttribute: isSet(object.displayNameAttribute) ? globalThis.String(object.displayNameAttribute) : "",
      nickNameAttribute: isSet(object.nickNameAttribute) ? globalThis.String(object.nickNameAttribute) : "",
      preferredUsernameAttribute: isSet(object.preferredUsernameAttribute)
        ? globalThis.String(object.preferredUsernameAttribute)
        : "",
      emailAttribute: isSet(object.emailAttribute) ? globalThis.String(object.emailAttribute) : "",
      emailVerifiedAttribute: isSet(object.emailVerifiedAttribute)
        ? globalThis.String(object.emailVerifiedAttribute)
        : "",
      phoneAttribute: isSet(object.phoneAttribute) ? globalThis.String(object.phoneAttribute) : "",
      phoneVerifiedAttribute: isSet(object.phoneVerifiedAttribute)
        ? globalThis.String(object.phoneVerifiedAttribute)
        : "",
      preferredLanguageAttribute: isSet(object.preferredLanguageAttribute)
        ? globalThis.String(object.preferredLanguageAttribute)
        : "",
      avatarUrlAttribute: isSet(object.avatarUrlAttribute) ? globalThis.String(object.avatarUrlAttribute) : "",
      profileAttribute: isSet(object.profileAttribute) ? globalThis.String(object.profileAttribute) : "",
    };
  },

  toJSON(message: LDAPAttributes): unknown {
    const obj: any = {};
    if (message.idAttribute !== "") {
      obj.idAttribute = message.idAttribute;
    }
    if (message.firstNameAttribute !== "") {
      obj.firstNameAttribute = message.firstNameAttribute;
    }
    if (message.lastNameAttribute !== "") {
      obj.lastNameAttribute = message.lastNameAttribute;
    }
    if (message.displayNameAttribute !== "") {
      obj.displayNameAttribute = message.displayNameAttribute;
    }
    if (message.nickNameAttribute !== "") {
      obj.nickNameAttribute = message.nickNameAttribute;
    }
    if (message.preferredUsernameAttribute !== "") {
      obj.preferredUsernameAttribute = message.preferredUsernameAttribute;
    }
    if (message.emailAttribute !== "") {
      obj.emailAttribute = message.emailAttribute;
    }
    if (message.emailVerifiedAttribute !== "") {
      obj.emailVerifiedAttribute = message.emailVerifiedAttribute;
    }
    if (message.phoneAttribute !== "") {
      obj.phoneAttribute = message.phoneAttribute;
    }
    if (message.phoneVerifiedAttribute !== "") {
      obj.phoneVerifiedAttribute = message.phoneVerifiedAttribute;
    }
    if (message.preferredLanguageAttribute !== "") {
      obj.preferredLanguageAttribute = message.preferredLanguageAttribute;
    }
    if (message.avatarUrlAttribute !== "") {
      obj.avatarUrlAttribute = message.avatarUrlAttribute;
    }
    if (message.profileAttribute !== "") {
      obj.profileAttribute = message.profileAttribute;
    }
    return obj;
  },

  create(base?: DeepPartial<LDAPAttributes>): LDAPAttributes {
    return LDAPAttributes.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LDAPAttributes>): LDAPAttributes {
    const message = createBaseLDAPAttributes();
    message.idAttribute = object.idAttribute ?? "";
    message.firstNameAttribute = object.firstNameAttribute ?? "";
    message.lastNameAttribute = object.lastNameAttribute ?? "";
    message.displayNameAttribute = object.displayNameAttribute ?? "";
    message.nickNameAttribute = object.nickNameAttribute ?? "";
    message.preferredUsernameAttribute = object.preferredUsernameAttribute ?? "";
    message.emailAttribute = object.emailAttribute ?? "";
    message.emailVerifiedAttribute = object.emailVerifiedAttribute ?? "";
    message.phoneAttribute = object.phoneAttribute ?? "";
    message.phoneVerifiedAttribute = object.phoneVerifiedAttribute ?? "";
    message.preferredLanguageAttribute = object.preferredLanguageAttribute ?? "";
    message.avatarUrlAttribute = object.avatarUrlAttribute ?? "";
    message.profileAttribute = object.profileAttribute ?? "";
    return message;
  },
};

function createBaseAzureADTenant(): AzureADTenant {
  return { tenantType: undefined, tenantId: undefined };
}

export const AzureADTenant: MessageFns<AzureADTenant> = {
  encode(message: AzureADTenant, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tenantType !== undefined) {
      writer.uint32(8).int32(message.tenantType);
    }
    if (message.tenantId !== undefined) {
      writer.uint32(18).string(message.tenantId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AzureADTenant {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAzureADTenant();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.tenantType = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.tenantId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AzureADTenant {
    return {
      tenantType: isSet(object.tenantType) ? azureADTenantTypeFromJSON(object.tenantType) : undefined,
      tenantId: isSet(object.tenantId) ? globalThis.String(object.tenantId) : undefined,
    };
  },

  toJSON(message: AzureADTenant): unknown {
    const obj: any = {};
    if (message.tenantType !== undefined) {
      obj.tenantType = azureADTenantTypeToJSON(message.tenantType);
    }
    if (message.tenantId !== undefined) {
      obj.tenantId = message.tenantId;
    }
    return obj;
  },

  create(base?: DeepPartial<AzureADTenant>): AzureADTenant {
    return AzureADTenant.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AzureADTenant>): AzureADTenant {
    const message = createBaseAzureADTenant();
    message.tenantType = object.tenantType ?? undefined;
    message.tenantId = object.tenantId ?? undefined;
    return message;
  },
};

function createBaseAppleConfig(): AppleConfig {
  return { clientId: "", teamId: "", keyId: "", scopes: [] };
}

export const AppleConfig: MessageFns<AppleConfig> = {
  encode(message: AppleConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.clientId !== "") {
      writer.uint32(10).string(message.clientId);
    }
    if (message.teamId !== "") {
      writer.uint32(18).string(message.teamId);
    }
    if (message.keyId !== "") {
      writer.uint32(26).string(message.keyId);
    }
    for (const v of message.scopes) {
      writer.uint32(34).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AppleConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAppleConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.clientId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.teamId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.keyId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.scopes.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AppleConfig {
    return {
      clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : "",
      teamId: isSet(object.teamId) ? globalThis.String(object.teamId) : "",
      keyId: isSet(object.keyId) ? globalThis.String(object.keyId) : "",
      scopes: globalThis.Array.isArray(object?.scopes) ? object.scopes.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: AppleConfig): unknown {
    const obj: any = {};
    if (message.clientId !== "") {
      obj.clientId = message.clientId;
    }
    if (message.teamId !== "") {
      obj.teamId = message.teamId;
    }
    if (message.keyId !== "") {
      obj.keyId = message.keyId;
    }
    if (message.scopes?.length) {
      obj.scopes = message.scopes;
    }
    return obj;
  },

  create(base?: DeepPartial<AppleConfig>): AppleConfig {
    return AppleConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AppleConfig>): AppleConfig {
    const message = createBaseAppleConfig();
    message.clientId = object.clientId ?? "";
    message.teamId = object.teamId ?? "";
    message.keyId = object.keyId ?? "";
    message.scopes = object.scopes?.map((e) => e) || [];
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
}

function base64FromBytes(arr: Uint8Array): string {
  return globalThis.Buffer.from(arr).toString("base64");
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
