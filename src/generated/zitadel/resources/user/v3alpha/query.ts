// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: zitadel/resources/user/v3alpha/query.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { TextFilterMethod, textFilterMethodFromJSON, textFilterMethodToJSON } from "../../object/v3alpha/object.js";
import { State, stateFromJSON, stateToJSON } from "./user.js";

export const protobufPackage = "zitadel.resources.user.v3alpha";

export enum FieldName {
  FIELD_NAME_UNSPECIFIED = 0,
  FIELD_NAME_ID = 1,
  FIELD_NAME_CREATION_DATE = 2,
  FIELD_NAME_CHANGE_DATE = 3,
  FIELD_NAME_EMAIL = 4,
  FIELD_NAME_PHONE = 5,
  FIELD_NAME_STATE = 6,
  FIELD_NAME_SCHEMA_ID = 7,
  FIELD_NAME_SCHEMA_TYPE = 8,
  UNRECOGNIZED = -1,
}

export function fieldNameFromJSON(object: any): FieldName {
  switch (object) {
    case 0:
    case "FIELD_NAME_UNSPECIFIED":
      return FieldName.FIELD_NAME_UNSPECIFIED;
    case 1:
    case "FIELD_NAME_ID":
      return FieldName.FIELD_NAME_ID;
    case 2:
    case "FIELD_NAME_CREATION_DATE":
      return FieldName.FIELD_NAME_CREATION_DATE;
    case 3:
    case "FIELD_NAME_CHANGE_DATE":
      return FieldName.FIELD_NAME_CHANGE_DATE;
    case 4:
    case "FIELD_NAME_EMAIL":
      return FieldName.FIELD_NAME_EMAIL;
    case 5:
    case "FIELD_NAME_PHONE":
      return FieldName.FIELD_NAME_PHONE;
    case 6:
    case "FIELD_NAME_STATE":
      return FieldName.FIELD_NAME_STATE;
    case 7:
    case "FIELD_NAME_SCHEMA_ID":
      return FieldName.FIELD_NAME_SCHEMA_ID;
    case 8:
    case "FIELD_NAME_SCHEMA_TYPE":
      return FieldName.FIELD_NAME_SCHEMA_TYPE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return FieldName.UNRECOGNIZED;
  }
}

export function fieldNameToJSON(object: FieldName): string {
  switch (object) {
    case FieldName.FIELD_NAME_UNSPECIFIED:
      return "FIELD_NAME_UNSPECIFIED";
    case FieldName.FIELD_NAME_ID:
      return "FIELD_NAME_ID";
    case FieldName.FIELD_NAME_CREATION_DATE:
      return "FIELD_NAME_CREATION_DATE";
    case FieldName.FIELD_NAME_CHANGE_DATE:
      return "FIELD_NAME_CHANGE_DATE";
    case FieldName.FIELD_NAME_EMAIL:
      return "FIELD_NAME_EMAIL";
    case FieldName.FIELD_NAME_PHONE:
      return "FIELD_NAME_PHONE";
    case FieldName.FIELD_NAME_STATE:
      return "FIELD_NAME_STATE";
    case FieldName.FIELD_NAME_SCHEMA_ID:
      return "FIELD_NAME_SCHEMA_ID";
    case FieldName.FIELD_NAME_SCHEMA_TYPE:
      return "FIELD_NAME_SCHEMA_TYPE";
    case FieldName.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface SearchFilter {
  /** Union the results of each sub filter ('OR'). */
  orFilter?:
    | OrFilter
    | undefined;
  /**
   * Limit the result to match all sub queries ('AND').
   * Note that if you specify multiple queries, they will be implicitly used as andQueries.
   * Use the andFilter in combination with orFilter and notFilter.
   */
  andFilter?:
    | AndFilter
    | undefined;
  /** Exclude / Negate the result of the sub query ('NOT'). */
  notFilter?:
    | NotFilter
    | undefined;
  /** Limit the result to a specific user ID. */
  userIdFilter?:
    | UserIDFilter
    | undefined;
  /** Limit the result to a specific organization. */
  organizationIdFilter?:
    | OrganizationIDFilter
    | undefined;
  /** Limit the result to a specific username. */
  usernameFilter?:
    | UsernameFilter
    | undefined;
  /** Limit the result to a specific contact email. */
  emailFilter?:
    | EmailFilter
    | undefined;
  /** Limit the result to a specific contact phone. */
  phoneFilter?:
    | PhoneFilter
    | undefined;
  /** Limit the result to a specific state of the user. */
  stateFilter?:
    | StateFilter
    | undefined;
  /** Limit the result to a specific schema ID. */
  schemaIdFilter?:
    | SchemaIDFilter
    | undefined;
  /** Limit the result to a specific schema type. */
  schemaTypeFilter?: SchemaTypeFilter | undefined;
}

export interface OrFilter {
  queries: SearchFilter[];
}

export interface AndFilter {
  queries: SearchFilter[];
}

export interface NotFilter {
  query: SearchFilter | undefined;
}

export interface UserIDFilter {
  /** Defines the ID of the user to query for. */
  id: string;
  /** Defines which text comparison method used for the id query. */
  method: TextFilterMethod;
}

export interface OrganizationIDFilter {
  /** Defines the ID of the organization to query for. */
  id: string;
  /** Defines which text comparison method used for the id query. */
  method: TextFilterMethod;
}

export interface UsernameFilter {
  /** Defines the username to query for. */
  username: string;
  /** Defines which text comparison method used for the username query. */
  method: TextFilterMethod;
  /** Defines that the username must only be unique in the organisation. */
  isOrganizationSpecific: boolean;
}

export interface EmailFilter {
  /** Defines the email of the user to query for. */
  address: string;
  /** Defines which text comparison method used for the email query. */
  method: TextFilterMethod;
}

export interface PhoneFilter {
  /** Defines the phone of the user to query for. */
  number: string;
  /** Defines which text comparison method used for the phone query. */
  method: TextFilterMethod;
}

export interface StateFilter {
  /** Defines the state to query for. */
  state: State;
}

export interface SchemaIDFilter {
  /** Defines the ID of the schema to query for. */
  id: string;
}

export interface SchemaTypeFilter {
  /** Defines which type to query for. */
  type: string;
  /** Defines which text comparison method used for the type query. */
  method: TextFilterMethod;
}

function createBaseSearchFilter(): SearchFilter {
  return {
    orFilter: undefined,
    andFilter: undefined,
    notFilter: undefined,
    userIdFilter: undefined,
    organizationIdFilter: undefined,
    usernameFilter: undefined,
    emailFilter: undefined,
    phoneFilter: undefined,
    stateFilter: undefined,
    schemaIdFilter: undefined,
    schemaTypeFilter: undefined,
  };
}

export const SearchFilter: MessageFns<SearchFilter> = {
  encode(message: SearchFilter, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.orFilter !== undefined) {
      OrFilter.encode(message.orFilter, writer.uint32(10).fork()).join();
    }
    if (message.andFilter !== undefined) {
      AndFilter.encode(message.andFilter, writer.uint32(18).fork()).join();
    }
    if (message.notFilter !== undefined) {
      NotFilter.encode(message.notFilter, writer.uint32(26).fork()).join();
    }
    if (message.userIdFilter !== undefined) {
      UserIDFilter.encode(message.userIdFilter, writer.uint32(34).fork()).join();
    }
    if (message.organizationIdFilter !== undefined) {
      OrganizationIDFilter.encode(message.organizationIdFilter, writer.uint32(42).fork()).join();
    }
    if (message.usernameFilter !== undefined) {
      UsernameFilter.encode(message.usernameFilter, writer.uint32(50).fork()).join();
    }
    if (message.emailFilter !== undefined) {
      EmailFilter.encode(message.emailFilter, writer.uint32(58).fork()).join();
    }
    if (message.phoneFilter !== undefined) {
      PhoneFilter.encode(message.phoneFilter, writer.uint32(66).fork()).join();
    }
    if (message.stateFilter !== undefined) {
      StateFilter.encode(message.stateFilter, writer.uint32(74).fork()).join();
    }
    if (message.schemaIdFilter !== undefined) {
      SchemaIDFilter.encode(message.schemaIdFilter, writer.uint32(82).fork()).join();
    }
    if (message.schemaTypeFilter !== undefined) {
      SchemaTypeFilter.encode(message.schemaTypeFilter, writer.uint32(90).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchFilter {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchFilter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.orFilter = OrFilter.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.andFilter = AndFilter.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.notFilter = NotFilter.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.userIdFilter = UserIDFilter.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.organizationIdFilter = OrganizationIDFilter.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.usernameFilter = UsernameFilter.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.emailFilter = EmailFilter.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.phoneFilter = PhoneFilter.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.stateFilter = StateFilter.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.schemaIdFilter = SchemaIDFilter.decode(reader, reader.uint32());
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.schemaTypeFilter = SchemaTypeFilter.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchFilter {
    return {
      orFilter: isSet(object.orFilter) ? OrFilter.fromJSON(object.orFilter) : undefined,
      andFilter: isSet(object.andFilter) ? AndFilter.fromJSON(object.andFilter) : undefined,
      notFilter: isSet(object.notFilter) ? NotFilter.fromJSON(object.notFilter) : undefined,
      userIdFilter: isSet(object.userIdFilter) ? UserIDFilter.fromJSON(object.userIdFilter) : undefined,
      organizationIdFilter: isSet(object.organizationIdFilter)
        ? OrganizationIDFilter.fromJSON(object.organizationIdFilter)
        : undefined,
      usernameFilter: isSet(object.usernameFilter) ? UsernameFilter.fromJSON(object.usernameFilter) : undefined,
      emailFilter: isSet(object.emailFilter) ? EmailFilter.fromJSON(object.emailFilter) : undefined,
      phoneFilter: isSet(object.phoneFilter) ? PhoneFilter.fromJSON(object.phoneFilter) : undefined,
      stateFilter: isSet(object.stateFilter) ? StateFilter.fromJSON(object.stateFilter) : undefined,
      schemaIdFilter: isSet(object.schemaIdFilter) ? SchemaIDFilter.fromJSON(object.schemaIdFilter) : undefined,
      schemaTypeFilter: isSet(object.schemaTypeFilter) ? SchemaTypeFilter.fromJSON(object.schemaTypeFilter) : undefined,
    };
  },

  toJSON(message: SearchFilter): unknown {
    const obj: any = {};
    if (message.orFilter !== undefined) {
      obj.orFilter = OrFilter.toJSON(message.orFilter);
    }
    if (message.andFilter !== undefined) {
      obj.andFilter = AndFilter.toJSON(message.andFilter);
    }
    if (message.notFilter !== undefined) {
      obj.notFilter = NotFilter.toJSON(message.notFilter);
    }
    if (message.userIdFilter !== undefined) {
      obj.userIdFilter = UserIDFilter.toJSON(message.userIdFilter);
    }
    if (message.organizationIdFilter !== undefined) {
      obj.organizationIdFilter = OrganizationIDFilter.toJSON(message.organizationIdFilter);
    }
    if (message.usernameFilter !== undefined) {
      obj.usernameFilter = UsernameFilter.toJSON(message.usernameFilter);
    }
    if (message.emailFilter !== undefined) {
      obj.emailFilter = EmailFilter.toJSON(message.emailFilter);
    }
    if (message.phoneFilter !== undefined) {
      obj.phoneFilter = PhoneFilter.toJSON(message.phoneFilter);
    }
    if (message.stateFilter !== undefined) {
      obj.stateFilter = StateFilter.toJSON(message.stateFilter);
    }
    if (message.schemaIdFilter !== undefined) {
      obj.schemaIdFilter = SchemaIDFilter.toJSON(message.schemaIdFilter);
    }
    if (message.schemaTypeFilter !== undefined) {
      obj.schemaTypeFilter = SchemaTypeFilter.toJSON(message.schemaTypeFilter);
    }
    return obj;
  },

  create(base?: DeepPartial<SearchFilter>): SearchFilter {
    return SearchFilter.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SearchFilter>): SearchFilter {
    const message = createBaseSearchFilter();
    message.orFilter = (object.orFilter !== undefined && object.orFilter !== null)
      ? OrFilter.fromPartial(object.orFilter)
      : undefined;
    message.andFilter = (object.andFilter !== undefined && object.andFilter !== null)
      ? AndFilter.fromPartial(object.andFilter)
      : undefined;
    message.notFilter = (object.notFilter !== undefined && object.notFilter !== null)
      ? NotFilter.fromPartial(object.notFilter)
      : undefined;
    message.userIdFilter = (object.userIdFilter !== undefined && object.userIdFilter !== null)
      ? UserIDFilter.fromPartial(object.userIdFilter)
      : undefined;
    message.organizationIdFilter = (object.organizationIdFilter !== undefined && object.organizationIdFilter !== null)
      ? OrganizationIDFilter.fromPartial(object.organizationIdFilter)
      : undefined;
    message.usernameFilter = (object.usernameFilter !== undefined && object.usernameFilter !== null)
      ? UsernameFilter.fromPartial(object.usernameFilter)
      : undefined;
    message.emailFilter = (object.emailFilter !== undefined && object.emailFilter !== null)
      ? EmailFilter.fromPartial(object.emailFilter)
      : undefined;
    message.phoneFilter = (object.phoneFilter !== undefined && object.phoneFilter !== null)
      ? PhoneFilter.fromPartial(object.phoneFilter)
      : undefined;
    message.stateFilter = (object.stateFilter !== undefined && object.stateFilter !== null)
      ? StateFilter.fromPartial(object.stateFilter)
      : undefined;
    message.schemaIdFilter = (object.schemaIdFilter !== undefined && object.schemaIdFilter !== null)
      ? SchemaIDFilter.fromPartial(object.schemaIdFilter)
      : undefined;
    message.schemaTypeFilter = (object.schemaTypeFilter !== undefined && object.schemaTypeFilter !== null)
      ? SchemaTypeFilter.fromPartial(object.schemaTypeFilter)
      : undefined;
    return message;
  },
};

function createBaseOrFilter(): OrFilter {
  return { queries: [] };
}

export const OrFilter: MessageFns<OrFilter> = {
  encode(message: OrFilter, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.queries) {
      SearchFilter.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OrFilter {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOrFilter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.queries.push(SearchFilter.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OrFilter {
    return {
      queries: globalThis.Array.isArray(object?.queries)
        ? object.queries.map((e: any) => SearchFilter.fromJSON(e))
        : [],
    };
  },

  toJSON(message: OrFilter): unknown {
    const obj: any = {};
    if (message.queries?.length) {
      obj.queries = message.queries.map((e) => SearchFilter.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<OrFilter>): OrFilter {
    return OrFilter.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<OrFilter>): OrFilter {
    const message = createBaseOrFilter();
    message.queries = object.queries?.map((e) => SearchFilter.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAndFilter(): AndFilter {
  return { queries: [] };
}

export const AndFilter: MessageFns<AndFilter> = {
  encode(message: AndFilter, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.queries) {
      SearchFilter.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AndFilter {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAndFilter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.queries.push(SearchFilter.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AndFilter {
    return {
      queries: globalThis.Array.isArray(object?.queries)
        ? object.queries.map((e: any) => SearchFilter.fromJSON(e))
        : [],
    };
  },

  toJSON(message: AndFilter): unknown {
    const obj: any = {};
    if (message.queries?.length) {
      obj.queries = message.queries.map((e) => SearchFilter.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<AndFilter>): AndFilter {
    return AndFilter.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AndFilter>): AndFilter {
    const message = createBaseAndFilter();
    message.queries = object.queries?.map((e) => SearchFilter.fromPartial(e)) || [];
    return message;
  },
};

function createBaseNotFilter(): NotFilter {
  return { query: undefined };
}

export const NotFilter: MessageFns<NotFilter> = {
  encode(message: NotFilter, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.query !== undefined) {
      SearchFilter.encode(message.query, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NotFilter {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNotFilter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.query = SearchFilter.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NotFilter {
    return { query: isSet(object.query) ? SearchFilter.fromJSON(object.query) : undefined };
  },

  toJSON(message: NotFilter): unknown {
    const obj: any = {};
    if (message.query !== undefined) {
      obj.query = SearchFilter.toJSON(message.query);
    }
    return obj;
  },

  create(base?: DeepPartial<NotFilter>): NotFilter {
    return NotFilter.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<NotFilter>): NotFilter {
    const message = createBaseNotFilter();
    message.query = (object.query !== undefined && object.query !== null)
      ? SearchFilter.fromPartial(object.query)
      : undefined;
    return message;
  },
};

function createBaseUserIDFilter(): UserIDFilter {
  return { id: "", method: 0 };
}

export const UserIDFilter: MessageFns<UserIDFilter> = {
  encode(message: UserIDFilter, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.method !== 0) {
      writer.uint32(16).int32(message.method);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserIDFilter {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserIDFilter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.method = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserIDFilter {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      method: isSet(object.method) ? textFilterMethodFromJSON(object.method) : 0,
    };
  },

  toJSON(message: UserIDFilter): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.method !== 0) {
      obj.method = textFilterMethodToJSON(message.method);
    }
    return obj;
  },

  create(base?: DeepPartial<UserIDFilter>): UserIDFilter {
    return UserIDFilter.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UserIDFilter>): UserIDFilter {
    const message = createBaseUserIDFilter();
    message.id = object.id ?? "";
    message.method = object.method ?? 0;
    return message;
  },
};

function createBaseOrganizationIDFilter(): OrganizationIDFilter {
  return { id: "", method: 0 };
}

export const OrganizationIDFilter: MessageFns<OrganizationIDFilter> = {
  encode(message: OrganizationIDFilter, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.method !== 0) {
      writer.uint32(16).int32(message.method);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OrganizationIDFilter {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOrganizationIDFilter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.method = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OrganizationIDFilter {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      method: isSet(object.method) ? textFilterMethodFromJSON(object.method) : 0,
    };
  },

  toJSON(message: OrganizationIDFilter): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.method !== 0) {
      obj.method = textFilterMethodToJSON(message.method);
    }
    return obj;
  },

  create(base?: DeepPartial<OrganizationIDFilter>): OrganizationIDFilter {
    return OrganizationIDFilter.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<OrganizationIDFilter>): OrganizationIDFilter {
    const message = createBaseOrganizationIDFilter();
    message.id = object.id ?? "";
    message.method = object.method ?? 0;
    return message;
  },
};

function createBaseUsernameFilter(): UsernameFilter {
  return { username: "", method: 0, isOrganizationSpecific: false };
}

export const UsernameFilter: MessageFns<UsernameFilter> = {
  encode(message: UsernameFilter, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.username !== "") {
      writer.uint32(10).string(message.username);
    }
    if (message.method !== 0) {
      writer.uint32(16).int32(message.method);
    }
    if (message.isOrganizationSpecific !== false) {
      writer.uint32(24).bool(message.isOrganizationSpecific);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UsernameFilter {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUsernameFilter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.username = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.method = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.isOrganizationSpecific = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UsernameFilter {
    return {
      username: isSet(object.username) ? globalThis.String(object.username) : "",
      method: isSet(object.method) ? textFilterMethodFromJSON(object.method) : 0,
      isOrganizationSpecific: isSet(object.isOrganizationSpecific)
        ? globalThis.Boolean(object.isOrganizationSpecific)
        : false,
    };
  },

  toJSON(message: UsernameFilter): unknown {
    const obj: any = {};
    if (message.username !== "") {
      obj.username = message.username;
    }
    if (message.method !== 0) {
      obj.method = textFilterMethodToJSON(message.method);
    }
    if (message.isOrganizationSpecific !== false) {
      obj.isOrganizationSpecific = message.isOrganizationSpecific;
    }
    return obj;
  },

  create(base?: DeepPartial<UsernameFilter>): UsernameFilter {
    return UsernameFilter.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UsernameFilter>): UsernameFilter {
    const message = createBaseUsernameFilter();
    message.username = object.username ?? "";
    message.method = object.method ?? 0;
    message.isOrganizationSpecific = object.isOrganizationSpecific ?? false;
    return message;
  },
};

function createBaseEmailFilter(): EmailFilter {
  return { address: "", method: 0 };
}

export const EmailFilter: MessageFns<EmailFilter> = {
  encode(message: EmailFilter, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    if (message.method !== 0) {
      writer.uint32(16).int32(message.method);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EmailFilter {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEmailFilter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.address = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.method = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EmailFilter {
    return {
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      method: isSet(object.method) ? textFilterMethodFromJSON(object.method) : 0,
    };
  },

  toJSON(message: EmailFilter): unknown {
    const obj: any = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.method !== 0) {
      obj.method = textFilterMethodToJSON(message.method);
    }
    return obj;
  },

  create(base?: DeepPartial<EmailFilter>): EmailFilter {
    return EmailFilter.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EmailFilter>): EmailFilter {
    const message = createBaseEmailFilter();
    message.address = object.address ?? "";
    message.method = object.method ?? 0;
    return message;
  },
};

function createBasePhoneFilter(): PhoneFilter {
  return { number: "", method: 0 };
}

export const PhoneFilter: MessageFns<PhoneFilter> = {
  encode(message: PhoneFilter, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.number !== "") {
      writer.uint32(10).string(message.number);
    }
    if (message.method !== 0) {
      writer.uint32(16).int32(message.method);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PhoneFilter {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePhoneFilter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.number = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.method = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PhoneFilter {
    return {
      number: isSet(object.number) ? globalThis.String(object.number) : "",
      method: isSet(object.method) ? textFilterMethodFromJSON(object.method) : 0,
    };
  },

  toJSON(message: PhoneFilter): unknown {
    const obj: any = {};
    if (message.number !== "") {
      obj.number = message.number;
    }
    if (message.method !== 0) {
      obj.method = textFilterMethodToJSON(message.method);
    }
    return obj;
  },

  create(base?: DeepPartial<PhoneFilter>): PhoneFilter {
    return PhoneFilter.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PhoneFilter>): PhoneFilter {
    const message = createBasePhoneFilter();
    message.number = object.number ?? "";
    message.method = object.method ?? 0;
    return message;
  },
};

function createBaseStateFilter(): StateFilter {
  return { state: 0 };
}

export const StateFilter: MessageFns<StateFilter> = {
  encode(message: StateFilter, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.state !== 0) {
      writer.uint32(8).int32(message.state);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StateFilter {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStateFilter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StateFilter {
    return { state: isSet(object.state) ? stateFromJSON(object.state) : 0 };
  },

  toJSON(message: StateFilter): unknown {
    const obj: any = {};
    if (message.state !== 0) {
      obj.state = stateToJSON(message.state);
    }
    return obj;
  },

  create(base?: DeepPartial<StateFilter>): StateFilter {
    return StateFilter.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StateFilter>): StateFilter {
    const message = createBaseStateFilter();
    message.state = object.state ?? 0;
    return message;
  },
};

function createBaseSchemaIDFilter(): SchemaIDFilter {
  return { id: "" };
}

export const SchemaIDFilter: MessageFns<SchemaIDFilter> = {
  encode(message: SchemaIDFilter, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SchemaIDFilter {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSchemaIDFilter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SchemaIDFilter {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: SchemaIDFilter): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<SchemaIDFilter>): SchemaIDFilter {
    return SchemaIDFilter.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SchemaIDFilter>): SchemaIDFilter {
    const message = createBaseSchemaIDFilter();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseSchemaTypeFilter(): SchemaTypeFilter {
  return { type: "", method: 0 };
}

export const SchemaTypeFilter: MessageFns<SchemaTypeFilter> = {
  encode(message: SchemaTypeFilter, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== "") {
      writer.uint32(10).string(message.type);
    }
    if (message.method !== 0) {
      writer.uint32(16).int32(message.method);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SchemaTypeFilter {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSchemaTypeFilter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.type = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.method = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SchemaTypeFilter {
    return {
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      method: isSet(object.method) ? textFilterMethodFromJSON(object.method) : 0,
    };
  },

  toJSON(message: SchemaTypeFilter): unknown {
    const obj: any = {};
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.method !== 0) {
      obj.method = textFilterMethodToJSON(message.method);
    }
    return obj;
  },

  create(base?: DeepPartial<SchemaTypeFilter>): SchemaTypeFilter {
    return SchemaTypeFilter.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SchemaTypeFilter>): SchemaTypeFilter {
    const message = createBaseSchemaTypeFilter();
    message.type = object.type ?? "";
    message.method = object.method ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
