// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: zitadel/resources/action/v3alpha/query.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { TextFilterMethod, textFilterMethodFromJSON, textFilterMethodToJSON } from "../../object/v3alpha/object.js";
import { Condition } from "./execution.js";

export const protobufPackage = "zitadel.resources.action.v3alpha";

export enum ExecutionType {
  EXECUTION_TYPE_UNSPECIFIED = 0,
  EXECUTION_TYPE_REQUEST = 1,
  EXECUTION_TYPE_RESPONSE = 2,
  EXECUTION_TYPE_EVENT = 3,
  EXECUTION_TYPE_FUNCTION = 4,
  UNRECOGNIZED = -1,
}

export function executionTypeFromJSON(object: any): ExecutionType {
  switch (object) {
    case 0:
    case "EXECUTION_TYPE_UNSPECIFIED":
      return ExecutionType.EXECUTION_TYPE_UNSPECIFIED;
    case 1:
    case "EXECUTION_TYPE_REQUEST":
      return ExecutionType.EXECUTION_TYPE_REQUEST;
    case 2:
    case "EXECUTION_TYPE_RESPONSE":
      return ExecutionType.EXECUTION_TYPE_RESPONSE;
    case 3:
    case "EXECUTION_TYPE_EVENT":
      return ExecutionType.EXECUTION_TYPE_EVENT;
    case 4:
    case "EXECUTION_TYPE_FUNCTION":
      return ExecutionType.EXECUTION_TYPE_FUNCTION;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ExecutionType.UNRECOGNIZED;
  }
}

export function executionTypeToJSON(object: ExecutionType): string {
  switch (object) {
    case ExecutionType.EXECUTION_TYPE_UNSPECIFIED:
      return "EXECUTION_TYPE_UNSPECIFIED";
    case ExecutionType.EXECUTION_TYPE_REQUEST:
      return "EXECUTION_TYPE_REQUEST";
    case ExecutionType.EXECUTION_TYPE_RESPONSE:
      return "EXECUTION_TYPE_RESPONSE";
    case ExecutionType.EXECUTION_TYPE_EVENT:
      return "EXECUTION_TYPE_EVENT";
    case ExecutionType.EXECUTION_TYPE_FUNCTION:
      return "EXECUTION_TYPE_FUNCTION";
    case ExecutionType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum TargetFieldName {
  TARGET_FIELD_NAME_UNSPECIFIED = 0,
  TARGET_FIELD_NAME_ID = 1,
  TARGET_FIELD_NAME_CREATED_DATE = 2,
  TARGET_FIELD_NAME_CHANGED_DATE = 3,
  TARGET_FIELD_NAME_NAME = 4,
  TARGET_FIELD_NAME_TARGET_TYPE = 5,
  TARGET_FIELD_NAME_URL = 6,
  TARGET_FIELD_NAME_TIMEOUT = 7,
  TARGET_FIELD_NAME_INTERRUPT_ON_ERROR = 8,
  UNRECOGNIZED = -1,
}

export function targetFieldNameFromJSON(object: any): TargetFieldName {
  switch (object) {
    case 0:
    case "TARGET_FIELD_NAME_UNSPECIFIED":
      return TargetFieldName.TARGET_FIELD_NAME_UNSPECIFIED;
    case 1:
    case "TARGET_FIELD_NAME_ID":
      return TargetFieldName.TARGET_FIELD_NAME_ID;
    case 2:
    case "TARGET_FIELD_NAME_CREATED_DATE":
      return TargetFieldName.TARGET_FIELD_NAME_CREATED_DATE;
    case 3:
    case "TARGET_FIELD_NAME_CHANGED_DATE":
      return TargetFieldName.TARGET_FIELD_NAME_CHANGED_DATE;
    case 4:
    case "TARGET_FIELD_NAME_NAME":
      return TargetFieldName.TARGET_FIELD_NAME_NAME;
    case 5:
    case "TARGET_FIELD_NAME_TARGET_TYPE":
      return TargetFieldName.TARGET_FIELD_NAME_TARGET_TYPE;
    case 6:
    case "TARGET_FIELD_NAME_URL":
      return TargetFieldName.TARGET_FIELD_NAME_URL;
    case 7:
    case "TARGET_FIELD_NAME_TIMEOUT":
      return TargetFieldName.TARGET_FIELD_NAME_TIMEOUT;
    case 8:
    case "TARGET_FIELD_NAME_INTERRUPT_ON_ERROR":
      return TargetFieldName.TARGET_FIELD_NAME_INTERRUPT_ON_ERROR;
    case -1:
    case "UNRECOGNIZED":
    default:
      return TargetFieldName.UNRECOGNIZED;
  }
}

export function targetFieldNameToJSON(object: TargetFieldName): string {
  switch (object) {
    case TargetFieldName.TARGET_FIELD_NAME_UNSPECIFIED:
      return "TARGET_FIELD_NAME_UNSPECIFIED";
    case TargetFieldName.TARGET_FIELD_NAME_ID:
      return "TARGET_FIELD_NAME_ID";
    case TargetFieldName.TARGET_FIELD_NAME_CREATED_DATE:
      return "TARGET_FIELD_NAME_CREATED_DATE";
    case TargetFieldName.TARGET_FIELD_NAME_CHANGED_DATE:
      return "TARGET_FIELD_NAME_CHANGED_DATE";
    case TargetFieldName.TARGET_FIELD_NAME_NAME:
      return "TARGET_FIELD_NAME_NAME";
    case TargetFieldName.TARGET_FIELD_NAME_TARGET_TYPE:
      return "TARGET_FIELD_NAME_TARGET_TYPE";
    case TargetFieldName.TARGET_FIELD_NAME_URL:
      return "TARGET_FIELD_NAME_URL";
    case TargetFieldName.TARGET_FIELD_NAME_TIMEOUT:
      return "TARGET_FIELD_NAME_TIMEOUT";
    case TargetFieldName.TARGET_FIELD_NAME_INTERRUPT_ON_ERROR:
      return "TARGET_FIELD_NAME_INTERRUPT_ON_ERROR";
    case TargetFieldName.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum ExecutionFieldName {
  EXECUTION_FIELD_NAME_UNSPECIFIED = 0,
  EXECUTION_FIELD_NAME_ID = 1,
  EXECUTION_FIELD_NAME_CREATED_DATE = 2,
  EXECUTION_FIELD_NAME_CHANGED_DATE = 3,
  UNRECOGNIZED = -1,
}

export function executionFieldNameFromJSON(object: any): ExecutionFieldName {
  switch (object) {
    case 0:
    case "EXECUTION_FIELD_NAME_UNSPECIFIED":
      return ExecutionFieldName.EXECUTION_FIELD_NAME_UNSPECIFIED;
    case 1:
    case "EXECUTION_FIELD_NAME_ID":
      return ExecutionFieldName.EXECUTION_FIELD_NAME_ID;
    case 2:
    case "EXECUTION_FIELD_NAME_CREATED_DATE":
      return ExecutionFieldName.EXECUTION_FIELD_NAME_CREATED_DATE;
    case 3:
    case "EXECUTION_FIELD_NAME_CHANGED_DATE":
      return ExecutionFieldName.EXECUTION_FIELD_NAME_CHANGED_DATE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ExecutionFieldName.UNRECOGNIZED;
  }
}

export function executionFieldNameToJSON(object: ExecutionFieldName): string {
  switch (object) {
    case ExecutionFieldName.EXECUTION_FIELD_NAME_UNSPECIFIED:
      return "EXECUTION_FIELD_NAME_UNSPECIFIED";
    case ExecutionFieldName.EXECUTION_FIELD_NAME_ID:
      return "EXECUTION_FIELD_NAME_ID";
    case ExecutionFieldName.EXECUTION_FIELD_NAME_CREATED_DATE:
      return "EXECUTION_FIELD_NAME_CREATED_DATE";
    case ExecutionFieldName.EXECUTION_FIELD_NAME_CHANGED_DATE:
      return "EXECUTION_FIELD_NAME_CHANGED_DATE";
    case ExecutionFieldName.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface ExecutionSearchFilter {
  inConditionsFilter?: InConditionsFilter | undefined;
  executionTypeFilter?: ExecutionTypeFilter | undefined;
  targetFilter?: TargetFilter | undefined;
  includeFilter?: IncludeFilter | undefined;
}

export interface InConditionsFilter {
  /** Defines the conditions to query for. */
  conditions: Condition[];
}

export interface ExecutionTypeFilter {
  /** Defines the type to query for. */
  executionType: ExecutionType;
}

export interface TargetFilter {
  /** Defines the id to query for. */
  targetId: string;
}

export interface IncludeFilter {
  /** Defines the include to query for. */
  include: Condition | undefined;
}

export interface TargetSearchFilter {
  targetNameFilter?: TargetNameFilter | undefined;
  inTargetIdsFilter?: InTargetIDsFilter | undefined;
}

export interface TargetNameFilter {
  /** Defines the name of the target to query for. */
  targetName: string;
  /** Defines which text comparison method used for the name query. */
  method: TextFilterMethod;
}

export interface InTargetIDsFilter {
  /** Defines the ids to query for. */
  targetIds: string[];
}

function createBaseExecutionSearchFilter(): ExecutionSearchFilter {
  return {
    inConditionsFilter: undefined,
    executionTypeFilter: undefined,
    targetFilter: undefined,
    includeFilter: undefined,
  };
}

export const ExecutionSearchFilter: MessageFns<ExecutionSearchFilter> = {
  encode(message: ExecutionSearchFilter, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.inConditionsFilter !== undefined) {
      InConditionsFilter.encode(message.inConditionsFilter, writer.uint32(10).fork()).join();
    }
    if (message.executionTypeFilter !== undefined) {
      ExecutionTypeFilter.encode(message.executionTypeFilter, writer.uint32(18).fork()).join();
    }
    if (message.targetFilter !== undefined) {
      TargetFilter.encode(message.targetFilter, writer.uint32(26).fork()).join();
    }
    if (message.includeFilter !== undefined) {
      IncludeFilter.encode(message.includeFilter, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExecutionSearchFilter {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExecutionSearchFilter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.inConditionsFilter = InConditionsFilter.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.executionTypeFilter = ExecutionTypeFilter.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.targetFilter = TargetFilter.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.includeFilter = IncludeFilter.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExecutionSearchFilter {
    return {
      inConditionsFilter: isSet(object.inConditionsFilter)
        ? InConditionsFilter.fromJSON(object.inConditionsFilter)
        : undefined,
      executionTypeFilter: isSet(object.executionTypeFilter)
        ? ExecutionTypeFilter.fromJSON(object.executionTypeFilter)
        : undefined,
      targetFilter: isSet(object.targetFilter) ? TargetFilter.fromJSON(object.targetFilter) : undefined,
      includeFilter: isSet(object.includeFilter) ? IncludeFilter.fromJSON(object.includeFilter) : undefined,
    };
  },

  toJSON(message: ExecutionSearchFilter): unknown {
    const obj: any = {};
    if (message.inConditionsFilter !== undefined) {
      obj.inConditionsFilter = InConditionsFilter.toJSON(message.inConditionsFilter);
    }
    if (message.executionTypeFilter !== undefined) {
      obj.executionTypeFilter = ExecutionTypeFilter.toJSON(message.executionTypeFilter);
    }
    if (message.targetFilter !== undefined) {
      obj.targetFilter = TargetFilter.toJSON(message.targetFilter);
    }
    if (message.includeFilter !== undefined) {
      obj.includeFilter = IncludeFilter.toJSON(message.includeFilter);
    }
    return obj;
  },

  create(base?: DeepPartial<ExecutionSearchFilter>): ExecutionSearchFilter {
    return ExecutionSearchFilter.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExecutionSearchFilter>): ExecutionSearchFilter {
    const message = createBaseExecutionSearchFilter();
    message.inConditionsFilter = (object.inConditionsFilter !== undefined && object.inConditionsFilter !== null)
      ? InConditionsFilter.fromPartial(object.inConditionsFilter)
      : undefined;
    message.executionTypeFilter = (object.executionTypeFilter !== undefined && object.executionTypeFilter !== null)
      ? ExecutionTypeFilter.fromPartial(object.executionTypeFilter)
      : undefined;
    message.targetFilter = (object.targetFilter !== undefined && object.targetFilter !== null)
      ? TargetFilter.fromPartial(object.targetFilter)
      : undefined;
    message.includeFilter = (object.includeFilter !== undefined && object.includeFilter !== null)
      ? IncludeFilter.fromPartial(object.includeFilter)
      : undefined;
    return message;
  },
};

function createBaseInConditionsFilter(): InConditionsFilter {
  return { conditions: [] };
}

export const InConditionsFilter: MessageFns<InConditionsFilter> = {
  encode(message: InConditionsFilter, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.conditions) {
      Condition.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InConditionsFilter {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInConditionsFilter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.conditions.push(Condition.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InConditionsFilter {
    return {
      conditions: globalThis.Array.isArray(object?.conditions)
        ? object.conditions.map((e: any) => Condition.fromJSON(e))
        : [],
    };
  },

  toJSON(message: InConditionsFilter): unknown {
    const obj: any = {};
    if (message.conditions?.length) {
      obj.conditions = message.conditions.map((e) => Condition.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<InConditionsFilter>): InConditionsFilter {
    return InConditionsFilter.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<InConditionsFilter>): InConditionsFilter {
    const message = createBaseInConditionsFilter();
    message.conditions = object.conditions?.map((e) => Condition.fromPartial(e)) || [];
    return message;
  },
};

function createBaseExecutionTypeFilter(): ExecutionTypeFilter {
  return { executionType: 0 };
}

export const ExecutionTypeFilter: MessageFns<ExecutionTypeFilter> = {
  encode(message: ExecutionTypeFilter, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.executionType !== 0) {
      writer.uint32(8).int32(message.executionType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExecutionTypeFilter {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExecutionTypeFilter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.executionType = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExecutionTypeFilter {
    return { executionType: isSet(object.executionType) ? executionTypeFromJSON(object.executionType) : 0 };
  },

  toJSON(message: ExecutionTypeFilter): unknown {
    const obj: any = {};
    if (message.executionType !== 0) {
      obj.executionType = executionTypeToJSON(message.executionType);
    }
    return obj;
  },

  create(base?: DeepPartial<ExecutionTypeFilter>): ExecutionTypeFilter {
    return ExecutionTypeFilter.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExecutionTypeFilter>): ExecutionTypeFilter {
    const message = createBaseExecutionTypeFilter();
    message.executionType = object.executionType ?? 0;
    return message;
  },
};

function createBaseTargetFilter(): TargetFilter {
  return { targetId: "" };
}

export const TargetFilter: MessageFns<TargetFilter> = {
  encode(message: TargetFilter, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.targetId !== "") {
      writer.uint32(10).string(message.targetId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TargetFilter {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTargetFilter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.targetId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TargetFilter {
    return { targetId: isSet(object.targetId) ? globalThis.String(object.targetId) : "" };
  },

  toJSON(message: TargetFilter): unknown {
    const obj: any = {};
    if (message.targetId !== "") {
      obj.targetId = message.targetId;
    }
    return obj;
  },

  create(base?: DeepPartial<TargetFilter>): TargetFilter {
    return TargetFilter.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TargetFilter>): TargetFilter {
    const message = createBaseTargetFilter();
    message.targetId = object.targetId ?? "";
    return message;
  },
};

function createBaseIncludeFilter(): IncludeFilter {
  return { include: undefined };
}

export const IncludeFilter: MessageFns<IncludeFilter> = {
  encode(message: IncludeFilter, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.include !== undefined) {
      Condition.encode(message.include, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IncludeFilter {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIncludeFilter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.include = Condition.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IncludeFilter {
    return { include: isSet(object.include) ? Condition.fromJSON(object.include) : undefined };
  },

  toJSON(message: IncludeFilter): unknown {
    const obj: any = {};
    if (message.include !== undefined) {
      obj.include = Condition.toJSON(message.include);
    }
    return obj;
  },

  create(base?: DeepPartial<IncludeFilter>): IncludeFilter {
    return IncludeFilter.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<IncludeFilter>): IncludeFilter {
    const message = createBaseIncludeFilter();
    message.include = (object.include !== undefined && object.include !== null)
      ? Condition.fromPartial(object.include)
      : undefined;
    return message;
  },
};

function createBaseTargetSearchFilter(): TargetSearchFilter {
  return { targetNameFilter: undefined, inTargetIdsFilter: undefined };
}

export const TargetSearchFilter: MessageFns<TargetSearchFilter> = {
  encode(message: TargetSearchFilter, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.targetNameFilter !== undefined) {
      TargetNameFilter.encode(message.targetNameFilter, writer.uint32(10).fork()).join();
    }
    if (message.inTargetIdsFilter !== undefined) {
      InTargetIDsFilter.encode(message.inTargetIdsFilter, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TargetSearchFilter {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTargetSearchFilter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.targetNameFilter = TargetNameFilter.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.inTargetIdsFilter = InTargetIDsFilter.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TargetSearchFilter {
    return {
      targetNameFilter: isSet(object.targetNameFilter) ? TargetNameFilter.fromJSON(object.targetNameFilter) : undefined,
      inTargetIdsFilter: isSet(object.inTargetIdsFilter)
        ? InTargetIDsFilter.fromJSON(object.inTargetIdsFilter)
        : undefined,
    };
  },

  toJSON(message: TargetSearchFilter): unknown {
    const obj: any = {};
    if (message.targetNameFilter !== undefined) {
      obj.targetNameFilter = TargetNameFilter.toJSON(message.targetNameFilter);
    }
    if (message.inTargetIdsFilter !== undefined) {
      obj.inTargetIdsFilter = InTargetIDsFilter.toJSON(message.inTargetIdsFilter);
    }
    return obj;
  },

  create(base?: DeepPartial<TargetSearchFilter>): TargetSearchFilter {
    return TargetSearchFilter.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TargetSearchFilter>): TargetSearchFilter {
    const message = createBaseTargetSearchFilter();
    message.targetNameFilter = (object.targetNameFilter !== undefined && object.targetNameFilter !== null)
      ? TargetNameFilter.fromPartial(object.targetNameFilter)
      : undefined;
    message.inTargetIdsFilter = (object.inTargetIdsFilter !== undefined && object.inTargetIdsFilter !== null)
      ? InTargetIDsFilter.fromPartial(object.inTargetIdsFilter)
      : undefined;
    return message;
  },
};

function createBaseTargetNameFilter(): TargetNameFilter {
  return { targetName: "", method: 0 };
}

export const TargetNameFilter: MessageFns<TargetNameFilter> = {
  encode(message: TargetNameFilter, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.targetName !== "") {
      writer.uint32(10).string(message.targetName);
    }
    if (message.method !== 0) {
      writer.uint32(16).int32(message.method);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TargetNameFilter {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTargetNameFilter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.targetName = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.method = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TargetNameFilter {
    return {
      targetName: isSet(object.targetName) ? globalThis.String(object.targetName) : "",
      method: isSet(object.method) ? textFilterMethodFromJSON(object.method) : 0,
    };
  },

  toJSON(message: TargetNameFilter): unknown {
    const obj: any = {};
    if (message.targetName !== "") {
      obj.targetName = message.targetName;
    }
    if (message.method !== 0) {
      obj.method = textFilterMethodToJSON(message.method);
    }
    return obj;
  },

  create(base?: DeepPartial<TargetNameFilter>): TargetNameFilter {
    return TargetNameFilter.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TargetNameFilter>): TargetNameFilter {
    const message = createBaseTargetNameFilter();
    message.targetName = object.targetName ?? "";
    message.method = object.method ?? 0;
    return message;
  },
};

function createBaseInTargetIDsFilter(): InTargetIDsFilter {
  return { targetIds: [] };
}

export const InTargetIDsFilter: MessageFns<InTargetIDsFilter> = {
  encode(message: InTargetIDsFilter, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.targetIds) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InTargetIDsFilter {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInTargetIDsFilter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.targetIds.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InTargetIDsFilter {
    return {
      targetIds: globalThis.Array.isArray(object?.targetIds)
        ? object.targetIds.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: InTargetIDsFilter): unknown {
    const obj: any = {};
    if (message.targetIds?.length) {
      obj.targetIds = message.targetIds;
    }
    return obj;
  },

  create(base?: DeepPartial<InTargetIDsFilter>): InTargetIDsFilter {
    return InTargetIDsFilter.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<InTargetIDsFilter>): InTargetIDsFilter {
    const message = createBaseInTargetIDsFilter();
    message.targetIds = object.targetIds?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
