// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: zitadel/resources/action/v3alpha/target.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Duration } from "../../../../google/protobuf/duration.js";
import { Details } from "../../object/v3alpha/object.js";

export const protobufPackage = "zitadel.resources.action.v3alpha";

export interface Target {
  name: string;
  restWebhook?: SetRESTWebhook | undefined;
  restCall?: SetRESTCall | undefined;
  restAsync?:
    | SetRESTAsync
    | undefined;
  /** Timeout defines the duration until ZITADEL cancels the execution. */
  timeout: Duration | undefined;
  endpoint: string;
}

export interface GetTarget {
  details: Details | undefined;
  config: Target | undefined;
}

export interface PatchTarget {
  name?: string | undefined;
  restWebhook?: SetRESTWebhook | undefined;
  restCall?: SetRESTCall | undefined;
  restAsync?:
    | SetRESTAsync
    | undefined;
  /** Timeout defines the duration until ZITADEL cancels the execution. */
  timeout?: Duration | undefined;
  endpoint?: string | undefined;
}

/** Wait for response but response body is ignored, status is checked, call is sent as post. */
export interface SetRESTWebhook {
  /** Define if any error stops the whole execution. By default the process continues as normal. */
  interruptOnError: boolean;
}

/** Wait for response and response body is used, status is checked, call is sent as post. */
export interface SetRESTCall {
  /** Define if any error stops the whole execution. By default the process continues as normal. */
  interruptOnError: boolean;
}

/** Call is executed in parallel to others, ZITADEL does not wait until the call is finished. The state is ignored, call is sent as post. */
export interface SetRESTAsync {
}

function createBaseTarget(): Target {
  return {
    name: "",
    restWebhook: undefined,
    restCall: undefined,
    restAsync: undefined,
    timeout: undefined,
    endpoint: "",
  };
}

export const Target: MessageFns<Target> = {
  encode(message: Target, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.restWebhook !== undefined) {
      SetRESTWebhook.encode(message.restWebhook, writer.uint32(18).fork()).join();
    }
    if (message.restCall !== undefined) {
      SetRESTCall.encode(message.restCall, writer.uint32(26).fork()).join();
    }
    if (message.restAsync !== undefined) {
      SetRESTAsync.encode(message.restAsync, writer.uint32(34).fork()).join();
    }
    if (message.timeout !== undefined) {
      Duration.encode(message.timeout, writer.uint32(42).fork()).join();
    }
    if (message.endpoint !== "") {
      writer.uint32(50).string(message.endpoint);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Target {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTarget();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.restWebhook = SetRESTWebhook.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.restCall = SetRESTCall.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.restAsync = SetRESTAsync.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.timeout = Duration.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.endpoint = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Target {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      restWebhook: isSet(object.restWebhook) ? SetRESTWebhook.fromJSON(object.restWebhook) : undefined,
      restCall: isSet(object.restCall) ? SetRESTCall.fromJSON(object.restCall) : undefined,
      restAsync: isSet(object.restAsync) ? SetRESTAsync.fromJSON(object.restAsync) : undefined,
      timeout: isSet(object.timeout) ? Duration.fromJSON(object.timeout) : undefined,
      endpoint: isSet(object.endpoint) ? globalThis.String(object.endpoint) : "",
    };
  },

  toJSON(message: Target): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.restWebhook !== undefined) {
      obj.restWebhook = SetRESTWebhook.toJSON(message.restWebhook);
    }
    if (message.restCall !== undefined) {
      obj.restCall = SetRESTCall.toJSON(message.restCall);
    }
    if (message.restAsync !== undefined) {
      obj.restAsync = SetRESTAsync.toJSON(message.restAsync);
    }
    if (message.timeout !== undefined) {
      obj.timeout = Duration.toJSON(message.timeout);
    }
    if (message.endpoint !== "") {
      obj.endpoint = message.endpoint;
    }
    return obj;
  },

  create(base?: DeepPartial<Target>): Target {
    return Target.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Target>): Target {
    const message = createBaseTarget();
    message.name = object.name ?? "";
    message.restWebhook = (object.restWebhook !== undefined && object.restWebhook !== null)
      ? SetRESTWebhook.fromPartial(object.restWebhook)
      : undefined;
    message.restCall = (object.restCall !== undefined && object.restCall !== null)
      ? SetRESTCall.fromPartial(object.restCall)
      : undefined;
    message.restAsync = (object.restAsync !== undefined && object.restAsync !== null)
      ? SetRESTAsync.fromPartial(object.restAsync)
      : undefined;
    message.timeout = (object.timeout !== undefined && object.timeout !== null)
      ? Duration.fromPartial(object.timeout)
      : undefined;
    message.endpoint = object.endpoint ?? "";
    return message;
  },
};

function createBaseGetTarget(): GetTarget {
  return { details: undefined, config: undefined };
}

export const GetTarget: MessageFns<GetTarget> = {
  encode(message: GetTarget, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      Details.encode(message.details, writer.uint32(10).fork()).join();
    }
    if (message.config !== undefined) {
      Target.encode(message.config, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetTarget {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetTarget();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = Details.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.config = Target.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetTarget {
    return {
      details: isSet(object.details) ? Details.fromJSON(object.details) : undefined,
      config: isSet(object.config) ? Target.fromJSON(object.config) : undefined,
    };
  },

  toJSON(message: GetTarget): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = Details.toJSON(message.details);
    }
    if (message.config !== undefined) {
      obj.config = Target.toJSON(message.config);
    }
    return obj;
  },

  create(base?: DeepPartial<GetTarget>): GetTarget {
    return GetTarget.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetTarget>): GetTarget {
    const message = createBaseGetTarget();
    message.details = (object.details !== undefined && object.details !== null)
      ? Details.fromPartial(object.details)
      : undefined;
    message.config = (object.config !== undefined && object.config !== null)
      ? Target.fromPartial(object.config)
      : undefined;
    return message;
  },
};

function createBasePatchTarget(): PatchTarget {
  return {
    name: undefined,
    restWebhook: undefined,
    restCall: undefined,
    restAsync: undefined,
    timeout: undefined,
    endpoint: undefined,
  };
}

export const PatchTarget: MessageFns<PatchTarget> = {
  encode(message: PatchTarget, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== undefined) {
      writer.uint32(10).string(message.name);
    }
    if (message.restWebhook !== undefined) {
      SetRESTWebhook.encode(message.restWebhook, writer.uint32(18).fork()).join();
    }
    if (message.restCall !== undefined) {
      SetRESTCall.encode(message.restCall, writer.uint32(26).fork()).join();
    }
    if (message.restAsync !== undefined) {
      SetRESTAsync.encode(message.restAsync, writer.uint32(34).fork()).join();
    }
    if (message.timeout !== undefined) {
      Duration.encode(message.timeout, writer.uint32(42).fork()).join();
    }
    if (message.endpoint !== undefined) {
      writer.uint32(50).string(message.endpoint);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PatchTarget {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePatchTarget();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.restWebhook = SetRESTWebhook.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.restCall = SetRESTCall.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.restAsync = SetRESTAsync.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.timeout = Duration.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.endpoint = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PatchTarget {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      restWebhook: isSet(object.restWebhook) ? SetRESTWebhook.fromJSON(object.restWebhook) : undefined,
      restCall: isSet(object.restCall) ? SetRESTCall.fromJSON(object.restCall) : undefined,
      restAsync: isSet(object.restAsync) ? SetRESTAsync.fromJSON(object.restAsync) : undefined,
      timeout: isSet(object.timeout) ? Duration.fromJSON(object.timeout) : undefined,
      endpoint: isSet(object.endpoint) ? globalThis.String(object.endpoint) : undefined,
    };
  },

  toJSON(message: PatchTarget): unknown {
    const obj: any = {};
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.restWebhook !== undefined) {
      obj.restWebhook = SetRESTWebhook.toJSON(message.restWebhook);
    }
    if (message.restCall !== undefined) {
      obj.restCall = SetRESTCall.toJSON(message.restCall);
    }
    if (message.restAsync !== undefined) {
      obj.restAsync = SetRESTAsync.toJSON(message.restAsync);
    }
    if (message.timeout !== undefined) {
      obj.timeout = Duration.toJSON(message.timeout);
    }
    if (message.endpoint !== undefined) {
      obj.endpoint = message.endpoint;
    }
    return obj;
  },

  create(base?: DeepPartial<PatchTarget>): PatchTarget {
    return PatchTarget.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PatchTarget>): PatchTarget {
    const message = createBasePatchTarget();
    message.name = object.name ?? undefined;
    message.restWebhook = (object.restWebhook !== undefined && object.restWebhook !== null)
      ? SetRESTWebhook.fromPartial(object.restWebhook)
      : undefined;
    message.restCall = (object.restCall !== undefined && object.restCall !== null)
      ? SetRESTCall.fromPartial(object.restCall)
      : undefined;
    message.restAsync = (object.restAsync !== undefined && object.restAsync !== null)
      ? SetRESTAsync.fromPartial(object.restAsync)
      : undefined;
    message.timeout = (object.timeout !== undefined && object.timeout !== null)
      ? Duration.fromPartial(object.timeout)
      : undefined;
    message.endpoint = object.endpoint ?? undefined;
    return message;
  },
};

function createBaseSetRESTWebhook(): SetRESTWebhook {
  return { interruptOnError: false };
}

export const SetRESTWebhook: MessageFns<SetRESTWebhook> = {
  encode(message: SetRESTWebhook, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.interruptOnError !== false) {
      writer.uint32(8).bool(message.interruptOnError);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetRESTWebhook {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetRESTWebhook();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.interruptOnError = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetRESTWebhook {
    return { interruptOnError: isSet(object.interruptOnError) ? globalThis.Boolean(object.interruptOnError) : false };
  },

  toJSON(message: SetRESTWebhook): unknown {
    const obj: any = {};
    if (message.interruptOnError !== false) {
      obj.interruptOnError = message.interruptOnError;
    }
    return obj;
  },

  create(base?: DeepPartial<SetRESTWebhook>): SetRESTWebhook {
    return SetRESTWebhook.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SetRESTWebhook>): SetRESTWebhook {
    const message = createBaseSetRESTWebhook();
    message.interruptOnError = object.interruptOnError ?? false;
    return message;
  },
};

function createBaseSetRESTCall(): SetRESTCall {
  return { interruptOnError: false };
}

export const SetRESTCall: MessageFns<SetRESTCall> = {
  encode(message: SetRESTCall, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.interruptOnError !== false) {
      writer.uint32(8).bool(message.interruptOnError);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetRESTCall {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetRESTCall();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.interruptOnError = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetRESTCall {
    return { interruptOnError: isSet(object.interruptOnError) ? globalThis.Boolean(object.interruptOnError) : false };
  },

  toJSON(message: SetRESTCall): unknown {
    const obj: any = {};
    if (message.interruptOnError !== false) {
      obj.interruptOnError = message.interruptOnError;
    }
    return obj;
  },

  create(base?: DeepPartial<SetRESTCall>): SetRESTCall {
    return SetRESTCall.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SetRESTCall>): SetRESTCall {
    const message = createBaseSetRESTCall();
    message.interruptOnError = object.interruptOnError ?? false;
    return message;
  },
};

function createBaseSetRESTAsync(): SetRESTAsync {
  return {};
}

export const SetRESTAsync: MessageFns<SetRESTAsync> = {
  encode(_: SetRESTAsync, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetRESTAsync {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetRESTAsync();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): SetRESTAsync {
    return {};
  },

  toJSON(_: SetRESTAsync): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<SetRESTAsync>): SetRESTAsync {
    return SetRESTAsync.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<SetRESTAsync>): SetRESTAsync {
    const message = createBaseSetRESTAsync();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
