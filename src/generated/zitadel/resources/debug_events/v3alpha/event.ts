// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: zitadel/resources/debug_events/v3alpha/event.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Duration } from "../../../../google/protobuf/duration.js";

export const protobufPackage = "zitadel.resources.debug_events.v3alpha";

export interface Event {
  add?: AddedEvent | undefined;
  change?: ChangedEvent | undefined;
  remove?: RemovedEvent | undefined;
}

export interface AddedEvent {
  /** issues a pg_sleep command in the projection reducer, simulating a slow query. */
  projectionSleep:
    | Duration
    | undefined;
  /** optional text that can be set as a state. */
  blob?: string | undefined;
}

export interface ChangedEvent {
  /** issues a pg_sleep command in the projection reducer, simulating a slow query. */
  projectionSleep:
    | Duration
    | undefined;
  /** optional text that can be set as a state. */
  blob?: string | undefined;
}

export interface RemovedEvent {
  /** issues a pg_sleep command in the projection reducer, simulating a slow query. */
  projectionSleep: Duration | undefined;
}

function createBaseEvent(): Event {
  return { add: undefined, change: undefined, remove: undefined };
}

export const Event: MessageFns<Event> = {
  encode(message: Event, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.add !== undefined) {
      AddedEvent.encode(message.add, writer.uint32(10).fork()).join();
    }
    if (message.change !== undefined) {
      ChangedEvent.encode(message.change, writer.uint32(18).fork()).join();
    }
    if (message.remove !== undefined) {
      RemovedEvent.encode(message.remove, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Event {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.add = AddedEvent.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.change = ChangedEvent.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.remove = RemovedEvent.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Event {
    return {
      add: isSet(object.add) ? AddedEvent.fromJSON(object.add) : undefined,
      change: isSet(object.change) ? ChangedEvent.fromJSON(object.change) : undefined,
      remove: isSet(object.remove) ? RemovedEvent.fromJSON(object.remove) : undefined,
    };
  },

  toJSON(message: Event): unknown {
    const obj: any = {};
    if (message.add !== undefined) {
      obj.add = AddedEvent.toJSON(message.add);
    }
    if (message.change !== undefined) {
      obj.change = ChangedEvent.toJSON(message.change);
    }
    if (message.remove !== undefined) {
      obj.remove = RemovedEvent.toJSON(message.remove);
    }
    return obj;
  },

  create(base?: DeepPartial<Event>): Event {
    return Event.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Event>): Event {
    const message = createBaseEvent();
    message.add = (object.add !== undefined && object.add !== null) ? AddedEvent.fromPartial(object.add) : undefined;
    message.change = (object.change !== undefined && object.change !== null)
      ? ChangedEvent.fromPartial(object.change)
      : undefined;
    message.remove = (object.remove !== undefined && object.remove !== null)
      ? RemovedEvent.fromPartial(object.remove)
      : undefined;
    return message;
  },
};

function createBaseAddedEvent(): AddedEvent {
  return { projectionSleep: undefined, blob: undefined };
}

export const AddedEvent: MessageFns<AddedEvent> = {
  encode(message: AddedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.projectionSleep !== undefined) {
      Duration.encode(message.projectionSleep, writer.uint32(10).fork()).join();
    }
    if (message.blob !== undefined) {
      writer.uint32(18).string(message.blob);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectionSleep = Duration.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.blob = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddedEvent {
    return {
      projectionSleep: isSet(object.projectionSleep) ? Duration.fromJSON(object.projectionSleep) : undefined,
      blob: isSet(object.blob) ? globalThis.String(object.blob) : undefined,
    };
  },

  toJSON(message: AddedEvent): unknown {
    const obj: any = {};
    if (message.projectionSleep !== undefined) {
      obj.projectionSleep = Duration.toJSON(message.projectionSleep);
    }
    if (message.blob !== undefined) {
      obj.blob = message.blob;
    }
    return obj;
  },

  create(base?: DeepPartial<AddedEvent>): AddedEvent {
    return AddedEvent.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddedEvent>): AddedEvent {
    const message = createBaseAddedEvent();
    message.projectionSleep = (object.projectionSleep !== undefined && object.projectionSleep !== null)
      ? Duration.fromPartial(object.projectionSleep)
      : undefined;
    message.blob = object.blob ?? undefined;
    return message;
  },
};

function createBaseChangedEvent(): ChangedEvent {
  return { projectionSleep: undefined, blob: undefined };
}

export const ChangedEvent: MessageFns<ChangedEvent> = {
  encode(message: ChangedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.projectionSleep !== undefined) {
      Duration.encode(message.projectionSleep, writer.uint32(10).fork()).join();
    }
    if (message.blob !== undefined) {
      writer.uint32(18).string(message.blob);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChangedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChangedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectionSleep = Duration.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.blob = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChangedEvent {
    return {
      projectionSleep: isSet(object.projectionSleep) ? Duration.fromJSON(object.projectionSleep) : undefined,
      blob: isSet(object.blob) ? globalThis.String(object.blob) : undefined,
    };
  },

  toJSON(message: ChangedEvent): unknown {
    const obj: any = {};
    if (message.projectionSleep !== undefined) {
      obj.projectionSleep = Duration.toJSON(message.projectionSleep);
    }
    if (message.blob !== undefined) {
      obj.blob = message.blob;
    }
    return obj;
  },

  create(base?: DeepPartial<ChangedEvent>): ChangedEvent {
    return ChangedEvent.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ChangedEvent>): ChangedEvent {
    const message = createBaseChangedEvent();
    message.projectionSleep = (object.projectionSleep !== undefined && object.projectionSleep !== null)
      ? Duration.fromPartial(object.projectionSleep)
      : undefined;
    message.blob = object.blob ?? undefined;
    return message;
  },
};

function createBaseRemovedEvent(): RemovedEvent {
  return { projectionSleep: undefined };
}

export const RemovedEvent: MessageFns<RemovedEvent> = {
  encode(message: RemovedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.projectionSleep !== undefined) {
      Duration.encode(message.projectionSleep, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemovedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemovedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectionSleep = Duration.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemovedEvent {
    return { projectionSleep: isSet(object.projectionSleep) ? Duration.fromJSON(object.projectionSleep) : undefined };
  },

  toJSON(message: RemovedEvent): unknown {
    const obj: any = {};
    if (message.projectionSleep !== undefined) {
      obj.projectionSleep = Duration.toJSON(message.projectionSleep);
    }
    return obj;
  },

  create(base?: DeepPartial<RemovedEvent>): RemovedEvent {
    return RemovedEvent.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemovedEvent>): RemovedEvent {
    const message = createBaseRemovedEvent();
    message.projectionSleep = (object.projectionSleep !== undefined && object.projectionSleep !== null)
      ? Duration.fromPartial(object.projectionSleep)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
