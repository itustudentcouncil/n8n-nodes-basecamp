// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: zitadel/resources/debug_events/v3alpha/debug_events_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Instance } from "../../../object/v3alpha/object.js";
import { Details } from "../../object/v3alpha/object.js";
import { Event } from "./event.js";
import { State } from "./state.js";

export const protobufPackage = "zitadel.resources.debug_events.v3alpha";

export interface CreateDebugEventsRequest {
  instance?:
    | Instance
    | undefined;
  /** unique identifier for the aggregate we want to push events to. */
  aggregateId: string;
  events: Event[];
}

export interface CreateDebugEventsResponse {
  details: Details | undefined;
}

export interface GetDebugEventsStateByIdRequest {
  /** unique identifier of the aggregate. */
  id: string;
  triggerBulk: boolean;
}

export interface GetDebugEventsStateByIdResponse {
  state: State | undefined;
}

export interface ListDebugEventsStatesRequest {
  triggerBulk: boolean;
}

export interface ListDebugEventsStatesResponse {
  states: State[];
}

function createBaseCreateDebugEventsRequest(): CreateDebugEventsRequest {
  return { instance: undefined, aggregateId: "", events: [] };
}

export const CreateDebugEventsRequest: MessageFns<CreateDebugEventsRequest> = {
  encode(message: CreateDebugEventsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.instance !== undefined) {
      Instance.encode(message.instance, writer.uint32(10).fork()).join();
    }
    if (message.aggregateId !== "") {
      writer.uint32(18).string(message.aggregateId);
    }
    for (const v of message.events) {
      Event.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateDebugEventsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateDebugEventsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.instance = Instance.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.aggregateId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.events.push(Event.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateDebugEventsRequest {
    return {
      instance: isSet(object.instance) ? Instance.fromJSON(object.instance) : undefined,
      aggregateId: isSet(object.aggregateId) ? globalThis.String(object.aggregateId) : "",
      events: globalThis.Array.isArray(object?.events) ? object.events.map((e: any) => Event.fromJSON(e)) : [],
    };
  },

  toJSON(message: CreateDebugEventsRequest): unknown {
    const obj: any = {};
    if (message.instance !== undefined) {
      obj.instance = Instance.toJSON(message.instance);
    }
    if (message.aggregateId !== "") {
      obj.aggregateId = message.aggregateId;
    }
    if (message.events?.length) {
      obj.events = message.events.map((e) => Event.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<CreateDebugEventsRequest>): CreateDebugEventsRequest {
    return CreateDebugEventsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateDebugEventsRequest>): CreateDebugEventsRequest {
    const message = createBaseCreateDebugEventsRequest();
    message.instance = (object.instance !== undefined && object.instance !== null)
      ? Instance.fromPartial(object.instance)
      : undefined;
    message.aggregateId = object.aggregateId ?? "";
    message.events = object.events?.map((e) => Event.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCreateDebugEventsResponse(): CreateDebugEventsResponse {
  return { details: undefined };
}

export const CreateDebugEventsResponse: MessageFns<CreateDebugEventsResponse> = {
  encode(message: CreateDebugEventsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      Details.encode(message.details, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateDebugEventsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateDebugEventsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = Details.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateDebugEventsResponse {
    return { details: isSet(object.details) ? Details.fromJSON(object.details) : undefined };
  },

  toJSON(message: CreateDebugEventsResponse): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = Details.toJSON(message.details);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateDebugEventsResponse>): CreateDebugEventsResponse {
    return CreateDebugEventsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateDebugEventsResponse>): CreateDebugEventsResponse {
    const message = createBaseCreateDebugEventsResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? Details.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetDebugEventsStateByIdRequest(): GetDebugEventsStateByIdRequest {
  return { id: "", triggerBulk: false };
}

export const GetDebugEventsStateByIdRequest: MessageFns<GetDebugEventsStateByIdRequest> = {
  encode(message: GetDebugEventsStateByIdRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.triggerBulk !== false) {
      writer.uint32(16).bool(message.triggerBulk);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetDebugEventsStateByIdRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDebugEventsStateByIdRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.triggerBulk = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDebugEventsStateByIdRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      triggerBulk: isSet(object.triggerBulk) ? globalThis.Boolean(object.triggerBulk) : false,
    };
  },

  toJSON(message: GetDebugEventsStateByIdRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.triggerBulk !== false) {
      obj.triggerBulk = message.triggerBulk;
    }
    return obj;
  },

  create(base?: DeepPartial<GetDebugEventsStateByIdRequest>): GetDebugEventsStateByIdRequest {
    return GetDebugEventsStateByIdRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetDebugEventsStateByIdRequest>): GetDebugEventsStateByIdRequest {
    const message = createBaseGetDebugEventsStateByIdRequest();
    message.id = object.id ?? "";
    message.triggerBulk = object.triggerBulk ?? false;
    return message;
  },
};

function createBaseGetDebugEventsStateByIdResponse(): GetDebugEventsStateByIdResponse {
  return { state: undefined };
}

export const GetDebugEventsStateByIdResponse: MessageFns<GetDebugEventsStateByIdResponse> = {
  encode(message: GetDebugEventsStateByIdResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.state !== undefined) {
      State.encode(message.state, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetDebugEventsStateByIdResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDebugEventsStateByIdResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.state = State.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDebugEventsStateByIdResponse {
    return { state: isSet(object.state) ? State.fromJSON(object.state) : undefined };
  },

  toJSON(message: GetDebugEventsStateByIdResponse): unknown {
    const obj: any = {};
    if (message.state !== undefined) {
      obj.state = State.toJSON(message.state);
    }
    return obj;
  },

  create(base?: DeepPartial<GetDebugEventsStateByIdResponse>): GetDebugEventsStateByIdResponse {
    return GetDebugEventsStateByIdResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetDebugEventsStateByIdResponse>): GetDebugEventsStateByIdResponse {
    const message = createBaseGetDebugEventsStateByIdResponse();
    message.state = (object.state !== undefined && object.state !== null) ? State.fromPartial(object.state) : undefined;
    return message;
  },
};

function createBaseListDebugEventsStatesRequest(): ListDebugEventsStatesRequest {
  return { triggerBulk: false };
}

export const ListDebugEventsStatesRequest: MessageFns<ListDebugEventsStatesRequest> = {
  encode(message: ListDebugEventsStatesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.triggerBulk !== false) {
      writer.uint32(8).bool(message.triggerBulk);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListDebugEventsStatesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListDebugEventsStatesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.triggerBulk = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListDebugEventsStatesRequest {
    return { triggerBulk: isSet(object.triggerBulk) ? globalThis.Boolean(object.triggerBulk) : false };
  },

  toJSON(message: ListDebugEventsStatesRequest): unknown {
    const obj: any = {};
    if (message.triggerBulk !== false) {
      obj.triggerBulk = message.triggerBulk;
    }
    return obj;
  },

  create(base?: DeepPartial<ListDebugEventsStatesRequest>): ListDebugEventsStatesRequest {
    return ListDebugEventsStatesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListDebugEventsStatesRequest>): ListDebugEventsStatesRequest {
    const message = createBaseListDebugEventsStatesRequest();
    message.triggerBulk = object.triggerBulk ?? false;
    return message;
  },
};

function createBaseListDebugEventsStatesResponse(): ListDebugEventsStatesResponse {
  return { states: [] };
}

export const ListDebugEventsStatesResponse: MessageFns<ListDebugEventsStatesResponse> = {
  encode(message: ListDebugEventsStatesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.states) {
      State.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListDebugEventsStatesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListDebugEventsStatesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.states.push(State.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListDebugEventsStatesResponse {
    return { states: globalThis.Array.isArray(object?.states) ? object.states.map((e: any) => State.fromJSON(e)) : [] };
  },

  toJSON(message: ListDebugEventsStatesResponse): unknown {
    const obj: any = {};
    if (message.states?.length) {
      obj.states = message.states.map((e) => State.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ListDebugEventsStatesResponse>): ListDebugEventsStatesResponse {
    return ListDebugEventsStatesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListDebugEventsStatesResponse>): ListDebugEventsStatesResponse {
    const message = createBaseListDebugEventsStatesResponse();
    message.states = object.states?.map((e) => State.fromPartial(e)) || [];
    return message;
  },
};

export type ZITADELDebugEventsDefinition = typeof ZITADELDebugEventsDefinition;
export const ZITADELDebugEventsDefinition = {
  name: "ZITADELDebugEvents",
  fullName: "zitadel.resources.debug_events.v3alpha.ZITADELDebugEvents",
  methods: {
    createDebugEvents: {
      name: "CreateDebugEvents",
      requestType: CreateDebugEventsRequest,
      requestStream: false,
      responseType: CreateDebugEventsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              144,
              1,
              18,
              29,
              67,
              114,
              101,
              97,
              116,
              101,
              32,
              97,
              32,
              115,
              101,
              116,
              32,
              111,
              102,
              32,
              100,
              101,
              98,
              117,
              103,
              32,
              101,
              118,
              101,
              110,
              116,
              115,
              46,
              26,
              98,
              67,
              114,
              101,
              97,
              116,
              101,
              32,
              97,
              32,
              115,
              101,
              116,
              32,
              111,
              102,
              32,
              100,
              101,
              98,
              117,
              103,
              32,
              101,
              118,
              101,
              110,
              116,
              115,
              32,
              119,
              104,
              105,
              99,
              104,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              112,
              117,
              115,
              104,
              101,
              100,
              32,
              116,
              111,
              32,
              116,
              104,
              101,
              32,
              101,
              118,
              101,
              110,
              116,
              115,
              116,
              111,
              114,
              101,
              32,
              97,
              110,
              100,
              32,
              114,
              101,
              100,
              117,
              99,
              101,
              100,
              32,
              116,
              111,
              32,
              116,
              104,
              101,
              32,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              105,
              111,
              110,
              46,
              74,
              11,
              10,
              3,
              50,
              48,
              48,
              18,
              4,
              10,
              2,
              79,
              75,
            ]),
          ],
          400010: [
            Buffer.from([
              24,
              10,
              17,
              10,
              15,
              105,
              97,
              109,
              46,
              100,
              101,
              98,
              117,
              103,
              46,
              119,
              114,
              105,
              116,
              101,
              18,
              3,
              8,
              201,
              1,
            ]),
          ],
          578365826: [Buffer.from([11, 58, 6, 101, 118, 101, 110, 116, 115, 34, 1, 47])],
        },
      },
    },
    getDebugEventsStateById: {
      name: "GetDebugEventsStateById",
      requestType: GetDebugEventsStateByIdRequest,
      requestStream: false,
      responseType: GetDebugEventsStateByIdResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              52,
              74,
              50,
              10,
              3,
              50,
              48,
              48,
              18,
              43,
              10,
              41,
              68,
              101,
              98,
              117,
              103,
              32,
              101,
              118,
              101,
              110,
              116,
              115,
              32,
              115,
              116,
              97,
              116,
              101,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              108,
              121,
              32,
              114,
              101,
              116,
              114,
              105,
              101,
              118,
              101,
              100,
            ]),
          ],
          400010: [Buffer.from([18, 10, 16, 10, 14, 105, 97, 109, 46, 100, 101, 98, 117, 103, 46, 114, 101, 97, 100])],
          578365826: [
            Buffer.from([
              28,
              18,
              26,
              47,
              118,
              51,
              97,
              108,
              112,
              104,
              97,
              47,
              100,
              101,
              98,
              117,
              103,
              95,
              101,
              118,
              101,
              110,
              116,
              115,
              47,
              123,
              105,
              100,
              125,
            ]),
          ],
        },
      },
    },
    listDebugEventsStates: {
      name: "ListDebugEventsStates",
      requestType: ListDebugEventsStatesRequest,
      requestStream: false,
      responseType: ListDebugEventsStatesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            Buffer.from([
              53,
              74,
              51,
              10,
              3,
              50,
              48,
              48,
              18,
              44,
              10,
              42,
              68,
              101,
              98,
              117,
              103,
              32,
              101,
              118,
              101,
              110,
              116,
              115,
              32,
              115,
              116,
              97,
              116,
              101,
              115,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              108,
              121,
              32,
              114,
              101,
              116,
              114,
              105,
              101,
              118,
              101,
              100,
            ]),
          ],
          400010: [Buffer.from([18, 10, 16, 10, 14, 105, 97, 109, 46, 100, 101, 98, 117, 103, 46, 114, 101, 97, 100])],
          578365826: [
            Buffer.from([
              23,
              18,
              21,
              47,
              118,
              51,
              97,
              108,
              112,
              104,
              97,
              47,
              100,
              101,
              98,
              117,
              103,
              95,
              101,
              118,
              101,
              110,
              116,
              115,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface ZITADELDebugEventsServiceImplementation<CallContextExt = {}> {
  createDebugEvents(
    request: CreateDebugEventsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<CreateDebugEventsResponse>>;
  getDebugEventsStateById(
    request: GetDebugEventsStateByIdRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetDebugEventsStateByIdResponse>>;
  listDebugEventsStates(
    request: ListDebugEventsStatesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListDebugEventsStatesResponse>>;
}

export interface ZITADELDebugEventsClient<CallOptionsExt = {}> {
  createDebugEvents(
    request: DeepPartial<CreateDebugEventsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<CreateDebugEventsResponse>;
  getDebugEventsStateById(
    request: DeepPartial<GetDebugEventsStateByIdRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetDebugEventsStateByIdResponse>;
  listDebugEventsStates(
    request: DeepPartial<ListDebugEventsStatesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListDebugEventsStatesResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
