// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: zitadel/resources/webkey/v3alpha/key.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Details } from "../../object/v3alpha/object.js";
import { WebKeyECDSAConfig, WebKeyED25519Config, WebKeyRSAConfig } from "./config.js";

export const protobufPackage = "zitadel.resources.webkey.v3alpha";

export enum WebKeyState {
  STATE_UNSPECIFIED = 0,
  STATE_INITIAL = 1,
  STATE_ACTIVE = 2,
  STATE_INACTIVE = 3,
  STATE_REMOVED = 4,
  UNRECOGNIZED = -1,
}

export function webKeyStateFromJSON(object: any): WebKeyState {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return WebKeyState.STATE_UNSPECIFIED;
    case 1:
    case "STATE_INITIAL":
      return WebKeyState.STATE_INITIAL;
    case 2:
    case "STATE_ACTIVE":
      return WebKeyState.STATE_ACTIVE;
    case 3:
    case "STATE_INACTIVE":
      return WebKeyState.STATE_INACTIVE;
    case 4:
    case "STATE_REMOVED":
      return WebKeyState.STATE_REMOVED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return WebKeyState.UNRECOGNIZED;
  }
}

export function webKeyStateToJSON(object: WebKeyState): string {
  switch (object) {
    case WebKeyState.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case WebKeyState.STATE_INITIAL:
      return "STATE_INITIAL";
    case WebKeyState.STATE_ACTIVE:
      return "STATE_ACTIVE";
    case WebKeyState.STATE_INACTIVE:
      return "STATE_INACTIVE";
    case WebKeyState.STATE_REMOVED:
      return "STATE_REMOVED";
    case WebKeyState.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface GetWebKey {
  details: Details | undefined;
  config: WebKey | undefined;
  state: WebKeyState;
}

export interface WebKey {
  rsa?: WebKeyRSAConfig | undefined;
  ecdsa?: WebKeyECDSAConfig | undefined;
  ed25519?: WebKeyED25519Config | undefined;
}

function createBaseGetWebKey(): GetWebKey {
  return { details: undefined, config: undefined, state: 0 };
}

export const GetWebKey: MessageFns<GetWebKey> = {
  encode(message: GetWebKey, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      Details.encode(message.details, writer.uint32(10).fork()).join();
    }
    if (message.config !== undefined) {
      WebKey.encode(message.config, writer.uint32(18).fork()).join();
    }
    if (message.state !== 0) {
      writer.uint32(24).int32(message.state);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetWebKey {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetWebKey();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = Details.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.config = WebKey.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetWebKey {
    return {
      details: isSet(object.details) ? Details.fromJSON(object.details) : undefined,
      config: isSet(object.config) ? WebKey.fromJSON(object.config) : undefined,
      state: isSet(object.state) ? webKeyStateFromJSON(object.state) : 0,
    };
  },

  toJSON(message: GetWebKey): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = Details.toJSON(message.details);
    }
    if (message.config !== undefined) {
      obj.config = WebKey.toJSON(message.config);
    }
    if (message.state !== 0) {
      obj.state = webKeyStateToJSON(message.state);
    }
    return obj;
  },

  create(base?: DeepPartial<GetWebKey>): GetWebKey {
    return GetWebKey.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetWebKey>): GetWebKey {
    const message = createBaseGetWebKey();
    message.details = (object.details !== undefined && object.details !== null)
      ? Details.fromPartial(object.details)
      : undefined;
    message.config = (object.config !== undefined && object.config !== null)
      ? WebKey.fromPartial(object.config)
      : undefined;
    message.state = object.state ?? 0;
    return message;
  },
};

function createBaseWebKey(): WebKey {
  return { rsa: undefined, ecdsa: undefined, ed25519: undefined };
}

export const WebKey: MessageFns<WebKey> = {
  encode(message: WebKey, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.rsa !== undefined) {
      WebKeyRSAConfig.encode(message.rsa, writer.uint32(50).fork()).join();
    }
    if (message.ecdsa !== undefined) {
      WebKeyECDSAConfig.encode(message.ecdsa, writer.uint32(58).fork()).join();
    }
    if (message.ed25519 !== undefined) {
      WebKeyED25519Config.encode(message.ed25519, writer.uint32(66).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebKey {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebKey();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 6:
          if (tag !== 50) {
            break;
          }

          message.rsa = WebKeyRSAConfig.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.ecdsa = WebKeyECDSAConfig.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.ed25519 = WebKeyED25519Config.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebKey {
    return {
      rsa: isSet(object.rsa) ? WebKeyRSAConfig.fromJSON(object.rsa) : undefined,
      ecdsa: isSet(object.ecdsa) ? WebKeyECDSAConfig.fromJSON(object.ecdsa) : undefined,
      ed25519: isSet(object.ed25519) ? WebKeyED25519Config.fromJSON(object.ed25519) : undefined,
    };
  },

  toJSON(message: WebKey): unknown {
    const obj: any = {};
    if (message.rsa !== undefined) {
      obj.rsa = WebKeyRSAConfig.toJSON(message.rsa);
    }
    if (message.ecdsa !== undefined) {
      obj.ecdsa = WebKeyECDSAConfig.toJSON(message.ecdsa);
    }
    if (message.ed25519 !== undefined) {
      obj.ed25519 = WebKeyED25519Config.toJSON(message.ed25519);
    }
    return obj;
  },

  create(base?: DeepPartial<WebKey>): WebKey {
    return WebKey.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<WebKey>): WebKey {
    const message = createBaseWebKey();
    message.rsa = (object.rsa !== undefined && object.rsa !== null)
      ? WebKeyRSAConfig.fromPartial(object.rsa)
      : undefined;
    message.ecdsa = (object.ecdsa !== undefined && object.ecdsa !== null)
      ? WebKeyECDSAConfig.fromPartial(object.ecdsa)
      : undefined;
    message.ed25519 = (object.ed25519 !== undefined && object.ed25519 !== null)
      ? WebKeyED25519Config.fromPartial(object.ed25519)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
