// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: zitadel/settings/v2beta/password_settings.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { ResourceOwnerType, resourceOwnerTypeFromJSON, resourceOwnerTypeToJSON } from "./settings.js";

export const protobufPackage = "zitadel.settings.v2beta";

export interface PasswordComplexitySettings {
  minLength: Long;
  requiresUppercase: boolean;
  requiresLowercase: boolean;
  requiresNumber: boolean;
  requiresSymbol: boolean;
  /** resource_owner_type returns if the settings is managed on the organization or on the instance */
  resourceOwnerType: ResourceOwnerType;
}

export interface PasswordExpirySettings {
  /** Amount of days after which a password will expire. The user will be forced to change the password on the following authentication. */
  maxAgeDays: Long;
  /** Amount of days after which the user should be notified of the upcoming expiry. ZITADEL will not notify the user. */
  expireWarnDays: Long;
  /** resource_owner_type returns if the settings is managed on the organization or on the instance */
  resourceOwnerType: ResourceOwnerType;
}

function createBasePasswordComplexitySettings(): PasswordComplexitySettings {
  return {
    minLength: Long.UZERO,
    requiresUppercase: false,
    requiresLowercase: false,
    requiresNumber: false,
    requiresSymbol: false,
    resourceOwnerType: 0,
  };
}

export const PasswordComplexitySettings: MessageFns<PasswordComplexitySettings> = {
  encode(message: PasswordComplexitySettings, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.minLength.equals(Long.UZERO)) {
      writer.uint32(8).uint64(message.minLength.toString());
    }
    if (message.requiresUppercase !== false) {
      writer.uint32(16).bool(message.requiresUppercase);
    }
    if (message.requiresLowercase !== false) {
      writer.uint32(24).bool(message.requiresLowercase);
    }
    if (message.requiresNumber !== false) {
      writer.uint32(32).bool(message.requiresNumber);
    }
    if (message.requiresSymbol !== false) {
      writer.uint32(40).bool(message.requiresSymbol);
    }
    if (message.resourceOwnerType !== 0) {
      writer.uint32(48).int32(message.resourceOwnerType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PasswordComplexitySettings {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePasswordComplexitySettings();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.minLength = Long.fromString(reader.uint64().toString(), true);
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.requiresUppercase = reader.bool();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.requiresLowercase = reader.bool();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.requiresNumber = reader.bool();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.requiresSymbol = reader.bool();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.resourceOwnerType = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PasswordComplexitySettings {
    return {
      minLength: isSet(object.minLength) ? Long.fromValue(object.minLength) : Long.UZERO,
      requiresUppercase: isSet(object.requiresUppercase) ? globalThis.Boolean(object.requiresUppercase) : false,
      requiresLowercase: isSet(object.requiresLowercase) ? globalThis.Boolean(object.requiresLowercase) : false,
      requiresNumber: isSet(object.requiresNumber) ? globalThis.Boolean(object.requiresNumber) : false,
      requiresSymbol: isSet(object.requiresSymbol) ? globalThis.Boolean(object.requiresSymbol) : false,
      resourceOwnerType: isSet(object.resourceOwnerType) ? resourceOwnerTypeFromJSON(object.resourceOwnerType) : 0,
    };
  },

  toJSON(message: PasswordComplexitySettings): unknown {
    const obj: any = {};
    if (!message.minLength.equals(Long.UZERO)) {
      obj.minLength = (message.minLength || Long.UZERO).toString();
    }
    if (message.requiresUppercase !== false) {
      obj.requiresUppercase = message.requiresUppercase;
    }
    if (message.requiresLowercase !== false) {
      obj.requiresLowercase = message.requiresLowercase;
    }
    if (message.requiresNumber !== false) {
      obj.requiresNumber = message.requiresNumber;
    }
    if (message.requiresSymbol !== false) {
      obj.requiresSymbol = message.requiresSymbol;
    }
    if (message.resourceOwnerType !== 0) {
      obj.resourceOwnerType = resourceOwnerTypeToJSON(message.resourceOwnerType);
    }
    return obj;
  },

  create(base?: DeepPartial<PasswordComplexitySettings>): PasswordComplexitySettings {
    return PasswordComplexitySettings.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PasswordComplexitySettings>): PasswordComplexitySettings {
    const message = createBasePasswordComplexitySettings();
    message.minLength = (object.minLength !== undefined && object.minLength !== null)
      ? Long.fromValue(object.minLength)
      : Long.UZERO;
    message.requiresUppercase = object.requiresUppercase ?? false;
    message.requiresLowercase = object.requiresLowercase ?? false;
    message.requiresNumber = object.requiresNumber ?? false;
    message.requiresSymbol = object.requiresSymbol ?? false;
    message.resourceOwnerType = object.resourceOwnerType ?? 0;
    return message;
  },
};

function createBasePasswordExpirySettings(): PasswordExpirySettings {
  return { maxAgeDays: Long.UZERO, expireWarnDays: Long.UZERO, resourceOwnerType: 0 };
}

export const PasswordExpirySettings: MessageFns<PasswordExpirySettings> = {
  encode(message: PasswordExpirySettings, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.maxAgeDays.equals(Long.UZERO)) {
      writer.uint32(8).uint64(message.maxAgeDays.toString());
    }
    if (!message.expireWarnDays.equals(Long.UZERO)) {
      writer.uint32(16).uint64(message.expireWarnDays.toString());
    }
    if (message.resourceOwnerType !== 0) {
      writer.uint32(24).int32(message.resourceOwnerType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PasswordExpirySettings {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePasswordExpirySettings();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.maxAgeDays = Long.fromString(reader.uint64().toString(), true);
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.expireWarnDays = Long.fromString(reader.uint64().toString(), true);
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.resourceOwnerType = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PasswordExpirySettings {
    return {
      maxAgeDays: isSet(object.maxAgeDays) ? Long.fromValue(object.maxAgeDays) : Long.UZERO,
      expireWarnDays: isSet(object.expireWarnDays) ? Long.fromValue(object.expireWarnDays) : Long.UZERO,
      resourceOwnerType: isSet(object.resourceOwnerType) ? resourceOwnerTypeFromJSON(object.resourceOwnerType) : 0,
    };
  },

  toJSON(message: PasswordExpirySettings): unknown {
    const obj: any = {};
    if (!message.maxAgeDays.equals(Long.UZERO)) {
      obj.maxAgeDays = (message.maxAgeDays || Long.UZERO).toString();
    }
    if (!message.expireWarnDays.equals(Long.UZERO)) {
      obj.expireWarnDays = (message.expireWarnDays || Long.UZERO).toString();
    }
    if (message.resourceOwnerType !== 0) {
      obj.resourceOwnerType = resourceOwnerTypeToJSON(message.resourceOwnerType);
    }
    return obj;
  },

  create(base?: DeepPartial<PasswordExpirySettings>): PasswordExpirySettings {
    return PasswordExpirySettings.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PasswordExpirySettings>): PasswordExpirySettings {
    const message = createBasePasswordExpirySettings();
    message.maxAgeDays = (object.maxAgeDays !== undefined && object.maxAgeDays !== null)
      ? Long.fromValue(object.maxAgeDays)
      : Long.UZERO;
    message.expireWarnDays = (object.expireWarnDays !== undefined && object.expireWarnDays !== null)
      ? Long.fromValue(object.expireWarnDays)
      : Long.UZERO;
    message.resourceOwnerType = object.resourceOwnerType ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
