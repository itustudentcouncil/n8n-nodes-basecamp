// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: zitadel/object/v3alpha/object.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "zitadel.object.v3alpha";

export enum OwnerType {
  OWNER_TYPE_UNSPECIFIED = 0,
  OWNER_TYPE_SYSTEM = 1,
  OWNER_TYPE_INSTANCE = 2,
  OWNER_TYPE_ORG = 3,
  UNRECOGNIZED = -1,
}

export function ownerTypeFromJSON(object: any): OwnerType {
  switch (object) {
    case 0:
    case "OWNER_TYPE_UNSPECIFIED":
      return OwnerType.OWNER_TYPE_UNSPECIFIED;
    case 1:
    case "OWNER_TYPE_SYSTEM":
      return OwnerType.OWNER_TYPE_SYSTEM;
    case 2:
    case "OWNER_TYPE_INSTANCE":
      return OwnerType.OWNER_TYPE_INSTANCE;
    case 3:
    case "OWNER_TYPE_ORG":
      return OwnerType.OWNER_TYPE_ORG;
    case -1:
    case "UNRECOGNIZED":
    default:
      return OwnerType.UNRECOGNIZED;
  }
}

export function ownerTypeToJSON(object: OwnerType): string {
  switch (object) {
    case OwnerType.OWNER_TYPE_UNSPECIFIED:
      return "OWNER_TYPE_UNSPECIFIED";
    case OwnerType.OWNER_TYPE_SYSTEM:
      return "OWNER_TYPE_SYSTEM";
    case OwnerType.OWNER_TYPE_INSTANCE:
      return "OWNER_TYPE_INSTANCE";
    case OwnerType.OWNER_TYPE_ORG:
      return "OWNER_TYPE_ORG";
    case OwnerType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Owner {
  type: OwnerType;
  id: string;
}

export interface Instance {
  id?: string | undefined;
  domain?: string | undefined;
}

export interface Organization {
  orgId?: string | undefined;
  orgDomain?: string | undefined;
}

function createBaseOwner(): Owner {
  return { type: 0, id: "" };
}

export const Owner: MessageFns<Owner> = {
  encode(message: Owner, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    if (message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Owner {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOwner();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Owner {
    return {
      type: isSet(object.type) ? ownerTypeFromJSON(object.type) : 0,
      id: isSet(object.id) ? globalThis.String(object.id) : "",
    };
  },

  toJSON(message: Owner): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = ownerTypeToJSON(message.type);
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<Owner>): Owner {
    return Owner.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Owner>): Owner {
    const message = createBaseOwner();
    message.type = object.type ?? 0;
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseInstance(): Instance {
  return { id: undefined, domain: undefined };
}

export const Instance: MessageFns<Instance> = {
  encode(message: Instance, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      writer.uint32(10).string(message.id);
    }
    if (message.domain !== undefined) {
      writer.uint32(18).string(message.domain);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Instance {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInstance();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.domain = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Instance {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : undefined,
      domain: isSet(object.domain) ? globalThis.String(object.domain) : undefined,
    };
  },

  toJSON(message: Instance): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = message.id;
    }
    if (message.domain !== undefined) {
      obj.domain = message.domain;
    }
    return obj;
  },

  create(base?: DeepPartial<Instance>): Instance {
    return Instance.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Instance>): Instance {
    const message = createBaseInstance();
    message.id = object.id ?? undefined;
    message.domain = object.domain ?? undefined;
    return message;
  },
};

function createBaseOrganization(): Organization {
  return { orgId: undefined, orgDomain: undefined };
}

export const Organization: MessageFns<Organization> = {
  encode(message: Organization, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.orgId !== undefined) {
      writer.uint32(10).string(message.orgId);
    }
    if (message.orgDomain !== undefined) {
      writer.uint32(18).string(message.orgDomain);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Organization {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOrganization();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.orgId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.orgDomain = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Organization {
    return {
      orgId: isSet(object.orgId) ? globalThis.String(object.orgId) : undefined,
      orgDomain: isSet(object.orgDomain) ? globalThis.String(object.orgDomain) : undefined,
    };
  },

  toJSON(message: Organization): unknown {
    const obj: any = {};
    if (message.orgId !== undefined) {
      obj.orgId = message.orgId;
    }
    if (message.orgDomain !== undefined) {
      obj.orgDomain = message.orgDomain;
    }
    return obj;
  },

  create(base?: DeepPartial<Organization>): Organization {
    return Organization.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Organization>): Organization {
    const message = createBaseOrganization();
    message.orgId = object.orgId ?? undefined;
    message.orgDomain = object.orgDomain ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
