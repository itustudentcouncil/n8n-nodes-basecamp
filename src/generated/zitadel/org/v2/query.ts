// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: zitadel/org/v2/query.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { TextQueryMethod, textQueryMethodFromJSON, textQueryMethodToJSON } from "../../object/v2/object.js";
import { OrganizationState, organizationStateFromJSON, organizationStateToJSON } from "./org.js";

export const protobufPackage = "zitadel.org.v2";

export enum OrganizationFieldName {
  ORGANIZATION_FIELD_NAME_UNSPECIFIED = 0,
  ORGANIZATION_FIELD_NAME_NAME = 1,
  UNRECOGNIZED = -1,
}

export function organizationFieldNameFromJSON(object: any): OrganizationFieldName {
  switch (object) {
    case 0:
    case "ORGANIZATION_FIELD_NAME_UNSPECIFIED":
      return OrganizationFieldName.ORGANIZATION_FIELD_NAME_UNSPECIFIED;
    case 1:
    case "ORGANIZATION_FIELD_NAME_NAME":
      return OrganizationFieldName.ORGANIZATION_FIELD_NAME_NAME;
    case -1:
    case "UNRECOGNIZED":
    default:
      return OrganizationFieldName.UNRECOGNIZED;
  }
}

export function organizationFieldNameToJSON(object: OrganizationFieldName): string {
  switch (object) {
    case OrganizationFieldName.ORGANIZATION_FIELD_NAME_UNSPECIFIED:
      return "ORGANIZATION_FIELD_NAME_UNSPECIFIED";
    case OrganizationFieldName.ORGANIZATION_FIELD_NAME_NAME:
      return "ORGANIZATION_FIELD_NAME_NAME";
    case OrganizationFieldName.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface SearchQuery {
  nameQuery?: OrganizationNameQuery | undefined;
  domainQuery?: OrganizationDomainQuery | undefined;
  stateQuery?: OrganizationStateQuery | undefined;
  idQuery?: OrganizationIDQuery | undefined;
}

export interface OrganizationNameQuery {
  /** Name of the organization. */
  name: string;
  /** Defines which text equality method is used. */
  method: TextQueryMethod;
}

export interface OrganizationDomainQuery {
  /** Domain used in organization, not necessary primary domain. */
  domain: string;
  /** Defines which text equality method is used. */
  method: TextQueryMethod;
}

export interface OrganizationStateQuery {
  /** Current state of the organization. */
  state: OrganizationState;
}

export interface OrganizationIDQuery {
  /** Unique identifier of the organization. */
  id: string;
}

function createBaseSearchQuery(): SearchQuery {
  return { nameQuery: undefined, domainQuery: undefined, stateQuery: undefined, idQuery: undefined };
}

export const SearchQuery: MessageFns<SearchQuery> = {
  encode(message: SearchQuery, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.nameQuery !== undefined) {
      OrganizationNameQuery.encode(message.nameQuery, writer.uint32(10).fork()).join();
    }
    if (message.domainQuery !== undefined) {
      OrganizationDomainQuery.encode(message.domainQuery, writer.uint32(18).fork()).join();
    }
    if (message.stateQuery !== undefined) {
      OrganizationStateQuery.encode(message.stateQuery, writer.uint32(26).fork()).join();
    }
    if (message.idQuery !== undefined) {
      OrganizationIDQuery.encode(message.idQuery, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchQuery {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchQuery();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.nameQuery = OrganizationNameQuery.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.domainQuery = OrganizationDomainQuery.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.stateQuery = OrganizationStateQuery.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.idQuery = OrganizationIDQuery.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchQuery {
    return {
      nameQuery: isSet(object.nameQuery) ? OrganizationNameQuery.fromJSON(object.nameQuery) : undefined,
      domainQuery: isSet(object.domainQuery) ? OrganizationDomainQuery.fromJSON(object.domainQuery) : undefined,
      stateQuery: isSet(object.stateQuery) ? OrganizationStateQuery.fromJSON(object.stateQuery) : undefined,
      idQuery: isSet(object.idQuery) ? OrganizationIDQuery.fromJSON(object.idQuery) : undefined,
    };
  },

  toJSON(message: SearchQuery): unknown {
    const obj: any = {};
    if (message.nameQuery !== undefined) {
      obj.nameQuery = OrganizationNameQuery.toJSON(message.nameQuery);
    }
    if (message.domainQuery !== undefined) {
      obj.domainQuery = OrganizationDomainQuery.toJSON(message.domainQuery);
    }
    if (message.stateQuery !== undefined) {
      obj.stateQuery = OrganizationStateQuery.toJSON(message.stateQuery);
    }
    if (message.idQuery !== undefined) {
      obj.idQuery = OrganizationIDQuery.toJSON(message.idQuery);
    }
    return obj;
  },

  create(base?: DeepPartial<SearchQuery>): SearchQuery {
    return SearchQuery.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SearchQuery>): SearchQuery {
    const message = createBaseSearchQuery();
    message.nameQuery = (object.nameQuery !== undefined && object.nameQuery !== null)
      ? OrganizationNameQuery.fromPartial(object.nameQuery)
      : undefined;
    message.domainQuery = (object.domainQuery !== undefined && object.domainQuery !== null)
      ? OrganizationDomainQuery.fromPartial(object.domainQuery)
      : undefined;
    message.stateQuery = (object.stateQuery !== undefined && object.stateQuery !== null)
      ? OrganizationStateQuery.fromPartial(object.stateQuery)
      : undefined;
    message.idQuery = (object.idQuery !== undefined && object.idQuery !== null)
      ? OrganizationIDQuery.fromPartial(object.idQuery)
      : undefined;
    return message;
  },
};

function createBaseOrganizationNameQuery(): OrganizationNameQuery {
  return { name: "", method: 0 };
}

export const OrganizationNameQuery: MessageFns<OrganizationNameQuery> = {
  encode(message: OrganizationNameQuery, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.method !== 0) {
      writer.uint32(16).int32(message.method);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OrganizationNameQuery {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOrganizationNameQuery();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.method = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OrganizationNameQuery {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      method: isSet(object.method) ? textQueryMethodFromJSON(object.method) : 0,
    };
  },

  toJSON(message: OrganizationNameQuery): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.method !== 0) {
      obj.method = textQueryMethodToJSON(message.method);
    }
    return obj;
  },

  create(base?: DeepPartial<OrganizationNameQuery>): OrganizationNameQuery {
    return OrganizationNameQuery.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<OrganizationNameQuery>): OrganizationNameQuery {
    const message = createBaseOrganizationNameQuery();
    message.name = object.name ?? "";
    message.method = object.method ?? 0;
    return message;
  },
};

function createBaseOrganizationDomainQuery(): OrganizationDomainQuery {
  return { domain: "", method: 0 };
}

export const OrganizationDomainQuery: MessageFns<OrganizationDomainQuery> = {
  encode(message: OrganizationDomainQuery, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.domain !== "") {
      writer.uint32(10).string(message.domain);
    }
    if (message.method !== 0) {
      writer.uint32(16).int32(message.method);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OrganizationDomainQuery {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOrganizationDomainQuery();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.domain = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.method = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OrganizationDomainQuery {
    return {
      domain: isSet(object.domain) ? globalThis.String(object.domain) : "",
      method: isSet(object.method) ? textQueryMethodFromJSON(object.method) : 0,
    };
  },

  toJSON(message: OrganizationDomainQuery): unknown {
    const obj: any = {};
    if (message.domain !== "") {
      obj.domain = message.domain;
    }
    if (message.method !== 0) {
      obj.method = textQueryMethodToJSON(message.method);
    }
    return obj;
  },

  create(base?: DeepPartial<OrganizationDomainQuery>): OrganizationDomainQuery {
    return OrganizationDomainQuery.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<OrganizationDomainQuery>): OrganizationDomainQuery {
    const message = createBaseOrganizationDomainQuery();
    message.domain = object.domain ?? "";
    message.method = object.method ?? 0;
    return message;
  },
};

function createBaseOrganizationStateQuery(): OrganizationStateQuery {
  return { state: 0 };
}

export const OrganizationStateQuery: MessageFns<OrganizationStateQuery> = {
  encode(message: OrganizationStateQuery, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.state !== 0) {
      writer.uint32(8).int32(message.state);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OrganizationStateQuery {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOrganizationStateQuery();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OrganizationStateQuery {
    return { state: isSet(object.state) ? organizationStateFromJSON(object.state) : 0 };
  },

  toJSON(message: OrganizationStateQuery): unknown {
    const obj: any = {};
    if (message.state !== 0) {
      obj.state = organizationStateToJSON(message.state);
    }
    return obj;
  },

  create(base?: DeepPartial<OrganizationStateQuery>): OrganizationStateQuery {
    return OrganizationStateQuery.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<OrganizationStateQuery>): OrganizationStateQuery {
    const message = createBaseOrganizationStateQuery();
    message.state = object.state ?? 0;
    return message;
  },
};

function createBaseOrganizationIDQuery(): OrganizationIDQuery {
  return { id: "" };
}

export const OrganizationIDQuery: MessageFns<OrganizationIDQuery> = {
  encode(message: OrganizationIDQuery, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OrganizationIDQuery {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOrganizationIDQuery();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OrganizationIDQuery {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: OrganizationIDQuery): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<OrganizationIDQuery>): OrganizationIDQuery {
    return OrganizationIDQuery.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<OrganizationIDQuery>): OrganizationIDQuery {
    const message = createBaseOrganizationIDQuery();
    message.id = object.id ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
