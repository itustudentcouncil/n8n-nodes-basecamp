// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: zitadel/object.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../google/protobuf/timestamp.js";

export const protobufPackage = "zitadel.v1";

export enum TextQueryMethod {
  TEXT_QUERY_METHOD_EQUALS = 0,
  TEXT_QUERY_METHOD_EQUALS_IGNORE_CASE = 1,
  TEXT_QUERY_METHOD_STARTS_WITH = 2,
  TEXT_QUERY_METHOD_STARTS_WITH_IGNORE_CASE = 3,
  TEXT_QUERY_METHOD_CONTAINS = 4,
  TEXT_QUERY_METHOD_CONTAINS_IGNORE_CASE = 5,
  TEXT_QUERY_METHOD_ENDS_WITH = 6,
  TEXT_QUERY_METHOD_ENDS_WITH_IGNORE_CASE = 7,
  UNRECOGNIZED = -1,
}

export function textQueryMethodFromJSON(object: any): TextQueryMethod {
  switch (object) {
    case 0:
    case "TEXT_QUERY_METHOD_EQUALS":
      return TextQueryMethod.TEXT_QUERY_METHOD_EQUALS;
    case 1:
    case "TEXT_QUERY_METHOD_EQUALS_IGNORE_CASE":
      return TextQueryMethod.TEXT_QUERY_METHOD_EQUALS_IGNORE_CASE;
    case 2:
    case "TEXT_QUERY_METHOD_STARTS_WITH":
      return TextQueryMethod.TEXT_QUERY_METHOD_STARTS_WITH;
    case 3:
    case "TEXT_QUERY_METHOD_STARTS_WITH_IGNORE_CASE":
      return TextQueryMethod.TEXT_QUERY_METHOD_STARTS_WITH_IGNORE_CASE;
    case 4:
    case "TEXT_QUERY_METHOD_CONTAINS":
      return TextQueryMethod.TEXT_QUERY_METHOD_CONTAINS;
    case 5:
    case "TEXT_QUERY_METHOD_CONTAINS_IGNORE_CASE":
      return TextQueryMethod.TEXT_QUERY_METHOD_CONTAINS_IGNORE_CASE;
    case 6:
    case "TEXT_QUERY_METHOD_ENDS_WITH":
      return TextQueryMethod.TEXT_QUERY_METHOD_ENDS_WITH;
    case 7:
    case "TEXT_QUERY_METHOD_ENDS_WITH_IGNORE_CASE":
      return TextQueryMethod.TEXT_QUERY_METHOD_ENDS_WITH_IGNORE_CASE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return TextQueryMethod.UNRECOGNIZED;
  }
}

export function textQueryMethodToJSON(object: TextQueryMethod): string {
  switch (object) {
    case TextQueryMethod.TEXT_QUERY_METHOD_EQUALS:
      return "TEXT_QUERY_METHOD_EQUALS";
    case TextQueryMethod.TEXT_QUERY_METHOD_EQUALS_IGNORE_CASE:
      return "TEXT_QUERY_METHOD_EQUALS_IGNORE_CASE";
    case TextQueryMethod.TEXT_QUERY_METHOD_STARTS_WITH:
      return "TEXT_QUERY_METHOD_STARTS_WITH";
    case TextQueryMethod.TEXT_QUERY_METHOD_STARTS_WITH_IGNORE_CASE:
      return "TEXT_QUERY_METHOD_STARTS_WITH_IGNORE_CASE";
    case TextQueryMethod.TEXT_QUERY_METHOD_CONTAINS:
      return "TEXT_QUERY_METHOD_CONTAINS";
    case TextQueryMethod.TEXT_QUERY_METHOD_CONTAINS_IGNORE_CASE:
      return "TEXT_QUERY_METHOD_CONTAINS_IGNORE_CASE";
    case TextQueryMethod.TEXT_QUERY_METHOD_ENDS_WITH:
      return "TEXT_QUERY_METHOD_ENDS_WITH";
    case TextQueryMethod.TEXT_QUERY_METHOD_ENDS_WITH_IGNORE_CASE:
      return "TEXT_QUERY_METHOD_ENDS_WITH_IGNORE_CASE";
    case TextQueryMethod.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum ListQueryMethod {
  LIST_QUERY_METHOD_IN = 0,
  UNRECOGNIZED = -1,
}

export function listQueryMethodFromJSON(object: any): ListQueryMethod {
  switch (object) {
    case 0:
    case "LIST_QUERY_METHOD_IN":
      return ListQueryMethod.LIST_QUERY_METHOD_IN;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ListQueryMethod.UNRECOGNIZED;
  }
}

export function listQueryMethodToJSON(object: ListQueryMethod): string {
  switch (object) {
    case ListQueryMethod.LIST_QUERY_METHOD_IN:
      return "LIST_QUERY_METHOD_IN";
    case ListQueryMethod.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum TimestampQueryMethod {
  TIMESTAMP_QUERY_METHOD_EQUALS = 0,
  TIMESTAMP_QUERY_METHOD_GREATER = 1,
  TIMESTAMP_QUERY_METHOD_GREATER_OR_EQUALS = 2,
  TIMESTAMP_QUERY_METHOD_LESS = 3,
  TIMESTAMP_QUERY_METHOD_LESS_OR_EQUALS = 4,
  UNRECOGNIZED = -1,
}

export function timestampQueryMethodFromJSON(object: any): TimestampQueryMethod {
  switch (object) {
    case 0:
    case "TIMESTAMP_QUERY_METHOD_EQUALS":
      return TimestampQueryMethod.TIMESTAMP_QUERY_METHOD_EQUALS;
    case 1:
    case "TIMESTAMP_QUERY_METHOD_GREATER":
      return TimestampQueryMethod.TIMESTAMP_QUERY_METHOD_GREATER;
    case 2:
    case "TIMESTAMP_QUERY_METHOD_GREATER_OR_EQUALS":
      return TimestampQueryMethod.TIMESTAMP_QUERY_METHOD_GREATER_OR_EQUALS;
    case 3:
    case "TIMESTAMP_QUERY_METHOD_LESS":
      return TimestampQueryMethod.TIMESTAMP_QUERY_METHOD_LESS;
    case 4:
    case "TIMESTAMP_QUERY_METHOD_LESS_OR_EQUALS":
      return TimestampQueryMethod.TIMESTAMP_QUERY_METHOD_LESS_OR_EQUALS;
    case -1:
    case "UNRECOGNIZED":
    default:
      return TimestampQueryMethod.UNRECOGNIZED;
  }
}

export function timestampQueryMethodToJSON(object: TimestampQueryMethod): string {
  switch (object) {
    case TimestampQueryMethod.TIMESTAMP_QUERY_METHOD_EQUALS:
      return "TIMESTAMP_QUERY_METHOD_EQUALS";
    case TimestampQueryMethod.TIMESTAMP_QUERY_METHOD_GREATER:
      return "TIMESTAMP_QUERY_METHOD_GREATER";
    case TimestampQueryMethod.TIMESTAMP_QUERY_METHOD_GREATER_OR_EQUALS:
      return "TIMESTAMP_QUERY_METHOD_GREATER_OR_EQUALS";
    case TimestampQueryMethod.TIMESTAMP_QUERY_METHOD_LESS:
      return "TIMESTAMP_QUERY_METHOD_LESS";
    case TimestampQueryMethod.TIMESTAMP_QUERY_METHOD_LESS_OR_EQUALS:
      return "TIMESTAMP_QUERY_METHOD_LESS_OR_EQUALS";
    case TimestampQueryMethod.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface ObjectDetails {
  /**
   * sequence represents the order of events. It's always counting
   *
   * on read: the sequence of the last event reduced by the projection
   *
   * on manipulation: the timestamp of the event(s) added by the manipulation
   */
  sequence: Long;
  /**
   * creation_date is the timestamp where the first operation on the object was made
   *
   * on read: the timestamp of the first event of the object
   *
   * on create: the timestamp of the event(s) added by the manipulation
   */
  creationDate:
    | Date
    | undefined;
  /**
   * change_date is the timestamp when the object was changed
   *
   * on read: the timestamp of the last event reduced by the projection
   *
   * on manipulation: the
   */
  changeDate:
    | Date
    | undefined;
  /** resource_owner is the organization an object belongs to */
  resourceOwner: string;
}

export interface ListQuery {
  offset: Long;
  limit: number;
  asc: boolean;
}

export interface ListDetails {
  totalResult: Long;
  processedSequence: Long;
  viewTimestamp: Date | undefined;
}

function createBaseObjectDetails(): ObjectDetails {
  return { sequence: Long.UZERO, creationDate: undefined, changeDate: undefined, resourceOwner: "" };
}

export const ObjectDetails: MessageFns<ObjectDetails> = {
  encode(message: ObjectDetails, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.sequence.equals(Long.UZERO)) {
      writer.uint32(8).uint64(message.sequence.toString());
    }
    if (message.creationDate !== undefined) {
      Timestamp.encode(toTimestamp(message.creationDate), writer.uint32(18).fork()).join();
    }
    if (message.changeDate !== undefined) {
      Timestamp.encode(toTimestamp(message.changeDate), writer.uint32(26).fork()).join();
    }
    if (message.resourceOwner !== "") {
      writer.uint32(34).string(message.resourceOwner);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ObjectDetails {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseObjectDetails();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.sequence = Long.fromString(reader.uint64().toString(), true);
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.creationDate = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.changeDate = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.resourceOwner = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ObjectDetails {
    return {
      sequence: isSet(object.sequence) ? Long.fromValue(object.sequence) : Long.UZERO,
      creationDate: isSet(object.creationDate) ? fromJsonTimestamp(object.creationDate) : undefined,
      changeDate: isSet(object.changeDate) ? fromJsonTimestamp(object.changeDate) : undefined,
      resourceOwner: isSet(object.resourceOwner) ? globalThis.String(object.resourceOwner) : "",
    };
  },

  toJSON(message: ObjectDetails): unknown {
    const obj: any = {};
    if (!message.sequence.equals(Long.UZERO)) {
      obj.sequence = (message.sequence || Long.UZERO).toString();
    }
    if (message.creationDate !== undefined) {
      obj.creationDate = message.creationDate.toISOString();
    }
    if (message.changeDate !== undefined) {
      obj.changeDate = message.changeDate.toISOString();
    }
    if (message.resourceOwner !== "") {
      obj.resourceOwner = message.resourceOwner;
    }
    return obj;
  },

  create(base?: DeepPartial<ObjectDetails>): ObjectDetails {
    return ObjectDetails.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ObjectDetails>): ObjectDetails {
    const message = createBaseObjectDetails();
    message.sequence = (object.sequence !== undefined && object.sequence !== null)
      ? Long.fromValue(object.sequence)
      : Long.UZERO;
    message.creationDate = object.creationDate ?? undefined;
    message.changeDate = object.changeDate ?? undefined;
    message.resourceOwner = object.resourceOwner ?? "";
    return message;
  },
};

function createBaseListQuery(): ListQuery {
  return { offset: Long.UZERO, limit: 0, asc: false };
}

export const ListQuery: MessageFns<ListQuery> = {
  encode(message: ListQuery, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.offset.equals(Long.UZERO)) {
      writer.uint32(8).uint64(message.offset.toString());
    }
    if (message.limit !== 0) {
      writer.uint32(16).uint32(message.limit);
    }
    if (message.asc !== false) {
      writer.uint32(24).bool(message.asc);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListQuery {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListQuery();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.offset = Long.fromString(reader.uint64().toString(), true);
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.limit = reader.uint32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.asc = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListQuery {
    return {
      offset: isSet(object.offset) ? Long.fromValue(object.offset) : Long.UZERO,
      limit: isSet(object.limit) ? globalThis.Number(object.limit) : 0,
      asc: isSet(object.asc) ? globalThis.Boolean(object.asc) : false,
    };
  },

  toJSON(message: ListQuery): unknown {
    const obj: any = {};
    if (!message.offset.equals(Long.UZERO)) {
      obj.offset = (message.offset || Long.UZERO).toString();
    }
    if (message.limit !== 0) {
      obj.limit = Math.round(message.limit);
    }
    if (message.asc !== false) {
      obj.asc = message.asc;
    }
    return obj;
  },

  create(base?: DeepPartial<ListQuery>): ListQuery {
    return ListQuery.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListQuery>): ListQuery {
    const message = createBaseListQuery();
    message.offset = (object.offset !== undefined && object.offset !== null)
      ? Long.fromValue(object.offset)
      : Long.UZERO;
    message.limit = object.limit ?? 0;
    message.asc = object.asc ?? false;
    return message;
  },
};

function createBaseListDetails(): ListDetails {
  return { totalResult: Long.UZERO, processedSequence: Long.UZERO, viewTimestamp: undefined };
}

export const ListDetails: MessageFns<ListDetails> = {
  encode(message: ListDetails, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.totalResult.equals(Long.UZERO)) {
      writer.uint32(8).uint64(message.totalResult.toString());
    }
    if (!message.processedSequence.equals(Long.UZERO)) {
      writer.uint32(16).uint64(message.processedSequence.toString());
    }
    if (message.viewTimestamp !== undefined) {
      Timestamp.encode(toTimestamp(message.viewTimestamp), writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListDetails {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListDetails();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.totalResult = Long.fromString(reader.uint64().toString(), true);
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.processedSequence = Long.fromString(reader.uint64().toString(), true);
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.viewTimestamp = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListDetails {
    return {
      totalResult: isSet(object.totalResult) ? Long.fromValue(object.totalResult) : Long.UZERO,
      processedSequence: isSet(object.processedSequence) ? Long.fromValue(object.processedSequence) : Long.UZERO,
      viewTimestamp: isSet(object.viewTimestamp) ? fromJsonTimestamp(object.viewTimestamp) : undefined,
    };
  },

  toJSON(message: ListDetails): unknown {
    const obj: any = {};
    if (!message.totalResult.equals(Long.UZERO)) {
      obj.totalResult = (message.totalResult || Long.UZERO).toString();
    }
    if (!message.processedSequence.equals(Long.UZERO)) {
      obj.processedSequence = (message.processedSequence || Long.UZERO).toString();
    }
    if (message.viewTimestamp !== undefined) {
      obj.viewTimestamp = message.viewTimestamp.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<ListDetails>): ListDetails {
    return ListDetails.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListDetails>): ListDetails {
    const message = createBaseListDetails();
    message.totalResult = (object.totalResult !== undefined && object.totalResult !== null)
      ? Long.fromValue(object.totalResult)
      : Long.UZERO;
    message.processedSequence = (object.processedSequence !== undefined && object.processedSequence !== null)
      ? Long.fromValue(object.processedSequence)
      : Long.UZERO;
    message.viewTimestamp = object.viewTimestamp ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
