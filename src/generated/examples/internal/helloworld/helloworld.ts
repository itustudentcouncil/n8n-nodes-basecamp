// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: examples/internal/helloworld/helloworld.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import {
  BoolValue,
  BytesValue,
  DoubleValue,
  FloatValue,
  Int32Value,
  Int64Value,
  StringValue,
  UInt32Value,
  UInt64Value,
} from "../../../google/protobuf/wrappers.js";

export const protobufPackage = "grpc.gateway.examples.internal.helloworld";

export interface HelloRequest {
  name: string;
  strVal: string | undefined;
  floatVal: number | undefined;
  doubleVal: number | undefined;
  boolVal: boolean | undefined;
  bytesVal: Buffer | undefined;
  int32Val: number | undefined;
  uint32Val: number | undefined;
  int64Val: Long | undefined;
  uint64Val: Long | undefined;
}

export interface HelloReply {
  message: string;
}

function createBaseHelloRequest(): HelloRequest {
  return {
    name: "",
    strVal: undefined,
    floatVal: undefined,
    doubleVal: undefined,
    boolVal: undefined,
    bytesVal: undefined,
    int32Val: undefined,
    uint32Val: undefined,
    int64Val: undefined,
    uint64Val: undefined,
  };
}

export const HelloRequest: MessageFns<HelloRequest> = {
  encode(message: HelloRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.strVal !== undefined) {
      StringValue.encode({ value: message.strVal! }, writer.uint32(18).fork()).join();
    }
    if (message.floatVal !== undefined) {
      FloatValue.encode({ value: message.floatVal! }, writer.uint32(26).fork()).join();
    }
    if (message.doubleVal !== undefined) {
      DoubleValue.encode({ value: message.doubleVal! }, writer.uint32(34).fork()).join();
    }
    if (message.boolVal !== undefined) {
      BoolValue.encode({ value: message.boolVal! }, writer.uint32(42).fork()).join();
    }
    if (message.bytesVal !== undefined) {
      BytesValue.encode({ value: message.bytesVal! }, writer.uint32(50).fork()).join();
    }
    if (message.int32Val !== undefined) {
      Int32Value.encode({ value: message.int32Val! }, writer.uint32(58).fork()).join();
    }
    if (message.uint32Val !== undefined) {
      UInt32Value.encode({ value: message.uint32Val! }, writer.uint32(66).fork()).join();
    }
    if (message.int64Val !== undefined) {
      Int64Value.encode({ value: message.int64Val! }, writer.uint32(74).fork()).join();
    }
    if (message.uint64Val !== undefined) {
      UInt64Value.encode({ value: message.uint64Val! }, writer.uint32(82).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HelloRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHelloRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.strVal = StringValue.decode(reader, reader.uint32()).value;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.floatVal = FloatValue.decode(reader, reader.uint32()).value;
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.doubleVal = DoubleValue.decode(reader, reader.uint32()).value;
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.boolVal = BoolValue.decode(reader, reader.uint32()).value;
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.bytesVal = BytesValue.decode(reader, reader.uint32()).value;
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.int32Val = Int32Value.decode(reader, reader.uint32()).value;
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.uint32Val = UInt32Value.decode(reader, reader.uint32()).value;
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.int64Val = Int64Value.decode(reader, reader.uint32()).value;
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.uint64Val = UInt64Value.decode(reader, reader.uint32()).value;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HelloRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      strVal: isSet(object.strVal) ? String(object.strVal) : undefined,
      floatVal: isSet(object.floatVal) ? Number(object.floatVal) : undefined,
      doubleVal: isSet(object.doubleVal) ? Number(object.doubleVal) : undefined,
      boolVal: isSet(object.boolVal) ? Boolean(object.boolVal) : undefined,
      bytesVal: isSet(object.bytesVal) ? new Buffer(object.bytesVal) : undefined,
      int32Val: isSet(object.int32Val) ? Number(object.int32Val) : undefined,
      uint32Val: isSet(object.uint32Val) ? Number(object.uint32Val) : undefined,
      int64Val: isSet(object.int64Val) ? Long.fromValue(object.int64Val) : undefined,
      uint64Val: isSet(object.uint64Val) ? Long.fromValue(object.uint64Val) : undefined,
    };
  },

  toJSON(message: HelloRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.strVal !== undefined) {
      obj.strVal = message.strVal;
    }
    if (message.floatVal !== undefined) {
      obj.floatVal = message.floatVal;
    }
    if (message.doubleVal !== undefined) {
      obj.doubleVal = message.doubleVal;
    }
    if (message.boolVal !== undefined) {
      obj.boolVal = message.boolVal;
    }
    if (message.bytesVal !== undefined) {
      obj.bytesVal = message.bytesVal;
    }
    if (message.int32Val !== undefined) {
      obj.int32Val = message.int32Val;
    }
    if (message.uint32Val !== undefined) {
      obj.uint32Val = message.uint32Val;
    }
    if (message.int64Val !== undefined) {
      obj.int64Val = message.int64Val;
    }
    if (message.uint64Val !== undefined) {
      obj.uint64Val = message.uint64Val;
    }
    return obj;
  },

  create(base?: DeepPartial<HelloRequest>): HelloRequest {
    return HelloRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<HelloRequest>): HelloRequest {
    const message = createBaseHelloRequest();
    message.name = object.name ?? "";
    message.strVal = object.strVal ?? undefined;
    message.floatVal = object.floatVal ?? undefined;
    message.doubleVal = object.doubleVal ?? undefined;
    message.boolVal = object.boolVal ?? undefined;
    message.bytesVal = object.bytesVal ?? undefined;
    message.int32Val = object.int32Val ?? undefined;
    message.uint32Val = object.uint32Val ?? undefined;
    message.int64Val = (object.int64Val !== undefined && object.int64Val !== null)
      ? Long.fromValue(object.int64Val)
      : undefined;
    message.uint64Val = (object.uint64Val !== undefined && object.uint64Val !== null)
      ? Long.fromValue(object.uint64Val)
      : undefined;
    return message;
  },
};

function createBaseHelloReply(): HelloReply {
  return { message: "" };
}

export const HelloReply: MessageFns<HelloReply> = {
  encode(message: HelloReply, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HelloReply {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHelloReply();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HelloReply {
    return { message: isSet(object.message) ? globalThis.String(object.message) : "" };
  },

  toJSON(message: HelloReply): unknown {
    const obj: any = {};
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create(base?: DeepPartial<HelloReply>): HelloReply {
    return HelloReply.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<HelloReply>): HelloReply {
    const message = createBaseHelloReply();
    message.message = object.message ?? "";
    return message;
  },
};

export type GreeterDefinition = typeof GreeterDefinition;
export const GreeterDefinition = {
  name: "Greeter",
  fullName: "grpc.gateway.examples.internal.helloworld.Greeter",
  methods: {
    sayHello: {
      name: "SayHello",
      requestType: HelloRequest,
      requestStream: false,
      responseType: HelloReply,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              137,
              2,
              90,
              22,
              18,
              20,
              47,
              115,
              97,
              121,
              47,
              115,
              116,
              114,
              118,
              97,
              108,
              47,
              123,
              115,
              116,
              114,
              86,
              97,
              108,
              125,
              90,
              26,
              18,
              24,
              47,
              115,
              97,
              121,
              47,
              102,
              108,
              111,
              97,
              116,
              118,
              97,
              108,
              47,
              123,
              102,
              108,
              111,
              97,
              116,
              86,
              97,
              108,
              125,
              90,
              28,
              18,
              26,
              47,
              115,
              97,
              121,
              47,
              100,
              111,
              117,
              98,
              108,
              101,
              118,
              97,
              108,
              47,
              123,
              100,
              111,
              117,
              98,
              108,
              101,
              86,
              97,
              108,
              125,
              90,
              24,
              18,
              22,
              47,
              115,
              97,
              121,
              47,
              98,
              111,
              111,
              108,
              118,
              97,
              108,
              47,
              123,
              98,
              111,
              111,
              108,
              86,
              97,
              108,
              125,
              90,
              26,
              18,
              24,
              47,
              115,
              97,
              121,
              47,
              98,
              121,
              116,
              101,
              115,
              118,
              97,
              108,
              47,
              123,
              98,
              121,
              116,
              101,
              115,
              86,
              97,
              108,
              125,
              90,
              26,
              18,
              24,
              47,
              115,
              97,
              121,
              47,
              105,
              110,
              116,
              51,
              50,
              118,
              97,
              108,
              47,
              123,
              105,
              110,
              116,
              51,
              50,
              86,
              97,
              108,
              125,
              90,
              28,
              18,
              26,
              47,
              115,
              97,
              121,
              47,
              117,
              105,
              110,
              116,
              51,
              50,
              118,
              97,
              108,
              47,
              123,
              117,
              105,
              110,
              116,
              51,
              50,
              86,
              97,
              108,
              125,
              90,
              26,
              18,
              24,
              47,
              115,
              97,
              121,
              47,
              105,
              110,
              116,
              54,
              52,
              118,
              97,
              108,
              47,
              123,
              105,
              110,
              116,
              54,
              52,
              86,
              97,
              108,
              125,
              90,
              28,
              18,
              26,
              47,
              115,
              97,
              121,
              47,
              117,
              105,
              110,
              116,
              54,
              52,
              118,
              97,
              108,
              47,
              123,
              117,
              105,
              110,
              116,
              54,
              52,
              86,
              97,
              108,
              125,
              18,
              11,
              47,
              115,
              97,
              121,
              47,
              123,
              110,
              97,
              109,
              101,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface GreeterServiceImplementation<CallContextExt = {}> {
  sayHello(request: HelloRequest, context: CallContext & CallContextExt): Promise<DeepPartial<HelloReply>>;
}

export interface GreeterClient<CallOptionsExt = {}> {
  sayHello(request: DeepPartial<HelloRequest>, options?: CallOptions & CallOptionsExt): Promise<HelloReply>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
