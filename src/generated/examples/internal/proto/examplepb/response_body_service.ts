// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: examples/internal/proto/examplepb/response_body_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";

export const protobufPackage = "grpc.gateway.examples.internal.proto.examplepb";

export interface ResponseBodyIn {
  data: string;
}

export interface ResponseBodyOut {
  response: ResponseBodyOut_Response | undefined;
}

export interface ResponseBodyOut_Response {
  data: string;
}

export interface RepeatedResponseBodyOut {
  response: RepeatedResponseBodyOut_Response[];
}

export interface RepeatedResponseBodyOut_Response {
  data: string;
  type: RepeatedResponseBodyOut_Response_ResponseType;
}

export enum RepeatedResponseBodyOut_Response_ResponseType {
  /** UNKNOWN - UNKNOWN */
  UNKNOWN = 0,
  /** A - A is 1 */
  A = 1,
  /** B - B is 2 */
  B = 2,
  UNRECOGNIZED = -1,
}

export function repeatedResponseBodyOut_Response_ResponseTypeFromJSON(
  object: any,
): RepeatedResponseBodyOut_Response_ResponseType {
  switch (object) {
    case 0:
    case "UNKNOWN":
      return RepeatedResponseBodyOut_Response_ResponseType.UNKNOWN;
    case 1:
    case "A":
      return RepeatedResponseBodyOut_Response_ResponseType.A;
    case 2:
    case "B":
      return RepeatedResponseBodyOut_Response_ResponseType.B;
    case -1:
    case "UNRECOGNIZED":
    default:
      return RepeatedResponseBodyOut_Response_ResponseType.UNRECOGNIZED;
  }
}

export function repeatedResponseBodyOut_Response_ResponseTypeToJSON(
  object: RepeatedResponseBodyOut_Response_ResponseType,
): string {
  switch (object) {
    case RepeatedResponseBodyOut_Response_ResponseType.UNKNOWN:
      return "UNKNOWN";
    case RepeatedResponseBodyOut_Response_ResponseType.A:
      return "A";
    case RepeatedResponseBodyOut_Response_ResponseType.B:
      return "B";
    case RepeatedResponseBodyOut_Response_ResponseType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface RepeatedResponseStrings {
  values: string[];
}

function createBaseResponseBodyIn(): ResponseBodyIn {
  return { data: "" };
}

export const ResponseBodyIn: MessageFns<ResponseBodyIn> = {
  encode(message: ResponseBodyIn, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== "") {
      writer.uint32(10).string(message.data);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResponseBodyIn {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResponseBodyIn();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.data = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResponseBodyIn {
    return { data: isSet(object.data) ? globalThis.String(object.data) : "" };
  },

  toJSON(message: ResponseBodyIn): unknown {
    const obj: any = {};
    if (message.data !== "") {
      obj.data = message.data;
    }
    return obj;
  },

  create(base?: DeepPartial<ResponseBodyIn>): ResponseBodyIn {
    return ResponseBodyIn.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ResponseBodyIn>): ResponseBodyIn {
    const message = createBaseResponseBodyIn();
    message.data = object.data ?? "";
    return message;
  },
};

function createBaseResponseBodyOut(): ResponseBodyOut {
  return { response: undefined };
}

export const ResponseBodyOut: MessageFns<ResponseBodyOut> = {
  encode(message: ResponseBodyOut, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.response !== undefined) {
      ResponseBodyOut_Response.encode(message.response, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResponseBodyOut {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResponseBodyOut();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.response = ResponseBodyOut_Response.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResponseBodyOut {
    return { response: isSet(object.response) ? ResponseBodyOut_Response.fromJSON(object.response) : undefined };
  },

  toJSON(message: ResponseBodyOut): unknown {
    const obj: any = {};
    if (message.response !== undefined) {
      obj.response = ResponseBodyOut_Response.toJSON(message.response);
    }
    return obj;
  },

  create(base?: DeepPartial<ResponseBodyOut>): ResponseBodyOut {
    return ResponseBodyOut.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ResponseBodyOut>): ResponseBodyOut {
    const message = createBaseResponseBodyOut();
    message.response = (object.response !== undefined && object.response !== null)
      ? ResponseBodyOut_Response.fromPartial(object.response)
      : undefined;
    return message;
  },
};

function createBaseResponseBodyOut_Response(): ResponseBodyOut_Response {
  return { data: "" };
}

export const ResponseBodyOut_Response: MessageFns<ResponseBodyOut_Response> = {
  encode(message: ResponseBodyOut_Response, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== "") {
      writer.uint32(10).string(message.data);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResponseBodyOut_Response {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResponseBodyOut_Response();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.data = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResponseBodyOut_Response {
    return { data: isSet(object.data) ? globalThis.String(object.data) : "" };
  },

  toJSON(message: ResponseBodyOut_Response): unknown {
    const obj: any = {};
    if (message.data !== "") {
      obj.data = message.data;
    }
    return obj;
  },

  create(base?: DeepPartial<ResponseBodyOut_Response>): ResponseBodyOut_Response {
    return ResponseBodyOut_Response.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ResponseBodyOut_Response>): ResponseBodyOut_Response {
    const message = createBaseResponseBodyOut_Response();
    message.data = object.data ?? "";
    return message;
  },
};

function createBaseRepeatedResponseBodyOut(): RepeatedResponseBodyOut {
  return { response: [] };
}

export const RepeatedResponseBodyOut: MessageFns<RepeatedResponseBodyOut> = {
  encode(message: RepeatedResponseBodyOut, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.response) {
      RepeatedResponseBodyOut_Response.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RepeatedResponseBodyOut {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRepeatedResponseBodyOut();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.response.push(RepeatedResponseBodyOut_Response.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RepeatedResponseBodyOut {
    return {
      response: globalThis.Array.isArray(object?.response)
        ? object.response.map((e: any) => RepeatedResponseBodyOut_Response.fromJSON(e))
        : [],
    };
  },

  toJSON(message: RepeatedResponseBodyOut): unknown {
    const obj: any = {};
    if (message.response?.length) {
      obj.response = message.response.map((e) => RepeatedResponseBodyOut_Response.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<RepeatedResponseBodyOut>): RepeatedResponseBodyOut {
    return RepeatedResponseBodyOut.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RepeatedResponseBodyOut>): RepeatedResponseBodyOut {
    const message = createBaseRepeatedResponseBodyOut();
    message.response = object.response?.map((e) => RepeatedResponseBodyOut_Response.fromPartial(e)) || [];
    return message;
  },
};

function createBaseRepeatedResponseBodyOut_Response(): RepeatedResponseBodyOut_Response {
  return { data: "", type: 0 };
}

export const RepeatedResponseBodyOut_Response: MessageFns<RepeatedResponseBodyOut_Response> = {
  encode(message: RepeatedResponseBodyOut_Response, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== "") {
      writer.uint32(10).string(message.data);
    }
    if (message.type !== 0) {
      writer.uint32(24).int32(message.type);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RepeatedResponseBodyOut_Response {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRepeatedResponseBodyOut_Response();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.data = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RepeatedResponseBodyOut_Response {
    return {
      data: isSet(object.data) ? globalThis.String(object.data) : "",
      type: isSet(object.type) ? repeatedResponseBodyOut_Response_ResponseTypeFromJSON(object.type) : 0,
    };
  },

  toJSON(message: RepeatedResponseBodyOut_Response): unknown {
    const obj: any = {};
    if (message.data !== "") {
      obj.data = message.data;
    }
    if (message.type !== 0) {
      obj.type = repeatedResponseBodyOut_Response_ResponseTypeToJSON(message.type);
    }
    return obj;
  },

  create(base?: DeepPartial<RepeatedResponseBodyOut_Response>): RepeatedResponseBodyOut_Response {
    return RepeatedResponseBodyOut_Response.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RepeatedResponseBodyOut_Response>): RepeatedResponseBodyOut_Response {
    const message = createBaseRepeatedResponseBodyOut_Response();
    message.data = object.data ?? "";
    message.type = object.type ?? 0;
    return message;
  },
};

function createBaseRepeatedResponseStrings(): RepeatedResponseStrings {
  return { values: [] };
}

export const RepeatedResponseStrings: MessageFns<RepeatedResponseStrings> = {
  encode(message: RepeatedResponseStrings, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.values) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RepeatedResponseStrings {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRepeatedResponseStrings();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.values.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RepeatedResponseStrings {
    return {
      values: globalThis.Array.isArray(object?.values) ? object.values.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: RepeatedResponseStrings): unknown {
    const obj: any = {};
    if (message.values?.length) {
      obj.values = message.values;
    }
    return obj;
  },

  create(base?: DeepPartial<RepeatedResponseStrings>): RepeatedResponseStrings {
    return RepeatedResponseStrings.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RepeatedResponseStrings>): RepeatedResponseStrings {
    const message = createBaseRepeatedResponseStrings();
    message.values = object.values?.map((e) => e) || [];
    return message;
  },
};

export type ResponseBodyServiceDefinition = typeof ResponseBodyServiceDefinition;
export const ResponseBodyServiceDefinition = {
  name: "ResponseBodyService",
  fullName: "grpc.gateway.examples.internal.proto.examplepb.ResponseBodyService",
  methods: {
    getResponseBody: {
      name: "GetResponseBody",
      requestType: ResponseBodyIn,
      requestStream: false,
      responseType: ResponseBodyOut,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              32,
              98,
              8,
              114,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              18,
              20,
              47,
              114,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              98,
              111,
              100,
              121,
              47,
              123,
              100,
              97,
              116,
              97,
              125,
            ]),
          ],
        },
      },
    },
    listResponseBodies: {
      name: "ListResponseBodies",
      requestType: ResponseBodyIn,
      requestStream: false,
      responseType: RepeatedResponseBodyOut,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              34,
              98,
              8,
              114,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              18,
              22,
              47,
              114,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              98,
              111,
              100,
              105,
              101,
              115,
              47,
              123,
              100,
              97,
              116,
              97,
              125,
            ]),
          ],
        },
      },
    },
    listResponseStrings: {
      name: "ListResponseStrings",
      requestType: ResponseBodyIn,
      requestStream: false,
      responseType: RepeatedResponseStrings,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              33,
              98,
              6,
              118,
              97,
              108,
              117,
              101,
              115,
              18,
              23,
              47,
              114,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              115,
              116,
              114,
              105,
              110,
              103,
              115,
              47,
              123,
              100,
              97,
              116,
              97,
              125,
            ]),
          ],
        },
      },
    },
    getResponseBodyStream: {
      name: "GetResponseBodyStream",
      requestType: ResponseBodyIn,
      requestStream: false,
      responseType: ResponseBodyOut,
      responseStream: true,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              39,
              98,
              8,
              114,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              18,
              27,
              47,
              114,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              98,
              111,
              100,
              121,
              47,
              115,
              116,
              114,
              101,
              97,
              109,
              47,
              123,
              100,
              97,
              116,
              97,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface ResponseBodyServiceImplementation<CallContextExt = {}> {
  getResponseBody(
    request: ResponseBodyIn,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ResponseBodyOut>>;
  listResponseBodies(
    request: ResponseBodyIn,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<RepeatedResponseBodyOut>>;
  listResponseStrings(
    request: ResponseBodyIn,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<RepeatedResponseStrings>>;
  getResponseBodyStream(
    request: ResponseBodyIn,
    context: CallContext & CallContextExt,
  ): ServerStreamingMethodResult<DeepPartial<ResponseBodyOut>>;
}

export interface ResponseBodyServiceClient<CallOptionsExt = {}> {
  getResponseBody(
    request: DeepPartial<ResponseBodyIn>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ResponseBodyOut>;
  listResponseBodies(
    request: DeepPartial<ResponseBodyIn>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<RepeatedResponseBodyOut>;
  listResponseStrings(
    request: DeepPartial<ResponseBodyIn>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<RepeatedResponseStrings>;
  getResponseBodyStream(
    request: DeepPartial<ResponseBodyIn>,
    options?: CallOptions & CallOptionsExt,
  ): AsyncIterable<ResponseBodyOut>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export type ServerStreamingMethodResult<Response> = { [Symbol.asyncIterator](): AsyncIterator<Response, void> };

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
