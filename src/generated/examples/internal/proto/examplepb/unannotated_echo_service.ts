// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: examples/internal/proto/examplepb/unannotated_echo_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Duration } from "../../../../google/protobuf/duration.js";

export const protobufPackage = "grpc.gateway.examples.internal.proto.examplepb";

/** Embedded represents a message embedded in SimpleMessage. */
export interface UnannotatedEmbedded {
  progress?: Long | undefined;
  note?: string | undefined;
}

export interface UnannotatedNestedMessage {
  nId: string;
  val: string;
}

/** UnannotatedSimpleMessage represents a simple message sent to the unannotated Echo service. */
export interface UnannotatedSimpleMessage {
  /** Id represents the message identifier. */
  id: string;
  num: Long;
  duration: Duration | undefined;
  lineNum?: Long | undefined;
  lang?: string | undefined;
  status: UnannotatedEmbedded | undefined;
  en?: Long | undefined;
  no?: UnannotatedEmbedded | undefined;
  resourceId: string;
  nId: UnannotatedNestedMessage | undefined;
}

function createBaseUnannotatedEmbedded(): UnannotatedEmbedded {
  return { progress: undefined, note: undefined };
}

export const UnannotatedEmbedded: MessageFns<UnannotatedEmbedded> = {
  encode(message: UnannotatedEmbedded, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.progress !== undefined) {
      writer.uint32(8).int64(message.progress.toString());
    }
    if (message.note !== undefined) {
      writer.uint32(18).string(message.note);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UnannotatedEmbedded {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUnannotatedEmbedded();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.progress = Long.fromString(reader.int64().toString());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.note = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UnannotatedEmbedded {
    return {
      progress: isSet(object.progress) ? Long.fromValue(object.progress) : undefined,
      note: isSet(object.note) ? globalThis.String(object.note) : undefined,
    };
  },

  toJSON(message: UnannotatedEmbedded): unknown {
    const obj: any = {};
    if (message.progress !== undefined) {
      obj.progress = (message.progress || Long.ZERO).toString();
    }
    if (message.note !== undefined) {
      obj.note = message.note;
    }
    return obj;
  },

  create(base?: DeepPartial<UnannotatedEmbedded>): UnannotatedEmbedded {
    return UnannotatedEmbedded.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UnannotatedEmbedded>): UnannotatedEmbedded {
    const message = createBaseUnannotatedEmbedded();
    message.progress = (object.progress !== undefined && object.progress !== null)
      ? Long.fromValue(object.progress)
      : undefined;
    message.note = object.note ?? undefined;
    return message;
  },
};

function createBaseUnannotatedNestedMessage(): UnannotatedNestedMessage {
  return { nId: "", val: "" };
}

export const UnannotatedNestedMessage: MessageFns<UnannotatedNestedMessage> = {
  encode(message: UnannotatedNestedMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.nId !== "") {
      writer.uint32(10).string(message.nId);
    }
    if (message.val !== "") {
      writer.uint32(18).string(message.val);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UnannotatedNestedMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUnannotatedNestedMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.nId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.val = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UnannotatedNestedMessage {
    return {
      nId: isSet(object.nId) ? globalThis.String(object.nId) : "",
      val: isSet(object.val) ? globalThis.String(object.val) : "",
    };
  },

  toJSON(message: UnannotatedNestedMessage): unknown {
    const obj: any = {};
    if (message.nId !== "") {
      obj.nId = message.nId;
    }
    if (message.val !== "") {
      obj.val = message.val;
    }
    return obj;
  },

  create(base?: DeepPartial<UnannotatedNestedMessage>): UnannotatedNestedMessage {
    return UnannotatedNestedMessage.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UnannotatedNestedMessage>): UnannotatedNestedMessage {
    const message = createBaseUnannotatedNestedMessage();
    message.nId = object.nId ?? "";
    message.val = object.val ?? "";
    return message;
  },
};

function createBaseUnannotatedSimpleMessage(): UnannotatedSimpleMessage {
  return {
    id: "",
    num: Long.ZERO,
    duration: undefined,
    lineNum: undefined,
    lang: undefined,
    status: undefined,
    en: undefined,
    no: undefined,
    resourceId: "",
    nId: undefined,
  };
}

export const UnannotatedSimpleMessage: MessageFns<UnannotatedSimpleMessage> = {
  encode(message: UnannotatedSimpleMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (!message.num.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.num.toString());
    }
    if (message.duration !== undefined) {
      Duration.encode(message.duration, writer.uint32(26).fork()).join();
    }
    if (message.lineNum !== undefined) {
      writer.uint32(32).int64(message.lineNum.toString());
    }
    if (message.lang !== undefined) {
      writer.uint32(42).string(message.lang);
    }
    if (message.status !== undefined) {
      UnannotatedEmbedded.encode(message.status, writer.uint32(50).fork()).join();
    }
    if (message.en !== undefined) {
      writer.uint32(56).int64(message.en.toString());
    }
    if (message.no !== undefined) {
      UnannotatedEmbedded.encode(message.no, writer.uint32(66).fork()).join();
    }
    if (message.resourceId !== "") {
      writer.uint32(74).string(message.resourceId);
    }
    if (message.nId !== undefined) {
      UnannotatedNestedMessage.encode(message.nId, writer.uint32(82).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UnannotatedSimpleMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUnannotatedSimpleMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.num = Long.fromString(reader.int64().toString());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.duration = Duration.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.lineNum = Long.fromString(reader.int64().toString());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.lang = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.status = UnannotatedEmbedded.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.en = Long.fromString(reader.int64().toString());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.no = UnannotatedEmbedded.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.resourceId = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.nId = UnannotatedNestedMessage.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UnannotatedSimpleMessage {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      num: isSet(object.num) ? Long.fromValue(object.num) : Long.ZERO,
      duration: isSet(object.duration) ? Duration.fromJSON(object.duration) : undefined,
      lineNum: isSet(object.lineNum) ? Long.fromValue(object.lineNum) : undefined,
      lang: isSet(object.lang) ? globalThis.String(object.lang) : undefined,
      status: isSet(object.status) ? UnannotatedEmbedded.fromJSON(object.status) : undefined,
      en: isSet(object.en) ? Long.fromValue(object.en) : undefined,
      no: isSet(object.no) ? UnannotatedEmbedded.fromJSON(object.no) : undefined,
      resourceId: isSet(object.resourceId) ? globalThis.String(object.resourceId) : "",
      nId: isSet(object.nId) ? UnannotatedNestedMessage.fromJSON(object.nId) : undefined,
    };
  },

  toJSON(message: UnannotatedSimpleMessage): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (!message.num.equals(Long.ZERO)) {
      obj.num = (message.num || Long.ZERO).toString();
    }
    if (message.duration !== undefined) {
      obj.duration = Duration.toJSON(message.duration);
    }
    if (message.lineNum !== undefined) {
      obj.lineNum = (message.lineNum || Long.ZERO).toString();
    }
    if (message.lang !== undefined) {
      obj.lang = message.lang;
    }
    if (message.status !== undefined) {
      obj.status = UnannotatedEmbedded.toJSON(message.status);
    }
    if (message.en !== undefined) {
      obj.en = (message.en || Long.ZERO).toString();
    }
    if (message.no !== undefined) {
      obj.no = UnannotatedEmbedded.toJSON(message.no);
    }
    if (message.resourceId !== "") {
      obj.resourceId = message.resourceId;
    }
    if (message.nId !== undefined) {
      obj.nId = UnannotatedNestedMessage.toJSON(message.nId);
    }
    return obj;
  },

  create(base?: DeepPartial<UnannotatedSimpleMessage>): UnannotatedSimpleMessage {
    return UnannotatedSimpleMessage.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UnannotatedSimpleMessage>): UnannotatedSimpleMessage {
    const message = createBaseUnannotatedSimpleMessage();
    message.id = object.id ?? "";
    message.num = (object.num !== undefined && object.num !== null) ? Long.fromValue(object.num) : Long.ZERO;
    message.duration = (object.duration !== undefined && object.duration !== null)
      ? Duration.fromPartial(object.duration)
      : undefined;
    message.lineNum = (object.lineNum !== undefined && object.lineNum !== null)
      ? Long.fromValue(object.lineNum)
      : undefined;
    message.lang = object.lang ?? undefined;
    message.status = (object.status !== undefined && object.status !== null)
      ? UnannotatedEmbedded.fromPartial(object.status)
      : undefined;
    message.en = (object.en !== undefined && object.en !== null) ? Long.fromValue(object.en) : undefined;
    message.no = (object.no !== undefined && object.no !== null)
      ? UnannotatedEmbedded.fromPartial(object.no)
      : undefined;
    message.resourceId = object.resourceId ?? "";
    message.nId = (object.nId !== undefined && object.nId !== null)
      ? UnannotatedNestedMessage.fromPartial(object.nId)
      : undefined;
    return message;
  },
};

/** Echo service responds to incoming echo requests. */
export type UnannotatedEchoServiceDefinition = typeof UnannotatedEchoServiceDefinition;
export const UnannotatedEchoServiceDefinition = {
  name: "UnannotatedEchoService",
  fullName: "grpc.gateway.examples.internal.proto.examplepb.UnannotatedEchoService",
  methods: {
    /**
     * Echo method receives a simple message and returns it.
     *
     * The message posted as the id parameter will also be
     * returned.
     */
    echo: {
      name: "Echo",
      requestType: UnannotatedSimpleMessage,
      requestStream: false,
      responseType: UnannotatedSimpleMessage,
      responseStream: false,
      options: {},
    },
    /** EchoBody method receives a simple message and returns it. */
    echoBody: {
      name: "EchoBody",
      requestType: UnannotatedSimpleMessage,
      requestStream: false,
      responseType: UnannotatedSimpleMessage,
      responseStream: false,
      options: {},
    },
    /** EchoDelete method receives a simple message and returns it. */
    echoDelete: {
      name: "EchoDelete",
      requestType: UnannotatedSimpleMessage,
      requestStream: false,
      responseType: UnannotatedSimpleMessage,
      responseStream: false,
      options: {},
    },
  },
} as const;

export interface UnannotatedEchoServiceImplementation<CallContextExt = {}> {
  /**
   * Echo method receives a simple message and returns it.
   *
   * The message posted as the id parameter will also be
   * returned.
   */
  echo(
    request: UnannotatedSimpleMessage,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UnannotatedSimpleMessage>>;
  /** EchoBody method receives a simple message and returns it. */
  echoBody(
    request: UnannotatedSimpleMessage,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UnannotatedSimpleMessage>>;
  /** EchoDelete method receives a simple message and returns it. */
  echoDelete(
    request: UnannotatedSimpleMessage,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UnannotatedSimpleMessage>>;
}

export interface UnannotatedEchoServiceClient<CallOptionsExt = {}> {
  /**
   * Echo method receives a simple message and returns it.
   *
   * The message posted as the id parameter will also be
   * returned.
   */
  echo(
    request: DeepPartial<UnannotatedSimpleMessage>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UnannotatedSimpleMessage>;
  /** EchoBody method receives a simple message and returns it. */
  echoBody(
    request: DeepPartial<UnannotatedSimpleMessage>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UnannotatedSimpleMessage>;
  /** EchoDelete method receives a simple message and returns it. */
  echoDelete(
    request: DeepPartial<UnannotatedSimpleMessage>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UnannotatedSimpleMessage>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
