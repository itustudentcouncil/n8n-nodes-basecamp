// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: examples/internal/proto/examplepb/stream.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { HttpBody } from "../../../../google/api/httpbody.js";
import { Empty } from "../../../../google/protobuf/empty.js";
import { StringMessage } from "../sub/message.js";
import { ABitOfEverything } from "./a_bit_of_everything.js";

export const protobufPackage = "grpc.gateway.examples.internal.proto.examplepb";

export interface Options {
  error: boolean;
}

function createBaseOptions(): Options {
  return { error: false };
}

export const Options: MessageFns<Options> = {
  encode(message: Options, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.error !== false) {
      writer.uint32(8).bool(message.error);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Options {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOptions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.error = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Options {
    return { error: isSet(object.error) ? globalThis.Boolean(object.error) : false };
  },

  toJSON(message: Options): unknown {
    const obj: any = {};
    if (message.error !== false) {
      obj.error = message.error;
    }
    return obj;
  },

  create(base?: DeepPartial<Options>): Options {
    return Options.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Options>): Options {
    const message = createBaseOptions();
    message.error = object.error ?? false;
    return message;
  },
};

/** Defines some more operations to be added to ABitOfEverythingService */
export type StreamServiceDefinition = typeof StreamServiceDefinition;
export const StreamServiceDefinition = {
  name: "StreamService",
  fullName: "grpc.gateway.examples.internal.proto.examplepb.StreamService",
  methods: {
    bulkCreate: {
      name: "BulkCreate",
      requestType: ABitOfEverything,
      requestStream: true,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              41,
              58,
              1,
              42,
              34,
              36,
              47,
              118,
              49,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              47,
              97,
              95,
              98,
              105,
              116,
              95,
              111,
              102,
              95,
              101,
              118,
              101,
              114,
              121,
              116,
              104,
              105,
              110,
              103,
              47,
              98,
              117,
              108,
              107,
            ]),
          ],
        },
      },
    },
    list: {
      name: "List",
      requestType: Options,
      requestStream: false,
      responseType: ABitOfEverything,
      responseStream: true,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              33,
              18,
              31,
              47,
              118,
              49,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              47,
              97,
              95,
              98,
              105,
              116,
              95,
              111,
              102,
              95,
              101,
              118,
              101,
              114,
              121,
              116,
              104,
              105,
              110,
              103,
            ]),
          ],
        },
      },
    },
    bulkEcho: {
      name: "BulkEcho",
      requestType: StringMessage,
      requestStream: true,
      responseType: StringMessage,
      responseStream: true,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              41,
              58,
              1,
              42,
              34,
              36,
              47,
              118,
              49,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              47,
              97,
              95,
              98,
              105,
              116,
              95,
              111,
              102,
              95,
              101,
              118,
              101,
              114,
              121,
              116,
              104,
              105,
              110,
              103,
              47,
              101,
              99,
              104,
              111,
            ]),
          ],
        },
      },
    },
    download: {
      name: "Download",
      requestType: Options,
      requestStream: false,
      responseType: HttpBody,
      responseStream: true,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              22,
              18,
              20,
              47,
              118,
              49,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              47,
              100,
              111,
              119,
              110,
              108,
              111,
              97,
              100,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface StreamServiceImplementation<CallContextExt = {}> {
  bulkCreate(
    request: AsyncIterable<ABitOfEverything>,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  list(
    request: Options,
    context: CallContext & CallContextExt,
  ): ServerStreamingMethodResult<DeepPartial<ABitOfEverything>>;
  bulkEcho(
    request: AsyncIterable<StringMessage>,
    context: CallContext & CallContextExt,
  ): ServerStreamingMethodResult<DeepPartial<StringMessage>>;
  download(request: Options, context: CallContext & CallContextExt): ServerStreamingMethodResult<DeepPartial<HttpBody>>;
}

export interface StreamServiceClient<CallOptionsExt = {}> {
  bulkCreate(
    request: AsyncIterable<DeepPartial<ABitOfEverything>>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  list(request: DeepPartial<Options>, options?: CallOptions & CallOptionsExt): AsyncIterable<ABitOfEverything>;
  bulkEcho(
    request: AsyncIterable<DeepPartial<StringMessage>>,
    options?: CallOptions & CallOptionsExt,
  ): AsyncIterable<StringMessage>;
  download(request: DeepPartial<Options>, options?: CallOptions & CallOptionsExt): AsyncIterable<HttpBody>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export type ServerStreamingMethodResult<Response> = { [Symbol.asyncIterator](): AsyncIterator<Response, void> };

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
