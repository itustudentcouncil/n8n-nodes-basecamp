// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: examples/internal/proto/examplepb/enum_with_single_value.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";

export const protobufPackage = "grpc.gateway.examples.internal.proto.examplepb";

/**
 * EnumWithSingleValue is an enum with a single value. Since it has just a single value
 * the `enum` field should be omitted in the generated OpenAPI spec for the type when
 * the omit_enum_default_value option is set to true.
 */
export enum EnumWithSingleValue {
  ENUM_WITH_SINGLE_VALUE_UNSPECIFIED = 0,
  UNRECOGNIZED = -1,
}

export function enumWithSingleValueFromJSON(object: any): EnumWithSingleValue {
  switch (object) {
    case 0:
    case "ENUM_WITH_SINGLE_VALUE_UNSPECIFIED":
      return EnumWithSingleValue.ENUM_WITH_SINGLE_VALUE_UNSPECIFIED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return EnumWithSingleValue.UNRECOGNIZED;
  }
}

export function enumWithSingleValueToJSON(object: EnumWithSingleValue): string {
  switch (object) {
    case EnumWithSingleValue.ENUM_WITH_SINGLE_VALUE_UNSPECIFIED:
      return "ENUM_WITH_SINGLE_VALUE_UNSPECIFIED";
    case EnumWithSingleValue.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface EnumWithSingleValueServiceEchoRequest {
  value: EnumWithSingleValue;
}

export interface EnumWithSingleValueServiceEchoResponse {
}

function createBaseEnumWithSingleValueServiceEchoRequest(): EnumWithSingleValueServiceEchoRequest {
  return { value: 0 };
}

export const EnumWithSingleValueServiceEchoRequest: MessageFns<EnumWithSingleValueServiceEchoRequest> = {
  encode(message: EnumWithSingleValueServiceEchoRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.value !== 0) {
      writer.uint32(8).int32(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EnumWithSingleValueServiceEchoRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEnumWithSingleValueServiceEchoRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.value = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EnumWithSingleValueServiceEchoRequest {
    return { value: isSet(object.value) ? enumWithSingleValueFromJSON(object.value) : 0 };
  },

  toJSON(message: EnumWithSingleValueServiceEchoRequest): unknown {
    const obj: any = {};
    if (message.value !== 0) {
      obj.value = enumWithSingleValueToJSON(message.value);
    }
    return obj;
  },

  create(base?: DeepPartial<EnumWithSingleValueServiceEchoRequest>): EnumWithSingleValueServiceEchoRequest {
    return EnumWithSingleValueServiceEchoRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EnumWithSingleValueServiceEchoRequest>): EnumWithSingleValueServiceEchoRequest {
    const message = createBaseEnumWithSingleValueServiceEchoRequest();
    message.value = object.value ?? 0;
    return message;
  },
};

function createBaseEnumWithSingleValueServiceEchoResponse(): EnumWithSingleValueServiceEchoResponse {
  return {};
}

export const EnumWithSingleValueServiceEchoResponse: MessageFns<EnumWithSingleValueServiceEchoResponse> = {
  encode(_: EnumWithSingleValueServiceEchoResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EnumWithSingleValueServiceEchoResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEnumWithSingleValueServiceEchoResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): EnumWithSingleValueServiceEchoResponse {
    return {};
  },

  toJSON(_: EnumWithSingleValueServiceEchoResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<EnumWithSingleValueServiceEchoResponse>): EnumWithSingleValueServiceEchoResponse {
    return EnumWithSingleValueServiceEchoResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<EnumWithSingleValueServiceEchoResponse>): EnumWithSingleValueServiceEchoResponse {
    const message = createBaseEnumWithSingleValueServiceEchoResponse();
    return message;
  },
};

export type EnumWithSingleValueServiceDefinition = typeof EnumWithSingleValueServiceDefinition;
export const EnumWithSingleValueServiceDefinition = {
  name: "EnumWithSingleValueService",
  fullName: "grpc.gateway.examples.internal.proto.examplepb.EnumWithSingleValueService",
  methods: {
    echo: {
      name: "Echo",
      requestType: EnumWithSingleValueServiceEchoRequest,
      requestStream: false,
      responseType: EnumWithSingleValueServiceEchoResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              44,
              58,
              1,
              42,
              34,
              39,
              47,
              118,
              49,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              47,
              101,
              110,
              117,
              109,
              45,
              119,
              105,
              116,
              104,
              45,
              115,
              105,
              110,
              103,
              108,
              101,
              45,
              118,
              97,
              108,
              117,
              101,
              47,
              101,
              99,
              104,
              111,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface EnumWithSingleValueServiceImplementation<CallContextExt = {}> {
  echo(
    request: EnumWithSingleValueServiceEchoRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<EnumWithSingleValueServiceEchoResponse>>;
}

export interface EnumWithSingleValueServiceClient<CallOptionsExt = {}> {
  echo(
    request: DeepPartial<EnumWithSingleValueServiceEchoRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<EnumWithSingleValueServiceEchoResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
