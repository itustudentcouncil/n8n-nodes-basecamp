// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: examples/internal/proto/examplepb/ignore_comment.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";

export const protobufPackage = "grpc.gateway.examples.internal.proto.examplepb";

/** This comment should be excluded from OpenAPI output */
export interface FooRequest {
  /** This comment should be excluded from OpenAPI output */
  username: string;
  /** This comment should be excluded from OpenAPI output */
  password: string;
}

/** This comment should be excluded from OpenAPI output */
export interface FooReply {
}

function createBaseFooRequest(): FooRequest {
  return { username: "", password: "" };
}

export const FooRequest: MessageFns<FooRequest> = {
  encode(message: FooRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.username !== "") {
      writer.uint32(10).string(message.username);
    }
    if (message.password !== "") {
      writer.uint32(18).string(message.password);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FooRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFooRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.username = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.password = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FooRequest {
    return {
      username: isSet(object.username) ? globalThis.String(object.username) : "",
      password: isSet(object.password) ? globalThis.String(object.password) : "",
    };
  },

  toJSON(message: FooRequest): unknown {
    const obj: any = {};
    if (message.username !== "") {
      obj.username = message.username;
    }
    if (message.password !== "") {
      obj.password = message.password;
    }
    return obj;
  },

  create(base?: DeepPartial<FooRequest>): FooRequest {
    return FooRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FooRequest>): FooRequest {
    const message = createBaseFooRequest();
    message.username = object.username ?? "";
    message.password = object.password ?? "";
    return message;
  },
};

function createBaseFooReply(): FooReply {
  return {};
}

export const FooReply: MessageFns<FooReply> = {
  encode(_: FooReply, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FooReply {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFooReply();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): FooReply {
    return {};
  },

  toJSON(_: FooReply): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<FooReply>): FooReply {
    return FooReply.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<FooReply>): FooReply {
    const message = createBaseFooReply();
    return message;
  },
};

/** This comment should be excluded from OpenAPI output */
export type FooServiceDefinition = typeof FooServiceDefinition;
export const FooServiceDefinition = {
  name: "FooService",
  fullName: "grpc.gateway.examples.internal.proto.examplepb.FooService",
  methods: {
    /** This comment should be excluded from OpenAPI output */
    foo: {
      name: "Foo",
      requestType: FooRequest,
      requestStream: false,
      responseType: FooReply,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([20, 58, 1, 42, 34, 15, 47, 118, 49, 47, 101, 120, 97, 109, 112, 108, 101, 47, 102, 111, 111]),
          ],
        },
      },
    },
  },
} as const;

export interface FooServiceImplementation<CallContextExt = {}> {
  /** This comment should be excluded from OpenAPI output */
  foo(request: FooRequest, context: CallContext & CallContextExt): Promise<DeepPartial<FooReply>>;
}

export interface FooServiceClient<CallOptionsExt = {}> {
  /** This comment should be excluded from OpenAPI output */
  foo(request: DeepPartial<FooRequest>, options?: CallOptions & CallOptionsExt): Promise<FooReply>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
