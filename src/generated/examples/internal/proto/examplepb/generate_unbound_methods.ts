// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: examples/internal/proto/examplepb/generate_unbound_methods.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Duration } from "../../../../google/protobuf/duration.js";

export const protobufPackage = "grpc.gateway.examples.internal.proto.examplepb";

/** GenerateUnboundMethodsSimpleMessage represents a simple message sent to the unannotated GenerateUnboundMethodsEchoService service. */
export interface GenerateUnboundMethodsSimpleMessage {
  /** Id represents the message identifier. */
  id: string;
  num: Long;
  duration: Duration | undefined;
}

function createBaseGenerateUnboundMethodsSimpleMessage(): GenerateUnboundMethodsSimpleMessage {
  return { id: "", num: Long.ZERO, duration: undefined };
}

export const GenerateUnboundMethodsSimpleMessage: MessageFns<GenerateUnboundMethodsSimpleMessage> = {
  encode(message: GenerateUnboundMethodsSimpleMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (!message.num.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.num.toString());
    }
    if (message.duration !== undefined) {
      Duration.encode(message.duration, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GenerateUnboundMethodsSimpleMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenerateUnboundMethodsSimpleMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.num = Long.fromString(reader.int64().toString());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.duration = Duration.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenerateUnboundMethodsSimpleMessage {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      num: isSet(object.num) ? Long.fromValue(object.num) : Long.ZERO,
      duration: isSet(object.duration) ? Duration.fromJSON(object.duration) : undefined,
    };
  },

  toJSON(message: GenerateUnboundMethodsSimpleMessage): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (!message.num.equals(Long.ZERO)) {
      obj.num = (message.num || Long.ZERO).toString();
    }
    if (message.duration !== undefined) {
      obj.duration = Duration.toJSON(message.duration);
    }
    return obj;
  },

  create(base?: DeepPartial<GenerateUnboundMethodsSimpleMessage>): GenerateUnboundMethodsSimpleMessage {
    return GenerateUnboundMethodsSimpleMessage.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GenerateUnboundMethodsSimpleMessage>): GenerateUnboundMethodsSimpleMessage {
    const message = createBaseGenerateUnboundMethodsSimpleMessage();
    message.id = object.id ?? "";
    message.num = (object.num !== undefined && object.num !== null) ? Long.fromValue(object.num) : Long.ZERO;
    message.duration = (object.duration !== undefined && object.duration !== null)
      ? Duration.fromPartial(object.duration)
      : undefined;
    return message;
  },
};

/** GenerateUnboundMethodsEchoService service responds to incoming echo requests. */
export type GenerateUnboundMethodsEchoServiceDefinition = typeof GenerateUnboundMethodsEchoServiceDefinition;
export const GenerateUnboundMethodsEchoServiceDefinition = {
  name: "GenerateUnboundMethodsEchoService",
  fullName: "grpc.gateway.examples.internal.proto.examplepb.GenerateUnboundMethodsEchoService",
  methods: {
    /**
     * Echo method receives a simple message and returns it.
     *
     * The message posted as the id parameter will also be
     * returned.
     */
    echo: {
      name: "Echo",
      requestType: GenerateUnboundMethodsSimpleMessage,
      requestStream: false,
      responseType: GenerateUnboundMethodsSimpleMessage,
      responseStream: false,
      options: {},
    },
    /** EchoBody method receives a simple message and returns it. */
    echoBody: {
      name: "EchoBody",
      requestType: GenerateUnboundMethodsSimpleMessage,
      requestStream: false,
      responseType: GenerateUnboundMethodsSimpleMessage,
      responseStream: false,
      options: {},
    },
    /** EchoDelete method receives a simple message and returns it. */
    echoDelete: {
      name: "EchoDelete",
      requestType: GenerateUnboundMethodsSimpleMessage,
      requestStream: false,
      responseType: GenerateUnboundMethodsSimpleMessage,
      responseStream: false,
      options: {},
    },
  },
} as const;

export interface GenerateUnboundMethodsEchoServiceImplementation<CallContextExt = {}> {
  /**
   * Echo method receives a simple message and returns it.
   *
   * The message posted as the id parameter will also be
   * returned.
   */
  echo(
    request: GenerateUnboundMethodsSimpleMessage,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GenerateUnboundMethodsSimpleMessage>>;
  /** EchoBody method receives a simple message and returns it. */
  echoBody(
    request: GenerateUnboundMethodsSimpleMessage,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GenerateUnboundMethodsSimpleMessage>>;
  /** EchoDelete method receives a simple message and returns it. */
  echoDelete(
    request: GenerateUnboundMethodsSimpleMessage,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GenerateUnboundMethodsSimpleMessage>>;
}

export interface GenerateUnboundMethodsEchoServiceClient<CallOptionsExt = {}> {
  /**
   * Echo method receives a simple message and returns it.
   *
   * The message posted as the id parameter will also be
   * returned.
   */
  echo(
    request: DeepPartial<GenerateUnboundMethodsSimpleMessage>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GenerateUnboundMethodsSimpleMessage>;
  /** EchoBody method receives a simple message and returns it. */
  echoBody(
    request: DeepPartial<GenerateUnboundMethodsSimpleMessage>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GenerateUnboundMethodsSimpleMessage>;
  /** EchoDelete method receives a simple message and returns it. */
  echoDelete(
    request: DeepPartial<GenerateUnboundMethodsSimpleMessage>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GenerateUnboundMethodsSimpleMessage>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
