// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/analytics/admin/v1beta/analytics_admin.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Empty } from "../../../protobuf/empty.js";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { Timestamp } from "../../../protobuf/timestamp.js";
import {
  AccessDateRange,
  AccessDimension,
  AccessDimensionHeader,
  AccessFilterExpression,
  AccessMetric,
  AccessMetricHeader,
  AccessOrderBy,
  AccessQuota,
  AccessRow,
} from "./access_report.js";
import {
  Account,
  AccountSummary,
  ActionType,
  actionTypeFromJSON,
  actionTypeToJSON,
  ChangeHistoryEvent,
  ChangeHistoryResourceType,
  changeHistoryResourceTypeFromJSON,
  changeHistoryResourceTypeToJSON,
  ConversionEvent,
  CustomDimension,
  CustomMetric,
  DataRetentionSettings,
  DataSharingSettings,
  DataStream,
  FirebaseLink,
  GoogleAdsLink,
  KeyEvent,
  MeasurementProtocolSecret,
  Property,
} from "./resources.js";

export const protobufPackage = "google.analytics.admin.v1beta";

/** The request for a Data Access Record Report. */
export interface RunAccessReportRequest {
  /**
   * The Data Access Report supports requesting at the property level or account
   * level. If requested at the account level, Data Access Reports include all
   * access for all properties under that account.
   *
   * To request at the property level, entity should be for example
   * 'properties/123' if "123" is your GA4 property ID. To request at the
   * account level, entity should be for example 'accounts/1234' if "1234" is
   * your GA4 Account ID.
   */
  entity: string;
  /**
   * The dimensions requested and displayed in the response. Requests are
   * allowed up to 9 dimensions.
   */
  dimensions: AccessDimension[];
  /**
   * The metrics requested and displayed in the response. Requests are allowed
   * up to 10 metrics.
   */
  metrics: AccessMetric[];
  /**
   * Date ranges of access records to read. If multiple date ranges are
   * requested, each response row will contain a zero based date range index. If
   * two date ranges overlap, the access records for the overlapping days is
   * included in the response rows for both date ranges. Requests are allowed up
   * to 2 date ranges.
   */
  dateRanges: AccessDateRange[];
  /**
   * Dimension filters let you restrict report response to specific
   * dimension values which match the filter. For example, filtering on access
   * records of a single user. To learn more, see [Fundamentals of Dimension
   * Filters](https://developers.google.com/analytics/devguides/reporting/data/v1/basics#dimension_filters)
   * for examples. Metrics cannot be used in this filter.
   */
  dimensionFilter:
    | AccessFilterExpression
    | undefined;
  /**
   * Metric filters allow you to restrict report response to specific metric
   * values which match the filter. Metric filters are applied after aggregating
   * the report's rows, similar to SQL having-clause. Dimensions cannot be used
   * in this filter.
   */
  metricFilter:
    | AccessFilterExpression
    | undefined;
  /**
   * The row count of the start row. The first row is counted as row 0. If
   * offset is unspecified, it is treated as 0. If offset is zero, then this
   * method will return the first page of results with `limit` entries.
   *
   * To learn more about this pagination parameter, see
   * [Pagination](https://developers.google.com/analytics/devguides/reporting/data/v1/basics#pagination).
   */
  offset: Long;
  /**
   * The number of rows to return. If unspecified, 10,000 rows are returned. The
   * API returns a maximum of 100,000 rows per request, no matter how many you
   * ask for. `limit` must be positive.
   *
   * The API may return fewer rows than the requested `limit`, if there aren't
   * as many remaining rows as the `limit`. For instance, there are fewer than
   * 300 possible values for the dimension `country`, so when reporting on only
   * `country`, you can't get more than 300 rows, even if you set `limit` to a
   * higher value.
   *
   * To learn more about this pagination parameter, see
   * [Pagination](https://developers.google.com/analytics/devguides/reporting/data/v1/basics#pagination).
   */
  limit: Long;
  /**
   * This request's time zone if specified. If unspecified, the property's time
   * zone is used. The request's time zone is used to interpret the start & end
   * dates of the report.
   *
   * Formatted as strings from the IANA Time Zone database
   * (https://www.iana.org/time-zones); for example "America/New_York" or
   * "Asia/Tokyo".
   */
  timeZone: string;
  /** Specifies how rows are ordered in the response. */
  orderBys: AccessOrderBy[];
  /**
   * Toggles whether to return the current state of this Analytics Property's
   * quota. Quota is returned in [AccessQuota](#AccessQuota). For account-level
   * requests, this field must be false.
   */
  returnEntityQuota: boolean;
  /**
   * Optional. Determines whether to include users who have never made an API
   * call in the response. If true, all users with access to the specified
   * property or account are included in the response, regardless of whether
   * they have made an API call or not. If false, only the users who have made
   * an API call will be included.
   */
  includeAllUsers: boolean;
  /**
   * Optional. Decides whether to return the users within user groups. This
   * field works only when include_all_users is set to true. If true, it will
   * return all users with access to the specified property or account.
   * If false, only the users with direct access will be returned.
   */
  expandGroups: boolean;
}

/** The customized Data Access Record Report response. */
export interface RunAccessReportResponse {
  /**
   * The header for a column in the report that corresponds to a specific
   * dimension. The number of DimensionHeaders and ordering of DimensionHeaders
   * matches the dimensions present in rows.
   */
  dimensionHeaders: AccessDimensionHeader[];
  /**
   * The header for a column in the report that corresponds to a specific
   * metric. The number of MetricHeaders and ordering of MetricHeaders matches
   * the metrics present in rows.
   */
  metricHeaders: AccessMetricHeader[];
  /** Rows of dimension value combinations and metric values in the report. */
  rows: AccessRow[];
  /**
   * The total number of rows in the query result. `rowCount` is independent of
   * the number of rows returned in the response, the `limit` request
   * parameter, and the `offset` request parameter. For example if a query
   * returns 175 rows and includes `limit` of 50 in the API request, the
   * response will contain `rowCount` of 175 but only 50 rows.
   *
   * To learn more about this pagination parameter, see
   * [Pagination](https://developers.google.com/analytics/devguides/reporting/data/v1/basics#pagination).
   */
  rowCount: number;
  /**
   * The quota state for this Analytics property including this request. This
   * field doesn't work with account-level requests.
   */
  quota: AccessQuota | undefined;
}

/** Request message for GetAccount RPC. */
export interface GetAccountRequest {
  /**
   * Required. The name of the account to lookup.
   * Format: accounts/{account}
   * Example: "accounts/100"
   */
  name: string;
}

/** Request message for ListAccounts RPC. */
export interface ListAccountsRequest {
  /**
   * The maximum number of resources to return. The service may return
   * fewer than this value, even if there are additional pages.
   * If unspecified, at most 50 resources will be returned.
   * The maximum value is 200; (higher values will be coerced to the maximum)
   */
  pageSize: number;
  /**
   * A page token, received from a previous `ListAccounts` call.
   * Provide this to retrieve the subsequent page.
   * When paginating, all other parameters provided to `ListAccounts` must
   * match the call that provided the page token.
   */
  pageToken: string;
  /**
   * Whether to include soft-deleted (ie: "trashed") Accounts in the
   * results. Accounts can be inspected to determine whether they are deleted or
   * not.
   */
  showDeleted: boolean;
}

/** Request message for ListAccounts RPC. */
export interface ListAccountsResponse {
  /** Results that were accessible to the caller. */
  accounts: Account[];
  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

/** Request message for DeleteAccount RPC. */
export interface DeleteAccountRequest {
  /**
   * Required. The name of the Account to soft-delete.
   * Format: accounts/{account}
   * Example: "accounts/100"
   */
  name: string;
}

/** Request message for UpdateAccount RPC. */
export interface UpdateAccountRequest {
  /**
   * Required. The account to update.
   * The account's `name` field is used to identify the account.
   */
  account:
    | Account
    | undefined;
  /**
   * Required. The list of fields to be updated. Field names must be in snake
   * case (for example, "field_to_update"). Omitted fields will not be updated.
   * To replace the entire entity, use one path with the string "*" to match all
   * fields.
   */
  updateMask: string[] | undefined;
}

/** Request message for ProvisionAccountTicket RPC. */
export interface ProvisionAccountTicketRequest {
  /** The account to create. */
  account:
    | Account
    | undefined;
  /**
   * Redirect URI where the user will be sent after accepting Terms of Service.
   * Must be configured in Cloud Console as a Redirect URI.
   */
  redirectUri: string;
}

/** Response message for ProvisionAccountTicket RPC. */
export interface ProvisionAccountTicketResponse {
  /** The param to be passed in the ToS link. */
  accountTicketId: string;
}

/** Request message for GetProperty RPC. */
export interface GetPropertyRequest {
  /**
   * Required. The name of the property to lookup.
   * Format: properties/{property_id}
   * Example: "properties/1000"
   */
  name: string;
}

/** Request message for ListProperties RPC. */
export interface ListPropertiesRequest {
  /**
   * Required. An expression for filtering the results of the request.
   * Fields eligible for filtering are:
   * `parent:`(The resource name of the parent account/property) or
   * `ancestor:`(The resource name of the parent account) or
   * `firebase_project:`(The id or number of the linked firebase project).
   * Some examples of filters:
   *
   * ```
   * | Filter                      | Description                               |
   * |-----------------------------|-------------------------------------------|
   * | parent:accounts/123         | The account with account id: 123.       |
   * | parent:properties/123       | The property with property id: 123.       |
   * | ancestor:accounts/123       | The account with account id: 123.         |
   * | firebase_project:project-id | The firebase project with id: project-id. |
   * | firebase_project:123        | The firebase project with number: 123.    |
   * ```
   */
  filter: string;
  /**
   * The maximum number of resources to return. The service may return
   * fewer than this value, even if there are additional pages.
   * If unspecified, at most 50 resources will be returned.
   * The maximum value is 200; (higher values will be coerced to the maximum)
   */
  pageSize: number;
  /**
   * A page token, received from a previous `ListProperties` call.
   * Provide this to retrieve the subsequent page.
   * When paginating, all other parameters provided to `ListProperties` must
   * match the call that provided the page token.
   */
  pageToken: string;
  /**
   * Whether to include soft-deleted (ie: "trashed") Properties in the
   * results. Properties can be inspected to determine whether they are deleted
   * or not.
   */
  showDeleted: boolean;
}

/** Response message for ListProperties RPC. */
export interface ListPropertiesResponse {
  /** Results that matched the filter criteria and were accessible to the caller. */
  properties: Property[];
  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

/** Request message for UpdateProperty RPC. */
export interface UpdatePropertyRequest {
  /**
   * Required. The property to update.
   * The property's `name` field is used to identify the property to be
   * updated.
   */
  property:
    | Property
    | undefined;
  /**
   * Required. The list of fields to be updated. Field names must be in snake
   * case (e.g., "field_to_update"). Omitted fields will not be updated. To
   * replace the entire entity, use one path with the string "*" to match all
   * fields.
   */
  updateMask: string[] | undefined;
}

/** Request message for CreateProperty RPC. */
export interface CreatePropertyRequest {
  /**
   * Required. The property to create.
   * Note: the supplied property must specify its parent.
   */
  property: Property | undefined;
}

/** Request message for DeleteProperty RPC. */
export interface DeletePropertyRequest {
  /**
   * Required. The name of the Property to soft-delete.
   * Format: properties/{property_id}
   * Example: "properties/1000"
   */
  name: string;
}

/** Request message for CreateFirebaseLink RPC */
export interface CreateFirebaseLinkRequest {
  /**
   * Required. Format: properties/{property_id}
   *
   * Example: `properties/1234`
   */
  parent: string;
  /** Required. The Firebase link to create. */
  firebaseLink: FirebaseLink | undefined;
}

/** Request message for DeleteFirebaseLink RPC */
export interface DeleteFirebaseLinkRequest {
  /**
   * Required. Format: properties/{property_id}/firebaseLinks/{firebase_link_id}
   *
   * Example: `properties/1234/firebaseLinks/5678`
   */
  name: string;
}

/** Request message for ListFirebaseLinks RPC */
export interface ListFirebaseLinksRequest {
  /**
   * Required. Format: properties/{property_id}
   *
   * Example: `properties/1234`
   */
  parent: string;
  /**
   * The maximum number of resources to return. The service may return
   * fewer than this value, even if there are additional pages.
   * If unspecified, at most 50 resources will be returned.
   * The maximum value is 200; (higher values will be coerced to the maximum)
   */
  pageSize: number;
  /**
   * A page token, received from a previous `ListFirebaseLinks` call.
   * Provide this to retrieve the subsequent page.
   * When paginating, all other parameters provided to `ListFirebaseLinks` must
   * match the call that provided the page token.
   */
  pageToken: string;
}

/** Response message for ListFirebaseLinks RPC */
export interface ListFirebaseLinksResponse {
  /** List of FirebaseLinks. This will have at most one value. */
  firebaseLinks: FirebaseLink[];
  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   * Currently, Google Analytics supports only one FirebaseLink per property,
   * so this will never be populated.
   */
  nextPageToken: string;
}

/** Request message for CreateGoogleAdsLink RPC */
export interface CreateGoogleAdsLinkRequest {
  /** Required. Example format: properties/1234 */
  parent: string;
  /** Required. The GoogleAdsLink to create. */
  googleAdsLink: GoogleAdsLink | undefined;
}

/** Request message for UpdateGoogleAdsLink RPC */
export interface UpdateGoogleAdsLinkRequest {
  /** The GoogleAdsLink to update */
  googleAdsLink:
    | GoogleAdsLink
    | undefined;
  /**
   * Required. The list of fields to be updated. Field names must be in snake
   * case (e.g., "field_to_update"). Omitted fields will not be updated. To
   * replace the entire entity, use one path with the string "*" to match all
   * fields.
   */
  updateMask: string[] | undefined;
}

/** Request message for DeleteGoogleAdsLink RPC. */
export interface DeleteGoogleAdsLinkRequest {
  /** Required. Example format: properties/1234/googleAdsLinks/5678 */
  name: string;
}

/** Request message for ListGoogleAdsLinks RPC. */
export interface ListGoogleAdsLinksRequest {
  /** Required. Example format: properties/1234 */
  parent: string;
  /**
   * The maximum number of resources to return.
   * If unspecified, at most 50 resources will be returned.
   * The maximum value is 200 (higher values will be coerced to the maximum).
   */
  pageSize: number;
  /**
   * A page token, received from a previous `ListGoogleAdsLinks` call.
   * Provide this to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to `ListGoogleAdsLinks` must
   * match the call that provided the page token.
   */
  pageToken: string;
}

/** Response message for ListGoogleAdsLinks RPC. */
export interface ListGoogleAdsLinksResponse {
  /** List of GoogleAdsLinks. */
  googleAdsLinks: GoogleAdsLink[];
  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

/** Request message for GetDataSharingSettings RPC. */
export interface GetDataSharingSettingsRequest {
  /**
   * Required. The name of the settings to lookup.
   * Format: accounts/{account}/dataSharingSettings
   *
   * Example: `accounts/1000/dataSharingSettings`
   */
  name: string;
}

/** Request message for ListAccountSummaries RPC. */
export interface ListAccountSummariesRequest {
  /**
   * The maximum number of AccountSummary resources to return. The service may
   * return fewer than this value, even if there are additional pages.
   * If unspecified, at most 50 resources will be returned.
   * The maximum value is 200; (higher values will be coerced to the maximum)
   */
  pageSize: number;
  /**
   * A page token, received from a previous `ListAccountSummaries` call.
   * Provide this to retrieve the subsequent page.
   * When paginating, all other parameters provided to `ListAccountSummaries`
   * must match the call that provided the page token.
   */
  pageToken: string;
}

/** Response message for ListAccountSummaries RPC. */
export interface ListAccountSummariesResponse {
  /** Account summaries of all accounts the caller has access to. */
  accountSummaries: AccountSummary[];
  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

/** Request message for AcknowledgeUserDataCollection RPC. */
export interface AcknowledgeUserDataCollectionRequest {
  /** Required. The property for which to acknowledge user data collection. */
  property: string;
  /**
   * Required. An acknowledgement that the caller of this method understands the
   * terms of user data collection.
   *
   * This field must contain the exact value:
   * "I acknowledge that I have the necessary privacy disclosures and rights
   * from my end users for the collection and processing of their data,
   * including the association of such data with the visitation information
   * Google Analytics collects from my site and/or app property."
   */
  acknowledgement: string;
}

/** Response message for AcknowledgeUserDataCollection RPC. */
export interface AcknowledgeUserDataCollectionResponse {
}

/** Request message for SearchChangeHistoryEvents RPC. */
export interface SearchChangeHistoryEventsRequest {
  /**
   * Required. The account resource for which to return change history
   * resources. Format: accounts/{account}
   *
   * Example: `accounts/100`
   */
  account: string;
  /**
   * Optional. Resource name for a child property. If set, only return changes
   * made to this property or its child resources.
   * Format: properties/{propertyId}
   *
   * Example: `properties/100`
   */
  property: string;
  /**
   * Optional. If set, only return changes if they are for a resource that
   * matches at least one of these types.
   */
  resourceType: ChangeHistoryResourceType[];
  /**
   * Optional. If set, only return changes that match one or more of these types
   * of actions.
   */
  action: ActionType[];
  /**
   * Optional. If set, only return changes if they are made by a user in this
   * list.
   */
  actorEmail: string[];
  /** Optional. If set, only return changes made after this time (inclusive). */
  earliestChangeTime:
    | Date
    | undefined;
  /** Optional. If set, only return changes made before this time (inclusive). */
  latestChangeTime:
    | Date
    | undefined;
  /**
   * Optional. The maximum number of ChangeHistoryEvent items to return.
   * The service may return fewer than this value, even if there are additional
   * pages. If unspecified, at most 50 items will be returned.
   * The maximum value is 200 (higher values will be coerced to the maximum).
   */
  pageSize: number;
  /**
   * Optional. A page token, received from a previous
   * `SearchChangeHistoryEvents` call. Provide this to retrieve the subsequent
   * page. When paginating, all other parameters provided to
   * `SearchChangeHistoryEvents` must match the call that provided the page
   * token.
   */
  pageToken: string;
}

/** Response message for SearchAccounts RPC. */
export interface SearchChangeHistoryEventsResponse {
  /** Results that were accessible to the caller. */
  changeHistoryEvents: ChangeHistoryEvent[];
  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

/** Request message for GetMeasurementProtocolSecret RPC. */
export interface GetMeasurementProtocolSecretRequest {
  /**
   * Required. The name of the measurement protocol secret to lookup.
   * Format:
   * properties/{property}/dataStreams/{dataStream}/measurementProtocolSecrets/{measurementProtocolSecret}
   */
  name: string;
}

/** Request message for CreateMeasurementProtocolSecret RPC */
export interface CreateMeasurementProtocolSecretRequest {
  /**
   * Required. The parent resource where this secret will be created.
   * Format: properties/{property}/dataStreams/{dataStream}
   */
  parent: string;
  /** Required. The measurement protocol secret to create. */
  measurementProtocolSecret: MeasurementProtocolSecret | undefined;
}

/** Request message for DeleteMeasurementProtocolSecret RPC */
export interface DeleteMeasurementProtocolSecretRequest {
  /**
   * Required. The name of the MeasurementProtocolSecret to delete.
   * Format:
   * properties/{property}/dataStreams/{dataStream}/measurementProtocolSecrets/{measurementProtocolSecret}
   */
  name: string;
}

/** Request message for UpdateMeasurementProtocolSecret RPC */
export interface UpdateMeasurementProtocolSecretRequest {
  /** Required. The measurement protocol secret to update. */
  measurementProtocolSecret:
    | MeasurementProtocolSecret
    | undefined;
  /**
   * Required. The list of fields to be updated. Omitted fields will not be
   * updated.
   */
  updateMask: string[] | undefined;
}

/** Request message for ListMeasurementProtocolSecret RPC */
export interface ListMeasurementProtocolSecretsRequest {
  /**
   * Required. The resource name of the parent stream.
   * Format:
   * properties/{property}/dataStreams/{dataStream}/measurementProtocolSecrets
   */
  parent: string;
  /**
   * The maximum number of resources to return.
   * If unspecified, at most 10 resources will be returned.
   * The maximum value is 10. Higher values will be coerced to the maximum.
   */
  pageSize: number;
  /**
   * A page token, received from a previous `ListMeasurementProtocolSecrets`
   * call. Provide this to retrieve the subsequent page. When paginating, all
   * other parameters provided to `ListMeasurementProtocolSecrets` must match
   * the call that provided the page token.
   */
  pageToken: string;
}

/** Response message for ListMeasurementProtocolSecret RPC */
export interface ListMeasurementProtocolSecretsResponse {
  /** A list of secrets for the parent stream specified in the request. */
  measurementProtocolSecrets: MeasurementProtocolSecret[];
  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

/** Request message for CreateConversionEvent RPC */
export interface CreateConversionEventRequest {
  /** Required. The conversion event to create. */
  conversionEvent:
    | ConversionEvent
    | undefined;
  /**
   * Required. The resource name of the parent property where this conversion
   * event will be created. Format: properties/123
   */
  parent: string;
}

/** Request message for UpdateConversionEvent RPC */
export interface UpdateConversionEventRequest {
  /**
   * Required. The conversion event to update.
   * The `name` field is used to identify the settings to be updated.
   */
  conversionEvent:
    | ConversionEvent
    | undefined;
  /**
   * Required. The list of fields to be updated. Field names must be in snake
   * case (e.g., "field_to_update"). Omitted fields will not be updated. To
   * replace the entire entity, use one path with the string "*" to match all
   * fields.
   */
  updateMask: string[] | undefined;
}

/** Request message for GetConversionEvent RPC */
export interface GetConversionEventRequest {
  /**
   * Required. The resource name of the conversion event to retrieve.
   * Format: properties/{property}/conversionEvents/{conversion_event}
   * Example: "properties/123/conversionEvents/456"
   */
  name: string;
}

/** Request message for DeleteConversionEvent RPC */
export interface DeleteConversionEventRequest {
  /**
   * Required. The resource name of the conversion event to delete.
   * Format: properties/{property}/conversionEvents/{conversion_event}
   * Example: "properties/123/conversionEvents/456"
   */
  name: string;
}

/** Request message for ListConversionEvents RPC */
export interface ListConversionEventsRequest {
  /**
   * Required. The resource name of the parent property.
   * Example: 'properties/123'
   */
  parent: string;
  /**
   * The maximum number of resources to return.
   * If unspecified, at most 50 resources will be returned.
   * The maximum value is 200; (higher values will be coerced to the maximum)
   */
  pageSize: number;
  /**
   * A page token, received from a previous `ListConversionEvents` call.
   * Provide this to retrieve the subsequent page.
   * When paginating, all other parameters provided to `ListConversionEvents`
   * must match the call that provided the page token.
   */
  pageToken: string;
}

/** Response message for ListConversionEvents RPC. */
export interface ListConversionEventsResponse {
  /** The requested conversion events */
  conversionEvents: ConversionEvent[];
  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

/** Request message for CreateKeyEvent RPC */
export interface CreateKeyEventRequest {
  /** Required. The Key Event to create. */
  keyEvent:
    | KeyEvent
    | undefined;
  /**
   * Required. The resource name of the parent property where this Key Event
   * will be created. Format: properties/123
   */
  parent: string;
}

/** Request message for UpdateKeyEvent RPC */
export interface UpdateKeyEventRequest {
  /**
   * Required. The Key Event to update.
   * The `name` field is used to identify the settings to be updated.
   */
  keyEvent:
    | KeyEvent
    | undefined;
  /**
   * Required. The list of fields to be updated. Field names must be in snake
   * case (e.g., "field_to_update"). Omitted fields will not be updated. To
   * replace the entire entity, use one path with the string "*" to match all
   * fields.
   */
  updateMask: string[] | undefined;
}

/** Request message for GetKeyEvent RPC */
export interface GetKeyEventRequest {
  /**
   * Required. The resource name of the Key Event to retrieve.
   * Format: properties/{property}/keyEvents/{key_event}
   * Example: "properties/123/keyEvents/456"
   */
  name: string;
}

/** Request message for DeleteKeyEvent RPC */
export interface DeleteKeyEventRequest {
  /**
   * Required. The resource name of the Key Event to delete.
   * Format: properties/{property}/keyEvents/{key_event}
   * Example: "properties/123/keyEvents/456"
   */
  name: string;
}

/** Request message for ListKeyEvents RPC */
export interface ListKeyEventsRequest {
  /**
   * Required. The resource name of the parent property.
   * Example: 'properties/123'
   */
  parent: string;
  /**
   * The maximum number of resources to return.
   * If unspecified, at most 50 resources will be returned.
   * The maximum value is 200; (higher values will be coerced to the maximum)
   */
  pageSize: number;
  /**
   * A page token, received from a previous `ListKeyEvents` call.
   * Provide this to retrieve the subsequent page.
   * When paginating, all other parameters provided to `ListKeyEvents`
   * must match the call that provided the page token.
   */
  pageToken: string;
}

/** Response message for ListKeyEvents RPC. */
export interface ListKeyEventsResponse {
  /** The requested Key Events */
  keyEvents: KeyEvent[];
  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

/** Request message for CreateCustomDimension RPC. */
export interface CreateCustomDimensionRequest {
  /** Required. Example format: properties/1234 */
  parent: string;
  /** Required. The CustomDimension to create. */
  customDimension: CustomDimension | undefined;
}

/** Request message for UpdateCustomDimension RPC. */
export interface UpdateCustomDimensionRequest {
  /** The CustomDimension to update */
  customDimension:
    | CustomDimension
    | undefined;
  /**
   * Required. The list of fields to be updated. Omitted fields will not be
   * updated. To replace the entire entity, use one path with the string "*" to
   * match all fields.
   */
  updateMask: string[] | undefined;
}

/** Request message for ListCustomDimensions RPC. */
export interface ListCustomDimensionsRequest {
  /** Required. Example format: properties/1234 */
  parent: string;
  /**
   * The maximum number of resources to return.
   * If unspecified, at most 50 resources will be returned.
   * The maximum value is 200 (higher values will be coerced to the maximum).
   */
  pageSize: number;
  /**
   * A page token, received from a previous `ListCustomDimensions` call.
   * Provide this to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to `ListCustomDimensions`
   * must match the call that provided the page token.
   */
  pageToken: string;
}

/** Response message for ListCustomDimensions RPC. */
export interface ListCustomDimensionsResponse {
  /** List of CustomDimensions. */
  customDimensions: CustomDimension[];
  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

/** Request message for ArchiveCustomDimension RPC. */
export interface ArchiveCustomDimensionRequest {
  /**
   * Required. The name of the CustomDimension to archive.
   * Example format: properties/1234/customDimensions/5678
   */
  name: string;
}

/** Request message for GetCustomDimension RPC. */
export interface GetCustomDimensionRequest {
  /**
   * Required. The name of the CustomDimension to get.
   * Example format: properties/1234/customDimensions/5678
   */
  name: string;
}

/** Request message for CreateCustomMetric RPC. */
export interface CreateCustomMetricRequest {
  /** Required. Example format: properties/1234 */
  parent: string;
  /** Required. The CustomMetric to create. */
  customMetric: CustomMetric | undefined;
}

/** Request message for UpdateCustomMetric RPC. */
export interface UpdateCustomMetricRequest {
  /** The CustomMetric to update */
  customMetric:
    | CustomMetric
    | undefined;
  /**
   * Required. The list of fields to be updated. Omitted fields will not be
   * updated. To replace the entire entity, use one path with the string "*" to
   * match all fields.
   */
  updateMask: string[] | undefined;
}

/** Request message for ListCustomMetrics RPC. */
export interface ListCustomMetricsRequest {
  /** Required. Example format: properties/1234 */
  parent: string;
  /**
   * The maximum number of resources to return.
   * If unspecified, at most 50 resources will be returned.
   * The maximum value is 200 (higher values will be coerced to the maximum).
   */
  pageSize: number;
  /**
   * A page token, received from a previous `ListCustomMetrics` call.
   * Provide this to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to `ListCustomMetrics` must
   * match the call that provided the page token.
   */
  pageToken: string;
}

/** Response message for ListCustomMetrics RPC. */
export interface ListCustomMetricsResponse {
  /** List of CustomMetrics. */
  customMetrics: CustomMetric[];
  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

/** Request message for ArchiveCustomMetric RPC. */
export interface ArchiveCustomMetricRequest {
  /**
   * Required. The name of the CustomMetric to archive.
   * Example format: properties/1234/customMetrics/5678
   */
  name: string;
}

/** Request message for GetCustomMetric RPC. */
export interface GetCustomMetricRequest {
  /**
   * Required. The name of the CustomMetric to get.
   * Example format: properties/1234/customMetrics/5678
   */
  name: string;
}

/** Request message for GetDataRetentionSettings RPC. */
export interface GetDataRetentionSettingsRequest {
  /**
   * Required. The name of the settings to lookup.
   * Format:
   * properties/{property}/dataRetentionSettings
   * Example: "properties/1000/dataRetentionSettings"
   */
  name: string;
}

/** Request message for UpdateDataRetentionSettings RPC. */
export interface UpdateDataRetentionSettingsRequest {
  /**
   * Required. The settings to update.
   * The `name` field is used to identify the settings to be updated.
   */
  dataRetentionSettings:
    | DataRetentionSettings
    | undefined;
  /**
   * Required. The list of fields to be updated. Field names must be in snake
   * case (e.g., "field_to_update"). Omitted fields will not be updated. To
   * replace the entire entity, use one path with the string "*" to match all
   * fields.
   */
  updateMask: string[] | undefined;
}

/** Request message for CreateDataStream RPC. */
export interface CreateDataStreamRequest {
  /** Required. Example format: properties/1234 */
  parent: string;
  /** Required. The DataStream to create. */
  dataStream: DataStream | undefined;
}

/** Request message for DeleteDataStream RPC. */
export interface DeleteDataStreamRequest {
  /**
   * Required. The name of the DataStream to delete.
   * Example format: properties/1234/dataStreams/5678
   */
  name: string;
}

/** Request message for UpdateDataStream RPC. */
export interface UpdateDataStreamRequest {
  /** The DataStream to update */
  dataStream:
    | DataStream
    | undefined;
  /**
   * Required. The list of fields to be updated. Omitted fields will not be
   * updated. To replace the entire entity, use one path with the string "*" to
   * match all fields.
   */
  updateMask: string[] | undefined;
}

/** Request message for ListDataStreams RPC. */
export interface ListDataStreamsRequest {
  /** Required. Example format: properties/1234 */
  parent: string;
  /**
   * The maximum number of resources to return.
   * If unspecified, at most 50 resources will be returned.
   * The maximum value is 200 (higher values will be coerced to the maximum).
   */
  pageSize: number;
  /**
   * A page token, received from a previous `ListDataStreams` call.
   * Provide this to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to `ListDataStreams` must
   * match the call that provided the page token.
   */
  pageToken: string;
}

/** Response message for ListDataStreams RPC. */
export interface ListDataStreamsResponse {
  /** List of DataStreams. */
  dataStreams: DataStream[];
  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

/** Request message for GetDataStream RPC. */
export interface GetDataStreamRequest {
  /**
   * Required. The name of the DataStream to get.
   * Example format: properties/1234/dataStreams/5678
   */
  name: string;
}

function createBaseRunAccessReportRequest(): RunAccessReportRequest {
  return {
    entity: "",
    dimensions: [],
    metrics: [],
    dateRanges: [],
    dimensionFilter: undefined,
    metricFilter: undefined,
    offset: Long.ZERO,
    limit: Long.ZERO,
    timeZone: "",
    orderBys: [],
    returnEntityQuota: false,
    includeAllUsers: false,
    expandGroups: false,
  };
}

export const RunAccessReportRequest: MessageFns<RunAccessReportRequest> = {
  encode(message: RunAccessReportRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.entity !== "") {
      writer.uint32(10).string(message.entity);
    }
    for (const v of message.dimensions) {
      AccessDimension.encode(v!, writer.uint32(18).fork()).join();
    }
    for (const v of message.metrics) {
      AccessMetric.encode(v!, writer.uint32(26).fork()).join();
    }
    for (const v of message.dateRanges) {
      AccessDateRange.encode(v!, writer.uint32(34).fork()).join();
    }
    if (message.dimensionFilter !== undefined) {
      AccessFilterExpression.encode(message.dimensionFilter, writer.uint32(42).fork()).join();
    }
    if (message.metricFilter !== undefined) {
      AccessFilterExpression.encode(message.metricFilter, writer.uint32(50).fork()).join();
    }
    if (!message.offset.equals(Long.ZERO)) {
      writer.uint32(56).int64(message.offset.toString());
    }
    if (!message.limit.equals(Long.ZERO)) {
      writer.uint32(64).int64(message.limit.toString());
    }
    if (message.timeZone !== "") {
      writer.uint32(74).string(message.timeZone);
    }
    for (const v of message.orderBys) {
      AccessOrderBy.encode(v!, writer.uint32(82).fork()).join();
    }
    if (message.returnEntityQuota !== false) {
      writer.uint32(88).bool(message.returnEntityQuota);
    }
    if (message.includeAllUsers !== false) {
      writer.uint32(96).bool(message.includeAllUsers);
    }
    if (message.expandGroups !== false) {
      writer.uint32(104).bool(message.expandGroups);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RunAccessReportRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRunAccessReportRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.entity = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.dimensions.push(AccessDimension.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.metrics.push(AccessMetric.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.dateRanges.push(AccessDateRange.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.dimensionFilter = AccessFilterExpression.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.metricFilter = AccessFilterExpression.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.offset = Long.fromString(reader.int64().toString());
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.limit = Long.fromString(reader.int64().toString());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.timeZone = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.orderBys.push(AccessOrderBy.decode(reader, reader.uint32()));
          continue;
        case 11:
          if (tag !== 88) {
            break;
          }

          message.returnEntityQuota = reader.bool();
          continue;
        case 12:
          if (tag !== 96) {
            break;
          }

          message.includeAllUsers = reader.bool();
          continue;
        case 13:
          if (tag !== 104) {
            break;
          }

          message.expandGroups = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RunAccessReportRequest {
    return {
      entity: isSet(object.entity) ? globalThis.String(object.entity) : "",
      dimensions: globalThis.Array.isArray(object?.dimensions)
        ? object.dimensions.map((e: any) => AccessDimension.fromJSON(e))
        : [],
      metrics: globalThis.Array.isArray(object?.metrics)
        ? object.metrics.map((e: any) => AccessMetric.fromJSON(e))
        : [],
      dateRanges: globalThis.Array.isArray(object?.dateRanges)
        ? object.dateRanges.map((e: any) => AccessDateRange.fromJSON(e))
        : [],
      dimensionFilter: isSet(object.dimensionFilter)
        ? AccessFilterExpression.fromJSON(object.dimensionFilter)
        : undefined,
      metricFilter: isSet(object.metricFilter) ? AccessFilterExpression.fromJSON(object.metricFilter) : undefined,
      offset: isSet(object.offset) ? Long.fromValue(object.offset) : Long.ZERO,
      limit: isSet(object.limit) ? Long.fromValue(object.limit) : Long.ZERO,
      timeZone: isSet(object.timeZone) ? globalThis.String(object.timeZone) : "",
      orderBys: globalThis.Array.isArray(object?.orderBys)
        ? object.orderBys.map((e: any) => AccessOrderBy.fromJSON(e))
        : [],
      returnEntityQuota: isSet(object.returnEntityQuota) ? globalThis.Boolean(object.returnEntityQuota) : false,
      includeAllUsers: isSet(object.includeAllUsers) ? globalThis.Boolean(object.includeAllUsers) : false,
      expandGroups: isSet(object.expandGroups) ? globalThis.Boolean(object.expandGroups) : false,
    };
  },

  toJSON(message: RunAccessReportRequest): unknown {
    const obj: any = {};
    if (message.entity !== "") {
      obj.entity = message.entity;
    }
    if (message.dimensions?.length) {
      obj.dimensions = message.dimensions.map((e) => AccessDimension.toJSON(e));
    }
    if (message.metrics?.length) {
      obj.metrics = message.metrics.map((e) => AccessMetric.toJSON(e));
    }
    if (message.dateRanges?.length) {
      obj.dateRanges = message.dateRanges.map((e) => AccessDateRange.toJSON(e));
    }
    if (message.dimensionFilter !== undefined) {
      obj.dimensionFilter = AccessFilterExpression.toJSON(message.dimensionFilter);
    }
    if (message.metricFilter !== undefined) {
      obj.metricFilter = AccessFilterExpression.toJSON(message.metricFilter);
    }
    if (!message.offset.equals(Long.ZERO)) {
      obj.offset = (message.offset || Long.ZERO).toString();
    }
    if (!message.limit.equals(Long.ZERO)) {
      obj.limit = (message.limit || Long.ZERO).toString();
    }
    if (message.timeZone !== "") {
      obj.timeZone = message.timeZone;
    }
    if (message.orderBys?.length) {
      obj.orderBys = message.orderBys.map((e) => AccessOrderBy.toJSON(e));
    }
    if (message.returnEntityQuota !== false) {
      obj.returnEntityQuota = message.returnEntityQuota;
    }
    if (message.includeAllUsers !== false) {
      obj.includeAllUsers = message.includeAllUsers;
    }
    if (message.expandGroups !== false) {
      obj.expandGroups = message.expandGroups;
    }
    return obj;
  },

  create(base?: DeepPartial<RunAccessReportRequest>): RunAccessReportRequest {
    return RunAccessReportRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RunAccessReportRequest>): RunAccessReportRequest {
    const message = createBaseRunAccessReportRequest();
    message.entity = object.entity ?? "";
    message.dimensions = object.dimensions?.map((e) => AccessDimension.fromPartial(e)) || [];
    message.metrics = object.metrics?.map((e) => AccessMetric.fromPartial(e)) || [];
    message.dateRanges = object.dateRanges?.map((e) => AccessDateRange.fromPartial(e)) || [];
    message.dimensionFilter = (object.dimensionFilter !== undefined && object.dimensionFilter !== null)
      ? AccessFilterExpression.fromPartial(object.dimensionFilter)
      : undefined;
    message.metricFilter = (object.metricFilter !== undefined && object.metricFilter !== null)
      ? AccessFilterExpression.fromPartial(object.metricFilter)
      : undefined;
    message.offset = (object.offset !== undefined && object.offset !== null)
      ? Long.fromValue(object.offset)
      : Long.ZERO;
    message.limit = (object.limit !== undefined && object.limit !== null) ? Long.fromValue(object.limit) : Long.ZERO;
    message.timeZone = object.timeZone ?? "";
    message.orderBys = object.orderBys?.map((e) => AccessOrderBy.fromPartial(e)) || [];
    message.returnEntityQuota = object.returnEntityQuota ?? false;
    message.includeAllUsers = object.includeAllUsers ?? false;
    message.expandGroups = object.expandGroups ?? false;
    return message;
  },
};

function createBaseRunAccessReportResponse(): RunAccessReportResponse {
  return { dimensionHeaders: [], metricHeaders: [], rows: [], rowCount: 0, quota: undefined };
}

export const RunAccessReportResponse: MessageFns<RunAccessReportResponse> = {
  encode(message: RunAccessReportResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.dimensionHeaders) {
      AccessDimensionHeader.encode(v!, writer.uint32(10).fork()).join();
    }
    for (const v of message.metricHeaders) {
      AccessMetricHeader.encode(v!, writer.uint32(18).fork()).join();
    }
    for (const v of message.rows) {
      AccessRow.encode(v!, writer.uint32(26).fork()).join();
    }
    if (message.rowCount !== 0) {
      writer.uint32(32).int32(message.rowCount);
    }
    if (message.quota !== undefined) {
      AccessQuota.encode(message.quota, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RunAccessReportResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRunAccessReportResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.dimensionHeaders.push(AccessDimensionHeader.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.metricHeaders.push(AccessMetricHeader.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.rows.push(AccessRow.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.rowCount = reader.int32();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.quota = AccessQuota.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RunAccessReportResponse {
    return {
      dimensionHeaders: globalThis.Array.isArray(object?.dimensionHeaders)
        ? object.dimensionHeaders.map((e: any) => AccessDimensionHeader.fromJSON(e))
        : [],
      metricHeaders: globalThis.Array.isArray(object?.metricHeaders)
        ? object.metricHeaders.map((e: any) => AccessMetricHeader.fromJSON(e))
        : [],
      rows: globalThis.Array.isArray(object?.rows) ? object.rows.map((e: any) => AccessRow.fromJSON(e)) : [],
      rowCount: isSet(object.rowCount) ? globalThis.Number(object.rowCount) : 0,
      quota: isSet(object.quota) ? AccessQuota.fromJSON(object.quota) : undefined,
    };
  },

  toJSON(message: RunAccessReportResponse): unknown {
    const obj: any = {};
    if (message.dimensionHeaders?.length) {
      obj.dimensionHeaders = message.dimensionHeaders.map((e) => AccessDimensionHeader.toJSON(e));
    }
    if (message.metricHeaders?.length) {
      obj.metricHeaders = message.metricHeaders.map((e) => AccessMetricHeader.toJSON(e));
    }
    if (message.rows?.length) {
      obj.rows = message.rows.map((e) => AccessRow.toJSON(e));
    }
    if (message.rowCount !== 0) {
      obj.rowCount = Math.round(message.rowCount);
    }
    if (message.quota !== undefined) {
      obj.quota = AccessQuota.toJSON(message.quota);
    }
    return obj;
  },

  create(base?: DeepPartial<RunAccessReportResponse>): RunAccessReportResponse {
    return RunAccessReportResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RunAccessReportResponse>): RunAccessReportResponse {
    const message = createBaseRunAccessReportResponse();
    message.dimensionHeaders = object.dimensionHeaders?.map((e) => AccessDimensionHeader.fromPartial(e)) || [];
    message.metricHeaders = object.metricHeaders?.map((e) => AccessMetricHeader.fromPartial(e)) || [];
    message.rows = object.rows?.map((e) => AccessRow.fromPartial(e)) || [];
    message.rowCount = object.rowCount ?? 0;
    message.quota = (object.quota !== undefined && object.quota !== null)
      ? AccessQuota.fromPartial(object.quota)
      : undefined;
    return message;
  },
};

function createBaseGetAccountRequest(): GetAccountRequest {
  return { name: "" };
}

export const GetAccountRequest: MessageFns<GetAccountRequest> = {
  encode(message: GetAccountRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAccountRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAccountRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAccountRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetAccountRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetAccountRequest>): GetAccountRequest {
    return GetAccountRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetAccountRequest>): GetAccountRequest {
    const message = createBaseGetAccountRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListAccountsRequest(): ListAccountsRequest {
  return { pageSize: 0, pageToken: "", showDeleted: false };
}

export const ListAccountsRequest: MessageFns<ListAccountsRequest> = {
  encode(message: ListAccountsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pageSize !== 0) {
      writer.uint32(8).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(18).string(message.pageToken);
    }
    if (message.showDeleted !== false) {
      writer.uint32(24).bool(message.showDeleted);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAccountsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAccountsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.showDeleted = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAccountsRequest {
    return {
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      showDeleted: isSet(object.showDeleted) ? globalThis.Boolean(object.showDeleted) : false,
    };
  },

  toJSON(message: ListAccountsRequest): unknown {
    const obj: any = {};
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.showDeleted !== false) {
      obj.showDeleted = message.showDeleted;
    }
    return obj;
  },

  create(base?: DeepPartial<ListAccountsRequest>): ListAccountsRequest {
    return ListAccountsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAccountsRequest>): ListAccountsRequest {
    const message = createBaseListAccountsRequest();
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.showDeleted = object.showDeleted ?? false;
    return message;
  },
};

function createBaseListAccountsResponse(): ListAccountsResponse {
  return { accounts: [], nextPageToken: "" };
}

export const ListAccountsResponse: MessageFns<ListAccountsResponse> = {
  encode(message: ListAccountsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.accounts) {
      Account.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAccountsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAccountsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.accounts.push(Account.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAccountsResponse {
    return {
      accounts: globalThis.Array.isArray(object?.accounts) ? object.accounts.map((e: any) => Account.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListAccountsResponse): unknown {
    const obj: any = {};
    if (message.accounts?.length) {
      obj.accounts = message.accounts.map((e) => Account.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListAccountsResponse>): ListAccountsResponse {
    return ListAccountsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAccountsResponse>): ListAccountsResponse {
    const message = createBaseListAccountsResponse();
    message.accounts = object.accounts?.map((e) => Account.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseDeleteAccountRequest(): DeleteAccountRequest {
  return { name: "" };
}

export const DeleteAccountRequest: MessageFns<DeleteAccountRequest> = {
  encode(message: DeleteAccountRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteAccountRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteAccountRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteAccountRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteAccountRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteAccountRequest>): DeleteAccountRequest {
    return DeleteAccountRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteAccountRequest>): DeleteAccountRequest {
    const message = createBaseDeleteAccountRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpdateAccountRequest(): UpdateAccountRequest {
  return { account: undefined, updateMask: undefined };
}

export const UpdateAccountRequest: MessageFns<UpdateAccountRequest> = {
  encode(message: UpdateAccountRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.account !== undefined) {
      Account.encode(message.account, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateAccountRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateAccountRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.account = Account.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateAccountRequest {
    return {
      account: isSet(object.account) ? Account.fromJSON(object.account) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateAccountRequest): unknown {
    const obj: any = {};
    if (message.account !== undefined) {
      obj.account = Account.toJSON(message.account);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateAccountRequest>): UpdateAccountRequest {
    return UpdateAccountRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateAccountRequest>): UpdateAccountRequest {
    const message = createBaseUpdateAccountRequest();
    message.account = (object.account !== undefined && object.account !== null)
      ? Account.fromPartial(object.account)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseProvisionAccountTicketRequest(): ProvisionAccountTicketRequest {
  return { account: undefined, redirectUri: "" };
}

export const ProvisionAccountTicketRequest: MessageFns<ProvisionAccountTicketRequest> = {
  encode(message: ProvisionAccountTicketRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.account !== undefined) {
      Account.encode(message.account, writer.uint32(10).fork()).join();
    }
    if (message.redirectUri !== "") {
      writer.uint32(18).string(message.redirectUri);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProvisionAccountTicketRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProvisionAccountTicketRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.account = Account.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.redirectUri = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProvisionAccountTicketRequest {
    return {
      account: isSet(object.account) ? Account.fromJSON(object.account) : undefined,
      redirectUri: isSet(object.redirectUri) ? globalThis.String(object.redirectUri) : "",
    };
  },

  toJSON(message: ProvisionAccountTicketRequest): unknown {
    const obj: any = {};
    if (message.account !== undefined) {
      obj.account = Account.toJSON(message.account);
    }
    if (message.redirectUri !== "") {
      obj.redirectUri = message.redirectUri;
    }
    return obj;
  },

  create(base?: DeepPartial<ProvisionAccountTicketRequest>): ProvisionAccountTicketRequest {
    return ProvisionAccountTicketRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ProvisionAccountTicketRequest>): ProvisionAccountTicketRequest {
    const message = createBaseProvisionAccountTicketRequest();
    message.account = (object.account !== undefined && object.account !== null)
      ? Account.fromPartial(object.account)
      : undefined;
    message.redirectUri = object.redirectUri ?? "";
    return message;
  },
};

function createBaseProvisionAccountTicketResponse(): ProvisionAccountTicketResponse {
  return { accountTicketId: "" };
}

export const ProvisionAccountTicketResponse: MessageFns<ProvisionAccountTicketResponse> = {
  encode(message: ProvisionAccountTicketResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.accountTicketId !== "") {
      writer.uint32(10).string(message.accountTicketId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProvisionAccountTicketResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProvisionAccountTicketResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.accountTicketId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProvisionAccountTicketResponse {
    return { accountTicketId: isSet(object.accountTicketId) ? globalThis.String(object.accountTicketId) : "" };
  },

  toJSON(message: ProvisionAccountTicketResponse): unknown {
    const obj: any = {};
    if (message.accountTicketId !== "") {
      obj.accountTicketId = message.accountTicketId;
    }
    return obj;
  },

  create(base?: DeepPartial<ProvisionAccountTicketResponse>): ProvisionAccountTicketResponse {
    return ProvisionAccountTicketResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ProvisionAccountTicketResponse>): ProvisionAccountTicketResponse {
    const message = createBaseProvisionAccountTicketResponse();
    message.accountTicketId = object.accountTicketId ?? "";
    return message;
  },
};

function createBaseGetPropertyRequest(): GetPropertyRequest {
  return { name: "" };
}

export const GetPropertyRequest: MessageFns<GetPropertyRequest> = {
  encode(message: GetPropertyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetPropertyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPropertyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetPropertyRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetPropertyRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetPropertyRequest>): GetPropertyRequest {
    return GetPropertyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetPropertyRequest>): GetPropertyRequest {
    const message = createBaseGetPropertyRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListPropertiesRequest(): ListPropertiesRequest {
  return { filter: "", pageSize: 0, pageToken: "", showDeleted: false };
}

export const ListPropertiesRequest: MessageFns<ListPropertiesRequest> = {
  encode(message: ListPropertiesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.filter !== "") {
      writer.uint32(10).string(message.filter);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.showDeleted !== false) {
      writer.uint32(32).bool(message.showDeleted);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListPropertiesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListPropertiesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.showDeleted = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListPropertiesRequest {
    return {
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      showDeleted: isSet(object.showDeleted) ? globalThis.Boolean(object.showDeleted) : false,
    };
  },

  toJSON(message: ListPropertiesRequest): unknown {
    const obj: any = {};
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.showDeleted !== false) {
      obj.showDeleted = message.showDeleted;
    }
    return obj;
  },

  create(base?: DeepPartial<ListPropertiesRequest>): ListPropertiesRequest {
    return ListPropertiesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListPropertiesRequest>): ListPropertiesRequest {
    const message = createBaseListPropertiesRequest();
    message.filter = object.filter ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.showDeleted = object.showDeleted ?? false;
    return message;
  },
};

function createBaseListPropertiesResponse(): ListPropertiesResponse {
  return { properties: [], nextPageToken: "" };
}

export const ListPropertiesResponse: MessageFns<ListPropertiesResponse> = {
  encode(message: ListPropertiesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.properties) {
      Property.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListPropertiesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListPropertiesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.properties.push(Property.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListPropertiesResponse {
    return {
      properties: globalThis.Array.isArray(object?.properties)
        ? object.properties.map((e: any) => Property.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListPropertiesResponse): unknown {
    const obj: any = {};
    if (message.properties?.length) {
      obj.properties = message.properties.map((e) => Property.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListPropertiesResponse>): ListPropertiesResponse {
    return ListPropertiesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListPropertiesResponse>): ListPropertiesResponse {
    const message = createBaseListPropertiesResponse();
    message.properties = object.properties?.map((e) => Property.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseUpdatePropertyRequest(): UpdatePropertyRequest {
  return { property: undefined, updateMask: undefined };
}

export const UpdatePropertyRequest: MessageFns<UpdatePropertyRequest> = {
  encode(message: UpdatePropertyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.property !== undefined) {
      Property.encode(message.property, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdatePropertyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdatePropertyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.property = Property.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdatePropertyRequest {
    return {
      property: isSet(object.property) ? Property.fromJSON(object.property) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdatePropertyRequest): unknown {
    const obj: any = {};
    if (message.property !== undefined) {
      obj.property = Property.toJSON(message.property);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdatePropertyRequest>): UpdatePropertyRequest {
    return UpdatePropertyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdatePropertyRequest>): UpdatePropertyRequest {
    const message = createBaseUpdatePropertyRequest();
    message.property = (object.property !== undefined && object.property !== null)
      ? Property.fromPartial(object.property)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseCreatePropertyRequest(): CreatePropertyRequest {
  return { property: undefined };
}

export const CreatePropertyRequest: MessageFns<CreatePropertyRequest> = {
  encode(message: CreatePropertyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.property !== undefined) {
      Property.encode(message.property, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreatePropertyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreatePropertyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.property = Property.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreatePropertyRequest {
    return { property: isSet(object.property) ? Property.fromJSON(object.property) : undefined };
  },

  toJSON(message: CreatePropertyRequest): unknown {
    const obj: any = {};
    if (message.property !== undefined) {
      obj.property = Property.toJSON(message.property);
    }
    return obj;
  },

  create(base?: DeepPartial<CreatePropertyRequest>): CreatePropertyRequest {
    return CreatePropertyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreatePropertyRequest>): CreatePropertyRequest {
    const message = createBaseCreatePropertyRequest();
    message.property = (object.property !== undefined && object.property !== null)
      ? Property.fromPartial(object.property)
      : undefined;
    return message;
  },
};

function createBaseDeletePropertyRequest(): DeletePropertyRequest {
  return { name: "" };
}

export const DeletePropertyRequest: MessageFns<DeletePropertyRequest> = {
  encode(message: DeletePropertyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeletePropertyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeletePropertyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeletePropertyRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeletePropertyRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeletePropertyRequest>): DeletePropertyRequest {
    return DeletePropertyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeletePropertyRequest>): DeletePropertyRequest {
    const message = createBaseDeletePropertyRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateFirebaseLinkRequest(): CreateFirebaseLinkRequest {
  return { parent: "", firebaseLink: undefined };
}

export const CreateFirebaseLinkRequest: MessageFns<CreateFirebaseLinkRequest> = {
  encode(message: CreateFirebaseLinkRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.firebaseLink !== undefined) {
      FirebaseLink.encode(message.firebaseLink, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateFirebaseLinkRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateFirebaseLinkRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.firebaseLink = FirebaseLink.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateFirebaseLinkRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      firebaseLink: isSet(object.firebaseLink) ? FirebaseLink.fromJSON(object.firebaseLink) : undefined,
    };
  },

  toJSON(message: CreateFirebaseLinkRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.firebaseLink !== undefined) {
      obj.firebaseLink = FirebaseLink.toJSON(message.firebaseLink);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateFirebaseLinkRequest>): CreateFirebaseLinkRequest {
    return CreateFirebaseLinkRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateFirebaseLinkRequest>): CreateFirebaseLinkRequest {
    const message = createBaseCreateFirebaseLinkRequest();
    message.parent = object.parent ?? "";
    message.firebaseLink = (object.firebaseLink !== undefined && object.firebaseLink !== null)
      ? FirebaseLink.fromPartial(object.firebaseLink)
      : undefined;
    return message;
  },
};

function createBaseDeleteFirebaseLinkRequest(): DeleteFirebaseLinkRequest {
  return { name: "" };
}

export const DeleteFirebaseLinkRequest: MessageFns<DeleteFirebaseLinkRequest> = {
  encode(message: DeleteFirebaseLinkRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteFirebaseLinkRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteFirebaseLinkRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteFirebaseLinkRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteFirebaseLinkRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteFirebaseLinkRequest>): DeleteFirebaseLinkRequest {
    return DeleteFirebaseLinkRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteFirebaseLinkRequest>): DeleteFirebaseLinkRequest {
    const message = createBaseDeleteFirebaseLinkRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListFirebaseLinksRequest(): ListFirebaseLinksRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListFirebaseLinksRequest: MessageFns<ListFirebaseLinksRequest> = {
  encode(message: ListFirebaseLinksRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListFirebaseLinksRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListFirebaseLinksRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListFirebaseLinksRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListFirebaseLinksRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListFirebaseLinksRequest>): ListFirebaseLinksRequest {
    return ListFirebaseLinksRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListFirebaseLinksRequest>): ListFirebaseLinksRequest {
    const message = createBaseListFirebaseLinksRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListFirebaseLinksResponse(): ListFirebaseLinksResponse {
  return { firebaseLinks: [], nextPageToken: "" };
}

export const ListFirebaseLinksResponse: MessageFns<ListFirebaseLinksResponse> = {
  encode(message: ListFirebaseLinksResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.firebaseLinks) {
      FirebaseLink.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListFirebaseLinksResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListFirebaseLinksResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.firebaseLinks.push(FirebaseLink.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListFirebaseLinksResponse {
    return {
      firebaseLinks: globalThis.Array.isArray(object?.firebaseLinks)
        ? object.firebaseLinks.map((e: any) => FirebaseLink.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListFirebaseLinksResponse): unknown {
    const obj: any = {};
    if (message.firebaseLinks?.length) {
      obj.firebaseLinks = message.firebaseLinks.map((e) => FirebaseLink.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListFirebaseLinksResponse>): ListFirebaseLinksResponse {
    return ListFirebaseLinksResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListFirebaseLinksResponse>): ListFirebaseLinksResponse {
    const message = createBaseListFirebaseLinksResponse();
    message.firebaseLinks = object.firebaseLinks?.map((e) => FirebaseLink.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseCreateGoogleAdsLinkRequest(): CreateGoogleAdsLinkRequest {
  return { parent: "", googleAdsLink: undefined };
}

export const CreateGoogleAdsLinkRequest: MessageFns<CreateGoogleAdsLinkRequest> = {
  encode(message: CreateGoogleAdsLinkRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.googleAdsLink !== undefined) {
      GoogleAdsLink.encode(message.googleAdsLink, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateGoogleAdsLinkRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateGoogleAdsLinkRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.googleAdsLink = GoogleAdsLink.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateGoogleAdsLinkRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      googleAdsLink: isSet(object.googleAdsLink) ? GoogleAdsLink.fromJSON(object.googleAdsLink) : undefined,
    };
  },

  toJSON(message: CreateGoogleAdsLinkRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.googleAdsLink !== undefined) {
      obj.googleAdsLink = GoogleAdsLink.toJSON(message.googleAdsLink);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateGoogleAdsLinkRequest>): CreateGoogleAdsLinkRequest {
    return CreateGoogleAdsLinkRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateGoogleAdsLinkRequest>): CreateGoogleAdsLinkRequest {
    const message = createBaseCreateGoogleAdsLinkRequest();
    message.parent = object.parent ?? "";
    message.googleAdsLink = (object.googleAdsLink !== undefined && object.googleAdsLink !== null)
      ? GoogleAdsLink.fromPartial(object.googleAdsLink)
      : undefined;
    return message;
  },
};

function createBaseUpdateGoogleAdsLinkRequest(): UpdateGoogleAdsLinkRequest {
  return { googleAdsLink: undefined, updateMask: undefined };
}

export const UpdateGoogleAdsLinkRequest: MessageFns<UpdateGoogleAdsLinkRequest> = {
  encode(message: UpdateGoogleAdsLinkRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.googleAdsLink !== undefined) {
      GoogleAdsLink.encode(message.googleAdsLink, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateGoogleAdsLinkRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateGoogleAdsLinkRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.googleAdsLink = GoogleAdsLink.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateGoogleAdsLinkRequest {
    return {
      googleAdsLink: isSet(object.googleAdsLink) ? GoogleAdsLink.fromJSON(object.googleAdsLink) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateGoogleAdsLinkRequest): unknown {
    const obj: any = {};
    if (message.googleAdsLink !== undefined) {
      obj.googleAdsLink = GoogleAdsLink.toJSON(message.googleAdsLink);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateGoogleAdsLinkRequest>): UpdateGoogleAdsLinkRequest {
    return UpdateGoogleAdsLinkRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateGoogleAdsLinkRequest>): UpdateGoogleAdsLinkRequest {
    const message = createBaseUpdateGoogleAdsLinkRequest();
    message.googleAdsLink = (object.googleAdsLink !== undefined && object.googleAdsLink !== null)
      ? GoogleAdsLink.fromPartial(object.googleAdsLink)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseDeleteGoogleAdsLinkRequest(): DeleteGoogleAdsLinkRequest {
  return { name: "" };
}

export const DeleteGoogleAdsLinkRequest: MessageFns<DeleteGoogleAdsLinkRequest> = {
  encode(message: DeleteGoogleAdsLinkRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteGoogleAdsLinkRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteGoogleAdsLinkRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteGoogleAdsLinkRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteGoogleAdsLinkRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteGoogleAdsLinkRequest>): DeleteGoogleAdsLinkRequest {
    return DeleteGoogleAdsLinkRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteGoogleAdsLinkRequest>): DeleteGoogleAdsLinkRequest {
    const message = createBaseDeleteGoogleAdsLinkRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListGoogleAdsLinksRequest(): ListGoogleAdsLinksRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListGoogleAdsLinksRequest: MessageFns<ListGoogleAdsLinksRequest> = {
  encode(message: ListGoogleAdsLinksRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListGoogleAdsLinksRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListGoogleAdsLinksRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListGoogleAdsLinksRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListGoogleAdsLinksRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListGoogleAdsLinksRequest>): ListGoogleAdsLinksRequest {
    return ListGoogleAdsLinksRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListGoogleAdsLinksRequest>): ListGoogleAdsLinksRequest {
    const message = createBaseListGoogleAdsLinksRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListGoogleAdsLinksResponse(): ListGoogleAdsLinksResponse {
  return { googleAdsLinks: [], nextPageToken: "" };
}

export const ListGoogleAdsLinksResponse: MessageFns<ListGoogleAdsLinksResponse> = {
  encode(message: ListGoogleAdsLinksResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.googleAdsLinks) {
      GoogleAdsLink.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListGoogleAdsLinksResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListGoogleAdsLinksResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.googleAdsLinks.push(GoogleAdsLink.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListGoogleAdsLinksResponse {
    return {
      googleAdsLinks: globalThis.Array.isArray(object?.googleAdsLinks)
        ? object.googleAdsLinks.map((e: any) => GoogleAdsLink.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListGoogleAdsLinksResponse): unknown {
    const obj: any = {};
    if (message.googleAdsLinks?.length) {
      obj.googleAdsLinks = message.googleAdsLinks.map((e) => GoogleAdsLink.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListGoogleAdsLinksResponse>): ListGoogleAdsLinksResponse {
    return ListGoogleAdsLinksResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListGoogleAdsLinksResponse>): ListGoogleAdsLinksResponse {
    const message = createBaseListGoogleAdsLinksResponse();
    message.googleAdsLinks = object.googleAdsLinks?.map((e) => GoogleAdsLink.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetDataSharingSettingsRequest(): GetDataSharingSettingsRequest {
  return { name: "" };
}

export const GetDataSharingSettingsRequest: MessageFns<GetDataSharingSettingsRequest> = {
  encode(message: GetDataSharingSettingsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetDataSharingSettingsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDataSharingSettingsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDataSharingSettingsRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetDataSharingSettingsRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetDataSharingSettingsRequest>): GetDataSharingSettingsRequest {
    return GetDataSharingSettingsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetDataSharingSettingsRequest>): GetDataSharingSettingsRequest {
    const message = createBaseGetDataSharingSettingsRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListAccountSummariesRequest(): ListAccountSummariesRequest {
  return { pageSize: 0, pageToken: "" };
}

export const ListAccountSummariesRequest: MessageFns<ListAccountSummariesRequest> = {
  encode(message: ListAccountSummariesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pageSize !== 0) {
      writer.uint32(8).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(18).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAccountSummariesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAccountSummariesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAccountSummariesRequest {
    return {
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListAccountSummariesRequest): unknown {
    const obj: any = {};
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListAccountSummariesRequest>): ListAccountSummariesRequest {
    return ListAccountSummariesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAccountSummariesRequest>): ListAccountSummariesRequest {
    const message = createBaseListAccountSummariesRequest();
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListAccountSummariesResponse(): ListAccountSummariesResponse {
  return { accountSummaries: [], nextPageToken: "" };
}

export const ListAccountSummariesResponse: MessageFns<ListAccountSummariesResponse> = {
  encode(message: ListAccountSummariesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.accountSummaries) {
      AccountSummary.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAccountSummariesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAccountSummariesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.accountSummaries.push(AccountSummary.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAccountSummariesResponse {
    return {
      accountSummaries: globalThis.Array.isArray(object?.accountSummaries)
        ? object.accountSummaries.map((e: any) => AccountSummary.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListAccountSummariesResponse): unknown {
    const obj: any = {};
    if (message.accountSummaries?.length) {
      obj.accountSummaries = message.accountSummaries.map((e) => AccountSummary.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListAccountSummariesResponse>): ListAccountSummariesResponse {
    return ListAccountSummariesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAccountSummariesResponse>): ListAccountSummariesResponse {
    const message = createBaseListAccountSummariesResponse();
    message.accountSummaries = object.accountSummaries?.map((e) => AccountSummary.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseAcknowledgeUserDataCollectionRequest(): AcknowledgeUserDataCollectionRequest {
  return { property: "", acknowledgement: "" };
}

export const AcknowledgeUserDataCollectionRequest: MessageFns<AcknowledgeUserDataCollectionRequest> = {
  encode(message: AcknowledgeUserDataCollectionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.property !== "") {
      writer.uint32(10).string(message.property);
    }
    if (message.acknowledgement !== "") {
      writer.uint32(18).string(message.acknowledgement);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AcknowledgeUserDataCollectionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAcknowledgeUserDataCollectionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.property = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.acknowledgement = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AcknowledgeUserDataCollectionRequest {
    return {
      property: isSet(object.property) ? globalThis.String(object.property) : "",
      acknowledgement: isSet(object.acknowledgement) ? globalThis.String(object.acknowledgement) : "",
    };
  },

  toJSON(message: AcknowledgeUserDataCollectionRequest): unknown {
    const obj: any = {};
    if (message.property !== "") {
      obj.property = message.property;
    }
    if (message.acknowledgement !== "") {
      obj.acknowledgement = message.acknowledgement;
    }
    return obj;
  },

  create(base?: DeepPartial<AcknowledgeUserDataCollectionRequest>): AcknowledgeUserDataCollectionRequest {
    return AcknowledgeUserDataCollectionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AcknowledgeUserDataCollectionRequest>): AcknowledgeUserDataCollectionRequest {
    const message = createBaseAcknowledgeUserDataCollectionRequest();
    message.property = object.property ?? "";
    message.acknowledgement = object.acknowledgement ?? "";
    return message;
  },
};

function createBaseAcknowledgeUserDataCollectionResponse(): AcknowledgeUserDataCollectionResponse {
  return {};
}

export const AcknowledgeUserDataCollectionResponse: MessageFns<AcknowledgeUserDataCollectionResponse> = {
  encode(_: AcknowledgeUserDataCollectionResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AcknowledgeUserDataCollectionResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAcknowledgeUserDataCollectionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): AcknowledgeUserDataCollectionResponse {
    return {};
  },

  toJSON(_: AcknowledgeUserDataCollectionResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<AcknowledgeUserDataCollectionResponse>): AcknowledgeUserDataCollectionResponse {
    return AcknowledgeUserDataCollectionResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<AcknowledgeUserDataCollectionResponse>): AcknowledgeUserDataCollectionResponse {
    const message = createBaseAcknowledgeUserDataCollectionResponse();
    return message;
  },
};

function createBaseSearchChangeHistoryEventsRequest(): SearchChangeHistoryEventsRequest {
  return {
    account: "",
    property: "",
    resourceType: [],
    action: [],
    actorEmail: [],
    earliestChangeTime: undefined,
    latestChangeTime: undefined,
    pageSize: 0,
    pageToken: "",
  };
}

export const SearchChangeHistoryEventsRequest: MessageFns<SearchChangeHistoryEventsRequest> = {
  encode(message: SearchChangeHistoryEventsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.account !== "") {
      writer.uint32(10).string(message.account);
    }
    if (message.property !== "") {
      writer.uint32(18).string(message.property);
    }
    writer.uint32(26).fork();
    for (const v of message.resourceType) {
      writer.int32(v);
    }
    writer.join();
    writer.uint32(34).fork();
    for (const v of message.action) {
      writer.int32(v);
    }
    writer.join();
    for (const v of message.actorEmail) {
      writer.uint32(42).string(v!);
    }
    if (message.earliestChangeTime !== undefined) {
      Timestamp.encode(toTimestamp(message.earliestChangeTime), writer.uint32(50).fork()).join();
    }
    if (message.latestChangeTime !== undefined) {
      Timestamp.encode(toTimestamp(message.latestChangeTime), writer.uint32(58).fork()).join();
    }
    if (message.pageSize !== 0) {
      writer.uint32(64).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(74).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchChangeHistoryEventsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchChangeHistoryEventsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.account = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.property = reader.string();
          continue;
        case 3:
          if (tag === 24) {
            message.resourceType.push(reader.int32() as any);

            continue;
          }

          if (tag === 26) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.resourceType.push(reader.int32() as any);
            }

            continue;
          }

          break;
        case 4:
          if (tag === 32) {
            message.action.push(reader.int32() as any);

            continue;
          }

          if (tag === 34) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.action.push(reader.int32() as any);
            }

            continue;
          }

          break;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.actorEmail.push(reader.string());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.earliestChangeTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.latestChangeTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchChangeHistoryEventsRequest {
    return {
      account: isSet(object.account) ? globalThis.String(object.account) : "",
      property: isSet(object.property) ? globalThis.String(object.property) : "",
      resourceType: globalThis.Array.isArray(object?.resourceType)
        ? object.resourceType.map((e: any) => changeHistoryResourceTypeFromJSON(e))
        : [],
      action: globalThis.Array.isArray(object?.action) ? object.action.map((e: any) => actionTypeFromJSON(e)) : [],
      actorEmail: globalThis.Array.isArray(object?.actorEmail)
        ? object.actorEmail.map((e: any) => globalThis.String(e))
        : [],
      earliestChangeTime: isSet(object.earliestChangeTime) ? fromJsonTimestamp(object.earliestChangeTime) : undefined,
      latestChangeTime: isSet(object.latestChangeTime) ? fromJsonTimestamp(object.latestChangeTime) : undefined,
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: SearchChangeHistoryEventsRequest): unknown {
    const obj: any = {};
    if (message.account !== "") {
      obj.account = message.account;
    }
    if (message.property !== "") {
      obj.property = message.property;
    }
    if (message.resourceType?.length) {
      obj.resourceType = message.resourceType.map((e) => changeHistoryResourceTypeToJSON(e));
    }
    if (message.action?.length) {
      obj.action = message.action.map((e) => actionTypeToJSON(e));
    }
    if (message.actorEmail?.length) {
      obj.actorEmail = message.actorEmail;
    }
    if (message.earliestChangeTime !== undefined) {
      obj.earliestChangeTime = message.earliestChangeTime.toISOString();
    }
    if (message.latestChangeTime !== undefined) {
      obj.latestChangeTime = message.latestChangeTime.toISOString();
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<SearchChangeHistoryEventsRequest>): SearchChangeHistoryEventsRequest {
    return SearchChangeHistoryEventsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SearchChangeHistoryEventsRequest>): SearchChangeHistoryEventsRequest {
    const message = createBaseSearchChangeHistoryEventsRequest();
    message.account = object.account ?? "";
    message.property = object.property ?? "";
    message.resourceType = object.resourceType?.map((e) => e) || [];
    message.action = object.action?.map((e) => e) || [];
    message.actorEmail = object.actorEmail?.map((e) => e) || [];
    message.earliestChangeTime = object.earliestChangeTime ?? undefined;
    message.latestChangeTime = object.latestChangeTime ?? undefined;
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseSearchChangeHistoryEventsResponse(): SearchChangeHistoryEventsResponse {
  return { changeHistoryEvents: [], nextPageToken: "" };
}

export const SearchChangeHistoryEventsResponse: MessageFns<SearchChangeHistoryEventsResponse> = {
  encode(message: SearchChangeHistoryEventsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.changeHistoryEvents) {
      ChangeHistoryEvent.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchChangeHistoryEventsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchChangeHistoryEventsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.changeHistoryEvents.push(ChangeHistoryEvent.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchChangeHistoryEventsResponse {
    return {
      changeHistoryEvents: globalThis.Array.isArray(object?.changeHistoryEvents)
        ? object.changeHistoryEvents.map((e: any) => ChangeHistoryEvent.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: SearchChangeHistoryEventsResponse): unknown {
    const obj: any = {};
    if (message.changeHistoryEvents?.length) {
      obj.changeHistoryEvents = message.changeHistoryEvents.map((e) => ChangeHistoryEvent.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<SearchChangeHistoryEventsResponse>): SearchChangeHistoryEventsResponse {
    return SearchChangeHistoryEventsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SearchChangeHistoryEventsResponse>): SearchChangeHistoryEventsResponse {
    const message = createBaseSearchChangeHistoryEventsResponse();
    message.changeHistoryEvents = object.changeHistoryEvents?.map((e) => ChangeHistoryEvent.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetMeasurementProtocolSecretRequest(): GetMeasurementProtocolSecretRequest {
  return { name: "" };
}

export const GetMeasurementProtocolSecretRequest: MessageFns<GetMeasurementProtocolSecretRequest> = {
  encode(message: GetMeasurementProtocolSecretRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetMeasurementProtocolSecretRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetMeasurementProtocolSecretRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetMeasurementProtocolSecretRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetMeasurementProtocolSecretRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetMeasurementProtocolSecretRequest>): GetMeasurementProtocolSecretRequest {
    return GetMeasurementProtocolSecretRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetMeasurementProtocolSecretRequest>): GetMeasurementProtocolSecretRequest {
    const message = createBaseGetMeasurementProtocolSecretRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateMeasurementProtocolSecretRequest(): CreateMeasurementProtocolSecretRequest {
  return { parent: "", measurementProtocolSecret: undefined };
}

export const CreateMeasurementProtocolSecretRequest: MessageFns<CreateMeasurementProtocolSecretRequest> = {
  encode(message: CreateMeasurementProtocolSecretRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.measurementProtocolSecret !== undefined) {
      MeasurementProtocolSecret.encode(message.measurementProtocolSecret, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateMeasurementProtocolSecretRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateMeasurementProtocolSecretRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.measurementProtocolSecret = MeasurementProtocolSecret.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateMeasurementProtocolSecretRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      measurementProtocolSecret: isSet(object.measurementProtocolSecret)
        ? MeasurementProtocolSecret.fromJSON(object.measurementProtocolSecret)
        : undefined,
    };
  },

  toJSON(message: CreateMeasurementProtocolSecretRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.measurementProtocolSecret !== undefined) {
      obj.measurementProtocolSecret = MeasurementProtocolSecret.toJSON(message.measurementProtocolSecret);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateMeasurementProtocolSecretRequest>): CreateMeasurementProtocolSecretRequest {
    return CreateMeasurementProtocolSecretRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateMeasurementProtocolSecretRequest>): CreateMeasurementProtocolSecretRequest {
    const message = createBaseCreateMeasurementProtocolSecretRequest();
    message.parent = object.parent ?? "";
    message.measurementProtocolSecret =
      (object.measurementProtocolSecret !== undefined && object.measurementProtocolSecret !== null)
        ? MeasurementProtocolSecret.fromPartial(object.measurementProtocolSecret)
        : undefined;
    return message;
  },
};

function createBaseDeleteMeasurementProtocolSecretRequest(): DeleteMeasurementProtocolSecretRequest {
  return { name: "" };
}

export const DeleteMeasurementProtocolSecretRequest: MessageFns<DeleteMeasurementProtocolSecretRequest> = {
  encode(message: DeleteMeasurementProtocolSecretRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteMeasurementProtocolSecretRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteMeasurementProtocolSecretRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteMeasurementProtocolSecretRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteMeasurementProtocolSecretRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteMeasurementProtocolSecretRequest>): DeleteMeasurementProtocolSecretRequest {
    return DeleteMeasurementProtocolSecretRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteMeasurementProtocolSecretRequest>): DeleteMeasurementProtocolSecretRequest {
    const message = createBaseDeleteMeasurementProtocolSecretRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpdateMeasurementProtocolSecretRequest(): UpdateMeasurementProtocolSecretRequest {
  return { measurementProtocolSecret: undefined, updateMask: undefined };
}

export const UpdateMeasurementProtocolSecretRequest: MessageFns<UpdateMeasurementProtocolSecretRequest> = {
  encode(message: UpdateMeasurementProtocolSecretRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.measurementProtocolSecret !== undefined) {
      MeasurementProtocolSecret.encode(message.measurementProtocolSecret, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateMeasurementProtocolSecretRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateMeasurementProtocolSecretRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.measurementProtocolSecret = MeasurementProtocolSecret.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateMeasurementProtocolSecretRequest {
    return {
      measurementProtocolSecret: isSet(object.measurementProtocolSecret)
        ? MeasurementProtocolSecret.fromJSON(object.measurementProtocolSecret)
        : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateMeasurementProtocolSecretRequest): unknown {
    const obj: any = {};
    if (message.measurementProtocolSecret !== undefined) {
      obj.measurementProtocolSecret = MeasurementProtocolSecret.toJSON(message.measurementProtocolSecret);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateMeasurementProtocolSecretRequest>): UpdateMeasurementProtocolSecretRequest {
    return UpdateMeasurementProtocolSecretRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateMeasurementProtocolSecretRequest>): UpdateMeasurementProtocolSecretRequest {
    const message = createBaseUpdateMeasurementProtocolSecretRequest();
    message.measurementProtocolSecret =
      (object.measurementProtocolSecret !== undefined && object.measurementProtocolSecret !== null)
        ? MeasurementProtocolSecret.fromPartial(object.measurementProtocolSecret)
        : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseListMeasurementProtocolSecretsRequest(): ListMeasurementProtocolSecretsRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListMeasurementProtocolSecretsRequest: MessageFns<ListMeasurementProtocolSecretsRequest> = {
  encode(message: ListMeasurementProtocolSecretsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListMeasurementProtocolSecretsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListMeasurementProtocolSecretsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListMeasurementProtocolSecretsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListMeasurementProtocolSecretsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListMeasurementProtocolSecretsRequest>): ListMeasurementProtocolSecretsRequest {
    return ListMeasurementProtocolSecretsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListMeasurementProtocolSecretsRequest>): ListMeasurementProtocolSecretsRequest {
    const message = createBaseListMeasurementProtocolSecretsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListMeasurementProtocolSecretsResponse(): ListMeasurementProtocolSecretsResponse {
  return { measurementProtocolSecrets: [], nextPageToken: "" };
}

export const ListMeasurementProtocolSecretsResponse: MessageFns<ListMeasurementProtocolSecretsResponse> = {
  encode(message: ListMeasurementProtocolSecretsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.measurementProtocolSecrets) {
      MeasurementProtocolSecret.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListMeasurementProtocolSecretsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListMeasurementProtocolSecretsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.measurementProtocolSecrets.push(MeasurementProtocolSecret.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListMeasurementProtocolSecretsResponse {
    return {
      measurementProtocolSecrets: globalThis.Array.isArray(object?.measurementProtocolSecrets)
        ? object.measurementProtocolSecrets.map((e: any) => MeasurementProtocolSecret.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListMeasurementProtocolSecretsResponse): unknown {
    const obj: any = {};
    if (message.measurementProtocolSecrets?.length) {
      obj.measurementProtocolSecrets = message.measurementProtocolSecrets.map((e) =>
        MeasurementProtocolSecret.toJSON(e)
      );
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListMeasurementProtocolSecretsResponse>): ListMeasurementProtocolSecretsResponse {
    return ListMeasurementProtocolSecretsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListMeasurementProtocolSecretsResponse>): ListMeasurementProtocolSecretsResponse {
    const message = createBaseListMeasurementProtocolSecretsResponse();
    message.measurementProtocolSecrets =
      object.measurementProtocolSecrets?.map((e) => MeasurementProtocolSecret.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseCreateConversionEventRequest(): CreateConversionEventRequest {
  return { conversionEvent: undefined, parent: "" };
}

export const CreateConversionEventRequest: MessageFns<CreateConversionEventRequest> = {
  encode(message: CreateConversionEventRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.conversionEvent !== undefined) {
      ConversionEvent.encode(message.conversionEvent, writer.uint32(10).fork()).join();
    }
    if (message.parent !== "") {
      writer.uint32(18).string(message.parent);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateConversionEventRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateConversionEventRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.conversionEvent = ConversionEvent.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.parent = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateConversionEventRequest {
    return {
      conversionEvent: isSet(object.conversionEvent) ? ConversionEvent.fromJSON(object.conversionEvent) : undefined,
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
    };
  },

  toJSON(message: CreateConversionEventRequest): unknown {
    const obj: any = {};
    if (message.conversionEvent !== undefined) {
      obj.conversionEvent = ConversionEvent.toJSON(message.conversionEvent);
    }
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateConversionEventRequest>): CreateConversionEventRequest {
    return CreateConversionEventRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateConversionEventRequest>): CreateConversionEventRequest {
    const message = createBaseCreateConversionEventRequest();
    message.conversionEvent = (object.conversionEvent !== undefined && object.conversionEvent !== null)
      ? ConversionEvent.fromPartial(object.conversionEvent)
      : undefined;
    message.parent = object.parent ?? "";
    return message;
  },
};

function createBaseUpdateConversionEventRequest(): UpdateConversionEventRequest {
  return { conversionEvent: undefined, updateMask: undefined };
}

export const UpdateConversionEventRequest: MessageFns<UpdateConversionEventRequest> = {
  encode(message: UpdateConversionEventRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.conversionEvent !== undefined) {
      ConversionEvent.encode(message.conversionEvent, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateConversionEventRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateConversionEventRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.conversionEvent = ConversionEvent.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateConversionEventRequest {
    return {
      conversionEvent: isSet(object.conversionEvent) ? ConversionEvent.fromJSON(object.conversionEvent) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateConversionEventRequest): unknown {
    const obj: any = {};
    if (message.conversionEvent !== undefined) {
      obj.conversionEvent = ConversionEvent.toJSON(message.conversionEvent);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateConversionEventRequest>): UpdateConversionEventRequest {
    return UpdateConversionEventRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateConversionEventRequest>): UpdateConversionEventRequest {
    const message = createBaseUpdateConversionEventRequest();
    message.conversionEvent = (object.conversionEvent !== undefined && object.conversionEvent !== null)
      ? ConversionEvent.fromPartial(object.conversionEvent)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseGetConversionEventRequest(): GetConversionEventRequest {
  return { name: "" };
}

export const GetConversionEventRequest: MessageFns<GetConversionEventRequest> = {
  encode(message: GetConversionEventRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetConversionEventRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetConversionEventRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetConversionEventRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetConversionEventRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetConversionEventRequest>): GetConversionEventRequest {
    return GetConversionEventRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetConversionEventRequest>): GetConversionEventRequest {
    const message = createBaseGetConversionEventRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseDeleteConversionEventRequest(): DeleteConversionEventRequest {
  return { name: "" };
}

export const DeleteConversionEventRequest: MessageFns<DeleteConversionEventRequest> = {
  encode(message: DeleteConversionEventRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteConversionEventRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteConversionEventRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteConversionEventRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteConversionEventRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteConversionEventRequest>): DeleteConversionEventRequest {
    return DeleteConversionEventRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteConversionEventRequest>): DeleteConversionEventRequest {
    const message = createBaseDeleteConversionEventRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListConversionEventsRequest(): ListConversionEventsRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListConversionEventsRequest: MessageFns<ListConversionEventsRequest> = {
  encode(message: ListConversionEventsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListConversionEventsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListConversionEventsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListConversionEventsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListConversionEventsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListConversionEventsRequest>): ListConversionEventsRequest {
    return ListConversionEventsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListConversionEventsRequest>): ListConversionEventsRequest {
    const message = createBaseListConversionEventsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListConversionEventsResponse(): ListConversionEventsResponse {
  return { conversionEvents: [], nextPageToken: "" };
}

export const ListConversionEventsResponse: MessageFns<ListConversionEventsResponse> = {
  encode(message: ListConversionEventsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.conversionEvents) {
      ConversionEvent.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListConversionEventsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListConversionEventsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.conversionEvents.push(ConversionEvent.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListConversionEventsResponse {
    return {
      conversionEvents: globalThis.Array.isArray(object?.conversionEvents)
        ? object.conversionEvents.map((e: any) => ConversionEvent.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListConversionEventsResponse): unknown {
    const obj: any = {};
    if (message.conversionEvents?.length) {
      obj.conversionEvents = message.conversionEvents.map((e) => ConversionEvent.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListConversionEventsResponse>): ListConversionEventsResponse {
    return ListConversionEventsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListConversionEventsResponse>): ListConversionEventsResponse {
    const message = createBaseListConversionEventsResponse();
    message.conversionEvents = object.conversionEvents?.map((e) => ConversionEvent.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseCreateKeyEventRequest(): CreateKeyEventRequest {
  return { keyEvent: undefined, parent: "" };
}

export const CreateKeyEventRequest: MessageFns<CreateKeyEventRequest> = {
  encode(message: CreateKeyEventRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.keyEvent !== undefined) {
      KeyEvent.encode(message.keyEvent, writer.uint32(10).fork()).join();
    }
    if (message.parent !== "") {
      writer.uint32(18).string(message.parent);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateKeyEventRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateKeyEventRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.keyEvent = KeyEvent.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.parent = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateKeyEventRequest {
    return {
      keyEvent: isSet(object.keyEvent) ? KeyEvent.fromJSON(object.keyEvent) : undefined,
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
    };
  },

  toJSON(message: CreateKeyEventRequest): unknown {
    const obj: any = {};
    if (message.keyEvent !== undefined) {
      obj.keyEvent = KeyEvent.toJSON(message.keyEvent);
    }
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateKeyEventRequest>): CreateKeyEventRequest {
    return CreateKeyEventRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateKeyEventRequest>): CreateKeyEventRequest {
    const message = createBaseCreateKeyEventRequest();
    message.keyEvent = (object.keyEvent !== undefined && object.keyEvent !== null)
      ? KeyEvent.fromPartial(object.keyEvent)
      : undefined;
    message.parent = object.parent ?? "";
    return message;
  },
};

function createBaseUpdateKeyEventRequest(): UpdateKeyEventRequest {
  return { keyEvent: undefined, updateMask: undefined };
}

export const UpdateKeyEventRequest: MessageFns<UpdateKeyEventRequest> = {
  encode(message: UpdateKeyEventRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.keyEvent !== undefined) {
      KeyEvent.encode(message.keyEvent, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateKeyEventRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateKeyEventRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.keyEvent = KeyEvent.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateKeyEventRequest {
    return {
      keyEvent: isSet(object.keyEvent) ? KeyEvent.fromJSON(object.keyEvent) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateKeyEventRequest): unknown {
    const obj: any = {};
    if (message.keyEvent !== undefined) {
      obj.keyEvent = KeyEvent.toJSON(message.keyEvent);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateKeyEventRequest>): UpdateKeyEventRequest {
    return UpdateKeyEventRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateKeyEventRequest>): UpdateKeyEventRequest {
    const message = createBaseUpdateKeyEventRequest();
    message.keyEvent = (object.keyEvent !== undefined && object.keyEvent !== null)
      ? KeyEvent.fromPartial(object.keyEvent)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseGetKeyEventRequest(): GetKeyEventRequest {
  return { name: "" };
}

export const GetKeyEventRequest: MessageFns<GetKeyEventRequest> = {
  encode(message: GetKeyEventRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetKeyEventRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetKeyEventRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetKeyEventRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetKeyEventRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetKeyEventRequest>): GetKeyEventRequest {
    return GetKeyEventRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetKeyEventRequest>): GetKeyEventRequest {
    const message = createBaseGetKeyEventRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseDeleteKeyEventRequest(): DeleteKeyEventRequest {
  return { name: "" };
}

export const DeleteKeyEventRequest: MessageFns<DeleteKeyEventRequest> = {
  encode(message: DeleteKeyEventRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteKeyEventRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteKeyEventRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteKeyEventRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteKeyEventRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteKeyEventRequest>): DeleteKeyEventRequest {
    return DeleteKeyEventRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteKeyEventRequest>): DeleteKeyEventRequest {
    const message = createBaseDeleteKeyEventRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListKeyEventsRequest(): ListKeyEventsRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListKeyEventsRequest: MessageFns<ListKeyEventsRequest> = {
  encode(message: ListKeyEventsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListKeyEventsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListKeyEventsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListKeyEventsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListKeyEventsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListKeyEventsRequest>): ListKeyEventsRequest {
    return ListKeyEventsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListKeyEventsRequest>): ListKeyEventsRequest {
    const message = createBaseListKeyEventsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListKeyEventsResponse(): ListKeyEventsResponse {
  return { keyEvents: [], nextPageToken: "" };
}

export const ListKeyEventsResponse: MessageFns<ListKeyEventsResponse> = {
  encode(message: ListKeyEventsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.keyEvents) {
      KeyEvent.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListKeyEventsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListKeyEventsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.keyEvents.push(KeyEvent.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListKeyEventsResponse {
    return {
      keyEvents: globalThis.Array.isArray(object?.keyEvents)
        ? object.keyEvents.map((e: any) => KeyEvent.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListKeyEventsResponse): unknown {
    const obj: any = {};
    if (message.keyEvents?.length) {
      obj.keyEvents = message.keyEvents.map((e) => KeyEvent.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListKeyEventsResponse>): ListKeyEventsResponse {
    return ListKeyEventsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListKeyEventsResponse>): ListKeyEventsResponse {
    const message = createBaseListKeyEventsResponse();
    message.keyEvents = object.keyEvents?.map((e) => KeyEvent.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseCreateCustomDimensionRequest(): CreateCustomDimensionRequest {
  return { parent: "", customDimension: undefined };
}

export const CreateCustomDimensionRequest: MessageFns<CreateCustomDimensionRequest> = {
  encode(message: CreateCustomDimensionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.customDimension !== undefined) {
      CustomDimension.encode(message.customDimension, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateCustomDimensionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateCustomDimensionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.customDimension = CustomDimension.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateCustomDimensionRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      customDimension: isSet(object.customDimension) ? CustomDimension.fromJSON(object.customDimension) : undefined,
    };
  },

  toJSON(message: CreateCustomDimensionRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.customDimension !== undefined) {
      obj.customDimension = CustomDimension.toJSON(message.customDimension);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateCustomDimensionRequest>): CreateCustomDimensionRequest {
    return CreateCustomDimensionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateCustomDimensionRequest>): CreateCustomDimensionRequest {
    const message = createBaseCreateCustomDimensionRequest();
    message.parent = object.parent ?? "";
    message.customDimension = (object.customDimension !== undefined && object.customDimension !== null)
      ? CustomDimension.fromPartial(object.customDimension)
      : undefined;
    return message;
  },
};

function createBaseUpdateCustomDimensionRequest(): UpdateCustomDimensionRequest {
  return { customDimension: undefined, updateMask: undefined };
}

export const UpdateCustomDimensionRequest: MessageFns<UpdateCustomDimensionRequest> = {
  encode(message: UpdateCustomDimensionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.customDimension !== undefined) {
      CustomDimension.encode(message.customDimension, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateCustomDimensionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateCustomDimensionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customDimension = CustomDimension.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateCustomDimensionRequest {
    return {
      customDimension: isSet(object.customDimension) ? CustomDimension.fromJSON(object.customDimension) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateCustomDimensionRequest): unknown {
    const obj: any = {};
    if (message.customDimension !== undefined) {
      obj.customDimension = CustomDimension.toJSON(message.customDimension);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateCustomDimensionRequest>): UpdateCustomDimensionRequest {
    return UpdateCustomDimensionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateCustomDimensionRequest>): UpdateCustomDimensionRequest {
    const message = createBaseUpdateCustomDimensionRequest();
    message.customDimension = (object.customDimension !== undefined && object.customDimension !== null)
      ? CustomDimension.fromPartial(object.customDimension)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseListCustomDimensionsRequest(): ListCustomDimensionsRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListCustomDimensionsRequest: MessageFns<ListCustomDimensionsRequest> = {
  encode(message: ListCustomDimensionsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListCustomDimensionsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListCustomDimensionsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListCustomDimensionsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListCustomDimensionsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListCustomDimensionsRequest>): ListCustomDimensionsRequest {
    return ListCustomDimensionsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListCustomDimensionsRequest>): ListCustomDimensionsRequest {
    const message = createBaseListCustomDimensionsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListCustomDimensionsResponse(): ListCustomDimensionsResponse {
  return { customDimensions: [], nextPageToken: "" };
}

export const ListCustomDimensionsResponse: MessageFns<ListCustomDimensionsResponse> = {
  encode(message: ListCustomDimensionsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.customDimensions) {
      CustomDimension.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListCustomDimensionsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListCustomDimensionsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customDimensions.push(CustomDimension.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListCustomDimensionsResponse {
    return {
      customDimensions: globalThis.Array.isArray(object?.customDimensions)
        ? object.customDimensions.map((e: any) => CustomDimension.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListCustomDimensionsResponse): unknown {
    const obj: any = {};
    if (message.customDimensions?.length) {
      obj.customDimensions = message.customDimensions.map((e) => CustomDimension.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListCustomDimensionsResponse>): ListCustomDimensionsResponse {
    return ListCustomDimensionsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListCustomDimensionsResponse>): ListCustomDimensionsResponse {
    const message = createBaseListCustomDimensionsResponse();
    message.customDimensions = object.customDimensions?.map((e) => CustomDimension.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseArchiveCustomDimensionRequest(): ArchiveCustomDimensionRequest {
  return { name: "" };
}

export const ArchiveCustomDimensionRequest: MessageFns<ArchiveCustomDimensionRequest> = {
  encode(message: ArchiveCustomDimensionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ArchiveCustomDimensionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseArchiveCustomDimensionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ArchiveCustomDimensionRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: ArchiveCustomDimensionRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<ArchiveCustomDimensionRequest>): ArchiveCustomDimensionRequest {
    return ArchiveCustomDimensionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ArchiveCustomDimensionRequest>): ArchiveCustomDimensionRequest {
    const message = createBaseArchiveCustomDimensionRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseGetCustomDimensionRequest(): GetCustomDimensionRequest {
  return { name: "" };
}

export const GetCustomDimensionRequest: MessageFns<GetCustomDimensionRequest> = {
  encode(message: GetCustomDimensionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCustomDimensionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCustomDimensionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCustomDimensionRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetCustomDimensionRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetCustomDimensionRequest>): GetCustomDimensionRequest {
    return GetCustomDimensionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetCustomDimensionRequest>): GetCustomDimensionRequest {
    const message = createBaseGetCustomDimensionRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateCustomMetricRequest(): CreateCustomMetricRequest {
  return { parent: "", customMetric: undefined };
}

export const CreateCustomMetricRequest: MessageFns<CreateCustomMetricRequest> = {
  encode(message: CreateCustomMetricRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.customMetric !== undefined) {
      CustomMetric.encode(message.customMetric, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateCustomMetricRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateCustomMetricRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.customMetric = CustomMetric.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateCustomMetricRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      customMetric: isSet(object.customMetric) ? CustomMetric.fromJSON(object.customMetric) : undefined,
    };
  },

  toJSON(message: CreateCustomMetricRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.customMetric !== undefined) {
      obj.customMetric = CustomMetric.toJSON(message.customMetric);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateCustomMetricRequest>): CreateCustomMetricRequest {
    return CreateCustomMetricRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateCustomMetricRequest>): CreateCustomMetricRequest {
    const message = createBaseCreateCustomMetricRequest();
    message.parent = object.parent ?? "";
    message.customMetric = (object.customMetric !== undefined && object.customMetric !== null)
      ? CustomMetric.fromPartial(object.customMetric)
      : undefined;
    return message;
  },
};

function createBaseUpdateCustomMetricRequest(): UpdateCustomMetricRequest {
  return { customMetric: undefined, updateMask: undefined };
}

export const UpdateCustomMetricRequest: MessageFns<UpdateCustomMetricRequest> = {
  encode(message: UpdateCustomMetricRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.customMetric !== undefined) {
      CustomMetric.encode(message.customMetric, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateCustomMetricRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateCustomMetricRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customMetric = CustomMetric.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateCustomMetricRequest {
    return {
      customMetric: isSet(object.customMetric) ? CustomMetric.fromJSON(object.customMetric) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateCustomMetricRequest): unknown {
    const obj: any = {};
    if (message.customMetric !== undefined) {
      obj.customMetric = CustomMetric.toJSON(message.customMetric);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateCustomMetricRequest>): UpdateCustomMetricRequest {
    return UpdateCustomMetricRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateCustomMetricRequest>): UpdateCustomMetricRequest {
    const message = createBaseUpdateCustomMetricRequest();
    message.customMetric = (object.customMetric !== undefined && object.customMetric !== null)
      ? CustomMetric.fromPartial(object.customMetric)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseListCustomMetricsRequest(): ListCustomMetricsRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListCustomMetricsRequest: MessageFns<ListCustomMetricsRequest> = {
  encode(message: ListCustomMetricsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListCustomMetricsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListCustomMetricsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListCustomMetricsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListCustomMetricsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListCustomMetricsRequest>): ListCustomMetricsRequest {
    return ListCustomMetricsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListCustomMetricsRequest>): ListCustomMetricsRequest {
    const message = createBaseListCustomMetricsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListCustomMetricsResponse(): ListCustomMetricsResponse {
  return { customMetrics: [], nextPageToken: "" };
}

export const ListCustomMetricsResponse: MessageFns<ListCustomMetricsResponse> = {
  encode(message: ListCustomMetricsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.customMetrics) {
      CustomMetric.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListCustomMetricsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListCustomMetricsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customMetrics.push(CustomMetric.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListCustomMetricsResponse {
    return {
      customMetrics: globalThis.Array.isArray(object?.customMetrics)
        ? object.customMetrics.map((e: any) => CustomMetric.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListCustomMetricsResponse): unknown {
    const obj: any = {};
    if (message.customMetrics?.length) {
      obj.customMetrics = message.customMetrics.map((e) => CustomMetric.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListCustomMetricsResponse>): ListCustomMetricsResponse {
    return ListCustomMetricsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListCustomMetricsResponse>): ListCustomMetricsResponse {
    const message = createBaseListCustomMetricsResponse();
    message.customMetrics = object.customMetrics?.map((e) => CustomMetric.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseArchiveCustomMetricRequest(): ArchiveCustomMetricRequest {
  return { name: "" };
}

export const ArchiveCustomMetricRequest: MessageFns<ArchiveCustomMetricRequest> = {
  encode(message: ArchiveCustomMetricRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ArchiveCustomMetricRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseArchiveCustomMetricRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ArchiveCustomMetricRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: ArchiveCustomMetricRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<ArchiveCustomMetricRequest>): ArchiveCustomMetricRequest {
    return ArchiveCustomMetricRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ArchiveCustomMetricRequest>): ArchiveCustomMetricRequest {
    const message = createBaseArchiveCustomMetricRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseGetCustomMetricRequest(): GetCustomMetricRequest {
  return { name: "" };
}

export const GetCustomMetricRequest: MessageFns<GetCustomMetricRequest> = {
  encode(message: GetCustomMetricRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCustomMetricRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCustomMetricRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCustomMetricRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetCustomMetricRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetCustomMetricRequest>): GetCustomMetricRequest {
    return GetCustomMetricRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetCustomMetricRequest>): GetCustomMetricRequest {
    const message = createBaseGetCustomMetricRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseGetDataRetentionSettingsRequest(): GetDataRetentionSettingsRequest {
  return { name: "" };
}

export const GetDataRetentionSettingsRequest: MessageFns<GetDataRetentionSettingsRequest> = {
  encode(message: GetDataRetentionSettingsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetDataRetentionSettingsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDataRetentionSettingsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDataRetentionSettingsRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetDataRetentionSettingsRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetDataRetentionSettingsRequest>): GetDataRetentionSettingsRequest {
    return GetDataRetentionSettingsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetDataRetentionSettingsRequest>): GetDataRetentionSettingsRequest {
    const message = createBaseGetDataRetentionSettingsRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpdateDataRetentionSettingsRequest(): UpdateDataRetentionSettingsRequest {
  return { dataRetentionSettings: undefined, updateMask: undefined };
}

export const UpdateDataRetentionSettingsRequest: MessageFns<UpdateDataRetentionSettingsRequest> = {
  encode(message: UpdateDataRetentionSettingsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.dataRetentionSettings !== undefined) {
      DataRetentionSettings.encode(message.dataRetentionSettings, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateDataRetentionSettingsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateDataRetentionSettingsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.dataRetentionSettings = DataRetentionSettings.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateDataRetentionSettingsRequest {
    return {
      dataRetentionSettings: isSet(object.dataRetentionSettings)
        ? DataRetentionSettings.fromJSON(object.dataRetentionSettings)
        : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateDataRetentionSettingsRequest): unknown {
    const obj: any = {};
    if (message.dataRetentionSettings !== undefined) {
      obj.dataRetentionSettings = DataRetentionSettings.toJSON(message.dataRetentionSettings);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateDataRetentionSettingsRequest>): UpdateDataRetentionSettingsRequest {
    return UpdateDataRetentionSettingsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateDataRetentionSettingsRequest>): UpdateDataRetentionSettingsRequest {
    const message = createBaseUpdateDataRetentionSettingsRequest();
    message.dataRetentionSettings =
      (object.dataRetentionSettings !== undefined && object.dataRetentionSettings !== null)
        ? DataRetentionSettings.fromPartial(object.dataRetentionSettings)
        : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseCreateDataStreamRequest(): CreateDataStreamRequest {
  return { parent: "", dataStream: undefined };
}

export const CreateDataStreamRequest: MessageFns<CreateDataStreamRequest> = {
  encode(message: CreateDataStreamRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.dataStream !== undefined) {
      DataStream.encode(message.dataStream, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateDataStreamRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateDataStreamRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.dataStream = DataStream.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateDataStreamRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      dataStream: isSet(object.dataStream) ? DataStream.fromJSON(object.dataStream) : undefined,
    };
  },

  toJSON(message: CreateDataStreamRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.dataStream !== undefined) {
      obj.dataStream = DataStream.toJSON(message.dataStream);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateDataStreamRequest>): CreateDataStreamRequest {
    return CreateDataStreamRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateDataStreamRequest>): CreateDataStreamRequest {
    const message = createBaseCreateDataStreamRequest();
    message.parent = object.parent ?? "";
    message.dataStream = (object.dataStream !== undefined && object.dataStream !== null)
      ? DataStream.fromPartial(object.dataStream)
      : undefined;
    return message;
  },
};

function createBaseDeleteDataStreamRequest(): DeleteDataStreamRequest {
  return { name: "" };
}

export const DeleteDataStreamRequest: MessageFns<DeleteDataStreamRequest> = {
  encode(message: DeleteDataStreamRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteDataStreamRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteDataStreamRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteDataStreamRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteDataStreamRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteDataStreamRequest>): DeleteDataStreamRequest {
    return DeleteDataStreamRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteDataStreamRequest>): DeleteDataStreamRequest {
    const message = createBaseDeleteDataStreamRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpdateDataStreamRequest(): UpdateDataStreamRequest {
  return { dataStream: undefined, updateMask: undefined };
}

export const UpdateDataStreamRequest: MessageFns<UpdateDataStreamRequest> = {
  encode(message: UpdateDataStreamRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.dataStream !== undefined) {
      DataStream.encode(message.dataStream, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateDataStreamRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateDataStreamRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.dataStream = DataStream.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateDataStreamRequest {
    return {
      dataStream: isSet(object.dataStream) ? DataStream.fromJSON(object.dataStream) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateDataStreamRequest): unknown {
    const obj: any = {};
    if (message.dataStream !== undefined) {
      obj.dataStream = DataStream.toJSON(message.dataStream);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateDataStreamRequest>): UpdateDataStreamRequest {
    return UpdateDataStreamRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateDataStreamRequest>): UpdateDataStreamRequest {
    const message = createBaseUpdateDataStreamRequest();
    message.dataStream = (object.dataStream !== undefined && object.dataStream !== null)
      ? DataStream.fromPartial(object.dataStream)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseListDataStreamsRequest(): ListDataStreamsRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListDataStreamsRequest: MessageFns<ListDataStreamsRequest> = {
  encode(message: ListDataStreamsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListDataStreamsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListDataStreamsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListDataStreamsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListDataStreamsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListDataStreamsRequest>): ListDataStreamsRequest {
    return ListDataStreamsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListDataStreamsRequest>): ListDataStreamsRequest {
    const message = createBaseListDataStreamsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListDataStreamsResponse(): ListDataStreamsResponse {
  return { dataStreams: [], nextPageToken: "" };
}

export const ListDataStreamsResponse: MessageFns<ListDataStreamsResponse> = {
  encode(message: ListDataStreamsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.dataStreams) {
      DataStream.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListDataStreamsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListDataStreamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.dataStreams.push(DataStream.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListDataStreamsResponse {
    return {
      dataStreams: globalThis.Array.isArray(object?.dataStreams)
        ? object.dataStreams.map((e: any) => DataStream.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListDataStreamsResponse): unknown {
    const obj: any = {};
    if (message.dataStreams?.length) {
      obj.dataStreams = message.dataStreams.map((e) => DataStream.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListDataStreamsResponse>): ListDataStreamsResponse {
    return ListDataStreamsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListDataStreamsResponse>): ListDataStreamsResponse {
    const message = createBaseListDataStreamsResponse();
    message.dataStreams = object.dataStreams?.map((e) => DataStream.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetDataStreamRequest(): GetDataStreamRequest {
  return { name: "" };
}

export const GetDataStreamRequest: MessageFns<GetDataStreamRequest> = {
  encode(message: GetDataStreamRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetDataStreamRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDataStreamRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDataStreamRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetDataStreamRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetDataStreamRequest>): GetDataStreamRequest {
    return GetDataStreamRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetDataStreamRequest>): GetDataStreamRequest {
    const message = createBaseGetDataStreamRequest();
    message.name = object.name ?? "";
    return message;
  },
};

/** Service Interface for the Analytics Admin API (GA4). */
export type AnalyticsAdminServiceDefinition = typeof AnalyticsAdminServiceDefinition;
export const AnalyticsAdminServiceDefinition = {
  name: "AnalyticsAdminService",
  fullName: "google.analytics.admin.v1beta.AnalyticsAdminService",
  methods: {
    /** Lookup for a single Account. */
    getAccount: {
      name: "GetAccount",
      requestType: GetAccountRequest,
      requestStream: false,
      responseType: Account,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              27,
              18,
              25,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Returns all accounts accessible by the caller.
     *
     * Note that these accounts might not currently have GA4 properties.
     * Soft-deleted (ie: "trashed") accounts are excluded by default.
     * Returns an empty list if no relevant accounts are found.
     */
    listAccounts: {
      name: "ListAccounts",
      requestType: ListAccountsRequest,
      requestStream: false,
      responseType: ListAccountsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([18, 18, 16, 47, 118, 49, 98, 101, 116, 97, 47, 97, 99, 99, 111, 117, 110, 116, 115]),
          ],
        },
      },
    },
    /**
     * Marks target Account as soft-deleted (ie: "trashed") and returns it.
     *
     * This API does not have a method to restore soft-deleted accounts.
     * However, they can be restored using the Trash Can UI.
     *
     * If the accounts are not restored before the expiration time, the account
     * and all child resources (eg: Properties, GoogleAdsLinks, Streams,
     * AccessBindings) will be permanently purged.
     * https://support.google.com/analytics/answer/6154772
     *
     * Returns an error if the target is not found.
     */
    deleteAccount: {
      name: "DeleteAccount",
      requestType: DeleteAccountRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              27,
              42,
              25,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Updates an account. */
    updateAccount: {
      name: "UpdateAccount",
      requestType: UpdateAccountRequest,
      requestStream: false,
      responseType: Account,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([19, 97, 99, 99, 111, 117, 110, 116, 44, 117, 112, 100, 97, 116, 101, 95, 109, 97, 115, 107]),
          ],
          578365826: [
            Buffer.from([
              44,
              58,
              7,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              50,
              33,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              46,
              110,
              97,
              109,
              101,
              61,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Requests a ticket for creating an account. */
    provisionAccountTicket: {
      name: "ProvisionAccountTicket",
      requestType: ProvisionAccountTicketRequest,
      requestStream: false,
      responseType: ProvisionAccountTicketResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              44,
              58,
              1,
              42,
              34,
              39,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              58,
              112,
              114,
              111,
              118,
              105,
              115,
              105,
              111,
              110,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              84,
              105,
              99,
              107,
              101,
              116,
            ]),
          ],
        },
      },
    },
    /** Returns summaries of all accounts accessible by the caller. */
    listAccountSummaries: {
      name: "ListAccountSummaries",
      requestType: ListAccountSummariesRequest,
      requestStream: false,
      responseType: ListAccountSummariesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              26,
              18,
              24,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              83,
              117,
              109,
              109,
              97,
              114,
              105,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Lookup for a single "GA4" Property. */
    getProperty: {
      name: "GetProperty",
      requestType: GetPropertyRequest,
      requestStream: false,
      responseType: Property,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              29,
              18,
              27,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Returns child Properties under the specified parent Account.
     *
     * Only "GA4" properties will be returned.
     * Properties will be excluded if the caller does not have access.
     * Soft-deleted (ie: "trashed") properties are excluded by default.
     * Returns an empty list if no relevant properties are found.
     */
    listProperties: {
      name: "ListProperties",
      requestType: ListPropertiesRequest,
      requestStream: false,
      responseType: ListPropertiesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              20,
              18,
              18,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Creates an "GA4" property with the specified location and attributes. */
    createProperty: {
      name: "CreateProperty",
      requestType: CreatePropertyRequest,
      requestStream: false,
      responseType: Property,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([8, 112, 114, 111, 112, 101, 114, 116, 121])],
          578365826: [
            Buffer.from([
              30,
              58,
              8,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              121,
              34,
              18,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Marks target Property as soft-deleted (ie: "trashed") and returns it.
     *
     * This API does not have a method to restore soft-deleted properties.
     * However, they can be restored using the Trash Can UI.
     *
     * If the properties are not restored before the expiration time, the Property
     * and all child resources (eg: GoogleAdsLinks, Streams, AccessBindings)
     * will be permanently purged.
     * https://support.google.com/analytics/answer/6154772
     *
     * Returns an error if the target is not found, or is not a GA4 Property.
     */
    deleteProperty: {
      name: "DeleteProperty",
      requestType: DeletePropertyRequest,
      requestStream: false,
      responseType: Property,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              29,
              42,
              27,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Updates a property. */
    updateProperty: {
      name: "UpdateProperty",
      requestType: UpdatePropertyRequest,
      requestStream: false,
      responseType: Property,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              20,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              121,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              48,
              58,
              8,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              121,
              50,
              36,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              121,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Creates a FirebaseLink.
     *
     * Properties can have at most one FirebaseLink.
     */
    createFirebaseLink: {
      name: "CreateFirebaseLink",
      requestType: CreateFirebaseLinkRequest,
      requestStream: false,
      responseType: FirebaseLink,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              20,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              102,
              105,
              114,
              101,
              98,
              97,
              115,
              101,
              95,
              108,
              105,
              110,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              60,
              58,
              13,
              102,
              105,
              114,
              101,
              98,
              97,
              115,
              101,
              95,
              108,
              105,
              110,
              107,
              34,
              43,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              125,
              47,
              102,
              105,
              114,
              101,
              98,
              97,
              115,
              101,
              76,
              105,
              110,
              107,
              115,
            ]),
          ],
        },
      },
    },
    /** Deletes a FirebaseLink on a property */
    deleteFirebaseLink: {
      name: "DeleteFirebaseLink",
      requestType: DeleteFirebaseLinkRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              45,
              42,
              43,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              102,
              105,
              114,
              101,
              98,
              97,
              115,
              101,
              76,
              105,
              110,
              107,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Lists FirebaseLinks on a property.
     * Properties can have at most one FirebaseLink.
     */
    listFirebaseLinks: {
      name: "ListFirebaseLinks",
      requestType: ListFirebaseLinksRequest,
      requestStream: false,
      responseType: ListFirebaseLinksResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              45,
              18,
              43,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              125,
              47,
              102,
              105,
              114,
              101,
              98,
              97,
              115,
              101,
              76,
              105,
              110,
              107,
              115,
            ]),
          ],
        },
      },
    },
    /** Creates a GoogleAdsLink. */
    createGoogleAdsLink: {
      name: "CreateGoogleAdsLink",
      requestType: CreateGoogleAdsLinkRequest,
      requestStream: false,
      responseType: GoogleAdsLink,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              22,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              103,
              111,
              111,
              103,
              108,
              101,
              95,
              97,
              100,
              115,
              95,
              108,
              105,
              110,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              63,
              58,
              15,
              103,
              111,
              111,
              103,
              108,
              101,
              95,
              97,
              100,
              115,
              95,
              108,
              105,
              110,
              107,
              34,
              44,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              125,
              47,
              103,
              111,
              111,
              103,
              108,
              101,
              65,
              100,
              115,
              76,
              105,
              110,
              107,
              115,
            ]),
          ],
        },
      },
    },
    /** Updates a GoogleAdsLink on a property */
    updateGoogleAdsLink: {
      name: "UpdateGoogleAdsLink",
      requestType: UpdateGoogleAdsLinkRequest,
      requestStream: false,
      responseType: GoogleAdsLink,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              27,
              103,
              111,
              111,
              103,
              108,
              101,
              95,
              97,
              100,
              115,
              95,
              108,
              105,
              110,
              107,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              79,
              58,
              15,
              103,
              111,
              111,
              103,
              108,
              101,
              95,
              97,
              100,
              115,
              95,
              108,
              105,
              110,
              107,
              50,
              60,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              103,
              111,
              111,
              103,
              108,
              101,
              95,
              97,
              100,
              115,
              95,
              108,
              105,
              110,
              107,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              103,
              111,
              111,
              103,
              108,
              101,
              65,
              100,
              115,
              76,
              105,
              110,
              107,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes a GoogleAdsLink on a property */
    deleteGoogleAdsLink: {
      name: "DeleteGoogleAdsLink",
      requestType: DeleteGoogleAdsLinkRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              46,
              42,
              44,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              103,
              111,
              111,
              103,
              108,
              101,
              65,
              100,
              115,
              76,
              105,
              110,
              107,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists GoogleAdsLinks on a property. */
    listGoogleAdsLinks: {
      name: "ListGoogleAdsLinks",
      requestType: ListGoogleAdsLinksRequest,
      requestStream: false,
      responseType: ListGoogleAdsLinksResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              46,
              18,
              44,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              125,
              47,
              103,
              111,
              111,
              103,
              108,
              101,
              65,
              100,
              115,
              76,
              105,
              110,
              107,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Get data sharing settings on an account.
     * Data sharing settings are singletons.
     */
    getDataSharingSettings: {
      name: "GetDataSharingSettings",
      requestType: GetDataSharingSettingsRequest,
      requestStream: false,
      responseType: DataSharingSettings,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              47,
              18,
              45,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              104,
              97,
              114,
              105,
              110,
              103,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              125,
            ]),
          ],
        },
      },
    },
    /** Lookup for a single "GA4" MeasurementProtocolSecret. */
    getMeasurementProtocolSecret: {
      name: "GetMeasurementProtocolSecret",
      requestType: GetMeasurementProtocolSecretRequest,
      requestStream: false,
      responseType: MeasurementProtocolSecret,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              72,
              18,
              70,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              114,
              101,
              97,
              109,
              115,
              47,
              42,
              47,
              109,
              101,
              97,
              115,
              117,
              114,
              101,
              109,
              101,
              110,
              116,
              80,
              114,
              111,
              116,
              111,
              99,
              111,
              108,
              83,
              101,
              99,
              114,
              101,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Returns child MeasurementProtocolSecrets under the specified parent
     * Property.
     */
    listMeasurementProtocolSecrets: {
      name: "ListMeasurementProtocolSecrets",
      requestType: ListMeasurementProtocolSecretsRequest,
      requestStream: false,
      responseType: ListMeasurementProtocolSecretsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              72,
              18,
              70,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              114,
              101,
              97,
              109,
              115,
              47,
              42,
              125,
              47,
              109,
              101,
              97,
              115,
              117,
              114,
              101,
              109,
              101,
              110,
              116,
              80,
              114,
              111,
              116,
              111,
              99,
              111,
              108,
              83,
              101,
              99,
              114,
              101,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /** Creates a measurement protocol secret. */
    createMeasurementProtocolSecret: {
      name: "CreateMeasurementProtocolSecret",
      requestType: CreateMeasurementProtocolSecretRequest,
      requestStream: false,
      responseType: MeasurementProtocolSecret,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              34,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              109,
              101,
              97,
              115,
              117,
              114,
              101,
              109,
              101,
              110,
              116,
              95,
              112,
              114,
              111,
              116,
              111,
              99,
              111,
              108,
              95,
              115,
              101,
              99,
              114,
              101,
              116,
            ]),
          ],
          578365826: [
            Buffer.from([
              101,
              58,
              27,
              109,
              101,
              97,
              115,
              117,
              114,
              101,
              109,
              101,
              110,
              116,
              95,
              112,
              114,
              111,
              116,
              111,
              99,
              111,
              108,
              95,
              115,
              101,
              99,
              114,
              101,
              116,
              34,
              70,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              114,
              101,
              97,
              109,
              115,
              47,
              42,
              125,
              47,
              109,
              101,
              97,
              115,
              117,
              114,
              101,
              109,
              101,
              110,
              116,
              80,
              114,
              111,
              116,
              111,
              99,
              111,
              108,
              83,
              101,
              99,
              114,
              101,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /** Deletes target MeasurementProtocolSecret. */
    deleteMeasurementProtocolSecret: {
      name: "DeleteMeasurementProtocolSecret",
      requestType: DeleteMeasurementProtocolSecretRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              72,
              42,
              70,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              114,
              101,
              97,
              109,
              115,
              47,
              42,
              47,
              109,
              101,
              97,
              115,
              117,
              114,
              101,
              109,
              101,
              110,
              116,
              80,
              114,
              111,
              116,
              111,
              99,
              111,
              108,
              83,
              101,
              99,
              114,
              101,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Updates a measurement protocol secret. */
    updateMeasurementProtocolSecret: {
      name: "UpdateMeasurementProtocolSecret",
      requestType: UpdateMeasurementProtocolSecretRequest,
      requestStream: false,
      responseType: MeasurementProtocolSecret,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              39,
              109,
              101,
              97,
              115,
              117,
              114,
              101,
              109,
              101,
              110,
              116,
              95,
              112,
              114,
              111,
              116,
              111,
              99,
              111,
              108,
              95,
              115,
              101,
              99,
              114,
              101,
              116,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              129,
              1,
              58,
              27,
              109,
              101,
              97,
              115,
              117,
              114,
              101,
              109,
              101,
              110,
              116,
              95,
              112,
              114,
              111,
              116,
              111,
              99,
              111,
              108,
              95,
              115,
              101,
              99,
              114,
              101,
              116,
              50,
              98,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              109,
              101,
              97,
              115,
              117,
              114,
              101,
              109,
              101,
              110,
              116,
              95,
              112,
              114,
              111,
              116,
              111,
              99,
              111,
              108,
              95,
              115,
              101,
              99,
              114,
              101,
              116,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              114,
              101,
              97,
              109,
              115,
              47,
              42,
              47,
              109,
              101,
              97,
              115,
              117,
              114,
              101,
              109,
              101,
              110,
              116,
              80,
              114,
              111,
              116,
              111,
              99,
              111,
              108,
              83,
              101,
              99,
              114,
              101,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Acknowledges the terms of user data collection for the specified property.
     *
     * This acknowledgement must be completed (either in the Google Analytics UI
     * or through this API) before MeasurementProtocolSecret resources may be
     * created.
     */
    acknowledgeUserDataCollection: {
      name: "AcknowledgeUserDataCollection",
      requestType: AcknowledgeUserDataCollectionRequest,
      requestStream: false,
      responseType: AcknowledgeUserDataCollectionResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              66,
              58,
              1,
              42,
              34,
              61,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              121,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              125,
              58,
              97,
              99,
              107,
              110,
              111,
              119,
              108,
              101,
              100,
              103,
              101,
              85,
              115,
              101,
              114,
              68,
              97,
              116,
              97,
              67,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
            ]),
          ],
        },
      },
    },
    /**
     * Searches through all changes to an account or its children given the
     * specified set of filters.
     */
    searchChangeHistoryEvents: {
      name: "SearchChangeHistoryEvents",
      requestType: SearchChangeHistoryEventsRequest,
      requestStream: false,
      responseType: SearchChangeHistoryEventsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              59,
              58,
              1,
              42,
              34,
              54,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              61,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              125,
              58,
              115,
              101,
              97,
              114,
              99,
              104,
              67,
              104,
              97,
              110,
              103,
              101,
              72,
              105,
              115,
              116,
              111,
              114,
              121,
              69,
              118,
              101,
              110,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Deprecated: Use `CreateKeyEvent` instead.
     * Creates a conversion event with the specified attributes.
     *
     * @deprecated
     */
    createConversionEvent: {
      name: "CreateConversionEvent",
      requestType: CreateConversionEventRequest,
      requestStream: false,
      responseType: ConversionEvent,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              23,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              95,
              101,
              118,
              101,
              110,
              116,
            ]),
          ],
          578365826: [
            Buffer.from([
              66,
              58,
              16,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              95,
              101,
              118,
              101,
              110,
              116,
              34,
              46,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              125,
              47,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              69,
              118,
              101,
              110,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Deprecated: Use `UpdateKeyEvent` instead.
     * Updates a conversion event with the specified attributes.
     *
     * @deprecated
     */
    updateConversionEvent: {
      name: "UpdateConversionEvent",
      requestType: UpdateConversionEventRequest,
      requestStream: false,
      responseType: ConversionEvent,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              28,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              95,
              101,
              118,
              101,
              110,
              116,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              83,
              58,
              16,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              95,
              101,
              118,
              101,
              110,
              116,
              50,
              63,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              95,
              101,
              118,
              101,
              110,
              116,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              69,
              118,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Deprecated: Use `GetKeyEvent` instead.
     * Retrieve a single conversion event.
     *
     * @deprecated
     */
    getConversionEvent: {
      name: "GetConversionEvent",
      requestType: GetConversionEventRequest,
      requestStream: false,
      responseType: ConversionEvent,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              48,
              18,
              46,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              69,
              118,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Deprecated: Use `DeleteKeyEvent` instead.
     * Deletes a conversion event in a property.
     *
     * @deprecated
     */
    deleteConversionEvent: {
      name: "DeleteConversionEvent",
      requestType: DeleteConversionEventRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              48,
              42,
              46,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              69,
              118,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Deprecated: Use `ListKeyEvents` instead.
     * Returns a list of conversion events in the specified parent property.
     *
     * Returns an empty list if no conversion events are found.
     *
     * @deprecated
     */
    listConversionEvents: {
      name: "ListConversionEvents",
      requestType: ListConversionEventsRequest,
      requestStream: false,
      responseType: ListConversionEventsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              48,
              18,
              46,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              125,
              47,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              69,
              118,
              101,
              110,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /** Creates a Key Event. */
    createKeyEvent: {
      name: "CreateKeyEvent",
      requestType: CreateKeyEventRequest,
      requestStream: false,
      responseType: KeyEvent,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([16, 112, 97, 114, 101, 110, 116, 44, 107, 101, 121, 95, 101, 118, 101, 110, 116])],
          578365826: [
            Buffer.from([
              52,
              58,
              9,
              107,
              101,
              121,
              95,
              101,
              118,
              101,
              110,
              116,
              34,
              39,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              125,
              47,
              107,
              101,
              121,
              69,
              118,
              101,
              110,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /** Updates a Key Event. */
    updateKeyEvent: {
      name: "UpdateKeyEvent",
      requestType: UpdateKeyEventRequest,
      requestStream: false,
      responseType: KeyEvent,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              21,
              107,
              101,
              121,
              95,
              101,
              118,
              101,
              110,
              116,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              62,
              58,
              9,
              107,
              101,
              121,
              95,
              101,
              118,
              101,
              110,
              116,
              50,
              49,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              107,
              101,
              121,
              95,
              101,
              118,
              101,
              110,
              116,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              107,
              101,
              121,
              69,
              118,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Retrieve a single Key Event. */
    getKeyEvent: {
      name: "GetKeyEvent",
      requestType: GetKeyEventRequest,
      requestStream: false,
      responseType: KeyEvent,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              41,
              18,
              39,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              107,
              101,
              121,
              69,
              118,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes a Key Event. */
    deleteKeyEvent: {
      name: "DeleteKeyEvent",
      requestType: DeleteKeyEventRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              41,
              42,
              39,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              107,
              101,
              121,
              69,
              118,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Returns a list of Key Events in the specified parent property.
     * Returns an empty list if no Key Events are found.
     */
    listKeyEvents: {
      name: "ListKeyEvents",
      requestType: ListKeyEventsRequest,
      requestStream: false,
      responseType: ListKeyEventsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              41,
              18,
              39,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              125,
              47,
              107,
              101,
              121,
              69,
              118,
              101,
              110,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /** Creates a CustomDimension. */
    createCustomDimension: {
      name: "CreateCustomDimension",
      requestType: CreateCustomDimensionRequest,
      requestStream: false,
      responseType: CustomDimension,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              23,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              99,
              117,
              115,
              116,
              111,
              109,
              95,
              100,
              105,
              109,
              101,
              110,
              115,
              105,
              111,
              110,
            ]),
          ],
          578365826: [
            Buffer.from([
              66,
              58,
              16,
              99,
              117,
              115,
              116,
              111,
              109,
              95,
              100,
              105,
              109,
              101,
              110,
              115,
              105,
              111,
              110,
              34,
              46,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              125,
              47,
              99,
              117,
              115,
              116,
              111,
              109,
              68,
              105,
              109,
              101,
              110,
              115,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /** Updates a CustomDimension on a property. */
    updateCustomDimension: {
      name: "UpdateCustomDimension",
      requestType: UpdateCustomDimensionRequest,
      requestStream: false,
      responseType: CustomDimension,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              28,
              99,
              117,
              115,
              116,
              111,
              109,
              95,
              100,
              105,
              109,
              101,
              110,
              115,
              105,
              111,
              110,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              83,
              58,
              16,
              99,
              117,
              115,
              116,
              111,
              109,
              95,
              100,
              105,
              109,
              101,
              110,
              115,
              105,
              111,
              110,
              50,
              63,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              99,
              117,
              115,
              116,
              111,
              109,
              95,
              100,
              105,
              109,
              101,
              110,
              115,
              105,
              111,
              110,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              99,
              117,
              115,
              116,
              111,
              109,
              68,
              105,
              109,
              101,
              110,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists CustomDimensions on a property. */
    listCustomDimensions: {
      name: "ListCustomDimensions",
      requestType: ListCustomDimensionsRequest,
      requestStream: false,
      responseType: ListCustomDimensionsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              48,
              18,
              46,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              125,
              47,
              99,
              117,
              115,
              116,
              111,
              109,
              68,
              105,
              109,
              101,
              110,
              115,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /** Archives a CustomDimension on a property. */
    archiveCustomDimension: {
      name: "ArchiveCustomDimension",
      requestType: ArchiveCustomDimensionRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              59,
              58,
              1,
              42,
              34,
              54,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              99,
              117,
              115,
              116,
              111,
              109,
              68,
              105,
              109,
              101,
              110,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              58,
              97,
              114,
              99,
              104,
              105,
              118,
              101,
            ]),
          ],
        },
      },
    },
    /** Lookup for a single CustomDimension. */
    getCustomDimension: {
      name: "GetCustomDimension",
      requestType: GetCustomDimensionRequest,
      requestStream: false,
      responseType: CustomDimension,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              48,
              18,
              46,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              99,
              117,
              115,
              116,
              111,
              109,
              68,
              105,
              109,
              101,
              110,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Creates a CustomMetric. */
    createCustomMetric: {
      name: "CreateCustomMetric",
      requestType: CreateCustomMetricRequest,
      requestStream: false,
      responseType: CustomMetric,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              20,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              99,
              117,
              115,
              116,
              111,
              109,
              95,
              109,
              101,
              116,
              114,
              105,
              99,
            ]),
          ],
          578365826: [
            Buffer.from([
              60,
              58,
              13,
              99,
              117,
              115,
              116,
              111,
              109,
              95,
              109,
              101,
              116,
              114,
              105,
              99,
              34,
              43,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              125,
              47,
              99,
              117,
              115,
              116,
              111,
              109,
              77,
              101,
              116,
              114,
              105,
              99,
              115,
            ]),
          ],
        },
      },
    },
    /** Updates a CustomMetric on a property. */
    updateCustomMetric: {
      name: "UpdateCustomMetric",
      requestType: UpdateCustomMetricRequest,
      requestStream: false,
      responseType: CustomMetric,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              25,
              99,
              117,
              115,
              116,
              111,
              109,
              95,
              109,
              101,
              116,
              114,
              105,
              99,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              74,
              58,
              13,
              99,
              117,
              115,
              116,
              111,
              109,
              95,
              109,
              101,
              116,
              114,
              105,
              99,
              50,
              57,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              99,
              117,
              115,
              116,
              111,
              109,
              95,
              109,
              101,
              116,
              114,
              105,
              99,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              99,
              117,
              115,
              116,
              111,
              109,
              77,
              101,
              116,
              114,
              105,
              99,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists CustomMetrics on a property. */
    listCustomMetrics: {
      name: "ListCustomMetrics",
      requestType: ListCustomMetricsRequest,
      requestStream: false,
      responseType: ListCustomMetricsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              45,
              18,
              43,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              125,
              47,
              99,
              117,
              115,
              116,
              111,
              109,
              77,
              101,
              116,
              114,
              105,
              99,
              115,
            ]),
          ],
        },
      },
    },
    /** Archives a CustomMetric on a property. */
    archiveCustomMetric: {
      name: "ArchiveCustomMetric",
      requestType: ArchiveCustomMetricRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              56,
              58,
              1,
              42,
              34,
              51,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              99,
              117,
              115,
              116,
              111,
              109,
              77,
              101,
              116,
              114,
              105,
              99,
              115,
              47,
              42,
              125,
              58,
              97,
              114,
              99,
              104,
              105,
              118,
              101,
            ]),
          ],
        },
      },
    },
    /** Lookup for a single CustomMetric. */
    getCustomMetric: {
      name: "GetCustomMetric",
      requestType: GetCustomMetricRequest,
      requestStream: false,
      responseType: CustomMetric,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              45,
              18,
              43,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              99,
              117,
              115,
              116,
              111,
              109,
              77,
              101,
              116,
              114,
              105,
              99,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Returns the singleton data retention settings for this property. */
    getDataRetentionSettings: {
      name: "GetDataRetentionSettings",
      requestType: GetDataRetentionSettingsRequest,
      requestStream: false,
      responseType: DataRetentionSettings,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              51,
              18,
              49,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              82,
              101,
              116,
              101,
              110,
              116,
              105,
              111,
              110,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              125,
            ]),
          ],
        },
      },
    },
    /** Updates the singleton data retention settings for this property. */
    updateDataRetentionSettings: {
      name: "UpdateDataRetentionSettings",
      requestType: UpdateDataRetentionSettingsRequest,
      requestStream: false,
      responseType: DataRetentionSettings,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              35,
              100,
              97,
              116,
              97,
              95,
              114,
              101,
              116,
              101,
              110,
              116,
              105,
              111,
              110,
              95,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              100,
              58,
              23,
              100,
              97,
              116,
              97,
              95,
              114,
              101,
              116,
              101,
              110,
              116,
              105,
              111,
              110,
              95,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              50,
              73,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              100,
              97,
              116,
              97,
              95,
              114,
              101,
              116,
              101,
              110,
              116,
              105,
              111,
              110,
              95,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              82,
              101,
              116,
              101,
              110,
              116,
              105,
              111,
              110,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              125,
            ]),
          ],
        },
      },
    },
    /** Creates a DataStream. */
    createDataStream: {
      name: "CreateDataStream",
      requestType: CreateDataStreamRequest,
      requestStream: false,
      responseType: DataStream,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([18, 112, 97, 114, 101, 110, 116, 44, 100, 97, 116, 97, 95, 115, 116, 114, 101, 97, 109])],
          578365826: [
            Buffer.from([
              56,
              58,
              11,
              100,
              97,
              116,
              97,
              95,
              115,
              116,
              114,
              101,
              97,
              109,
              34,
              41,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              125,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              114,
              101,
              97,
              109,
              115,
            ]),
          ],
        },
      },
    },
    /** Deletes a DataStream on a property. */
    deleteDataStream: {
      name: "DeleteDataStream",
      requestType: DeleteDataStreamRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              43,
              42,
              41,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              114,
              101,
              97,
              109,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Updates a DataStream on a property. */
    updateDataStream: {
      name: "UpdateDataStream",
      requestType: UpdateDataStreamRequest,
      requestStream: false,
      responseType: DataStream,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              23,
              100,
              97,
              116,
              97,
              95,
              115,
              116,
              114,
              101,
              97,
              109,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              68,
              58,
              11,
              100,
              97,
              116,
              97,
              95,
              115,
              116,
              114,
              101,
              97,
              109,
              50,
              53,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              100,
              97,
              116,
              97,
              95,
              115,
              116,
              114,
              101,
              97,
              109,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              114,
              101,
              97,
              109,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists DataStreams on a property. */
    listDataStreams: {
      name: "ListDataStreams",
      requestType: ListDataStreamsRequest,
      requestStream: false,
      responseType: ListDataStreamsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              43,
              18,
              41,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              125,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              114,
              101,
              97,
              109,
              115,
            ]),
          ],
        },
      },
    },
    /** Lookup for a single DataStream. */
    getDataStream: {
      name: "GetDataStream",
      requestType: GetDataStreamRequest,
      requestStream: false,
      responseType: DataStream,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              43,
              18,
              41,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              114,
              101,
              97,
              109,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Returns a customized report of data access records. The report provides
     * records of each time a user reads Google Analytics reporting data. Access
     * records are retained for up to 2 years.
     *
     * Data Access Reports can be requested for a property. Reports may be
     * requested for any property, but dimensions that aren't related to quota can
     * only be requested on Google Analytics 360 properties. This method is only
     * available to Administrators.
     *
     * These data access records include GA4 UI Reporting, GA4 UI Explorations,
     * GA4 Data API, and other products like Firebase & Admob that can retrieve
     * data from Google Analytics through a linkage. These records don't include
     * property configuration changes like adding a stream or changing a
     * property's time zone. For configuration change history, see
     * [searchChangeHistoryEvents](https://developers.google.com/analytics/devguides/config/admin/v1/rest/v1alpha/accounts/searchChangeHistoryEvents).
     */
    runAccessReport: {
      name: "RunAccessReport",
      requestType: RunAccessReportRequest,
      requestStream: false,
      responseType: RunAccessReportResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              100,
              58,
              1,
              42,
              90,
              48,
              58,
              1,
              42,
              34,
              43,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              101,
              110,
              116,
              105,
              116,
              121,
              61,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              125,
              58,
              114,
              117,
              110,
              65,
              99,
              99,
              101,
              115,
              115,
              82,
              101,
              112,
              111,
              114,
              116,
              34,
              45,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              101,
              110,
              116,
              105,
              116,
              121,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              125,
              58,
              114,
              117,
              110,
              65,
              99,
              99,
              101,
              115,
              115,
              82,
              101,
              112,
              111,
              114,
              116,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface AnalyticsAdminServiceImplementation<CallContextExt = {}> {
  /** Lookup for a single Account. */
  getAccount(request: GetAccountRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Account>>;
  /**
   * Returns all accounts accessible by the caller.
   *
   * Note that these accounts might not currently have GA4 properties.
   * Soft-deleted (ie: "trashed") accounts are excluded by default.
   * Returns an empty list if no relevant accounts are found.
   */
  listAccounts(
    request: ListAccountsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListAccountsResponse>>;
  /**
   * Marks target Account as soft-deleted (ie: "trashed") and returns it.
   *
   * This API does not have a method to restore soft-deleted accounts.
   * However, they can be restored using the Trash Can UI.
   *
   * If the accounts are not restored before the expiration time, the account
   * and all child resources (eg: Properties, GoogleAdsLinks, Streams,
   * AccessBindings) will be permanently purged.
   * https://support.google.com/analytics/answer/6154772
   *
   * Returns an error if the target is not found.
   */
  deleteAccount(request: DeleteAccountRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
  /** Updates an account. */
  updateAccount(request: UpdateAccountRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Account>>;
  /** Requests a ticket for creating an account. */
  provisionAccountTicket(
    request: ProvisionAccountTicketRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ProvisionAccountTicketResponse>>;
  /** Returns summaries of all accounts accessible by the caller. */
  listAccountSummaries(
    request: ListAccountSummariesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListAccountSummariesResponse>>;
  /** Lookup for a single "GA4" Property. */
  getProperty(request: GetPropertyRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Property>>;
  /**
   * Returns child Properties under the specified parent Account.
   *
   * Only "GA4" properties will be returned.
   * Properties will be excluded if the caller does not have access.
   * Soft-deleted (ie: "trashed") properties are excluded by default.
   * Returns an empty list if no relevant properties are found.
   */
  listProperties(
    request: ListPropertiesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListPropertiesResponse>>;
  /** Creates an "GA4" property with the specified location and attributes. */
  createProperty(request: CreatePropertyRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Property>>;
  /**
   * Marks target Property as soft-deleted (ie: "trashed") and returns it.
   *
   * This API does not have a method to restore soft-deleted properties.
   * However, they can be restored using the Trash Can UI.
   *
   * If the properties are not restored before the expiration time, the Property
   * and all child resources (eg: GoogleAdsLinks, Streams, AccessBindings)
   * will be permanently purged.
   * https://support.google.com/analytics/answer/6154772
   *
   * Returns an error if the target is not found, or is not a GA4 Property.
   */
  deleteProperty(request: DeletePropertyRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Property>>;
  /** Updates a property. */
  updateProperty(request: UpdatePropertyRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Property>>;
  /**
   * Creates a FirebaseLink.
   *
   * Properties can have at most one FirebaseLink.
   */
  createFirebaseLink(
    request: CreateFirebaseLinkRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<FirebaseLink>>;
  /** Deletes a FirebaseLink on a property */
  deleteFirebaseLink(
    request: DeleteFirebaseLinkRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  /**
   * Lists FirebaseLinks on a property.
   * Properties can have at most one FirebaseLink.
   */
  listFirebaseLinks(
    request: ListFirebaseLinksRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListFirebaseLinksResponse>>;
  /** Creates a GoogleAdsLink. */
  createGoogleAdsLink(
    request: CreateGoogleAdsLinkRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GoogleAdsLink>>;
  /** Updates a GoogleAdsLink on a property */
  updateGoogleAdsLink(
    request: UpdateGoogleAdsLinkRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GoogleAdsLink>>;
  /** Deletes a GoogleAdsLink on a property */
  deleteGoogleAdsLink(
    request: DeleteGoogleAdsLinkRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  /** Lists GoogleAdsLinks on a property. */
  listGoogleAdsLinks(
    request: ListGoogleAdsLinksRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListGoogleAdsLinksResponse>>;
  /**
   * Get data sharing settings on an account.
   * Data sharing settings are singletons.
   */
  getDataSharingSettings(
    request: GetDataSharingSettingsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<DataSharingSettings>>;
  /** Lookup for a single "GA4" MeasurementProtocolSecret. */
  getMeasurementProtocolSecret(
    request: GetMeasurementProtocolSecretRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<MeasurementProtocolSecret>>;
  /**
   * Returns child MeasurementProtocolSecrets under the specified parent
   * Property.
   */
  listMeasurementProtocolSecrets(
    request: ListMeasurementProtocolSecretsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListMeasurementProtocolSecretsResponse>>;
  /** Creates a measurement protocol secret. */
  createMeasurementProtocolSecret(
    request: CreateMeasurementProtocolSecretRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<MeasurementProtocolSecret>>;
  /** Deletes target MeasurementProtocolSecret. */
  deleteMeasurementProtocolSecret(
    request: DeleteMeasurementProtocolSecretRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  /** Updates a measurement protocol secret. */
  updateMeasurementProtocolSecret(
    request: UpdateMeasurementProtocolSecretRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<MeasurementProtocolSecret>>;
  /**
   * Acknowledges the terms of user data collection for the specified property.
   *
   * This acknowledgement must be completed (either in the Google Analytics UI
   * or through this API) before MeasurementProtocolSecret resources may be
   * created.
   */
  acknowledgeUserDataCollection(
    request: AcknowledgeUserDataCollectionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AcknowledgeUserDataCollectionResponse>>;
  /**
   * Searches through all changes to an account or its children given the
   * specified set of filters.
   */
  searchChangeHistoryEvents(
    request: SearchChangeHistoryEventsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SearchChangeHistoryEventsResponse>>;
  /**
   * Deprecated: Use `CreateKeyEvent` instead.
   * Creates a conversion event with the specified attributes.
   *
   * @deprecated
   */
  createConversionEvent(
    request: CreateConversionEventRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ConversionEvent>>;
  /**
   * Deprecated: Use `UpdateKeyEvent` instead.
   * Updates a conversion event with the specified attributes.
   *
   * @deprecated
   */
  updateConversionEvent(
    request: UpdateConversionEventRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ConversionEvent>>;
  /**
   * Deprecated: Use `GetKeyEvent` instead.
   * Retrieve a single conversion event.
   *
   * @deprecated
   */
  getConversionEvent(
    request: GetConversionEventRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ConversionEvent>>;
  /**
   * Deprecated: Use `DeleteKeyEvent` instead.
   * Deletes a conversion event in a property.
   *
   * @deprecated
   */
  deleteConversionEvent(
    request: DeleteConversionEventRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  /**
   * Deprecated: Use `ListKeyEvents` instead.
   * Returns a list of conversion events in the specified parent property.
   *
   * Returns an empty list if no conversion events are found.
   *
   * @deprecated
   */
  listConversionEvents(
    request: ListConversionEventsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListConversionEventsResponse>>;
  /** Creates a Key Event. */
  createKeyEvent(request: CreateKeyEventRequest, context: CallContext & CallContextExt): Promise<DeepPartial<KeyEvent>>;
  /** Updates a Key Event. */
  updateKeyEvent(request: UpdateKeyEventRequest, context: CallContext & CallContextExt): Promise<DeepPartial<KeyEvent>>;
  /** Retrieve a single Key Event. */
  getKeyEvent(request: GetKeyEventRequest, context: CallContext & CallContextExt): Promise<DeepPartial<KeyEvent>>;
  /** Deletes a Key Event. */
  deleteKeyEvent(request: DeleteKeyEventRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
  /**
   * Returns a list of Key Events in the specified parent property.
   * Returns an empty list if no Key Events are found.
   */
  listKeyEvents(
    request: ListKeyEventsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListKeyEventsResponse>>;
  /** Creates a CustomDimension. */
  createCustomDimension(
    request: CreateCustomDimensionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<CustomDimension>>;
  /** Updates a CustomDimension on a property. */
  updateCustomDimension(
    request: UpdateCustomDimensionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<CustomDimension>>;
  /** Lists CustomDimensions on a property. */
  listCustomDimensions(
    request: ListCustomDimensionsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListCustomDimensionsResponse>>;
  /** Archives a CustomDimension on a property. */
  archiveCustomDimension(
    request: ArchiveCustomDimensionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  /** Lookup for a single CustomDimension. */
  getCustomDimension(
    request: GetCustomDimensionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<CustomDimension>>;
  /** Creates a CustomMetric. */
  createCustomMetric(
    request: CreateCustomMetricRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<CustomMetric>>;
  /** Updates a CustomMetric on a property. */
  updateCustomMetric(
    request: UpdateCustomMetricRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<CustomMetric>>;
  /** Lists CustomMetrics on a property. */
  listCustomMetrics(
    request: ListCustomMetricsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListCustomMetricsResponse>>;
  /** Archives a CustomMetric on a property. */
  archiveCustomMetric(
    request: ArchiveCustomMetricRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  /** Lookup for a single CustomMetric. */
  getCustomMetric(
    request: GetCustomMetricRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<CustomMetric>>;
  /** Returns the singleton data retention settings for this property. */
  getDataRetentionSettings(
    request: GetDataRetentionSettingsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<DataRetentionSettings>>;
  /** Updates the singleton data retention settings for this property. */
  updateDataRetentionSettings(
    request: UpdateDataRetentionSettingsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<DataRetentionSettings>>;
  /** Creates a DataStream. */
  createDataStream(
    request: CreateDataStreamRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<DataStream>>;
  /** Deletes a DataStream on a property. */
  deleteDataStream(
    request: DeleteDataStreamRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  /** Updates a DataStream on a property. */
  updateDataStream(
    request: UpdateDataStreamRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<DataStream>>;
  /** Lists DataStreams on a property. */
  listDataStreams(
    request: ListDataStreamsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListDataStreamsResponse>>;
  /** Lookup for a single DataStream. */
  getDataStream(request: GetDataStreamRequest, context: CallContext & CallContextExt): Promise<DeepPartial<DataStream>>;
  /**
   * Returns a customized report of data access records. The report provides
   * records of each time a user reads Google Analytics reporting data. Access
   * records are retained for up to 2 years.
   *
   * Data Access Reports can be requested for a property. Reports may be
   * requested for any property, but dimensions that aren't related to quota can
   * only be requested on Google Analytics 360 properties. This method is only
   * available to Administrators.
   *
   * These data access records include GA4 UI Reporting, GA4 UI Explorations,
   * GA4 Data API, and other products like Firebase & Admob that can retrieve
   * data from Google Analytics through a linkage. These records don't include
   * property configuration changes like adding a stream or changing a
   * property's time zone. For configuration change history, see
   * [searchChangeHistoryEvents](https://developers.google.com/analytics/devguides/config/admin/v1/rest/v1alpha/accounts/searchChangeHistoryEvents).
   */
  runAccessReport(
    request: RunAccessReportRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<RunAccessReportResponse>>;
}

export interface AnalyticsAdminServiceClient<CallOptionsExt = {}> {
  /** Lookup for a single Account. */
  getAccount(request: DeepPartial<GetAccountRequest>, options?: CallOptions & CallOptionsExt): Promise<Account>;
  /**
   * Returns all accounts accessible by the caller.
   *
   * Note that these accounts might not currently have GA4 properties.
   * Soft-deleted (ie: "trashed") accounts are excluded by default.
   * Returns an empty list if no relevant accounts are found.
   */
  listAccounts(
    request: DeepPartial<ListAccountsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListAccountsResponse>;
  /**
   * Marks target Account as soft-deleted (ie: "trashed") and returns it.
   *
   * This API does not have a method to restore soft-deleted accounts.
   * However, they can be restored using the Trash Can UI.
   *
   * If the accounts are not restored before the expiration time, the account
   * and all child resources (eg: Properties, GoogleAdsLinks, Streams,
   * AccessBindings) will be permanently purged.
   * https://support.google.com/analytics/answer/6154772
   *
   * Returns an error if the target is not found.
   */
  deleteAccount(request: DeepPartial<DeleteAccountRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
  /** Updates an account. */
  updateAccount(request: DeepPartial<UpdateAccountRequest>, options?: CallOptions & CallOptionsExt): Promise<Account>;
  /** Requests a ticket for creating an account. */
  provisionAccountTicket(
    request: DeepPartial<ProvisionAccountTicketRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ProvisionAccountTicketResponse>;
  /** Returns summaries of all accounts accessible by the caller. */
  listAccountSummaries(
    request: DeepPartial<ListAccountSummariesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListAccountSummariesResponse>;
  /** Lookup for a single "GA4" Property. */
  getProperty(request: DeepPartial<GetPropertyRequest>, options?: CallOptions & CallOptionsExt): Promise<Property>;
  /**
   * Returns child Properties under the specified parent Account.
   *
   * Only "GA4" properties will be returned.
   * Properties will be excluded if the caller does not have access.
   * Soft-deleted (ie: "trashed") properties are excluded by default.
   * Returns an empty list if no relevant properties are found.
   */
  listProperties(
    request: DeepPartial<ListPropertiesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListPropertiesResponse>;
  /** Creates an "GA4" property with the specified location and attributes. */
  createProperty(
    request: DeepPartial<CreatePropertyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Property>;
  /**
   * Marks target Property as soft-deleted (ie: "trashed") and returns it.
   *
   * This API does not have a method to restore soft-deleted properties.
   * However, they can be restored using the Trash Can UI.
   *
   * If the properties are not restored before the expiration time, the Property
   * and all child resources (eg: GoogleAdsLinks, Streams, AccessBindings)
   * will be permanently purged.
   * https://support.google.com/analytics/answer/6154772
   *
   * Returns an error if the target is not found, or is not a GA4 Property.
   */
  deleteProperty(
    request: DeepPartial<DeletePropertyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Property>;
  /** Updates a property. */
  updateProperty(
    request: DeepPartial<UpdatePropertyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Property>;
  /**
   * Creates a FirebaseLink.
   *
   * Properties can have at most one FirebaseLink.
   */
  createFirebaseLink(
    request: DeepPartial<CreateFirebaseLinkRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<FirebaseLink>;
  /** Deletes a FirebaseLink on a property */
  deleteFirebaseLink(
    request: DeepPartial<DeleteFirebaseLinkRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  /**
   * Lists FirebaseLinks on a property.
   * Properties can have at most one FirebaseLink.
   */
  listFirebaseLinks(
    request: DeepPartial<ListFirebaseLinksRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListFirebaseLinksResponse>;
  /** Creates a GoogleAdsLink. */
  createGoogleAdsLink(
    request: DeepPartial<CreateGoogleAdsLinkRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GoogleAdsLink>;
  /** Updates a GoogleAdsLink on a property */
  updateGoogleAdsLink(
    request: DeepPartial<UpdateGoogleAdsLinkRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GoogleAdsLink>;
  /** Deletes a GoogleAdsLink on a property */
  deleteGoogleAdsLink(
    request: DeepPartial<DeleteGoogleAdsLinkRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  /** Lists GoogleAdsLinks on a property. */
  listGoogleAdsLinks(
    request: DeepPartial<ListGoogleAdsLinksRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListGoogleAdsLinksResponse>;
  /**
   * Get data sharing settings on an account.
   * Data sharing settings are singletons.
   */
  getDataSharingSettings(
    request: DeepPartial<GetDataSharingSettingsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<DataSharingSettings>;
  /** Lookup for a single "GA4" MeasurementProtocolSecret. */
  getMeasurementProtocolSecret(
    request: DeepPartial<GetMeasurementProtocolSecretRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<MeasurementProtocolSecret>;
  /**
   * Returns child MeasurementProtocolSecrets under the specified parent
   * Property.
   */
  listMeasurementProtocolSecrets(
    request: DeepPartial<ListMeasurementProtocolSecretsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListMeasurementProtocolSecretsResponse>;
  /** Creates a measurement protocol secret. */
  createMeasurementProtocolSecret(
    request: DeepPartial<CreateMeasurementProtocolSecretRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<MeasurementProtocolSecret>;
  /** Deletes target MeasurementProtocolSecret. */
  deleteMeasurementProtocolSecret(
    request: DeepPartial<DeleteMeasurementProtocolSecretRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  /** Updates a measurement protocol secret. */
  updateMeasurementProtocolSecret(
    request: DeepPartial<UpdateMeasurementProtocolSecretRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<MeasurementProtocolSecret>;
  /**
   * Acknowledges the terms of user data collection for the specified property.
   *
   * This acknowledgement must be completed (either in the Google Analytics UI
   * or through this API) before MeasurementProtocolSecret resources may be
   * created.
   */
  acknowledgeUserDataCollection(
    request: DeepPartial<AcknowledgeUserDataCollectionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AcknowledgeUserDataCollectionResponse>;
  /**
   * Searches through all changes to an account or its children given the
   * specified set of filters.
   */
  searchChangeHistoryEvents(
    request: DeepPartial<SearchChangeHistoryEventsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SearchChangeHistoryEventsResponse>;
  /**
   * Deprecated: Use `CreateKeyEvent` instead.
   * Creates a conversion event with the specified attributes.
   *
   * @deprecated
   */
  createConversionEvent(
    request: DeepPartial<CreateConversionEventRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ConversionEvent>;
  /**
   * Deprecated: Use `UpdateKeyEvent` instead.
   * Updates a conversion event with the specified attributes.
   *
   * @deprecated
   */
  updateConversionEvent(
    request: DeepPartial<UpdateConversionEventRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ConversionEvent>;
  /**
   * Deprecated: Use `GetKeyEvent` instead.
   * Retrieve a single conversion event.
   *
   * @deprecated
   */
  getConversionEvent(
    request: DeepPartial<GetConversionEventRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ConversionEvent>;
  /**
   * Deprecated: Use `DeleteKeyEvent` instead.
   * Deletes a conversion event in a property.
   *
   * @deprecated
   */
  deleteConversionEvent(
    request: DeepPartial<DeleteConversionEventRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  /**
   * Deprecated: Use `ListKeyEvents` instead.
   * Returns a list of conversion events in the specified parent property.
   *
   * Returns an empty list if no conversion events are found.
   *
   * @deprecated
   */
  listConversionEvents(
    request: DeepPartial<ListConversionEventsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListConversionEventsResponse>;
  /** Creates a Key Event. */
  createKeyEvent(
    request: DeepPartial<CreateKeyEventRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<KeyEvent>;
  /** Updates a Key Event. */
  updateKeyEvent(
    request: DeepPartial<UpdateKeyEventRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<KeyEvent>;
  /** Retrieve a single Key Event. */
  getKeyEvent(request: DeepPartial<GetKeyEventRequest>, options?: CallOptions & CallOptionsExt): Promise<KeyEvent>;
  /** Deletes a Key Event. */
  deleteKeyEvent(request: DeepPartial<DeleteKeyEventRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
  /**
   * Returns a list of Key Events in the specified parent property.
   * Returns an empty list if no Key Events are found.
   */
  listKeyEvents(
    request: DeepPartial<ListKeyEventsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListKeyEventsResponse>;
  /** Creates a CustomDimension. */
  createCustomDimension(
    request: DeepPartial<CreateCustomDimensionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<CustomDimension>;
  /** Updates a CustomDimension on a property. */
  updateCustomDimension(
    request: DeepPartial<UpdateCustomDimensionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<CustomDimension>;
  /** Lists CustomDimensions on a property. */
  listCustomDimensions(
    request: DeepPartial<ListCustomDimensionsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListCustomDimensionsResponse>;
  /** Archives a CustomDimension on a property. */
  archiveCustomDimension(
    request: DeepPartial<ArchiveCustomDimensionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  /** Lookup for a single CustomDimension. */
  getCustomDimension(
    request: DeepPartial<GetCustomDimensionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<CustomDimension>;
  /** Creates a CustomMetric. */
  createCustomMetric(
    request: DeepPartial<CreateCustomMetricRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<CustomMetric>;
  /** Updates a CustomMetric on a property. */
  updateCustomMetric(
    request: DeepPartial<UpdateCustomMetricRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<CustomMetric>;
  /** Lists CustomMetrics on a property. */
  listCustomMetrics(
    request: DeepPartial<ListCustomMetricsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListCustomMetricsResponse>;
  /** Archives a CustomMetric on a property. */
  archiveCustomMetric(
    request: DeepPartial<ArchiveCustomMetricRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  /** Lookup for a single CustomMetric. */
  getCustomMetric(
    request: DeepPartial<GetCustomMetricRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<CustomMetric>;
  /** Returns the singleton data retention settings for this property. */
  getDataRetentionSettings(
    request: DeepPartial<GetDataRetentionSettingsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<DataRetentionSettings>;
  /** Updates the singleton data retention settings for this property. */
  updateDataRetentionSettings(
    request: DeepPartial<UpdateDataRetentionSettingsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<DataRetentionSettings>;
  /** Creates a DataStream. */
  createDataStream(
    request: DeepPartial<CreateDataStreamRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<DataStream>;
  /** Deletes a DataStream on a property. */
  deleteDataStream(
    request: DeepPartial<DeleteDataStreamRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  /** Updates a DataStream on a property. */
  updateDataStream(
    request: DeepPartial<UpdateDataStreamRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<DataStream>;
  /** Lists DataStreams on a property. */
  listDataStreams(
    request: DeepPartial<ListDataStreamsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListDataStreamsResponse>;
  /** Lookup for a single DataStream. */
  getDataStream(
    request: DeepPartial<GetDataStreamRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<DataStream>;
  /**
   * Returns a customized report of data access records. The report provides
   * records of each time a user reads Google Analytics reporting data. Access
   * records are retained for up to 2 years.
   *
   * Data Access Reports can be requested for a property. Reports may be
   * requested for any property, but dimensions that aren't related to quota can
   * only be requested on Google Analytics 360 properties. This method is only
   * available to Administrators.
   *
   * These data access records include GA4 UI Reporting, GA4 UI Explorations,
   * GA4 Data API, and other products like Firebase & Admob that can retrieve
   * data from Google Analytics through a linkage. These records don't include
   * property configuration changes like adding a stream or changing a
   * property's time zone. For configuration change history, see
   * [searchChangeHistoryEvents](https://developers.google.com/analytics/devguides/config/admin/v1/rest/v1alpha/accounts/searchChangeHistoryEvents).
   */
  runAccessReport(
    request: DeepPartial<RunAccessReportRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<RunAccessReportResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
