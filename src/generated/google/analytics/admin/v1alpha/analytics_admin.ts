// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/analytics/admin/v1alpha/analytics_admin.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Empty } from "../../../protobuf/empty.js";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { Timestamp } from "../../../protobuf/timestamp.js";
import {
  AccessDateRange,
  AccessDimension,
  AccessDimensionHeader,
  AccessFilterExpression,
  AccessMetric,
  AccessMetricHeader,
  AccessOrderBy,
  AccessQuota,
  AccessRow,
} from "./access_report.js";
import { Audience } from "./audience.js";
import { ChannelGroup } from "./channel_group.js";
import { EventCreateRule, EventEditRule } from "./event_create_and_edit.js";
import { ExpandedDataSet } from "./expanded_data_set.js";
import {
  AccessBinding,
  Account,
  AccountSummary,
  ActionType,
  actionTypeFromJSON,
  actionTypeToJSON,
  AdSenseLink,
  AttributionSettings,
  BigQueryLink,
  CalculatedMetric,
  ChangeHistoryEvent,
  ChangeHistoryResourceType,
  changeHistoryResourceTypeFromJSON,
  changeHistoryResourceTypeToJSON,
  ConnectedSiteTag,
  ConversionEvent,
  CustomDimension,
  CustomMetric,
  DataRedactionSettings,
  DataRetentionSettings,
  DataSharingSettings,
  DataStream,
  DisplayVideo360AdvertiserLink,
  DisplayVideo360AdvertiserLinkProposal,
  EnhancedMeasurementSettings,
  FirebaseLink,
  GlobalSiteTag,
  GoogleAdsLink,
  GoogleSignalsSettings,
  KeyEvent,
  MeasurementProtocolSecret,
  Property,
  RollupPropertySourceLink,
  SearchAds360Link,
  SKAdNetworkConversionValueSchema,
} from "./resources.js";
import { SubpropertyEventFilter } from "./subproperty_event_filter.js";

export const protobufPackage = "google.analytics.admin.v1alpha";

/** The request for a Data Access Record Report. */
export interface RunAccessReportRequest {
  /**
   * The Data Access Report supports requesting at the property level or account
   * level. If requested at the account level, Data Access Reports include all
   * access for all properties under that account.
   *
   * To request at the property level, entity should be for example
   * 'properties/123' if "123" is your GA4 property ID. To request at the
   * account level, entity should be for example 'accounts/1234' if "1234" is
   * your GA4 Account ID.
   */
  entity: string;
  /**
   * The dimensions requested and displayed in the response. Requests are
   * allowed up to 9 dimensions.
   */
  dimensions: AccessDimension[];
  /**
   * The metrics requested and displayed in the response. Requests are allowed
   * up to 10 metrics.
   */
  metrics: AccessMetric[];
  /**
   * Date ranges of access records to read. If multiple date ranges are
   * requested, each response row will contain a zero based date range index. If
   * two date ranges overlap, the access records for the overlapping days is
   * included in the response rows for both date ranges. Requests are allowed up
   * to 2 date ranges.
   */
  dateRanges: AccessDateRange[];
  /**
   * Dimension filters let you restrict report response to specific
   * dimension values which match the filter. For example, filtering on access
   * records of a single user. To learn more, see [Fundamentals of Dimension
   * Filters](https://developers.google.com/analytics/devguides/reporting/data/v1/basics#dimension_filters)
   * for examples. Metrics cannot be used in this filter.
   */
  dimensionFilter:
    | AccessFilterExpression
    | undefined;
  /**
   * Metric filters allow you to restrict report response to specific metric
   * values which match the filter. Metric filters are applied after aggregating
   * the report's rows, similar to SQL having-clause. Dimensions cannot be used
   * in this filter.
   */
  metricFilter:
    | AccessFilterExpression
    | undefined;
  /**
   * The row count of the start row. The first row is counted as row 0. If
   * offset is unspecified, it is treated as 0. If offset is zero, then this
   * method will return the first page of results with `limit` entries.
   *
   * To learn more about this pagination parameter, see
   * [Pagination](https://developers.google.com/analytics/devguides/reporting/data/v1/basics#pagination).
   */
  offset: Long;
  /**
   * The number of rows to return. If unspecified, 10,000 rows are returned. The
   * API returns a maximum of 100,000 rows per request, no matter how many you
   * ask for. `limit` must be positive.
   *
   * The API may return fewer rows than the requested `limit`, if there aren't
   * as many remaining rows as the `limit`. For instance, there are fewer than
   * 300 possible values for the dimension `country`, so when reporting on only
   * `country`, you can't get more than 300 rows, even if you set `limit` to a
   * higher value.
   *
   * To learn more about this pagination parameter, see
   * [Pagination](https://developers.google.com/analytics/devguides/reporting/data/v1/basics#pagination).
   */
  limit: Long;
  /**
   * This request's time zone if specified. If unspecified, the property's time
   * zone is used. The request's time zone is used to interpret the start & end
   * dates of the report.
   *
   * Formatted as strings from the IANA Time Zone database
   * (https://www.iana.org/time-zones); for example "America/New_York" or
   * "Asia/Tokyo".
   */
  timeZone: string;
  /** Specifies how rows are ordered in the response. */
  orderBys: AccessOrderBy[];
  /**
   * Toggles whether to return the current state of this Analytics Property's
   * quota. Quota is returned in [AccessQuota](#AccessQuota). For account-level
   * requests, this field must be false.
   */
  returnEntityQuota: boolean;
  /**
   * Optional. Determines whether to include users who have never made an API
   * call in the response. If true, all users with access to the specified
   * property or account are included in the response, regardless of whether
   * they have made an API call or not. If false, only the users who have made
   * an API call will be included.
   */
  includeAllUsers: boolean;
  /**
   * Optional. Decides whether to return the users within user groups. This
   * field works only when include_all_users is set to true. If true, it will
   * return all users with access to the specified property or account.
   * If false, only the users with direct access will be returned.
   */
  expandGroups: boolean;
}

/** The customized Data Access Record Report response. */
export interface RunAccessReportResponse {
  /**
   * The header for a column in the report that corresponds to a specific
   * dimension. The number of DimensionHeaders and ordering of DimensionHeaders
   * matches the dimensions present in rows.
   */
  dimensionHeaders: AccessDimensionHeader[];
  /**
   * The header for a column in the report that corresponds to a specific
   * metric. The number of MetricHeaders and ordering of MetricHeaders matches
   * the metrics present in rows.
   */
  metricHeaders: AccessMetricHeader[];
  /** Rows of dimension value combinations and metric values in the report. */
  rows: AccessRow[];
  /**
   * The total number of rows in the query result. `rowCount` is independent of
   * the number of rows returned in the response, the `limit` request
   * parameter, and the `offset` request parameter. For example if a query
   * returns 175 rows and includes `limit` of 50 in the API request, the
   * response will contain `rowCount` of 175 but only 50 rows.
   *
   * To learn more about this pagination parameter, see
   * [Pagination](https://developers.google.com/analytics/devguides/reporting/data/v1/basics#pagination).
   */
  rowCount: number;
  /**
   * The quota state for this Analytics property including this request. This
   * field doesn't work with account-level requests.
   */
  quota: AccessQuota | undefined;
}

/** Request message for GetAccount RPC. */
export interface GetAccountRequest {
  /**
   * Required. The name of the account to lookup.
   * Format: accounts/{account}
   * Example: "accounts/100"
   */
  name: string;
}

/** Request message for ListAccounts RPC. */
export interface ListAccountsRequest {
  /**
   * The maximum number of resources to return. The service may return
   * fewer than this value, even if there are additional pages.
   * If unspecified, at most 50 resources will be returned.
   * The maximum value is 200; (higher values will be coerced to the maximum)
   */
  pageSize: number;
  /**
   * A page token, received from a previous `ListAccounts` call.
   * Provide this to retrieve the subsequent page.
   * When paginating, all other parameters provided to `ListAccounts` must
   * match the call that provided the page token.
   */
  pageToken: string;
  /**
   * Whether to include soft-deleted (ie: "trashed") Accounts in the
   * results. Accounts can be inspected to determine whether they are deleted or
   * not.
   */
  showDeleted: boolean;
}

/** Request message for ListAccounts RPC. */
export interface ListAccountsResponse {
  /** Results that were accessible to the caller. */
  accounts: Account[];
  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

/** Request message for DeleteAccount RPC. */
export interface DeleteAccountRequest {
  /**
   * Required. The name of the Account to soft-delete.
   * Format: accounts/{account}
   * Example: "accounts/100"
   */
  name: string;
}

/** Request message for UpdateAccount RPC. */
export interface UpdateAccountRequest {
  /**
   * Required. The account to update.
   * The account's `name` field is used to identify the account.
   */
  account:
    | Account
    | undefined;
  /**
   * Required. The list of fields to be updated. Field names must be in snake
   * case (for example, "field_to_update"). Omitted fields will not be updated.
   * To replace the entire entity, use one path with the string "*" to match all
   * fields.
   */
  updateMask: string[] | undefined;
}

/** Request message for ProvisionAccountTicket RPC. */
export interface ProvisionAccountTicketRequest {
  /** The account to create. */
  account:
    | Account
    | undefined;
  /**
   * Redirect URI where the user will be sent after accepting Terms of Service.
   * Must be configured in Cloud Console as a Redirect URI.
   */
  redirectUri: string;
}

/** Response message for ProvisionAccountTicket RPC. */
export interface ProvisionAccountTicketResponse {
  /** The param to be passed in the ToS link. */
  accountTicketId: string;
}

/** Request message for GetProperty RPC. */
export interface GetPropertyRequest {
  /**
   * Required. The name of the property to lookup.
   * Format: properties/{property_id}
   * Example: "properties/1000"
   */
  name: string;
}

/** Request message for ListProperties RPC. */
export interface ListPropertiesRequest {
  /**
   * Required. An expression for filtering the results of the request.
   * Fields eligible for filtering are:
   * `parent:`(The resource name of the parent account/property) or
   * `ancestor:`(The resource name of the parent account) or
   * `firebase_project:`(The id or number of the linked firebase project).
   * Some examples of filters:
   *
   * ```
   * | Filter                      | Description                               |
   * |-----------------------------|-------------------------------------------|
   * | parent:accounts/123         | The account with account id: 123.       |
   * | parent:properties/123       | The property with property id: 123.       |
   * | ancestor:accounts/123       | The account with account id: 123.         |
   * | firebase_project:project-id | The firebase project with id: project-id. |
   * | firebase_project:123        | The firebase project with number: 123.    |
   * ```
   */
  filter: string;
  /**
   * The maximum number of resources to return. The service may return
   * fewer than this value, even if there are additional pages.
   * If unspecified, at most 50 resources will be returned.
   * The maximum value is 200; (higher values will be coerced to the maximum)
   */
  pageSize: number;
  /**
   * A page token, received from a previous `ListProperties` call.
   * Provide this to retrieve the subsequent page.
   * When paginating, all other parameters provided to `ListProperties` must
   * match the call that provided the page token.
   */
  pageToken: string;
  /**
   * Whether to include soft-deleted (ie: "trashed") Properties in the
   * results. Properties can be inspected to determine whether they are deleted
   * or not.
   */
  showDeleted: boolean;
}

/** Response message for ListProperties RPC. */
export interface ListPropertiesResponse {
  /** Results that matched the filter criteria and were accessible to the caller. */
  properties: Property[];
  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

/** Request message for UpdateProperty RPC. */
export interface UpdatePropertyRequest {
  /**
   * Required. The property to update.
   * The property's `name` field is used to identify the property to be
   * updated.
   */
  property:
    | Property
    | undefined;
  /**
   * Required. The list of fields to be updated. Field names must be in snake
   * case (e.g., "field_to_update"). Omitted fields will not be updated. To
   * replace the entire entity, use one path with the string "*" to match all
   * fields.
   */
  updateMask: string[] | undefined;
}

/** Request message for CreateProperty RPC. */
export interface CreatePropertyRequest {
  /**
   * Required. The property to create.
   * Note: the supplied property must specify its parent.
   */
  property: Property | undefined;
}

/** Request message for DeleteProperty RPC. */
export interface DeletePropertyRequest {
  /**
   * Required. The name of the Property to soft-delete.
   * Format: properties/{property_id}
   * Example: "properties/1000"
   */
  name: string;
}

/** Request message for CreateFirebaseLink RPC */
export interface CreateFirebaseLinkRequest {
  /**
   * Required. Format: properties/{property_id}
   *
   * Example: `properties/1234`
   */
  parent: string;
  /** Required. The Firebase link to create. */
  firebaseLink: FirebaseLink | undefined;
}

/** Request message for DeleteFirebaseLink RPC */
export interface DeleteFirebaseLinkRequest {
  /**
   * Required. Format: properties/{property_id}/firebaseLinks/{firebase_link_id}
   *
   * Example: `properties/1234/firebaseLinks/5678`
   */
  name: string;
}

/** Request message for ListFirebaseLinks RPC */
export interface ListFirebaseLinksRequest {
  /**
   * Required. Format: properties/{property_id}
   *
   * Example: `properties/1234`
   */
  parent: string;
  /**
   * The maximum number of resources to return. The service may return
   * fewer than this value, even if there are additional pages.
   * If unspecified, at most 50 resources will be returned.
   * The maximum value is 200; (higher values will be coerced to the maximum)
   */
  pageSize: number;
  /**
   * A page token, received from a previous `ListFirebaseLinks` call.
   * Provide this to retrieve the subsequent page.
   * When paginating, all other parameters provided to `ListFirebaseLinks` must
   * match the call that provided the page token.
   */
  pageToken: string;
}

/** Response message for ListFirebaseLinks RPC */
export interface ListFirebaseLinksResponse {
  /** List of FirebaseLinks. This will have at most one value. */
  firebaseLinks: FirebaseLink[];
  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   * Currently, Google Analytics supports only one FirebaseLink per property,
   * so this will never be populated.
   */
  nextPageToken: string;
}

/** Request message for GetGlobalSiteTag RPC. */
export interface GetGlobalSiteTagRequest {
  /**
   * Required. The name of the site tag to lookup.
   * Note that site tags are singletons and do not have unique IDs.
   * Format: properties/{property_id}/dataStreams/{stream_id}/globalSiteTag
   *
   * Example: `properties/123/dataStreams/456/globalSiteTag`
   */
  name: string;
}

/** Request message for CreateGoogleAdsLink RPC */
export interface CreateGoogleAdsLinkRequest {
  /** Required. Example format: properties/1234 */
  parent: string;
  /** Required. The GoogleAdsLink to create. */
  googleAdsLink: GoogleAdsLink | undefined;
}

/** Request message for UpdateGoogleAdsLink RPC */
export interface UpdateGoogleAdsLinkRequest {
  /** The GoogleAdsLink to update */
  googleAdsLink:
    | GoogleAdsLink
    | undefined;
  /**
   * Required. The list of fields to be updated. Field names must be in snake
   * case (e.g., "field_to_update"). Omitted fields will not be updated. To
   * replace the entire entity, use one path with the string "*" to match all
   * fields.
   */
  updateMask: string[] | undefined;
}

/** Request message for DeleteGoogleAdsLink RPC. */
export interface DeleteGoogleAdsLinkRequest {
  /** Required. Example format: properties/1234/googleAdsLinks/5678 */
  name: string;
}

/** Request message for ListGoogleAdsLinks RPC. */
export interface ListGoogleAdsLinksRequest {
  /** Required. Example format: properties/1234 */
  parent: string;
  /**
   * The maximum number of resources to return.
   * If unspecified, at most 50 resources will be returned.
   * The maximum value is 200 (higher values will be coerced to the maximum).
   */
  pageSize: number;
  /**
   * A page token, received from a previous `ListGoogleAdsLinks` call.
   * Provide this to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to `ListGoogleAdsLinks` must
   * match the call that provided the page token.
   */
  pageToken: string;
}

/** Response message for ListGoogleAdsLinks RPC. */
export interface ListGoogleAdsLinksResponse {
  /** List of GoogleAdsLinks. */
  googleAdsLinks: GoogleAdsLink[];
  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

/** Request message for GetDataSharingSettings RPC. */
export interface GetDataSharingSettingsRequest {
  /**
   * Required. The name of the settings to lookup.
   * Format: accounts/{account}/dataSharingSettings
   *
   * Example: `accounts/1000/dataSharingSettings`
   */
  name: string;
}

/** Request message for ListAccountSummaries RPC. */
export interface ListAccountSummariesRequest {
  /**
   * The maximum number of AccountSummary resources to return. The service may
   * return fewer than this value, even if there are additional pages.
   * If unspecified, at most 50 resources will be returned.
   * The maximum value is 200; (higher values will be coerced to the maximum)
   */
  pageSize: number;
  /**
   * A page token, received from a previous `ListAccountSummaries` call.
   * Provide this to retrieve the subsequent page.
   * When paginating, all other parameters provided to `ListAccountSummaries`
   * must match the call that provided the page token.
   */
  pageToken: string;
}

/** Response message for ListAccountSummaries RPC. */
export interface ListAccountSummariesResponse {
  /** Account summaries of all accounts the caller has access to. */
  accountSummaries: AccountSummary[];
  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

/** Request message for AcknowledgeUserDataCollection RPC. */
export interface AcknowledgeUserDataCollectionRequest {
  /** Required. The property for which to acknowledge user data collection. */
  property: string;
  /**
   * Required. An acknowledgement that the caller of this method understands the
   * terms of user data collection.
   *
   * This field must contain the exact value:
   * "I acknowledge that I have the necessary privacy disclosures and rights
   * from my end users for the collection and processing of their data,
   * including the association of such data with the visitation information
   * Google Analytics collects from my site and/or app property."
   */
  acknowledgement: string;
}

/** Response message for AcknowledgeUserDataCollection RPC. */
export interface AcknowledgeUserDataCollectionResponse {
}

/** Request message for SearchChangeHistoryEvents RPC. */
export interface SearchChangeHistoryEventsRequest {
  /**
   * Required. The account resource for which to return change history
   * resources. Format: accounts/{account}
   *
   * Example: `accounts/100`
   */
  account: string;
  /**
   * Optional. Resource name for a child property. If set, only return changes
   * made to this property or its child resources.
   * Format: properties/{propertyId}
   *
   * Example: `properties/100`
   */
  property: string;
  /**
   * Optional. If set, only return changes if they are for a resource that
   * matches at least one of these types.
   */
  resourceType: ChangeHistoryResourceType[];
  /**
   * Optional. If set, only return changes that match one or more of these types
   * of actions.
   */
  action: ActionType[];
  /**
   * Optional. If set, only return changes if they are made by a user in this
   * list.
   */
  actorEmail: string[];
  /** Optional. If set, only return changes made after this time (inclusive). */
  earliestChangeTime:
    | Date
    | undefined;
  /** Optional. If set, only return changes made before this time (inclusive). */
  latestChangeTime:
    | Date
    | undefined;
  /**
   * Optional. The maximum number of ChangeHistoryEvent items to return.
   * The service may return fewer than this value, even if there are additional
   * pages. If unspecified, at most 50 items will be returned.
   * The maximum value is 200 (higher values will be coerced to the maximum).
   */
  pageSize: number;
  /**
   * Optional. A page token, received from a previous
   * `SearchChangeHistoryEvents` call. Provide this to retrieve the subsequent
   * page. When paginating, all other parameters provided to
   * `SearchChangeHistoryEvents` must match the call that provided the page
   * token.
   */
  pageToken: string;
}

/** Response message for SearchAccounts RPC. */
export interface SearchChangeHistoryEventsResponse {
  /** Results that were accessible to the caller. */
  changeHistoryEvents: ChangeHistoryEvent[];
  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

/** Request message for GetMeasurementProtocolSecret RPC. */
export interface GetMeasurementProtocolSecretRequest {
  /**
   * Required. The name of the measurement protocol secret to lookup.
   * Format:
   * properties/{property}/dataStreams/{dataStream}/measurementProtocolSecrets/{measurementProtocolSecret}
   */
  name: string;
}

/** Request message for CreateMeasurementProtocolSecret RPC */
export interface CreateMeasurementProtocolSecretRequest {
  /**
   * Required. The parent resource where this secret will be created.
   * Format: properties/{property}/dataStreams/{dataStream}
   */
  parent: string;
  /** Required. The measurement protocol secret to create. */
  measurementProtocolSecret: MeasurementProtocolSecret | undefined;
}

/** Request message for DeleteMeasurementProtocolSecret RPC */
export interface DeleteMeasurementProtocolSecretRequest {
  /**
   * Required. The name of the MeasurementProtocolSecret to delete.
   * Format:
   * properties/{property}/dataStreams/{dataStream}/measurementProtocolSecrets/{measurementProtocolSecret}
   */
  name: string;
}

/** Request message for UpdateMeasurementProtocolSecret RPC */
export interface UpdateMeasurementProtocolSecretRequest {
  /** Required. The measurement protocol secret to update. */
  measurementProtocolSecret:
    | MeasurementProtocolSecret
    | undefined;
  /**
   * Required. The list of fields to be updated. Omitted fields will not be
   * updated.
   */
  updateMask: string[] | undefined;
}

/** Request message for ListMeasurementProtocolSecret RPC */
export interface ListMeasurementProtocolSecretsRequest {
  /**
   * Required. The resource name of the parent stream.
   * Format:
   * properties/{property}/dataStreams/{dataStream}/measurementProtocolSecrets
   */
  parent: string;
  /**
   * The maximum number of resources to return.
   * If unspecified, at most 10 resources will be returned.
   * The maximum value is 10. Higher values will be coerced to the maximum.
   */
  pageSize: number;
  /**
   * A page token, received from a previous `ListMeasurementProtocolSecrets`
   * call. Provide this to retrieve the subsequent page. When paginating, all
   * other parameters provided to `ListMeasurementProtocolSecrets` must match
   * the call that provided the page token.
   */
  pageToken: string;
}

/** Response message for ListMeasurementProtocolSecret RPC */
export interface ListMeasurementProtocolSecretsResponse {
  /** A list of secrets for the parent stream specified in the request. */
  measurementProtocolSecrets: MeasurementProtocolSecret[];
  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

/** Request message for GetSKAdNetworkConversionValueSchema RPC. */
export interface GetSKAdNetworkConversionValueSchemaRequest {
  /**
   * Required. The resource name of SKAdNetwork conversion value schema to look
   * up. Format:
   * properties/{property}/dataStreams/{dataStream}/sKAdNetworkConversionValueSchema/{skadnetwork_conversion_value_schema}
   */
  name: string;
}

/** Request message for CreateSKAdNetworkConversionValueSchema RPC. */
export interface CreateSKAdNetworkConversionValueSchemaRequest {
  /**
   * Required. The parent resource where this schema will be created.
   * Format: properties/{property}/dataStreams/{dataStream}
   */
  parent: string;
  /** Required. SKAdNetwork conversion value schema to create. */
  skadnetworkConversionValueSchema: SKAdNetworkConversionValueSchema | undefined;
}

/** Request message for DeleteSKAdNetworkConversionValueSchema RPC. */
export interface DeleteSKAdNetworkConversionValueSchemaRequest {
  /**
   * Required. The name of the SKAdNetworkConversionValueSchema to delete.
   * Format:
   * properties/{property}/dataStreams/{dataStream}/sKAdNetworkConversionValueSchema/{skadnetwork_conversion_value_schema}
   */
  name: string;
}

/** Request message for UpdateSKAdNetworkConversionValueSchema RPC. */
export interface UpdateSKAdNetworkConversionValueSchemaRequest {
  /** Required. SKAdNetwork conversion value schema to update. */
  skadnetworkConversionValueSchema:
    | SKAdNetworkConversionValueSchema
    | undefined;
  /**
   * Required. The list of fields to be updated. Omitted fields will not be
   * updated.
   */
  updateMask: string[] | undefined;
}

/** Request message for ListSKAdNetworkConversionValueSchemas RPC */
export interface ListSKAdNetworkConversionValueSchemasRequest {
  /**
   * Required. The DataStream resource to list schemas for.
   * Format:
   * properties/{property_id}/dataStreams/{dataStream}
   * Example: properties/1234/dataStreams/5678
   */
  parent: string;
  /**
   * The maximum number of resources to return. The service may return
   * fewer than this value, even if there are additional pages.
   * If unspecified, at most 50 resources will be returned.
   * The maximum value is 200; (higher values will be coerced to the maximum)
   */
  pageSize: number;
  /**
   * A page token, received from a previous
   * `ListSKAdNetworkConversionValueSchemas` call. Provide this to retrieve the
   * subsequent page. When paginating, all other parameters provided to
   * `ListSKAdNetworkConversionValueSchema` must match the call that provided
   * the page token.
   */
  pageToken: string;
}

/** Response message for ListSKAdNetworkConversionValueSchemas RPC */
export interface ListSKAdNetworkConversionValueSchemasResponse {
  /**
   * List of SKAdNetworkConversionValueSchemas. This will have at most one
   * value.
   */
  skadnetworkConversionValueSchemas: SKAdNetworkConversionValueSchema[];
  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   * Currently, Google Analytics supports only one
   * SKAdNetworkConversionValueSchema per dataStream, so this will never be
   * populated.
   */
  nextPageToken: string;
}

/** Request message for GetGoogleSignalsSettings RPC */
export interface GetGoogleSignalsSettingsRequest {
  /**
   * Required. The name of the google signals settings to retrieve.
   * Format: properties/{property}/googleSignalsSettings
   */
  name: string;
}

/** Request message for UpdateGoogleSignalsSettings RPC */
export interface UpdateGoogleSignalsSettingsRequest {
  /**
   * Required. The settings to update.
   * The `name` field is used to identify the settings to be updated.
   */
  googleSignalsSettings:
    | GoogleSignalsSettings
    | undefined;
  /**
   * Required. The list of fields to be updated. Field names must be in snake
   * case (e.g., "field_to_update"). Omitted fields will not be updated. To
   * replace the entire entity, use one path with the string "*" to match all
   * fields.
   */
  updateMask: string[] | undefined;
}

/** Request message for CreateConversionEvent RPC */
export interface CreateConversionEventRequest {
  /** Required. The conversion event to create. */
  conversionEvent:
    | ConversionEvent
    | undefined;
  /**
   * Required. The resource name of the parent property where this conversion
   * event will be created. Format: properties/123
   */
  parent: string;
}

/** Request message for UpdateConversionEvent RPC */
export interface UpdateConversionEventRequest {
  /**
   * Required. The conversion event to update.
   * The `name` field is used to identify the settings to be updated.
   */
  conversionEvent:
    | ConversionEvent
    | undefined;
  /**
   * Required. The list of fields to be updated. Field names must be in snake
   * case (e.g., "field_to_update"). Omitted fields will not be updated. To
   * replace the entire entity, use one path with the string "*" to match all
   * fields.
   */
  updateMask: string[] | undefined;
}

/** Request message for GetConversionEvent RPC */
export interface GetConversionEventRequest {
  /**
   * Required. The resource name of the conversion event to retrieve.
   * Format: properties/{property}/conversionEvents/{conversion_event}
   * Example: "properties/123/conversionEvents/456"
   */
  name: string;
}

/** Request message for DeleteConversionEvent RPC */
export interface DeleteConversionEventRequest {
  /**
   * Required. The resource name of the conversion event to delete.
   * Format: properties/{property}/conversionEvents/{conversion_event}
   * Example: "properties/123/conversionEvents/456"
   */
  name: string;
}

/** Request message for ListConversionEvents RPC */
export interface ListConversionEventsRequest {
  /**
   * Required. The resource name of the parent property.
   * Example: 'properties/123'
   */
  parent: string;
  /**
   * The maximum number of resources to return.
   * If unspecified, at most 50 resources will be returned.
   * The maximum value is 200; (higher values will be coerced to the maximum)
   */
  pageSize: number;
  /**
   * A page token, received from a previous `ListConversionEvents` call.
   * Provide this to retrieve the subsequent page.
   * When paginating, all other parameters provided to `ListConversionEvents`
   * must match the call that provided the page token.
   */
  pageToken: string;
}

/** Response message for ListConversionEvents RPC. */
export interface ListConversionEventsResponse {
  /** The requested conversion events */
  conversionEvents: ConversionEvent[];
  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

/** Request message for CreateKeyEvent RPC */
export interface CreateKeyEventRequest {
  /** Required. The Key Event to create. */
  keyEvent:
    | KeyEvent
    | undefined;
  /**
   * Required. The resource name of the parent property where this Key Event
   * will be created. Format: properties/123
   */
  parent: string;
}

/** Request message for UpdateKeyEvent RPC */
export interface UpdateKeyEventRequest {
  /**
   * Required. The Key Event to update.
   * The `name` field is used to identify the settings to be updated.
   */
  keyEvent:
    | KeyEvent
    | undefined;
  /**
   * Required. The list of fields to be updated. Field names must be in snake
   * case (e.g., "field_to_update"). Omitted fields will not be updated. To
   * replace the entire entity, use one path with the string "*" to match all
   * fields.
   */
  updateMask: string[] | undefined;
}

/** Request message for GetKeyEvent RPC */
export interface GetKeyEventRequest {
  /**
   * Required. The resource name of the Key Event to retrieve.
   * Format: properties/{property}/keyEvents/{key_event}
   * Example: "properties/123/keyEvents/456"
   */
  name: string;
}

/** Request message for DeleteKeyEvent RPC */
export interface DeleteKeyEventRequest {
  /**
   * Required. The resource name of the Key Event to delete.
   * Format: properties/{property}/keyEvents/{key_event}
   * Example: "properties/123/keyEvents/456"
   */
  name: string;
}

/** Request message for ListKeyEvents RPC */
export interface ListKeyEventsRequest {
  /**
   * Required. The resource name of the parent property.
   * Example: 'properties/123'
   */
  parent: string;
  /**
   * The maximum number of resources to return.
   * If unspecified, at most 50 resources will be returned.
   * The maximum value is 200; (higher values will be coerced to the maximum)
   */
  pageSize: number;
  /**
   * A page token, received from a previous `ListKeyEvents` call.
   * Provide this to retrieve the subsequent page.
   * When paginating, all other parameters provided to `ListKeyEvents`
   * must match the call that provided the page token.
   */
  pageToken: string;
}

/** Response message for ListKeyEvents RPC. */
export interface ListKeyEventsResponse {
  /** The requested Key Events */
  keyEvents: KeyEvent[];
  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

/** Request message for GetDisplayVideo360AdvertiserLink RPC. */
export interface GetDisplayVideo360AdvertiserLinkRequest {
  /**
   * Required. The name of the DisplayVideo360AdvertiserLink to get.
   * Example format: properties/1234/displayVideo360AdvertiserLink/5678
   */
  name: string;
}

/** Request message for ListDisplayVideo360AdvertiserLinks RPC. */
export interface ListDisplayVideo360AdvertiserLinksRequest {
  /** Required. Example format: properties/1234 */
  parent: string;
  /**
   * The maximum number of resources to return.
   * If unspecified, at most 50 resources will be returned.
   * The maximum value is 200 (higher values will be coerced to the maximum).
   */
  pageSize: number;
  /**
   * A page token, received from a previous `ListDisplayVideo360AdvertiserLinks`
   * call. Provide this to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to
   * `ListDisplayVideo360AdvertiserLinks` must match the call that provided the
   * page token.
   */
  pageToken: string;
}

/** Response message for ListDisplayVideo360AdvertiserLinks RPC. */
export interface ListDisplayVideo360AdvertiserLinksResponse {
  /** List of DisplayVideo360AdvertiserLinks. */
  displayVideo360AdvertiserLinks: DisplayVideo360AdvertiserLink[];
  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

/** Request message for CreateDisplayVideo360AdvertiserLink RPC. */
export interface CreateDisplayVideo360AdvertiserLinkRequest {
  /** Required. Example format: properties/1234 */
  parent: string;
  /** Required. The DisplayVideo360AdvertiserLink to create. */
  displayVideo360AdvertiserLink: DisplayVideo360AdvertiserLink | undefined;
}

/** Request message for DeleteDisplayVideo360AdvertiserLink RPC. */
export interface DeleteDisplayVideo360AdvertiserLinkRequest {
  /**
   * Required. The name of the DisplayVideo360AdvertiserLink to delete.
   * Example format: properties/1234/displayVideo360AdvertiserLinks/5678
   */
  name: string;
}

/** Request message for UpdateDisplayVideo360AdvertiserLink RPC. */
export interface UpdateDisplayVideo360AdvertiserLinkRequest {
  /** The DisplayVideo360AdvertiserLink to update */
  displayVideo360AdvertiserLink:
    | DisplayVideo360AdvertiserLink
    | undefined;
  /**
   * Required. The list of fields to be updated. Omitted fields will not be
   * updated. To replace the entire entity, use one path with the string "*" to
   * match all fields.
   */
  updateMask: string[] | undefined;
}

/** Request message for GetDisplayVideo360AdvertiserLinkProposal RPC. */
export interface GetDisplayVideo360AdvertiserLinkProposalRequest {
  /**
   * Required. The name of the DisplayVideo360AdvertiserLinkProposal to get.
   * Example format: properties/1234/displayVideo360AdvertiserLinkProposals/5678
   */
  name: string;
}

/** Request message for ListDisplayVideo360AdvertiserLinkProposals RPC. */
export interface ListDisplayVideo360AdvertiserLinkProposalsRequest {
  /** Required. Example format: properties/1234 */
  parent: string;
  /**
   * The maximum number of resources to return.
   * If unspecified, at most 50 resources will be returned.
   * The maximum value is 200 (higher values will be coerced to the maximum).
   */
  pageSize: number;
  /**
   * A page token, received from a previous
   * `ListDisplayVideo360AdvertiserLinkProposals` call. Provide this to retrieve
   * the subsequent page.
   *
   * When paginating, all other parameters provided to
   * `ListDisplayVideo360AdvertiserLinkProposals` must match the call that
   * provided the page token.
   */
  pageToken: string;
}

/** Response message for ListDisplayVideo360AdvertiserLinkProposals RPC. */
export interface ListDisplayVideo360AdvertiserLinkProposalsResponse {
  /** List of DisplayVideo360AdvertiserLinkProposals. */
  displayVideo360AdvertiserLinkProposals: DisplayVideo360AdvertiserLinkProposal[];
  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

/** Request message for CreateDisplayVideo360AdvertiserLinkProposal RPC. */
export interface CreateDisplayVideo360AdvertiserLinkProposalRequest {
  /** Required. Example format: properties/1234 */
  parent: string;
  /** Required. The DisplayVideo360AdvertiserLinkProposal to create. */
  displayVideo360AdvertiserLinkProposal: DisplayVideo360AdvertiserLinkProposal | undefined;
}

/** Request message for DeleteDisplayVideo360AdvertiserLinkProposal RPC. */
export interface DeleteDisplayVideo360AdvertiserLinkProposalRequest {
  /**
   * Required. The name of the DisplayVideo360AdvertiserLinkProposal to delete.
   * Example format: properties/1234/displayVideo360AdvertiserLinkProposals/5678
   */
  name: string;
}

/** Request message for ApproveDisplayVideo360AdvertiserLinkProposal RPC. */
export interface ApproveDisplayVideo360AdvertiserLinkProposalRequest {
  /**
   * Required. The name of the DisplayVideo360AdvertiserLinkProposal to approve.
   * Example format: properties/1234/displayVideo360AdvertiserLinkProposals/5678
   */
  name: string;
}

/** Response message for ApproveDisplayVideo360AdvertiserLinkProposal RPC. */
export interface ApproveDisplayVideo360AdvertiserLinkProposalResponse {
  /**
   * The DisplayVideo360AdvertiserLink created as a result of approving the
   * proposal.
   */
  displayVideo360AdvertiserLink: DisplayVideo360AdvertiserLink | undefined;
}

/** Request message for CancelDisplayVideo360AdvertiserLinkProposal RPC. */
export interface CancelDisplayVideo360AdvertiserLinkProposalRequest {
  /**
   * Required. The name of the DisplayVideo360AdvertiserLinkProposal to cancel.
   * Example format: properties/1234/displayVideo360AdvertiserLinkProposals/5678
   */
  name: string;
}

/** Request message for GetSearchAds360Link RPC. */
export interface GetSearchAds360LinkRequest {
  /**
   * Required. The name of the SearchAds360Link to get.
   * Example format: properties/1234/SearchAds360Link/5678
   */
  name: string;
}

/** Request message for ListSearchAds360Links RPC. */
export interface ListSearchAds360LinksRequest {
  /** Required. Example format: properties/1234 */
  parent: string;
  /**
   * The maximum number of resources to return.
   * If unspecified, at most 50 resources will be returned.
   * The maximum value is 200 (higher values will be coerced to the maximum).
   */
  pageSize: number;
  /**
   * A page token, received from a previous `ListSearchAds360Links`
   * call. Provide this to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to
   * `ListSearchAds360Links` must match the call that provided the
   * page token.
   */
  pageToken: string;
}

/** Response message for ListSearchAds360Links RPC. */
export interface ListSearchAds360LinksResponse {
  /** List of SearchAds360Links. */
  searchAds360Links: SearchAds360Link[];
  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

/** Request message for CreateSearchAds360Link RPC. */
export interface CreateSearchAds360LinkRequest {
  /** Required. Example format: properties/1234 */
  parent: string;
  /** Required. The SearchAds360Link to create. */
  searchAds360Link: SearchAds360Link | undefined;
}

/** Request message for DeleteSearchAds360Link RPC. */
export interface DeleteSearchAds360LinkRequest {
  /**
   * Required. The name of the SearchAds360Link to delete.
   * Example format: properties/1234/SearchAds360Links/5678
   */
  name: string;
}

/** Request message for UpdateSearchAds360Link RPC. */
export interface UpdateSearchAds360LinkRequest {
  /** The SearchAds360Link to update */
  searchAds360Link:
    | SearchAds360Link
    | undefined;
  /**
   * Required. The list of fields to be updated. Omitted fields will not be
   * updated. To replace the entire entity, use one path with the string "*" to
   * match all fields.
   */
  updateMask: string[] | undefined;
}

/** Request message for CreateCustomDimension RPC. */
export interface CreateCustomDimensionRequest {
  /** Required. Example format: properties/1234 */
  parent: string;
  /** Required. The CustomDimension to create. */
  customDimension: CustomDimension | undefined;
}

/** Request message for UpdateCustomDimension RPC. */
export interface UpdateCustomDimensionRequest {
  /** The CustomDimension to update */
  customDimension:
    | CustomDimension
    | undefined;
  /**
   * Required. The list of fields to be updated. Omitted fields will not be
   * updated. To replace the entire entity, use one path with the string "*" to
   * match all fields.
   */
  updateMask: string[] | undefined;
}

/** Request message for ListCustomDimensions RPC. */
export interface ListCustomDimensionsRequest {
  /** Required. Example format: properties/1234 */
  parent: string;
  /**
   * The maximum number of resources to return.
   * If unspecified, at most 50 resources will be returned.
   * The maximum value is 200 (higher values will be coerced to the maximum).
   */
  pageSize: number;
  /**
   * A page token, received from a previous `ListCustomDimensions` call.
   * Provide this to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to `ListCustomDimensions`
   * must match the call that provided the page token.
   */
  pageToken: string;
}

/** Response message for ListCustomDimensions RPC. */
export interface ListCustomDimensionsResponse {
  /** List of CustomDimensions. */
  customDimensions: CustomDimension[];
  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

/** Request message for ArchiveCustomDimension RPC. */
export interface ArchiveCustomDimensionRequest {
  /**
   * Required. The name of the CustomDimension to archive.
   * Example format: properties/1234/customDimensions/5678
   */
  name: string;
}

/** Request message for GetCustomDimension RPC. */
export interface GetCustomDimensionRequest {
  /**
   * Required. The name of the CustomDimension to get.
   * Example format: properties/1234/customDimensions/5678
   */
  name: string;
}

/** Request message for CreateCustomMetric RPC. */
export interface CreateCustomMetricRequest {
  /** Required. Example format: properties/1234 */
  parent: string;
  /** Required. The CustomMetric to create. */
  customMetric: CustomMetric | undefined;
}

/** Request message for UpdateCustomMetric RPC. */
export interface UpdateCustomMetricRequest {
  /** The CustomMetric to update */
  customMetric:
    | CustomMetric
    | undefined;
  /**
   * Required. The list of fields to be updated. Omitted fields will not be
   * updated. To replace the entire entity, use one path with the string "*" to
   * match all fields.
   */
  updateMask: string[] | undefined;
}

/** Request message for ListCustomMetrics RPC. */
export interface ListCustomMetricsRequest {
  /** Required. Example format: properties/1234 */
  parent: string;
  /**
   * The maximum number of resources to return.
   * If unspecified, at most 50 resources will be returned.
   * The maximum value is 200 (higher values will be coerced to the maximum).
   */
  pageSize: number;
  /**
   * A page token, received from a previous `ListCustomMetrics` call.
   * Provide this to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to `ListCustomMetrics` must
   * match the call that provided the page token.
   */
  pageToken: string;
}

/** Response message for ListCustomMetrics RPC. */
export interface ListCustomMetricsResponse {
  /** List of CustomMetrics. */
  customMetrics: CustomMetric[];
  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

/** Request message for ArchiveCustomMetric RPC. */
export interface ArchiveCustomMetricRequest {
  /**
   * Required. The name of the CustomMetric to archive.
   * Example format: properties/1234/customMetrics/5678
   */
  name: string;
}

/** Request message for GetCustomMetric RPC. */
export interface GetCustomMetricRequest {
  /**
   * Required. The name of the CustomMetric to get.
   * Example format: properties/1234/customMetrics/5678
   */
  name: string;
}

/** Request message for CreateCalculatedMetric RPC. */
export interface CreateCalculatedMetricRequest {
  /**
   * Required. Format: properties/{property_id}
   * Example: properties/1234
   */
  parent: string;
  /**
   * Required. The ID to use for the calculated metric which will become the
   * final component of the calculated metric's resource name.
   *
   * This value should be 1-80 characters and valid characters are
   * /[a-zA-Z0-9_]/, no spaces allowed. calculated_metric_id must be unique
   * between all calculated metrics under a property. The calculated_metric_id
   * is used when referencing this calculated metric from external APIs, for
   * example, "calcMetric:{calculated_metric_id}".
   */
  calculatedMetricId: string;
  /** Required. The CalculatedMetric to create. */
  calculatedMetric: CalculatedMetric | undefined;
}

/** Request message for UpdateCalculatedMetric RPC. */
export interface UpdateCalculatedMetricRequest {
  /** Required. The CalculatedMetric to update */
  calculatedMetric:
    | CalculatedMetric
    | undefined;
  /**
   * Required. The list of fields to be updated. Omitted fields will not be
   * updated. To replace the entire entity, use one path with the string "*" to
   * match all fields.
   */
  updateMask: string[] | undefined;
}

/** Request message for DeleteCalculatedMetric RPC. */
export interface DeleteCalculatedMetricRequest {
  /**
   * Required. The name of the CalculatedMetric to delete.
   * Format: properties/{property_id}/calculatedMetrics/{calculated_metric_id}
   * Example: properties/1234/calculatedMetrics/Metric01
   */
  name: string;
}

/** Request message for ListCalculatedMetrics RPC. */
export interface ListCalculatedMetricsRequest {
  /** Required. Example format: properties/1234 */
  parent: string;
  /**
   * Optional. The maximum number of resources to return.
   * If unspecified, at most 50 resources will be returned.
   * The maximum value is 200 (higher values will be coerced to the maximum).
   */
  pageSize: number;
  /**
   * Optional. A page token, received from a previous `ListCalculatedMetrics`
   * call. Provide this to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to `ListCalculatedMetrics`
   * must match the call that provided the page token.
   */
  pageToken: string;
}

/** Response message for ListCalculatedMetrics RPC. */
export interface ListCalculatedMetricsResponse {
  /** List of CalculatedMetrics. */
  calculatedMetrics: CalculatedMetric[];
  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

/** Request message for GetCalculatedMetric RPC. */
export interface GetCalculatedMetricRequest {
  /**
   * Required. The name of the CalculatedMetric to get.
   * Format: properties/{property_id}/calculatedMetrics/{calculated_metric_id}
   * Example: properties/1234/calculatedMetrics/Metric01
   */
  name: string;
}

/** Request message for GetDataRetentionSettings RPC. */
export interface GetDataRetentionSettingsRequest {
  /**
   * Required. The name of the settings to lookup.
   * Format:
   * properties/{property}/dataRetentionSettings
   * Example: "properties/1000/dataRetentionSettings"
   */
  name: string;
}

/** Request message for UpdateDataRetentionSettings RPC. */
export interface UpdateDataRetentionSettingsRequest {
  /**
   * Required. The settings to update.
   * The `name` field is used to identify the settings to be updated.
   */
  dataRetentionSettings:
    | DataRetentionSettings
    | undefined;
  /**
   * Required. The list of fields to be updated. Field names must be in snake
   * case (e.g., "field_to_update"). Omitted fields will not be updated. To
   * replace the entire entity, use one path with the string "*" to match all
   * fields.
   */
  updateMask: string[] | undefined;
}

/** Request message for CreateDataStream RPC. */
export interface CreateDataStreamRequest {
  /** Required. Example format: properties/1234 */
  parent: string;
  /** Required. The DataStream to create. */
  dataStream: DataStream | undefined;
}

/** Request message for DeleteDataStream RPC. */
export interface DeleteDataStreamRequest {
  /**
   * Required. The name of the DataStream to delete.
   * Example format: properties/1234/dataStreams/5678
   */
  name: string;
}

/** Request message for UpdateDataStream RPC. */
export interface UpdateDataStreamRequest {
  /** The DataStream to update */
  dataStream:
    | DataStream
    | undefined;
  /**
   * Required. The list of fields to be updated. Omitted fields will not be
   * updated. To replace the entire entity, use one path with the string "*" to
   * match all fields.
   */
  updateMask: string[] | undefined;
}

/** Request message for ListDataStreams RPC. */
export interface ListDataStreamsRequest {
  /** Required. Example format: properties/1234 */
  parent: string;
  /**
   * The maximum number of resources to return.
   * If unspecified, at most 50 resources will be returned.
   * The maximum value is 200 (higher values will be coerced to the maximum).
   */
  pageSize: number;
  /**
   * A page token, received from a previous `ListDataStreams` call.
   * Provide this to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to `ListDataStreams` must
   * match the call that provided the page token.
   */
  pageToken: string;
}

/** Response message for ListDataStreams RPC. */
export interface ListDataStreamsResponse {
  /** List of DataStreams. */
  dataStreams: DataStream[];
  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

/** Request message for GetDataStream RPC. */
export interface GetDataStreamRequest {
  /**
   * Required. The name of the DataStream to get.
   * Example format: properties/1234/dataStreams/5678
   */
  name: string;
}

/** Request message for GetAudience RPC. */
export interface GetAudienceRequest {
  /**
   * Required. The name of the Audience to get.
   * Example format: properties/1234/audiences/5678
   */
  name: string;
}

/** Request message for ListAudiences RPC. */
export interface ListAudiencesRequest {
  /** Required. Example format: properties/1234 */
  parent: string;
  /**
   * The maximum number of resources to return.
   * If unspecified, at most 50 resources will be returned.
   * The maximum value is 200 (higher values will be coerced to the maximum).
   */
  pageSize: number;
  /**
   * A page token, received from a previous `ListAudiences` call. Provide this
   * to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to `ListAudiences` must
   * match the call that provided the page token.
   */
  pageToken: string;
}

/** Response message for ListAudiences RPC. */
export interface ListAudiencesResponse {
  /** List of Audiences. */
  audiences: Audience[];
  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

/** Request message for CreateAudience RPC. */
export interface CreateAudienceRequest {
  /** Required. Example format: properties/1234 */
  parent: string;
  /** Required. The audience to create. */
  audience: Audience | undefined;
}

/** Request message for UpdateAudience RPC. */
export interface UpdateAudienceRequest {
  /**
   * Required. The audience to update.
   * The audience's `name` field is used to identify the audience to be updated.
   */
  audience:
    | Audience
    | undefined;
  /**
   * Required. The list of fields to be updated. Field names must be in snake
   * case (e.g., "field_to_update"). Omitted fields will not be updated. To
   * replace the entire entity, use one path with the string "*" to match all
   * fields.
   */
  updateMask: string[] | undefined;
}

/** Request message for ArchiveAudience RPC. */
export interface ArchiveAudienceRequest {
  /** Required. Example format: properties/1234/audiences/5678 */
  name: string;
}

/** Request message for GetAttributionSettings RPC. */
export interface GetAttributionSettingsRequest {
  /**
   * Required. The name of the attribution settings to retrieve.
   * Format: properties/{property}/attributionSettings
   */
  name: string;
}

/** Request message for UpdateAttributionSettings RPC */
export interface UpdateAttributionSettingsRequest {
  /**
   * Required. The attribution settings to update.
   * The `name` field is used to identify the settings to be updated.
   */
  attributionSettings:
    | AttributionSettings
    | undefined;
  /**
   * Required. The list of fields to be updated. Field names must be in snake
   * case (e.g., "field_to_update"). Omitted fields will not be updated. To
   * replace the entire entity, use one path with the string "*" to match all
   * fields.
   */
  updateMask: string[] | undefined;
}

/** Request message for GetAccessBinding RPC. */
export interface GetAccessBindingRequest {
  /**
   * Required. The name of the access binding to retrieve.
   * Formats:
   * - accounts/{account}/accessBindings/{accessBinding}
   * - properties/{property}/accessBindings/{accessBinding}
   */
  name: string;
}

/** Request message for BatchGetAccessBindings RPC. */
export interface BatchGetAccessBindingsRequest {
  /**
   * Required. The account or property that owns the access bindings. The parent
   * of all provided values for the 'names' field must match this field.
   * Formats:
   * - accounts/{account}
   * - properties/{property}
   */
  parent: string;
  /**
   * Required. The names of the access bindings to retrieve.
   * A maximum of 1000 access bindings can be retrieved in a batch.
   * Formats:
   * - accounts/{account}/accessBindings/{accessBinding}
   * - properties/{property}/accessBindings/{accessBinding}
   */
  names: string[];
}

/** Response message for BatchGetAccessBindings RPC. */
export interface BatchGetAccessBindingsResponse {
  /** The requested access bindings. */
  accessBindings: AccessBinding[];
}

/** Request message for ListAccessBindings RPC. */
export interface ListAccessBindingsRequest {
  /**
   * Required. Formats:
   * - accounts/{account}
   * - properties/{property}
   */
  parent: string;
  /**
   * The maximum number of access bindings to return.
   * The service may return fewer than this value.
   * If unspecified, at most 200 access bindings will be returned.
   * The maximum value is 500; values above 500 will be coerced to 500.
   */
  pageSize: number;
  /**
   * A page token, received from a previous `ListAccessBindings` call.
   * Provide this to retrieve the subsequent page.
   * When paginating, all other parameters provided to `ListAccessBindings` must
   * match the call that provided the page token.
   */
  pageToken: string;
}

/** Response message for ListAccessBindings RPC. */
export interface ListAccessBindingsResponse {
  /**
   * List of AccessBindings. These will be ordered stably, but in an arbitrary
   * order.
   */
  accessBindings: AccessBinding[];
  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

/** Request message for CreateAccessBinding RPC. */
export interface CreateAccessBindingRequest {
  /**
   * Required. Formats:
   * - accounts/{account}
   * - properties/{property}
   */
  parent: string;
  /** Required. The access binding to create. */
  accessBinding: AccessBinding | undefined;
}

/** Request message for BatchCreateAccessBindings RPC. */
export interface BatchCreateAccessBindingsRequest {
  /**
   * Required. The account or property that owns the access bindings. The parent
   * field in the CreateAccessBindingRequest messages must either be empty or
   * match this field. Formats:
   * - accounts/{account}
   * - properties/{property}
   */
  parent: string;
  /**
   * Required. The requests specifying the access bindings to create.
   * A maximum of 1000 access bindings can be created in a batch.
   */
  requests: CreateAccessBindingRequest[];
}

/** Response message for BatchCreateAccessBindings RPC. */
export interface BatchCreateAccessBindingsResponse {
  /** The access bindings created. */
  accessBindings: AccessBinding[];
}

/** Request message for UpdateAccessBinding RPC. */
export interface UpdateAccessBindingRequest {
  /** Required. The access binding to update. */
  accessBinding: AccessBinding | undefined;
}

/** Request message for BatchUpdateAccessBindings RPC. */
export interface BatchUpdateAccessBindingsRequest {
  /**
   * Required. The account or property that owns the access bindings. The parent
   * of all provided AccessBinding in UpdateAccessBindingRequest messages must
   * match this field.
   * Formats:
   * - accounts/{account}
   * - properties/{property}
   */
  parent: string;
  /**
   * Required. The requests specifying the access bindings to update.
   * A maximum of 1000 access bindings can be updated in a batch.
   */
  requests: UpdateAccessBindingRequest[];
}

/** Response message for BatchUpdateAccessBindings RPC. */
export interface BatchUpdateAccessBindingsResponse {
  /** The access bindings updated. */
  accessBindings: AccessBinding[];
}

/** Request message for DeleteAccessBinding RPC. */
export interface DeleteAccessBindingRequest {
  /**
   * Required. Formats:
   * - accounts/{account}/accessBindings/{accessBinding}
   * - properties/{property}/accessBindings/{accessBinding}
   */
  name: string;
}

/** Request message for BatchDeleteAccessBindings RPC. */
export interface BatchDeleteAccessBindingsRequest {
  /**
   * Required. The account or property that owns the access bindings. The parent
   * of all provided values for the 'names' field in DeleteAccessBindingRequest
   * messages must match this field. Formats:
   * - accounts/{account}
   * - properties/{property}
   */
  parent: string;
  /**
   * Required. The requests specifying the access bindings to delete.
   * A maximum of 1000 access bindings can be deleted in a batch.
   */
  requests: DeleteAccessBindingRequest[];
}

/** Request message for CreateExpandedDataSet RPC. */
export interface CreateExpandedDataSetRequest {
  /** Required. Example format: properties/1234 */
  parent: string;
  /** Required. The ExpandedDataSet to create. */
  expandedDataSet: ExpandedDataSet | undefined;
}

/** Request message for UpdateExpandedDataSet RPC. */
export interface UpdateExpandedDataSetRequest {
  /**
   * Required. The ExpandedDataSet to update.
   * The resource's `name` field is used to identify the ExpandedDataSet to be
   * updated.
   */
  expandedDataSet:
    | ExpandedDataSet
    | undefined;
  /**
   * Required. The list of fields to be updated. Field names must be in snake
   * case (e.g., "field_to_update"). Omitted fields will not be updated. To
   * replace the entire entity, use one path with the string "*" to match all
   * fields.
   */
  updateMask: string[] | undefined;
}

/** Request message for DeleteExpandedDataSet RPC. */
export interface DeleteExpandedDataSetRequest {
  /** Required. Example format: properties/1234/expandedDataSets/5678 */
  name: string;
}

/** Request message for GetExpandedDataSet RPC. */
export interface GetExpandedDataSetRequest {
  /**
   * Required. The name of the ExpandedDataSet to get.
   * Example format: properties/1234/expandedDataSets/5678
   */
  name: string;
}

/** Request message for ListExpandedDataSets RPC. */
export interface ListExpandedDataSetsRequest {
  /** Required. Example format: properties/1234 */
  parent: string;
  /**
   * The maximum number of resources to return.
   * If unspecified, at most 50 resources will be returned.
   * The maximum value is 200 (higher values will be coerced to the maximum).
   */
  pageSize: number;
  /**
   * A page token, received from a previous `ListExpandedDataSets` call. Provide
   * this to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to `ListExpandedDataSet`
   * must match the call that provided the page token.
   */
  pageToken: string;
}

/** Response message for ListExpandedDataSets RPC. */
export interface ListExpandedDataSetsResponse {
  /**
   * List of ExpandedDataSet. These will be ordered stably, but in an arbitrary
   * order.
   */
  expandedDataSets: ExpandedDataSet[];
  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

/** Request message for CreateChannelGroup RPC. */
export interface CreateChannelGroupRequest {
  /**
   * Required. The property for which to create a ChannelGroup.
   * Example format: properties/1234
   */
  parent: string;
  /** Required. The ChannelGroup to create. */
  channelGroup: ChannelGroup | undefined;
}

/** Request message for UpdateChannelGroup RPC. */
export interface UpdateChannelGroupRequest {
  /**
   * Required. The ChannelGroup to update.
   * The resource's `name` field is used to identify the ChannelGroup to be
   * updated.
   */
  channelGroup:
    | ChannelGroup
    | undefined;
  /**
   * Required. The list of fields to be updated. Field names must be in snake
   * case (e.g., "field_to_update"). Omitted fields will not be updated. To
   * replace the entire entity, use one path with the string "*" to match all
   * fields.
   */
  updateMask: string[] | undefined;
}

/** Request message for DeleteChannelGroup RPC. */
export interface DeleteChannelGroupRequest {
  /**
   * Required. The ChannelGroup to delete.
   * Example format: properties/1234/channelGroups/5678
   */
  name: string;
}

/** Request message for GetChannelGroup RPC. */
export interface GetChannelGroupRequest {
  /**
   * Required. The ChannelGroup to get.
   * Example format: properties/1234/channelGroups/5678
   */
  name: string;
}

/** Request message for ListChannelGroups RPC. */
export interface ListChannelGroupsRequest {
  /**
   * Required. The property for which to list ChannelGroups.
   * Example format: properties/1234
   */
  parent: string;
  /**
   * The maximum number of resources to return.
   * If unspecified, at most 50 resources will be returned.
   * The maximum value is 200 (higher values will be coerced to the maximum).
   */
  pageSize: number;
  /**
   * A page token, received from a previous `ListChannelGroups` call. Provide
   * this to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to `ListChannelGroups`
   * must match the call that provided the page token.
   */
  pageToken: string;
}

/** Response message for ListChannelGroups RPC. */
export interface ListChannelGroupsResponse {
  /**
   * List of ChannelGroup. These will be ordered stably, but in an arbitrary
   * order.
   */
  channelGroups: ChannelGroup[];
  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

/** Request for setting the opt out status for the automated GA4 setup process. */
export interface SetAutomatedGa4ConfigurationOptOutRequest {
  /**
   * Required. The UA property to set the opt out status. Note this request uses
   * the internal property ID, not the tracking ID of the form UA-XXXXXX-YY.
   * Format: properties/{internalWebPropertyId}
   * Example: properties/1234
   */
  property: string;
  /** The status to set. */
  optOut: boolean;
}

/**
 * Response message for setting the opt out status for the automated GA4 setup
 * process.
 */
export interface SetAutomatedGa4ConfigurationOptOutResponse {
}

/** Request for fetching the opt out status for the automated GA4 setup process. */
export interface FetchAutomatedGa4ConfigurationOptOutRequest {
  /**
   * Required. The UA property to get the opt out status. Note this request uses
   * the internal property ID, not the tracking ID of the form UA-XXXXXX-YY.
   * Format: properties/{internalWebPropertyId}
   * Example: properties/1234
   */
  property: string;
}

/**
 * Response message for fetching the opt out status for the automated GA4 setup
 * process.
 */
export interface FetchAutomatedGa4ConfigurationOptOutResponse {
  /** The opt out status for the UA property. */
  optOut: boolean;
}

/** Request message for CreateBigQueryLink RPC. */
export interface CreateBigQueryLinkRequest {
  /** Required. Example format: properties/1234 */
  parent: string;
  /** Required. The BigQueryLink to create. */
  bigqueryLink: BigQueryLink | undefined;
}

/** Request message for GetBigQueryLink RPC. */
export interface GetBigQueryLinkRequest {
  /**
   * Required. The name of the BigQuery link to lookup.
   * Format: properties/{property_id}/bigQueryLinks/{bigquery_link_id}
   * Example: properties/123/bigQueryLinks/456
   */
  name: string;
}

/** Request message for ListBigQueryLinks RPC. */
export interface ListBigQueryLinksRequest {
  /**
   * Required. The name of the property to list BigQuery links under.
   * Format: properties/{property_id}
   * Example: properties/1234
   */
  parent: string;
  /**
   * The maximum number of resources to return. The service may return
   * fewer than this value, even if there are additional pages.
   * If unspecified, at most 50 resources will be returned.
   * The maximum value is 200; (higher values will be coerced to the maximum)
   */
  pageSize: number;
  /**
   * A page token, received from a previous `ListBigQueryLinks` call.
   * Provide this to retrieve the subsequent page.
   * When paginating, all other parameters provided to `ListBigQueryLinks` must
   * match the call that provided the page token.
   */
  pageToken: string;
}

/** Response message for ListBigQueryLinks RPC */
export interface ListBigQueryLinksResponse {
  /** List of BigQueryLinks. */
  bigqueryLinks: BigQueryLink[];
  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

/** Request message for UpdateBigQueryLink RPC. */
export interface UpdateBigQueryLinkRequest {
  /**
   * Required. The settings to update.
   * The `name` field is used to identify the settings to be updated.
   */
  bigqueryLink:
    | BigQueryLink
    | undefined;
  /**
   * Required. The list of fields to be updated. Field names must be in snake
   * case (e.g., "field_to_update"). Omitted fields will not be updated. To
   * replace the entire entity, use one path with the string "*" to match all
   * fields.
   */
  updateMask: string[] | undefined;
}

/** Request message for DeleteBigQueryLink RPC. */
export interface DeleteBigQueryLinkRequest {
  /**
   * Required. The BigQueryLink to delete.
   * Example format: properties/1234/bigQueryLinks/5678
   */
  name: string;
}

/** Request message for GetEnhancedMeasurementSettings RPC. */
export interface GetEnhancedMeasurementSettingsRequest {
  /**
   * Required. The name of the settings to lookup.
   * Format:
   * properties/{property}/dataStreams/{data_stream}/enhancedMeasurementSettings
   * Example: "properties/1000/dataStreams/2000/enhancedMeasurementSettings"
   */
  name: string;
}

/** Request message for UpdateEnhancedMeasurementSettings RPC. */
export interface UpdateEnhancedMeasurementSettingsRequest {
  /**
   * Required. The settings to update.
   * The `name` field is used to identify the settings to be updated.
   */
  enhancedMeasurementSettings:
    | EnhancedMeasurementSettings
    | undefined;
  /**
   * Required. The list of fields to be updated. Field names must be in snake
   * case (e.g., "field_to_update"). Omitted fields will not be updated. To
   * replace the entire entity, use one path with the string "*" to match all
   * fields.
   */
  updateMask: string[] | undefined;
}

/** Request message for GetDataRedactionSettings RPC. */
export interface GetDataRedactionSettingsRequest {
  /**
   * Required. The name of the settings to lookup.
   * Format:
   * properties/{property}/dataStreams/{data_stream}/dataRedactionSettings
   * Example: "properties/1000/dataStreams/2000/dataRedactionSettings"
   */
  name: string;
}

/** Request message for UpdateDataRedactionSettings RPC. */
export interface UpdateDataRedactionSettingsRequest {
  /**
   * Required. The settings to update.
   * The `name` field is used to identify the settings to be updated.
   */
  dataRedactionSettings:
    | DataRedactionSettings
    | undefined;
  /**
   * Required. The list of fields to be updated. Field names must be in snake
   * case (e.g., "field_to_update"). Omitted fields will not be updated. To
   * replace the entire entity, use one path with the string "*" to match all
   * fields.
   */
  updateMask: string[] | undefined;
}

/** Request message for CreateConnectedSiteTag RPC. */
export interface CreateConnectedSiteTagRequest {
  /**
   * The Universal Analytics property to create connected site tags for.
   * This API does not support GA4 properties.
   * Format: properties/{universalAnalyticsPropertyId}
   * Example: properties/1234
   */
  property: string;
  /** Required. The tag to add to the Universal Analytics property */
  connectedSiteTag: ConnectedSiteTag | undefined;
}

/** Response message for CreateConnectedSiteTag RPC. */
export interface CreateConnectedSiteTagResponse {
}

/** Request message for DeleteConnectedSiteTag RPC. */
export interface DeleteConnectedSiteTagRequest {
  /**
   * The Universal Analytics property to delete connected site tags for.
   * This API does not support GA4 properties.
   * Format: properties/{universalAnalyticsPropertyId}
   * Example: properties/1234
   */
  property: string;
  /**
   * Tag ID to forward events to. Also known as the Measurement ID, or the
   * "G-ID"  (For example: G-12345).
   */
  tagId: string;
}

/** Request message for ListConnectedSiteTags RPC. */
export interface ListConnectedSiteTagsRequest {
  /**
   * The Universal Analytics property to fetch connected site tags for.
   * This does not work on GA4 properties. A maximum of 20 connected site tags
   * will be returned.
   * Example Format: `properties/1234`
   */
  property: string;
}

/** Response message for ListConnectedSiteTags RPC. */
export interface ListConnectedSiteTagsResponse {
  /**
   * The site tags for the Universal Analytics property. A maximum of 20
   * connected site tags will be returned.
   */
  connectedSiteTags: ConnectedSiteTag[];
}

/** Request message to be passed to CreateAdSenseLink method. */
export interface CreateAdSenseLinkRequest {
  /**
   * Required. The property for which to create an AdSense Link.
   * Format: properties/{propertyId}
   * Example: properties/1234
   */
  parent: string;
  /** Required. The AdSense Link to create */
  adsenseLink: AdSenseLink | undefined;
}

/** Request message to be passed to GetAdSenseLink method. */
export interface GetAdSenseLinkRequest {
  /**
   * Required. Unique identifier for the AdSense Link requested.
   * Format: properties/{propertyId}/adSenseLinks/{linkId}
   * Example: properties/1234/adSenseLinks/5678
   */
  name: string;
}

/** Request message to be passed to DeleteAdSenseLink method. */
export interface DeleteAdSenseLinkRequest {
  /**
   * Required. Unique identifier for the AdSense Link to be deleted.
   * Format: properties/{propertyId}/adSenseLinks/{linkId}
   * Example: properties/1234/adSenseLinks/5678
   */
  name: string;
}

/** Request message to be passed to ListAdSenseLinks method. */
export interface ListAdSenseLinksRequest {
  /**
   * Required. Resource name of the parent property.
   * Format: properties/{propertyId}
   * Example: properties/1234
   */
  parent: string;
  /**
   * The maximum number of resources to return.
   * If unspecified, at most 50 resources will be returned.
   * The maximum value is 200 (higher values will be coerced to the maximum).
   */
  pageSize: number;
  /**
   * A page token received from a previous `ListAdSenseLinks` call.
   * Provide this to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to `ListAdSenseLinks` must
   * match the call that provided the page token.
   */
  pageToken: string;
}

/** Response message for ListAdSenseLinks method. */
export interface ListAdSenseLinksResponse {
  /** List of AdSenseLinks. */
  adsenseLinks: AdSenseLink[];
  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

/** Request for looking up GA4 property connected to a UA property. */
export interface FetchConnectedGa4PropertyRequest {
  /**
   * Required. The UA property for which to look up the connected GA4 property.
   * Note this request uses the
   * internal property ID, not the tracking ID of the form UA-XXXXXX-YY.
   * Format: properties/{internal_web_property_id}
   * Example: properties/1234
   */
  property: string;
}

/** Response for looking up GA4 property connected to a UA property. */
export interface FetchConnectedGa4PropertyResponse {
  /**
   * The GA4 property connected to the UA property. An empty string is returned
   * when there is no connected GA4 property.
   * Format: properties/{property_id}
   * Example: properties/1234
   */
  property: string;
}

/** Request message for CreateEventCreateRule RPC. */
export interface CreateEventCreateRuleRequest {
  /** Required. Example format: properties/123/dataStreams/456 */
  parent: string;
  /** Required. The EventCreateRule to create. */
  eventCreateRule: EventCreateRule | undefined;
}

/** Request message for UpdateEventCreateRule RPC. */
export interface UpdateEventCreateRuleRequest {
  /**
   * Required. The EventCreateRule to update.
   * The resource's `name` field is used to identify the EventCreateRule to be
   * updated.
   */
  eventCreateRule:
    | EventCreateRule
    | undefined;
  /**
   * Required. The list of fields to be updated. Field names must be in snake
   * case (e.g., "field_to_update"). Omitted fields will not be updated. To
   * replace the entire entity, use one path with the string "*" to match all
   * fields.
   */
  updateMask: string[] | undefined;
}

/** Request message for DeleteEventCreateRule RPC. */
export interface DeleteEventCreateRuleRequest {
  /**
   * Required. Example format:
   * properties/123/dataStreams/456/eventCreateRules/789
   */
  name: string;
}

/** Request message for GetEventCreateRule RPC. */
export interface GetEventCreateRuleRequest {
  /**
   * Required. The name of the EventCreateRule to get.
   * Example format: properties/123/dataStreams/456/eventCreateRules/789
   */
  name: string;
}

/** Request message for ListEventCreateRules RPC. */
export interface ListEventCreateRulesRequest {
  /** Required. Example format: properties/123/dataStreams/456 */
  parent: string;
  /**
   * The maximum number of resources to return.
   * If unspecified, at most 50 resources will be returned.
   * The maximum value is 200 (higher values will be coerced to the maximum).
   */
  pageSize: number;
  /**
   * A page token, received from a previous `ListEventCreateRules` call. Provide
   * this to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to `ListEventCreateRules`
   * must match the call that provided the page token.
   */
  pageToken: string;
}

/** Response message for ListEventCreateRules RPC. */
export interface ListEventCreateRulesResponse {
  /**
   * List of EventCreateRules. These will be ordered stably, but in an arbitrary
   * order.
   */
  eventCreateRules: EventCreateRule[];
  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

/** Request message for CreateEventEditRule RPC. */
export interface CreateEventEditRuleRequest {
  /** Required. Example format: properties/123/dataStreams/456 */
  parent: string;
  /** Required. The EventEditRule to create. */
  eventEditRule: EventEditRule | undefined;
}

/** Request message for UpdateEventEditRule RPC. */
export interface UpdateEventEditRuleRequest {
  /**
   * Required. The EventEditRule to update.
   * The resource's `name` field is used to identify the EventEditRule to be
   * updated.
   */
  eventEditRule:
    | EventEditRule
    | undefined;
  /**
   * Required. The list of fields to be updated. Field names must be in snake
   * case (e.g., "field_to_update"). Omitted fields will not be updated. To
   * replace the entire entity, use one path with the string "*" to match all
   * fields.
   */
  updateMask: string[] | undefined;
}

/** Request message for DeleteEventEditRule RPC. */
export interface DeleteEventEditRuleRequest {
  /** Required. Example format: properties/123/dataStreams/456/eventEditRules/789 */
  name: string;
}

/** Request message for GetEventEditRule RPC. */
export interface GetEventEditRuleRequest {
  /**
   * Required. The name of the EventEditRule to get.
   * Example format: properties/123/dataStreams/456/eventEditRules/789
   */
  name: string;
}

/** Request message for ListEventEditRules RPC. */
export interface ListEventEditRulesRequest {
  /** Required. Example format: properties/123/dataStreams/456 */
  parent: string;
  /**
   * Optional. The maximum number of resources to return.
   * If unspecified, at most 50 resources will be returned.
   * The maximum value is 200 (higher values will be coerced to the maximum).
   */
  pageSize: number;
  /**
   * Optional. A page token, received from a previous `ListEventEditRules` call.
   * Provide this to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to `ListEventEditRules`
   * must match the call that provided the page token.
   */
  pageToken: string;
}

/** Response message for ListEventEditRules RPC. */
export interface ListEventEditRulesResponse {
  /**
   * List of EventEditRules. These will be ordered stably, but in an arbitrary
   * order.
   */
  eventEditRules: EventEditRule[];
  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

/** Request message for ReorderEventEditRules RPC. */
export interface ReorderEventEditRulesRequest {
  /** Required. Example format: properties/123/dataStreams/456 */
  parent: string;
  /**
   * Required. EventEditRule resource names for the specified data stream, in
   * the needed processing order. All EventEditRules for the stream must be
   * present in the list.
   */
  eventEditRules: string[];
}

/** Request message for CreateRollupProperty RPC. */
export interface CreateRollupPropertyRequest {
  /** Required. The roll-up property to create. */
  rollupProperty:
    | Property
    | undefined;
  /**
   * Optional. The resource names of properties that will be sources to the
   * created roll-up property.
   */
  sourceProperties: string[];
}

/** Response message for CreateRollupProperty RPC. */
export interface CreateRollupPropertyResponse {
  /** The created roll-up property. */
  rollupProperty:
    | Property
    | undefined;
  /** The created roll-up property source links. */
  rollupPropertySourceLinks: RollupPropertySourceLink[];
}

/** Request message for GetRollupPropertySourceLink RPC. */
export interface GetRollupPropertySourceLinkRequest {
  /**
   * Required. The name of the roll-up property source link to lookup.
   * Format:
   * properties/{property_id}/rollupPropertySourceLinks/{rollup_property_source_link_id}
   * Example: properties/123/rollupPropertySourceLinks/456
   */
  name: string;
}

/** Request message for ListRollupPropertySourceLinks RPC. */
export interface ListRollupPropertySourceLinksRequest {
  /**
   * Required. The name of the roll-up property to list roll-up property source
   * links under. Format: properties/{property_id} Example: properties/1234
   */
  parent: string;
  /**
   * Optional. The maximum number of resources to return. The service may return
   * fewer than this value, even if there are additional pages.
   * If unspecified, at most 50 resources will be returned.
   * The maximum value is 200; (higher values will be coerced to the maximum)
   */
  pageSize: number;
  /**
   * Optional. A page token, received from a previous
   * `ListRollupPropertySourceLinks` call. Provide this to retrieve the
   * subsequent page. When paginating, all other parameters provided to
   * `ListRollupPropertySourceLinks` must match the call that provided the page
   * token.
   */
  pageToken: string;
}

/** Response message for ListRollupPropertySourceLinks RPC. */
export interface ListRollupPropertySourceLinksResponse {
  /** List of RollupPropertySourceLinks. */
  rollupPropertySourceLinks: RollupPropertySourceLink[];
  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

/** Request message for CreateRollupPropertySourceLink RPC. */
export interface CreateRollupPropertySourceLinkRequest {
  /**
   * Required. Format: properties/{property_id}
   * Example: properties/1234
   */
  parent: string;
  /** Required. The roll-up property source link to create. */
  rollupPropertySourceLink: RollupPropertySourceLink | undefined;
}

/** Request message for DeleteRollupPropertySourceLink RPC. */
export interface DeleteRollupPropertySourceLinkRequest {
  /**
   * Required. Format:
   * properties/{property_id}/rollupPropertySourceLinks/{rollup_property_source_link_id}
   * Example: properties/1234/rollupPropertySourceLinks/5678
   */
  name: string;
}

/** Request message for CreateSubproperty RPC. */
export interface ProvisionSubpropertyRequest {
  /** Required. The subproperty to create. */
  subproperty:
    | Property
    | undefined;
  /** Optional. The subproperty event filter to create on an ordinary property. */
  subpropertyEventFilter: SubpropertyEventFilter | undefined;
}

/** Response message for ProvisionSubproperty RPC. */
export interface ProvisionSubpropertyResponse {
  /** The created subproperty. */
  subproperty:
    | Property
    | undefined;
  /** The created subproperty event filter. */
  subpropertyEventFilter: SubpropertyEventFilter | undefined;
}

/** Request message for CreateSubpropertyEventFilter RPC. */
export interface CreateSubpropertyEventFilterRequest {
  /**
   * Required. The ordinary property for which to create a subproperty event
   * filter. Format: properties/property_id Example: properties/123
   */
  parent: string;
  /** Required. The subproperty event filter to create. */
  subpropertyEventFilter: SubpropertyEventFilter | undefined;
}

/** Request message for GetSubpropertyEventFilter RPC. */
export interface GetSubpropertyEventFilterRequest {
  /**
   * Required. Resource name of the subproperty event filter to lookup.
   * Format:
   * properties/property_id/subpropertyEventFilters/subproperty_event_filter
   * Example: properties/123/subpropertyEventFilters/456
   */
  name: string;
}

/** Request message for ListSubpropertyEventFilters RPC. */
export interface ListSubpropertyEventFiltersRequest {
  /**
   * Required. Resource name of the ordinary property.
   * Format: properties/property_id
   * Example: properties/123
   */
  parent: string;
  /**
   * Optional. The maximum number of resources to return. The service may return
   * fewer than this value, even if there are additional pages. If unspecified,
   * at most 50 resources will be returned. The maximum value is 200; (higher
   * values will be coerced to the maximum)
   */
  pageSize: number;
  /**
   * Optional. A page token, received from a previous
   * `ListSubpropertyEventFilters` call. Provide this to retrieve the subsequent
   * page. When paginating, all other parameters provided to
   * `ListSubpropertyEventFilters` must match the call that provided the page
   * token.
   */
  pageToken: string;
}

/** Response message for ListSubpropertyEventFilter RPC. */
export interface ListSubpropertyEventFiltersResponse {
  /** List of subproperty event filters. */
  subpropertyEventFilters: SubpropertyEventFilter[];
  /**
   * A token, which can be sent as `page_token` to retrieve the next page. If
   * this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

/** Request message for UpdateSubpropertyEventFilter RPC. */
export interface UpdateSubpropertyEventFilterRequest {
  /** Required. The subproperty event filter to update. */
  subpropertyEventFilter:
    | SubpropertyEventFilter
    | undefined;
  /**
   * Required. The list of fields to update. Field names must be in snake case
   * (for example, "field_to_update"). Omitted fields will not be updated. To
   * replace the entire entity, use one path with the string "*" to match all
   * fields.
   */
  updateMask: string[] | undefined;
}

/** Request message for DeleteSubpropertyEventFilter RPC. */
export interface DeleteSubpropertyEventFilterRequest {
  /**
   * Required. Resource name of the subproperty event filter to delete.
   * Format:
   * properties/property_id/subpropertyEventFilters/subproperty_event_filter
   * Example: properties/123/subpropertyEventFilters/456
   */
  name: string;
}

function createBaseRunAccessReportRequest(): RunAccessReportRequest {
  return {
    entity: "",
    dimensions: [],
    metrics: [],
    dateRanges: [],
    dimensionFilter: undefined,
    metricFilter: undefined,
    offset: Long.ZERO,
    limit: Long.ZERO,
    timeZone: "",
    orderBys: [],
    returnEntityQuota: false,
    includeAllUsers: false,
    expandGroups: false,
  };
}

export const RunAccessReportRequest: MessageFns<RunAccessReportRequest> = {
  encode(message: RunAccessReportRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.entity !== "") {
      writer.uint32(10).string(message.entity);
    }
    for (const v of message.dimensions) {
      AccessDimension.encode(v!, writer.uint32(18).fork()).join();
    }
    for (const v of message.metrics) {
      AccessMetric.encode(v!, writer.uint32(26).fork()).join();
    }
    for (const v of message.dateRanges) {
      AccessDateRange.encode(v!, writer.uint32(34).fork()).join();
    }
    if (message.dimensionFilter !== undefined) {
      AccessFilterExpression.encode(message.dimensionFilter, writer.uint32(42).fork()).join();
    }
    if (message.metricFilter !== undefined) {
      AccessFilterExpression.encode(message.metricFilter, writer.uint32(50).fork()).join();
    }
    if (!message.offset.equals(Long.ZERO)) {
      writer.uint32(56).int64(message.offset.toString());
    }
    if (!message.limit.equals(Long.ZERO)) {
      writer.uint32(64).int64(message.limit.toString());
    }
    if (message.timeZone !== "") {
      writer.uint32(74).string(message.timeZone);
    }
    for (const v of message.orderBys) {
      AccessOrderBy.encode(v!, writer.uint32(82).fork()).join();
    }
    if (message.returnEntityQuota !== false) {
      writer.uint32(88).bool(message.returnEntityQuota);
    }
    if (message.includeAllUsers !== false) {
      writer.uint32(96).bool(message.includeAllUsers);
    }
    if (message.expandGroups !== false) {
      writer.uint32(104).bool(message.expandGroups);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RunAccessReportRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRunAccessReportRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.entity = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.dimensions.push(AccessDimension.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.metrics.push(AccessMetric.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.dateRanges.push(AccessDateRange.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.dimensionFilter = AccessFilterExpression.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.metricFilter = AccessFilterExpression.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.offset = Long.fromString(reader.int64().toString());
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.limit = Long.fromString(reader.int64().toString());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.timeZone = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.orderBys.push(AccessOrderBy.decode(reader, reader.uint32()));
          continue;
        case 11:
          if (tag !== 88) {
            break;
          }

          message.returnEntityQuota = reader.bool();
          continue;
        case 12:
          if (tag !== 96) {
            break;
          }

          message.includeAllUsers = reader.bool();
          continue;
        case 13:
          if (tag !== 104) {
            break;
          }

          message.expandGroups = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RunAccessReportRequest {
    return {
      entity: isSet(object.entity) ? globalThis.String(object.entity) : "",
      dimensions: globalThis.Array.isArray(object?.dimensions)
        ? object.dimensions.map((e: any) => AccessDimension.fromJSON(e))
        : [],
      metrics: globalThis.Array.isArray(object?.metrics)
        ? object.metrics.map((e: any) => AccessMetric.fromJSON(e))
        : [],
      dateRanges: globalThis.Array.isArray(object?.dateRanges)
        ? object.dateRanges.map((e: any) => AccessDateRange.fromJSON(e))
        : [],
      dimensionFilter: isSet(object.dimensionFilter)
        ? AccessFilterExpression.fromJSON(object.dimensionFilter)
        : undefined,
      metricFilter: isSet(object.metricFilter) ? AccessFilterExpression.fromJSON(object.metricFilter) : undefined,
      offset: isSet(object.offset) ? Long.fromValue(object.offset) : Long.ZERO,
      limit: isSet(object.limit) ? Long.fromValue(object.limit) : Long.ZERO,
      timeZone: isSet(object.timeZone) ? globalThis.String(object.timeZone) : "",
      orderBys: globalThis.Array.isArray(object?.orderBys)
        ? object.orderBys.map((e: any) => AccessOrderBy.fromJSON(e))
        : [],
      returnEntityQuota: isSet(object.returnEntityQuota) ? globalThis.Boolean(object.returnEntityQuota) : false,
      includeAllUsers: isSet(object.includeAllUsers) ? globalThis.Boolean(object.includeAllUsers) : false,
      expandGroups: isSet(object.expandGroups) ? globalThis.Boolean(object.expandGroups) : false,
    };
  },

  toJSON(message: RunAccessReportRequest): unknown {
    const obj: any = {};
    if (message.entity !== "") {
      obj.entity = message.entity;
    }
    if (message.dimensions?.length) {
      obj.dimensions = message.dimensions.map((e) => AccessDimension.toJSON(e));
    }
    if (message.metrics?.length) {
      obj.metrics = message.metrics.map((e) => AccessMetric.toJSON(e));
    }
    if (message.dateRanges?.length) {
      obj.dateRanges = message.dateRanges.map((e) => AccessDateRange.toJSON(e));
    }
    if (message.dimensionFilter !== undefined) {
      obj.dimensionFilter = AccessFilterExpression.toJSON(message.dimensionFilter);
    }
    if (message.metricFilter !== undefined) {
      obj.metricFilter = AccessFilterExpression.toJSON(message.metricFilter);
    }
    if (!message.offset.equals(Long.ZERO)) {
      obj.offset = (message.offset || Long.ZERO).toString();
    }
    if (!message.limit.equals(Long.ZERO)) {
      obj.limit = (message.limit || Long.ZERO).toString();
    }
    if (message.timeZone !== "") {
      obj.timeZone = message.timeZone;
    }
    if (message.orderBys?.length) {
      obj.orderBys = message.orderBys.map((e) => AccessOrderBy.toJSON(e));
    }
    if (message.returnEntityQuota !== false) {
      obj.returnEntityQuota = message.returnEntityQuota;
    }
    if (message.includeAllUsers !== false) {
      obj.includeAllUsers = message.includeAllUsers;
    }
    if (message.expandGroups !== false) {
      obj.expandGroups = message.expandGroups;
    }
    return obj;
  },

  create(base?: DeepPartial<RunAccessReportRequest>): RunAccessReportRequest {
    return RunAccessReportRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RunAccessReportRequest>): RunAccessReportRequest {
    const message = createBaseRunAccessReportRequest();
    message.entity = object.entity ?? "";
    message.dimensions = object.dimensions?.map((e) => AccessDimension.fromPartial(e)) || [];
    message.metrics = object.metrics?.map((e) => AccessMetric.fromPartial(e)) || [];
    message.dateRanges = object.dateRanges?.map((e) => AccessDateRange.fromPartial(e)) || [];
    message.dimensionFilter = (object.dimensionFilter !== undefined && object.dimensionFilter !== null)
      ? AccessFilterExpression.fromPartial(object.dimensionFilter)
      : undefined;
    message.metricFilter = (object.metricFilter !== undefined && object.metricFilter !== null)
      ? AccessFilterExpression.fromPartial(object.metricFilter)
      : undefined;
    message.offset = (object.offset !== undefined && object.offset !== null)
      ? Long.fromValue(object.offset)
      : Long.ZERO;
    message.limit = (object.limit !== undefined && object.limit !== null) ? Long.fromValue(object.limit) : Long.ZERO;
    message.timeZone = object.timeZone ?? "";
    message.orderBys = object.orderBys?.map((e) => AccessOrderBy.fromPartial(e)) || [];
    message.returnEntityQuota = object.returnEntityQuota ?? false;
    message.includeAllUsers = object.includeAllUsers ?? false;
    message.expandGroups = object.expandGroups ?? false;
    return message;
  },
};

function createBaseRunAccessReportResponse(): RunAccessReportResponse {
  return { dimensionHeaders: [], metricHeaders: [], rows: [], rowCount: 0, quota: undefined };
}

export const RunAccessReportResponse: MessageFns<RunAccessReportResponse> = {
  encode(message: RunAccessReportResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.dimensionHeaders) {
      AccessDimensionHeader.encode(v!, writer.uint32(10).fork()).join();
    }
    for (const v of message.metricHeaders) {
      AccessMetricHeader.encode(v!, writer.uint32(18).fork()).join();
    }
    for (const v of message.rows) {
      AccessRow.encode(v!, writer.uint32(26).fork()).join();
    }
    if (message.rowCount !== 0) {
      writer.uint32(32).int32(message.rowCount);
    }
    if (message.quota !== undefined) {
      AccessQuota.encode(message.quota, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RunAccessReportResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRunAccessReportResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.dimensionHeaders.push(AccessDimensionHeader.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.metricHeaders.push(AccessMetricHeader.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.rows.push(AccessRow.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.rowCount = reader.int32();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.quota = AccessQuota.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RunAccessReportResponse {
    return {
      dimensionHeaders: globalThis.Array.isArray(object?.dimensionHeaders)
        ? object.dimensionHeaders.map((e: any) => AccessDimensionHeader.fromJSON(e))
        : [],
      metricHeaders: globalThis.Array.isArray(object?.metricHeaders)
        ? object.metricHeaders.map((e: any) => AccessMetricHeader.fromJSON(e))
        : [],
      rows: globalThis.Array.isArray(object?.rows) ? object.rows.map((e: any) => AccessRow.fromJSON(e)) : [],
      rowCount: isSet(object.rowCount) ? globalThis.Number(object.rowCount) : 0,
      quota: isSet(object.quota) ? AccessQuota.fromJSON(object.quota) : undefined,
    };
  },

  toJSON(message: RunAccessReportResponse): unknown {
    const obj: any = {};
    if (message.dimensionHeaders?.length) {
      obj.dimensionHeaders = message.dimensionHeaders.map((e) => AccessDimensionHeader.toJSON(e));
    }
    if (message.metricHeaders?.length) {
      obj.metricHeaders = message.metricHeaders.map((e) => AccessMetricHeader.toJSON(e));
    }
    if (message.rows?.length) {
      obj.rows = message.rows.map((e) => AccessRow.toJSON(e));
    }
    if (message.rowCount !== 0) {
      obj.rowCount = Math.round(message.rowCount);
    }
    if (message.quota !== undefined) {
      obj.quota = AccessQuota.toJSON(message.quota);
    }
    return obj;
  },

  create(base?: DeepPartial<RunAccessReportResponse>): RunAccessReportResponse {
    return RunAccessReportResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RunAccessReportResponse>): RunAccessReportResponse {
    const message = createBaseRunAccessReportResponse();
    message.dimensionHeaders = object.dimensionHeaders?.map((e) => AccessDimensionHeader.fromPartial(e)) || [];
    message.metricHeaders = object.metricHeaders?.map((e) => AccessMetricHeader.fromPartial(e)) || [];
    message.rows = object.rows?.map((e) => AccessRow.fromPartial(e)) || [];
    message.rowCount = object.rowCount ?? 0;
    message.quota = (object.quota !== undefined && object.quota !== null)
      ? AccessQuota.fromPartial(object.quota)
      : undefined;
    return message;
  },
};

function createBaseGetAccountRequest(): GetAccountRequest {
  return { name: "" };
}

export const GetAccountRequest: MessageFns<GetAccountRequest> = {
  encode(message: GetAccountRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAccountRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAccountRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAccountRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetAccountRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetAccountRequest>): GetAccountRequest {
    return GetAccountRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetAccountRequest>): GetAccountRequest {
    const message = createBaseGetAccountRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListAccountsRequest(): ListAccountsRequest {
  return { pageSize: 0, pageToken: "", showDeleted: false };
}

export const ListAccountsRequest: MessageFns<ListAccountsRequest> = {
  encode(message: ListAccountsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pageSize !== 0) {
      writer.uint32(8).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(18).string(message.pageToken);
    }
    if (message.showDeleted !== false) {
      writer.uint32(24).bool(message.showDeleted);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAccountsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAccountsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.showDeleted = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAccountsRequest {
    return {
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      showDeleted: isSet(object.showDeleted) ? globalThis.Boolean(object.showDeleted) : false,
    };
  },

  toJSON(message: ListAccountsRequest): unknown {
    const obj: any = {};
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.showDeleted !== false) {
      obj.showDeleted = message.showDeleted;
    }
    return obj;
  },

  create(base?: DeepPartial<ListAccountsRequest>): ListAccountsRequest {
    return ListAccountsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAccountsRequest>): ListAccountsRequest {
    const message = createBaseListAccountsRequest();
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.showDeleted = object.showDeleted ?? false;
    return message;
  },
};

function createBaseListAccountsResponse(): ListAccountsResponse {
  return { accounts: [], nextPageToken: "" };
}

export const ListAccountsResponse: MessageFns<ListAccountsResponse> = {
  encode(message: ListAccountsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.accounts) {
      Account.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAccountsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAccountsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.accounts.push(Account.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAccountsResponse {
    return {
      accounts: globalThis.Array.isArray(object?.accounts) ? object.accounts.map((e: any) => Account.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListAccountsResponse): unknown {
    const obj: any = {};
    if (message.accounts?.length) {
      obj.accounts = message.accounts.map((e) => Account.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListAccountsResponse>): ListAccountsResponse {
    return ListAccountsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAccountsResponse>): ListAccountsResponse {
    const message = createBaseListAccountsResponse();
    message.accounts = object.accounts?.map((e) => Account.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseDeleteAccountRequest(): DeleteAccountRequest {
  return { name: "" };
}

export const DeleteAccountRequest: MessageFns<DeleteAccountRequest> = {
  encode(message: DeleteAccountRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteAccountRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteAccountRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteAccountRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteAccountRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteAccountRequest>): DeleteAccountRequest {
    return DeleteAccountRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteAccountRequest>): DeleteAccountRequest {
    const message = createBaseDeleteAccountRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpdateAccountRequest(): UpdateAccountRequest {
  return { account: undefined, updateMask: undefined };
}

export const UpdateAccountRequest: MessageFns<UpdateAccountRequest> = {
  encode(message: UpdateAccountRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.account !== undefined) {
      Account.encode(message.account, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateAccountRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateAccountRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.account = Account.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateAccountRequest {
    return {
      account: isSet(object.account) ? Account.fromJSON(object.account) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateAccountRequest): unknown {
    const obj: any = {};
    if (message.account !== undefined) {
      obj.account = Account.toJSON(message.account);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateAccountRequest>): UpdateAccountRequest {
    return UpdateAccountRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateAccountRequest>): UpdateAccountRequest {
    const message = createBaseUpdateAccountRequest();
    message.account = (object.account !== undefined && object.account !== null)
      ? Account.fromPartial(object.account)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseProvisionAccountTicketRequest(): ProvisionAccountTicketRequest {
  return { account: undefined, redirectUri: "" };
}

export const ProvisionAccountTicketRequest: MessageFns<ProvisionAccountTicketRequest> = {
  encode(message: ProvisionAccountTicketRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.account !== undefined) {
      Account.encode(message.account, writer.uint32(10).fork()).join();
    }
    if (message.redirectUri !== "") {
      writer.uint32(18).string(message.redirectUri);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProvisionAccountTicketRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProvisionAccountTicketRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.account = Account.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.redirectUri = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProvisionAccountTicketRequest {
    return {
      account: isSet(object.account) ? Account.fromJSON(object.account) : undefined,
      redirectUri: isSet(object.redirectUri) ? globalThis.String(object.redirectUri) : "",
    };
  },

  toJSON(message: ProvisionAccountTicketRequest): unknown {
    const obj: any = {};
    if (message.account !== undefined) {
      obj.account = Account.toJSON(message.account);
    }
    if (message.redirectUri !== "") {
      obj.redirectUri = message.redirectUri;
    }
    return obj;
  },

  create(base?: DeepPartial<ProvisionAccountTicketRequest>): ProvisionAccountTicketRequest {
    return ProvisionAccountTicketRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ProvisionAccountTicketRequest>): ProvisionAccountTicketRequest {
    const message = createBaseProvisionAccountTicketRequest();
    message.account = (object.account !== undefined && object.account !== null)
      ? Account.fromPartial(object.account)
      : undefined;
    message.redirectUri = object.redirectUri ?? "";
    return message;
  },
};

function createBaseProvisionAccountTicketResponse(): ProvisionAccountTicketResponse {
  return { accountTicketId: "" };
}

export const ProvisionAccountTicketResponse: MessageFns<ProvisionAccountTicketResponse> = {
  encode(message: ProvisionAccountTicketResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.accountTicketId !== "") {
      writer.uint32(10).string(message.accountTicketId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProvisionAccountTicketResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProvisionAccountTicketResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.accountTicketId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProvisionAccountTicketResponse {
    return { accountTicketId: isSet(object.accountTicketId) ? globalThis.String(object.accountTicketId) : "" };
  },

  toJSON(message: ProvisionAccountTicketResponse): unknown {
    const obj: any = {};
    if (message.accountTicketId !== "") {
      obj.accountTicketId = message.accountTicketId;
    }
    return obj;
  },

  create(base?: DeepPartial<ProvisionAccountTicketResponse>): ProvisionAccountTicketResponse {
    return ProvisionAccountTicketResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ProvisionAccountTicketResponse>): ProvisionAccountTicketResponse {
    const message = createBaseProvisionAccountTicketResponse();
    message.accountTicketId = object.accountTicketId ?? "";
    return message;
  },
};

function createBaseGetPropertyRequest(): GetPropertyRequest {
  return { name: "" };
}

export const GetPropertyRequest: MessageFns<GetPropertyRequest> = {
  encode(message: GetPropertyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetPropertyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPropertyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetPropertyRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetPropertyRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetPropertyRequest>): GetPropertyRequest {
    return GetPropertyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetPropertyRequest>): GetPropertyRequest {
    const message = createBaseGetPropertyRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListPropertiesRequest(): ListPropertiesRequest {
  return { filter: "", pageSize: 0, pageToken: "", showDeleted: false };
}

export const ListPropertiesRequest: MessageFns<ListPropertiesRequest> = {
  encode(message: ListPropertiesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.filter !== "") {
      writer.uint32(10).string(message.filter);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.showDeleted !== false) {
      writer.uint32(32).bool(message.showDeleted);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListPropertiesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListPropertiesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.showDeleted = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListPropertiesRequest {
    return {
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      showDeleted: isSet(object.showDeleted) ? globalThis.Boolean(object.showDeleted) : false,
    };
  },

  toJSON(message: ListPropertiesRequest): unknown {
    const obj: any = {};
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.showDeleted !== false) {
      obj.showDeleted = message.showDeleted;
    }
    return obj;
  },

  create(base?: DeepPartial<ListPropertiesRequest>): ListPropertiesRequest {
    return ListPropertiesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListPropertiesRequest>): ListPropertiesRequest {
    const message = createBaseListPropertiesRequest();
    message.filter = object.filter ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.showDeleted = object.showDeleted ?? false;
    return message;
  },
};

function createBaseListPropertiesResponse(): ListPropertiesResponse {
  return { properties: [], nextPageToken: "" };
}

export const ListPropertiesResponse: MessageFns<ListPropertiesResponse> = {
  encode(message: ListPropertiesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.properties) {
      Property.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListPropertiesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListPropertiesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.properties.push(Property.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListPropertiesResponse {
    return {
      properties: globalThis.Array.isArray(object?.properties)
        ? object.properties.map((e: any) => Property.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListPropertiesResponse): unknown {
    const obj: any = {};
    if (message.properties?.length) {
      obj.properties = message.properties.map((e) => Property.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListPropertiesResponse>): ListPropertiesResponse {
    return ListPropertiesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListPropertiesResponse>): ListPropertiesResponse {
    const message = createBaseListPropertiesResponse();
    message.properties = object.properties?.map((e) => Property.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseUpdatePropertyRequest(): UpdatePropertyRequest {
  return { property: undefined, updateMask: undefined };
}

export const UpdatePropertyRequest: MessageFns<UpdatePropertyRequest> = {
  encode(message: UpdatePropertyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.property !== undefined) {
      Property.encode(message.property, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdatePropertyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdatePropertyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.property = Property.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdatePropertyRequest {
    return {
      property: isSet(object.property) ? Property.fromJSON(object.property) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdatePropertyRequest): unknown {
    const obj: any = {};
    if (message.property !== undefined) {
      obj.property = Property.toJSON(message.property);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdatePropertyRequest>): UpdatePropertyRequest {
    return UpdatePropertyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdatePropertyRequest>): UpdatePropertyRequest {
    const message = createBaseUpdatePropertyRequest();
    message.property = (object.property !== undefined && object.property !== null)
      ? Property.fromPartial(object.property)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseCreatePropertyRequest(): CreatePropertyRequest {
  return { property: undefined };
}

export const CreatePropertyRequest: MessageFns<CreatePropertyRequest> = {
  encode(message: CreatePropertyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.property !== undefined) {
      Property.encode(message.property, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreatePropertyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreatePropertyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.property = Property.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreatePropertyRequest {
    return { property: isSet(object.property) ? Property.fromJSON(object.property) : undefined };
  },

  toJSON(message: CreatePropertyRequest): unknown {
    const obj: any = {};
    if (message.property !== undefined) {
      obj.property = Property.toJSON(message.property);
    }
    return obj;
  },

  create(base?: DeepPartial<CreatePropertyRequest>): CreatePropertyRequest {
    return CreatePropertyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreatePropertyRequest>): CreatePropertyRequest {
    const message = createBaseCreatePropertyRequest();
    message.property = (object.property !== undefined && object.property !== null)
      ? Property.fromPartial(object.property)
      : undefined;
    return message;
  },
};

function createBaseDeletePropertyRequest(): DeletePropertyRequest {
  return { name: "" };
}

export const DeletePropertyRequest: MessageFns<DeletePropertyRequest> = {
  encode(message: DeletePropertyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeletePropertyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeletePropertyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeletePropertyRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeletePropertyRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeletePropertyRequest>): DeletePropertyRequest {
    return DeletePropertyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeletePropertyRequest>): DeletePropertyRequest {
    const message = createBaseDeletePropertyRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateFirebaseLinkRequest(): CreateFirebaseLinkRequest {
  return { parent: "", firebaseLink: undefined };
}

export const CreateFirebaseLinkRequest: MessageFns<CreateFirebaseLinkRequest> = {
  encode(message: CreateFirebaseLinkRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.firebaseLink !== undefined) {
      FirebaseLink.encode(message.firebaseLink, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateFirebaseLinkRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateFirebaseLinkRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.firebaseLink = FirebaseLink.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateFirebaseLinkRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      firebaseLink: isSet(object.firebaseLink) ? FirebaseLink.fromJSON(object.firebaseLink) : undefined,
    };
  },

  toJSON(message: CreateFirebaseLinkRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.firebaseLink !== undefined) {
      obj.firebaseLink = FirebaseLink.toJSON(message.firebaseLink);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateFirebaseLinkRequest>): CreateFirebaseLinkRequest {
    return CreateFirebaseLinkRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateFirebaseLinkRequest>): CreateFirebaseLinkRequest {
    const message = createBaseCreateFirebaseLinkRequest();
    message.parent = object.parent ?? "";
    message.firebaseLink = (object.firebaseLink !== undefined && object.firebaseLink !== null)
      ? FirebaseLink.fromPartial(object.firebaseLink)
      : undefined;
    return message;
  },
};

function createBaseDeleteFirebaseLinkRequest(): DeleteFirebaseLinkRequest {
  return { name: "" };
}

export const DeleteFirebaseLinkRequest: MessageFns<DeleteFirebaseLinkRequest> = {
  encode(message: DeleteFirebaseLinkRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteFirebaseLinkRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteFirebaseLinkRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteFirebaseLinkRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteFirebaseLinkRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteFirebaseLinkRequest>): DeleteFirebaseLinkRequest {
    return DeleteFirebaseLinkRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteFirebaseLinkRequest>): DeleteFirebaseLinkRequest {
    const message = createBaseDeleteFirebaseLinkRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListFirebaseLinksRequest(): ListFirebaseLinksRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListFirebaseLinksRequest: MessageFns<ListFirebaseLinksRequest> = {
  encode(message: ListFirebaseLinksRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListFirebaseLinksRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListFirebaseLinksRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListFirebaseLinksRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListFirebaseLinksRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListFirebaseLinksRequest>): ListFirebaseLinksRequest {
    return ListFirebaseLinksRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListFirebaseLinksRequest>): ListFirebaseLinksRequest {
    const message = createBaseListFirebaseLinksRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListFirebaseLinksResponse(): ListFirebaseLinksResponse {
  return { firebaseLinks: [], nextPageToken: "" };
}

export const ListFirebaseLinksResponse: MessageFns<ListFirebaseLinksResponse> = {
  encode(message: ListFirebaseLinksResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.firebaseLinks) {
      FirebaseLink.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListFirebaseLinksResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListFirebaseLinksResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.firebaseLinks.push(FirebaseLink.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListFirebaseLinksResponse {
    return {
      firebaseLinks: globalThis.Array.isArray(object?.firebaseLinks)
        ? object.firebaseLinks.map((e: any) => FirebaseLink.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListFirebaseLinksResponse): unknown {
    const obj: any = {};
    if (message.firebaseLinks?.length) {
      obj.firebaseLinks = message.firebaseLinks.map((e) => FirebaseLink.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListFirebaseLinksResponse>): ListFirebaseLinksResponse {
    return ListFirebaseLinksResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListFirebaseLinksResponse>): ListFirebaseLinksResponse {
    const message = createBaseListFirebaseLinksResponse();
    message.firebaseLinks = object.firebaseLinks?.map((e) => FirebaseLink.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetGlobalSiteTagRequest(): GetGlobalSiteTagRequest {
  return { name: "" };
}

export const GetGlobalSiteTagRequest: MessageFns<GetGlobalSiteTagRequest> = {
  encode(message: GetGlobalSiteTagRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetGlobalSiteTagRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetGlobalSiteTagRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetGlobalSiteTagRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetGlobalSiteTagRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetGlobalSiteTagRequest>): GetGlobalSiteTagRequest {
    return GetGlobalSiteTagRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetGlobalSiteTagRequest>): GetGlobalSiteTagRequest {
    const message = createBaseGetGlobalSiteTagRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateGoogleAdsLinkRequest(): CreateGoogleAdsLinkRequest {
  return { parent: "", googleAdsLink: undefined };
}

export const CreateGoogleAdsLinkRequest: MessageFns<CreateGoogleAdsLinkRequest> = {
  encode(message: CreateGoogleAdsLinkRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.googleAdsLink !== undefined) {
      GoogleAdsLink.encode(message.googleAdsLink, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateGoogleAdsLinkRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateGoogleAdsLinkRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.googleAdsLink = GoogleAdsLink.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateGoogleAdsLinkRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      googleAdsLink: isSet(object.googleAdsLink) ? GoogleAdsLink.fromJSON(object.googleAdsLink) : undefined,
    };
  },

  toJSON(message: CreateGoogleAdsLinkRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.googleAdsLink !== undefined) {
      obj.googleAdsLink = GoogleAdsLink.toJSON(message.googleAdsLink);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateGoogleAdsLinkRequest>): CreateGoogleAdsLinkRequest {
    return CreateGoogleAdsLinkRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateGoogleAdsLinkRequest>): CreateGoogleAdsLinkRequest {
    const message = createBaseCreateGoogleAdsLinkRequest();
    message.parent = object.parent ?? "";
    message.googleAdsLink = (object.googleAdsLink !== undefined && object.googleAdsLink !== null)
      ? GoogleAdsLink.fromPartial(object.googleAdsLink)
      : undefined;
    return message;
  },
};

function createBaseUpdateGoogleAdsLinkRequest(): UpdateGoogleAdsLinkRequest {
  return { googleAdsLink: undefined, updateMask: undefined };
}

export const UpdateGoogleAdsLinkRequest: MessageFns<UpdateGoogleAdsLinkRequest> = {
  encode(message: UpdateGoogleAdsLinkRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.googleAdsLink !== undefined) {
      GoogleAdsLink.encode(message.googleAdsLink, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateGoogleAdsLinkRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateGoogleAdsLinkRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.googleAdsLink = GoogleAdsLink.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateGoogleAdsLinkRequest {
    return {
      googleAdsLink: isSet(object.googleAdsLink) ? GoogleAdsLink.fromJSON(object.googleAdsLink) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateGoogleAdsLinkRequest): unknown {
    const obj: any = {};
    if (message.googleAdsLink !== undefined) {
      obj.googleAdsLink = GoogleAdsLink.toJSON(message.googleAdsLink);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateGoogleAdsLinkRequest>): UpdateGoogleAdsLinkRequest {
    return UpdateGoogleAdsLinkRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateGoogleAdsLinkRequest>): UpdateGoogleAdsLinkRequest {
    const message = createBaseUpdateGoogleAdsLinkRequest();
    message.googleAdsLink = (object.googleAdsLink !== undefined && object.googleAdsLink !== null)
      ? GoogleAdsLink.fromPartial(object.googleAdsLink)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseDeleteGoogleAdsLinkRequest(): DeleteGoogleAdsLinkRequest {
  return { name: "" };
}

export const DeleteGoogleAdsLinkRequest: MessageFns<DeleteGoogleAdsLinkRequest> = {
  encode(message: DeleteGoogleAdsLinkRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteGoogleAdsLinkRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteGoogleAdsLinkRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteGoogleAdsLinkRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteGoogleAdsLinkRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteGoogleAdsLinkRequest>): DeleteGoogleAdsLinkRequest {
    return DeleteGoogleAdsLinkRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteGoogleAdsLinkRequest>): DeleteGoogleAdsLinkRequest {
    const message = createBaseDeleteGoogleAdsLinkRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListGoogleAdsLinksRequest(): ListGoogleAdsLinksRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListGoogleAdsLinksRequest: MessageFns<ListGoogleAdsLinksRequest> = {
  encode(message: ListGoogleAdsLinksRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListGoogleAdsLinksRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListGoogleAdsLinksRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListGoogleAdsLinksRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListGoogleAdsLinksRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListGoogleAdsLinksRequest>): ListGoogleAdsLinksRequest {
    return ListGoogleAdsLinksRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListGoogleAdsLinksRequest>): ListGoogleAdsLinksRequest {
    const message = createBaseListGoogleAdsLinksRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListGoogleAdsLinksResponse(): ListGoogleAdsLinksResponse {
  return { googleAdsLinks: [], nextPageToken: "" };
}

export const ListGoogleAdsLinksResponse: MessageFns<ListGoogleAdsLinksResponse> = {
  encode(message: ListGoogleAdsLinksResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.googleAdsLinks) {
      GoogleAdsLink.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListGoogleAdsLinksResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListGoogleAdsLinksResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.googleAdsLinks.push(GoogleAdsLink.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListGoogleAdsLinksResponse {
    return {
      googleAdsLinks: globalThis.Array.isArray(object?.googleAdsLinks)
        ? object.googleAdsLinks.map((e: any) => GoogleAdsLink.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListGoogleAdsLinksResponse): unknown {
    const obj: any = {};
    if (message.googleAdsLinks?.length) {
      obj.googleAdsLinks = message.googleAdsLinks.map((e) => GoogleAdsLink.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListGoogleAdsLinksResponse>): ListGoogleAdsLinksResponse {
    return ListGoogleAdsLinksResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListGoogleAdsLinksResponse>): ListGoogleAdsLinksResponse {
    const message = createBaseListGoogleAdsLinksResponse();
    message.googleAdsLinks = object.googleAdsLinks?.map((e) => GoogleAdsLink.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetDataSharingSettingsRequest(): GetDataSharingSettingsRequest {
  return { name: "" };
}

export const GetDataSharingSettingsRequest: MessageFns<GetDataSharingSettingsRequest> = {
  encode(message: GetDataSharingSettingsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetDataSharingSettingsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDataSharingSettingsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDataSharingSettingsRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetDataSharingSettingsRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetDataSharingSettingsRequest>): GetDataSharingSettingsRequest {
    return GetDataSharingSettingsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetDataSharingSettingsRequest>): GetDataSharingSettingsRequest {
    const message = createBaseGetDataSharingSettingsRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListAccountSummariesRequest(): ListAccountSummariesRequest {
  return { pageSize: 0, pageToken: "" };
}

export const ListAccountSummariesRequest: MessageFns<ListAccountSummariesRequest> = {
  encode(message: ListAccountSummariesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pageSize !== 0) {
      writer.uint32(8).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(18).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAccountSummariesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAccountSummariesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAccountSummariesRequest {
    return {
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListAccountSummariesRequest): unknown {
    const obj: any = {};
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListAccountSummariesRequest>): ListAccountSummariesRequest {
    return ListAccountSummariesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAccountSummariesRequest>): ListAccountSummariesRequest {
    const message = createBaseListAccountSummariesRequest();
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListAccountSummariesResponse(): ListAccountSummariesResponse {
  return { accountSummaries: [], nextPageToken: "" };
}

export const ListAccountSummariesResponse: MessageFns<ListAccountSummariesResponse> = {
  encode(message: ListAccountSummariesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.accountSummaries) {
      AccountSummary.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAccountSummariesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAccountSummariesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.accountSummaries.push(AccountSummary.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAccountSummariesResponse {
    return {
      accountSummaries: globalThis.Array.isArray(object?.accountSummaries)
        ? object.accountSummaries.map((e: any) => AccountSummary.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListAccountSummariesResponse): unknown {
    const obj: any = {};
    if (message.accountSummaries?.length) {
      obj.accountSummaries = message.accountSummaries.map((e) => AccountSummary.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListAccountSummariesResponse>): ListAccountSummariesResponse {
    return ListAccountSummariesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAccountSummariesResponse>): ListAccountSummariesResponse {
    const message = createBaseListAccountSummariesResponse();
    message.accountSummaries = object.accountSummaries?.map((e) => AccountSummary.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseAcknowledgeUserDataCollectionRequest(): AcknowledgeUserDataCollectionRequest {
  return { property: "", acknowledgement: "" };
}

export const AcknowledgeUserDataCollectionRequest: MessageFns<AcknowledgeUserDataCollectionRequest> = {
  encode(message: AcknowledgeUserDataCollectionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.property !== "") {
      writer.uint32(10).string(message.property);
    }
    if (message.acknowledgement !== "") {
      writer.uint32(18).string(message.acknowledgement);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AcknowledgeUserDataCollectionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAcknowledgeUserDataCollectionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.property = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.acknowledgement = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AcknowledgeUserDataCollectionRequest {
    return {
      property: isSet(object.property) ? globalThis.String(object.property) : "",
      acknowledgement: isSet(object.acknowledgement) ? globalThis.String(object.acknowledgement) : "",
    };
  },

  toJSON(message: AcknowledgeUserDataCollectionRequest): unknown {
    const obj: any = {};
    if (message.property !== "") {
      obj.property = message.property;
    }
    if (message.acknowledgement !== "") {
      obj.acknowledgement = message.acknowledgement;
    }
    return obj;
  },

  create(base?: DeepPartial<AcknowledgeUserDataCollectionRequest>): AcknowledgeUserDataCollectionRequest {
    return AcknowledgeUserDataCollectionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AcknowledgeUserDataCollectionRequest>): AcknowledgeUserDataCollectionRequest {
    const message = createBaseAcknowledgeUserDataCollectionRequest();
    message.property = object.property ?? "";
    message.acknowledgement = object.acknowledgement ?? "";
    return message;
  },
};

function createBaseAcknowledgeUserDataCollectionResponse(): AcknowledgeUserDataCollectionResponse {
  return {};
}

export const AcknowledgeUserDataCollectionResponse: MessageFns<AcknowledgeUserDataCollectionResponse> = {
  encode(_: AcknowledgeUserDataCollectionResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AcknowledgeUserDataCollectionResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAcknowledgeUserDataCollectionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): AcknowledgeUserDataCollectionResponse {
    return {};
  },

  toJSON(_: AcknowledgeUserDataCollectionResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<AcknowledgeUserDataCollectionResponse>): AcknowledgeUserDataCollectionResponse {
    return AcknowledgeUserDataCollectionResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<AcknowledgeUserDataCollectionResponse>): AcknowledgeUserDataCollectionResponse {
    const message = createBaseAcknowledgeUserDataCollectionResponse();
    return message;
  },
};

function createBaseSearchChangeHistoryEventsRequest(): SearchChangeHistoryEventsRequest {
  return {
    account: "",
    property: "",
    resourceType: [],
    action: [],
    actorEmail: [],
    earliestChangeTime: undefined,
    latestChangeTime: undefined,
    pageSize: 0,
    pageToken: "",
  };
}

export const SearchChangeHistoryEventsRequest: MessageFns<SearchChangeHistoryEventsRequest> = {
  encode(message: SearchChangeHistoryEventsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.account !== "") {
      writer.uint32(10).string(message.account);
    }
    if (message.property !== "") {
      writer.uint32(18).string(message.property);
    }
    writer.uint32(26).fork();
    for (const v of message.resourceType) {
      writer.int32(v);
    }
    writer.join();
    writer.uint32(34).fork();
    for (const v of message.action) {
      writer.int32(v);
    }
    writer.join();
    for (const v of message.actorEmail) {
      writer.uint32(42).string(v!);
    }
    if (message.earliestChangeTime !== undefined) {
      Timestamp.encode(toTimestamp(message.earliestChangeTime), writer.uint32(50).fork()).join();
    }
    if (message.latestChangeTime !== undefined) {
      Timestamp.encode(toTimestamp(message.latestChangeTime), writer.uint32(58).fork()).join();
    }
    if (message.pageSize !== 0) {
      writer.uint32(64).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(74).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchChangeHistoryEventsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchChangeHistoryEventsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.account = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.property = reader.string();
          continue;
        case 3:
          if (tag === 24) {
            message.resourceType.push(reader.int32() as any);

            continue;
          }

          if (tag === 26) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.resourceType.push(reader.int32() as any);
            }

            continue;
          }

          break;
        case 4:
          if (tag === 32) {
            message.action.push(reader.int32() as any);

            continue;
          }

          if (tag === 34) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.action.push(reader.int32() as any);
            }

            continue;
          }

          break;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.actorEmail.push(reader.string());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.earliestChangeTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.latestChangeTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchChangeHistoryEventsRequest {
    return {
      account: isSet(object.account) ? globalThis.String(object.account) : "",
      property: isSet(object.property) ? globalThis.String(object.property) : "",
      resourceType: globalThis.Array.isArray(object?.resourceType)
        ? object.resourceType.map((e: any) => changeHistoryResourceTypeFromJSON(e))
        : [],
      action: globalThis.Array.isArray(object?.action) ? object.action.map((e: any) => actionTypeFromJSON(e)) : [],
      actorEmail: globalThis.Array.isArray(object?.actorEmail)
        ? object.actorEmail.map((e: any) => globalThis.String(e))
        : [],
      earliestChangeTime: isSet(object.earliestChangeTime) ? fromJsonTimestamp(object.earliestChangeTime) : undefined,
      latestChangeTime: isSet(object.latestChangeTime) ? fromJsonTimestamp(object.latestChangeTime) : undefined,
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: SearchChangeHistoryEventsRequest): unknown {
    const obj: any = {};
    if (message.account !== "") {
      obj.account = message.account;
    }
    if (message.property !== "") {
      obj.property = message.property;
    }
    if (message.resourceType?.length) {
      obj.resourceType = message.resourceType.map((e) => changeHistoryResourceTypeToJSON(e));
    }
    if (message.action?.length) {
      obj.action = message.action.map((e) => actionTypeToJSON(e));
    }
    if (message.actorEmail?.length) {
      obj.actorEmail = message.actorEmail;
    }
    if (message.earliestChangeTime !== undefined) {
      obj.earliestChangeTime = message.earliestChangeTime.toISOString();
    }
    if (message.latestChangeTime !== undefined) {
      obj.latestChangeTime = message.latestChangeTime.toISOString();
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<SearchChangeHistoryEventsRequest>): SearchChangeHistoryEventsRequest {
    return SearchChangeHistoryEventsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SearchChangeHistoryEventsRequest>): SearchChangeHistoryEventsRequest {
    const message = createBaseSearchChangeHistoryEventsRequest();
    message.account = object.account ?? "";
    message.property = object.property ?? "";
    message.resourceType = object.resourceType?.map((e) => e) || [];
    message.action = object.action?.map((e) => e) || [];
    message.actorEmail = object.actorEmail?.map((e) => e) || [];
    message.earliestChangeTime = object.earliestChangeTime ?? undefined;
    message.latestChangeTime = object.latestChangeTime ?? undefined;
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseSearchChangeHistoryEventsResponse(): SearchChangeHistoryEventsResponse {
  return { changeHistoryEvents: [], nextPageToken: "" };
}

export const SearchChangeHistoryEventsResponse: MessageFns<SearchChangeHistoryEventsResponse> = {
  encode(message: SearchChangeHistoryEventsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.changeHistoryEvents) {
      ChangeHistoryEvent.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchChangeHistoryEventsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchChangeHistoryEventsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.changeHistoryEvents.push(ChangeHistoryEvent.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchChangeHistoryEventsResponse {
    return {
      changeHistoryEvents: globalThis.Array.isArray(object?.changeHistoryEvents)
        ? object.changeHistoryEvents.map((e: any) => ChangeHistoryEvent.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: SearchChangeHistoryEventsResponse): unknown {
    const obj: any = {};
    if (message.changeHistoryEvents?.length) {
      obj.changeHistoryEvents = message.changeHistoryEvents.map((e) => ChangeHistoryEvent.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<SearchChangeHistoryEventsResponse>): SearchChangeHistoryEventsResponse {
    return SearchChangeHistoryEventsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SearchChangeHistoryEventsResponse>): SearchChangeHistoryEventsResponse {
    const message = createBaseSearchChangeHistoryEventsResponse();
    message.changeHistoryEvents = object.changeHistoryEvents?.map((e) => ChangeHistoryEvent.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetMeasurementProtocolSecretRequest(): GetMeasurementProtocolSecretRequest {
  return { name: "" };
}

export const GetMeasurementProtocolSecretRequest: MessageFns<GetMeasurementProtocolSecretRequest> = {
  encode(message: GetMeasurementProtocolSecretRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetMeasurementProtocolSecretRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetMeasurementProtocolSecretRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetMeasurementProtocolSecretRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetMeasurementProtocolSecretRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetMeasurementProtocolSecretRequest>): GetMeasurementProtocolSecretRequest {
    return GetMeasurementProtocolSecretRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetMeasurementProtocolSecretRequest>): GetMeasurementProtocolSecretRequest {
    const message = createBaseGetMeasurementProtocolSecretRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateMeasurementProtocolSecretRequest(): CreateMeasurementProtocolSecretRequest {
  return { parent: "", measurementProtocolSecret: undefined };
}

export const CreateMeasurementProtocolSecretRequest: MessageFns<CreateMeasurementProtocolSecretRequest> = {
  encode(message: CreateMeasurementProtocolSecretRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.measurementProtocolSecret !== undefined) {
      MeasurementProtocolSecret.encode(message.measurementProtocolSecret, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateMeasurementProtocolSecretRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateMeasurementProtocolSecretRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.measurementProtocolSecret = MeasurementProtocolSecret.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateMeasurementProtocolSecretRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      measurementProtocolSecret: isSet(object.measurementProtocolSecret)
        ? MeasurementProtocolSecret.fromJSON(object.measurementProtocolSecret)
        : undefined,
    };
  },

  toJSON(message: CreateMeasurementProtocolSecretRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.measurementProtocolSecret !== undefined) {
      obj.measurementProtocolSecret = MeasurementProtocolSecret.toJSON(message.measurementProtocolSecret);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateMeasurementProtocolSecretRequest>): CreateMeasurementProtocolSecretRequest {
    return CreateMeasurementProtocolSecretRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateMeasurementProtocolSecretRequest>): CreateMeasurementProtocolSecretRequest {
    const message = createBaseCreateMeasurementProtocolSecretRequest();
    message.parent = object.parent ?? "";
    message.measurementProtocolSecret =
      (object.measurementProtocolSecret !== undefined && object.measurementProtocolSecret !== null)
        ? MeasurementProtocolSecret.fromPartial(object.measurementProtocolSecret)
        : undefined;
    return message;
  },
};

function createBaseDeleteMeasurementProtocolSecretRequest(): DeleteMeasurementProtocolSecretRequest {
  return { name: "" };
}

export const DeleteMeasurementProtocolSecretRequest: MessageFns<DeleteMeasurementProtocolSecretRequest> = {
  encode(message: DeleteMeasurementProtocolSecretRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteMeasurementProtocolSecretRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteMeasurementProtocolSecretRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteMeasurementProtocolSecretRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteMeasurementProtocolSecretRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteMeasurementProtocolSecretRequest>): DeleteMeasurementProtocolSecretRequest {
    return DeleteMeasurementProtocolSecretRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteMeasurementProtocolSecretRequest>): DeleteMeasurementProtocolSecretRequest {
    const message = createBaseDeleteMeasurementProtocolSecretRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpdateMeasurementProtocolSecretRequest(): UpdateMeasurementProtocolSecretRequest {
  return { measurementProtocolSecret: undefined, updateMask: undefined };
}

export const UpdateMeasurementProtocolSecretRequest: MessageFns<UpdateMeasurementProtocolSecretRequest> = {
  encode(message: UpdateMeasurementProtocolSecretRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.measurementProtocolSecret !== undefined) {
      MeasurementProtocolSecret.encode(message.measurementProtocolSecret, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateMeasurementProtocolSecretRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateMeasurementProtocolSecretRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.measurementProtocolSecret = MeasurementProtocolSecret.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateMeasurementProtocolSecretRequest {
    return {
      measurementProtocolSecret: isSet(object.measurementProtocolSecret)
        ? MeasurementProtocolSecret.fromJSON(object.measurementProtocolSecret)
        : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateMeasurementProtocolSecretRequest): unknown {
    const obj: any = {};
    if (message.measurementProtocolSecret !== undefined) {
      obj.measurementProtocolSecret = MeasurementProtocolSecret.toJSON(message.measurementProtocolSecret);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateMeasurementProtocolSecretRequest>): UpdateMeasurementProtocolSecretRequest {
    return UpdateMeasurementProtocolSecretRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateMeasurementProtocolSecretRequest>): UpdateMeasurementProtocolSecretRequest {
    const message = createBaseUpdateMeasurementProtocolSecretRequest();
    message.measurementProtocolSecret =
      (object.measurementProtocolSecret !== undefined && object.measurementProtocolSecret !== null)
        ? MeasurementProtocolSecret.fromPartial(object.measurementProtocolSecret)
        : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseListMeasurementProtocolSecretsRequest(): ListMeasurementProtocolSecretsRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListMeasurementProtocolSecretsRequest: MessageFns<ListMeasurementProtocolSecretsRequest> = {
  encode(message: ListMeasurementProtocolSecretsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListMeasurementProtocolSecretsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListMeasurementProtocolSecretsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListMeasurementProtocolSecretsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListMeasurementProtocolSecretsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListMeasurementProtocolSecretsRequest>): ListMeasurementProtocolSecretsRequest {
    return ListMeasurementProtocolSecretsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListMeasurementProtocolSecretsRequest>): ListMeasurementProtocolSecretsRequest {
    const message = createBaseListMeasurementProtocolSecretsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListMeasurementProtocolSecretsResponse(): ListMeasurementProtocolSecretsResponse {
  return { measurementProtocolSecrets: [], nextPageToken: "" };
}

export const ListMeasurementProtocolSecretsResponse: MessageFns<ListMeasurementProtocolSecretsResponse> = {
  encode(message: ListMeasurementProtocolSecretsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.measurementProtocolSecrets) {
      MeasurementProtocolSecret.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListMeasurementProtocolSecretsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListMeasurementProtocolSecretsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.measurementProtocolSecrets.push(MeasurementProtocolSecret.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListMeasurementProtocolSecretsResponse {
    return {
      measurementProtocolSecrets: globalThis.Array.isArray(object?.measurementProtocolSecrets)
        ? object.measurementProtocolSecrets.map((e: any) => MeasurementProtocolSecret.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListMeasurementProtocolSecretsResponse): unknown {
    const obj: any = {};
    if (message.measurementProtocolSecrets?.length) {
      obj.measurementProtocolSecrets = message.measurementProtocolSecrets.map((e) =>
        MeasurementProtocolSecret.toJSON(e)
      );
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListMeasurementProtocolSecretsResponse>): ListMeasurementProtocolSecretsResponse {
    return ListMeasurementProtocolSecretsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListMeasurementProtocolSecretsResponse>): ListMeasurementProtocolSecretsResponse {
    const message = createBaseListMeasurementProtocolSecretsResponse();
    message.measurementProtocolSecrets =
      object.measurementProtocolSecrets?.map((e) => MeasurementProtocolSecret.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetSKAdNetworkConversionValueSchemaRequest(): GetSKAdNetworkConversionValueSchemaRequest {
  return { name: "" };
}

export const GetSKAdNetworkConversionValueSchemaRequest: MessageFns<GetSKAdNetworkConversionValueSchemaRequest> = {
  encode(message: GetSKAdNetworkConversionValueSchemaRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetSKAdNetworkConversionValueSchemaRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSKAdNetworkConversionValueSchemaRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetSKAdNetworkConversionValueSchemaRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetSKAdNetworkConversionValueSchemaRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetSKAdNetworkConversionValueSchemaRequest>): GetSKAdNetworkConversionValueSchemaRequest {
    return GetSKAdNetworkConversionValueSchemaRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<GetSKAdNetworkConversionValueSchemaRequest>,
  ): GetSKAdNetworkConversionValueSchemaRequest {
    const message = createBaseGetSKAdNetworkConversionValueSchemaRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateSKAdNetworkConversionValueSchemaRequest(): CreateSKAdNetworkConversionValueSchemaRequest {
  return { parent: "", skadnetworkConversionValueSchema: undefined };
}

export const CreateSKAdNetworkConversionValueSchemaRequest: MessageFns<CreateSKAdNetworkConversionValueSchemaRequest> =
  {
    encode(
      message: CreateSKAdNetworkConversionValueSchemaRequest,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.parent !== "") {
        writer.uint32(10).string(message.parent);
      }
      if (message.skadnetworkConversionValueSchema !== undefined) {
        SKAdNetworkConversionValueSchema.encode(message.skadnetworkConversionValueSchema, writer.uint32(18).fork())
          .join();
      }
      return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): CreateSKAdNetworkConversionValueSchemaRequest {
      const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseCreateSKAdNetworkConversionValueSchemaRequest();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            if (tag !== 10) {
              break;
            }

            message.parent = reader.string();
            continue;
          case 2:
            if (tag !== 18) {
              break;
            }

            message.skadnetworkConversionValueSchema = SKAdNetworkConversionValueSchema.decode(reader, reader.uint32());
            continue;
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): CreateSKAdNetworkConversionValueSchemaRequest {
      return {
        parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
        skadnetworkConversionValueSchema: isSet(object.skadnetworkConversionValueSchema)
          ? SKAdNetworkConversionValueSchema.fromJSON(object.skadnetworkConversionValueSchema)
          : undefined,
      };
    },

    toJSON(message: CreateSKAdNetworkConversionValueSchemaRequest): unknown {
      const obj: any = {};
      if (message.parent !== "") {
        obj.parent = message.parent;
      }
      if (message.skadnetworkConversionValueSchema !== undefined) {
        obj.skadnetworkConversionValueSchema = SKAdNetworkConversionValueSchema.toJSON(
          message.skadnetworkConversionValueSchema,
        );
      }
      return obj;
    },

    create(
      base?: DeepPartial<CreateSKAdNetworkConversionValueSchemaRequest>,
    ): CreateSKAdNetworkConversionValueSchemaRequest {
      return CreateSKAdNetworkConversionValueSchemaRequest.fromPartial(base ?? {});
    },
    fromPartial(
      object: DeepPartial<CreateSKAdNetworkConversionValueSchemaRequest>,
    ): CreateSKAdNetworkConversionValueSchemaRequest {
      const message = createBaseCreateSKAdNetworkConversionValueSchemaRequest();
      message.parent = object.parent ?? "";
      message.skadnetworkConversionValueSchema =
        (object.skadnetworkConversionValueSchema !== undefined && object.skadnetworkConversionValueSchema !== null)
          ? SKAdNetworkConversionValueSchema.fromPartial(object.skadnetworkConversionValueSchema)
          : undefined;
      return message;
    },
  };

function createBaseDeleteSKAdNetworkConversionValueSchemaRequest(): DeleteSKAdNetworkConversionValueSchemaRequest {
  return { name: "" };
}

export const DeleteSKAdNetworkConversionValueSchemaRequest: MessageFns<DeleteSKAdNetworkConversionValueSchemaRequest> =
  {
    encode(
      message: DeleteSKAdNetworkConversionValueSchemaRequest,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.name !== "") {
        writer.uint32(10).string(message.name);
      }
      return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): DeleteSKAdNetworkConversionValueSchemaRequest {
      const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseDeleteSKAdNetworkConversionValueSchemaRequest();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            if (tag !== 10) {
              break;
            }

            message.name = reader.string();
            continue;
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): DeleteSKAdNetworkConversionValueSchemaRequest {
      return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
    },

    toJSON(message: DeleteSKAdNetworkConversionValueSchemaRequest): unknown {
      const obj: any = {};
      if (message.name !== "") {
        obj.name = message.name;
      }
      return obj;
    },

    create(
      base?: DeepPartial<DeleteSKAdNetworkConversionValueSchemaRequest>,
    ): DeleteSKAdNetworkConversionValueSchemaRequest {
      return DeleteSKAdNetworkConversionValueSchemaRequest.fromPartial(base ?? {});
    },
    fromPartial(
      object: DeepPartial<DeleteSKAdNetworkConversionValueSchemaRequest>,
    ): DeleteSKAdNetworkConversionValueSchemaRequest {
      const message = createBaseDeleteSKAdNetworkConversionValueSchemaRequest();
      message.name = object.name ?? "";
      return message;
    },
  };

function createBaseUpdateSKAdNetworkConversionValueSchemaRequest(): UpdateSKAdNetworkConversionValueSchemaRequest {
  return { skadnetworkConversionValueSchema: undefined, updateMask: undefined };
}

export const UpdateSKAdNetworkConversionValueSchemaRequest: MessageFns<UpdateSKAdNetworkConversionValueSchemaRequest> =
  {
    encode(
      message: UpdateSKAdNetworkConversionValueSchemaRequest,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.skadnetworkConversionValueSchema !== undefined) {
        SKAdNetworkConversionValueSchema.encode(message.skadnetworkConversionValueSchema, writer.uint32(10).fork())
          .join();
      }
      if (message.updateMask !== undefined) {
        FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
      }
      return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): UpdateSKAdNetworkConversionValueSchemaRequest {
      const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseUpdateSKAdNetworkConversionValueSchemaRequest();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            if (tag !== 10) {
              break;
            }

            message.skadnetworkConversionValueSchema = SKAdNetworkConversionValueSchema.decode(reader, reader.uint32());
            continue;
          case 2:
            if (tag !== 18) {
              break;
            }

            message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
            continue;
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): UpdateSKAdNetworkConversionValueSchemaRequest {
      return {
        skadnetworkConversionValueSchema: isSet(object.skadnetworkConversionValueSchema)
          ? SKAdNetworkConversionValueSchema.fromJSON(object.skadnetworkConversionValueSchema)
          : undefined,
        updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      };
    },

    toJSON(message: UpdateSKAdNetworkConversionValueSchemaRequest): unknown {
      const obj: any = {};
      if (message.skadnetworkConversionValueSchema !== undefined) {
        obj.skadnetworkConversionValueSchema = SKAdNetworkConversionValueSchema.toJSON(
          message.skadnetworkConversionValueSchema,
        );
      }
      if (message.updateMask !== undefined) {
        obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
      }
      return obj;
    },

    create(
      base?: DeepPartial<UpdateSKAdNetworkConversionValueSchemaRequest>,
    ): UpdateSKAdNetworkConversionValueSchemaRequest {
      return UpdateSKAdNetworkConversionValueSchemaRequest.fromPartial(base ?? {});
    },
    fromPartial(
      object: DeepPartial<UpdateSKAdNetworkConversionValueSchemaRequest>,
    ): UpdateSKAdNetworkConversionValueSchemaRequest {
      const message = createBaseUpdateSKAdNetworkConversionValueSchemaRequest();
      message.skadnetworkConversionValueSchema =
        (object.skadnetworkConversionValueSchema !== undefined && object.skadnetworkConversionValueSchema !== null)
          ? SKAdNetworkConversionValueSchema.fromPartial(object.skadnetworkConversionValueSchema)
          : undefined;
      message.updateMask = object.updateMask ?? undefined;
      return message;
    },
  };

function createBaseListSKAdNetworkConversionValueSchemasRequest(): ListSKAdNetworkConversionValueSchemasRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListSKAdNetworkConversionValueSchemasRequest: MessageFns<ListSKAdNetworkConversionValueSchemasRequest> = {
  encode(
    message: ListSKAdNetworkConversionValueSchemasRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListSKAdNetworkConversionValueSchemasRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSKAdNetworkConversionValueSchemasRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListSKAdNetworkConversionValueSchemasRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListSKAdNetworkConversionValueSchemasRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(
    base?: DeepPartial<ListSKAdNetworkConversionValueSchemasRequest>,
  ): ListSKAdNetworkConversionValueSchemasRequest {
    return ListSKAdNetworkConversionValueSchemasRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ListSKAdNetworkConversionValueSchemasRequest>,
  ): ListSKAdNetworkConversionValueSchemasRequest {
    const message = createBaseListSKAdNetworkConversionValueSchemasRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListSKAdNetworkConversionValueSchemasResponse(): ListSKAdNetworkConversionValueSchemasResponse {
  return { skadnetworkConversionValueSchemas: [], nextPageToken: "" };
}

export const ListSKAdNetworkConversionValueSchemasResponse: MessageFns<ListSKAdNetworkConversionValueSchemasResponse> =
  {
    encode(
      message: ListSKAdNetworkConversionValueSchemasResponse,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      for (const v of message.skadnetworkConversionValueSchemas) {
        SKAdNetworkConversionValueSchema.encode(v!, writer.uint32(10).fork()).join();
      }
      if (message.nextPageToken !== "") {
        writer.uint32(18).string(message.nextPageToken);
      }
      return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): ListSKAdNetworkConversionValueSchemasResponse {
      const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseListSKAdNetworkConversionValueSchemasResponse();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            if (tag !== 10) {
              break;
            }

            message.skadnetworkConversionValueSchemas.push(
              SKAdNetworkConversionValueSchema.decode(reader, reader.uint32()),
            );
            continue;
          case 2:
            if (tag !== 18) {
              break;
            }

            message.nextPageToken = reader.string();
            continue;
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): ListSKAdNetworkConversionValueSchemasResponse {
      return {
        skadnetworkConversionValueSchemas: globalThis.Array.isArray(object?.skadnetworkConversionValueSchemas)
          ? object.skadnetworkConversionValueSchemas.map((e: any) => SKAdNetworkConversionValueSchema.fromJSON(e))
          : [],
        nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      };
    },

    toJSON(message: ListSKAdNetworkConversionValueSchemasResponse): unknown {
      const obj: any = {};
      if (message.skadnetworkConversionValueSchemas?.length) {
        obj.skadnetworkConversionValueSchemas = message.skadnetworkConversionValueSchemas.map((e) =>
          SKAdNetworkConversionValueSchema.toJSON(e)
        );
      }
      if (message.nextPageToken !== "") {
        obj.nextPageToken = message.nextPageToken;
      }
      return obj;
    },

    create(
      base?: DeepPartial<ListSKAdNetworkConversionValueSchemasResponse>,
    ): ListSKAdNetworkConversionValueSchemasResponse {
      return ListSKAdNetworkConversionValueSchemasResponse.fromPartial(base ?? {});
    },
    fromPartial(
      object: DeepPartial<ListSKAdNetworkConversionValueSchemasResponse>,
    ): ListSKAdNetworkConversionValueSchemasResponse {
      const message = createBaseListSKAdNetworkConversionValueSchemasResponse();
      message.skadnetworkConversionValueSchemas =
        object.skadnetworkConversionValueSchemas?.map((e) => SKAdNetworkConversionValueSchema.fromPartial(e)) || [];
      message.nextPageToken = object.nextPageToken ?? "";
      return message;
    },
  };

function createBaseGetGoogleSignalsSettingsRequest(): GetGoogleSignalsSettingsRequest {
  return { name: "" };
}

export const GetGoogleSignalsSettingsRequest: MessageFns<GetGoogleSignalsSettingsRequest> = {
  encode(message: GetGoogleSignalsSettingsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetGoogleSignalsSettingsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetGoogleSignalsSettingsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetGoogleSignalsSettingsRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetGoogleSignalsSettingsRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetGoogleSignalsSettingsRequest>): GetGoogleSignalsSettingsRequest {
    return GetGoogleSignalsSettingsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetGoogleSignalsSettingsRequest>): GetGoogleSignalsSettingsRequest {
    const message = createBaseGetGoogleSignalsSettingsRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpdateGoogleSignalsSettingsRequest(): UpdateGoogleSignalsSettingsRequest {
  return { googleSignalsSettings: undefined, updateMask: undefined };
}

export const UpdateGoogleSignalsSettingsRequest: MessageFns<UpdateGoogleSignalsSettingsRequest> = {
  encode(message: UpdateGoogleSignalsSettingsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.googleSignalsSettings !== undefined) {
      GoogleSignalsSettings.encode(message.googleSignalsSettings, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateGoogleSignalsSettingsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateGoogleSignalsSettingsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.googleSignalsSettings = GoogleSignalsSettings.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateGoogleSignalsSettingsRequest {
    return {
      googleSignalsSettings: isSet(object.googleSignalsSettings)
        ? GoogleSignalsSettings.fromJSON(object.googleSignalsSettings)
        : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateGoogleSignalsSettingsRequest): unknown {
    const obj: any = {};
    if (message.googleSignalsSettings !== undefined) {
      obj.googleSignalsSettings = GoogleSignalsSettings.toJSON(message.googleSignalsSettings);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateGoogleSignalsSettingsRequest>): UpdateGoogleSignalsSettingsRequest {
    return UpdateGoogleSignalsSettingsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateGoogleSignalsSettingsRequest>): UpdateGoogleSignalsSettingsRequest {
    const message = createBaseUpdateGoogleSignalsSettingsRequest();
    message.googleSignalsSettings =
      (object.googleSignalsSettings !== undefined && object.googleSignalsSettings !== null)
        ? GoogleSignalsSettings.fromPartial(object.googleSignalsSettings)
        : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseCreateConversionEventRequest(): CreateConversionEventRequest {
  return { conversionEvent: undefined, parent: "" };
}

export const CreateConversionEventRequest: MessageFns<CreateConversionEventRequest> = {
  encode(message: CreateConversionEventRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.conversionEvent !== undefined) {
      ConversionEvent.encode(message.conversionEvent, writer.uint32(10).fork()).join();
    }
    if (message.parent !== "") {
      writer.uint32(18).string(message.parent);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateConversionEventRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateConversionEventRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.conversionEvent = ConversionEvent.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.parent = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateConversionEventRequest {
    return {
      conversionEvent: isSet(object.conversionEvent) ? ConversionEvent.fromJSON(object.conversionEvent) : undefined,
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
    };
  },

  toJSON(message: CreateConversionEventRequest): unknown {
    const obj: any = {};
    if (message.conversionEvent !== undefined) {
      obj.conversionEvent = ConversionEvent.toJSON(message.conversionEvent);
    }
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateConversionEventRequest>): CreateConversionEventRequest {
    return CreateConversionEventRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateConversionEventRequest>): CreateConversionEventRequest {
    const message = createBaseCreateConversionEventRequest();
    message.conversionEvent = (object.conversionEvent !== undefined && object.conversionEvent !== null)
      ? ConversionEvent.fromPartial(object.conversionEvent)
      : undefined;
    message.parent = object.parent ?? "";
    return message;
  },
};

function createBaseUpdateConversionEventRequest(): UpdateConversionEventRequest {
  return { conversionEvent: undefined, updateMask: undefined };
}

export const UpdateConversionEventRequest: MessageFns<UpdateConversionEventRequest> = {
  encode(message: UpdateConversionEventRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.conversionEvent !== undefined) {
      ConversionEvent.encode(message.conversionEvent, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateConversionEventRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateConversionEventRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.conversionEvent = ConversionEvent.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateConversionEventRequest {
    return {
      conversionEvent: isSet(object.conversionEvent) ? ConversionEvent.fromJSON(object.conversionEvent) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateConversionEventRequest): unknown {
    const obj: any = {};
    if (message.conversionEvent !== undefined) {
      obj.conversionEvent = ConversionEvent.toJSON(message.conversionEvent);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateConversionEventRequest>): UpdateConversionEventRequest {
    return UpdateConversionEventRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateConversionEventRequest>): UpdateConversionEventRequest {
    const message = createBaseUpdateConversionEventRequest();
    message.conversionEvent = (object.conversionEvent !== undefined && object.conversionEvent !== null)
      ? ConversionEvent.fromPartial(object.conversionEvent)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseGetConversionEventRequest(): GetConversionEventRequest {
  return { name: "" };
}

export const GetConversionEventRequest: MessageFns<GetConversionEventRequest> = {
  encode(message: GetConversionEventRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetConversionEventRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetConversionEventRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetConversionEventRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetConversionEventRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetConversionEventRequest>): GetConversionEventRequest {
    return GetConversionEventRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetConversionEventRequest>): GetConversionEventRequest {
    const message = createBaseGetConversionEventRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseDeleteConversionEventRequest(): DeleteConversionEventRequest {
  return { name: "" };
}

export const DeleteConversionEventRequest: MessageFns<DeleteConversionEventRequest> = {
  encode(message: DeleteConversionEventRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteConversionEventRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteConversionEventRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteConversionEventRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteConversionEventRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteConversionEventRequest>): DeleteConversionEventRequest {
    return DeleteConversionEventRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteConversionEventRequest>): DeleteConversionEventRequest {
    const message = createBaseDeleteConversionEventRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListConversionEventsRequest(): ListConversionEventsRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListConversionEventsRequest: MessageFns<ListConversionEventsRequest> = {
  encode(message: ListConversionEventsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListConversionEventsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListConversionEventsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListConversionEventsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListConversionEventsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListConversionEventsRequest>): ListConversionEventsRequest {
    return ListConversionEventsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListConversionEventsRequest>): ListConversionEventsRequest {
    const message = createBaseListConversionEventsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListConversionEventsResponse(): ListConversionEventsResponse {
  return { conversionEvents: [], nextPageToken: "" };
}

export const ListConversionEventsResponse: MessageFns<ListConversionEventsResponse> = {
  encode(message: ListConversionEventsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.conversionEvents) {
      ConversionEvent.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListConversionEventsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListConversionEventsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.conversionEvents.push(ConversionEvent.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListConversionEventsResponse {
    return {
      conversionEvents: globalThis.Array.isArray(object?.conversionEvents)
        ? object.conversionEvents.map((e: any) => ConversionEvent.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListConversionEventsResponse): unknown {
    const obj: any = {};
    if (message.conversionEvents?.length) {
      obj.conversionEvents = message.conversionEvents.map((e) => ConversionEvent.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListConversionEventsResponse>): ListConversionEventsResponse {
    return ListConversionEventsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListConversionEventsResponse>): ListConversionEventsResponse {
    const message = createBaseListConversionEventsResponse();
    message.conversionEvents = object.conversionEvents?.map((e) => ConversionEvent.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseCreateKeyEventRequest(): CreateKeyEventRequest {
  return { keyEvent: undefined, parent: "" };
}

export const CreateKeyEventRequest: MessageFns<CreateKeyEventRequest> = {
  encode(message: CreateKeyEventRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.keyEvent !== undefined) {
      KeyEvent.encode(message.keyEvent, writer.uint32(10).fork()).join();
    }
    if (message.parent !== "") {
      writer.uint32(18).string(message.parent);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateKeyEventRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateKeyEventRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.keyEvent = KeyEvent.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.parent = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateKeyEventRequest {
    return {
      keyEvent: isSet(object.keyEvent) ? KeyEvent.fromJSON(object.keyEvent) : undefined,
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
    };
  },

  toJSON(message: CreateKeyEventRequest): unknown {
    const obj: any = {};
    if (message.keyEvent !== undefined) {
      obj.keyEvent = KeyEvent.toJSON(message.keyEvent);
    }
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateKeyEventRequest>): CreateKeyEventRequest {
    return CreateKeyEventRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateKeyEventRequest>): CreateKeyEventRequest {
    const message = createBaseCreateKeyEventRequest();
    message.keyEvent = (object.keyEvent !== undefined && object.keyEvent !== null)
      ? KeyEvent.fromPartial(object.keyEvent)
      : undefined;
    message.parent = object.parent ?? "";
    return message;
  },
};

function createBaseUpdateKeyEventRequest(): UpdateKeyEventRequest {
  return { keyEvent: undefined, updateMask: undefined };
}

export const UpdateKeyEventRequest: MessageFns<UpdateKeyEventRequest> = {
  encode(message: UpdateKeyEventRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.keyEvent !== undefined) {
      KeyEvent.encode(message.keyEvent, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateKeyEventRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateKeyEventRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.keyEvent = KeyEvent.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateKeyEventRequest {
    return {
      keyEvent: isSet(object.keyEvent) ? KeyEvent.fromJSON(object.keyEvent) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateKeyEventRequest): unknown {
    const obj: any = {};
    if (message.keyEvent !== undefined) {
      obj.keyEvent = KeyEvent.toJSON(message.keyEvent);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateKeyEventRequest>): UpdateKeyEventRequest {
    return UpdateKeyEventRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateKeyEventRequest>): UpdateKeyEventRequest {
    const message = createBaseUpdateKeyEventRequest();
    message.keyEvent = (object.keyEvent !== undefined && object.keyEvent !== null)
      ? KeyEvent.fromPartial(object.keyEvent)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseGetKeyEventRequest(): GetKeyEventRequest {
  return { name: "" };
}

export const GetKeyEventRequest: MessageFns<GetKeyEventRequest> = {
  encode(message: GetKeyEventRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetKeyEventRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetKeyEventRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetKeyEventRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetKeyEventRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetKeyEventRequest>): GetKeyEventRequest {
    return GetKeyEventRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetKeyEventRequest>): GetKeyEventRequest {
    const message = createBaseGetKeyEventRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseDeleteKeyEventRequest(): DeleteKeyEventRequest {
  return { name: "" };
}

export const DeleteKeyEventRequest: MessageFns<DeleteKeyEventRequest> = {
  encode(message: DeleteKeyEventRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteKeyEventRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteKeyEventRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteKeyEventRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteKeyEventRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteKeyEventRequest>): DeleteKeyEventRequest {
    return DeleteKeyEventRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteKeyEventRequest>): DeleteKeyEventRequest {
    const message = createBaseDeleteKeyEventRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListKeyEventsRequest(): ListKeyEventsRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListKeyEventsRequest: MessageFns<ListKeyEventsRequest> = {
  encode(message: ListKeyEventsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListKeyEventsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListKeyEventsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListKeyEventsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListKeyEventsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListKeyEventsRequest>): ListKeyEventsRequest {
    return ListKeyEventsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListKeyEventsRequest>): ListKeyEventsRequest {
    const message = createBaseListKeyEventsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListKeyEventsResponse(): ListKeyEventsResponse {
  return { keyEvents: [], nextPageToken: "" };
}

export const ListKeyEventsResponse: MessageFns<ListKeyEventsResponse> = {
  encode(message: ListKeyEventsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.keyEvents) {
      KeyEvent.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListKeyEventsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListKeyEventsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.keyEvents.push(KeyEvent.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListKeyEventsResponse {
    return {
      keyEvents: globalThis.Array.isArray(object?.keyEvents)
        ? object.keyEvents.map((e: any) => KeyEvent.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListKeyEventsResponse): unknown {
    const obj: any = {};
    if (message.keyEvents?.length) {
      obj.keyEvents = message.keyEvents.map((e) => KeyEvent.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListKeyEventsResponse>): ListKeyEventsResponse {
    return ListKeyEventsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListKeyEventsResponse>): ListKeyEventsResponse {
    const message = createBaseListKeyEventsResponse();
    message.keyEvents = object.keyEvents?.map((e) => KeyEvent.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetDisplayVideo360AdvertiserLinkRequest(): GetDisplayVideo360AdvertiserLinkRequest {
  return { name: "" };
}

export const GetDisplayVideo360AdvertiserLinkRequest: MessageFns<GetDisplayVideo360AdvertiserLinkRequest> = {
  encode(message: GetDisplayVideo360AdvertiserLinkRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetDisplayVideo360AdvertiserLinkRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDisplayVideo360AdvertiserLinkRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDisplayVideo360AdvertiserLinkRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetDisplayVideo360AdvertiserLinkRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetDisplayVideo360AdvertiserLinkRequest>): GetDisplayVideo360AdvertiserLinkRequest {
    return GetDisplayVideo360AdvertiserLinkRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetDisplayVideo360AdvertiserLinkRequest>): GetDisplayVideo360AdvertiserLinkRequest {
    const message = createBaseGetDisplayVideo360AdvertiserLinkRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListDisplayVideo360AdvertiserLinksRequest(): ListDisplayVideo360AdvertiserLinksRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListDisplayVideo360AdvertiserLinksRequest: MessageFns<ListDisplayVideo360AdvertiserLinksRequest> = {
  encode(message: ListDisplayVideo360AdvertiserLinksRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListDisplayVideo360AdvertiserLinksRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListDisplayVideo360AdvertiserLinksRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListDisplayVideo360AdvertiserLinksRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListDisplayVideo360AdvertiserLinksRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListDisplayVideo360AdvertiserLinksRequest>): ListDisplayVideo360AdvertiserLinksRequest {
    return ListDisplayVideo360AdvertiserLinksRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ListDisplayVideo360AdvertiserLinksRequest>,
  ): ListDisplayVideo360AdvertiserLinksRequest {
    const message = createBaseListDisplayVideo360AdvertiserLinksRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListDisplayVideo360AdvertiserLinksResponse(): ListDisplayVideo360AdvertiserLinksResponse {
  return { displayVideo360AdvertiserLinks: [], nextPageToken: "" };
}

export const ListDisplayVideo360AdvertiserLinksResponse: MessageFns<ListDisplayVideo360AdvertiserLinksResponse> = {
  encode(message: ListDisplayVideo360AdvertiserLinksResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.displayVideo360AdvertiserLinks) {
      DisplayVideo360AdvertiserLink.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListDisplayVideo360AdvertiserLinksResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListDisplayVideo360AdvertiserLinksResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.displayVideo360AdvertiserLinks.push(DisplayVideo360AdvertiserLink.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListDisplayVideo360AdvertiserLinksResponse {
    return {
      displayVideo360AdvertiserLinks: globalThis.Array.isArray(object?.displayVideo360AdvertiserLinks)
        ? object.displayVideo360AdvertiserLinks.map((e: any) => DisplayVideo360AdvertiserLink.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListDisplayVideo360AdvertiserLinksResponse): unknown {
    const obj: any = {};
    if (message.displayVideo360AdvertiserLinks?.length) {
      obj.displayVideo360AdvertiserLinks = message.displayVideo360AdvertiserLinks.map((e) =>
        DisplayVideo360AdvertiserLink.toJSON(e)
      );
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListDisplayVideo360AdvertiserLinksResponse>): ListDisplayVideo360AdvertiserLinksResponse {
    return ListDisplayVideo360AdvertiserLinksResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ListDisplayVideo360AdvertiserLinksResponse>,
  ): ListDisplayVideo360AdvertiserLinksResponse {
    const message = createBaseListDisplayVideo360AdvertiserLinksResponse();
    message.displayVideo360AdvertiserLinks =
      object.displayVideo360AdvertiserLinks?.map((e) => DisplayVideo360AdvertiserLink.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseCreateDisplayVideo360AdvertiserLinkRequest(): CreateDisplayVideo360AdvertiserLinkRequest {
  return { parent: "", displayVideo360AdvertiserLink: undefined };
}

export const CreateDisplayVideo360AdvertiserLinkRequest: MessageFns<CreateDisplayVideo360AdvertiserLinkRequest> = {
  encode(message: CreateDisplayVideo360AdvertiserLinkRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.displayVideo360AdvertiserLink !== undefined) {
      DisplayVideo360AdvertiserLink.encode(message.displayVideo360AdvertiserLink, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateDisplayVideo360AdvertiserLinkRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateDisplayVideo360AdvertiserLinkRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.displayVideo360AdvertiserLink = DisplayVideo360AdvertiserLink.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateDisplayVideo360AdvertiserLinkRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      displayVideo360AdvertiserLink: isSet(object.displayVideo360AdvertiserLink)
        ? DisplayVideo360AdvertiserLink.fromJSON(object.displayVideo360AdvertiserLink)
        : undefined,
    };
  },

  toJSON(message: CreateDisplayVideo360AdvertiserLinkRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.displayVideo360AdvertiserLink !== undefined) {
      obj.displayVideo360AdvertiserLink = DisplayVideo360AdvertiserLink.toJSON(message.displayVideo360AdvertiserLink);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateDisplayVideo360AdvertiserLinkRequest>): CreateDisplayVideo360AdvertiserLinkRequest {
    return CreateDisplayVideo360AdvertiserLinkRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<CreateDisplayVideo360AdvertiserLinkRequest>,
  ): CreateDisplayVideo360AdvertiserLinkRequest {
    const message = createBaseCreateDisplayVideo360AdvertiserLinkRequest();
    message.parent = object.parent ?? "";
    message.displayVideo360AdvertiserLink =
      (object.displayVideo360AdvertiserLink !== undefined && object.displayVideo360AdvertiserLink !== null)
        ? DisplayVideo360AdvertiserLink.fromPartial(object.displayVideo360AdvertiserLink)
        : undefined;
    return message;
  },
};

function createBaseDeleteDisplayVideo360AdvertiserLinkRequest(): DeleteDisplayVideo360AdvertiserLinkRequest {
  return { name: "" };
}

export const DeleteDisplayVideo360AdvertiserLinkRequest: MessageFns<DeleteDisplayVideo360AdvertiserLinkRequest> = {
  encode(message: DeleteDisplayVideo360AdvertiserLinkRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteDisplayVideo360AdvertiserLinkRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteDisplayVideo360AdvertiserLinkRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteDisplayVideo360AdvertiserLinkRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteDisplayVideo360AdvertiserLinkRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteDisplayVideo360AdvertiserLinkRequest>): DeleteDisplayVideo360AdvertiserLinkRequest {
    return DeleteDisplayVideo360AdvertiserLinkRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<DeleteDisplayVideo360AdvertiserLinkRequest>,
  ): DeleteDisplayVideo360AdvertiserLinkRequest {
    const message = createBaseDeleteDisplayVideo360AdvertiserLinkRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpdateDisplayVideo360AdvertiserLinkRequest(): UpdateDisplayVideo360AdvertiserLinkRequest {
  return { displayVideo360AdvertiserLink: undefined, updateMask: undefined };
}

export const UpdateDisplayVideo360AdvertiserLinkRequest: MessageFns<UpdateDisplayVideo360AdvertiserLinkRequest> = {
  encode(message: UpdateDisplayVideo360AdvertiserLinkRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.displayVideo360AdvertiserLink !== undefined) {
      DisplayVideo360AdvertiserLink.encode(message.displayVideo360AdvertiserLink, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateDisplayVideo360AdvertiserLinkRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateDisplayVideo360AdvertiserLinkRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.displayVideo360AdvertiserLink = DisplayVideo360AdvertiserLink.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateDisplayVideo360AdvertiserLinkRequest {
    return {
      displayVideo360AdvertiserLink: isSet(object.displayVideo360AdvertiserLink)
        ? DisplayVideo360AdvertiserLink.fromJSON(object.displayVideo360AdvertiserLink)
        : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateDisplayVideo360AdvertiserLinkRequest): unknown {
    const obj: any = {};
    if (message.displayVideo360AdvertiserLink !== undefined) {
      obj.displayVideo360AdvertiserLink = DisplayVideo360AdvertiserLink.toJSON(message.displayVideo360AdvertiserLink);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateDisplayVideo360AdvertiserLinkRequest>): UpdateDisplayVideo360AdvertiserLinkRequest {
    return UpdateDisplayVideo360AdvertiserLinkRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<UpdateDisplayVideo360AdvertiserLinkRequest>,
  ): UpdateDisplayVideo360AdvertiserLinkRequest {
    const message = createBaseUpdateDisplayVideo360AdvertiserLinkRequest();
    message.displayVideo360AdvertiserLink =
      (object.displayVideo360AdvertiserLink !== undefined && object.displayVideo360AdvertiserLink !== null)
        ? DisplayVideo360AdvertiserLink.fromPartial(object.displayVideo360AdvertiserLink)
        : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseGetDisplayVideo360AdvertiserLinkProposalRequest(): GetDisplayVideo360AdvertiserLinkProposalRequest {
  return { name: "" };
}

export const GetDisplayVideo360AdvertiserLinkProposalRequest: MessageFns<
  GetDisplayVideo360AdvertiserLinkProposalRequest
> = {
  encode(
    message: GetDisplayVideo360AdvertiserLinkProposalRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetDisplayVideo360AdvertiserLinkProposalRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDisplayVideo360AdvertiserLinkProposalRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDisplayVideo360AdvertiserLinkProposalRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetDisplayVideo360AdvertiserLinkProposalRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(
    base?: DeepPartial<GetDisplayVideo360AdvertiserLinkProposalRequest>,
  ): GetDisplayVideo360AdvertiserLinkProposalRequest {
    return GetDisplayVideo360AdvertiserLinkProposalRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<GetDisplayVideo360AdvertiserLinkProposalRequest>,
  ): GetDisplayVideo360AdvertiserLinkProposalRequest {
    const message = createBaseGetDisplayVideo360AdvertiserLinkProposalRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListDisplayVideo360AdvertiserLinkProposalsRequest(): ListDisplayVideo360AdvertiserLinkProposalsRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListDisplayVideo360AdvertiserLinkProposalsRequest: MessageFns<
  ListDisplayVideo360AdvertiserLinkProposalsRequest
> = {
  encode(
    message: ListDisplayVideo360AdvertiserLinkProposalsRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListDisplayVideo360AdvertiserLinkProposalsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListDisplayVideo360AdvertiserLinkProposalsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListDisplayVideo360AdvertiserLinkProposalsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListDisplayVideo360AdvertiserLinkProposalsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(
    base?: DeepPartial<ListDisplayVideo360AdvertiserLinkProposalsRequest>,
  ): ListDisplayVideo360AdvertiserLinkProposalsRequest {
    return ListDisplayVideo360AdvertiserLinkProposalsRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ListDisplayVideo360AdvertiserLinkProposalsRequest>,
  ): ListDisplayVideo360AdvertiserLinkProposalsRequest {
    const message = createBaseListDisplayVideo360AdvertiserLinkProposalsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListDisplayVideo360AdvertiserLinkProposalsResponse(): ListDisplayVideo360AdvertiserLinkProposalsResponse {
  return { displayVideo360AdvertiserLinkProposals: [], nextPageToken: "" };
}

export const ListDisplayVideo360AdvertiserLinkProposalsResponse: MessageFns<
  ListDisplayVideo360AdvertiserLinkProposalsResponse
> = {
  encode(
    message: ListDisplayVideo360AdvertiserLinkProposalsResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    for (const v of message.displayVideo360AdvertiserLinkProposals) {
      DisplayVideo360AdvertiserLinkProposal.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListDisplayVideo360AdvertiserLinkProposalsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListDisplayVideo360AdvertiserLinkProposalsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.displayVideo360AdvertiserLinkProposals.push(
            DisplayVideo360AdvertiserLinkProposal.decode(reader, reader.uint32()),
          );
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListDisplayVideo360AdvertiserLinkProposalsResponse {
    return {
      displayVideo360AdvertiserLinkProposals: globalThis.Array.isArray(object?.displayVideo360AdvertiserLinkProposals)
        ? object.displayVideo360AdvertiserLinkProposals.map((e: any) =>
          DisplayVideo360AdvertiserLinkProposal.fromJSON(e)
        )
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListDisplayVideo360AdvertiserLinkProposalsResponse): unknown {
    const obj: any = {};
    if (message.displayVideo360AdvertiserLinkProposals?.length) {
      obj.displayVideo360AdvertiserLinkProposals = message.displayVideo360AdvertiserLinkProposals.map((e) =>
        DisplayVideo360AdvertiserLinkProposal.toJSON(e)
      );
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(
    base?: DeepPartial<ListDisplayVideo360AdvertiserLinkProposalsResponse>,
  ): ListDisplayVideo360AdvertiserLinkProposalsResponse {
    return ListDisplayVideo360AdvertiserLinkProposalsResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ListDisplayVideo360AdvertiserLinkProposalsResponse>,
  ): ListDisplayVideo360AdvertiserLinkProposalsResponse {
    const message = createBaseListDisplayVideo360AdvertiserLinkProposalsResponse();
    message.displayVideo360AdvertiserLinkProposals =
      object.displayVideo360AdvertiserLinkProposals?.map((e) => DisplayVideo360AdvertiserLinkProposal.fromPartial(e)) ||
      [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseCreateDisplayVideo360AdvertiserLinkProposalRequest(): CreateDisplayVideo360AdvertiserLinkProposalRequest {
  return { parent: "", displayVideo360AdvertiserLinkProposal: undefined };
}

export const CreateDisplayVideo360AdvertiserLinkProposalRequest: MessageFns<
  CreateDisplayVideo360AdvertiserLinkProposalRequest
> = {
  encode(
    message: CreateDisplayVideo360AdvertiserLinkProposalRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.displayVideo360AdvertiserLinkProposal !== undefined) {
      DisplayVideo360AdvertiserLinkProposal.encode(
        message.displayVideo360AdvertiserLinkProposal,
        writer.uint32(18).fork(),
      ).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateDisplayVideo360AdvertiserLinkProposalRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateDisplayVideo360AdvertiserLinkProposalRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.displayVideo360AdvertiserLinkProposal = DisplayVideo360AdvertiserLinkProposal.decode(
            reader,
            reader.uint32(),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateDisplayVideo360AdvertiserLinkProposalRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      displayVideo360AdvertiserLinkProposal: isSet(object.displayVideo360AdvertiserLinkProposal)
        ? DisplayVideo360AdvertiserLinkProposal.fromJSON(object.displayVideo360AdvertiserLinkProposal)
        : undefined,
    };
  },

  toJSON(message: CreateDisplayVideo360AdvertiserLinkProposalRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.displayVideo360AdvertiserLinkProposal !== undefined) {
      obj.displayVideo360AdvertiserLinkProposal = DisplayVideo360AdvertiserLinkProposal.toJSON(
        message.displayVideo360AdvertiserLinkProposal,
      );
    }
    return obj;
  },

  create(
    base?: DeepPartial<CreateDisplayVideo360AdvertiserLinkProposalRequest>,
  ): CreateDisplayVideo360AdvertiserLinkProposalRequest {
    return CreateDisplayVideo360AdvertiserLinkProposalRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<CreateDisplayVideo360AdvertiserLinkProposalRequest>,
  ): CreateDisplayVideo360AdvertiserLinkProposalRequest {
    const message = createBaseCreateDisplayVideo360AdvertiserLinkProposalRequest();
    message.parent = object.parent ?? "";
    message.displayVideo360AdvertiserLinkProposal =
      (object.displayVideo360AdvertiserLinkProposal !== undefined &&
          object.displayVideo360AdvertiserLinkProposal !== null)
        ? DisplayVideo360AdvertiserLinkProposal.fromPartial(object.displayVideo360AdvertiserLinkProposal)
        : undefined;
    return message;
  },
};

function createBaseDeleteDisplayVideo360AdvertiserLinkProposalRequest(): DeleteDisplayVideo360AdvertiserLinkProposalRequest {
  return { name: "" };
}

export const DeleteDisplayVideo360AdvertiserLinkProposalRequest: MessageFns<
  DeleteDisplayVideo360AdvertiserLinkProposalRequest
> = {
  encode(
    message: DeleteDisplayVideo360AdvertiserLinkProposalRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteDisplayVideo360AdvertiserLinkProposalRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteDisplayVideo360AdvertiserLinkProposalRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteDisplayVideo360AdvertiserLinkProposalRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteDisplayVideo360AdvertiserLinkProposalRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(
    base?: DeepPartial<DeleteDisplayVideo360AdvertiserLinkProposalRequest>,
  ): DeleteDisplayVideo360AdvertiserLinkProposalRequest {
    return DeleteDisplayVideo360AdvertiserLinkProposalRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<DeleteDisplayVideo360AdvertiserLinkProposalRequest>,
  ): DeleteDisplayVideo360AdvertiserLinkProposalRequest {
    const message = createBaseDeleteDisplayVideo360AdvertiserLinkProposalRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseApproveDisplayVideo360AdvertiserLinkProposalRequest(): ApproveDisplayVideo360AdvertiserLinkProposalRequest {
  return { name: "" };
}

export const ApproveDisplayVideo360AdvertiserLinkProposalRequest: MessageFns<
  ApproveDisplayVideo360AdvertiserLinkProposalRequest
> = {
  encode(
    message: ApproveDisplayVideo360AdvertiserLinkProposalRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ApproveDisplayVideo360AdvertiserLinkProposalRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseApproveDisplayVideo360AdvertiserLinkProposalRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ApproveDisplayVideo360AdvertiserLinkProposalRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: ApproveDisplayVideo360AdvertiserLinkProposalRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(
    base?: DeepPartial<ApproveDisplayVideo360AdvertiserLinkProposalRequest>,
  ): ApproveDisplayVideo360AdvertiserLinkProposalRequest {
    return ApproveDisplayVideo360AdvertiserLinkProposalRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ApproveDisplayVideo360AdvertiserLinkProposalRequest>,
  ): ApproveDisplayVideo360AdvertiserLinkProposalRequest {
    const message = createBaseApproveDisplayVideo360AdvertiserLinkProposalRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseApproveDisplayVideo360AdvertiserLinkProposalResponse(): ApproveDisplayVideo360AdvertiserLinkProposalResponse {
  return { displayVideo360AdvertiserLink: undefined };
}

export const ApproveDisplayVideo360AdvertiserLinkProposalResponse: MessageFns<
  ApproveDisplayVideo360AdvertiserLinkProposalResponse
> = {
  encode(
    message: ApproveDisplayVideo360AdvertiserLinkProposalResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.displayVideo360AdvertiserLink !== undefined) {
      DisplayVideo360AdvertiserLink.encode(message.displayVideo360AdvertiserLink, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ApproveDisplayVideo360AdvertiserLinkProposalResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseApproveDisplayVideo360AdvertiserLinkProposalResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.displayVideo360AdvertiserLink = DisplayVideo360AdvertiserLink.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ApproveDisplayVideo360AdvertiserLinkProposalResponse {
    return {
      displayVideo360AdvertiserLink: isSet(object.displayVideo360AdvertiserLink)
        ? DisplayVideo360AdvertiserLink.fromJSON(object.displayVideo360AdvertiserLink)
        : undefined,
    };
  },

  toJSON(message: ApproveDisplayVideo360AdvertiserLinkProposalResponse): unknown {
    const obj: any = {};
    if (message.displayVideo360AdvertiserLink !== undefined) {
      obj.displayVideo360AdvertiserLink = DisplayVideo360AdvertiserLink.toJSON(message.displayVideo360AdvertiserLink);
    }
    return obj;
  },

  create(
    base?: DeepPartial<ApproveDisplayVideo360AdvertiserLinkProposalResponse>,
  ): ApproveDisplayVideo360AdvertiserLinkProposalResponse {
    return ApproveDisplayVideo360AdvertiserLinkProposalResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ApproveDisplayVideo360AdvertiserLinkProposalResponse>,
  ): ApproveDisplayVideo360AdvertiserLinkProposalResponse {
    const message = createBaseApproveDisplayVideo360AdvertiserLinkProposalResponse();
    message.displayVideo360AdvertiserLink =
      (object.displayVideo360AdvertiserLink !== undefined && object.displayVideo360AdvertiserLink !== null)
        ? DisplayVideo360AdvertiserLink.fromPartial(object.displayVideo360AdvertiserLink)
        : undefined;
    return message;
  },
};

function createBaseCancelDisplayVideo360AdvertiserLinkProposalRequest(): CancelDisplayVideo360AdvertiserLinkProposalRequest {
  return { name: "" };
}

export const CancelDisplayVideo360AdvertiserLinkProposalRequest: MessageFns<
  CancelDisplayVideo360AdvertiserLinkProposalRequest
> = {
  encode(
    message: CancelDisplayVideo360AdvertiserLinkProposalRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CancelDisplayVideo360AdvertiserLinkProposalRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCancelDisplayVideo360AdvertiserLinkProposalRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CancelDisplayVideo360AdvertiserLinkProposalRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: CancelDisplayVideo360AdvertiserLinkProposalRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(
    base?: DeepPartial<CancelDisplayVideo360AdvertiserLinkProposalRequest>,
  ): CancelDisplayVideo360AdvertiserLinkProposalRequest {
    return CancelDisplayVideo360AdvertiserLinkProposalRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<CancelDisplayVideo360AdvertiserLinkProposalRequest>,
  ): CancelDisplayVideo360AdvertiserLinkProposalRequest {
    const message = createBaseCancelDisplayVideo360AdvertiserLinkProposalRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseGetSearchAds360LinkRequest(): GetSearchAds360LinkRequest {
  return { name: "" };
}

export const GetSearchAds360LinkRequest: MessageFns<GetSearchAds360LinkRequest> = {
  encode(message: GetSearchAds360LinkRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetSearchAds360LinkRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSearchAds360LinkRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetSearchAds360LinkRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetSearchAds360LinkRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetSearchAds360LinkRequest>): GetSearchAds360LinkRequest {
    return GetSearchAds360LinkRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetSearchAds360LinkRequest>): GetSearchAds360LinkRequest {
    const message = createBaseGetSearchAds360LinkRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListSearchAds360LinksRequest(): ListSearchAds360LinksRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListSearchAds360LinksRequest: MessageFns<ListSearchAds360LinksRequest> = {
  encode(message: ListSearchAds360LinksRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListSearchAds360LinksRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSearchAds360LinksRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListSearchAds360LinksRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListSearchAds360LinksRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListSearchAds360LinksRequest>): ListSearchAds360LinksRequest {
    return ListSearchAds360LinksRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListSearchAds360LinksRequest>): ListSearchAds360LinksRequest {
    const message = createBaseListSearchAds360LinksRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListSearchAds360LinksResponse(): ListSearchAds360LinksResponse {
  return { searchAds360Links: [], nextPageToken: "" };
}

export const ListSearchAds360LinksResponse: MessageFns<ListSearchAds360LinksResponse> = {
  encode(message: ListSearchAds360LinksResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.searchAds360Links) {
      SearchAds360Link.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListSearchAds360LinksResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSearchAds360LinksResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.searchAds360Links.push(SearchAds360Link.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListSearchAds360LinksResponse {
    return {
      searchAds360Links: globalThis.Array.isArray(object?.searchAds360Links)
        ? object.searchAds360Links.map((e: any) => SearchAds360Link.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListSearchAds360LinksResponse): unknown {
    const obj: any = {};
    if (message.searchAds360Links?.length) {
      obj.searchAds360Links = message.searchAds360Links.map((e) => SearchAds360Link.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListSearchAds360LinksResponse>): ListSearchAds360LinksResponse {
    return ListSearchAds360LinksResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListSearchAds360LinksResponse>): ListSearchAds360LinksResponse {
    const message = createBaseListSearchAds360LinksResponse();
    message.searchAds360Links = object.searchAds360Links?.map((e) => SearchAds360Link.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseCreateSearchAds360LinkRequest(): CreateSearchAds360LinkRequest {
  return { parent: "", searchAds360Link: undefined };
}

export const CreateSearchAds360LinkRequest: MessageFns<CreateSearchAds360LinkRequest> = {
  encode(message: CreateSearchAds360LinkRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.searchAds360Link !== undefined) {
      SearchAds360Link.encode(message.searchAds360Link, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateSearchAds360LinkRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateSearchAds360LinkRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.searchAds360Link = SearchAds360Link.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateSearchAds360LinkRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      searchAds360Link: isSet(object.searchAds360Link) ? SearchAds360Link.fromJSON(object.searchAds360Link) : undefined,
    };
  },

  toJSON(message: CreateSearchAds360LinkRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.searchAds360Link !== undefined) {
      obj.searchAds360Link = SearchAds360Link.toJSON(message.searchAds360Link);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateSearchAds360LinkRequest>): CreateSearchAds360LinkRequest {
    return CreateSearchAds360LinkRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateSearchAds360LinkRequest>): CreateSearchAds360LinkRequest {
    const message = createBaseCreateSearchAds360LinkRequest();
    message.parent = object.parent ?? "";
    message.searchAds360Link = (object.searchAds360Link !== undefined && object.searchAds360Link !== null)
      ? SearchAds360Link.fromPartial(object.searchAds360Link)
      : undefined;
    return message;
  },
};

function createBaseDeleteSearchAds360LinkRequest(): DeleteSearchAds360LinkRequest {
  return { name: "" };
}

export const DeleteSearchAds360LinkRequest: MessageFns<DeleteSearchAds360LinkRequest> = {
  encode(message: DeleteSearchAds360LinkRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteSearchAds360LinkRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteSearchAds360LinkRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteSearchAds360LinkRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteSearchAds360LinkRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteSearchAds360LinkRequest>): DeleteSearchAds360LinkRequest {
    return DeleteSearchAds360LinkRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteSearchAds360LinkRequest>): DeleteSearchAds360LinkRequest {
    const message = createBaseDeleteSearchAds360LinkRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpdateSearchAds360LinkRequest(): UpdateSearchAds360LinkRequest {
  return { searchAds360Link: undefined, updateMask: undefined };
}

export const UpdateSearchAds360LinkRequest: MessageFns<UpdateSearchAds360LinkRequest> = {
  encode(message: UpdateSearchAds360LinkRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.searchAds360Link !== undefined) {
      SearchAds360Link.encode(message.searchAds360Link, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateSearchAds360LinkRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateSearchAds360LinkRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.searchAds360Link = SearchAds360Link.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateSearchAds360LinkRequest {
    return {
      searchAds360Link: isSet(object.searchAds360Link) ? SearchAds360Link.fromJSON(object.searchAds360Link) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateSearchAds360LinkRequest): unknown {
    const obj: any = {};
    if (message.searchAds360Link !== undefined) {
      obj.searchAds360Link = SearchAds360Link.toJSON(message.searchAds360Link);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateSearchAds360LinkRequest>): UpdateSearchAds360LinkRequest {
    return UpdateSearchAds360LinkRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateSearchAds360LinkRequest>): UpdateSearchAds360LinkRequest {
    const message = createBaseUpdateSearchAds360LinkRequest();
    message.searchAds360Link = (object.searchAds360Link !== undefined && object.searchAds360Link !== null)
      ? SearchAds360Link.fromPartial(object.searchAds360Link)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseCreateCustomDimensionRequest(): CreateCustomDimensionRequest {
  return { parent: "", customDimension: undefined };
}

export const CreateCustomDimensionRequest: MessageFns<CreateCustomDimensionRequest> = {
  encode(message: CreateCustomDimensionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.customDimension !== undefined) {
      CustomDimension.encode(message.customDimension, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateCustomDimensionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateCustomDimensionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.customDimension = CustomDimension.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateCustomDimensionRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      customDimension: isSet(object.customDimension) ? CustomDimension.fromJSON(object.customDimension) : undefined,
    };
  },

  toJSON(message: CreateCustomDimensionRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.customDimension !== undefined) {
      obj.customDimension = CustomDimension.toJSON(message.customDimension);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateCustomDimensionRequest>): CreateCustomDimensionRequest {
    return CreateCustomDimensionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateCustomDimensionRequest>): CreateCustomDimensionRequest {
    const message = createBaseCreateCustomDimensionRequest();
    message.parent = object.parent ?? "";
    message.customDimension = (object.customDimension !== undefined && object.customDimension !== null)
      ? CustomDimension.fromPartial(object.customDimension)
      : undefined;
    return message;
  },
};

function createBaseUpdateCustomDimensionRequest(): UpdateCustomDimensionRequest {
  return { customDimension: undefined, updateMask: undefined };
}

export const UpdateCustomDimensionRequest: MessageFns<UpdateCustomDimensionRequest> = {
  encode(message: UpdateCustomDimensionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.customDimension !== undefined) {
      CustomDimension.encode(message.customDimension, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateCustomDimensionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateCustomDimensionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customDimension = CustomDimension.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateCustomDimensionRequest {
    return {
      customDimension: isSet(object.customDimension) ? CustomDimension.fromJSON(object.customDimension) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateCustomDimensionRequest): unknown {
    const obj: any = {};
    if (message.customDimension !== undefined) {
      obj.customDimension = CustomDimension.toJSON(message.customDimension);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateCustomDimensionRequest>): UpdateCustomDimensionRequest {
    return UpdateCustomDimensionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateCustomDimensionRequest>): UpdateCustomDimensionRequest {
    const message = createBaseUpdateCustomDimensionRequest();
    message.customDimension = (object.customDimension !== undefined && object.customDimension !== null)
      ? CustomDimension.fromPartial(object.customDimension)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseListCustomDimensionsRequest(): ListCustomDimensionsRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListCustomDimensionsRequest: MessageFns<ListCustomDimensionsRequest> = {
  encode(message: ListCustomDimensionsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListCustomDimensionsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListCustomDimensionsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListCustomDimensionsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListCustomDimensionsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListCustomDimensionsRequest>): ListCustomDimensionsRequest {
    return ListCustomDimensionsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListCustomDimensionsRequest>): ListCustomDimensionsRequest {
    const message = createBaseListCustomDimensionsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListCustomDimensionsResponse(): ListCustomDimensionsResponse {
  return { customDimensions: [], nextPageToken: "" };
}

export const ListCustomDimensionsResponse: MessageFns<ListCustomDimensionsResponse> = {
  encode(message: ListCustomDimensionsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.customDimensions) {
      CustomDimension.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListCustomDimensionsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListCustomDimensionsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customDimensions.push(CustomDimension.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListCustomDimensionsResponse {
    return {
      customDimensions: globalThis.Array.isArray(object?.customDimensions)
        ? object.customDimensions.map((e: any) => CustomDimension.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListCustomDimensionsResponse): unknown {
    const obj: any = {};
    if (message.customDimensions?.length) {
      obj.customDimensions = message.customDimensions.map((e) => CustomDimension.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListCustomDimensionsResponse>): ListCustomDimensionsResponse {
    return ListCustomDimensionsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListCustomDimensionsResponse>): ListCustomDimensionsResponse {
    const message = createBaseListCustomDimensionsResponse();
    message.customDimensions = object.customDimensions?.map((e) => CustomDimension.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseArchiveCustomDimensionRequest(): ArchiveCustomDimensionRequest {
  return { name: "" };
}

export const ArchiveCustomDimensionRequest: MessageFns<ArchiveCustomDimensionRequest> = {
  encode(message: ArchiveCustomDimensionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ArchiveCustomDimensionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseArchiveCustomDimensionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ArchiveCustomDimensionRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: ArchiveCustomDimensionRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<ArchiveCustomDimensionRequest>): ArchiveCustomDimensionRequest {
    return ArchiveCustomDimensionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ArchiveCustomDimensionRequest>): ArchiveCustomDimensionRequest {
    const message = createBaseArchiveCustomDimensionRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseGetCustomDimensionRequest(): GetCustomDimensionRequest {
  return { name: "" };
}

export const GetCustomDimensionRequest: MessageFns<GetCustomDimensionRequest> = {
  encode(message: GetCustomDimensionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCustomDimensionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCustomDimensionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCustomDimensionRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetCustomDimensionRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetCustomDimensionRequest>): GetCustomDimensionRequest {
    return GetCustomDimensionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetCustomDimensionRequest>): GetCustomDimensionRequest {
    const message = createBaseGetCustomDimensionRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateCustomMetricRequest(): CreateCustomMetricRequest {
  return { parent: "", customMetric: undefined };
}

export const CreateCustomMetricRequest: MessageFns<CreateCustomMetricRequest> = {
  encode(message: CreateCustomMetricRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.customMetric !== undefined) {
      CustomMetric.encode(message.customMetric, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateCustomMetricRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateCustomMetricRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.customMetric = CustomMetric.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateCustomMetricRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      customMetric: isSet(object.customMetric) ? CustomMetric.fromJSON(object.customMetric) : undefined,
    };
  },

  toJSON(message: CreateCustomMetricRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.customMetric !== undefined) {
      obj.customMetric = CustomMetric.toJSON(message.customMetric);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateCustomMetricRequest>): CreateCustomMetricRequest {
    return CreateCustomMetricRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateCustomMetricRequest>): CreateCustomMetricRequest {
    const message = createBaseCreateCustomMetricRequest();
    message.parent = object.parent ?? "";
    message.customMetric = (object.customMetric !== undefined && object.customMetric !== null)
      ? CustomMetric.fromPartial(object.customMetric)
      : undefined;
    return message;
  },
};

function createBaseUpdateCustomMetricRequest(): UpdateCustomMetricRequest {
  return { customMetric: undefined, updateMask: undefined };
}

export const UpdateCustomMetricRequest: MessageFns<UpdateCustomMetricRequest> = {
  encode(message: UpdateCustomMetricRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.customMetric !== undefined) {
      CustomMetric.encode(message.customMetric, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateCustomMetricRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateCustomMetricRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customMetric = CustomMetric.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateCustomMetricRequest {
    return {
      customMetric: isSet(object.customMetric) ? CustomMetric.fromJSON(object.customMetric) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateCustomMetricRequest): unknown {
    const obj: any = {};
    if (message.customMetric !== undefined) {
      obj.customMetric = CustomMetric.toJSON(message.customMetric);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateCustomMetricRequest>): UpdateCustomMetricRequest {
    return UpdateCustomMetricRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateCustomMetricRequest>): UpdateCustomMetricRequest {
    const message = createBaseUpdateCustomMetricRequest();
    message.customMetric = (object.customMetric !== undefined && object.customMetric !== null)
      ? CustomMetric.fromPartial(object.customMetric)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseListCustomMetricsRequest(): ListCustomMetricsRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListCustomMetricsRequest: MessageFns<ListCustomMetricsRequest> = {
  encode(message: ListCustomMetricsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListCustomMetricsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListCustomMetricsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListCustomMetricsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListCustomMetricsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListCustomMetricsRequest>): ListCustomMetricsRequest {
    return ListCustomMetricsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListCustomMetricsRequest>): ListCustomMetricsRequest {
    const message = createBaseListCustomMetricsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListCustomMetricsResponse(): ListCustomMetricsResponse {
  return { customMetrics: [], nextPageToken: "" };
}

export const ListCustomMetricsResponse: MessageFns<ListCustomMetricsResponse> = {
  encode(message: ListCustomMetricsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.customMetrics) {
      CustomMetric.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListCustomMetricsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListCustomMetricsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customMetrics.push(CustomMetric.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListCustomMetricsResponse {
    return {
      customMetrics: globalThis.Array.isArray(object?.customMetrics)
        ? object.customMetrics.map((e: any) => CustomMetric.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListCustomMetricsResponse): unknown {
    const obj: any = {};
    if (message.customMetrics?.length) {
      obj.customMetrics = message.customMetrics.map((e) => CustomMetric.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListCustomMetricsResponse>): ListCustomMetricsResponse {
    return ListCustomMetricsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListCustomMetricsResponse>): ListCustomMetricsResponse {
    const message = createBaseListCustomMetricsResponse();
    message.customMetrics = object.customMetrics?.map((e) => CustomMetric.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseArchiveCustomMetricRequest(): ArchiveCustomMetricRequest {
  return { name: "" };
}

export const ArchiveCustomMetricRequest: MessageFns<ArchiveCustomMetricRequest> = {
  encode(message: ArchiveCustomMetricRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ArchiveCustomMetricRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseArchiveCustomMetricRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ArchiveCustomMetricRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: ArchiveCustomMetricRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<ArchiveCustomMetricRequest>): ArchiveCustomMetricRequest {
    return ArchiveCustomMetricRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ArchiveCustomMetricRequest>): ArchiveCustomMetricRequest {
    const message = createBaseArchiveCustomMetricRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseGetCustomMetricRequest(): GetCustomMetricRequest {
  return { name: "" };
}

export const GetCustomMetricRequest: MessageFns<GetCustomMetricRequest> = {
  encode(message: GetCustomMetricRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCustomMetricRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCustomMetricRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCustomMetricRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetCustomMetricRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetCustomMetricRequest>): GetCustomMetricRequest {
    return GetCustomMetricRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetCustomMetricRequest>): GetCustomMetricRequest {
    const message = createBaseGetCustomMetricRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateCalculatedMetricRequest(): CreateCalculatedMetricRequest {
  return { parent: "", calculatedMetricId: "", calculatedMetric: undefined };
}

export const CreateCalculatedMetricRequest: MessageFns<CreateCalculatedMetricRequest> = {
  encode(message: CreateCalculatedMetricRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.calculatedMetricId !== "") {
      writer.uint32(18).string(message.calculatedMetricId);
    }
    if (message.calculatedMetric !== undefined) {
      CalculatedMetric.encode(message.calculatedMetric, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateCalculatedMetricRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateCalculatedMetricRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.calculatedMetricId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.calculatedMetric = CalculatedMetric.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateCalculatedMetricRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      calculatedMetricId: isSet(object.calculatedMetricId) ? globalThis.String(object.calculatedMetricId) : "",
      calculatedMetric: isSet(object.calculatedMetric) ? CalculatedMetric.fromJSON(object.calculatedMetric) : undefined,
    };
  },

  toJSON(message: CreateCalculatedMetricRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.calculatedMetricId !== "") {
      obj.calculatedMetricId = message.calculatedMetricId;
    }
    if (message.calculatedMetric !== undefined) {
      obj.calculatedMetric = CalculatedMetric.toJSON(message.calculatedMetric);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateCalculatedMetricRequest>): CreateCalculatedMetricRequest {
    return CreateCalculatedMetricRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateCalculatedMetricRequest>): CreateCalculatedMetricRequest {
    const message = createBaseCreateCalculatedMetricRequest();
    message.parent = object.parent ?? "";
    message.calculatedMetricId = object.calculatedMetricId ?? "";
    message.calculatedMetric = (object.calculatedMetric !== undefined && object.calculatedMetric !== null)
      ? CalculatedMetric.fromPartial(object.calculatedMetric)
      : undefined;
    return message;
  },
};

function createBaseUpdateCalculatedMetricRequest(): UpdateCalculatedMetricRequest {
  return { calculatedMetric: undefined, updateMask: undefined };
}

export const UpdateCalculatedMetricRequest: MessageFns<UpdateCalculatedMetricRequest> = {
  encode(message: UpdateCalculatedMetricRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.calculatedMetric !== undefined) {
      CalculatedMetric.encode(message.calculatedMetric, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateCalculatedMetricRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateCalculatedMetricRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.calculatedMetric = CalculatedMetric.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateCalculatedMetricRequest {
    return {
      calculatedMetric: isSet(object.calculatedMetric) ? CalculatedMetric.fromJSON(object.calculatedMetric) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateCalculatedMetricRequest): unknown {
    const obj: any = {};
    if (message.calculatedMetric !== undefined) {
      obj.calculatedMetric = CalculatedMetric.toJSON(message.calculatedMetric);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateCalculatedMetricRequest>): UpdateCalculatedMetricRequest {
    return UpdateCalculatedMetricRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateCalculatedMetricRequest>): UpdateCalculatedMetricRequest {
    const message = createBaseUpdateCalculatedMetricRequest();
    message.calculatedMetric = (object.calculatedMetric !== undefined && object.calculatedMetric !== null)
      ? CalculatedMetric.fromPartial(object.calculatedMetric)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseDeleteCalculatedMetricRequest(): DeleteCalculatedMetricRequest {
  return { name: "" };
}

export const DeleteCalculatedMetricRequest: MessageFns<DeleteCalculatedMetricRequest> = {
  encode(message: DeleteCalculatedMetricRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteCalculatedMetricRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteCalculatedMetricRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteCalculatedMetricRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteCalculatedMetricRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteCalculatedMetricRequest>): DeleteCalculatedMetricRequest {
    return DeleteCalculatedMetricRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteCalculatedMetricRequest>): DeleteCalculatedMetricRequest {
    const message = createBaseDeleteCalculatedMetricRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListCalculatedMetricsRequest(): ListCalculatedMetricsRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListCalculatedMetricsRequest: MessageFns<ListCalculatedMetricsRequest> = {
  encode(message: ListCalculatedMetricsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListCalculatedMetricsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListCalculatedMetricsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListCalculatedMetricsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListCalculatedMetricsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListCalculatedMetricsRequest>): ListCalculatedMetricsRequest {
    return ListCalculatedMetricsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListCalculatedMetricsRequest>): ListCalculatedMetricsRequest {
    const message = createBaseListCalculatedMetricsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListCalculatedMetricsResponse(): ListCalculatedMetricsResponse {
  return { calculatedMetrics: [], nextPageToken: "" };
}

export const ListCalculatedMetricsResponse: MessageFns<ListCalculatedMetricsResponse> = {
  encode(message: ListCalculatedMetricsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.calculatedMetrics) {
      CalculatedMetric.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListCalculatedMetricsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListCalculatedMetricsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.calculatedMetrics.push(CalculatedMetric.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListCalculatedMetricsResponse {
    return {
      calculatedMetrics: globalThis.Array.isArray(object?.calculatedMetrics)
        ? object.calculatedMetrics.map((e: any) => CalculatedMetric.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListCalculatedMetricsResponse): unknown {
    const obj: any = {};
    if (message.calculatedMetrics?.length) {
      obj.calculatedMetrics = message.calculatedMetrics.map((e) => CalculatedMetric.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListCalculatedMetricsResponse>): ListCalculatedMetricsResponse {
    return ListCalculatedMetricsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListCalculatedMetricsResponse>): ListCalculatedMetricsResponse {
    const message = createBaseListCalculatedMetricsResponse();
    message.calculatedMetrics = object.calculatedMetrics?.map((e) => CalculatedMetric.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetCalculatedMetricRequest(): GetCalculatedMetricRequest {
  return { name: "" };
}

export const GetCalculatedMetricRequest: MessageFns<GetCalculatedMetricRequest> = {
  encode(message: GetCalculatedMetricRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCalculatedMetricRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCalculatedMetricRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCalculatedMetricRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetCalculatedMetricRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetCalculatedMetricRequest>): GetCalculatedMetricRequest {
    return GetCalculatedMetricRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetCalculatedMetricRequest>): GetCalculatedMetricRequest {
    const message = createBaseGetCalculatedMetricRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseGetDataRetentionSettingsRequest(): GetDataRetentionSettingsRequest {
  return { name: "" };
}

export const GetDataRetentionSettingsRequest: MessageFns<GetDataRetentionSettingsRequest> = {
  encode(message: GetDataRetentionSettingsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetDataRetentionSettingsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDataRetentionSettingsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDataRetentionSettingsRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetDataRetentionSettingsRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetDataRetentionSettingsRequest>): GetDataRetentionSettingsRequest {
    return GetDataRetentionSettingsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetDataRetentionSettingsRequest>): GetDataRetentionSettingsRequest {
    const message = createBaseGetDataRetentionSettingsRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpdateDataRetentionSettingsRequest(): UpdateDataRetentionSettingsRequest {
  return { dataRetentionSettings: undefined, updateMask: undefined };
}

export const UpdateDataRetentionSettingsRequest: MessageFns<UpdateDataRetentionSettingsRequest> = {
  encode(message: UpdateDataRetentionSettingsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.dataRetentionSettings !== undefined) {
      DataRetentionSettings.encode(message.dataRetentionSettings, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateDataRetentionSettingsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateDataRetentionSettingsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.dataRetentionSettings = DataRetentionSettings.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateDataRetentionSettingsRequest {
    return {
      dataRetentionSettings: isSet(object.dataRetentionSettings)
        ? DataRetentionSettings.fromJSON(object.dataRetentionSettings)
        : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateDataRetentionSettingsRequest): unknown {
    const obj: any = {};
    if (message.dataRetentionSettings !== undefined) {
      obj.dataRetentionSettings = DataRetentionSettings.toJSON(message.dataRetentionSettings);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateDataRetentionSettingsRequest>): UpdateDataRetentionSettingsRequest {
    return UpdateDataRetentionSettingsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateDataRetentionSettingsRequest>): UpdateDataRetentionSettingsRequest {
    const message = createBaseUpdateDataRetentionSettingsRequest();
    message.dataRetentionSettings =
      (object.dataRetentionSettings !== undefined && object.dataRetentionSettings !== null)
        ? DataRetentionSettings.fromPartial(object.dataRetentionSettings)
        : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseCreateDataStreamRequest(): CreateDataStreamRequest {
  return { parent: "", dataStream: undefined };
}

export const CreateDataStreamRequest: MessageFns<CreateDataStreamRequest> = {
  encode(message: CreateDataStreamRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.dataStream !== undefined) {
      DataStream.encode(message.dataStream, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateDataStreamRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateDataStreamRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.dataStream = DataStream.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateDataStreamRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      dataStream: isSet(object.dataStream) ? DataStream.fromJSON(object.dataStream) : undefined,
    };
  },

  toJSON(message: CreateDataStreamRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.dataStream !== undefined) {
      obj.dataStream = DataStream.toJSON(message.dataStream);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateDataStreamRequest>): CreateDataStreamRequest {
    return CreateDataStreamRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateDataStreamRequest>): CreateDataStreamRequest {
    const message = createBaseCreateDataStreamRequest();
    message.parent = object.parent ?? "";
    message.dataStream = (object.dataStream !== undefined && object.dataStream !== null)
      ? DataStream.fromPartial(object.dataStream)
      : undefined;
    return message;
  },
};

function createBaseDeleteDataStreamRequest(): DeleteDataStreamRequest {
  return { name: "" };
}

export const DeleteDataStreamRequest: MessageFns<DeleteDataStreamRequest> = {
  encode(message: DeleteDataStreamRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteDataStreamRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteDataStreamRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteDataStreamRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteDataStreamRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteDataStreamRequest>): DeleteDataStreamRequest {
    return DeleteDataStreamRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteDataStreamRequest>): DeleteDataStreamRequest {
    const message = createBaseDeleteDataStreamRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpdateDataStreamRequest(): UpdateDataStreamRequest {
  return { dataStream: undefined, updateMask: undefined };
}

export const UpdateDataStreamRequest: MessageFns<UpdateDataStreamRequest> = {
  encode(message: UpdateDataStreamRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.dataStream !== undefined) {
      DataStream.encode(message.dataStream, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateDataStreamRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateDataStreamRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.dataStream = DataStream.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateDataStreamRequest {
    return {
      dataStream: isSet(object.dataStream) ? DataStream.fromJSON(object.dataStream) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateDataStreamRequest): unknown {
    const obj: any = {};
    if (message.dataStream !== undefined) {
      obj.dataStream = DataStream.toJSON(message.dataStream);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateDataStreamRequest>): UpdateDataStreamRequest {
    return UpdateDataStreamRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateDataStreamRequest>): UpdateDataStreamRequest {
    const message = createBaseUpdateDataStreamRequest();
    message.dataStream = (object.dataStream !== undefined && object.dataStream !== null)
      ? DataStream.fromPartial(object.dataStream)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseListDataStreamsRequest(): ListDataStreamsRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListDataStreamsRequest: MessageFns<ListDataStreamsRequest> = {
  encode(message: ListDataStreamsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListDataStreamsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListDataStreamsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListDataStreamsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListDataStreamsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListDataStreamsRequest>): ListDataStreamsRequest {
    return ListDataStreamsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListDataStreamsRequest>): ListDataStreamsRequest {
    const message = createBaseListDataStreamsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListDataStreamsResponse(): ListDataStreamsResponse {
  return { dataStreams: [], nextPageToken: "" };
}

export const ListDataStreamsResponse: MessageFns<ListDataStreamsResponse> = {
  encode(message: ListDataStreamsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.dataStreams) {
      DataStream.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListDataStreamsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListDataStreamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.dataStreams.push(DataStream.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListDataStreamsResponse {
    return {
      dataStreams: globalThis.Array.isArray(object?.dataStreams)
        ? object.dataStreams.map((e: any) => DataStream.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListDataStreamsResponse): unknown {
    const obj: any = {};
    if (message.dataStreams?.length) {
      obj.dataStreams = message.dataStreams.map((e) => DataStream.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListDataStreamsResponse>): ListDataStreamsResponse {
    return ListDataStreamsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListDataStreamsResponse>): ListDataStreamsResponse {
    const message = createBaseListDataStreamsResponse();
    message.dataStreams = object.dataStreams?.map((e) => DataStream.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetDataStreamRequest(): GetDataStreamRequest {
  return { name: "" };
}

export const GetDataStreamRequest: MessageFns<GetDataStreamRequest> = {
  encode(message: GetDataStreamRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetDataStreamRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDataStreamRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDataStreamRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetDataStreamRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetDataStreamRequest>): GetDataStreamRequest {
    return GetDataStreamRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetDataStreamRequest>): GetDataStreamRequest {
    const message = createBaseGetDataStreamRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseGetAudienceRequest(): GetAudienceRequest {
  return { name: "" };
}

export const GetAudienceRequest: MessageFns<GetAudienceRequest> = {
  encode(message: GetAudienceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAudienceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAudienceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAudienceRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetAudienceRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetAudienceRequest>): GetAudienceRequest {
    return GetAudienceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetAudienceRequest>): GetAudienceRequest {
    const message = createBaseGetAudienceRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListAudiencesRequest(): ListAudiencesRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListAudiencesRequest: MessageFns<ListAudiencesRequest> = {
  encode(message: ListAudiencesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAudiencesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAudiencesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAudiencesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListAudiencesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListAudiencesRequest>): ListAudiencesRequest {
    return ListAudiencesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAudiencesRequest>): ListAudiencesRequest {
    const message = createBaseListAudiencesRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListAudiencesResponse(): ListAudiencesResponse {
  return { audiences: [], nextPageToken: "" };
}

export const ListAudiencesResponse: MessageFns<ListAudiencesResponse> = {
  encode(message: ListAudiencesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.audiences) {
      Audience.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAudiencesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAudiencesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.audiences.push(Audience.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAudiencesResponse {
    return {
      audiences: globalThis.Array.isArray(object?.audiences)
        ? object.audiences.map((e: any) => Audience.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListAudiencesResponse): unknown {
    const obj: any = {};
    if (message.audiences?.length) {
      obj.audiences = message.audiences.map((e) => Audience.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListAudiencesResponse>): ListAudiencesResponse {
    return ListAudiencesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAudiencesResponse>): ListAudiencesResponse {
    const message = createBaseListAudiencesResponse();
    message.audiences = object.audiences?.map((e) => Audience.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseCreateAudienceRequest(): CreateAudienceRequest {
  return { parent: "", audience: undefined };
}

export const CreateAudienceRequest: MessageFns<CreateAudienceRequest> = {
  encode(message: CreateAudienceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.audience !== undefined) {
      Audience.encode(message.audience, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateAudienceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateAudienceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.audience = Audience.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateAudienceRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      audience: isSet(object.audience) ? Audience.fromJSON(object.audience) : undefined,
    };
  },

  toJSON(message: CreateAudienceRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.audience !== undefined) {
      obj.audience = Audience.toJSON(message.audience);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateAudienceRequest>): CreateAudienceRequest {
    return CreateAudienceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateAudienceRequest>): CreateAudienceRequest {
    const message = createBaseCreateAudienceRequest();
    message.parent = object.parent ?? "";
    message.audience = (object.audience !== undefined && object.audience !== null)
      ? Audience.fromPartial(object.audience)
      : undefined;
    return message;
  },
};

function createBaseUpdateAudienceRequest(): UpdateAudienceRequest {
  return { audience: undefined, updateMask: undefined };
}

export const UpdateAudienceRequest: MessageFns<UpdateAudienceRequest> = {
  encode(message: UpdateAudienceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.audience !== undefined) {
      Audience.encode(message.audience, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateAudienceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateAudienceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.audience = Audience.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateAudienceRequest {
    return {
      audience: isSet(object.audience) ? Audience.fromJSON(object.audience) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateAudienceRequest): unknown {
    const obj: any = {};
    if (message.audience !== undefined) {
      obj.audience = Audience.toJSON(message.audience);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateAudienceRequest>): UpdateAudienceRequest {
    return UpdateAudienceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateAudienceRequest>): UpdateAudienceRequest {
    const message = createBaseUpdateAudienceRequest();
    message.audience = (object.audience !== undefined && object.audience !== null)
      ? Audience.fromPartial(object.audience)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseArchiveAudienceRequest(): ArchiveAudienceRequest {
  return { name: "" };
}

export const ArchiveAudienceRequest: MessageFns<ArchiveAudienceRequest> = {
  encode(message: ArchiveAudienceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ArchiveAudienceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseArchiveAudienceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ArchiveAudienceRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: ArchiveAudienceRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<ArchiveAudienceRequest>): ArchiveAudienceRequest {
    return ArchiveAudienceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ArchiveAudienceRequest>): ArchiveAudienceRequest {
    const message = createBaseArchiveAudienceRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseGetAttributionSettingsRequest(): GetAttributionSettingsRequest {
  return { name: "" };
}

export const GetAttributionSettingsRequest: MessageFns<GetAttributionSettingsRequest> = {
  encode(message: GetAttributionSettingsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAttributionSettingsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAttributionSettingsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAttributionSettingsRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetAttributionSettingsRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetAttributionSettingsRequest>): GetAttributionSettingsRequest {
    return GetAttributionSettingsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetAttributionSettingsRequest>): GetAttributionSettingsRequest {
    const message = createBaseGetAttributionSettingsRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpdateAttributionSettingsRequest(): UpdateAttributionSettingsRequest {
  return { attributionSettings: undefined, updateMask: undefined };
}

export const UpdateAttributionSettingsRequest: MessageFns<UpdateAttributionSettingsRequest> = {
  encode(message: UpdateAttributionSettingsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.attributionSettings !== undefined) {
      AttributionSettings.encode(message.attributionSettings, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateAttributionSettingsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateAttributionSettingsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.attributionSettings = AttributionSettings.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateAttributionSettingsRequest {
    return {
      attributionSettings: isSet(object.attributionSettings)
        ? AttributionSettings.fromJSON(object.attributionSettings)
        : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateAttributionSettingsRequest): unknown {
    const obj: any = {};
    if (message.attributionSettings !== undefined) {
      obj.attributionSettings = AttributionSettings.toJSON(message.attributionSettings);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateAttributionSettingsRequest>): UpdateAttributionSettingsRequest {
    return UpdateAttributionSettingsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateAttributionSettingsRequest>): UpdateAttributionSettingsRequest {
    const message = createBaseUpdateAttributionSettingsRequest();
    message.attributionSettings = (object.attributionSettings !== undefined && object.attributionSettings !== null)
      ? AttributionSettings.fromPartial(object.attributionSettings)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseGetAccessBindingRequest(): GetAccessBindingRequest {
  return { name: "" };
}

export const GetAccessBindingRequest: MessageFns<GetAccessBindingRequest> = {
  encode(message: GetAccessBindingRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAccessBindingRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAccessBindingRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAccessBindingRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetAccessBindingRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetAccessBindingRequest>): GetAccessBindingRequest {
    return GetAccessBindingRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetAccessBindingRequest>): GetAccessBindingRequest {
    const message = createBaseGetAccessBindingRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseBatchGetAccessBindingsRequest(): BatchGetAccessBindingsRequest {
  return { parent: "", names: [] };
}

export const BatchGetAccessBindingsRequest: MessageFns<BatchGetAccessBindingsRequest> = {
  encode(message: BatchGetAccessBindingsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    for (const v of message.names) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BatchGetAccessBindingsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBatchGetAccessBindingsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.names.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BatchGetAccessBindingsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      names: globalThis.Array.isArray(object?.names) ? object.names.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: BatchGetAccessBindingsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.names?.length) {
      obj.names = message.names;
    }
    return obj;
  },

  create(base?: DeepPartial<BatchGetAccessBindingsRequest>): BatchGetAccessBindingsRequest {
    return BatchGetAccessBindingsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BatchGetAccessBindingsRequest>): BatchGetAccessBindingsRequest {
    const message = createBaseBatchGetAccessBindingsRequest();
    message.parent = object.parent ?? "";
    message.names = object.names?.map((e) => e) || [];
    return message;
  },
};

function createBaseBatchGetAccessBindingsResponse(): BatchGetAccessBindingsResponse {
  return { accessBindings: [] };
}

export const BatchGetAccessBindingsResponse: MessageFns<BatchGetAccessBindingsResponse> = {
  encode(message: BatchGetAccessBindingsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.accessBindings) {
      AccessBinding.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BatchGetAccessBindingsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBatchGetAccessBindingsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.accessBindings.push(AccessBinding.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BatchGetAccessBindingsResponse {
    return {
      accessBindings: globalThis.Array.isArray(object?.accessBindings)
        ? object.accessBindings.map((e: any) => AccessBinding.fromJSON(e))
        : [],
    };
  },

  toJSON(message: BatchGetAccessBindingsResponse): unknown {
    const obj: any = {};
    if (message.accessBindings?.length) {
      obj.accessBindings = message.accessBindings.map((e) => AccessBinding.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<BatchGetAccessBindingsResponse>): BatchGetAccessBindingsResponse {
    return BatchGetAccessBindingsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BatchGetAccessBindingsResponse>): BatchGetAccessBindingsResponse {
    const message = createBaseBatchGetAccessBindingsResponse();
    message.accessBindings = object.accessBindings?.map((e) => AccessBinding.fromPartial(e)) || [];
    return message;
  },
};

function createBaseListAccessBindingsRequest(): ListAccessBindingsRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListAccessBindingsRequest: MessageFns<ListAccessBindingsRequest> = {
  encode(message: ListAccessBindingsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAccessBindingsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAccessBindingsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAccessBindingsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListAccessBindingsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListAccessBindingsRequest>): ListAccessBindingsRequest {
    return ListAccessBindingsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAccessBindingsRequest>): ListAccessBindingsRequest {
    const message = createBaseListAccessBindingsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListAccessBindingsResponse(): ListAccessBindingsResponse {
  return { accessBindings: [], nextPageToken: "" };
}

export const ListAccessBindingsResponse: MessageFns<ListAccessBindingsResponse> = {
  encode(message: ListAccessBindingsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.accessBindings) {
      AccessBinding.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAccessBindingsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAccessBindingsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.accessBindings.push(AccessBinding.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAccessBindingsResponse {
    return {
      accessBindings: globalThis.Array.isArray(object?.accessBindings)
        ? object.accessBindings.map((e: any) => AccessBinding.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListAccessBindingsResponse): unknown {
    const obj: any = {};
    if (message.accessBindings?.length) {
      obj.accessBindings = message.accessBindings.map((e) => AccessBinding.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListAccessBindingsResponse>): ListAccessBindingsResponse {
    return ListAccessBindingsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAccessBindingsResponse>): ListAccessBindingsResponse {
    const message = createBaseListAccessBindingsResponse();
    message.accessBindings = object.accessBindings?.map((e) => AccessBinding.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseCreateAccessBindingRequest(): CreateAccessBindingRequest {
  return { parent: "", accessBinding: undefined };
}

export const CreateAccessBindingRequest: MessageFns<CreateAccessBindingRequest> = {
  encode(message: CreateAccessBindingRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.accessBinding !== undefined) {
      AccessBinding.encode(message.accessBinding, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateAccessBindingRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateAccessBindingRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.accessBinding = AccessBinding.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateAccessBindingRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      accessBinding: isSet(object.accessBinding) ? AccessBinding.fromJSON(object.accessBinding) : undefined,
    };
  },

  toJSON(message: CreateAccessBindingRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.accessBinding !== undefined) {
      obj.accessBinding = AccessBinding.toJSON(message.accessBinding);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateAccessBindingRequest>): CreateAccessBindingRequest {
    return CreateAccessBindingRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateAccessBindingRequest>): CreateAccessBindingRequest {
    const message = createBaseCreateAccessBindingRequest();
    message.parent = object.parent ?? "";
    message.accessBinding = (object.accessBinding !== undefined && object.accessBinding !== null)
      ? AccessBinding.fromPartial(object.accessBinding)
      : undefined;
    return message;
  },
};

function createBaseBatchCreateAccessBindingsRequest(): BatchCreateAccessBindingsRequest {
  return { parent: "", requests: [] };
}

export const BatchCreateAccessBindingsRequest: MessageFns<BatchCreateAccessBindingsRequest> = {
  encode(message: BatchCreateAccessBindingsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    for (const v of message.requests) {
      CreateAccessBindingRequest.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BatchCreateAccessBindingsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBatchCreateAccessBindingsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.requests.push(CreateAccessBindingRequest.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BatchCreateAccessBindingsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      requests: globalThis.Array.isArray(object?.requests)
        ? object.requests.map((e: any) => CreateAccessBindingRequest.fromJSON(e))
        : [],
    };
  },

  toJSON(message: BatchCreateAccessBindingsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.requests?.length) {
      obj.requests = message.requests.map((e) => CreateAccessBindingRequest.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<BatchCreateAccessBindingsRequest>): BatchCreateAccessBindingsRequest {
    return BatchCreateAccessBindingsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BatchCreateAccessBindingsRequest>): BatchCreateAccessBindingsRequest {
    const message = createBaseBatchCreateAccessBindingsRequest();
    message.parent = object.parent ?? "";
    message.requests = object.requests?.map((e) => CreateAccessBindingRequest.fromPartial(e)) || [];
    return message;
  },
};

function createBaseBatchCreateAccessBindingsResponse(): BatchCreateAccessBindingsResponse {
  return { accessBindings: [] };
}

export const BatchCreateAccessBindingsResponse: MessageFns<BatchCreateAccessBindingsResponse> = {
  encode(message: BatchCreateAccessBindingsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.accessBindings) {
      AccessBinding.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BatchCreateAccessBindingsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBatchCreateAccessBindingsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.accessBindings.push(AccessBinding.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BatchCreateAccessBindingsResponse {
    return {
      accessBindings: globalThis.Array.isArray(object?.accessBindings)
        ? object.accessBindings.map((e: any) => AccessBinding.fromJSON(e))
        : [],
    };
  },

  toJSON(message: BatchCreateAccessBindingsResponse): unknown {
    const obj: any = {};
    if (message.accessBindings?.length) {
      obj.accessBindings = message.accessBindings.map((e) => AccessBinding.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<BatchCreateAccessBindingsResponse>): BatchCreateAccessBindingsResponse {
    return BatchCreateAccessBindingsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BatchCreateAccessBindingsResponse>): BatchCreateAccessBindingsResponse {
    const message = createBaseBatchCreateAccessBindingsResponse();
    message.accessBindings = object.accessBindings?.map((e) => AccessBinding.fromPartial(e)) || [];
    return message;
  },
};

function createBaseUpdateAccessBindingRequest(): UpdateAccessBindingRequest {
  return { accessBinding: undefined };
}

export const UpdateAccessBindingRequest: MessageFns<UpdateAccessBindingRequest> = {
  encode(message: UpdateAccessBindingRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.accessBinding !== undefined) {
      AccessBinding.encode(message.accessBinding, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateAccessBindingRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateAccessBindingRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.accessBinding = AccessBinding.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateAccessBindingRequest {
    return { accessBinding: isSet(object.accessBinding) ? AccessBinding.fromJSON(object.accessBinding) : undefined };
  },

  toJSON(message: UpdateAccessBindingRequest): unknown {
    const obj: any = {};
    if (message.accessBinding !== undefined) {
      obj.accessBinding = AccessBinding.toJSON(message.accessBinding);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateAccessBindingRequest>): UpdateAccessBindingRequest {
    return UpdateAccessBindingRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateAccessBindingRequest>): UpdateAccessBindingRequest {
    const message = createBaseUpdateAccessBindingRequest();
    message.accessBinding = (object.accessBinding !== undefined && object.accessBinding !== null)
      ? AccessBinding.fromPartial(object.accessBinding)
      : undefined;
    return message;
  },
};

function createBaseBatchUpdateAccessBindingsRequest(): BatchUpdateAccessBindingsRequest {
  return { parent: "", requests: [] };
}

export const BatchUpdateAccessBindingsRequest: MessageFns<BatchUpdateAccessBindingsRequest> = {
  encode(message: BatchUpdateAccessBindingsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    for (const v of message.requests) {
      UpdateAccessBindingRequest.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BatchUpdateAccessBindingsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBatchUpdateAccessBindingsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.requests.push(UpdateAccessBindingRequest.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BatchUpdateAccessBindingsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      requests: globalThis.Array.isArray(object?.requests)
        ? object.requests.map((e: any) => UpdateAccessBindingRequest.fromJSON(e))
        : [],
    };
  },

  toJSON(message: BatchUpdateAccessBindingsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.requests?.length) {
      obj.requests = message.requests.map((e) => UpdateAccessBindingRequest.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<BatchUpdateAccessBindingsRequest>): BatchUpdateAccessBindingsRequest {
    return BatchUpdateAccessBindingsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BatchUpdateAccessBindingsRequest>): BatchUpdateAccessBindingsRequest {
    const message = createBaseBatchUpdateAccessBindingsRequest();
    message.parent = object.parent ?? "";
    message.requests = object.requests?.map((e) => UpdateAccessBindingRequest.fromPartial(e)) || [];
    return message;
  },
};

function createBaseBatchUpdateAccessBindingsResponse(): BatchUpdateAccessBindingsResponse {
  return { accessBindings: [] };
}

export const BatchUpdateAccessBindingsResponse: MessageFns<BatchUpdateAccessBindingsResponse> = {
  encode(message: BatchUpdateAccessBindingsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.accessBindings) {
      AccessBinding.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BatchUpdateAccessBindingsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBatchUpdateAccessBindingsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.accessBindings.push(AccessBinding.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BatchUpdateAccessBindingsResponse {
    return {
      accessBindings: globalThis.Array.isArray(object?.accessBindings)
        ? object.accessBindings.map((e: any) => AccessBinding.fromJSON(e))
        : [],
    };
  },

  toJSON(message: BatchUpdateAccessBindingsResponse): unknown {
    const obj: any = {};
    if (message.accessBindings?.length) {
      obj.accessBindings = message.accessBindings.map((e) => AccessBinding.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<BatchUpdateAccessBindingsResponse>): BatchUpdateAccessBindingsResponse {
    return BatchUpdateAccessBindingsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BatchUpdateAccessBindingsResponse>): BatchUpdateAccessBindingsResponse {
    const message = createBaseBatchUpdateAccessBindingsResponse();
    message.accessBindings = object.accessBindings?.map((e) => AccessBinding.fromPartial(e)) || [];
    return message;
  },
};

function createBaseDeleteAccessBindingRequest(): DeleteAccessBindingRequest {
  return { name: "" };
}

export const DeleteAccessBindingRequest: MessageFns<DeleteAccessBindingRequest> = {
  encode(message: DeleteAccessBindingRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteAccessBindingRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteAccessBindingRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteAccessBindingRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteAccessBindingRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteAccessBindingRequest>): DeleteAccessBindingRequest {
    return DeleteAccessBindingRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteAccessBindingRequest>): DeleteAccessBindingRequest {
    const message = createBaseDeleteAccessBindingRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseBatchDeleteAccessBindingsRequest(): BatchDeleteAccessBindingsRequest {
  return { parent: "", requests: [] };
}

export const BatchDeleteAccessBindingsRequest: MessageFns<BatchDeleteAccessBindingsRequest> = {
  encode(message: BatchDeleteAccessBindingsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    for (const v of message.requests) {
      DeleteAccessBindingRequest.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BatchDeleteAccessBindingsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBatchDeleteAccessBindingsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.requests.push(DeleteAccessBindingRequest.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BatchDeleteAccessBindingsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      requests: globalThis.Array.isArray(object?.requests)
        ? object.requests.map((e: any) => DeleteAccessBindingRequest.fromJSON(e))
        : [],
    };
  },

  toJSON(message: BatchDeleteAccessBindingsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.requests?.length) {
      obj.requests = message.requests.map((e) => DeleteAccessBindingRequest.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<BatchDeleteAccessBindingsRequest>): BatchDeleteAccessBindingsRequest {
    return BatchDeleteAccessBindingsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BatchDeleteAccessBindingsRequest>): BatchDeleteAccessBindingsRequest {
    const message = createBaseBatchDeleteAccessBindingsRequest();
    message.parent = object.parent ?? "";
    message.requests = object.requests?.map((e) => DeleteAccessBindingRequest.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCreateExpandedDataSetRequest(): CreateExpandedDataSetRequest {
  return { parent: "", expandedDataSet: undefined };
}

export const CreateExpandedDataSetRequest: MessageFns<CreateExpandedDataSetRequest> = {
  encode(message: CreateExpandedDataSetRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.expandedDataSet !== undefined) {
      ExpandedDataSet.encode(message.expandedDataSet, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateExpandedDataSetRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateExpandedDataSetRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.expandedDataSet = ExpandedDataSet.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateExpandedDataSetRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      expandedDataSet: isSet(object.expandedDataSet) ? ExpandedDataSet.fromJSON(object.expandedDataSet) : undefined,
    };
  },

  toJSON(message: CreateExpandedDataSetRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.expandedDataSet !== undefined) {
      obj.expandedDataSet = ExpandedDataSet.toJSON(message.expandedDataSet);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateExpandedDataSetRequest>): CreateExpandedDataSetRequest {
    return CreateExpandedDataSetRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateExpandedDataSetRequest>): CreateExpandedDataSetRequest {
    const message = createBaseCreateExpandedDataSetRequest();
    message.parent = object.parent ?? "";
    message.expandedDataSet = (object.expandedDataSet !== undefined && object.expandedDataSet !== null)
      ? ExpandedDataSet.fromPartial(object.expandedDataSet)
      : undefined;
    return message;
  },
};

function createBaseUpdateExpandedDataSetRequest(): UpdateExpandedDataSetRequest {
  return { expandedDataSet: undefined, updateMask: undefined };
}

export const UpdateExpandedDataSetRequest: MessageFns<UpdateExpandedDataSetRequest> = {
  encode(message: UpdateExpandedDataSetRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.expandedDataSet !== undefined) {
      ExpandedDataSet.encode(message.expandedDataSet, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateExpandedDataSetRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateExpandedDataSetRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.expandedDataSet = ExpandedDataSet.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateExpandedDataSetRequest {
    return {
      expandedDataSet: isSet(object.expandedDataSet) ? ExpandedDataSet.fromJSON(object.expandedDataSet) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateExpandedDataSetRequest): unknown {
    const obj: any = {};
    if (message.expandedDataSet !== undefined) {
      obj.expandedDataSet = ExpandedDataSet.toJSON(message.expandedDataSet);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateExpandedDataSetRequest>): UpdateExpandedDataSetRequest {
    return UpdateExpandedDataSetRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateExpandedDataSetRequest>): UpdateExpandedDataSetRequest {
    const message = createBaseUpdateExpandedDataSetRequest();
    message.expandedDataSet = (object.expandedDataSet !== undefined && object.expandedDataSet !== null)
      ? ExpandedDataSet.fromPartial(object.expandedDataSet)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseDeleteExpandedDataSetRequest(): DeleteExpandedDataSetRequest {
  return { name: "" };
}

export const DeleteExpandedDataSetRequest: MessageFns<DeleteExpandedDataSetRequest> = {
  encode(message: DeleteExpandedDataSetRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteExpandedDataSetRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteExpandedDataSetRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteExpandedDataSetRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteExpandedDataSetRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteExpandedDataSetRequest>): DeleteExpandedDataSetRequest {
    return DeleteExpandedDataSetRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteExpandedDataSetRequest>): DeleteExpandedDataSetRequest {
    const message = createBaseDeleteExpandedDataSetRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseGetExpandedDataSetRequest(): GetExpandedDataSetRequest {
  return { name: "" };
}

export const GetExpandedDataSetRequest: MessageFns<GetExpandedDataSetRequest> = {
  encode(message: GetExpandedDataSetRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetExpandedDataSetRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetExpandedDataSetRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetExpandedDataSetRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetExpandedDataSetRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetExpandedDataSetRequest>): GetExpandedDataSetRequest {
    return GetExpandedDataSetRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetExpandedDataSetRequest>): GetExpandedDataSetRequest {
    const message = createBaseGetExpandedDataSetRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListExpandedDataSetsRequest(): ListExpandedDataSetsRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListExpandedDataSetsRequest: MessageFns<ListExpandedDataSetsRequest> = {
  encode(message: ListExpandedDataSetsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListExpandedDataSetsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListExpandedDataSetsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListExpandedDataSetsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListExpandedDataSetsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListExpandedDataSetsRequest>): ListExpandedDataSetsRequest {
    return ListExpandedDataSetsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListExpandedDataSetsRequest>): ListExpandedDataSetsRequest {
    const message = createBaseListExpandedDataSetsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListExpandedDataSetsResponse(): ListExpandedDataSetsResponse {
  return { expandedDataSets: [], nextPageToken: "" };
}

export const ListExpandedDataSetsResponse: MessageFns<ListExpandedDataSetsResponse> = {
  encode(message: ListExpandedDataSetsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.expandedDataSets) {
      ExpandedDataSet.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListExpandedDataSetsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListExpandedDataSetsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.expandedDataSets.push(ExpandedDataSet.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListExpandedDataSetsResponse {
    return {
      expandedDataSets: globalThis.Array.isArray(object?.expandedDataSets)
        ? object.expandedDataSets.map((e: any) => ExpandedDataSet.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListExpandedDataSetsResponse): unknown {
    const obj: any = {};
    if (message.expandedDataSets?.length) {
      obj.expandedDataSets = message.expandedDataSets.map((e) => ExpandedDataSet.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListExpandedDataSetsResponse>): ListExpandedDataSetsResponse {
    return ListExpandedDataSetsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListExpandedDataSetsResponse>): ListExpandedDataSetsResponse {
    const message = createBaseListExpandedDataSetsResponse();
    message.expandedDataSets = object.expandedDataSets?.map((e) => ExpandedDataSet.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseCreateChannelGroupRequest(): CreateChannelGroupRequest {
  return { parent: "", channelGroup: undefined };
}

export const CreateChannelGroupRequest: MessageFns<CreateChannelGroupRequest> = {
  encode(message: CreateChannelGroupRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.channelGroup !== undefined) {
      ChannelGroup.encode(message.channelGroup, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateChannelGroupRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateChannelGroupRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.channelGroup = ChannelGroup.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateChannelGroupRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      channelGroup: isSet(object.channelGroup) ? ChannelGroup.fromJSON(object.channelGroup) : undefined,
    };
  },

  toJSON(message: CreateChannelGroupRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.channelGroup !== undefined) {
      obj.channelGroup = ChannelGroup.toJSON(message.channelGroup);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateChannelGroupRequest>): CreateChannelGroupRequest {
    return CreateChannelGroupRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateChannelGroupRequest>): CreateChannelGroupRequest {
    const message = createBaseCreateChannelGroupRequest();
    message.parent = object.parent ?? "";
    message.channelGroup = (object.channelGroup !== undefined && object.channelGroup !== null)
      ? ChannelGroup.fromPartial(object.channelGroup)
      : undefined;
    return message;
  },
};

function createBaseUpdateChannelGroupRequest(): UpdateChannelGroupRequest {
  return { channelGroup: undefined, updateMask: undefined };
}

export const UpdateChannelGroupRequest: MessageFns<UpdateChannelGroupRequest> = {
  encode(message: UpdateChannelGroupRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.channelGroup !== undefined) {
      ChannelGroup.encode(message.channelGroup, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateChannelGroupRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateChannelGroupRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.channelGroup = ChannelGroup.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateChannelGroupRequest {
    return {
      channelGroup: isSet(object.channelGroup) ? ChannelGroup.fromJSON(object.channelGroup) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateChannelGroupRequest): unknown {
    const obj: any = {};
    if (message.channelGroup !== undefined) {
      obj.channelGroup = ChannelGroup.toJSON(message.channelGroup);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateChannelGroupRequest>): UpdateChannelGroupRequest {
    return UpdateChannelGroupRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateChannelGroupRequest>): UpdateChannelGroupRequest {
    const message = createBaseUpdateChannelGroupRequest();
    message.channelGroup = (object.channelGroup !== undefined && object.channelGroup !== null)
      ? ChannelGroup.fromPartial(object.channelGroup)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseDeleteChannelGroupRequest(): DeleteChannelGroupRequest {
  return { name: "" };
}

export const DeleteChannelGroupRequest: MessageFns<DeleteChannelGroupRequest> = {
  encode(message: DeleteChannelGroupRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteChannelGroupRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteChannelGroupRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteChannelGroupRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteChannelGroupRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteChannelGroupRequest>): DeleteChannelGroupRequest {
    return DeleteChannelGroupRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteChannelGroupRequest>): DeleteChannelGroupRequest {
    const message = createBaseDeleteChannelGroupRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseGetChannelGroupRequest(): GetChannelGroupRequest {
  return { name: "" };
}

export const GetChannelGroupRequest: MessageFns<GetChannelGroupRequest> = {
  encode(message: GetChannelGroupRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetChannelGroupRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetChannelGroupRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetChannelGroupRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetChannelGroupRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetChannelGroupRequest>): GetChannelGroupRequest {
    return GetChannelGroupRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetChannelGroupRequest>): GetChannelGroupRequest {
    const message = createBaseGetChannelGroupRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListChannelGroupsRequest(): ListChannelGroupsRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListChannelGroupsRequest: MessageFns<ListChannelGroupsRequest> = {
  encode(message: ListChannelGroupsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListChannelGroupsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListChannelGroupsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListChannelGroupsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListChannelGroupsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListChannelGroupsRequest>): ListChannelGroupsRequest {
    return ListChannelGroupsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListChannelGroupsRequest>): ListChannelGroupsRequest {
    const message = createBaseListChannelGroupsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListChannelGroupsResponse(): ListChannelGroupsResponse {
  return { channelGroups: [], nextPageToken: "" };
}

export const ListChannelGroupsResponse: MessageFns<ListChannelGroupsResponse> = {
  encode(message: ListChannelGroupsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.channelGroups) {
      ChannelGroup.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListChannelGroupsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListChannelGroupsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.channelGroups.push(ChannelGroup.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListChannelGroupsResponse {
    return {
      channelGroups: globalThis.Array.isArray(object?.channelGroups)
        ? object.channelGroups.map((e: any) => ChannelGroup.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListChannelGroupsResponse): unknown {
    const obj: any = {};
    if (message.channelGroups?.length) {
      obj.channelGroups = message.channelGroups.map((e) => ChannelGroup.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListChannelGroupsResponse>): ListChannelGroupsResponse {
    return ListChannelGroupsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListChannelGroupsResponse>): ListChannelGroupsResponse {
    const message = createBaseListChannelGroupsResponse();
    message.channelGroups = object.channelGroups?.map((e) => ChannelGroup.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseSetAutomatedGa4ConfigurationOptOutRequest(): SetAutomatedGa4ConfigurationOptOutRequest {
  return { property: "", optOut: false };
}

export const SetAutomatedGa4ConfigurationOptOutRequest: MessageFns<SetAutomatedGa4ConfigurationOptOutRequest> = {
  encode(message: SetAutomatedGa4ConfigurationOptOutRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.property !== "") {
      writer.uint32(10).string(message.property);
    }
    if (message.optOut !== false) {
      writer.uint32(16).bool(message.optOut);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetAutomatedGa4ConfigurationOptOutRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetAutomatedGa4ConfigurationOptOutRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.property = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.optOut = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetAutomatedGa4ConfigurationOptOutRequest {
    return {
      property: isSet(object.property) ? globalThis.String(object.property) : "",
      optOut: isSet(object.optOut) ? globalThis.Boolean(object.optOut) : false,
    };
  },

  toJSON(message: SetAutomatedGa4ConfigurationOptOutRequest): unknown {
    const obj: any = {};
    if (message.property !== "") {
      obj.property = message.property;
    }
    if (message.optOut !== false) {
      obj.optOut = message.optOut;
    }
    return obj;
  },

  create(base?: DeepPartial<SetAutomatedGa4ConfigurationOptOutRequest>): SetAutomatedGa4ConfigurationOptOutRequest {
    return SetAutomatedGa4ConfigurationOptOutRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<SetAutomatedGa4ConfigurationOptOutRequest>,
  ): SetAutomatedGa4ConfigurationOptOutRequest {
    const message = createBaseSetAutomatedGa4ConfigurationOptOutRequest();
    message.property = object.property ?? "";
    message.optOut = object.optOut ?? false;
    return message;
  },
};

function createBaseSetAutomatedGa4ConfigurationOptOutResponse(): SetAutomatedGa4ConfigurationOptOutResponse {
  return {};
}

export const SetAutomatedGa4ConfigurationOptOutResponse: MessageFns<SetAutomatedGa4ConfigurationOptOutResponse> = {
  encode(_: SetAutomatedGa4ConfigurationOptOutResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetAutomatedGa4ConfigurationOptOutResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetAutomatedGa4ConfigurationOptOutResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): SetAutomatedGa4ConfigurationOptOutResponse {
    return {};
  },

  toJSON(_: SetAutomatedGa4ConfigurationOptOutResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<SetAutomatedGa4ConfigurationOptOutResponse>): SetAutomatedGa4ConfigurationOptOutResponse {
    return SetAutomatedGa4ConfigurationOptOutResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<SetAutomatedGa4ConfigurationOptOutResponse>): SetAutomatedGa4ConfigurationOptOutResponse {
    const message = createBaseSetAutomatedGa4ConfigurationOptOutResponse();
    return message;
  },
};

function createBaseFetchAutomatedGa4ConfigurationOptOutRequest(): FetchAutomatedGa4ConfigurationOptOutRequest {
  return { property: "" };
}

export const FetchAutomatedGa4ConfigurationOptOutRequest: MessageFns<FetchAutomatedGa4ConfigurationOptOutRequest> = {
  encode(
    message: FetchAutomatedGa4ConfigurationOptOutRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.property !== "") {
      writer.uint32(10).string(message.property);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FetchAutomatedGa4ConfigurationOptOutRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFetchAutomatedGa4ConfigurationOptOutRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.property = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FetchAutomatedGa4ConfigurationOptOutRequest {
    return { property: isSet(object.property) ? globalThis.String(object.property) : "" };
  },

  toJSON(message: FetchAutomatedGa4ConfigurationOptOutRequest): unknown {
    const obj: any = {};
    if (message.property !== "") {
      obj.property = message.property;
    }
    return obj;
  },

  create(base?: DeepPartial<FetchAutomatedGa4ConfigurationOptOutRequest>): FetchAutomatedGa4ConfigurationOptOutRequest {
    return FetchAutomatedGa4ConfigurationOptOutRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<FetchAutomatedGa4ConfigurationOptOutRequest>,
  ): FetchAutomatedGa4ConfigurationOptOutRequest {
    const message = createBaseFetchAutomatedGa4ConfigurationOptOutRequest();
    message.property = object.property ?? "";
    return message;
  },
};

function createBaseFetchAutomatedGa4ConfigurationOptOutResponse(): FetchAutomatedGa4ConfigurationOptOutResponse {
  return { optOut: false };
}

export const FetchAutomatedGa4ConfigurationOptOutResponse: MessageFns<FetchAutomatedGa4ConfigurationOptOutResponse> = {
  encode(
    message: FetchAutomatedGa4ConfigurationOptOutResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.optOut !== false) {
      writer.uint32(8).bool(message.optOut);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FetchAutomatedGa4ConfigurationOptOutResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFetchAutomatedGa4ConfigurationOptOutResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.optOut = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FetchAutomatedGa4ConfigurationOptOutResponse {
    return { optOut: isSet(object.optOut) ? globalThis.Boolean(object.optOut) : false };
  },

  toJSON(message: FetchAutomatedGa4ConfigurationOptOutResponse): unknown {
    const obj: any = {};
    if (message.optOut !== false) {
      obj.optOut = message.optOut;
    }
    return obj;
  },

  create(
    base?: DeepPartial<FetchAutomatedGa4ConfigurationOptOutResponse>,
  ): FetchAutomatedGa4ConfigurationOptOutResponse {
    return FetchAutomatedGa4ConfigurationOptOutResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<FetchAutomatedGa4ConfigurationOptOutResponse>,
  ): FetchAutomatedGa4ConfigurationOptOutResponse {
    const message = createBaseFetchAutomatedGa4ConfigurationOptOutResponse();
    message.optOut = object.optOut ?? false;
    return message;
  },
};

function createBaseCreateBigQueryLinkRequest(): CreateBigQueryLinkRequest {
  return { parent: "", bigqueryLink: undefined };
}

export const CreateBigQueryLinkRequest: MessageFns<CreateBigQueryLinkRequest> = {
  encode(message: CreateBigQueryLinkRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.bigqueryLink !== undefined) {
      BigQueryLink.encode(message.bigqueryLink, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateBigQueryLinkRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateBigQueryLinkRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.bigqueryLink = BigQueryLink.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateBigQueryLinkRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      bigqueryLink: isSet(object.bigqueryLink) ? BigQueryLink.fromJSON(object.bigqueryLink) : undefined,
    };
  },

  toJSON(message: CreateBigQueryLinkRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.bigqueryLink !== undefined) {
      obj.bigqueryLink = BigQueryLink.toJSON(message.bigqueryLink);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateBigQueryLinkRequest>): CreateBigQueryLinkRequest {
    return CreateBigQueryLinkRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateBigQueryLinkRequest>): CreateBigQueryLinkRequest {
    const message = createBaseCreateBigQueryLinkRequest();
    message.parent = object.parent ?? "";
    message.bigqueryLink = (object.bigqueryLink !== undefined && object.bigqueryLink !== null)
      ? BigQueryLink.fromPartial(object.bigqueryLink)
      : undefined;
    return message;
  },
};

function createBaseGetBigQueryLinkRequest(): GetBigQueryLinkRequest {
  return { name: "" };
}

export const GetBigQueryLinkRequest: MessageFns<GetBigQueryLinkRequest> = {
  encode(message: GetBigQueryLinkRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetBigQueryLinkRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetBigQueryLinkRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetBigQueryLinkRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetBigQueryLinkRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetBigQueryLinkRequest>): GetBigQueryLinkRequest {
    return GetBigQueryLinkRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetBigQueryLinkRequest>): GetBigQueryLinkRequest {
    const message = createBaseGetBigQueryLinkRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListBigQueryLinksRequest(): ListBigQueryLinksRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListBigQueryLinksRequest: MessageFns<ListBigQueryLinksRequest> = {
  encode(message: ListBigQueryLinksRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListBigQueryLinksRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListBigQueryLinksRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListBigQueryLinksRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListBigQueryLinksRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListBigQueryLinksRequest>): ListBigQueryLinksRequest {
    return ListBigQueryLinksRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListBigQueryLinksRequest>): ListBigQueryLinksRequest {
    const message = createBaseListBigQueryLinksRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListBigQueryLinksResponse(): ListBigQueryLinksResponse {
  return { bigqueryLinks: [], nextPageToken: "" };
}

export const ListBigQueryLinksResponse: MessageFns<ListBigQueryLinksResponse> = {
  encode(message: ListBigQueryLinksResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.bigqueryLinks) {
      BigQueryLink.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListBigQueryLinksResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListBigQueryLinksResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.bigqueryLinks.push(BigQueryLink.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListBigQueryLinksResponse {
    return {
      bigqueryLinks: globalThis.Array.isArray(object?.bigqueryLinks)
        ? object.bigqueryLinks.map((e: any) => BigQueryLink.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListBigQueryLinksResponse): unknown {
    const obj: any = {};
    if (message.bigqueryLinks?.length) {
      obj.bigqueryLinks = message.bigqueryLinks.map((e) => BigQueryLink.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListBigQueryLinksResponse>): ListBigQueryLinksResponse {
    return ListBigQueryLinksResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListBigQueryLinksResponse>): ListBigQueryLinksResponse {
    const message = createBaseListBigQueryLinksResponse();
    message.bigqueryLinks = object.bigqueryLinks?.map((e) => BigQueryLink.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseUpdateBigQueryLinkRequest(): UpdateBigQueryLinkRequest {
  return { bigqueryLink: undefined, updateMask: undefined };
}

export const UpdateBigQueryLinkRequest: MessageFns<UpdateBigQueryLinkRequest> = {
  encode(message: UpdateBigQueryLinkRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.bigqueryLink !== undefined) {
      BigQueryLink.encode(message.bigqueryLink, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateBigQueryLinkRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateBigQueryLinkRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.bigqueryLink = BigQueryLink.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateBigQueryLinkRequest {
    return {
      bigqueryLink: isSet(object.bigqueryLink) ? BigQueryLink.fromJSON(object.bigqueryLink) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateBigQueryLinkRequest): unknown {
    const obj: any = {};
    if (message.bigqueryLink !== undefined) {
      obj.bigqueryLink = BigQueryLink.toJSON(message.bigqueryLink);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateBigQueryLinkRequest>): UpdateBigQueryLinkRequest {
    return UpdateBigQueryLinkRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateBigQueryLinkRequest>): UpdateBigQueryLinkRequest {
    const message = createBaseUpdateBigQueryLinkRequest();
    message.bigqueryLink = (object.bigqueryLink !== undefined && object.bigqueryLink !== null)
      ? BigQueryLink.fromPartial(object.bigqueryLink)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseDeleteBigQueryLinkRequest(): DeleteBigQueryLinkRequest {
  return { name: "" };
}

export const DeleteBigQueryLinkRequest: MessageFns<DeleteBigQueryLinkRequest> = {
  encode(message: DeleteBigQueryLinkRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteBigQueryLinkRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteBigQueryLinkRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteBigQueryLinkRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteBigQueryLinkRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteBigQueryLinkRequest>): DeleteBigQueryLinkRequest {
    return DeleteBigQueryLinkRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteBigQueryLinkRequest>): DeleteBigQueryLinkRequest {
    const message = createBaseDeleteBigQueryLinkRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseGetEnhancedMeasurementSettingsRequest(): GetEnhancedMeasurementSettingsRequest {
  return { name: "" };
}

export const GetEnhancedMeasurementSettingsRequest: MessageFns<GetEnhancedMeasurementSettingsRequest> = {
  encode(message: GetEnhancedMeasurementSettingsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetEnhancedMeasurementSettingsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetEnhancedMeasurementSettingsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetEnhancedMeasurementSettingsRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetEnhancedMeasurementSettingsRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetEnhancedMeasurementSettingsRequest>): GetEnhancedMeasurementSettingsRequest {
    return GetEnhancedMeasurementSettingsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetEnhancedMeasurementSettingsRequest>): GetEnhancedMeasurementSettingsRequest {
    const message = createBaseGetEnhancedMeasurementSettingsRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpdateEnhancedMeasurementSettingsRequest(): UpdateEnhancedMeasurementSettingsRequest {
  return { enhancedMeasurementSettings: undefined, updateMask: undefined };
}

export const UpdateEnhancedMeasurementSettingsRequest: MessageFns<UpdateEnhancedMeasurementSettingsRequest> = {
  encode(message: UpdateEnhancedMeasurementSettingsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.enhancedMeasurementSettings !== undefined) {
      EnhancedMeasurementSettings.encode(message.enhancedMeasurementSettings, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateEnhancedMeasurementSettingsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateEnhancedMeasurementSettingsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.enhancedMeasurementSettings = EnhancedMeasurementSettings.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateEnhancedMeasurementSettingsRequest {
    return {
      enhancedMeasurementSettings: isSet(object.enhancedMeasurementSettings)
        ? EnhancedMeasurementSettings.fromJSON(object.enhancedMeasurementSettings)
        : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateEnhancedMeasurementSettingsRequest): unknown {
    const obj: any = {};
    if (message.enhancedMeasurementSettings !== undefined) {
      obj.enhancedMeasurementSettings = EnhancedMeasurementSettings.toJSON(message.enhancedMeasurementSettings);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateEnhancedMeasurementSettingsRequest>): UpdateEnhancedMeasurementSettingsRequest {
    return UpdateEnhancedMeasurementSettingsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateEnhancedMeasurementSettingsRequest>): UpdateEnhancedMeasurementSettingsRequest {
    const message = createBaseUpdateEnhancedMeasurementSettingsRequest();
    message.enhancedMeasurementSettings =
      (object.enhancedMeasurementSettings !== undefined && object.enhancedMeasurementSettings !== null)
        ? EnhancedMeasurementSettings.fromPartial(object.enhancedMeasurementSettings)
        : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseGetDataRedactionSettingsRequest(): GetDataRedactionSettingsRequest {
  return { name: "" };
}

export const GetDataRedactionSettingsRequest: MessageFns<GetDataRedactionSettingsRequest> = {
  encode(message: GetDataRedactionSettingsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetDataRedactionSettingsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDataRedactionSettingsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDataRedactionSettingsRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetDataRedactionSettingsRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetDataRedactionSettingsRequest>): GetDataRedactionSettingsRequest {
    return GetDataRedactionSettingsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetDataRedactionSettingsRequest>): GetDataRedactionSettingsRequest {
    const message = createBaseGetDataRedactionSettingsRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpdateDataRedactionSettingsRequest(): UpdateDataRedactionSettingsRequest {
  return { dataRedactionSettings: undefined, updateMask: undefined };
}

export const UpdateDataRedactionSettingsRequest: MessageFns<UpdateDataRedactionSettingsRequest> = {
  encode(message: UpdateDataRedactionSettingsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.dataRedactionSettings !== undefined) {
      DataRedactionSettings.encode(message.dataRedactionSettings, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateDataRedactionSettingsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateDataRedactionSettingsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.dataRedactionSettings = DataRedactionSettings.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateDataRedactionSettingsRequest {
    return {
      dataRedactionSettings: isSet(object.dataRedactionSettings)
        ? DataRedactionSettings.fromJSON(object.dataRedactionSettings)
        : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateDataRedactionSettingsRequest): unknown {
    const obj: any = {};
    if (message.dataRedactionSettings !== undefined) {
      obj.dataRedactionSettings = DataRedactionSettings.toJSON(message.dataRedactionSettings);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateDataRedactionSettingsRequest>): UpdateDataRedactionSettingsRequest {
    return UpdateDataRedactionSettingsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateDataRedactionSettingsRequest>): UpdateDataRedactionSettingsRequest {
    const message = createBaseUpdateDataRedactionSettingsRequest();
    message.dataRedactionSettings =
      (object.dataRedactionSettings !== undefined && object.dataRedactionSettings !== null)
        ? DataRedactionSettings.fromPartial(object.dataRedactionSettings)
        : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseCreateConnectedSiteTagRequest(): CreateConnectedSiteTagRequest {
  return { property: "", connectedSiteTag: undefined };
}

export const CreateConnectedSiteTagRequest: MessageFns<CreateConnectedSiteTagRequest> = {
  encode(message: CreateConnectedSiteTagRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.property !== "") {
      writer.uint32(10).string(message.property);
    }
    if (message.connectedSiteTag !== undefined) {
      ConnectedSiteTag.encode(message.connectedSiteTag, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateConnectedSiteTagRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateConnectedSiteTagRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.property = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.connectedSiteTag = ConnectedSiteTag.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateConnectedSiteTagRequest {
    return {
      property: isSet(object.property) ? globalThis.String(object.property) : "",
      connectedSiteTag: isSet(object.connectedSiteTag) ? ConnectedSiteTag.fromJSON(object.connectedSiteTag) : undefined,
    };
  },

  toJSON(message: CreateConnectedSiteTagRequest): unknown {
    const obj: any = {};
    if (message.property !== "") {
      obj.property = message.property;
    }
    if (message.connectedSiteTag !== undefined) {
      obj.connectedSiteTag = ConnectedSiteTag.toJSON(message.connectedSiteTag);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateConnectedSiteTagRequest>): CreateConnectedSiteTagRequest {
    return CreateConnectedSiteTagRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateConnectedSiteTagRequest>): CreateConnectedSiteTagRequest {
    const message = createBaseCreateConnectedSiteTagRequest();
    message.property = object.property ?? "";
    message.connectedSiteTag = (object.connectedSiteTag !== undefined && object.connectedSiteTag !== null)
      ? ConnectedSiteTag.fromPartial(object.connectedSiteTag)
      : undefined;
    return message;
  },
};

function createBaseCreateConnectedSiteTagResponse(): CreateConnectedSiteTagResponse {
  return {};
}

export const CreateConnectedSiteTagResponse: MessageFns<CreateConnectedSiteTagResponse> = {
  encode(_: CreateConnectedSiteTagResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateConnectedSiteTagResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateConnectedSiteTagResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): CreateConnectedSiteTagResponse {
    return {};
  },

  toJSON(_: CreateConnectedSiteTagResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<CreateConnectedSiteTagResponse>): CreateConnectedSiteTagResponse {
    return CreateConnectedSiteTagResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<CreateConnectedSiteTagResponse>): CreateConnectedSiteTagResponse {
    const message = createBaseCreateConnectedSiteTagResponse();
    return message;
  },
};

function createBaseDeleteConnectedSiteTagRequest(): DeleteConnectedSiteTagRequest {
  return { property: "", tagId: "" };
}

export const DeleteConnectedSiteTagRequest: MessageFns<DeleteConnectedSiteTagRequest> = {
  encode(message: DeleteConnectedSiteTagRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.property !== "") {
      writer.uint32(10).string(message.property);
    }
    if (message.tagId !== "") {
      writer.uint32(18).string(message.tagId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteConnectedSiteTagRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteConnectedSiteTagRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.property = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.tagId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteConnectedSiteTagRequest {
    return {
      property: isSet(object.property) ? globalThis.String(object.property) : "",
      tagId: isSet(object.tagId) ? globalThis.String(object.tagId) : "",
    };
  },

  toJSON(message: DeleteConnectedSiteTagRequest): unknown {
    const obj: any = {};
    if (message.property !== "") {
      obj.property = message.property;
    }
    if (message.tagId !== "") {
      obj.tagId = message.tagId;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteConnectedSiteTagRequest>): DeleteConnectedSiteTagRequest {
    return DeleteConnectedSiteTagRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteConnectedSiteTagRequest>): DeleteConnectedSiteTagRequest {
    const message = createBaseDeleteConnectedSiteTagRequest();
    message.property = object.property ?? "";
    message.tagId = object.tagId ?? "";
    return message;
  },
};

function createBaseListConnectedSiteTagsRequest(): ListConnectedSiteTagsRequest {
  return { property: "" };
}

export const ListConnectedSiteTagsRequest: MessageFns<ListConnectedSiteTagsRequest> = {
  encode(message: ListConnectedSiteTagsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.property !== "") {
      writer.uint32(10).string(message.property);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListConnectedSiteTagsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListConnectedSiteTagsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.property = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListConnectedSiteTagsRequest {
    return { property: isSet(object.property) ? globalThis.String(object.property) : "" };
  },

  toJSON(message: ListConnectedSiteTagsRequest): unknown {
    const obj: any = {};
    if (message.property !== "") {
      obj.property = message.property;
    }
    return obj;
  },

  create(base?: DeepPartial<ListConnectedSiteTagsRequest>): ListConnectedSiteTagsRequest {
    return ListConnectedSiteTagsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListConnectedSiteTagsRequest>): ListConnectedSiteTagsRequest {
    const message = createBaseListConnectedSiteTagsRequest();
    message.property = object.property ?? "";
    return message;
  },
};

function createBaseListConnectedSiteTagsResponse(): ListConnectedSiteTagsResponse {
  return { connectedSiteTags: [] };
}

export const ListConnectedSiteTagsResponse: MessageFns<ListConnectedSiteTagsResponse> = {
  encode(message: ListConnectedSiteTagsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.connectedSiteTags) {
      ConnectedSiteTag.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListConnectedSiteTagsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListConnectedSiteTagsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.connectedSiteTags.push(ConnectedSiteTag.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListConnectedSiteTagsResponse {
    return {
      connectedSiteTags: globalThis.Array.isArray(object?.connectedSiteTags)
        ? object.connectedSiteTags.map((e: any) => ConnectedSiteTag.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ListConnectedSiteTagsResponse): unknown {
    const obj: any = {};
    if (message.connectedSiteTags?.length) {
      obj.connectedSiteTags = message.connectedSiteTags.map((e) => ConnectedSiteTag.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ListConnectedSiteTagsResponse>): ListConnectedSiteTagsResponse {
    return ListConnectedSiteTagsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListConnectedSiteTagsResponse>): ListConnectedSiteTagsResponse {
    const message = createBaseListConnectedSiteTagsResponse();
    message.connectedSiteTags = object.connectedSiteTags?.map((e) => ConnectedSiteTag.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCreateAdSenseLinkRequest(): CreateAdSenseLinkRequest {
  return { parent: "", adsenseLink: undefined };
}

export const CreateAdSenseLinkRequest: MessageFns<CreateAdSenseLinkRequest> = {
  encode(message: CreateAdSenseLinkRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.adsenseLink !== undefined) {
      AdSenseLink.encode(message.adsenseLink, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateAdSenseLinkRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateAdSenseLinkRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.adsenseLink = AdSenseLink.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateAdSenseLinkRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      adsenseLink: isSet(object.adsenseLink) ? AdSenseLink.fromJSON(object.adsenseLink) : undefined,
    };
  },

  toJSON(message: CreateAdSenseLinkRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.adsenseLink !== undefined) {
      obj.adsenseLink = AdSenseLink.toJSON(message.adsenseLink);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateAdSenseLinkRequest>): CreateAdSenseLinkRequest {
    return CreateAdSenseLinkRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateAdSenseLinkRequest>): CreateAdSenseLinkRequest {
    const message = createBaseCreateAdSenseLinkRequest();
    message.parent = object.parent ?? "";
    message.adsenseLink = (object.adsenseLink !== undefined && object.adsenseLink !== null)
      ? AdSenseLink.fromPartial(object.adsenseLink)
      : undefined;
    return message;
  },
};

function createBaseGetAdSenseLinkRequest(): GetAdSenseLinkRequest {
  return { name: "" };
}

export const GetAdSenseLinkRequest: MessageFns<GetAdSenseLinkRequest> = {
  encode(message: GetAdSenseLinkRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAdSenseLinkRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAdSenseLinkRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAdSenseLinkRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetAdSenseLinkRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetAdSenseLinkRequest>): GetAdSenseLinkRequest {
    return GetAdSenseLinkRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetAdSenseLinkRequest>): GetAdSenseLinkRequest {
    const message = createBaseGetAdSenseLinkRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseDeleteAdSenseLinkRequest(): DeleteAdSenseLinkRequest {
  return { name: "" };
}

export const DeleteAdSenseLinkRequest: MessageFns<DeleteAdSenseLinkRequest> = {
  encode(message: DeleteAdSenseLinkRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteAdSenseLinkRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteAdSenseLinkRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteAdSenseLinkRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteAdSenseLinkRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteAdSenseLinkRequest>): DeleteAdSenseLinkRequest {
    return DeleteAdSenseLinkRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteAdSenseLinkRequest>): DeleteAdSenseLinkRequest {
    const message = createBaseDeleteAdSenseLinkRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListAdSenseLinksRequest(): ListAdSenseLinksRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListAdSenseLinksRequest: MessageFns<ListAdSenseLinksRequest> = {
  encode(message: ListAdSenseLinksRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAdSenseLinksRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAdSenseLinksRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAdSenseLinksRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListAdSenseLinksRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListAdSenseLinksRequest>): ListAdSenseLinksRequest {
    return ListAdSenseLinksRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAdSenseLinksRequest>): ListAdSenseLinksRequest {
    const message = createBaseListAdSenseLinksRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListAdSenseLinksResponse(): ListAdSenseLinksResponse {
  return { adsenseLinks: [], nextPageToken: "" };
}

export const ListAdSenseLinksResponse: MessageFns<ListAdSenseLinksResponse> = {
  encode(message: ListAdSenseLinksResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.adsenseLinks) {
      AdSenseLink.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAdSenseLinksResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAdSenseLinksResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.adsenseLinks.push(AdSenseLink.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAdSenseLinksResponse {
    return {
      adsenseLinks: globalThis.Array.isArray(object?.adsenseLinks)
        ? object.adsenseLinks.map((e: any) => AdSenseLink.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListAdSenseLinksResponse): unknown {
    const obj: any = {};
    if (message.adsenseLinks?.length) {
      obj.adsenseLinks = message.adsenseLinks.map((e) => AdSenseLink.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListAdSenseLinksResponse>): ListAdSenseLinksResponse {
    return ListAdSenseLinksResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAdSenseLinksResponse>): ListAdSenseLinksResponse {
    const message = createBaseListAdSenseLinksResponse();
    message.adsenseLinks = object.adsenseLinks?.map((e) => AdSenseLink.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseFetchConnectedGa4PropertyRequest(): FetchConnectedGa4PropertyRequest {
  return { property: "" };
}

export const FetchConnectedGa4PropertyRequest: MessageFns<FetchConnectedGa4PropertyRequest> = {
  encode(message: FetchConnectedGa4PropertyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.property !== "") {
      writer.uint32(10).string(message.property);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FetchConnectedGa4PropertyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFetchConnectedGa4PropertyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.property = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FetchConnectedGa4PropertyRequest {
    return { property: isSet(object.property) ? globalThis.String(object.property) : "" };
  },

  toJSON(message: FetchConnectedGa4PropertyRequest): unknown {
    const obj: any = {};
    if (message.property !== "") {
      obj.property = message.property;
    }
    return obj;
  },

  create(base?: DeepPartial<FetchConnectedGa4PropertyRequest>): FetchConnectedGa4PropertyRequest {
    return FetchConnectedGa4PropertyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FetchConnectedGa4PropertyRequest>): FetchConnectedGa4PropertyRequest {
    const message = createBaseFetchConnectedGa4PropertyRequest();
    message.property = object.property ?? "";
    return message;
  },
};

function createBaseFetchConnectedGa4PropertyResponse(): FetchConnectedGa4PropertyResponse {
  return { property: "" };
}

export const FetchConnectedGa4PropertyResponse: MessageFns<FetchConnectedGa4PropertyResponse> = {
  encode(message: FetchConnectedGa4PropertyResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.property !== "") {
      writer.uint32(10).string(message.property);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FetchConnectedGa4PropertyResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFetchConnectedGa4PropertyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.property = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FetchConnectedGa4PropertyResponse {
    return { property: isSet(object.property) ? globalThis.String(object.property) : "" };
  },

  toJSON(message: FetchConnectedGa4PropertyResponse): unknown {
    const obj: any = {};
    if (message.property !== "") {
      obj.property = message.property;
    }
    return obj;
  },

  create(base?: DeepPartial<FetchConnectedGa4PropertyResponse>): FetchConnectedGa4PropertyResponse {
    return FetchConnectedGa4PropertyResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FetchConnectedGa4PropertyResponse>): FetchConnectedGa4PropertyResponse {
    const message = createBaseFetchConnectedGa4PropertyResponse();
    message.property = object.property ?? "";
    return message;
  },
};

function createBaseCreateEventCreateRuleRequest(): CreateEventCreateRuleRequest {
  return { parent: "", eventCreateRule: undefined };
}

export const CreateEventCreateRuleRequest: MessageFns<CreateEventCreateRuleRequest> = {
  encode(message: CreateEventCreateRuleRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.eventCreateRule !== undefined) {
      EventCreateRule.encode(message.eventCreateRule, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateEventCreateRuleRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateEventCreateRuleRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.eventCreateRule = EventCreateRule.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateEventCreateRuleRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      eventCreateRule: isSet(object.eventCreateRule) ? EventCreateRule.fromJSON(object.eventCreateRule) : undefined,
    };
  },

  toJSON(message: CreateEventCreateRuleRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.eventCreateRule !== undefined) {
      obj.eventCreateRule = EventCreateRule.toJSON(message.eventCreateRule);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateEventCreateRuleRequest>): CreateEventCreateRuleRequest {
    return CreateEventCreateRuleRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateEventCreateRuleRequest>): CreateEventCreateRuleRequest {
    const message = createBaseCreateEventCreateRuleRequest();
    message.parent = object.parent ?? "";
    message.eventCreateRule = (object.eventCreateRule !== undefined && object.eventCreateRule !== null)
      ? EventCreateRule.fromPartial(object.eventCreateRule)
      : undefined;
    return message;
  },
};

function createBaseUpdateEventCreateRuleRequest(): UpdateEventCreateRuleRequest {
  return { eventCreateRule: undefined, updateMask: undefined };
}

export const UpdateEventCreateRuleRequest: MessageFns<UpdateEventCreateRuleRequest> = {
  encode(message: UpdateEventCreateRuleRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.eventCreateRule !== undefined) {
      EventCreateRule.encode(message.eventCreateRule, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateEventCreateRuleRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateEventCreateRuleRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.eventCreateRule = EventCreateRule.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateEventCreateRuleRequest {
    return {
      eventCreateRule: isSet(object.eventCreateRule) ? EventCreateRule.fromJSON(object.eventCreateRule) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateEventCreateRuleRequest): unknown {
    const obj: any = {};
    if (message.eventCreateRule !== undefined) {
      obj.eventCreateRule = EventCreateRule.toJSON(message.eventCreateRule);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateEventCreateRuleRequest>): UpdateEventCreateRuleRequest {
    return UpdateEventCreateRuleRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateEventCreateRuleRequest>): UpdateEventCreateRuleRequest {
    const message = createBaseUpdateEventCreateRuleRequest();
    message.eventCreateRule = (object.eventCreateRule !== undefined && object.eventCreateRule !== null)
      ? EventCreateRule.fromPartial(object.eventCreateRule)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseDeleteEventCreateRuleRequest(): DeleteEventCreateRuleRequest {
  return { name: "" };
}

export const DeleteEventCreateRuleRequest: MessageFns<DeleteEventCreateRuleRequest> = {
  encode(message: DeleteEventCreateRuleRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteEventCreateRuleRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteEventCreateRuleRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteEventCreateRuleRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteEventCreateRuleRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteEventCreateRuleRequest>): DeleteEventCreateRuleRequest {
    return DeleteEventCreateRuleRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteEventCreateRuleRequest>): DeleteEventCreateRuleRequest {
    const message = createBaseDeleteEventCreateRuleRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseGetEventCreateRuleRequest(): GetEventCreateRuleRequest {
  return { name: "" };
}

export const GetEventCreateRuleRequest: MessageFns<GetEventCreateRuleRequest> = {
  encode(message: GetEventCreateRuleRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetEventCreateRuleRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetEventCreateRuleRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetEventCreateRuleRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetEventCreateRuleRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetEventCreateRuleRequest>): GetEventCreateRuleRequest {
    return GetEventCreateRuleRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetEventCreateRuleRequest>): GetEventCreateRuleRequest {
    const message = createBaseGetEventCreateRuleRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListEventCreateRulesRequest(): ListEventCreateRulesRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListEventCreateRulesRequest: MessageFns<ListEventCreateRulesRequest> = {
  encode(message: ListEventCreateRulesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListEventCreateRulesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListEventCreateRulesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListEventCreateRulesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListEventCreateRulesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListEventCreateRulesRequest>): ListEventCreateRulesRequest {
    return ListEventCreateRulesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListEventCreateRulesRequest>): ListEventCreateRulesRequest {
    const message = createBaseListEventCreateRulesRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListEventCreateRulesResponse(): ListEventCreateRulesResponse {
  return { eventCreateRules: [], nextPageToken: "" };
}

export const ListEventCreateRulesResponse: MessageFns<ListEventCreateRulesResponse> = {
  encode(message: ListEventCreateRulesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.eventCreateRules) {
      EventCreateRule.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListEventCreateRulesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListEventCreateRulesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.eventCreateRules.push(EventCreateRule.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListEventCreateRulesResponse {
    return {
      eventCreateRules: globalThis.Array.isArray(object?.eventCreateRules)
        ? object.eventCreateRules.map((e: any) => EventCreateRule.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListEventCreateRulesResponse): unknown {
    const obj: any = {};
    if (message.eventCreateRules?.length) {
      obj.eventCreateRules = message.eventCreateRules.map((e) => EventCreateRule.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListEventCreateRulesResponse>): ListEventCreateRulesResponse {
    return ListEventCreateRulesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListEventCreateRulesResponse>): ListEventCreateRulesResponse {
    const message = createBaseListEventCreateRulesResponse();
    message.eventCreateRules = object.eventCreateRules?.map((e) => EventCreateRule.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseCreateEventEditRuleRequest(): CreateEventEditRuleRequest {
  return { parent: "", eventEditRule: undefined };
}

export const CreateEventEditRuleRequest: MessageFns<CreateEventEditRuleRequest> = {
  encode(message: CreateEventEditRuleRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.eventEditRule !== undefined) {
      EventEditRule.encode(message.eventEditRule, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateEventEditRuleRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateEventEditRuleRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.eventEditRule = EventEditRule.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateEventEditRuleRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      eventEditRule: isSet(object.eventEditRule) ? EventEditRule.fromJSON(object.eventEditRule) : undefined,
    };
  },

  toJSON(message: CreateEventEditRuleRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.eventEditRule !== undefined) {
      obj.eventEditRule = EventEditRule.toJSON(message.eventEditRule);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateEventEditRuleRequest>): CreateEventEditRuleRequest {
    return CreateEventEditRuleRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateEventEditRuleRequest>): CreateEventEditRuleRequest {
    const message = createBaseCreateEventEditRuleRequest();
    message.parent = object.parent ?? "";
    message.eventEditRule = (object.eventEditRule !== undefined && object.eventEditRule !== null)
      ? EventEditRule.fromPartial(object.eventEditRule)
      : undefined;
    return message;
  },
};

function createBaseUpdateEventEditRuleRequest(): UpdateEventEditRuleRequest {
  return { eventEditRule: undefined, updateMask: undefined };
}

export const UpdateEventEditRuleRequest: MessageFns<UpdateEventEditRuleRequest> = {
  encode(message: UpdateEventEditRuleRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.eventEditRule !== undefined) {
      EventEditRule.encode(message.eventEditRule, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateEventEditRuleRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateEventEditRuleRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.eventEditRule = EventEditRule.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateEventEditRuleRequest {
    return {
      eventEditRule: isSet(object.eventEditRule) ? EventEditRule.fromJSON(object.eventEditRule) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateEventEditRuleRequest): unknown {
    const obj: any = {};
    if (message.eventEditRule !== undefined) {
      obj.eventEditRule = EventEditRule.toJSON(message.eventEditRule);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateEventEditRuleRequest>): UpdateEventEditRuleRequest {
    return UpdateEventEditRuleRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateEventEditRuleRequest>): UpdateEventEditRuleRequest {
    const message = createBaseUpdateEventEditRuleRequest();
    message.eventEditRule = (object.eventEditRule !== undefined && object.eventEditRule !== null)
      ? EventEditRule.fromPartial(object.eventEditRule)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseDeleteEventEditRuleRequest(): DeleteEventEditRuleRequest {
  return { name: "" };
}

export const DeleteEventEditRuleRequest: MessageFns<DeleteEventEditRuleRequest> = {
  encode(message: DeleteEventEditRuleRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteEventEditRuleRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteEventEditRuleRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteEventEditRuleRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteEventEditRuleRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteEventEditRuleRequest>): DeleteEventEditRuleRequest {
    return DeleteEventEditRuleRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteEventEditRuleRequest>): DeleteEventEditRuleRequest {
    const message = createBaseDeleteEventEditRuleRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseGetEventEditRuleRequest(): GetEventEditRuleRequest {
  return { name: "" };
}

export const GetEventEditRuleRequest: MessageFns<GetEventEditRuleRequest> = {
  encode(message: GetEventEditRuleRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetEventEditRuleRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetEventEditRuleRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetEventEditRuleRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetEventEditRuleRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetEventEditRuleRequest>): GetEventEditRuleRequest {
    return GetEventEditRuleRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetEventEditRuleRequest>): GetEventEditRuleRequest {
    const message = createBaseGetEventEditRuleRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListEventEditRulesRequest(): ListEventEditRulesRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListEventEditRulesRequest: MessageFns<ListEventEditRulesRequest> = {
  encode(message: ListEventEditRulesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListEventEditRulesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListEventEditRulesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListEventEditRulesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListEventEditRulesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListEventEditRulesRequest>): ListEventEditRulesRequest {
    return ListEventEditRulesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListEventEditRulesRequest>): ListEventEditRulesRequest {
    const message = createBaseListEventEditRulesRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListEventEditRulesResponse(): ListEventEditRulesResponse {
  return { eventEditRules: [], nextPageToken: "" };
}

export const ListEventEditRulesResponse: MessageFns<ListEventEditRulesResponse> = {
  encode(message: ListEventEditRulesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.eventEditRules) {
      EventEditRule.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListEventEditRulesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListEventEditRulesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.eventEditRules.push(EventEditRule.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListEventEditRulesResponse {
    return {
      eventEditRules: globalThis.Array.isArray(object?.eventEditRules)
        ? object.eventEditRules.map((e: any) => EventEditRule.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListEventEditRulesResponse): unknown {
    const obj: any = {};
    if (message.eventEditRules?.length) {
      obj.eventEditRules = message.eventEditRules.map((e) => EventEditRule.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListEventEditRulesResponse>): ListEventEditRulesResponse {
    return ListEventEditRulesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListEventEditRulesResponse>): ListEventEditRulesResponse {
    const message = createBaseListEventEditRulesResponse();
    message.eventEditRules = object.eventEditRules?.map((e) => EventEditRule.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseReorderEventEditRulesRequest(): ReorderEventEditRulesRequest {
  return { parent: "", eventEditRules: [] };
}

export const ReorderEventEditRulesRequest: MessageFns<ReorderEventEditRulesRequest> = {
  encode(message: ReorderEventEditRulesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    for (const v of message.eventEditRules) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReorderEventEditRulesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReorderEventEditRulesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.eventEditRules.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReorderEventEditRulesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      eventEditRules: globalThis.Array.isArray(object?.eventEditRules)
        ? object.eventEditRules.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ReorderEventEditRulesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.eventEditRules?.length) {
      obj.eventEditRules = message.eventEditRules;
    }
    return obj;
  },

  create(base?: DeepPartial<ReorderEventEditRulesRequest>): ReorderEventEditRulesRequest {
    return ReorderEventEditRulesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ReorderEventEditRulesRequest>): ReorderEventEditRulesRequest {
    const message = createBaseReorderEventEditRulesRequest();
    message.parent = object.parent ?? "";
    message.eventEditRules = object.eventEditRules?.map((e) => e) || [];
    return message;
  },
};

function createBaseCreateRollupPropertyRequest(): CreateRollupPropertyRequest {
  return { rollupProperty: undefined, sourceProperties: [] };
}

export const CreateRollupPropertyRequest: MessageFns<CreateRollupPropertyRequest> = {
  encode(message: CreateRollupPropertyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.rollupProperty !== undefined) {
      Property.encode(message.rollupProperty, writer.uint32(10).fork()).join();
    }
    for (const v of message.sourceProperties) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateRollupPropertyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateRollupPropertyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.rollupProperty = Property.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.sourceProperties.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateRollupPropertyRequest {
    return {
      rollupProperty: isSet(object.rollupProperty) ? Property.fromJSON(object.rollupProperty) : undefined,
      sourceProperties: globalThis.Array.isArray(object?.sourceProperties)
        ? object.sourceProperties.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: CreateRollupPropertyRequest): unknown {
    const obj: any = {};
    if (message.rollupProperty !== undefined) {
      obj.rollupProperty = Property.toJSON(message.rollupProperty);
    }
    if (message.sourceProperties?.length) {
      obj.sourceProperties = message.sourceProperties;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateRollupPropertyRequest>): CreateRollupPropertyRequest {
    return CreateRollupPropertyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateRollupPropertyRequest>): CreateRollupPropertyRequest {
    const message = createBaseCreateRollupPropertyRequest();
    message.rollupProperty = (object.rollupProperty !== undefined && object.rollupProperty !== null)
      ? Property.fromPartial(object.rollupProperty)
      : undefined;
    message.sourceProperties = object.sourceProperties?.map((e) => e) || [];
    return message;
  },
};

function createBaseCreateRollupPropertyResponse(): CreateRollupPropertyResponse {
  return { rollupProperty: undefined, rollupPropertySourceLinks: [] };
}

export const CreateRollupPropertyResponse: MessageFns<CreateRollupPropertyResponse> = {
  encode(message: CreateRollupPropertyResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.rollupProperty !== undefined) {
      Property.encode(message.rollupProperty, writer.uint32(10).fork()).join();
    }
    for (const v of message.rollupPropertySourceLinks) {
      RollupPropertySourceLink.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateRollupPropertyResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateRollupPropertyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.rollupProperty = Property.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.rollupPropertySourceLinks.push(RollupPropertySourceLink.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateRollupPropertyResponse {
    return {
      rollupProperty: isSet(object.rollupProperty) ? Property.fromJSON(object.rollupProperty) : undefined,
      rollupPropertySourceLinks: globalThis.Array.isArray(object?.rollupPropertySourceLinks)
        ? object.rollupPropertySourceLinks.map((e: any) => RollupPropertySourceLink.fromJSON(e))
        : [],
    };
  },

  toJSON(message: CreateRollupPropertyResponse): unknown {
    const obj: any = {};
    if (message.rollupProperty !== undefined) {
      obj.rollupProperty = Property.toJSON(message.rollupProperty);
    }
    if (message.rollupPropertySourceLinks?.length) {
      obj.rollupPropertySourceLinks = message.rollupPropertySourceLinks.map((e) => RollupPropertySourceLink.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<CreateRollupPropertyResponse>): CreateRollupPropertyResponse {
    return CreateRollupPropertyResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateRollupPropertyResponse>): CreateRollupPropertyResponse {
    const message = createBaseCreateRollupPropertyResponse();
    message.rollupProperty = (object.rollupProperty !== undefined && object.rollupProperty !== null)
      ? Property.fromPartial(object.rollupProperty)
      : undefined;
    message.rollupPropertySourceLinks =
      object.rollupPropertySourceLinks?.map((e) => RollupPropertySourceLink.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetRollupPropertySourceLinkRequest(): GetRollupPropertySourceLinkRequest {
  return { name: "" };
}

export const GetRollupPropertySourceLinkRequest: MessageFns<GetRollupPropertySourceLinkRequest> = {
  encode(message: GetRollupPropertySourceLinkRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetRollupPropertySourceLinkRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetRollupPropertySourceLinkRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetRollupPropertySourceLinkRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetRollupPropertySourceLinkRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetRollupPropertySourceLinkRequest>): GetRollupPropertySourceLinkRequest {
    return GetRollupPropertySourceLinkRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetRollupPropertySourceLinkRequest>): GetRollupPropertySourceLinkRequest {
    const message = createBaseGetRollupPropertySourceLinkRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListRollupPropertySourceLinksRequest(): ListRollupPropertySourceLinksRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListRollupPropertySourceLinksRequest: MessageFns<ListRollupPropertySourceLinksRequest> = {
  encode(message: ListRollupPropertySourceLinksRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListRollupPropertySourceLinksRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListRollupPropertySourceLinksRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListRollupPropertySourceLinksRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListRollupPropertySourceLinksRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListRollupPropertySourceLinksRequest>): ListRollupPropertySourceLinksRequest {
    return ListRollupPropertySourceLinksRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListRollupPropertySourceLinksRequest>): ListRollupPropertySourceLinksRequest {
    const message = createBaseListRollupPropertySourceLinksRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListRollupPropertySourceLinksResponse(): ListRollupPropertySourceLinksResponse {
  return { rollupPropertySourceLinks: [], nextPageToken: "" };
}

export const ListRollupPropertySourceLinksResponse: MessageFns<ListRollupPropertySourceLinksResponse> = {
  encode(message: ListRollupPropertySourceLinksResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.rollupPropertySourceLinks) {
      RollupPropertySourceLink.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListRollupPropertySourceLinksResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListRollupPropertySourceLinksResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.rollupPropertySourceLinks.push(RollupPropertySourceLink.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListRollupPropertySourceLinksResponse {
    return {
      rollupPropertySourceLinks: globalThis.Array.isArray(object?.rollupPropertySourceLinks)
        ? object.rollupPropertySourceLinks.map((e: any) => RollupPropertySourceLink.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListRollupPropertySourceLinksResponse): unknown {
    const obj: any = {};
    if (message.rollupPropertySourceLinks?.length) {
      obj.rollupPropertySourceLinks = message.rollupPropertySourceLinks.map((e) => RollupPropertySourceLink.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListRollupPropertySourceLinksResponse>): ListRollupPropertySourceLinksResponse {
    return ListRollupPropertySourceLinksResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListRollupPropertySourceLinksResponse>): ListRollupPropertySourceLinksResponse {
    const message = createBaseListRollupPropertySourceLinksResponse();
    message.rollupPropertySourceLinks =
      object.rollupPropertySourceLinks?.map((e) => RollupPropertySourceLink.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseCreateRollupPropertySourceLinkRequest(): CreateRollupPropertySourceLinkRequest {
  return { parent: "", rollupPropertySourceLink: undefined };
}

export const CreateRollupPropertySourceLinkRequest: MessageFns<CreateRollupPropertySourceLinkRequest> = {
  encode(message: CreateRollupPropertySourceLinkRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.rollupPropertySourceLink !== undefined) {
      RollupPropertySourceLink.encode(message.rollupPropertySourceLink, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateRollupPropertySourceLinkRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateRollupPropertySourceLinkRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.rollupPropertySourceLink = RollupPropertySourceLink.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateRollupPropertySourceLinkRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      rollupPropertySourceLink: isSet(object.rollupPropertySourceLink)
        ? RollupPropertySourceLink.fromJSON(object.rollupPropertySourceLink)
        : undefined,
    };
  },

  toJSON(message: CreateRollupPropertySourceLinkRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.rollupPropertySourceLink !== undefined) {
      obj.rollupPropertySourceLink = RollupPropertySourceLink.toJSON(message.rollupPropertySourceLink);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateRollupPropertySourceLinkRequest>): CreateRollupPropertySourceLinkRequest {
    return CreateRollupPropertySourceLinkRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateRollupPropertySourceLinkRequest>): CreateRollupPropertySourceLinkRequest {
    const message = createBaseCreateRollupPropertySourceLinkRequest();
    message.parent = object.parent ?? "";
    message.rollupPropertySourceLink =
      (object.rollupPropertySourceLink !== undefined && object.rollupPropertySourceLink !== null)
        ? RollupPropertySourceLink.fromPartial(object.rollupPropertySourceLink)
        : undefined;
    return message;
  },
};

function createBaseDeleteRollupPropertySourceLinkRequest(): DeleteRollupPropertySourceLinkRequest {
  return { name: "" };
}

export const DeleteRollupPropertySourceLinkRequest: MessageFns<DeleteRollupPropertySourceLinkRequest> = {
  encode(message: DeleteRollupPropertySourceLinkRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteRollupPropertySourceLinkRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteRollupPropertySourceLinkRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteRollupPropertySourceLinkRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteRollupPropertySourceLinkRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteRollupPropertySourceLinkRequest>): DeleteRollupPropertySourceLinkRequest {
    return DeleteRollupPropertySourceLinkRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteRollupPropertySourceLinkRequest>): DeleteRollupPropertySourceLinkRequest {
    const message = createBaseDeleteRollupPropertySourceLinkRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseProvisionSubpropertyRequest(): ProvisionSubpropertyRequest {
  return { subproperty: undefined, subpropertyEventFilter: undefined };
}

export const ProvisionSubpropertyRequest: MessageFns<ProvisionSubpropertyRequest> = {
  encode(message: ProvisionSubpropertyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.subproperty !== undefined) {
      Property.encode(message.subproperty, writer.uint32(18).fork()).join();
    }
    if (message.subpropertyEventFilter !== undefined) {
      SubpropertyEventFilter.encode(message.subpropertyEventFilter, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProvisionSubpropertyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProvisionSubpropertyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.subproperty = Property.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.subpropertyEventFilter = SubpropertyEventFilter.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProvisionSubpropertyRequest {
    return {
      subproperty: isSet(object.subproperty) ? Property.fromJSON(object.subproperty) : undefined,
      subpropertyEventFilter: isSet(object.subpropertyEventFilter)
        ? SubpropertyEventFilter.fromJSON(object.subpropertyEventFilter)
        : undefined,
    };
  },

  toJSON(message: ProvisionSubpropertyRequest): unknown {
    const obj: any = {};
    if (message.subproperty !== undefined) {
      obj.subproperty = Property.toJSON(message.subproperty);
    }
    if (message.subpropertyEventFilter !== undefined) {
      obj.subpropertyEventFilter = SubpropertyEventFilter.toJSON(message.subpropertyEventFilter);
    }
    return obj;
  },

  create(base?: DeepPartial<ProvisionSubpropertyRequest>): ProvisionSubpropertyRequest {
    return ProvisionSubpropertyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ProvisionSubpropertyRequest>): ProvisionSubpropertyRequest {
    const message = createBaseProvisionSubpropertyRequest();
    message.subproperty = (object.subproperty !== undefined && object.subproperty !== null)
      ? Property.fromPartial(object.subproperty)
      : undefined;
    message.subpropertyEventFilter =
      (object.subpropertyEventFilter !== undefined && object.subpropertyEventFilter !== null)
        ? SubpropertyEventFilter.fromPartial(object.subpropertyEventFilter)
        : undefined;
    return message;
  },
};

function createBaseProvisionSubpropertyResponse(): ProvisionSubpropertyResponse {
  return { subproperty: undefined, subpropertyEventFilter: undefined };
}

export const ProvisionSubpropertyResponse: MessageFns<ProvisionSubpropertyResponse> = {
  encode(message: ProvisionSubpropertyResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.subproperty !== undefined) {
      Property.encode(message.subproperty, writer.uint32(10).fork()).join();
    }
    if (message.subpropertyEventFilter !== undefined) {
      SubpropertyEventFilter.encode(message.subpropertyEventFilter, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProvisionSubpropertyResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProvisionSubpropertyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.subproperty = Property.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.subpropertyEventFilter = SubpropertyEventFilter.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProvisionSubpropertyResponse {
    return {
      subproperty: isSet(object.subproperty) ? Property.fromJSON(object.subproperty) : undefined,
      subpropertyEventFilter: isSet(object.subpropertyEventFilter)
        ? SubpropertyEventFilter.fromJSON(object.subpropertyEventFilter)
        : undefined,
    };
  },

  toJSON(message: ProvisionSubpropertyResponse): unknown {
    const obj: any = {};
    if (message.subproperty !== undefined) {
      obj.subproperty = Property.toJSON(message.subproperty);
    }
    if (message.subpropertyEventFilter !== undefined) {
      obj.subpropertyEventFilter = SubpropertyEventFilter.toJSON(message.subpropertyEventFilter);
    }
    return obj;
  },

  create(base?: DeepPartial<ProvisionSubpropertyResponse>): ProvisionSubpropertyResponse {
    return ProvisionSubpropertyResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ProvisionSubpropertyResponse>): ProvisionSubpropertyResponse {
    const message = createBaseProvisionSubpropertyResponse();
    message.subproperty = (object.subproperty !== undefined && object.subproperty !== null)
      ? Property.fromPartial(object.subproperty)
      : undefined;
    message.subpropertyEventFilter =
      (object.subpropertyEventFilter !== undefined && object.subpropertyEventFilter !== null)
        ? SubpropertyEventFilter.fromPartial(object.subpropertyEventFilter)
        : undefined;
    return message;
  },
};

function createBaseCreateSubpropertyEventFilterRequest(): CreateSubpropertyEventFilterRequest {
  return { parent: "", subpropertyEventFilter: undefined };
}

export const CreateSubpropertyEventFilterRequest: MessageFns<CreateSubpropertyEventFilterRequest> = {
  encode(message: CreateSubpropertyEventFilterRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.subpropertyEventFilter !== undefined) {
      SubpropertyEventFilter.encode(message.subpropertyEventFilter, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateSubpropertyEventFilterRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateSubpropertyEventFilterRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.subpropertyEventFilter = SubpropertyEventFilter.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateSubpropertyEventFilterRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      subpropertyEventFilter: isSet(object.subpropertyEventFilter)
        ? SubpropertyEventFilter.fromJSON(object.subpropertyEventFilter)
        : undefined,
    };
  },

  toJSON(message: CreateSubpropertyEventFilterRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.subpropertyEventFilter !== undefined) {
      obj.subpropertyEventFilter = SubpropertyEventFilter.toJSON(message.subpropertyEventFilter);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateSubpropertyEventFilterRequest>): CreateSubpropertyEventFilterRequest {
    return CreateSubpropertyEventFilterRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateSubpropertyEventFilterRequest>): CreateSubpropertyEventFilterRequest {
    const message = createBaseCreateSubpropertyEventFilterRequest();
    message.parent = object.parent ?? "";
    message.subpropertyEventFilter =
      (object.subpropertyEventFilter !== undefined && object.subpropertyEventFilter !== null)
        ? SubpropertyEventFilter.fromPartial(object.subpropertyEventFilter)
        : undefined;
    return message;
  },
};

function createBaseGetSubpropertyEventFilterRequest(): GetSubpropertyEventFilterRequest {
  return { name: "" };
}

export const GetSubpropertyEventFilterRequest: MessageFns<GetSubpropertyEventFilterRequest> = {
  encode(message: GetSubpropertyEventFilterRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetSubpropertyEventFilterRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSubpropertyEventFilterRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetSubpropertyEventFilterRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetSubpropertyEventFilterRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetSubpropertyEventFilterRequest>): GetSubpropertyEventFilterRequest {
    return GetSubpropertyEventFilterRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetSubpropertyEventFilterRequest>): GetSubpropertyEventFilterRequest {
    const message = createBaseGetSubpropertyEventFilterRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListSubpropertyEventFiltersRequest(): ListSubpropertyEventFiltersRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListSubpropertyEventFiltersRequest: MessageFns<ListSubpropertyEventFiltersRequest> = {
  encode(message: ListSubpropertyEventFiltersRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListSubpropertyEventFiltersRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSubpropertyEventFiltersRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListSubpropertyEventFiltersRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListSubpropertyEventFiltersRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListSubpropertyEventFiltersRequest>): ListSubpropertyEventFiltersRequest {
    return ListSubpropertyEventFiltersRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListSubpropertyEventFiltersRequest>): ListSubpropertyEventFiltersRequest {
    const message = createBaseListSubpropertyEventFiltersRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListSubpropertyEventFiltersResponse(): ListSubpropertyEventFiltersResponse {
  return { subpropertyEventFilters: [], nextPageToken: "" };
}

export const ListSubpropertyEventFiltersResponse: MessageFns<ListSubpropertyEventFiltersResponse> = {
  encode(message: ListSubpropertyEventFiltersResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.subpropertyEventFilters) {
      SubpropertyEventFilter.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListSubpropertyEventFiltersResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSubpropertyEventFiltersResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.subpropertyEventFilters.push(SubpropertyEventFilter.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListSubpropertyEventFiltersResponse {
    return {
      subpropertyEventFilters: globalThis.Array.isArray(object?.subpropertyEventFilters)
        ? object.subpropertyEventFilters.map((e: any) => SubpropertyEventFilter.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListSubpropertyEventFiltersResponse): unknown {
    const obj: any = {};
    if (message.subpropertyEventFilters?.length) {
      obj.subpropertyEventFilters = message.subpropertyEventFilters.map((e) => SubpropertyEventFilter.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListSubpropertyEventFiltersResponse>): ListSubpropertyEventFiltersResponse {
    return ListSubpropertyEventFiltersResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListSubpropertyEventFiltersResponse>): ListSubpropertyEventFiltersResponse {
    const message = createBaseListSubpropertyEventFiltersResponse();
    message.subpropertyEventFilters =
      object.subpropertyEventFilters?.map((e) => SubpropertyEventFilter.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseUpdateSubpropertyEventFilterRequest(): UpdateSubpropertyEventFilterRequest {
  return { subpropertyEventFilter: undefined, updateMask: undefined };
}

export const UpdateSubpropertyEventFilterRequest: MessageFns<UpdateSubpropertyEventFilterRequest> = {
  encode(message: UpdateSubpropertyEventFilterRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.subpropertyEventFilter !== undefined) {
      SubpropertyEventFilter.encode(message.subpropertyEventFilter, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateSubpropertyEventFilterRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateSubpropertyEventFilterRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.subpropertyEventFilter = SubpropertyEventFilter.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateSubpropertyEventFilterRequest {
    return {
      subpropertyEventFilter: isSet(object.subpropertyEventFilter)
        ? SubpropertyEventFilter.fromJSON(object.subpropertyEventFilter)
        : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateSubpropertyEventFilterRequest): unknown {
    const obj: any = {};
    if (message.subpropertyEventFilter !== undefined) {
      obj.subpropertyEventFilter = SubpropertyEventFilter.toJSON(message.subpropertyEventFilter);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateSubpropertyEventFilterRequest>): UpdateSubpropertyEventFilterRequest {
    return UpdateSubpropertyEventFilterRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateSubpropertyEventFilterRequest>): UpdateSubpropertyEventFilterRequest {
    const message = createBaseUpdateSubpropertyEventFilterRequest();
    message.subpropertyEventFilter =
      (object.subpropertyEventFilter !== undefined && object.subpropertyEventFilter !== null)
        ? SubpropertyEventFilter.fromPartial(object.subpropertyEventFilter)
        : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseDeleteSubpropertyEventFilterRequest(): DeleteSubpropertyEventFilterRequest {
  return { name: "" };
}

export const DeleteSubpropertyEventFilterRequest: MessageFns<DeleteSubpropertyEventFilterRequest> = {
  encode(message: DeleteSubpropertyEventFilterRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteSubpropertyEventFilterRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteSubpropertyEventFilterRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteSubpropertyEventFilterRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteSubpropertyEventFilterRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteSubpropertyEventFilterRequest>): DeleteSubpropertyEventFilterRequest {
    return DeleteSubpropertyEventFilterRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteSubpropertyEventFilterRequest>): DeleteSubpropertyEventFilterRequest {
    const message = createBaseDeleteSubpropertyEventFilterRequest();
    message.name = object.name ?? "";
    return message;
  },
};

/** Service Interface for the Analytics Admin API (GA4). */
export type AnalyticsAdminServiceDefinition = typeof AnalyticsAdminServiceDefinition;
export const AnalyticsAdminServiceDefinition = {
  name: "AnalyticsAdminService",
  fullName: "google.analytics.admin.v1alpha.AnalyticsAdminService",
  methods: {
    /** Lookup for a single Account. */
    getAccount: {
      name: "GetAccount",
      requestType: GetAccountRequest,
      requestStream: false,
      responseType: Account,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              28,
              18,
              26,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Returns all accounts accessible by the caller.
     *
     * Note that these accounts might not currently have GA4 properties.
     * Soft-deleted (ie: "trashed") accounts are excluded by default.
     * Returns an empty list if no relevant accounts are found.
     */
    listAccounts: {
      name: "ListAccounts",
      requestType: ListAccountsRequest,
      requestStream: false,
      responseType: ListAccountsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([19, 18, 17, 47, 118, 49, 97, 108, 112, 104, 97, 47, 97, 99, 99, 111, 117, 110, 116, 115]),
          ],
        },
      },
    },
    /**
     * Marks target Account as soft-deleted (ie: "trashed") and returns it.
     *
     * This API does not have a method to restore soft-deleted accounts.
     * However, they can be restored using the Trash Can UI.
     *
     * If the accounts are not restored before the expiration time, the account
     * and all child resources (eg: Properties, GoogleAdsLinks, Streams,
     * AccessBindings) will be permanently purged.
     * https://support.google.com/analytics/answer/6154772
     *
     * Returns an error if the target is not found.
     */
    deleteAccount: {
      name: "DeleteAccount",
      requestType: DeleteAccountRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              28,
              42,
              26,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Updates an account. */
    updateAccount: {
      name: "UpdateAccount",
      requestType: UpdateAccountRequest,
      requestStream: false,
      responseType: Account,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([19, 97, 99, 99, 111, 117, 110, 116, 44, 117, 112, 100, 97, 116, 101, 95, 109, 97, 115, 107]),
          ],
          578365826: [
            Buffer.from([
              45,
              58,
              7,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              50,
              34,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              46,
              110,
              97,
              109,
              101,
              61,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Requests a ticket for creating an account. */
    provisionAccountTicket: {
      name: "ProvisionAccountTicket",
      requestType: ProvisionAccountTicketRequest,
      requestStream: false,
      responseType: ProvisionAccountTicketResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              45,
              58,
              1,
              42,
              34,
              40,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              58,
              112,
              114,
              111,
              118,
              105,
              115,
              105,
              111,
              110,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              84,
              105,
              99,
              107,
              101,
              116,
            ]),
          ],
        },
      },
    },
    /** Returns summaries of all accounts accessible by the caller. */
    listAccountSummaries: {
      name: "ListAccountSummaries",
      requestType: ListAccountSummariesRequest,
      requestStream: false,
      responseType: ListAccountSummariesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              27,
              18,
              25,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              83,
              117,
              109,
              109,
              97,
              114,
              105,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Lookup for a single "GA4" Property. */
    getProperty: {
      name: "GetProperty",
      requestType: GetPropertyRequest,
      requestStream: false,
      responseType: Property,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              30,
              18,
              28,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Returns child Properties under the specified parent Account.
     *
     * Only "GA4" properties will be returned.
     * Properties will be excluded if the caller does not have access.
     * Soft-deleted (ie: "trashed") properties are excluded by default.
     * Returns an empty list if no relevant properties are found.
     */
    listProperties: {
      name: "ListProperties",
      requestType: ListPropertiesRequest,
      requestStream: false,
      responseType: ListPropertiesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              21,
              18,
              19,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Creates an "GA4" property with the specified location and attributes. */
    createProperty: {
      name: "CreateProperty",
      requestType: CreatePropertyRequest,
      requestStream: false,
      responseType: Property,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([8, 112, 114, 111, 112, 101, 114, 116, 121])],
          578365826: [
            Buffer.from([
              31,
              58,
              8,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              121,
              34,
              19,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Marks target Property as soft-deleted (ie: "trashed") and returns it.
     *
     * This API does not have a method to restore soft-deleted properties.
     * However, they can be restored using the Trash Can UI.
     *
     * If the properties are not restored before the expiration time, the Property
     * and all child resources (eg: GoogleAdsLinks, Streams, AccessBindings)
     * will be permanently purged.
     * https://support.google.com/analytics/answer/6154772
     *
     * Returns an error if the target is not found, or is not a GA4 Property.
     */
    deleteProperty: {
      name: "DeleteProperty",
      requestType: DeletePropertyRequest,
      requestStream: false,
      responseType: Property,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              30,
              42,
              28,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Updates a property. */
    updateProperty: {
      name: "UpdateProperty",
      requestType: UpdatePropertyRequest,
      requestStream: false,
      responseType: Property,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              20,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              121,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              49,
              58,
              8,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              121,
              50,
              37,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              121,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Creates a FirebaseLink.
     *
     * Properties can have at most one FirebaseLink.
     */
    createFirebaseLink: {
      name: "CreateFirebaseLink",
      requestType: CreateFirebaseLinkRequest,
      requestStream: false,
      responseType: FirebaseLink,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              20,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              102,
              105,
              114,
              101,
              98,
              97,
              115,
              101,
              95,
              108,
              105,
              110,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              61,
              58,
              13,
              102,
              105,
              114,
              101,
              98,
              97,
              115,
              101,
              95,
              108,
              105,
              110,
              107,
              34,
              44,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              125,
              47,
              102,
              105,
              114,
              101,
              98,
              97,
              115,
              101,
              76,
              105,
              110,
              107,
              115,
            ]),
          ],
        },
      },
    },
    /** Deletes a FirebaseLink on a property */
    deleteFirebaseLink: {
      name: "DeleteFirebaseLink",
      requestType: DeleteFirebaseLinkRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              46,
              42,
              44,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              102,
              105,
              114,
              101,
              98,
              97,
              115,
              101,
              76,
              105,
              110,
              107,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Lists FirebaseLinks on a property.
     * Properties can have at most one FirebaseLink.
     */
    listFirebaseLinks: {
      name: "ListFirebaseLinks",
      requestType: ListFirebaseLinksRequest,
      requestStream: false,
      responseType: ListFirebaseLinksResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              46,
              18,
              44,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              125,
              47,
              102,
              105,
              114,
              101,
              98,
              97,
              115,
              101,
              76,
              105,
              110,
              107,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Returns the Site Tag for the specified web stream.
     * Site Tags are immutable singletons.
     */
    getGlobalSiteTag: {
      name: "GetGlobalSiteTag",
      requestType: GetGlobalSiteTagRequest,
      requestStream: false,
      responseType: GlobalSiteTag,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              58,
              18,
              56,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              114,
              101,
              97,
              109,
              115,
              47,
              42,
              47,
              103,
              108,
              111,
              98,
              97,
              108,
              83,
              105,
              116,
              101,
              84,
              97,
              103,
              125,
            ]),
          ],
        },
      },
    },
    /** Creates a GoogleAdsLink. */
    createGoogleAdsLink: {
      name: "CreateGoogleAdsLink",
      requestType: CreateGoogleAdsLinkRequest,
      requestStream: false,
      responseType: GoogleAdsLink,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              22,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              103,
              111,
              111,
              103,
              108,
              101,
              95,
              97,
              100,
              115,
              95,
              108,
              105,
              110,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              64,
              58,
              15,
              103,
              111,
              111,
              103,
              108,
              101,
              95,
              97,
              100,
              115,
              95,
              108,
              105,
              110,
              107,
              34,
              45,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              125,
              47,
              103,
              111,
              111,
              103,
              108,
              101,
              65,
              100,
              115,
              76,
              105,
              110,
              107,
              115,
            ]),
          ],
        },
      },
    },
    /** Updates a GoogleAdsLink on a property */
    updateGoogleAdsLink: {
      name: "UpdateGoogleAdsLink",
      requestType: UpdateGoogleAdsLinkRequest,
      requestStream: false,
      responseType: GoogleAdsLink,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              27,
              103,
              111,
              111,
              103,
              108,
              101,
              95,
              97,
              100,
              115,
              95,
              108,
              105,
              110,
              107,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              80,
              58,
              15,
              103,
              111,
              111,
              103,
              108,
              101,
              95,
              97,
              100,
              115,
              95,
              108,
              105,
              110,
              107,
              50,
              61,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              103,
              111,
              111,
              103,
              108,
              101,
              95,
              97,
              100,
              115,
              95,
              108,
              105,
              110,
              107,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              103,
              111,
              111,
              103,
              108,
              101,
              65,
              100,
              115,
              76,
              105,
              110,
              107,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes a GoogleAdsLink on a property */
    deleteGoogleAdsLink: {
      name: "DeleteGoogleAdsLink",
      requestType: DeleteGoogleAdsLinkRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              47,
              42,
              45,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              103,
              111,
              111,
              103,
              108,
              101,
              65,
              100,
              115,
              76,
              105,
              110,
              107,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists GoogleAdsLinks on a property. */
    listGoogleAdsLinks: {
      name: "ListGoogleAdsLinks",
      requestType: ListGoogleAdsLinksRequest,
      requestStream: false,
      responseType: ListGoogleAdsLinksResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              47,
              18,
              45,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              125,
              47,
              103,
              111,
              111,
              103,
              108,
              101,
              65,
              100,
              115,
              76,
              105,
              110,
              107,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Get data sharing settings on an account.
     * Data sharing settings are singletons.
     */
    getDataSharingSettings: {
      name: "GetDataSharingSettings",
      requestType: GetDataSharingSettingsRequest,
      requestStream: false,
      responseType: DataSharingSettings,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              48,
              18,
              46,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              104,
              97,
              114,
              105,
              110,
              103,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              125,
            ]),
          ],
        },
      },
    },
    /** Lookup for a single "GA4" MeasurementProtocolSecret. */
    getMeasurementProtocolSecret: {
      name: "GetMeasurementProtocolSecret",
      requestType: GetMeasurementProtocolSecretRequest,
      requestStream: false,
      responseType: MeasurementProtocolSecret,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              73,
              18,
              71,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              114,
              101,
              97,
              109,
              115,
              47,
              42,
              47,
              109,
              101,
              97,
              115,
              117,
              114,
              101,
              109,
              101,
              110,
              116,
              80,
              114,
              111,
              116,
              111,
              99,
              111,
              108,
              83,
              101,
              99,
              114,
              101,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Returns child MeasurementProtocolSecrets under the specified parent
     * Property.
     */
    listMeasurementProtocolSecrets: {
      name: "ListMeasurementProtocolSecrets",
      requestType: ListMeasurementProtocolSecretsRequest,
      requestStream: false,
      responseType: ListMeasurementProtocolSecretsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              73,
              18,
              71,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              114,
              101,
              97,
              109,
              115,
              47,
              42,
              125,
              47,
              109,
              101,
              97,
              115,
              117,
              114,
              101,
              109,
              101,
              110,
              116,
              80,
              114,
              111,
              116,
              111,
              99,
              111,
              108,
              83,
              101,
              99,
              114,
              101,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /** Creates a measurement protocol secret. */
    createMeasurementProtocolSecret: {
      name: "CreateMeasurementProtocolSecret",
      requestType: CreateMeasurementProtocolSecretRequest,
      requestStream: false,
      responseType: MeasurementProtocolSecret,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              34,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              109,
              101,
              97,
              115,
              117,
              114,
              101,
              109,
              101,
              110,
              116,
              95,
              112,
              114,
              111,
              116,
              111,
              99,
              111,
              108,
              95,
              115,
              101,
              99,
              114,
              101,
              116,
            ]),
          ],
          578365826: [
            Buffer.from([
              102,
              58,
              27,
              109,
              101,
              97,
              115,
              117,
              114,
              101,
              109,
              101,
              110,
              116,
              95,
              112,
              114,
              111,
              116,
              111,
              99,
              111,
              108,
              95,
              115,
              101,
              99,
              114,
              101,
              116,
              34,
              71,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              114,
              101,
              97,
              109,
              115,
              47,
              42,
              125,
              47,
              109,
              101,
              97,
              115,
              117,
              114,
              101,
              109,
              101,
              110,
              116,
              80,
              114,
              111,
              116,
              111,
              99,
              111,
              108,
              83,
              101,
              99,
              114,
              101,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /** Deletes target MeasurementProtocolSecret. */
    deleteMeasurementProtocolSecret: {
      name: "DeleteMeasurementProtocolSecret",
      requestType: DeleteMeasurementProtocolSecretRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              73,
              42,
              71,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              114,
              101,
              97,
              109,
              115,
              47,
              42,
              47,
              109,
              101,
              97,
              115,
              117,
              114,
              101,
              109,
              101,
              110,
              116,
              80,
              114,
              111,
              116,
              111,
              99,
              111,
              108,
              83,
              101,
              99,
              114,
              101,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Updates a measurement protocol secret. */
    updateMeasurementProtocolSecret: {
      name: "UpdateMeasurementProtocolSecret",
      requestType: UpdateMeasurementProtocolSecretRequest,
      requestStream: false,
      responseType: MeasurementProtocolSecret,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              39,
              109,
              101,
              97,
              115,
              117,
              114,
              101,
              109,
              101,
              110,
              116,
              95,
              112,
              114,
              111,
              116,
              111,
              99,
              111,
              108,
              95,
              115,
              101,
              99,
              114,
              101,
              116,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              130,
              1,
              58,
              27,
              109,
              101,
              97,
              115,
              117,
              114,
              101,
              109,
              101,
              110,
              116,
              95,
              112,
              114,
              111,
              116,
              111,
              99,
              111,
              108,
              95,
              115,
              101,
              99,
              114,
              101,
              116,
              50,
              99,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              109,
              101,
              97,
              115,
              117,
              114,
              101,
              109,
              101,
              110,
              116,
              95,
              112,
              114,
              111,
              116,
              111,
              99,
              111,
              108,
              95,
              115,
              101,
              99,
              114,
              101,
              116,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              114,
              101,
              97,
              109,
              115,
              47,
              42,
              47,
              109,
              101,
              97,
              115,
              117,
              114,
              101,
              109,
              101,
              110,
              116,
              80,
              114,
              111,
              116,
              111,
              99,
              111,
              108,
              83,
              101,
              99,
              114,
              101,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Acknowledges the terms of user data collection for the specified property.
     *
     * This acknowledgement must be completed (either in the Google Analytics UI
     * or through this API) before MeasurementProtocolSecret resources may be
     * created.
     */
    acknowledgeUserDataCollection: {
      name: "AcknowledgeUserDataCollection",
      requestType: AcknowledgeUserDataCollectionRequest,
      requestStream: false,
      responseType: AcknowledgeUserDataCollectionResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              67,
              58,
              1,
              42,
              34,
              62,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              121,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              125,
              58,
              97,
              99,
              107,
              110,
              111,
              119,
              108,
              101,
              100,
              103,
              101,
              85,
              115,
              101,
              114,
              68,
              97,
              116,
              97,
              67,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
            ]),
          ],
        },
      },
    },
    /** Looks up a single SKAdNetworkConversionValueSchema. */
    getSKAdNetworkConversionValueSchema: {
      name: "GetSKAdNetworkConversionValueSchema",
      requestType: GetSKAdNetworkConversionValueSchemaRequest,
      requestStream: false,
      responseType: SKAdNetworkConversionValueSchema,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              79,
              18,
              77,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              114,
              101,
              97,
              109,
              115,
              47,
              42,
              47,
              115,
              75,
              65,
              100,
              78,
              101,
              116,
              119,
              111,
              114,
              107,
              67,
              111,
              110,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              86,
              97,
              108,
              117,
              101,
              83,
              99,
              104,
              101,
              109,
              97,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Creates a SKAdNetworkConversionValueSchema. */
    createSKAdNetworkConversionValueSchema: {
      name: "CreateSKAdNetworkConversionValueSchema",
      requestType: CreateSKAdNetworkConversionValueSchemaRequest,
      requestStream: false,
      responseType: SKAdNetworkConversionValueSchema,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              42,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              115,
              107,
              97,
              100,
              110,
              101,
              116,
              119,
              111,
              114,
              107,
              95,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              95,
              118,
              97,
              108,
              117,
              101,
              95,
              115,
              99,
              104,
              101,
              109,
              97,
            ]),
          ],
          578365826: [
            Buffer.from([
              116,
              58,
              35,
              115,
              107,
              97,
              100,
              110,
              101,
              116,
              119,
              111,
              114,
              107,
              95,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              95,
              118,
              97,
              108,
              117,
              101,
              95,
              115,
              99,
              104,
              101,
              109,
              97,
              34,
              77,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              114,
              101,
              97,
              109,
              115,
              47,
              42,
              125,
              47,
              115,
              75,
              65,
              100,
              78,
              101,
              116,
              119,
              111,
              114,
              107,
              67,
              111,
              110,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              86,
              97,
              108,
              117,
              101,
              83,
              99,
              104,
              101,
              109,
              97,
            ]),
          ],
        },
      },
    },
    /** Deletes target SKAdNetworkConversionValueSchema. */
    deleteSKAdNetworkConversionValueSchema: {
      name: "DeleteSKAdNetworkConversionValueSchema",
      requestType: DeleteSKAdNetworkConversionValueSchemaRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              79,
              42,
              77,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              114,
              101,
              97,
              109,
              115,
              47,
              42,
              47,
              115,
              75,
              65,
              100,
              78,
              101,
              116,
              119,
              111,
              114,
              107,
              67,
              111,
              110,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              86,
              97,
              108,
              117,
              101,
              83,
              99,
              104,
              101,
              109,
              97,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Updates a SKAdNetworkConversionValueSchema. */
    updateSKAdNetworkConversionValueSchema: {
      name: "UpdateSKAdNetworkConversionValueSchema",
      requestType: UpdateSKAdNetworkConversionValueSchemaRequest,
      requestStream: false,
      responseType: SKAdNetworkConversionValueSchema,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              47,
              115,
              107,
              97,
              100,
              110,
              101,
              116,
              119,
              111,
              114,
              107,
              95,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              95,
              118,
              97,
              108,
              117,
              101,
              95,
              115,
              99,
              104,
              101,
              109,
              97,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              152,
              1,
              58,
              35,
              115,
              107,
              97,
              100,
              110,
              101,
              116,
              119,
              111,
              114,
              107,
              95,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              95,
              118,
              97,
              108,
              117,
              101,
              95,
              115,
              99,
              104,
              101,
              109,
              97,
              50,
              113,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              115,
              107,
              97,
              100,
              110,
              101,
              116,
              119,
              111,
              114,
              107,
              95,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              95,
              118,
              97,
              108,
              117,
              101,
              95,
              115,
              99,
              104,
              101,
              109,
              97,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              114,
              101,
              97,
              109,
              115,
              47,
              42,
              47,
              115,
              75,
              65,
              100,
              78,
              101,
              116,
              119,
              111,
              114,
              107,
              67,
              111,
              110,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              86,
              97,
              108,
              117,
              101,
              83,
              99,
              104,
              101,
              109,
              97,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Lists SKAdNetworkConversionValueSchema on a stream.
     * Properties can have at most one SKAdNetworkConversionValueSchema.
     */
    listSKAdNetworkConversionValueSchemas: {
      name: "ListSKAdNetworkConversionValueSchemas",
      requestType: ListSKAdNetworkConversionValueSchemasRequest,
      requestStream: false,
      responseType: ListSKAdNetworkConversionValueSchemasResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              79,
              18,
              77,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              114,
              101,
              97,
              109,
              115,
              47,
              42,
              125,
              47,
              115,
              75,
              65,
              100,
              78,
              101,
              116,
              119,
              111,
              114,
              107,
              67,
              111,
              110,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              86,
              97,
              108,
              117,
              101,
              83,
              99,
              104,
              101,
              109,
              97,
            ]),
          ],
        },
      },
    },
    /**
     * Searches through all changes to an account or its children given the
     * specified set of filters.
     */
    searchChangeHistoryEvents: {
      name: "SearchChangeHistoryEvents",
      requestType: SearchChangeHistoryEventsRequest,
      requestStream: false,
      responseType: SearchChangeHistoryEventsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              60,
              58,
              1,
              42,
              34,
              55,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              61,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              125,
              58,
              115,
              101,
              97,
              114,
              99,
              104,
              67,
              104,
              97,
              110,
              103,
              101,
              72,
              105,
              115,
              116,
              111,
              114,
              121,
              69,
              118,
              101,
              110,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /** Lookup for Google Signals settings for a property. */
    getGoogleSignalsSettings: {
      name: "GetGoogleSignalsSettings",
      requestType: GetGoogleSignalsSettingsRequest,
      requestStream: false,
      responseType: GoogleSignalsSettings,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              52,
              18,
              50,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              103,
              111,
              111,
              103,
              108,
              101,
              83,
              105,
              103,
              110,
              97,
              108,
              115,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              125,
            ]),
          ],
        },
      },
    },
    /** Updates Google Signals settings for a property. */
    updateGoogleSignalsSettings: {
      name: "UpdateGoogleSignalsSettings",
      requestType: UpdateGoogleSignalsSettingsRequest,
      requestStream: false,
      responseType: GoogleSignalsSettings,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              35,
              103,
              111,
              111,
              103,
              108,
              101,
              95,
              115,
              105,
              103,
              110,
              97,
              108,
              115,
              95,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              101,
              58,
              23,
              103,
              111,
              111,
              103,
              108,
              101,
              95,
              115,
              105,
              103,
              110,
              97,
              108,
              115,
              95,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              50,
              74,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              103,
              111,
              111,
              103,
              108,
              101,
              95,
              115,
              105,
              103,
              110,
              97,
              108,
              115,
              95,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              103,
              111,
              111,
              103,
              108,
              101,
              83,
              105,
              103,
              110,
              97,
              108,
              115,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Deprecated: Use `CreateKeyEvent` instead.
     * Creates a conversion event with the specified attributes.
     *
     * @deprecated
     */
    createConversionEvent: {
      name: "CreateConversionEvent",
      requestType: CreateConversionEventRequest,
      requestStream: false,
      responseType: ConversionEvent,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              23,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              95,
              101,
              118,
              101,
              110,
              116,
            ]),
          ],
          578365826: [
            Buffer.from([
              67,
              58,
              16,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              95,
              101,
              118,
              101,
              110,
              116,
              34,
              47,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              125,
              47,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              69,
              118,
              101,
              110,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Deprecated: Use `UpdateKeyEvent` instead.
     * Updates a conversion event with the specified attributes.
     *
     * @deprecated
     */
    updateConversionEvent: {
      name: "UpdateConversionEvent",
      requestType: UpdateConversionEventRequest,
      requestStream: false,
      responseType: ConversionEvent,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              28,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              95,
              101,
              118,
              101,
              110,
              116,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              84,
              58,
              16,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              95,
              101,
              118,
              101,
              110,
              116,
              50,
              64,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              95,
              101,
              118,
              101,
              110,
              116,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              69,
              118,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Deprecated: Use `GetKeyEvent` instead.
     * Retrieve a single conversion event.
     *
     * @deprecated
     */
    getConversionEvent: {
      name: "GetConversionEvent",
      requestType: GetConversionEventRequest,
      requestStream: false,
      responseType: ConversionEvent,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              49,
              18,
              47,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              69,
              118,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Deprecated: Use `DeleteKeyEvent` instead.
     * Deletes a conversion event in a property.
     *
     * @deprecated
     */
    deleteConversionEvent: {
      name: "DeleteConversionEvent",
      requestType: DeleteConversionEventRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              49,
              42,
              47,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              69,
              118,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Deprecated: Use `ListKeyEvents` instead.
     * Returns a list of conversion events in the specified parent property.
     *
     * Returns an empty list if no conversion events are found.
     *
     * @deprecated
     */
    listConversionEvents: {
      name: "ListConversionEvents",
      requestType: ListConversionEventsRequest,
      requestStream: false,
      responseType: ListConversionEventsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              49,
              18,
              47,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              125,
              47,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              69,
              118,
              101,
              110,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /** Creates a Key Event. */
    createKeyEvent: {
      name: "CreateKeyEvent",
      requestType: CreateKeyEventRequest,
      requestStream: false,
      responseType: KeyEvent,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([16, 112, 97, 114, 101, 110, 116, 44, 107, 101, 121, 95, 101, 118, 101, 110, 116])],
          578365826: [
            Buffer.from([
              53,
              58,
              9,
              107,
              101,
              121,
              95,
              101,
              118,
              101,
              110,
              116,
              34,
              40,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              125,
              47,
              107,
              101,
              121,
              69,
              118,
              101,
              110,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /** Updates a Key Event. */
    updateKeyEvent: {
      name: "UpdateKeyEvent",
      requestType: UpdateKeyEventRequest,
      requestStream: false,
      responseType: KeyEvent,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              21,
              107,
              101,
              121,
              95,
              101,
              118,
              101,
              110,
              116,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              63,
              58,
              9,
              107,
              101,
              121,
              95,
              101,
              118,
              101,
              110,
              116,
              50,
              50,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              107,
              101,
              121,
              95,
              101,
              118,
              101,
              110,
              116,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              107,
              101,
              121,
              69,
              118,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Retrieve a single Key Event. */
    getKeyEvent: {
      name: "GetKeyEvent",
      requestType: GetKeyEventRequest,
      requestStream: false,
      responseType: KeyEvent,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              42,
              18,
              40,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              107,
              101,
              121,
              69,
              118,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes a Key Event. */
    deleteKeyEvent: {
      name: "DeleteKeyEvent",
      requestType: DeleteKeyEventRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              42,
              42,
              40,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              107,
              101,
              121,
              69,
              118,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Returns a list of Key Events in the specified parent property.
     * Returns an empty list if no Key Events are found.
     */
    listKeyEvents: {
      name: "ListKeyEvents",
      requestType: ListKeyEventsRequest,
      requestStream: false,
      responseType: ListKeyEventsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              42,
              18,
              40,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              125,
              47,
              107,
              101,
              121,
              69,
              118,
              101,
              110,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /** Look up a single DisplayVideo360AdvertiserLink */
    getDisplayVideo360AdvertiserLink: {
      name: "GetDisplayVideo360AdvertiserLink",
      requestType: GetDisplayVideo360AdvertiserLinkRequest,
      requestStream: false,
      responseType: DisplayVideo360AdvertiserLink,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              63,
              18,
              61,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              100,
              105,
              115,
              112,
              108,
              97,
              121,
              86,
              105,
              100,
              101,
              111,
              51,
              54,
              48,
              65,
              100,
              118,
              101,
              114,
              116,
              105,
              115,
              101,
              114,
              76,
              105,
              110,
              107,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists all DisplayVideo360AdvertiserLinks on a property. */
    listDisplayVideo360AdvertiserLinks: {
      name: "ListDisplayVideo360AdvertiserLinks",
      requestType: ListDisplayVideo360AdvertiserLinksRequest,
      requestStream: false,
      responseType: ListDisplayVideo360AdvertiserLinksResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              63,
              18,
              61,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              125,
              47,
              100,
              105,
              115,
              112,
              108,
              97,
              121,
              86,
              105,
              100,
              101,
              111,
              51,
              54,
              48,
              65,
              100,
              118,
              101,
              114,
              116,
              105,
              115,
              101,
              114,
              76,
              105,
              110,
              107,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Creates a DisplayVideo360AdvertiserLink.
     * This can only be utilized by users who have proper authorization both on
     * the Google Analytics property and on the Display & Video 360 advertiser.
     * Users who do not have access to the Display & Video 360 advertiser should
     * instead seek to create a DisplayVideo360LinkProposal.
     */
    createDisplayVideo360AdvertiserLink: {
      name: "CreateDisplayVideo360AdvertiserLink",
      requestType: CreateDisplayVideo360AdvertiserLinkRequest,
      requestStream: false,
      responseType: DisplayVideo360AdvertiserLink,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              40,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              100,
              105,
              115,
              112,
              108,
              97,
              121,
              95,
              118,
              105,
              100,
              101,
              111,
              95,
              51,
              54,
              48,
              95,
              97,
              100,
              118,
              101,
              114,
              116,
              105,
              115,
              101,
              114,
              95,
              108,
              105,
              110,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              98,
              58,
              33,
              100,
              105,
              115,
              112,
              108,
              97,
              121,
              95,
              118,
              105,
              100,
              101,
              111,
              95,
              51,
              54,
              48,
              95,
              97,
              100,
              118,
              101,
              114,
              116,
              105,
              115,
              101,
              114,
              95,
              108,
              105,
              110,
              107,
              34,
              61,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              125,
              47,
              100,
              105,
              115,
              112,
              108,
              97,
              121,
              86,
              105,
              100,
              101,
              111,
              51,
              54,
              48,
              65,
              100,
              118,
              101,
              114,
              116,
              105,
              115,
              101,
              114,
              76,
              105,
              110,
              107,
              115,
            ]),
          ],
        },
      },
    },
    /** Deletes a DisplayVideo360AdvertiserLink on a property. */
    deleteDisplayVideo360AdvertiserLink: {
      name: "DeleteDisplayVideo360AdvertiserLink",
      requestType: DeleteDisplayVideo360AdvertiserLinkRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              63,
              42,
              61,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              100,
              105,
              115,
              112,
              108,
              97,
              121,
              86,
              105,
              100,
              101,
              111,
              51,
              54,
              48,
              65,
              100,
              118,
              101,
              114,
              116,
              105,
              115,
              101,
              114,
              76,
              105,
              110,
              107,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Updates a DisplayVideo360AdvertiserLink on a property. */
    updateDisplayVideo360AdvertiserLink: {
      name: "UpdateDisplayVideo360AdvertiserLink",
      requestType: UpdateDisplayVideo360AdvertiserLinkRequest,
      requestStream: false,
      responseType: DisplayVideo360AdvertiserLink,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              45,
              100,
              105,
              115,
              112,
              108,
              97,
              121,
              95,
              118,
              105,
              100,
              101,
              111,
              95,
              51,
              54,
              48,
              95,
              97,
              100,
              118,
              101,
              114,
              116,
              105,
              115,
              101,
              114,
              95,
              108,
              105,
              110,
              107,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              132,
              1,
              58,
              33,
              100,
              105,
              115,
              112,
              108,
              97,
              121,
              95,
              118,
              105,
              100,
              101,
              111,
              95,
              51,
              54,
              48,
              95,
              97,
              100,
              118,
              101,
              114,
              116,
              105,
              115,
              101,
              114,
              95,
              108,
              105,
              110,
              107,
              50,
              95,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              100,
              105,
              115,
              112,
              108,
              97,
              121,
              95,
              118,
              105,
              100,
              101,
              111,
              95,
              51,
              54,
              48,
              95,
              97,
              100,
              118,
              101,
              114,
              116,
              105,
              115,
              101,
              114,
              95,
              108,
              105,
              110,
              107,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              100,
              105,
              115,
              112,
              108,
              97,
              121,
              86,
              105,
              100,
              101,
              111,
              51,
              54,
              48,
              65,
              100,
              118,
              101,
              114,
              116,
              105,
              115,
              101,
              114,
              76,
              105,
              110,
              107,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lookup for a single DisplayVideo360AdvertiserLinkProposal. */
    getDisplayVideo360AdvertiserLinkProposal: {
      name: "GetDisplayVideo360AdvertiserLinkProposal",
      requestType: GetDisplayVideo360AdvertiserLinkProposalRequest,
      requestStream: false,
      responseType: DisplayVideo360AdvertiserLinkProposal,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              71,
              18,
              69,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              100,
              105,
              115,
              112,
              108,
              97,
              121,
              86,
              105,
              100,
              101,
              111,
              51,
              54,
              48,
              65,
              100,
              118,
              101,
              114,
              116,
              105,
              115,
              101,
              114,
              76,
              105,
              110,
              107,
              80,
              114,
              111,
              112,
              111,
              115,
              97,
              108,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists DisplayVideo360AdvertiserLinkProposals on a property. */
    listDisplayVideo360AdvertiserLinkProposals: {
      name: "ListDisplayVideo360AdvertiserLinkProposals",
      requestType: ListDisplayVideo360AdvertiserLinkProposalsRequest,
      requestStream: false,
      responseType: ListDisplayVideo360AdvertiserLinkProposalsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              71,
              18,
              69,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              125,
              47,
              100,
              105,
              115,
              112,
              108,
              97,
              121,
              86,
              105,
              100,
              101,
              111,
              51,
              54,
              48,
              65,
              100,
              118,
              101,
              114,
              116,
              105,
              115,
              101,
              114,
              76,
              105,
              110,
              107,
              80,
              114,
              111,
              112,
              111,
              115,
              97,
              108,
              115,
            ]),
          ],
        },
      },
    },
    /** Creates a DisplayVideo360AdvertiserLinkProposal. */
    createDisplayVideo360AdvertiserLinkProposal: {
      name: "CreateDisplayVideo360AdvertiserLinkProposal",
      requestType: CreateDisplayVideo360AdvertiserLinkProposalRequest,
      requestStream: false,
      responseType: DisplayVideo360AdvertiserLinkProposal,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              49,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              100,
              105,
              115,
              112,
              108,
              97,
              121,
              95,
              118,
              105,
              100,
              101,
              111,
              95,
              51,
              54,
              48,
              95,
              97,
              100,
              118,
              101,
              114,
              116,
              105,
              115,
              101,
              114,
              95,
              108,
              105,
              110,
              107,
              95,
              112,
              114,
              111,
              112,
              111,
              115,
              97,
              108,
            ]),
          ],
          578365826: [
            Buffer.from([
              115,
              58,
              42,
              100,
              105,
              115,
              112,
              108,
              97,
              121,
              95,
              118,
              105,
              100,
              101,
              111,
              95,
              51,
              54,
              48,
              95,
              97,
              100,
              118,
              101,
              114,
              116,
              105,
              115,
              101,
              114,
              95,
              108,
              105,
              110,
              107,
              95,
              112,
              114,
              111,
              112,
              111,
              115,
              97,
              108,
              34,
              69,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              125,
              47,
              100,
              105,
              115,
              112,
              108,
              97,
              121,
              86,
              105,
              100,
              101,
              111,
              51,
              54,
              48,
              65,
              100,
              118,
              101,
              114,
              116,
              105,
              115,
              101,
              114,
              76,
              105,
              110,
              107,
              80,
              114,
              111,
              112,
              111,
              115,
              97,
              108,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Deletes a DisplayVideo360AdvertiserLinkProposal on a property.
     * This can only be used on cancelled proposals.
     */
    deleteDisplayVideo360AdvertiserLinkProposal: {
      name: "DeleteDisplayVideo360AdvertiserLinkProposal",
      requestType: DeleteDisplayVideo360AdvertiserLinkProposalRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              71,
              42,
              69,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              100,
              105,
              115,
              112,
              108,
              97,
              121,
              86,
              105,
              100,
              101,
              111,
              51,
              54,
              48,
              65,
              100,
              118,
              101,
              114,
              116,
              105,
              115,
              101,
              114,
              76,
              105,
              110,
              107,
              80,
              114,
              111,
              112,
              111,
              115,
              97,
              108,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Approves a DisplayVideo360AdvertiserLinkProposal.
     * The DisplayVideo360AdvertiserLinkProposal will be deleted and a new
     * DisplayVideo360AdvertiserLink will be created.
     */
    approveDisplayVideo360AdvertiserLinkProposal: {
      name: "ApproveDisplayVideo360AdvertiserLinkProposal",
      requestType: ApproveDisplayVideo360AdvertiserLinkProposalRequest,
      requestStream: false,
      responseType: ApproveDisplayVideo360AdvertiserLinkProposalResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              82,
              58,
              1,
              42,
              34,
              77,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              100,
              105,
              115,
              112,
              108,
              97,
              121,
              86,
              105,
              100,
              101,
              111,
              51,
              54,
              48,
              65,
              100,
              118,
              101,
              114,
              116,
              105,
              115,
              101,
              114,
              76,
              105,
              110,
              107,
              80,
              114,
              111,
              112,
              111,
              115,
              97,
              108,
              115,
              47,
              42,
              125,
              58,
              97,
              112,
              112,
              114,
              111,
              118,
              101,
            ]),
          ],
        },
      },
    },
    /**
     * Cancels a DisplayVideo360AdvertiserLinkProposal.
     * Cancelling can mean either:
     * - Declining a proposal initiated from Display & Video 360
     * - Withdrawing a proposal initiated from Google Analytics
     * After being cancelled, a proposal will eventually be deleted automatically.
     */
    cancelDisplayVideo360AdvertiserLinkProposal: {
      name: "CancelDisplayVideo360AdvertiserLinkProposal",
      requestType: CancelDisplayVideo360AdvertiserLinkProposalRequest,
      requestStream: false,
      responseType: DisplayVideo360AdvertiserLinkProposal,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              81,
              58,
              1,
              42,
              34,
              76,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              100,
              105,
              115,
              112,
              108,
              97,
              121,
              86,
              105,
              100,
              101,
              111,
              51,
              54,
              48,
              65,
              100,
              118,
              101,
              114,
              116,
              105,
              115,
              101,
              114,
              76,
              105,
              110,
              107,
              80,
              114,
              111,
              112,
              111,
              115,
              97,
              108,
              115,
              47,
              42,
              125,
              58,
              99,
              97,
              110,
              99,
              101,
              108,
            ]),
          ],
        },
      },
    },
    /** Creates a CustomDimension. */
    createCustomDimension: {
      name: "CreateCustomDimension",
      requestType: CreateCustomDimensionRequest,
      requestStream: false,
      responseType: CustomDimension,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              23,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              99,
              117,
              115,
              116,
              111,
              109,
              95,
              100,
              105,
              109,
              101,
              110,
              115,
              105,
              111,
              110,
            ]),
          ],
          578365826: [
            Buffer.from([
              67,
              58,
              16,
              99,
              117,
              115,
              116,
              111,
              109,
              95,
              100,
              105,
              109,
              101,
              110,
              115,
              105,
              111,
              110,
              34,
              47,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              125,
              47,
              99,
              117,
              115,
              116,
              111,
              109,
              68,
              105,
              109,
              101,
              110,
              115,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /** Updates a CustomDimension on a property. */
    updateCustomDimension: {
      name: "UpdateCustomDimension",
      requestType: UpdateCustomDimensionRequest,
      requestStream: false,
      responseType: CustomDimension,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              28,
              99,
              117,
              115,
              116,
              111,
              109,
              95,
              100,
              105,
              109,
              101,
              110,
              115,
              105,
              111,
              110,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              84,
              58,
              16,
              99,
              117,
              115,
              116,
              111,
              109,
              95,
              100,
              105,
              109,
              101,
              110,
              115,
              105,
              111,
              110,
              50,
              64,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              99,
              117,
              115,
              116,
              111,
              109,
              95,
              100,
              105,
              109,
              101,
              110,
              115,
              105,
              111,
              110,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              99,
              117,
              115,
              116,
              111,
              109,
              68,
              105,
              109,
              101,
              110,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists CustomDimensions on a property. */
    listCustomDimensions: {
      name: "ListCustomDimensions",
      requestType: ListCustomDimensionsRequest,
      requestStream: false,
      responseType: ListCustomDimensionsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              49,
              18,
              47,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              125,
              47,
              99,
              117,
              115,
              116,
              111,
              109,
              68,
              105,
              109,
              101,
              110,
              115,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /** Archives a CustomDimension on a property. */
    archiveCustomDimension: {
      name: "ArchiveCustomDimension",
      requestType: ArchiveCustomDimensionRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              60,
              58,
              1,
              42,
              34,
              55,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              99,
              117,
              115,
              116,
              111,
              109,
              68,
              105,
              109,
              101,
              110,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              58,
              97,
              114,
              99,
              104,
              105,
              118,
              101,
            ]),
          ],
        },
      },
    },
    /** Lookup for a single CustomDimension. */
    getCustomDimension: {
      name: "GetCustomDimension",
      requestType: GetCustomDimensionRequest,
      requestStream: false,
      responseType: CustomDimension,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              49,
              18,
              47,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              99,
              117,
              115,
              116,
              111,
              109,
              68,
              105,
              109,
              101,
              110,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Creates a CustomMetric. */
    createCustomMetric: {
      name: "CreateCustomMetric",
      requestType: CreateCustomMetricRequest,
      requestStream: false,
      responseType: CustomMetric,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              20,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              99,
              117,
              115,
              116,
              111,
              109,
              95,
              109,
              101,
              116,
              114,
              105,
              99,
            ]),
          ],
          578365826: [
            Buffer.from([
              61,
              58,
              13,
              99,
              117,
              115,
              116,
              111,
              109,
              95,
              109,
              101,
              116,
              114,
              105,
              99,
              34,
              44,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              125,
              47,
              99,
              117,
              115,
              116,
              111,
              109,
              77,
              101,
              116,
              114,
              105,
              99,
              115,
            ]),
          ],
        },
      },
    },
    /** Updates a CustomMetric on a property. */
    updateCustomMetric: {
      name: "UpdateCustomMetric",
      requestType: UpdateCustomMetricRequest,
      requestStream: false,
      responseType: CustomMetric,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              25,
              99,
              117,
              115,
              116,
              111,
              109,
              95,
              109,
              101,
              116,
              114,
              105,
              99,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              75,
              58,
              13,
              99,
              117,
              115,
              116,
              111,
              109,
              95,
              109,
              101,
              116,
              114,
              105,
              99,
              50,
              58,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              99,
              117,
              115,
              116,
              111,
              109,
              95,
              109,
              101,
              116,
              114,
              105,
              99,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              99,
              117,
              115,
              116,
              111,
              109,
              77,
              101,
              116,
              114,
              105,
              99,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists CustomMetrics on a property. */
    listCustomMetrics: {
      name: "ListCustomMetrics",
      requestType: ListCustomMetricsRequest,
      requestStream: false,
      responseType: ListCustomMetricsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              46,
              18,
              44,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              125,
              47,
              99,
              117,
              115,
              116,
              111,
              109,
              77,
              101,
              116,
              114,
              105,
              99,
              115,
            ]),
          ],
        },
      },
    },
    /** Archives a CustomMetric on a property. */
    archiveCustomMetric: {
      name: "ArchiveCustomMetric",
      requestType: ArchiveCustomMetricRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              57,
              58,
              1,
              42,
              34,
              52,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              99,
              117,
              115,
              116,
              111,
              109,
              77,
              101,
              116,
              114,
              105,
              99,
              115,
              47,
              42,
              125,
              58,
              97,
              114,
              99,
              104,
              105,
              118,
              101,
            ]),
          ],
        },
      },
    },
    /** Lookup for a single CustomMetric. */
    getCustomMetric: {
      name: "GetCustomMetric",
      requestType: GetCustomMetricRequest,
      requestStream: false,
      responseType: CustomMetric,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              46,
              18,
              44,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              99,
              117,
              115,
              116,
              111,
              109,
              77,
              101,
              116,
              114,
              105,
              99,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Returns the singleton data retention settings for this property. */
    getDataRetentionSettings: {
      name: "GetDataRetentionSettings",
      requestType: GetDataRetentionSettingsRequest,
      requestStream: false,
      responseType: DataRetentionSettings,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              52,
              18,
              50,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              82,
              101,
              116,
              101,
              110,
              116,
              105,
              111,
              110,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              125,
            ]),
          ],
        },
      },
    },
    /** Updates the singleton data retention settings for this property. */
    updateDataRetentionSettings: {
      name: "UpdateDataRetentionSettings",
      requestType: UpdateDataRetentionSettingsRequest,
      requestStream: false,
      responseType: DataRetentionSettings,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              35,
              100,
              97,
              116,
              97,
              95,
              114,
              101,
              116,
              101,
              110,
              116,
              105,
              111,
              110,
              95,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              101,
              58,
              23,
              100,
              97,
              116,
              97,
              95,
              114,
              101,
              116,
              101,
              110,
              116,
              105,
              111,
              110,
              95,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              50,
              74,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              100,
              97,
              116,
              97,
              95,
              114,
              101,
              116,
              101,
              110,
              116,
              105,
              111,
              110,
              95,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              82,
              101,
              116,
              101,
              110,
              116,
              105,
              111,
              110,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              125,
            ]),
          ],
        },
      },
    },
    /** Creates a DataStream. */
    createDataStream: {
      name: "CreateDataStream",
      requestType: CreateDataStreamRequest,
      requestStream: false,
      responseType: DataStream,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([18, 112, 97, 114, 101, 110, 116, 44, 100, 97, 116, 97, 95, 115, 116, 114, 101, 97, 109])],
          578365826: [
            Buffer.from([
              57,
              58,
              11,
              100,
              97,
              116,
              97,
              95,
              115,
              116,
              114,
              101,
              97,
              109,
              34,
              42,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              125,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              114,
              101,
              97,
              109,
              115,
            ]),
          ],
        },
      },
    },
    /** Deletes a DataStream on a property. */
    deleteDataStream: {
      name: "DeleteDataStream",
      requestType: DeleteDataStreamRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              44,
              42,
              42,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              114,
              101,
              97,
              109,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Updates a DataStream on a property. */
    updateDataStream: {
      name: "UpdateDataStream",
      requestType: UpdateDataStreamRequest,
      requestStream: false,
      responseType: DataStream,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              23,
              100,
              97,
              116,
              97,
              95,
              115,
              116,
              114,
              101,
              97,
              109,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              69,
              58,
              11,
              100,
              97,
              116,
              97,
              95,
              115,
              116,
              114,
              101,
              97,
              109,
              50,
              54,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              100,
              97,
              116,
              97,
              95,
              115,
              116,
              114,
              101,
              97,
              109,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              114,
              101,
              97,
              109,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists DataStreams on a property. */
    listDataStreams: {
      name: "ListDataStreams",
      requestType: ListDataStreamsRequest,
      requestStream: false,
      responseType: ListDataStreamsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              44,
              18,
              42,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              125,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              114,
              101,
              97,
              109,
              115,
            ]),
          ],
        },
      },
    },
    /** Lookup for a single DataStream. */
    getDataStream: {
      name: "GetDataStream",
      requestType: GetDataStreamRequest,
      requestStream: false,
      responseType: DataStream,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              44,
              18,
              42,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              114,
              101,
              97,
              109,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Lookup for a single Audience.
     * Audiences created before 2020 may not be supported.
     * Default audiences will not show filter definitions.
     */
    getAudience: {
      name: "GetAudience",
      requestType: GetAudienceRequest,
      requestStream: false,
      responseType: Audience,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              42,
              18,
              40,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              97,
              117,
              100,
              105,
              101,
              110,
              99,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Lists Audiences on a property.
     * Audiences created before 2020 may not be supported.
     * Default audiences will not show filter definitions.
     */
    listAudiences: {
      name: "ListAudiences",
      requestType: ListAudiencesRequest,
      requestStream: false,
      responseType: ListAudiencesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              42,
              18,
              40,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              125,
              47,
              97,
              117,
              100,
              105,
              101,
              110,
              99,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Creates an Audience. */
    createAudience: {
      name: "CreateAudience",
      requestType: CreateAudienceRequest,
      requestStream: false,
      responseType: Audience,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([15, 112, 97, 114, 101, 110, 116, 44, 97, 117, 100, 105, 101, 110, 99, 101])],
          578365826: [
            Buffer.from([
              52,
              58,
              8,
              97,
              117,
              100,
              105,
              101,
              110,
              99,
              101,
              34,
              40,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              125,
              47,
              97,
              117,
              100,
              105,
              101,
              110,
              99,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Updates an Audience on a property. */
    updateAudience: {
      name: "UpdateAudience",
      requestType: UpdateAudienceRequest,
      requestStream: false,
      responseType: Audience,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              20,
              97,
              117,
              100,
              105,
              101,
              110,
              99,
              101,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              61,
              58,
              8,
              97,
              117,
              100,
              105,
              101,
              110,
              99,
              101,
              50,
              49,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              97,
              117,
              100,
              105,
              101,
              110,
              99,
              101,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              97,
              117,
              100,
              105,
              101,
              110,
              99,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Archives an Audience on a property. */
    archiveAudience: {
      name: "ArchiveAudience",
      requestType: ArchiveAudienceRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              53,
              58,
              1,
              42,
              34,
              48,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              97,
              117,
              100,
              105,
              101,
              110,
              99,
              101,
              115,
              47,
              42,
              125,
              58,
              97,
              114,
              99,
              104,
              105,
              118,
              101,
            ]),
          ],
        },
      },
    },
    /** Look up a single SearchAds360Link */
    getSearchAds360Link: {
      name: "GetSearchAds360Link",
      requestType: GetSearchAds360LinkRequest,
      requestStream: false,
      responseType: SearchAds360Link,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              50,
              18,
              48,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              115,
              101,
              97,
              114,
              99,
              104,
              65,
              100,
              115,
              51,
              54,
              48,
              76,
              105,
              110,
              107,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists all SearchAds360Links on a property. */
    listSearchAds360Links: {
      name: "ListSearchAds360Links",
      requestType: ListSearchAds360LinksRequest,
      requestStream: false,
      responseType: ListSearchAds360LinksResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              50,
              18,
              48,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              125,
              47,
              115,
              101,
              97,
              114,
              99,
              104,
              65,
              100,
              115,
              51,
              54,
              48,
              76,
              105,
              110,
              107,
              115,
            ]),
          ],
        },
      },
    },
    /** Creates a SearchAds360Link. */
    createSearchAds360Link: {
      name: "CreateSearchAds360Link",
      requestType: CreateSearchAds360LinkRequest,
      requestStream: false,
      responseType: SearchAds360Link,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              26,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              115,
              101,
              97,
              114,
              99,
              104,
              95,
              97,
              100,
              115,
              95,
              51,
              54,
              48,
              95,
              108,
              105,
              110,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              71,
              58,
              19,
              115,
              101,
              97,
              114,
              99,
              104,
              95,
              97,
              100,
              115,
              95,
              51,
              54,
              48,
              95,
              108,
              105,
              110,
              107,
              34,
              48,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              125,
              47,
              115,
              101,
              97,
              114,
              99,
              104,
              65,
              100,
              115,
              51,
              54,
              48,
              76,
              105,
              110,
              107,
              115,
            ]),
          ],
        },
      },
    },
    /** Deletes a SearchAds360Link on a property. */
    deleteSearchAds360Link: {
      name: "DeleteSearchAds360Link",
      requestType: DeleteSearchAds360LinkRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              50,
              42,
              48,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              115,
              101,
              97,
              114,
              99,
              104,
              65,
              100,
              115,
              51,
              54,
              48,
              76,
              105,
              110,
              107,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Updates a SearchAds360Link on a property. */
    updateSearchAds360Link: {
      name: "UpdateSearchAds360Link",
      requestType: UpdateSearchAds360LinkRequest,
      requestStream: false,
      responseType: SearchAds360Link,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              31,
              115,
              101,
              97,
              114,
              99,
              104,
              95,
              97,
              100,
              115,
              95,
              51,
              54,
              48,
              95,
              108,
              105,
              110,
              107,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              91,
              58,
              19,
              115,
              101,
              97,
              114,
              99,
              104,
              95,
              97,
              100,
              115,
              95,
              51,
              54,
              48,
              95,
              108,
              105,
              110,
              107,
              50,
              68,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              115,
              101,
              97,
              114,
              99,
              104,
              95,
              97,
              100,
              115,
              95,
              51,
              54,
              48,
              95,
              108,
              105,
              110,
              107,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              115,
              101,
              97,
              114,
              99,
              104,
              65,
              100,
              115,
              51,
              54,
              48,
              76,
              105,
              110,
              107,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lookup for a AttributionSettings singleton. */
    getAttributionSettings: {
      name: "GetAttributionSettings",
      requestType: GetAttributionSettingsRequest,
      requestStream: false,
      responseType: AttributionSettings,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              50,
              18,
              48,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              97,
              116,
              116,
              114,
              105,
              98,
              117,
              116,
              105,
              111,
              110,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              125,
            ]),
          ],
        },
      },
    },
    /** Updates attribution settings on a property. */
    updateAttributionSettings: {
      name: "UpdateAttributionSettings",
      requestType: UpdateAttributionSettingsRequest,
      requestStream: false,
      responseType: AttributionSettings,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              32,
              97,
              116,
              116,
              114,
              105,
              98,
              117,
              116,
              105,
              111,
              110,
              95,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              93,
              58,
              20,
              97,
              116,
              116,
              114,
              105,
              98,
              117,
              116,
              105,
              111,
              110,
              95,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              50,
              69,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              97,
              116,
              116,
              114,
              105,
              98,
              117,
              116,
              105,
              111,
              110,
              95,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              97,
              116,
              116,
              114,
              105,
              98,
              117,
              116,
              105,
              111,
              110,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Returns a customized report of data access records. The report provides
     * records of each time a user reads Google Analytics reporting data. Access
     * records are retained for up to 2 years.
     *
     * Data Access Reports can be requested for a property. Reports may be
     * requested for any property, but dimensions that aren't related to quota can
     * only be requested on Google Analytics 360 properties. This method is only
     * available to Administrators.
     *
     * These data access records include GA4 UI Reporting, GA4 UI Explorations,
     * GA4 Data API, and other products like Firebase & Admob that can retrieve
     * data from Google Analytics through a linkage. These records don't include
     * property configuration changes like adding a stream or changing a
     * property's time zone. For configuration change history, see
     * [searchChangeHistoryEvents](https://developers.google.com/analytics/devguides/config/admin/v1/rest/v1alpha/accounts/searchChangeHistoryEvents).
     */
    runAccessReport: {
      name: "RunAccessReport",
      requestType: RunAccessReportRequest,
      requestStream: false,
      responseType: RunAccessReportResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              102,
              58,
              1,
              42,
              90,
              49,
              58,
              1,
              42,
              34,
              44,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              101,
              110,
              116,
              105,
              116,
              121,
              61,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              125,
              58,
              114,
              117,
              110,
              65,
              99,
              99,
              101,
              115,
              115,
              82,
              101,
              112,
              111,
              114,
              116,
              34,
              46,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              101,
              110,
              116,
              105,
              116,
              121,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              125,
              58,
              114,
              117,
              110,
              65,
              99,
              99,
              101,
              115,
              115,
              82,
              101,
              112,
              111,
              114,
              116,
            ]),
          ],
        },
      },
    },
    /** Creates an access binding on an account or property. */
    createAccessBinding: {
      name: "CreateAccessBinding",
      requestType: CreateAccessBindingRequest,
      requestStream: false,
      responseType: AccessBinding,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              21,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              97,
              99,
              99,
              101,
              115,
              115,
              95,
              98,
              105,
              110,
              100,
              105,
              110,
              103,
            ]),
          ],
          578365826: [
            Buffer.from([
              126,
              58,
              14,
              97,
              99,
              99,
              101,
              115,
              115,
              95,
              98,
              105,
              110,
              100,
              105,
              110,
              103,
              90,
              63,
              58,
              14,
              97,
              99,
              99,
              101,
              115,
              115,
              95,
              98,
              105,
              110,
              100,
              105,
              110,
              103,
              34,
              45,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              125,
              47,
              97,
              99,
              99,
              101,
              115,
              115,
              66,
              105,
              110,
              100,
              105,
              110,
              103,
              115,
              34,
              43,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              125,
              47,
              97,
              99,
              99,
              101,
              115,
              115,
              66,
              105,
              110,
              100,
              105,
              110,
              103,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets information about an access binding. */
    getAccessBinding: {
      name: "GetAccessBinding",
      requestType: GetAccessBindingRequest,
      requestStream: false,
      responseType: AccessBinding,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              94,
              90,
              47,
              18,
              45,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              97,
              99,
              99,
              101,
              115,
              115,
              66,
              105,
              110,
              100,
              105,
              110,
              103,
              115,
              47,
              42,
              125,
              18,
              43,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              47,
              97,
              99,
              99,
              101,
              115,
              115,
              66,
              105,
              110,
              100,
              105,
              110,
              103,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Updates an access binding on an account or property. */
    updateAccessBinding: {
      name: "UpdateAccessBinding",
      requestType: UpdateAccessBindingRequest,
      requestStream: false,
      responseType: AccessBinding,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([14, 97, 99, 99, 101, 115, 115, 95, 98, 105, 110, 100, 105, 110, 103])],
          578365826: [
            Buffer.from([
              156,
              1,
              58,
              14,
              97,
              99,
              99,
              101,
              115,
              115,
              95,
              98,
              105,
              110,
              100,
              105,
              110,
              103,
              90,
              78,
              58,
              14,
              97,
              99,
              99,
              101,
              115,
              115,
              95,
              98,
              105,
              110,
              100,
              105,
              110,
              103,
              50,
              60,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              97,
              99,
              99,
              101,
              115,
              115,
              95,
              98,
              105,
              110,
              100,
              105,
              110,
              103,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              97,
              99,
              99,
              101,
              115,
              115,
              66,
              105,
              110,
              100,
              105,
              110,
              103,
              115,
              47,
              42,
              125,
              50,
              58,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              97,
              99,
              99,
              101,
              115,
              115,
              95,
              98,
              105,
              110,
              100,
              105,
              110,
              103,
              46,
              110,
              97,
              109,
              101,
              61,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              47,
              97,
              99,
              99,
              101,
              115,
              115,
              66,
              105,
              110,
              100,
              105,
              110,
              103,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes an access binding on an account or property. */
    deleteAccessBinding: {
      name: "DeleteAccessBinding",
      requestType: DeleteAccessBindingRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              94,
              90,
              47,
              42,
              45,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              97,
              99,
              99,
              101,
              115,
              115,
              66,
              105,
              110,
              100,
              105,
              110,
              103,
              115,
              47,
              42,
              125,
              42,
              43,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              47,
              97,
              99,
              99,
              101,
              115,
              115,
              66,
              105,
              110,
              100,
              105,
              110,
              103,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists all access bindings on an account or property. */
    listAccessBindings: {
      name: "ListAccessBindings",
      requestType: ListAccessBindingsRequest,
      requestStream: false,
      responseType: ListAccessBindingsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              94,
              90,
              47,
              18,
              45,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              125,
              47,
              97,
              99,
              99,
              101,
              115,
              115,
              66,
              105,
              110,
              100,
              105,
              110,
              103,
              115,
              18,
              43,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              125,
              47,
              97,
              99,
              99,
              101,
              115,
              115,
              66,
              105,
              110,
              100,
              105,
              110,
              103,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Creates information about multiple access bindings to an account or
     * property.
     *
     * This method is transactional. If any AccessBinding cannot be created, none
     * of the AccessBindings will be created.
     */
    batchCreateAccessBindings: {
      name: "BatchCreateAccessBindings",
      requestType: BatchCreateAccessBindingsRequest,
      requestStream: false,
      responseType: BatchCreateAccessBindingsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              124,
              58,
              1,
              42,
              90,
              62,
              58,
              1,
              42,
              34,
              57,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              125,
              47,
              97,
              99,
              99,
              101,
              115,
              115,
              66,
              105,
              110,
              100,
              105,
              110,
              103,
              115,
              58,
              98,
              97,
              116,
              99,
              104,
              67,
              114,
              101,
              97,
              116,
              101,
              34,
              55,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              125,
              47,
              97,
              99,
              99,
              101,
              115,
              115,
              66,
              105,
              110,
              100,
              105,
              110,
              103,
              115,
              58,
              98,
              97,
              116,
              99,
              104,
              67,
              114,
              101,
              97,
              116,
              101,
            ]),
          ],
        },
      },
    },
    /** Gets information about multiple access bindings to an account or property. */
    batchGetAccessBindings: {
      name: "BatchGetAccessBindings",
      requestType: BatchGetAccessBindingsRequest,
      requestStream: false,
      responseType: BatchGetAccessBindingsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              112,
              90,
              56,
              18,
              54,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              125,
              47,
              97,
              99,
              99,
              101,
              115,
              115,
              66,
              105,
              110,
              100,
              105,
              110,
              103,
              115,
              58,
              98,
              97,
              116,
              99,
              104,
              71,
              101,
              116,
              18,
              52,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              125,
              47,
              97,
              99,
              99,
              101,
              115,
              115,
              66,
              105,
              110,
              100,
              105,
              110,
              103,
              115,
              58,
              98,
              97,
              116,
              99,
              104,
              71,
              101,
              116,
            ]),
          ],
        },
      },
    },
    /**
     * Updates information about multiple access bindings to an account or
     * property.
     */
    batchUpdateAccessBindings: {
      name: "BatchUpdateAccessBindings",
      requestType: BatchUpdateAccessBindingsRequest,
      requestStream: false,
      responseType: BatchUpdateAccessBindingsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              124,
              58,
              1,
              42,
              90,
              62,
              58,
              1,
              42,
              34,
              57,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              125,
              47,
              97,
              99,
              99,
              101,
              115,
              115,
              66,
              105,
              110,
              100,
              105,
              110,
              103,
              115,
              58,
              98,
              97,
              116,
              99,
              104,
              85,
              112,
              100,
              97,
              116,
              101,
              34,
              55,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              125,
              47,
              97,
              99,
              99,
              101,
              115,
              115,
              66,
              105,
              110,
              100,
              105,
              110,
              103,
              115,
              58,
              98,
              97,
              116,
              99,
              104,
              85,
              112,
              100,
              97,
              116,
              101,
            ]),
          ],
        },
      },
    },
    /** Deletes information about multiple users' links to an account or property. */
    batchDeleteAccessBindings: {
      name: "BatchDeleteAccessBindings",
      requestType: BatchDeleteAccessBindingsRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              124,
              58,
              1,
              42,
              90,
              62,
              58,
              1,
              42,
              34,
              57,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              125,
              47,
              97,
              99,
              99,
              101,
              115,
              115,
              66,
              105,
              110,
              100,
              105,
              110,
              103,
              115,
              58,
              98,
              97,
              116,
              99,
              104,
              68,
              101,
              108,
              101,
              116,
              101,
              34,
              55,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              125,
              47,
              97,
              99,
              99,
              101,
              115,
              115,
              66,
              105,
              110,
              100,
              105,
              110,
              103,
              115,
              58,
              98,
              97,
              116,
              99,
              104,
              68,
              101,
              108,
              101,
              116,
              101,
            ]),
          ],
        },
      },
    },
    /** Lookup for a single ExpandedDataSet. */
    getExpandedDataSet: {
      name: "GetExpandedDataSet",
      requestType: GetExpandedDataSetRequest,
      requestStream: false,
      responseType: ExpandedDataSet,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              49,
              18,
              47,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              101,
              120,
              112,
              97,
              110,
              100,
              101,
              100,
              68,
              97,
              116,
              97,
              83,
              101,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists ExpandedDataSets on a property. */
    listExpandedDataSets: {
      name: "ListExpandedDataSets",
      requestType: ListExpandedDataSetsRequest,
      requestStream: false,
      responseType: ListExpandedDataSetsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              49,
              18,
              47,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              125,
              47,
              101,
              120,
              112,
              97,
              110,
              100,
              101,
              100,
              68,
              97,
              116,
              97,
              83,
              101,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /** Creates a ExpandedDataSet. */
    createExpandedDataSet: {
      name: "CreateExpandedDataSet",
      requestType: CreateExpandedDataSetRequest,
      requestStream: false,
      responseType: ExpandedDataSet,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              24,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              101,
              120,
              112,
              97,
              110,
              100,
              101,
              100,
              95,
              100,
              97,
              116,
              97,
              95,
              115,
              101,
              116,
            ]),
          ],
          578365826: [
            Buffer.from([
              68,
              58,
              17,
              101,
              120,
              112,
              97,
              110,
              100,
              101,
              100,
              95,
              100,
              97,
              116,
              97,
              95,
              115,
              101,
              116,
              34,
              47,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              125,
              47,
              101,
              120,
              112,
              97,
              110,
              100,
              101,
              100,
              68,
              97,
              116,
              97,
              83,
              101,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /** Updates a ExpandedDataSet on a property. */
    updateExpandedDataSet: {
      name: "UpdateExpandedDataSet",
      requestType: UpdateExpandedDataSetRequest,
      requestStream: false,
      responseType: ExpandedDataSet,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              29,
              101,
              120,
              112,
              97,
              110,
              100,
              101,
              100,
              95,
              100,
              97,
              116,
              97,
              95,
              115,
              101,
              116,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              86,
              58,
              17,
              101,
              120,
              112,
              97,
              110,
              100,
              101,
              100,
              95,
              100,
              97,
              116,
              97,
              95,
              115,
              101,
              116,
              50,
              65,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              101,
              120,
              112,
              97,
              110,
              100,
              101,
              100,
              95,
              100,
              97,
              116,
              97,
              95,
              115,
              101,
              116,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              101,
              120,
              112,
              97,
              110,
              100,
              101,
              100,
              68,
              97,
              116,
              97,
              83,
              101,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes a ExpandedDataSet on a property. */
    deleteExpandedDataSet: {
      name: "DeleteExpandedDataSet",
      requestType: DeleteExpandedDataSetRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              49,
              42,
              47,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              101,
              120,
              112,
              97,
              110,
              100,
              101,
              100,
              68,
              97,
              116,
              97,
              83,
              101,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lookup for a single ChannelGroup. */
    getChannelGroup: {
      name: "GetChannelGroup",
      requestType: GetChannelGroupRequest,
      requestStream: false,
      responseType: ChannelGroup,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              46,
              18,
              44,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              99,
              104,
              97,
              110,
              110,
              101,
              108,
              71,
              114,
              111,
              117,
              112,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists ChannelGroups on a property. */
    listChannelGroups: {
      name: "ListChannelGroups",
      requestType: ListChannelGroupsRequest,
      requestStream: false,
      responseType: ListChannelGroupsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              46,
              18,
              44,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              125,
              47,
              99,
              104,
              97,
              110,
              110,
              101,
              108,
              71,
              114,
              111,
              117,
              112,
              115,
            ]),
          ],
        },
      },
    },
    /** Creates a ChannelGroup. */
    createChannelGroup: {
      name: "CreateChannelGroup",
      requestType: CreateChannelGroupRequest,
      requestStream: false,
      responseType: ChannelGroup,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              20,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              99,
              104,
              97,
              110,
              110,
              101,
              108,
              95,
              103,
              114,
              111,
              117,
              112,
            ]),
          ],
          578365826: [
            Buffer.from([
              61,
              58,
              13,
              99,
              104,
              97,
              110,
              110,
              101,
              108,
              95,
              103,
              114,
              111,
              117,
              112,
              34,
              44,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              125,
              47,
              99,
              104,
              97,
              110,
              110,
              101,
              108,
              71,
              114,
              111,
              117,
              112,
              115,
            ]),
          ],
        },
      },
    },
    /** Updates a ChannelGroup. */
    updateChannelGroup: {
      name: "UpdateChannelGroup",
      requestType: UpdateChannelGroupRequest,
      requestStream: false,
      responseType: ChannelGroup,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              25,
              99,
              104,
              97,
              110,
              110,
              101,
              108,
              95,
              103,
              114,
              111,
              117,
              112,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              75,
              58,
              13,
              99,
              104,
              97,
              110,
              110,
              101,
              108,
              95,
              103,
              114,
              111,
              117,
              112,
              50,
              58,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              99,
              104,
              97,
              110,
              110,
              101,
              108,
              95,
              103,
              114,
              111,
              117,
              112,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              99,
              104,
              97,
              110,
              110,
              101,
              108,
              71,
              114,
              111,
              117,
              112,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes a ChannelGroup on a property. */
    deleteChannelGroup: {
      name: "DeleteChannelGroup",
      requestType: DeleteChannelGroupRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              46,
              42,
              44,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              99,
              104,
              97,
              110,
              110,
              101,
              108,
              71,
              114,
              111,
              117,
              112,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Sets the opt out status for the automated GA4 setup process for a UA
     * property.
     * Note: this has no effect on GA4 property.
     */
    setAutomatedGa4ConfigurationOptOut: {
      name: "SetAutomatedGa4ConfigurationOptOut",
      requestType: SetAutomatedGa4ConfigurationOptOutRequest,
      requestStream: false,
      responseType: SetAutomatedGa4ConfigurationOptOutResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              59,
              58,
              1,
              42,
              34,
              54,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              58,
              115,
              101,
              116,
              65,
              117,
              116,
              111,
              109,
              97,
              116,
              101,
              100,
              71,
              97,
              52,
              67,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              97,
              116,
              105,
              111,
              110,
              79,
              112,
              116,
              79,
              117,
              116,
            ]),
          ],
        },
      },
    },
    /**
     * Fetches the opt out status for the automated GA4 setup process for a UA
     * property.
     * Note: this has no effect on GA4 property.
     */
    fetchAutomatedGa4ConfigurationOptOut: {
      name: "FetchAutomatedGa4ConfigurationOptOut",
      requestType: FetchAutomatedGa4ConfigurationOptOutRequest,
      requestStream: false,
      responseType: FetchAutomatedGa4ConfigurationOptOutResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              61,
              58,
              1,
              42,
              34,
              56,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              58,
              102,
              101,
              116,
              99,
              104,
              65,
              117,
              116,
              111,
              109,
              97,
              116,
              101,
              100,
              71,
              97,
              52,
              67,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              97,
              116,
              105,
              111,
              110,
              79,
              112,
              116,
              79,
              117,
              116,
            ]),
          ],
        },
      },
    },
    /** Creates a BigQueryLink. */
    createBigQueryLink: {
      name: "CreateBigQueryLink",
      requestType: CreateBigQueryLinkRequest,
      requestStream: false,
      responseType: BigQueryLink,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              20,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              98,
              105,
              103,
              113,
              117,
              101,
              114,
              121,
              95,
              108,
              105,
              110,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              61,
              58,
              13,
              98,
              105,
              103,
              113,
              117,
              101,
              114,
              121,
              95,
              108,
              105,
              110,
              107,
              34,
              44,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              125,
              47,
              98,
              105,
              103,
              81,
              117,
              101,
              114,
              121,
              76,
              105,
              110,
              107,
              115,
            ]),
          ],
        },
      },
    },
    /** Lookup for a single BigQuery Link. */
    getBigQueryLink: {
      name: "GetBigQueryLink",
      requestType: GetBigQueryLinkRequest,
      requestStream: false,
      responseType: BigQueryLink,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              46,
              18,
              44,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              98,
              105,
              103,
              81,
              117,
              101,
              114,
              121,
              76,
              105,
              110,
              107,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists BigQuery Links on a property. */
    listBigQueryLinks: {
      name: "ListBigQueryLinks",
      requestType: ListBigQueryLinksRequest,
      requestStream: false,
      responseType: ListBigQueryLinksResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              46,
              18,
              44,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              125,
              47,
              98,
              105,
              103,
              81,
              117,
              101,
              114,
              121,
              76,
              105,
              110,
              107,
              115,
            ]),
          ],
        },
      },
    },
    /** Deletes a BigQueryLink on a property. */
    deleteBigQueryLink: {
      name: "DeleteBigQueryLink",
      requestType: DeleteBigQueryLinkRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              46,
              42,
              44,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              98,
              105,
              103,
              81,
              117,
              101,
              114,
              121,
              76,
              105,
              110,
              107,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Updates a BigQueryLink. */
    updateBigQueryLink: {
      name: "UpdateBigQueryLink",
      requestType: UpdateBigQueryLinkRequest,
      requestStream: false,
      responseType: BigQueryLink,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              25,
              98,
              105,
              103,
              113,
              117,
              101,
              114,
              121,
              95,
              108,
              105,
              110,
              107,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              75,
              58,
              13,
              98,
              105,
              103,
              113,
              117,
              101,
              114,
              121,
              95,
              108,
              105,
              110,
              107,
              50,
              58,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              98,
              105,
              103,
              113,
              117,
              101,
              114,
              121,
              95,
              108,
              105,
              110,
              107,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              98,
              105,
              103,
              81,
              117,
              101,
              114,
              121,
              76,
              105,
              110,
              107,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Returns the enhanced measurement settings for this data stream.
     * Note that the stream must enable enhanced measurement for these settings to
     * take effect.
     */
    getEnhancedMeasurementSettings: {
      name: "GetEnhancedMeasurementSettings",
      requestType: GetEnhancedMeasurementSettingsRequest,
      requestStream: false,
      responseType: EnhancedMeasurementSettings,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              72,
              18,
              70,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              114,
              101,
              97,
              109,
              115,
              47,
              42,
              47,
              101,
              110,
              104,
              97,
              110,
              99,
              101,
              100,
              77,
              101,
              97,
              115,
              117,
              114,
              101,
              109,
              101,
              110,
              116,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Updates the enhanced measurement settings for this data stream.
     * Note that the stream must enable enhanced measurement for these settings to
     * take effect.
     */
    updateEnhancedMeasurementSettings: {
      name: "UpdateEnhancedMeasurementSettings",
      requestType: UpdateEnhancedMeasurementSettingsRequest,
      requestStream: false,
      responseType: EnhancedMeasurementSettings,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              41,
              101,
              110,
              104,
              97,
              110,
              99,
              101,
              100,
              95,
              109,
              101,
              97,
              115,
              117,
              114,
              101,
              109,
              101,
              110,
              116,
              95,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              133,
              1,
              58,
              29,
              101,
              110,
              104,
              97,
              110,
              99,
              101,
              100,
              95,
              109,
              101,
              97,
              115,
              117,
              114,
              101,
              109,
              101,
              110,
              116,
              95,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              50,
              100,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              101,
              110,
              104,
              97,
              110,
              99,
              101,
              100,
              95,
              109,
              101,
              97,
              115,
              117,
              114,
              101,
              109,
              101,
              110,
              116,
              95,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              114,
              101,
              97,
              109,
              115,
              47,
              42,
              47,
              101,
              110,
              104,
              97,
              110,
              99,
              101,
              100,
              77,
              101,
              97,
              115,
              117,
              114,
              101,
              109,
              101,
              110,
              116,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Creates a connected site tag for a Universal Analytics property. You can
     * create a maximum of 20 connected site tags per property.
     * Note: This API cannot be used on GA4 properties.
     */
    createConnectedSiteTag: {
      name: "CreateConnectedSiteTag",
      requestType: CreateConnectedSiteTagRequest,
      requestStream: false,
      responseType: CreateConnectedSiteTagResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              47,
              58,
              1,
              42,
              34,
              42,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              58,
              99,
              114,
              101,
              97,
              116,
              101,
              67,
              111,
              110,
              110,
              101,
              99,
              116,
              101,
              100,
              83,
              105,
              116,
              101,
              84,
              97,
              103,
            ]),
          ],
        },
      },
    },
    /**
     * Deletes a connected site tag for a Universal Analytics property.
     * Note: this has no effect on GA4 properties.
     */
    deleteConnectedSiteTag: {
      name: "DeleteConnectedSiteTag",
      requestType: DeleteConnectedSiteTagRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              47,
              58,
              1,
              42,
              34,
              42,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              58,
              100,
              101,
              108,
              101,
              116,
              101,
              67,
              111,
              110,
              110,
              101,
              99,
              116,
              101,
              100,
              83,
              105,
              116,
              101,
              84,
              97,
              103,
            ]),
          ],
        },
      },
    },
    /**
     * Lists the connected site tags for a Universal Analytics property. A maximum
     * of 20 connected site tags will be returned. Note: this has no effect on GA4
     * property.
     */
    listConnectedSiteTags: {
      name: "ListConnectedSiteTags",
      requestType: ListConnectedSiteTagsRequest,
      requestStream: false,
      responseType: ListConnectedSiteTagsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              46,
              58,
              1,
              42,
              34,
              41,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              58,
              108,
              105,
              115,
              116,
              67,
              111,
              110,
              110,
              101,
              99,
              116,
              101,
              100,
              83,
              105,
              116,
              101,
              84,
              97,
              103,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Given a specified UA property, looks up the GA4 property connected to it.
     * Note: this cannot be used with GA4 properties.
     */
    fetchConnectedGa4Property: {
      name: "FetchConnectedGa4Property",
      requestType: FetchConnectedGa4PropertyRequest,
      requestStream: false,
      responseType: FetchConnectedGa4PropertyResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              47,
              18,
              45,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              58,
              102,
              101,
              116,
              99,
              104,
              67,
              111,
              110,
              110,
              101,
              99,
              116,
              101,
              100,
              71,
              97,
              52,
              80,
              114,
              111,
              112,
              101,
              114,
              116,
              121,
            ]),
          ],
        },
      },
    },
    /** Looks up a single AdSenseLink. */
    getAdSenseLink: {
      name: "GetAdSenseLink",
      requestType: GetAdSenseLinkRequest,
      requestStream: false,
      responseType: AdSenseLink,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              45,
              18,
              43,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              97,
              100,
              83,
              101,
              110,
              115,
              101,
              76,
              105,
              110,
              107,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Creates an AdSenseLink. */
    createAdSenseLink: {
      name: "CreateAdSenseLink",
      requestType: CreateAdSenseLinkRequest,
      requestStream: false,
      responseType: AdSenseLink,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              19,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              97,
              100,
              115,
              101,
              110,
              115,
              101,
              95,
              108,
              105,
              110,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              59,
              58,
              12,
              97,
              100,
              115,
              101,
              110,
              115,
              101,
              95,
              108,
              105,
              110,
              107,
              34,
              43,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              125,
              47,
              97,
              100,
              83,
              101,
              110,
              115,
              101,
              76,
              105,
              110,
              107,
              115,
            ]),
          ],
        },
      },
    },
    /** Deletes an AdSenseLink. */
    deleteAdSenseLink: {
      name: "DeleteAdSenseLink",
      requestType: DeleteAdSenseLinkRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              45,
              42,
              43,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              97,
              100,
              83,
              101,
              110,
              115,
              101,
              76,
              105,
              110,
              107,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists AdSenseLinks on a property. */
    listAdSenseLinks: {
      name: "ListAdSenseLinks",
      requestType: ListAdSenseLinksRequest,
      requestStream: false,
      responseType: ListAdSenseLinksResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              45,
              18,
              43,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              125,
              47,
              97,
              100,
              83,
              101,
              110,
              115,
              101,
              76,
              105,
              110,
              107,
              115,
            ]),
          ],
        },
      },
    },
    /** Lookup for a single EventCreateRule. */
    getEventCreateRule: {
      name: "GetEventCreateRule",
      requestType: GetEventCreateRuleRequest,
      requestStream: false,
      responseType: EventCreateRule,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              63,
              18,
              61,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              114,
              101,
              97,
              109,
              115,
              47,
              42,
              47,
              101,
              118,
              101,
              110,
              116,
              67,
              114,
              101,
              97,
              116,
              101,
              82,
              117,
              108,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists EventCreateRules on a web data stream. */
    listEventCreateRules: {
      name: "ListEventCreateRules",
      requestType: ListEventCreateRulesRequest,
      requestStream: false,
      responseType: ListEventCreateRulesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              63,
              18,
              61,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              114,
              101,
              97,
              109,
              115,
              47,
              42,
              125,
              47,
              101,
              118,
              101,
              110,
              116,
              67,
              114,
              101,
              97,
              116,
              101,
              82,
              117,
              108,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Creates an EventCreateRule. */
    createEventCreateRule: {
      name: "CreateEventCreateRule",
      requestType: CreateEventCreateRuleRequest,
      requestStream: false,
      responseType: EventCreateRule,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              24,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              101,
              118,
              101,
              110,
              116,
              95,
              99,
              114,
              101,
              97,
              116,
              101,
              95,
              114,
              117,
              108,
              101,
            ]),
          ],
          578365826: [
            Buffer.from([
              82,
              58,
              17,
              101,
              118,
              101,
              110,
              116,
              95,
              99,
              114,
              101,
              97,
              116,
              101,
              95,
              114,
              117,
              108,
              101,
              34,
              61,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              114,
              101,
              97,
              109,
              115,
              47,
              42,
              125,
              47,
              101,
              118,
              101,
              110,
              116,
              67,
              114,
              101,
              97,
              116,
              101,
              82,
              117,
              108,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Updates an EventCreateRule. */
    updateEventCreateRule: {
      name: "UpdateEventCreateRule",
      requestType: UpdateEventCreateRuleRequest,
      requestStream: false,
      responseType: EventCreateRule,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              29,
              101,
              118,
              101,
              110,
              116,
              95,
              99,
              114,
              101,
              97,
              116,
              101,
              95,
              114,
              117,
              108,
              101,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              100,
              58,
              17,
              101,
              118,
              101,
              110,
              116,
              95,
              99,
              114,
              101,
              97,
              116,
              101,
              95,
              114,
              117,
              108,
              101,
              50,
              79,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              101,
              118,
              101,
              110,
              116,
              95,
              99,
              114,
              101,
              97,
              116,
              101,
              95,
              114,
              117,
              108,
              101,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              114,
              101,
              97,
              109,
              115,
              47,
              42,
              47,
              101,
              118,
              101,
              110,
              116,
              67,
              114,
              101,
              97,
              116,
              101,
              82,
              117,
              108,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes an EventCreateRule. */
    deleteEventCreateRule: {
      name: "DeleteEventCreateRule",
      requestType: DeleteEventCreateRuleRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              63,
              42,
              61,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              114,
              101,
              97,
              109,
              115,
              47,
              42,
              47,
              101,
              118,
              101,
              110,
              116,
              67,
              114,
              101,
              97,
              116,
              101,
              82,
              117,
              108,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lookup for a single EventEditRule. */
    getEventEditRule: {
      name: "GetEventEditRule",
      requestType: GetEventEditRuleRequest,
      requestStream: false,
      responseType: EventEditRule,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              61,
              18,
              59,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              114,
              101,
              97,
              109,
              115,
              47,
              42,
              47,
              101,
              118,
              101,
              110,
              116,
              69,
              100,
              105,
              116,
              82,
              117,
              108,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists EventEditRules on a web data stream. */
    listEventEditRules: {
      name: "ListEventEditRules",
      requestType: ListEventEditRulesRequest,
      requestStream: false,
      responseType: ListEventEditRulesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              61,
              18,
              59,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              114,
              101,
              97,
              109,
              115,
              47,
              42,
              125,
              47,
              101,
              118,
              101,
              110,
              116,
              69,
              100,
              105,
              116,
              82,
              117,
              108,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Creates an EventEditRule. */
    createEventEditRule: {
      name: "CreateEventEditRule",
      requestType: CreateEventEditRuleRequest,
      requestStream: false,
      responseType: EventEditRule,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              22,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              101,
              118,
              101,
              110,
              116,
              95,
              101,
              100,
              105,
              116,
              95,
              114,
              117,
              108,
              101,
            ]),
          ],
          578365826: [
            Buffer.from([
              78,
              58,
              15,
              101,
              118,
              101,
              110,
              116,
              95,
              101,
              100,
              105,
              116,
              95,
              114,
              117,
              108,
              101,
              34,
              59,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              114,
              101,
              97,
              109,
              115,
              47,
              42,
              125,
              47,
              101,
              118,
              101,
              110,
              116,
              69,
              100,
              105,
              116,
              82,
              117,
              108,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Updates an EventEditRule. */
    updateEventEditRule: {
      name: "UpdateEventEditRule",
      requestType: UpdateEventEditRuleRequest,
      requestStream: false,
      responseType: EventEditRule,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              27,
              101,
              118,
              101,
              110,
              116,
              95,
              101,
              100,
              105,
              116,
              95,
              114,
              117,
              108,
              101,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              94,
              58,
              15,
              101,
              118,
              101,
              110,
              116,
              95,
              101,
              100,
              105,
              116,
              95,
              114,
              117,
              108,
              101,
              50,
              75,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              101,
              118,
              101,
              110,
              116,
              95,
              101,
              100,
              105,
              116,
              95,
              114,
              117,
              108,
              101,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              114,
              101,
              97,
              109,
              115,
              47,
              42,
              47,
              101,
              118,
              101,
              110,
              116,
              69,
              100,
              105,
              116,
              82,
              117,
              108,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes an EventEditRule. */
    deleteEventEditRule: {
      name: "DeleteEventEditRule",
      requestType: DeleteEventEditRuleRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              61,
              42,
              59,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              114,
              101,
              97,
              109,
              115,
              47,
              42,
              47,
              101,
              118,
              101,
              110,
              116,
              69,
              100,
              105,
              116,
              82,
              117,
              108,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Changes the processing order of event edit rules on the specified stream. */
    reorderEventEditRules: {
      name: "ReorderEventEditRules",
      requestType: ReorderEventEditRulesRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              72,
              58,
              1,
              42,
              34,
              67,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              114,
              101,
              97,
              109,
              115,
              47,
              42,
              125,
              47,
              101,
              118,
              101,
              110,
              116,
              69,
              100,
              105,
              116,
              82,
              117,
              108,
              101,
              115,
              58,
              114,
              101,
              111,
              114,
              100,
              101,
              114,
            ]),
          ],
        },
      },
    },
    /** Updates a DataRedactionSettings on a property. */
    updateDataRedactionSettings: {
      name: "UpdateDataRedactionSettings",
      requestType: UpdateDataRedactionSettingsRequest,
      requestStream: false,
      responseType: DataRedactionSettings,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              35,
              100,
              97,
              116,
              97,
              95,
              114,
              101,
              100,
              97,
              99,
              116,
              105,
              111,
              110,
              95,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              115,
              58,
              23,
              100,
              97,
              116,
              97,
              95,
              114,
              101,
              100,
              97,
              99,
              116,
              105,
              111,
              110,
              95,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              50,
              88,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              100,
              97,
              116,
              97,
              95,
              114,
              101,
              100,
              97,
              99,
              116,
              105,
              111,
              110,
              95,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              114,
              101,
              97,
              109,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              82,
              101,
              100,
              97,
              99,
              116,
              105,
              111,
              110,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              125,
            ]),
          ],
        },
      },
    },
    /** Lookup for a single DataRedactionSettings. */
    getDataRedactionSettings: {
      name: "GetDataRedactionSettings",
      requestType: GetDataRedactionSettingsRequest,
      requestStream: false,
      responseType: DataRedactionSettings,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              66,
              18,
              64,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              114,
              101,
              97,
              109,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              82,
              101,
              100,
              97,
              99,
              116,
              105,
              111,
              110,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              125,
            ]),
          ],
        },
      },
    },
    /** Lookup for a single CalculatedMetric. */
    getCalculatedMetric: {
      name: "GetCalculatedMetric",
      requestType: GetCalculatedMetricRequest,
      requestStream: false,
      responseType: CalculatedMetric,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              50,
              18,
              48,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              99,
              97,
              108,
              99,
              117,
              108,
              97,
              116,
              101,
              100,
              77,
              101,
              116,
              114,
              105,
              99,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Creates a CalculatedMetric. */
    createCalculatedMetric: {
      name: "CreateCalculatedMetric",
      requestType: CreateCalculatedMetricRequest,
      requestStream: false,
      responseType: CalculatedMetric,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              45,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              99,
              97,
              108,
              99,
              117,
              108,
              97,
              116,
              101,
              100,
              95,
              109,
              101,
              116,
              114,
              105,
              99,
              44,
              99,
              97,
              108,
              99,
              117,
              108,
              97,
              116,
              101,
              100,
              95,
              109,
              101,
              116,
              114,
              105,
              99,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              69,
              58,
              17,
              99,
              97,
              108,
              99,
              117,
              108,
              97,
              116,
              101,
              100,
              95,
              109,
              101,
              116,
              114,
              105,
              99,
              34,
              48,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              125,
              47,
              99,
              97,
              108,
              99,
              117,
              108,
              97,
              116,
              101,
              100,
              77,
              101,
              116,
              114,
              105,
              99,
              115,
            ]),
          ],
        },
      },
    },
    /** Lists CalculatedMetrics on a property. */
    listCalculatedMetrics: {
      name: "ListCalculatedMetrics",
      requestType: ListCalculatedMetricsRequest,
      requestStream: false,
      responseType: ListCalculatedMetricsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              50,
              18,
              48,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              125,
              47,
              99,
              97,
              108,
              99,
              117,
              108,
              97,
              116,
              101,
              100,
              77,
              101,
              116,
              114,
              105,
              99,
              115,
            ]),
          ],
        },
      },
    },
    /** Updates a CalculatedMetric on a property. */
    updateCalculatedMetric: {
      name: "UpdateCalculatedMetric",
      requestType: UpdateCalculatedMetricRequest,
      requestStream: false,
      responseType: CalculatedMetric,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              29,
              99,
              97,
              108,
              99,
              117,
              108,
              97,
              116,
              101,
              100,
              95,
              109,
              101,
              116,
              114,
              105,
              99,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              87,
              58,
              17,
              99,
              97,
              108,
              99,
              117,
              108,
              97,
              116,
              101,
              100,
              95,
              109,
              101,
              116,
              114,
              105,
              99,
              50,
              66,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              99,
              97,
              108,
              99,
              117,
              108,
              97,
              116,
              101,
              100,
              95,
              109,
              101,
              116,
              114,
              105,
              99,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              99,
              97,
              108,
              99,
              117,
              108,
              97,
              116,
              101,
              100,
              77,
              101,
              116,
              114,
              105,
              99,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes a CalculatedMetric on a property. */
    deleteCalculatedMetric: {
      name: "DeleteCalculatedMetric",
      requestType: DeleteCalculatedMetricRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              50,
              42,
              48,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              99,
              97,
              108,
              99,
              117,
              108,
              97,
              116,
              101,
              100,
              77,
              101,
              116,
              114,
              105,
              99,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Create a roll-up property and all roll-up property source links. */
    createRollupProperty: {
      name: "CreateRollupProperty",
      requestType: CreateRollupPropertyRequest,
      requestStream: false,
      responseType: CreateRollupPropertyResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              45,
              58,
              1,
              42,
              34,
              40,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              58,
              99,
              114,
              101,
              97,
              116,
              101,
              82,
              111,
              108,
              108,
              117,
              112,
              80,
              114,
              111,
              112,
              101,
              114,
              116,
              121,
            ]),
          ],
        },
      },
    },
    /**
     * Lookup for a single roll-up property source Link.
     * Only roll-up properties can have source links, so this method will throw an
     * error if used on other types of properties.
     */
    getRollupPropertySourceLink: {
      name: "GetRollupPropertySourceLink",
      requestType: GetRollupPropertySourceLinkRequest,
      requestStream: false,
      responseType: RollupPropertySourceLink,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              58,
              18,
              56,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              114,
              111,
              108,
              108,
              117,
              112,
              80,
              114,
              111,
              112,
              101,
              114,
              116,
              121,
              83,
              111,
              117,
              114,
              99,
              101,
              76,
              105,
              110,
              107,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Lists roll-up property source Links on a property.
     * Only roll-up properties can have source links, so this method will throw an
     * error if used on other types of properties.
     */
    listRollupPropertySourceLinks: {
      name: "ListRollupPropertySourceLinks",
      requestType: ListRollupPropertySourceLinksRequest,
      requestStream: false,
      responseType: ListRollupPropertySourceLinksResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              58,
              18,
              56,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              125,
              47,
              114,
              111,
              108,
              108,
              117,
              112,
              80,
              114,
              111,
              112,
              101,
              114,
              116,
              121,
              83,
              111,
              117,
              114,
              99,
              101,
              76,
              105,
              110,
              107,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Creates a roll-up property source link.
     * Only roll-up properties can have source links, so this method will throw an
     * error if used on other types of properties.
     */
    createRollupPropertySourceLink: {
      name: "CreateRollupPropertySourceLink",
      requestType: CreateRollupPropertySourceLinkRequest,
      requestStream: false,
      responseType: RollupPropertySourceLink,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              34,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              114,
              111,
              108,
              108,
              117,
              112,
              95,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              121,
              95,
              115,
              111,
              117,
              114,
              99,
              101,
              95,
              108,
              105,
              110,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              87,
              58,
              27,
              114,
              111,
              108,
              108,
              117,
              112,
              95,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              121,
              95,
              115,
              111,
              117,
              114,
              99,
              101,
              95,
              108,
              105,
              110,
              107,
              34,
              56,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              125,
              47,
              114,
              111,
              108,
              108,
              117,
              112,
              80,
              114,
              111,
              112,
              101,
              114,
              116,
              121,
              83,
              111,
              117,
              114,
              99,
              101,
              76,
              105,
              110,
              107,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Deletes a roll-up property source link.
     * Only roll-up properties can have source links, so this method will throw an
     * error if used on other types of properties.
     */
    deleteRollupPropertySourceLink: {
      name: "DeleteRollupPropertySourceLink",
      requestType: DeleteRollupPropertySourceLinkRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              58,
              42,
              56,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              114,
              111,
              108,
              108,
              117,
              112,
              80,
              114,
              111,
              112,
              101,
              114,
              116,
              121,
              83,
              111,
              117,
              114,
              99,
              101,
              76,
              105,
              110,
              107,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Create a subproperty and a subproperty event filter that applies to the
     * created subproperty.
     */
    provisionSubproperty: {
      name: "ProvisionSubproperty",
      requestType: ProvisionSubpropertyRequest,
      requestStream: false,
      responseType: ProvisionSubpropertyResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              45,
              58,
              1,
              42,
              34,
              40,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              58,
              112,
              114,
              111,
              118,
              105,
              115,
              105,
              111,
              110,
              83,
              117,
              98,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              121,
            ]),
          ],
        },
      },
    },
    /** Creates a subproperty Event Filter. */
    createSubpropertyEventFilter: {
      name: "CreateSubpropertyEventFilter",
      requestType: CreateSubpropertyEventFilterRequest,
      requestStream: false,
      responseType: SubpropertyEventFilter,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              31,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              115,
              117,
              98,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              121,
              95,
              101,
              118,
              101,
              110,
              116,
              95,
              102,
              105,
              108,
              116,
              101,
              114,
            ]),
          ],
          578365826: [
            Buffer.from([
              82,
              58,
              24,
              115,
              117,
              98,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              121,
              95,
              101,
              118,
              101,
              110,
              116,
              95,
              102,
              105,
              108,
              116,
              101,
              114,
              34,
              54,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              125,
              47,
              115,
              117,
              98,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              121,
              69,
              118,
              101,
              110,
              116,
              70,
              105,
              108,
              116,
              101,
              114,
              115,
            ]),
          ],
        },
      },
    },
    /** Lookup for a single subproperty Event Filter. */
    getSubpropertyEventFilter: {
      name: "GetSubpropertyEventFilter",
      requestType: GetSubpropertyEventFilterRequest,
      requestStream: false,
      responseType: SubpropertyEventFilter,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              56,
              18,
              54,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              115,
              117,
              98,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              121,
              69,
              118,
              101,
              110,
              116,
              70,
              105,
              108,
              116,
              101,
              114,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** List all subproperty Event Filters on a property. */
    listSubpropertyEventFilters: {
      name: "ListSubpropertyEventFilters",
      requestType: ListSubpropertyEventFiltersRequest,
      requestStream: false,
      responseType: ListSubpropertyEventFiltersResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              56,
              18,
              54,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              125,
              47,
              115,
              117,
              98,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              121,
              69,
              118,
              101,
              110,
              116,
              70,
              105,
              108,
              116,
              101,
              114,
              115,
            ]),
          ],
        },
      },
    },
    /** Updates a subproperty Event Filter. */
    updateSubpropertyEventFilter: {
      name: "UpdateSubpropertyEventFilter",
      requestType: UpdateSubpropertyEventFilterRequest,
      requestStream: false,
      responseType: SubpropertyEventFilter,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              36,
              115,
              117,
              98,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              121,
              95,
              101,
              118,
              101,
              110,
              116,
              95,
              102,
              105,
              108,
              116,
              101,
              114,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              107,
              58,
              24,
              115,
              117,
              98,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              121,
              95,
              101,
              118,
              101,
              110,
              116,
              95,
              102,
              105,
              108,
              116,
              101,
              114,
              50,
              79,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              115,
              117,
              98,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              121,
              95,
              101,
              118,
              101,
              110,
              116,
              95,
              102,
              105,
              108,
              116,
              101,
              114,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              115,
              117,
              98,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              121,
              69,
              118,
              101,
              110,
              116,
              70,
              105,
              108,
              116,
              101,
              114,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes a subproperty event filter. */
    deleteSubpropertyEventFilter: {
      name: "DeleteSubpropertyEventFilter",
      requestType: DeleteSubpropertyEventFilterRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              56,
              42,
              54,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              115,
              117,
              98,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              121,
              69,
              118,
              101,
              110,
              116,
              70,
              105,
              108,
              116,
              101,
              114,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface AnalyticsAdminServiceImplementation<CallContextExt = {}> {
  /** Lookup for a single Account. */
  getAccount(request: GetAccountRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Account>>;
  /**
   * Returns all accounts accessible by the caller.
   *
   * Note that these accounts might not currently have GA4 properties.
   * Soft-deleted (ie: "trashed") accounts are excluded by default.
   * Returns an empty list if no relevant accounts are found.
   */
  listAccounts(
    request: ListAccountsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListAccountsResponse>>;
  /**
   * Marks target Account as soft-deleted (ie: "trashed") and returns it.
   *
   * This API does not have a method to restore soft-deleted accounts.
   * However, they can be restored using the Trash Can UI.
   *
   * If the accounts are not restored before the expiration time, the account
   * and all child resources (eg: Properties, GoogleAdsLinks, Streams,
   * AccessBindings) will be permanently purged.
   * https://support.google.com/analytics/answer/6154772
   *
   * Returns an error if the target is not found.
   */
  deleteAccount(request: DeleteAccountRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
  /** Updates an account. */
  updateAccount(request: UpdateAccountRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Account>>;
  /** Requests a ticket for creating an account. */
  provisionAccountTicket(
    request: ProvisionAccountTicketRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ProvisionAccountTicketResponse>>;
  /** Returns summaries of all accounts accessible by the caller. */
  listAccountSummaries(
    request: ListAccountSummariesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListAccountSummariesResponse>>;
  /** Lookup for a single "GA4" Property. */
  getProperty(request: GetPropertyRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Property>>;
  /**
   * Returns child Properties under the specified parent Account.
   *
   * Only "GA4" properties will be returned.
   * Properties will be excluded if the caller does not have access.
   * Soft-deleted (ie: "trashed") properties are excluded by default.
   * Returns an empty list if no relevant properties are found.
   */
  listProperties(
    request: ListPropertiesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListPropertiesResponse>>;
  /** Creates an "GA4" property with the specified location and attributes. */
  createProperty(request: CreatePropertyRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Property>>;
  /**
   * Marks target Property as soft-deleted (ie: "trashed") and returns it.
   *
   * This API does not have a method to restore soft-deleted properties.
   * However, they can be restored using the Trash Can UI.
   *
   * If the properties are not restored before the expiration time, the Property
   * and all child resources (eg: GoogleAdsLinks, Streams, AccessBindings)
   * will be permanently purged.
   * https://support.google.com/analytics/answer/6154772
   *
   * Returns an error if the target is not found, or is not a GA4 Property.
   */
  deleteProperty(request: DeletePropertyRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Property>>;
  /** Updates a property. */
  updateProperty(request: UpdatePropertyRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Property>>;
  /**
   * Creates a FirebaseLink.
   *
   * Properties can have at most one FirebaseLink.
   */
  createFirebaseLink(
    request: CreateFirebaseLinkRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<FirebaseLink>>;
  /** Deletes a FirebaseLink on a property */
  deleteFirebaseLink(
    request: DeleteFirebaseLinkRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  /**
   * Lists FirebaseLinks on a property.
   * Properties can have at most one FirebaseLink.
   */
  listFirebaseLinks(
    request: ListFirebaseLinksRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListFirebaseLinksResponse>>;
  /**
   * Returns the Site Tag for the specified web stream.
   * Site Tags are immutable singletons.
   */
  getGlobalSiteTag(
    request: GetGlobalSiteTagRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GlobalSiteTag>>;
  /** Creates a GoogleAdsLink. */
  createGoogleAdsLink(
    request: CreateGoogleAdsLinkRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GoogleAdsLink>>;
  /** Updates a GoogleAdsLink on a property */
  updateGoogleAdsLink(
    request: UpdateGoogleAdsLinkRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GoogleAdsLink>>;
  /** Deletes a GoogleAdsLink on a property */
  deleteGoogleAdsLink(
    request: DeleteGoogleAdsLinkRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  /** Lists GoogleAdsLinks on a property. */
  listGoogleAdsLinks(
    request: ListGoogleAdsLinksRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListGoogleAdsLinksResponse>>;
  /**
   * Get data sharing settings on an account.
   * Data sharing settings are singletons.
   */
  getDataSharingSettings(
    request: GetDataSharingSettingsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<DataSharingSettings>>;
  /** Lookup for a single "GA4" MeasurementProtocolSecret. */
  getMeasurementProtocolSecret(
    request: GetMeasurementProtocolSecretRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<MeasurementProtocolSecret>>;
  /**
   * Returns child MeasurementProtocolSecrets under the specified parent
   * Property.
   */
  listMeasurementProtocolSecrets(
    request: ListMeasurementProtocolSecretsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListMeasurementProtocolSecretsResponse>>;
  /** Creates a measurement protocol secret. */
  createMeasurementProtocolSecret(
    request: CreateMeasurementProtocolSecretRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<MeasurementProtocolSecret>>;
  /** Deletes target MeasurementProtocolSecret. */
  deleteMeasurementProtocolSecret(
    request: DeleteMeasurementProtocolSecretRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  /** Updates a measurement protocol secret. */
  updateMeasurementProtocolSecret(
    request: UpdateMeasurementProtocolSecretRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<MeasurementProtocolSecret>>;
  /**
   * Acknowledges the terms of user data collection for the specified property.
   *
   * This acknowledgement must be completed (either in the Google Analytics UI
   * or through this API) before MeasurementProtocolSecret resources may be
   * created.
   */
  acknowledgeUserDataCollection(
    request: AcknowledgeUserDataCollectionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AcknowledgeUserDataCollectionResponse>>;
  /** Looks up a single SKAdNetworkConversionValueSchema. */
  getSKAdNetworkConversionValueSchema(
    request: GetSKAdNetworkConversionValueSchemaRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SKAdNetworkConversionValueSchema>>;
  /** Creates a SKAdNetworkConversionValueSchema. */
  createSKAdNetworkConversionValueSchema(
    request: CreateSKAdNetworkConversionValueSchemaRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SKAdNetworkConversionValueSchema>>;
  /** Deletes target SKAdNetworkConversionValueSchema. */
  deleteSKAdNetworkConversionValueSchema(
    request: DeleteSKAdNetworkConversionValueSchemaRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  /** Updates a SKAdNetworkConversionValueSchema. */
  updateSKAdNetworkConversionValueSchema(
    request: UpdateSKAdNetworkConversionValueSchemaRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SKAdNetworkConversionValueSchema>>;
  /**
   * Lists SKAdNetworkConversionValueSchema on a stream.
   * Properties can have at most one SKAdNetworkConversionValueSchema.
   */
  listSKAdNetworkConversionValueSchemas(
    request: ListSKAdNetworkConversionValueSchemasRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListSKAdNetworkConversionValueSchemasResponse>>;
  /**
   * Searches through all changes to an account or its children given the
   * specified set of filters.
   */
  searchChangeHistoryEvents(
    request: SearchChangeHistoryEventsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SearchChangeHistoryEventsResponse>>;
  /** Lookup for Google Signals settings for a property. */
  getGoogleSignalsSettings(
    request: GetGoogleSignalsSettingsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GoogleSignalsSettings>>;
  /** Updates Google Signals settings for a property. */
  updateGoogleSignalsSettings(
    request: UpdateGoogleSignalsSettingsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GoogleSignalsSettings>>;
  /**
   * Deprecated: Use `CreateKeyEvent` instead.
   * Creates a conversion event with the specified attributes.
   *
   * @deprecated
   */
  createConversionEvent(
    request: CreateConversionEventRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ConversionEvent>>;
  /**
   * Deprecated: Use `UpdateKeyEvent` instead.
   * Updates a conversion event with the specified attributes.
   *
   * @deprecated
   */
  updateConversionEvent(
    request: UpdateConversionEventRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ConversionEvent>>;
  /**
   * Deprecated: Use `GetKeyEvent` instead.
   * Retrieve a single conversion event.
   *
   * @deprecated
   */
  getConversionEvent(
    request: GetConversionEventRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ConversionEvent>>;
  /**
   * Deprecated: Use `DeleteKeyEvent` instead.
   * Deletes a conversion event in a property.
   *
   * @deprecated
   */
  deleteConversionEvent(
    request: DeleteConversionEventRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  /**
   * Deprecated: Use `ListKeyEvents` instead.
   * Returns a list of conversion events in the specified parent property.
   *
   * Returns an empty list if no conversion events are found.
   *
   * @deprecated
   */
  listConversionEvents(
    request: ListConversionEventsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListConversionEventsResponse>>;
  /** Creates a Key Event. */
  createKeyEvent(request: CreateKeyEventRequest, context: CallContext & CallContextExt): Promise<DeepPartial<KeyEvent>>;
  /** Updates a Key Event. */
  updateKeyEvent(request: UpdateKeyEventRequest, context: CallContext & CallContextExt): Promise<DeepPartial<KeyEvent>>;
  /** Retrieve a single Key Event. */
  getKeyEvent(request: GetKeyEventRequest, context: CallContext & CallContextExt): Promise<DeepPartial<KeyEvent>>;
  /** Deletes a Key Event. */
  deleteKeyEvent(request: DeleteKeyEventRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
  /**
   * Returns a list of Key Events in the specified parent property.
   * Returns an empty list if no Key Events are found.
   */
  listKeyEvents(
    request: ListKeyEventsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListKeyEventsResponse>>;
  /** Look up a single DisplayVideo360AdvertiserLink */
  getDisplayVideo360AdvertiserLink(
    request: GetDisplayVideo360AdvertiserLinkRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<DisplayVideo360AdvertiserLink>>;
  /** Lists all DisplayVideo360AdvertiserLinks on a property. */
  listDisplayVideo360AdvertiserLinks(
    request: ListDisplayVideo360AdvertiserLinksRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListDisplayVideo360AdvertiserLinksResponse>>;
  /**
   * Creates a DisplayVideo360AdvertiserLink.
   * This can only be utilized by users who have proper authorization both on
   * the Google Analytics property and on the Display & Video 360 advertiser.
   * Users who do not have access to the Display & Video 360 advertiser should
   * instead seek to create a DisplayVideo360LinkProposal.
   */
  createDisplayVideo360AdvertiserLink(
    request: CreateDisplayVideo360AdvertiserLinkRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<DisplayVideo360AdvertiserLink>>;
  /** Deletes a DisplayVideo360AdvertiserLink on a property. */
  deleteDisplayVideo360AdvertiserLink(
    request: DeleteDisplayVideo360AdvertiserLinkRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  /** Updates a DisplayVideo360AdvertiserLink on a property. */
  updateDisplayVideo360AdvertiserLink(
    request: UpdateDisplayVideo360AdvertiserLinkRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<DisplayVideo360AdvertiserLink>>;
  /** Lookup for a single DisplayVideo360AdvertiserLinkProposal. */
  getDisplayVideo360AdvertiserLinkProposal(
    request: GetDisplayVideo360AdvertiserLinkProposalRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<DisplayVideo360AdvertiserLinkProposal>>;
  /** Lists DisplayVideo360AdvertiserLinkProposals on a property. */
  listDisplayVideo360AdvertiserLinkProposals(
    request: ListDisplayVideo360AdvertiserLinkProposalsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListDisplayVideo360AdvertiserLinkProposalsResponse>>;
  /** Creates a DisplayVideo360AdvertiserLinkProposal. */
  createDisplayVideo360AdvertiserLinkProposal(
    request: CreateDisplayVideo360AdvertiserLinkProposalRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<DisplayVideo360AdvertiserLinkProposal>>;
  /**
   * Deletes a DisplayVideo360AdvertiserLinkProposal on a property.
   * This can only be used on cancelled proposals.
   */
  deleteDisplayVideo360AdvertiserLinkProposal(
    request: DeleteDisplayVideo360AdvertiserLinkProposalRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  /**
   * Approves a DisplayVideo360AdvertiserLinkProposal.
   * The DisplayVideo360AdvertiserLinkProposal will be deleted and a new
   * DisplayVideo360AdvertiserLink will be created.
   */
  approveDisplayVideo360AdvertiserLinkProposal(
    request: ApproveDisplayVideo360AdvertiserLinkProposalRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ApproveDisplayVideo360AdvertiserLinkProposalResponse>>;
  /**
   * Cancels a DisplayVideo360AdvertiserLinkProposal.
   * Cancelling can mean either:
   * - Declining a proposal initiated from Display & Video 360
   * - Withdrawing a proposal initiated from Google Analytics
   * After being cancelled, a proposal will eventually be deleted automatically.
   */
  cancelDisplayVideo360AdvertiserLinkProposal(
    request: CancelDisplayVideo360AdvertiserLinkProposalRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<DisplayVideo360AdvertiserLinkProposal>>;
  /** Creates a CustomDimension. */
  createCustomDimension(
    request: CreateCustomDimensionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<CustomDimension>>;
  /** Updates a CustomDimension on a property. */
  updateCustomDimension(
    request: UpdateCustomDimensionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<CustomDimension>>;
  /** Lists CustomDimensions on a property. */
  listCustomDimensions(
    request: ListCustomDimensionsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListCustomDimensionsResponse>>;
  /** Archives a CustomDimension on a property. */
  archiveCustomDimension(
    request: ArchiveCustomDimensionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  /** Lookup for a single CustomDimension. */
  getCustomDimension(
    request: GetCustomDimensionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<CustomDimension>>;
  /** Creates a CustomMetric. */
  createCustomMetric(
    request: CreateCustomMetricRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<CustomMetric>>;
  /** Updates a CustomMetric on a property. */
  updateCustomMetric(
    request: UpdateCustomMetricRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<CustomMetric>>;
  /** Lists CustomMetrics on a property. */
  listCustomMetrics(
    request: ListCustomMetricsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListCustomMetricsResponse>>;
  /** Archives a CustomMetric on a property. */
  archiveCustomMetric(
    request: ArchiveCustomMetricRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  /** Lookup for a single CustomMetric. */
  getCustomMetric(
    request: GetCustomMetricRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<CustomMetric>>;
  /** Returns the singleton data retention settings for this property. */
  getDataRetentionSettings(
    request: GetDataRetentionSettingsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<DataRetentionSettings>>;
  /** Updates the singleton data retention settings for this property. */
  updateDataRetentionSettings(
    request: UpdateDataRetentionSettingsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<DataRetentionSettings>>;
  /** Creates a DataStream. */
  createDataStream(
    request: CreateDataStreamRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<DataStream>>;
  /** Deletes a DataStream on a property. */
  deleteDataStream(
    request: DeleteDataStreamRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  /** Updates a DataStream on a property. */
  updateDataStream(
    request: UpdateDataStreamRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<DataStream>>;
  /** Lists DataStreams on a property. */
  listDataStreams(
    request: ListDataStreamsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListDataStreamsResponse>>;
  /** Lookup for a single DataStream. */
  getDataStream(request: GetDataStreamRequest, context: CallContext & CallContextExt): Promise<DeepPartial<DataStream>>;
  /**
   * Lookup for a single Audience.
   * Audiences created before 2020 may not be supported.
   * Default audiences will not show filter definitions.
   */
  getAudience(request: GetAudienceRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Audience>>;
  /**
   * Lists Audiences on a property.
   * Audiences created before 2020 may not be supported.
   * Default audiences will not show filter definitions.
   */
  listAudiences(
    request: ListAudiencesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListAudiencesResponse>>;
  /** Creates an Audience. */
  createAudience(request: CreateAudienceRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Audience>>;
  /** Updates an Audience on a property. */
  updateAudience(request: UpdateAudienceRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Audience>>;
  /** Archives an Audience on a property. */
  archiveAudience(request: ArchiveAudienceRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
  /** Look up a single SearchAds360Link */
  getSearchAds360Link(
    request: GetSearchAds360LinkRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SearchAds360Link>>;
  /** Lists all SearchAds360Links on a property. */
  listSearchAds360Links(
    request: ListSearchAds360LinksRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListSearchAds360LinksResponse>>;
  /** Creates a SearchAds360Link. */
  createSearchAds360Link(
    request: CreateSearchAds360LinkRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SearchAds360Link>>;
  /** Deletes a SearchAds360Link on a property. */
  deleteSearchAds360Link(
    request: DeleteSearchAds360LinkRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  /** Updates a SearchAds360Link on a property. */
  updateSearchAds360Link(
    request: UpdateSearchAds360LinkRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SearchAds360Link>>;
  /** Lookup for a AttributionSettings singleton. */
  getAttributionSettings(
    request: GetAttributionSettingsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AttributionSettings>>;
  /** Updates attribution settings on a property. */
  updateAttributionSettings(
    request: UpdateAttributionSettingsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AttributionSettings>>;
  /**
   * Returns a customized report of data access records. The report provides
   * records of each time a user reads Google Analytics reporting data. Access
   * records are retained for up to 2 years.
   *
   * Data Access Reports can be requested for a property. Reports may be
   * requested for any property, but dimensions that aren't related to quota can
   * only be requested on Google Analytics 360 properties. This method is only
   * available to Administrators.
   *
   * These data access records include GA4 UI Reporting, GA4 UI Explorations,
   * GA4 Data API, and other products like Firebase & Admob that can retrieve
   * data from Google Analytics through a linkage. These records don't include
   * property configuration changes like adding a stream or changing a
   * property's time zone. For configuration change history, see
   * [searchChangeHistoryEvents](https://developers.google.com/analytics/devguides/config/admin/v1/rest/v1alpha/accounts/searchChangeHistoryEvents).
   */
  runAccessReport(
    request: RunAccessReportRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<RunAccessReportResponse>>;
  /** Creates an access binding on an account or property. */
  createAccessBinding(
    request: CreateAccessBindingRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AccessBinding>>;
  /** Gets information about an access binding. */
  getAccessBinding(
    request: GetAccessBindingRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AccessBinding>>;
  /** Updates an access binding on an account or property. */
  updateAccessBinding(
    request: UpdateAccessBindingRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AccessBinding>>;
  /** Deletes an access binding on an account or property. */
  deleteAccessBinding(
    request: DeleteAccessBindingRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  /** Lists all access bindings on an account or property. */
  listAccessBindings(
    request: ListAccessBindingsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListAccessBindingsResponse>>;
  /**
   * Creates information about multiple access bindings to an account or
   * property.
   *
   * This method is transactional. If any AccessBinding cannot be created, none
   * of the AccessBindings will be created.
   */
  batchCreateAccessBindings(
    request: BatchCreateAccessBindingsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<BatchCreateAccessBindingsResponse>>;
  /** Gets information about multiple access bindings to an account or property. */
  batchGetAccessBindings(
    request: BatchGetAccessBindingsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<BatchGetAccessBindingsResponse>>;
  /**
   * Updates information about multiple access bindings to an account or
   * property.
   */
  batchUpdateAccessBindings(
    request: BatchUpdateAccessBindingsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<BatchUpdateAccessBindingsResponse>>;
  /** Deletes information about multiple users' links to an account or property. */
  batchDeleteAccessBindings(
    request: BatchDeleteAccessBindingsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  /** Lookup for a single ExpandedDataSet. */
  getExpandedDataSet(
    request: GetExpandedDataSetRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ExpandedDataSet>>;
  /** Lists ExpandedDataSets on a property. */
  listExpandedDataSets(
    request: ListExpandedDataSetsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListExpandedDataSetsResponse>>;
  /** Creates a ExpandedDataSet. */
  createExpandedDataSet(
    request: CreateExpandedDataSetRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ExpandedDataSet>>;
  /** Updates a ExpandedDataSet on a property. */
  updateExpandedDataSet(
    request: UpdateExpandedDataSetRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ExpandedDataSet>>;
  /** Deletes a ExpandedDataSet on a property. */
  deleteExpandedDataSet(
    request: DeleteExpandedDataSetRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  /** Lookup for a single ChannelGroup. */
  getChannelGroup(
    request: GetChannelGroupRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ChannelGroup>>;
  /** Lists ChannelGroups on a property. */
  listChannelGroups(
    request: ListChannelGroupsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListChannelGroupsResponse>>;
  /** Creates a ChannelGroup. */
  createChannelGroup(
    request: CreateChannelGroupRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ChannelGroup>>;
  /** Updates a ChannelGroup. */
  updateChannelGroup(
    request: UpdateChannelGroupRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ChannelGroup>>;
  /** Deletes a ChannelGroup on a property. */
  deleteChannelGroup(
    request: DeleteChannelGroupRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  /**
   * Sets the opt out status for the automated GA4 setup process for a UA
   * property.
   * Note: this has no effect on GA4 property.
   */
  setAutomatedGa4ConfigurationOptOut(
    request: SetAutomatedGa4ConfigurationOptOutRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SetAutomatedGa4ConfigurationOptOutResponse>>;
  /**
   * Fetches the opt out status for the automated GA4 setup process for a UA
   * property.
   * Note: this has no effect on GA4 property.
   */
  fetchAutomatedGa4ConfigurationOptOut(
    request: FetchAutomatedGa4ConfigurationOptOutRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<FetchAutomatedGa4ConfigurationOptOutResponse>>;
  /** Creates a BigQueryLink. */
  createBigQueryLink(
    request: CreateBigQueryLinkRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<BigQueryLink>>;
  /** Lookup for a single BigQuery Link. */
  getBigQueryLink(
    request: GetBigQueryLinkRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<BigQueryLink>>;
  /** Lists BigQuery Links on a property. */
  listBigQueryLinks(
    request: ListBigQueryLinksRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListBigQueryLinksResponse>>;
  /** Deletes a BigQueryLink on a property. */
  deleteBigQueryLink(
    request: DeleteBigQueryLinkRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  /** Updates a BigQueryLink. */
  updateBigQueryLink(
    request: UpdateBigQueryLinkRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<BigQueryLink>>;
  /**
   * Returns the enhanced measurement settings for this data stream.
   * Note that the stream must enable enhanced measurement for these settings to
   * take effect.
   */
  getEnhancedMeasurementSettings(
    request: GetEnhancedMeasurementSettingsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<EnhancedMeasurementSettings>>;
  /**
   * Updates the enhanced measurement settings for this data stream.
   * Note that the stream must enable enhanced measurement for these settings to
   * take effect.
   */
  updateEnhancedMeasurementSettings(
    request: UpdateEnhancedMeasurementSettingsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<EnhancedMeasurementSettings>>;
  /**
   * Creates a connected site tag for a Universal Analytics property. You can
   * create a maximum of 20 connected site tags per property.
   * Note: This API cannot be used on GA4 properties.
   */
  createConnectedSiteTag(
    request: CreateConnectedSiteTagRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<CreateConnectedSiteTagResponse>>;
  /**
   * Deletes a connected site tag for a Universal Analytics property.
   * Note: this has no effect on GA4 properties.
   */
  deleteConnectedSiteTag(
    request: DeleteConnectedSiteTagRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  /**
   * Lists the connected site tags for a Universal Analytics property. A maximum
   * of 20 connected site tags will be returned. Note: this has no effect on GA4
   * property.
   */
  listConnectedSiteTags(
    request: ListConnectedSiteTagsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListConnectedSiteTagsResponse>>;
  /**
   * Given a specified UA property, looks up the GA4 property connected to it.
   * Note: this cannot be used with GA4 properties.
   */
  fetchConnectedGa4Property(
    request: FetchConnectedGa4PropertyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<FetchConnectedGa4PropertyResponse>>;
  /** Looks up a single AdSenseLink. */
  getAdSenseLink(
    request: GetAdSenseLinkRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AdSenseLink>>;
  /** Creates an AdSenseLink. */
  createAdSenseLink(
    request: CreateAdSenseLinkRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AdSenseLink>>;
  /** Deletes an AdSenseLink. */
  deleteAdSenseLink(
    request: DeleteAdSenseLinkRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  /** Lists AdSenseLinks on a property. */
  listAdSenseLinks(
    request: ListAdSenseLinksRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListAdSenseLinksResponse>>;
  /** Lookup for a single EventCreateRule. */
  getEventCreateRule(
    request: GetEventCreateRuleRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<EventCreateRule>>;
  /** Lists EventCreateRules on a web data stream. */
  listEventCreateRules(
    request: ListEventCreateRulesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListEventCreateRulesResponse>>;
  /** Creates an EventCreateRule. */
  createEventCreateRule(
    request: CreateEventCreateRuleRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<EventCreateRule>>;
  /** Updates an EventCreateRule. */
  updateEventCreateRule(
    request: UpdateEventCreateRuleRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<EventCreateRule>>;
  /** Deletes an EventCreateRule. */
  deleteEventCreateRule(
    request: DeleteEventCreateRuleRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  /** Lookup for a single EventEditRule. */
  getEventEditRule(
    request: GetEventEditRuleRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<EventEditRule>>;
  /** Lists EventEditRules on a web data stream. */
  listEventEditRules(
    request: ListEventEditRulesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListEventEditRulesResponse>>;
  /** Creates an EventEditRule. */
  createEventEditRule(
    request: CreateEventEditRuleRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<EventEditRule>>;
  /** Updates an EventEditRule. */
  updateEventEditRule(
    request: UpdateEventEditRuleRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<EventEditRule>>;
  /** Deletes an EventEditRule. */
  deleteEventEditRule(
    request: DeleteEventEditRuleRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  /** Changes the processing order of event edit rules on the specified stream. */
  reorderEventEditRules(
    request: ReorderEventEditRulesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  /** Updates a DataRedactionSettings on a property. */
  updateDataRedactionSettings(
    request: UpdateDataRedactionSettingsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<DataRedactionSettings>>;
  /** Lookup for a single DataRedactionSettings. */
  getDataRedactionSettings(
    request: GetDataRedactionSettingsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<DataRedactionSettings>>;
  /** Lookup for a single CalculatedMetric. */
  getCalculatedMetric(
    request: GetCalculatedMetricRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<CalculatedMetric>>;
  /** Creates a CalculatedMetric. */
  createCalculatedMetric(
    request: CreateCalculatedMetricRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<CalculatedMetric>>;
  /** Lists CalculatedMetrics on a property. */
  listCalculatedMetrics(
    request: ListCalculatedMetricsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListCalculatedMetricsResponse>>;
  /** Updates a CalculatedMetric on a property. */
  updateCalculatedMetric(
    request: UpdateCalculatedMetricRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<CalculatedMetric>>;
  /** Deletes a CalculatedMetric on a property. */
  deleteCalculatedMetric(
    request: DeleteCalculatedMetricRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  /** Create a roll-up property and all roll-up property source links. */
  createRollupProperty(
    request: CreateRollupPropertyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<CreateRollupPropertyResponse>>;
  /**
   * Lookup for a single roll-up property source Link.
   * Only roll-up properties can have source links, so this method will throw an
   * error if used on other types of properties.
   */
  getRollupPropertySourceLink(
    request: GetRollupPropertySourceLinkRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<RollupPropertySourceLink>>;
  /**
   * Lists roll-up property source Links on a property.
   * Only roll-up properties can have source links, so this method will throw an
   * error if used on other types of properties.
   */
  listRollupPropertySourceLinks(
    request: ListRollupPropertySourceLinksRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListRollupPropertySourceLinksResponse>>;
  /**
   * Creates a roll-up property source link.
   * Only roll-up properties can have source links, so this method will throw an
   * error if used on other types of properties.
   */
  createRollupPropertySourceLink(
    request: CreateRollupPropertySourceLinkRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<RollupPropertySourceLink>>;
  /**
   * Deletes a roll-up property source link.
   * Only roll-up properties can have source links, so this method will throw an
   * error if used on other types of properties.
   */
  deleteRollupPropertySourceLink(
    request: DeleteRollupPropertySourceLinkRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  /**
   * Create a subproperty and a subproperty event filter that applies to the
   * created subproperty.
   */
  provisionSubproperty(
    request: ProvisionSubpropertyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ProvisionSubpropertyResponse>>;
  /** Creates a subproperty Event Filter. */
  createSubpropertyEventFilter(
    request: CreateSubpropertyEventFilterRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SubpropertyEventFilter>>;
  /** Lookup for a single subproperty Event Filter. */
  getSubpropertyEventFilter(
    request: GetSubpropertyEventFilterRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SubpropertyEventFilter>>;
  /** List all subproperty Event Filters on a property. */
  listSubpropertyEventFilters(
    request: ListSubpropertyEventFiltersRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListSubpropertyEventFiltersResponse>>;
  /** Updates a subproperty Event Filter. */
  updateSubpropertyEventFilter(
    request: UpdateSubpropertyEventFilterRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SubpropertyEventFilter>>;
  /** Deletes a subproperty event filter. */
  deleteSubpropertyEventFilter(
    request: DeleteSubpropertyEventFilterRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
}

export interface AnalyticsAdminServiceClient<CallOptionsExt = {}> {
  /** Lookup for a single Account. */
  getAccount(request: DeepPartial<GetAccountRequest>, options?: CallOptions & CallOptionsExt): Promise<Account>;
  /**
   * Returns all accounts accessible by the caller.
   *
   * Note that these accounts might not currently have GA4 properties.
   * Soft-deleted (ie: "trashed") accounts are excluded by default.
   * Returns an empty list if no relevant accounts are found.
   */
  listAccounts(
    request: DeepPartial<ListAccountsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListAccountsResponse>;
  /**
   * Marks target Account as soft-deleted (ie: "trashed") and returns it.
   *
   * This API does not have a method to restore soft-deleted accounts.
   * However, they can be restored using the Trash Can UI.
   *
   * If the accounts are not restored before the expiration time, the account
   * and all child resources (eg: Properties, GoogleAdsLinks, Streams,
   * AccessBindings) will be permanently purged.
   * https://support.google.com/analytics/answer/6154772
   *
   * Returns an error if the target is not found.
   */
  deleteAccount(request: DeepPartial<DeleteAccountRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
  /** Updates an account. */
  updateAccount(request: DeepPartial<UpdateAccountRequest>, options?: CallOptions & CallOptionsExt): Promise<Account>;
  /** Requests a ticket for creating an account. */
  provisionAccountTicket(
    request: DeepPartial<ProvisionAccountTicketRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ProvisionAccountTicketResponse>;
  /** Returns summaries of all accounts accessible by the caller. */
  listAccountSummaries(
    request: DeepPartial<ListAccountSummariesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListAccountSummariesResponse>;
  /** Lookup for a single "GA4" Property. */
  getProperty(request: DeepPartial<GetPropertyRequest>, options?: CallOptions & CallOptionsExt): Promise<Property>;
  /**
   * Returns child Properties under the specified parent Account.
   *
   * Only "GA4" properties will be returned.
   * Properties will be excluded if the caller does not have access.
   * Soft-deleted (ie: "trashed") properties are excluded by default.
   * Returns an empty list if no relevant properties are found.
   */
  listProperties(
    request: DeepPartial<ListPropertiesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListPropertiesResponse>;
  /** Creates an "GA4" property with the specified location and attributes. */
  createProperty(
    request: DeepPartial<CreatePropertyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Property>;
  /**
   * Marks target Property as soft-deleted (ie: "trashed") and returns it.
   *
   * This API does not have a method to restore soft-deleted properties.
   * However, they can be restored using the Trash Can UI.
   *
   * If the properties are not restored before the expiration time, the Property
   * and all child resources (eg: GoogleAdsLinks, Streams, AccessBindings)
   * will be permanently purged.
   * https://support.google.com/analytics/answer/6154772
   *
   * Returns an error if the target is not found, or is not a GA4 Property.
   */
  deleteProperty(
    request: DeepPartial<DeletePropertyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Property>;
  /** Updates a property. */
  updateProperty(
    request: DeepPartial<UpdatePropertyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Property>;
  /**
   * Creates a FirebaseLink.
   *
   * Properties can have at most one FirebaseLink.
   */
  createFirebaseLink(
    request: DeepPartial<CreateFirebaseLinkRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<FirebaseLink>;
  /** Deletes a FirebaseLink on a property */
  deleteFirebaseLink(
    request: DeepPartial<DeleteFirebaseLinkRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  /**
   * Lists FirebaseLinks on a property.
   * Properties can have at most one FirebaseLink.
   */
  listFirebaseLinks(
    request: DeepPartial<ListFirebaseLinksRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListFirebaseLinksResponse>;
  /**
   * Returns the Site Tag for the specified web stream.
   * Site Tags are immutable singletons.
   */
  getGlobalSiteTag(
    request: DeepPartial<GetGlobalSiteTagRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GlobalSiteTag>;
  /** Creates a GoogleAdsLink. */
  createGoogleAdsLink(
    request: DeepPartial<CreateGoogleAdsLinkRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GoogleAdsLink>;
  /** Updates a GoogleAdsLink on a property */
  updateGoogleAdsLink(
    request: DeepPartial<UpdateGoogleAdsLinkRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GoogleAdsLink>;
  /** Deletes a GoogleAdsLink on a property */
  deleteGoogleAdsLink(
    request: DeepPartial<DeleteGoogleAdsLinkRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  /** Lists GoogleAdsLinks on a property. */
  listGoogleAdsLinks(
    request: DeepPartial<ListGoogleAdsLinksRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListGoogleAdsLinksResponse>;
  /**
   * Get data sharing settings on an account.
   * Data sharing settings are singletons.
   */
  getDataSharingSettings(
    request: DeepPartial<GetDataSharingSettingsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<DataSharingSettings>;
  /** Lookup for a single "GA4" MeasurementProtocolSecret. */
  getMeasurementProtocolSecret(
    request: DeepPartial<GetMeasurementProtocolSecretRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<MeasurementProtocolSecret>;
  /**
   * Returns child MeasurementProtocolSecrets under the specified parent
   * Property.
   */
  listMeasurementProtocolSecrets(
    request: DeepPartial<ListMeasurementProtocolSecretsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListMeasurementProtocolSecretsResponse>;
  /** Creates a measurement protocol secret. */
  createMeasurementProtocolSecret(
    request: DeepPartial<CreateMeasurementProtocolSecretRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<MeasurementProtocolSecret>;
  /** Deletes target MeasurementProtocolSecret. */
  deleteMeasurementProtocolSecret(
    request: DeepPartial<DeleteMeasurementProtocolSecretRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  /** Updates a measurement protocol secret. */
  updateMeasurementProtocolSecret(
    request: DeepPartial<UpdateMeasurementProtocolSecretRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<MeasurementProtocolSecret>;
  /**
   * Acknowledges the terms of user data collection for the specified property.
   *
   * This acknowledgement must be completed (either in the Google Analytics UI
   * or through this API) before MeasurementProtocolSecret resources may be
   * created.
   */
  acknowledgeUserDataCollection(
    request: DeepPartial<AcknowledgeUserDataCollectionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AcknowledgeUserDataCollectionResponse>;
  /** Looks up a single SKAdNetworkConversionValueSchema. */
  getSKAdNetworkConversionValueSchema(
    request: DeepPartial<GetSKAdNetworkConversionValueSchemaRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SKAdNetworkConversionValueSchema>;
  /** Creates a SKAdNetworkConversionValueSchema. */
  createSKAdNetworkConversionValueSchema(
    request: DeepPartial<CreateSKAdNetworkConversionValueSchemaRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SKAdNetworkConversionValueSchema>;
  /** Deletes target SKAdNetworkConversionValueSchema. */
  deleteSKAdNetworkConversionValueSchema(
    request: DeepPartial<DeleteSKAdNetworkConversionValueSchemaRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  /** Updates a SKAdNetworkConversionValueSchema. */
  updateSKAdNetworkConversionValueSchema(
    request: DeepPartial<UpdateSKAdNetworkConversionValueSchemaRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SKAdNetworkConversionValueSchema>;
  /**
   * Lists SKAdNetworkConversionValueSchema on a stream.
   * Properties can have at most one SKAdNetworkConversionValueSchema.
   */
  listSKAdNetworkConversionValueSchemas(
    request: DeepPartial<ListSKAdNetworkConversionValueSchemasRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListSKAdNetworkConversionValueSchemasResponse>;
  /**
   * Searches through all changes to an account or its children given the
   * specified set of filters.
   */
  searchChangeHistoryEvents(
    request: DeepPartial<SearchChangeHistoryEventsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SearchChangeHistoryEventsResponse>;
  /** Lookup for Google Signals settings for a property. */
  getGoogleSignalsSettings(
    request: DeepPartial<GetGoogleSignalsSettingsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GoogleSignalsSettings>;
  /** Updates Google Signals settings for a property. */
  updateGoogleSignalsSettings(
    request: DeepPartial<UpdateGoogleSignalsSettingsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GoogleSignalsSettings>;
  /**
   * Deprecated: Use `CreateKeyEvent` instead.
   * Creates a conversion event with the specified attributes.
   *
   * @deprecated
   */
  createConversionEvent(
    request: DeepPartial<CreateConversionEventRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ConversionEvent>;
  /**
   * Deprecated: Use `UpdateKeyEvent` instead.
   * Updates a conversion event with the specified attributes.
   *
   * @deprecated
   */
  updateConversionEvent(
    request: DeepPartial<UpdateConversionEventRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ConversionEvent>;
  /**
   * Deprecated: Use `GetKeyEvent` instead.
   * Retrieve a single conversion event.
   *
   * @deprecated
   */
  getConversionEvent(
    request: DeepPartial<GetConversionEventRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ConversionEvent>;
  /**
   * Deprecated: Use `DeleteKeyEvent` instead.
   * Deletes a conversion event in a property.
   *
   * @deprecated
   */
  deleteConversionEvent(
    request: DeepPartial<DeleteConversionEventRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  /**
   * Deprecated: Use `ListKeyEvents` instead.
   * Returns a list of conversion events in the specified parent property.
   *
   * Returns an empty list if no conversion events are found.
   *
   * @deprecated
   */
  listConversionEvents(
    request: DeepPartial<ListConversionEventsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListConversionEventsResponse>;
  /** Creates a Key Event. */
  createKeyEvent(
    request: DeepPartial<CreateKeyEventRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<KeyEvent>;
  /** Updates a Key Event. */
  updateKeyEvent(
    request: DeepPartial<UpdateKeyEventRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<KeyEvent>;
  /** Retrieve a single Key Event. */
  getKeyEvent(request: DeepPartial<GetKeyEventRequest>, options?: CallOptions & CallOptionsExt): Promise<KeyEvent>;
  /** Deletes a Key Event. */
  deleteKeyEvent(request: DeepPartial<DeleteKeyEventRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
  /**
   * Returns a list of Key Events in the specified parent property.
   * Returns an empty list if no Key Events are found.
   */
  listKeyEvents(
    request: DeepPartial<ListKeyEventsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListKeyEventsResponse>;
  /** Look up a single DisplayVideo360AdvertiserLink */
  getDisplayVideo360AdvertiserLink(
    request: DeepPartial<GetDisplayVideo360AdvertiserLinkRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<DisplayVideo360AdvertiserLink>;
  /** Lists all DisplayVideo360AdvertiserLinks on a property. */
  listDisplayVideo360AdvertiserLinks(
    request: DeepPartial<ListDisplayVideo360AdvertiserLinksRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListDisplayVideo360AdvertiserLinksResponse>;
  /**
   * Creates a DisplayVideo360AdvertiserLink.
   * This can only be utilized by users who have proper authorization both on
   * the Google Analytics property and on the Display & Video 360 advertiser.
   * Users who do not have access to the Display & Video 360 advertiser should
   * instead seek to create a DisplayVideo360LinkProposal.
   */
  createDisplayVideo360AdvertiserLink(
    request: DeepPartial<CreateDisplayVideo360AdvertiserLinkRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<DisplayVideo360AdvertiserLink>;
  /** Deletes a DisplayVideo360AdvertiserLink on a property. */
  deleteDisplayVideo360AdvertiserLink(
    request: DeepPartial<DeleteDisplayVideo360AdvertiserLinkRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  /** Updates a DisplayVideo360AdvertiserLink on a property. */
  updateDisplayVideo360AdvertiserLink(
    request: DeepPartial<UpdateDisplayVideo360AdvertiserLinkRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<DisplayVideo360AdvertiserLink>;
  /** Lookup for a single DisplayVideo360AdvertiserLinkProposal. */
  getDisplayVideo360AdvertiserLinkProposal(
    request: DeepPartial<GetDisplayVideo360AdvertiserLinkProposalRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<DisplayVideo360AdvertiserLinkProposal>;
  /** Lists DisplayVideo360AdvertiserLinkProposals on a property. */
  listDisplayVideo360AdvertiserLinkProposals(
    request: DeepPartial<ListDisplayVideo360AdvertiserLinkProposalsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListDisplayVideo360AdvertiserLinkProposalsResponse>;
  /** Creates a DisplayVideo360AdvertiserLinkProposal. */
  createDisplayVideo360AdvertiserLinkProposal(
    request: DeepPartial<CreateDisplayVideo360AdvertiserLinkProposalRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<DisplayVideo360AdvertiserLinkProposal>;
  /**
   * Deletes a DisplayVideo360AdvertiserLinkProposal on a property.
   * This can only be used on cancelled proposals.
   */
  deleteDisplayVideo360AdvertiserLinkProposal(
    request: DeepPartial<DeleteDisplayVideo360AdvertiserLinkProposalRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  /**
   * Approves a DisplayVideo360AdvertiserLinkProposal.
   * The DisplayVideo360AdvertiserLinkProposal will be deleted and a new
   * DisplayVideo360AdvertiserLink will be created.
   */
  approveDisplayVideo360AdvertiserLinkProposal(
    request: DeepPartial<ApproveDisplayVideo360AdvertiserLinkProposalRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ApproveDisplayVideo360AdvertiserLinkProposalResponse>;
  /**
   * Cancels a DisplayVideo360AdvertiserLinkProposal.
   * Cancelling can mean either:
   * - Declining a proposal initiated from Display & Video 360
   * - Withdrawing a proposal initiated from Google Analytics
   * After being cancelled, a proposal will eventually be deleted automatically.
   */
  cancelDisplayVideo360AdvertiserLinkProposal(
    request: DeepPartial<CancelDisplayVideo360AdvertiserLinkProposalRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<DisplayVideo360AdvertiserLinkProposal>;
  /** Creates a CustomDimension. */
  createCustomDimension(
    request: DeepPartial<CreateCustomDimensionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<CustomDimension>;
  /** Updates a CustomDimension on a property. */
  updateCustomDimension(
    request: DeepPartial<UpdateCustomDimensionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<CustomDimension>;
  /** Lists CustomDimensions on a property. */
  listCustomDimensions(
    request: DeepPartial<ListCustomDimensionsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListCustomDimensionsResponse>;
  /** Archives a CustomDimension on a property. */
  archiveCustomDimension(
    request: DeepPartial<ArchiveCustomDimensionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  /** Lookup for a single CustomDimension. */
  getCustomDimension(
    request: DeepPartial<GetCustomDimensionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<CustomDimension>;
  /** Creates a CustomMetric. */
  createCustomMetric(
    request: DeepPartial<CreateCustomMetricRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<CustomMetric>;
  /** Updates a CustomMetric on a property. */
  updateCustomMetric(
    request: DeepPartial<UpdateCustomMetricRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<CustomMetric>;
  /** Lists CustomMetrics on a property. */
  listCustomMetrics(
    request: DeepPartial<ListCustomMetricsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListCustomMetricsResponse>;
  /** Archives a CustomMetric on a property. */
  archiveCustomMetric(
    request: DeepPartial<ArchiveCustomMetricRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  /** Lookup for a single CustomMetric. */
  getCustomMetric(
    request: DeepPartial<GetCustomMetricRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<CustomMetric>;
  /** Returns the singleton data retention settings for this property. */
  getDataRetentionSettings(
    request: DeepPartial<GetDataRetentionSettingsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<DataRetentionSettings>;
  /** Updates the singleton data retention settings for this property. */
  updateDataRetentionSettings(
    request: DeepPartial<UpdateDataRetentionSettingsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<DataRetentionSettings>;
  /** Creates a DataStream. */
  createDataStream(
    request: DeepPartial<CreateDataStreamRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<DataStream>;
  /** Deletes a DataStream on a property. */
  deleteDataStream(
    request: DeepPartial<DeleteDataStreamRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  /** Updates a DataStream on a property. */
  updateDataStream(
    request: DeepPartial<UpdateDataStreamRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<DataStream>;
  /** Lists DataStreams on a property. */
  listDataStreams(
    request: DeepPartial<ListDataStreamsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListDataStreamsResponse>;
  /** Lookup for a single DataStream. */
  getDataStream(
    request: DeepPartial<GetDataStreamRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<DataStream>;
  /**
   * Lookup for a single Audience.
   * Audiences created before 2020 may not be supported.
   * Default audiences will not show filter definitions.
   */
  getAudience(request: DeepPartial<GetAudienceRequest>, options?: CallOptions & CallOptionsExt): Promise<Audience>;
  /**
   * Lists Audiences on a property.
   * Audiences created before 2020 may not be supported.
   * Default audiences will not show filter definitions.
   */
  listAudiences(
    request: DeepPartial<ListAudiencesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListAudiencesResponse>;
  /** Creates an Audience. */
  createAudience(
    request: DeepPartial<CreateAudienceRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Audience>;
  /** Updates an Audience on a property. */
  updateAudience(
    request: DeepPartial<UpdateAudienceRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Audience>;
  /** Archives an Audience on a property. */
  archiveAudience(request: DeepPartial<ArchiveAudienceRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
  /** Look up a single SearchAds360Link */
  getSearchAds360Link(
    request: DeepPartial<GetSearchAds360LinkRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SearchAds360Link>;
  /** Lists all SearchAds360Links on a property. */
  listSearchAds360Links(
    request: DeepPartial<ListSearchAds360LinksRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListSearchAds360LinksResponse>;
  /** Creates a SearchAds360Link. */
  createSearchAds360Link(
    request: DeepPartial<CreateSearchAds360LinkRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SearchAds360Link>;
  /** Deletes a SearchAds360Link on a property. */
  deleteSearchAds360Link(
    request: DeepPartial<DeleteSearchAds360LinkRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  /** Updates a SearchAds360Link on a property. */
  updateSearchAds360Link(
    request: DeepPartial<UpdateSearchAds360LinkRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SearchAds360Link>;
  /** Lookup for a AttributionSettings singleton. */
  getAttributionSettings(
    request: DeepPartial<GetAttributionSettingsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AttributionSettings>;
  /** Updates attribution settings on a property. */
  updateAttributionSettings(
    request: DeepPartial<UpdateAttributionSettingsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AttributionSettings>;
  /**
   * Returns a customized report of data access records. The report provides
   * records of each time a user reads Google Analytics reporting data. Access
   * records are retained for up to 2 years.
   *
   * Data Access Reports can be requested for a property. Reports may be
   * requested for any property, but dimensions that aren't related to quota can
   * only be requested on Google Analytics 360 properties. This method is only
   * available to Administrators.
   *
   * These data access records include GA4 UI Reporting, GA4 UI Explorations,
   * GA4 Data API, and other products like Firebase & Admob that can retrieve
   * data from Google Analytics through a linkage. These records don't include
   * property configuration changes like adding a stream or changing a
   * property's time zone. For configuration change history, see
   * [searchChangeHistoryEvents](https://developers.google.com/analytics/devguides/config/admin/v1/rest/v1alpha/accounts/searchChangeHistoryEvents).
   */
  runAccessReport(
    request: DeepPartial<RunAccessReportRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<RunAccessReportResponse>;
  /** Creates an access binding on an account or property. */
  createAccessBinding(
    request: DeepPartial<CreateAccessBindingRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AccessBinding>;
  /** Gets information about an access binding. */
  getAccessBinding(
    request: DeepPartial<GetAccessBindingRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AccessBinding>;
  /** Updates an access binding on an account or property. */
  updateAccessBinding(
    request: DeepPartial<UpdateAccessBindingRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AccessBinding>;
  /** Deletes an access binding on an account or property. */
  deleteAccessBinding(
    request: DeepPartial<DeleteAccessBindingRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  /** Lists all access bindings on an account or property. */
  listAccessBindings(
    request: DeepPartial<ListAccessBindingsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListAccessBindingsResponse>;
  /**
   * Creates information about multiple access bindings to an account or
   * property.
   *
   * This method is transactional. If any AccessBinding cannot be created, none
   * of the AccessBindings will be created.
   */
  batchCreateAccessBindings(
    request: DeepPartial<BatchCreateAccessBindingsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<BatchCreateAccessBindingsResponse>;
  /** Gets information about multiple access bindings to an account or property. */
  batchGetAccessBindings(
    request: DeepPartial<BatchGetAccessBindingsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<BatchGetAccessBindingsResponse>;
  /**
   * Updates information about multiple access bindings to an account or
   * property.
   */
  batchUpdateAccessBindings(
    request: DeepPartial<BatchUpdateAccessBindingsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<BatchUpdateAccessBindingsResponse>;
  /** Deletes information about multiple users' links to an account or property. */
  batchDeleteAccessBindings(
    request: DeepPartial<BatchDeleteAccessBindingsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  /** Lookup for a single ExpandedDataSet. */
  getExpandedDataSet(
    request: DeepPartial<GetExpandedDataSetRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ExpandedDataSet>;
  /** Lists ExpandedDataSets on a property. */
  listExpandedDataSets(
    request: DeepPartial<ListExpandedDataSetsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListExpandedDataSetsResponse>;
  /** Creates a ExpandedDataSet. */
  createExpandedDataSet(
    request: DeepPartial<CreateExpandedDataSetRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ExpandedDataSet>;
  /** Updates a ExpandedDataSet on a property. */
  updateExpandedDataSet(
    request: DeepPartial<UpdateExpandedDataSetRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ExpandedDataSet>;
  /** Deletes a ExpandedDataSet on a property. */
  deleteExpandedDataSet(
    request: DeepPartial<DeleteExpandedDataSetRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  /** Lookup for a single ChannelGroup. */
  getChannelGroup(
    request: DeepPartial<GetChannelGroupRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ChannelGroup>;
  /** Lists ChannelGroups on a property. */
  listChannelGroups(
    request: DeepPartial<ListChannelGroupsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListChannelGroupsResponse>;
  /** Creates a ChannelGroup. */
  createChannelGroup(
    request: DeepPartial<CreateChannelGroupRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ChannelGroup>;
  /** Updates a ChannelGroup. */
  updateChannelGroup(
    request: DeepPartial<UpdateChannelGroupRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ChannelGroup>;
  /** Deletes a ChannelGroup on a property. */
  deleteChannelGroup(
    request: DeepPartial<DeleteChannelGroupRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  /**
   * Sets the opt out status for the automated GA4 setup process for a UA
   * property.
   * Note: this has no effect on GA4 property.
   */
  setAutomatedGa4ConfigurationOptOut(
    request: DeepPartial<SetAutomatedGa4ConfigurationOptOutRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SetAutomatedGa4ConfigurationOptOutResponse>;
  /**
   * Fetches the opt out status for the automated GA4 setup process for a UA
   * property.
   * Note: this has no effect on GA4 property.
   */
  fetchAutomatedGa4ConfigurationOptOut(
    request: DeepPartial<FetchAutomatedGa4ConfigurationOptOutRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<FetchAutomatedGa4ConfigurationOptOutResponse>;
  /** Creates a BigQueryLink. */
  createBigQueryLink(
    request: DeepPartial<CreateBigQueryLinkRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<BigQueryLink>;
  /** Lookup for a single BigQuery Link. */
  getBigQueryLink(
    request: DeepPartial<GetBigQueryLinkRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<BigQueryLink>;
  /** Lists BigQuery Links on a property. */
  listBigQueryLinks(
    request: DeepPartial<ListBigQueryLinksRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListBigQueryLinksResponse>;
  /** Deletes a BigQueryLink on a property. */
  deleteBigQueryLink(
    request: DeepPartial<DeleteBigQueryLinkRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  /** Updates a BigQueryLink. */
  updateBigQueryLink(
    request: DeepPartial<UpdateBigQueryLinkRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<BigQueryLink>;
  /**
   * Returns the enhanced measurement settings for this data stream.
   * Note that the stream must enable enhanced measurement for these settings to
   * take effect.
   */
  getEnhancedMeasurementSettings(
    request: DeepPartial<GetEnhancedMeasurementSettingsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<EnhancedMeasurementSettings>;
  /**
   * Updates the enhanced measurement settings for this data stream.
   * Note that the stream must enable enhanced measurement for these settings to
   * take effect.
   */
  updateEnhancedMeasurementSettings(
    request: DeepPartial<UpdateEnhancedMeasurementSettingsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<EnhancedMeasurementSettings>;
  /**
   * Creates a connected site tag for a Universal Analytics property. You can
   * create a maximum of 20 connected site tags per property.
   * Note: This API cannot be used on GA4 properties.
   */
  createConnectedSiteTag(
    request: DeepPartial<CreateConnectedSiteTagRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<CreateConnectedSiteTagResponse>;
  /**
   * Deletes a connected site tag for a Universal Analytics property.
   * Note: this has no effect on GA4 properties.
   */
  deleteConnectedSiteTag(
    request: DeepPartial<DeleteConnectedSiteTagRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  /**
   * Lists the connected site tags for a Universal Analytics property. A maximum
   * of 20 connected site tags will be returned. Note: this has no effect on GA4
   * property.
   */
  listConnectedSiteTags(
    request: DeepPartial<ListConnectedSiteTagsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListConnectedSiteTagsResponse>;
  /**
   * Given a specified UA property, looks up the GA4 property connected to it.
   * Note: this cannot be used with GA4 properties.
   */
  fetchConnectedGa4Property(
    request: DeepPartial<FetchConnectedGa4PropertyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<FetchConnectedGa4PropertyResponse>;
  /** Looks up a single AdSenseLink. */
  getAdSenseLink(
    request: DeepPartial<GetAdSenseLinkRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AdSenseLink>;
  /** Creates an AdSenseLink. */
  createAdSenseLink(
    request: DeepPartial<CreateAdSenseLinkRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AdSenseLink>;
  /** Deletes an AdSenseLink. */
  deleteAdSenseLink(
    request: DeepPartial<DeleteAdSenseLinkRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  /** Lists AdSenseLinks on a property. */
  listAdSenseLinks(
    request: DeepPartial<ListAdSenseLinksRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListAdSenseLinksResponse>;
  /** Lookup for a single EventCreateRule. */
  getEventCreateRule(
    request: DeepPartial<GetEventCreateRuleRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<EventCreateRule>;
  /** Lists EventCreateRules on a web data stream. */
  listEventCreateRules(
    request: DeepPartial<ListEventCreateRulesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListEventCreateRulesResponse>;
  /** Creates an EventCreateRule. */
  createEventCreateRule(
    request: DeepPartial<CreateEventCreateRuleRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<EventCreateRule>;
  /** Updates an EventCreateRule. */
  updateEventCreateRule(
    request: DeepPartial<UpdateEventCreateRuleRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<EventCreateRule>;
  /** Deletes an EventCreateRule. */
  deleteEventCreateRule(
    request: DeepPartial<DeleteEventCreateRuleRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  /** Lookup for a single EventEditRule. */
  getEventEditRule(
    request: DeepPartial<GetEventEditRuleRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<EventEditRule>;
  /** Lists EventEditRules on a web data stream. */
  listEventEditRules(
    request: DeepPartial<ListEventEditRulesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListEventEditRulesResponse>;
  /** Creates an EventEditRule. */
  createEventEditRule(
    request: DeepPartial<CreateEventEditRuleRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<EventEditRule>;
  /** Updates an EventEditRule. */
  updateEventEditRule(
    request: DeepPartial<UpdateEventEditRuleRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<EventEditRule>;
  /** Deletes an EventEditRule. */
  deleteEventEditRule(
    request: DeepPartial<DeleteEventEditRuleRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  /** Changes the processing order of event edit rules on the specified stream. */
  reorderEventEditRules(
    request: DeepPartial<ReorderEventEditRulesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  /** Updates a DataRedactionSettings on a property. */
  updateDataRedactionSettings(
    request: DeepPartial<UpdateDataRedactionSettingsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<DataRedactionSettings>;
  /** Lookup for a single DataRedactionSettings. */
  getDataRedactionSettings(
    request: DeepPartial<GetDataRedactionSettingsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<DataRedactionSettings>;
  /** Lookup for a single CalculatedMetric. */
  getCalculatedMetric(
    request: DeepPartial<GetCalculatedMetricRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<CalculatedMetric>;
  /** Creates a CalculatedMetric. */
  createCalculatedMetric(
    request: DeepPartial<CreateCalculatedMetricRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<CalculatedMetric>;
  /** Lists CalculatedMetrics on a property. */
  listCalculatedMetrics(
    request: DeepPartial<ListCalculatedMetricsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListCalculatedMetricsResponse>;
  /** Updates a CalculatedMetric on a property. */
  updateCalculatedMetric(
    request: DeepPartial<UpdateCalculatedMetricRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<CalculatedMetric>;
  /** Deletes a CalculatedMetric on a property. */
  deleteCalculatedMetric(
    request: DeepPartial<DeleteCalculatedMetricRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  /** Create a roll-up property and all roll-up property source links. */
  createRollupProperty(
    request: DeepPartial<CreateRollupPropertyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<CreateRollupPropertyResponse>;
  /**
   * Lookup for a single roll-up property source Link.
   * Only roll-up properties can have source links, so this method will throw an
   * error if used on other types of properties.
   */
  getRollupPropertySourceLink(
    request: DeepPartial<GetRollupPropertySourceLinkRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<RollupPropertySourceLink>;
  /**
   * Lists roll-up property source Links on a property.
   * Only roll-up properties can have source links, so this method will throw an
   * error if used on other types of properties.
   */
  listRollupPropertySourceLinks(
    request: DeepPartial<ListRollupPropertySourceLinksRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListRollupPropertySourceLinksResponse>;
  /**
   * Creates a roll-up property source link.
   * Only roll-up properties can have source links, so this method will throw an
   * error if used on other types of properties.
   */
  createRollupPropertySourceLink(
    request: DeepPartial<CreateRollupPropertySourceLinkRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<RollupPropertySourceLink>;
  /**
   * Deletes a roll-up property source link.
   * Only roll-up properties can have source links, so this method will throw an
   * error if used on other types of properties.
   */
  deleteRollupPropertySourceLink(
    request: DeepPartial<DeleteRollupPropertySourceLinkRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  /**
   * Create a subproperty and a subproperty event filter that applies to the
   * created subproperty.
   */
  provisionSubproperty(
    request: DeepPartial<ProvisionSubpropertyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ProvisionSubpropertyResponse>;
  /** Creates a subproperty Event Filter. */
  createSubpropertyEventFilter(
    request: DeepPartial<CreateSubpropertyEventFilterRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SubpropertyEventFilter>;
  /** Lookup for a single subproperty Event Filter. */
  getSubpropertyEventFilter(
    request: DeepPartial<GetSubpropertyEventFilterRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SubpropertyEventFilter>;
  /** List all subproperty Event Filters on a property. */
  listSubpropertyEventFilters(
    request: DeepPartial<ListSubpropertyEventFiltersRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListSubpropertyEventFiltersResponse>;
  /** Updates a subproperty Event Filter. */
  updateSubpropertyEventFilter(
    request: DeepPartial<UpdateSubpropertyEventFilterRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SubpropertyEventFilter>;
  /** Deletes a subproperty event filter. */
  deleteSubpropertyEventFilter(
    request: DeepPartial<DeleteSubpropertyEventFilterRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
