// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/analytics/admin/v1alpha/expanded_data_set.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../protobuf/timestamp.js";

export const protobufPackage = "google.analytics.admin.v1alpha";

/** A specific filter for a single dimension */
export interface ExpandedDataSetFilter {
  /** A filter for a string-type dimension that matches a particular pattern. */
  stringFilter?:
    | ExpandedDataSetFilter_StringFilter
    | undefined;
  /**
   * A filter for a string dimension that matches a particular list of
   * options.
   */
  inListFilter?:
    | ExpandedDataSetFilter_InListFilter
    | undefined;
  /** Required. The dimension name to filter. */
  fieldName: string;
}

/** A filter for a string-type dimension that matches a particular pattern. */
export interface ExpandedDataSetFilter_StringFilter {
  /** Required. The match type for the string filter. */
  matchType: ExpandedDataSetFilter_StringFilter_MatchType;
  /** Required. The string value to be matched against. */
  value: string;
  /**
   * Optional. If true, the match is case-sensitive. If false, the match is
   * case-insensitive.
   * Must be true when match_type is EXACT.
   * Must be false when match_type is CONTAINS.
   */
  caseSensitive: boolean;
}

/** The match type for the string filter. */
export enum ExpandedDataSetFilter_StringFilter_MatchType {
  /** MATCH_TYPE_UNSPECIFIED - Unspecified */
  MATCH_TYPE_UNSPECIFIED = 0,
  /** EXACT - Exact match of the string value. */
  EXACT = 1,
  /** CONTAINS - Contains the string value. */
  CONTAINS = 2,
  UNRECOGNIZED = -1,
}

export function expandedDataSetFilter_StringFilter_MatchTypeFromJSON(
  object: any,
): ExpandedDataSetFilter_StringFilter_MatchType {
  switch (object) {
    case 0:
    case "MATCH_TYPE_UNSPECIFIED":
      return ExpandedDataSetFilter_StringFilter_MatchType.MATCH_TYPE_UNSPECIFIED;
    case 1:
    case "EXACT":
      return ExpandedDataSetFilter_StringFilter_MatchType.EXACT;
    case 2:
    case "CONTAINS":
      return ExpandedDataSetFilter_StringFilter_MatchType.CONTAINS;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ExpandedDataSetFilter_StringFilter_MatchType.UNRECOGNIZED;
  }
}

export function expandedDataSetFilter_StringFilter_MatchTypeToJSON(
  object: ExpandedDataSetFilter_StringFilter_MatchType,
): string {
  switch (object) {
    case ExpandedDataSetFilter_StringFilter_MatchType.MATCH_TYPE_UNSPECIFIED:
      return "MATCH_TYPE_UNSPECIFIED";
    case ExpandedDataSetFilter_StringFilter_MatchType.EXACT:
      return "EXACT";
    case ExpandedDataSetFilter_StringFilter_MatchType.CONTAINS:
      return "CONTAINS";
    case ExpandedDataSetFilter_StringFilter_MatchType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** A filter for a string dimension that matches a particular list of options. */
export interface ExpandedDataSetFilter_InListFilter {
  /**
   * Required. The list of possible string values to match against. Must be
   * non-empty.
   */
  values: string[];
  /**
   * Optional. If true, the match is case-sensitive. If false, the match is
   * case-insensitive.
   * Must be true.
   */
  caseSensitive: boolean;
}

/** A logical expression of EnhancedDataSet dimension filters. */
export interface ExpandedDataSetFilterExpression {
  /**
   * A list of expressions to be ANDâ€™ed together. It must contain a
   * ExpandedDataSetFilterExpression with either not_expression or
   * dimension_filter. This must be set for the top level
   * ExpandedDataSetFilterExpression.
   */
  andGroup?:
    | ExpandedDataSetFilterExpressionList
    | undefined;
  /**
   * A filter expression to be NOT'ed (that is, inverted, complemented). It
   * must include a dimension_filter. This cannot be set on the
   * top level ExpandedDataSetFilterExpression.
   */
  notExpression?:
    | ExpandedDataSetFilterExpression
    | undefined;
  /**
   * A filter on a single dimension. This cannot be set on the top
   * level ExpandedDataSetFilterExpression.
   */
  filter?: ExpandedDataSetFilter | undefined;
}

/** A list of ExpandedDataSet filter expressions. */
export interface ExpandedDataSetFilterExpressionList {
  /** A list of ExpandedDataSet filter expressions. */
  filterExpressions: ExpandedDataSetFilterExpression[];
}

/** A resource message representing a GA4 ExpandedDataSet. */
export interface ExpandedDataSet {
  /**
   * Output only. The resource name for this ExpandedDataSet resource.
   * Format: properties/{property_id}/expandedDataSets/{expanded_data_set}
   */
  name: string;
  /**
   * Required. The display name of the ExpandedDataSet.
   * Max 200 chars.
   */
  displayName: string;
  /**
   * Optional. The description of the ExpandedDataSet.
   * Max 50 chars.
   */
  description: string;
  /**
   * Immutable. The list of dimensions included in the ExpandedDataSet.
   * See the [API
   * Dimensions](https://developers.google.com/analytics/devguides/reporting/data/v1/api-schema#dimensions)
   * for the list of dimension names.
   */
  dimensionNames: string[];
  /**
   * Immutable. The list of metrics included in the ExpandedDataSet.
   * See the [API
   * Metrics](https://developers.google.com/analytics/devguides/reporting/data/v1/api-schema#metrics)
   * for the list of dimension names.
   */
  metricNames: string[];
  /**
   * Immutable. A logical expression of ExpandedDataSet filters applied to
   * dimension included in the ExpandedDataSet. This filter is used to reduce
   * the number of rows and thus the chance of encountering `other` row.
   */
  dimensionFilterExpression:
    | ExpandedDataSetFilterExpression
    | undefined;
  /**
   * Output only. Time when expanded data set began (or will begin) collecing
   * data.
   */
  dataCollectionStartTime: Date | undefined;
}

function createBaseExpandedDataSetFilter(): ExpandedDataSetFilter {
  return { stringFilter: undefined, inListFilter: undefined, fieldName: "" };
}

export const ExpandedDataSetFilter: MessageFns<ExpandedDataSetFilter> = {
  encode(message: ExpandedDataSetFilter, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.stringFilter !== undefined) {
      ExpandedDataSetFilter_StringFilter.encode(message.stringFilter, writer.uint32(18).fork()).join();
    }
    if (message.inListFilter !== undefined) {
      ExpandedDataSetFilter_InListFilter.encode(message.inListFilter, writer.uint32(26).fork()).join();
    }
    if (message.fieldName !== "") {
      writer.uint32(10).string(message.fieldName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExpandedDataSetFilter {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExpandedDataSetFilter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.stringFilter = ExpandedDataSetFilter_StringFilter.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.inListFilter = ExpandedDataSetFilter_InListFilter.decode(reader, reader.uint32());
          continue;
        case 1:
          if (tag !== 10) {
            break;
          }

          message.fieldName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExpandedDataSetFilter {
    return {
      stringFilter: isSet(object.stringFilter)
        ? ExpandedDataSetFilter_StringFilter.fromJSON(object.stringFilter)
        : undefined,
      inListFilter: isSet(object.inListFilter)
        ? ExpandedDataSetFilter_InListFilter.fromJSON(object.inListFilter)
        : undefined,
      fieldName: isSet(object.fieldName) ? globalThis.String(object.fieldName) : "",
    };
  },

  toJSON(message: ExpandedDataSetFilter): unknown {
    const obj: any = {};
    if (message.stringFilter !== undefined) {
      obj.stringFilter = ExpandedDataSetFilter_StringFilter.toJSON(message.stringFilter);
    }
    if (message.inListFilter !== undefined) {
      obj.inListFilter = ExpandedDataSetFilter_InListFilter.toJSON(message.inListFilter);
    }
    if (message.fieldName !== "") {
      obj.fieldName = message.fieldName;
    }
    return obj;
  },

  create(base?: DeepPartial<ExpandedDataSetFilter>): ExpandedDataSetFilter {
    return ExpandedDataSetFilter.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExpandedDataSetFilter>): ExpandedDataSetFilter {
    const message = createBaseExpandedDataSetFilter();
    message.stringFilter = (object.stringFilter !== undefined && object.stringFilter !== null)
      ? ExpandedDataSetFilter_StringFilter.fromPartial(object.stringFilter)
      : undefined;
    message.inListFilter = (object.inListFilter !== undefined && object.inListFilter !== null)
      ? ExpandedDataSetFilter_InListFilter.fromPartial(object.inListFilter)
      : undefined;
    message.fieldName = object.fieldName ?? "";
    return message;
  },
};

function createBaseExpandedDataSetFilter_StringFilter(): ExpandedDataSetFilter_StringFilter {
  return { matchType: 0, value: "", caseSensitive: false };
}

export const ExpandedDataSetFilter_StringFilter: MessageFns<ExpandedDataSetFilter_StringFilter> = {
  encode(message: ExpandedDataSetFilter_StringFilter, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.matchType !== 0) {
      writer.uint32(8).int32(message.matchType);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    if (message.caseSensitive !== false) {
      writer.uint32(24).bool(message.caseSensitive);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExpandedDataSetFilter_StringFilter {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExpandedDataSetFilter_StringFilter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.matchType = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.caseSensitive = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExpandedDataSetFilter_StringFilter {
    return {
      matchType: isSet(object.matchType) ? expandedDataSetFilter_StringFilter_MatchTypeFromJSON(object.matchType) : 0,
      value: isSet(object.value) ? globalThis.String(object.value) : "",
      caseSensitive: isSet(object.caseSensitive) ? globalThis.Boolean(object.caseSensitive) : false,
    };
  },

  toJSON(message: ExpandedDataSetFilter_StringFilter): unknown {
    const obj: any = {};
    if (message.matchType !== 0) {
      obj.matchType = expandedDataSetFilter_StringFilter_MatchTypeToJSON(message.matchType);
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    if (message.caseSensitive !== false) {
      obj.caseSensitive = message.caseSensitive;
    }
    return obj;
  },

  create(base?: DeepPartial<ExpandedDataSetFilter_StringFilter>): ExpandedDataSetFilter_StringFilter {
    return ExpandedDataSetFilter_StringFilter.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExpandedDataSetFilter_StringFilter>): ExpandedDataSetFilter_StringFilter {
    const message = createBaseExpandedDataSetFilter_StringFilter();
    message.matchType = object.matchType ?? 0;
    message.value = object.value ?? "";
    message.caseSensitive = object.caseSensitive ?? false;
    return message;
  },
};

function createBaseExpandedDataSetFilter_InListFilter(): ExpandedDataSetFilter_InListFilter {
  return { values: [], caseSensitive: false };
}

export const ExpandedDataSetFilter_InListFilter: MessageFns<ExpandedDataSetFilter_InListFilter> = {
  encode(message: ExpandedDataSetFilter_InListFilter, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.values) {
      writer.uint32(10).string(v!);
    }
    if (message.caseSensitive !== false) {
      writer.uint32(16).bool(message.caseSensitive);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExpandedDataSetFilter_InListFilter {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExpandedDataSetFilter_InListFilter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.values.push(reader.string());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.caseSensitive = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExpandedDataSetFilter_InListFilter {
    return {
      values: globalThis.Array.isArray(object?.values) ? object.values.map((e: any) => globalThis.String(e)) : [],
      caseSensitive: isSet(object.caseSensitive) ? globalThis.Boolean(object.caseSensitive) : false,
    };
  },

  toJSON(message: ExpandedDataSetFilter_InListFilter): unknown {
    const obj: any = {};
    if (message.values?.length) {
      obj.values = message.values;
    }
    if (message.caseSensitive !== false) {
      obj.caseSensitive = message.caseSensitive;
    }
    return obj;
  },

  create(base?: DeepPartial<ExpandedDataSetFilter_InListFilter>): ExpandedDataSetFilter_InListFilter {
    return ExpandedDataSetFilter_InListFilter.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExpandedDataSetFilter_InListFilter>): ExpandedDataSetFilter_InListFilter {
    const message = createBaseExpandedDataSetFilter_InListFilter();
    message.values = object.values?.map((e) => e) || [];
    message.caseSensitive = object.caseSensitive ?? false;
    return message;
  },
};

function createBaseExpandedDataSetFilterExpression(): ExpandedDataSetFilterExpression {
  return { andGroup: undefined, notExpression: undefined, filter: undefined };
}

export const ExpandedDataSetFilterExpression: MessageFns<ExpandedDataSetFilterExpression> = {
  encode(message: ExpandedDataSetFilterExpression, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.andGroup !== undefined) {
      ExpandedDataSetFilterExpressionList.encode(message.andGroup, writer.uint32(10).fork()).join();
    }
    if (message.notExpression !== undefined) {
      ExpandedDataSetFilterExpression.encode(message.notExpression, writer.uint32(18).fork()).join();
    }
    if (message.filter !== undefined) {
      ExpandedDataSetFilter.encode(message.filter, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExpandedDataSetFilterExpression {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExpandedDataSetFilterExpression();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.andGroup = ExpandedDataSetFilterExpressionList.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.notExpression = ExpandedDataSetFilterExpression.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.filter = ExpandedDataSetFilter.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExpandedDataSetFilterExpression {
    return {
      andGroup: isSet(object.andGroup) ? ExpandedDataSetFilterExpressionList.fromJSON(object.andGroup) : undefined,
      notExpression: isSet(object.notExpression)
        ? ExpandedDataSetFilterExpression.fromJSON(object.notExpression)
        : undefined,
      filter: isSet(object.filter) ? ExpandedDataSetFilter.fromJSON(object.filter) : undefined,
    };
  },

  toJSON(message: ExpandedDataSetFilterExpression): unknown {
    const obj: any = {};
    if (message.andGroup !== undefined) {
      obj.andGroup = ExpandedDataSetFilterExpressionList.toJSON(message.andGroup);
    }
    if (message.notExpression !== undefined) {
      obj.notExpression = ExpandedDataSetFilterExpression.toJSON(message.notExpression);
    }
    if (message.filter !== undefined) {
      obj.filter = ExpandedDataSetFilter.toJSON(message.filter);
    }
    return obj;
  },

  create(base?: DeepPartial<ExpandedDataSetFilterExpression>): ExpandedDataSetFilterExpression {
    return ExpandedDataSetFilterExpression.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExpandedDataSetFilterExpression>): ExpandedDataSetFilterExpression {
    const message = createBaseExpandedDataSetFilterExpression();
    message.andGroup = (object.andGroup !== undefined && object.andGroup !== null)
      ? ExpandedDataSetFilterExpressionList.fromPartial(object.andGroup)
      : undefined;
    message.notExpression = (object.notExpression !== undefined && object.notExpression !== null)
      ? ExpandedDataSetFilterExpression.fromPartial(object.notExpression)
      : undefined;
    message.filter = (object.filter !== undefined && object.filter !== null)
      ? ExpandedDataSetFilter.fromPartial(object.filter)
      : undefined;
    return message;
  },
};

function createBaseExpandedDataSetFilterExpressionList(): ExpandedDataSetFilterExpressionList {
  return { filterExpressions: [] };
}

export const ExpandedDataSetFilterExpressionList: MessageFns<ExpandedDataSetFilterExpressionList> = {
  encode(message: ExpandedDataSetFilterExpressionList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.filterExpressions) {
      ExpandedDataSetFilterExpression.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExpandedDataSetFilterExpressionList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExpandedDataSetFilterExpressionList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.filterExpressions.push(ExpandedDataSetFilterExpression.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExpandedDataSetFilterExpressionList {
    return {
      filterExpressions: globalThis.Array.isArray(object?.filterExpressions)
        ? object.filterExpressions.map((e: any) => ExpandedDataSetFilterExpression.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ExpandedDataSetFilterExpressionList): unknown {
    const obj: any = {};
    if (message.filterExpressions?.length) {
      obj.filterExpressions = message.filterExpressions.map((e) => ExpandedDataSetFilterExpression.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ExpandedDataSetFilterExpressionList>): ExpandedDataSetFilterExpressionList {
    return ExpandedDataSetFilterExpressionList.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExpandedDataSetFilterExpressionList>): ExpandedDataSetFilterExpressionList {
    const message = createBaseExpandedDataSetFilterExpressionList();
    message.filterExpressions = object.filterExpressions?.map((e) => ExpandedDataSetFilterExpression.fromPartial(e)) ||
      [];
    return message;
  },
};

function createBaseExpandedDataSet(): ExpandedDataSet {
  return {
    name: "",
    displayName: "",
    description: "",
    dimensionNames: [],
    metricNames: [],
    dimensionFilterExpression: undefined,
    dataCollectionStartTime: undefined,
  };
}

export const ExpandedDataSet: MessageFns<ExpandedDataSet> = {
  encode(message: ExpandedDataSet, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.displayName !== "") {
      writer.uint32(18).string(message.displayName);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    for (const v of message.dimensionNames) {
      writer.uint32(34).string(v!);
    }
    for (const v of message.metricNames) {
      writer.uint32(42).string(v!);
    }
    if (message.dimensionFilterExpression !== undefined) {
      ExpandedDataSetFilterExpression.encode(message.dimensionFilterExpression, writer.uint32(50).fork()).join();
    }
    if (message.dataCollectionStartTime !== undefined) {
      Timestamp.encode(toTimestamp(message.dataCollectionStartTime), writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExpandedDataSet {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExpandedDataSet();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.dimensionNames.push(reader.string());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.metricNames.push(reader.string());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.dimensionFilterExpression = ExpandedDataSetFilterExpression.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.dataCollectionStartTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExpandedDataSet {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      dimensionNames: globalThis.Array.isArray(object?.dimensionNames)
        ? object.dimensionNames.map((e: any) => globalThis.String(e))
        : [],
      metricNames: globalThis.Array.isArray(object?.metricNames)
        ? object.metricNames.map((e: any) => globalThis.String(e))
        : [],
      dimensionFilterExpression: isSet(object.dimensionFilterExpression)
        ? ExpandedDataSetFilterExpression.fromJSON(object.dimensionFilterExpression)
        : undefined,
      dataCollectionStartTime: isSet(object.dataCollectionStartTime)
        ? fromJsonTimestamp(object.dataCollectionStartTime)
        : undefined,
    };
  },

  toJSON(message: ExpandedDataSet): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.dimensionNames?.length) {
      obj.dimensionNames = message.dimensionNames;
    }
    if (message.metricNames?.length) {
      obj.metricNames = message.metricNames;
    }
    if (message.dimensionFilterExpression !== undefined) {
      obj.dimensionFilterExpression = ExpandedDataSetFilterExpression.toJSON(message.dimensionFilterExpression);
    }
    if (message.dataCollectionStartTime !== undefined) {
      obj.dataCollectionStartTime = message.dataCollectionStartTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<ExpandedDataSet>): ExpandedDataSet {
    return ExpandedDataSet.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExpandedDataSet>): ExpandedDataSet {
    const message = createBaseExpandedDataSet();
    message.name = object.name ?? "";
    message.displayName = object.displayName ?? "";
    message.description = object.description ?? "";
    message.dimensionNames = object.dimensionNames?.map((e) => e) || [];
    message.metricNames = object.metricNames?.map((e) => e) || [];
    message.dimensionFilterExpression =
      (object.dimensionFilterExpression !== undefined && object.dimensionFilterExpression !== null)
        ? ExpandedDataSetFilterExpression.fromPartial(object.dimensionFilterExpression)
        : undefined;
    message.dataCollectionStartTime = object.dataCollectionStartTime ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
