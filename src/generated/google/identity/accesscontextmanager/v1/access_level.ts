// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/identity/accesscontextmanager/v1/access_level.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { Expr } from "../../../type/expr.js";
import {
  DeviceEncryptionStatus,
  deviceEncryptionStatusFromJSON,
  deviceEncryptionStatusToJSON,
  DeviceManagementLevel,
  deviceManagementLevelFromJSON,
  deviceManagementLevelToJSON,
  OsType,
  osTypeFromJSON,
  osTypeToJSON,
} from "../type/device_resources.js";

export const protobufPackage = "google.identity.accesscontextmanager.v1";

/**
 * An `AccessLevel` is a label that can be applied to requests to Google Cloud
 * services, along with a list of requirements necessary for the label to be
 * applied.
 */
export interface AccessLevel {
  /**
   * Required. Resource name for the Access Level. The `short_name` component
   * must begin with a letter and only include alphanumeric and '_'. Format:
   * `accessPolicies/{access_policy}/accessLevels/{access_level}`. The maximum
   * length of the `access_level` component is 50 characters.
   */
  name: string;
  /** Human readable title. Must be unique within the Policy. */
  title: string;
  /** Description of the `AccessLevel` and its use. Does not affect behavior. */
  description: string;
  /** A `BasicLevel` composed of `Conditions`. */
  basic?:
    | BasicLevel
    | undefined;
  /** A `CustomLevel` written in the Common Expression Language. */
  custom?:
    | CustomLevel
    | undefined;
  /** Output only. Time the `AccessLevel` was created in UTC. */
  createTime:
    | Date
    | undefined;
  /** Output only. Time the `AccessLevel` was updated in UTC. */
  updateTime: Date | undefined;
}

/** `BasicLevel` is an `AccessLevel` using a set of recommended features. */
export interface BasicLevel {
  /** Required. A list of requirements for the `AccessLevel` to be granted. */
  conditions: Condition[];
  /**
   * How the `conditions` list should be combined to determine if a request is
   * granted this `AccessLevel`. If AND is used, each `Condition` in
   * `conditions` must be satisfied for the `AccessLevel` to be applied. If OR
   * is used, at least one `Condition` in `conditions` must be satisfied for the
   * `AccessLevel` to be applied. Default behavior is AND.
   */
  combiningFunction: BasicLevel_ConditionCombiningFunction;
}

/**
 * Options for how the `conditions` list should be combined to determine if
 * this `AccessLevel` is applied. Default is AND.
 */
export enum BasicLevel_ConditionCombiningFunction {
  /** AND - All `Conditions` must be true for the `BasicLevel` to be true. */
  AND = 0,
  /** OR - If at least one `Condition` is true, then the `BasicLevel` is true. */
  OR = 1,
  UNRECOGNIZED = -1,
}

export function basicLevel_ConditionCombiningFunctionFromJSON(object: any): BasicLevel_ConditionCombiningFunction {
  switch (object) {
    case 0:
    case "AND":
      return BasicLevel_ConditionCombiningFunction.AND;
    case 1:
    case "OR":
      return BasicLevel_ConditionCombiningFunction.OR;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BasicLevel_ConditionCombiningFunction.UNRECOGNIZED;
  }
}

export function basicLevel_ConditionCombiningFunctionToJSON(object: BasicLevel_ConditionCombiningFunction): string {
  switch (object) {
    case BasicLevel_ConditionCombiningFunction.AND:
      return "AND";
    case BasicLevel_ConditionCombiningFunction.OR:
      return "OR";
    case BasicLevel_ConditionCombiningFunction.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * A condition necessary for an `AccessLevel` to be granted. The Condition is an
 * AND over its fields. So a Condition is true if: 1) the request IP is from one
 * of the listed subnetworks AND 2) the originating device complies with the
 * listed device policy AND 3) all listed access levels are granted AND 4) the
 * request was sent at a time allowed by the DateTimeRestriction.
 */
export interface Condition {
  /**
   * CIDR block IP subnetwork specification. May be IPv4 or IPv6. Note that for
   * a CIDR IP address block, the specified IP address portion must be properly
   * truncated (i.e. all the host bits must be zero) or the input is considered
   * malformed. For example, "192.0.2.0/24" is accepted but "192.0.2.1/24" is
   * not. Similarly, for IPv6, "2001:db8::/32" is accepted whereas
   * "2001:db8::1/32" is not. The originating IP of a request must be in one of
   * the listed subnets in order for this Condition to be true. If empty, all IP
   * addresses are allowed.
   */
  ipSubnetworks: string[];
  /**
   * Device specific restrictions, all restrictions must hold for the
   * Condition to be true. If not specified, all devices are allowed.
   */
  devicePolicy:
    | DevicePolicy
    | undefined;
  /**
   * A list of other access levels defined in the same `Policy`, referenced by
   * resource name. Referencing an `AccessLevel` which does not exist is an
   * error. All access levels listed must be granted for the Condition
   * to be true. Example:
   * "`accessPolicies/MY_POLICY/accessLevels/LEVEL_NAME"`
   */
  requiredAccessLevels: string[];
  /**
   * Whether to negate the Condition. If true, the Condition becomes a NAND over
   * its non-empty fields, each field must be false for the Condition overall to
   * be satisfied. Defaults to false.
   */
  negate: boolean;
  /**
   * The request must be made by one of the provided user or service
   * accounts. Groups are not supported.
   * Syntax:
   * `user:{emailid}`
   * `serviceAccount:{emailid}`
   * If not specified, a request may come from any user.
   */
  members: string[];
  /**
   * The request must originate from one of the provided countries/regions.
   * Must be valid ISO 3166-1 alpha-2 codes.
   */
  regions: string[];
}

/**
 * `CustomLevel` is an `AccessLevel` using the Cloud Common Expression Language
 * to represent the necessary conditions for the level to apply to a request.
 * See CEL spec at: https://github.com/google/cel-spec
 */
export interface CustomLevel {
  /** Required. A Cloud CEL expression evaluating to a boolean. */
  expr: Expr | undefined;
}

/**
 * `DevicePolicy` specifies device specific restrictions necessary to acquire a
 * given access level. A `DevicePolicy` specifies requirements for requests from
 * devices to be granted access levels, it does not do any enforcement on the
 * device. `DevicePolicy` acts as an AND over all specified fields, and each
 * repeated field is an OR over its elements. Any unset fields are ignored. For
 * example, if the proto is { os_type : DESKTOP_WINDOWS, os_type :
 * DESKTOP_LINUX, encryption_status: ENCRYPTED}, then the DevicePolicy will be
 * true for requests originating from encrypted Linux desktops and encrypted
 * Windows desktops.
 */
export interface DevicePolicy {
  /**
   * Whether or not screenlock is required for the DevicePolicy to be true.
   * Defaults to `false`.
   */
  requireScreenlock: boolean;
  /** Allowed encryptions statuses, an empty list allows all statuses. */
  allowedEncryptionStatuses: DeviceEncryptionStatus[];
  /** Allowed OS versions, an empty list allows all types and all versions. */
  osConstraints: OsConstraint[];
  /**
   * Allowed device management levels, an empty list allows all management
   * levels.
   */
  allowedDeviceManagementLevels: DeviceManagementLevel[];
  /** Whether the device needs to be approved by the customer admin. */
  requireAdminApproval: boolean;
  /** Whether the device needs to be corp owned. */
  requireCorpOwned: boolean;
}

/** A restriction on the OS type and version of devices making requests. */
export interface OsConstraint {
  /** Required. The allowed OS type. */
  osType: OsType;
  /**
   * The minimum allowed OS version. If not set, any version of this OS
   * satisfies the constraint. Format: `"major.minor.patch"`.
   * Examples: `"10.5.301"`, `"9.2.1"`.
   */
  minimumVersion: string;
  /**
   * Only allows requests from devices with a verified Chrome OS.
   * Verifications includes requirements that the device is enterprise-managed,
   * conformant to domain policies, and the caller has permission to call
   * the API targeted by the request.
   */
  requireVerifiedChromeOs: boolean;
}

function createBaseAccessLevel(): AccessLevel {
  return {
    name: "",
    title: "",
    description: "",
    basic: undefined,
    custom: undefined,
    createTime: undefined,
    updateTime: undefined,
  };
}

export const AccessLevel: MessageFns<AccessLevel> = {
  encode(message: AccessLevel, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    if (message.basic !== undefined) {
      BasicLevel.encode(message.basic, writer.uint32(34).fork()).join();
    }
    if (message.custom !== undefined) {
      CustomLevel.encode(message.custom, writer.uint32(42).fork()).join();
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(50).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AccessLevel {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAccessLevel();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.basic = BasicLevel.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.custom = CustomLevel.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AccessLevel {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      basic: isSet(object.basic) ? BasicLevel.fromJSON(object.basic) : undefined,
      custom: isSet(object.custom) ? CustomLevel.fromJSON(object.custom) : undefined,
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
    };
  },

  toJSON(message: AccessLevel): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.basic !== undefined) {
      obj.basic = BasicLevel.toJSON(message.basic);
    }
    if (message.custom !== undefined) {
      obj.custom = CustomLevel.toJSON(message.custom);
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<AccessLevel>): AccessLevel {
    return AccessLevel.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AccessLevel>): AccessLevel {
    const message = createBaseAccessLevel();
    message.name = object.name ?? "";
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.basic = (object.basic !== undefined && object.basic !== null)
      ? BasicLevel.fromPartial(object.basic)
      : undefined;
    message.custom = (object.custom !== undefined && object.custom !== null)
      ? CustomLevel.fromPartial(object.custom)
      : undefined;
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    return message;
  },
};

function createBaseBasicLevel(): BasicLevel {
  return { conditions: [], combiningFunction: 0 };
}

export const BasicLevel: MessageFns<BasicLevel> = {
  encode(message: BasicLevel, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.conditions) {
      Condition.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.combiningFunction !== 0) {
      writer.uint32(16).int32(message.combiningFunction);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BasicLevel {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBasicLevel();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.conditions.push(Condition.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.combiningFunction = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BasicLevel {
    return {
      conditions: globalThis.Array.isArray(object?.conditions)
        ? object.conditions.map((e: any) => Condition.fromJSON(e))
        : [],
      combiningFunction: isSet(object.combiningFunction)
        ? basicLevel_ConditionCombiningFunctionFromJSON(object.combiningFunction)
        : 0,
    };
  },

  toJSON(message: BasicLevel): unknown {
    const obj: any = {};
    if (message.conditions?.length) {
      obj.conditions = message.conditions.map((e) => Condition.toJSON(e));
    }
    if (message.combiningFunction !== 0) {
      obj.combiningFunction = basicLevel_ConditionCombiningFunctionToJSON(message.combiningFunction);
    }
    return obj;
  },

  create(base?: DeepPartial<BasicLevel>): BasicLevel {
    return BasicLevel.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BasicLevel>): BasicLevel {
    const message = createBaseBasicLevel();
    message.conditions = object.conditions?.map((e) => Condition.fromPartial(e)) || [];
    message.combiningFunction = object.combiningFunction ?? 0;
    return message;
  },
};

function createBaseCondition(): Condition {
  return {
    ipSubnetworks: [],
    devicePolicy: undefined,
    requiredAccessLevels: [],
    negate: false,
    members: [],
    regions: [],
  };
}

export const Condition: MessageFns<Condition> = {
  encode(message: Condition, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.ipSubnetworks) {
      writer.uint32(10).string(v!);
    }
    if (message.devicePolicy !== undefined) {
      DevicePolicy.encode(message.devicePolicy, writer.uint32(18).fork()).join();
    }
    for (const v of message.requiredAccessLevels) {
      writer.uint32(26).string(v!);
    }
    if (message.negate !== false) {
      writer.uint32(40).bool(message.negate);
    }
    for (const v of message.members) {
      writer.uint32(50).string(v!);
    }
    for (const v of message.regions) {
      writer.uint32(58).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Condition {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCondition();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.ipSubnetworks.push(reader.string());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.devicePolicy = DevicePolicy.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.requiredAccessLevels.push(reader.string());
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.negate = reader.bool();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.members.push(reader.string());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.regions.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Condition {
    return {
      ipSubnetworks: globalThis.Array.isArray(object?.ipSubnetworks)
        ? object.ipSubnetworks.map((e: any) => globalThis.String(e))
        : [],
      devicePolicy: isSet(object.devicePolicy) ? DevicePolicy.fromJSON(object.devicePolicy) : undefined,
      requiredAccessLevels: globalThis.Array.isArray(object?.requiredAccessLevels)
        ? object.requiredAccessLevels.map((e: any) => globalThis.String(e))
        : [],
      negate: isSet(object.negate) ? globalThis.Boolean(object.negate) : false,
      members: globalThis.Array.isArray(object?.members) ? object.members.map((e: any) => globalThis.String(e)) : [],
      regions: globalThis.Array.isArray(object?.regions) ? object.regions.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: Condition): unknown {
    const obj: any = {};
    if (message.ipSubnetworks?.length) {
      obj.ipSubnetworks = message.ipSubnetworks;
    }
    if (message.devicePolicy !== undefined) {
      obj.devicePolicy = DevicePolicy.toJSON(message.devicePolicy);
    }
    if (message.requiredAccessLevels?.length) {
      obj.requiredAccessLevels = message.requiredAccessLevels;
    }
    if (message.negate !== false) {
      obj.negate = message.negate;
    }
    if (message.members?.length) {
      obj.members = message.members;
    }
    if (message.regions?.length) {
      obj.regions = message.regions;
    }
    return obj;
  },

  create(base?: DeepPartial<Condition>): Condition {
    return Condition.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Condition>): Condition {
    const message = createBaseCondition();
    message.ipSubnetworks = object.ipSubnetworks?.map((e) => e) || [];
    message.devicePolicy = (object.devicePolicy !== undefined && object.devicePolicy !== null)
      ? DevicePolicy.fromPartial(object.devicePolicy)
      : undefined;
    message.requiredAccessLevels = object.requiredAccessLevels?.map((e) => e) || [];
    message.negate = object.negate ?? false;
    message.members = object.members?.map((e) => e) || [];
    message.regions = object.regions?.map((e) => e) || [];
    return message;
  },
};

function createBaseCustomLevel(): CustomLevel {
  return { expr: undefined };
}

export const CustomLevel: MessageFns<CustomLevel> = {
  encode(message: CustomLevel, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.expr !== undefined) {
      Expr.encode(message.expr, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CustomLevel {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCustomLevel();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.expr = Expr.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CustomLevel {
    return { expr: isSet(object.expr) ? Expr.fromJSON(object.expr) : undefined };
  },

  toJSON(message: CustomLevel): unknown {
    const obj: any = {};
    if (message.expr !== undefined) {
      obj.expr = Expr.toJSON(message.expr);
    }
    return obj;
  },

  create(base?: DeepPartial<CustomLevel>): CustomLevel {
    return CustomLevel.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CustomLevel>): CustomLevel {
    const message = createBaseCustomLevel();
    message.expr = (object.expr !== undefined && object.expr !== null) ? Expr.fromPartial(object.expr) : undefined;
    return message;
  },
};

function createBaseDevicePolicy(): DevicePolicy {
  return {
    requireScreenlock: false,
    allowedEncryptionStatuses: [],
    osConstraints: [],
    allowedDeviceManagementLevels: [],
    requireAdminApproval: false,
    requireCorpOwned: false,
  };
}

export const DevicePolicy: MessageFns<DevicePolicy> = {
  encode(message: DevicePolicy, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.requireScreenlock !== false) {
      writer.uint32(8).bool(message.requireScreenlock);
    }
    writer.uint32(18).fork();
    for (const v of message.allowedEncryptionStatuses) {
      writer.int32(v);
    }
    writer.join();
    for (const v of message.osConstraints) {
      OsConstraint.encode(v!, writer.uint32(26).fork()).join();
    }
    writer.uint32(50).fork();
    for (const v of message.allowedDeviceManagementLevels) {
      writer.int32(v);
    }
    writer.join();
    if (message.requireAdminApproval !== false) {
      writer.uint32(56).bool(message.requireAdminApproval);
    }
    if (message.requireCorpOwned !== false) {
      writer.uint32(64).bool(message.requireCorpOwned);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DevicePolicy {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDevicePolicy();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.requireScreenlock = reader.bool();
          continue;
        case 2:
          if (tag === 16) {
            message.allowedEncryptionStatuses.push(reader.int32() as any);

            continue;
          }

          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.allowedEncryptionStatuses.push(reader.int32() as any);
            }

            continue;
          }

          break;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.osConstraints.push(OsConstraint.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag === 48) {
            message.allowedDeviceManagementLevels.push(reader.int32() as any);

            continue;
          }

          if (tag === 50) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.allowedDeviceManagementLevels.push(reader.int32() as any);
            }

            continue;
          }

          break;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.requireAdminApproval = reader.bool();
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.requireCorpOwned = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DevicePolicy {
    return {
      requireScreenlock: isSet(object.requireScreenlock) ? globalThis.Boolean(object.requireScreenlock) : false,
      allowedEncryptionStatuses: globalThis.Array.isArray(object?.allowedEncryptionStatuses)
        ? object.allowedEncryptionStatuses.map((e: any) => deviceEncryptionStatusFromJSON(e))
        : [],
      osConstraints: globalThis.Array.isArray(object?.osConstraints)
        ? object.osConstraints.map((e: any) => OsConstraint.fromJSON(e))
        : [],
      allowedDeviceManagementLevels: globalThis.Array.isArray(object?.allowedDeviceManagementLevels)
        ? object.allowedDeviceManagementLevels.map((e: any) => deviceManagementLevelFromJSON(e))
        : [],
      requireAdminApproval: isSet(object.requireAdminApproval)
        ? globalThis.Boolean(object.requireAdminApproval)
        : false,
      requireCorpOwned: isSet(object.requireCorpOwned) ? globalThis.Boolean(object.requireCorpOwned) : false,
    };
  },

  toJSON(message: DevicePolicy): unknown {
    const obj: any = {};
    if (message.requireScreenlock !== false) {
      obj.requireScreenlock = message.requireScreenlock;
    }
    if (message.allowedEncryptionStatuses?.length) {
      obj.allowedEncryptionStatuses = message.allowedEncryptionStatuses.map((e) => deviceEncryptionStatusToJSON(e));
    }
    if (message.osConstraints?.length) {
      obj.osConstraints = message.osConstraints.map((e) => OsConstraint.toJSON(e));
    }
    if (message.allowedDeviceManagementLevels?.length) {
      obj.allowedDeviceManagementLevels = message.allowedDeviceManagementLevels.map((e) =>
        deviceManagementLevelToJSON(e)
      );
    }
    if (message.requireAdminApproval !== false) {
      obj.requireAdminApproval = message.requireAdminApproval;
    }
    if (message.requireCorpOwned !== false) {
      obj.requireCorpOwned = message.requireCorpOwned;
    }
    return obj;
  },

  create(base?: DeepPartial<DevicePolicy>): DevicePolicy {
    return DevicePolicy.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DevicePolicy>): DevicePolicy {
    const message = createBaseDevicePolicy();
    message.requireScreenlock = object.requireScreenlock ?? false;
    message.allowedEncryptionStatuses = object.allowedEncryptionStatuses?.map((e) => e) || [];
    message.osConstraints = object.osConstraints?.map((e) => OsConstraint.fromPartial(e)) || [];
    message.allowedDeviceManagementLevels = object.allowedDeviceManagementLevels?.map((e) => e) || [];
    message.requireAdminApproval = object.requireAdminApproval ?? false;
    message.requireCorpOwned = object.requireCorpOwned ?? false;
    return message;
  },
};

function createBaseOsConstraint(): OsConstraint {
  return { osType: 0, minimumVersion: "", requireVerifiedChromeOs: false };
}

export const OsConstraint: MessageFns<OsConstraint> = {
  encode(message: OsConstraint, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.osType !== 0) {
      writer.uint32(8).int32(message.osType);
    }
    if (message.minimumVersion !== "") {
      writer.uint32(18).string(message.minimumVersion);
    }
    if (message.requireVerifiedChromeOs !== false) {
      writer.uint32(24).bool(message.requireVerifiedChromeOs);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OsConstraint {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOsConstraint();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.osType = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.minimumVersion = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.requireVerifiedChromeOs = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OsConstraint {
    return {
      osType: isSet(object.osType) ? osTypeFromJSON(object.osType) : 0,
      minimumVersion: isSet(object.minimumVersion) ? globalThis.String(object.minimumVersion) : "",
      requireVerifiedChromeOs: isSet(object.requireVerifiedChromeOs)
        ? globalThis.Boolean(object.requireVerifiedChromeOs)
        : false,
    };
  },

  toJSON(message: OsConstraint): unknown {
    const obj: any = {};
    if (message.osType !== 0) {
      obj.osType = osTypeToJSON(message.osType);
    }
    if (message.minimumVersion !== "") {
      obj.minimumVersion = message.minimumVersion;
    }
    if (message.requireVerifiedChromeOs !== false) {
      obj.requireVerifiedChromeOs = message.requireVerifiedChromeOs;
    }
    return obj;
  },

  create(base?: DeepPartial<OsConstraint>): OsConstraint {
    return OsConstraint.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<OsConstraint>): OsConstraint {
    const message = createBaseOsConstraint();
    message.osType = object.osType ?? 0;
    message.minimumVersion = object.minimumVersion ?? "";
    message.requireVerifiedChromeOs = object.requireVerifiedChromeOs ?? false;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
