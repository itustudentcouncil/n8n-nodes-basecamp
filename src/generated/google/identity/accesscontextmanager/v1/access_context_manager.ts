// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/identity/accesscontextmanager/v1/access_context_manager.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import {
  GetIamPolicyRequest,
  SetIamPolicyRequest,
  TestIamPermissionsRequest,
  TestIamPermissionsResponse,
} from "../../../iam/v1/iam_policy.js";
import { Policy } from "../../../iam/v1/policy.js";
import { Operation } from "../../../longrunning/operations.js";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { AccessLevel } from "./access_level.js";
import { AccessPolicy } from "./access_policy.js";
import { GcpUserAccessBinding } from "./gcp_user_access_binding.js";
import { ServicePerimeter } from "./service_perimeter.js";

export const protobufPackage = "google.identity.accesscontextmanager.v1";

/** The format used in an `AccessLevel`. */
export enum LevelFormat {
  /** LEVEL_FORMAT_UNSPECIFIED - The format was not specified. */
  LEVEL_FORMAT_UNSPECIFIED = 0,
  /**
   * AS_DEFINED - Uses the format the resource was defined in. BasicLevels are returned as
   * BasicLevels, CustomLevels are returned as CustomLevels.
   */
  AS_DEFINED = 1,
  /**
   * CEL - Use Cloud Common Expression Language when returning the resource.  Both
   * BasicLevels and CustomLevels are returned as CustomLevels.
   */
  CEL = 2,
  UNRECOGNIZED = -1,
}

export function levelFormatFromJSON(object: any): LevelFormat {
  switch (object) {
    case 0:
    case "LEVEL_FORMAT_UNSPECIFIED":
      return LevelFormat.LEVEL_FORMAT_UNSPECIFIED;
    case 1:
    case "AS_DEFINED":
      return LevelFormat.AS_DEFINED;
    case 2:
    case "CEL":
      return LevelFormat.CEL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return LevelFormat.UNRECOGNIZED;
  }
}

export function levelFormatToJSON(object: LevelFormat): string {
  switch (object) {
    case LevelFormat.LEVEL_FORMAT_UNSPECIFIED:
      return "LEVEL_FORMAT_UNSPECIFIED";
    case LevelFormat.AS_DEFINED:
      return "AS_DEFINED";
    case LevelFormat.CEL:
      return "CEL";
    case LevelFormat.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** A request to list all `AccessPolicies` for a container. */
export interface ListAccessPoliciesRequest {
  /**
   * Required. Resource name for the container to list AccessPolicy instances
   * from.
   *
   * Format:
   * `organizations/{org_id}`
   */
  parent: string;
  /** Number of AccessPolicy instances to include in the list. Default 100. */
  pageSize: number;
  /**
   * Next page token for the next batch of AccessPolicy instances. Defaults to
   * the first page of results.
   */
  pageToken: string;
}

/** A response to `ListAccessPoliciesRequest`. */
export interface ListAccessPoliciesResponse {
  /** List of the AccessPolicy instances. */
  accessPolicies: AccessPolicy[];
  /**
   * The pagination token to retrieve the next page of results. If the value is
   * empty, no further results remain.
   */
  nextPageToken: string;
}

/** A request to get a particular `AccessPolicy`. */
export interface GetAccessPolicyRequest {
  /**
   * Required. Resource name for the access policy to get.
   *
   * Format `accessPolicies/{policy_id}`
   */
  name: string;
}

/** A request to update an `AccessPolicy`. */
export interface UpdateAccessPolicyRequest {
  /** Required. The updated AccessPolicy. */
  policy:
    | AccessPolicy
    | undefined;
  /** Required. Mask to control which fields get updated. Must be non-empty. */
  updateMask: string[] | undefined;
}

/** A request to delete an `AccessPolicy`. */
export interface DeleteAccessPolicyRequest {
  /**
   * Required. Resource name for the access policy to delete.
   *
   * Format `accessPolicies/{policy_id}`
   */
  name: string;
}

/** A request to list all `AccessLevels` in an `AccessPolicy`. */
export interface ListAccessLevelsRequest {
  /**
   * Required. Resource name for the access policy to list [Access Levels]
   * [google.identity.accesscontextmanager.v1.AccessLevel] from.
   *
   * Format:
   * `accessPolicies/{policy_id}`
   */
  parent: string;
  /**
   * Number of [Access Levels]
   * [google.identity.accesscontextmanager.v1.AccessLevel] to include in
   * the list. Default 100.
   */
  pageSize: number;
  /**
   * Next page token for the next batch of [Access Level]
   * [google.identity.accesscontextmanager.v1.AccessLevel] instances.
   * Defaults to the first page of results.
   */
  pageToken: string;
  /**
   * Whether to return `BasicLevels` in the Cloud Common Expression language, as
   * `CustomLevels`, rather than as `BasicLevels`. Defaults to returning
   * `AccessLevels` in the format they were defined.
   */
  accessLevelFormat: LevelFormat;
}

/** A response to `ListAccessLevelsRequest`. */
export interface ListAccessLevelsResponse {
  /**
   * List of the [Access Level]
   * [google.identity.accesscontextmanager.v1.AccessLevel] instances.
   */
  accessLevels: AccessLevel[];
  /**
   * The pagination token to retrieve the next page of results. If the value is
   * empty, no further results remain.
   */
  nextPageToken: string;
}

/** A request to get a particular `AccessLevel`. */
export interface GetAccessLevelRequest {
  /**
   * Required. Resource name for the [Access Level]
   * [google.identity.accesscontextmanager.v1.AccessLevel].
   *
   * Format:
   * `accessPolicies/{policy_id}/accessLevels/{access_level_id}`
   */
  name: string;
  /**
   * Whether to return `BasicLevels` in the Cloud Common Expression
   * Language rather than as `BasicLevels`. Defaults to AS_DEFINED, where
   * [Access Levels] [google.identity.accesscontextmanager.v1.AccessLevel]
   * are returned as `BasicLevels` or `CustomLevels` based on how they were
   * created. If set to CEL, all [Access Levels]
   * [google.identity.accesscontextmanager.v1.AccessLevel] are returned as
   * `CustomLevels`. In the CEL case, `BasicLevels` are translated to equivalent
   * `CustomLevels`.
   */
  accessLevelFormat: LevelFormat;
}

/** A request to create an `AccessLevel`. */
export interface CreateAccessLevelRequest {
  /**
   * Required. Resource name for the access policy which owns this [Access
   * Level] [google.identity.accesscontextmanager.v1.AccessLevel].
   *
   * Format: `accessPolicies/{policy_id}`
   */
  parent: string;
  /**
   * Required. The [Access Level]
   * [google.identity.accesscontextmanager.v1.AccessLevel] to create.
   * Syntactic correctness of the [Access Level]
   * [google.identity.accesscontextmanager.v1.AccessLevel] is a
   * precondition for creation.
   */
  accessLevel: AccessLevel | undefined;
}

/** A request to update an `AccessLevel`. */
export interface UpdateAccessLevelRequest {
  /**
   * Required. The updated [Access Level]
   * [google.identity.accesscontextmanager.v1.AccessLevel]. Syntactic
   * correctness of the [Access Level]
   * [google.identity.accesscontextmanager.v1.AccessLevel] is a
   * precondition for creation.
   */
  accessLevel:
    | AccessLevel
    | undefined;
  /** Required. Mask to control which fields get updated. Must be non-empty. */
  updateMask: string[] | undefined;
}

/** A request to delete an `AccessLevel`. */
export interface DeleteAccessLevelRequest {
  /**
   * Required. Resource name for the [Access Level]
   * [google.identity.accesscontextmanager.v1.AccessLevel].
   *
   * Format:
   * `accessPolicies/{policy_id}/accessLevels/{access_level_id}`
   */
  name: string;
}

/**
 * A request to replace all existing Access Levels in an Access Policy with
 * the Access Levels provided. This is done atomically.
 */
export interface ReplaceAccessLevelsRequest {
  /**
   * Required. Resource name for the access policy which owns these
   * [Access Levels]
   * [google.identity.accesscontextmanager.v1.AccessLevel].
   *
   * Format: `accessPolicies/{policy_id}`
   */
  parent: string;
  /**
   * Required. The desired [Access Levels]
   * [google.identity.accesscontextmanager.v1.AccessLevel] that should
   * replace all existing [Access Levels]
   * [google.identity.accesscontextmanager.v1.AccessLevel] in the
   * [Access Policy]
   * [google.identity.accesscontextmanager.v1.AccessPolicy].
   */
  accessLevels: AccessLevel[];
  /**
   * Optional. The etag for the version of the [Access Policy]
   * [google.identity.accesscontextmanager.v1.AccessPolicy] that this
   * replace operation is to be performed on. If, at the time of replace, the
   * etag for the Access Policy stored in Access Context Manager is different
   * from the specified etag, then the replace operation will not be performed
   * and the call will fail. This field is not required. If etag is not
   * provided, the operation will be performed as if a valid etag is provided.
   */
  etag: string;
}

/**
 * A response to ReplaceAccessLevelsRequest. This will be put inside of
 * Operation.response field.
 */
export interface ReplaceAccessLevelsResponse {
  /**
   * List of the [Access Level]
   * [google.identity.accesscontextmanager.v1.AccessLevel] instances.
   */
  accessLevels: AccessLevel[];
}

/** A request to list all `ServicePerimeters` in an `AccessPolicy`. */
export interface ListServicePerimetersRequest {
  /**
   * Required. Resource name for the access policy to list [Service Perimeters]
   * [google.identity.accesscontextmanager.v1.ServicePerimeter] from.
   *
   * Format:
   * `accessPolicies/{policy_id}`
   */
  parent: string;
  /**
   * Number of [Service Perimeters]
   * [google.identity.accesscontextmanager.v1.ServicePerimeter] to include
   * in the list. Default 100.
   */
  pageSize: number;
  /**
   * Next page token for the next batch of [Service Perimeter]
   * [google.identity.accesscontextmanager.v1.ServicePerimeter] instances.
   * Defaults to the first page of results.
   */
  pageToken: string;
}

/** A response to `ListServicePerimetersRequest`. */
export interface ListServicePerimetersResponse {
  /**
   * List of the [Service Perimeter]
   * [google.identity.accesscontextmanager.v1.ServicePerimeter] instances.
   */
  servicePerimeters: ServicePerimeter[];
  /**
   * The pagination token to retrieve the next page of results. If the value is
   * empty, no further results remain.
   */
  nextPageToken: string;
}

/** A request to get a particular `ServicePerimeter`. */
export interface GetServicePerimeterRequest {
  /**
   * Required. Resource name for the [Service Perimeter]
   * [google.identity.accesscontextmanager.v1.ServicePerimeter].
   *
   * Format:
   * `accessPolicies/{policy_id}/servicePerimeters/{service_perimeters_id}`
   */
  name: string;
}

/** A request to create a `ServicePerimeter`. */
export interface CreateServicePerimeterRequest {
  /**
   * Required. Resource name for the access policy which owns this [Service
   * Perimeter] [google.identity.accesscontextmanager.v1.ServicePerimeter].
   *
   * Format: `accessPolicies/{policy_id}`
   */
  parent: string;
  /**
   * Required. The [Service Perimeter]
   * [google.identity.accesscontextmanager.v1.ServicePerimeter] to create.
   * Syntactic correctness of the [Service Perimeter]
   * [google.identity.accesscontextmanager.v1.ServicePerimeter] is a
   * precondition for creation.
   */
  servicePerimeter: ServicePerimeter | undefined;
}

/** A request to update a `ServicePerimeter`. */
export interface UpdateServicePerimeterRequest {
  /**
   * Required. The updated `ServicePerimeter`. Syntactic correctness of the
   * `ServicePerimeter` is a precondition for creation.
   */
  servicePerimeter:
    | ServicePerimeter
    | undefined;
  /** Required. Mask to control which fields get updated. Must be non-empty. */
  updateMask: string[] | undefined;
}

/** A request to delete a `ServicePerimeter`. */
export interface DeleteServicePerimeterRequest {
  /**
   * Required. Resource name for the [Service Perimeter]
   * [google.identity.accesscontextmanager.v1.ServicePerimeter].
   *
   * Format:
   * `accessPolicies/{policy_id}/servicePerimeters/{service_perimeter_id}`
   */
  name: string;
}

/**
 * A request to replace all existing Service Perimeters in an Access Policy
 * with the Service Perimeters provided. This is done atomically.
 */
export interface ReplaceServicePerimetersRequest {
  /**
   * Required. Resource name for the access policy which owns these
   * [Service Perimeters]
   * [google.identity.accesscontextmanager.v1.ServicePerimeter].
   *
   * Format: `accessPolicies/{policy_id}`
   */
  parent: string;
  /**
   * Required. The desired [Service Perimeters]
   * [google.identity.accesscontextmanager.v1.ServicePerimeter] that should
   * replace all existing [Service Perimeters]
   * [google.identity.accesscontextmanager.v1.ServicePerimeter] in the
   * [Access Policy]
   * [google.identity.accesscontextmanager.v1.AccessPolicy].
   */
  servicePerimeters: ServicePerimeter[];
  /**
   * Optional. The etag for the version of the [Access Policy]
   * [google.identity.accesscontextmanager.v1.AccessPolicy] that this
   * replace operation is to be performed on. If, at the time of replace, the
   * etag for the Access Policy stored in Access Context Manager is different
   * from the specified etag, then the replace operation will not be performed
   * and the call will fail. This field is not required. If etag is not
   * provided, the operation will be performed as if a valid etag is provided.
   */
  etag: string;
}

/**
 * A response to ReplaceServicePerimetersRequest. This will be put inside of
 * Operation.response field.
 */
export interface ReplaceServicePerimetersResponse {
  /**
   * List of the [Service Perimeter]
   * [google.identity.accesscontextmanager.v1.ServicePerimeter] instances.
   */
  servicePerimeters: ServicePerimeter[];
}

/**
 * A request to commit dry-run specs in all [Service Perimeters]
 * [google.identity.accesscontextmanager.v1.ServicePerimeter] belonging to
 * an [Access Policy][google.identity.accesscontextmanager.v1.AccessPolicy].
 */
export interface CommitServicePerimetersRequest {
  /**
   * Required. Resource name for the parent [Access Policy]
   * [google.identity.accesscontextmanager.v1.AccessPolicy] which owns all
   * [Service Perimeters]
   * [google.identity.accesscontextmanager.v1.ServicePerimeter] in scope for
   * the commit operation.
   *
   * Format: `accessPolicies/{policy_id}`
   */
  parent: string;
  /**
   * Optional. The etag for the version of the [Access Policy]
   * [google.identity.accesscontextmanager.v1.AccessPolicy] that this
   * commit operation is to be performed on. If, at the time of commit, the
   * etag for the Access Policy stored in Access Context Manager is different
   * from the specified etag, then the commit operation will not be performed
   * and the call will fail. This field is not required. If etag is not
   * provided, the operation will be performed as if a valid etag is provided.
   */
  etag: string;
}

/**
 * A response to CommitServicePerimetersRequest. This will be put inside of
 * Operation.response field.
 */
export interface CommitServicePerimetersResponse {
  /**
   * List of all the [Service Perimeter]
   * [google.identity.accesscontextmanager.v1.ServicePerimeter] instances in
   * the [Access Policy]
   * [google.identity.accesscontextmanager.v1.AccessPolicy].
   */
  servicePerimeters: ServicePerimeter[];
}

/**
 * Request of [ListGcpUserAccessBindings]
 * [google.identity.accesscontextmanager.v1.AccessContextManager.ListGcpUserAccessBindings].
 */
export interface ListGcpUserAccessBindingsRequest {
  /** Required. Example: "organizations/256" */
  parent: string;
  /**
   * Optional. Maximum number of items to return. The server may return fewer items.
   * If left blank, the server may return any number of items.
   */
  pageSize: number;
  /**
   * Optional. If left blank, returns the first page. To enumerate all items, use the
   * [next_page_token]
   * [google.identity.accesscontextmanager.v1.ListGcpUserAccessBindingsResponse.next_page_token]
   * from your previous list operation.
   */
  pageToken: string;
}

/**
 * Response of [ListGcpUserAccessBindings]
 * [google.identity.accesscontextmanager.v1.AccessContextManager.ListGcpUserAccessBindings].
 */
export interface ListGcpUserAccessBindingsResponse {
  /**
   * [GcpUserAccessBinding]
   * [google.identity.accesscontextmanager.v1.GcpUserAccessBinding]
   */
  gcpUserAccessBindings: GcpUserAccessBinding[];
  /** Token to get the next page of items. If blank, there are no more items. */
  nextPageToken: string;
}

/**
 * Request of [GetGcpUserAccessBinding]
 * [google.identity.accesscontextmanager.v1.AccessContextManager.GetGcpUserAccessBinding].
 */
export interface GetGcpUserAccessBindingRequest {
  /** Required. Example: "organizations/256/gcpUserAccessBindings/b3-BhcX_Ud5N" */
  name: string;
}

/**
 * Request of [CreateGcpUserAccessBinding]
 * [google.identity.accesscontextmanager.v1.AccessContextManager.CreateGcpUserAccessBinding].
 */
export interface CreateGcpUserAccessBindingRequest {
  /** Required. Example: "organizations/256" */
  parent: string;
  /**
   * Required. [GcpUserAccessBinding]
   * [google.identity.accesscontextmanager.v1.GcpUserAccessBinding]
   */
  gcpUserAccessBinding: GcpUserAccessBinding | undefined;
}

/**
 * Request of [UpdateGcpUserAccessBinding]
 * [google.identity.accesscontextmanager.v1.AccessContextManager.UpdateGcpUserAccessBinding].
 */
export interface UpdateGcpUserAccessBindingRequest {
  /**
   * Required. [GcpUserAccessBinding]
   * [google.identity.accesscontextmanager.v1.GcpUserAccessBinding]
   */
  gcpUserAccessBinding:
    | GcpUserAccessBinding
    | undefined;
  /**
   * Required. Only the fields specified in this mask are updated. Because name and
   * group_key cannot be changed, update_mask is required and must always be:
   *
   * update_mask {
   * paths: "access_levels"
   * }
   */
  updateMask: string[] | undefined;
}

/**
 * Request of [DeleteGcpUserAccessBinding]
 * [google.identity.accesscontextmanager.v1.AccessContextManager.DeleteGcpUserAccessBinding].
 */
export interface DeleteGcpUserAccessBindingRequest {
  /** Required. Example: "organizations/256/gcpUserAccessBindings/b3-BhcX_Ud5N" */
  name: string;
}

/**
 * Currently, a completed operation means nothing. In the future, this metadata
 * and a completed operation may indicate that the binding has taken effect and
 * is affecting access decisions for all users.
 */
export interface GcpUserAccessBindingOperationMetadata {
}

/** Metadata of Access Context Manager's Long Running Operations. */
export interface AccessContextManagerOperationMetadata {
}

function createBaseListAccessPoliciesRequest(): ListAccessPoliciesRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListAccessPoliciesRequest: MessageFns<ListAccessPoliciesRequest> = {
  encode(message: ListAccessPoliciesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAccessPoliciesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAccessPoliciesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAccessPoliciesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListAccessPoliciesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListAccessPoliciesRequest>): ListAccessPoliciesRequest {
    return ListAccessPoliciesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAccessPoliciesRequest>): ListAccessPoliciesRequest {
    const message = createBaseListAccessPoliciesRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListAccessPoliciesResponse(): ListAccessPoliciesResponse {
  return { accessPolicies: [], nextPageToken: "" };
}

export const ListAccessPoliciesResponse: MessageFns<ListAccessPoliciesResponse> = {
  encode(message: ListAccessPoliciesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.accessPolicies) {
      AccessPolicy.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAccessPoliciesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAccessPoliciesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.accessPolicies.push(AccessPolicy.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAccessPoliciesResponse {
    return {
      accessPolicies: globalThis.Array.isArray(object?.accessPolicies)
        ? object.accessPolicies.map((e: any) => AccessPolicy.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListAccessPoliciesResponse): unknown {
    const obj: any = {};
    if (message.accessPolicies?.length) {
      obj.accessPolicies = message.accessPolicies.map((e) => AccessPolicy.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListAccessPoliciesResponse>): ListAccessPoliciesResponse {
    return ListAccessPoliciesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAccessPoliciesResponse>): ListAccessPoliciesResponse {
    const message = createBaseListAccessPoliciesResponse();
    message.accessPolicies = object.accessPolicies?.map((e) => AccessPolicy.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetAccessPolicyRequest(): GetAccessPolicyRequest {
  return { name: "" };
}

export const GetAccessPolicyRequest: MessageFns<GetAccessPolicyRequest> = {
  encode(message: GetAccessPolicyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAccessPolicyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAccessPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAccessPolicyRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetAccessPolicyRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetAccessPolicyRequest>): GetAccessPolicyRequest {
    return GetAccessPolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetAccessPolicyRequest>): GetAccessPolicyRequest {
    const message = createBaseGetAccessPolicyRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpdateAccessPolicyRequest(): UpdateAccessPolicyRequest {
  return { policy: undefined, updateMask: undefined };
}

export const UpdateAccessPolicyRequest: MessageFns<UpdateAccessPolicyRequest> = {
  encode(message: UpdateAccessPolicyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.policy !== undefined) {
      AccessPolicy.encode(message.policy, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateAccessPolicyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateAccessPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.policy = AccessPolicy.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateAccessPolicyRequest {
    return {
      policy: isSet(object.policy) ? AccessPolicy.fromJSON(object.policy) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateAccessPolicyRequest): unknown {
    const obj: any = {};
    if (message.policy !== undefined) {
      obj.policy = AccessPolicy.toJSON(message.policy);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateAccessPolicyRequest>): UpdateAccessPolicyRequest {
    return UpdateAccessPolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateAccessPolicyRequest>): UpdateAccessPolicyRequest {
    const message = createBaseUpdateAccessPolicyRequest();
    message.policy = (object.policy !== undefined && object.policy !== null)
      ? AccessPolicy.fromPartial(object.policy)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseDeleteAccessPolicyRequest(): DeleteAccessPolicyRequest {
  return { name: "" };
}

export const DeleteAccessPolicyRequest: MessageFns<DeleteAccessPolicyRequest> = {
  encode(message: DeleteAccessPolicyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteAccessPolicyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteAccessPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteAccessPolicyRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteAccessPolicyRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteAccessPolicyRequest>): DeleteAccessPolicyRequest {
    return DeleteAccessPolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteAccessPolicyRequest>): DeleteAccessPolicyRequest {
    const message = createBaseDeleteAccessPolicyRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListAccessLevelsRequest(): ListAccessLevelsRequest {
  return { parent: "", pageSize: 0, pageToken: "", accessLevelFormat: 0 };
}

export const ListAccessLevelsRequest: MessageFns<ListAccessLevelsRequest> = {
  encode(message: ListAccessLevelsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.accessLevelFormat !== 0) {
      writer.uint32(32).int32(message.accessLevelFormat);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAccessLevelsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAccessLevelsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.accessLevelFormat = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAccessLevelsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      accessLevelFormat: isSet(object.accessLevelFormat) ? levelFormatFromJSON(object.accessLevelFormat) : 0,
    };
  },

  toJSON(message: ListAccessLevelsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.accessLevelFormat !== 0) {
      obj.accessLevelFormat = levelFormatToJSON(message.accessLevelFormat);
    }
    return obj;
  },

  create(base?: DeepPartial<ListAccessLevelsRequest>): ListAccessLevelsRequest {
    return ListAccessLevelsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAccessLevelsRequest>): ListAccessLevelsRequest {
    const message = createBaseListAccessLevelsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.accessLevelFormat = object.accessLevelFormat ?? 0;
    return message;
  },
};

function createBaseListAccessLevelsResponse(): ListAccessLevelsResponse {
  return { accessLevels: [], nextPageToken: "" };
}

export const ListAccessLevelsResponse: MessageFns<ListAccessLevelsResponse> = {
  encode(message: ListAccessLevelsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.accessLevels) {
      AccessLevel.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAccessLevelsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAccessLevelsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.accessLevels.push(AccessLevel.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAccessLevelsResponse {
    return {
      accessLevels: globalThis.Array.isArray(object?.accessLevels)
        ? object.accessLevels.map((e: any) => AccessLevel.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListAccessLevelsResponse): unknown {
    const obj: any = {};
    if (message.accessLevels?.length) {
      obj.accessLevels = message.accessLevels.map((e) => AccessLevel.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListAccessLevelsResponse>): ListAccessLevelsResponse {
    return ListAccessLevelsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAccessLevelsResponse>): ListAccessLevelsResponse {
    const message = createBaseListAccessLevelsResponse();
    message.accessLevels = object.accessLevels?.map((e) => AccessLevel.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetAccessLevelRequest(): GetAccessLevelRequest {
  return { name: "", accessLevelFormat: 0 };
}

export const GetAccessLevelRequest: MessageFns<GetAccessLevelRequest> = {
  encode(message: GetAccessLevelRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.accessLevelFormat !== 0) {
      writer.uint32(16).int32(message.accessLevelFormat);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAccessLevelRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAccessLevelRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.accessLevelFormat = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAccessLevelRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      accessLevelFormat: isSet(object.accessLevelFormat) ? levelFormatFromJSON(object.accessLevelFormat) : 0,
    };
  },

  toJSON(message: GetAccessLevelRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.accessLevelFormat !== 0) {
      obj.accessLevelFormat = levelFormatToJSON(message.accessLevelFormat);
    }
    return obj;
  },

  create(base?: DeepPartial<GetAccessLevelRequest>): GetAccessLevelRequest {
    return GetAccessLevelRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetAccessLevelRequest>): GetAccessLevelRequest {
    const message = createBaseGetAccessLevelRequest();
    message.name = object.name ?? "";
    message.accessLevelFormat = object.accessLevelFormat ?? 0;
    return message;
  },
};

function createBaseCreateAccessLevelRequest(): CreateAccessLevelRequest {
  return { parent: "", accessLevel: undefined };
}

export const CreateAccessLevelRequest: MessageFns<CreateAccessLevelRequest> = {
  encode(message: CreateAccessLevelRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.accessLevel !== undefined) {
      AccessLevel.encode(message.accessLevel, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateAccessLevelRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateAccessLevelRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.accessLevel = AccessLevel.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateAccessLevelRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      accessLevel: isSet(object.accessLevel) ? AccessLevel.fromJSON(object.accessLevel) : undefined,
    };
  },

  toJSON(message: CreateAccessLevelRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.accessLevel !== undefined) {
      obj.accessLevel = AccessLevel.toJSON(message.accessLevel);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateAccessLevelRequest>): CreateAccessLevelRequest {
    return CreateAccessLevelRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateAccessLevelRequest>): CreateAccessLevelRequest {
    const message = createBaseCreateAccessLevelRequest();
    message.parent = object.parent ?? "";
    message.accessLevel = (object.accessLevel !== undefined && object.accessLevel !== null)
      ? AccessLevel.fromPartial(object.accessLevel)
      : undefined;
    return message;
  },
};

function createBaseUpdateAccessLevelRequest(): UpdateAccessLevelRequest {
  return { accessLevel: undefined, updateMask: undefined };
}

export const UpdateAccessLevelRequest: MessageFns<UpdateAccessLevelRequest> = {
  encode(message: UpdateAccessLevelRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.accessLevel !== undefined) {
      AccessLevel.encode(message.accessLevel, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateAccessLevelRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateAccessLevelRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.accessLevel = AccessLevel.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateAccessLevelRequest {
    return {
      accessLevel: isSet(object.accessLevel) ? AccessLevel.fromJSON(object.accessLevel) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateAccessLevelRequest): unknown {
    const obj: any = {};
    if (message.accessLevel !== undefined) {
      obj.accessLevel = AccessLevel.toJSON(message.accessLevel);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateAccessLevelRequest>): UpdateAccessLevelRequest {
    return UpdateAccessLevelRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateAccessLevelRequest>): UpdateAccessLevelRequest {
    const message = createBaseUpdateAccessLevelRequest();
    message.accessLevel = (object.accessLevel !== undefined && object.accessLevel !== null)
      ? AccessLevel.fromPartial(object.accessLevel)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseDeleteAccessLevelRequest(): DeleteAccessLevelRequest {
  return { name: "" };
}

export const DeleteAccessLevelRequest: MessageFns<DeleteAccessLevelRequest> = {
  encode(message: DeleteAccessLevelRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteAccessLevelRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteAccessLevelRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteAccessLevelRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteAccessLevelRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteAccessLevelRequest>): DeleteAccessLevelRequest {
    return DeleteAccessLevelRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteAccessLevelRequest>): DeleteAccessLevelRequest {
    const message = createBaseDeleteAccessLevelRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseReplaceAccessLevelsRequest(): ReplaceAccessLevelsRequest {
  return { parent: "", accessLevels: [], etag: "" };
}

export const ReplaceAccessLevelsRequest: MessageFns<ReplaceAccessLevelsRequest> = {
  encode(message: ReplaceAccessLevelsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    for (const v of message.accessLevels) {
      AccessLevel.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.etag !== "") {
      writer.uint32(34).string(message.etag);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReplaceAccessLevelsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReplaceAccessLevelsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.accessLevels.push(AccessLevel.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.etag = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReplaceAccessLevelsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      accessLevels: globalThis.Array.isArray(object?.accessLevels)
        ? object.accessLevels.map((e: any) => AccessLevel.fromJSON(e))
        : [],
      etag: isSet(object.etag) ? globalThis.String(object.etag) : "",
    };
  },

  toJSON(message: ReplaceAccessLevelsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.accessLevels?.length) {
      obj.accessLevels = message.accessLevels.map((e) => AccessLevel.toJSON(e));
    }
    if (message.etag !== "") {
      obj.etag = message.etag;
    }
    return obj;
  },

  create(base?: DeepPartial<ReplaceAccessLevelsRequest>): ReplaceAccessLevelsRequest {
    return ReplaceAccessLevelsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ReplaceAccessLevelsRequest>): ReplaceAccessLevelsRequest {
    const message = createBaseReplaceAccessLevelsRequest();
    message.parent = object.parent ?? "";
    message.accessLevels = object.accessLevels?.map((e) => AccessLevel.fromPartial(e)) || [];
    message.etag = object.etag ?? "";
    return message;
  },
};

function createBaseReplaceAccessLevelsResponse(): ReplaceAccessLevelsResponse {
  return { accessLevels: [] };
}

export const ReplaceAccessLevelsResponse: MessageFns<ReplaceAccessLevelsResponse> = {
  encode(message: ReplaceAccessLevelsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.accessLevels) {
      AccessLevel.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReplaceAccessLevelsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReplaceAccessLevelsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.accessLevels.push(AccessLevel.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReplaceAccessLevelsResponse {
    return {
      accessLevels: globalThis.Array.isArray(object?.accessLevels)
        ? object.accessLevels.map((e: any) => AccessLevel.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ReplaceAccessLevelsResponse): unknown {
    const obj: any = {};
    if (message.accessLevels?.length) {
      obj.accessLevels = message.accessLevels.map((e) => AccessLevel.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ReplaceAccessLevelsResponse>): ReplaceAccessLevelsResponse {
    return ReplaceAccessLevelsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ReplaceAccessLevelsResponse>): ReplaceAccessLevelsResponse {
    const message = createBaseReplaceAccessLevelsResponse();
    message.accessLevels = object.accessLevels?.map((e) => AccessLevel.fromPartial(e)) || [];
    return message;
  },
};

function createBaseListServicePerimetersRequest(): ListServicePerimetersRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListServicePerimetersRequest: MessageFns<ListServicePerimetersRequest> = {
  encode(message: ListServicePerimetersRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListServicePerimetersRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListServicePerimetersRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListServicePerimetersRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListServicePerimetersRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListServicePerimetersRequest>): ListServicePerimetersRequest {
    return ListServicePerimetersRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListServicePerimetersRequest>): ListServicePerimetersRequest {
    const message = createBaseListServicePerimetersRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListServicePerimetersResponse(): ListServicePerimetersResponse {
  return { servicePerimeters: [], nextPageToken: "" };
}

export const ListServicePerimetersResponse: MessageFns<ListServicePerimetersResponse> = {
  encode(message: ListServicePerimetersResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.servicePerimeters) {
      ServicePerimeter.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListServicePerimetersResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListServicePerimetersResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.servicePerimeters.push(ServicePerimeter.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListServicePerimetersResponse {
    return {
      servicePerimeters: globalThis.Array.isArray(object?.servicePerimeters)
        ? object.servicePerimeters.map((e: any) => ServicePerimeter.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListServicePerimetersResponse): unknown {
    const obj: any = {};
    if (message.servicePerimeters?.length) {
      obj.servicePerimeters = message.servicePerimeters.map((e) => ServicePerimeter.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListServicePerimetersResponse>): ListServicePerimetersResponse {
    return ListServicePerimetersResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListServicePerimetersResponse>): ListServicePerimetersResponse {
    const message = createBaseListServicePerimetersResponse();
    message.servicePerimeters = object.servicePerimeters?.map((e) => ServicePerimeter.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetServicePerimeterRequest(): GetServicePerimeterRequest {
  return { name: "" };
}

export const GetServicePerimeterRequest: MessageFns<GetServicePerimeterRequest> = {
  encode(message: GetServicePerimeterRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetServicePerimeterRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetServicePerimeterRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetServicePerimeterRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetServicePerimeterRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetServicePerimeterRequest>): GetServicePerimeterRequest {
    return GetServicePerimeterRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetServicePerimeterRequest>): GetServicePerimeterRequest {
    const message = createBaseGetServicePerimeterRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateServicePerimeterRequest(): CreateServicePerimeterRequest {
  return { parent: "", servicePerimeter: undefined };
}

export const CreateServicePerimeterRequest: MessageFns<CreateServicePerimeterRequest> = {
  encode(message: CreateServicePerimeterRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.servicePerimeter !== undefined) {
      ServicePerimeter.encode(message.servicePerimeter, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateServicePerimeterRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateServicePerimeterRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.servicePerimeter = ServicePerimeter.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateServicePerimeterRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      servicePerimeter: isSet(object.servicePerimeter) ? ServicePerimeter.fromJSON(object.servicePerimeter) : undefined,
    };
  },

  toJSON(message: CreateServicePerimeterRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.servicePerimeter !== undefined) {
      obj.servicePerimeter = ServicePerimeter.toJSON(message.servicePerimeter);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateServicePerimeterRequest>): CreateServicePerimeterRequest {
    return CreateServicePerimeterRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateServicePerimeterRequest>): CreateServicePerimeterRequest {
    const message = createBaseCreateServicePerimeterRequest();
    message.parent = object.parent ?? "";
    message.servicePerimeter = (object.servicePerimeter !== undefined && object.servicePerimeter !== null)
      ? ServicePerimeter.fromPartial(object.servicePerimeter)
      : undefined;
    return message;
  },
};

function createBaseUpdateServicePerimeterRequest(): UpdateServicePerimeterRequest {
  return { servicePerimeter: undefined, updateMask: undefined };
}

export const UpdateServicePerimeterRequest: MessageFns<UpdateServicePerimeterRequest> = {
  encode(message: UpdateServicePerimeterRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.servicePerimeter !== undefined) {
      ServicePerimeter.encode(message.servicePerimeter, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateServicePerimeterRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateServicePerimeterRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.servicePerimeter = ServicePerimeter.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateServicePerimeterRequest {
    return {
      servicePerimeter: isSet(object.servicePerimeter) ? ServicePerimeter.fromJSON(object.servicePerimeter) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateServicePerimeterRequest): unknown {
    const obj: any = {};
    if (message.servicePerimeter !== undefined) {
      obj.servicePerimeter = ServicePerimeter.toJSON(message.servicePerimeter);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateServicePerimeterRequest>): UpdateServicePerimeterRequest {
    return UpdateServicePerimeterRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateServicePerimeterRequest>): UpdateServicePerimeterRequest {
    const message = createBaseUpdateServicePerimeterRequest();
    message.servicePerimeter = (object.servicePerimeter !== undefined && object.servicePerimeter !== null)
      ? ServicePerimeter.fromPartial(object.servicePerimeter)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseDeleteServicePerimeterRequest(): DeleteServicePerimeterRequest {
  return { name: "" };
}

export const DeleteServicePerimeterRequest: MessageFns<DeleteServicePerimeterRequest> = {
  encode(message: DeleteServicePerimeterRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteServicePerimeterRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteServicePerimeterRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteServicePerimeterRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteServicePerimeterRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteServicePerimeterRequest>): DeleteServicePerimeterRequest {
    return DeleteServicePerimeterRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteServicePerimeterRequest>): DeleteServicePerimeterRequest {
    const message = createBaseDeleteServicePerimeterRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseReplaceServicePerimetersRequest(): ReplaceServicePerimetersRequest {
  return { parent: "", servicePerimeters: [], etag: "" };
}

export const ReplaceServicePerimetersRequest: MessageFns<ReplaceServicePerimetersRequest> = {
  encode(message: ReplaceServicePerimetersRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    for (const v of message.servicePerimeters) {
      ServicePerimeter.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.etag !== "") {
      writer.uint32(26).string(message.etag);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReplaceServicePerimetersRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReplaceServicePerimetersRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.servicePerimeters.push(ServicePerimeter.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.etag = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReplaceServicePerimetersRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      servicePerimeters: globalThis.Array.isArray(object?.servicePerimeters)
        ? object.servicePerimeters.map((e: any) => ServicePerimeter.fromJSON(e))
        : [],
      etag: isSet(object.etag) ? globalThis.String(object.etag) : "",
    };
  },

  toJSON(message: ReplaceServicePerimetersRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.servicePerimeters?.length) {
      obj.servicePerimeters = message.servicePerimeters.map((e) => ServicePerimeter.toJSON(e));
    }
    if (message.etag !== "") {
      obj.etag = message.etag;
    }
    return obj;
  },

  create(base?: DeepPartial<ReplaceServicePerimetersRequest>): ReplaceServicePerimetersRequest {
    return ReplaceServicePerimetersRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ReplaceServicePerimetersRequest>): ReplaceServicePerimetersRequest {
    const message = createBaseReplaceServicePerimetersRequest();
    message.parent = object.parent ?? "";
    message.servicePerimeters = object.servicePerimeters?.map((e) => ServicePerimeter.fromPartial(e)) || [];
    message.etag = object.etag ?? "";
    return message;
  },
};

function createBaseReplaceServicePerimetersResponse(): ReplaceServicePerimetersResponse {
  return { servicePerimeters: [] };
}

export const ReplaceServicePerimetersResponse: MessageFns<ReplaceServicePerimetersResponse> = {
  encode(message: ReplaceServicePerimetersResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.servicePerimeters) {
      ServicePerimeter.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReplaceServicePerimetersResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReplaceServicePerimetersResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.servicePerimeters.push(ServicePerimeter.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReplaceServicePerimetersResponse {
    return {
      servicePerimeters: globalThis.Array.isArray(object?.servicePerimeters)
        ? object.servicePerimeters.map((e: any) => ServicePerimeter.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ReplaceServicePerimetersResponse): unknown {
    const obj: any = {};
    if (message.servicePerimeters?.length) {
      obj.servicePerimeters = message.servicePerimeters.map((e) => ServicePerimeter.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ReplaceServicePerimetersResponse>): ReplaceServicePerimetersResponse {
    return ReplaceServicePerimetersResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ReplaceServicePerimetersResponse>): ReplaceServicePerimetersResponse {
    const message = createBaseReplaceServicePerimetersResponse();
    message.servicePerimeters = object.servicePerimeters?.map((e) => ServicePerimeter.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCommitServicePerimetersRequest(): CommitServicePerimetersRequest {
  return { parent: "", etag: "" };
}

export const CommitServicePerimetersRequest: MessageFns<CommitServicePerimetersRequest> = {
  encode(message: CommitServicePerimetersRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.etag !== "") {
      writer.uint32(18).string(message.etag);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CommitServicePerimetersRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCommitServicePerimetersRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.etag = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CommitServicePerimetersRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      etag: isSet(object.etag) ? globalThis.String(object.etag) : "",
    };
  },

  toJSON(message: CommitServicePerimetersRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.etag !== "") {
      obj.etag = message.etag;
    }
    return obj;
  },

  create(base?: DeepPartial<CommitServicePerimetersRequest>): CommitServicePerimetersRequest {
    return CommitServicePerimetersRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CommitServicePerimetersRequest>): CommitServicePerimetersRequest {
    const message = createBaseCommitServicePerimetersRequest();
    message.parent = object.parent ?? "";
    message.etag = object.etag ?? "";
    return message;
  },
};

function createBaseCommitServicePerimetersResponse(): CommitServicePerimetersResponse {
  return { servicePerimeters: [] };
}

export const CommitServicePerimetersResponse: MessageFns<CommitServicePerimetersResponse> = {
  encode(message: CommitServicePerimetersResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.servicePerimeters) {
      ServicePerimeter.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CommitServicePerimetersResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCommitServicePerimetersResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.servicePerimeters.push(ServicePerimeter.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CommitServicePerimetersResponse {
    return {
      servicePerimeters: globalThis.Array.isArray(object?.servicePerimeters)
        ? object.servicePerimeters.map((e: any) => ServicePerimeter.fromJSON(e))
        : [],
    };
  },

  toJSON(message: CommitServicePerimetersResponse): unknown {
    const obj: any = {};
    if (message.servicePerimeters?.length) {
      obj.servicePerimeters = message.servicePerimeters.map((e) => ServicePerimeter.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<CommitServicePerimetersResponse>): CommitServicePerimetersResponse {
    return CommitServicePerimetersResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CommitServicePerimetersResponse>): CommitServicePerimetersResponse {
    const message = createBaseCommitServicePerimetersResponse();
    message.servicePerimeters = object.servicePerimeters?.map((e) => ServicePerimeter.fromPartial(e)) || [];
    return message;
  },
};

function createBaseListGcpUserAccessBindingsRequest(): ListGcpUserAccessBindingsRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListGcpUserAccessBindingsRequest: MessageFns<ListGcpUserAccessBindingsRequest> = {
  encode(message: ListGcpUserAccessBindingsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListGcpUserAccessBindingsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListGcpUserAccessBindingsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListGcpUserAccessBindingsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListGcpUserAccessBindingsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListGcpUserAccessBindingsRequest>): ListGcpUserAccessBindingsRequest {
    return ListGcpUserAccessBindingsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListGcpUserAccessBindingsRequest>): ListGcpUserAccessBindingsRequest {
    const message = createBaseListGcpUserAccessBindingsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListGcpUserAccessBindingsResponse(): ListGcpUserAccessBindingsResponse {
  return { gcpUserAccessBindings: [], nextPageToken: "" };
}

export const ListGcpUserAccessBindingsResponse: MessageFns<ListGcpUserAccessBindingsResponse> = {
  encode(message: ListGcpUserAccessBindingsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.gcpUserAccessBindings) {
      GcpUserAccessBinding.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListGcpUserAccessBindingsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListGcpUserAccessBindingsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.gcpUserAccessBindings.push(GcpUserAccessBinding.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListGcpUserAccessBindingsResponse {
    return {
      gcpUserAccessBindings: globalThis.Array.isArray(object?.gcpUserAccessBindings)
        ? object.gcpUserAccessBindings.map((e: any) => GcpUserAccessBinding.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListGcpUserAccessBindingsResponse): unknown {
    const obj: any = {};
    if (message.gcpUserAccessBindings?.length) {
      obj.gcpUserAccessBindings = message.gcpUserAccessBindings.map((e) => GcpUserAccessBinding.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListGcpUserAccessBindingsResponse>): ListGcpUserAccessBindingsResponse {
    return ListGcpUserAccessBindingsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListGcpUserAccessBindingsResponse>): ListGcpUserAccessBindingsResponse {
    const message = createBaseListGcpUserAccessBindingsResponse();
    message.gcpUserAccessBindings = object.gcpUserAccessBindings?.map((e) => GcpUserAccessBinding.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetGcpUserAccessBindingRequest(): GetGcpUserAccessBindingRequest {
  return { name: "" };
}

export const GetGcpUserAccessBindingRequest: MessageFns<GetGcpUserAccessBindingRequest> = {
  encode(message: GetGcpUserAccessBindingRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetGcpUserAccessBindingRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetGcpUserAccessBindingRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetGcpUserAccessBindingRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetGcpUserAccessBindingRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetGcpUserAccessBindingRequest>): GetGcpUserAccessBindingRequest {
    return GetGcpUserAccessBindingRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetGcpUserAccessBindingRequest>): GetGcpUserAccessBindingRequest {
    const message = createBaseGetGcpUserAccessBindingRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateGcpUserAccessBindingRequest(): CreateGcpUserAccessBindingRequest {
  return { parent: "", gcpUserAccessBinding: undefined };
}

export const CreateGcpUserAccessBindingRequest: MessageFns<CreateGcpUserAccessBindingRequest> = {
  encode(message: CreateGcpUserAccessBindingRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.gcpUserAccessBinding !== undefined) {
      GcpUserAccessBinding.encode(message.gcpUserAccessBinding, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateGcpUserAccessBindingRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateGcpUserAccessBindingRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.gcpUserAccessBinding = GcpUserAccessBinding.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateGcpUserAccessBindingRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      gcpUserAccessBinding: isSet(object.gcpUserAccessBinding)
        ? GcpUserAccessBinding.fromJSON(object.gcpUserAccessBinding)
        : undefined,
    };
  },

  toJSON(message: CreateGcpUserAccessBindingRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.gcpUserAccessBinding !== undefined) {
      obj.gcpUserAccessBinding = GcpUserAccessBinding.toJSON(message.gcpUserAccessBinding);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateGcpUserAccessBindingRequest>): CreateGcpUserAccessBindingRequest {
    return CreateGcpUserAccessBindingRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateGcpUserAccessBindingRequest>): CreateGcpUserAccessBindingRequest {
    const message = createBaseCreateGcpUserAccessBindingRequest();
    message.parent = object.parent ?? "";
    message.gcpUserAccessBinding = (object.gcpUserAccessBinding !== undefined && object.gcpUserAccessBinding !== null)
      ? GcpUserAccessBinding.fromPartial(object.gcpUserAccessBinding)
      : undefined;
    return message;
  },
};

function createBaseUpdateGcpUserAccessBindingRequest(): UpdateGcpUserAccessBindingRequest {
  return { gcpUserAccessBinding: undefined, updateMask: undefined };
}

export const UpdateGcpUserAccessBindingRequest: MessageFns<UpdateGcpUserAccessBindingRequest> = {
  encode(message: UpdateGcpUserAccessBindingRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.gcpUserAccessBinding !== undefined) {
      GcpUserAccessBinding.encode(message.gcpUserAccessBinding, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateGcpUserAccessBindingRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateGcpUserAccessBindingRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.gcpUserAccessBinding = GcpUserAccessBinding.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateGcpUserAccessBindingRequest {
    return {
      gcpUserAccessBinding: isSet(object.gcpUserAccessBinding)
        ? GcpUserAccessBinding.fromJSON(object.gcpUserAccessBinding)
        : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateGcpUserAccessBindingRequest): unknown {
    const obj: any = {};
    if (message.gcpUserAccessBinding !== undefined) {
      obj.gcpUserAccessBinding = GcpUserAccessBinding.toJSON(message.gcpUserAccessBinding);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateGcpUserAccessBindingRequest>): UpdateGcpUserAccessBindingRequest {
    return UpdateGcpUserAccessBindingRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateGcpUserAccessBindingRequest>): UpdateGcpUserAccessBindingRequest {
    const message = createBaseUpdateGcpUserAccessBindingRequest();
    message.gcpUserAccessBinding = (object.gcpUserAccessBinding !== undefined && object.gcpUserAccessBinding !== null)
      ? GcpUserAccessBinding.fromPartial(object.gcpUserAccessBinding)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseDeleteGcpUserAccessBindingRequest(): DeleteGcpUserAccessBindingRequest {
  return { name: "" };
}

export const DeleteGcpUserAccessBindingRequest: MessageFns<DeleteGcpUserAccessBindingRequest> = {
  encode(message: DeleteGcpUserAccessBindingRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteGcpUserAccessBindingRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteGcpUserAccessBindingRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteGcpUserAccessBindingRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteGcpUserAccessBindingRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteGcpUserAccessBindingRequest>): DeleteGcpUserAccessBindingRequest {
    return DeleteGcpUserAccessBindingRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteGcpUserAccessBindingRequest>): DeleteGcpUserAccessBindingRequest {
    const message = createBaseDeleteGcpUserAccessBindingRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseGcpUserAccessBindingOperationMetadata(): GcpUserAccessBindingOperationMetadata {
  return {};
}

export const GcpUserAccessBindingOperationMetadata: MessageFns<GcpUserAccessBindingOperationMetadata> = {
  encode(_: GcpUserAccessBindingOperationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GcpUserAccessBindingOperationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGcpUserAccessBindingOperationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GcpUserAccessBindingOperationMetadata {
    return {};
  },

  toJSON(_: GcpUserAccessBindingOperationMetadata): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<GcpUserAccessBindingOperationMetadata>): GcpUserAccessBindingOperationMetadata {
    return GcpUserAccessBindingOperationMetadata.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<GcpUserAccessBindingOperationMetadata>): GcpUserAccessBindingOperationMetadata {
    const message = createBaseGcpUserAccessBindingOperationMetadata();
    return message;
  },
};

function createBaseAccessContextManagerOperationMetadata(): AccessContextManagerOperationMetadata {
  return {};
}

export const AccessContextManagerOperationMetadata: MessageFns<AccessContextManagerOperationMetadata> = {
  encode(_: AccessContextManagerOperationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AccessContextManagerOperationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAccessContextManagerOperationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): AccessContextManagerOperationMetadata {
    return {};
  },

  toJSON(_: AccessContextManagerOperationMetadata): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<AccessContextManagerOperationMetadata>): AccessContextManagerOperationMetadata {
    return AccessContextManagerOperationMetadata.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<AccessContextManagerOperationMetadata>): AccessContextManagerOperationMetadata {
    const message = createBaseAccessContextManagerOperationMetadata();
    return message;
  },
};

/**
 * API for setting [access levels]
 * [google.identity.accesscontextmanager.v1.AccessLevel] and [service
 * perimeters] [google.identity.accesscontextmanager.v1.ServicePerimeter]
 * for Google Cloud projects. Each organization has one [access policy]
 * [google.identity.accesscontextmanager.v1.AccessPolicy] that contains the
 * [access levels] [google.identity.accesscontextmanager.v1.AccessLevel]
 * and [service perimeters]
 * [google.identity.accesscontextmanager.v1.ServicePerimeter]. This
 * [access policy] [google.identity.accesscontextmanager.v1.AccessPolicy] is
 * applicable to all resources in the organization.
 * AccessPolicies
 */
export type AccessContextManagerDefinition = typeof AccessContextManagerDefinition;
export const AccessContextManagerDefinition = {
  name: "AccessContextManager",
  fullName: "google.identity.accesscontextmanager.v1.AccessContextManager",
  methods: {
    /**
     * Lists all [access policies]
     * [google.identity.accesscontextmanager.v1.AccessPolicy] in an
     * organization.
     */
    listAccessPolicies: {
      name: "ListAccessPolicies",
      requestType: ListAccessPoliciesRequest,
      requestStream: false,
      responseType: ListAccessPoliciesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([20, 18, 18, 47, 118, 49, 47, 97, 99, 99, 101, 115, 115, 80, 111, 108, 105, 99, 105, 101, 115]),
          ],
        },
      },
    },
    /**
     * Returns an [access policy]
     * [google.identity.accesscontextmanager.v1.AccessPolicy] based on the name.
     */
    getAccessPolicy: {
      name: "GetAccessPolicy",
      requestType: GetAccessPolicyRequest,
      requestStream: false,
      responseType: AccessPolicy,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              29,
              18,
              27,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              97,
              99,
              99,
              101,
              115,
              115,
              80,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Creates an access policy. This method fails if the organization already has
     * an access policy. The long-running operation has a successful status
     * after the access policy propagates to long-lasting storage.
     * Syntactic and basic semantic errors are returned in `metadata` as a
     * BadRequest proto.
     */
    createAccessPolicy: {
      name: "CreateAccessPolicy",
      requestType: AccessPolicy,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              53,
              10,
              12,
              65,
              99,
              99,
              101,
              115,
              115,
              80,
              111,
              108,
              105,
              99,
              121,
              18,
              37,
              65,
              99,
              99,
              101,
              115,
              115,
              67,
              111,
              110,
              116,
              101,
              120,
              116,
              77,
              97,
              110,
              97,
              103,
              101,
              114,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          578365826: [
            Buffer.from([
              23,
              58,
              1,
              42,
              34,
              18,
              47,
              118,
              49,
              47,
              97,
              99,
              99,
              101,
              115,
              115,
              80,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Updates an [access policy]
     * [google.identity.accesscontextmanager.v1.AccessPolicy]. The
     * long-running operation from this RPC has a successful status after the
     * changes to the [access policy]
     * [google.identity.accesscontextmanager.v1.AccessPolicy] propagate
     * to long-lasting storage.
     */
    updateAccessPolicy: {
      name: "UpdateAccessPolicy",
      requestType: UpdateAccessPolicyRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              53,
              10,
              12,
              65,
              99,
              99,
              101,
              115,
              115,
              80,
              111,
              108,
              105,
              99,
              121,
              18,
              37,
              65,
              99,
              99,
              101,
              115,
              115,
              67,
              111,
              110,
              116,
              101,
              120,
              116,
              77,
              97,
              110,
              97,
              103,
              101,
              114,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([18, 112, 111, 108, 105, 99, 121, 44, 117, 112, 100, 97, 116, 101, 95, 109, 97, 115, 107]),
          ],
          578365826: [
            Buffer.from([
              44,
              58,
              6,
              112,
              111,
              108,
              105,
              99,
              121,
              50,
              34,
              47,
              118,
              49,
              47,
              123,
              112,
              111,
              108,
              105,
              99,
              121,
              46,
              110,
              97,
              109,
              101,
              61,
              97,
              99,
              99,
              101,
              115,
              115,
              80,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Deletes an [access policy]
     * [google.identity.accesscontextmanager.v1.AccessPolicy] based on the
     * resource name. The long-running operation has a successful status after the
     * [access policy] [google.identity.accesscontextmanager.v1.AccessPolicy]
     * is removed from long-lasting storage.
     */
    deleteAccessPolicy: {
      name: "DeleteAccessPolicy",
      requestType: DeleteAccessPolicyRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              62,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              37,
              65,
              99,
              99,
              101,
              115,
              115,
              67,
              111,
              110,
              116,
              101,
              120,
              116,
              77,
              97,
              110,
              97,
              103,
              101,
              114,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              29,
              42,
              27,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              97,
              99,
              99,
              101,
              115,
              115,
              80,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Lists all [access levels]
     * [google.identity.accesscontextmanager.v1.AccessLevel] for an access
     * policy.
     */
    listAccessLevels: {
      name: "ListAccessLevels",
      requestType: ListAccessLevelsRequest,
      requestStream: false,
      responseType: ListAccessLevelsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              44,
              18,
              42,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              97,
              99,
              99,
              101,
              115,
              115,
              80,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              42,
              125,
              47,
              97,
              99,
              99,
              101,
              115,
              115,
              76,
              101,
              118,
              101,
              108,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Gets an [access level]
     * [google.identity.accesscontextmanager.v1.AccessLevel] based on the resource
     * name.
     */
    getAccessLevel: {
      name: "GetAccessLevel",
      requestType: GetAccessLevelRequest,
      requestStream: false,
      responseType: AccessLevel,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              44,
              18,
              42,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              97,
              99,
              99,
              101,
              115,
              115,
              80,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              42,
              47,
              97,
              99,
              99,
              101,
              115,
              115,
              76,
              101,
              118,
              101,
              108,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Creates an [access level]
     * [google.identity.accesscontextmanager.v1.AccessLevel]. The long-running
     * operation from this RPC has a successful status after the [access
     * level] [google.identity.accesscontextmanager.v1.AccessLevel]
     * propagates to long-lasting storage. If [access levels]
     * [google.identity.accesscontextmanager.v1.AccessLevel] contain
     * errors, an error response is returned for the first error encountered.
     */
    createAccessLevel: {
      name: "CreateAccessLevel",
      requestType: CreateAccessLevelRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              52,
              10,
              11,
              65,
              99,
              99,
              101,
              115,
              115,
              76,
              101,
              118,
              101,
              108,
              18,
              37,
              65,
              99,
              99,
              101,
              115,
              115,
              67,
              111,
              110,
              116,
              101,
              120,
              116,
              77,
              97,
              110,
              97,
              103,
              101,
              114,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([19, 112, 97, 114, 101, 110, 116, 44, 97, 99, 99, 101, 115, 115, 95, 108, 101, 118, 101, 108]),
          ],
          578365826: [
            Buffer.from([
              58,
              58,
              12,
              97,
              99,
              99,
              101,
              115,
              115,
              95,
              108,
              101,
              118,
              101,
              108,
              34,
              42,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              97,
              99,
              99,
              101,
              115,
              115,
              80,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              42,
              125,
              47,
              97,
              99,
              99,
              101,
              115,
              115,
              76,
              101,
              118,
              101,
              108,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Updates an [access level]
     * [google.identity.accesscontextmanager.v1.AccessLevel]. The long-running
     * operation from this RPC has a successful status after the changes to
     * the [access level]
     * [google.identity.accesscontextmanager.v1.AccessLevel] propagate
     * to long-lasting storage. If [access levels]
     * [google.identity.accesscontextmanager.v1.AccessLevel] contain
     * errors, an error response is returned for the first error encountered.
     */
    updateAccessLevel: {
      name: "UpdateAccessLevel",
      requestType: UpdateAccessLevelRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              52,
              10,
              11,
              65,
              99,
              99,
              101,
              115,
              115,
              76,
              101,
              118,
              101,
              108,
              18,
              37,
              65,
              99,
              99,
              101,
              115,
              115,
              67,
              111,
              110,
              116,
              101,
              120,
              116,
              77,
              97,
              110,
              97,
              103,
              101,
              114,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              24,
              97,
              99,
              99,
              101,
              115,
              115,
              95,
              108,
              101,
              118,
              101,
              108,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              71,
              58,
              12,
              97,
              99,
              99,
              101,
              115,
              115,
              95,
              108,
              101,
              118,
              101,
              108,
              50,
              55,
              47,
              118,
              49,
              47,
              123,
              97,
              99,
              99,
              101,
              115,
              115,
              95,
              108,
              101,
              118,
              101,
              108,
              46,
              110,
              97,
              109,
              101,
              61,
              97,
              99,
              99,
              101,
              115,
              115,
              80,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              42,
              47,
              97,
              99,
              99,
              101,
              115,
              115,
              76,
              101,
              118,
              101,
              108,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Deletes an [access level]
     * [google.identity.accesscontextmanager.v1.AccessLevel] based on the resource
     * name. The long-running operation from this RPC has a successful status
     * after the [access level]
     * [google.identity.accesscontextmanager.v1.AccessLevel] has been removed
     * from long-lasting storage.
     */
    deleteAccessLevel: {
      name: "DeleteAccessLevel",
      requestType: DeleteAccessLevelRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              62,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              37,
              65,
              99,
              99,
              101,
              115,
              115,
              67,
              111,
              110,
              116,
              101,
              120,
              116,
              77,
              97,
              110,
              97,
              103,
              101,
              114,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              44,
              42,
              42,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              97,
              99,
              99,
              101,
              115,
              115,
              80,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              42,
              47,
              97,
              99,
              99,
              101,
              115,
              115,
              76,
              101,
              118,
              101,
              108,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Replaces all existing [access levels]
     * [google.identity.accesscontextmanager.v1.AccessLevel] in an [access
     * policy] [google.identity.accesscontextmanager.v1.AccessPolicy] with
     * the [access levels]
     * [google.identity.accesscontextmanager.v1.AccessLevel] provided. This
     * is done atomically. The long-running operation from this RPC has a
     * successful status after all replacements propagate to long-lasting
     * storage. If the replacement contains errors, an error response is returned
     * for the first error encountered.  Upon error, the replacement is cancelled,
     * and existing [access levels]
     * [google.identity.accesscontextmanager.v1.AccessLevel] are not
     * affected. The Operation.response field contains
     * ReplaceAccessLevelsResponse. Removing [access levels]
     * [google.identity.accesscontextmanager.v1.AccessLevel] contained in existing
     * [service perimeters]
     * [google.identity.accesscontextmanager.v1.ServicePerimeter] result in an
     * error.
     */
    replaceAccessLevels: {
      name: "ReplaceAccessLevels",
      requestType: ReplaceAccessLevelsRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              68,
              10,
              27,
              82,
              101,
              112,
              108,
              97,
              99,
              101,
              65,
              99,
              99,
              101,
              115,
              115,
              76,
              101,
              118,
              101,
              108,
              115,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              18,
              37,
              65,
              99,
              99,
              101,
              115,
              115,
              67,
              111,
              110,
              116,
              101,
              120,
              116,
              77,
              97,
              110,
              97,
              103,
              101,
              114,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          578365826: [
            Buffer.from([
              58,
              58,
              1,
              42,
              34,
              53,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              97,
              99,
              99,
              101,
              115,
              115,
              80,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              42,
              125,
              47,
              97,
              99,
              99,
              101,
              115,
              115,
              76,
              101,
              118,
              101,
              108,
              115,
              58,
              114,
              101,
              112,
              108,
              97,
              99,
              101,
              65,
              108,
              108,
            ]),
          ],
        },
      },
    },
    /**
     * Lists all [service perimeters]
     * [google.identity.accesscontextmanager.v1.ServicePerimeter] for an
     * access policy.
     */
    listServicePerimeters: {
      name: "ListServicePerimeters",
      requestType: ListServicePerimetersRequest,
      requestStream: false,
      responseType: ListServicePerimetersResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              49,
              18,
              47,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              97,
              99,
              99,
              101,
              115,
              115,
              80,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              42,
              125,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              80,
              101,
              114,
              105,
              109,
              101,
              116,
              101,
              114,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Gets a [service perimeter]
     * [google.identity.accesscontextmanager.v1.ServicePerimeter] based on the
     * resource name.
     */
    getServicePerimeter: {
      name: "GetServicePerimeter",
      requestType: GetServicePerimeterRequest,
      requestStream: false,
      responseType: ServicePerimeter,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              49,
              18,
              47,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              97,
              99,
              99,
              101,
              115,
              115,
              80,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              42,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              80,
              101,
              114,
              105,
              109,
              101,
              116,
              101,
              114,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Creates a [service perimeter]
     * [google.identity.accesscontextmanager.v1.ServicePerimeter]. The
     * long-running operation from this RPC has a successful status after the
     * [service perimeter]
     * [google.identity.accesscontextmanager.v1.ServicePerimeter]
     * propagates to long-lasting storage. If a [service perimeter]
     * [google.identity.accesscontextmanager.v1.ServicePerimeter] contains
     * errors, an error response is returned for the first error encountered.
     */
    createServicePerimeter: {
      name: "CreateServicePerimeter",
      requestType: CreateServicePerimeterRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              57,
              10,
              16,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              80,
              101,
              114,
              105,
              109,
              101,
              116,
              101,
              114,
              18,
              37,
              65,
              99,
              99,
              101,
              115,
              115,
              67,
              111,
              110,
              116,
              101,
              120,
              116,
              77,
              97,
              110,
              97,
              103,
              101,
              114,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              24,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              95,
              112,
              101,
              114,
              105,
              109,
              101,
              116,
              101,
              114,
            ]),
          ],
          578365826: [
            Buffer.from([
              68,
              58,
              17,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              95,
              112,
              101,
              114,
              105,
              109,
              101,
              116,
              101,
              114,
              34,
              47,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              97,
              99,
              99,
              101,
              115,
              115,
              80,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              42,
              125,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              80,
              101,
              114,
              105,
              109,
              101,
              116,
              101,
              114,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Updates a [service perimeter]
     * [google.identity.accesscontextmanager.v1.ServicePerimeter]. The
     * long-running operation from this RPC has a successful status after the
     * [service perimeter]
     * [google.identity.accesscontextmanager.v1.ServicePerimeter]
     * propagates to long-lasting storage. If a [service perimeter]
     * [google.identity.accesscontextmanager.v1.ServicePerimeter] contains
     * errors, an error response is returned for the first error encountered.
     */
    updateServicePerimeter: {
      name: "UpdateServicePerimeter",
      requestType: UpdateServicePerimeterRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              57,
              10,
              16,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              80,
              101,
              114,
              105,
              109,
              101,
              116,
              101,
              114,
              18,
              37,
              65,
              99,
              99,
              101,
              115,
              115,
              67,
              111,
              110,
              116,
              101,
              120,
              116,
              77,
              97,
              110,
              97,
              103,
              101,
              114,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              29,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              95,
              112,
              101,
              114,
              105,
              109,
              101,
              116,
              101,
              114,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              86,
              58,
              17,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              95,
              112,
              101,
              114,
              105,
              109,
              101,
              116,
              101,
              114,
              50,
              65,
              47,
              118,
              49,
              47,
              123,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              95,
              112,
              101,
              114,
              105,
              109,
              101,
              116,
              101,
              114,
              46,
              110,
              97,
              109,
              101,
              61,
              97,
              99,
              99,
              101,
              115,
              115,
              80,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              42,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              80,
              101,
              114,
              105,
              109,
              101,
              116,
              101,
              114,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Deletes a [service perimeter]
     * [google.identity.accesscontextmanager.v1.ServicePerimeter] based on the
     * resource name. The long-running operation from this RPC has a successful
     * status after the [service perimeter]
     * [google.identity.accesscontextmanager.v1.ServicePerimeter] is removed from
     * long-lasting storage.
     */
    deleteServicePerimeter: {
      name: "DeleteServicePerimeter",
      requestType: DeleteServicePerimeterRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              62,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              37,
              65,
              99,
              99,
              101,
              115,
              115,
              67,
              111,
              110,
              116,
              101,
              120,
              116,
              77,
              97,
              110,
              97,
              103,
              101,
              114,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              49,
              42,
              47,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              97,
              99,
              99,
              101,
              115,
              115,
              80,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              42,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              80,
              101,
              114,
              105,
              109,
              101,
              116,
              101,
              114,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Replace all existing [service perimeters]
     * [google.identity.accesscontextmanager.v1.ServicePerimeter] in an [access
     * policy] [google.identity.accesscontextmanager.v1.AccessPolicy] with the
     * [service perimeters]
     * [google.identity.accesscontextmanager.v1.ServicePerimeter] provided. This
     * is done atomically. The long-running operation from this RPC has a
     * successful status after all replacements propagate to long-lasting storage.
     * Replacements containing errors result in an error response for the first
     * error encountered. Upon an error, replacement are cancelled and existing
     * [service perimeters]
     * [google.identity.accesscontextmanager.v1.ServicePerimeter] are not
     * affected. The Operation.response field contains
     * ReplaceServicePerimetersResponse.
     */
    replaceServicePerimeters: {
      name: "ReplaceServicePerimeters",
      requestType: ReplaceServicePerimetersRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              73,
              10,
              32,
              82,
              101,
              112,
              108,
              97,
              99,
              101,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              80,
              101,
              114,
              105,
              109,
              101,
              116,
              101,
              114,
              115,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              18,
              37,
              65,
              99,
              99,
              101,
              115,
              115,
              67,
              111,
              110,
              116,
              101,
              120,
              116,
              77,
              97,
              110,
              97,
              103,
              101,
              114,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          578365826: [
            Buffer.from([
              63,
              58,
              1,
              42,
              34,
              58,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              97,
              99,
              99,
              101,
              115,
              115,
              80,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              42,
              125,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              80,
              101,
              114,
              105,
              109,
              101,
              116,
              101,
              114,
              115,
              58,
              114,
              101,
              112,
              108,
              97,
              99,
              101,
              65,
              108,
              108,
            ]),
          ],
        },
      },
    },
    /**
     * Commits the dry-run specification for all the [service perimeters]
     * [google.identity.accesscontextmanager.v1.ServicePerimeter] in an
     * [access policy][google.identity.accesscontextmanager.v1.AccessPolicy].
     * A commit operation on a service perimeter involves copying its `spec` field
     * to the `status` field of the service perimeter. Only [service perimeters]
     * [google.identity.accesscontextmanager.v1.ServicePerimeter] with
     * `use_explicit_dry_run_spec` field set to true are affected by a commit
     * operation. The long-running operation from this RPC has a successful
     * status after the dry-run specifications for all the [service perimeters]
     * [google.identity.accesscontextmanager.v1.ServicePerimeter] have been
     * committed. If a commit fails, it causes the long-running operation to
     * return an error response and the entire commit operation is cancelled.
     * When successful, the Operation.response field contains
     * CommitServicePerimetersResponse. The `dry_run` and the `spec` fields are
     * cleared after a successful commit operation.
     */
    commitServicePerimeters: {
      name: "CommitServicePerimeters",
      requestType: CommitServicePerimetersRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              72,
              10,
              31,
              67,
              111,
              109,
              109,
              105,
              116,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              80,
              101,
              114,
              105,
              109,
              101,
              116,
              101,
              114,
              115,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              18,
              37,
              65,
              99,
              99,
              101,
              115,
              115,
              67,
              111,
              110,
              116,
              101,
              120,
              116,
              77,
              97,
              110,
              97,
              103,
              101,
              114,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          578365826: [
            Buffer.from([
              59,
              58,
              1,
              42,
              34,
              54,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              97,
              99,
              99,
              101,
              115,
              115,
              80,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              42,
              125,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              80,
              101,
              114,
              105,
              109,
              101,
              116,
              101,
              114,
              115,
              58,
              99,
              111,
              109,
              109,
              105,
              116,
            ]),
          ],
        },
      },
    },
    /**
     * Lists all [GcpUserAccessBindings]
     * [google.identity.accesscontextmanager.v1.GcpUserAccessBinding] for a
     * Google Cloud organization.
     */
    listGcpUserAccessBindings: {
      name: "ListGcpUserAccessBindings",
      requestType: ListGcpUserAccessBindingsRequest,
      requestStream: false,
      responseType: ListGcpUserAccessBindingsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              52,
              18,
              50,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              103,
              99,
              112,
              85,
              115,
              101,
              114,
              65,
              99,
              99,
              101,
              115,
              115,
              66,
              105,
              110,
              100,
              105,
              110,
              103,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Gets the [GcpUserAccessBinding]
     * [google.identity.accesscontextmanager.v1.GcpUserAccessBinding] with
     * the given name.
     */
    getGcpUserAccessBinding: {
      name: "GetGcpUserAccessBinding",
      requestType: GetGcpUserAccessBindingRequest,
      requestStream: false,
      responseType: GcpUserAccessBinding,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              52,
              18,
              50,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              103,
              99,
              112,
              85,
              115,
              101,
              114,
              65,
              99,
              99,
              101,
              115,
              115,
              66,
              105,
              110,
              100,
              105,
              110,
              103,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Creates a [GcpUserAccessBinding]
     * [google.identity.accesscontextmanager.v1.GcpUserAccessBinding]. If the
     * client specifies a [name]
     * [google.identity.accesscontextmanager.v1.GcpUserAccessBinding.name],
     * the server ignores it. Fails if a resource already exists with the same
     * [group_key]
     * [google.identity.accesscontextmanager.v1.GcpUserAccessBinding.group_key].
     * Completion of this long-running operation does not necessarily signify that
     * the new binding is deployed onto all affected users, which may take more
     * time.
     */
    createGcpUserAccessBinding: {
      name: "CreateGcpUserAccessBinding",
      requestType: CreateGcpUserAccessBindingRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              61,
              10,
              20,
              71,
              99,
              112,
              85,
              115,
              101,
              114,
              65,
              99,
              99,
              101,
              115,
              115,
              66,
              105,
              110,
              100,
              105,
              110,
              103,
              18,
              37,
              71,
              99,
              112,
              85,
              115,
              101,
              114,
              65,
              99,
              99,
              101,
              115,
              115,
              66,
              105,
              110,
              100,
              105,
              110,
              103,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              30,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              103,
              99,
              112,
              95,
              117,
              115,
              101,
              114,
              95,
              97,
              99,
              99,
              101,
              115,
              115,
              95,
              98,
              105,
              110,
              100,
              105,
              110,
              103,
            ]),
          ],
          578365826: [
            Buffer.from([
              77,
              58,
              23,
              103,
              99,
              112,
              95,
              117,
              115,
              101,
              114,
              95,
              97,
              99,
              99,
              101,
              115,
              115,
              95,
              98,
              105,
              110,
              100,
              105,
              110,
              103,
              34,
              50,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              103,
              99,
              112,
              85,
              115,
              101,
              114,
              65,
              99,
              99,
              101,
              115,
              115,
              66,
              105,
              110,
              100,
              105,
              110,
              103,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Updates a [GcpUserAccessBinding]
     * [google.identity.accesscontextmanager.v1.GcpUserAccessBinding].
     * Completion of this long-running operation does not necessarily signify that
     * the changed binding is deployed onto all affected users, which may take
     * more time.
     */
    updateGcpUserAccessBinding: {
      name: "UpdateGcpUserAccessBinding",
      requestType: UpdateGcpUserAccessBindingRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              61,
              10,
              20,
              71,
              99,
              112,
              85,
              115,
              101,
              114,
              65,
              99,
              99,
              101,
              115,
              115,
              66,
              105,
              110,
              100,
              105,
              110,
              103,
              18,
              37,
              71,
              99,
              112,
              85,
              115,
              101,
              114,
              65,
              99,
              99,
              101,
              115,
              115,
              66,
              105,
              110,
              100,
              105,
              110,
              103,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              35,
              103,
              99,
              112,
              95,
              117,
              115,
              101,
              114,
              95,
              97,
              99,
              99,
              101,
              115,
              115,
              95,
              98,
              105,
              110,
              100,
              105,
              110,
              103,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              101,
              58,
              23,
              103,
              99,
              112,
              95,
              117,
              115,
              101,
              114,
              95,
              97,
              99,
              99,
              101,
              115,
              115,
              95,
              98,
              105,
              110,
              100,
              105,
              110,
              103,
              50,
              74,
              47,
              118,
              49,
              47,
              123,
              103,
              99,
              112,
              95,
              117,
              115,
              101,
              114,
              95,
              97,
              99,
              99,
              101,
              115,
              115,
              95,
              98,
              105,
              110,
              100,
              105,
              110,
              103,
              46,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              103,
              99,
              112,
              85,
              115,
              101,
              114,
              65,
              99,
              99,
              101,
              115,
              115,
              66,
              105,
              110,
              100,
              105,
              110,
              103,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Deletes a [GcpUserAccessBinding]
     * [google.identity.accesscontextmanager.v1.GcpUserAccessBinding].
     * Completion of this long-running operation does not necessarily signify that
     * the binding deletion is deployed onto all affected users, which may take
     * more time.
     */
    deleteGcpUserAccessBinding: {
      name: "DeleteGcpUserAccessBinding",
      requestType: DeleteGcpUserAccessBindingRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              62,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              37,
              71,
              99,
              112,
              85,
              115,
              101,
              114,
              65,
              99,
              99,
              101,
              115,
              115,
              66,
              105,
              110,
              100,
              105,
              110,
              103,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              52,
              42,
              50,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              103,
              99,
              112,
              85,
              115,
              101,
              114,
              65,
              99,
              99,
              101,
              115,
              115,
              66,
              105,
              110,
              100,
              105,
              110,
              103,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Sets the IAM policy for the specified Access Context Manager
     * [access policy][google.identity.accesscontextmanager.v1.AccessPolicy].
     * This method replaces the existing IAM policy on the access policy. The IAM
     * policy controls the set of users who can perform specific operations on the
     * Access Context Manager [access
     * policy][google.identity.accesscontextmanager.v1.AccessPolicy].
     */
    setIamPolicy: {
      name: "SetIamPolicy",
      requestType: SetIamPolicyRequest,
      requestStream: false,
      responseType: Policy,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              49,
              58,
              1,
              42,
              34,
              44,
              47,
              118,
              49,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              97,
              99,
              99,
              101,
              115,
              115,
              80,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              42,
              125,
              58,
              115,
              101,
              116,
              73,
              97,
              109,
              80,
              111,
              108,
              105,
              99,
              121,
            ]),
          ],
        },
      },
    },
    /**
     * Gets the IAM policy for the specified Access Context Manager
     * [access policy][google.identity.accesscontextmanager.v1.AccessPolicy].
     */
    getIamPolicy: {
      name: "GetIamPolicy",
      requestType: GetIamPolicyRequest,
      requestStream: false,
      responseType: Policy,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              49,
              58,
              1,
              42,
              34,
              44,
              47,
              118,
              49,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              97,
              99,
              99,
              101,
              115,
              115,
              80,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              42,
              125,
              58,
              103,
              101,
              116,
              73,
              97,
              109,
              80,
              111,
              108,
              105,
              99,
              121,
            ]),
          ],
        },
      },
    },
    /**
     * Returns the IAM permissions that the caller has on the specified Access
     * Context Manager resource. The resource can be an
     * [AccessPolicy][google.identity.accesscontextmanager.v1.AccessPolicy],
     * [AccessLevel][google.identity.accesscontextmanager.v1.AccessLevel], or
     * [ServicePerimeter][google.identity.accesscontextmanager.v1.ServicePerimeter
     * ]. This method does not support other resources.
     */
    testIamPermissions: {
      name: "TestIamPermissions",
      requestType: TestIamPermissionsRequest,
      requestStream: false,
      responseType: TestIamPermissionsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              204,
              1,
              58,
              1,
              42,
              90,
              70,
              58,
              1,
              42,
              34,
              65,
              47,
              118,
              49,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              97,
              99,
              99,
              101,
              115,
              115,
              80,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              42,
              47,
              97,
              99,
              99,
              101,
              115,
              115,
              76,
              101,
              118,
              101,
              108,
              115,
              47,
              42,
              125,
              58,
              116,
              101,
              115,
              116,
              73,
              97,
              109,
              80,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              115,
              90,
              75,
              58,
              1,
              42,
              34,
              70,
              47,
              118,
              49,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              97,
              99,
              99,
              101,
              115,
              115,
              80,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              42,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              80,
              101,
              114,
              105,
              109,
              101,
              116,
              101,
              114,
              115,
              47,
              42,
              125,
              58,
              116,
              101,
              115,
              116,
              73,
              97,
              109,
              80,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              115,
              34,
              50,
              47,
              118,
              49,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              97,
              99,
              99,
              101,
              115,
              115,
              80,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              42,
              125,
              58,
              116,
              101,
              115,
              116,
              73,
              97,
              109,
              80,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface AccessContextManagerServiceImplementation<CallContextExt = {}> {
  /**
   * Lists all [access policies]
   * [google.identity.accesscontextmanager.v1.AccessPolicy] in an
   * organization.
   */
  listAccessPolicies(
    request: ListAccessPoliciesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListAccessPoliciesResponse>>;
  /**
   * Returns an [access policy]
   * [google.identity.accesscontextmanager.v1.AccessPolicy] based on the name.
   */
  getAccessPolicy(
    request: GetAccessPolicyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AccessPolicy>>;
  /**
   * Creates an access policy. This method fails if the organization already has
   * an access policy. The long-running operation has a successful status
   * after the access policy propagates to long-lasting storage.
   * Syntactic and basic semantic errors are returned in `metadata` as a
   * BadRequest proto.
   */
  createAccessPolicy(request: AccessPolicy, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /**
   * Updates an [access policy]
   * [google.identity.accesscontextmanager.v1.AccessPolicy]. The
   * long-running operation from this RPC has a successful status after the
   * changes to the [access policy]
   * [google.identity.accesscontextmanager.v1.AccessPolicy] propagate
   * to long-lasting storage.
   */
  updateAccessPolicy(
    request: UpdateAccessPolicyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Deletes an [access policy]
   * [google.identity.accesscontextmanager.v1.AccessPolicy] based on the
   * resource name. The long-running operation has a successful status after the
   * [access policy] [google.identity.accesscontextmanager.v1.AccessPolicy]
   * is removed from long-lasting storage.
   */
  deleteAccessPolicy(
    request: DeleteAccessPolicyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Lists all [access levels]
   * [google.identity.accesscontextmanager.v1.AccessLevel] for an access
   * policy.
   */
  listAccessLevels(
    request: ListAccessLevelsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListAccessLevelsResponse>>;
  /**
   * Gets an [access level]
   * [google.identity.accesscontextmanager.v1.AccessLevel] based on the resource
   * name.
   */
  getAccessLevel(
    request: GetAccessLevelRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AccessLevel>>;
  /**
   * Creates an [access level]
   * [google.identity.accesscontextmanager.v1.AccessLevel]. The long-running
   * operation from this RPC has a successful status after the [access
   * level] [google.identity.accesscontextmanager.v1.AccessLevel]
   * propagates to long-lasting storage. If [access levels]
   * [google.identity.accesscontextmanager.v1.AccessLevel] contain
   * errors, an error response is returned for the first error encountered.
   */
  createAccessLevel(
    request: CreateAccessLevelRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Updates an [access level]
   * [google.identity.accesscontextmanager.v1.AccessLevel]. The long-running
   * operation from this RPC has a successful status after the changes to
   * the [access level]
   * [google.identity.accesscontextmanager.v1.AccessLevel] propagate
   * to long-lasting storage. If [access levels]
   * [google.identity.accesscontextmanager.v1.AccessLevel] contain
   * errors, an error response is returned for the first error encountered.
   */
  updateAccessLevel(
    request: UpdateAccessLevelRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Deletes an [access level]
   * [google.identity.accesscontextmanager.v1.AccessLevel] based on the resource
   * name. The long-running operation from this RPC has a successful status
   * after the [access level]
   * [google.identity.accesscontextmanager.v1.AccessLevel] has been removed
   * from long-lasting storage.
   */
  deleteAccessLevel(
    request: DeleteAccessLevelRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Replaces all existing [access levels]
   * [google.identity.accesscontextmanager.v1.AccessLevel] in an [access
   * policy] [google.identity.accesscontextmanager.v1.AccessPolicy] with
   * the [access levels]
   * [google.identity.accesscontextmanager.v1.AccessLevel] provided. This
   * is done atomically. The long-running operation from this RPC has a
   * successful status after all replacements propagate to long-lasting
   * storage. If the replacement contains errors, an error response is returned
   * for the first error encountered.  Upon error, the replacement is cancelled,
   * and existing [access levels]
   * [google.identity.accesscontextmanager.v1.AccessLevel] are not
   * affected. The Operation.response field contains
   * ReplaceAccessLevelsResponse. Removing [access levels]
   * [google.identity.accesscontextmanager.v1.AccessLevel] contained in existing
   * [service perimeters]
   * [google.identity.accesscontextmanager.v1.ServicePerimeter] result in an
   * error.
   */
  replaceAccessLevels(
    request: ReplaceAccessLevelsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Lists all [service perimeters]
   * [google.identity.accesscontextmanager.v1.ServicePerimeter] for an
   * access policy.
   */
  listServicePerimeters(
    request: ListServicePerimetersRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListServicePerimetersResponse>>;
  /**
   * Gets a [service perimeter]
   * [google.identity.accesscontextmanager.v1.ServicePerimeter] based on the
   * resource name.
   */
  getServicePerimeter(
    request: GetServicePerimeterRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ServicePerimeter>>;
  /**
   * Creates a [service perimeter]
   * [google.identity.accesscontextmanager.v1.ServicePerimeter]. The
   * long-running operation from this RPC has a successful status after the
   * [service perimeter]
   * [google.identity.accesscontextmanager.v1.ServicePerimeter]
   * propagates to long-lasting storage. If a [service perimeter]
   * [google.identity.accesscontextmanager.v1.ServicePerimeter] contains
   * errors, an error response is returned for the first error encountered.
   */
  createServicePerimeter(
    request: CreateServicePerimeterRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Updates a [service perimeter]
   * [google.identity.accesscontextmanager.v1.ServicePerimeter]. The
   * long-running operation from this RPC has a successful status after the
   * [service perimeter]
   * [google.identity.accesscontextmanager.v1.ServicePerimeter]
   * propagates to long-lasting storage. If a [service perimeter]
   * [google.identity.accesscontextmanager.v1.ServicePerimeter] contains
   * errors, an error response is returned for the first error encountered.
   */
  updateServicePerimeter(
    request: UpdateServicePerimeterRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Deletes a [service perimeter]
   * [google.identity.accesscontextmanager.v1.ServicePerimeter] based on the
   * resource name. The long-running operation from this RPC has a successful
   * status after the [service perimeter]
   * [google.identity.accesscontextmanager.v1.ServicePerimeter] is removed from
   * long-lasting storage.
   */
  deleteServicePerimeter(
    request: DeleteServicePerimeterRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Replace all existing [service perimeters]
   * [google.identity.accesscontextmanager.v1.ServicePerimeter] in an [access
   * policy] [google.identity.accesscontextmanager.v1.AccessPolicy] with the
   * [service perimeters]
   * [google.identity.accesscontextmanager.v1.ServicePerimeter] provided. This
   * is done atomically. The long-running operation from this RPC has a
   * successful status after all replacements propagate to long-lasting storage.
   * Replacements containing errors result in an error response for the first
   * error encountered. Upon an error, replacement are cancelled and existing
   * [service perimeters]
   * [google.identity.accesscontextmanager.v1.ServicePerimeter] are not
   * affected. The Operation.response field contains
   * ReplaceServicePerimetersResponse.
   */
  replaceServicePerimeters(
    request: ReplaceServicePerimetersRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Commits the dry-run specification for all the [service perimeters]
   * [google.identity.accesscontextmanager.v1.ServicePerimeter] in an
   * [access policy][google.identity.accesscontextmanager.v1.AccessPolicy].
   * A commit operation on a service perimeter involves copying its `spec` field
   * to the `status` field of the service perimeter. Only [service perimeters]
   * [google.identity.accesscontextmanager.v1.ServicePerimeter] with
   * `use_explicit_dry_run_spec` field set to true are affected by a commit
   * operation. The long-running operation from this RPC has a successful
   * status after the dry-run specifications for all the [service perimeters]
   * [google.identity.accesscontextmanager.v1.ServicePerimeter] have been
   * committed. If a commit fails, it causes the long-running operation to
   * return an error response and the entire commit operation is cancelled.
   * When successful, the Operation.response field contains
   * CommitServicePerimetersResponse. The `dry_run` and the `spec` fields are
   * cleared after a successful commit operation.
   */
  commitServicePerimeters(
    request: CommitServicePerimetersRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Lists all [GcpUserAccessBindings]
   * [google.identity.accesscontextmanager.v1.GcpUserAccessBinding] for a
   * Google Cloud organization.
   */
  listGcpUserAccessBindings(
    request: ListGcpUserAccessBindingsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListGcpUserAccessBindingsResponse>>;
  /**
   * Gets the [GcpUserAccessBinding]
   * [google.identity.accesscontextmanager.v1.GcpUserAccessBinding] with
   * the given name.
   */
  getGcpUserAccessBinding(
    request: GetGcpUserAccessBindingRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GcpUserAccessBinding>>;
  /**
   * Creates a [GcpUserAccessBinding]
   * [google.identity.accesscontextmanager.v1.GcpUserAccessBinding]. If the
   * client specifies a [name]
   * [google.identity.accesscontextmanager.v1.GcpUserAccessBinding.name],
   * the server ignores it. Fails if a resource already exists with the same
   * [group_key]
   * [google.identity.accesscontextmanager.v1.GcpUserAccessBinding.group_key].
   * Completion of this long-running operation does not necessarily signify that
   * the new binding is deployed onto all affected users, which may take more
   * time.
   */
  createGcpUserAccessBinding(
    request: CreateGcpUserAccessBindingRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Updates a [GcpUserAccessBinding]
   * [google.identity.accesscontextmanager.v1.GcpUserAccessBinding].
   * Completion of this long-running operation does not necessarily signify that
   * the changed binding is deployed onto all affected users, which may take
   * more time.
   */
  updateGcpUserAccessBinding(
    request: UpdateGcpUserAccessBindingRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Deletes a [GcpUserAccessBinding]
   * [google.identity.accesscontextmanager.v1.GcpUserAccessBinding].
   * Completion of this long-running operation does not necessarily signify that
   * the binding deletion is deployed onto all affected users, which may take
   * more time.
   */
  deleteGcpUserAccessBinding(
    request: DeleteGcpUserAccessBindingRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Sets the IAM policy for the specified Access Context Manager
   * [access policy][google.identity.accesscontextmanager.v1.AccessPolicy].
   * This method replaces the existing IAM policy on the access policy. The IAM
   * policy controls the set of users who can perform specific operations on the
   * Access Context Manager [access
   * policy][google.identity.accesscontextmanager.v1.AccessPolicy].
   */
  setIamPolicy(request: SetIamPolicyRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Policy>>;
  /**
   * Gets the IAM policy for the specified Access Context Manager
   * [access policy][google.identity.accesscontextmanager.v1.AccessPolicy].
   */
  getIamPolicy(request: GetIamPolicyRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Policy>>;
  /**
   * Returns the IAM permissions that the caller has on the specified Access
   * Context Manager resource. The resource can be an
   * [AccessPolicy][google.identity.accesscontextmanager.v1.AccessPolicy],
   * [AccessLevel][google.identity.accesscontextmanager.v1.AccessLevel], or
   * [ServicePerimeter][google.identity.accesscontextmanager.v1.ServicePerimeter
   * ]. This method does not support other resources.
   */
  testIamPermissions(
    request: TestIamPermissionsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<TestIamPermissionsResponse>>;
}

export interface AccessContextManagerClient<CallOptionsExt = {}> {
  /**
   * Lists all [access policies]
   * [google.identity.accesscontextmanager.v1.AccessPolicy] in an
   * organization.
   */
  listAccessPolicies(
    request: DeepPartial<ListAccessPoliciesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListAccessPoliciesResponse>;
  /**
   * Returns an [access policy]
   * [google.identity.accesscontextmanager.v1.AccessPolicy] based on the name.
   */
  getAccessPolicy(
    request: DeepPartial<GetAccessPolicyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AccessPolicy>;
  /**
   * Creates an access policy. This method fails if the organization already has
   * an access policy. The long-running operation has a successful status
   * after the access policy propagates to long-lasting storage.
   * Syntactic and basic semantic errors are returned in `metadata` as a
   * BadRequest proto.
   */
  createAccessPolicy(request: DeepPartial<AccessPolicy>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /**
   * Updates an [access policy]
   * [google.identity.accesscontextmanager.v1.AccessPolicy]. The
   * long-running operation from this RPC has a successful status after the
   * changes to the [access policy]
   * [google.identity.accesscontextmanager.v1.AccessPolicy] propagate
   * to long-lasting storage.
   */
  updateAccessPolicy(
    request: DeepPartial<UpdateAccessPolicyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Deletes an [access policy]
   * [google.identity.accesscontextmanager.v1.AccessPolicy] based on the
   * resource name. The long-running operation has a successful status after the
   * [access policy] [google.identity.accesscontextmanager.v1.AccessPolicy]
   * is removed from long-lasting storage.
   */
  deleteAccessPolicy(
    request: DeepPartial<DeleteAccessPolicyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Lists all [access levels]
   * [google.identity.accesscontextmanager.v1.AccessLevel] for an access
   * policy.
   */
  listAccessLevels(
    request: DeepPartial<ListAccessLevelsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListAccessLevelsResponse>;
  /**
   * Gets an [access level]
   * [google.identity.accesscontextmanager.v1.AccessLevel] based on the resource
   * name.
   */
  getAccessLevel(
    request: DeepPartial<GetAccessLevelRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AccessLevel>;
  /**
   * Creates an [access level]
   * [google.identity.accesscontextmanager.v1.AccessLevel]. The long-running
   * operation from this RPC has a successful status after the [access
   * level] [google.identity.accesscontextmanager.v1.AccessLevel]
   * propagates to long-lasting storage. If [access levels]
   * [google.identity.accesscontextmanager.v1.AccessLevel] contain
   * errors, an error response is returned for the first error encountered.
   */
  createAccessLevel(
    request: DeepPartial<CreateAccessLevelRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Updates an [access level]
   * [google.identity.accesscontextmanager.v1.AccessLevel]. The long-running
   * operation from this RPC has a successful status after the changes to
   * the [access level]
   * [google.identity.accesscontextmanager.v1.AccessLevel] propagate
   * to long-lasting storage. If [access levels]
   * [google.identity.accesscontextmanager.v1.AccessLevel] contain
   * errors, an error response is returned for the first error encountered.
   */
  updateAccessLevel(
    request: DeepPartial<UpdateAccessLevelRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Deletes an [access level]
   * [google.identity.accesscontextmanager.v1.AccessLevel] based on the resource
   * name. The long-running operation from this RPC has a successful status
   * after the [access level]
   * [google.identity.accesscontextmanager.v1.AccessLevel] has been removed
   * from long-lasting storage.
   */
  deleteAccessLevel(
    request: DeepPartial<DeleteAccessLevelRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Replaces all existing [access levels]
   * [google.identity.accesscontextmanager.v1.AccessLevel] in an [access
   * policy] [google.identity.accesscontextmanager.v1.AccessPolicy] with
   * the [access levels]
   * [google.identity.accesscontextmanager.v1.AccessLevel] provided. This
   * is done atomically. The long-running operation from this RPC has a
   * successful status after all replacements propagate to long-lasting
   * storage. If the replacement contains errors, an error response is returned
   * for the first error encountered.  Upon error, the replacement is cancelled,
   * and existing [access levels]
   * [google.identity.accesscontextmanager.v1.AccessLevel] are not
   * affected. The Operation.response field contains
   * ReplaceAccessLevelsResponse. Removing [access levels]
   * [google.identity.accesscontextmanager.v1.AccessLevel] contained in existing
   * [service perimeters]
   * [google.identity.accesscontextmanager.v1.ServicePerimeter] result in an
   * error.
   */
  replaceAccessLevels(
    request: DeepPartial<ReplaceAccessLevelsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Lists all [service perimeters]
   * [google.identity.accesscontextmanager.v1.ServicePerimeter] for an
   * access policy.
   */
  listServicePerimeters(
    request: DeepPartial<ListServicePerimetersRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListServicePerimetersResponse>;
  /**
   * Gets a [service perimeter]
   * [google.identity.accesscontextmanager.v1.ServicePerimeter] based on the
   * resource name.
   */
  getServicePerimeter(
    request: DeepPartial<GetServicePerimeterRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ServicePerimeter>;
  /**
   * Creates a [service perimeter]
   * [google.identity.accesscontextmanager.v1.ServicePerimeter]. The
   * long-running operation from this RPC has a successful status after the
   * [service perimeter]
   * [google.identity.accesscontextmanager.v1.ServicePerimeter]
   * propagates to long-lasting storage. If a [service perimeter]
   * [google.identity.accesscontextmanager.v1.ServicePerimeter] contains
   * errors, an error response is returned for the first error encountered.
   */
  createServicePerimeter(
    request: DeepPartial<CreateServicePerimeterRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Updates a [service perimeter]
   * [google.identity.accesscontextmanager.v1.ServicePerimeter]. The
   * long-running operation from this RPC has a successful status after the
   * [service perimeter]
   * [google.identity.accesscontextmanager.v1.ServicePerimeter]
   * propagates to long-lasting storage. If a [service perimeter]
   * [google.identity.accesscontextmanager.v1.ServicePerimeter] contains
   * errors, an error response is returned for the first error encountered.
   */
  updateServicePerimeter(
    request: DeepPartial<UpdateServicePerimeterRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Deletes a [service perimeter]
   * [google.identity.accesscontextmanager.v1.ServicePerimeter] based on the
   * resource name. The long-running operation from this RPC has a successful
   * status after the [service perimeter]
   * [google.identity.accesscontextmanager.v1.ServicePerimeter] is removed from
   * long-lasting storage.
   */
  deleteServicePerimeter(
    request: DeepPartial<DeleteServicePerimeterRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Replace all existing [service perimeters]
   * [google.identity.accesscontextmanager.v1.ServicePerimeter] in an [access
   * policy] [google.identity.accesscontextmanager.v1.AccessPolicy] with the
   * [service perimeters]
   * [google.identity.accesscontextmanager.v1.ServicePerimeter] provided. This
   * is done atomically. The long-running operation from this RPC has a
   * successful status after all replacements propagate to long-lasting storage.
   * Replacements containing errors result in an error response for the first
   * error encountered. Upon an error, replacement are cancelled and existing
   * [service perimeters]
   * [google.identity.accesscontextmanager.v1.ServicePerimeter] are not
   * affected. The Operation.response field contains
   * ReplaceServicePerimetersResponse.
   */
  replaceServicePerimeters(
    request: DeepPartial<ReplaceServicePerimetersRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Commits the dry-run specification for all the [service perimeters]
   * [google.identity.accesscontextmanager.v1.ServicePerimeter] in an
   * [access policy][google.identity.accesscontextmanager.v1.AccessPolicy].
   * A commit operation on a service perimeter involves copying its `spec` field
   * to the `status` field of the service perimeter. Only [service perimeters]
   * [google.identity.accesscontextmanager.v1.ServicePerimeter] with
   * `use_explicit_dry_run_spec` field set to true are affected by a commit
   * operation. The long-running operation from this RPC has a successful
   * status after the dry-run specifications for all the [service perimeters]
   * [google.identity.accesscontextmanager.v1.ServicePerimeter] have been
   * committed. If a commit fails, it causes the long-running operation to
   * return an error response and the entire commit operation is cancelled.
   * When successful, the Operation.response field contains
   * CommitServicePerimetersResponse. The `dry_run` and the `spec` fields are
   * cleared after a successful commit operation.
   */
  commitServicePerimeters(
    request: DeepPartial<CommitServicePerimetersRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Lists all [GcpUserAccessBindings]
   * [google.identity.accesscontextmanager.v1.GcpUserAccessBinding] for a
   * Google Cloud organization.
   */
  listGcpUserAccessBindings(
    request: DeepPartial<ListGcpUserAccessBindingsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListGcpUserAccessBindingsResponse>;
  /**
   * Gets the [GcpUserAccessBinding]
   * [google.identity.accesscontextmanager.v1.GcpUserAccessBinding] with
   * the given name.
   */
  getGcpUserAccessBinding(
    request: DeepPartial<GetGcpUserAccessBindingRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GcpUserAccessBinding>;
  /**
   * Creates a [GcpUserAccessBinding]
   * [google.identity.accesscontextmanager.v1.GcpUserAccessBinding]. If the
   * client specifies a [name]
   * [google.identity.accesscontextmanager.v1.GcpUserAccessBinding.name],
   * the server ignores it. Fails if a resource already exists with the same
   * [group_key]
   * [google.identity.accesscontextmanager.v1.GcpUserAccessBinding.group_key].
   * Completion of this long-running operation does not necessarily signify that
   * the new binding is deployed onto all affected users, which may take more
   * time.
   */
  createGcpUserAccessBinding(
    request: DeepPartial<CreateGcpUserAccessBindingRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Updates a [GcpUserAccessBinding]
   * [google.identity.accesscontextmanager.v1.GcpUserAccessBinding].
   * Completion of this long-running operation does not necessarily signify that
   * the changed binding is deployed onto all affected users, which may take
   * more time.
   */
  updateGcpUserAccessBinding(
    request: DeepPartial<UpdateGcpUserAccessBindingRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Deletes a [GcpUserAccessBinding]
   * [google.identity.accesscontextmanager.v1.GcpUserAccessBinding].
   * Completion of this long-running operation does not necessarily signify that
   * the binding deletion is deployed onto all affected users, which may take
   * more time.
   */
  deleteGcpUserAccessBinding(
    request: DeepPartial<DeleteGcpUserAccessBindingRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Sets the IAM policy for the specified Access Context Manager
   * [access policy][google.identity.accesscontextmanager.v1.AccessPolicy].
   * This method replaces the existing IAM policy on the access policy. The IAM
   * policy controls the set of users who can perform specific operations on the
   * Access Context Manager [access
   * policy][google.identity.accesscontextmanager.v1.AccessPolicy].
   */
  setIamPolicy(request: DeepPartial<SetIamPolicyRequest>, options?: CallOptions & CallOptionsExt): Promise<Policy>;
  /**
   * Gets the IAM policy for the specified Access Context Manager
   * [access policy][google.identity.accesscontextmanager.v1.AccessPolicy].
   */
  getIamPolicy(request: DeepPartial<GetIamPolicyRequest>, options?: CallOptions & CallOptionsExt): Promise<Policy>;
  /**
   * Returns the IAM permissions that the caller has on the specified Access
   * Context Manager resource. The resource can be an
   * [AccessPolicy][google.identity.accesscontextmanager.v1.AccessPolicy],
   * [AccessLevel][google.identity.accesscontextmanager.v1.AccessLevel], or
   * [ServicePerimeter][google.identity.accesscontextmanager.v1.ServicePerimeter
   * ]. This method does not support other resources.
   */
  testIamPermissions(
    request: DeepPartial<TestIamPermissionsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<TestIamPermissionsResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
