// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/identity/accesscontextmanager/type/device_resources.proto

/* eslint-disable */

export const protobufPackage = "google.identity.accesscontextmanager.type";

/** The encryption state of the device. */
export enum DeviceEncryptionStatus {
  /** ENCRYPTION_UNSPECIFIED - The encryption status of the device is not specified or not known. */
  ENCRYPTION_UNSPECIFIED = 0,
  /** ENCRYPTION_UNSUPPORTED - The device does not support encryption. */
  ENCRYPTION_UNSUPPORTED = 1,
  /** UNENCRYPTED - The device supports encryption, but is currently unencrypted. */
  UNENCRYPTED = 2,
  /** ENCRYPTED - The device is encrypted. */
  ENCRYPTED = 3,
  UNRECOGNIZED = -1,
}

export function deviceEncryptionStatusFromJSON(object: any): DeviceEncryptionStatus {
  switch (object) {
    case 0:
    case "ENCRYPTION_UNSPECIFIED":
      return DeviceEncryptionStatus.ENCRYPTION_UNSPECIFIED;
    case 1:
    case "ENCRYPTION_UNSUPPORTED":
      return DeviceEncryptionStatus.ENCRYPTION_UNSUPPORTED;
    case 2:
    case "UNENCRYPTED":
      return DeviceEncryptionStatus.UNENCRYPTED;
    case 3:
    case "ENCRYPTED":
      return DeviceEncryptionStatus.ENCRYPTED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return DeviceEncryptionStatus.UNRECOGNIZED;
  }
}

export function deviceEncryptionStatusToJSON(object: DeviceEncryptionStatus): string {
  switch (object) {
    case DeviceEncryptionStatus.ENCRYPTION_UNSPECIFIED:
      return "ENCRYPTION_UNSPECIFIED";
    case DeviceEncryptionStatus.ENCRYPTION_UNSUPPORTED:
      return "ENCRYPTION_UNSUPPORTED";
    case DeviceEncryptionStatus.UNENCRYPTED:
      return "UNENCRYPTED";
    case DeviceEncryptionStatus.ENCRYPTED:
      return "ENCRYPTED";
    case DeviceEncryptionStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * The operating system type of the device.
 * Next id: 7
 */
export enum OsType {
  /** OS_UNSPECIFIED - The operating system of the device is not specified or not known. */
  OS_UNSPECIFIED = 0,
  /** DESKTOP_MAC - A desktop Mac operating system. */
  DESKTOP_MAC = 1,
  /** DESKTOP_WINDOWS - A desktop Windows operating system. */
  DESKTOP_WINDOWS = 2,
  /** DESKTOP_LINUX - A desktop Linux operating system. */
  DESKTOP_LINUX = 3,
  /** DESKTOP_CHROME_OS - A desktop ChromeOS operating system. */
  DESKTOP_CHROME_OS = 6,
  /** ANDROID - An Android operating system. */
  ANDROID = 4,
  /** IOS - An iOS operating system. */
  IOS = 5,
  UNRECOGNIZED = -1,
}

export function osTypeFromJSON(object: any): OsType {
  switch (object) {
    case 0:
    case "OS_UNSPECIFIED":
      return OsType.OS_UNSPECIFIED;
    case 1:
    case "DESKTOP_MAC":
      return OsType.DESKTOP_MAC;
    case 2:
    case "DESKTOP_WINDOWS":
      return OsType.DESKTOP_WINDOWS;
    case 3:
    case "DESKTOP_LINUX":
      return OsType.DESKTOP_LINUX;
    case 6:
    case "DESKTOP_CHROME_OS":
      return OsType.DESKTOP_CHROME_OS;
    case 4:
    case "ANDROID":
      return OsType.ANDROID;
    case 5:
    case "IOS":
      return OsType.IOS;
    case -1:
    case "UNRECOGNIZED":
    default:
      return OsType.UNRECOGNIZED;
  }
}

export function osTypeToJSON(object: OsType): string {
  switch (object) {
    case OsType.OS_UNSPECIFIED:
      return "OS_UNSPECIFIED";
    case OsType.DESKTOP_MAC:
      return "DESKTOP_MAC";
    case OsType.DESKTOP_WINDOWS:
      return "DESKTOP_WINDOWS";
    case OsType.DESKTOP_LINUX:
      return "DESKTOP_LINUX";
    case OsType.DESKTOP_CHROME_OS:
      return "DESKTOP_CHROME_OS";
    case OsType.ANDROID:
      return "ANDROID";
    case OsType.IOS:
      return "IOS";
    case OsType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** The degree to which the device is managed by the Cloud organization. */
export enum DeviceManagementLevel {
  /** MANAGEMENT_UNSPECIFIED - The device's management level is not specified or not known. */
  MANAGEMENT_UNSPECIFIED = 0,
  /** NONE - The device is not managed. */
  NONE = 1,
  /**
   * BASIC - Basic management is enabled, which is generally limited to monitoring and
   * wiping the corporate account.
   */
  BASIC = 2,
  /**
   * COMPLETE - Complete device management. This includes more thorough monitoring and the
   * ability to directly manage the device (such as remote wiping). This can be
   * enabled through the Android Enterprise Platform.
   */
  COMPLETE = 3,
  UNRECOGNIZED = -1,
}

export function deviceManagementLevelFromJSON(object: any): DeviceManagementLevel {
  switch (object) {
    case 0:
    case "MANAGEMENT_UNSPECIFIED":
      return DeviceManagementLevel.MANAGEMENT_UNSPECIFIED;
    case 1:
    case "NONE":
      return DeviceManagementLevel.NONE;
    case 2:
    case "BASIC":
      return DeviceManagementLevel.BASIC;
    case 3:
    case "COMPLETE":
      return DeviceManagementLevel.COMPLETE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return DeviceManagementLevel.UNRECOGNIZED;
  }
}

export function deviceManagementLevelToJSON(object: DeviceManagementLevel): string {
  switch (object) {
    case DeviceManagementLevel.MANAGEMENT_UNSPECIFIED:
      return "MANAGEMENT_UNSPECIFIED";
    case DeviceManagementLevel.NONE:
      return "NONE";
    case DeviceManagementLevel.BASIC:
      return "BASIC";
    case DeviceManagementLevel.COMPLETE:
      return "COMPLETE";
    case DeviceManagementLevel.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}
