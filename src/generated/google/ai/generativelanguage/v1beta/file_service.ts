// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ai/generativelanguage/v1beta/file_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Empty } from "../../../protobuf/empty.js";
import { File } from "./file.js";

export const protobufPackage = "google.ai.generativelanguage.v1beta";

/** Request for `CreateFile`. */
export interface CreateFileRequest {
  /** Optional. Metadata for the file to create. */
  file: File | undefined;
}

/** Response for `CreateFile`. */
export interface CreateFileResponse {
  /** Metadata for the created file. */
  file: File | undefined;
}

/** Request for `ListFiles`. */
export interface ListFilesRequest {
  /**
   * Optional. Maximum number of `File`s to return per page.
   * If unspecified, defaults to 10. Maximum `page_size` is 100.
   */
  pageSize: number;
  /** Optional. A page token from a previous `ListFiles` call. */
  pageToken: string;
}

/** Response for `ListFiles`. */
export interface ListFilesResponse {
  /** The list of `File`s. */
  files: File[];
  /**
   * A token that can be sent as a `page_token` into a subsequent `ListFiles`
   * call.
   */
  nextPageToken: string;
}

/** Request for `GetFile`. */
export interface GetFileRequest {
  /**
   * Required. The name of the `File` to get.
   * Example: `files/abc-123`
   */
  name: string;
}

/** Request for `DeleteFile`. */
export interface DeleteFileRequest {
  /**
   * Required. The name of the `File` to delete.
   * Example: `files/abc-123`
   */
  name: string;
}

function createBaseCreateFileRequest(): CreateFileRequest {
  return { file: undefined };
}

export const CreateFileRequest: MessageFns<CreateFileRequest> = {
  encode(message: CreateFileRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.file !== undefined) {
      File.encode(message.file, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateFileRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateFileRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.file = File.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateFileRequest {
    return { file: isSet(object.file) ? File.fromJSON(object.file) : undefined };
  },

  toJSON(message: CreateFileRequest): unknown {
    const obj: any = {};
    if (message.file !== undefined) {
      obj.file = File.toJSON(message.file);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateFileRequest>): CreateFileRequest {
    return CreateFileRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateFileRequest>): CreateFileRequest {
    const message = createBaseCreateFileRequest();
    message.file = (object.file !== undefined && object.file !== null) ? File.fromPartial(object.file) : undefined;
    return message;
  },
};

function createBaseCreateFileResponse(): CreateFileResponse {
  return { file: undefined };
}

export const CreateFileResponse: MessageFns<CreateFileResponse> = {
  encode(message: CreateFileResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.file !== undefined) {
      File.encode(message.file, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateFileResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateFileResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.file = File.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateFileResponse {
    return { file: isSet(object.file) ? File.fromJSON(object.file) : undefined };
  },

  toJSON(message: CreateFileResponse): unknown {
    const obj: any = {};
    if (message.file !== undefined) {
      obj.file = File.toJSON(message.file);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateFileResponse>): CreateFileResponse {
    return CreateFileResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateFileResponse>): CreateFileResponse {
    const message = createBaseCreateFileResponse();
    message.file = (object.file !== undefined && object.file !== null) ? File.fromPartial(object.file) : undefined;
    return message;
  },
};

function createBaseListFilesRequest(): ListFilesRequest {
  return { pageSize: 0, pageToken: "" };
}

export const ListFilesRequest: MessageFns<ListFilesRequest> = {
  encode(message: ListFilesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pageSize !== 0) {
      writer.uint32(8).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListFilesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListFilesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListFilesRequest {
    return {
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListFilesRequest): unknown {
    const obj: any = {};
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListFilesRequest>): ListFilesRequest {
    return ListFilesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListFilesRequest>): ListFilesRequest {
    const message = createBaseListFilesRequest();
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListFilesResponse(): ListFilesResponse {
  return { files: [], nextPageToken: "" };
}

export const ListFilesResponse: MessageFns<ListFilesResponse> = {
  encode(message: ListFilesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.files) {
      File.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListFilesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListFilesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.files.push(File.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListFilesResponse {
    return {
      files: globalThis.Array.isArray(object?.files) ? object.files.map((e: any) => File.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListFilesResponse): unknown {
    const obj: any = {};
    if (message.files?.length) {
      obj.files = message.files.map((e) => File.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListFilesResponse>): ListFilesResponse {
    return ListFilesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListFilesResponse>): ListFilesResponse {
    const message = createBaseListFilesResponse();
    message.files = object.files?.map((e) => File.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetFileRequest(): GetFileRequest {
  return { name: "" };
}

export const GetFileRequest: MessageFns<GetFileRequest> = {
  encode(message: GetFileRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetFileRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetFileRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetFileRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetFileRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetFileRequest>): GetFileRequest {
    return GetFileRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetFileRequest>): GetFileRequest {
    const message = createBaseGetFileRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseDeleteFileRequest(): DeleteFileRequest {
  return { name: "" };
}

export const DeleteFileRequest: MessageFns<DeleteFileRequest> = {
  encode(message: DeleteFileRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteFileRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteFileRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteFileRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteFileRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteFileRequest>): DeleteFileRequest {
    return DeleteFileRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteFileRequest>): DeleteFileRequest {
    const message = createBaseDeleteFileRequest();
    message.name = object.name ?? "";
    return message;
  },
};

/** An API for uploading and managing files. */
export type FileServiceDefinition = typeof FileServiceDefinition;
export const FileServiceDefinition = {
  name: "FileService",
  fullName: "google.ai.generativelanguage.v1beta.FileService",
  methods: {
    /** Creates a `File`. */
    createFile: {
      name: "CreateFile",
      requestType: CreateFileRequest,
      requestStream: false,
      responseType: CreateFileResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [Buffer.from([18, 58, 1, 42, 34, 13, 47, 118, 49, 98, 101, 116, 97, 47, 102, 105, 108, 101, 115])],
        },
      },
    },
    /** Lists the metadata for `File`s owned by the requesting project. */
    listFiles: {
      name: "ListFiles",
      requestType: ListFilesRequest,
      requestStream: false,
      responseType: ListFilesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [Buffer.from([15, 18, 13, 47, 118, 49, 98, 101, 116, 97, 47, 102, 105, 108, 101, 115])],
        },
      },
    },
    /** Gets the metadata for the given `File`. */
    getFile: {
      name: "GetFile",
      requestType: GetFileRequest,
      requestStream: false,
      responseType: File,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              24,
              18,
              22,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              102,
              105,
              108,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes the `File`. */
    deleteFile: {
      name: "DeleteFile",
      requestType: DeleteFileRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              24,
              42,
              22,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              102,
              105,
              108,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface FileServiceImplementation<CallContextExt = {}> {
  /** Creates a `File`. */
  createFile(
    request: CreateFileRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<CreateFileResponse>>;
  /** Lists the metadata for `File`s owned by the requesting project. */
  listFiles(request: ListFilesRequest, context: CallContext & CallContextExt): Promise<DeepPartial<ListFilesResponse>>;
  /** Gets the metadata for the given `File`. */
  getFile(request: GetFileRequest, context: CallContext & CallContextExt): Promise<DeepPartial<File>>;
  /** Deletes the `File`. */
  deleteFile(request: DeleteFileRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
}

export interface FileServiceClient<CallOptionsExt = {}> {
  /** Creates a `File`. */
  createFile(
    request: DeepPartial<CreateFileRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<CreateFileResponse>;
  /** Lists the metadata for `File`s owned by the requesting project. */
  listFiles(request: DeepPartial<ListFilesRequest>, options?: CallOptions & CallOptionsExt): Promise<ListFilesResponse>;
  /** Gets the metadata for the given `File`. */
  getFile(request: DeepPartial<GetFileRequest>, options?: CallOptions & CallOptionsExt): Promise<File>;
  /** Deletes the `File`. */
  deleteFile(request: DeepPartial<DeleteFileRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
