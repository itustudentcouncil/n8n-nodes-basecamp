// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ai/generativelanguage/v1beta/prediction_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Value } from "../../../protobuf/struct.js";

export const protobufPackage = "google.ai.generativelanguage.v1beta";

/**
 * Request message for
 * [PredictionService.Predict][google.ai.generativelanguage.v1beta.PredictionService.Predict].
 */
export interface PredictRequest {
  /**
   * Required. The name of the model for prediction.
   * Format: `name=models/{model}`.
   */
  model: string;
  /** Required. The instances that are the input to the prediction call. */
  instances: any[];
  /** Optional. The parameters that govern the prediction call. */
  parameters: any | undefined;
}

/** Response message for [PredictionService.Predict]. */
export interface PredictResponse {
  /** The outputs of the prediction call. */
  predictions: any[];
}

function createBasePredictRequest(): PredictRequest {
  return { model: "", instances: [], parameters: undefined };
}

export const PredictRequest: MessageFns<PredictRequest> = {
  encode(message: PredictRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.model !== "") {
      writer.uint32(10).string(message.model);
    }
    for (const v of message.instances) {
      Value.encode(Value.wrap(v!), writer.uint32(18).fork()).join();
    }
    if (message.parameters !== undefined) {
      Value.encode(Value.wrap(message.parameters), writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PredictRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePredictRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.model = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.instances.push(Value.unwrap(Value.decode(reader, reader.uint32())));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.parameters = Value.unwrap(Value.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PredictRequest {
    return {
      model: isSet(object.model) ? globalThis.String(object.model) : "",
      instances: globalThis.Array.isArray(object?.instances) ? [...object.instances] : [],
      parameters: isSet(object?.parameters) ? object.parameters : undefined,
    };
  },

  toJSON(message: PredictRequest): unknown {
    const obj: any = {};
    if (message.model !== "") {
      obj.model = message.model;
    }
    if (message.instances?.length) {
      obj.instances = message.instances;
    }
    if (message.parameters !== undefined) {
      obj.parameters = message.parameters;
    }
    return obj;
  },

  create(base?: DeepPartial<PredictRequest>): PredictRequest {
    return PredictRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PredictRequest>): PredictRequest {
    const message = createBasePredictRequest();
    message.model = object.model ?? "";
    message.instances = object.instances?.map((e) => e) || [];
    message.parameters = object.parameters ?? undefined;
    return message;
  },
};

function createBasePredictResponse(): PredictResponse {
  return { predictions: [] };
}

export const PredictResponse: MessageFns<PredictResponse> = {
  encode(message: PredictResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.predictions) {
      Value.encode(Value.wrap(v!), writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PredictResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePredictResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.predictions.push(Value.unwrap(Value.decode(reader, reader.uint32())));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PredictResponse {
    return { predictions: globalThis.Array.isArray(object?.predictions) ? [...object.predictions] : [] };
  },

  toJSON(message: PredictResponse): unknown {
    const obj: any = {};
    if (message.predictions?.length) {
      obj.predictions = message.predictions;
    }
    return obj;
  },

  create(base?: DeepPartial<PredictResponse>): PredictResponse {
    return PredictResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PredictResponse>): PredictResponse {
    const message = createBasePredictResponse();
    message.predictions = object.predictions?.map((e) => e) || [];
    return message;
  },
};

/** A service for online predictions and explanations. */
export type PredictionServiceDefinition = typeof PredictionServiceDefinition;
export const PredictionServiceDefinition = {
  name: "PredictionService",
  fullName: "google.ai.generativelanguage.v1beta.PredictionService",
  methods: {
    /** Performs a prediction request. */
    predict: {
      name: "Predict",
      requestType: PredictRequest,
      requestStream: false,
      responseType: PredictResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([15, 109, 111, 100, 101, 108, 44, 105, 110, 115, 116, 97, 110, 99, 101, 115])],
          578365826: [
            Buffer.from([
              37,
              58,
              1,
              42,
              34,
              32,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              109,
              111,
              100,
              101,
              108,
              61,
              109,
              111,
              100,
              101,
              108,
              115,
              47,
              42,
              125,
              58,
              112,
              114,
              101,
              100,
              105,
              99,
              116,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface PredictionServiceImplementation<CallContextExt = {}> {
  /** Performs a prediction request. */
  predict(request: PredictRequest, context: CallContext & CallContextExt): Promise<DeepPartial<PredictResponse>>;
}

export interface PredictionServiceClient<CallOptionsExt = {}> {
  /** Performs a prediction request. */
  predict(request: DeepPartial<PredictRequest>, options?: CallOptions & CallOptionsExt): Promise<PredictResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
