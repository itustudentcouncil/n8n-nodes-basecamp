// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/marketingplatform/admin/v1alpha/resources.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.marketingplatform.admin.v1alpha";

/**
 * The verification state of the link between a product account and a GMP
 * organization.
 */
export enum LinkVerificationState {
  /** LINK_VERIFICATION_STATE_UNSPECIFIED - The link state is unknown. */
  LINK_VERIFICATION_STATE_UNSPECIFIED = 0,
  /** LINK_VERIFICATION_STATE_VERIFIED - The link is established. */
  LINK_VERIFICATION_STATE_VERIFIED = 1,
  /**
   * LINK_VERIFICATION_STATE_NOT_VERIFIED - The link is requested, but hasn't been approved by the product account
   * admin.
   */
  LINK_VERIFICATION_STATE_NOT_VERIFIED = 2,
  UNRECOGNIZED = -1,
}

export function linkVerificationStateFromJSON(object: any): LinkVerificationState {
  switch (object) {
    case 0:
    case "LINK_VERIFICATION_STATE_UNSPECIFIED":
      return LinkVerificationState.LINK_VERIFICATION_STATE_UNSPECIFIED;
    case 1:
    case "LINK_VERIFICATION_STATE_VERIFIED":
      return LinkVerificationState.LINK_VERIFICATION_STATE_VERIFIED;
    case 2:
    case "LINK_VERIFICATION_STATE_NOT_VERIFIED":
      return LinkVerificationState.LINK_VERIFICATION_STATE_NOT_VERIFIED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return LinkVerificationState.UNRECOGNIZED;
  }
}

export function linkVerificationStateToJSON(object: LinkVerificationState): string {
  switch (object) {
    case LinkVerificationState.LINK_VERIFICATION_STATE_UNSPECIFIED:
      return "LINK_VERIFICATION_STATE_UNSPECIFIED";
    case LinkVerificationState.LINK_VERIFICATION_STATE_VERIFIED:
      return "LINK_VERIFICATION_STATE_VERIFIED";
    case LinkVerificationState.LINK_VERIFICATION_STATE_NOT_VERIFIED:
      return "LINK_VERIFICATION_STATE_NOT_VERIFIED";
    case LinkVerificationState.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** A resource message representing a Google Marketing Platform organization. */
export interface Organization {
  /**
   * Identifier. The resource name of the GMP organization.
   * Format: organizations/{org_id}
   */
  name: string;
  /** The human-readable name for the organization. */
  displayName: string;
}

/**
 * A resource message representing the link between a Google Analytics account
 * and a Google Marketing Platform organization.
 */
export interface AnalyticsAccountLink {
  /**
   * Identifier. Resource name of this AnalyticsAccountLink. Note the resource
   * ID is the same as the ID of the Analtyics account.
   *
   * Format:
   * organizations/{org_id}/analyticsAccountLinks/{analytics_account_link_id}
   * Example: "organizations/xyz/analyticsAccountLinks/1234"
   */
  name: string;
  /**
   * Required. Immutable. The resource name of the AnalyticsAdmin API account.
   * The account ID will be used as the ID of this AnalyticsAccountLink
   * resource, which will become the final component of the resource name.
   *
   * Format: analyticsadmin.googleapis.com/accounts/{account_id}
   */
  analyticsAccount: string;
  /** Output only. The human-readable name for the Analytics account. */
  displayName: string;
  /**
   * Output only. The verification state of the link between the Analytics
   * account and the parent organization.
   */
  linkVerificationState: LinkVerificationState;
}

function createBaseOrganization(): Organization {
  return { name: "", displayName: "" };
}

export const Organization: MessageFns<Organization> = {
  encode(message: Organization, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.displayName !== "") {
      writer.uint32(18).string(message.displayName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Organization {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOrganization();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.displayName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Organization {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
    };
  },

  toJSON(message: Organization): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    return obj;
  },

  create(base?: DeepPartial<Organization>): Organization {
    return Organization.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Organization>): Organization {
    const message = createBaseOrganization();
    message.name = object.name ?? "";
    message.displayName = object.displayName ?? "";
    return message;
  },
};

function createBaseAnalyticsAccountLink(): AnalyticsAccountLink {
  return { name: "", analyticsAccount: "", displayName: "", linkVerificationState: 0 };
}

export const AnalyticsAccountLink: MessageFns<AnalyticsAccountLink> = {
  encode(message: AnalyticsAccountLink, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.analyticsAccount !== "") {
      writer.uint32(18).string(message.analyticsAccount);
    }
    if (message.displayName !== "") {
      writer.uint32(26).string(message.displayName);
    }
    if (message.linkVerificationState !== 0) {
      writer.uint32(32).int32(message.linkVerificationState);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AnalyticsAccountLink {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAnalyticsAccountLink();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.analyticsAccount = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.linkVerificationState = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AnalyticsAccountLink {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      analyticsAccount: isSet(object.analyticsAccount) ? globalThis.String(object.analyticsAccount) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      linkVerificationState: isSet(object.linkVerificationState)
        ? linkVerificationStateFromJSON(object.linkVerificationState)
        : 0,
    };
  },

  toJSON(message: AnalyticsAccountLink): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.analyticsAccount !== "") {
      obj.analyticsAccount = message.analyticsAccount;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.linkVerificationState !== 0) {
      obj.linkVerificationState = linkVerificationStateToJSON(message.linkVerificationState);
    }
    return obj;
  },

  create(base?: DeepPartial<AnalyticsAccountLink>): AnalyticsAccountLink {
    return AnalyticsAccountLink.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AnalyticsAccountLink>): AnalyticsAccountLink {
    const message = createBaseAnalyticsAccountLink();
    message.name = object.name ?? "";
    message.analyticsAccount = object.analyticsAccount ?? "";
    message.displayName = object.displayName ?? "";
    message.linkVerificationState = object.linkVerificationState ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
