// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/storage/v1/storage.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import {
  GetIamPolicyRequest as GetIamPolicyRequest1,
  SetIamPolicyRequest as SetIamPolicyRequest2,
  TestIamPermissionsRequest as TestIamPermissionsRequest3,
} from "../../iam/v1/iam_policy.js";
import { FieldMask } from "../../protobuf/field_mask.js";
import { Int64Value } from "../../protobuf/wrappers.js";
import {
  Bucket,
  BucketAccessControl,
  Channel,
  ChecksummedData,
  CommonEnums_PredefinedBucketAcl,
  commonEnums_PredefinedBucketAclFromJSON,
  commonEnums_PredefinedBucketAclToJSON,
  CommonEnums_PredefinedObjectAcl,
  commonEnums_PredefinedObjectAclFromJSON,
  commonEnums_PredefinedObjectAclToJSON,
  CommonEnums_Projection,
  commonEnums_ProjectionFromJSON,
  commonEnums_ProjectionToJSON,
  ContentRange,
  HmacKeyMetadata,
  Notification,
  Object,
  ObjectAccessControl,
  ObjectChecksums,
} from "./storage_resources.js";

export const protobufPackage = "google.storage.v1";

/** Request message for DeleteBucketAccessControl. */
export interface DeleteBucketAccessControlRequest {
  /** Required. Name of a bucket. */
  bucket: string;
  /**
   * Required. The entity holding the permission. Can be one of:
   * * `user-`*userId*
   * * `user-`*emailAddress*
   * * `group-`*groupId*
   * * `group-`*emailAddress*
   * * `allUsers`
   * * `allAuthenticatedUsers`
   */
  entity: string;
  /** A set of parameters common to all Storage API requests. */
  commonRequestParams: CommonRequestParams | undefined;
}

/** Request message for GetBucketAccessControl. */
export interface GetBucketAccessControlRequest {
  /** Required. Name of a bucket. */
  bucket: string;
  /**
   * Required. The entity holding the permission. Can be one of:
   * * `user-`*userId*
   * * `user-`*emailAddress*
   * * `group-`*groupId*
   * * `group-`*emailAddress*
   * * `allUsers`
   * * `allAuthenticatedUsers`
   */
  entity: string;
  /** A set of parameters common to all Storage API requests. */
  commonRequestParams: CommonRequestParams | undefined;
}

/** Request message for InsertBucketAccessControl. */
export interface InsertBucketAccessControlRequest {
  /** Required. Name of a bucket. */
  bucket: string;
  /** Properties of the new bucket access control being inserted. */
  bucketAccessControl:
    | BucketAccessControl
    | undefined;
  /** A set of parameters common to all Storage API requests. */
  commonRequestParams: CommonRequestParams | undefined;
}

/** Request message for ListBucketAccessControl. */
export interface ListBucketAccessControlsRequest {
  /** Required. Name of a bucket. */
  bucket: string;
  /** A set of parameters common to all Storage API requests. */
  commonRequestParams: CommonRequestParams | undefined;
}

/** Request for PatchBucketAccessControl. */
export interface PatchBucketAccessControlRequest {
  /** Required. Name of a bucket. */
  bucket: string;
  /**
   * Required. The entity holding the permission. Can be one of:
   * * `user-`*userId*
   * * `user-`*emailAddress*
   * * `group-`*groupId*
   * * `group-`*emailAddress*
   * * `allUsers`
   * * `allAuthenticatedUsers`
   */
  entity: string;
  /** The BucketAccessControl for updating. */
  bucketAccessControl:
    | BucketAccessControl
    | undefined;
  /**
   * List of fields to be updated.
   *
   * To specify ALL fields, equivalent to the JSON API's "update" function,
   * specify a single field with the value `*`.
   *
   * Not specifying any fields is an error.
   * Not specifying a field while setting that field to a non-default value is
   * an error.
   */
  updateMask:
    | string[]
    | undefined;
  /** A set of parameters common to all Storage API requests. */
  commonRequestParams: CommonRequestParams | undefined;
}

/** Request for UpdateBucketAccessControl. */
export interface UpdateBucketAccessControlRequest {
  /** Required. Name of a bucket. */
  bucket: string;
  /**
   * Required. The entity holding the permission. Can be one of:
   * * `user-`*userId*
   * * `user-`*emailAddress*
   * * `group-`*groupId*
   * * `group-`*emailAddress*
   * * `allUsers`
   * * `allAuthenticatedUsers`
   */
  entity: string;
  /** The BucketAccessControl for updating. */
  bucketAccessControl:
    | BucketAccessControl
    | undefined;
  /** A set of parameters common to all Storage API requests. */
  commonRequestParams: CommonRequestParams | undefined;
}

/** Request message for DeleteBucket. */
export interface DeleteBucketRequest {
  /** Required. Name of a bucket. */
  bucket: string;
  /** If set, only deletes the bucket if its metageneration matches this value. */
  ifMetagenerationMatch:
    | Long
    | undefined;
  /**
   * If set, only deletes the bucket if its metageneration does not match this
   * value.
   */
  ifMetagenerationNotMatch:
    | Long
    | undefined;
  /** A set of parameters common to all Storage API requests. */
  commonRequestParams: CommonRequestParams | undefined;
}

/** Request message for GetBucket. */
export interface GetBucketRequest {
  /** Required. Name of a bucket. */
  bucket: string;
  /**
   * Makes the return of the bucket metadata conditional on whether the bucket's
   * current metageneration matches the given value.
   */
  ifMetagenerationMatch:
    | Long
    | undefined;
  /**
   * Makes the return of the bucket metadata conditional on whether the bucket's
   * current metageneration does not match the given value.
   */
  ifMetagenerationNotMatch:
    | Long
    | undefined;
  /** Set of properties to return. Defaults to `NO_ACL`. */
  projection: CommonEnums_Projection;
  /** A set of parameters common to all Storage API requests. */
  commonRequestParams: CommonRequestParams | undefined;
}

/** Request message for InsertBucket. */
export interface InsertBucketRequest {
  /** Apply a predefined set of access controls to this bucket. */
  predefinedAcl: CommonEnums_PredefinedBucketAcl;
  /** Apply a predefined set of default object access controls to this bucket. */
  predefinedDefaultObjectAcl: CommonEnums_PredefinedObjectAcl;
  /** Required. A valid API project identifier. */
  project: string;
  /**
   * Set of properties to return. Defaults to `NO_ACL`, unless the
   * bucket resource specifies `acl` or `defaultObjectAcl`
   * properties, when it defaults to `FULL`.
   */
  projection: CommonEnums_Projection;
  /** Properties of the new bucket being inserted, including its name. */
  bucket:
    | Bucket
    | undefined;
  /** A set of parameters common to all Storage API requests. */
  commonRequestParams: CommonRequestParams | undefined;
}

/** Request message for ListChannels. */
export interface ListChannelsRequest {
  /** Required. Name of a bucket. */
  bucket: string;
  /** A set of parameters common to all Storage API requests. */
  commonRequestParams: CommonRequestParams | undefined;
}

/** Request message for ListBuckets. */
export interface ListBucketsRequest {
  /**
   * Maximum number of buckets to return in a single response. The service will
   * use this parameter or 1,000 items, whichever is smaller.
   */
  maxResults: number;
  /**
   * A previously-returned page token representing part of the larger set of
   * results to view.
   */
  pageToken: string;
  /** Filter results to buckets whose names begin with this prefix. */
  prefix: string;
  /** Required. A valid API project identifier. */
  project: string;
  /** Set of properties to return. Defaults to `NO_ACL`. */
  projection: CommonEnums_Projection;
  /** A set of parameters common to all Storage API requests. */
  commonRequestParams: CommonRequestParams | undefined;
}

/** Request message for LockRetentionPolicy. */
export interface LockRetentionPolicyRequest {
  /** Required. Name of a bucket. */
  bucket: string;
  /**
   * Makes the operation conditional on whether bucket's current metageneration
   * matches the given value. Must be positive.
   */
  ifMetagenerationMatch: Long;
  /** A set of parameters common to all Storage API requests. */
  commonRequestParams: CommonRequestParams | undefined;
}

/** Request for PatchBucket method. */
export interface PatchBucketRequest {
  /** Required. Name of a bucket. */
  bucket: string;
  /**
   * Makes the return of the bucket metadata conditional on whether the bucket's
   * current metageneration matches the given value.
   */
  ifMetagenerationMatch:
    | Long
    | undefined;
  /**
   * Makes the return of the bucket metadata conditional on whether the bucket's
   * current metageneration does not match the given value.
   */
  ifMetagenerationNotMatch:
    | Long
    | undefined;
  /** Apply a predefined set of access controls to this bucket. */
  predefinedAcl: CommonEnums_PredefinedBucketAcl;
  /** Apply a predefined set of default object access controls to this bucket. */
  predefinedDefaultObjectAcl: CommonEnums_PredefinedObjectAcl;
  /** Set of properties to return. Defaults to `FULL`. */
  projection: CommonEnums_Projection;
  /** The Bucket metadata for updating. */
  metadata:
    | Bucket
    | undefined;
  /**
   * List of fields to be updated.
   *
   * To specify ALL fields, equivalent to the JSON API's "update" function,
   * specify a single field with the value `*`. Note: not recommended. If a new
   * field is introduced at a later time, an older client updating with the `*`
   * may accidentally reset the new field's value.
   *
   * Not specifying any fields is an error.
   * Not specifying a field while setting that field to a non-default value is
   * an error.
   */
  updateMask:
    | string[]
    | undefined;
  /** A set of parameters common to all Storage API requests. */
  commonRequestParams: CommonRequestParams | undefined;
}

/** Request for UpdateBucket method. */
export interface UpdateBucketRequest {
  /** Required. Name of a bucket. */
  bucket: string;
  /**
   * Makes the return of the bucket metadata conditional on whether the bucket's
   * current metageneration matches the given value.
   */
  ifMetagenerationMatch:
    | Long
    | undefined;
  /**
   * Makes the return of the bucket metadata conditional on whether the bucket's
   * current metageneration does not match the given value.
   */
  ifMetagenerationNotMatch:
    | Long
    | undefined;
  /** Apply a predefined set of access controls to this bucket. */
  predefinedAcl: CommonEnums_PredefinedBucketAcl;
  /** Apply a predefined set of default object access controls to this bucket. */
  predefinedDefaultObjectAcl: CommonEnums_PredefinedObjectAcl;
  /** Set of properties to return. Defaults to `FULL`. */
  projection: CommonEnums_Projection;
  /** The Bucket metadata for updating. */
  metadata:
    | Bucket
    | undefined;
  /** A set of parameters common to all Storage API requests. */
  commonRequestParams: CommonRequestParams | undefined;
}

/** Request message for StopChannel. */
export interface StopChannelRequest {
  /** The channel to be stopped. */
  channel:
    | Channel
    | undefined;
  /** A set of parameters common to all Storage API requests. */
  commonRequestParams: CommonRequestParams | undefined;
}

/** Request message for DeleteDefaultObjectAccessControl. */
export interface DeleteDefaultObjectAccessControlRequest {
  /** Required. Name of a bucket. */
  bucket: string;
  /**
   * Required. The entity holding the permission. Can be one of:
   * * `user-`*userId*
   * * `user-`*emailAddress*
   * * `group-`*groupId*
   * * `group-`*emailAddress*
   * * `allUsers`
   * * `allAuthenticatedUsers`
   */
  entity: string;
  /** A set of parameters common to all Storage API requests. */
  commonRequestParams: CommonRequestParams | undefined;
}

/** Request message for GetDefaultObjectAccessControl. */
export interface GetDefaultObjectAccessControlRequest {
  /** Required. Name of a bucket. */
  bucket: string;
  /**
   * Required. The entity holding the permission. Can be one of:
   * * `user-`*userId*
   * * `user-`*emailAddress*
   * * `group-`*groupId*
   * * `group-`*emailAddress*
   * * `allUsers`
   * * `allAuthenticatedUsers`
   */
  entity: string;
  /** A set of parameters common to all Storage API requests. */
  commonRequestParams: CommonRequestParams | undefined;
}

/** Request message for InsertDefaultObjectAccessControl. */
export interface InsertDefaultObjectAccessControlRequest {
  /** Required. Name of a bucket. */
  bucket: string;
  /** Properties of the object access control being inserted. */
  objectAccessControl:
    | ObjectAccessControl
    | undefined;
  /** A set of parameters common to all Storage API requests. */
  commonRequestParams: CommonRequestParams | undefined;
}

/** Request message for ListDefaultObjectAccessControls. */
export interface ListDefaultObjectAccessControlsRequest {
  /** Required. Name of a bucket. */
  bucket: string;
  /**
   * If present, only return default ACL listing if the bucket's current
   * metageneration matches this value.
   */
  ifMetagenerationMatch:
    | Long
    | undefined;
  /**
   * If present, only return default ACL listing if the bucket's current
   * metageneration does not match the given value.
   */
  ifMetagenerationNotMatch:
    | Long
    | undefined;
  /** A set of parameters common to all Storage API requests. */
  commonRequestParams: CommonRequestParams | undefined;
}

/** Request message for PatchDefaultObjectAccessControl. */
export interface PatchDefaultObjectAccessControlRequest {
  /** Required. Name of a bucket. */
  bucket: string;
  /**
   * Required. The entity holding the permission. Can be one of:
   * * `user-`*userId*
   * * `user-`*emailAddress*
   * * `group-`*groupId*
   * * `group-`*emailAddress*
   * * `allUsers`
   * * `allAuthenticatedUsers`
   */
  entity: string;
  /** The ObjectAccessControl for updating. */
  objectAccessControl:
    | ObjectAccessControl
    | undefined;
  /**
   * List of fields to be updated.
   *
   * To specify ALL fields, equivalent to the JSON API's "update" function,
   * specify a single field with the value `*`. Note: not recommended. If a new
   * field is introduced at a later time, an older client updating with the `*`
   * may accidentally reset the new field's value.
   *
   * Not specifying any fields is an error.
   * Not specifying a field while setting that field to a non-default value is
   * an error.
   */
  updateMask:
    | string[]
    | undefined;
  /** A set of parameters common to all Storage API requests. */
  commonRequestParams: CommonRequestParams | undefined;
}

/** Request message for UpdateDefaultObjectAccessControl. */
export interface UpdateDefaultObjectAccessControlRequest {
  /** Required. Name of a bucket. */
  bucket: string;
  /**
   * Required. The entity holding the permission. Can be one of:
   * * `user-`*userId*
   * * `user-`*emailAddress*
   * * `group-`*groupId*
   * * `group-`*emailAddress*
   * * `allUsers`
   * * `allAuthenticatedUsers`
   */
  entity: string;
  /** The ObjectAccessControl for updating. */
  objectAccessControl:
    | ObjectAccessControl
    | undefined;
  /** A set of parameters common to all Storage API requests. */
  commonRequestParams: CommonRequestParams | undefined;
}

/** Request message for DeleteNotification. */
export interface DeleteNotificationRequest {
  /** Required. The parent bucket of the notification. */
  bucket: string;
  /** Required. ID of the notification to delete. */
  notification: string;
  /** A set of parameters common to all Storage API requests. */
  commonRequestParams: CommonRequestParams | undefined;
}

/** Request message for GetNotification. */
export interface GetNotificationRequest {
  /** Required. The parent bucket of the notification. */
  bucket: string;
  /**
   * Required. Notification ID.
   * Required.
   */
  notification: string;
  /** A set of parameters common to all Storage API requests. */
  commonRequestParams: CommonRequestParams | undefined;
}

/** Request message for InsertNotification. */
export interface InsertNotificationRequest {
  /** Required. The parent bucket of the notification. */
  bucket: string;
  /** Properties of the notification to be inserted. */
  notification:
    | Notification
    | undefined;
  /** A set of parameters common to all Storage API requests. */
  commonRequestParams: CommonRequestParams | undefined;
}

/** Request message for ListNotifications. */
export interface ListNotificationsRequest {
  /** Required. Name of a Google Cloud Storage bucket. */
  bucket: string;
  /** A set of parameters common to all Storage API requests. */
  commonRequestParams: CommonRequestParams | undefined;
}

/** Request message for DeleteObjectAccessControl. */
export interface DeleteObjectAccessControlRequest {
  /** Required. Name of a bucket. */
  bucket: string;
  /**
   * Required. The entity holding the permission. Can be one of:
   * * `user-`*userId*
   * * `user-`*emailAddress*
   * * `group-`*groupId*
   * * `group-`*emailAddress*
   * * `allUsers`
   * * `allAuthenticatedUsers`
   */
  entity: string;
  /** Required. Name of the object. */
  object: string;
  /**
   * If present, selects a specific revision of this object (as opposed to the
   * latest version, the default).
   */
  generation: Long;
  /** A set of parameters common to all Storage API requests. */
  commonRequestParams: CommonRequestParams | undefined;
}

/** Request message for GetObjectAccessControl. */
export interface GetObjectAccessControlRequest {
  /** Required. Name of a bucket. */
  bucket: string;
  /**
   * Required. The entity holding the permission. Can be one of:
   * * `user-`*userId*
   * * `user-`*emailAddress*
   * * `group-`*groupId*
   * * `group-`*emailAddress*
   * * `allUsers`
   * * `allAuthenticatedUsers`
   */
  entity: string;
  /** Required. Name of the object. */
  object: string;
  /**
   * If present, selects a specific revision of this object (as opposed to the
   * latest version, the default).
   */
  generation: Long;
  /** A set of parameters common to all Storage API requests. */
  commonRequestParams: CommonRequestParams | undefined;
}

/** Request message for InsertObjectAccessControl. */
export interface InsertObjectAccessControlRequest {
  /** Required. Name of a bucket. */
  bucket: string;
  /** Required. Name of the object. */
  object: string;
  /**
   * If present, selects a specific revision of this object (as opposed to the
   * latest version, the default).
   */
  generation: Long;
  /** Properties of the object access control to be inserted. */
  objectAccessControl:
    | ObjectAccessControl
    | undefined;
  /** A set of parameters common to all Storage API requests. */
  commonRequestParams: CommonRequestParams | undefined;
}

/** Request message for ListObjectAccessControls. */
export interface ListObjectAccessControlsRequest {
  /** Required. Name of a bucket. */
  bucket: string;
  /** Required. Name of the object. */
  object: string;
  /**
   * If present, selects a specific revision of this object (as opposed to the
   * latest version, the default).
   */
  generation: Long;
  /** A set of parameters common to all Storage API requests. */
  commonRequestParams: CommonRequestParams | undefined;
}

/** Request message for PatchObjectAccessControl. */
export interface PatchObjectAccessControlRequest {
  /** Required. Name of a bucket. */
  bucket: string;
  /**
   * Required. The entity holding the permission. Can be one of:
   * * `user-`*userId*
   * * `user-`*emailAddress*
   * * `group-`*groupId*
   * * `group-`*emailAddress*
   * * `allUsers`
   * * `allAuthenticatedUsers`
   */
  entity: string;
  /**
   * Required. Name of the object.
   * Required.
   */
  object: string;
  /**
   * If present, selects a specific revision of this object (as opposed to the
   * latest version, the default).
   */
  generation: Long;
  /** The ObjectAccessControl for updating. */
  objectAccessControl:
    | ObjectAccessControl
    | undefined;
  /** A set of parameters common to all Storage API requests. */
  commonRequestParams:
    | CommonRequestParams
    | undefined;
  /**
   * List of fields to be updated.
   *
   * To specify ALL fields, equivalent to the JSON API's "update" function,
   * specify a single field with the value `*`. Note: not recommended. If a new
   * field is introduced at a later time, an older client updating with the `*`
   * may accidentally reset the new field's value.
   *
   * Not specifying any fields is an error.
   * Not specifying a field while setting that field to a non-default value is
   * an error.
   */
  updateMask: string[] | undefined;
}

/** Request message for UpdateObjectAccessControl. */
export interface UpdateObjectAccessControlRequest {
  /** Required. Name of a bucket. */
  bucket: string;
  /**
   * Required. The entity holding the permission. Can be one of:
   * * `user-`*userId*
   * * `user-`*emailAddress*
   * * `group-`*groupId*
   * * `group-`*emailAddress*
   * * `allUsers`
   * * `allAuthenticatedUsers`
   */
  entity: string;
  /**
   * Required. Name of the object.
   * Required.
   */
  object: string;
  /**
   * If present, selects a specific revision of this object (as opposed to the
   * latest version, the default).
   */
  generation: Long;
  /** The ObjectAccessControl for updating. */
  objectAccessControl:
    | ObjectAccessControl
    | undefined;
  /** A set of parameters common to all Storage API requests. */
  commonRequestParams:
    | CommonRequestParams
    | undefined;
  /**
   * List of fields to be updated.
   *
   * To specify ALL fields, equivalent to the JSON API's "update" function,
   * specify a single field with the value `*`. Note: not recommended. If a new
   * field is introduced at a later time, an older client updating with the `*`
   * may accidentally reset the new field's value.
   *
   * Not specifying any fields is an error.
   * Not specifying a field while setting that field to a non-default value is
   * an error.
   */
  updateMask: string[] | undefined;
}

/** Request message for ComposeObject. */
export interface ComposeObjectRequest {
  /**
   * Required. Name of the bucket containing the source objects. The destination object is
   * stored in this bucket.
   */
  destinationBucket: string;
  /** Required. Name of the new object. */
  destinationObject: string;
  /** Apply a predefined set of access controls to the destination object. */
  destinationPredefinedAcl: CommonEnums_PredefinedObjectAcl;
  /** Properties of the resulting object. */
  destination:
    | Object
    | undefined;
  /** The list of source objects that will be concatenated into a single object. */
  sourceObjects: ComposeObjectRequest_SourceObjects[];
  /**
   * Makes the operation conditional on whether the object's current generation
   * matches the given value. Setting to 0 makes the operation succeed only if
   * there are no live versions of the object.
   */
  ifGenerationMatch:
    | Long
    | undefined;
  /**
   * Makes the operation conditional on whether the object's current
   * metageneration matches the given value.
   */
  ifMetagenerationMatch:
    | Long
    | undefined;
  /**
   * Resource name of the Cloud KMS key, of the form
   * `projects/my-project/locations/my-location/keyRings/my-kr/cryptoKeys/my-key`,
   * that will be used to encrypt the object. Overrides the object
   * metadata's `kms_key_name` value, if any.
   */
  kmsKeyName: string;
  /** A set of parameters common to Storage API requests concerning an object. */
  commonObjectRequestParams:
    | CommonObjectRequestParams
    | undefined;
  /** A set of parameters common to all Storage API requests. */
  commonRequestParams: CommonRequestParams | undefined;
}

/** Description of a source object for a composition request. */
export interface ComposeObjectRequest_SourceObjects {
  /**
   * The source object's name. All source objects must reside in the same
   * bucket.
   */
  name: string;
  /** The generation of this object to use as the source. */
  generation: Long;
  /** Conditions that must be met for this operation to execute. */
  objectPreconditions: ComposeObjectRequest_SourceObjects_ObjectPreconditions | undefined;
}

/** Preconditions for a source object of a composition request. */
export interface ComposeObjectRequest_SourceObjects_ObjectPreconditions {
  /**
   * Only perform the composition if the generation of the source object
   * that would be used matches this value.  If this value and a generation
   * are both specified, they must be the same value or the call will fail.
   */
  ifGenerationMatch: Long | undefined;
}

/** Request message for CopyObject. */
export interface CopyObjectRequest {
  /**
   * Required. Name of the bucket in which to store the new object. Overrides the provided
   * object
   * metadata's `bucket` value, if any.
   */
  destinationBucket: string;
  /**
   * Required. Name of the new object.
   * Required when the object metadata is not otherwise provided. Overrides the
   * object metadata's `name` value, if any.
   */
  destinationObject: string;
  /** Apply a predefined set of access controls to the destination object. */
  destinationPredefinedAcl: CommonEnums_PredefinedObjectAcl;
  /**
   * Makes the operation conditional on whether the destination object's current
   * generation matches the given value. Setting to 0 makes the operation
   * succeed only if there are no live versions of the object.
   */
  ifGenerationMatch:
    | Long
    | undefined;
  /**
   * Makes the operation conditional on whether the destination object's current
   * generation does not match the given value. If no live object exists, the
   * precondition fails. Setting to 0 makes the operation succeed only if there
   * is a live version of the object.
   */
  ifGenerationNotMatch:
    | Long
    | undefined;
  /**
   * Makes the operation conditional on whether the destination object's current
   * metageneration matches the given value.
   */
  ifMetagenerationMatch:
    | Long
    | undefined;
  /**
   * Makes the operation conditional on whether the destination object's current
   * metageneration does not match the given value.
   */
  ifMetagenerationNotMatch:
    | Long
    | undefined;
  /**
   * Makes the operation conditional on whether the source object's current
   * generation matches the given value.
   */
  ifSourceGenerationMatch:
    | Long
    | undefined;
  /**
   * Makes the operation conditional on whether the source object's current
   * generation does not match the given value.
   */
  ifSourceGenerationNotMatch:
    | Long
    | undefined;
  /**
   * Makes the operation conditional on whether the source object's current
   * metageneration matches the given value.
   */
  ifSourceMetagenerationMatch:
    | Long
    | undefined;
  /**
   * Makes the operation conditional on whether the source object's current
   * metageneration does not match the given value.
   */
  ifSourceMetagenerationNotMatch:
    | Long
    | undefined;
  /**
   * Set of properties to return. Defaults to `NO_ACL`, unless the
   * object resource specifies the `acl` property, when it defaults
   * to `full`.
   */
  projection: CommonEnums_Projection;
  /** Required. Name of the bucket in which to find the source object. */
  sourceBucket: string;
  /** Required. Name of the source object. */
  sourceObject: string;
  /**
   * If present, selects a specific revision of the source object (as opposed to
   * the latest version, the default).
   */
  sourceGeneration: Long;
  /**
   * Properties of the resulting object. If not set, duplicate properties of
   * source object.
   */
  destination:
    | Object
    | undefined;
  /**
   * Resource name of the Cloud KMS key, of the form
   * `projects/my-project/locations/my-location/keyRings/my-kr/cryptoKeys/my-key`,
   * that will be used to encrypt the object. Overrides the object
   * metadata's `kms_key_name` value, if any.
   */
  destinationKmsKeyName: string;
  /** A set of parameters common to Storage API requests concerning an object. */
  commonObjectRequestParams:
    | CommonObjectRequestParams
    | undefined;
  /** A set of parameters common to all Storage API requests. */
  commonRequestParams: CommonRequestParams | undefined;
}

/**
 * Message for deleting an object.
 * Either `bucket` and `object` *or* `upload_id` **must** be set (but not both).
 */
export interface DeleteObjectRequest {
  /** Required. Name of the bucket in which the object resides. */
  bucket: string;
  /** Required. The name of the object to delete (when not using a resumable write). */
  object: string;
  /**
   * The resumable upload_id of the object to delete (when using a
   * resumable write). This should be copied from the `upload_id` field of
   * `StartResumableWriteResponse`.
   */
  uploadId: string;
  /**
   * If present, permanently deletes a specific revision of this object (as
   * opposed to the latest version, the default).
   */
  generation: Long;
  /**
   * Makes the operation conditional on whether the object's current generation
   * matches the given value. Setting to 0 makes the operation succeed only if
   * there are no live versions of the object.
   */
  ifGenerationMatch:
    | Long
    | undefined;
  /**
   * Makes the operation conditional on whether the object's current generation
   * does not match the given value. If no live object exists, the precondition
   * fails. Setting to 0 makes the operation succeed only if there is a live
   * version of the object.
   */
  ifGenerationNotMatch:
    | Long
    | undefined;
  /**
   * Makes the operation conditional on whether the object's current
   * metageneration matches the given value.
   */
  ifMetagenerationMatch:
    | Long
    | undefined;
  /**
   * Makes the operation conditional on whether the object's current
   * metageneration does not match the given value.
   */
  ifMetagenerationNotMatch:
    | Long
    | undefined;
  /** A set of parameters common to Storage API requests concerning an object. */
  commonObjectRequestParams:
    | CommonObjectRequestParams
    | undefined;
  /** A set of parameters common to all Storage API requests. */
  commonRequestParams: CommonRequestParams | undefined;
}

/** Request message for GetObjectMedia. */
export interface GetObjectMediaRequest {
  /** The name of the bucket containing the object to read. */
  bucket: string;
  /** The name of the object to read. */
  object: string;
  /**
   * If present, selects a specific revision of this object (as opposed
   * to the latest version, the default).
   */
  generation: Long;
  /**
   * The offset for the first byte to return in the read, relative to the start
   * of the object.
   *
   * A negative `read_offset` value will be interpreted as the number of bytes
   * back from the end of the object to be returned. For example, if an object's
   * length is 15 bytes, a GetObjectMediaRequest with `read_offset` = -5 and
   * `read_limit` = 3 would return bytes 10 through 12 of the object. Requesting
   * a negative offset whose magnitude is larger than the size of the object
   * will result in an error.
   */
  readOffset: Long;
  /**
   * The maximum number of `data` bytes the server is allowed to return in the
   * sum of all `Object` messages. A `read_limit` of zero indicates that there
   * is no limit, and a negative `read_limit` will cause an error.
   *
   * If the stream returns fewer bytes than allowed by the `read_limit` and no
   * error occurred, the stream includes all data from the `read_offset` to the
   * end of the resource.
   */
  readLimit: Long;
  /**
   * Makes the operation conditional on whether the object's current generation
   * matches the given value. Setting to 0 makes the operation succeed only if
   * there are no live versions of the object.
   */
  ifGenerationMatch:
    | Long
    | undefined;
  /**
   * Makes the operation conditional on whether the object's current generation
   * does not match the given value. If no live object exists, the precondition
   * fails. Setting to 0 makes the operation succeed only if there is a live
   * version of the object.
   */
  ifGenerationNotMatch:
    | Long
    | undefined;
  /**
   * Makes the operation conditional on whether the object's current
   * metageneration matches the given value.
   */
  ifMetagenerationMatch:
    | Long
    | undefined;
  /**
   * Makes the operation conditional on whether the object's current
   * metageneration does not match the given value.
   */
  ifMetagenerationNotMatch:
    | Long
    | undefined;
  /** A set of parameters common to Storage API requests concerning an object. */
  commonObjectRequestParams:
    | CommonObjectRequestParams
    | undefined;
  /** A set of parameters common to all Storage API requests. */
  commonRequestParams: CommonRequestParams | undefined;
}

/** Request message for GetObject. */
export interface GetObjectRequest {
  /** Required. Name of the bucket in which the object resides. */
  bucket: string;
  /** Required. Name of the object. */
  object: string;
  /**
   * If present, selects a specific revision of this object (as opposed to the
   * latest version, the default).
   */
  generation: Long;
  /**
   * Makes the operation conditional on whether the object's current generation
   * matches the given value. Setting to 0 makes the operation succeed only if
   * there are no live versions of the object.
   */
  ifGenerationMatch:
    | Long
    | undefined;
  /**
   * Makes the operation conditional on whether the object's current generation
   * does not match the given value. If no live object exists, the precondition
   * fails. Setting to 0 makes the operation succeed only if there is a live
   * version of the object.
   */
  ifGenerationNotMatch:
    | Long
    | undefined;
  /**
   * Makes the operation conditional on whether the object's current
   * metageneration matches the given value.
   */
  ifMetagenerationMatch:
    | Long
    | undefined;
  /**
   * Makes the operation conditional on whether the object's current
   * metageneration does not match the given value.
   */
  ifMetagenerationNotMatch:
    | Long
    | undefined;
  /** Set of properties to return. Defaults to `NO_ACL`. */
  projection: CommonEnums_Projection;
  /** A set of parameters common to Storage API requests concerning an object. */
  commonObjectRequestParams:
    | CommonObjectRequestParams
    | undefined;
  /** A set of parameters common to all Storage API requests. */
  commonRequestParams: CommonRequestParams | undefined;
}

/** Response message for GetObject. */
export interface GetObjectMediaResponse {
  /**
   * A portion of the data for the object. The service **may** leave `data`
   * empty for any given `ReadResponse`. This enables the service to inform the
   * client that the request is still live while it is running an operation to
   * generate more data.
   */
  checksummedData:
    | ChecksummedData
    | undefined;
  /**
   * The checksums of the complete object. The client should compute one of
   * these checksums over the downloaded object and compare it against the value
   * provided here.
   */
  objectChecksums:
    | ObjectChecksums
    | undefined;
  /**
   * If read_offset and or read_limit was specified on the
   * GetObjectMediaRequest, ContentRange will be populated on the first
   * GetObjectMediaResponse message of the read stream.
   */
  contentRange:
    | ContentRange
    | undefined;
  /**
   * Metadata of the object whose media is being returned.
   * Only populated in the first response in the stream.
   */
  metadata: Object | undefined;
}

/** Describes an attempt to insert an object, possibly over multiple requests. */
export interface InsertObjectSpec {
  /** Destination object, including its name and its metadata. */
  resource:
    | Object
    | undefined;
  /** Apply a predefined set of access controls to this object. */
  predefinedAcl: CommonEnums_PredefinedObjectAcl;
  /**
   * Makes the operation conditional on whether the object's current
   * generation matches the given value. Setting to 0 makes the operation
   * succeed only if there are no live versions of the object.
   */
  ifGenerationMatch:
    | Long
    | undefined;
  /**
   * Makes the operation conditional on whether the object's current
   * generation does not match the given value. If no live object exists, the
   * precondition fails. Setting to 0 makes the operation succeed only if
   * there is a live version of the object.
   */
  ifGenerationNotMatch:
    | Long
    | undefined;
  /**
   * Makes the operation conditional on whether the object's current
   * metageneration matches the given value.
   */
  ifMetagenerationMatch:
    | Long
    | undefined;
  /**
   * Makes the operation conditional on whether the object's current
   * metageneration does not match the given value.
   */
  ifMetagenerationNotMatch:
    | Long
    | undefined;
  /**
   * Set of properties to return. Defaults to `NO_ACL`, unless the
   * object resource specifies the `acl` property, when it defaults
   * to `full`.
   */
  projection: CommonEnums_Projection;
}

/** Message for writing an object. */
export interface InsertObjectRequest {
  /**
   * For resumable uploads. This should be the `upload_id` returned from a
   * call to `StartResumableWriteResponse`.
   */
  uploadId?:
    | string
    | undefined;
  /**
   * For non-resumable uploads. Describes the overall upload, including the
   * destination bucket and object name, preconditions, etc.
   */
  insertObjectSpec?:
    | InsertObjectSpec
    | undefined;
  /**
   * Required. The offset from the beginning of the object at which the data should be
   * written.
   *
   * In the first `InsertObjectRequest` of a `InsertObject()` action, it
   * indicates the initial offset for the `Insert()` call. The value **must** be
   * equal to the `committed_size` that a call to `QueryWriteStatus()` would
   * return (0 if this is the first write to the object).
   *
   * On subsequent calls, this value **must** be no larger than the sum of the
   * first `write_offset` and the sizes of all `data` chunks sent previously on
   * this stream.
   *
   * An incorrect value will cause an error.
   */
  writeOffset: Long;
  /**
   * The data to insert. If a crc32c checksum is provided that doesn't match
   * the checksum computed by the service, the request will fail.
   */
  checksummedData?:
    | ChecksummedData
    | undefined;
  /**
   * A reference to an existing object. This can be used to support
   * several use cases:
   *   - Writing a sequence of data buffers supports the basic use case of
   *     uploading a complete object, chunk by chunk.
   *   - Writing a sequence of references to existing objects allows an
   *     object to be composed from a collection of objects, which can be
   *     used to support parallel object writes.
   *   - Writing a single reference with a given offset and size can be used
   *     to create an object from a slice of an existing object.
   *   - Writing an object referencing a object slice (created as noted
   *     above) followed by a data buffer followed by another object
   *     slice can be used to support delta upload functionality.
   */
  reference?:
    | GetObjectMediaRequest
    | undefined;
  /**
   * Checksums for the complete object. If the checksums computed by the service
   * don't match the specifified checksums the call will fail. May only be
   * provided in the first or last request (either with first_message, or
   * finish_write set).
   */
  objectChecksums:
    | ObjectChecksums
    | undefined;
  /**
   * If `true`, this indicates that the write is complete. Sending any
   * `InsertObjectRequest`s subsequent to one in which `finish_write` is `true`
   * will cause an error.
   * For a non-resumable write (where the upload_id was not set in the first
   * message), it is an error not to set this field in the final message of the
   * stream.
   */
  finishWrite: boolean;
  /** A set of parameters common to Storage API requests concerning an object. */
  commonObjectRequestParams:
    | CommonObjectRequestParams
    | undefined;
  /** A set of parameters common to all Storage API requests. */
  commonRequestParams: CommonRequestParams | undefined;
}

/** Request message for ListObjects. */
export interface ListObjectsRequest {
  /** Required. Name of the bucket in which to look for objects. */
  bucket: string;
  /**
   * Returns results in a directory-like mode. `items` will contain
   * only objects whose names, aside from the `prefix`, do not
   * contain `delimiter`. Objects whose names, aside from the
   * `prefix`, contain `delimiter` will have their name,
   * truncated after the `delimiter`, returned in
   * `prefixes`. Duplicate `prefixes` are omitted.
   */
  delimiter: string;
  /**
   * If true, objects that end in exactly one instance of `delimiter`
   * will have their metadata included in `items` in addition to
   * `prefixes`.
   */
  includeTrailingDelimiter: boolean;
  /**
   * Maximum number of `items` plus `prefixes` to return
   * in a single page of responses. As duplicate `prefixes` are
   * omitted, fewer total results may be returned than requested. The service
   * will use this parameter or 1,000 items, whichever is smaller.
   */
  maxResults: number;
  /**
   * A previously-returned page token representing part of the larger set of
   * results to view.
   */
  pageToken: string;
  /** Filter results to objects whose names begin with this prefix. */
  prefix: string;
  /** Set of properties to return. Defaults to `NO_ACL`. */
  projection: CommonEnums_Projection;
  /**
   * If `true`, lists all versions of an object as distinct results.
   * The default is `false`. For more information, see
   * [Object
   * Versioning](https://cloud.google.com/storage/docs/object-versioning).
   */
  versions: boolean;
  /**
   * Filter results to objects whose names are lexicographically equal to or
   * after lexicographic_start. If lexicographic_end is also set, the objects
   * listed have names between lexicographic_start (inclusive) and
   * lexicographic_end (exclusive).
   */
  lexicographicStart: string;
  /**
   * Filter results to objects whose names are lexicographically before
   * lexicographic_end. If lexicographic_start is also set, the objects listed
   * have names between lexicographic_start (inclusive) and lexicographic_end
   * (exclusive).
   */
  lexicographicEnd: string;
  /** A set of parameters common to all Storage API requests. */
  commonRequestParams: CommonRequestParams | undefined;
}

/** Request object for `QueryWriteStatus`. */
export interface QueryWriteStatusRequest {
  /**
   * Required. The name of the resume token for the object whose write status is being
   * requested.
   */
  uploadId: string;
  /** A set of parameters common to Storage API requests concerning an object. */
  commonObjectRequestParams:
    | CommonObjectRequestParams
    | undefined;
  /** A set of parameters common to all Storage API requests. */
  commonRequestParams: CommonRequestParams | undefined;
}

/** Response object for `QueryWriteStatus`. */
export interface QueryWriteStatusResponse {
  /** The number of bytes that have been processed for the given object. */
  committedSize: Long;
  /**
   * `complete` is `true` only if the client has sent a `InsertObjectRequest`
   * with `finish_write` set to true, and the server has processed that request.
   */
  complete: boolean;
  /** The metadata for the uploaded object. Only set if `complete` is `true`. */
  resource: Object | undefined;
}

/** Request message for RewriteObject. */
export interface RewriteObjectRequest {
  /**
   * Required. Name of the bucket in which to store the new object. Overrides the provided
   * object metadata's `bucket` value, if any.
   */
  destinationBucket: string;
  /**
   * Required. Name of the new object.
   * Required when the object metadata is not otherwise provided. Overrides the
   * object metadata's `name` value, if any.
   */
  destinationObject: string;
  /**
   * Resource name of the Cloud KMS key, of the form
   * `projects/my-project/locations/my-location/keyRings/my-kr/cryptoKeys/my-key`,
   * that will be used to encrypt the object. Overrides the object
   * metadata's `kms_key_name` value, if any.
   */
  destinationKmsKeyName: string;
  /** Apply a predefined set of access controls to the destination object. */
  destinationPredefinedAcl: CommonEnums_PredefinedObjectAcl;
  /**
   * Makes the operation conditional on whether the object's current generation
   * matches the given value. Setting to 0 makes the operation succeed only if
   * there are no live versions of the object.
   */
  ifGenerationMatch:
    | Long
    | undefined;
  /**
   * Makes the operation conditional on whether the object's current generation
   * does not match the given value. If no live object exists, the precondition
   * fails. Setting to 0 makes the operation succeed only if there is a live
   * version of the object.
   */
  ifGenerationNotMatch:
    | Long
    | undefined;
  /**
   * Makes the operation conditional on whether the destination object's current
   * metageneration matches the given value.
   */
  ifMetagenerationMatch:
    | Long
    | undefined;
  /**
   * Makes the operation conditional on whether the destination object's current
   * metageneration does not match the given value.
   */
  ifMetagenerationNotMatch:
    | Long
    | undefined;
  /**
   * Makes the operation conditional on whether the source object's current
   * generation matches the given value.
   */
  ifSourceGenerationMatch:
    | Long
    | undefined;
  /**
   * Makes the operation conditional on whether the source object's current
   * generation does not match the given value.
   */
  ifSourceGenerationNotMatch:
    | Long
    | undefined;
  /**
   * Makes the operation conditional on whether the source object's current
   * metageneration matches the given value.
   */
  ifSourceMetagenerationMatch:
    | Long
    | undefined;
  /**
   * Makes the operation conditional on whether the source object's current
   * metageneration does not match the given value.
   */
  ifSourceMetagenerationNotMatch:
    | Long
    | undefined;
  /**
   * The maximum number of bytes that will be rewritten per rewrite request.
   * Most callers
   * shouldn't need to specify this parameter - it is primarily in place to
   * support testing. If specified the value must be an integral multiple of
   * 1 MiB (1048576). Also, this only applies to requests where the source and
   * destination span locations and/or storage classes. Finally, this value must
   * not change across rewrite calls else you'll get an error that the
   * `rewriteToken` is invalid.
   */
  maxBytesRewrittenPerCall: Long;
  /**
   * Set of properties to return. Defaults to `NO_ACL`, unless the
   * object resource specifies the `acl` property, when it defaults
   * to `full`.
   */
  projection: CommonEnums_Projection;
  /**
   * Include this field (from the previous rewrite response) on each rewrite
   * request after the first one, until the rewrite response 'done' flag is
   * true. Calls that provide a rewriteToken can omit all other request fields,
   * but if included those fields must match the values provided in the first
   * rewrite request.
   */
  rewriteToken: string;
  /** Required. Name of the bucket in which to find the source object. */
  sourceBucket: string;
  /** Required. Name of the source object. */
  sourceObject: string;
  /**
   * If present, selects a specific revision of the source object (as opposed to
   * the latest version, the default).
   */
  sourceGeneration: Long;
  /** Properties of the destination, post-rewrite object. */
  object:
    | Object
    | undefined;
  /** The algorithm used to encrypt the source object, if any. */
  copySourceEncryptionAlgorithm: string;
  /** The encryption key used to encrypt the source object, if any. */
  copySourceEncryptionKey: string;
  /** The SHA-256 hash of the key used to encrypt the source object, if any. */
  copySourceEncryptionKeySha256: string;
  /** A set of parameters common to Storage API requests concerning an object. */
  commonObjectRequestParams:
    | CommonObjectRequestParams
    | undefined;
  /** A set of parameters common to all Storage API requests. */
  commonRequestParams: CommonRequestParams | undefined;
}

/** A rewrite response. */
export interface RewriteResponse {
  /**
   * The total bytes written so far, which can be used to provide a waiting user
   * with a progress indicator. This property is always present in the response.
   */
  totalBytesRewritten: Long;
  /**
   * The total size of the object being copied in bytes. This property is always
   * present in the response.
   */
  objectSize: Long;
  /**
   * `true` if the copy is finished; otherwise, `false` if
   * the copy is in progress. This property is always present in the response.
   */
  done: boolean;
  /**
   * A token to use in subsequent requests to continue copying data. This token
   * is present in the response only when there is more data to copy.
   */
  rewriteToken: string;
  /**
   * A resource containing the metadata for the copied-to object. This property
   * is present in the response only when copying completes.
   */
  resource: Object | undefined;
}

/** Request message StartResumableWrite. */
export interface StartResumableWriteRequest {
  /** The destination bucket, object, and metadata, as well as any preconditions. */
  insertObjectSpec:
    | InsertObjectSpec
    | undefined;
  /** A set of parameters common to Storage API requests concerning an object. */
  commonObjectRequestParams:
    | CommonObjectRequestParams
    | undefined;
  /** A set of parameters common to all Storage API requests. */
  commonRequestParams: CommonRequestParams | undefined;
}

/** Response object for `StartResumableWrite`. */
export interface StartResumableWriteResponse {
  /**
   * The upload_id of the newly started resumable write operation. This
   * value should be copied into the `InsertObjectRequest.upload_id` field.
   */
  uploadId: string;
}

/** Request message for PatchObject. */
export interface PatchObjectRequest {
  /** Required. Name of the bucket in which the object resides. */
  bucket: string;
  /** Required. Name of the object. */
  object: string;
  /**
   * If present, selects a specific revision of this object (as opposed to the
   * latest version, the default).
   */
  generation: Long;
  /**
   * Makes the operation conditional on whether the object's current generation
   * matches the given value. Setting to 0 makes the operation succeed only if
   * there are no live versions of the object.
   */
  ifGenerationMatch:
    | Long
    | undefined;
  /**
   * Makes the operation conditional on whether the object's current generation
   * does not match the given value. If no live object exists, the precondition
   * fails. Setting to 0 makes the operation succeed only if there is a live
   * version of the object.
   */
  ifGenerationNotMatch:
    | Long
    | undefined;
  /**
   * Makes the operation conditional on whether the object's current
   * metageneration matches the given value.
   */
  ifMetagenerationMatch:
    | Long
    | undefined;
  /**
   * Makes the operation conditional on whether the object's current
   * metageneration does not match the given value.
   */
  ifMetagenerationNotMatch:
    | Long
    | undefined;
  /** Apply a predefined set of access controls to this object. */
  predefinedAcl: CommonEnums_PredefinedObjectAcl;
  /** Set of properties to return. Defaults to `FULL`. */
  projection: CommonEnums_Projection;
  /** The Object metadata for updating. */
  metadata:
    | Object
    | undefined;
  /**
   * List of fields to be updated.
   *
   * To specify ALL fields, equivalent to the JSON API's "update" function,
   * specify a single field with the value `*`. Note: not recommended. If a new
   * field is introduced at a later time, an older client updating with the `*`
   * may accidentally reset the new field's value.
   *
   * Not specifying any fields is an error.
   * Not specifying a field while setting that field to a non-default value is
   * an error.
   */
  updateMask:
    | string[]
    | undefined;
  /** A set of parameters common to Storage API requests concerning an object. */
  commonObjectRequestParams:
    | CommonObjectRequestParams
    | undefined;
  /** A set of parameters common to all Storage API requests. */
  commonRequestParams: CommonRequestParams | undefined;
}

/** Request message for UpdateObject. */
export interface UpdateObjectRequest {
  /** Required. Name of the bucket in which the object resides. */
  bucket: string;
  /** Required. Name of the object. */
  object: string;
  /**
   * If present, selects a specific revision of this object (as opposed to the
   * latest version, the default).
   */
  generation: Long;
  /**
   * Makes the operation conditional on whether the object's current generation
   * matches the given value. Setting to 0 makes the operation succeed only if
   * there are no live versions of the object.
   */
  ifGenerationMatch:
    | Long
    | undefined;
  /**
   * Makes the operation conditional on whether the object's current generation
   * does not match the given value. If no live object exists, the precondition
   * fails. Setting to 0 makes the operation succeed only if there is a live
   * version of the object.
   */
  ifGenerationNotMatch:
    | Long
    | undefined;
  /**
   * Makes the operation conditional on whether the object's current
   * metageneration matches the given value.
   */
  ifMetagenerationMatch:
    | Long
    | undefined;
  /**
   * Makes the operation conditional on whether the object's current
   * metageneration does not match the given value.
   */
  ifMetagenerationNotMatch:
    | Long
    | undefined;
  /** Apply a predefined set of access controls to this object. */
  predefinedAcl: CommonEnums_PredefinedObjectAcl;
  /** Set of properties to return. Defaults to `FULL`. */
  projection: CommonEnums_Projection;
  /** The Object metadata for updating. */
  metadata:
    | Object
    | undefined;
  /** A set of parameters common to Storage API requests concerning an object. */
  commonObjectRequestParams:
    | CommonObjectRequestParams
    | undefined;
  /** A set of parameters common to all Storage API requests. */
  commonRequestParams: CommonRequestParams | undefined;
}

/** Request message for WatchAllObjects. */
export interface WatchAllObjectsRequest {
  /** Name of the bucket in which to look for objects. */
  bucket: string;
  /**
   * If `true`, lists all versions of an object as distinct results.
   * The default is `false`. For more information, see
   * [Object
   * Versioning](https://cloud.google.com/storage/docs/object-versioning).
   */
  versions: boolean;
  /**
   * Returns results in a directory-like mode. `items` will contain
   * only objects whose names, aside from the `prefix`, do not
   * contain `delimiter`. Objects whose names, aside from the
   * `prefix`, contain `delimiter` will have their name,
   * truncated after the `delimiter`, returned in
   * `prefixes`. Duplicate `prefixes` are omitted.
   */
  delimiter: string;
  /**
   * Maximum number of `items` plus `prefixes` to return
   * in a single page of responses. As duplicate `prefixes` are
   * omitted, fewer total results may be returned than requested. The service
   * will use this parameter or 1,000 items, whichever is smaller.
   */
  maxResults: number;
  /** Filter results to objects whose names begin with this prefix. */
  prefix: string;
  /**
   * If true, objects that end in exactly one instance of `delimiter`
   * will have their metadata included in `items` in addition to
   * `prefixes`.
   */
  includeTrailingDelimiter: boolean;
  /**
   * A previously-returned page token representing part of the larger set of
   * results to view.
   */
  pageToken: string;
  /** Set of properties to return. Defaults to `NO_ACL`. */
  projection: CommonEnums_Projection;
  /** Properties of the channel to be inserted. */
  channel:
    | Channel
    | undefined;
  /** A set of parameters common to all Storage API requests. */
  commonRequestParams: CommonRequestParams | undefined;
}

/** Request message for GetProjectServiceAccount. */
export interface GetProjectServiceAccountRequest {
  /** Required. Project ID. */
  projectId: string;
  /** A set of parameters common to all Storage API requests. */
  commonRequestParams: CommonRequestParams | undefined;
}

export interface CreateHmacKeyRequest {
  /** Required. The project that the HMAC-owning service account lives in. */
  projectId: string;
  /** Required. The service account to create the HMAC for. */
  serviceAccountEmail: string;
  /** A set of parameters common to all Storage API requests. */
  commonRequestParams: CommonRequestParams | undefined;
}

/** Create hmac response.  The only time the secret for an HMAC will be returned. */
export interface CreateHmacKeyResponse {
  /** Key metadata. */
  metadata:
    | HmacKeyMetadata
    | undefined;
  /** HMAC key secret material. */
  secret: string;
}

/** Request object to delete a given HMAC key. */
export interface DeleteHmacKeyRequest {
  /** Required. The identifying key for the HMAC to delete. */
  accessId: string;
  /** Required. The project id the HMAC key lies in. */
  projectId: string;
  /** A set of parameters common to all Storage API requests. */
  commonRequestParams: CommonRequestParams | undefined;
}

/** Request object to get metadata on a given HMAC key. */
export interface GetHmacKeyRequest {
  /** Required. The identifying key for the HMAC to delete. */
  accessId: string;
  /** Required. The project id the HMAC key lies in. */
  projectId: string;
  /** A set of parameters common to all Storage API requests. */
  commonRequestParams: CommonRequestParams | undefined;
}

/** Request to fetch a list of HMAC keys under a given project. */
export interface ListHmacKeysRequest {
  /** Required. The project id to list HMAC keys for. */
  projectId: string;
  /** An optional filter to only return HMAC keys for one service account. */
  serviceAccountEmail: string;
  /** An optional bool to return deleted keys that have not been wiped out yet. */
  showDeletedKeys: boolean;
  /** The maximum number of keys to return. */
  maxResults: number;
  /** A previously returned token from ListHmacKeysResponse to get the next page. */
  pageToken: string;
  /** A set of parameters common to all Storage API requests. */
  commonRequestParams: CommonRequestParams | undefined;
}

/** Hmac key list response with next page information. */
export interface ListHmacKeysResponse {
  /**
   * The continuation token, used to page through large result sets. Provide
   * this value in a subsequent request to return the next page of results.
   */
  nextPageToken: string;
  /** The list of items. */
  items: HmacKeyMetadata[];
}

/** Request object to update an HMAC key state. */
export interface UpdateHmacKeyRequest {
  /** Required. The id of the HMAC key. */
  accessId: string;
  /** Required. The project id the HMAC's service account lies in. */
  projectId: string;
  /** Required. The service account owner of the HMAC key. */
  metadata:
    | HmacKeyMetadata
    | undefined;
  /** A set of parameters common to all Storage API requests. */
  commonRequestParams: CommonRequestParams | undefined;
}

/**
 * A wrapper around the IAM get policy request to support our
 * common_request_params.
 */
export interface GetIamPolicyRequest {
  /** The request sent to IAM. */
  iamRequest:
    | GetIamPolicyRequest1
    | undefined;
  /** A set of parameters common to all Storage API requests. */
  commonRequestParams: CommonRequestParams | undefined;
}

/**
 * A wrapper around the IAM set policy request to support our
 * common_request_params.
 */
export interface SetIamPolicyRequest {
  /** The request sent to IAM. */
  iamRequest:
    | SetIamPolicyRequest2
    | undefined;
  /** A set of parameters common to all Storage API requests. */
  commonRequestParams: CommonRequestParams | undefined;
}

/**
 * A wrapper around the IAM test iam permissions request to support our
 * common_request_params.
 */
export interface TestIamPermissionsRequest {
  /** The request sent to IAM. */
  iamRequest:
    | TestIamPermissionsRequest3
    | undefined;
  /** A set of parameters common to all Storage API requests. */
  commonRequestParams: CommonRequestParams | undefined;
}

/** Parameters that can be passed to any object request. */
export interface CommonObjectRequestParams {
  /** Encryption algorithm used with Customer-Supplied Encryption Keys feature. */
  encryptionAlgorithm: string;
  /** Encryption key used with Customer-Supplied Encryption Keys feature. */
  encryptionKey: string;
  /**
   * SHA256 hash of encryption key used with Customer-Supplied Encryption Keys
   * feature.
   */
  encryptionKeySha256: string;
}

/** Parameters that can be passed to any request. */
export interface CommonRequestParams {
  /** Required. Required when using buckets with Requestor Pays feature enabled. */
  userProject: string;
  /**
   * Lets you enforce per-user quotas from a server-side application even in
   * cases when the user's IP address is unknown. This can occur, for example,
   * with applications that run cron jobs on App Engine on a user's behalf.
   * You can choose any arbitrary string that uniquely identifies a user, but it
   * is limited to 40 characters.
   */
  quotaUser: string;
  /** Subset of fields to include in the response. */
  fields: string[] | undefined;
}

function createBaseDeleteBucketAccessControlRequest(): DeleteBucketAccessControlRequest {
  return { bucket: "", entity: "", commonRequestParams: undefined };
}

export const DeleteBucketAccessControlRequest: MessageFns<DeleteBucketAccessControlRequest> = {
  encode(message: DeleteBucketAccessControlRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.bucket !== "") {
      writer.uint32(10).string(message.bucket);
    }
    if (message.entity !== "") {
      writer.uint32(18).string(message.entity);
    }
    if (message.commonRequestParams !== undefined) {
      CommonRequestParams.encode(message.commonRequestParams, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteBucketAccessControlRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteBucketAccessControlRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.bucket = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.entity = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.commonRequestParams = CommonRequestParams.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteBucketAccessControlRequest {
    return {
      bucket: isSet(object.bucket) ? globalThis.String(object.bucket) : "",
      entity: isSet(object.entity) ? globalThis.String(object.entity) : "",
      commonRequestParams: isSet(object.commonRequestParams)
        ? CommonRequestParams.fromJSON(object.commonRequestParams)
        : undefined,
    };
  },

  toJSON(message: DeleteBucketAccessControlRequest): unknown {
    const obj: any = {};
    if (message.bucket !== "") {
      obj.bucket = message.bucket;
    }
    if (message.entity !== "") {
      obj.entity = message.entity;
    }
    if (message.commonRequestParams !== undefined) {
      obj.commonRequestParams = CommonRequestParams.toJSON(message.commonRequestParams);
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteBucketAccessControlRequest>): DeleteBucketAccessControlRequest {
    return DeleteBucketAccessControlRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteBucketAccessControlRequest>): DeleteBucketAccessControlRequest {
    const message = createBaseDeleteBucketAccessControlRequest();
    message.bucket = object.bucket ?? "";
    message.entity = object.entity ?? "";
    message.commonRequestParams = (object.commonRequestParams !== undefined && object.commonRequestParams !== null)
      ? CommonRequestParams.fromPartial(object.commonRequestParams)
      : undefined;
    return message;
  },
};

function createBaseGetBucketAccessControlRequest(): GetBucketAccessControlRequest {
  return { bucket: "", entity: "", commonRequestParams: undefined };
}

export const GetBucketAccessControlRequest: MessageFns<GetBucketAccessControlRequest> = {
  encode(message: GetBucketAccessControlRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.bucket !== "") {
      writer.uint32(10).string(message.bucket);
    }
    if (message.entity !== "") {
      writer.uint32(18).string(message.entity);
    }
    if (message.commonRequestParams !== undefined) {
      CommonRequestParams.encode(message.commonRequestParams, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetBucketAccessControlRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetBucketAccessControlRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.bucket = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.entity = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.commonRequestParams = CommonRequestParams.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetBucketAccessControlRequest {
    return {
      bucket: isSet(object.bucket) ? globalThis.String(object.bucket) : "",
      entity: isSet(object.entity) ? globalThis.String(object.entity) : "",
      commonRequestParams: isSet(object.commonRequestParams)
        ? CommonRequestParams.fromJSON(object.commonRequestParams)
        : undefined,
    };
  },

  toJSON(message: GetBucketAccessControlRequest): unknown {
    const obj: any = {};
    if (message.bucket !== "") {
      obj.bucket = message.bucket;
    }
    if (message.entity !== "") {
      obj.entity = message.entity;
    }
    if (message.commonRequestParams !== undefined) {
      obj.commonRequestParams = CommonRequestParams.toJSON(message.commonRequestParams);
    }
    return obj;
  },

  create(base?: DeepPartial<GetBucketAccessControlRequest>): GetBucketAccessControlRequest {
    return GetBucketAccessControlRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetBucketAccessControlRequest>): GetBucketAccessControlRequest {
    const message = createBaseGetBucketAccessControlRequest();
    message.bucket = object.bucket ?? "";
    message.entity = object.entity ?? "";
    message.commonRequestParams = (object.commonRequestParams !== undefined && object.commonRequestParams !== null)
      ? CommonRequestParams.fromPartial(object.commonRequestParams)
      : undefined;
    return message;
  },
};

function createBaseInsertBucketAccessControlRequest(): InsertBucketAccessControlRequest {
  return { bucket: "", bucketAccessControl: undefined, commonRequestParams: undefined };
}

export const InsertBucketAccessControlRequest: MessageFns<InsertBucketAccessControlRequest> = {
  encode(message: InsertBucketAccessControlRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.bucket !== "") {
      writer.uint32(10).string(message.bucket);
    }
    if (message.bucketAccessControl !== undefined) {
      BucketAccessControl.encode(message.bucketAccessControl, writer.uint32(26).fork()).join();
    }
    if (message.commonRequestParams !== undefined) {
      CommonRequestParams.encode(message.commonRequestParams, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InsertBucketAccessControlRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInsertBucketAccessControlRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.bucket = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.bucketAccessControl = BucketAccessControl.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.commonRequestParams = CommonRequestParams.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InsertBucketAccessControlRequest {
    return {
      bucket: isSet(object.bucket) ? globalThis.String(object.bucket) : "",
      bucketAccessControl: isSet(object.bucketAccessControl)
        ? BucketAccessControl.fromJSON(object.bucketAccessControl)
        : undefined,
      commonRequestParams: isSet(object.commonRequestParams)
        ? CommonRequestParams.fromJSON(object.commonRequestParams)
        : undefined,
    };
  },

  toJSON(message: InsertBucketAccessControlRequest): unknown {
    const obj: any = {};
    if (message.bucket !== "") {
      obj.bucket = message.bucket;
    }
    if (message.bucketAccessControl !== undefined) {
      obj.bucketAccessControl = BucketAccessControl.toJSON(message.bucketAccessControl);
    }
    if (message.commonRequestParams !== undefined) {
      obj.commonRequestParams = CommonRequestParams.toJSON(message.commonRequestParams);
    }
    return obj;
  },

  create(base?: DeepPartial<InsertBucketAccessControlRequest>): InsertBucketAccessControlRequest {
    return InsertBucketAccessControlRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<InsertBucketAccessControlRequest>): InsertBucketAccessControlRequest {
    const message = createBaseInsertBucketAccessControlRequest();
    message.bucket = object.bucket ?? "";
    message.bucketAccessControl = (object.bucketAccessControl !== undefined && object.bucketAccessControl !== null)
      ? BucketAccessControl.fromPartial(object.bucketAccessControl)
      : undefined;
    message.commonRequestParams = (object.commonRequestParams !== undefined && object.commonRequestParams !== null)
      ? CommonRequestParams.fromPartial(object.commonRequestParams)
      : undefined;
    return message;
  },
};

function createBaseListBucketAccessControlsRequest(): ListBucketAccessControlsRequest {
  return { bucket: "", commonRequestParams: undefined };
}

export const ListBucketAccessControlsRequest: MessageFns<ListBucketAccessControlsRequest> = {
  encode(message: ListBucketAccessControlsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.bucket !== "") {
      writer.uint32(10).string(message.bucket);
    }
    if (message.commonRequestParams !== undefined) {
      CommonRequestParams.encode(message.commonRequestParams, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListBucketAccessControlsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListBucketAccessControlsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.bucket = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.commonRequestParams = CommonRequestParams.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListBucketAccessControlsRequest {
    return {
      bucket: isSet(object.bucket) ? globalThis.String(object.bucket) : "",
      commonRequestParams: isSet(object.commonRequestParams)
        ? CommonRequestParams.fromJSON(object.commonRequestParams)
        : undefined,
    };
  },

  toJSON(message: ListBucketAccessControlsRequest): unknown {
    const obj: any = {};
    if (message.bucket !== "") {
      obj.bucket = message.bucket;
    }
    if (message.commonRequestParams !== undefined) {
      obj.commonRequestParams = CommonRequestParams.toJSON(message.commonRequestParams);
    }
    return obj;
  },

  create(base?: DeepPartial<ListBucketAccessControlsRequest>): ListBucketAccessControlsRequest {
    return ListBucketAccessControlsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListBucketAccessControlsRequest>): ListBucketAccessControlsRequest {
    const message = createBaseListBucketAccessControlsRequest();
    message.bucket = object.bucket ?? "";
    message.commonRequestParams = (object.commonRequestParams !== undefined && object.commonRequestParams !== null)
      ? CommonRequestParams.fromPartial(object.commonRequestParams)
      : undefined;
    return message;
  },
};

function createBasePatchBucketAccessControlRequest(): PatchBucketAccessControlRequest {
  return {
    bucket: "",
    entity: "",
    bucketAccessControl: undefined,
    updateMask: undefined,
    commonRequestParams: undefined,
  };
}

export const PatchBucketAccessControlRequest: MessageFns<PatchBucketAccessControlRequest> = {
  encode(message: PatchBucketAccessControlRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.bucket !== "") {
      writer.uint32(10).string(message.bucket);
    }
    if (message.entity !== "") {
      writer.uint32(18).string(message.entity);
    }
    if (message.bucketAccessControl !== undefined) {
      BucketAccessControl.encode(message.bucketAccessControl, writer.uint32(34).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(42).fork()).join();
    }
    if (message.commonRequestParams !== undefined) {
      CommonRequestParams.encode(message.commonRequestParams, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PatchBucketAccessControlRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePatchBucketAccessControlRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.bucket = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.entity = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.bucketAccessControl = BucketAccessControl.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.commonRequestParams = CommonRequestParams.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PatchBucketAccessControlRequest {
    return {
      bucket: isSet(object.bucket) ? globalThis.String(object.bucket) : "",
      entity: isSet(object.entity) ? globalThis.String(object.entity) : "",
      bucketAccessControl: isSet(object.bucketAccessControl)
        ? BucketAccessControl.fromJSON(object.bucketAccessControl)
        : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      commonRequestParams: isSet(object.commonRequestParams)
        ? CommonRequestParams.fromJSON(object.commonRequestParams)
        : undefined,
    };
  },

  toJSON(message: PatchBucketAccessControlRequest): unknown {
    const obj: any = {};
    if (message.bucket !== "") {
      obj.bucket = message.bucket;
    }
    if (message.entity !== "") {
      obj.entity = message.entity;
    }
    if (message.bucketAccessControl !== undefined) {
      obj.bucketAccessControl = BucketAccessControl.toJSON(message.bucketAccessControl);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.commonRequestParams !== undefined) {
      obj.commonRequestParams = CommonRequestParams.toJSON(message.commonRequestParams);
    }
    return obj;
  },

  create(base?: DeepPartial<PatchBucketAccessControlRequest>): PatchBucketAccessControlRequest {
    return PatchBucketAccessControlRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PatchBucketAccessControlRequest>): PatchBucketAccessControlRequest {
    const message = createBasePatchBucketAccessControlRequest();
    message.bucket = object.bucket ?? "";
    message.entity = object.entity ?? "";
    message.bucketAccessControl = (object.bucketAccessControl !== undefined && object.bucketAccessControl !== null)
      ? BucketAccessControl.fromPartial(object.bucketAccessControl)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    message.commonRequestParams = (object.commonRequestParams !== undefined && object.commonRequestParams !== null)
      ? CommonRequestParams.fromPartial(object.commonRequestParams)
      : undefined;
    return message;
  },
};

function createBaseUpdateBucketAccessControlRequest(): UpdateBucketAccessControlRequest {
  return { bucket: "", entity: "", bucketAccessControl: undefined, commonRequestParams: undefined };
}

export const UpdateBucketAccessControlRequest: MessageFns<UpdateBucketAccessControlRequest> = {
  encode(message: UpdateBucketAccessControlRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.bucket !== "") {
      writer.uint32(10).string(message.bucket);
    }
    if (message.entity !== "") {
      writer.uint32(18).string(message.entity);
    }
    if (message.bucketAccessControl !== undefined) {
      BucketAccessControl.encode(message.bucketAccessControl, writer.uint32(34).fork()).join();
    }
    if (message.commonRequestParams !== undefined) {
      CommonRequestParams.encode(message.commonRequestParams, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateBucketAccessControlRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateBucketAccessControlRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.bucket = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.entity = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.bucketAccessControl = BucketAccessControl.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.commonRequestParams = CommonRequestParams.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateBucketAccessControlRequest {
    return {
      bucket: isSet(object.bucket) ? globalThis.String(object.bucket) : "",
      entity: isSet(object.entity) ? globalThis.String(object.entity) : "",
      bucketAccessControl: isSet(object.bucketAccessControl)
        ? BucketAccessControl.fromJSON(object.bucketAccessControl)
        : undefined,
      commonRequestParams: isSet(object.commonRequestParams)
        ? CommonRequestParams.fromJSON(object.commonRequestParams)
        : undefined,
    };
  },

  toJSON(message: UpdateBucketAccessControlRequest): unknown {
    const obj: any = {};
    if (message.bucket !== "") {
      obj.bucket = message.bucket;
    }
    if (message.entity !== "") {
      obj.entity = message.entity;
    }
    if (message.bucketAccessControl !== undefined) {
      obj.bucketAccessControl = BucketAccessControl.toJSON(message.bucketAccessControl);
    }
    if (message.commonRequestParams !== undefined) {
      obj.commonRequestParams = CommonRequestParams.toJSON(message.commonRequestParams);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateBucketAccessControlRequest>): UpdateBucketAccessControlRequest {
    return UpdateBucketAccessControlRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateBucketAccessControlRequest>): UpdateBucketAccessControlRequest {
    const message = createBaseUpdateBucketAccessControlRequest();
    message.bucket = object.bucket ?? "";
    message.entity = object.entity ?? "";
    message.bucketAccessControl = (object.bucketAccessControl !== undefined && object.bucketAccessControl !== null)
      ? BucketAccessControl.fromPartial(object.bucketAccessControl)
      : undefined;
    message.commonRequestParams = (object.commonRequestParams !== undefined && object.commonRequestParams !== null)
      ? CommonRequestParams.fromPartial(object.commonRequestParams)
      : undefined;
    return message;
  },
};

function createBaseDeleteBucketRequest(): DeleteBucketRequest {
  return {
    bucket: "",
    ifMetagenerationMatch: undefined,
    ifMetagenerationNotMatch: undefined,
    commonRequestParams: undefined,
  };
}

export const DeleteBucketRequest: MessageFns<DeleteBucketRequest> = {
  encode(message: DeleteBucketRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.bucket !== "") {
      writer.uint32(10).string(message.bucket);
    }
    if (message.ifMetagenerationMatch !== undefined) {
      Int64Value.encode({ value: message.ifMetagenerationMatch! }, writer.uint32(18).fork()).join();
    }
    if (message.ifMetagenerationNotMatch !== undefined) {
      Int64Value.encode({ value: message.ifMetagenerationNotMatch! }, writer.uint32(26).fork()).join();
    }
    if (message.commonRequestParams !== undefined) {
      CommonRequestParams.encode(message.commonRequestParams, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteBucketRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteBucketRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.bucket = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.ifMetagenerationMatch = Int64Value.decode(reader, reader.uint32()).value;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.ifMetagenerationNotMatch = Int64Value.decode(reader, reader.uint32()).value;
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.commonRequestParams = CommonRequestParams.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteBucketRequest {
    return {
      bucket: isSet(object.bucket) ? globalThis.String(object.bucket) : "",
      ifMetagenerationMatch: isSet(object.ifMetagenerationMatch)
        ? Long.fromValue(object.ifMetagenerationMatch)
        : undefined,
      ifMetagenerationNotMatch: isSet(object.ifMetagenerationNotMatch)
        ? Long.fromValue(object.ifMetagenerationNotMatch)
        : undefined,
      commonRequestParams: isSet(object.commonRequestParams)
        ? CommonRequestParams.fromJSON(object.commonRequestParams)
        : undefined,
    };
  },

  toJSON(message: DeleteBucketRequest): unknown {
    const obj: any = {};
    if (message.bucket !== "") {
      obj.bucket = message.bucket;
    }
    if (message.ifMetagenerationMatch !== undefined) {
      obj.ifMetagenerationMatch = message.ifMetagenerationMatch;
    }
    if (message.ifMetagenerationNotMatch !== undefined) {
      obj.ifMetagenerationNotMatch = message.ifMetagenerationNotMatch;
    }
    if (message.commonRequestParams !== undefined) {
      obj.commonRequestParams = CommonRequestParams.toJSON(message.commonRequestParams);
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteBucketRequest>): DeleteBucketRequest {
    return DeleteBucketRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteBucketRequest>): DeleteBucketRequest {
    const message = createBaseDeleteBucketRequest();
    message.bucket = object.bucket ?? "";
    message.ifMetagenerationMatch =
      (object.ifMetagenerationMatch !== undefined && object.ifMetagenerationMatch !== null)
        ? Long.fromValue(object.ifMetagenerationMatch)
        : undefined;
    message.ifMetagenerationNotMatch =
      (object.ifMetagenerationNotMatch !== undefined && object.ifMetagenerationNotMatch !== null)
        ? Long.fromValue(object.ifMetagenerationNotMatch)
        : undefined;
    message.commonRequestParams = (object.commonRequestParams !== undefined && object.commonRequestParams !== null)
      ? CommonRequestParams.fromPartial(object.commonRequestParams)
      : undefined;
    return message;
  },
};

function createBaseGetBucketRequest(): GetBucketRequest {
  return {
    bucket: "",
    ifMetagenerationMatch: undefined,
    ifMetagenerationNotMatch: undefined,
    projection: 0,
    commonRequestParams: undefined,
  };
}

export const GetBucketRequest: MessageFns<GetBucketRequest> = {
  encode(message: GetBucketRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.bucket !== "") {
      writer.uint32(10).string(message.bucket);
    }
    if (message.ifMetagenerationMatch !== undefined) {
      Int64Value.encode({ value: message.ifMetagenerationMatch! }, writer.uint32(18).fork()).join();
    }
    if (message.ifMetagenerationNotMatch !== undefined) {
      Int64Value.encode({ value: message.ifMetagenerationNotMatch! }, writer.uint32(26).fork()).join();
    }
    if (message.projection !== 0) {
      writer.uint32(32).int32(message.projection);
    }
    if (message.commonRequestParams !== undefined) {
      CommonRequestParams.encode(message.commonRequestParams, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetBucketRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetBucketRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.bucket = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.ifMetagenerationMatch = Int64Value.decode(reader, reader.uint32()).value;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.ifMetagenerationNotMatch = Int64Value.decode(reader, reader.uint32()).value;
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.projection = reader.int32() as any;
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.commonRequestParams = CommonRequestParams.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetBucketRequest {
    return {
      bucket: isSet(object.bucket) ? globalThis.String(object.bucket) : "",
      ifMetagenerationMatch: isSet(object.ifMetagenerationMatch)
        ? Long.fromValue(object.ifMetagenerationMatch)
        : undefined,
      ifMetagenerationNotMatch: isSet(object.ifMetagenerationNotMatch)
        ? Long.fromValue(object.ifMetagenerationNotMatch)
        : undefined,
      projection: isSet(object.projection) ? commonEnums_ProjectionFromJSON(object.projection) : 0,
      commonRequestParams: isSet(object.commonRequestParams)
        ? CommonRequestParams.fromJSON(object.commonRequestParams)
        : undefined,
    };
  },

  toJSON(message: GetBucketRequest): unknown {
    const obj: any = {};
    if (message.bucket !== "") {
      obj.bucket = message.bucket;
    }
    if (message.ifMetagenerationMatch !== undefined) {
      obj.ifMetagenerationMatch = message.ifMetagenerationMatch;
    }
    if (message.ifMetagenerationNotMatch !== undefined) {
      obj.ifMetagenerationNotMatch = message.ifMetagenerationNotMatch;
    }
    if (message.projection !== 0) {
      obj.projection = commonEnums_ProjectionToJSON(message.projection);
    }
    if (message.commonRequestParams !== undefined) {
      obj.commonRequestParams = CommonRequestParams.toJSON(message.commonRequestParams);
    }
    return obj;
  },

  create(base?: DeepPartial<GetBucketRequest>): GetBucketRequest {
    return GetBucketRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetBucketRequest>): GetBucketRequest {
    const message = createBaseGetBucketRequest();
    message.bucket = object.bucket ?? "";
    message.ifMetagenerationMatch =
      (object.ifMetagenerationMatch !== undefined && object.ifMetagenerationMatch !== null)
        ? Long.fromValue(object.ifMetagenerationMatch)
        : undefined;
    message.ifMetagenerationNotMatch =
      (object.ifMetagenerationNotMatch !== undefined && object.ifMetagenerationNotMatch !== null)
        ? Long.fromValue(object.ifMetagenerationNotMatch)
        : undefined;
    message.projection = object.projection ?? 0;
    message.commonRequestParams = (object.commonRequestParams !== undefined && object.commonRequestParams !== null)
      ? CommonRequestParams.fromPartial(object.commonRequestParams)
      : undefined;
    return message;
  },
};

function createBaseInsertBucketRequest(): InsertBucketRequest {
  return {
    predefinedAcl: 0,
    predefinedDefaultObjectAcl: 0,
    project: "",
    projection: 0,
    bucket: undefined,
    commonRequestParams: undefined,
  };
}

export const InsertBucketRequest: MessageFns<InsertBucketRequest> = {
  encode(message: InsertBucketRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.predefinedAcl !== 0) {
      writer.uint32(8).int32(message.predefinedAcl);
    }
    if (message.predefinedDefaultObjectAcl !== 0) {
      writer.uint32(16).int32(message.predefinedDefaultObjectAcl);
    }
    if (message.project !== "") {
      writer.uint32(26).string(message.project);
    }
    if (message.projection !== 0) {
      writer.uint32(32).int32(message.projection);
    }
    if (message.bucket !== undefined) {
      Bucket.encode(message.bucket, writer.uint32(50).fork()).join();
    }
    if (message.commonRequestParams !== undefined) {
      CommonRequestParams.encode(message.commonRequestParams, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InsertBucketRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInsertBucketRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.predefinedAcl = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.predefinedDefaultObjectAcl = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.project = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.projection = reader.int32() as any;
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.bucket = Bucket.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.commonRequestParams = CommonRequestParams.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InsertBucketRequest {
    return {
      predefinedAcl: isSet(object.predefinedAcl) ? commonEnums_PredefinedBucketAclFromJSON(object.predefinedAcl) : 0,
      predefinedDefaultObjectAcl: isSet(object.predefinedDefaultObjectAcl)
        ? commonEnums_PredefinedObjectAclFromJSON(object.predefinedDefaultObjectAcl)
        : 0,
      project: isSet(object.project) ? globalThis.String(object.project) : "",
      projection: isSet(object.projection) ? commonEnums_ProjectionFromJSON(object.projection) : 0,
      bucket: isSet(object.bucket) ? Bucket.fromJSON(object.bucket) : undefined,
      commonRequestParams: isSet(object.commonRequestParams)
        ? CommonRequestParams.fromJSON(object.commonRequestParams)
        : undefined,
    };
  },

  toJSON(message: InsertBucketRequest): unknown {
    const obj: any = {};
    if (message.predefinedAcl !== 0) {
      obj.predefinedAcl = commonEnums_PredefinedBucketAclToJSON(message.predefinedAcl);
    }
    if (message.predefinedDefaultObjectAcl !== 0) {
      obj.predefinedDefaultObjectAcl = commonEnums_PredefinedObjectAclToJSON(message.predefinedDefaultObjectAcl);
    }
    if (message.project !== "") {
      obj.project = message.project;
    }
    if (message.projection !== 0) {
      obj.projection = commonEnums_ProjectionToJSON(message.projection);
    }
    if (message.bucket !== undefined) {
      obj.bucket = Bucket.toJSON(message.bucket);
    }
    if (message.commonRequestParams !== undefined) {
      obj.commonRequestParams = CommonRequestParams.toJSON(message.commonRequestParams);
    }
    return obj;
  },

  create(base?: DeepPartial<InsertBucketRequest>): InsertBucketRequest {
    return InsertBucketRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<InsertBucketRequest>): InsertBucketRequest {
    const message = createBaseInsertBucketRequest();
    message.predefinedAcl = object.predefinedAcl ?? 0;
    message.predefinedDefaultObjectAcl = object.predefinedDefaultObjectAcl ?? 0;
    message.project = object.project ?? "";
    message.projection = object.projection ?? 0;
    message.bucket = (object.bucket !== undefined && object.bucket !== null)
      ? Bucket.fromPartial(object.bucket)
      : undefined;
    message.commonRequestParams = (object.commonRequestParams !== undefined && object.commonRequestParams !== null)
      ? CommonRequestParams.fromPartial(object.commonRequestParams)
      : undefined;
    return message;
  },
};

function createBaseListChannelsRequest(): ListChannelsRequest {
  return { bucket: "", commonRequestParams: undefined };
}

export const ListChannelsRequest: MessageFns<ListChannelsRequest> = {
  encode(message: ListChannelsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.bucket !== "") {
      writer.uint32(10).string(message.bucket);
    }
    if (message.commonRequestParams !== undefined) {
      CommonRequestParams.encode(message.commonRequestParams, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListChannelsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListChannelsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.bucket = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.commonRequestParams = CommonRequestParams.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListChannelsRequest {
    return {
      bucket: isSet(object.bucket) ? globalThis.String(object.bucket) : "",
      commonRequestParams: isSet(object.commonRequestParams)
        ? CommonRequestParams.fromJSON(object.commonRequestParams)
        : undefined,
    };
  },

  toJSON(message: ListChannelsRequest): unknown {
    const obj: any = {};
    if (message.bucket !== "") {
      obj.bucket = message.bucket;
    }
    if (message.commonRequestParams !== undefined) {
      obj.commonRequestParams = CommonRequestParams.toJSON(message.commonRequestParams);
    }
    return obj;
  },

  create(base?: DeepPartial<ListChannelsRequest>): ListChannelsRequest {
    return ListChannelsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListChannelsRequest>): ListChannelsRequest {
    const message = createBaseListChannelsRequest();
    message.bucket = object.bucket ?? "";
    message.commonRequestParams = (object.commonRequestParams !== undefined && object.commonRequestParams !== null)
      ? CommonRequestParams.fromPartial(object.commonRequestParams)
      : undefined;
    return message;
  },
};

function createBaseListBucketsRequest(): ListBucketsRequest {
  return { maxResults: 0, pageToken: "", prefix: "", project: "", projection: 0, commonRequestParams: undefined };
}

export const ListBucketsRequest: MessageFns<ListBucketsRequest> = {
  encode(message: ListBucketsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.maxResults !== 0) {
      writer.uint32(8).int32(message.maxResults);
    }
    if (message.pageToken !== "") {
      writer.uint32(18).string(message.pageToken);
    }
    if (message.prefix !== "") {
      writer.uint32(26).string(message.prefix);
    }
    if (message.project !== "") {
      writer.uint32(34).string(message.project);
    }
    if (message.projection !== 0) {
      writer.uint32(40).int32(message.projection);
    }
    if (message.commonRequestParams !== undefined) {
      CommonRequestParams.encode(message.commonRequestParams, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListBucketsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListBucketsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.maxResults = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.prefix = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.project = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.projection = reader.int32() as any;
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.commonRequestParams = CommonRequestParams.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListBucketsRequest {
    return {
      maxResults: isSet(object.maxResults) ? globalThis.Number(object.maxResults) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      prefix: isSet(object.prefix) ? globalThis.String(object.prefix) : "",
      project: isSet(object.project) ? globalThis.String(object.project) : "",
      projection: isSet(object.projection) ? commonEnums_ProjectionFromJSON(object.projection) : 0,
      commonRequestParams: isSet(object.commonRequestParams)
        ? CommonRequestParams.fromJSON(object.commonRequestParams)
        : undefined,
    };
  },

  toJSON(message: ListBucketsRequest): unknown {
    const obj: any = {};
    if (message.maxResults !== 0) {
      obj.maxResults = Math.round(message.maxResults);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.prefix !== "") {
      obj.prefix = message.prefix;
    }
    if (message.project !== "") {
      obj.project = message.project;
    }
    if (message.projection !== 0) {
      obj.projection = commonEnums_ProjectionToJSON(message.projection);
    }
    if (message.commonRequestParams !== undefined) {
      obj.commonRequestParams = CommonRequestParams.toJSON(message.commonRequestParams);
    }
    return obj;
  },

  create(base?: DeepPartial<ListBucketsRequest>): ListBucketsRequest {
    return ListBucketsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListBucketsRequest>): ListBucketsRequest {
    const message = createBaseListBucketsRequest();
    message.maxResults = object.maxResults ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.prefix = object.prefix ?? "";
    message.project = object.project ?? "";
    message.projection = object.projection ?? 0;
    message.commonRequestParams = (object.commonRequestParams !== undefined && object.commonRequestParams !== null)
      ? CommonRequestParams.fromPartial(object.commonRequestParams)
      : undefined;
    return message;
  },
};

function createBaseLockRetentionPolicyRequest(): LockRetentionPolicyRequest {
  return { bucket: "", ifMetagenerationMatch: Long.ZERO, commonRequestParams: undefined };
}

export const LockRetentionPolicyRequest: MessageFns<LockRetentionPolicyRequest> = {
  encode(message: LockRetentionPolicyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.bucket !== "") {
      writer.uint32(10).string(message.bucket);
    }
    if (!message.ifMetagenerationMatch.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.ifMetagenerationMatch.toString());
    }
    if (message.commonRequestParams !== undefined) {
      CommonRequestParams.encode(message.commonRequestParams, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LockRetentionPolicyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLockRetentionPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.bucket = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.ifMetagenerationMatch = Long.fromString(reader.int64().toString());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.commonRequestParams = CommonRequestParams.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LockRetentionPolicyRequest {
    return {
      bucket: isSet(object.bucket) ? globalThis.String(object.bucket) : "",
      ifMetagenerationMatch: isSet(object.ifMetagenerationMatch)
        ? Long.fromValue(object.ifMetagenerationMatch)
        : Long.ZERO,
      commonRequestParams: isSet(object.commonRequestParams)
        ? CommonRequestParams.fromJSON(object.commonRequestParams)
        : undefined,
    };
  },

  toJSON(message: LockRetentionPolicyRequest): unknown {
    const obj: any = {};
    if (message.bucket !== "") {
      obj.bucket = message.bucket;
    }
    if (!message.ifMetagenerationMatch.equals(Long.ZERO)) {
      obj.ifMetagenerationMatch = (message.ifMetagenerationMatch || Long.ZERO).toString();
    }
    if (message.commonRequestParams !== undefined) {
      obj.commonRequestParams = CommonRequestParams.toJSON(message.commonRequestParams);
    }
    return obj;
  },

  create(base?: DeepPartial<LockRetentionPolicyRequest>): LockRetentionPolicyRequest {
    return LockRetentionPolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LockRetentionPolicyRequest>): LockRetentionPolicyRequest {
    const message = createBaseLockRetentionPolicyRequest();
    message.bucket = object.bucket ?? "";
    message.ifMetagenerationMatch =
      (object.ifMetagenerationMatch !== undefined && object.ifMetagenerationMatch !== null)
        ? Long.fromValue(object.ifMetagenerationMatch)
        : Long.ZERO;
    message.commonRequestParams = (object.commonRequestParams !== undefined && object.commonRequestParams !== null)
      ? CommonRequestParams.fromPartial(object.commonRequestParams)
      : undefined;
    return message;
  },
};

function createBasePatchBucketRequest(): PatchBucketRequest {
  return {
    bucket: "",
    ifMetagenerationMatch: undefined,
    ifMetagenerationNotMatch: undefined,
    predefinedAcl: 0,
    predefinedDefaultObjectAcl: 0,
    projection: 0,
    metadata: undefined,
    updateMask: undefined,
    commonRequestParams: undefined,
  };
}

export const PatchBucketRequest: MessageFns<PatchBucketRequest> = {
  encode(message: PatchBucketRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.bucket !== "") {
      writer.uint32(10).string(message.bucket);
    }
    if (message.ifMetagenerationMatch !== undefined) {
      Int64Value.encode({ value: message.ifMetagenerationMatch! }, writer.uint32(18).fork()).join();
    }
    if (message.ifMetagenerationNotMatch !== undefined) {
      Int64Value.encode({ value: message.ifMetagenerationNotMatch! }, writer.uint32(26).fork()).join();
    }
    if (message.predefinedAcl !== 0) {
      writer.uint32(32).int32(message.predefinedAcl);
    }
    if (message.predefinedDefaultObjectAcl !== 0) {
      writer.uint32(40).int32(message.predefinedDefaultObjectAcl);
    }
    if (message.projection !== 0) {
      writer.uint32(48).int32(message.projection);
    }
    if (message.metadata !== undefined) {
      Bucket.encode(message.metadata, writer.uint32(66).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(74).fork()).join();
    }
    if (message.commonRequestParams !== undefined) {
      CommonRequestParams.encode(message.commonRequestParams, writer.uint32(82).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PatchBucketRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePatchBucketRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.bucket = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.ifMetagenerationMatch = Int64Value.decode(reader, reader.uint32()).value;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.ifMetagenerationNotMatch = Int64Value.decode(reader, reader.uint32()).value;
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.predefinedAcl = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.predefinedDefaultObjectAcl = reader.int32() as any;
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.projection = reader.int32() as any;
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.metadata = Bucket.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.commonRequestParams = CommonRequestParams.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PatchBucketRequest {
    return {
      bucket: isSet(object.bucket) ? globalThis.String(object.bucket) : "",
      ifMetagenerationMatch: isSet(object.ifMetagenerationMatch)
        ? Long.fromValue(object.ifMetagenerationMatch)
        : undefined,
      ifMetagenerationNotMatch: isSet(object.ifMetagenerationNotMatch)
        ? Long.fromValue(object.ifMetagenerationNotMatch)
        : undefined,
      predefinedAcl: isSet(object.predefinedAcl) ? commonEnums_PredefinedBucketAclFromJSON(object.predefinedAcl) : 0,
      predefinedDefaultObjectAcl: isSet(object.predefinedDefaultObjectAcl)
        ? commonEnums_PredefinedObjectAclFromJSON(object.predefinedDefaultObjectAcl)
        : 0,
      projection: isSet(object.projection) ? commonEnums_ProjectionFromJSON(object.projection) : 0,
      metadata: isSet(object.metadata) ? Bucket.fromJSON(object.metadata) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      commonRequestParams: isSet(object.commonRequestParams)
        ? CommonRequestParams.fromJSON(object.commonRequestParams)
        : undefined,
    };
  },

  toJSON(message: PatchBucketRequest): unknown {
    const obj: any = {};
    if (message.bucket !== "") {
      obj.bucket = message.bucket;
    }
    if (message.ifMetagenerationMatch !== undefined) {
      obj.ifMetagenerationMatch = message.ifMetagenerationMatch;
    }
    if (message.ifMetagenerationNotMatch !== undefined) {
      obj.ifMetagenerationNotMatch = message.ifMetagenerationNotMatch;
    }
    if (message.predefinedAcl !== 0) {
      obj.predefinedAcl = commonEnums_PredefinedBucketAclToJSON(message.predefinedAcl);
    }
    if (message.predefinedDefaultObjectAcl !== 0) {
      obj.predefinedDefaultObjectAcl = commonEnums_PredefinedObjectAclToJSON(message.predefinedDefaultObjectAcl);
    }
    if (message.projection !== 0) {
      obj.projection = commonEnums_ProjectionToJSON(message.projection);
    }
    if (message.metadata !== undefined) {
      obj.metadata = Bucket.toJSON(message.metadata);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.commonRequestParams !== undefined) {
      obj.commonRequestParams = CommonRequestParams.toJSON(message.commonRequestParams);
    }
    return obj;
  },

  create(base?: DeepPartial<PatchBucketRequest>): PatchBucketRequest {
    return PatchBucketRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PatchBucketRequest>): PatchBucketRequest {
    const message = createBasePatchBucketRequest();
    message.bucket = object.bucket ?? "";
    message.ifMetagenerationMatch =
      (object.ifMetagenerationMatch !== undefined && object.ifMetagenerationMatch !== null)
        ? Long.fromValue(object.ifMetagenerationMatch)
        : undefined;
    message.ifMetagenerationNotMatch =
      (object.ifMetagenerationNotMatch !== undefined && object.ifMetagenerationNotMatch !== null)
        ? Long.fromValue(object.ifMetagenerationNotMatch)
        : undefined;
    message.predefinedAcl = object.predefinedAcl ?? 0;
    message.predefinedDefaultObjectAcl = object.predefinedDefaultObjectAcl ?? 0;
    message.projection = object.projection ?? 0;
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Bucket.fromPartial(object.metadata)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    message.commonRequestParams = (object.commonRequestParams !== undefined && object.commonRequestParams !== null)
      ? CommonRequestParams.fromPartial(object.commonRequestParams)
      : undefined;
    return message;
  },
};

function createBaseUpdateBucketRequest(): UpdateBucketRequest {
  return {
    bucket: "",
    ifMetagenerationMatch: undefined,
    ifMetagenerationNotMatch: undefined,
    predefinedAcl: 0,
    predefinedDefaultObjectAcl: 0,
    projection: 0,
    metadata: undefined,
    commonRequestParams: undefined,
  };
}

export const UpdateBucketRequest: MessageFns<UpdateBucketRequest> = {
  encode(message: UpdateBucketRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.bucket !== "") {
      writer.uint32(10).string(message.bucket);
    }
    if (message.ifMetagenerationMatch !== undefined) {
      Int64Value.encode({ value: message.ifMetagenerationMatch! }, writer.uint32(18).fork()).join();
    }
    if (message.ifMetagenerationNotMatch !== undefined) {
      Int64Value.encode({ value: message.ifMetagenerationNotMatch! }, writer.uint32(26).fork()).join();
    }
    if (message.predefinedAcl !== 0) {
      writer.uint32(32).int32(message.predefinedAcl);
    }
    if (message.predefinedDefaultObjectAcl !== 0) {
      writer.uint32(40).int32(message.predefinedDefaultObjectAcl);
    }
    if (message.projection !== 0) {
      writer.uint32(48).int32(message.projection);
    }
    if (message.metadata !== undefined) {
      Bucket.encode(message.metadata, writer.uint32(66).fork()).join();
    }
    if (message.commonRequestParams !== undefined) {
      CommonRequestParams.encode(message.commonRequestParams, writer.uint32(74).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateBucketRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateBucketRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.bucket = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.ifMetagenerationMatch = Int64Value.decode(reader, reader.uint32()).value;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.ifMetagenerationNotMatch = Int64Value.decode(reader, reader.uint32()).value;
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.predefinedAcl = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.predefinedDefaultObjectAcl = reader.int32() as any;
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.projection = reader.int32() as any;
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.metadata = Bucket.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.commonRequestParams = CommonRequestParams.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateBucketRequest {
    return {
      bucket: isSet(object.bucket) ? globalThis.String(object.bucket) : "",
      ifMetagenerationMatch: isSet(object.ifMetagenerationMatch)
        ? Long.fromValue(object.ifMetagenerationMatch)
        : undefined,
      ifMetagenerationNotMatch: isSet(object.ifMetagenerationNotMatch)
        ? Long.fromValue(object.ifMetagenerationNotMatch)
        : undefined,
      predefinedAcl: isSet(object.predefinedAcl) ? commonEnums_PredefinedBucketAclFromJSON(object.predefinedAcl) : 0,
      predefinedDefaultObjectAcl: isSet(object.predefinedDefaultObjectAcl)
        ? commonEnums_PredefinedObjectAclFromJSON(object.predefinedDefaultObjectAcl)
        : 0,
      projection: isSet(object.projection) ? commonEnums_ProjectionFromJSON(object.projection) : 0,
      metadata: isSet(object.metadata) ? Bucket.fromJSON(object.metadata) : undefined,
      commonRequestParams: isSet(object.commonRequestParams)
        ? CommonRequestParams.fromJSON(object.commonRequestParams)
        : undefined,
    };
  },

  toJSON(message: UpdateBucketRequest): unknown {
    const obj: any = {};
    if (message.bucket !== "") {
      obj.bucket = message.bucket;
    }
    if (message.ifMetagenerationMatch !== undefined) {
      obj.ifMetagenerationMatch = message.ifMetagenerationMatch;
    }
    if (message.ifMetagenerationNotMatch !== undefined) {
      obj.ifMetagenerationNotMatch = message.ifMetagenerationNotMatch;
    }
    if (message.predefinedAcl !== 0) {
      obj.predefinedAcl = commonEnums_PredefinedBucketAclToJSON(message.predefinedAcl);
    }
    if (message.predefinedDefaultObjectAcl !== 0) {
      obj.predefinedDefaultObjectAcl = commonEnums_PredefinedObjectAclToJSON(message.predefinedDefaultObjectAcl);
    }
    if (message.projection !== 0) {
      obj.projection = commonEnums_ProjectionToJSON(message.projection);
    }
    if (message.metadata !== undefined) {
      obj.metadata = Bucket.toJSON(message.metadata);
    }
    if (message.commonRequestParams !== undefined) {
      obj.commonRequestParams = CommonRequestParams.toJSON(message.commonRequestParams);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateBucketRequest>): UpdateBucketRequest {
    return UpdateBucketRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateBucketRequest>): UpdateBucketRequest {
    const message = createBaseUpdateBucketRequest();
    message.bucket = object.bucket ?? "";
    message.ifMetagenerationMatch =
      (object.ifMetagenerationMatch !== undefined && object.ifMetagenerationMatch !== null)
        ? Long.fromValue(object.ifMetagenerationMatch)
        : undefined;
    message.ifMetagenerationNotMatch =
      (object.ifMetagenerationNotMatch !== undefined && object.ifMetagenerationNotMatch !== null)
        ? Long.fromValue(object.ifMetagenerationNotMatch)
        : undefined;
    message.predefinedAcl = object.predefinedAcl ?? 0;
    message.predefinedDefaultObjectAcl = object.predefinedDefaultObjectAcl ?? 0;
    message.projection = object.projection ?? 0;
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Bucket.fromPartial(object.metadata)
      : undefined;
    message.commonRequestParams = (object.commonRequestParams !== undefined && object.commonRequestParams !== null)
      ? CommonRequestParams.fromPartial(object.commonRequestParams)
      : undefined;
    return message;
  },
};

function createBaseStopChannelRequest(): StopChannelRequest {
  return { channel: undefined, commonRequestParams: undefined };
}

export const StopChannelRequest: MessageFns<StopChannelRequest> = {
  encode(message: StopChannelRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.channel !== undefined) {
      Channel.encode(message.channel, writer.uint32(10).fork()).join();
    }
    if (message.commonRequestParams !== undefined) {
      CommonRequestParams.encode(message.commonRequestParams, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StopChannelRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStopChannelRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.channel = Channel.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.commonRequestParams = CommonRequestParams.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StopChannelRequest {
    return {
      channel: isSet(object.channel) ? Channel.fromJSON(object.channel) : undefined,
      commonRequestParams: isSet(object.commonRequestParams)
        ? CommonRequestParams.fromJSON(object.commonRequestParams)
        : undefined,
    };
  },

  toJSON(message: StopChannelRequest): unknown {
    const obj: any = {};
    if (message.channel !== undefined) {
      obj.channel = Channel.toJSON(message.channel);
    }
    if (message.commonRequestParams !== undefined) {
      obj.commonRequestParams = CommonRequestParams.toJSON(message.commonRequestParams);
    }
    return obj;
  },

  create(base?: DeepPartial<StopChannelRequest>): StopChannelRequest {
    return StopChannelRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StopChannelRequest>): StopChannelRequest {
    const message = createBaseStopChannelRequest();
    message.channel = (object.channel !== undefined && object.channel !== null)
      ? Channel.fromPartial(object.channel)
      : undefined;
    message.commonRequestParams = (object.commonRequestParams !== undefined && object.commonRequestParams !== null)
      ? CommonRequestParams.fromPartial(object.commonRequestParams)
      : undefined;
    return message;
  },
};

function createBaseDeleteDefaultObjectAccessControlRequest(): DeleteDefaultObjectAccessControlRequest {
  return { bucket: "", entity: "", commonRequestParams: undefined };
}

export const DeleteDefaultObjectAccessControlRequest: MessageFns<DeleteDefaultObjectAccessControlRequest> = {
  encode(message: DeleteDefaultObjectAccessControlRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.bucket !== "") {
      writer.uint32(10).string(message.bucket);
    }
    if (message.entity !== "") {
      writer.uint32(18).string(message.entity);
    }
    if (message.commonRequestParams !== undefined) {
      CommonRequestParams.encode(message.commonRequestParams, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteDefaultObjectAccessControlRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteDefaultObjectAccessControlRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.bucket = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.entity = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.commonRequestParams = CommonRequestParams.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteDefaultObjectAccessControlRequest {
    return {
      bucket: isSet(object.bucket) ? globalThis.String(object.bucket) : "",
      entity: isSet(object.entity) ? globalThis.String(object.entity) : "",
      commonRequestParams: isSet(object.commonRequestParams)
        ? CommonRequestParams.fromJSON(object.commonRequestParams)
        : undefined,
    };
  },

  toJSON(message: DeleteDefaultObjectAccessControlRequest): unknown {
    const obj: any = {};
    if (message.bucket !== "") {
      obj.bucket = message.bucket;
    }
    if (message.entity !== "") {
      obj.entity = message.entity;
    }
    if (message.commonRequestParams !== undefined) {
      obj.commonRequestParams = CommonRequestParams.toJSON(message.commonRequestParams);
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteDefaultObjectAccessControlRequest>): DeleteDefaultObjectAccessControlRequest {
    return DeleteDefaultObjectAccessControlRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteDefaultObjectAccessControlRequest>): DeleteDefaultObjectAccessControlRequest {
    const message = createBaseDeleteDefaultObjectAccessControlRequest();
    message.bucket = object.bucket ?? "";
    message.entity = object.entity ?? "";
    message.commonRequestParams = (object.commonRequestParams !== undefined && object.commonRequestParams !== null)
      ? CommonRequestParams.fromPartial(object.commonRequestParams)
      : undefined;
    return message;
  },
};

function createBaseGetDefaultObjectAccessControlRequest(): GetDefaultObjectAccessControlRequest {
  return { bucket: "", entity: "", commonRequestParams: undefined };
}

export const GetDefaultObjectAccessControlRequest: MessageFns<GetDefaultObjectAccessControlRequest> = {
  encode(message: GetDefaultObjectAccessControlRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.bucket !== "") {
      writer.uint32(10).string(message.bucket);
    }
    if (message.entity !== "") {
      writer.uint32(18).string(message.entity);
    }
    if (message.commonRequestParams !== undefined) {
      CommonRequestParams.encode(message.commonRequestParams, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetDefaultObjectAccessControlRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultObjectAccessControlRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.bucket = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.entity = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.commonRequestParams = CommonRequestParams.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDefaultObjectAccessControlRequest {
    return {
      bucket: isSet(object.bucket) ? globalThis.String(object.bucket) : "",
      entity: isSet(object.entity) ? globalThis.String(object.entity) : "",
      commonRequestParams: isSet(object.commonRequestParams)
        ? CommonRequestParams.fromJSON(object.commonRequestParams)
        : undefined,
    };
  },

  toJSON(message: GetDefaultObjectAccessControlRequest): unknown {
    const obj: any = {};
    if (message.bucket !== "") {
      obj.bucket = message.bucket;
    }
    if (message.entity !== "") {
      obj.entity = message.entity;
    }
    if (message.commonRequestParams !== undefined) {
      obj.commonRequestParams = CommonRequestParams.toJSON(message.commonRequestParams);
    }
    return obj;
  },

  create(base?: DeepPartial<GetDefaultObjectAccessControlRequest>): GetDefaultObjectAccessControlRequest {
    return GetDefaultObjectAccessControlRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetDefaultObjectAccessControlRequest>): GetDefaultObjectAccessControlRequest {
    const message = createBaseGetDefaultObjectAccessControlRequest();
    message.bucket = object.bucket ?? "";
    message.entity = object.entity ?? "";
    message.commonRequestParams = (object.commonRequestParams !== undefined && object.commonRequestParams !== null)
      ? CommonRequestParams.fromPartial(object.commonRequestParams)
      : undefined;
    return message;
  },
};

function createBaseInsertDefaultObjectAccessControlRequest(): InsertDefaultObjectAccessControlRequest {
  return { bucket: "", objectAccessControl: undefined, commonRequestParams: undefined };
}

export const InsertDefaultObjectAccessControlRequest: MessageFns<InsertDefaultObjectAccessControlRequest> = {
  encode(message: InsertDefaultObjectAccessControlRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.bucket !== "") {
      writer.uint32(10).string(message.bucket);
    }
    if (message.objectAccessControl !== undefined) {
      ObjectAccessControl.encode(message.objectAccessControl, writer.uint32(26).fork()).join();
    }
    if (message.commonRequestParams !== undefined) {
      CommonRequestParams.encode(message.commonRequestParams, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InsertDefaultObjectAccessControlRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInsertDefaultObjectAccessControlRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.bucket = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.objectAccessControl = ObjectAccessControl.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.commonRequestParams = CommonRequestParams.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InsertDefaultObjectAccessControlRequest {
    return {
      bucket: isSet(object.bucket) ? globalThis.String(object.bucket) : "",
      objectAccessControl: isSet(object.objectAccessControl)
        ? ObjectAccessControl.fromJSON(object.objectAccessControl)
        : undefined,
      commonRequestParams: isSet(object.commonRequestParams)
        ? CommonRequestParams.fromJSON(object.commonRequestParams)
        : undefined,
    };
  },

  toJSON(message: InsertDefaultObjectAccessControlRequest): unknown {
    const obj: any = {};
    if (message.bucket !== "") {
      obj.bucket = message.bucket;
    }
    if (message.objectAccessControl !== undefined) {
      obj.objectAccessControl = ObjectAccessControl.toJSON(message.objectAccessControl);
    }
    if (message.commonRequestParams !== undefined) {
      obj.commonRequestParams = CommonRequestParams.toJSON(message.commonRequestParams);
    }
    return obj;
  },

  create(base?: DeepPartial<InsertDefaultObjectAccessControlRequest>): InsertDefaultObjectAccessControlRequest {
    return InsertDefaultObjectAccessControlRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<InsertDefaultObjectAccessControlRequest>): InsertDefaultObjectAccessControlRequest {
    const message = createBaseInsertDefaultObjectAccessControlRequest();
    message.bucket = object.bucket ?? "";
    message.objectAccessControl = (object.objectAccessControl !== undefined && object.objectAccessControl !== null)
      ? ObjectAccessControl.fromPartial(object.objectAccessControl)
      : undefined;
    message.commonRequestParams = (object.commonRequestParams !== undefined && object.commonRequestParams !== null)
      ? CommonRequestParams.fromPartial(object.commonRequestParams)
      : undefined;
    return message;
  },
};

function createBaseListDefaultObjectAccessControlsRequest(): ListDefaultObjectAccessControlsRequest {
  return {
    bucket: "",
    ifMetagenerationMatch: undefined,
    ifMetagenerationNotMatch: undefined,
    commonRequestParams: undefined,
  };
}

export const ListDefaultObjectAccessControlsRequest: MessageFns<ListDefaultObjectAccessControlsRequest> = {
  encode(message: ListDefaultObjectAccessControlsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.bucket !== "") {
      writer.uint32(10).string(message.bucket);
    }
    if (message.ifMetagenerationMatch !== undefined) {
      Int64Value.encode({ value: message.ifMetagenerationMatch! }, writer.uint32(18).fork()).join();
    }
    if (message.ifMetagenerationNotMatch !== undefined) {
      Int64Value.encode({ value: message.ifMetagenerationNotMatch! }, writer.uint32(26).fork()).join();
    }
    if (message.commonRequestParams !== undefined) {
      CommonRequestParams.encode(message.commonRequestParams, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListDefaultObjectAccessControlsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListDefaultObjectAccessControlsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.bucket = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.ifMetagenerationMatch = Int64Value.decode(reader, reader.uint32()).value;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.ifMetagenerationNotMatch = Int64Value.decode(reader, reader.uint32()).value;
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.commonRequestParams = CommonRequestParams.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListDefaultObjectAccessControlsRequest {
    return {
      bucket: isSet(object.bucket) ? globalThis.String(object.bucket) : "",
      ifMetagenerationMatch: isSet(object.ifMetagenerationMatch)
        ? Long.fromValue(object.ifMetagenerationMatch)
        : undefined,
      ifMetagenerationNotMatch: isSet(object.ifMetagenerationNotMatch)
        ? Long.fromValue(object.ifMetagenerationNotMatch)
        : undefined,
      commonRequestParams: isSet(object.commonRequestParams)
        ? CommonRequestParams.fromJSON(object.commonRequestParams)
        : undefined,
    };
  },

  toJSON(message: ListDefaultObjectAccessControlsRequest): unknown {
    const obj: any = {};
    if (message.bucket !== "") {
      obj.bucket = message.bucket;
    }
    if (message.ifMetagenerationMatch !== undefined) {
      obj.ifMetagenerationMatch = message.ifMetagenerationMatch;
    }
    if (message.ifMetagenerationNotMatch !== undefined) {
      obj.ifMetagenerationNotMatch = message.ifMetagenerationNotMatch;
    }
    if (message.commonRequestParams !== undefined) {
      obj.commonRequestParams = CommonRequestParams.toJSON(message.commonRequestParams);
    }
    return obj;
  },

  create(base?: DeepPartial<ListDefaultObjectAccessControlsRequest>): ListDefaultObjectAccessControlsRequest {
    return ListDefaultObjectAccessControlsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListDefaultObjectAccessControlsRequest>): ListDefaultObjectAccessControlsRequest {
    const message = createBaseListDefaultObjectAccessControlsRequest();
    message.bucket = object.bucket ?? "";
    message.ifMetagenerationMatch =
      (object.ifMetagenerationMatch !== undefined && object.ifMetagenerationMatch !== null)
        ? Long.fromValue(object.ifMetagenerationMatch)
        : undefined;
    message.ifMetagenerationNotMatch =
      (object.ifMetagenerationNotMatch !== undefined && object.ifMetagenerationNotMatch !== null)
        ? Long.fromValue(object.ifMetagenerationNotMatch)
        : undefined;
    message.commonRequestParams = (object.commonRequestParams !== undefined && object.commonRequestParams !== null)
      ? CommonRequestParams.fromPartial(object.commonRequestParams)
      : undefined;
    return message;
  },
};

function createBasePatchDefaultObjectAccessControlRequest(): PatchDefaultObjectAccessControlRequest {
  return {
    bucket: "",
    entity: "",
    objectAccessControl: undefined,
    updateMask: undefined,
    commonRequestParams: undefined,
  };
}

export const PatchDefaultObjectAccessControlRequest: MessageFns<PatchDefaultObjectAccessControlRequest> = {
  encode(message: PatchDefaultObjectAccessControlRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.bucket !== "") {
      writer.uint32(10).string(message.bucket);
    }
    if (message.entity !== "") {
      writer.uint32(18).string(message.entity);
    }
    if (message.objectAccessControl !== undefined) {
      ObjectAccessControl.encode(message.objectAccessControl, writer.uint32(34).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(42).fork()).join();
    }
    if (message.commonRequestParams !== undefined) {
      CommonRequestParams.encode(message.commonRequestParams, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PatchDefaultObjectAccessControlRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePatchDefaultObjectAccessControlRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.bucket = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.entity = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.objectAccessControl = ObjectAccessControl.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.commonRequestParams = CommonRequestParams.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PatchDefaultObjectAccessControlRequest {
    return {
      bucket: isSet(object.bucket) ? globalThis.String(object.bucket) : "",
      entity: isSet(object.entity) ? globalThis.String(object.entity) : "",
      objectAccessControl: isSet(object.objectAccessControl)
        ? ObjectAccessControl.fromJSON(object.objectAccessControl)
        : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      commonRequestParams: isSet(object.commonRequestParams)
        ? CommonRequestParams.fromJSON(object.commonRequestParams)
        : undefined,
    };
  },

  toJSON(message: PatchDefaultObjectAccessControlRequest): unknown {
    const obj: any = {};
    if (message.bucket !== "") {
      obj.bucket = message.bucket;
    }
    if (message.entity !== "") {
      obj.entity = message.entity;
    }
    if (message.objectAccessControl !== undefined) {
      obj.objectAccessControl = ObjectAccessControl.toJSON(message.objectAccessControl);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.commonRequestParams !== undefined) {
      obj.commonRequestParams = CommonRequestParams.toJSON(message.commonRequestParams);
    }
    return obj;
  },

  create(base?: DeepPartial<PatchDefaultObjectAccessControlRequest>): PatchDefaultObjectAccessControlRequest {
    return PatchDefaultObjectAccessControlRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PatchDefaultObjectAccessControlRequest>): PatchDefaultObjectAccessControlRequest {
    const message = createBasePatchDefaultObjectAccessControlRequest();
    message.bucket = object.bucket ?? "";
    message.entity = object.entity ?? "";
    message.objectAccessControl = (object.objectAccessControl !== undefined && object.objectAccessControl !== null)
      ? ObjectAccessControl.fromPartial(object.objectAccessControl)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    message.commonRequestParams = (object.commonRequestParams !== undefined && object.commonRequestParams !== null)
      ? CommonRequestParams.fromPartial(object.commonRequestParams)
      : undefined;
    return message;
  },
};

function createBaseUpdateDefaultObjectAccessControlRequest(): UpdateDefaultObjectAccessControlRequest {
  return { bucket: "", entity: "", objectAccessControl: undefined, commonRequestParams: undefined };
}

export const UpdateDefaultObjectAccessControlRequest: MessageFns<UpdateDefaultObjectAccessControlRequest> = {
  encode(message: UpdateDefaultObjectAccessControlRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.bucket !== "") {
      writer.uint32(10).string(message.bucket);
    }
    if (message.entity !== "") {
      writer.uint32(18).string(message.entity);
    }
    if (message.objectAccessControl !== undefined) {
      ObjectAccessControl.encode(message.objectAccessControl, writer.uint32(34).fork()).join();
    }
    if (message.commonRequestParams !== undefined) {
      CommonRequestParams.encode(message.commonRequestParams, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateDefaultObjectAccessControlRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateDefaultObjectAccessControlRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.bucket = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.entity = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.objectAccessControl = ObjectAccessControl.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.commonRequestParams = CommonRequestParams.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateDefaultObjectAccessControlRequest {
    return {
      bucket: isSet(object.bucket) ? globalThis.String(object.bucket) : "",
      entity: isSet(object.entity) ? globalThis.String(object.entity) : "",
      objectAccessControl: isSet(object.objectAccessControl)
        ? ObjectAccessControl.fromJSON(object.objectAccessControl)
        : undefined,
      commonRequestParams: isSet(object.commonRequestParams)
        ? CommonRequestParams.fromJSON(object.commonRequestParams)
        : undefined,
    };
  },

  toJSON(message: UpdateDefaultObjectAccessControlRequest): unknown {
    const obj: any = {};
    if (message.bucket !== "") {
      obj.bucket = message.bucket;
    }
    if (message.entity !== "") {
      obj.entity = message.entity;
    }
    if (message.objectAccessControl !== undefined) {
      obj.objectAccessControl = ObjectAccessControl.toJSON(message.objectAccessControl);
    }
    if (message.commonRequestParams !== undefined) {
      obj.commonRequestParams = CommonRequestParams.toJSON(message.commonRequestParams);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateDefaultObjectAccessControlRequest>): UpdateDefaultObjectAccessControlRequest {
    return UpdateDefaultObjectAccessControlRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateDefaultObjectAccessControlRequest>): UpdateDefaultObjectAccessControlRequest {
    const message = createBaseUpdateDefaultObjectAccessControlRequest();
    message.bucket = object.bucket ?? "";
    message.entity = object.entity ?? "";
    message.objectAccessControl = (object.objectAccessControl !== undefined && object.objectAccessControl !== null)
      ? ObjectAccessControl.fromPartial(object.objectAccessControl)
      : undefined;
    message.commonRequestParams = (object.commonRequestParams !== undefined && object.commonRequestParams !== null)
      ? CommonRequestParams.fromPartial(object.commonRequestParams)
      : undefined;
    return message;
  },
};

function createBaseDeleteNotificationRequest(): DeleteNotificationRequest {
  return { bucket: "", notification: "", commonRequestParams: undefined };
}

export const DeleteNotificationRequest: MessageFns<DeleteNotificationRequest> = {
  encode(message: DeleteNotificationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.bucket !== "") {
      writer.uint32(10).string(message.bucket);
    }
    if (message.notification !== "") {
      writer.uint32(18).string(message.notification);
    }
    if (message.commonRequestParams !== undefined) {
      CommonRequestParams.encode(message.commonRequestParams, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteNotificationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteNotificationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.bucket = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.notification = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.commonRequestParams = CommonRequestParams.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteNotificationRequest {
    return {
      bucket: isSet(object.bucket) ? globalThis.String(object.bucket) : "",
      notification: isSet(object.notification) ? globalThis.String(object.notification) : "",
      commonRequestParams: isSet(object.commonRequestParams)
        ? CommonRequestParams.fromJSON(object.commonRequestParams)
        : undefined,
    };
  },

  toJSON(message: DeleteNotificationRequest): unknown {
    const obj: any = {};
    if (message.bucket !== "") {
      obj.bucket = message.bucket;
    }
    if (message.notification !== "") {
      obj.notification = message.notification;
    }
    if (message.commonRequestParams !== undefined) {
      obj.commonRequestParams = CommonRequestParams.toJSON(message.commonRequestParams);
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteNotificationRequest>): DeleteNotificationRequest {
    return DeleteNotificationRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteNotificationRequest>): DeleteNotificationRequest {
    const message = createBaseDeleteNotificationRequest();
    message.bucket = object.bucket ?? "";
    message.notification = object.notification ?? "";
    message.commonRequestParams = (object.commonRequestParams !== undefined && object.commonRequestParams !== null)
      ? CommonRequestParams.fromPartial(object.commonRequestParams)
      : undefined;
    return message;
  },
};

function createBaseGetNotificationRequest(): GetNotificationRequest {
  return { bucket: "", notification: "", commonRequestParams: undefined };
}

export const GetNotificationRequest: MessageFns<GetNotificationRequest> = {
  encode(message: GetNotificationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.bucket !== "") {
      writer.uint32(10).string(message.bucket);
    }
    if (message.notification !== "") {
      writer.uint32(18).string(message.notification);
    }
    if (message.commonRequestParams !== undefined) {
      CommonRequestParams.encode(message.commonRequestParams, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetNotificationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetNotificationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.bucket = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.notification = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.commonRequestParams = CommonRequestParams.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetNotificationRequest {
    return {
      bucket: isSet(object.bucket) ? globalThis.String(object.bucket) : "",
      notification: isSet(object.notification) ? globalThis.String(object.notification) : "",
      commonRequestParams: isSet(object.commonRequestParams)
        ? CommonRequestParams.fromJSON(object.commonRequestParams)
        : undefined,
    };
  },

  toJSON(message: GetNotificationRequest): unknown {
    const obj: any = {};
    if (message.bucket !== "") {
      obj.bucket = message.bucket;
    }
    if (message.notification !== "") {
      obj.notification = message.notification;
    }
    if (message.commonRequestParams !== undefined) {
      obj.commonRequestParams = CommonRequestParams.toJSON(message.commonRequestParams);
    }
    return obj;
  },

  create(base?: DeepPartial<GetNotificationRequest>): GetNotificationRequest {
    return GetNotificationRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetNotificationRequest>): GetNotificationRequest {
    const message = createBaseGetNotificationRequest();
    message.bucket = object.bucket ?? "";
    message.notification = object.notification ?? "";
    message.commonRequestParams = (object.commonRequestParams !== undefined && object.commonRequestParams !== null)
      ? CommonRequestParams.fromPartial(object.commonRequestParams)
      : undefined;
    return message;
  },
};

function createBaseInsertNotificationRequest(): InsertNotificationRequest {
  return { bucket: "", notification: undefined, commonRequestParams: undefined };
}

export const InsertNotificationRequest: MessageFns<InsertNotificationRequest> = {
  encode(message: InsertNotificationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.bucket !== "") {
      writer.uint32(10).string(message.bucket);
    }
    if (message.notification !== undefined) {
      Notification.encode(message.notification, writer.uint32(26).fork()).join();
    }
    if (message.commonRequestParams !== undefined) {
      CommonRequestParams.encode(message.commonRequestParams, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InsertNotificationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInsertNotificationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.bucket = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.notification = Notification.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.commonRequestParams = CommonRequestParams.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InsertNotificationRequest {
    return {
      bucket: isSet(object.bucket) ? globalThis.String(object.bucket) : "",
      notification: isSet(object.notification) ? Notification.fromJSON(object.notification) : undefined,
      commonRequestParams: isSet(object.commonRequestParams)
        ? CommonRequestParams.fromJSON(object.commonRequestParams)
        : undefined,
    };
  },

  toJSON(message: InsertNotificationRequest): unknown {
    const obj: any = {};
    if (message.bucket !== "") {
      obj.bucket = message.bucket;
    }
    if (message.notification !== undefined) {
      obj.notification = Notification.toJSON(message.notification);
    }
    if (message.commonRequestParams !== undefined) {
      obj.commonRequestParams = CommonRequestParams.toJSON(message.commonRequestParams);
    }
    return obj;
  },

  create(base?: DeepPartial<InsertNotificationRequest>): InsertNotificationRequest {
    return InsertNotificationRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<InsertNotificationRequest>): InsertNotificationRequest {
    const message = createBaseInsertNotificationRequest();
    message.bucket = object.bucket ?? "";
    message.notification = (object.notification !== undefined && object.notification !== null)
      ? Notification.fromPartial(object.notification)
      : undefined;
    message.commonRequestParams = (object.commonRequestParams !== undefined && object.commonRequestParams !== null)
      ? CommonRequestParams.fromPartial(object.commonRequestParams)
      : undefined;
    return message;
  },
};

function createBaseListNotificationsRequest(): ListNotificationsRequest {
  return { bucket: "", commonRequestParams: undefined };
}

export const ListNotificationsRequest: MessageFns<ListNotificationsRequest> = {
  encode(message: ListNotificationsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.bucket !== "") {
      writer.uint32(10).string(message.bucket);
    }
    if (message.commonRequestParams !== undefined) {
      CommonRequestParams.encode(message.commonRequestParams, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListNotificationsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListNotificationsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.bucket = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.commonRequestParams = CommonRequestParams.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListNotificationsRequest {
    return {
      bucket: isSet(object.bucket) ? globalThis.String(object.bucket) : "",
      commonRequestParams: isSet(object.commonRequestParams)
        ? CommonRequestParams.fromJSON(object.commonRequestParams)
        : undefined,
    };
  },

  toJSON(message: ListNotificationsRequest): unknown {
    const obj: any = {};
    if (message.bucket !== "") {
      obj.bucket = message.bucket;
    }
    if (message.commonRequestParams !== undefined) {
      obj.commonRequestParams = CommonRequestParams.toJSON(message.commonRequestParams);
    }
    return obj;
  },

  create(base?: DeepPartial<ListNotificationsRequest>): ListNotificationsRequest {
    return ListNotificationsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListNotificationsRequest>): ListNotificationsRequest {
    const message = createBaseListNotificationsRequest();
    message.bucket = object.bucket ?? "";
    message.commonRequestParams = (object.commonRequestParams !== undefined && object.commonRequestParams !== null)
      ? CommonRequestParams.fromPartial(object.commonRequestParams)
      : undefined;
    return message;
  },
};

function createBaseDeleteObjectAccessControlRequest(): DeleteObjectAccessControlRequest {
  return { bucket: "", entity: "", object: "", generation: Long.ZERO, commonRequestParams: undefined };
}

export const DeleteObjectAccessControlRequest: MessageFns<DeleteObjectAccessControlRequest> = {
  encode(message: DeleteObjectAccessControlRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.bucket !== "") {
      writer.uint32(10).string(message.bucket);
    }
    if (message.entity !== "") {
      writer.uint32(18).string(message.entity);
    }
    if (message.object !== "") {
      writer.uint32(26).string(message.object);
    }
    if (!message.generation.equals(Long.ZERO)) {
      writer.uint32(32).int64(message.generation.toString());
    }
    if (message.commonRequestParams !== undefined) {
      CommonRequestParams.encode(message.commonRequestParams, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteObjectAccessControlRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteObjectAccessControlRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.bucket = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.entity = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.object = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.generation = Long.fromString(reader.int64().toString());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.commonRequestParams = CommonRequestParams.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteObjectAccessControlRequest {
    return {
      bucket: isSet(object.bucket) ? globalThis.String(object.bucket) : "",
      entity: isSet(object.entity) ? globalThis.String(object.entity) : "",
      object: isSet(object.object) ? globalThis.String(object.object) : "",
      generation: isSet(object.generation) ? Long.fromValue(object.generation) : Long.ZERO,
      commonRequestParams: isSet(object.commonRequestParams)
        ? CommonRequestParams.fromJSON(object.commonRequestParams)
        : undefined,
    };
  },

  toJSON(message: DeleteObjectAccessControlRequest): unknown {
    const obj: any = {};
    if (message.bucket !== "") {
      obj.bucket = message.bucket;
    }
    if (message.entity !== "") {
      obj.entity = message.entity;
    }
    if (message.object !== "") {
      obj.object = message.object;
    }
    if (!message.generation.equals(Long.ZERO)) {
      obj.generation = (message.generation || Long.ZERO).toString();
    }
    if (message.commonRequestParams !== undefined) {
      obj.commonRequestParams = CommonRequestParams.toJSON(message.commonRequestParams);
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteObjectAccessControlRequest>): DeleteObjectAccessControlRequest {
    return DeleteObjectAccessControlRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteObjectAccessControlRequest>): DeleteObjectAccessControlRequest {
    const message = createBaseDeleteObjectAccessControlRequest();
    message.bucket = object.bucket ?? "";
    message.entity = object.entity ?? "";
    message.object = object.object ?? "";
    message.generation = (object.generation !== undefined && object.generation !== null)
      ? Long.fromValue(object.generation)
      : Long.ZERO;
    message.commonRequestParams = (object.commonRequestParams !== undefined && object.commonRequestParams !== null)
      ? CommonRequestParams.fromPartial(object.commonRequestParams)
      : undefined;
    return message;
  },
};

function createBaseGetObjectAccessControlRequest(): GetObjectAccessControlRequest {
  return { bucket: "", entity: "", object: "", generation: Long.ZERO, commonRequestParams: undefined };
}

export const GetObjectAccessControlRequest: MessageFns<GetObjectAccessControlRequest> = {
  encode(message: GetObjectAccessControlRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.bucket !== "") {
      writer.uint32(10).string(message.bucket);
    }
    if (message.entity !== "") {
      writer.uint32(18).string(message.entity);
    }
    if (message.object !== "") {
      writer.uint32(26).string(message.object);
    }
    if (!message.generation.equals(Long.ZERO)) {
      writer.uint32(32).int64(message.generation.toString());
    }
    if (message.commonRequestParams !== undefined) {
      CommonRequestParams.encode(message.commonRequestParams, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetObjectAccessControlRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetObjectAccessControlRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.bucket = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.entity = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.object = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.generation = Long.fromString(reader.int64().toString());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.commonRequestParams = CommonRequestParams.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetObjectAccessControlRequest {
    return {
      bucket: isSet(object.bucket) ? globalThis.String(object.bucket) : "",
      entity: isSet(object.entity) ? globalThis.String(object.entity) : "",
      object: isSet(object.object) ? globalThis.String(object.object) : "",
      generation: isSet(object.generation) ? Long.fromValue(object.generation) : Long.ZERO,
      commonRequestParams: isSet(object.commonRequestParams)
        ? CommonRequestParams.fromJSON(object.commonRequestParams)
        : undefined,
    };
  },

  toJSON(message: GetObjectAccessControlRequest): unknown {
    const obj: any = {};
    if (message.bucket !== "") {
      obj.bucket = message.bucket;
    }
    if (message.entity !== "") {
      obj.entity = message.entity;
    }
    if (message.object !== "") {
      obj.object = message.object;
    }
    if (!message.generation.equals(Long.ZERO)) {
      obj.generation = (message.generation || Long.ZERO).toString();
    }
    if (message.commonRequestParams !== undefined) {
      obj.commonRequestParams = CommonRequestParams.toJSON(message.commonRequestParams);
    }
    return obj;
  },

  create(base?: DeepPartial<GetObjectAccessControlRequest>): GetObjectAccessControlRequest {
    return GetObjectAccessControlRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetObjectAccessControlRequest>): GetObjectAccessControlRequest {
    const message = createBaseGetObjectAccessControlRequest();
    message.bucket = object.bucket ?? "";
    message.entity = object.entity ?? "";
    message.object = object.object ?? "";
    message.generation = (object.generation !== undefined && object.generation !== null)
      ? Long.fromValue(object.generation)
      : Long.ZERO;
    message.commonRequestParams = (object.commonRequestParams !== undefined && object.commonRequestParams !== null)
      ? CommonRequestParams.fromPartial(object.commonRequestParams)
      : undefined;
    return message;
  },
};

function createBaseInsertObjectAccessControlRequest(): InsertObjectAccessControlRequest {
  return {
    bucket: "",
    object: "",
    generation: Long.ZERO,
    objectAccessControl: undefined,
    commonRequestParams: undefined,
  };
}

export const InsertObjectAccessControlRequest: MessageFns<InsertObjectAccessControlRequest> = {
  encode(message: InsertObjectAccessControlRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.bucket !== "") {
      writer.uint32(10).string(message.bucket);
    }
    if (message.object !== "") {
      writer.uint32(18).string(message.object);
    }
    if (!message.generation.equals(Long.ZERO)) {
      writer.uint32(24).int64(message.generation.toString());
    }
    if (message.objectAccessControl !== undefined) {
      ObjectAccessControl.encode(message.objectAccessControl, writer.uint32(42).fork()).join();
    }
    if (message.commonRequestParams !== undefined) {
      CommonRequestParams.encode(message.commonRequestParams, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InsertObjectAccessControlRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInsertObjectAccessControlRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.bucket = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.object = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.generation = Long.fromString(reader.int64().toString());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.objectAccessControl = ObjectAccessControl.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.commonRequestParams = CommonRequestParams.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InsertObjectAccessControlRequest {
    return {
      bucket: isSet(object.bucket) ? globalThis.String(object.bucket) : "",
      object: isSet(object.object) ? globalThis.String(object.object) : "",
      generation: isSet(object.generation) ? Long.fromValue(object.generation) : Long.ZERO,
      objectAccessControl: isSet(object.objectAccessControl)
        ? ObjectAccessControl.fromJSON(object.objectAccessControl)
        : undefined,
      commonRequestParams: isSet(object.commonRequestParams)
        ? CommonRequestParams.fromJSON(object.commonRequestParams)
        : undefined,
    };
  },

  toJSON(message: InsertObjectAccessControlRequest): unknown {
    const obj: any = {};
    if (message.bucket !== "") {
      obj.bucket = message.bucket;
    }
    if (message.object !== "") {
      obj.object = message.object;
    }
    if (!message.generation.equals(Long.ZERO)) {
      obj.generation = (message.generation || Long.ZERO).toString();
    }
    if (message.objectAccessControl !== undefined) {
      obj.objectAccessControl = ObjectAccessControl.toJSON(message.objectAccessControl);
    }
    if (message.commonRequestParams !== undefined) {
      obj.commonRequestParams = CommonRequestParams.toJSON(message.commonRequestParams);
    }
    return obj;
  },

  create(base?: DeepPartial<InsertObjectAccessControlRequest>): InsertObjectAccessControlRequest {
    return InsertObjectAccessControlRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<InsertObjectAccessControlRequest>): InsertObjectAccessControlRequest {
    const message = createBaseInsertObjectAccessControlRequest();
    message.bucket = object.bucket ?? "";
    message.object = object.object ?? "";
    message.generation = (object.generation !== undefined && object.generation !== null)
      ? Long.fromValue(object.generation)
      : Long.ZERO;
    message.objectAccessControl = (object.objectAccessControl !== undefined && object.objectAccessControl !== null)
      ? ObjectAccessControl.fromPartial(object.objectAccessControl)
      : undefined;
    message.commonRequestParams = (object.commonRequestParams !== undefined && object.commonRequestParams !== null)
      ? CommonRequestParams.fromPartial(object.commonRequestParams)
      : undefined;
    return message;
  },
};

function createBaseListObjectAccessControlsRequest(): ListObjectAccessControlsRequest {
  return { bucket: "", object: "", generation: Long.ZERO, commonRequestParams: undefined };
}

export const ListObjectAccessControlsRequest: MessageFns<ListObjectAccessControlsRequest> = {
  encode(message: ListObjectAccessControlsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.bucket !== "") {
      writer.uint32(10).string(message.bucket);
    }
    if (message.object !== "") {
      writer.uint32(18).string(message.object);
    }
    if (!message.generation.equals(Long.ZERO)) {
      writer.uint32(24).int64(message.generation.toString());
    }
    if (message.commonRequestParams !== undefined) {
      CommonRequestParams.encode(message.commonRequestParams, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListObjectAccessControlsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListObjectAccessControlsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.bucket = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.object = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.generation = Long.fromString(reader.int64().toString());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.commonRequestParams = CommonRequestParams.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListObjectAccessControlsRequest {
    return {
      bucket: isSet(object.bucket) ? globalThis.String(object.bucket) : "",
      object: isSet(object.object) ? globalThis.String(object.object) : "",
      generation: isSet(object.generation) ? Long.fromValue(object.generation) : Long.ZERO,
      commonRequestParams: isSet(object.commonRequestParams)
        ? CommonRequestParams.fromJSON(object.commonRequestParams)
        : undefined,
    };
  },

  toJSON(message: ListObjectAccessControlsRequest): unknown {
    const obj: any = {};
    if (message.bucket !== "") {
      obj.bucket = message.bucket;
    }
    if (message.object !== "") {
      obj.object = message.object;
    }
    if (!message.generation.equals(Long.ZERO)) {
      obj.generation = (message.generation || Long.ZERO).toString();
    }
    if (message.commonRequestParams !== undefined) {
      obj.commonRequestParams = CommonRequestParams.toJSON(message.commonRequestParams);
    }
    return obj;
  },

  create(base?: DeepPartial<ListObjectAccessControlsRequest>): ListObjectAccessControlsRequest {
    return ListObjectAccessControlsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListObjectAccessControlsRequest>): ListObjectAccessControlsRequest {
    const message = createBaseListObjectAccessControlsRequest();
    message.bucket = object.bucket ?? "";
    message.object = object.object ?? "";
    message.generation = (object.generation !== undefined && object.generation !== null)
      ? Long.fromValue(object.generation)
      : Long.ZERO;
    message.commonRequestParams = (object.commonRequestParams !== undefined && object.commonRequestParams !== null)
      ? CommonRequestParams.fromPartial(object.commonRequestParams)
      : undefined;
    return message;
  },
};

function createBasePatchObjectAccessControlRequest(): PatchObjectAccessControlRequest {
  return {
    bucket: "",
    entity: "",
    object: "",
    generation: Long.ZERO,
    objectAccessControl: undefined,
    commonRequestParams: undefined,
    updateMask: undefined,
  };
}

export const PatchObjectAccessControlRequest: MessageFns<PatchObjectAccessControlRequest> = {
  encode(message: PatchObjectAccessControlRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.bucket !== "") {
      writer.uint32(10).string(message.bucket);
    }
    if (message.entity !== "") {
      writer.uint32(18).string(message.entity);
    }
    if (message.object !== "") {
      writer.uint32(26).string(message.object);
    }
    if (!message.generation.equals(Long.ZERO)) {
      writer.uint32(32).int64(message.generation.toString());
    }
    if (message.objectAccessControl !== undefined) {
      ObjectAccessControl.encode(message.objectAccessControl, writer.uint32(42).fork()).join();
    }
    if (message.commonRequestParams !== undefined) {
      CommonRequestParams.encode(message.commonRequestParams, writer.uint32(50).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PatchObjectAccessControlRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePatchObjectAccessControlRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.bucket = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.entity = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.object = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.generation = Long.fromString(reader.int64().toString());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.objectAccessControl = ObjectAccessControl.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.commonRequestParams = CommonRequestParams.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PatchObjectAccessControlRequest {
    return {
      bucket: isSet(object.bucket) ? globalThis.String(object.bucket) : "",
      entity: isSet(object.entity) ? globalThis.String(object.entity) : "",
      object: isSet(object.object) ? globalThis.String(object.object) : "",
      generation: isSet(object.generation) ? Long.fromValue(object.generation) : Long.ZERO,
      objectAccessControl: isSet(object.objectAccessControl)
        ? ObjectAccessControl.fromJSON(object.objectAccessControl)
        : undefined,
      commonRequestParams: isSet(object.commonRequestParams)
        ? CommonRequestParams.fromJSON(object.commonRequestParams)
        : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: PatchObjectAccessControlRequest): unknown {
    const obj: any = {};
    if (message.bucket !== "") {
      obj.bucket = message.bucket;
    }
    if (message.entity !== "") {
      obj.entity = message.entity;
    }
    if (message.object !== "") {
      obj.object = message.object;
    }
    if (!message.generation.equals(Long.ZERO)) {
      obj.generation = (message.generation || Long.ZERO).toString();
    }
    if (message.objectAccessControl !== undefined) {
      obj.objectAccessControl = ObjectAccessControl.toJSON(message.objectAccessControl);
    }
    if (message.commonRequestParams !== undefined) {
      obj.commonRequestParams = CommonRequestParams.toJSON(message.commonRequestParams);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<PatchObjectAccessControlRequest>): PatchObjectAccessControlRequest {
    return PatchObjectAccessControlRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PatchObjectAccessControlRequest>): PatchObjectAccessControlRequest {
    const message = createBasePatchObjectAccessControlRequest();
    message.bucket = object.bucket ?? "";
    message.entity = object.entity ?? "";
    message.object = object.object ?? "";
    message.generation = (object.generation !== undefined && object.generation !== null)
      ? Long.fromValue(object.generation)
      : Long.ZERO;
    message.objectAccessControl = (object.objectAccessControl !== undefined && object.objectAccessControl !== null)
      ? ObjectAccessControl.fromPartial(object.objectAccessControl)
      : undefined;
    message.commonRequestParams = (object.commonRequestParams !== undefined && object.commonRequestParams !== null)
      ? CommonRequestParams.fromPartial(object.commonRequestParams)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseUpdateObjectAccessControlRequest(): UpdateObjectAccessControlRequest {
  return {
    bucket: "",
    entity: "",
    object: "",
    generation: Long.ZERO,
    objectAccessControl: undefined,
    commonRequestParams: undefined,
    updateMask: undefined,
  };
}

export const UpdateObjectAccessControlRequest: MessageFns<UpdateObjectAccessControlRequest> = {
  encode(message: UpdateObjectAccessControlRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.bucket !== "") {
      writer.uint32(10).string(message.bucket);
    }
    if (message.entity !== "") {
      writer.uint32(18).string(message.entity);
    }
    if (message.object !== "") {
      writer.uint32(26).string(message.object);
    }
    if (!message.generation.equals(Long.ZERO)) {
      writer.uint32(32).int64(message.generation.toString());
    }
    if (message.objectAccessControl !== undefined) {
      ObjectAccessControl.encode(message.objectAccessControl, writer.uint32(50).fork()).join();
    }
    if (message.commonRequestParams !== undefined) {
      CommonRequestParams.encode(message.commonRequestParams, writer.uint32(58).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(66).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateObjectAccessControlRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateObjectAccessControlRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.bucket = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.entity = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.object = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.generation = Long.fromString(reader.int64().toString());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.objectAccessControl = ObjectAccessControl.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.commonRequestParams = CommonRequestParams.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateObjectAccessControlRequest {
    return {
      bucket: isSet(object.bucket) ? globalThis.String(object.bucket) : "",
      entity: isSet(object.entity) ? globalThis.String(object.entity) : "",
      object: isSet(object.object) ? globalThis.String(object.object) : "",
      generation: isSet(object.generation) ? Long.fromValue(object.generation) : Long.ZERO,
      objectAccessControl: isSet(object.objectAccessControl)
        ? ObjectAccessControl.fromJSON(object.objectAccessControl)
        : undefined,
      commonRequestParams: isSet(object.commonRequestParams)
        ? CommonRequestParams.fromJSON(object.commonRequestParams)
        : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateObjectAccessControlRequest): unknown {
    const obj: any = {};
    if (message.bucket !== "") {
      obj.bucket = message.bucket;
    }
    if (message.entity !== "") {
      obj.entity = message.entity;
    }
    if (message.object !== "") {
      obj.object = message.object;
    }
    if (!message.generation.equals(Long.ZERO)) {
      obj.generation = (message.generation || Long.ZERO).toString();
    }
    if (message.objectAccessControl !== undefined) {
      obj.objectAccessControl = ObjectAccessControl.toJSON(message.objectAccessControl);
    }
    if (message.commonRequestParams !== undefined) {
      obj.commonRequestParams = CommonRequestParams.toJSON(message.commonRequestParams);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateObjectAccessControlRequest>): UpdateObjectAccessControlRequest {
    return UpdateObjectAccessControlRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateObjectAccessControlRequest>): UpdateObjectAccessControlRequest {
    const message = createBaseUpdateObjectAccessControlRequest();
    message.bucket = object.bucket ?? "";
    message.entity = object.entity ?? "";
    message.object = object.object ?? "";
    message.generation = (object.generation !== undefined && object.generation !== null)
      ? Long.fromValue(object.generation)
      : Long.ZERO;
    message.objectAccessControl = (object.objectAccessControl !== undefined && object.objectAccessControl !== null)
      ? ObjectAccessControl.fromPartial(object.objectAccessControl)
      : undefined;
    message.commonRequestParams = (object.commonRequestParams !== undefined && object.commonRequestParams !== null)
      ? CommonRequestParams.fromPartial(object.commonRequestParams)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseComposeObjectRequest(): ComposeObjectRequest {
  return {
    destinationBucket: "",
    destinationObject: "",
    destinationPredefinedAcl: 0,
    destination: undefined,
    sourceObjects: [],
    ifGenerationMatch: undefined,
    ifMetagenerationMatch: undefined,
    kmsKeyName: "",
    commonObjectRequestParams: undefined,
    commonRequestParams: undefined,
  };
}

export const ComposeObjectRequest: MessageFns<ComposeObjectRequest> = {
  encode(message: ComposeObjectRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.destinationBucket !== "") {
      writer.uint32(10).string(message.destinationBucket);
    }
    if (message.destinationObject !== "") {
      writer.uint32(18).string(message.destinationObject);
    }
    if (message.destinationPredefinedAcl !== 0) {
      writer.uint32(24).int32(message.destinationPredefinedAcl);
    }
    if (message.destination !== undefined) {
      Object.encode(message.destination, writer.uint32(90).fork()).join();
    }
    for (const v of message.sourceObjects) {
      ComposeObjectRequest_SourceObjects.encode(v!, writer.uint32(98).fork()).join();
    }
    if (message.ifGenerationMatch !== undefined) {
      Int64Value.encode({ value: message.ifGenerationMatch! }, writer.uint32(34).fork()).join();
    }
    if (message.ifMetagenerationMatch !== undefined) {
      Int64Value.encode({ value: message.ifMetagenerationMatch! }, writer.uint32(42).fork()).join();
    }
    if (message.kmsKeyName !== "") {
      writer.uint32(50).string(message.kmsKeyName);
    }
    if (message.commonObjectRequestParams !== undefined) {
      CommonObjectRequestParams.encode(message.commonObjectRequestParams, writer.uint32(74).fork()).join();
    }
    if (message.commonRequestParams !== undefined) {
      CommonRequestParams.encode(message.commonRequestParams, writer.uint32(82).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ComposeObjectRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseComposeObjectRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.destinationBucket = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.destinationObject = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.destinationPredefinedAcl = reader.int32() as any;
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.destination = Object.decode(reader, reader.uint32());
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.sourceObjects.push(ComposeObjectRequest_SourceObjects.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.ifGenerationMatch = Int64Value.decode(reader, reader.uint32()).value;
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.ifMetagenerationMatch = Int64Value.decode(reader, reader.uint32()).value;
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.kmsKeyName = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.commonObjectRequestParams = CommonObjectRequestParams.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.commonRequestParams = CommonRequestParams.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ComposeObjectRequest {
    return {
      destinationBucket: isSet(object.destinationBucket) ? globalThis.String(object.destinationBucket) : "",
      destinationObject: isSet(object.destinationObject) ? globalThis.String(object.destinationObject) : "",
      destinationPredefinedAcl: isSet(object.destinationPredefinedAcl)
        ? commonEnums_PredefinedObjectAclFromJSON(object.destinationPredefinedAcl)
        : 0,
      destination: isSet(object.destination) ? Object.fromJSON(object.destination) : undefined,
      sourceObjects: globalThis.Array.isArray(object?.sourceObjects)
        ? object.sourceObjects.map((e: any) => ComposeObjectRequest_SourceObjects.fromJSON(e))
        : [],
      ifGenerationMatch: isSet(object.ifGenerationMatch) ? Long.fromValue(object.ifGenerationMatch) : undefined,
      ifMetagenerationMatch: isSet(object.ifMetagenerationMatch)
        ? Long.fromValue(object.ifMetagenerationMatch)
        : undefined,
      kmsKeyName: isSet(object.kmsKeyName) ? globalThis.String(object.kmsKeyName) : "",
      commonObjectRequestParams: isSet(object.commonObjectRequestParams)
        ? CommonObjectRequestParams.fromJSON(object.commonObjectRequestParams)
        : undefined,
      commonRequestParams: isSet(object.commonRequestParams)
        ? CommonRequestParams.fromJSON(object.commonRequestParams)
        : undefined,
    };
  },

  toJSON(message: ComposeObjectRequest): unknown {
    const obj: any = {};
    if (message.destinationBucket !== "") {
      obj.destinationBucket = message.destinationBucket;
    }
    if (message.destinationObject !== "") {
      obj.destinationObject = message.destinationObject;
    }
    if (message.destinationPredefinedAcl !== 0) {
      obj.destinationPredefinedAcl = commonEnums_PredefinedObjectAclToJSON(message.destinationPredefinedAcl);
    }
    if (message.destination !== undefined) {
      obj.destination = Object.toJSON(message.destination);
    }
    if (message.sourceObjects?.length) {
      obj.sourceObjects = message.sourceObjects.map((e) => ComposeObjectRequest_SourceObjects.toJSON(e));
    }
    if (message.ifGenerationMatch !== undefined) {
      obj.ifGenerationMatch = message.ifGenerationMatch;
    }
    if (message.ifMetagenerationMatch !== undefined) {
      obj.ifMetagenerationMatch = message.ifMetagenerationMatch;
    }
    if (message.kmsKeyName !== "") {
      obj.kmsKeyName = message.kmsKeyName;
    }
    if (message.commonObjectRequestParams !== undefined) {
      obj.commonObjectRequestParams = CommonObjectRequestParams.toJSON(message.commonObjectRequestParams);
    }
    if (message.commonRequestParams !== undefined) {
      obj.commonRequestParams = CommonRequestParams.toJSON(message.commonRequestParams);
    }
    return obj;
  },

  create(base?: DeepPartial<ComposeObjectRequest>): ComposeObjectRequest {
    return ComposeObjectRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ComposeObjectRequest>): ComposeObjectRequest {
    const message = createBaseComposeObjectRequest();
    message.destinationBucket = object.destinationBucket ?? "";
    message.destinationObject = object.destinationObject ?? "";
    message.destinationPredefinedAcl = object.destinationPredefinedAcl ?? 0;
    message.destination = (object.destination !== undefined && object.destination !== null)
      ? Object.fromPartial(object.destination)
      : undefined;
    message.sourceObjects = object.sourceObjects?.map((e) => ComposeObjectRequest_SourceObjects.fromPartial(e)) || [];
    message.ifGenerationMatch = (object.ifGenerationMatch !== undefined && object.ifGenerationMatch !== null)
      ? Long.fromValue(object.ifGenerationMatch)
      : undefined;
    message.ifMetagenerationMatch =
      (object.ifMetagenerationMatch !== undefined && object.ifMetagenerationMatch !== null)
        ? Long.fromValue(object.ifMetagenerationMatch)
        : undefined;
    message.kmsKeyName = object.kmsKeyName ?? "";
    message.commonObjectRequestParams =
      (object.commonObjectRequestParams !== undefined && object.commonObjectRequestParams !== null)
        ? CommonObjectRequestParams.fromPartial(object.commonObjectRequestParams)
        : undefined;
    message.commonRequestParams = (object.commonRequestParams !== undefined && object.commonRequestParams !== null)
      ? CommonRequestParams.fromPartial(object.commonRequestParams)
      : undefined;
    return message;
  },
};

function createBaseComposeObjectRequest_SourceObjects(): ComposeObjectRequest_SourceObjects {
  return { name: "", generation: Long.ZERO, objectPreconditions: undefined };
}

export const ComposeObjectRequest_SourceObjects: MessageFns<ComposeObjectRequest_SourceObjects> = {
  encode(message: ComposeObjectRequest_SourceObjects, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (!message.generation.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.generation.toString());
    }
    if (message.objectPreconditions !== undefined) {
      ComposeObjectRequest_SourceObjects_ObjectPreconditions.encode(
        message.objectPreconditions,
        writer.uint32(26).fork(),
      ).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ComposeObjectRequest_SourceObjects {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseComposeObjectRequest_SourceObjects();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.generation = Long.fromString(reader.int64().toString());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.objectPreconditions = ComposeObjectRequest_SourceObjects_ObjectPreconditions.decode(
            reader,
            reader.uint32(),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ComposeObjectRequest_SourceObjects {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      generation: isSet(object.generation) ? Long.fromValue(object.generation) : Long.ZERO,
      objectPreconditions: isSet(object.objectPreconditions)
        ? ComposeObjectRequest_SourceObjects_ObjectPreconditions.fromJSON(object.objectPreconditions)
        : undefined,
    };
  },

  toJSON(message: ComposeObjectRequest_SourceObjects): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (!message.generation.equals(Long.ZERO)) {
      obj.generation = (message.generation || Long.ZERO).toString();
    }
    if (message.objectPreconditions !== undefined) {
      obj.objectPreconditions = ComposeObjectRequest_SourceObjects_ObjectPreconditions.toJSON(
        message.objectPreconditions,
      );
    }
    return obj;
  },

  create(base?: DeepPartial<ComposeObjectRequest_SourceObjects>): ComposeObjectRequest_SourceObjects {
    return ComposeObjectRequest_SourceObjects.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ComposeObjectRequest_SourceObjects>): ComposeObjectRequest_SourceObjects {
    const message = createBaseComposeObjectRequest_SourceObjects();
    message.name = object.name ?? "";
    message.generation = (object.generation !== undefined && object.generation !== null)
      ? Long.fromValue(object.generation)
      : Long.ZERO;
    message.objectPreconditions = (object.objectPreconditions !== undefined && object.objectPreconditions !== null)
      ? ComposeObjectRequest_SourceObjects_ObjectPreconditions.fromPartial(object.objectPreconditions)
      : undefined;
    return message;
  },
};

function createBaseComposeObjectRequest_SourceObjects_ObjectPreconditions(): ComposeObjectRequest_SourceObjects_ObjectPreconditions {
  return { ifGenerationMatch: undefined };
}

export const ComposeObjectRequest_SourceObjects_ObjectPreconditions: MessageFns<
  ComposeObjectRequest_SourceObjects_ObjectPreconditions
> = {
  encode(
    message: ComposeObjectRequest_SourceObjects_ObjectPreconditions,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.ifGenerationMatch !== undefined) {
      Int64Value.encode({ value: message.ifGenerationMatch! }, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ComposeObjectRequest_SourceObjects_ObjectPreconditions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseComposeObjectRequest_SourceObjects_ObjectPreconditions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.ifGenerationMatch = Int64Value.decode(reader, reader.uint32()).value;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ComposeObjectRequest_SourceObjects_ObjectPreconditions {
    return {
      ifGenerationMatch: isSet(object.ifGenerationMatch) ? Long.fromValue(object.ifGenerationMatch) : undefined,
    };
  },

  toJSON(message: ComposeObjectRequest_SourceObjects_ObjectPreconditions): unknown {
    const obj: any = {};
    if (message.ifGenerationMatch !== undefined) {
      obj.ifGenerationMatch = message.ifGenerationMatch;
    }
    return obj;
  },

  create(
    base?: DeepPartial<ComposeObjectRequest_SourceObjects_ObjectPreconditions>,
  ): ComposeObjectRequest_SourceObjects_ObjectPreconditions {
    return ComposeObjectRequest_SourceObjects_ObjectPreconditions.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ComposeObjectRequest_SourceObjects_ObjectPreconditions>,
  ): ComposeObjectRequest_SourceObjects_ObjectPreconditions {
    const message = createBaseComposeObjectRequest_SourceObjects_ObjectPreconditions();
    message.ifGenerationMatch = (object.ifGenerationMatch !== undefined && object.ifGenerationMatch !== null)
      ? Long.fromValue(object.ifGenerationMatch)
      : undefined;
    return message;
  },
};

function createBaseCopyObjectRequest(): CopyObjectRequest {
  return {
    destinationBucket: "",
    destinationObject: "",
    destinationPredefinedAcl: 0,
    ifGenerationMatch: undefined,
    ifGenerationNotMatch: undefined,
    ifMetagenerationMatch: undefined,
    ifMetagenerationNotMatch: undefined,
    ifSourceGenerationMatch: undefined,
    ifSourceGenerationNotMatch: undefined,
    ifSourceMetagenerationMatch: undefined,
    ifSourceMetagenerationNotMatch: undefined,
    projection: 0,
    sourceBucket: "",
    sourceObject: "",
    sourceGeneration: Long.ZERO,
    destination: undefined,
    destinationKmsKeyName: "",
    commonObjectRequestParams: undefined,
    commonRequestParams: undefined,
  };
}

export const CopyObjectRequest: MessageFns<CopyObjectRequest> = {
  encode(message: CopyObjectRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.destinationBucket !== "") {
      writer.uint32(10).string(message.destinationBucket);
    }
    if (message.destinationObject !== "") {
      writer.uint32(18).string(message.destinationObject);
    }
    if (message.destinationPredefinedAcl !== 0) {
      writer.uint32(24).int32(message.destinationPredefinedAcl);
    }
    if (message.ifGenerationMatch !== undefined) {
      Int64Value.encode({ value: message.ifGenerationMatch! }, writer.uint32(34).fork()).join();
    }
    if (message.ifGenerationNotMatch !== undefined) {
      Int64Value.encode({ value: message.ifGenerationNotMatch! }, writer.uint32(42).fork()).join();
    }
    if (message.ifMetagenerationMatch !== undefined) {
      Int64Value.encode({ value: message.ifMetagenerationMatch! }, writer.uint32(50).fork()).join();
    }
    if (message.ifMetagenerationNotMatch !== undefined) {
      Int64Value.encode({ value: message.ifMetagenerationNotMatch! }, writer.uint32(58).fork()).join();
    }
    if (message.ifSourceGenerationMatch !== undefined) {
      Int64Value.encode({ value: message.ifSourceGenerationMatch! }, writer.uint32(66).fork()).join();
    }
    if (message.ifSourceGenerationNotMatch !== undefined) {
      Int64Value.encode({ value: message.ifSourceGenerationNotMatch! }, writer.uint32(74).fork()).join();
    }
    if (message.ifSourceMetagenerationMatch !== undefined) {
      Int64Value.encode({ value: message.ifSourceMetagenerationMatch! }, writer.uint32(82).fork()).join();
    }
    if (message.ifSourceMetagenerationNotMatch !== undefined) {
      Int64Value.encode({ value: message.ifSourceMetagenerationNotMatch! }, writer.uint32(90).fork()).join();
    }
    if (message.projection !== 0) {
      writer.uint32(96).int32(message.projection);
    }
    if (message.sourceBucket !== "") {
      writer.uint32(106).string(message.sourceBucket);
    }
    if (message.sourceObject !== "") {
      writer.uint32(114).string(message.sourceObject);
    }
    if (!message.sourceGeneration.equals(Long.ZERO)) {
      writer.uint32(120).int64(message.sourceGeneration.toString());
    }
    if (message.destination !== undefined) {
      Object.encode(message.destination, writer.uint32(138).fork()).join();
    }
    if (message.destinationKmsKeyName !== "") {
      writer.uint32(162).string(message.destinationKmsKeyName);
    }
    if (message.commonObjectRequestParams !== undefined) {
      CommonObjectRequestParams.encode(message.commonObjectRequestParams, writer.uint32(146).fork()).join();
    }
    if (message.commonRequestParams !== undefined) {
      CommonRequestParams.encode(message.commonRequestParams, writer.uint32(154).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CopyObjectRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCopyObjectRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.destinationBucket = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.destinationObject = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.destinationPredefinedAcl = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.ifGenerationMatch = Int64Value.decode(reader, reader.uint32()).value;
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.ifGenerationNotMatch = Int64Value.decode(reader, reader.uint32()).value;
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.ifMetagenerationMatch = Int64Value.decode(reader, reader.uint32()).value;
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.ifMetagenerationNotMatch = Int64Value.decode(reader, reader.uint32()).value;
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.ifSourceGenerationMatch = Int64Value.decode(reader, reader.uint32()).value;
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.ifSourceGenerationNotMatch = Int64Value.decode(reader, reader.uint32()).value;
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.ifSourceMetagenerationMatch = Int64Value.decode(reader, reader.uint32()).value;
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.ifSourceMetagenerationNotMatch = Int64Value.decode(reader, reader.uint32()).value;
          continue;
        case 12:
          if (tag !== 96) {
            break;
          }

          message.projection = reader.int32() as any;
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.sourceBucket = reader.string();
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.sourceObject = reader.string();
          continue;
        case 15:
          if (tag !== 120) {
            break;
          }

          message.sourceGeneration = Long.fromString(reader.int64().toString());
          continue;
        case 17:
          if (tag !== 138) {
            break;
          }

          message.destination = Object.decode(reader, reader.uint32());
          continue;
        case 20:
          if (tag !== 162) {
            break;
          }

          message.destinationKmsKeyName = reader.string();
          continue;
        case 18:
          if (tag !== 146) {
            break;
          }

          message.commonObjectRequestParams = CommonObjectRequestParams.decode(reader, reader.uint32());
          continue;
        case 19:
          if (tag !== 154) {
            break;
          }

          message.commonRequestParams = CommonRequestParams.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CopyObjectRequest {
    return {
      destinationBucket: isSet(object.destinationBucket) ? globalThis.String(object.destinationBucket) : "",
      destinationObject: isSet(object.destinationObject) ? globalThis.String(object.destinationObject) : "",
      destinationPredefinedAcl: isSet(object.destinationPredefinedAcl)
        ? commonEnums_PredefinedObjectAclFromJSON(object.destinationPredefinedAcl)
        : 0,
      ifGenerationMatch: isSet(object.ifGenerationMatch) ? Long.fromValue(object.ifGenerationMatch) : undefined,
      ifGenerationNotMatch: isSet(object.ifGenerationNotMatch)
        ? Long.fromValue(object.ifGenerationNotMatch)
        : undefined,
      ifMetagenerationMatch: isSet(object.ifMetagenerationMatch)
        ? Long.fromValue(object.ifMetagenerationMatch)
        : undefined,
      ifMetagenerationNotMatch: isSet(object.ifMetagenerationNotMatch)
        ? Long.fromValue(object.ifMetagenerationNotMatch)
        : undefined,
      ifSourceGenerationMatch: isSet(object.ifSourceGenerationMatch)
        ? Long.fromValue(object.ifSourceGenerationMatch)
        : undefined,
      ifSourceGenerationNotMatch: isSet(object.ifSourceGenerationNotMatch)
        ? Long.fromValue(object.ifSourceGenerationNotMatch)
        : undefined,
      ifSourceMetagenerationMatch: isSet(object.ifSourceMetagenerationMatch)
        ? Long.fromValue(object.ifSourceMetagenerationMatch)
        : undefined,
      ifSourceMetagenerationNotMatch: isSet(object.ifSourceMetagenerationNotMatch)
        ? Long.fromValue(object.ifSourceMetagenerationNotMatch)
        : undefined,
      projection: isSet(object.projection) ? commonEnums_ProjectionFromJSON(object.projection) : 0,
      sourceBucket: isSet(object.sourceBucket) ? globalThis.String(object.sourceBucket) : "",
      sourceObject: isSet(object.sourceObject) ? globalThis.String(object.sourceObject) : "",
      sourceGeneration: isSet(object.sourceGeneration) ? Long.fromValue(object.sourceGeneration) : Long.ZERO,
      destination: isSet(object.destination) ? Object.fromJSON(object.destination) : undefined,
      destinationKmsKeyName: isSet(object.destinationKmsKeyName) ? globalThis.String(object.destinationKmsKeyName) : "",
      commonObjectRequestParams: isSet(object.commonObjectRequestParams)
        ? CommonObjectRequestParams.fromJSON(object.commonObjectRequestParams)
        : undefined,
      commonRequestParams: isSet(object.commonRequestParams)
        ? CommonRequestParams.fromJSON(object.commonRequestParams)
        : undefined,
    };
  },

  toJSON(message: CopyObjectRequest): unknown {
    const obj: any = {};
    if (message.destinationBucket !== "") {
      obj.destinationBucket = message.destinationBucket;
    }
    if (message.destinationObject !== "") {
      obj.destinationObject = message.destinationObject;
    }
    if (message.destinationPredefinedAcl !== 0) {
      obj.destinationPredefinedAcl = commonEnums_PredefinedObjectAclToJSON(message.destinationPredefinedAcl);
    }
    if (message.ifGenerationMatch !== undefined) {
      obj.ifGenerationMatch = message.ifGenerationMatch;
    }
    if (message.ifGenerationNotMatch !== undefined) {
      obj.ifGenerationNotMatch = message.ifGenerationNotMatch;
    }
    if (message.ifMetagenerationMatch !== undefined) {
      obj.ifMetagenerationMatch = message.ifMetagenerationMatch;
    }
    if (message.ifMetagenerationNotMatch !== undefined) {
      obj.ifMetagenerationNotMatch = message.ifMetagenerationNotMatch;
    }
    if (message.ifSourceGenerationMatch !== undefined) {
      obj.ifSourceGenerationMatch = message.ifSourceGenerationMatch;
    }
    if (message.ifSourceGenerationNotMatch !== undefined) {
      obj.ifSourceGenerationNotMatch = message.ifSourceGenerationNotMatch;
    }
    if (message.ifSourceMetagenerationMatch !== undefined) {
      obj.ifSourceMetagenerationMatch = message.ifSourceMetagenerationMatch;
    }
    if (message.ifSourceMetagenerationNotMatch !== undefined) {
      obj.ifSourceMetagenerationNotMatch = message.ifSourceMetagenerationNotMatch;
    }
    if (message.projection !== 0) {
      obj.projection = commonEnums_ProjectionToJSON(message.projection);
    }
    if (message.sourceBucket !== "") {
      obj.sourceBucket = message.sourceBucket;
    }
    if (message.sourceObject !== "") {
      obj.sourceObject = message.sourceObject;
    }
    if (!message.sourceGeneration.equals(Long.ZERO)) {
      obj.sourceGeneration = (message.sourceGeneration || Long.ZERO).toString();
    }
    if (message.destination !== undefined) {
      obj.destination = Object.toJSON(message.destination);
    }
    if (message.destinationKmsKeyName !== "") {
      obj.destinationKmsKeyName = message.destinationKmsKeyName;
    }
    if (message.commonObjectRequestParams !== undefined) {
      obj.commonObjectRequestParams = CommonObjectRequestParams.toJSON(message.commonObjectRequestParams);
    }
    if (message.commonRequestParams !== undefined) {
      obj.commonRequestParams = CommonRequestParams.toJSON(message.commonRequestParams);
    }
    return obj;
  },

  create(base?: DeepPartial<CopyObjectRequest>): CopyObjectRequest {
    return CopyObjectRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CopyObjectRequest>): CopyObjectRequest {
    const message = createBaseCopyObjectRequest();
    message.destinationBucket = object.destinationBucket ?? "";
    message.destinationObject = object.destinationObject ?? "";
    message.destinationPredefinedAcl = object.destinationPredefinedAcl ?? 0;
    message.ifGenerationMatch = (object.ifGenerationMatch !== undefined && object.ifGenerationMatch !== null)
      ? Long.fromValue(object.ifGenerationMatch)
      : undefined;
    message.ifGenerationNotMatch = (object.ifGenerationNotMatch !== undefined && object.ifGenerationNotMatch !== null)
      ? Long.fromValue(object.ifGenerationNotMatch)
      : undefined;
    message.ifMetagenerationMatch =
      (object.ifMetagenerationMatch !== undefined && object.ifMetagenerationMatch !== null)
        ? Long.fromValue(object.ifMetagenerationMatch)
        : undefined;
    message.ifMetagenerationNotMatch =
      (object.ifMetagenerationNotMatch !== undefined && object.ifMetagenerationNotMatch !== null)
        ? Long.fromValue(object.ifMetagenerationNotMatch)
        : undefined;
    message.ifSourceGenerationMatch =
      (object.ifSourceGenerationMatch !== undefined && object.ifSourceGenerationMatch !== null)
        ? Long.fromValue(object.ifSourceGenerationMatch)
        : undefined;
    message.ifSourceGenerationNotMatch =
      (object.ifSourceGenerationNotMatch !== undefined && object.ifSourceGenerationNotMatch !== null)
        ? Long.fromValue(object.ifSourceGenerationNotMatch)
        : undefined;
    message.ifSourceMetagenerationMatch =
      (object.ifSourceMetagenerationMatch !== undefined && object.ifSourceMetagenerationMatch !== null)
        ? Long.fromValue(object.ifSourceMetagenerationMatch)
        : undefined;
    message.ifSourceMetagenerationNotMatch =
      (object.ifSourceMetagenerationNotMatch !== undefined && object.ifSourceMetagenerationNotMatch !== null)
        ? Long.fromValue(object.ifSourceMetagenerationNotMatch)
        : undefined;
    message.projection = object.projection ?? 0;
    message.sourceBucket = object.sourceBucket ?? "";
    message.sourceObject = object.sourceObject ?? "";
    message.sourceGeneration = (object.sourceGeneration !== undefined && object.sourceGeneration !== null)
      ? Long.fromValue(object.sourceGeneration)
      : Long.ZERO;
    message.destination = (object.destination !== undefined && object.destination !== null)
      ? Object.fromPartial(object.destination)
      : undefined;
    message.destinationKmsKeyName = object.destinationKmsKeyName ?? "";
    message.commonObjectRequestParams =
      (object.commonObjectRequestParams !== undefined && object.commonObjectRequestParams !== null)
        ? CommonObjectRequestParams.fromPartial(object.commonObjectRequestParams)
        : undefined;
    message.commonRequestParams = (object.commonRequestParams !== undefined && object.commonRequestParams !== null)
      ? CommonRequestParams.fromPartial(object.commonRequestParams)
      : undefined;
    return message;
  },
};

function createBaseDeleteObjectRequest(): DeleteObjectRequest {
  return {
    bucket: "",
    object: "",
    uploadId: "",
    generation: Long.ZERO,
    ifGenerationMatch: undefined,
    ifGenerationNotMatch: undefined,
    ifMetagenerationMatch: undefined,
    ifMetagenerationNotMatch: undefined,
    commonObjectRequestParams: undefined,
    commonRequestParams: undefined,
  };
}

export const DeleteObjectRequest: MessageFns<DeleteObjectRequest> = {
  encode(message: DeleteObjectRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.bucket !== "") {
      writer.uint32(10).string(message.bucket);
    }
    if (message.object !== "") {
      writer.uint32(18).string(message.object);
    }
    if (message.uploadId !== "") {
      writer.uint32(26).string(message.uploadId);
    }
    if (!message.generation.equals(Long.ZERO)) {
      writer.uint32(32).int64(message.generation.toString());
    }
    if (message.ifGenerationMatch !== undefined) {
      Int64Value.encode({ value: message.ifGenerationMatch! }, writer.uint32(42).fork()).join();
    }
    if (message.ifGenerationNotMatch !== undefined) {
      Int64Value.encode({ value: message.ifGenerationNotMatch! }, writer.uint32(50).fork()).join();
    }
    if (message.ifMetagenerationMatch !== undefined) {
      Int64Value.encode({ value: message.ifMetagenerationMatch! }, writer.uint32(58).fork()).join();
    }
    if (message.ifMetagenerationNotMatch !== undefined) {
      Int64Value.encode({ value: message.ifMetagenerationNotMatch! }, writer.uint32(66).fork()).join();
    }
    if (message.commonObjectRequestParams !== undefined) {
      CommonObjectRequestParams.encode(message.commonObjectRequestParams, writer.uint32(82).fork()).join();
    }
    if (message.commonRequestParams !== undefined) {
      CommonRequestParams.encode(message.commonRequestParams, writer.uint32(90).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteObjectRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteObjectRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.bucket = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.object = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.uploadId = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.generation = Long.fromString(reader.int64().toString());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.ifGenerationMatch = Int64Value.decode(reader, reader.uint32()).value;
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.ifGenerationNotMatch = Int64Value.decode(reader, reader.uint32()).value;
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.ifMetagenerationMatch = Int64Value.decode(reader, reader.uint32()).value;
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.ifMetagenerationNotMatch = Int64Value.decode(reader, reader.uint32()).value;
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.commonObjectRequestParams = CommonObjectRequestParams.decode(reader, reader.uint32());
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.commonRequestParams = CommonRequestParams.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteObjectRequest {
    return {
      bucket: isSet(object.bucket) ? globalThis.String(object.bucket) : "",
      object: isSet(object.object) ? globalThis.String(object.object) : "",
      uploadId: isSet(object.uploadId) ? globalThis.String(object.uploadId) : "",
      generation: isSet(object.generation) ? Long.fromValue(object.generation) : Long.ZERO,
      ifGenerationMatch: isSet(object.ifGenerationMatch) ? Long.fromValue(object.ifGenerationMatch) : undefined,
      ifGenerationNotMatch: isSet(object.ifGenerationNotMatch)
        ? Long.fromValue(object.ifGenerationNotMatch)
        : undefined,
      ifMetagenerationMatch: isSet(object.ifMetagenerationMatch)
        ? Long.fromValue(object.ifMetagenerationMatch)
        : undefined,
      ifMetagenerationNotMatch: isSet(object.ifMetagenerationNotMatch)
        ? Long.fromValue(object.ifMetagenerationNotMatch)
        : undefined,
      commonObjectRequestParams: isSet(object.commonObjectRequestParams)
        ? CommonObjectRequestParams.fromJSON(object.commonObjectRequestParams)
        : undefined,
      commonRequestParams: isSet(object.commonRequestParams)
        ? CommonRequestParams.fromJSON(object.commonRequestParams)
        : undefined,
    };
  },

  toJSON(message: DeleteObjectRequest): unknown {
    const obj: any = {};
    if (message.bucket !== "") {
      obj.bucket = message.bucket;
    }
    if (message.object !== "") {
      obj.object = message.object;
    }
    if (message.uploadId !== "") {
      obj.uploadId = message.uploadId;
    }
    if (!message.generation.equals(Long.ZERO)) {
      obj.generation = (message.generation || Long.ZERO).toString();
    }
    if (message.ifGenerationMatch !== undefined) {
      obj.ifGenerationMatch = message.ifGenerationMatch;
    }
    if (message.ifGenerationNotMatch !== undefined) {
      obj.ifGenerationNotMatch = message.ifGenerationNotMatch;
    }
    if (message.ifMetagenerationMatch !== undefined) {
      obj.ifMetagenerationMatch = message.ifMetagenerationMatch;
    }
    if (message.ifMetagenerationNotMatch !== undefined) {
      obj.ifMetagenerationNotMatch = message.ifMetagenerationNotMatch;
    }
    if (message.commonObjectRequestParams !== undefined) {
      obj.commonObjectRequestParams = CommonObjectRequestParams.toJSON(message.commonObjectRequestParams);
    }
    if (message.commonRequestParams !== undefined) {
      obj.commonRequestParams = CommonRequestParams.toJSON(message.commonRequestParams);
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteObjectRequest>): DeleteObjectRequest {
    return DeleteObjectRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteObjectRequest>): DeleteObjectRequest {
    const message = createBaseDeleteObjectRequest();
    message.bucket = object.bucket ?? "";
    message.object = object.object ?? "";
    message.uploadId = object.uploadId ?? "";
    message.generation = (object.generation !== undefined && object.generation !== null)
      ? Long.fromValue(object.generation)
      : Long.ZERO;
    message.ifGenerationMatch = (object.ifGenerationMatch !== undefined && object.ifGenerationMatch !== null)
      ? Long.fromValue(object.ifGenerationMatch)
      : undefined;
    message.ifGenerationNotMatch = (object.ifGenerationNotMatch !== undefined && object.ifGenerationNotMatch !== null)
      ? Long.fromValue(object.ifGenerationNotMatch)
      : undefined;
    message.ifMetagenerationMatch =
      (object.ifMetagenerationMatch !== undefined && object.ifMetagenerationMatch !== null)
        ? Long.fromValue(object.ifMetagenerationMatch)
        : undefined;
    message.ifMetagenerationNotMatch =
      (object.ifMetagenerationNotMatch !== undefined && object.ifMetagenerationNotMatch !== null)
        ? Long.fromValue(object.ifMetagenerationNotMatch)
        : undefined;
    message.commonObjectRequestParams =
      (object.commonObjectRequestParams !== undefined && object.commonObjectRequestParams !== null)
        ? CommonObjectRequestParams.fromPartial(object.commonObjectRequestParams)
        : undefined;
    message.commonRequestParams = (object.commonRequestParams !== undefined && object.commonRequestParams !== null)
      ? CommonRequestParams.fromPartial(object.commonRequestParams)
      : undefined;
    return message;
  },
};

function createBaseGetObjectMediaRequest(): GetObjectMediaRequest {
  return {
    bucket: "",
    object: "",
    generation: Long.ZERO,
    readOffset: Long.ZERO,
    readLimit: Long.ZERO,
    ifGenerationMatch: undefined,
    ifGenerationNotMatch: undefined,
    ifMetagenerationMatch: undefined,
    ifMetagenerationNotMatch: undefined,
    commonObjectRequestParams: undefined,
    commonRequestParams: undefined,
  };
}

export const GetObjectMediaRequest: MessageFns<GetObjectMediaRequest> = {
  encode(message: GetObjectMediaRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.bucket !== "") {
      writer.uint32(10).string(message.bucket);
    }
    if (message.object !== "") {
      writer.uint32(18).string(message.object);
    }
    if (!message.generation.equals(Long.ZERO)) {
      writer.uint32(24).int64(message.generation.toString());
    }
    if (!message.readOffset.equals(Long.ZERO)) {
      writer.uint32(32).int64(message.readOffset.toString());
    }
    if (!message.readLimit.equals(Long.ZERO)) {
      writer.uint32(40).int64(message.readLimit.toString());
    }
    if (message.ifGenerationMatch !== undefined) {
      Int64Value.encode({ value: message.ifGenerationMatch! }, writer.uint32(50).fork()).join();
    }
    if (message.ifGenerationNotMatch !== undefined) {
      Int64Value.encode({ value: message.ifGenerationNotMatch! }, writer.uint32(58).fork()).join();
    }
    if (message.ifMetagenerationMatch !== undefined) {
      Int64Value.encode({ value: message.ifMetagenerationMatch! }, writer.uint32(66).fork()).join();
    }
    if (message.ifMetagenerationNotMatch !== undefined) {
      Int64Value.encode({ value: message.ifMetagenerationNotMatch! }, writer.uint32(74).fork()).join();
    }
    if (message.commonObjectRequestParams !== undefined) {
      CommonObjectRequestParams.encode(message.commonObjectRequestParams, writer.uint32(90).fork()).join();
    }
    if (message.commonRequestParams !== undefined) {
      CommonRequestParams.encode(message.commonRequestParams, writer.uint32(98).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetObjectMediaRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetObjectMediaRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.bucket = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.object = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.generation = Long.fromString(reader.int64().toString());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.readOffset = Long.fromString(reader.int64().toString());
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.readLimit = Long.fromString(reader.int64().toString());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.ifGenerationMatch = Int64Value.decode(reader, reader.uint32()).value;
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.ifGenerationNotMatch = Int64Value.decode(reader, reader.uint32()).value;
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.ifMetagenerationMatch = Int64Value.decode(reader, reader.uint32()).value;
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.ifMetagenerationNotMatch = Int64Value.decode(reader, reader.uint32()).value;
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.commonObjectRequestParams = CommonObjectRequestParams.decode(reader, reader.uint32());
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.commonRequestParams = CommonRequestParams.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetObjectMediaRequest {
    return {
      bucket: isSet(object.bucket) ? globalThis.String(object.bucket) : "",
      object: isSet(object.object) ? globalThis.String(object.object) : "",
      generation: isSet(object.generation) ? Long.fromValue(object.generation) : Long.ZERO,
      readOffset: isSet(object.readOffset) ? Long.fromValue(object.readOffset) : Long.ZERO,
      readLimit: isSet(object.readLimit) ? Long.fromValue(object.readLimit) : Long.ZERO,
      ifGenerationMatch: isSet(object.ifGenerationMatch) ? Long.fromValue(object.ifGenerationMatch) : undefined,
      ifGenerationNotMatch: isSet(object.ifGenerationNotMatch)
        ? Long.fromValue(object.ifGenerationNotMatch)
        : undefined,
      ifMetagenerationMatch: isSet(object.ifMetagenerationMatch)
        ? Long.fromValue(object.ifMetagenerationMatch)
        : undefined,
      ifMetagenerationNotMatch: isSet(object.ifMetagenerationNotMatch)
        ? Long.fromValue(object.ifMetagenerationNotMatch)
        : undefined,
      commonObjectRequestParams: isSet(object.commonObjectRequestParams)
        ? CommonObjectRequestParams.fromJSON(object.commonObjectRequestParams)
        : undefined,
      commonRequestParams: isSet(object.commonRequestParams)
        ? CommonRequestParams.fromJSON(object.commonRequestParams)
        : undefined,
    };
  },

  toJSON(message: GetObjectMediaRequest): unknown {
    const obj: any = {};
    if (message.bucket !== "") {
      obj.bucket = message.bucket;
    }
    if (message.object !== "") {
      obj.object = message.object;
    }
    if (!message.generation.equals(Long.ZERO)) {
      obj.generation = (message.generation || Long.ZERO).toString();
    }
    if (!message.readOffset.equals(Long.ZERO)) {
      obj.readOffset = (message.readOffset || Long.ZERO).toString();
    }
    if (!message.readLimit.equals(Long.ZERO)) {
      obj.readLimit = (message.readLimit || Long.ZERO).toString();
    }
    if (message.ifGenerationMatch !== undefined) {
      obj.ifGenerationMatch = message.ifGenerationMatch;
    }
    if (message.ifGenerationNotMatch !== undefined) {
      obj.ifGenerationNotMatch = message.ifGenerationNotMatch;
    }
    if (message.ifMetagenerationMatch !== undefined) {
      obj.ifMetagenerationMatch = message.ifMetagenerationMatch;
    }
    if (message.ifMetagenerationNotMatch !== undefined) {
      obj.ifMetagenerationNotMatch = message.ifMetagenerationNotMatch;
    }
    if (message.commonObjectRequestParams !== undefined) {
      obj.commonObjectRequestParams = CommonObjectRequestParams.toJSON(message.commonObjectRequestParams);
    }
    if (message.commonRequestParams !== undefined) {
      obj.commonRequestParams = CommonRequestParams.toJSON(message.commonRequestParams);
    }
    return obj;
  },

  create(base?: DeepPartial<GetObjectMediaRequest>): GetObjectMediaRequest {
    return GetObjectMediaRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetObjectMediaRequest>): GetObjectMediaRequest {
    const message = createBaseGetObjectMediaRequest();
    message.bucket = object.bucket ?? "";
    message.object = object.object ?? "";
    message.generation = (object.generation !== undefined && object.generation !== null)
      ? Long.fromValue(object.generation)
      : Long.ZERO;
    message.readOffset = (object.readOffset !== undefined && object.readOffset !== null)
      ? Long.fromValue(object.readOffset)
      : Long.ZERO;
    message.readLimit = (object.readLimit !== undefined && object.readLimit !== null)
      ? Long.fromValue(object.readLimit)
      : Long.ZERO;
    message.ifGenerationMatch = (object.ifGenerationMatch !== undefined && object.ifGenerationMatch !== null)
      ? Long.fromValue(object.ifGenerationMatch)
      : undefined;
    message.ifGenerationNotMatch = (object.ifGenerationNotMatch !== undefined && object.ifGenerationNotMatch !== null)
      ? Long.fromValue(object.ifGenerationNotMatch)
      : undefined;
    message.ifMetagenerationMatch =
      (object.ifMetagenerationMatch !== undefined && object.ifMetagenerationMatch !== null)
        ? Long.fromValue(object.ifMetagenerationMatch)
        : undefined;
    message.ifMetagenerationNotMatch =
      (object.ifMetagenerationNotMatch !== undefined && object.ifMetagenerationNotMatch !== null)
        ? Long.fromValue(object.ifMetagenerationNotMatch)
        : undefined;
    message.commonObjectRequestParams =
      (object.commonObjectRequestParams !== undefined && object.commonObjectRequestParams !== null)
        ? CommonObjectRequestParams.fromPartial(object.commonObjectRequestParams)
        : undefined;
    message.commonRequestParams = (object.commonRequestParams !== undefined && object.commonRequestParams !== null)
      ? CommonRequestParams.fromPartial(object.commonRequestParams)
      : undefined;
    return message;
  },
};

function createBaseGetObjectRequest(): GetObjectRequest {
  return {
    bucket: "",
    object: "",
    generation: Long.ZERO,
    ifGenerationMatch: undefined,
    ifGenerationNotMatch: undefined,
    ifMetagenerationMatch: undefined,
    ifMetagenerationNotMatch: undefined,
    projection: 0,
    commonObjectRequestParams: undefined,
    commonRequestParams: undefined,
  };
}

export const GetObjectRequest: MessageFns<GetObjectRequest> = {
  encode(message: GetObjectRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.bucket !== "") {
      writer.uint32(10).string(message.bucket);
    }
    if (message.object !== "") {
      writer.uint32(18).string(message.object);
    }
    if (!message.generation.equals(Long.ZERO)) {
      writer.uint32(24).int64(message.generation.toString());
    }
    if (message.ifGenerationMatch !== undefined) {
      Int64Value.encode({ value: message.ifGenerationMatch! }, writer.uint32(34).fork()).join();
    }
    if (message.ifGenerationNotMatch !== undefined) {
      Int64Value.encode({ value: message.ifGenerationNotMatch! }, writer.uint32(42).fork()).join();
    }
    if (message.ifMetagenerationMatch !== undefined) {
      Int64Value.encode({ value: message.ifMetagenerationMatch! }, writer.uint32(50).fork()).join();
    }
    if (message.ifMetagenerationNotMatch !== undefined) {
      Int64Value.encode({ value: message.ifMetagenerationNotMatch! }, writer.uint32(58).fork()).join();
    }
    if (message.projection !== 0) {
      writer.uint32(64).int32(message.projection);
    }
    if (message.commonObjectRequestParams !== undefined) {
      CommonObjectRequestParams.encode(message.commonObjectRequestParams, writer.uint32(82).fork()).join();
    }
    if (message.commonRequestParams !== undefined) {
      CommonRequestParams.encode(message.commonRequestParams, writer.uint32(90).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetObjectRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetObjectRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.bucket = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.object = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.generation = Long.fromString(reader.int64().toString());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.ifGenerationMatch = Int64Value.decode(reader, reader.uint32()).value;
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.ifGenerationNotMatch = Int64Value.decode(reader, reader.uint32()).value;
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.ifMetagenerationMatch = Int64Value.decode(reader, reader.uint32()).value;
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.ifMetagenerationNotMatch = Int64Value.decode(reader, reader.uint32()).value;
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.projection = reader.int32() as any;
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.commonObjectRequestParams = CommonObjectRequestParams.decode(reader, reader.uint32());
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.commonRequestParams = CommonRequestParams.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetObjectRequest {
    return {
      bucket: isSet(object.bucket) ? globalThis.String(object.bucket) : "",
      object: isSet(object.object) ? globalThis.String(object.object) : "",
      generation: isSet(object.generation) ? Long.fromValue(object.generation) : Long.ZERO,
      ifGenerationMatch: isSet(object.ifGenerationMatch) ? Long.fromValue(object.ifGenerationMatch) : undefined,
      ifGenerationNotMatch: isSet(object.ifGenerationNotMatch)
        ? Long.fromValue(object.ifGenerationNotMatch)
        : undefined,
      ifMetagenerationMatch: isSet(object.ifMetagenerationMatch)
        ? Long.fromValue(object.ifMetagenerationMatch)
        : undefined,
      ifMetagenerationNotMatch: isSet(object.ifMetagenerationNotMatch)
        ? Long.fromValue(object.ifMetagenerationNotMatch)
        : undefined,
      projection: isSet(object.projection) ? commonEnums_ProjectionFromJSON(object.projection) : 0,
      commonObjectRequestParams: isSet(object.commonObjectRequestParams)
        ? CommonObjectRequestParams.fromJSON(object.commonObjectRequestParams)
        : undefined,
      commonRequestParams: isSet(object.commonRequestParams)
        ? CommonRequestParams.fromJSON(object.commonRequestParams)
        : undefined,
    };
  },

  toJSON(message: GetObjectRequest): unknown {
    const obj: any = {};
    if (message.bucket !== "") {
      obj.bucket = message.bucket;
    }
    if (message.object !== "") {
      obj.object = message.object;
    }
    if (!message.generation.equals(Long.ZERO)) {
      obj.generation = (message.generation || Long.ZERO).toString();
    }
    if (message.ifGenerationMatch !== undefined) {
      obj.ifGenerationMatch = message.ifGenerationMatch;
    }
    if (message.ifGenerationNotMatch !== undefined) {
      obj.ifGenerationNotMatch = message.ifGenerationNotMatch;
    }
    if (message.ifMetagenerationMatch !== undefined) {
      obj.ifMetagenerationMatch = message.ifMetagenerationMatch;
    }
    if (message.ifMetagenerationNotMatch !== undefined) {
      obj.ifMetagenerationNotMatch = message.ifMetagenerationNotMatch;
    }
    if (message.projection !== 0) {
      obj.projection = commonEnums_ProjectionToJSON(message.projection);
    }
    if (message.commonObjectRequestParams !== undefined) {
      obj.commonObjectRequestParams = CommonObjectRequestParams.toJSON(message.commonObjectRequestParams);
    }
    if (message.commonRequestParams !== undefined) {
      obj.commonRequestParams = CommonRequestParams.toJSON(message.commonRequestParams);
    }
    return obj;
  },

  create(base?: DeepPartial<GetObjectRequest>): GetObjectRequest {
    return GetObjectRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetObjectRequest>): GetObjectRequest {
    const message = createBaseGetObjectRequest();
    message.bucket = object.bucket ?? "";
    message.object = object.object ?? "";
    message.generation = (object.generation !== undefined && object.generation !== null)
      ? Long.fromValue(object.generation)
      : Long.ZERO;
    message.ifGenerationMatch = (object.ifGenerationMatch !== undefined && object.ifGenerationMatch !== null)
      ? Long.fromValue(object.ifGenerationMatch)
      : undefined;
    message.ifGenerationNotMatch = (object.ifGenerationNotMatch !== undefined && object.ifGenerationNotMatch !== null)
      ? Long.fromValue(object.ifGenerationNotMatch)
      : undefined;
    message.ifMetagenerationMatch =
      (object.ifMetagenerationMatch !== undefined && object.ifMetagenerationMatch !== null)
        ? Long.fromValue(object.ifMetagenerationMatch)
        : undefined;
    message.ifMetagenerationNotMatch =
      (object.ifMetagenerationNotMatch !== undefined && object.ifMetagenerationNotMatch !== null)
        ? Long.fromValue(object.ifMetagenerationNotMatch)
        : undefined;
    message.projection = object.projection ?? 0;
    message.commonObjectRequestParams =
      (object.commonObjectRequestParams !== undefined && object.commonObjectRequestParams !== null)
        ? CommonObjectRequestParams.fromPartial(object.commonObjectRequestParams)
        : undefined;
    message.commonRequestParams = (object.commonRequestParams !== undefined && object.commonRequestParams !== null)
      ? CommonRequestParams.fromPartial(object.commonRequestParams)
      : undefined;
    return message;
  },
};

function createBaseGetObjectMediaResponse(): GetObjectMediaResponse {
  return { checksummedData: undefined, objectChecksums: undefined, contentRange: undefined, metadata: undefined };
}

export const GetObjectMediaResponse: MessageFns<GetObjectMediaResponse> = {
  encode(message: GetObjectMediaResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.checksummedData !== undefined) {
      ChecksummedData.encode(message.checksummedData, writer.uint32(10).fork()).join();
    }
    if (message.objectChecksums !== undefined) {
      ObjectChecksums.encode(message.objectChecksums, writer.uint32(18).fork()).join();
    }
    if (message.contentRange !== undefined) {
      ContentRange.encode(message.contentRange, writer.uint32(26).fork()).join();
    }
    if (message.metadata !== undefined) {
      Object.encode(message.metadata, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetObjectMediaResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetObjectMediaResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.checksummedData = ChecksummedData.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.objectChecksums = ObjectChecksums.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.contentRange = ContentRange.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.metadata = Object.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetObjectMediaResponse {
    return {
      checksummedData: isSet(object.checksummedData) ? ChecksummedData.fromJSON(object.checksummedData) : undefined,
      objectChecksums: isSet(object.objectChecksums) ? ObjectChecksums.fromJSON(object.objectChecksums) : undefined,
      contentRange: isSet(object.contentRange) ? ContentRange.fromJSON(object.contentRange) : undefined,
      metadata: isSet(object.metadata) ? Object.fromJSON(object.metadata) : undefined,
    };
  },

  toJSON(message: GetObjectMediaResponse): unknown {
    const obj: any = {};
    if (message.checksummedData !== undefined) {
      obj.checksummedData = ChecksummedData.toJSON(message.checksummedData);
    }
    if (message.objectChecksums !== undefined) {
      obj.objectChecksums = ObjectChecksums.toJSON(message.objectChecksums);
    }
    if (message.contentRange !== undefined) {
      obj.contentRange = ContentRange.toJSON(message.contentRange);
    }
    if (message.metadata !== undefined) {
      obj.metadata = Object.toJSON(message.metadata);
    }
    return obj;
  },

  create(base?: DeepPartial<GetObjectMediaResponse>): GetObjectMediaResponse {
    return GetObjectMediaResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetObjectMediaResponse>): GetObjectMediaResponse {
    const message = createBaseGetObjectMediaResponse();
    message.checksummedData = (object.checksummedData !== undefined && object.checksummedData !== null)
      ? ChecksummedData.fromPartial(object.checksummedData)
      : undefined;
    message.objectChecksums = (object.objectChecksums !== undefined && object.objectChecksums !== null)
      ? ObjectChecksums.fromPartial(object.objectChecksums)
      : undefined;
    message.contentRange = (object.contentRange !== undefined && object.contentRange !== null)
      ? ContentRange.fromPartial(object.contentRange)
      : undefined;
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Object.fromPartial(object.metadata)
      : undefined;
    return message;
  },
};

function createBaseInsertObjectSpec(): InsertObjectSpec {
  return {
    resource: undefined,
    predefinedAcl: 0,
    ifGenerationMatch: undefined,
    ifGenerationNotMatch: undefined,
    ifMetagenerationMatch: undefined,
    ifMetagenerationNotMatch: undefined,
    projection: 0,
  };
}

export const InsertObjectSpec: MessageFns<InsertObjectSpec> = {
  encode(message: InsertObjectSpec, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resource !== undefined) {
      Object.encode(message.resource, writer.uint32(10).fork()).join();
    }
    if (message.predefinedAcl !== 0) {
      writer.uint32(16).int32(message.predefinedAcl);
    }
    if (message.ifGenerationMatch !== undefined) {
      Int64Value.encode({ value: message.ifGenerationMatch! }, writer.uint32(26).fork()).join();
    }
    if (message.ifGenerationNotMatch !== undefined) {
      Int64Value.encode({ value: message.ifGenerationNotMatch! }, writer.uint32(34).fork()).join();
    }
    if (message.ifMetagenerationMatch !== undefined) {
      Int64Value.encode({ value: message.ifMetagenerationMatch! }, writer.uint32(42).fork()).join();
    }
    if (message.ifMetagenerationNotMatch !== undefined) {
      Int64Value.encode({ value: message.ifMetagenerationNotMatch! }, writer.uint32(50).fork()).join();
    }
    if (message.projection !== 0) {
      writer.uint32(56).int32(message.projection);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InsertObjectSpec {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInsertObjectSpec();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resource = Object.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.predefinedAcl = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.ifGenerationMatch = Int64Value.decode(reader, reader.uint32()).value;
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.ifGenerationNotMatch = Int64Value.decode(reader, reader.uint32()).value;
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.ifMetagenerationMatch = Int64Value.decode(reader, reader.uint32()).value;
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.ifMetagenerationNotMatch = Int64Value.decode(reader, reader.uint32()).value;
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.projection = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InsertObjectSpec {
    return {
      resource: isSet(object.resource) ? Object.fromJSON(object.resource) : undefined,
      predefinedAcl: isSet(object.predefinedAcl) ? commonEnums_PredefinedObjectAclFromJSON(object.predefinedAcl) : 0,
      ifGenerationMatch: isSet(object.ifGenerationMatch) ? Long.fromValue(object.ifGenerationMatch) : undefined,
      ifGenerationNotMatch: isSet(object.ifGenerationNotMatch)
        ? Long.fromValue(object.ifGenerationNotMatch)
        : undefined,
      ifMetagenerationMatch: isSet(object.ifMetagenerationMatch)
        ? Long.fromValue(object.ifMetagenerationMatch)
        : undefined,
      ifMetagenerationNotMatch: isSet(object.ifMetagenerationNotMatch)
        ? Long.fromValue(object.ifMetagenerationNotMatch)
        : undefined,
      projection: isSet(object.projection) ? commonEnums_ProjectionFromJSON(object.projection) : 0,
    };
  },

  toJSON(message: InsertObjectSpec): unknown {
    const obj: any = {};
    if (message.resource !== undefined) {
      obj.resource = Object.toJSON(message.resource);
    }
    if (message.predefinedAcl !== 0) {
      obj.predefinedAcl = commonEnums_PredefinedObjectAclToJSON(message.predefinedAcl);
    }
    if (message.ifGenerationMatch !== undefined) {
      obj.ifGenerationMatch = message.ifGenerationMatch;
    }
    if (message.ifGenerationNotMatch !== undefined) {
      obj.ifGenerationNotMatch = message.ifGenerationNotMatch;
    }
    if (message.ifMetagenerationMatch !== undefined) {
      obj.ifMetagenerationMatch = message.ifMetagenerationMatch;
    }
    if (message.ifMetagenerationNotMatch !== undefined) {
      obj.ifMetagenerationNotMatch = message.ifMetagenerationNotMatch;
    }
    if (message.projection !== 0) {
      obj.projection = commonEnums_ProjectionToJSON(message.projection);
    }
    return obj;
  },

  create(base?: DeepPartial<InsertObjectSpec>): InsertObjectSpec {
    return InsertObjectSpec.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<InsertObjectSpec>): InsertObjectSpec {
    const message = createBaseInsertObjectSpec();
    message.resource = (object.resource !== undefined && object.resource !== null)
      ? Object.fromPartial(object.resource)
      : undefined;
    message.predefinedAcl = object.predefinedAcl ?? 0;
    message.ifGenerationMatch = (object.ifGenerationMatch !== undefined && object.ifGenerationMatch !== null)
      ? Long.fromValue(object.ifGenerationMatch)
      : undefined;
    message.ifGenerationNotMatch = (object.ifGenerationNotMatch !== undefined && object.ifGenerationNotMatch !== null)
      ? Long.fromValue(object.ifGenerationNotMatch)
      : undefined;
    message.ifMetagenerationMatch =
      (object.ifMetagenerationMatch !== undefined && object.ifMetagenerationMatch !== null)
        ? Long.fromValue(object.ifMetagenerationMatch)
        : undefined;
    message.ifMetagenerationNotMatch =
      (object.ifMetagenerationNotMatch !== undefined && object.ifMetagenerationNotMatch !== null)
        ? Long.fromValue(object.ifMetagenerationNotMatch)
        : undefined;
    message.projection = object.projection ?? 0;
    return message;
  },
};

function createBaseInsertObjectRequest(): InsertObjectRequest {
  return {
    uploadId: undefined,
    insertObjectSpec: undefined,
    writeOffset: Long.ZERO,
    checksummedData: undefined,
    reference: undefined,
    objectChecksums: undefined,
    finishWrite: false,
    commonObjectRequestParams: undefined,
    commonRequestParams: undefined,
  };
}

export const InsertObjectRequest: MessageFns<InsertObjectRequest> = {
  encode(message: InsertObjectRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.uploadId !== undefined) {
      writer.uint32(10).string(message.uploadId);
    }
    if (message.insertObjectSpec !== undefined) {
      InsertObjectSpec.encode(message.insertObjectSpec, writer.uint32(18).fork()).join();
    }
    if (!message.writeOffset.equals(Long.ZERO)) {
      writer.uint32(24).int64(message.writeOffset.toString());
    }
    if (message.checksummedData !== undefined) {
      ChecksummedData.encode(message.checksummedData, writer.uint32(34).fork()).join();
    }
    if (message.reference !== undefined) {
      GetObjectMediaRequest.encode(message.reference, writer.uint32(42).fork()).join();
    }
    if (message.objectChecksums !== undefined) {
      ObjectChecksums.encode(message.objectChecksums, writer.uint32(50).fork()).join();
    }
    if (message.finishWrite !== false) {
      writer.uint32(56).bool(message.finishWrite);
    }
    if (message.commonObjectRequestParams !== undefined) {
      CommonObjectRequestParams.encode(message.commonObjectRequestParams, writer.uint32(66).fork()).join();
    }
    if (message.commonRequestParams !== undefined) {
      CommonRequestParams.encode(message.commonRequestParams, writer.uint32(74).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InsertObjectRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInsertObjectRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.uploadId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.insertObjectSpec = InsertObjectSpec.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.writeOffset = Long.fromString(reader.int64().toString());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.checksummedData = ChecksummedData.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.reference = GetObjectMediaRequest.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.objectChecksums = ObjectChecksums.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.finishWrite = reader.bool();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.commonObjectRequestParams = CommonObjectRequestParams.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.commonRequestParams = CommonRequestParams.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InsertObjectRequest {
    return {
      uploadId: isSet(object.uploadId) ? globalThis.String(object.uploadId) : undefined,
      insertObjectSpec: isSet(object.insertObjectSpec) ? InsertObjectSpec.fromJSON(object.insertObjectSpec) : undefined,
      writeOffset: isSet(object.writeOffset) ? Long.fromValue(object.writeOffset) : Long.ZERO,
      checksummedData: isSet(object.checksummedData) ? ChecksummedData.fromJSON(object.checksummedData) : undefined,
      reference: isSet(object.reference) ? GetObjectMediaRequest.fromJSON(object.reference) : undefined,
      objectChecksums: isSet(object.objectChecksums) ? ObjectChecksums.fromJSON(object.objectChecksums) : undefined,
      finishWrite: isSet(object.finishWrite) ? globalThis.Boolean(object.finishWrite) : false,
      commonObjectRequestParams: isSet(object.commonObjectRequestParams)
        ? CommonObjectRequestParams.fromJSON(object.commonObjectRequestParams)
        : undefined,
      commonRequestParams: isSet(object.commonRequestParams)
        ? CommonRequestParams.fromJSON(object.commonRequestParams)
        : undefined,
    };
  },

  toJSON(message: InsertObjectRequest): unknown {
    const obj: any = {};
    if (message.uploadId !== undefined) {
      obj.uploadId = message.uploadId;
    }
    if (message.insertObjectSpec !== undefined) {
      obj.insertObjectSpec = InsertObjectSpec.toJSON(message.insertObjectSpec);
    }
    if (!message.writeOffset.equals(Long.ZERO)) {
      obj.writeOffset = (message.writeOffset || Long.ZERO).toString();
    }
    if (message.checksummedData !== undefined) {
      obj.checksummedData = ChecksummedData.toJSON(message.checksummedData);
    }
    if (message.reference !== undefined) {
      obj.reference = GetObjectMediaRequest.toJSON(message.reference);
    }
    if (message.objectChecksums !== undefined) {
      obj.objectChecksums = ObjectChecksums.toJSON(message.objectChecksums);
    }
    if (message.finishWrite !== false) {
      obj.finishWrite = message.finishWrite;
    }
    if (message.commonObjectRequestParams !== undefined) {
      obj.commonObjectRequestParams = CommonObjectRequestParams.toJSON(message.commonObjectRequestParams);
    }
    if (message.commonRequestParams !== undefined) {
      obj.commonRequestParams = CommonRequestParams.toJSON(message.commonRequestParams);
    }
    return obj;
  },

  create(base?: DeepPartial<InsertObjectRequest>): InsertObjectRequest {
    return InsertObjectRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<InsertObjectRequest>): InsertObjectRequest {
    const message = createBaseInsertObjectRequest();
    message.uploadId = object.uploadId ?? undefined;
    message.insertObjectSpec = (object.insertObjectSpec !== undefined && object.insertObjectSpec !== null)
      ? InsertObjectSpec.fromPartial(object.insertObjectSpec)
      : undefined;
    message.writeOffset = (object.writeOffset !== undefined && object.writeOffset !== null)
      ? Long.fromValue(object.writeOffset)
      : Long.ZERO;
    message.checksummedData = (object.checksummedData !== undefined && object.checksummedData !== null)
      ? ChecksummedData.fromPartial(object.checksummedData)
      : undefined;
    message.reference = (object.reference !== undefined && object.reference !== null)
      ? GetObjectMediaRequest.fromPartial(object.reference)
      : undefined;
    message.objectChecksums = (object.objectChecksums !== undefined && object.objectChecksums !== null)
      ? ObjectChecksums.fromPartial(object.objectChecksums)
      : undefined;
    message.finishWrite = object.finishWrite ?? false;
    message.commonObjectRequestParams =
      (object.commonObjectRequestParams !== undefined && object.commonObjectRequestParams !== null)
        ? CommonObjectRequestParams.fromPartial(object.commonObjectRequestParams)
        : undefined;
    message.commonRequestParams = (object.commonRequestParams !== undefined && object.commonRequestParams !== null)
      ? CommonRequestParams.fromPartial(object.commonRequestParams)
      : undefined;
    return message;
  },
};

function createBaseListObjectsRequest(): ListObjectsRequest {
  return {
    bucket: "",
    delimiter: "",
    includeTrailingDelimiter: false,
    maxResults: 0,
    pageToken: "",
    prefix: "",
    projection: 0,
    versions: false,
    lexicographicStart: "",
    lexicographicEnd: "",
    commonRequestParams: undefined,
  };
}

export const ListObjectsRequest: MessageFns<ListObjectsRequest> = {
  encode(message: ListObjectsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.bucket !== "") {
      writer.uint32(10).string(message.bucket);
    }
    if (message.delimiter !== "") {
      writer.uint32(18).string(message.delimiter);
    }
    if (message.includeTrailingDelimiter !== false) {
      writer.uint32(24).bool(message.includeTrailingDelimiter);
    }
    if (message.maxResults !== 0) {
      writer.uint32(32).int32(message.maxResults);
    }
    if (message.pageToken !== "") {
      writer.uint32(42).string(message.pageToken);
    }
    if (message.prefix !== "") {
      writer.uint32(50).string(message.prefix);
    }
    if (message.projection !== 0) {
      writer.uint32(56).int32(message.projection);
    }
    if (message.versions !== false) {
      writer.uint32(72).bool(message.versions);
    }
    if (message.lexicographicStart !== "") {
      writer.uint32(90).string(message.lexicographicStart);
    }
    if (message.lexicographicEnd !== "") {
      writer.uint32(98).string(message.lexicographicEnd);
    }
    if (message.commonRequestParams !== undefined) {
      CommonRequestParams.encode(message.commonRequestParams, writer.uint32(82).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListObjectsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListObjectsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.bucket = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.delimiter = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.includeTrailingDelimiter = reader.bool();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.maxResults = reader.int32();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.prefix = reader.string();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.projection = reader.int32() as any;
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.versions = reader.bool();
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.lexicographicStart = reader.string();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.lexicographicEnd = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.commonRequestParams = CommonRequestParams.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListObjectsRequest {
    return {
      bucket: isSet(object.bucket) ? globalThis.String(object.bucket) : "",
      delimiter: isSet(object.delimiter) ? globalThis.String(object.delimiter) : "",
      includeTrailingDelimiter: isSet(object.includeTrailingDelimiter)
        ? globalThis.Boolean(object.includeTrailingDelimiter)
        : false,
      maxResults: isSet(object.maxResults) ? globalThis.Number(object.maxResults) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      prefix: isSet(object.prefix) ? globalThis.String(object.prefix) : "",
      projection: isSet(object.projection) ? commonEnums_ProjectionFromJSON(object.projection) : 0,
      versions: isSet(object.versions) ? globalThis.Boolean(object.versions) : false,
      lexicographicStart: isSet(object.lexicographicStart) ? globalThis.String(object.lexicographicStart) : "",
      lexicographicEnd: isSet(object.lexicographicEnd) ? globalThis.String(object.lexicographicEnd) : "",
      commonRequestParams: isSet(object.commonRequestParams)
        ? CommonRequestParams.fromJSON(object.commonRequestParams)
        : undefined,
    };
  },

  toJSON(message: ListObjectsRequest): unknown {
    const obj: any = {};
    if (message.bucket !== "") {
      obj.bucket = message.bucket;
    }
    if (message.delimiter !== "") {
      obj.delimiter = message.delimiter;
    }
    if (message.includeTrailingDelimiter !== false) {
      obj.includeTrailingDelimiter = message.includeTrailingDelimiter;
    }
    if (message.maxResults !== 0) {
      obj.maxResults = Math.round(message.maxResults);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.prefix !== "") {
      obj.prefix = message.prefix;
    }
    if (message.projection !== 0) {
      obj.projection = commonEnums_ProjectionToJSON(message.projection);
    }
    if (message.versions !== false) {
      obj.versions = message.versions;
    }
    if (message.lexicographicStart !== "") {
      obj.lexicographicStart = message.lexicographicStart;
    }
    if (message.lexicographicEnd !== "") {
      obj.lexicographicEnd = message.lexicographicEnd;
    }
    if (message.commonRequestParams !== undefined) {
      obj.commonRequestParams = CommonRequestParams.toJSON(message.commonRequestParams);
    }
    return obj;
  },

  create(base?: DeepPartial<ListObjectsRequest>): ListObjectsRequest {
    return ListObjectsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListObjectsRequest>): ListObjectsRequest {
    const message = createBaseListObjectsRequest();
    message.bucket = object.bucket ?? "";
    message.delimiter = object.delimiter ?? "";
    message.includeTrailingDelimiter = object.includeTrailingDelimiter ?? false;
    message.maxResults = object.maxResults ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.prefix = object.prefix ?? "";
    message.projection = object.projection ?? 0;
    message.versions = object.versions ?? false;
    message.lexicographicStart = object.lexicographicStart ?? "";
    message.lexicographicEnd = object.lexicographicEnd ?? "";
    message.commonRequestParams = (object.commonRequestParams !== undefined && object.commonRequestParams !== null)
      ? CommonRequestParams.fromPartial(object.commonRequestParams)
      : undefined;
    return message;
  },
};

function createBaseQueryWriteStatusRequest(): QueryWriteStatusRequest {
  return { uploadId: "", commonObjectRequestParams: undefined, commonRequestParams: undefined };
}

export const QueryWriteStatusRequest: MessageFns<QueryWriteStatusRequest> = {
  encode(message: QueryWriteStatusRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.uploadId !== "") {
      writer.uint32(10).string(message.uploadId);
    }
    if (message.commonObjectRequestParams !== undefined) {
      CommonObjectRequestParams.encode(message.commonObjectRequestParams, writer.uint32(18).fork()).join();
    }
    if (message.commonRequestParams !== undefined) {
      CommonRequestParams.encode(message.commonRequestParams, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryWriteStatusRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryWriteStatusRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.uploadId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.commonObjectRequestParams = CommonObjectRequestParams.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.commonRequestParams = CommonRequestParams.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryWriteStatusRequest {
    return {
      uploadId: isSet(object.uploadId) ? globalThis.String(object.uploadId) : "",
      commonObjectRequestParams: isSet(object.commonObjectRequestParams)
        ? CommonObjectRequestParams.fromJSON(object.commonObjectRequestParams)
        : undefined,
      commonRequestParams: isSet(object.commonRequestParams)
        ? CommonRequestParams.fromJSON(object.commonRequestParams)
        : undefined,
    };
  },

  toJSON(message: QueryWriteStatusRequest): unknown {
    const obj: any = {};
    if (message.uploadId !== "") {
      obj.uploadId = message.uploadId;
    }
    if (message.commonObjectRequestParams !== undefined) {
      obj.commonObjectRequestParams = CommonObjectRequestParams.toJSON(message.commonObjectRequestParams);
    }
    if (message.commonRequestParams !== undefined) {
      obj.commonRequestParams = CommonRequestParams.toJSON(message.commonRequestParams);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryWriteStatusRequest>): QueryWriteStatusRequest {
    return QueryWriteStatusRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryWriteStatusRequest>): QueryWriteStatusRequest {
    const message = createBaseQueryWriteStatusRequest();
    message.uploadId = object.uploadId ?? "";
    message.commonObjectRequestParams =
      (object.commonObjectRequestParams !== undefined && object.commonObjectRequestParams !== null)
        ? CommonObjectRequestParams.fromPartial(object.commonObjectRequestParams)
        : undefined;
    message.commonRequestParams = (object.commonRequestParams !== undefined && object.commonRequestParams !== null)
      ? CommonRequestParams.fromPartial(object.commonRequestParams)
      : undefined;
    return message;
  },
};

function createBaseQueryWriteStatusResponse(): QueryWriteStatusResponse {
  return { committedSize: Long.ZERO, complete: false, resource: undefined };
}

export const QueryWriteStatusResponse: MessageFns<QueryWriteStatusResponse> = {
  encode(message: QueryWriteStatusResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.committedSize.equals(Long.ZERO)) {
      writer.uint32(8).int64(message.committedSize.toString());
    }
    if (message.complete !== false) {
      writer.uint32(16).bool(message.complete);
    }
    if (message.resource !== undefined) {
      Object.encode(message.resource, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryWriteStatusResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryWriteStatusResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.committedSize = Long.fromString(reader.int64().toString());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.complete = reader.bool();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.resource = Object.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryWriteStatusResponse {
    return {
      committedSize: isSet(object.committedSize) ? Long.fromValue(object.committedSize) : Long.ZERO,
      complete: isSet(object.complete) ? globalThis.Boolean(object.complete) : false,
      resource: isSet(object.resource) ? Object.fromJSON(object.resource) : undefined,
    };
  },

  toJSON(message: QueryWriteStatusResponse): unknown {
    const obj: any = {};
    if (!message.committedSize.equals(Long.ZERO)) {
      obj.committedSize = (message.committedSize || Long.ZERO).toString();
    }
    if (message.complete !== false) {
      obj.complete = message.complete;
    }
    if (message.resource !== undefined) {
      obj.resource = Object.toJSON(message.resource);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryWriteStatusResponse>): QueryWriteStatusResponse {
    return QueryWriteStatusResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryWriteStatusResponse>): QueryWriteStatusResponse {
    const message = createBaseQueryWriteStatusResponse();
    message.committedSize = (object.committedSize !== undefined && object.committedSize !== null)
      ? Long.fromValue(object.committedSize)
      : Long.ZERO;
    message.complete = object.complete ?? false;
    message.resource = (object.resource !== undefined && object.resource !== null)
      ? Object.fromPartial(object.resource)
      : undefined;
    return message;
  },
};

function createBaseRewriteObjectRequest(): RewriteObjectRequest {
  return {
    destinationBucket: "",
    destinationObject: "",
    destinationKmsKeyName: "",
    destinationPredefinedAcl: 0,
    ifGenerationMatch: undefined,
    ifGenerationNotMatch: undefined,
    ifMetagenerationMatch: undefined,
    ifMetagenerationNotMatch: undefined,
    ifSourceGenerationMatch: undefined,
    ifSourceGenerationNotMatch: undefined,
    ifSourceMetagenerationMatch: undefined,
    ifSourceMetagenerationNotMatch: undefined,
    maxBytesRewrittenPerCall: Long.ZERO,
    projection: 0,
    rewriteToken: "",
    sourceBucket: "",
    sourceObject: "",
    sourceGeneration: Long.ZERO,
    object: undefined,
    copySourceEncryptionAlgorithm: "",
    copySourceEncryptionKey: "",
    copySourceEncryptionKeySha256: "",
    commonObjectRequestParams: undefined,
    commonRequestParams: undefined,
  };
}

export const RewriteObjectRequest: MessageFns<RewriteObjectRequest> = {
  encode(message: RewriteObjectRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.destinationBucket !== "") {
      writer.uint32(10).string(message.destinationBucket);
    }
    if (message.destinationObject !== "") {
      writer.uint32(18).string(message.destinationObject);
    }
    if (message.destinationKmsKeyName !== "") {
      writer.uint32(26).string(message.destinationKmsKeyName);
    }
    if (message.destinationPredefinedAcl !== 0) {
      writer.uint32(32).int32(message.destinationPredefinedAcl);
    }
    if (message.ifGenerationMatch !== undefined) {
      Int64Value.encode({ value: message.ifGenerationMatch! }, writer.uint32(42).fork()).join();
    }
    if (message.ifGenerationNotMatch !== undefined) {
      Int64Value.encode({ value: message.ifGenerationNotMatch! }, writer.uint32(50).fork()).join();
    }
    if (message.ifMetagenerationMatch !== undefined) {
      Int64Value.encode({ value: message.ifMetagenerationMatch! }, writer.uint32(58).fork()).join();
    }
    if (message.ifMetagenerationNotMatch !== undefined) {
      Int64Value.encode({ value: message.ifMetagenerationNotMatch! }, writer.uint32(66).fork()).join();
    }
    if (message.ifSourceGenerationMatch !== undefined) {
      Int64Value.encode({ value: message.ifSourceGenerationMatch! }, writer.uint32(74).fork()).join();
    }
    if (message.ifSourceGenerationNotMatch !== undefined) {
      Int64Value.encode({ value: message.ifSourceGenerationNotMatch! }, writer.uint32(82).fork()).join();
    }
    if (message.ifSourceMetagenerationMatch !== undefined) {
      Int64Value.encode({ value: message.ifSourceMetagenerationMatch! }, writer.uint32(90).fork()).join();
    }
    if (message.ifSourceMetagenerationNotMatch !== undefined) {
      Int64Value.encode({ value: message.ifSourceMetagenerationNotMatch! }, writer.uint32(98).fork()).join();
    }
    if (!message.maxBytesRewrittenPerCall.equals(Long.ZERO)) {
      writer.uint32(104).int64(message.maxBytesRewrittenPerCall.toString());
    }
    if (message.projection !== 0) {
      writer.uint32(112).int32(message.projection);
    }
    if (message.rewriteToken !== "") {
      writer.uint32(122).string(message.rewriteToken);
    }
    if (message.sourceBucket !== "") {
      writer.uint32(130).string(message.sourceBucket);
    }
    if (message.sourceObject !== "") {
      writer.uint32(138).string(message.sourceObject);
    }
    if (!message.sourceGeneration.equals(Long.ZERO)) {
      writer.uint32(144).int64(message.sourceGeneration.toString());
    }
    if (message.object !== undefined) {
      Object.encode(message.object, writer.uint32(162).fork()).join();
    }
    if (message.copySourceEncryptionAlgorithm !== "") {
      writer.uint32(170).string(message.copySourceEncryptionAlgorithm);
    }
    if (message.copySourceEncryptionKey !== "") {
      writer.uint32(178).string(message.copySourceEncryptionKey);
    }
    if (message.copySourceEncryptionKeySha256 !== "") {
      writer.uint32(186).string(message.copySourceEncryptionKeySha256);
    }
    if (message.commonObjectRequestParams !== undefined) {
      CommonObjectRequestParams.encode(message.commonObjectRequestParams, writer.uint32(194).fork()).join();
    }
    if (message.commonRequestParams !== undefined) {
      CommonRequestParams.encode(message.commonRequestParams, writer.uint32(202).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RewriteObjectRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRewriteObjectRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.destinationBucket = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.destinationObject = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.destinationKmsKeyName = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.destinationPredefinedAcl = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.ifGenerationMatch = Int64Value.decode(reader, reader.uint32()).value;
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.ifGenerationNotMatch = Int64Value.decode(reader, reader.uint32()).value;
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.ifMetagenerationMatch = Int64Value.decode(reader, reader.uint32()).value;
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.ifMetagenerationNotMatch = Int64Value.decode(reader, reader.uint32()).value;
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.ifSourceGenerationMatch = Int64Value.decode(reader, reader.uint32()).value;
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.ifSourceGenerationNotMatch = Int64Value.decode(reader, reader.uint32()).value;
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.ifSourceMetagenerationMatch = Int64Value.decode(reader, reader.uint32()).value;
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.ifSourceMetagenerationNotMatch = Int64Value.decode(reader, reader.uint32()).value;
          continue;
        case 13:
          if (tag !== 104) {
            break;
          }

          message.maxBytesRewrittenPerCall = Long.fromString(reader.int64().toString());
          continue;
        case 14:
          if (tag !== 112) {
            break;
          }

          message.projection = reader.int32() as any;
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.rewriteToken = reader.string();
          continue;
        case 16:
          if (tag !== 130) {
            break;
          }

          message.sourceBucket = reader.string();
          continue;
        case 17:
          if (tag !== 138) {
            break;
          }

          message.sourceObject = reader.string();
          continue;
        case 18:
          if (tag !== 144) {
            break;
          }

          message.sourceGeneration = Long.fromString(reader.int64().toString());
          continue;
        case 20:
          if (tag !== 162) {
            break;
          }

          message.object = Object.decode(reader, reader.uint32());
          continue;
        case 21:
          if (tag !== 170) {
            break;
          }

          message.copySourceEncryptionAlgorithm = reader.string();
          continue;
        case 22:
          if (tag !== 178) {
            break;
          }

          message.copySourceEncryptionKey = reader.string();
          continue;
        case 23:
          if (tag !== 186) {
            break;
          }

          message.copySourceEncryptionKeySha256 = reader.string();
          continue;
        case 24:
          if (tag !== 194) {
            break;
          }

          message.commonObjectRequestParams = CommonObjectRequestParams.decode(reader, reader.uint32());
          continue;
        case 25:
          if (tag !== 202) {
            break;
          }

          message.commonRequestParams = CommonRequestParams.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RewriteObjectRequest {
    return {
      destinationBucket: isSet(object.destinationBucket) ? globalThis.String(object.destinationBucket) : "",
      destinationObject: isSet(object.destinationObject) ? globalThis.String(object.destinationObject) : "",
      destinationKmsKeyName: isSet(object.destinationKmsKeyName) ? globalThis.String(object.destinationKmsKeyName) : "",
      destinationPredefinedAcl: isSet(object.destinationPredefinedAcl)
        ? commonEnums_PredefinedObjectAclFromJSON(object.destinationPredefinedAcl)
        : 0,
      ifGenerationMatch: isSet(object.ifGenerationMatch) ? Long.fromValue(object.ifGenerationMatch) : undefined,
      ifGenerationNotMatch: isSet(object.ifGenerationNotMatch)
        ? Long.fromValue(object.ifGenerationNotMatch)
        : undefined,
      ifMetagenerationMatch: isSet(object.ifMetagenerationMatch)
        ? Long.fromValue(object.ifMetagenerationMatch)
        : undefined,
      ifMetagenerationNotMatch: isSet(object.ifMetagenerationNotMatch)
        ? Long.fromValue(object.ifMetagenerationNotMatch)
        : undefined,
      ifSourceGenerationMatch: isSet(object.ifSourceGenerationMatch)
        ? Long.fromValue(object.ifSourceGenerationMatch)
        : undefined,
      ifSourceGenerationNotMatch: isSet(object.ifSourceGenerationNotMatch)
        ? Long.fromValue(object.ifSourceGenerationNotMatch)
        : undefined,
      ifSourceMetagenerationMatch: isSet(object.ifSourceMetagenerationMatch)
        ? Long.fromValue(object.ifSourceMetagenerationMatch)
        : undefined,
      ifSourceMetagenerationNotMatch: isSet(object.ifSourceMetagenerationNotMatch)
        ? Long.fromValue(object.ifSourceMetagenerationNotMatch)
        : undefined,
      maxBytesRewrittenPerCall: isSet(object.maxBytesRewrittenPerCall)
        ? Long.fromValue(object.maxBytesRewrittenPerCall)
        : Long.ZERO,
      projection: isSet(object.projection) ? commonEnums_ProjectionFromJSON(object.projection) : 0,
      rewriteToken: isSet(object.rewriteToken) ? globalThis.String(object.rewriteToken) : "",
      sourceBucket: isSet(object.sourceBucket) ? globalThis.String(object.sourceBucket) : "",
      sourceObject: isSet(object.sourceObject) ? globalThis.String(object.sourceObject) : "",
      sourceGeneration: isSet(object.sourceGeneration) ? Long.fromValue(object.sourceGeneration) : Long.ZERO,
      object: isSet(object.object) ? Object.fromJSON(object.object) : undefined,
      copySourceEncryptionAlgorithm: isSet(object.copySourceEncryptionAlgorithm)
        ? globalThis.String(object.copySourceEncryptionAlgorithm)
        : "",
      copySourceEncryptionKey: isSet(object.copySourceEncryptionKey)
        ? globalThis.String(object.copySourceEncryptionKey)
        : "",
      copySourceEncryptionKeySha256: isSet(object.copySourceEncryptionKeySha256)
        ? globalThis.String(object.copySourceEncryptionKeySha256)
        : "",
      commonObjectRequestParams: isSet(object.commonObjectRequestParams)
        ? CommonObjectRequestParams.fromJSON(object.commonObjectRequestParams)
        : undefined,
      commonRequestParams: isSet(object.commonRequestParams)
        ? CommonRequestParams.fromJSON(object.commonRequestParams)
        : undefined,
    };
  },

  toJSON(message: RewriteObjectRequest): unknown {
    const obj: any = {};
    if (message.destinationBucket !== "") {
      obj.destinationBucket = message.destinationBucket;
    }
    if (message.destinationObject !== "") {
      obj.destinationObject = message.destinationObject;
    }
    if (message.destinationKmsKeyName !== "") {
      obj.destinationKmsKeyName = message.destinationKmsKeyName;
    }
    if (message.destinationPredefinedAcl !== 0) {
      obj.destinationPredefinedAcl = commonEnums_PredefinedObjectAclToJSON(message.destinationPredefinedAcl);
    }
    if (message.ifGenerationMatch !== undefined) {
      obj.ifGenerationMatch = message.ifGenerationMatch;
    }
    if (message.ifGenerationNotMatch !== undefined) {
      obj.ifGenerationNotMatch = message.ifGenerationNotMatch;
    }
    if (message.ifMetagenerationMatch !== undefined) {
      obj.ifMetagenerationMatch = message.ifMetagenerationMatch;
    }
    if (message.ifMetagenerationNotMatch !== undefined) {
      obj.ifMetagenerationNotMatch = message.ifMetagenerationNotMatch;
    }
    if (message.ifSourceGenerationMatch !== undefined) {
      obj.ifSourceGenerationMatch = message.ifSourceGenerationMatch;
    }
    if (message.ifSourceGenerationNotMatch !== undefined) {
      obj.ifSourceGenerationNotMatch = message.ifSourceGenerationNotMatch;
    }
    if (message.ifSourceMetagenerationMatch !== undefined) {
      obj.ifSourceMetagenerationMatch = message.ifSourceMetagenerationMatch;
    }
    if (message.ifSourceMetagenerationNotMatch !== undefined) {
      obj.ifSourceMetagenerationNotMatch = message.ifSourceMetagenerationNotMatch;
    }
    if (!message.maxBytesRewrittenPerCall.equals(Long.ZERO)) {
      obj.maxBytesRewrittenPerCall = (message.maxBytesRewrittenPerCall || Long.ZERO).toString();
    }
    if (message.projection !== 0) {
      obj.projection = commonEnums_ProjectionToJSON(message.projection);
    }
    if (message.rewriteToken !== "") {
      obj.rewriteToken = message.rewriteToken;
    }
    if (message.sourceBucket !== "") {
      obj.sourceBucket = message.sourceBucket;
    }
    if (message.sourceObject !== "") {
      obj.sourceObject = message.sourceObject;
    }
    if (!message.sourceGeneration.equals(Long.ZERO)) {
      obj.sourceGeneration = (message.sourceGeneration || Long.ZERO).toString();
    }
    if (message.object !== undefined) {
      obj.object = Object.toJSON(message.object);
    }
    if (message.copySourceEncryptionAlgorithm !== "") {
      obj.copySourceEncryptionAlgorithm = message.copySourceEncryptionAlgorithm;
    }
    if (message.copySourceEncryptionKey !== "") {
      obj.copySourceEncryptionKey = message.copySourceEncryptionKey;
    }
    if (message.copySourceEncryptionKeySha256 !== "") {
      obj.copySourceEncryptionKeySha256 = message.copySourceEncryptionKeySha256;
    }
    if (message.commonObjectRequestParams !== undefined) {
      obj.commonObjectRequestParams = CommonObjectRequestParams.toJSON(message.commonObjectRequestParams);
    }
    if (message.commonRequestParams !== undefined) {
      obj.commonRequestParams = CommonRequestParams.toJSON(message.commonRequestParams);
    }
    return obj;
  },

  create(base?: DeepPartial<RewriteObjectRequest>): RewriteObjectRequest {
    return RewriteObjectRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RewriteObjectRequest>): RewriteObjectRequest {
    const message = createBaseRewriteObjectRequest();
    message.destinationBucket = object.destinationBucket ?? "";
    message.destinationObject = object.destinationObject ?? "";
    message.destinationKmsKeyName = object.destinationKmsKeyName ?? "";
    message.destinationPredefinedAcl = object.destinationPredefinedAcl ?? 0;
    message.ifGenerationMatch = (object.ifGenerationMatch !== undefined && object.ifGenerationMatch !== null)
      ? Long.fromValue(object.ifGenerationMatch)
      : undefined;
    message.ifGenerationNotMatch = (object.ifGenerationNotMatch !== undefined && object.ifGenerationNotMatch !== null)
      ? Long.fromValue(object.ifGenerationNotMatch)
      : undefined;
    message.ifMetagenerationMatch =
      (object.ifMetagenerationMatch !== undefined && object.ifMetagenerationMatch !== null)
        ? Long.fromValue(object.ifMetagenerationMatch)
        : undefined;
    message.ifMetagenerationNotMatch =
      (object.ifMetagenerationNotMatch !== undefined && object.ifMetagenerationNotMatch !== null)
        ? Long.fromValue(object.ifMetagenerationNotMatch)
        : undefined;
    message.ifSourceGenerationMatch =
      (object.ifSourceGenerationMatch !== undefined && object.ifSourceGenerationMatch !== null)
        ? Long.fromValue(object.ifSourceGenerationMatch)
        : undefined;
    message.ifSourceGenerationNotMatch =
      (object.ifSourceGenerationNotMatch !== undefined && object.ifSourceGenerationNotMatch !== null)
        ? Long.fromValue(object.ifSourceGenerationNotMatch)
        : undefined;
    message.ifSourceMetagenerationMatch =
      (object.ifSourceMetagenerationMatch !== undefined && object.ifSourceMetagenerationMatch !== null)
        ? Long.fromValue(object.ifSourceMetagenerationMatch)
        : undefined;
    message.ifSourceMetagenerationNotMatch =
      (object.ifSourceMetagenerationNotMatch !== undefined && object.ifSourceMetagenerationNotMatch !== null)
        ? Long.fromValue(object.ifSourceMetagenerationNotMatch)
        : undefined;
    message.maxBytesRewrittenPerCall =
      (object.maxBytesRewrittenPerCall !== undefined && object.maxBytesRewrittenPerCall !== null)
        ? Long.fromValue(object.maxBytesRewrittenPerCall)
        : Long.ZERO;
    message.projection = object.projection ?? 0;
    message.rewriteToken = object.rewriteToken ?? "";
    message.sourceBucket = object.sourceBucket ?? "";
    message.sourceObject = object.sourceObject ?? "";
    message.sourceGeneration = (object.sourceGeneration !== undefined && object.sourceGeneration !== null)
      ? Long.fromValue(object.sourceGeneration)
      : Long.ZERO;
    message.object = (object.object !== undefined && object.object !== null)
      ? Object.fromPartial(object.object)
      : undefined;
    message.copySourceEncryptionAlgorithm = object.copySourceEncryptionAlgorithm ?? "";
    message.copySourceEncryptionKey = object.copySourceEncryptionKey ?? "";
    message.copySourceEncryptionKeySha256 = object.copySourceEncryptionKeySha256 ?? "";
    message.commonObjectRequestParams =
      (object.commonObjectRequestParams !== undefined && object.commonObjectRequestParams !== null)
        ? CommonObjectRequestParams.fromPartial(object.commonObjectRequestParams)
        : undefined;
    message.commonRequestParams = (object.commonRequestParams !== undefined && object.commonRequestParams !== null)
      ? CommonRequestParams.fromPartial(object.commonRequestParams)
      : undefined;
    return message;
  },
};

function createBaseRewriteResponse(): RewriteResponse {
  return { totalBytesRewritten: Long.ZERO, objectSize: Long.ZERO, done: false, rewriteToken: "", resource: undefined };
}

export const RewriteResponse: MessageFns<RewriteResponse> = {
  encode(message: RewriteResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.totalBytesRewritten.equals(Long.ZERO)) {
      writer.uint32(8).int64(message.totalBytesRewritten.toString());
    }
    if (!message.objectSize.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.objectSize.toString());
    }
    if (message.done !== false) {
      writer.uint32(24).bool(message.done);
    }
    if (message.rewriteToken !== "") {
      writer.uint32(34).string(message.rewriteToken);
    }
    if (message.resource !== undefined) {
      Object.encode(message.resource, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RewriteResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRewriteResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.totalBytesRewritten = Long.fromString(reader.int64().toString());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.objectSize = Long.fromString(reader.int64().toString());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.done = reader.bool();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.rewriteToken = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.resource = Object.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RewriteResponse {
    return {
      totalBytesRewritten: isSet(object.totalBytesRewritten) ? Long.fromValue(object.totalBytesRewritten) : Long.ZERO,
      objectSize: isSet(object.objectSize) ? Long.fromValue(object.objectSize) : Long.ZERO,
      done: isSet(object.done) ? globalThis.Boolean(object.done) : false,
      rewriteToken: isSet(object.rewriteToken) ? globalThis.String(object.rewriteToken) : "",
      resource: isSet(object.resource) ? Object.fromJSON(object.resource) : undefined,
    };
  },

  toJSON(message: RewriteResponse): unknown {
    const obj: any = {};
    if (!message.totalBytesRewritten.equals(Long.ZERO)) {
      obj.totalBytesRewritten = (message.totalBytesRewritten || Long.ZERO).toString();
    }
    if (!message.objectSize.equals(Long.ZERO)) {
      obj.objectSize = (message.objectSize || Long.ZERO).toString();
    }
    if (message.done !== false) {
      obj.done = message.done;
    }
    if (message.rewriteToken !== "") {
      obj.rewriteToken = message.rewriteToken;
    }
    if (message.resource !== undefined) {
      obj.resource = Object.toJSON(message.resource);
    }
    return obj;
  },

  create(base?: DeepPartial<RewriteResponse>): RewriteResponse {
    return RewriteResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RewriteResponse>): RewriteResponse {
    const message = createBaseRewriteResponse();
    message.totalBytesRewritten = (object.totalBytesRewritten !== undefined && object.totalBytesRewritten !== null)
      ? Long.fromValue(object.totalBytesRewritten)
      : Long.ZERO;
    message.objectSize = (object.objectSize !== undefined && object.objectSize !== null)
      ? Long.fromValue(object.objectSize)
      : Long.ZERO;
    message.done = object.done ?? false;
    message.rewriteToken = object.rewriteToken ?? "";
    message.resource = (object.resource !== undefined && object.resource !== null)
      ? Object.fromPartial(object.resource)
      : undefined;
    return message;
  },
};

function createBaseStartResumableWriteRequest(): StartResumableWriteRequest {
  return { insertObjectSpec: undefined, commonObjectRequestParams: undefined, commonRequestParams: undefined };
}

export const StartResumableWriteRequest: MessageFns<StartResumableWriteRequest> = {
  encode(message: StartResumableWriteRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.insertObjectSpec !== undefined) {
      InsertObjectSpec.encode(message.insertObjectSpec, writer.uint32(10).fork()).join();
    }
    if (message.commonObjectRequestParams !== undefined) {
      CommonObjectRequestParams.encode(message.commonObjectRequestParams, writer.uint32(26).fork()).join();
    }
    if (message.commonRequestParams !== undefined) {
      CommonRequestParams.encode(message.commonRequestParams, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StartResumableWriteRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStartResumableWriteRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.insertObjectSpec = InsertObjectSpec.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.commonObjectRequestParams = CommonObjectRequestParams.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.commonRequestParams = CommonRequestParams.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StartResumableWriteRequest {
    return {
      insertObjectSpec: isSet(object.insertObjectSpec) ? InsertObjectSpec.fromJSON(object.insertObjectSpec) : undefined,
      commonObjectRequestParams: isSet(object.commonObjectRequestParams)
        ? CommonObjectRequestParams.fromJSON(object.commonObjectRequestParams)
        : undefined,
      commonRequestParams: isSet(object.commonRequestParams)
        ? CommonRequestParams.fromJSON(object.commonRequestParams)
        : undefined,
    };
  },

  toJSON(message: StartResumableWriteRequest): unknown {
    const obj: any = {};
    if (message.insertObjectSpec !== undefined) {
      obj.insertObjectSpec = InsertObjectSpec.toJSON(message.insertObjectSpec);
    }
    if (message.commonObjectRequestParams !== undefined) {
      obj.commonObjectRequestParams = CommonObjectRequestParams.toJSON(message.commonObjectRequestParams);
    }
    if (message.commonRequestParams !== undefined) {
      obj.commonRequestParams = CommonRequestParams.toJSON(message.commonRequestParams);
    }
    return obj;
  },

  create(base?: DeepPartial<StartResumableWriteRequest>): StartResumableWriteRequest {
    return StartResumableWriteRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StartResumableWriteRequest>): StartResumableWriteRequest {
    const message = createBaseStartResumableWriteRequest();
    message.insertObjectSpec = (object.insertObjectSpec !== undefined && object.insertObjectSpec !== null)
      ? InsertObjectSpec.fromPartial(object.insertObjectSpec)
      : undefined;
    message.commonObjectRequestParams =
      (object.commonObjectRequestParams !== undefined && object.commonObjectRequestParams !== null)
        ? CommonObjectRequestParams.fromPartial(object.commonObjectRequestParams)
        : undefined;
    message.commonRequestParams = (object.commonRequestParams !== undefined && object.commonRequestParams !== null)
      ? CommonRequestParams.fromPartial(object.commonRequestParams)
      : undefined;
    return message;
  },
};

function createBaseStartResumableWriteResponse(): StartResumableWriteResponse {
  return { uploadId: "" };
}

export const StartResumableWriteResponse: MessageFns<StartResumableWriteResponse> = {
  encode(message: StartResumableWriteResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.uploadId !== "") {
      writer.uint32(10).string(message.uploadId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StartResumableWriteResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStartResumableWriteResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.uploadId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StartResumableWriteResponse {
    return { uploadId: isSet(object.uploadId) ? globalThis.String(object.uploadId) : "" };
  },

  toJSON(message: StartResumableWriteResponse): unknown {
    const obj: any = {};
    if (message.uploadId !== "") {
      obj.uploadId = message.uploadId;
    }
    return obj;
  },

  create(base?: DeepPartial<StartResumableWriteResponse>): StartResumableWriteResponse {
    return StartResumableWriteResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StartResumableWriteResponse>): StartResumableWriteResponse {
    const message = createBaseStartResumableWriteResponse();
    message.uploadId = object.uploadId ?? "";
    return message;
  },
};

function createBasePatchObjectRequest(): PatchObjectRequest {
  return {
    bucket: "",
    object: "",
    generation: Long.ZERO,
    ifGenerationMatch: undefined,
    ifGenerationNotMatch: undefined,
    ifMetagenerationMatch: undefined,
    ifMetagenerationNotMatch: undefined,
    predefinedAcl: 0,
    projection: 0,
    metadata: undefined,
    updateMask: undefined,
    commonObjectRequestParams: undefined,
    commonRequestParams: undefined,
  };
}

export const PatchObjectRequest: MessageFns<PatchObjectRequest> = {
  encode(message: PatchObjectRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.bucket !== "") {
      writer.uint32(10).string(message.bucket);
    }
    if (message.object !== "") {
      writer.uint32(18).string(message.object);
    }
    if (!message.generation.equals(Long.ZERO)) {
      writer.uint32(24).int64(message.generation.toString());
    }
    if (message.ifGenerationMatch !== undefined) {
      Int64Value.encode({ value: message.ifGenerationMatch! }, writer.uint32(34).fork()).join();
    }
    if (message.ifGenerationNotMatch !== undefined) {
      Int64Value.encode({ value: message.ifGenerationNotMatch! }, writer.uint32(42).fork()).join();
    }
    if (message.ifMetagenerationMatch !== undefined) {
      Int64Value.encode({ value: message.ifMetagenerationMatch! }, writer.uint32(50).fork()).join();
    }
    if (message.ifMetagenerationNotMatch !== undefined) {
      Int64Value.encode({ value: message.ifMetagenerationNotMatch! }, writer.uint32(58).fork()).join();
    }
    if (message.predefinedAcl !== 0) {
      writer.uint32(64).int32(message.predefinedAcl);
    }
    if (message.projection !== 0) {
      writer.uint32(72).int32(message.projection);
    }
    if (message.metadata !== undefined) {
      Object.encode(message.metadata, writer.uint32(90).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(98).fork()).join();
    }
    if (message.commonObjectRequestParams !== undefined) {
      CommonObjectRequestParams.encode(message.commonObjectRequestParams, writer.uint32(106).fork()).join();
    }
    if (message.commonRequestParams !== undefined) {
      CommonRequestParams.encode(message.commonRequestParams, writer.uint32(114).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PatchObjectRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePatchObjectRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.bucket = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.object = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.generation = Long.fromString(reader.int64().toString());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.ifGenerationMatch = Int64Value.decode(reader, reader.uint32()).value;
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.ifGenerationNotMatch = Int64Value.decode(reader, reader.uint32()).value;
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.ifMetagenerationMatch = Int64Value.decode(reader, reader.uint32()).value;
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.ifMetagenerationNotMatch = Int64Value.decode(reader, reader.uint32()).value;
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.predefinedAcl = reader.int32() as any;
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.projection = reader.int32() as any;
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.metadata = Object.decode(reader, reader.uint32());
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.commonObjectRequestParams = CommonObjectRequestParams.decode(reader, reader.uint32());
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.commonRequestParams = CommonRequestParams.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PatchObjectRequest {
    return {
      bucket: isSet(object.bucket) ? globalThis.String(object.bucket) : "",
      object: isSet(object.object) ? globalThis.String(object.object) : "",
      generation: isSet(object.generation) ? Long.fromValue(object.generation) : Long.ZERO,
      ifGenerationMatch: isSet(object.ifGenerationMatch) ? Long.fromValue(object.ifGenerationMatch) : undefined,
      ifGenerationNotMatch: isSet(object.ifGenerationNotMatch)
        ? Long.fromValue(object.ifGenerationNotMatch)
        : undefined,
      ifMetagenerationMatch: isSet(object.ifMetagenerationMatch)
        ? Long.fromValue(object.ifMetagenerationMatch)
        : undefined,
      ifMetagenerationNotMatch: isSet(object.ifMetagenerationNotMatch)
        ? Long.fromValue(object.ifMetagenerationNotMatch)
        : undefined,
      predefinedAcl: isSet(object.predefinedAcl) ? commonEnums_PredefinedObjectAclFromJSON(object.predefinedAcl) : 0,
      projection: isSet(object.projection) ? commonEnums_ProjectionFromJSON(object.projection) : 0,
      metadata: isSet(object.metadata) ? Object.fromJSON(object.metadata) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      commonObjectRequestParams: isSet(object.commonObjectRequestParams)
        ? CommonObjectRequestParams.fromJSON(object.commonObjectRequestParams)
        : undefined,
      commonRequestParams: isSet(object.commonRequestParams)
        ? CommonRequestParams.fromJSON(object.commonRequestParams)
        : undefined,
    };
  },

  toJSON(message: PatchObjectRequest): unknown {
    const obj: any = {};
    if (message.bucket !== "") {
      obj.bucket = message.bucket;
    }
    if (message.object !== "") {
      obj.object = message.object;
    }
    if (!message.generation.equals(Long.ZERO)) {
      obj.generation = (message.generation || Long.ZERO).toString();
    }
    if (message.ifGenerationMatch !== undefined) {
      obj.ifGenerationMatch = message.ifGenerationMatch;
    }
    if (message.ifGenerationNotMatch !== undefined) {
      obj.ifGenerationNotMatch = message.ifGenerationNotMatch;
    }
    if (message.ifMetagenerationMatch !== undefined) {
      obj.ifMetagenerationMatch = message.ifMetagenerationMatch;
    }
    if (message.ifMetagenerationNotMatch !== undefined) {
      obj.ifMetagenerationNotMatch = message.ifMetagenerationNotMatch;
    }
    if (message.predefinedAcl !== 0) {
      obj.predefinedAcl = commonEnums_PredefinedObjectAclToJSON(message.predefinedAcl);
    }
    if (message.projection !== 0) {
      obj.projection = commonEnums_ProjectionToJSON(message.projection);
    }
    if (message.metadata !== undefined) {
      obj.metadata = Object.toJSON(message.metadata);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.commonObjectRequestParams !== undefined) {
      obj.commonObjectRequestParams = CommonObjectRequestParams.toJSON(message.commonObjectRequestParams);
    }
    if (message.commonRequestParams !== undefined) {
      obj.commonRequestParams = CommonRequestParams.toJSON(message.commonRequestParams);
    }
    return obj;
  },

  create(base?: DeepPartial<PatchObjectRequest>): PatchObjectRequest {
    return PatchObjectRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PatchObjectRequest>): PatchObjectRequest {
    const message = createBasePatchObjectRequest();
    message.bucket = object.bucket ?? "";
    message.object = object.object ?? "";
    message.generation = (object.generation !== undefined && object.generation !== null)
      ? Long.fromValue(object.generation)
      : Long.ZERO;
    message.ifGenerationMatch = (object.ifGenerationMatch !== undefined && object.ifGenerationMatch !== null)
      ? Long.fromValue(object.ifGenerationMatch)
      : undefined;
    message.ifGenerationNotMatch = (object.ifGenerationNotMatch !== undefined && object.ifGenerationNotMatch !== null)
      ? Long.fromValue(object.ifGenerationNotMatch)
      : undefined;
    message.ifMetagenerationMatch =
      (object.ifMetagenerationMatch !== undefined && object.ifMetagenerationMatch !== null)
        ? Long.fromValue(object.ifMetagenerationMatch)
        : undefined;
    message.ifMetagenerationNotMatch =
      (object.ifMetagenerationNotMatch !== undefined && object.ifMetagenerationNotMatch !== null)
        ? Long.fromValue(object.ifMetagenerationNotMatch)
        : undefined;
    message.predefinedAcl = object.predefinedAcl ?? 0;
    message.projection = object.projection ?? 0;
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Object.fromPartial(object.metadata)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    message.commonObjectRequestParams =
      (object.commonObjectRequestParams !== undefined && object.commonObjectRequestParams !== null)
        ? CommonObjectRequestParams.fromPartial(object.commonObjectRequestParams)
        : undefined;
    message.commonRequestParams = (object.commonRequestParams !== undefined && object.commonRequestParams !== null)
      ? CommonRequestParams.fromPartial(object.commonRequestParams)
      : undefined;
    return message;
  },
};

function createBaseUpdateObjectRequest(): UpdateObjectRequest {
  return {
    bucket: "",
    object: "",
    generation: Long.ZERO,
    ifGenerationMatch: undefined,
    ifGenerationNotMatch: undefined,
    ifMetagenerationMatch: undefined,
    ifMetagenerationNotMatch: undefined,
    predefinedAcl: 0,
    projection: 0,
    metadata: undefined,
    commonObjectRequestParams: undefined,
    commonRequestParams: undefined,
  };
}

export const UpdateObjectRequest: MessageFns<UpdateObjectRequest> = {
  encode(message: UpdateObjectRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.bucket !== "") {
      writer.uint32(10).string(message.bucket);
    }
    if (message.object !== "") {
      writer.uint32(18).string(message.object);
    }
    if (!message.generation.equals(Long.ZERO)) {
      writer.uint32(24).int64(message.generation.toString());
    }
    if (message.ifGenerationMatch !== undefined) {
      Int64Value.encode({ value: message.ifGenerationMatch! }, writer.uint32(34).fork()).join();
    }
    if (message.ifGenerationNotMatch !== undefined) {
      Int64Value.encode({ value: message.ifGenerationNotMatch! }, writer.uint32(42).fork()).join();
    }
    if (message.ifMetagenerationMatch !== undefined) {
      Int64Value.encode({ value: message.ifMetagenerationMatch! }, writer.uint32(50).fork()).join();
    }
    if (message.ifMetagenerationNotMatch !== undefined) {
      Int64Value.encode({ value: message.ifMetagenerationNotMatch! }, writer.uint32(58).fork()).join();
    }
    if (message.predefinedAcl !== 0) {
      writer.uint32(64).int32(message.predefinedAcl);
    }
    if (message.projection !== 0) {
      writer.uint32(72).int32(message.projection);
    }
    if (message.metadata !== undefined) {
      Object.encode(message.metadata, writer.uint32(90).fork()).join();
    }
    if (message.commonObjectRequestParams !== undefined) {
      CommonObjectRequestParams.encode(message.commonObjectRequestParams, writer.uint32(98).fork()).join();
    }
    if (message.commonRequestParams !== undefined) {
      CommonRequestParams.encode(message.commonRequestParams, writer.uint32(106).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateObjectRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateObjectRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.bucket = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.object = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.generation = Long.fromString(reader.int64().toString());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.ifGenerationMatch = Int64Value.decode(reader, reader.uint32()).value;
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.ifGenerationNotMatch = Int64Value.decode(reader, reader.uint32()).value;
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.ifMetagenerationMatch = Int64Value.decode(reader, reader.uint32()).value;
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.ifMetagenerationNotMatch = Int64Value.decode(reader, reader.uint32()).value;
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.predefinedAcl = reader.int32() as any;
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.projection = reader.int32() as any;
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.metadata = Object.decode(reader, reader.uint32());
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.commonObjectRequestParams = CommonObjectRequestParams.decode(reader, reader.uint32());
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.commonRequestParams = CommonRequestParams.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateObjectRequest {
    return {
      bucket: isSet(object.bucket) ? globalThis.String(object.bucket) : "",
      object: isSet(object.object) ? globalThis.String(object.object) : "",
      generation: isSet(object.generation) ? Long.fromValue(object.generation) : Long.ZERO,
      ifGenerationMatch: isSet(object.ifGenerationMatch) ? Long.fromValue(object.ifGenerationMatch) : undefined,
      ifGenerationNotMatch: isSet(object.ifGenerationNotMatch)
        ? Long.fromValue(object.ifGenerationNotMatch)
        : undefined,
      ifMetagenerationMatch: isSet(object.ifMetagenerationMatch)
        ? Long.fromValue(object.ifMetagenerationMatch)
        : undefined,
      ifMetagenerationNotMatch: isSet(object.ifMetagenerationNotMatch)
        ? Long.fromValue(object.ifMetagenerationNotMatch)
        : undefined,
      predefinedAcl: isSet(object.predefinedAcl) ? commonEnums_PredefinedObjectAclFromJSON(object.predefinedAcl) : 0,
      projection: isSet(object.projection) ? commonEnums_ProjectionFromJSON(object.projection) : 0,
      metadata: isSet(object.metadata) ? Object.fromJSON(object.metadata) : undefined,
      commonObjectRequestParams: isSet(object.commonObjectRequestParams)
        ? CommonObjectRequestParams.fromJSON(object.commonObjectRequestParams)
        : undefined,
      commonRequestParams: isSet(object.commonRequestParams)
        ? CommonRequestParams.fromJSON(object.commonRequestParams)
        : undefined,
    };
  },

  toJSON(message: UpdateObjectRequest): unknown {
    const obj: any = {};
    if (message.bucket !== "") {
      obj.bucket = message.bucket;
    }
    if (message.object !== "") {
      obj.object = message.object;
    }
    if (!message.generation.equals(Long.ZERO)) {
      obj.generation = (message.generation || Long.ZERO).toString();
    }
    if (message.ifGenerationMatch !== undefined) {
      obj.ifGenerationMatch = message.ifGenerationMatch;
    }
    if (message.ifGenerationNotMatch !== undefined) {
      obj.ifGenerationNotMatch = message.ifGenerationNotMatch;
    }
    if (message.ifMetagenerationMatch !== undefined) {
      obj.ifMetagenerationMatch = message.ifMetagenerationMatch;
    }
    if (message.ifMetagenerationNotMatch !== undefined) {
      obj.ifMetagenerationNotMatch = message.ifMetagenerationNotMatch;
    }
    if (message.predefinedAcl !== 0) {
      obj.predefinedAcl = commonEnums_PredefinedObjectAclToJSON(message.predefinedAcl);
    }
    if (message.projection !== 0) {
      obj.projection = commonEnums_ProjectionToJSON(message.projection);
    }
    if (message.metadata !== undefined) {
      obj.metadata = Object.toJSON(message.metadata);
    }
    if (message.commonObjectRequestParams !== undefined) {
      obj.commonObjectRequestParams = CommonObjectRequestParams.toJSON(message.commonObjectRequestParams);
    }
    if (message.commonRequestParams !== undefined) {
      obj.commonRequestParams = CommonRequestParams.toJSON(message.commonRequestParams);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateObjectRequest>): UpdateObjectRequest {
    return UpdateObjectRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateObjectRequest>): UpdateObjectRequest {
    const message = createBaseUpdateObjectRequest();
    message.bucket = object.bucket ?? "";
    message.object = object.object ?? "";
    message.generation = (object.generation !== undefined && object.generation !== null)
      ? Long.fromValue(object.generation)
      : Long.ZERO;
    message.ifGenerationMatch = (object.ifGenerationMatch !== undefined && object.ifGenerationMatch !== null)
      ? Long.fromValue(object.ifGenerationMatch)
      : undefined;
    message.ifGenerationNotMatch = (object.ifGenerationNotMatch !== undefined && object.ifGenerationNotMatch !== null)
      ? Long.fromValue(object.ifGenerationNotMatch)
      : undefined;
    message.ifMetagenerationMatch =
      (object.ifMetagenerationMatch !== undefined && object.ifMetagenerationMatch !== null)
        ? Long.fromValue(object.ifMetagenerationMatch)
        : undefined;
    message.ifMetagenerationNotMatch =
      (object.ifMetagenerationNotMatch !== undefined && object.ifMetagenerationNotMatch !== null)
        ? Long.fromValue(object.ifMetagenerationNotMatch)
        : undefined;
    message.predefinedAcl = object.predefinedAcl ?? 0;
    message.projection = object.projection ?? 0;
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Object.fromPartial(object.metadata)
      : undefined;
    message.commonObjectRequestParams =
      (object.commonObjectRequestParams !== undefined && object.commonObjectRequestParams !== null)
        ? CommonObjectRequestParams.fromPartial(object.commonObjectRequestParams)
        : undefined;
    message.commonRequestParams = (object.commonRequestParams !== undefined && object.commonRequestParams !== null)
      ? CommonRequestParams.fromPartial(object.commonRequestParams)
      : undefined;
    return message;
  },
};

function createBaseWatchAllObjectsRequest(): WatchAllObjectsRequest {
  return {
    bucket: "",
    versions: false,
    delimiter: "",
    maxResults: 0,
    prefix: "",
    includeTrailingDelimiter: false,
    pageToken: "",
    projection: 0,
    channel: undefined,
    commonRequestParams: undefined,
  };
}

export const WatchAllObjectsRequest: MessageFns<WatchAllObjectsRequest> = {
  encode(message: WatchAllObjectsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.bucket !== "") {
      writer.uint32(10).string(message.bucket);
    }
    if (message.versions !== false) {
      writer.uint32(16).bool(message.versions);
    }
    if (message.delimiter !== "") {
      writer.uint32(26).string(message.delimiter);
    }
    if (message.maxResults !== 0) {
      writer.uint32(32).int32(message.maxResults);
    }
    if (message.prefix !== "") {
      writer.uint32(42).string(message.prefix);
    }
    if (message.includeTrailingDelimiter !== false) {
      writer.uint32(48).bool(message.includeTrailingDelimiter);
    }
    if (message.pageToken !== "") {
      writer.uint32(58).string(message.pageToken);
    }
    if (message.projection !== 0) {
      writer.uint32(64).int32(message.projection);
    }
    if (message.channel !== undefined) {
      Channel.encode(message.channel, writer.uint32(82).fork()).join();
    }
    if (message.commonRequestParams !== undefined) {
      CommonRequestParams.encode(message.commonRequestParams, writer.uint32(90).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WatchAllObjectsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWatchAllObjectsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.bucket = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.versions = reader.bool();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.delimiter = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.maxResults = reader.int32();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.prefix = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.includeTrailingDelimiter = reader.bool();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.projection = reader.int32() as any;
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.channel = Channel.decode(reader, reader.uint32());
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.commonRequestParams = CommonRequestParams.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WatchAllObjectsRequest {
    return {
      bucket: isSet(object.bucket) ? globalThis.String(object.bucket) : "",
      versions: isSet(object.versions) ? globalThis.Boolean(object.versions) : false,
      delimiter: isSet(object.delimiter) ? globalThis.String(object.delimiter) : "",
      maxResults: isSet(object.maxResults) ? globalThis.Number(object.maxResults) : 0,
      prefix: isSet(object.prefix) ? globalThis.String(object.prefix) : "",
      includeTrailingDelimiter: isSet(object.includeTrailingDelimiter)
        ? globalThis.Boolean(object.includeTrailingDelimiter)
        : false,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      projection: isSet(object.projection) ? commonEnums_ProjectionFromJSON(object.projection) : 0,
      channel: isSet(object.channel) ? Channel.fromJSON(object.channel) : undefined,
      commonRequestParams: isSet(object.commonRequestParams)
        ? CommonRequestParams.fromJSON(object.commonRequestParams)
        : undefined,
    };
  },

  toJSON(message: WatchAllObjectsRequest): unknown {
    const obj: any = {};
    if (message.bucket !== "") {
      obj.bucket = message.bucket;
    }
    if (message.versions !== false) {
      obj.versions = message.versions;
    }
    if (message.delimiter !== "") {
      obj.delimiter = message.delimiter;
    }
    if (message.maxResults !== 0) {
      obj.maxResults = Math.round(message.maxResults);
    }
    if (message.prefix !== "") {
      obj.prefix = message.prefix;
    }
    if (message.includeTrailingDelimiter !== false) {
      obj.includeTrailingDelimiter = message.includeTrailingDelimiter;
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.projection !== 0) {
      obj.projection = commonEnums_ProjectionToJSON(message.projection);
    }
    if (message.channel !== undefined) {
      obj.channel = Channel.toJSON(message.channel);
    }
    if (message.commonRequestParams !== undefined) {
      obj.commonRequestParams = CommonRequestParams.toJSON(message.commonRequestParams);
    }
    return obj;
  },

  create(base?: DeepPartial<WatchAllObjectsRequest>): WatchAllObjectsRequest {
    return WatchAllObjectsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<WatchAllObjectsRequest>): WatchAllObjectsRequest {
    const message = createBaseWatchAllObjectsRequest();
    message.bucket = object.bucket ?? "";
    message.versions = object.versions ?? false;
    message.delimiter = object.delimiter ?? "";
    message.maxResults = object.maxResults ?? 0;
    message.prefix = object.prefix ?? "";
    message.includeTrailingDelimiter = object.includeTrailingDelimiter ?? false;
    message.pageToken = object.pageToken ?? "";
    message.projection = object.projection ?? 0;
    message.channel = (object.channel !== undefined && object.channel !== null)
      ? Channel.fromPartial(object.channel)
      : undefined;
    message.commonRequestParams = (object.commonRequestParams !== undefined && object.commonRequestParams !== null)
      ? CommonRequestParams.fromPartial(object.commonRequestParams)
      : undefined;
    return message;
  },
};

function createBaseGetProjectServiceAccountRequest(): GetProjectServiceAccountRequest {
  return { projectId: "", commonRequestParams: undefined };
}

export const GetProjectServiceAccountRequest: MessageFns<GetProjectServiceAccountRequest> = {
  encode(message: GetProjectServiceAccountRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.commonRequestParams !== undefined) {
      CommonRequestParams.encode(message.commonRequestParams, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetProjectServiceAccountRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetProjectServiceAccountRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.commonRequestParams = CommonRequestParams.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetProjectServiceAccountRequest {
    return {
      projectId: isSet(object.projectId) ? globalThis.String(object.projectId) : "",
      commonRequestParams: isSet(object.commonRequestParams)
        ? CommonRequestParams.fromJSON(object.commonRequestParams)
        : undefined,
    };
  },

  toJSON(message: GetProjectServiceAccountRequest): unknown {
    const obj: any = {};
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.commonRequestParams !== undefined) {
      obj.commonRequestParams = CommonRequestParams.toJSON(message.commonRequestParams);
    }
    return obj;
  },

  create(base?: DeepPartial<GetProjectServiceAccountRequest>): GetProjectServiceAccountRequest {
    return GetProjectServiceAccountRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetProjectServiceAccountRequest>): GetProjectServiceAccountRequest {
    const message = createBaseGetProjectServiceAccountRequest();
    message.projectId = object.projectId ?? "";
    message.commonRequestParams = (object.commonRequestParams !== undefined && object.commonRequestParams !== null)
      ? CommonRequestParams.fromPartial(object.commonRequestParams)
      : undefined;
    return message;
  },
};

function createBaseCreateHmacKeyRequest(): CreateHmacKeyRequest {
  return { projectId: "", serviceAccountEmail: "", commonRequestParams: undefined };
}

export const CreateHmacKeyRequest: MessageFns<CreateHmacKeyRequest> = {
  encode(message: CreateHmacKeyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.serviceAccountEmail !== "") {
      writer.uint32(18).string(message.serviceAccountEmail);
    }
    if (message.commonRequestParams !== undefined) {
      CommonRequestParams.encode(message.commonRequestParams, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateHmacKeyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateHmacKeyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.serviceAccountEmail = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.commonRequestParams = CommonRequestParams.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateHmacKeyRequest {
    return {
      projectId: isSet(object.projectId) ? globalThis.String(object.projectId) : "",
      serviceAccountEmail: isSet(object.serviceAccountEmail) ? globalThis.String(object.serviceAccountEmail) : "",
      commonRequestParams: isSet(object.commonRequestParams)
        ? CommonRequestParams.fromJSON(object.commonRequestParams)
        : undefined,
    };
  },

  toJSON(message: CreateHmacKeyRequest): unknown {
    const obj: any = {};
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.serviceAccountEmail !== "") {
      obj.serviceAccountEmail = message.serviceAccountEmail;
    }
    if (message.commonRequestParams !== undefined) {
      obj.commonRequestParams = CommonRequestParams.toJSON(message.commonRequestParams);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateHmacKeyRequest>): CreateHmacKeyRequest {
    return CreateHmacKeyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateHmacKeyRequest>): CreateHmacKeyRequest {
    const message = createBaseCreateHmacKeyRequest();
    message.projectId = object.projectId ?? "";
    message.serviceAccountEmail = object.serviceAccountEmail ?? "";
    message.commonRequestParams = (object.commonRequestParams !== undefined && object.commonRequestParams !== null)
      ? CommonRequestParams.fromPartial(object.commonRequestParams)
      : undefined;
    return message;
  },
};

function createBaseCreateHmacKeyResponse(): CreateHmacKeyResponse {
  return { metadata: undefined, secret: "" };
}

export const CreateHmacKeyResponse: MessageFns<CreateHmacKeyResponse> = {
  encode(message: CreateHmacKeyResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.metadata !== undefined) {
      HmacKeyMetadata.encode(message.metadata, writer.uint32(10).fork()).join();
    }
    if (message.secret !== "") {
      writer.uint32(18).string(message.secret);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateHmacKeyResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateHmacKeyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.metadata = HmacKeyMetadata.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.secret = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateHmacKeyResponse {
    return {
      metadata: isSet(object.metadata) ? HmacKeyMetadata.fromJSON(object.metadata) : undefined,
      secret: isSet(object.secret) ? globalThis.String(object.secret) : "",
    };
  },

  toJSON(message: CreateHmacKeyResponse): unknown {
    const obj: any = {};
    if (message.metadata !== undefined) {
      obj.metadata = HmacKeyMetadata.toJSON(message.metadata);
    }
    if (message.secret !== "") {
      obj.secret = message.secret;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateHmacKeyResponse>): CreateHmacKeyResponse {
    return CreateHmacKeyResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateHmacKeyResponse>): CreateHmacKeyResponse {
    const message = createBaseCreateHmacKeyResponse();
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? HmacKeyMetadata.fromPartial(object.metadata)
      : undefined;
    message.secret = object.secret ?? "";
    return message;
  },
};

function createBaseDeleteHmacKeyRequest(): DeleteHmacKeyRequest {
  return { accessId: "", projectId: "", commonRequestParams: undefined };
}

export const DeleteHmacKeyRequest: MessageFns<DeleteHmacKeyRequest> = {
  encode(message: DeleteHmacKeyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.accessId !== "") {
      writer.uint32(10).string(message.accessId);
    }
    if (message.projectId !== "") {
      writer.uint32(18).string(message.projectId);
    }
    if (message.commonRequestParams !== undefined) {
      CommonRequestParams.encode(message.commonRequestParams, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteHmacKeyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteHmacKeyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.accessId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.commonRequestParams = CommonRequestParams.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteHmacKeyRequest {
    return {
      accessId: isSet(object.accessId) ? globalThis.String(object.accessId) : "",
      projectId: isSet(object.projectId) ? globalThis.String(object.projectId) : "",
      commonRequestParams: isSet(object.commonRequestParams)
        ? CommonRequestParams.fromJSON(object.commonRequestParams)
        : undefined,
    };
  },

  toJSON(message: DeleteHmacKeyRequest): unknown {
    const obj: any = {};
    if (message.accessId !== "") {
      obj.accessId = message.accessId;
    }
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.commonRequestParams !== undefined) {
      obj.commonRequestParams = CommonRequestParams.toJSON(message.commonRequestParams);
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteHmacKeyRequest>): DeleteHmacKeyRequest {
    return DeleteHmacKeyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteHmacKeyRequest>): DeleteHmacKeyRequest {
    const message = createBaseDeleteHmacKeyRequest();
    message.accessId = object.accessId ?? "";
    message.projectId = object.projectId ?? "";
    message.commonRequestParams = (object.commonRequestParams !== undefined && object.commonRequestParams !== null)
      ? CommonRequestParams.fromPartial(object.commonRequestParams)
      : undefined;
    return message;
  },
};

function createBaseGetHmacKeyRequest(): GetHmacKeyRequest {
  return { accessId: "", projectId: "", commonRequestParams: undefined };
}

export const GetHmacKeyRequest: MessageFns<GetHmacKeyRequest> = {
  encode(message: GetHmacKeyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.accessId !== "") {
      writer.uint32(10).string(message.accessId);
    }
    if (message.projectId !== "") {
      writer.uint32(18).string(message.projectId);
    }
    if (message.commonRequestParams !== undefined) {
      CommonRequestParams.encode(message.commonRequestParams, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetHmacKeyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetHmacKeyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.accessId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.commonRequestParams = CommonRequestParams.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetHmacKeyRequest {
    return {
      accessId: isSet(object.accessId) ? globalThis.String(object.accessId) : "",
      projectId: isSet(object.projectId) ? globalThis.String(object.projectId) : "",
      commonRequestParams: isSet(object.commonRequestParams)
        ? CommonRequestParams.fromJSON(object.commonRequestParams)
        : undefined,
    };
  },

  toJSON(message: GetHmacKeyRequest): unknown {
    const obj: any = {};
    if (message.accessId !== "") {
      obj.accessId = message.accessId;
    }
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.commonRequestParams !== undefined) {
      obj.commonRequestParams = CommonRequestParams.toJSON(message.commonRequestParams);
    }
    return obj;
  },

  create(base?: DeepPartial<GetHmacKeyRequest>): GetHmacKeyRequest {
    return GetHmacKeyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetHmacKeyRequest>): GetHmacKeyRequest {
    const message = createBaseGetHmacKeyRequest();
    message.accessId = object.accessId ?? "";
    message.projectId = object.projectId ?? "";
    message.commonRequestParams = (object.commonRequestParams !== undefined && object.commonRequestParams !== null)
      ? CommonRequestParams.fromPartial(object.commonRequestParams)
      : undefined;
    return message;
  },
};

function createBaseListHmacKeysRequest(): ListHmacKeysRequest {
  return {
    projectId: "",
    serviceAccountEmail: "",
    showDeletedKeys: false,
    maxResults: 0,
    pageToken: "",
    commonRequestParams: undefined,
  };
}

export const ListHmacKeysRequest: MessageFns<ListHmacKeysRequest> = {
  encode(message: ListHmacKeysRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.serviceAccountEmail !== "") {
      writer.uint32(18).string(message.serviceAccountEmail);
    }
    if (message.showDeletedKeys !== false) {
      writer.uint32(24).bool(message.showDeletedKeys);
    }
    if (message.maxResults !== 0) {
      writer.uint32(32).int32(message.maxResults);
    }
    if (message.pageToken !== "") {
      writer.uint32(42).string(message.pageToken);
    }
    if (message.commonRequestParams !== undefined) {
      CommonRequestParams.encode(message.commonRequestParams, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListHmacKeysRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListHmacKeysRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.serviceAccountEmail = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.showDeletedKeys = reader.bool();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.maxResults = reader.int32();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.commonRequestParams = CommonRequestParams.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListHmacKeysRequest {
    return {
      projectId: isSet(object.projectId) ? globalThis.String(object.projectId) : "",
      serviceAccountEmail: isSet(object.serviceAccountEmail) ? globalThis.String(object.serviceAccountEmail) : "",
      showDeletedKeys: isSet(object.showDeletedKeys) ? globalThis.Boolean(object.showDeletedKeys) : false,
      maxResults: isSet(object.maxResults) ? globalThis.Number(object.maxResults) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      commonRequestParams: isSet(object.commonRequestParams)
        ? CommonRequestParams.fromJSON(object.commonRequestParams)
        : undefined,
    };
  },

  toJSON(message: ListHmacKeysRequest): unknown {
    const obj: any = {};
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.serviceAccountEmail !== "") {
      obj.serviceAccountEmail = message.serviceAccountEmail;
    }
    if (message.showDeletedKeys !== false) {
      obj.showDeletedKeys = message.showDeletedKeys;
    }
    if (message.maxResults !== 0) {
      obj.maxResults = Math.round(message.maxResults);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.commonRequestParams !== undefined) {
      obj.commonRequestParams = CommonRequestParams.toJSON(message.commonRequestParams);
    }
    return obj;
  },

  create(base?: DeepPartial<ListHmacKeysRequest>): ListHmacKeysRequest {
    return ListHmacKeysRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListHmacKeysRequest>): ListHmacKeysRequest {
    const message = createBaseListHmacKeysRequest();
    message.projectId = object.projectId ?? "";
    message.serviceAccountEmail = object.serviceAccountEmail ?? "";
    message.showDeletedKeys = object.showDeletedKeys ?? false;
    message.maxResults = object.maxResults ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.commonRequestParams = (object.commonRequestParams !== undefined && object.commonRequestParams !== null)
      ? CommonRequestParams.fromPartial(object.commonRequestParams)
      : undefined;
    return message;
  },
};

function createBaseListHmacKeysResponse(): ListHmacKeysResponse {
  return { nextPageToken: "", items: [] };
}

export const ListHmacKeysResponse: MessageFns<ListHmacKeysResponse> = {
  encode(message: ListHmacKeysResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.nextPageToken !== "") {
      writer.uint32(10).string(message.nextPageToken);
    }
    for (const v of message.items) {
      HmacKeyMetadata.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListHmacKeysResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListHmacKeysResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.items.push(HmacKeyMetadata.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListHmacKeysResponse {
    return {
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      items: globalThis.Array.isArray(object?.items) ? object.items.map((e: any) => HmacKeyMetadata.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListHmacKeysResponse): unknown {
    const obj: any = {};
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.items?.length) {
      obj.items = message.items.map((e) => HmacKeyMetadata.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ListHmacKeysResponse>): ListHmacKeysResponse {
    return ListHmacKeysResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListHmacKeysResponse>): ListHmacKeysResponse {
    const message = createBaseListHmacKeysResponse();
    message.nextPageToken = object.nextPageToken ?? "";
    message.items = object.items?.map((e) => HmacKeyMetadata.fromPartial(e)) || [];
    return message;
  },
};

function createBaseUpdateHmacKeyRequest(): UpdateHmacKeyRequest {
  return { accessId: "", projectId: "", metadata: undefined, commonRequestParams: undefined };
}

export const UpdateHmacKeyRequest: MessageFns<UpdateHmacKeyRequest> = {
  encode(message: UpdateHmacKeyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.accessId !== "") {
      writer.uint32(10).string(message.accessId);
    }
    if (message.projectId !== "") {
      writer.uint32(18).string(message.projectId);
    }
    if (message.metadata !== undefined) {
      HmacKeyMetadata.encode(message.metadata, writer.uint32(26).fork()).join();
    }
    if (message.commonRequestParams !== undefined) {
      CommonRequestParams.encode(message.commonRequestParams, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateHmacKeyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateHmacKeyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.accessId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.metadata = HmacKeyMetadata.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.commonRequestParams = CommonRequestParams.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateHmacKeyRequest {
    return {
      accessId: isSet(object.accessId) ? globalThis.String(object.accessId) : "",
      projectId: isSet(object.projectId) ? globalThis.String(object.projectId) : "",
      metadata: isSet(object.metadata) ? HmacKeyMetadata.fromJSON(object.metadata) : undefined,
      commonRequestParams: isSet(object.commonRequestParams)
        ? CommonRequestParams.fromJSON(object.commonRequestParams)
        : undefined,
    };
  },

  toJSON(message: UpdateHmacKeyRequest): unknown {
    const obj: any = {};
    if (message.accessId !== "") {
      obj.accessId = message.accessId;
    }
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.metadata !== undefined) {
      obj.metadata = HmacKeyMetadata.toJSON(message.metadata);
    }
    if (message.commonRequestParams !== undefined) {
      obj.commonRequestParams = CommonRequestParams.toJSON(message.commonRequestParams);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateHmacKeyRequest>): UpdateHmacKeyRequest {
    return UpdateHmacKeyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateHmacKeyRequest>): UpdateHmacKeyRequest {
    const message = createBaseUpdateHmacKeyRequest();
    message.accessId = object.accessId ?? "";
    message.projectId = object.projectId ?? "";
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? HmacKeyMetadata.fromPartial(object.metadata)
      : undefined;
    message.commonRequestParams = (object.commonRequestParams !== undefined && object.commonRequestParams !== null)
      ? CommonRequestParams.fromPartial(object.commonRequestParams)
      : undefined;
    return message;
  },
};

function createBaseGetIamPolicyRequest(): GetIamPolicyRequest {
  return { iamRequest: undefined, commonRequestParams: undefined };
}

export const GetIamPolicyRequest: MessageFns<GetIamPolicyRequest> = {
  encode(message: GetIamPolicyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.iamRequest !== undefined) {
      GetIamPolicyRequest1.encode(message.iamRequest, writer.uint32(10).fork()).join();
    }
    if (message.commonRequestParams !== undefined) {
      CommonRequestParams.encode(message.commonRequestParams, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetIamPolicyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetIamPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.iamRequest = GetIamPolicyRequest1.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.commonRequestParams = CommonRequestParams.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetIamPolicyRequest {
    return {
      iamRequest: isSet(object.iamRequest) ? GetIamPolicyRequest1.fromJSON(object.iamRequest) : undefined,
      commonRequestParams: isSet(object.commonRequestParams)
        ? CommonRequestParams.fromJSON(object.commonRequestParams)
        : undefined,
    };
  },

  toJSON(message: GetIamPolicyRequest): unknown {
    const obj: any = {};
    if (message.iamRequest !== undefined) {
      obj.iamRequest = GetIamPolicyRequest1.toJSON(message.iamRequest);
    }
    if (message.commonRequestParams !== undefined) {
      obj.commonRequestParams = CommonRequestParams.toJSON(message.commonRequestParams);
    }
    return obj;
  },

  create(base?: DeepPartial<GetIamPolicyRequest>): GetIamPolicyRequest {
    return GetIamPolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetIamPolicyRequest>): GetIamPolicyRequest {
    const message = createBaseGetIamPolicyRequest();
    message.iamRequest = (object.iamRequest !== undefined && object.iamRequest !== null)
      ? GetIamPolicyRequest1.fromPartial(object.iamRequest)
      : undefined;
    message.commonRequestParams = (object.commonRequestParams !== undefined && object.commonRequestParams !== null)
      ? CommonRequestParams.fromPartial(object.commonRequestParams)
      : undefined;
    return message;
  },
};

function createBaseSetIamPolicyRequest(): SetIamPolicyRequest {
  return { iamRequest: undefined, commonRequestParams: undefined };
}

export const SetIamPolicyRequest: MessageFns<SetIamPolicyRequest> = {
  encode(message: SetIamPolicyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.iamRequest !== undefined) {
      SetIamPolicyRequest2.encode(message.iamRequest, writer.uint32(10).fork()).join();
    }
    if (message.commonRequestParams !== undefined) {
      CommonRequestParams.encode(message.commonRequestParams, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetIamPolicyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetIamPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.iamRequest = SetIamPolicyRequest2.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.commonRequestParams = CommonRequestParams.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetIamPolicyRequest {
    return {
      iamRequest: isSet(object.iamRequest) ? SetIamPolicyRequest2.fromJSON(object.iamRequest) : undefined,
      commonRequestParams: isSet(object.commonRequestParams)
        ? CommonRequestParams.fromJSON(object.commonRequestParams)
        : undefined,
    };
  },

  toJSON(message: SetIamPolicyRequest): unknown {
    const obj: any = {};
    if (message.iamRequest !== undefined) {
      obj.iamRequest = SetIamPolicyRequest2.toJSON(message.iamRequest);
    }
    if (message.commonRequestParams !== undefined) {
      obj.commonRequestParams = CommonRequestParams.toJSON(message.commonRequestParams);
    }
    return obj;
  },

  create(base?: DeepPartial<SetIamPolicyRequest>): SetIamPolicyRequest {
    return SetIamPolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SetIamPolicyRequest>): SetIamPolicyRequest {
    const message = createBaseSetIamPolicyRequest();
    message.iamRequest = (object.iamRequest !== undefined && object.iamRequest !== null)
      ? SetIamPolicyRequest2.fromPartial(object.iamRequest)
      : undefined;
    message.commonRequestParams = (object.commonRequestParams !== undefined && object.commonRequestParams !== null)
      ? CommonRequestParams.fromPartial(object.commonRequestParams)
      : undefined;
    return message;
  },
};

function createBaseTestIamPermissionsRequest(): TestIamPermissionsRequest {
  return { iamRequest: undefined, commonRequestParams: undefined };
}

export const TestIamPermissionsRequest: MessageFns<TestIamPermissionsRequest> = {
  encode(message: TestIamPermissionsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.iamRequest !== undefined) {
      TestIamPermissionsRequest3.encode(message.iamRequest, writer.uint32(10).fork()).join();
    }
    if (message.commonRequestParams !== undefined) {
      CommonRequestParams.encode(message.commonRequestParams, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TestIamPermissionsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTestIamPermissionsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.iamRequest = TestIamPermissionsRequest3.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.commonRequestParams = CommonRequestParams.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TestIamPermissionsRequest {
    return {
      iamRequest: isSet(object.iamRequest) ? TestIamPermissionsRequest3.fromJSON(object.iamRequest) : undefined,
      commonRequestParams: isSet(object.commonRequestParams)
        ? CommonRequestParams.fromJSON(object.commonRequestParams)
        : undefined,
    };
  },

  toJSON(message: TestIamPermissionsRequest): unknown {
    const obj: any = {};
    if (message.iamRequest !== undefined) {
      obj.iamRequest = TestIamPermissionsRequest3.toJSON(message.iamRequest);
    }
    if (message.commonRequestParams !== undefined) {
      obj.commonRequestParams = CommonRequestParams.toJSON(message.commonRequestParams);
    }
    return obj;
  },

  create(base?: DeepPartial<TestIamPermissionsRequest>): TestIamPermissionsRequest {
    return TestIamPermissionsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TestIamPermissionsRequest>): TestIamPermissionsRequest {
    const message = createBaseTestIamPermissionsRequest();
    message.iamRequest = (object.iamRequest !== undefined && object.iamRequest !== null)
      ? TestIamPermissionsRequest3.fromPartial(object.iamRequest)
      : undefined;
    message.commonRequestParams = (object.commonRequestParams !== undefined && object.commonRequestParams !== null)
      ? CommonRequestParams.fromPartial(object.commonRequestParams)
      : undefined;
    return message;
  },
};

function createBaseCommonObjectRequestParams(): CommonObjectRequestParams {
  return { encryptionAlgorithm: "", encryptionKey: "", encryptionKeySha256: "" };
}

export const CommonObjectRequestParams: MessageFns<CommonObjectRequestParams> = {
  encode(message: CommonObjectRequestParams, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.encryptionAlgorithm !== "") {
      writer.uint32(10).string(message.encryptionAlgorithm);
    }
    if (message.encryptionKey !== "") {
      writer.uint32(18).string(message.encryptionKey);
    }
    if (message.encryptionKeySha256 !== "") {
      writer.uint32(26).string(message.encryptionKeySha256);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CommonObjectRequestParams {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCommonObjectRequestParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.encryptionAlgorithm = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.encryptionKey = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.encryptionKeySha256 = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CommonObjectRequestParams {
    return {
      encryptionAlgorithm: isSet(object.encryptionAlgorithm) ? globalThis.String(object.encryptionAlgorithm) : "",
      encryptionKey: isSet(object.encryptionKey) ? globalThis.String(object.encryptionKey) : "",
      encryptionKeySha256: isSet(object.encryptionKeySha256) ? globalThis.String(object.encryptionKeySha256) : "",
    };
  },

  toJSON(message: CommonObjectRequestParams): unknown {
    const obj: any = {};
    if (message.encryptionAlgorithm !== "") {
      obj.encryptionAlgorithm = message.encryptionAlgorithm;
    }
    if (message.encryptionKey !== "") {
      obj.encryptionKey = message.encryptionKey;
    }
    if (message.encryptionKeySha256 !== "") {
      obj.encryptionKeySha256 = message.encryptionKeySha256;
    }
    return obj;
  },

  create(base?: DeepPartial<CommonObjectRequestParams>): CommonObjectRequestParams {
    return CommonObjectRequestParams.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CommonObjectRequestParams>): CommonObjectRequestParams {
    const message = createBaseCommonObjectRequestParams();
    message.encryptionAlgorithm = object.encryptionAlgorithm ?? "";
    message.encryptionKey = object.encryptionKey ?? "";
    message.encryptionKeySha256 = object.encryptionKeySha256 ?? "";
    return message;
  },
};

function createBaseCommonRequestParams(): CommonRequestParams {
  return { userProject: "", quotaUser: "", fields: undefined };
}

export const CommonRequestParams: MessageFns<CommonRequestParams> = {
  encode(message: CommonRequestParams, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userProject !== "") {
      writer.uint32(10).string(message.userProject);
    }
    if (message.quotaUser !== "") {
      writer.uint32(18).string(message.quotaUser);
    }
    if (message.fields !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.fields), writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CommonRequestParams {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCommonRequestParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userProject = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.quotaUser = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.fields = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CommonRequestParams {
    return {
      userProject: isSet(object.userProject) ? globalThis.String(object.userProject) : "",
      quotaUser: isSet(object.quotaUser) ? globalThis.String(object.quotaUser) : "",
      fields: isSet(object.fields) ? FieldMask.unwrap(FieldMask.fromJSON(object.fields)) : undefined,
    };
  },

  toJSON(message: CommonRequestParams): unknown {
    const obj: any = {};
    if (message.userProject !== "") {
      obj.userProject = message.userProject;
    }
    if (message.quotaUser !== "") {
      obj.quotaUser = message.quotaUser;
    }
    if (message.fields !== undefined) {
      obj.fields = FieldMask.toJSON(FieldMask.wrap(message.fields));
    }
    return obj;
  },

  create(base?: DeepPartial<CommonRequestParams>): CommonRequestParams {
    return CommonRequestParams.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CommonRequestParams>): CommonRequestParams {
    const message = createBaseCommonRequestParams();
    message.userProject = object.userProject ?? "";
    message.quotaUser = object.quotaUser ?? "";
    message.fields = object.fields ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
