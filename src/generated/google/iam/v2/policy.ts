// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/iam/v2/policy.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../longrunning/operations.js";
import { Timestamp } from "../../protobuf/timestamp.js";
import { DenyRule } from "./deny.js";

export const protobufPackage = "google.iam.v2";

/** Data for an IAM policy. */
export interface Policy {
  /**
   * Immutable. The resource name of the `Policy`, which must be unique. Format:
   * `policies/{attachment_point}/denypolicies/{policy_id}`
   *
   * The attachment point is identified by its URL-encoded full resource name,
   * which means that the forward-slash character, `/`, must be written as
   * `%2F`. For example,
   * `policies/cloudresourcemanager.googleapis.com%2Fprojects%2Fmy-project/denypolicies/my-deny-policy`.
   *
   * For organizations and folders, use the numeric ID in the full resource
   * name. For projects, requests can use the alphanumeric or the numeric ID.
   * Responses always contain the numeric ID.
   */
  name: string;
  /**
   * Immutable. The globally unique ID of the `Policy`. Assigned automatically when the
   * `Policy` is created.
   */
  uid: string;
  /** Output only. The kind of the `Policy`. Always contains the value `DenyPolicy`. */
  kind: string;
  /**
   * A user-specified description of the `Policy`. This value can be up to 63
   * characters.
   */
  displayName: string;
  /**
   * A key-value map to store arbitrary metadata for the `Policy`. Keys
   * can be up to 63 characters. Values can be up to 255 characters.
   */
  annotations: { [key: string]: string };
  /**
   * An opaque tag that identifies the current version of the `Policy`. IAM uses
   * this value to help manage concurrent updates, so they do not cause one
   * update to be overwritten by another.
   *
   * If this field is present in a [CreatePolicy][] request, the value is
   * ignored.
   */
  etag: string;
  /** Output only. The time when the `Policy` was created. */
  createTime:
    | Date
    | undefined;
  /** Output only. The time when the `Policy` was last updated. */
  updateTime:
    | Date
    | undefined;
  /** Output only. The time when the `Policy` was deleted. Empty if the policy is not deleted. */
  deleteTime:
    | Date
    | undefined;
  /**
   * A list of rules that specify the behavior of the `Policy`. All of the rules
   * should be of the `kind` specified in the `Policy`.
   */
  rules: PolicyRule[];
  /**
   * Immutable. Specifies that this policy is managed by an authority and can only be
   * modified by that authority. Usage is restricted.
   */
  managingAuthority: string;
}

export interface Policy_AnnotationsEntry {
  key: string;
  value: string;
}

/** A single rule in a `Policy`. */
export interface PolicyRule {
  /** A rule for a deny policy. */
  denyRule?:
    | DenyRule
    | undefined;
  /**
   * A user-specified description of the rule. This value can be up to 256
   * characters.
   */
  description: string;
}

/** Request message for `ListPolicies`. */
export interface ListPoliciesRequest {
  /**
   * Required. The resource that the policy is attached to, along with the kind of policy
   * to list. Format:
   * `policies/{attachment_point}/denypolicies`
   *
   * The attachment point is identified by its URL-encoded full resource name,
   * which means that the forward-slash character, `/`, must be written as
   * `%2F`. For example,
   * `policies/cloudresourcemanager.googleapis.com%2Fprojects%2Fmy-project/denypolicies`.
   *
   * For organizations and folders, use the numeric ID in the full resource
   * name. For projects, you can use the alphanumeric or the numeric ID.
   */
  parent: string;
  /**
   * The maximum number of policies to return. IAM ignores this value and uses
   * the value 1000.
   */
  pageSize: number;
  /**
   * A page token received in a [ListPoliciesResponse][google.iam.v2.ListPoliciesResponse]. Provide this token to
   * retrieve the next page.
   */
  pageToken: string;
}

/** Response message for `ListPolicies`. */
export interface ListPoliciesResponse {
  /** Metadata for the policies that are attached to the resource. */
  policies: Policy[];
  /**
   * A page token that you can use in a [ListPoliciesRequest][google.iam.v2.ListPoliciesRequest] to retrieve the
   * next page. If this field is omitted, there are no additional pages.
   */
  nextPageToken: string;
}

/** Request message for `GetPolicy`. */
export interface GetPolicyRequest {
  /**
   * Required. The resource name of the policy to retrieve. Format:
   * `policies/{attachment_point}/denypolicies/{policy_id}`
   *
   * Use the URL-encoded full resource name, which means that the forward-slash
   * character, `/`, must be written as `%2F`. For example,
   * `policies/cloudresourcemanager.googleapis.com%2Fprojects%2Fmy-project/denypolicies/my-policy`.
   *
   * For organizations and folders, use the numeric ID in the full resource
   * name. For projects, you can use the alphanumeric or the numeric ID.
   */
  name: string;
}

/** Request message for `CreatePolicy`. */
export interface CreatePolicyRequest {
  /**
   * Required. The resource that the policy is attached to, along with the kind of policy
   * to create. Format: `policies/{attachment_point}/denypolicies`
   *
   * The attachment point is identified by its URL-encoded full resource name,
   * which means that the forward-slash character, `/`, must be written as
   * `%2F`. For example,
   * `policies/cloudresourcemanager.googleapis.com%2Fprojects%2Fmy-project/denypolicies`.
   *
   * For organizations and folders, use the numeric ID in the full resource
   * name. For projects, you can use the alphanumeric or the numeric ID.
   */
  parent: string;
  /** Required. The policy to create. */
  policy:
    | Policy
    | undefined;
  /**
   * The ID to use for this policy, which will become the final component of
   * the policy's resource name. The ID must contain 3 to 63 characters. It can
   * contain lowercase letters and numbers, as well as dashes (`-`) and periods
   * (`.`). The first character must be a lowercase letter.
   */
  policyId: string;
}

/** Request message for `UpdatePolicy`. */
export interface UpdatePolicyRequest {
  /**
   * Required. The policy to update.
   *
   * To prevent conflicting updates, the `etag` value must match the value that
   * is stored in IAM. If the `etag` values do not match, the request fails with
   * a `409` error code and `ABORTED` status.
   */
  policy: Policy | undefined;
}

/** Request message for `DeletePolicy`. */
export interface DeletePolicyRequest {
  /**
   * Required. The resource name of the policy to delete. Format:
   * `policies/{attachment_point}/denypolicies/{policy_id}`
   *
   * Use the URL-encoded full resource name, which means that the forward-slash
   * character, `/`, must be written as `%2F`. For example,
   * `policies/cloudresourcemanager.googleapis.com%2Fprojects%2Fmy-project/denypolicies/my-policy`.
   *
   * For organizations and folders, use the numeric ID in the full resource
   * name. For projects, you can use the alphanumeric or the numeric ID.
   */
  name: string;
  /**
   * Optional. The expected `etag` of the policy to delete. If the value does not match
   * the value that is stored in IAM, the request fails with a `409` error code
   * and `ABORTED` status.
   *
   * If you omit this field, the policy is deleted regardless of its current
   * `etag`.
   */
  etag: string;
}

/** Metadata for long-running `Policy` operations. */
export interface PolicyOperationMetadata {
  /** Timestamp when the `google.longrunning.Operation` was created. */
  createTime: Date | undefined;
}

function createBasePolicy(): Policy {
  return {
    name: "",
    uid: "",
    kind: "",
    displayName: "",
    annotations: {},
    etag: "",
    createTime: undefined,
    updateTime: undefined,
    deleteTime: undefined,
    rules: [],
    managingAuthority: "",
  };
}

export const Policy: MessageFns<Policy> = {
  encode(message: Policy, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.uid !== "") {
      writer.uint32(18).string(message.uid);
    }
    if (message.kind !== "") {
      writer.uint32(26).string(message.kind);
    }
    if (message.displayName !== "") {
      writer.uint32(34).string(message.displayName);
    }
    Object.entries(message.annotations).forEach(([key, value]) => {
      Policy_AnnotationsEntry.encode({ key: key as any, value }, writer.uint32(42).fork()).join();
    });
    if (message.etag !== "") {
      writer.uint32(50).string(message.etag);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(58).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(66).fork()).join();
    }
    if (message.deleteTime !== undefined) {
      Timestamp.encode(toTimestamp(message.deleteTime), writer.uint32(74).fork()).join();
    }
    for (const v of message.rules) {
      PolicyRule.encode(v!, writer.uint32(82).fork()).join();
    }
    if (message.managingAuthority !== "") {
      writer.uint32(90).string(message.managingAuthority);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Policy {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePolicy();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.uid = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.kind = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          const entry5 = Policy_AnnotationsEntry.decode(reader, reader.uint32());
          if (entry5.value !== undefined) {
            message.annotations[entry5.key] = entry5.value;
          }
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.etag = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.deleteTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.rules.push(PolicyRule.decode(reader, reader.uint32()));
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.managingAuthority = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Policy {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      uid: isSet(object.uid) ? globalThis.String(object.uid) : "",
      kind: isSet(object.kind) ? globalThis.String(object.kind) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      annotations: isObject(object.annotations)
        ? Object.entries(object.annotations).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      etag: isSet(object.etag) ? globalThis.String(object.etag) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      deleteTime: isSet(object.deleteTime) ? fromJsonTimestamp(object.deleteTime) : undefined,
      rules: globalThis.Array.isArray(object?.rules) ? object.rules.map((e: any) => PolicyRule.fromJSON(e)) : [],
      managingAuthority: isSet(object.managingAuthority) ? globalThis.String(object.managingAuthority) : "",
    };
  },

  toJSON(message: Policy): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.uid !== "") {
      obj.uid = message.uid;
    }
    if (message.kind !== "") {
      obj.kind = message.kind;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.annotations) {
      const entries = Object.entries(message.annotations);
      if (entries.length > 0) {
        obj.annotations = {};
        entries.forEach(([k, v]) => {
          obj.annotations[k] = v;
        });
      }
    }
    if (message.etag !== "") {
      obj.etag = message.etag;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.deleteTime !== undefined) {
      obj.deleteTime = message.deleteTime.toISOString();
    }
    if (message.rules?.length) {
      obj.rules = message.rules.map((e) => PolicyRule.toJSON(e));
    }
    if (message.managingAuthority !== "") {
      obj.managingAuthority = message.managingAuthority;
    }
    return obj;
  },

  create(base?: DeepPartial<Policy>): Policy {
    return Policy.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Policy>): Policy {
    const message = createBasePolicy();
    message.name = object.name ?? "";
    message.uid = object.uid ?? "";
    message.kind = object.kind ?? "";
    message.displayName = object.displayName ?? "";
    message.annotations = Object.entries(object.annotations ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    message.etag = object.etag ?? "";
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.deleteTime = object.deleteTime ?? undefined;
    message.rules = object.rules?.map((e) => PolicyRule.fromPartial(e)) || [];
    message.managingAuthority = object.managingAuthority ?? "";
    return message;
  },
};

function createBasePolicy_AnnotationsEntry(): Policy_AnnotationsEntry {
  return { key: "", value: "" };
}

export const Policy_AnnotationsEntry: MessageFns<Policy_AnnotationsEntry> = {
  encode(message: Policy_AnnotationsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Policy_AnnotationsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePolicy_AnnotationsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Policy_AnnotationsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: Policy_AnnotationsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<Policy_AnnotationsEntry>): Policy_AnnotationsEntry {
    return Policy_AnnotationsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Policy_AnnotationsEntry>): Policy_AnnotationsEntry {
    const message = createBasePolicy_AnnotationsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBasePolicyRule(): PolicyRule {
  return { denyRule: undefined, description: "" };
}

export const PolicyRule: MessageFns<PolicyRule> = {
  encode(message: PolicyRule, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.denyRule !== undefined) {
      DenyRule.encode(message.denyRule, writer.uint32(18).fork()).join();
    }
    if (message.description !== "") {
      writer.uint32(10).string(message.description);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PolicyRule {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePolicyRule();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.denyRule = DenyRule.decode(reader, reader.uint32());
          continue;
        case 1:
          if (tag !== 10) {
            break;
          }

          message.description = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PolicyRule {
    return {
      denyRule: isSet(object.denyRule) ? DenyRule.fromJSON(object.denyRule) : undefined,
      description: isSet(object.description) ? globalThis.String(object.description) : "",
    };
  },

  toJSON(message: PolicyRule): unknown {
    const obj: any = {};
    if (message.denyRule !== undefined) {
      obj.denyRule = DenyRule.toJSON(message.denyRule);
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    return obj;
  },

  create(base?: DeepPartial<PolicyRule>): PolicyRule {
    return PolicyRule.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PolicyRule>): PolicyRule {
    const message = createBasePolicyRule();
    message.denyRule = (object.denyRule !== undefined && object.denyRule !== null)
      ? DenyRule.fromPartial(object.denyRule)
      : undefined;
    message.description = object.description ?? "";
    return message;
  },
};

function createBaseListPoliciesRequest(): ListPoliciesRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListPoliciesRequest: MessageFns<ListPoliciesRequest> = {
  encode(message: ListPoliciesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListPoliciesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListPoliciesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListPoliciesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListPoliciesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListPoliciesRequest>): ListPoliciesRequest {
    return ListPoliciesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListPoliciesRequest>): ListPoliciesRequest {
    const message = createBaseListPoliciesRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListPoliciesResponse(): ListPoliciesResponse {
  return { policies: [], nextPageToken: "" };
}

export const ListPoliciesResponse: MessageFns<ListPoliciesResponse> = {
  encode(message: ListPoliciesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.policies) {
      Policy.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListPoliciesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListPoliciesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.policies.push(Policy.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListPoliciesResponse {
    return {
      policies: globalThis.Array.isArray(object?.policies) ? object.policies.map((e: any) => Policy.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListPoliciesResponse): unknown {
    const obj: any = {};
    if (message.policies?.length) {
      obj.policies = message.policies.map((e) => Policy.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListPoliciesResponse>): ListPoliciesResponse {
    return ListPoliciesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListPoliciesResponse>): ListPoliciesResponse {
    const message = createBaseListPoliciesResponse();
    message.policies = object.policies?.map((e) => Policy.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetPolicyRequest(): GetPolicyRequest {
  return { name: "" };
}

export const GetPolicyRequest: MessageFns<GetPolicyRequest> = {
  encode(message: GetPolicyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetPolicyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetPolicyRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetPolicyRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetPolicyRequest>): GetPolicyRequest {
    return GetPolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetPolicyRequest>): GetPolicyRequest {
    const message = createBaseGetPolicyRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreatePolicyRequest(): CreatePolicyRequest {
  return { parent: "", policy: undefined, policyId: "" };
}

export const CreatePolicyRequest: MessageFns<CreatePolicyRequest> = {
  encode(message: CreatePolicyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.policy !== undefined) {
      Policy.encode(message.policy, writer.uint32(18).fork()).join();
    }
    if (message.policyId !== "") {
      writer.uint32(26).string(message.policyId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreatePolicyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreatePolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.policy = Policy.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.policyId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreatePolicyRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      policy: isSet(object.policy) ? Policy.fromJSON(object.policy) : undefined,
      policyId: isSet(object.policyId) ? globalThis.String(object.policyId) : "",
    };
  },

  toJSON(message: CreatePolicyRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.policy !== undefined) {
      obj.policy = Policy.toJSON(message.policy);
    }
    if (message.policyId !== "") {
      obj.policyId = message.policyId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreatePolicyRequest>): CreatePolicyRequest {
    return CreatePolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreatePolicyRequest>): CreatePolicyRequest {
    const message = createBaseCreatePolicyRequest();
    message.parent = object.parent ?? "";
    message.policy = (object.policy !== undefined && object.policy !== null)
      ? Policy.fromPartial(object.policy)
      : undefined;
    message.policyId = object.policyId ?? "";
    return message;
  },
};

function createBaseUpdatePolicyRequest(): UpdatePolicyRequest {
  return { policy: undefined };
}

export const UpdatePolicyRequest: MessageFns<UpdatePolicyRequest> = {
  encode(message: UpdatePolicyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.policy !== undefined) {
      Policy.encode(message.policy, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdatePolicyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdatePolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.policy = Policy.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdatePolicyRequest {
    return { policy: isSet(object.policy) ? Policy.fromJSON(object.policy) : undefined };
  },

  toJSON(message: UpdatePolicyRequest): unknown {
    const obj: any = {};
    if (message.policy !== undefined) {
      obj.policy = Policy.toJSON(message.policy);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdatePolicyRequest>): UpdatePolicyRequest {
    return UpdatePolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdatePolicyRequest>): UpdatePolicyRequest {
    const message = createBaseUpdatePolicyRequest();
    message.policy = (object.policy !== undefined && object.policy !== null)
      ? Policy.fromPartial(object.policy)
      : undefined;
    return message;
  },
};

function createBaseDeletePolicyRequest(): DeletePolicyRequest {
  return { name: "", etag: "" };
}

export const DeletePolicyRequest: MessageFns<DeletePolicyRequest> = {
  encode(message: DeletePolicyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.etag !== "") {
      writer.uint32(18).string(message.etag);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeletePolicyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeletePolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.etag = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeletePolicyRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      etag: isSet(object.etag) ? globalThis.String(object.etag) : "",
    };
  },

  toJSON(message: DeletePolicyRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.etag !== "") {
      obj.etag = message.etag;
    }
    return obj;
  },

  create(base?: DeepPartial<DeletePolicyRequest>): DeletePolicyRequest {
    return DeletePolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeletePolicyRequest>): DeletePolicyRequest {
    const message = createBaseDeletePolicyRequest();
    message.name = object.name ?? "";
    message.etag = object.etag ?? "";
    return message;
  },
};

function createBasePolicyOperationMetadata(): PolicyOperationMetadata {
  return { createTime: undefined };
}

export const PolicyOperationMetadata: MessageFns<PolicyOperationMetadata> = {
  encode(message: PolicyOperationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PolicyOperationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePolicyOperationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PolicyOperationMetadata {
    return { createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined };
  },

  toJSON(message: PolicyOperationMetadata): unknown {
    const obj: any = {};
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<PolicyOperationMetadata>): PolicyOperationMetadata {
    return PolicyOperationMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PolicyOperationMetadata>): PolicyOperationMetadata {
    const message = createBasePolicyOperationMetadata();
    message.createTime = object.createTime ?? undefined;
    return message;
  },
};

/** An interface for managing Identity and Access Management (IAM) policies. */
export type PoliciesDefinition = typeof PoliciesDefinition;
export const PoliciesDefinition = {
  name: "Policies",
  fullName: "google.iam.v2.Policies",
  methods: {
    /**
     * Retrieves the policies of the specified kind that are attached to a
     * resource.
     *
     * The response lists only policy metadata. In particular, policy rules are
     * omitted.
     */
    listPolicies: {
      name: "ListPolicies",
      requestType: ListPoliciesRequest,
      requestStream: false,
      responseType: ListPoliciesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              27,
              18,
              25,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              42,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Gets a policy. */
    getPolicy: {
      name: "GetPolicy",
      requestType: GetPolicyRequest,
      requestStream: false,
      responseType: Policy,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              27,
              18,
              25,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              42,
              47,
              42,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Creates a policy. */
    createPolicy: {
      name: "CreatePolicy",
      requestType: CreatePolicyRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              33,
              10,
              6,
              80,
              111,
              108,
              105,
              99,
              121,
              18,
              23,
              80,
              111,
              108,
              105,
              99,
              121,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              23,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              112,
              111,
              108,
              105,
              99,
              121,
              44,
              112,
              111,
              108,
              105,
              99,
              121,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              35,
              58,
              6,
              112,
              111,
              108,
              105,
              99,
              121,
              34,
              25,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              42,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Updates the specified policy.
     *
     * You can update only the rules and the display name for the policy.
     *
     * To update a policy, you should use a read-modify-write loop:
     *
     * 1. Use [GetPolicy][google.iam.v2.Policies.GetPolicy] to read the current version of the policy.
     * 2. Modify the policy as needed.
     * 3. Use `UpdatePolicy` to write the updated policy.
     *
     * This pattern helps prevent conflicts between concurrent updates.
     */
    updatePolicy: {
      name: "UpdatePolicy",
      requestType: UpdatePolicyRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              33,
              10,
              6,
              80,
              111,
              108,
              105,
              99,
              121,
              18,
              23,
              80,
              111,
              108,
              105,
              99,
              121,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          578365826: [
            Buffer.from([
              42,
              58,
              6,
              112,
              111,
              108,
              105,
              99,
              121,
              26,
              32,
              47,
              118,
              50,
              47,
              123,
              112,
              111,
              108,
              105,
              99,
              121,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              42,
              47,
              42,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes a policy. This action is permanent. */
    deletePolicy: {
      name: "DeletePolicy",
      requestType: DeletePolicyRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              33,
              10,
              6,
              80,
              111,
              108,
              105,
              99,
              121,
              18,
              23,
              80,
              111,
              108,
              105,
              99,
              121,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              27,
              42,
              25,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              42,
              47,
              42,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface PoliciesServiceImplementation<CallContextExt = {}> {
  /**
   * Retrieves the policies of the specified kind that are attached to a
   * resource.
   *
   * The response lists only policy metadata. In particular, policy rules are
   * omitted.
   */
  listPolicies(
    request: ListPoliciesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListPoliciesResponse>>;
  /** Gets a policy. */
  getPolicy(request: GetPolicyRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Policy>>;
  /** Creates a policy. */
  createPolicy(request: CreatePolicyRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /**
   * Updates the specified policy.
   *
   * You can update only the rules and the display name for the policy.
   *
   * To update a policy, you should use a read-modify-write loop:
   *
   * 1. Use [GetPolicy][google.iam.v2.Policies.GetPolicy] to read the current version of the policy.
   * 2. Modify the policy as needed.
   * 3. Use `UpdatePolicy` to write the updated policy.
   *
   * This pattern helps prevent conflicts between concurrent updates.
   */
  updatePolicy(request: UpdatePolicyRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /** Deletes a policy. This action is permanent. */
  deletePolicy(request: DeletePolicyRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
}

export interface PoliciesClient<CallOptionsExt = {}> {
  /**
   * Retrieves the policies of the specified kind that are attached to a
   * resource.
   *
   * The response lists only policy metadata. In particular, policy rules are
   * omitted.
   */
  listPolicies(
    request: DeepPartial<ListPoliciesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListPoliciesResponse>;
  /** Gets a policy. */
  getPolicy(request: DeepPartial<GetPolicyRequest>, options?: CallOptions & CallOptionsExt): Promise<Policy>;
  /** Creates a policy. */
  createPolicy(request: DeepPartial<CreatePolicyRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /**
   * Updates the specified policy.
   *
   * You can update only the rules and the display name for the policy.
   *
   * To update a policy, you should use a read-modify-write loop:
   *
   * 1. Use [GetPolicy][google.iam.v2.Policies.GetPolicy] to read the current version of the policy.
   * 2. Modify the policy as needed.
   * 3. Use `UpdatePolicy` to write the updated policy.
   *
   * This pattern helps prevent conflicts between concurrent updates.
   */
  updatePolicy(request: DeepPartial<UpdatePolicyRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /** Deletes a policy. This action is permanent. */
  deletePolicy(request: DeepPartial<DeletePolicyRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
