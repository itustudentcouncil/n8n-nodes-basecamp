// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/iam/v1/logging/audit_data.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { PolicyDelta } from "../policy.js";

export const protobufPackage = "google.iam.v1.logging";

/**
 * Audit log information specific to Cloud IAM. This message is serialized
 * as an `Any` type in the `ServiceData` message of an
 * `AuditLog` message.
 */
export interface AuditData {
  /** Policy delta between the original policy and the newly set policy. */
  policyDelta: PolicyDelta | undefined;
}

function createBaseAuditData(): AuditData {
  return { policyDelta: undefined };
}

export const AuditData: MessageFns<AuditData> = {
  encode(message: AuditData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.policyDelta !== undefined) {
      PolicyDelta.encode(message.policyDelta, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AuditData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAuditData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.policyDelta = PolicyDelta.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AuditData {
    return { policyDelta: isSet(object.policyDelta) ? PolicyDelta.fromJSON(object.policyDelta) : undefined };
  },

  toJSON(message: AuditData): unknown {
    const obj: any = {};
    if (message.policyDelta !== undefined) {
      obj.policyDelta = PolicyDelta.toJSON(message.policyDelta);
    }
    return obj;
  },

  create(base?: DeepPartial<AuditData>): AuditData {
    return AuditData.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AuditData>): AuditData {
    const message = createBaseAuditData();
    message.policyDelta = (object.policyDelta !== undefined && object.policyDelta !== null)
      ? PolicyDelta.fromPartial(object.policyDelta)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
