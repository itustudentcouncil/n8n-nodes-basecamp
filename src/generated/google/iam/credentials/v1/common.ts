// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/iam/credentials/v1/common.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Duration } from "../../../protobuf/duration.js";
import { Timestamp } from "../../../protobuf/timestamp.js";

export const protobufPackage = "google.iam.credentials.v1";

export interface GenerateAccessTokenRequest {
  /**
   * Required. The resource name of the service account for which the credentials
   * are requested, in the following format:
   * `projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}`. The `-` wildcard
   * character is required; replacing it with a project ID is invalid.
   */
  name: string;
  /**
   * The sequence of service accounts in a delegation chain. Each service
   * account must be granted the `roles/iam.serviceAccountTokenCreator` role
   * on its next service account in the chain. The last service account in the
   * chain must be granted the `roles/iam.serviceAccountTokenCreator` role
   * on the service account that is specified in the `name` field of the
   * request.
   *
   * The delegates must have the following format:
   * `projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}`. The `-` wildcard
   * character is required; replacing it with a project ID is invalid.
   */
  delegates: string[];
  /**
   * Required. Code to identify the scopes to be included in the OAuth 2.0 access token.
   * See https://developers.google.com/identity/protocols/googlescopes for more
   * information.
   * At least one value required.
   */
  scope: string[];
  /**
   * The desired lifetime duration of the access token in seconds.
   * Must be set to a value less than or equal to 3600 (1 hour). If a value is
   * not specified, the token's lifetime will be set to a default value of one
   * hour.
   */
  lifetime: Duration | undefined;
}

export interface GenerateAccessTokenResponse {
  /** The OAuth 2.0 access token. */
  accessToken: string;
  /**
   * Token expiration time.
   * The expiration time is always set.
   */
  expireTime: Date | undefined;
}

export interface SignBlobRequest {
  /**
   * Required. The resource name of the service account for which the credentials
   * are requested, in the following format:
   * `projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}`. The `-` wildcard
   * character is required; replacing it with a project ID is invalid.
   */
  name: string;
  /**
   * The sequence of service accounts in a delegation chain. Each service
   * account must be granted the `roles/iam.serviceAccountTokenCreator` role
   * on its next service account in the chain. The last service account in the
   * chain must be granted the `roles/iam.serviceAccountTokenCreator` role
   * on the service account that is specified in the `name` field of the
   * request.
   *
   * The delegates must have the following format:
   * `projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}`. The `-` wildcard
   * character is required; replacing it with a project ID is invalid.
   */
  delegates: string[];
  /** Required. The bytes to sign. */
  payload: Buffer;
}

export interface SignBlobResponse {
  /** The ID of the key used to sign the blob. */
  keyId: string;
  /** The signed blob. */
  signedBlob: Buffer;
}

export interface SignJwtRequest {
  /**
   * Required. The resource name of the service account for which the credentials
   * are requested, in the following format:
   * `projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}`. The `-` wildcard
   * character is required; replacing it with a project ID is invalid.
   */
  name: string;
  /**
   * The sequence of service accounts in a delegation chain. Each service
   * account must be granted the `roles/iam.serviceAccountTokenCreator` role
   * on its next service account in the chain. The last service account in the
   * chain must be granted the `roles/iam.serviceAccountTokenCreator` role
   * on the service account that is specified in the `name` field of the
   * request.
   *
   * The delegates must have the following format:
   * `projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}`. The `-` wildcard
   * character is required; replacing it with a project ID is invalid.
   */
  delegates: string[];
  /** Required. The JWT payload to sign: a JSON object that contains a JWT Claims Set. */
  payload: string;
}

export interface SignJwtResponse {
  /** The ID of the key used to sign the JWT. */
  keyId: string;
  /** The signed JWT. */
  signedJwt: string;
}

export interface GenerateIdTokenRequest {
  /**
   * Required. The resource name of the service account for which the credentials
   * are requested, in the following format:
   * `projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}`. The `-` wildcard
   * character is required; replacing it with a project ID is invalid.
   */
  name: string;
  /**
   * The sequence of service accounts in a delegation chain. Each service
   * account must be granted the `roles/iam.serviceAccountTokenCreator` role
   * on its next service account in the chain. The last service account in the
   * chain must be granted the `roles/iam.serviceAccountTokenCreator` role
   * on the service account that is specified in the `name` field of the
   * request.
   *
   * The delegates must have the following format:
   * `projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}`. The `-` wildcard
   * character is required; replacing it with a project ID is invalid.
   */
  delegates: string[];
  /**
   * Required. The audience for the token, such as the API or account that this token
   * grants access to.
   */
  audience: string;
  /**
   * Include the service account email in the token. If set to `true`, the
   * token will contain `email` and `email_verified` claims.
   */
  includeEmail: boolean;
}

export interface GenerateIdTokenResponse {
  /** The OpenId Connect ID token. */
  token: string;
}

function createBaseGenerateAccessTokenRequest(): GenerateAccessTokenRequest {
  return { name: "", delegates: [], scope: [], lifetime: undefined };
}

export const GenerateAccessTokenRequest: MessageFns<GenerateAccessTokenRequest> = {
  encode(message: GenerateAccessTokenRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    for (const v of message.delegates) {
      writer.uint32(18).string(v!);
    }
    for (const v of message.scope) {
      writer.uint32(34).string(v!);
    }
    if (message.lifetime !== undefined) {
      Duration.encode(message.lifetime, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GenerateAccessTokenRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenerateAccessTokenRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.delegates.push(reader.string());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.scope.push(reader.string());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.lifetime = Duration.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenerateAccessTokenRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      delegates: globalThis.Array.isArray(object?.delegates)
        ? object.delegates.map((e: any) => globalThis.String(e))
        : [],
      scope: globalThis.Array.isArray(object?.scope) ? object.scope.map((e: any) => globalThis.String(e)) : [],
      lifetime: isSet(object.lifetime) ? Duration.fromJSON(object.lifetime) : undefined,
    };
  },

  toJSON(message: GenerateAccessTokenRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.delegates?.length) {
      obj.delegates = message.delegates;
    }
    if (message.scope?.length) {
      obj.scope = message.scope;
    }
    if (message.lifetime !== undefined) {
      obj.lifetime = Duration.toJSON(message.lifetime);
    }
    return obj;
  },

  create(base?: DeepPartial<GenerateAccessTokenRequest>): GenerateAccessTokenRequest {
    return GenerateAccessTokenRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GenerateAccessTokenRequest>): GenerateAccessTokenRequest {
    const message = createBaseGenerateAccessTokenRequest();
    message.name = object.name ?? "";
    message.delegates = object.delegates?.map((e) => e) || [];
    message.scope = object.scope?.map((e) => e) || [];
    message.lifetime = (object.lifetime !== undefined && object.lifetime !== null)
      ? Duration.fromPartial(object.lifetime)
      : undefined;
    return message;
  },
};

function createBaseGenerateAccessTokenResponse(): GenerateAccessTokenResponse {
  return { accessToken: "", expireTime: undefined };
}

export const GenerateAccessTokenResponse: MessageFns<GenerateAccessTokenResponse> = {
  encode(message: GenerateAccessTokenResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.accessToken !== "") {
      writer.uint32(10).string(message.accessToken);
    }
    if (message.expireTime !== undefined) {
      Timestamp.encode(toTimestamp(message.expireTime), writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GenerateAccessTokenResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenerateAccessTokenResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.accessToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.expireTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenerateAccessTokenResponse {
    return {
      accessToken: isSet(object.accessToken) ? globalThis.String(object.accessToken) : "",
      expireTime: isSet(object.expireTime) ? fromJsonTimestamp(object.expireTime) : undefined,
    };
  },

  toJSON(message: GenerateAccessTokenResponse): unknown {
    const obj: any = {};
    if (message.accessToken !== "") {
      obj.accessToken = message.accessToken;
    }
    if (message.expireTime !== undefined) {
      obj.expireTime = message.expireTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<GenerateAccessTokenResponse>): GenerateAccessTokenResponse {
    return GenerateAccessTokenResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GenerateAccessTokenResponse>): GenerateAccessTokenResponse {
    const message = createBaseGenerateAccessTokenResponse();
    message.accessToken = object.accessToken ?? "";
    message.expireTime = object.expireTime ?? undefined;
    return message;
  },
};

function createBaseSignBlobRequest(): SignBlobRequest {
  return { name: "", delegates: [], payload: Buffer.alloc(0) };
}

export const SignBlobRequest: MessageFns<SignBlobRequest> = {
  encode(message: SignBlobRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    for (const v of message.delegates) {
      writer.uint32(26).string(v!);
    }
    if (message.payload.length !== 0) {
      writer.uint32(42).bytes(message.payload);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SignBlobRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSignBlobRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.delegates.push(reader.string());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.payload = Buffer.from(reader.bytes());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SignBlobRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      delegates: globalThis.Array.isArray(object?.delegates)
        ? object.delegates.map((e: any) => globalThis.String(e))
        : [],
      payload: isSet(object.payload) ? Buffer.from(bytesFromBase64(object.payload)) : Buffer.alloc(0),
    };
  },

  toJSON(message: SignBlobRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.delegates?.length) {
      obj.delegates = message.delegates;
    }
    if (message.payload.length !== 0) {
      obj.payload = base64FromBytes(message.payload);
    }
    return obj;
  },

  create(base?: DeepPartial<SignBlobRequest>): SignBlobRequest {
    return SignBlobRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SignBlobRequest>): SignBlobRequest {
    const message = createBaseSignBlobRequest();
    message.name = object.name ?? "";
    message.delegates = object.delegates?.map((e) => e) || [];
    message.payload = object.payload ?? Buffer.alloc(0);
    return message;
  },
};

function createBaseSignBlobResponse(): SignBlobResponse {
  return { keyId: "", signedBlob: Buffer.alloc(0) };
}

export const SignBlobResponse: MessageFns<SignBlobResponse> = {
  encode(message: SignBlobResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.keyId !== "") {
      writer.uint32(10).string(message.keyId);
    }
    if (message.signedBlob.length !== 0) {
      writer.uint32(34).bytes(message.signedBlob);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SignBlobResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSignBlobResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.keyId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.signedBlob = Buffer.from(reader.bytes());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SignBlobResponse {
    return {
      keyId: isSet(object.keyId) ? globalThis.String(object.keyId) : "",
      signedBlob: isSet(object.signedBlob) ? Buffer.from(bytesFromBase64(object.signedBlob)) : Buffer.alloc(0),
    };
  },

  toJSON(message: SignBlobResponse): unknown {
    const obj: any = {};
    if (message.keyId !== "") {
      obj.keyId = message.keyId;
    }
    if (message.signedBlob.length !== 0) {
      obj.signedBlob = base64FromBytes(message.signedBlob);
    }
    return obj;
  },

  create(base?: DeepPartial<SignBlobResponse>): SignBlobResponse {
    return SignBlobResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SignBlobResponse>): SignBlobResponse {
    const message = createBaseSignBlobResponse();
    message.keyId = object.keyId ?? "";
    message.signedBlob = object.signedBlob ?? Buffer.alloc(0);
    return message;
  },
};

function createBaseSignJwtRequest(): SignJwtRequest {
  return { name: "", delegates: [], payload: "" };
}

export const SignJwtRequest: MessageFns<SignJwtRequest> = {
  encode(message: SignJwtRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    for (const v of message.delegates) {
      writer.uint32(26).string(v!);
    }
    if (message.payload !== "") {
      writer.uint32(42).string(message.payload);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SignJwtRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSignJwtRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.delegates.push(reader.string());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.payload = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SignJwtRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      delegates: globalThis.Array.isArray(object?.delegates)
        ? object.delegates.map((e: any) => globalThis.String(e))
        : [],
      payload: isSet(object.payload) ? globalThis.String(object.payload) : "",
    };
  },

  toJSON(message: SignJwtRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.delegates?.length) {
      obj.delegates = message.delegates;
    }
    if (message.payload !== "") {
      obj.payload = message.payload;
    }
    return obj;
  },

  create(base?: DeepPartial<SignJwtRequest>): SignJwtRequest {
    return SignJwtRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SignJwtRequest>): SignJwtRequest {
    const message = createBaseSignJwtRequest();
    message.name = object.name ?? "";
    message.delegates = object.delegates?.map((e) => e) || [];
    message.payload = object.payload ?? "";
    return message;
  },
};

function createBaseSignJwtResponse(): SignJwtResponse {
  return { keyId: "", signedJwt: "" };
}

export const SignJwtResponse: MessageFns<SignJwtResponse> = {
  encode(message: SignJwtResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.keyId !== "") {
      writer.uint32(10).string(message.keyId);
    }
    if (message.signedJwt !== "") {
      writer.uint32(18).string(message.signedJwt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SignJwtResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSignJwtResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.keyId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.signedJwt = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SignJwtResponse {
    return {
      keyId: isSet(object.keyId) ? globalThis.String(object.keyId) : "",
      signedJwt: isSet(object.signedJwt) ? globalThis.String(object.signedJwt) : "",
    };
  },

  toJSON(message: SignJwtResponse): unknown {
    const obj: any = {};
    if (message.keyId !== "") {
      obj.keyId = message.keyId;
    }
    if (message.signedJwt !== "") {
      obj.signedJwt = message.signedJwt;
    }
    return obj;
  },

  create(base?: DeepPartial<SignJwtResponse>): SignJwtResponse {
    return SignJwtResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SignJwtResponse>): SignJwtResponse {
    const message = createBaseSignJwtResponse();
    message.keyId = object.keyId ?? "";
    message.signedJwt = object.signedJwt ?? "";
    return message;
  },
};

function createBaseGenerateIdTokenRequest(): GenerateIdTokenRequest {
  return { name: "", delegates: [], audience: "", includeEmail: false };
}

export const GenerateIdTokenRequest: MessageFns<GenerateIdTokenRequest> = {
  encode(message: GenerateIdTokenRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    for (const v of message.delegates) {
      writer.uint32(18).string(v!);
    }
    if (message.audience !== "") {
      writer.uint32(26).string(message.audience);
    }
    if (message.includeEmail !== false) {
      writer.uint32(32).bool(message.includeEmail);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GenerateIdTokenRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenerateIdTokenRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.delegates.push(reader.string());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.audience = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.includeEmail = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenerateIdTokenRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      delegates: globalThis.Array.isArray(object?.delegates)
        ? object.delegates.map((e: any) => globalThis.String(e))
        : [],
      audience: isSet(object.audience) ? globalThis.String(object.audience) : "",
      includeEmail: isSet(object.includeEmail) ? globalThis.Boolean(object.includeEmail) : false,
    };
  },

  toJSON(message: GenerateIdTokenRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.delegates?.length) {
      obj.delegates = message.delegates;
    }
    if (message.audience !== "") {
      obj.audience = message.audience;
    }
    if (message.includeEmail !== false) {
      obj.includeEmail = message.includeEmail;
    }
    return obj;
  },

  create(base?: DeepPartial<GenerateIdTokenRequest>): GenerateIdTokenRequest {
    return GenerateIdTokenRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GenerateIdTokenRequest>): GenerateIdTokenRequest {
    const message = createBaseGenerateIdTokenRequest();
    message.name = object.name ?? "";
    message.delegates = object.delegates?.map((e) => e) || [];
    message.audience = object.audience ?? "";
    message.includeEmail = object.includeEmail ?? false;
    return message;
  },
};

function createBaseGenerateIdTokenResponse(): GenerateIdTokenResponse {
  return { token: "" };
}

export const GenerateIdTokenResponse: MessageFns<GenerateIdTokenResponse> = {
  encode(message: GenerateIdTokenResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.token !== "") {
      writer.uint32(10).string(message.token);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GenerateIdTokenResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenerateIdTokenResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.token = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenerateIdTokenResponse {
    return { token: isSet(object.token) ? globalThis.String(object.token) : "" };
  },

  toJSON(message: GenerateIdTokenResponse): unknown {
    const obj: any = {};
    if (message.token !== "") {
      obj.token = message.token;
    }
    return obj;
  },

  create(base?: DeepPartial<GenerateIdTokenResponse>): GenerateIdTokenResponse {
    return GenerateIdTokenResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GenerateIdTokenResponse>): GenerateIdTokenResponse {
    const message = createBaseGenerateIdTokenResponse();
    message.token = object.token ?? "";
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
}

function base64FromBytes(arr: Uint8Array): string {
  return globalThis.Buffer.from(arr).toString("base64");
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
