// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/iam/v1beta/workload_identity_pool.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../longrunning/operations.js";
import { FieldMask } from "../../protobuf/field_mask.js";

export const protobufPackage = "google.iam.v1beta";

/**
 * Represents a collection of external workload identities. You can define IAM
 * policies to grant these identities access to Google Cloud resources.
 */
export interface WorkloadIdentityPool {
  /** Output only. The resource name of the pool. */
  name: string;
  /** A display name for the pool. Cannot exceed 32 characters. */
  displayName: string;
  /** A description of the pool. Cannot exceed 256 characters. */
  description: string;
  /** Output only. The state of the pool. */
  state: WorkloadIdentityPool_State;
  /**
   * Whether the pool is disabled. You cannot use a disabled pool to exchange
   * tokens, or use existing tokens to access resources. If
   * the pool is re-enabled, existing tokens grant access again.
   */
  disabled: boolean;
}

/** The current state of the pool. */
export enum WorkloadIdentityPool_State {
  /** STATE_UNSPECIFIED - State unspecified. */
  STATE_UNSPECIFIED = 0,
  /** ACTIVE - The pool is active, and may be used in Google Cloud policies. */
  ACTIVE = 1,
  /**
   * DELETED - The pool is soft-deleted. Soft-deleted pools are permanently deleted
   * after approximately 30 days. You can restore a soft-deleted pool using
   * [UndeleteWorkloadIdentityPool][google.iam.v1beta.WorkloadIdentityPools.UndeleteWorkloadIdentityPool].
   *
   * You cannot reuse the ID of a soft-deleted pool until it is permanently
   * deleted.
   *
   * While a pool is deleted, you cannot use it to exchange tokens, or use
   * existing tokens to access resources. If the pool is undeleted, existing
   * tokens grant access again.
   */
  DELETED = 2,
  UNRECOGNIZED = -1,
}

export function workloadIdentityPool_StateFromJSON(object: any): WorkloadIdentityPool_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return WorkloadIdentityPool_State.STATE_UNSPECIFIED;
    case 1:
    case "ACTIVE":
      return WorkloadIdentityPool_State.ACTIVE;
    case 2:
    case "DELETED":
      return WorkloadIdentityPool_State.DELETED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return WorkloadIdentityPool_State.UNRECOGNIZED;
  }
}

export function workloadIdentityPool_StateToJSON(object: WorkloadIdentityPool_State): string {
  switch (object) {
    case WorkloadIdentityPool_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case WorkloadIdentityPool_State.ACTIVE:
      return "ACTIVE";
    case WorkloadIdentityPool_State.DELETED:
      return "DELETED";
    case WorkloadIdentityPool_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** A configuration for an external identity provider. */
export interface WorkloadIdentityPoolProvider {
  /** Output only. The resource name of the provider. */
  name: string;
  /** A display name for the provider. Cannot exceed 32 characters. */
  displayName: string;
  /** A description for the provider. Cannot exceed 256 characters. */
  description: string;
  /** Output only. The state of the provider. */
  state: WorkloadIdentityPoolProvider_State;
  /**
   * Whether the provider is disabled. You cannot use a disabled provider to
   * exchange tokens. However, existing tokens still grant access.
   */
  disabled: boolean;
  /**
   * Maps attributes from authentication credentials issued by an external
   * identity provider to Google Cloud attributes, such as `subject` and
   * `segment`.
   *
   * Each key must be a string specifying the Google Cloud IAM attribute to
   * map to.
   *
   * The following keys are supported:
   *
   * * `google.subject`: The principal IAM is authenticating. You can reference
   *                     this value in IAM bindings. This is also the
   *                     subject that appears in Cloud Logging logs.
   *                     Cannot exceed 127 characters.
   *
   * * `google.groups`: Groups the external identity belongs to. You can grant
   *                    groups access to resources using an IAM `principalSet`
   *                    binding; access applies to all members of the group.
   *
   * You can also provide custom attributes by specifying
   * `attribute.{custom_attribute}`, where `{custom_attribute}` is the name of
   * the custom attribute to be mapped. You can define a maximum of 50 custom
   * attributes. The maximum length of a mapped attribute key is
   * 100 characters, and the key may only contain the characters [a-z0-9_].
   *
   * You can reference these attributes in IAM policies to define fine-grained
   * access for a workload to Google Cloud resources. For example:
   *
   * * `google.subject`:
   * `principal://iam.googleapis.com/projects/{project}/locations/{location}/workloadIdentityPools/{pool}/subject/{value}`
   *
   * * `google.groups`:
   * `principalSet://iam.googleapis.com/projects/{project}/locations/{location}/workloadIdentityPools/{pool}/group/{value}`
   *
   * * `attribute.{custom_attribute}`:
   * `principalSet://iam.googleapis.com/projects/{project}/locations/{location}/workloadIdentityPools/{pool}/attribute.{custom_attribute}/{value}`
   *
   * Each value must be a [Common Expression Language]
   * (https://opensource.google/projects/cel) function that maps an
   * identity provider credential to the normalized attribute specified by the
   * corresponding map key.
   *
   * You can use the `assertion` keyword in the expression to access a JSON
   * representation of the authentication credential issued by the provider.
   *
   * The maximum length of an attribute mapping expression is 2048 characters.
   * When evaluated, the total size of all mapped attributes must not exceed
   * 8KB.
   *
   * For AWS providers, the following rules apply:
   *
   * - If no attribute mapping is defined, the following default mapping
   *   applies:
   *
   *   ```
   *   {
   *     "google.subject":"assertion.arn",
   *     "attribute.aws_role":
   *         "assertion.arn.contains('assumed-role')"
   *         " ? assertion.arn.extract('{account_arn}assumed-role/')"
   *         "   + 'assumed-role/'"
   *         "   + assertion.arn.extract('assumed-role/{role_name}/')"
   *         " : assertion.arn",
   *   }
   *   ```
   *
   * - If any custom attribute mappings are defined, they must include a mapping
   *   to the `google.subject` attribute.
   *
   * For OIDC providers, the following rules apply:
   *
   * - Custom attribute mappings must be defined, and must include a mapping to
   *   the `google.subject` attribute. For example, the following maps the
   *   `sub` claim of the incoming credential to the `subject` attribute on
   *   a Google token.
   *
   *   ```
   *   {"google.subject": "assertion.sub"}
   *   ```
   */
  attributeMapping: { [key: string]: string };
  /**
   * [A Common Expression Language](https://opensource.google/projects/cel)
   * expression, in plain text, to restrict what otherwise valid authentication
   * credentials issued by the provider should not be accepted.
   *
   * The expression must output a boolean representing whether to allow the
   * federation.
   *
   * The following keywords may be referenced in the expressions:
   *
   * * `assertion`: JSON representing the authentication credential issued by
   *                the provider.
   * * `google`: The Google attributes mapped from the assertion in the
   *             `attribute_mappings`.
   * * `attribute`: The custom attributes mapped from the assertion in the
   *                `attribute_mappings`.
   *
   * The maximum length of the attribute condition expression is 4096
   * characters. If unspecified, all valid authentication credential are
   * accepted.
   *
   * The following example shows how to only allow credentials with a mapped
   * `google.groups` value of `admins`:
   *
   * ```
   * "'admins' in google.groups"
   * ```
   */
  attributeCondition: string;
  /** An Amazon Web Services identity provider. */
  aws?:
    | WorkloadIdentityPoolProvider_Aws
    | undefined;
  /** An OpenId Connect 1.0 identity provider. */
  oidc?: WorkloadIdentityPoolProvider_Oidc | undefined;
}

/** The current state of the provider. */
export enum WorkloadIdentityPoolProvider_State {
  /** STATE_UNSPECIFIED - State unspecified. */
  STATE_UNSPECIFIED = 0,
  /**
   * ACTIVE - The provider is active, and may be used to validate authentication
   * credentials.
   */
  ACTIVE = 1,
  /**
   * DELETED - The provider is soft-deleted. Soft-deleted providers are permanently
   * deleted after approximately 30 days. You can restore a soft-deleted
   * provider using
   * [UndeleteWorkloadIdentityPoolProvider][google.iam.v1beta.WorkloadIdentityPools.UndeleteWorkloadIdentityPoolProvider].
   *
   * You cannot reuse the ID of a soft-deleted provider until it is
   * permanently deleted.
   */
  DELETED = 2,
  UNRECOGNIZED = -1,
}

export function workloadIdentityPoolProvider_StateFromJSON(object: any): WorkloadIdentityPoolProvider_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return WorkloadIdentityPoolProvider_State.STATE_UNSPECIFIED;
    case 1:
    case "ACTIVE":
      return WorkloadIdentityPoolProvider_State.ACTIVE;
    case 2:
    case "DELETED":
      return WorkloadIdentityPoolProvider_State.DELETED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return WorkloadIdentityPoolProvider_State.UNRECOGNIZED;
  }
}

export function workloadIdentityPoolProvider_StateToJSON(object: WorkloadIdentityPoolProvider_State): string {
  switch (object) {
    case WorkloadIdentityPoolProvider_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case WorkloadIdentityPoolProvider_State.ACTIVE:
      return "ACTIVE";
    case WorkloadIdentityPoolProvider_State.DELETED:
      return "DELETED";
    case WorkloadIdentityPoolProvider_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Represents an Amazon Web Services identity provider. */
export interface WorkloadIdentityPoolProvider_Aws {
  /** Required. The AWS account ID. */
  accountId: string;
}

/** Represents an OpenId Connect 1.0 identity provider. */
export interface WorkloadIdentityPoolProvider_Oidc {
  /** Required. The OIDC issuer URL. */
  issuerUri: string;
  /**
   * Acceptable values for the `aud` field (audience) in the OIDC token. Token
   * exchange requests are rejected if the token audience does not match one
   * of the configured values. Each audience may be at most 256 characters. A
   * maximum of 10 audiences may be configured.
   *
   * If this list is empty, the OIDC token audience must be equal to
   * the full canonical resource name of the WorkloadIdentityPoolProvider,
   * with or without the HTTPS prefix. For example:
   *
   * ```
   * //iam.googleapis.com/projects/<project-number>/locations/<location>/workloadIdentityPools/<pool-id>/providers/<provider-id>
   * https://iam.googleapis.com/projects/<project-number>/locations/<location>/workloadIdentityPools/<pool-id>/providers/<provider-id>
   * ```
   */
  allowedAudiences: string[];
}

export interface WorkloadIdentityPoolProvider_AttributeMappingEntry {
  key: string;
  value: string;
}

/** Request message for ListWorkloadIdentityPools. */
export interface ListWorkloadIdentityPoolsRequest {
  /** Required. The parent resource to list pools for. */
  parent: string;
  /**
   * The maximum number of pools to return.
   * If unspecified, at most 50 pools are returned.
   * The maximum value is 1000; values above are 1000 truncated to 1000.
   */
  pageSize: number;
  /**
   * A page token, received from a previous `ListWorkloadIdentityPools`
   * call. Provide this to retrieve the subsequent page.
   */
  pageToken: string;
  /** Whether to return soft-deleted pools. */
  showDeleted: boolean;
}

/** Response message for ListWorkloadIdentityPools. */
export interface ListWorkloadIdentityPoolsResponse {
  /** A list of pools. */
  workloadIdentityPools: WorkloadIdentityPool[];
  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

/** Request message for GetWorkloadIdentityPool. */
export interface GetWorkloadIdentityPoolRequest {
  /** Required. The name of the pool to retrieve. */
  name: string;
}

/** Request message for CreateWorkloadIdentityPool. */
export interface CreateWorkloadIdentityPoolRequest {
  /**
   * Required. The parent resource to create the pool in. The only supported
   * location is `global`.
   */
  parent: string;
  /** Required. The pool to create. */
  workloadIdentityPool:
    | WorkloadIdentityPool
    | undefined;
  /**
   * Required. The ID to use for the pool, which becomes the
   * final component of the resource name. This value should be 4-32 characters,
   * and may contain the characters [a-z0-9-]. The prefix `gcp-` is
   * reserved for use by Google, and may not be specified.
   */
  workloadIdentityPoolId: string;
}

/** Request message for UpdateWorkloadIdentityPool. */
export interface UpdateWorkloadIdentityPoolRequest {
  /** Required. The pool to update. The `name` field is used to identify the pool. */
  workloadIdentityPool:
    | WorkloadIdentityPool
    | undefined;
  /** Required. The list of fields update. */
  updateMask: string[] | undefined;
}

/** Request message for DeleteWorkloadIdentityPool. */
export interface DeleteWorkloadIdentityPoolRequest {
  /** Required. The name of the pool to delete. */
  name: string;
}

/** Request message for UndeleteWorkloadIdentityPool. */
export interface UndeleteWorkloadIdentityPoolRequest {
  /** Required. The name of the pool to undelete. */
  name: string;
}

/** Request message for ListWorkloadIdentityPoolProviders. */
export interface ListWorkloadIdentityPoolProvidersRequest {
  /** Required. The pool to list providers for. */
  parent: string;
  /**
   * The maximum number of providers to return.
   * If unspecified, at most 50 providers are returned.
   * The maximum value is 100; values above 100 are truncated to 100.
   */
  pageSize: number;
  /**
   * A page token, received from a previous
   * `ListWorkloadIdentityPoolProviders` call. Provide this to retrieve the
   * subsequent page.
   */
  pageToken: string;
  /** Whether to return soft-deleted providers. */
  showDeleted: boolean;
}

/** Response message for ListWorkloadIdentityPoolProviders. */
export interface ListWorkloadIdentityPoolProvidersResponse {
  /** A list of providers. */
  workloadIdentityPoolProviders: WorkloadIdentityPoolProvider[];
  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

/** Request message for GetWorkloadIdentityPoolProvider. */
export interface GetWorkloadIdentityPoolProviderRequest {
  /** Required. The name of the provider to retrieve. */
  name: string;
}

/** Request message for CreateWorkloadIdentityPoolProvider. */
export interface CreateWorkloadIdentityPoolProviderRequest {
  /** Required. The pool to create this provider in. */
  parent: string;
  /** Required. The provider to create. */
  workloadIdentityPoolProvider:
    | WorkloadIdentityPoolProvider
    | undefined;
  /**
   * Required. The ID for the provider, which becomes the
   * final component of the resource name. This value must be 4-32 characters,
   * and may contain the characters [a-z0-9-]. The prefix `gcp-` is
   * reserved for use by Google, and may not be specified.
   */
  workloadIdentityPoolProviderId: string;
}

/** Request message for UpdateWorkloadIdentityPoolProvider. */
export interface UpdateWorkloadIdentityPoolProviderRequest {
  /** Required. The provider to update. */
  workloadIdentityPoolProvider:
    | WorkloadIdentityPoolProvider
    | undefined;
  /** Required. The list of fields to update. */
  updateMask: string[] | undefined;
}

/** Request message for DeleteWorkloadIdentityPoolProvider. */
export interface DeleteWorkloadIdentityPoolProviderRequest {
  /** Required. The name of the provider to delete. */
  name: string;
}

/** Request message for UndeleteWorkloadIdentityPoolProvider. */
export interface UndeleteWorkloadIdentityPoolProviderRequest {
  /** Required. The name of the provider to undelete. */
  name: string;
}

/** Metadata for long-running WorkloadIdentityPool operations. */
export interface WorkloadIdentityPoolOperationMetadata {
}

/** Metadata for long-running WorkloadIdentityPoolProvider operations. */
export interface WorkloadIdentityPoolProviderOperationMetadata {
}

function createBaseWorkloadIdentityPool(): WorkloadIdentityPool {
  return { name: "", displayName: "", description: "", state: 0, disabled: false };
}

export const WorkloadIdentityPool: MessageFns<WorkloadIdentityPool> = {
  encode(message: WorkloadIdentityPool, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.displayName !== "") {
      writer.uint32(18).string(message.displayName);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    if (message.state !== 0) {
      writer.uint32(32).int32(message.state);
    }
    if (message.disabled !== false) {
      writer.uint32(40).bool(message.disabled);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WorkloadIdentityPool {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWorkloadIdentityPool();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.disabled = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WorkloadIdentityPool {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      state: isSet(object.state) ? workloadIdentityPool_StateFromJSON(object.state) : 0,
      disabled: isSet(object.disabled) ? globalThis.Boolean(object.disabled) : false,
    };
  },

  toJSON(message: WorkloadIdentityPool): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.state !== 0) {
      obj.state = workloadIdentityPool_StateToJSON(message.state);
    }
    if (message.disabled !== false) {
      obj.disabled = message.disabled;
    }
    return obj;
  },

  create(base?: DeepPartial<WorkloadIdentityPool>): WorkloadIdentityPool {
    return WorkloadIdentityPool.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<WorkloadIdentityPool>): WorkloadIdentityPool {
    const message = createBaseWorkloadIdentityPool();
    message.name = object.name ?? "";
    message.displayName = object.displayName ?? "";
    message.description = object.description ?? "";
    message.state = object.state ?? 0;
    message.disabled = object.disabled ?? false;
    return message;
  },
};

function createBaseWorkloadIdentityPoolProvider(): WorkloadIdentityPoolProvider {
  return {
    name: "",
    displayName: "",
    description: "",
    state: 0,
    disabled: false,
    attributeMapping: {},
    attributeCondition: "",
    aws: undefined,
    oidc: undefined,
  };
}

export const WorkloadIdentityPoolProvider: MessageFns<WorkloadIdentityPoolProvider> = {
  encode(message: WorkloadIdentityPoolProvider, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.displayName !== "") {
      writer.uint32(18).string(message.displayName);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    if (message.state !== 0) {
      writer.uint32(32).int32(message.state);
    }
    if (message.disabled !== false) {
      writer.uint32(40).bool(message.disabled);
    }
    Object.entries(message.attributeMapping).forEach(([key, value]) => {
      WorkloadIdentityPoolProvider_AttributeMappingEntry.encode({ key: key as any, value }, writer.uint32(50).fork())
        .join();
    });
    if (message.attributeCondition !== "") {
      writer.uint32(58).string(message.attributeCondition);
    }
    if (message.aws !== undefined) {
      WorkloadIdentityPoolProvider_Aws.encode(message.aws, writer.uint32(66).fork()).join();
    }
    if (message.oidc !== undefined) {
      WorkloadIdentityPoolProvider_Oidc.encode(message.oidc, writer.uint32(74).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WorkloadIdentityPoolProvider {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWorkloadIdentityPoolProvider();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.disabled = reader.bool();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          const entry6 = WorkloadIdentityPoolProvider_AttributeMappingEntry.decode(reader, reader.uint32());
          if (entry6.value !== undefined) {
            message.attributeMapping[entry6.key] = entry6.value;
          }
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.attributeCondition = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.aws = WorkloadIdentityPoolProvider_Aws.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.oidc = WorkloadIdentityPoolProvider_Oidc.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WorkloadIdentityPoolProvider {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      state: isSet(object.state) ? workloadIdentityPoolProvider_StateFromJSON(object.state) : 0,
      disabled: isSet(object.disabled) ? globalThis.Boolean(object.disabled) : false,
      attributeMapping: isObject(object.attributeMapping)
        ? Object.entries(object.attributeMapping).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      attributeCondition: isSet(object.attributeCondition) ? globalThis.String(object.attributeCondition) : "",
      aws: isSet(object.aws) ? WorkloadIdentityPoolProvider_Aws.fromJSON(object.aws) : undefined,
      oidc: isSet(object.oidc) ? WorkloadIdentityPoolProvider_Oidc.fromJSON(object.oidc) : undefined,
    };
  },

  toJSON(message: WorkloadIdentityPoolProvider): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.state !== 0) {
      obj.state = workloadIdentityPoolProvider_StateToJSON(message.state);
    }
    if (message.disabled !== false) {
      obj.disabled = message.disabled;
    }
    if (message.attributeMapping) {
      const entries = Object.entries(message.attributeMapping);
      if (entries.length > 0) {
        obj.attributeMapping = {};
        entries.forEach(([k, v]) => {
          obj.attributeMapping[k] = v;
        });
      }
    }
    if (message.attributeCondition !== "") {
      obj.attributeCondition = message.attributeCondition;
    }
    if (message.aws !== undefined) {
      obj.aws = WorkloadIdentityPoolProvider_Aws.toJSON(message.aws);
    }
    if (message.oidc !== undefined) {
      obj.oidc = WorkloadIdentityPoolProvider_Oidc.toJSON(message.oidc);
    }
    return obj;
  },

  create(base?: DeepPartial<WorkloadIdentityPoolProvider>): WorkloadIdentityPoolProvider {
    return WorkloadIdentityPoolProvider.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<WorkloadIdentityPoolProvider>): WorkloadIdentityPoolProvider {
    const message = createBaseWorkloadIdentityPoolProvider();
    message.name = object.name ?? "";
    message.displayName = object.displayName ?? "";
    message.description = object.description ?? "";
    message.state = object.state ?? 0;
    message.disabled = object.disabled ?? false;
    message.attributeMapping = Object.entries(object.attributeMapping ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    message.attributeCondition = object.attributeCondition ?? "";
    message.aws = (object.aws !== undefined && object.aws !== null)
      ? WorkloadIdentityPoolProvider_Aws.fromPartial(object.aws)
      : undefined;
    message.oidc = (object.oidc !== undefined && object.oidc !== null)
      ? WorkloadIdentityPoolProvider_Oidc.fromPartial(object.oidc)
      : undefined;
    return message;
  },
};

function createBaseWorkloadIdentityPoolProvider_Aws(): WorkloadIdentityPoolProvider_Aws {
  return { accountId: "" };
}

export const WorkloadIdentityPoolProvider_Aws: MessageFns<WorkloadIdentityPoolProvider_Aws> = {
  encode(message: WorkloadIdentityPoolProvider_Aws, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.accountId !== "") {
      writer.uint32(10).string(message.accountId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WorkloadIdentityPoolProvider_Aws {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWorkloadIdentityPoolProvider_Aws();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.accountId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WorkloadIdentityPoolProvider_Aws {
    return { accountId: isSet(object.accountId) ? globalThis.String(object.accountId) : "" };
  },

  toJSON(message: WorkloadIdentityPoolProvider_Aws): unknown {
    const obj: any = {};
    if (message.accountId !== "") {
      obj.accountId = message.accountId;
    }
    return obj;
  },

  create(base?: DeepPartial<WorkloadIdentityPoolProvider_Aws>): WorkloadIdentityPoolProvider_Aws {
    return WorkloadIdentityPoolProvider_Aws.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<WorkloadIdentityPoolProvider_Aws>): WorkloadIdentityPoolProvider_Aws {
    const message = createBaseWorkloadIdentityPoolProvider_Aws();
    message.accountId = object.accountId ?? "";
    return message;
  },
};

function createBaseWorkloadIdentityPoolProvider_Oidc(): WorkloadIdentityPoolProvider_Oidc {
  return { issuerUri: "", allowedAudiences: [] };
}

export const WorkloadIdentityPoolProvider_Oidc: MessageFns<WorkloadIdentityPoolProvider_Oidc> = {
  encode(message: WorkloadIdentityPoolProvider_Oidc, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.issuerUri !== "") {
      writer.uint32(10).string(message.issuerUri);
    }
    for (const v of message.allowedAudiences) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WorkloadIdentityPoolProvider_Oidc {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWorkloadIdentityPoolProvider_Oidc();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.issuerUri = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.allowedAudiences.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WorkloadIdentityPoolProvider_Oidc {
    return {
      issuerUri: isSet(object.issuerUri) ? globalThis.String(object.issuerUri) : "",
      allowedAudiences: globalThis.Array.isArray(object?.allowedAudiences)
        ? object.allowedAudiences.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: WorkloadIdentityPoolProvider_Oidc): unknown {
    const obj: any = {};
    if (message.issuerUri !== "") {
      obj.issuerUri = message.issuerUri;
    }
    if (message.allowedAudiences?.length) {
      obj.allowedAudiences = message.allowedAudiences;
    }
    return obj;
  },

  create(base?: DeepPartial<WorkloadIdentityPoolProvider_Oidc>): WorkloadIdentityPoolProvider_Oidc {
    return WorkloadIdentityPoolProvider_Oidc.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<WorkloadIdentityPoolProvider_Oidc>): WorkloadIdentityPoolProvider_Oidc {
    const message = createBaseWorkloadIdentityPoolProvider_Oidc();
    message.issuerUri = object.issuerUri ?? "";
    message.allowedAudiences = object.allowedAudiences?.map((e) => e) || [];
    return message;
  },
};

function createBaseWorkloadIdentityPoolProvider_AttributeMappingEntry(): WorkloadIdentityPoolProvider_AttributeMappingEntry {
  return { key: "", value: "" };
}

export const WorkloadIdentityPoolProvider_AttributeMappingEntry: MessageFns<
  WorkloadIdentityPoolProvider_AttributeMappingEntry
> = {
  encode(
    message: WorkloadIdentityPoolProvider_AttributeMappingEntry,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WorkloadIdentityPoolProvider_AttributeMappingEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWorkloadIdentityPoolProvider_AttributeMappingEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WorkloadIdentityPoolProvider_AttributeMappingEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: WorkloadIdentityPoolProvider_AttributeMappingEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(
    base?: DeepPartial<WorkloadIdentityPoolProvider_AttributeMappingEntry>,
  ): WorkloadIdentityPoolProvider_AttributeMappingEntry {
    return WorkloadIdentityPoolProvider_AttributeMappingEntry.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<WorkloadIdentityPoolProvider_AttributeMappingEntry>,
  ): WorkloadIdentityPoolProvider_AttributeMappingEntry {
    const message = createBaseWorkloadIdentityPoolProvider_AttributeMappingEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseListWorkloadIdentityPoolsRequest(): ListWorkloadIdentityPoolsRequest {
  return { parent: "", pageSize: 0, pageToken: "", showDeleted: false };
}

export const ListWorkloadIdentityPoolsRequest: MessageFns<ListWorkloadIdentityPoolsRequest> = {
  encode(message: ListWorkloadIdentityPoolsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.showDeleted !== false) {
      writer.uint32(32).bool(message.showDeleted);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListWorkloadIdentityPoolsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListWorkloadIdentityPoolsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.showDeleted = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListWorkloadIdentityPoolsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      showDeleted: isSet(object.showDeleted) ? globalThis.Boolean(object.showDeleted) : false,
    };
  },

  toJSON(message: ListWorkloadIdentityPoolsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.showDeleted !== false) {
      obj.showDeleted = message.showDeleted;
    }
    return obj;
  },

  create(base?: DeepPartial<ListWorkloadIdentityPoolsRequest>): ListWorkloadIdentityPoolsRequest {
    return ListWorkloadIdentityPoolsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListWorkloadIdentityPoolsRequest>): ListWorkloadIdentityPoolsRequest {
    const message = createBaseListWorkloadIdentityPoolsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.showDeleted = object.showDeleted ?? false;
    return message;
  },
};

function createBaseListWorkloadIdentityPoolsResponse(): ListWorkloadIdentityPoolsResponse {
  return { workloadIdentityPools: [], nextPageToken: "" };
}

export const ListWorkloadIdentityPoolsResponse: MessageFns<ListWorkloadIdentityPoolsResponse> = {
  encode(message: ListWorkloadIdentityPoolsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.workloadIdentityPools) {
      WorkloadIdentityPool.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListWorkloadIdentityPoolsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListWorkloadIdentityPoolsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.workloadIdentityPools.push(WorkloadIdentityPool.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListWorkloadIdentityPoolsResponse {
    return {
      workloadIdentityPools: globalThis.Array.isArray(object?.workloadIdentityPools)
        ? object.workloadIdentityPools.map((e: any) => WorkloadIdentityPool.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListWorkloadIdentityPoolsResponse): unknown {
    const obj: any = {};
    if (message.workloadIdentityPools?.length) {
      obj.workloadIdentityPools = message.workloadIdentityPools.map((e) => WorkloadIdentityPool.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListWorkloadIdentityPoolsResponse>): ListWorkloadIdentityPoolsResponse {
    return ListWorkloadIdentityPoolsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListWorkloadIdentityPoolsResponse>): ListWorkloadIdentityPoolsResponse {
    const message = createBaseListWorkloadIdentityPoolsResponse();
    message.workloadIdentityPools = object.workloadIdentityPools?.map((e) => WorkloadIdentityPool.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetWorkloadIdentityPoolRequest(): GetWorkloadIdentityPoolRequest {
  return { name: "" };
}

export const GetWorkloadIdentityPoolRequest: MessageFns<GetWorkloadIdentityPoolRequest> = {
  encode(message: GetWorkloadIdentityPoolRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetWorkloadIdentityPoolRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetWorkloadIdentityPoolRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetWorkloadIdentityPoolRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetWorkloadIdentityPoolRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetWorkloadIdentityPoolRequest>): GetWorkloadIdentityPoolRequest {
    return GetWorkloadIdentityPoolRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetWorkloadIdentityPoolRequest>): GetWorkloadIdentityPoolRequest {
    const message = createBaseGetWorkloadIdentityPoolRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateWorkloadIdentityPoolRequest(): CreateWorkloadIdentityPoolRequest {
  return { parent: "", workloadIdentityPool: undefined, workloadIdentityPoolId: "" };
}

export const CreateWorkloadIdentityPoolRequest: MessageFns<CreateWorkloadIdentityPoolRequest> = {
  encode(message: CreateWorkloadIdentityPoolRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.workloadIdentityPool !== undefined) {
      WorkloadIdentityPool.encode(message.workloadIdentityPool, writer.uint32(18).fork()).join();
    }
    if (message.workloadIdentityPoolId !== "") {
      writer.uint32(26).string(message.workloadIdentityPoolId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateWorkloadIdentityPoolRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateWorkloadIdentityPoolRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.workloadIdentityPool = WorkloadIdentityPool.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.workloadIdentityPoolId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateWorkloadIdentityPoolRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      workloadIdentityPool: isSet(object.workloadIdentityPool)
        ? WorkloadIdentityPool.fromJSON(object.workloadIdentityPool)
        : undefined,
      workloadIdentityPoolId: isSet(object.workloadIdentityPoolId)
        ? globalThis.String(object.workloadIdentityPoolId)
        : "",
    };
  },

  toJSON(message: CreateWorkloadIdentityPoolRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.workloadIdentityPool !== undefined) {
      obj.workloadIdentityPool = WorkloadIdentityPool.toJSON(message.workloadIdentityPool);
    }
    if (message.workloadIdentityPoolId !== "") {
      obj.workloadIdentityPoolId = message.workloadIdentityPoolId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateWorkloadIdentityPoolRequest>): CreateWorkloadIdentityPoolRequest {
    return CreateWorkloadIdentityPoolRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateWorkloadIdentityPoolRequest>): CreateWorkloadIdentityPoolRequest {
    const message = createBaseCreateWorkloadIdentityPoolRequest();
    message.parent = object.parent ?? "";
    message.workloadIdentityPool = (object.workloadIdentityPool !== undefined && object.workloadIdentityPool !== null)
      ? WorkloadIdentityPool.fromPartial(object.workloadIdentityPool)
      : undefined;
    message.workloadIdentityPoolId = object.workloadIdentityPoolId ?? "";
    return message;
  },
};

function createBaseUpdateWorkloadIdentityPoolRequest(): UpdateWorkloadIdentityPoolRequest {
  return { workloadIdentityPool: undefined, updateMask: undefined };
}

export const UpdateWorkloadIdentityPoolRequest: MessageFns<UpdateWorkloadIdentityPoolRequest> = {
  encode(message: UpdateWorkloadIdentityPoolRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.workloadIdentityPool !== undefined) {
      WorkloadIdentityPool.encode(message.workloadIdentityPool, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateWorkloadIdentityPoolRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateWorkloadIdentityPoolRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.workloadIdentityPool = WorkloadIdentityPool.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateWorkloadIdentityPoolRequest {
    return {
      workloadIdentityPool: isSet(object.workloadIdentityPool)
        ? WorkloadIdentityPool.fromJSON(object.workloadIdentityPool)
        : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateWorkloadIdentityPoolRequest): unknown {
    const obj: any = {};
    if (message.workloadIdentityPool !== undefined) {
      obj.workloadIdentityPool = WorkloadIdentityPool.toJSON(message.workloadIdentityPool);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateWorkloadIdentityPoolRequest>): UpdateWorkloadIdentityPoolRequest {
    return UpdateWorkloadIdentityPoolRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateWorkloadIdentityPoolRequest>): UpdateWorkloadIdentityPoolRequest {
    const message = createBaseUpdateWorkloadIdentityPoolRequest();
    message.workloadIdentityPool = (object.workloadIdentityPool !== undefined && object.workloadIdentityPool !== null)
      ? WorkloadIdentityPool.fromPartial(object.workloadIdentityPool)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseDeleteWorkloadIdentityPoolRequest(): DeleteWorkloadIdentityPoolRequest {
  return { name: "" };
}

export const DeleteWorkloadIdentityPoolRequest: MessageFns<DeleteWorkloadIdentityPoolRequest> = {
  encode(message: DeleteWorkloadIdentityPoolRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteWorkloadIdentityPoolRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteWorkloadIdentityPoolRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteWorkloadIdentityPoolRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteWorkloadIdentityPoolRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteWorkloadIdentityPoolRequest>): DeleteWorkloadIdentityPoolRequest {
    return DeleteWorkloadIdentityPoolRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteWorkloadIdentityPoolRequest>): DeleteWorkloadIdentityPoolRequest {
    const message = createBaseDeleteWorkloadIdentityPoolRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUndeleteWorkloadIdentityPoolRequest(): UndeleteWorkloadIdentityPoolRequest {
  return { name: "" };
}

export const UndeleteWorkloadIdentityPoolRequest: MessageFns<UndeleteWorkloadIdentityPoolRequest> = {
  encode(message: UndeleteWorkloadIdentityPoolRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UndeleteWorkloadIdentityPoolRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUndeleteWorkloadIdentityPoolRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UndeleteWorkloadIdentityPoolRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: UndeleteWorkloadIdentityPoolRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<UndeleteWorkloadIdentityPoolRequest>): UndeleteWorkloadIdentityPoolRequest {
    return UndeleteWorkloadIdentityPoolRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UndeleteWorkloadIdentityPoolRequest>): UndeleteWorkloadIdentityPoolRequest {
    const message = createBaseUndeleteWorkloadIdentityPoolRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListWorkloadIdentityPoolProvidersRequest(): ListWorkloadIdentityPoolProvidersRequest {
  return { parent: "", pageSize: 0, pageToken: "", showDeleted: false };
}

export const ListWorkloadIdentityPoolProvidersRequest: MessageFns<ListWorkloadIdentityPoolProvidersRequest> = {
  encode(message: ListWorkloadIdentityPoolProvidersRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.showDeleted !== false) {
      writer.uint32(32).bool(message.showDeleted);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListWorkloadIdentityPoolProvidersRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListWorkloadIdentityPoolProvidersRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.showDeleted = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListWorkloadIdentityPoolProvidersRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      showDeleted: isSet(object.showDeleted) ? globalThis.Boolean(object.showDeleted) : false,
    };
  },

  toJSON(message: ListWorkloadIdentityPoolProvidersRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.showDeleted !== false) {
      obj.showDeleted = message.showDeleted;
    }
    return obj;
  },

  create(base?: DeepPartial<ListWorkloadIdentityPoolProvidersRequest>): ListWorkloadIdentityPoolProvidersRequest {
    return ListWorkloadIdentityPoolProvidersRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListWorkloadIdentityPoolProvidersRequest>): ListWorkloadIdentityPoolProvidersRequest {
    const message = createBaseListWorkloadIdentityPoolProvidersRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.showDeleted = object.showDeleted ?? false;
    return message;
  },
};

function createBaseListWorkloadIdentityPoolProvidersResponse(): ListWorkloadIdentityPoolProvidersResponse {
  return { workloadIdentityPoolProviders: [], nextPageToken: "" };
}

export const ListWorkloadIdentityPoolProvidersResponse: MessageFns<ListWorkloadIdentityPoolProvidersResponse> = {
  encode(message: ListWorkloadIdentityPoolProvidersResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.workloadIdentityPoolProviders) {
      WorkloadIdentityPoolProvider.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListWorkloadIdentityPoolProvidersResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListWorkloadIdentityPoolProvidersResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.workloadIdentityPoolProviders.push(WorkloadIdentityPoolProvider.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListWorkloadIdentityPoolProvidersResponse {
    return {
      workloadIdentityPoolProviders: globalThis.Array.isArray(object?.workloadIdentityPoolProviders)
        ? object.workloadIdentityPoolProviders.map((e: any) => WorkloadIdentityPoolProvider.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListWorkloadIdentityPoolProvidersResponse): unknown {
    const obj: any = {};
    if (message.workloadIdentityPoolProviders?.length) {
      obj.workloadIdentityPoolProviders = message.workloadIdentityPoolProviders.map((e) =>
        WorkloadIdentityPoolProvider.toJSON(e)
      );
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListWorkloadIdentityPoolProvidersResponse>): ListWorkloadIdentityPoolProvidersResponse {
    return ListWorkloadIdentityPoolProvidersResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ListWorkloadIdentityPoolProvidersResponse>,
  ): ListWorkloadIdentityPoolProvidersResponse {
    const message = createBaseListWorkloadIdentityPoolProvidersResponse();
    message.workloadIdentityPoolProviders =
      object.workloadIdentityPoolProviders?.map((e) => WorkloadIdentityPoolProvider.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetWorkloadIdentityPoolProviderRequest(): GetWorkloadIdentityPoolProviderRequest {
  return { name: "" };
}

export const GetWorkloadIdentityPoolProviderRequest: MessageFns<GetWorkloadIdentityPoolProviderRequest> = {
  encode(message: GetWorkloadIdentityPoolProviderRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetWorkloadIdentityPoolProviderRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetWorkloadIdentityPoolProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetWorkloadIdentityPoolProviderRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetWorkloadIdentityPoolProviderRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetWorkloadIdentityPoolProviderRequest>): GetWorkloadIdentityPoolProviderRequest {
    return GetWorkloadIdentityPoolProviderRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetWorkloadIdentityPoolProviderRequest>): GetWorkloadIdentityPoolProviderRequest {
    const message = createBaseGetWorkloadIdentityPoolProviderRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateWorkloadIdentityPoolProviderRequest(): CreateWorkloadIdentityPoolProviderRequest {
  return { parent: "", workloadIdentityPoolProvider: undefined, workloadIdentityPoolProviderId: "" };
}

export const CreateWorkloadIdentityPoolProviderRequest: MessageFns<CreateWorkloadIdentityPoolProviderRequest> = {
  encode(message: CreateWorkloadIdentityPoolProviderRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.workloadIdentityPoolProvider !== undefined) {
      WorkloadIdentityPoolProvider.encode(message.workloadIdentityPoolProvider, writer.uint32(18).fork()).join();
    }
    if (message.workloadIdentityPoolProviderId !== "") {
      writer.uint32(26).string(message.workloadIdentityPoolProviderId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateWorkloadIdentityPoolProviderRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateWorkloadIdentityPoolProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.workloadIdentityPoolProvider = WorkloadIdentityPoolProvider.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.workloadIdentityPoolProviderId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateWorkloadIdentityPoolProviderRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      workloadIdentityPoolProvider: isSet(object.workloadIdentityPoolProvider)
        ? WorkloadIdentityPoolProvider.fromJSON(object.workloadIdentityPoolProvider)
        : undefined,
      workloadIdentityPoolProviderId: isSet(object.workloadIdentityPoolProviderId)
        ? globalThis.String(object.workloadIdentityPoolProviderId)
        : "",
    };
  },

  toJSON(message: CreateWorkloadIdentityPoolProviderRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.workloadIdentityPoolProvider !== undefined) {
      obj.workloadIdentityPoolProvider = WorkloadIdentityPoolProvider.toJSON(message.workloadIdentityPoolProvider);
    }
    if (message.workloadIdentityPoolProviderId !== "") {
      obj.workloadIdentityPoolProviderId = message.workloadIdentityPoolProviderId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateWorkloadIdentityPoolProviderRequest>): CreateWorkloadIdentityPoolProviderRequest {
    return CreateWorkloadIdentityPoolProviderRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<CreateWorkloadIdentityPoolProviderRequest>,
  ): CreateWorkloadIdentityPoolProviderRequest {
    const message = createBaseCreateWorkloadIdentityPoolProviderRequest();
    message.parent = object.parent ?? "";
    message.workloadIdentityPoolProvider =
      (object.workloadIdentityPoolProvider !== undefined && object.workloadIdentityPoolProvider !== null)
        ? WorkloadIdentityPoolProvider.fromPartial(object.workloadIdentityPoolProvider)
        : undefined;
    message.workloadIdentityPoolProviderId = object.workloadIdentityPoolProviderId ?? "";
    return message;
  },
};

function createBaseUpdateWorkloadIdentityPoolProviderRequest(): UpdateWorkloadIdentityPoolProviderRequest {
  return { workloadIdentityPoolProvider: undefined, updateMask: undefined };
}

export const UpdateWorkloadIdentityPoolProviderRequest: MessageFns<UpdateWorkloadIdentityPoolProviderRequest> = {
  encode(message: UpdateWorkloadIdentityPoolProviderRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.workloadIdentityPoolProvider !== undefined) {
      WorkloadIdentityPoolProvider.encode(message.workloadIdentityPoolProvider, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateWorkloadIdentityPoolProviderRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateWorkloadIdentityPoolProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.workloadIdentityPoolProvider = WorkloadIdentityPoolProvider.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateWorkloadIdentityPoolProviderRequest {
    return {
      workloadIdentityPoolProvider: isSet(object.workloadIdentityPoolProvider)
        ? WorkloadIdentityPoolProvider.fromJSON(object.workloadIdentityPoolProvider)
        : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateWorkloadIdentityPoolProviderRequest): unknown {
    const obj: any = {};
    if (message.workloadIdentityPoolProvider !== undefined) {
      obj.workloadIdentityPoolProvider = WorkloadIdentityPoolProvider.toJSON(message.workloadIdentityPoolProvider);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateWorkloadIdentityPoolProviderRequest>): UpdateWorkloadIdentityPoolProviderRequest {
    return UpdateWorkloadIdentityPoolProviderRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<UpdateWorkloadIdentityPoolProviderRequest>,
  ): UpdateWorkloadIdentityPoolProviderRequest {
    const message = createBaseUpdateWorkloadIdentityPoolProviderRequest();
    message.workloadIdentityPoolProvider =
      (object.workloadIdentityPoolProvider !== undefined && object.workloadIdentityPoolProvider !== null)
        ? WorkloadIdentityPoolProvider.fromPartial(object.workloadIdentityPoolProvider)
        : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseDeleteWorkloadIdentityPoolProviderRequest(): DeleteWorkloadIdentityPoolProviderRequest {
  return { name: "" };
}

export const DeleteWorkloadIdentityPoolProviderRequest: MessageFns<DeleteWorkloadIdentityPoolProviderRequest> = {
  encode(message: DeleteWorkloadIdentityPoolProviderRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteWorkloadIdentityPoolProviderRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteWorkloadIdentityPoolProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteWorkloadIdentityPoolProviderRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteWorkloadIdentityPoolProviderRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteWorkloadIdentityPoolProviderRequest>): DeleteWorkloadIdentityPoolProviderRequest {
    return DeleteWorkloadIdentityPoolProviderRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<DeleteWorkloadIdentityPoolProviderRequest>,
  ): DeleteWorkloadIdentityPoolProviderRequest {
    const message = createBaseDeleteWorkloadIdentityPoolProviderRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUndeleteWorkloadIdentityPoolProviderRequest(): UndeleteWorkloadIdentityPoolProviderRequest {
  return { name: "" };
}

export const UndeleteWorkloadIdentityPoolProviderRequest: MessageFns<UndeleteWorkloadIdentityPoolProviderRequest> = {
  encode(
    message: UndeleteWorkloadIdentityPoolProviderRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UndeleteWorkloadIdentityPoolProviderRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUndeleteWorkloadIdentityPoolProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UndeleteWorkloadIdentityPoolProviderRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: UndeleteWorkloadIdentityPoolProviderRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<UndeleteWorkloadIdentityPoolProviderRequest>): UndeleteWorkloadIdentityPoolProviderRequest {
    return UndeleteWorkloadIdentityPoolProviderRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<UndeleteWorkloadIdentityPoolProviderRequest>,
  ): UndeleteWorkloadIdentityPoolProviderRequest {
    const message = createBaseUndeleteWorkloadIdentityPoolProviderRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseWorkloadIdentityPoolOperationMetadata(): WorkloadIdentityPoolOperationMetadata {
  return {};
}

export const WorkloadIdentityPoolOperationMetadata: MessageFns<WorkloadIdentityPoolOperationMetadata> = {
  encode(_: WorkloadIdentityPoolOperationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WorkloadIdentityPoolOperationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWorkloadIdentityPoolOperationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): WorkloadIdentityPoolOperationMetadata {
    return {};
  },

  toJSON(_: WorkloadIdentityPoolOperationMetadata): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<WorkloadIdentityPoolOperationMetadata>): WorkloadIdentityPoolOperationMetadata {
    return WorkloadIdentityPoolOperationMetadata.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<WorkloadIdentityPoolOperationMetadata>): WorkloadIdentityPoolOperationMetadata {
    const message = createBaseWorkloadIdentityPoolOperationMetadata();
    return message;
  },
};

function createBaseWorkloadIdentityPoolProviderOperationMetadata(): WorkloadIdentityPoolProviderOperationMetadata {
  return {};
}

export const WorkloadIdentityPoolProviderOperationMetadata: MessageFns<WorkloadIdentityPoolProviderOperationMetadata> =
  {
    encode(_: WorkloadIdentityPoolProviderOperationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
      return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): WorkloadIdentityPoolProviderOperationMetadata {
      const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseWorkloadIdentityPoolProviderOperationMetadata();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(_: any): WorkloadIdentityPoolProviderOperationMetadata {
      return {};
    },

    toJSON(_: WorkloadIdentityPoolProviderOperationMetadata): unknown {
      const obj: any = {};
      return obj;
    },

    create(
      base?: DeepPartial<WorkloadIdentityPoolProviderOperationMetadata>,
    ): WorkloadIdentityPoolProviderOperationMetadata {
      return WorkloadIdentityPoolProviderOperationMetadata.fromPartial(base ?? {});
    },
    fromPartial(
      _: DeepPartial<WorkloadIdentityPoolProviderOperationMetadata>,
    ): WorkloadIdentityPoolProviderOperationMetadata {
      const message = createBaseWorkloadIdentityPoolProviderOperationMetadata();
      return message;
    },
  };

/** Manages WorkloadIdentityPools. */
export type WorkloadIdentityPoolsDefinition = typeof WorkloadIdentityPoolsDefinition;
export const WorkloadIdentityPoolsDefinition = {
  name: "WorkloadIdentityPools",
  fullName: "google.iam.v1beta.WorkloadIdentityPools",
  methods: {
    /**
     * Lists all non-deleted
     * [WorkloadIdentityPool][google.iam.v1beta.WorkloadIdentityPool]s in a
     * project. If `show_deleted` is set to `true`, then deleted pools are also
     * listed.
     */
    listWorkloadIdentityPools: {
      name: "ListWorkloadIdentityPools",
      requestType: ListWorkloadIdentityPoolsRequest,
      requestStream: false,
      responseType: ListWorkloadIdentityPoolsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              63,
              18,
              61,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              119,
              111,
              114,
              107,
              108,
              111,
              97,
              100,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              80,
              111,
              111,
              108,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Gets an individual
     * [WorkloadIdentityPool][google.iam.v1beta.WorkloadIdentityPool].
     */
    getWorkloadIdentityPool: {
      name: "GetWorkloadIdentityPool",
      requestType: GetWorkloadIdentityPoolRequest,
      requestStream: false,
      responseType: WorkloadIdentityPool,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              63,
              18,
              61,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              119,
              111,
              114,
              107,
              108,
              111,
              97,
              100,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              80,
              111,
              111,
              108,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Creates a new
     * [WorkloadIdentityPool][google.iam.v1beta.WorkloadIdentityPool].
     *
     * You cannot reuse the name of a deleted pool until 30 days after deletion.
     */
    createWorkloadIdentityPool: {
      name: "CreateWorkloadIdentityPool",
      requestType: CreateWorkloadIdentityPoolRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              61,
              10,
              20,
              87,
              111,
              114,
              107,
              108,
              111,
              97,
              100,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              80,
              111,
              111,
              108,
              18,
              37,
              87,
              111,
              114,
              107,
              108,
              111,
              97,
              100,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              80,
              111,
              111,
              108,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              55,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              119,
              111,
              114,
              107,
              108,
              111,
              97,
              100,
              95,
              105,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              95,
              112,
              111,
              111,
              108,
              44,
              119,
              111,
              114,
              107,
              108,
              111,
              97,
              100,
              95,
              105,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              95,
              112,
              111,
              111,
              108,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              87,
              58,
              22,
              119,
              111,
              114,
              107,
              108,
              111,
              97,
              100,
              95,
              105,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              95,
              112,
              111,
              111,
              108,
              34,
              61,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              119,
              111,
              114,
              107,
              108,
              111,
              97,
              100,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              80,
              111,
              111,
              108,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Updates an existing
     * [WorkloadIdentityPool][google.iam.v1beta.WorkloadIdentityPool].
     */
    updateWorkloadIdentityPool: {
      name: "UpdateWorkloadIdentityPool",
      requestType: UpdateWorkloadIdentityPoolRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              61,
              10,
              20,
              87,
              111,
              114,
              107,
              108,
              111,
              97,
              100,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              80,
              111,
              111,
              108,
              18,
              37,
              87,
              111,
              114,
              107,
              108,
              111,
              97,
              100,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              80,
              111,
              111,
              108,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              34,
              119,
              111,
              114,
              107,
              108,
              111,
              97,
              100,
              95,
              105,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              95,
              112,
              111,
              111,
              108,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              110,
              58,
              22,
              119,
              111,
              114,
              107,
              108,
              111,
              97,
              100,
              95,
              105,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              95,
              112,
              111,
              111,
              108,
              50,
              84,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              119,
              111,
              114,
              107,
              108,
              111,
              97,
              100,
              95,
              105,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              95,
              112,
              111,
              111,
              108,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              119,
              111,
              114,
              107,
              108,
              111,
              97,
              100,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              80,
              111,
              111,
              108,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Deletes a
     * [WorkloadIdentityPool][google.iam.v1beta.WorkloadIdentityPool].
     *
     * You cannot use a deleted pool to exchange external
     * credentials for Google Cloud credentials. However, deletion does
     * not revoke credentials that have already been issued.
     * Credentials issued for a deleted pool do not grant access to resources.
     * If the pool is undeleted, and the credentials are not expired, they
     * grant access again.
     * You can undelete a pool for 30 days. After 30 days, deletion is
     * permanent.
     * You cannot update deleted pools. However, you can view and list them.
     */
    deleteWorkloadIdentityPool: {
      name: "DeleteWorkloadIdentityPool",
      requestType: DeleteWorkloadIdentityPoolRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              61,
              10,
              20,
              87,
              111,
              114,
              107,
              108,
              111,
              97,
              100,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              80,
              111,
              111,
              108,
              18,
              37,
              87,
              111,
              114,
              107,
              108,
              111,
              97,
              100,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              80,
              111,
              111,
              108,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              63,
              42,
              61,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              119,
              111,
              114,
              107,
              108,
              111,
              97,
              100,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              80,
              111,
              111,
              108,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Undeletes a [WorkloadIdentityPool][google.iam.v1beta.WorkloadIdentityPool],
     * as long as it was deleted fewer than 30 days ago.
     */
    undeleteWorkloadIdentityPool: {
      name: "UndeleteWorkloadIdentityPool",
      requestType: UndeleteWorkloadIdentityPoolRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              61,
              10,
              20,
              87,
              111,
              114,
              107,
              108,
              111,
              97,
              100,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              80,
              111,
              111,
              108,
              18,
              37,
              87,
              111,
              114,
              107,
              108,
              111,
              97,
              100,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              80,
              111,
              111,
              108,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              75,
              58,
              1,
              42,
              34,
              70,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              119,
              111,
              114,
              107,
              108,
              111,
              97,
              100,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              80,
              111,
              111,
              108,
              115,
              47,
              42,
              125,
              58,
              117,
              110,
              100,
              101,
              108,
              101,
              116,
              101,
            ]),
          ],
        },
      },
    },
    /**
     * Lists all non-deleted
     * [WorkloadIdentityPoolProvider][google.iam.v1beta.WorkloadIdentityPoolProvider]s
     * in a [WorkloadIdentityPool][google.iam.v1beta.WorkloadIdentityPool].
     * If `show_deleted` is set to `true`, then deleted providers are also listed.
     */
    listWorkloadIdentityPoolProviders: {
      name: "ListWorkloadIdentityPoolProviders",
      requestType: ListWorkloadIdentityPoolProvidersRequest,
      requestStream: false,
      responseType: ListWorkloadIdentityPoolProvidersResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              75,
              18,
              73,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              119,
              111,
              114,
              107,
              108,
              111,
              97,
              100,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              80,
              111,
              111,
              108,
              115,
              47,
              42,
              125,
              47,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Gets an individual
     * [WorkloadIdentityPoolProvider][google.iam.v1beta.WorkloadIdentityPoolProvider].
     */
    getWorkloadIdentityPoolProvider: {
      name: "GetWorkloadIdentityPoolProvider",
      requestType: GetWorkloadIdentityPoolProviderRequest,
      requestStream: false,
      responseType: WorkloadIdentityPoolProvider,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              75,
              18,
              73,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              119,
              111,
              114,
              107,
              108,
              111,
              97,
              100,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              80,
              111,
              111,
              108,
              115,
              47,
              42,
              47,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Creates a new
     * [WorkloadIdentityPoolProvider][google.iam.v1beta.WorkloadIdentityProvider]
     * in a [WorkloadIdentityPool][google.iam.v1beta.WorkloadIdentityPool].
     *
     * You cannot reuse the name of a deleted provider until 30 days after
     * deletion.
     */
    createWorkloadIdentityPoolProvider: {
      name: "CreateWorkloadIdentityPoolProvider",
      requestType: CreateWorkloadIdentityPoolProviderRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              77,
              10,
              28,
              87,
              111,
              114,
              107,
              108,
              111,
              97,
              100,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              80,
              111,
              111,
              108,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              18,
              45,
              87,
              111,
              114,
              107,
              108,
              111,
              97,
              100,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              80,
              111,
              111,
              108,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              73,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              119,
              111,
              114,
              107,
              108,
              111,
              97,
              100,
              95,
              105,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              95,
              112,
              111,
              111,
              108,
              95,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              44,
              119,
              111,
              114,
              107,
              108,
              111,
              97,
              100,
              95,
              105,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              95,
              112,
              111,
              111,
              108,
              95,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              108,
              58,
              31,
              119,
              111,
              114,
              107,
              108,
              111,
              97,
              100,
              95,
              105,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              95,
              112,
              111,
              111,
              108,
              95,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              34,
              73,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              119,
              111,
              114,
              107,
              108,
              111,
              97,
              100,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              80,
              111,
              111,
              108,
              115,
              47,
              42,
              125,
              47,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Updates an existing
     * [WorkloadIdentityPoolProvider][google.iam.v1beta.WorkloadIdentityProvider].
     */
    updateWorkloadIdentityPoolProvider: {
      name: "UpdateWorkloadIdentityPoolProvider",
      requestType: UpdateWorkloadIdentityPoolProviderRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              77,
              10,
              28,
              87,
              111,
              114,
              107,
              108,
              111,
              97,
              100,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              80,
              111,
              111,
              108,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              18,
              45,
              87,
              111,
              114,
              107,
              108,
              111,
              97,
              100,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              80,
              111,
              111,
              108,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              43,
              119,
              111,
              114,
              107,
              108,
              111,
              97,
              100,
              95,
              105,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              95,
              112,
              111,
              111,
              108,
              95,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              140,
              1,
              58,
              31,
              119,
              111,
              114,
              107,
              108,
              111,
              97,
              100,
              95,
              105,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              95,
              112,
              111,
              111,
              108,
              95,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              50,
              105,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              119,
              111,
              114,
              107,
              108,
              111,
              97,
              100,
              95,
              105,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              95,
              112,
              111,
              111,
              108,
              95,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              119,
              111,
              114,
              107,
              108,
              111,
              97,
              100,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              80,
              111,
              111,
              108,
              115,
              47,
              42,
              47,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Deletes a
     * [WorkloadIdentityPoolProvider][google.iam.v1beta.WorkloadIdentityProvider].
     * Deleting a provider does not revoke credentials that have already been
     * issued; they continue to grant access.
     * You can undelete a provider for 30 days. After 30 days, deletion is
     * permanent.
     * You cannot update deleted providers. However, you can view and list them.
     */
    deleteWorkloadIdentityPoolProvider: {
      name: "DeleteWorkloadIdentityPoolProvider",
      requestType: DeleteWorkloadIdentityPoolProviderRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              77,
              10,
              28,
              87,
              111,
              114,
              107,
              108,
              111,
              97,
              100,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              80,
              111,
              111,
              108,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              18,
              45,
              87,
              111,
              114,
              107,
              108,
              111,
              97,
              100,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              80,
              111,
              111,
              108,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              75,
              42,
              73,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              119,
              111,
              114,
              107,
              108,
              111,
              97,
              100,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              80,
              111,
              111,
              108,
              115,
              47,
              42,
              47,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Undeletes a
     * [WorkloadIdentityPoolProvider][google.iam.v1beta.WorkloadIdentityProvider],
     * as long as it was deleted fewer than 30 days ago.
     */
    undeleteWorkloadIdentityPoolProvider: {
      name: "UndeleteWorkloadIdentityPoolProvider",
      requestType: UndeleteWorkloadIdentityPoolProviderRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              77,
              10,
              28,
              87,
              111,
              114,
              107,
              108,
              111,
              97,
              100,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              80,
              111,
              111,
              108,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              18,
              45,
              87,
              111,
              114,
              107,
              108,
              111,
              97,
              100,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              80,
              111,
              111,
              108,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              87,
              58,
              1,
              42,
              34,
              82,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              119,
              111,
              114,
              107,
              108,
              111,
              97,
              100,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              80,
              111,
              111,
              108,
              115,
              47,
              42,
              47,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              47,
              42,
              125,
              58,
              117,
              110,
              100,
              101,
              108,
              101,
              116,
              101,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface WorkloadIdentityPoolsServiceImplementation<CallContextExt = {}> {
  /**
   * Lists all non-deleted
   * [WorkloadIdentityPool][google.iam.v1beta.WorkloadIdentityPool]s in a
   * project. If `show_deleted` is set to `true`, then deleted pools are also
   * listed.
   */
  listWorkloadIdentityPools(
    request: ListWorkloadIdentityPoolsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListWorkloadIdentityPoolsResponse>>;
  /**
   * Gets an individual
   * [WorkloadIdentityPool][google.iam.v1beta.WorkloadIdentityPool].
   */
  getWorkloadIdentityPool(
    request: GetWorkloadIdentityPoolRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<WorkloadIdentityPool>>;
  /**
   * Creates a new
   * [WorkloadIdentityPool][google.iam.v1beta.WorkloadIdentityPool].
   *
   * You cannot reuse the name of a deleted pool until 30 days after deletion.
   */
  createWorkloadIdentityPool(
    request: CreateWorkloadIdentityPoolRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Updates an existing
   * [WorkloadIdentityPool][google.iam.v1beta.WorkloadIdentityPool].
   */
  updateWorkloadIdentityPool(
    request: UpdateWorkloadIdentityPoolRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Deletes a
   * [WorkloadIdentityPool][google.iam.v1beta.WorkloadIdentityPool].
   *
   * You cannot use a deleted pool to exchange external
   * credentials for Google Cloud credentials. However, deletion does
   * not revoke credentials that have already been issued.
   * Credentials issued for a deleted pool do not grant access to resources.
   * If the pool is undeleted, and the credentials are not expired, they
   * grant access again.
   * You can undelete a pool for 30 days. After 30 days, deletion is
   * permanent.
   * You cannot update deleted pools. However, you can view and list them.
   */
  deleteWorkloadIdentityPool(
    request: DeleteWorkloadIdentityPoolRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Undeletes a [WorkloadIdentityPool][google.iam.v1beta.WorkloadIdentityPool],
   * as long as it was deleted fewer than 30 days ago.
   */
  undeleteWorkloadIdentityPool(
    request: UndeleteWorkloadIdentityPoolRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Lists all non-deleted
   * [WorkloadIdentityPoolProvider][google.iam.v1beta.WorkloadIdentityPoolProvider]s
   * in a [WorkloadIdentityPool][google.iam.v1beta.WorkloadIdentityPool].
   * If `show_deleted` is set to `true`, then deleted providers are also listed.
   */
  listWorkloadIdentityPoolProviders(
    request: ListWorkloadIdentityPoolProvidersRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListWorkloadIdentityPoolProvidersResponse>>;
  /**
   * Gets an individual
   * [WorkloadIdentityPoolProvider][google.iam.v1beta.WorkloadIdentityPoolProvider].
   */
  getWorkloadIdentityPoolProvider(
    request: GetWorkloadIdentityPoolProviderRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<WorkloadIdentityPoolProvider>>;
  /**
   * Creates a new
   * [WorkloadIdentityPoolProvider][google.iam.v1beta.WorkloadIdentityProvider]
   * in a [WorkloadIdentityPool][google.iam.v1beta.WorkloadIdentityPool].
   *
   * You cannot reuse the name of a deleted provider until 30 days after
   * deletion.
   */
  createWorkloadIdentityPoolProvider(
    request: CreateWorkloadIdentityPoolProviderRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Updates an existing
   * [WorkloadIdentityPoolProvider][google.iam.v1beta.WorkloadIdentityProvider].
   */
  updateWorkloadIdentityPoolProvider(
    request: UpdateWorkloadIdentityPoolProviderRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Deletes a
   * [WorkloadIdentityPoolProvider][google.iam.v1beta.WorkloadIdentityProvider].
   * Deleting a provider does not revoke credentials that have already been
   * issued; they continue to grant access.
   * You can undelete a provider for 30 days. After 30 days, deletion is
   * permanent.
   * You cannot update deleted providers. However, you can view and list them.
   */
  deleteWorkloadIdentityPoolProvider(
    request: DeleteWorkloadIdentityPoolProviderRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Undeletes a
   * [WorkloadIdentityPoolProvider][google.iam.v1beta.WorkloadIdentityProvider],
   * as long as it was deleted fewer than 30 days ago.
   */
  undeleteWorkloadIdentityPoolProvider(
    request: UndeleteWorkloadIdentityPoolProviderRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
}

export interface WorkloadIdentityPoolsClient<CallOptionsExt = {}> {
  /**
   * Lists all non-deleted
   * [WorkloadIdentityPool][google.iam.v1beta.WorkloadIdentityPool]s in a
   * project. If `show_deleted` is set to `true`, then deleted pools are also
   * listed.
   */
  listWorkloadIdentityPools(
    request: DeepPartial<ListWorkloadIdentityPoolsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListWorkloadIdentityPoolsResponse>;
  /**
   * Gets an individual
   * [WorkloadIdentityPool][google.iam.v1beta.WorkloadIdentityPool].
   */
  getWorkloadIdentityPool(
    request: DeepPartial<GetWorkloadIdentityPoolRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<WorkloadIdentityPool>;
  /**
   * Creates a new
   * [WorkloadIdentityPool][google.iam.v1beta.WorkloadIdentityPool].
   *
   * You cannot reuse the name of a deleted pool until 30 days after deletion.
   */
  createWorkloadIdentityPool(
    request: DeepPartial<CreateWorkloadIdentityPoolRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Updates an existing
   * [WorkloadIdentityPool][google.iam.v1beta.WorkloadIdentityPool].
   */
  updateWorkloadIdentityPool(
    request: DeepPartial<UpdateWorkloadIdentityPoolRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Deletes a
   * [WorkloadIdentityPool][google.iam.v1beta.WorkloadIdentityPool].
   *
   * You cannot use a deleted pool to exchange external
   * credentials for Google Cloud credentials. However, deletion does
   * not revoke credentials that have already been issued.
   * Credentials issued for a deleted pool do not grant access to resources.
   * If the pool is undeleted, and the credentials are not expired, they
   * grant access again.
   * You can undelete a pool for 30 days. After 30 days, deletion is
   * permanent.
   * You cannot update deleted pools. However, you can view and list them.
   */
  deleteWorkloadIdentityPool(
    request: DeepPartial<DeleteWorkloadIdentityPoolRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Undeletes a [WorkloadIdentityPool][google.iam.v1beta.WorkloadIdentityPool],
   * as long as it was deleted fewer than 30 days ago.
   */
  undeleteWorkloadIdentityPool(
    request: DeepPartial<UndeleteWorkloadIdentityPoolRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Lists all non-deleted
   * [WorkloadIdentityPoolProvider][google.iam.v1beta.WorkloadIdentityPoolProvider]s
   * in a [WorkloadIdentityPool][google.iam.v1beta.WorkloadIdentityPool].
   * If `show_deleted` is set to `true`, then deleted providers are also listed.
   */
  listWorkloadIdentityPoolProviders(
    request: DeepPartial<ListWorkloadIdentityPoolProvidersRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListWorkloadIdentityPoolProvidersResponse>;
  /**
   * Gets an individual
   * [WorkloadIdentityPoolProvider][google.iam.v1beta.WorkloadIdentityPoolProvider].
   */
  getWorkloadIdentityPoolProvider(
    request: DeepPartial<GetWorkloadIdentityPoolProviderRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<WorkloadIdentityPoolProvider>;
  /**
   * Creates a new
   * [WorkloadIdentityPoolProvider][google.iam.v1beta.WorkloadIdentityProvider]
   * in a [WorkloadIdentityPool][google.iam.v1beta.WorkloadIdentityPool].
   *
   * You cannot reuse the name of a deleted provider until 30 days after
   * deletion.
   */
  createWorkloadIdentityPoolProvider(
    request: DeepPartial<CreateWorkloadIdentityPoolProviderRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Updates an existing
   * [WorkloadIdentityPoolProvider][google.iam.v1beta.WorkloadIdentityProvider].
   */
  updateWorkloadIdentityPoolProvider(
    request: DeepPartial<UpdateWorkloadIdentityPoolProviderRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Deletes a
   * [WorkloadIdentityPoolProvider][google.iam.v1beta.WorkloadIdentityProvider].
   * Deleting a provider does not revoke credentials that have already been
   * issued; they continue to grant access.
   * You can undelete a provider for 30 days. After 30 days, deletion is
   * permanent.
   * You cannot update deleted providers. However, you can view and list them.
   */
  deleteWorkloadIdentityPoolProvider(
    request: DeepPartial<DeleteWorkloadIdentityPoolProviderRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Undeletes a
   * [WorkloadIdentityPoolProvider][google.iam.v1beta.WorkloadIdentityProvider],
   * as long as it was deleted fewer than 30 days ago.
   */
  undeleteWorkloadIdentityPoolProvider(
    request: DeepPartial<UndeleteWorkloadIdentityPoolProviderRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
