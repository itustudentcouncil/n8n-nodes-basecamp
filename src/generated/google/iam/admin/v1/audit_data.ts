// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/iam/admin/v1/audit_data.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.iam.admin.v1";

/**
 * Audit log information specific to Cloud IAM admin APIs. This message is
 * serialized as an `Any` type in the `ServiceData` message of an
 * `AuditLog` message.
 */
export interface AuditData {
  /** The permission_delta when when creating or updating a Role. */
  permissionDelta: AuditData_PermissionDelta | undefined;
}

/**
 * A PermissionDelta message to record the added_permissions and
 * removed_permissions inside a role.
 */
export interface AuditData_PermissionDelta {
  /** Added permissions. */
  addedPermissions: string[];
  /** Removed permissions. */
  removedPermissions: string[];
}

function createBaseAuditData(): AuditData {
  return { permissionDelta: undefined };
}

export const AuditData: MessageFns<AuditData> = {
  encode(message: AuditData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.permissionDelta !== undefined) {
      AuditData_PermissionDelta.encode(message.permissionDelta, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AuditData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAuditData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.permissionDelta = AuditData_PermissionDelta.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AuditData {
    return {
      permissionDelta: isSet(object.permissionDelta)
        ? AuditData_PermissionDelta.fromJSON(object.permissionDelta)
        : undefined,
    };
  },

  toJSON(message: AuditData): unknown {
    const obj: any = {};
    if (message.permissionDelta !== undefined) {
      obj.permissionDelta = AuditData_PermissionDelta.toJSON(message.permissionDelta);
    }
    return obj;
  },

  create(base?: DeepPartial<AuditData>): AuditData {
    return AuditData.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AuditData>): AuditData {
    const message = createBaseAuditData();
    message.permissionDelta = (object.permissionDelta !== undefined && object.permissionDelta !== null)
      ? AuditData_PermissionDelta.fromPartial(object.permissionDelta)
      : undefined;
    return message;
  },
};

function createBaseAuditData_PermissionDelta(): AuditData_PermissionDelta {
  return { addedPermissions: [], removedPermissions: [] };
}

export const AuditData_PermissionDelta: MessageFns<AuditData_PermissionDelta> = {
  encode(message: AuditData_PermissionDelta, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.addedPermissions) {
      writer.uint32(10).string(v!);
    }
    for (const v of message.removedPermissions) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AuditData_PermissionDelta {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAuditData_PermissionDelta();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.addedPermissions.push(reader.string());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.removedPermissions.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AuditData_PermissionDelta {
    return {
      addedPermissions: globalThis.Array.isArray(object?.addedPermissions)
        ? object.addedPermissions.map((e: any) => globalThis.String(e))
        : [],
      removedPermissions: globalThis.Array.isArray(object?.removedPermissions)
        ? object.removedPermissions.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: AuditData_PermissionDelta): unknown {
    const obj: any = {};
    if (message.addedPermissions?.length) {
      obj.addedPermissions = message.addedPermissions;
    }
    if (message.removedPermissions?.length) {
      obj.removedPermissions = message.removedPermissions;
    }
    return obj;
  },

  create(base?: DeepPartial<AuditData_PermissionDelta>): AuditData_PermissionDelta {
    return AuditData_PermissionDelta.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AuditData_PermissionDelta>): AuditData_PermissionDelta {
    const message = createBaseAuditData_PermissionDelta();
    message.addedPermissions = object.addedPermissions?.map((e) => e) || [];
    message.removedPermissions = object.removedPermissions?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
