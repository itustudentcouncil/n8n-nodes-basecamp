// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/apps/drive/activity/v2/action.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../../protobuf/timestamp.js";
import { Actor, User } from "./actor.js";
import { Domain, Group, TimeRange } from "./common.js";
import { Target, TargetReference } from "./target.js";

export const protobufPackage = "google.apps.drive.activity.v2";

/** Information about the action. */
export interface Action {
  /** The type and detailed information about the action. */
  detail:
    | ActionDetail
    | undefined;
  /**
   * The actor responsible for this action (or empty if all actors are
   * responsible).
   */
  actor:
    | Actor
    | undefined;
  /**
   * The target this action affects (or empty if affecting all targets). This
   * represents the state of the target immediately after this action occurred.
   */
  target:
    | Target
    | undefined;
  /** The action occurred at this specific time. */
  timestamp?:
    | Date
    | undefined;
  /** The action occurred over this time range. */
  timeRange?: TimeRange | undefined;
}

/** Data describing the type and additional information of an action. */
export interface ActionDetail {
  /** An object was created. */
  create?:
    | Create
    | undefined;
  /** An object was edited. */
  edit?:
    | Edit
    | undefined;
  /** An object was moved. */
  move?:
    | Move
    | undefined;
  /** An object was renamed. */
  rename?:
    | Rename
    | undefined;
  /** An object was deleted. */
  delete?:
    | Delete
    | undefined;
  /** A deleted object was restored. */
  restore?:
    | Restore
    | undefined;
  /** The permission on an object was changed. */
  permissionChange?:
    | PermissionChange
    | undefined;
  /** A change about comments was made. */
  comment?:
    | Comment
    | undefined;
  /** A change happened in data leak prevention status. */
  dlpChange?:
    | DataLeakPreventionChange
    | undefined;
  /** An object was referenced in an application outside of Drive/Docs. */
  reference?:
    | ApplicationReference
    | undefined;
  /** Settings were changed. */
  settingsChange?:
    | SettingsChange
    | undefined;
  /** Label was changed. */
  appliedLabelChange?: AppliedLabelChange | undefined;
}

/** An object was created. */
export interface Create {
  /**
   * If present, indicates the object was newly created (e.g. as a blank
   * document), not derived from a Drive object or external object.
   */
  new?:
    | Create_New
    | undefined;
  /**
   * If present, indicates the object originated externally and was uploaded
   * to Drive.
   */
  upload?:
    | Create_Upload
    | undefined;
  /**
   * If present, indicates the object was created by copying an existing Drive
   * object.
   */
  copy?: Create_Copy | undefined;
}

/** An object was created from scratch. */
export interface Create_New {
}

/** An object was uploaded into Drive. */
export interface Create_Upload {
}

/** An object was created by copying an existing object. */
export interface Create_Copy {
  /** The original object. */
  originalObject: TargetReference | undefined;
}

/** An empty message indicating an object was edited. */
export interface Edit {
}

/** An object was moved. */
export interface Move {
  /** The added parent object(s). */
  addedParents: TargetReference[];
  /** The removed parent object(s). */
  removedParents: TargetReference[];
}

/** An object was renamed. */
export interface Rename {
  /** The previous title of the drive object. */
  oldTitle: string;
  /** The new title of the drive object. */
  newTitle: string;
}

/** An object was deleted. */
export interface Delete {
  /** The type of delete action taken. */
  type: Delete_Type;
}

/** The type of deletion. */
export enum Delete_Type {
  /** TYPE_UNSPECIFIED - Deletion type is not available. */
  TYPE_UNSPECIFIED = 0,
  /** TRASH - An object was put into the trash. */
  TRASH = 1,
  /** PERMANENT_DELETE - An object was deleted permanently. */
  PERMANENT_DELETE = 2,
  UNRECOGNIZED = -1,
}

export function delete_TypeFromJSON(object: any): Delete_Type {
  switch (object) {
    case 0:
    case "TYPE_UNSPECIFIED":
      return Delete_Type.TYPE_UNSPECIFIED;
    case 1:
    case "TRASH":
      return Delete_Type.TRASH;
    case 2:
    case "PERMANENT_DELETE":
      return Delete_Type.PERMANENT_DELETE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Delete_Type.UNRECOGNIZED;
  }
}

export function delete_TypeToJSON(object: Delete_Type): string {
  switch (object) {
    case Delete_Type.TYPE_UNSPECIFIED:
      return "TYPE_UNSPECIFIED";
    case Delete_Type.TRASH:
      return "TRASH";
    case Delete_Type.PERMANENT_DELETE:
      return "PERMANENT_DELETE";
    case Delete_Type.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** A deleted object was restored. */
export interface Restore {
  /** The type of restore action taken. */
  type: Restore_Type;
}

/** The type of restoration. */
export enum Restore_Type {
  /** TYPE_UNSPECIFIED - The type is not available. */
  TYPE_UNSPECIFIED = 0,
  /** UNTRASH - An object was restored from the trash. */
  UNTRASH = 1,
  UNRECOGNIZED = -1,
}

export function restore_TypeFromJSON(object: any): Restore_Type {
  switch (object) {
    case 0:
    case "TYPE_UNSPECIFIED":
      return Restore_Type.TYPE_UNSPECIFIED;
    case 1:
    case "UNTRASH":
      return Restore_Type.UNTRASH;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Restore_Type.UNRECOGNIZED;
  }
}

export function restore_TypeToJSON(object: Restore_Type): string {
  switch (object) {
    case Restore_Type.TYPE_UNSPECIFIED:
      return "TYPE_UNSPECIFIED";
    case Restore_Type.UNTRASH:
      return "UNTRASH";
    case Restore_Type.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** A change of the permission setting on an item. */
export interface PermissionChange {
  /** The set of permissions added by this change. */
  addedPermissions: Permission[];
  /** The set of permissions removed by this change. */
  removedPermissions: Permission[];
}

/** The permission setting of an object. */
export interface Permission {
  /**
   * Indicates the
   * [Google Drive permissions
   * role](https://developers.google.com/drive/web/manage-sharing#roles). The
   * role determines a user's ability to read, write, and comment on items.
   */
  role: Permission_Role;
  /** The user to whom this permission applies. */
  user?:
    | User
    | undefined;
  /** The group to whom this permission applies. */
  group?:
    | Group
    | undefined;
  /** The domain to whom this permission applies. */
  domain?:
    | Domain
    | undefined;
  /** If set, this permission applies to anyone, even logged out users. */
  anyone?:
    | Permission_Anyone
    | undefined;
  /**
   * If true, the item can be discovered (e.g. in the user's "Shared with me"
   * collection) without needing a link to the item.
   */
  allowDiscovery: boolean;
}

/**
 * The [Google Drive permissions
 * roles](https://developers.google.com/drive/web/manage-sharing#roles).
 */
export enum Permission_Role {
  /** ROLE_UNSPECIFIED - The role is not available. */
  ROLE_UNSPECIFIED = 0,
  /** OWNER - A role granting full access. */
  OWNER = 1,
  /** ORGANIZER - A role granting the ability to manage people and settings. */
  ORGANIZER = 2,
  /** FILE_ORGANIZER - A role granting the ability to contribute and manage content. */
  FILE_ORGANIZER = 3,
  /**
   * EDITOR - A role granting the ability to contribute content. This role is sometimes
   * also known as "writer".
   */
  EDITOR = 4,
  /** COMMENTER - A role granting the ability to view and comment on content. */
  COMMENTER = 5,
  /**
   * VIEWER - A role granting the ability to view content. This role is sometimes also
   * known as "reader".
   */
  VIEWER = 6,
  /**
   * PUBLISHED_VIEWER - A role granting the ability to view content only after it has been
   * published to the web. This role is sometimes also known as "published
   * reader". See https://support.google.com/sites/answer/6372880 for more
   * information.
   */
  PUBLISHED_VIEWER = 7,
  UNRECOGNIZED = -1,
}

export function permission_RoleFromJSON(object: any): Permission_Role {
  switch (object) {
    case 0:
    case "ROLE_UNSPECIFIED":
      return Permission_Role.ROLE_UNSPECIFIED;
    case 1:
    case "OWNER":
      return Permission_Role.OWNER;
    case 2:
    case "ORGANIZER":
      return Permission_Role.ORGANIZER;
    case 3:
    case "FILE_ORGANIZER":
      return Permission_Role.FILE_ORGANIZER;
    case 4:
    case "EDITOR":
      return Permission_Role.EDITOR;
    case 5:
    case "COMMENTER":
      return Permission_Role.COMMENTER;
    case 6:
    case "VIEWER":
      return Permission_Role.VIEWER;
    case 7:
    case "PUBLISHED_VIEWER":
      return Permission_Role.PUBLISHED_VIEWER;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Permission_Role.UNRECOGNIZED;
  }
}

export function permission_RoleToJSON(object: Permission_Role): string {
  switch (object) {
    case Permission_Role.ROLE_UNSPECIFIED:
      return "ROLE_UNSPECIFIED";
    case Permission_Role.OWNER:
      return "OWNER";
    case Permission_Role.ORGANIZER:
      return "ORGANIZER";
    case Permission_Role.FILE_ORGANIZER:
      return "FILE_ORGANIZER";
    case Permission_Role.EDITOR:
      return "EDITOR";
    case Permission_Role.COMMENTER:
      return "COMMENTER";
    case Permission_Role.VIEWER:
      return "VIEWER";
    case Permission_Role.PUBLISHED_VIEWER:
      return "PUBLISHED_VIEWER";
    case Permission_Role.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Represents any user (including a logged out user). */
export interface Permission_Anyone {
}

/** A change about comments on an object. */
export interface Comment {
  /** A change on a regular posted comment. */
  post?:
    | Comment_Post
    | undefined;
  /** A change on an assignment. */
  assignment?:
    | Comment_Assignment
    | undefined;
  /** A change on a suggestion. */
  suggestion?:
    | Comment_Suggestion
    | undefined;
  /** Users who are mentioned in this comment. */
  mentionedUsers: User[];
}

/** A regular posted comment. */
export interface Comment_Post {
  /** The sub-type of this event. */
  subtype: Comment_Post_Subtype;
}

/** More detailed information about the change. */
export enum Comment_Post_Subtype {
  /** SUBTYPE_UNSPECIFIED - Subtype not available. */
  SUBTYPE_UNSPECIFIED = 0,
  /** ADDED - A post was added. */
  ADDED = 1,
  /** DELETED - A post was deleted. */
  DELETED = 2,
  /** REPLY_ADDED - A reply was added. */
  REPLY_ADDED = 3,
  /** REPLY_DELETED - A reply was deleted. */
  REPLY_DELETED = 4,
  /** RESOLVED - A posted comment was resolved. */
  RESOLVED = 5,
  /** REOPENED - A posted comment was reopened. */
  REOPENED = 6,
  UNRECOGNIZED = -1,
}

export function comment_Post_SubtypeFromJSON(object: any): Comment_Post_Subtype {
  switch (object) {
    case 0:
    case "SUBTYPE_UNSPECIFIED":
      return Comment_Post_Subtype.SUBTYPE_UNSPECIFIED;
    case 1:
    case "ADDED":
      return Comment_Post_Subtype.ADDED;
    case 2:
    case "DELETED":
      return Comment_Post_Subtype.DELETED;
    case 3:
    case "REPLY_ADDED":
      return Comment_Post_Subtype.REPLY_ADDED;
    case 4:
    case "REPLY_DELETED":
      return Comment_Post_Subtype.REPLY_DELETED;
    case 5:
    case "RESOLVED":
      return Comment_Post_Subtype.RESOLVED;
    case 6:
    case "REOPENED":
      return Comment_Post_Subtype.REOPENED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Comment_Post_Subtype.UNRECOGNIZED;
  }
}

export function comment_Post_SubtypeToJSON(object: Comment_Post_Subtype): string {
  switch (object) {
    case Comment_Post_Subtype.SUBTYPE_UNSPECIFIED:
      return "SUBTYPE_UNSPECIFIED";
    case Comment_Post_Subtype.ADDED:
      return "ADDED";
    case Comment_Post_Subtype.DELETED:
      return "DELETED";
    case Comment_Post_Subtype.REPLY_ADDED:
      return "REPLY_ADDED";
    case Comment_Post_Subtype.REPLY_DELETED:
      return "REPLY_DELETED";
    case Comment_Post_Subtype.RESOLVED:
      return "RESOLVED";
    case Comment_Post_Subtype.REOPENED:
      return "REOPENED";
    case Comment_Post_Subtype.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** A comment with an assignment. */
export interface Comment_Assignment {
  /** The sub-type of this event. */
  subtype: Comment_Assignment_Subtype;
  /** The user to whom the comment was assigned. */
  assignedUser: User | undefined;
}

/** More detailed information about the change. */
export enum Comment_Assignment_Subtype {
  /** SUBTYPE_UNSPECIFIED - Subtype not available. */
  SUBTYPE_UNSPECIFIED = 0,
  /** ADDED - An assignment was added. */
  ADDED = 1,
  /** DELETED - An assignment was deleted. */
  DELETED = 2,
  /** REPLY_ADDED - An assignment reply was added. */
  REPLY_ADDED = 3,
  /** REPLY_DELETED - An assignment reply was deleted. */
  REPLY_DELETED = 4,
  /** RESOLVED - An assignment was resolved. */
  RESOLVED = 5,
  /** REOPENED - A resolved assignment was reopened. */
  REOPENED = 6,
  /** REASSIGNED - An assignment was reassigned. */
  REASSIGNED = 7,
  UNRECOGNIZED = -1,
}

export function comment_Assignment_SubtypeFromJSON(object: any): Comment_Assignment_Subtype {
  switch (object) {
    case 0:
    case "SUBTYPE_UNSPECIFIED":
      return Comment_Assignment_Subtype.SUBTYPE_UNSPECIFIED;
    case 1:
    case "ADDED":
      return Comment_Assignment_Subtype.ADDED;
    case 2:
    case "DELETED":
      return Comment_Assignment_Subtype.DELETED;
    case 3:
    case "REPLY_ADDED":
      return Comment_Assignment_Subtype.REPLY_ADDED;
    case 4:
    case "REPLY_DELETED":
      return Comment_Assignment_Subtype.REPLY_DELETED;
    case 5:
    case "RESOLVED":
      return Comment_Assignment_Subtype.RESOLVED;
    case 6:
    case "REOPENED":
      return Comment_Assignment_Subtype.REOPENED;
    case 7:
    case "REASSIGNED":
      return Comment_Assignment_Subtype.REASSIGNED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Comment_Assignment_Subtype.UNRECOGNIZED;
  }
}

export function comment_Assignment_SubtypeToJSON(object: Comment_Assignment_Subtype): string {
  switch (object) {
    case Comment_Assignment_Subtype.SUBTYPE_UNSPECIFIED:
      return "SUBTYPE_UNSPECIFIED";
    case Comment_Assignment_Subtype.ADDED:
      return "ADDED";
    case Comment_Assignment_Subtype.DELETED:
      return "DELETED";
    case Comment_Assignment_Subtype.REPLY_ADDED:
      return "REPLY_ADDED";
    case Comment_Assignment_Subtype.REPLY_DELETED:
      return "REPLY_DELETED";
    case Comment_Assignment_Subtype.RESOLVED:
      return "RESOLVED";
    case Comment_Assignment_Subtype.REOPENED:
      return "REOPENED";
    case Comment_Assignment_Subtype.REASSIGNED:
      return "REASSIGNED";
    case Comment_Assignment_Subtype.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** A suggestion. */
export interface Comment_Suggestion {
  /** The sub-type of this event. */
  subtype: Comment_Suggestion_Subtype;
}

/** More detailed information about the change. */
export enum Comment_Suggestion_Subtype {
  /** SUBTYPE_UNSPECIFIED - Subtype not available. */
  SUBTYPE_UNSPECIFIED = 0,
  /** ADDED - A suggestion was added. */
  ADDED = 1,
  /** DELETED - A suggestion was deleted. */
  DELETED = 2,
  /** REPLY_ADDED - A suggestion reply was added. */
  REPLY_ADDED = 3,
  /** REPLY_DELETED - A suggestion reply was deleted. */
  REPLY_DELETED = 4,
  /** ACCEPTED - A suggestion was accepted. */
  ACCEPTED = 7,
  /** REJECTED - A suggestion was rejected. */
  REJECTED = 8,
  /** ACCEPT_DELETED - An accepted suggestion was deleted. */
  ACCEPT_DELETED = 9,
  /** REJECT_DELETED - A rejected suggestion was deleted. */
  REJECT_DELETED = 10,
  UNRECOGNIZED = -1,
}

export function comment_Suggestion_SubtypeFromJSON(object: any): Comment_Suggestion_Subtype {
  switch (object) {
    case 0:
    case "SUBTYPE_UNSPECIFIED":
      return Comment_Suggestion_Subtype.SUBTYPE_UNSPECIFIED;
    case 1:
    case "ADDED":
      return Comment_Suggestion_Subtype.ADDED;
    case 2:
    case "DELETED":
      return Comment_Suggestion_Subtype.DELETED;
    case 3:
    case "REPLY_ADDED":
      return Comment_Suggestion_Subtype.REPLY_ADDED;
    case 4:
    case "REPLY_DELETED":
      return Comment_Suggestion_Subtype.REPLY_DELETED;
    case 7:
    case "ACCEPTED":
      return Comment_Suggestion_Subtype.ACCEPTED;
    case 8:
    case "REJECTED":
      return Comment_Suggestion_Subtype.REJECTED;
    case 9:
    case "ACCEPT_DELETED":
      return Comment_Suggestion_Subtype.ACCEPT_DELETED;
    case 10:
    case "REJECT_DELETED":
      return Comment_Suggestion_Subtype.REJECT_DELETED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Comment_Suggestion_Subtype.UNRECOGNIZED;
  }
}

export function comment_Suggestion_SubtypeToJSON(object: Comment_Suggestion_Subtype): string {
  switch (object) {
    case Comment_Suggestion_Subtype.SUBTYPE_UNSPECIFIED:
      return "SUBTYPE_UNSPECIFIED";
    case Comment_Suggestion_Subtype.ADDED:
      return "ADDED";
    case Comment_Suggestion_Subtype.DELETED:
      return "DELETED";
    case Comment_Suggestion_Subtype.REPLY_ADDED:
      return "REPLY_ADDED";
    case Comment_Suggestion_Subtype.REPLY_DELETED:
      return "REPLY_DELETED";
    case Comment_Suggestion_Subtype.ACCEPTED:
      return "ACCEPTED";
    case Comment_Suggestion_Subtype.REJECTED:
      return "REJECTED";
    case Comment_Suggestion_Subtype.ACCEPT_DELETED:
      return "ACCEPT_DELETED";
    case Comment_Suggestion_Subtype.REJECT_DELETED:
      return "REJECT_DELETED";
    case Comment_Suggestion_Subtype.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** A change in the object's data leak prevention status. */
export interface DataLeakPreventionChange {
  /** The type of Data Leak Prevention (DLP) change. */
  type: DataLeakPreventionChange_Type;
}

/** The type of the change. */
export enum DataLeakPreventionChange_Type {
  /** TYPE_UNSPECIFIED - An update to the DLP state that is neither FLAGGED or CLEARED. */
  TYPE_UNSPECIFIED = 0,
  /** FLAGGED - Document has been flagged as containing sensitive content. */
  FLAGGED = 1,
  /** CLEARED - Document is no longer flagged as containing sensitive content. */
  CLEARED = 2,
  UNRECOGNIZED = -1,
}

export function dataLeakPreventionChange_TypeFromJSON(object: any): DataLeakPreventionChange_Type {
  switch (object) {
    case 0:
    case "TYPE_UNSPECIFIED":
      return DataLeakPreventionChange_Type.TYPE_UNSPECIFIED;
    case 1:
    case "FLAGGED":
      return DataLeakPreventionChange_Type.FLAGGED;
    case 2:
    case "CLEARED":
      return DataLeakPreventionChange_Type.CLEARED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return DataLeakPreventionChange_Type.UNRECOGNIZED;
  }
}

export function dataLeakPreventionChange_TypeToJSON(object: DataLeakPreventionChange_Type): string {
  switch (object) {
    case DataLeakPreventionChange_Type.TYPE_UNSPECIFIED:
      return "TYPE_UNSPECIFIED";
    case DataLeakPreventionChange_Type.FLAGGED:
      return "FLAGGED";
    case DataLeakPreventionChange_Type.CLEARED:
      return "CLEARED";
    case DataLeakPreventionChange_Type.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Activity in applications other than Drive. */
export interface ApplicationReference {
  /** The reference type corresponding to this event. */
  type: ApplicationReference_Type;
}

/** The type of the action. */
export enum ApplicationReference_Type {
  /** UNSPECIFIED_REFERENCE_TYPE - The type is not available. */
  UNSPECIFIED_REFERENCE_TYPE = 0,
  /** LINK - The links of one or more Drive items were posted. */
  LINK = 1,
  /** DISCUSS - Comments were made regarding a Drive item. */
  DISCUSS = 2,
  UNRECOGNIZED = -1,
}

export function applicationReference_TypeFromJSON(object: any): ApplicationReference_Type {
  switch (object) {
    case 0:
    case "UNSPECIFIED_REFERENCE_TYPE":
      return ApplicationReference_Type.UNSPECIFIED_REFERENCE_TYPE;
    case 1:
    case "LINK":
      return ApplicationReference_Type.LINK;
    case 2:
    case "DISCUSS":
      return ApplicationReference_Type.DISCUSS;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ApplicationReference_Type.UNRECOGNIZED;
  }
}

export function applicationReference_TypeToJSON(object: ApplicationReference_Type): string {
  switch (object) {
    case ApplicationReference_Type.UNSPECIFIED_REFERENCE_TYPE:
      return "UNSPECIFIED_REFERENCE_TYPE";
    case ApplicationReference_Type.LINK:
      return "LINK";
    case ApplicationReference_Type.DISCUSS:
      return "DISCUSS";
    case ApplicationReference_Type.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Information about settings changes. */
export interface SettingsChange {
  /** The set of changes made to restrictions. */
  restrictionChanges: SettingsChange_RestrictionChange[];
}

/** Information about restriction policy changes to a feature. */
export interface SettingsChange_RestrictionChange {
  /** The feature which had a change in restriction policy. */
  feature: SettingsChange_RestrictionChange_Feature;
  /** The restriction in place after the change. */
  newRestriction: SettingsChange_RestrictionChange_Restriction;
}

/** The feature which had changes to its restriction policy. */
export enum SettingsChange_RestrictionChange_Feature {
  /** FEATURE_UNSPECIFIED - The feature which changed restriction settings was not available. */
  FEATURE_UNSPECIFIED = 0,
  /**
   * SHARING_OUTSIDE_DOMAIN - When restricted, this prevents items from being shared outside the
   * domain.
   */
  SHARING_OUTSIDE_DOMAIN = 1,
  /** DIRECT_SHARING - When restricted, this prevents direct sharing of individual items. */
  DIRECT_SHARING = 2,
  /**
   * ITEM_DUPLICATION - When restricted, this prevents actions like copy, download, and print
   * that might result in uncontrolled duplicates of items.
   */
  ITEM_DUPLICATION = 3,
  /** DRIVE_FILE_STREAM - When restricted, this prevents use of Drive File Stream. */
  DRIVE_FILE_STREAM = 4,
  /** FILE_ORGANIZER_CAN_SHARE_FOLDERS - When restricted, this limits sharing of folders to managers only. */
  FILE_ORGANIZER_CAN_SHARE_FOLDERS = 5,
  UNRECOGNIZED = -1,
}

export function settingsChange_RestrictionChange_FeatureFromJSON(
  object: any,
): SettingsChange_RestrictionChange_Feature {
  switch (object) {
    case 0:
    case "FEATURE_UNSPECIFIED":
      return SettingsChange_RestrictionChange_Feature.FEATURE_UNSPECIFIED;
    case 1:
    case "SHARING_OUTSIDE_DOMAIN":
      return SettingsChange_RestrictionChange_Feature.SHARING_OUTSIDE_DOMAIN;
    case 2:
    case "DIRECT_SHARING":
      return SettingsChange_RestrictionChange_Feature.DIRECT_SHARING;
    case 3:
    case "ITEM_DUPLICATION":
      return SettingsChange_RestrictionChange_Feature.ITEM_DUPLICATION;
    case 4:
    case "DRIVE_FILE_STREAM":
      return SettingsChange_RestrictionChange_Feature.DRIVE_FILE_STREAM;
    case 5:
    case "FILE_ORGANIZER_CAN_SHARE_FOLDERS":
      return SettingsChange_RestrictionChange_Feature.FILE_ORGANIZER_CAN_SHARE_FOLDERS;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SettingsChange_RestrictionChange_Feature.UNRECOGNIZED;
  }
}

export function settingsChange_RestrictionChange_FeatureToJSON(
  object: SettingsChange_RestrictionChange_Feature,
): string {
  switch (object) {
    case SettingsChange_RestrictionChange_Feature.FEATURE_UNSPECIFIED:
      return "FEATURE_UNSPECIFIED";
    case SettingsChange_RestrictionChange_Feature.SHARING_OUTSIDE_DOMAIN:
      return "SHARING_OUTSIDE_DOMAIN";
    case SettingsChange_RestrictionChange_Feature.DIRECT_SHARING:
      return "DIRECT_SHARING";
    case SettingsChange_RestrictionChange_Feature.ITEM_DUPLICATION:
      return "ITEM_DUPLICATION";
    case SettingsChange_RestrictionChange_Feature.DRIVE_FILE_STREAM:
      return "DRIVE_FILE_STREAM";
    case SettingsChange_RestrictionChange_Feature.FILE_ORGANIZER_CAN_SHARE_FOLDERS:
      return "FILE_ORGANIZER_CAN_SHARE_FOLDERS";
    case SettingsChange_RestrictionChange_Feature.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** The restriction applicable to a feature. */
export enum SettingsChange_RestrictionChange_Restriction {
  /** RESTRICTION_UNSPECIFIED - The type of restriction is not available. */
  RESTRICTION_UNSPECIFIED = 0,
  /** UNRESTRICTED - The feature is available without restriction. */
  UNRESTRICTED = 1,
  /** FULLY_RESTRICTED - The use of this feature is fully restricted. */
  FULLY_RESTRICTED = 2,
  UNRECOGNIZED = -1,
}

export function settingsChange_RestrictionChange_RestrictionFromJSON(
  object: any,
): SettingsChange_RestrictionChange_Restriction {
  switch (object) {
    case 0:
    case "RESTRICTION_UNSPECIFIED":
      return SettingsChange_RestrictionChange_Restriction.RESTRICTION_UNSPECIFIED;
    case 1:
    case "UNRESTRICTED":
      return SettingsChange_RestrictionChange_Restriction.UNRESTRICTED;
    case 2:
    case "FULLY_RESTRICTED":
      return SettingsChange_RestrictionChange_Restriction.FULLY_RESTRICTED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SettingsChange_RestrictionChange_Restriction.UNRECOGNIZED;
  }
}

export function settingsChange_RestrictionChange_RestrictionToJSON(
  object: SettingsChange_RestrictionChange_Restriction,
): string {
  switch (object) {
    case SettingsChange_RestrictionChange_Restriction.RESTRICTION_UNSPECIFIED:
      return "RESTRICTION_UNSPECIFIED";
    case SettingsChange_RestrictionChange_Restriction.UNRESTRICTED:
      return "UNRESTRICTED";
    case SettingsChange_RestrictionChange_Restriction.FULLY_RESTRICTED:
      return "FULLY_RESTRICTED";
    case SettingsChange_RestrictionChange_Restriction.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Label changes that were made on the Target. */
export interface AppliedLabelChange {
  /** Changes that were made to the Label on the Target. */
  changes: AppliedLabelChange_AppliedLabelChangeDetail[];
}

/** A change made to a Label on the Target. */
export interface AppliedLabelChange_AppliedLabelChangeDetail {
  /**
   * The Label name representing the Label that changed.
   * This name always contains the revision of the Label that was used
   * when this Action occurred. The format is
   * `labels/id@revision`.
   */
  label: string;
  /** The types of changes made to the Label on the Target. */
  types: AppliedLabelChange_AppliedLabelChangeDetail_Type[];
  /** The human-readable title of the label that changed. */
  title: string;
  /**
   * Field Changes. Only present if `types` contains
   * `LABEL_FIELD_VALUE_CHANGED`.
   */
  fieldChanges: AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange[];
}

/** The type of Label change */
export enum AppliedLabelChange_AppliedLabelChangeDetail_Type {
  /** TYPE_UNSPECIFIED - The type of change to this Label is not available. */
  TYPE_UNSPECIFIED = 0,
  /** LABEL_ADDED - The identified Label was added to the Target. */
  LABEL_ADDED = 1,
  /** LABEL_REMOVED - The identified Label was removed from the Target. */
  LABEL_REMOVED = 2,
  /** LABEL_FIELD_VALUE_CHANGED - Field values were changed on the Target. */
  LABEL_FIELD_VALUE_CHANGED = 3,
  /** LABEL_APPLIED_BY_ITEM_CREATE - The Label was applied as a side-effect of Drive item creation. */
  LABEL_APPLIED_BY_ITEM_CREATE = 4,
  UNRECOGNIZED = -1,
}

export function appliedLabelChange_AppliedLabelChangeDetail_TypeFromJSON(
  object: any,
): AppliedLabelChange_AppliedLabelChangeDetail_Type {
  switch (object) {
    case 0:
    case "TYPE_UNSPECIFIED":
      return AppliedLabelChange_AppliedLabelChangeDetail_Type.TYPE_UNSPECIFIED;
    case 1:
    case "LABEL_ADDED":
      return AppliedLabelChange_AppliedLabelChangeDetail_Type.LABEL_ADDED;
    case 2:
    case "LABEL_REMOVED":
      return AppliedLabelChange_AppliedLabelChangeDetail_Type.LABEL_REMOVED;
    case 3:
    case "LABEL_FIELD_VALUE_CHANGED":
      return AppliedLabelChange_AppliedLabelChangeDetail_Type.LABEL_FIELD_VALUE_CHANGED;
    case 4:
    case "LABEL_APPLIED_BY_ITEM_CREATE":
      return AppliedLabelChange_AppliedLabelChangeDetail_Type.LABEL_APPLIED_BY_ITEM_CREATE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AppliedLabelChange_AppliedLabelChangeDetail_Type.UNRECOGNIZED;
  }
}

export function appliedLabelChange_AppliedLabelChangeDetail_TypeToJSON(
  object: AppliedLabelChange_AppliedLabelChangeDetail_Type,
): string {
  switch (object) {
    case AppliedLabelChange_AppliedLabelChangeDetail_Type.TYPE_UNSPECIFIED:
      return "TYPE_UNSPECIFIED";
    case AppliedLabelChange_AppliedLabelChangeDetail_Type.LABEL_ADDED:
      return "LABEL_ADDED";
    case AppliedLabelChange_AppliedLabelChangeDetail_Type.LABEL_REMOVED:
      return "LABEL_REMOVED";
    case AppliedLabelChange_AppliedLabelChangeDetail_Type.LABEL_FIELD_VALUE_CHANGED:
      return "LABEL_FIELD_VALUE_CHANGED";
    case AppliedLabelChange_AppliedLabelChangeDetail_Type.LABEL_APPLIED_BY_ITEM_CREATE:
      return "LABEL_APPLIED_BY_ITEM_CREATE";
    case AppliedLabelChange_AppliedLabelChangeDetail_Type.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Change to a Field value. */
export interface AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange {
  /** The ID of this field. Field IDs are unique within a Label. */
  fieldId?:
    | string
    | undefined;
  /**
   * The value that was previously set on the field. If not present,
   * the field was newly set. At least one of {old_value|new_value} is
   * always set.
   */
  oldValue?:
    | AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue
    | undefined;
  /**
   * The value that is now set on the field. If not present, the field was
   * cleared. At least one of {old_value|new_value} is always set.
   */
  newValue?:
    | AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue
    | undefined;
  /** The human-readable display name for this field. */
  displayName?: string | undefined;
}

/** Contains a value of a Field. */
export interface AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue {
  /** Text Field value. */
  text?:
    | AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_Text
    | undefined;
  /** Text List Field value. */
  textList?:
    | AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_TextList
    | undefined;
  /** Selection Field value. */
  selection?:
    | AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_Selection
    | undefined;
  /** Selection List Field value. */
  selectionList?:
    | AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_SelectionList
    | undefined;
  /** Integer Field value. */
  integer?:
    | AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_Integer
    | undefined;
  /** User Field value. */
  user?:
    | AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_SingleUser
    | undefined;
  /** User List Field value. */
  userList?:
    | AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_UserList
    | undefined;
  /** Date Field value. */
  date?: AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_DateMessage | undefined;
}

/** Wrapper for Text Field value. */
export interface AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_Text {
  /** Value of Text Field. */
  value?: string | undefined;
}

/** Wrapper for Text List Field value. */
export interface AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_TextList {
  /** Text values. */
  values: AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_Text[];
}

/**
 * Wrapper for Selection Field value as combined value/display_name
 * pair for selected choice.
 */
export interface AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_Selection {
  /** Selection value as Field Choice ID. */
  value?:
    | string
    | undefined;
  /** Selection value as human-readable display string. */
  displayName?: string | undefined;
}

/** Wrapper for SelectionList Field value. */
export interface AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_SelectionList {
  /** Selection values. */
  values: AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_Selection[];
}

/** Wrapper for Integer Field value. */
export interface AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_Integer {
  /** Integer value. */
  value?: Long | undefined;
}

/** Wrapper for User Field value. */
export interface AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_SingleUser {
  /** User value as email. */
  value?: string | undefined;
}

/** Wrapper for UserList Field value. */
export interface AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_UserList {
  /** User values. */
  values: AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_SingleUser[];
}

/** Wrapper for Date Field value. */
export interface AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_DateMessage {
  /** Date value. */
  value?: Date | undefined;
}

function createBaseAction(): Action {
  return { detail: undefined, actor: undefined, target: undefined, timestamp: undefined, timeRange: undefined };
}

export const Action: MessageFns<Action> = {
  encode(message: Action, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.detail !== undefined) {
      ActionDetail.encode(message.detail, writer.uint32(10).fork()).join();
    }
    if (message.actor !== undefined) {
      Actor.encode(message.actor, writer.uint32(26).fork()).join();
    }
    if (message.target !== undefined) {
      Target.encode(message.target, writer.uint32(34).fork()).join();
    }
    if (message.timestamp !== undefined) {
      Timestamp.encode(toTimestamp(message.timestamp), writer.uint32(42).fork()).join();
    }
    if (message.timeRange !== undefined) {
      TimeRange.encode(message.timeRange, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Action {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.detail = ActionDetail.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.actor = Actor.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.target = Target.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.timestamp = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.timeRange = TimeRange.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Action {
    return {
      detail: isSet(object.detail) ? ActionDetail.fromJSON(object.detail) : undefined,
      actor: isSet(object.actor) ? Actor.fromJSON(object.actor) : undefined,
      target: isSet(object.target) ? Target.fromJSON(object.target) : undefined,
      timestamp: isSet(object.timestamp) ? fromJsonTimestamp(object.timestamp) : undefined,
      timeRange: isSet(object.timeRange) ? TimeRange.fromJSON(object.timeRange) : undefined,
    };
  },

  toJSON(message: Action): unknown {
    const obj: any = {};
    if (message.detail !== undefined) {
      obj.detail = ActionDetail.toJSON(message.detail);
    }
    if (message.actor !== undefined) {
      obj.actor = Actor.toJSON(message.actor);
    }
    if (message.target !== undefined) {
      obj.target = Target.toJSON(message.target);
    }
    if (message.timestamp !== undefined) {
      obj.timestamp = message.timestamp.toISOString();
    }
    if (message.timeRange !== undefined) {
      obj.timeRange = TimeRange.toJSON(message.timeRange);
    }
    return obj;
  },

  create(base?: DeepPartial<Action>): Action {
    return Action.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Action>): Action {
    const message = createBaseAction();
    message.detail = (object.detail !== undefined && object.detail !== null)
      ? ActionDetail.fromPartial(object.detail)
      : undefined;
    message.actor = (object.actor !== undefined && object.actor !== null) ? Actor.fromPartial(object.actor) : undefined;
    message.target = (object.target !== undefined && object.target !== null)
      ? Target.fromPartial(object.target)
      : undefined;
    message.timestamp = object.timestamp ?? undefined;
    message.timeRange = (object.timeRange !== undefined && object.timeRange !== null)
      ? TimeRange.fromPartial(object.timeRange)
      : undefined;
    return message;
  },
};

function createBaseActionDetail(): ActionDetail {
  return {
    create: undefined,
    edit: undefined,
    move: undefined,
    rename: undefined,
    delete: undefined,
    restore: undefined,
    permissionChange: undefined,
    comment: undefined,
    dlpChange: undefined,
    reference: undefined,
    settingsChange: undefined,
    appliedLabelChange: undefined,
  };
}

export const ActionDetail: MessageFns<ActionDetail> = {
  encode(message: ActionDetail, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.create !== undefined) {
      Create.encode(message.create, writer.uint32(10).fork()).join();
    }
    if (message.edit !== undefined) {
      Edit.encode(message.edit, writer.uint32(18).fork()).join();
    }
    if (message.move !== undefined) {
      Move.encode(message.move, writer.uint32(26).fork()).join();
    }
    if (message.rename !== undefined) {
      Rename.encode(message.rename, writer.uint32(34).fork()).join();
    }
    if (message.delete !== undefined) {
      Delete.encode(message.delete, writer.uint32(42).fork()).join();
    }
    if (message.restore !== undefined) {
      Restore.encode(message.restore, writer.uint32(50).fork()).join();
    }
    if (message.permissionChange !== undefined) {
      PermissionChange.encode(message.permissionChange, writer.uint32(58).fork()).join();
    }
    if (message.comment !== undefined) {
      Comment.encode(message.comment, writer.uint32(66).fork()).join();
    }
    if (message.dlpChange !== undefined) {
      DataLeakPreventionChange.encode(message.dlpChange, writer.uint32(74).fork()).join();
    }
    if (message.reference !== undefined) {
      ApplicationReference.encode(message.reference, writer.uint32(98).fork()).join();
    }
    if (message.settingsChange !== undefined) {
      SettingsChange.encode(message.settingsChange, writer.uint32(106).fork()).join();
    }
    if (message.appliedLabelChange !== undefined) {
      AppliedLabelChange.encode(message.appliedLabelChange, writer.uint32(154).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ActionDetail {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseActionDetail();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.create = Create.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.edit = Edit.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.move = Move.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.rename = Rename.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.delete = Delete.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.restore = Restore.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.permissionChange = PermissionChange.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.comment = Comment.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.dlpChange = DataLeakPreventionChange.decode(reader, reader.uint32());
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.reference = ApplicationReference.decode(reader, reader.uint32());
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.settingsChange = SettingsChange.decode(reader, reader.uint32());
          continue;
        case 19:
          if (tag !== 154) {
            break;
          }

          message.appliedLabelChange = AppliedLabelChange.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ActionDetail {
    return {
      create: isSet(object.create) ? Create.fromJSON(object.create) : undefined,
      edit: isSet(object.edit) ? Edit.fromJSON(object.edit) : undefined,
      move: isSet(object.move) ? Move.fromJSON(object.move) : undefined,
      rename: isSet(object.rename) ? Rename.fromJSON(object.rename) : undefined,
      delete: isSet(object.delete) ? Delete.fromJSON(object.delete) : undefined,
      restore: isSet(object.restore) ? Restore.fromJSON(object.restore) : undefined,
      permissionChange: isSet(object.permissionChange) ? PermissionChange.fromJSON(object.permissionChange) : undefined,
      comment: isSet(object.comment) ? Comment.fromJSON(object.comment) : undefined,
      dlpChange: isSet(object.dlpChange) ? DataLeakPreventionChange.fromJSON(object.dlpChange) : undefined,
      reference: isSet(object.reference) ? ApplicationReference.fromJSON(object.reference) : undefined,
      settingsChange: isSet(object.settingsChange) ? SettingsChange.fromJSON(object.settingsChange) : undefined,
      appliedLabelChange: isSet(object.appliedLabelChange)
        ? AppliedLabelChange.fromJSON(object.appliedLabelChange)
        : undefined,
    };
  },

  toJSON(message: ActionDetail): unknown {
    const obj: any = {};
    if (message.create !== undefined) {
      obj.create = Create.toJSON(message.create);
    }
    if (message.edit !== undefined) {
      obj.edit = Edit.toJSON(message.edit);
    }
    if (message.move !== undefined) {
      obj.move = Move.toJSON(message.move);
    }
    if (message.rename !== undefined) {
      obj.rename = Rename.toJSON(message.rename);
    }
    if (message.delete !== undefined) {
      obj.delete = Delete.toJSON(message.delete);
    }
    if (message.restore !== undefined) {
      obj.restore = Restore.toJSON(message.restore);
    }
    if (message.permissionChange !== undefined) {
      obj.permissionChange = PermissionChange.toJSON(message.permissionChange);
    }
    if (message.comment !== undefined) {
      obj.comment = Comment.toJSON(message.comment);
    }
    if (message.dlpChange !== undefined) {
      obj.dlpChange = DataLeakPreventionChange.toJSON(message.dlpChange);
    }
    if (message.reference !== undefined) {
      obj.reference = ApplicationReference.toJSON(message.reference);
    }
    if (message.settingsChange !== undefined) {
      obj.settingsChange = SettingsChange.toJSON(message.settingsChange);
    }
    if (message.appliedLabelChange !== undefined) {
      obj.appliedLabelChange = AppliedLabelChange.toJSON(message.appliedLabelChange);
    }
    return obj;
  },

  create(base?: DeepPartial<ActionDetail>): ActionDetail {
    return ActionDetail.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ActionDetail>): ActionDetail {
    const message = createBaseActionDetail();
    message.create = (object.create !== undefined && object.create !== null)
      ? Create.fromPartial(object.create)
      : undefined;
    message.edit = (object.edit !== undefined && object.edit !== null) ? Edit.fromPartial(object.edit) : undefined;
    message.move = (object.move !== undefined && object.move !== null) ? Move.fromPartial(object.move) : undefined;
    message.rename = (object.rename !== undefined && object.rename !== null)
      ? Rename.fromPartial(object.rename)
      : undefined;
    message.delete = (object.delete !== undefined && object.delete !== null)
      ? Delete.fromPartial(object.delete)
      : undefined;
    message.restore = (object.restore !== undefined && object.restore !== null)
      ? Restore.fromPartial(object.restore)
      : undefined;
    message.permissionChange = (object.permissionChange !== undefined && object.permissionChange !== null)
      ? PermissionChange.fromPartial(object.permissionChange)
      : undefined;
    message.comment = (object.comment !== undefined && object.comment !== null)
      ? Comment.fromPartial(object.comment)
      : undefined;
    message.dlpChange = (object.dlpChange !== undefined && object.dlpChange !== null)
      ? DataLeakPreventionChange.fromPartial(object.dlpChange)
      : undefined;
    message.reference = (object.reference !== undefined && object.reference !== null)
      ? ApplicationReference.fromPartial(object.reference)
      : undefined;
    message.settingsChange = (object.settingsChange !== undefined && object.settingsChange !== null)
      ? SettingsChange.fromPartial(object.settingsChange)
      : undefined;
    message.appliedLabelChange = (object.appliedLabelChange !== undefined && object.appliedLabelChange !== null)
      ? AppliedLabelChange.fromPartial(object.appliedLabelChange)
      : undefined;
    return message;
  },
};

function createBaseCreate(): Create {
  return { new: undefined, upload: undefined, copy: undefined };
}

export const Create: MessageFns<Create> = {
  encode(message: Create, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.new !== undefined) {
      Create_New.encode(message.new, writer.uint32(10).fork()).join();
    }
    if (message.upload !== undefined) {
      Create_Upload.encode(message.upload, writer.uint32(18).fork()).join();
    }
    if (message.copy !== undefined) {
      Create_Copy.encode(message.copy, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Create {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.new = Create_New.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.upload = Create_Upload.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.copy = Create_Copy.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Create {
    return {
      new: isSet(object.new) ? Create_New.fromJSON(object.new) : undefined,
      upload: isSet(object.upload) ? Create_Upload.fromJSON(object.upload) : undefined,
      copy: isSet(object.copy) ? Create_Copy.fromJSON(object.copy) : undefined,
    };
  },

  toJSON(message: Create): unknown {
    const obj: any = {};
    if (message.new !== undefined) {
      obj.new = Create_New.toJSON(message.new);
    }
    if (message.upload !== undefined) {
      obj.upload = Create_Upload.toJSON(message.upload);
    }
    if (message.copy !== undefined) {
      obj.copy = Create_Copy.toJSON(message.copy);
    }
    return obj;
  },

  create(base?: DeepPartial<Create>): Create {
    return Create.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Create>): Create {
    const message = createBaseCreate();
    message.new = (object.new !== undefined && object.new !== null) ? Create_New.fromPartial(object.new) : undefined;
    message.upload = (object.upload !== undefined && object.upload !== null)
      ? Create_Upload.fromPartial(object.upload)
      : undefined;
    message.copy = (object.copy !== undefined && object.copy !== null)
      ? Create_Copy.fromPartial(object.copy)
      : undefined;
    return message;
  },
};

function createBaseCreate_New(): Create_New {
  return {};
}

export const Create_New: MessageFns<Create_New> = {
  encode(_: Create_New, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Create_New {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreate_New();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Create_New {
    return {};
  },

  toJSON(_: Create_New): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<Create_New>): Create_New {
    return Create_New.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<Create_New>): Create_New {
    const message = createBaseCreate_New();
    return message;
  },
};

function createBaseCreate_Upload(): Create_Upload {
  return {};
}

export const Create_Upload: MessageFns<Create_Upload> = {
  encode(_: Create_Upload, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Create_Upload {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreate_Upload();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Create_Upload {
    return {};
  },

  toJSON(_: Create_Upload): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<Create_Upload>): Create_Upload {
    return Create_Upload.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<Create_Upload>): Create_Upload {
    const message = createBaseCreate_Upload();
    return message;
  },
};

function createBaseCreate_Copy(): Create_Copy {
  return { originalObject: undefined };
}

export const Create_Copy: MessageFns<Create_Copy> = {
  encode(message: Create_Copy, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.originalObject !== undefined) {
      TargetReference.encode(message.originalObject, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Create_Copy {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreate_Copy();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.originalObject = TargetReference.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Create_Copy {
    return {
      originalObject: isSet(object.originalObject) ? TargetReference.fromJSON(object.originalObject) : undefined,
    };
  },

  toJSON(message: Create_Copy): unknown {
    const obj: any = {};
    if (message.originalObject !== undefined) {
      obj.originalObject = TargetReference.toJSON(message.originalObject);
    }
    return obj;
  },

  create(base?: DeepPartial<Create_Copy>): Create_Copy {
    return Create_Copy.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Create_Copy>): Create_Copy {
    const message = createBaseCreate_Copy();
    message.originalObject = (object.originalObject !== undefined && object.originalObject !== null)
      ? TargetReference.fromPartial(object.originalObject)
      : undefined;
    return message;
  },
};

function createBaseEdit(): Edit {
  return {};
}

export const Edit: MessageFns<Edit> = {
  encode(_: Edit, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Edit {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEdit();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Edit {
    return {};
  },

  toJSON(_: Edit): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<Edit>): Edit {
    return Edit.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<Edit>): Edit {
    const message = createBaseEdit();
    return message;
  },
};

function createBaseMove(): Move {
  return { addedParents: [], removedParents: [] };
}

export const Move: MessageFns<Move> = {
  encode(message: Move, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.addedParents) {
      TargetReference.encode(v!, writer.uint32(10).fork()).join();
    }
    for (const v of message.removedParents) {
      TargetReference.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Move {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMove();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.addedParents.push(TargetReference.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.removedParents.push(TargetReference.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Move {
    return {
      addedParents: globalThis.Array.isArray(object?.addedParents)
        ? object.addedParents.map((e: any) => TargetReference.fromJSON(e))
        : [],
      removedParents: globalThis.Array.isArray(object?.removedParents)
        ? object.removedParents.map((e: any) => TargetReference.fromJSON(e))
        : [],
    };
  },

  toJSON(message: Move): unknown {
    const obj: any = {};
    if (message.addedParents?.length) {
      obj.addedParents = message.addedParents.map((e) => TargetReference.toJSON(e));
    }
    if (message.removedParents?.length) {
      obj.removedParents = message.removedParents.map((e) => TargetReference.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<Move>): Move {
    return Move.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Move>): Move {
    const message = createBaseMove();
    message.addedParents = object.addedParents?.map((e) => TargetReference.fromPartial(e)) || [];
    message.removedParents = object.removedParents?.map((e) => TargetReference.fromPartial(e)) || [];
    return message;
  },
};

function createBaseRename(): Rename {
  return { oldTitle: "", newTitle: "" };
}

export const Rename: MessageFns<Rename> = {
  encode(message: Rename, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.oldTitle !== "") {
      writer.uint32(10).string(message.oldTitle);
    }
    if (message.newTitle !== "") {
      writer.uint32(18).string(message.newTitle);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Rename {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRename();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.oldTitle = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.newTitle = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Rename {
    return {
      oldTitle: isSet(object.oldTitle) ? globalThis.String(object.oldTitle) : "",
      newTitle: isSet(object.newTitle) ? globalThis.String(object.newTitle) : "",
    };
  },

  toJSON(message: Rename): unknown {
    const obj: any = {};
    if (message.oldTitle !== "") {
      obj.oldTitle = message.oldTitle;
    }
    if (message.newTitle !== "") {
      obj.newTitle = message.newTitle;
    }
    return obj;
  },

  create(base?: DeepPartial<Rename>): Rename {
    return Rename.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Rename>): Rename {
    const message = createBaseRename();
    message.oldTitle = object.oldTitle ?? "";
    message.newTitle = object.newTitle ?? "";
    return message;
  },
};

function createBaseDelete(): Delete {
  return { type: 0 };
}

export const Delete: MessageFns<Delete> = {
  encode(message: Delete, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Delete {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDelete();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Delete {
    return { type: isSet(object.type) ? delete_TypeFromJSON(object.type) : 0 };
  },

  toJSON(message: Delete): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = delete_TypeToJSON(message.type);
    }
    return obj;
  },

  create(base?: DeepPartial<Delete>): Delete {
    return Delete.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Delete>): Delete {
    const message = createBaseDelete();
    message.type = object.type ?? 0;
    return message;
  },
};

function createBaseRestore(): Restore {
  return { type: 0 };
}

export const Restore: MessageFns<Restore> = {
  encode(message: Restore, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Restore {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRestore();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Restore {
    return { type: isSet(object.type) ? restore_TypeFromJSON(object.type) : 0 };
  },

  toJSON(message: Restore): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = restore_TypeToJSON(message.type);
    }
    return obj;
  },

  create(base?: DeepPartial<Restore>): Restore {
    return Restore.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Restore>): Restore {
    const message = createBaseRestore();
    message.type = object.type ?? 0;
    return message;
  },
};

function createBasePermissionChange(): PermissionChange {
  return { addedPermissions: [], removedPermissions: [] };
}

export const PermissionChange: MessageFns<PermissionChange> = {
  encode(message: PermissionChange, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.addedPermissions) {
      Permission.encode(v!, writer.uint32(10).fork()).join();
    }
    for (const v of message.removedPermissions) {
      Permission.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PermissionChange {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePermissionChange();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.addedPermissions.push(Permission.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.removedPermissions.push(Permission.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PermissionChange {
    return {
      addedPermissions: globalThis.Array.isArray(object?.addedPermissions)
        ? object.addedPermissions.map((e: any) => Permission.fromJSON(e))
        : [],
      removedPermissions: globalThis.Array.isArray(object?.removedPermissions)
        ? object.removedPermissions.map((e: any) => Permission.fromJSON(e))
        : [],
    };
  },

  toJSON(message: PermissionChange): unknown {
    const obj: any = {};
    if (message.addedPermissions?.length) {
      obj.addedPermissions = message.addedPermissions.map((e) => Permission.toJSON(e));
    }
    if (message.removedPermissions?.length) {
      obj.removedPermissions = message.removedPermissions.map((e) => Permission.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<PermissionChange>): PermissionChange {
    return PermissionChange.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PermissionChange>): PermissionChange {
    const message = createBasePermissionChange();
    message.addedPermissions = object.addedPermissions?.map((e) => Permission.fromPartial(e)) || [];
    message.removedPermissions = object.removedPermissions?.map((e) => Permission.fromPartial(e)) || [];
    return message;
  },
};

function createBasePermission(): Permission {
  return { role: 0, user: undefined, group: undefined, domain: undefined, anyone: undefined, allowDiscovery: false };
}

export const Permission: MessageFns<Permission> = {
  encode(message: Permission, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.role !== 0) {
      writer.uint32(8).int32(message.role);
    }
    if (message.user !== undefined) {
      User.encode(message.user, writer.uint32(18).fork()).join();
    }
    if (message.group !== undefined) {
      Group.encode(message.group, writer.uint32(26).fork()).join();
    }
    if (message.domain !== undefined) {
      Domain.encode(message.domain, writer.uint32(34).fork()).join();
    }
    if (message.anyone !== undefined) {
      Permission_Anyone.encode(message.anyone, writer.uint32(42).fork()).join();
    }
    if (message.allowDiscovery !== false) {
      writer.uint32(48).bool(message.allowDiscovery);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Permission {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePermission();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.role = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.user = User.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.group = Group.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.domain = Domain.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.anyone = Permission_Anyone.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.allowDiscovery = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Permission {
    return {
      role: isSet(object.role) ? permission_RoleFromJSON(object.role) : 0,
      user: isSet(object.user) ? User.fromJSON(object.user) : undefined,
      group: isSet(object.group) ? Group.fromJSON(object.group) : undefined,
      domain: isSet(object.domain) ? Domain.fromJSON(object.domain) : undefined,
      anyone: isSet(object.anyone) ? Permission_Anyone.fromJSON(object.anyone) : undefined,
      allowDiscovery: isSet(object.allowDiscovery) ? globalThis.Boolean(object.allowDiscovery) : false,
    };
  },

  toJSON(message: Permission): unknown {
    const obj: any = {};
    if (message.role !== 0) {
      obj.role = permission_RoleToJSON(message.role);
    }
    if (message.user !== undefined) {
      obj.user = User.toJSON(message.user);
    }
    if (message.group !== undefined) {
      obj.group = Group.toJSON(message.group);
    }
    if (message.domain !== undefined) {
      obj.domain = Domain.toJSON(message.domain);
    }
    if (message.anyone !== undefined) {
      obj.anyone = Permission_Anyone.toJSON(message.anyone);
    }
    if (message.allowDiscovery !== false) {
      obj.allowDiscovery = message.allowDiscovery;
    }
    return obj;
  },

  create(base?: DeepPartial<Permission>): Permission {
    return Permission.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Permission>): Permission {
    const message = createBasePermission();
    message.role = object.role ?? 0;
    message.user = (object.user !== undefined && object.user !== null) ? User.fromPartial(object.user) : undefined;
    message.group = (object.group !== undefined && object.group !== null) ? Group.fromPartial(object.group) : undefined;
    message.domain = (object.domain !== undefined && object.domain !== null)
      ? Domain.fromPartial(object.domain)
      : undefined;
    message.anyone = (object.anyone !== undefined && object.anyone !== null)
      ? Permission_Anyone.fromPartial(object.anyone)
      : undefined;
    message.allowDiscovery = object.allowDiscovery ?? false;
    return message;
  },
};

function createBasePermission_Anyone(): Permission_Anyone {
  return {};
}

export const Permission_Anyone: MessageFns<Permission_Anyone> = {
  encode(_: Permission_Anyone, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Permission_Anyone {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePermission_Anyone();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Permission_Anyone {
    return {};
  },

  toJSON(_: Permission_Anyone): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<Permission_Anyone>): Permission_Anyone {
    return Permission_Anyone.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<Permission_Anyone>): Permission_Anyone {
    const message = createBasePermission_Anyone();
    return message;
  },
};

function createBaseComment(): Comment {
  return { post: undefined, assignment: undefined, suggestion: undefined, mentionedUsers: [] };
}

export const Comment: MessageFns<Comment> = {
  encode(message: Comment, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.post !== undefined) {
      Comment_Post.encode(message.post, writer.uint32(10).fork()).join();
    }
    if (message.assignment !== undefined) {
      Comment_Assignment.encode(message.assignment, writer.uint32(18).fork()).join();
    }
    if (message.suggestion !== undefined) {
      Comment_Suggestion.encode(message.suggestion, writer.uint32(26).fork()).join();
    }
    for (const v of message.mentionedUsers) {
      User.encode(v!, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Comment {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseComment();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.post = Comment_Post.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.assignment = Comment_Assignment.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.suggestion = Comment_Suggestion.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.mentionedUsers.push(User.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Comment {
    return {
      post: isSet(object.post) ? Comment_Post.fromJSON(object.post) : undefined,
      assignment: isSet(object.assignment) ? Comment_Assignment.fromJSON(object.assignment) : undefined,
      suggestion: isSet(object.suggestion) ? Comment_Suggestion.fromJSON(object.suggestion) : undefined,
      mentionedUsers: globalThis.Array.isArray(object?.mentionedUsers)
        ? object.mentionedUsers.map((e: any) => User.fromJSON(e))
        : [],
    };
  },

  toJSON(message: Comment): unknown {
    const obj: any = {};
    if (message.post !== undefined) {
      obj.post = Comment_Post.toJSON(message.post);
    }
    if (message.assignment !== undefined) {
      obj.assignment = Comment_Assignment.toJSON(message.assignment);
    }
    if (message.suggestion !== undefined) {
      obj.suggestion = Comment_Suggestion.toJSON(message.suggestion);
    }
    if (message.mentionedUsers?.length) {
      obj.mentionedUsers = message.mentionedUsers.map((e) => User.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<Comment>): Comment {
    return Comment.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Comment>): Comment {
    const message = createBaseComment();
    message.post = (object.post !== undefined && object.post !== null)
      ? Comment_Post.fromPartial(object.post)
      : undefined;
    message.assignment = (object.assignment !== undefined && object.assignment !== null)
      ? Comment_Assignment.fromPartial(object.assignment)
      : undefined;
    message.suggestion = (object.suggestion !== undefined && object.suggestion !== null)
      ? Comment_Suggestion.fromPartial(object.suggestion)
      : undefined;
    message.mentionedUsers = object.mentionedUsers?.map((e) => User.fromPartial(e)) || [];
    return message;
  },
};

function createBaseComment_Post(): Comment_Post {
  return { subtype: 0 };
}

export const Comment_Post: MessageFns<Comment_Post> = {
  encode(message: Comment_Post, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.subtype !== 0) {
      writer.uint32(8).int32(message.subtype);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Comment_Post {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseComment_Post();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.subtype = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Comment_Post {
    return { subtype: isSet(object.subtype) ? comment_Post_SubtypeFromJSON(object.subtype) : 0 };
  },

  toJSON(message: Comment_Post): unknown {
    const obj: any = {};
    if (message.subtype !== 0) {
      obj.subtype = comment_Post_SubtypeToJSON(message.subtype);
    }
    return obj;
  },

  create(base?: DeepPartial<Comment_Post>): Comment_Post {
    return Comment_Post.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Comment_Post>): Comment_Post {
    const message = createBaseComment_Post();
    message.subtype = object.subtype ?? 0;
    return message;
  },
};

function createBaseComment_Assignment(): Comment_Assignment {
  return { subtype: 0, assignedUser: undefined };
}

export const Comment_Assignment: MessageFns<Comment_Assignment> = {
  encode(message: Comment_Assignment, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.subtype !== 0) {
      writer.uint32(8).int32(message.subtype);
    }
    if (message.assignedUser !== undefined) {
      User.encode(message.assignedUser, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Comment_Assignment {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseComment_Assignment();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.subtype = reader.int32() as any;
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.assignedUser = User.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Comment_Assignment {
    return {
      subtype: isSet(object.subtype) ? comment_Assignment_SubtypeFromJSON(object.subtype) : 0,
      assignedUser: isSet(object.assignedUser) ? User.fromJSON(object.assignedUser) : undefined,
    };
  },

  toJSON(message: Comment_Assignment): unknown {
    const obj: any = {};
    if (message.subtype !== 0) {
      obj.subtype = comment_Assignment_SubtypeToJSON(message.subtype);
    }
    if (message.assignedUser !== undefined) {
      obj.assignedUser = User.toJSON(message.assignedUser);
    }
    return obj;
  },

  create(base?: DeepPartial<Comment_Assignment>): Comment_Assignment {
    return Comment_Assignment.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Comment_Assignment>): Comment_Assignment {
    const message = createBaseComment_Assignment();
    message.subtype = object.subtype ?? 0;
    message.assignedUser = (object.assignedUser !== undefined && object.assignedUser !== null)
      ? User.fromPartial(object.assignedUser)
      : undefined;
    return message;
  },
};

function createBaseComment_Suggestion(): Comment_Suggestion {
  return { subtype: 0 };
}

export const Comment_Suggestion: MessageFns<Comment_Suggestion> = {
  encode(message: Comment_Suggestion, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.subtype !== 0) {
      writer.uint32(8).int32(message.subtype);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Comment_Suggestion {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseComment_Suggestion();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.subtype = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Comment_Suggestion {
    return { subtype: isSet(object.subtype) ? comment_Suggestion_SubtypeFromJSON(object.subtype) : 0 };
  },

  toJSON(message: Comment_Suggestion): unknown {
    const obj: any = {};
    if (message.subtype !== 0) {
      obj.subtype = comment_Suggestion_SubtypeToJSON(message.subtype);
    }
    return obj;
  },

  create(base?: DeepPartial<Comment_Suggestion>): Comment_Suggestion {
    return Comment_Suggestion.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Comment_Suggestion>): Comment_Suggestion {
    const message = createBaseComment_Suggestion();
    message.subtype = object.subtype ?? 0;
    return message;
  },
};

function createBaseDataLeakPreventionChange(): DataLeakPreventionChange {
  return { type: 0 };
}

export const DataLeakPreventionChange: MessageFns<DataLeakPreventionChange> = {
  encode(message: DataLeakPreventionChange, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DataLeakPreventionChange {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDataLeakPreventionChange();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DataLeakPreventionChange {
    return { type: isSet(object.type) ? dataLeakPreventionChange_TypeFromJSON(object.type) : 0 };
  },

  toJSON(message: DataLeakPreventionChange): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = dataLeakPreventionChange_TypeToJSON(message.type);
    }
    return obj;
  },

  create(base?: DeepPartial<DataLeakPreventionChange>): DataLeakPreventionChange {
    return DataLeakPreventionChange.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DataLeakPreventionChange>): DataLeakPreventionChange {
    const message = createBaseDataLeakPreventionChange();
    message.type = object.type ?? 0;
    return message;
  },
};

function createBaseApplicationReference(): ApplicationReference {
  return { type: 0 };
}

export const ApplicationReference: MessageFns<ApplicationReference> = {
  encode(message: ApplicationReference, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ApplicationReference {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseApplicationReference();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ApplicationReference {
    return { type: isSet(object.type) ? applicationReference_TypeFromJSON(object.type) : 0 };
  },

  toJSON(message: ApplicationReference): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = applicationReference_TypeToJSON(message.type);
    }
    return obj;
  },

  create(base?: DeepPartial<ApplicationReference>): ApplicationReference {
    return ApplicationReference.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ApplicationReference>): ApplicationReference {
    const message = createBaseApplicationReference();
    message.type = object.type ?? 0;
    return message;
  },
};

function createBaseSettingsChange(): SettingsChange {
  return { restrictionChanges: [] };
}

export const SettingsChange: MessageFns<SettingsChange> = {
  encode(message: SettingsChange, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.restrictionChanges) {
      SettingsChange_RestrictionChange.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SettingsChange {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSettingsChange();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.restrictionChanges.push(SettingsChange_RestrictionChange.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SettingsChange {
    return {
      restrictionChanges: globalThis.Array.isArray(object?.restrictionChanges)
        ? object.restrictionChanges.map((e: any) => SettingsChange_RestrictionChange.fromJSON(e))
        : [],
    };
  },

  toJSON(message: SettingsChange): unknown {
    const obj: any = {};
    if (message.restrictionChanges?.length) {
      obj.restrictionChanges = message.restrictionChanges.map((e) => SettingsChange_RestrictionChange.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<SettingsChange>): SettingsChange {
    return SettingsChange.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SettingsChange>): SettingsChange {
    const message = createBaseSettingsChange();
    message.restrictionChanges =
      object.restrictionChanges?.map((e) => SettingsChange_RestrictionChange.fromPartial(e)) || [];
    return message;
  },
};

function createBaseSettingsChange_RestrictionChange(): SettingsChange_RestrictionChange {
  return { feature: 0, newRestriction: 0 };
}

export const SettingsChange_RestrictionChange: MessageFns<SettingsChange_RestrictionChange> = {
  encode(message: SettingsChange_RestrictionChange, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.feature !== 0) {
      writer.uint32(8).int32(message.feature);
    }
    if (message.newRestriction !== 0) {
      writer.uint32(16).int32(message.newRestriction);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SettingsChange_RestrictionChange {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSettingsChange_RestrictionChange();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.feature = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.newRestriction = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SettingsChange_RestrictionChange {
    return {
      feature: isSet(object.feature) ? settingsChange_RestrictionChange_FeatureFromJSON(object.feature) : 0,
      newRestriction: isSet(object.newRestriction)
        ? settingsChange_RestrictionChange_RestrictionFromJSON(object.newRestriction)
        : 0,
    };
  },

  toJSON(message: SettingsChange_RestrictionChange): unknown {
    const obj: any = {};
    if (message.feature !== 0) {
      obj.feature = settingsChange_RestrictionChange_FeatureToJSON(message.feature);
    }
    if (message.newRestriction !== 0) {
      obj.newRestriction = settingsChange_RestrictionChange_RestrictionToJSON(message.newRestriction);
    }
    return obj;
  },

  create(base?: DeepPartial<SettingsChange_RestrictionChange>): SettingsChange_RestrictionChange {
    return SettingsChange_RestrictionChange.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SettingsChange_RestrictionChange>): SettingsChange_RestrictionChange {
    const message = createBaseSettingsChange_RestrictionChange();
    message.feature = object.feature ?? 0;
    message.newRestriction = object.newRestriction ?? 0;
    return message;
  },
};

function createBaseAppliedLabelChange(): AppliedLabelChange {
  return { changes: [] };
}

export const AppliedLabelChange: MessageFns<AppliedLabelChange> = {
  encode(message: AppliedLabelChange, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.changes) {
      AppliedLabelChange_AppliedLabelChangeDetail.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AppliedLabelChange {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAppliedLabelChange();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.changes.push(AppliedLabelChange_AppliedLabelChangeDetail.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AppliedLabelChange {
    return {
      changes: globalThis.Array.isArray(object?.changes)
        ? object.changes.map((e: any) => AppliedLabelChange_AppliedLabelChangeDetail.fromJSON(e))
        : [],
    };
  },

  toJSON(message: AppliedLabelChange): unknown {
    const obj: any = {};
    if (message.changes?.length) {
      obj.changes = message.changes.map((e) => AppliedLabelChange_AppliedLabelChangeDetail.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<AppliedLabelChange>): AppliedLabelChange {
    return AppliedLabelChange.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AppliedLabelChange>): AppliedLabelChange {
    const message = createBaseAppliedLabelChange();
    message.changes = object.changes?.map((e) => AppliedLabelChange_AppliedLabelChangeDetail.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAppliedLabelChange_AppliedLabelChangeDetail(): AppliedLabelChange_AppliedLabelChangeDetail {
  return { label: "", types: [], title: "", fieldChanges: [] };
}

export const AppliedLabelChange_AppliedLabelChangeDetail: MessageFns<AppliedLabelChange_AppliedLabelChangeDetail> = {
  encode(
    message: AppliedLabelChange_AppliedLabelChangeDetail,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.label !== "") {
      writer.uint32(10).string(message.label);
    }
    writer.uint32(18).fork();
    for (const v of message.types) {
      writer.int32(v);
    }
    writer.join();
    if (message.title !== "") {
      writer.uint32(26).string(message.title);
    }
    for (const v of message.fieldChanges) {
      AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AppliedLabelChange_AppliedLabelChangeDetail {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAppliedLabelChange_AppliedLabelChangeDetail();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.label = reader.string();
          continue;
        case 2:
          if (tag === 16) {
            message.types.push(reader.int32() as any);

            continue;
          }

          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.types.push(reader.int32() as any);
            }

            continue;
          }

          break;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.title = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.fieldChanges.push(
            AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange.decode(reader, reader.uint32()),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AppliedLabelChange_AppliedLabelChangeDetail {
    return {
      label: isSet(object.label) ? globalThis.String(object.label) : "",
      types: globalThis.Array.isArray(object?.types)
        ? object.types.map((e: any) => appliedLabelChange_AppliedLabelChangeDetail_TypeFromJSON(e))
        : [],
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      fieldChanges: globalThis.Array.isArray(object?.fieldChanges)
        ? object.fieldChanges.map((e: any) => AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange.fromJSON(e))
        : [],
    };
  },

  toJSON(message: AppliedLabelChange_AppliedLabelChangeDetail): unknown {
    const obj: any = {};
    if (message.label !== "") {
      obj.label = message.label;
    }
    if (message.types?.length) {
      obj.types = message.types.map((e) => appliedLabelChange_AppliedLabelChangeDetail_TypeToJSON(e));
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.fieldChanges?.length) {
      obj.fieldChanges = message.fieldChanges.map((e) =>
        AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange.toJSON(e)
      );
    }
    return obj;
  },

  create(base?: DeepPartial<AppliedLabelChange_AppliedLabelChangeDetail>): AppliedLabelChange_AppliedLabelChangeDetail {
    return AppliedLabelChange_AppliedLabelChangeDetail.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<AppliedLabelChange_AppliedLabelChangeDetail>,
  ): AppliedLabelChange_AppliedLabelChangeDetail {
    const message = createBaseAppliedLabelChange_AppliedLabelChangeDetail();
    message.label = object.label ?? "";
    message.types = object.types?.map((e) => e) || [];
    message.title = object.title ?? "";
    message.fieldChanges =
      object.fieldChanges?.map((e) => AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange.fromPartial(e)) ||
      [];
    return message;
  },
};

function createBaseAppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange(): AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange {
  return { fieldId: undefined, oldValue: undefined, newValue: undefined, displayName: undefined };
}

export const AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange: MessageFns<
  AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange
> = {
  encode(
    message: AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.fieldId !== undefined) {
      writer.uint32(10).string(message.fieldId);
    }
    if (message.oldValue !== undefined) {
      AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue.encode(
        message.oldValue,
        writer.uint32(18).fork(),
      ).join();
    }
    if (message.newValue !== undefined) {
      AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue.encode(
        message.newValue,
        writer.uint32(26).fork(),
      ).join();
    }
    if (message.displayName !== undefined) {
      writer.uint32(34).string(message.displayName);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.fieldId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.oldValue = AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.newValue = AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.displayName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange {
    return {
      fieldId: isSet(object.fieldId) ? globalThis.String(object.fieldId) : undefined,
      oldValue: isSet(object.oldValue)
        ? AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue.fromJSON(object.oldValue)
        : undefined,
      newValue: isSet(object.newValue)
        ? AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue.fromJSON(object.newValue)
        : undefined,
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : undefined,
    };
  },

  toJSON(message: AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange): unknown {
    const obj: any = {};
    if (message.fieldId !== undefined) {
      obj.fieldId = message.fieldId;
    }
    if (message.oldValue !== undefined) {
      obj.oldValue = AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue.toJSON(message.oldValue);
    }
    if (message.newValue !== undefined) {
      obj.newValue = AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue.toJSON(message.newValue);
    }
    if (message.displayName !== undefined) {
      obj.displayName = message.displayName;
    }
    return obj;
  },

  create(
    base?: DeepPartial<AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange>,
  ): AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange {
    return AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange>,
  ): AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange {
    const message = createBaseAppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange();
    message.fieldId = object.fieldId ?? undefined;
    message.oldValue = (object.oldValue !== undefined && object.oldValue !== null)
      ? AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue.fromPartial(object.oldValue)
      : undefined;
    message.newValue = (object.newValue !== undefined && object.newValue !== null)
      ? AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue.fromPartial(object.newValue)
      : undefined;
    message.displayName = object.displayName ?? undefined;
    return message;
  },
};

function createBaseAppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue(): AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue {
  return {
    text: undefined,
    textList: undefined,
    selection: undefined,
    selectionList: undefined,
    integer: undefined,
    user: undefined,
    userList: undefined,
    date: undefined,
  };
}

export const AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue: MessageFns<
  AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue
> = {
  encode(
    message: AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.text !== undefined) {
      AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_Text.encode(
        message.text,
        writer.uint32(10).fork(),
      ).join();
    }
    if (message.textList !== undefined) {
      AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_TextList.encode(
        message.textList,
        writer.uint32(26).fork(),
      ).join();
    }
    if (message.selection !== undefined) {
      AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_Selection.encode(
        message.selection,
        writer.uint32(34).fork(),
      ).join();
    }
    if (message.selectionList !== undefined) {
      AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_SelectionList.encode(
        message.selectionList,
        writer.uint32(42).fork(),
      ).join();
    }
    if (message.integer !== undefined) {
      AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_Integer.encode(
        message.integer,
        writer.uint32(50).fork(),
      ).join();
    }
    if (message.user !== undefined) {
      AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_SingleUser.encode(
        message.user,
        writer.uint32(58).fork(),
      ).join();
    }
    if (message.userList !== undefined) {
      AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_UserList.encode(
        message.userList,
        writer.uint32(66).fork(),
      ).join();
    }
    if (message.date !== undefined) {
      AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_DateMessage.encode(
        message.date,
        writer.uint32(74).fork(),
      ).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.text = AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_Text.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.textList = AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_TextList.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.selection = AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_Selection.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.selectionList = AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_SelectionList
            .decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.integer = AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_Integer.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.user = AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_SingleUser.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.userList = AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_UserList.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.date = AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_DateMessage.decode(
            reader,
            reader.uint32(),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue {
    return {
      text: isSet(object.text)
        ? AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_Text.fromJSON(object.text)
        : undefined,
      textList: isSet(object.textList)
        ? AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_TextList.fromJSON(object.textList)
        : undefined,
      selection: isSet(object.selection)
        ? AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_Selection.fromJSON(object.selection)
        : undefined,
      selectionList: isSet(object.selectionList)
        ? AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_SelectionList.fromJSON(
          object.selectionList,
        )
        : undefined,
      integer: isSet(object.integer)
        ? AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_Integer.fromJSON(object.integer)
        : undefined,
      user: isSet(object.user)
        ? AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_SingleUser.fromJSON(object.user)
        : undefined,
      userList: isSet(object.userList)
        ? AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_UserList.fromJSON(object.userList)
        : undefined,
      date: isSet(object.date)
        ? AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_DateMessage.fromJSON(object.date)
        : undefined,
    };
  },

  toJSON(message: AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue): unknown {
    const obj: any = {};
    if (message.text !== undefined) {
      obj.text = AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_Text.toJSON(message.text);
    }
    if (message.textList !== undefined) {
      obj.textList = AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_TextList.toJSON(
        message.textList,
      );
    }
    if (message.selection !== undefined) {
      obj.selection = AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_Selection.toJSON(
        message.selection,
      );
    }
    if (message.selectionList !== undefined) {
      obj.selectionList = AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_SelectionList.toJSON(
        message.selectionList,
      );
    }
    if (message.integer !== undefined) {
      obj.integer = AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_Integer.toJSON(
        message.integer,
      );
    }
    if (message.user !== undefined) {
      obj.user = AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_SingleUser.toJSON(
        message.user,
      );
    }
    if (message.userList !== undefined) {
      obj.userList = AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_UserList.toJSON(
        message.userList,
      );
    }
    if (message.date !== undefined) {
      obj.date = AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_DateMessage.toJSON(
        message.date,
      );
    }
    return obj;
  },

  create(
    base?: DeepPartial<AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue>,
  ): AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue {
    return AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue>,
  ): AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue {
    const message = createBaseAppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue();
    message.text = (object.text !== undefined && object.text !== null)
      ? AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_Text.fromPartial(object.text)
      : undefined;
    message.textList = (object.textList !== undefined && object.textList !== null)
      ? AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_TextList.fromPartial(object.textList)
      : undefined;
    message.selection = (object.selection !== undefined && object.selection !== null)
      ? AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_Selection.fromPartial(object.selection)
      : undefined;
    message.selectionList = (object.selectionList !== undefined && object.selectionList !== null)
      ? AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_SelectionList.fromPartial(
        object.selectionList,
      )
      : undefined;
    message.integer = (object.integer !== undefined && object.integer !== null)
      ? AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_Integer.fromPartial(object.integer)
      : undefined;
    message.user = (object.user !== undefined && object.user !== null)
      ? AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_SingleUser.fromPartial(object.user)
      : undefined;
    message.userList = (object.userList !== undefined && object.userList !== null)
      ? AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_UserList.fromPartial(object.userList)
      : undefined;
    message.date = (object.date !== undefined && object.date !== null)
      ? AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_DateMessage.fromPartial(object.date)
      : undefined;
    return message;
  },
};

function createBaseAppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_Text(): AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_Text {
  return { value: undefined };
}

export const AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_Text: MessageFns<
  AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_Text
> = {
  encode(
    message: AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_Text,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.value !== undefined) {
      writer.uint32(10).string(message.value);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_Text {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_Text();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_Text {
    return { value: isSet(object.value) ? globalThis.String(object.value) : undefined };
  },

  toJSON(message: AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_Text): unknown {
    const obj: any = {};
    if (message.value !== undefined) {
      obj.value = message.value;
    }
    return obj;
  },

  create(
    base?: DeepPartial<AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_Text>,
  ): AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_Text {
    return AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_Text.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_Text>,
  ): AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_Text {
    const message = createBaseAppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_Text();
    message.value = object.value ?? undefined;
    return message;
  },
};

function createBaseAppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_TextList(): AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_TextList {
  return { values: [] };
}

export const AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_TextList: MessageFns<
  AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_TextList
> = {
  encode(
    message: AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_TextList,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    for (const v of message.values) {
      AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_Text.encode(v!, writer.uint32(10).fork())
        .join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_TextList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_TextList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.values.push(
            AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_Text.decode(
              reader,
              reader.uint32(),
            ),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_TextList {
    return {
      values: globalThis.Array.isArray(object?.values)
        ? object.values.map((e: any) =>
          AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_Text.fromJSON(e)
        )
        : [],
    };
  },

  toJSON(message: AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_TextList): unknown {
    const obj: any = {};
    if (message.values?.length) {
      obj.values = message.values.map((e) =>
        AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_Text.toJSON(e)
      );
    }
    return obj;
  },

  create(
    base?: DeepPartial<AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_TextList>,
  ): AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_TextList {
    return AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_TextList.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_TextList>,
  ): AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_TextList {
    const message = createBaseAppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_TextList();
    message.values =
      object.values?.map((e) =>
        AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_Text.fromPartial(e)
      ) || [];
    return message;
  },
};

function createBaseAppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_Selection(): AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_Selection {
  return { value: undefined, displayName: undefined };
}

export const AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_Selection: MessageFns<
  AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_Selection
> = {
  encode(
    message: AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_Selection,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.value !== undefined) {
      writer.uint32(10).string(message.value);
    }
    if (message.displayName !== undefined) {
      writer.uint32(18).string(message.displayName);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_Selection {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_Selection();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.value = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.displayName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_Selection {
    return {
      value: isSet(object.value) ? globalThis.String(object.value) : undefined,
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : undefined,
    };
  },

  toJSON(message: AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_Selection): unknown {
    const obj: any = {};
    if (message.value !== undefined) {
      obj.value = message.value;
    }
    if (message.displayName !== undefined) {
      obj.displayName = message.displayName;
    }
    return obj;
  },

  create(
    base?: DeepPartial<AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_Selection>,
  ): AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_Selection {
    return AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_Selection.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_Selection>,
  ): AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_Selection {
    const message = createBaseAppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_Selection();
    message.value = object.value ?? undefined;
    message.displayName = object.displayName ?? undefined;
    return message;
  },
};

function createBaseAppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_SelectionList(): AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_SelectionList {
  return { values: [] };
}

export const AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_SelectionList: MessageFns<
  AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_SelectionList
> = {
  encode(
    message: AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_SelectionList,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    for (const v of message.values) {
      AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_Selection.encode(
        v!,
        writer.uint32(10).fork(),
      ).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_SelectionList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_SelectionList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.values.push(
            AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_Selection.decode(
              reader,
              reader.uint32(),
            ),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_SelectionList {
    return {
      values: globalThis.Array.isArray(object?.values)
        ? object.values.map((e: any) =>
          AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_Selection.fromJSON(e)
        )
        : [],
    };
  },

  toJSON(message: AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_SelectionList): unknown {
    const obj: any = {};
    if (message.values?.length) {
      obj.values = message.values.map((e) =>
        AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_Selection.toJSON(e)
      );
    }
    return obj;
  },

  create(
    base?: DeepPartial<AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_SelectionList>,
  ): AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_SelectionList {
    return AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_SelectionList.fromPartial(
      base ?? {},
    );
  },
  fromPartial(
    object: DeepPartial<AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_SelectionList>,
  ): AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_SelectionList {
    const message = createBaseAppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_SelectionList();
    message.values =
      object.values?.map((e) =>
        AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_Selection.fromPartial(e)
      ) || [];
    return message;
  },
};

function createBaseAppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_Integer(): AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_Integer {
  return { value: undefined };
}

export const AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_Integer: MessageFns<
  AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_Integer
> = {
  encode(
    message: AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_Integer,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.value !== undefined) {
      writer.uint32(8).int64(message.value.toString());
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_Integer {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_Integer();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.value = Long.fromString(reader.int64().toString());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_Integer {
    return { value: isSet(object.value) ? Long.fromValue(object.value) : undefined };
  },

  toJSON(message: AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_Integer): unknown {
    const obj: any = {};
    if (message.value !== undefined) {
      obj.value = (message.value || Long.ZERO).toString();
    }
    return obj;
  },

  create(
    base?: DeepPartial<AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_Integer>,
  ): AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_Integer {
    return AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_Integer.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_Integer>,
  ): AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_Integer {
    const message = createBaseAppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_Integer();
    message.value = (object.value !== undefined && object.value !== null) ? Long.fromValue(object.value) : undefined;
    return message;
  },
};

function createBaseAppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_SingleUser(): AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_SingleUser {
  return { value: undefined };
}

export const AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_SingleUser: MessageFns<
  AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_SingleUser
> = {
  encode(
    message: AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_SingleUser,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.value !== undefined) {
      writer.uint32(10).string(message.value);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_SingleUser {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_SingleUser();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_SingleUser {
    return { value: isSet(object.value) ? globalThis.String(object.value) : undefined };
  },

  toJSON(message: AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_SingleUser): unknown {
    const obj: any = {};
    if (message.value !== undefined) {
      obj.value = message.value;
    }
    return obj;
  },

  create(
    base?: DeepPartial<AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_SingleUser>,
  ): AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_SingleUser {
    return AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_SingleUser.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_SingleUser>,
  ): AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_SingleUser {
    const message = createBaseAppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_SingleUser();
    message.value = object.value ?? undefined;
    return message;
  },
};

function createBaseAppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_UserList(): AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_UserList {
  return { values: [] };
}

export const AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_UserList: MessageFns<
  AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_UserList
> = {
  encode(
    message: AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_UserList,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    for (const v of message.values) {
      AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_SingleUser.encode(
        v!,
        writer.uint32(10).fork(),
      ).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_UserList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_UserList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.values.push(
            AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_SingleUser.decode(
              reader,
              reader.uint32(),
            ),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_UserList {
    return {
      values: globalThis.Array.isArray(object?.values)
        ? object.values.map((e: any) =>
          AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_SingleUser.fromJSON(e)
        )
        : [],
    };
  },

  toJSON(message: AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_UserList): unknown {
    const obj: any = {};
    if (message.values?.length) {
      obj.values = message.values.map((e) =>
        AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_SingleUser.toJSON(e)
      );
    }
    return obj;
  },

  create(
    base?: DeepPartial<AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_UserList>,
  ): AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_UserList {
    return AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_UserList.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_UserList>,
  ): AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_UserList {
    const message = createBaseAppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_UserList();
    message.values =
      object.values?.map((e) =>
        AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_SingleUser.fromPartial(e)
      ) || [];
    return message;
  },
};

function createBaseAppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_DateMessage(): AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_DateMessage {
  return { value: undefined };
}

export const AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_DateMessage: MessageFns<
  AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_DateMessage
> = {
  encode(
    message: AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_DateMessage,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.value !== undefined) {
      Timestamp.encode(toTimestamp(message.value), writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_DateMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_DateMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.value = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_DateMessage {
    return { value: isSet(object.value) ? fromJsonTimestamp(object.value) : undefined };
  },

  toJSON(message: AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_DateMessage): unknown {
    const obj: any = {};
    if (message.value !== undefined) {
      obj.value = message.value.toISOString();
    }
    return obj;
  },

  create(
    base?: DeepPartial<AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_DateMessage>,
  ): AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_DateMessage {
    return AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_DateMessage.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_DateMessage>,
  ): AppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_DateMessage {
    const message = createBaseAppliedLabelChange_AppliedLabelChangeDetail_FieldValueChange_FieldValue_DateMessage();
    message.value = object.value ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
