// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/apps/drive/labels/v2beta/exception_detail.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.apps.drive.labels.v2beta";

/**
 * Every ExceptionType maps to one and only one Exception class. This allows
 * internal clients to identify the exact server exception that caused the
 * error for debugging and logging purposes.
 * Add new ExceptionTypes to EXCEPTION_TYPE_TO_ERROR_CODE_MAP in
 * j/c/g/apps/boq/metadata/model/service/exceptions/CategoryExceptionHelper
 */
export enum ExceptionType {
  /** EXCEPTION_TYPE_UNSPECIFIED - Unknown ExceptionType. */
  EXCEPTION_TYPE_UNSPECIFIED = 0,
  /** FIELD_REQUIRED - The required field is missing. */
  FIELD_REQUIRED = 1,
  /** METAMODEL_ALREADY_EXISTS - Unable to create a metamodel with the given ID because it already exists. */
  METAMODEL_ALREADY_EXISTS = 2,
  /** METAMODEL_NOT_FOUND - Metamodel was not found */
  METAMODEL_NOT_FOUND = 3,
  /** ILLEGAL_METAMODEL_STATE_TRANSITION - Metamodel state transition isn't allowed. */
  ILLEGAL_METAMODEL_STATE_TRANSITION = 4,
  /** INVALID_METAMODEL_DEPRECATION_POLICY - Metamodel deprecation policy is invalid. */
  INVALID_METAMODEL_DEPRECATION_POLICY = 5,
  /** METAMODEL_DELETION_DENIED_UNTIL - Cannot delete a metamodel due to the pending deprecation policy. */
  METAMODEL_DELETION_DENIED_UNTIL = 6,
  /** INVALID_FIELD - A Field value is invalid. */
  INVALID_FIELD = 7,
  /** METAMODEL_PRECONDITION_FAILED - Precondition failed when updating a metamodel */
  METAMODEL_PRECONDITION_FAILED = 8,
  /** DUPLICATE_FIELD_KEY - Multiple fields had the same key. */
  DUPLICATE_FIELD_KEY = 9,
  /**
   * ILLEGAL_FIELD_REMOVAL - Removing a field from a Metamodel (e.g. a published Metamodel) is not
   * permitted.
   */
  ILLEGAL_FIELD_REMOVAL = 10,
  /** ILLEGAL_FIELD_OPTIONS_FOR_FIELD - Cannot specify field options for a different field type. */
  ILLEGAL_FIELD_OPTIONS_FOR_FIELD = 11,
  /** UNSUPPORTED_CHANGE_TO_PUBLISHED_METAMODEL - Some changes are not supported */
  UNSUPPORTED_CHANGE_TO_PUBLISHED_METAMODEL = 12,
  /** ILLEGAL_METAMODEL_STATE_TRANSITION_IN_UPDATE - Cannot change the metamodel state in an update */
  ILLEGAL_METAMODEL_STATE_TRANSITION_IN_UPDATE = 13,
  /** PAGE_TOKEN_EXPIRED - The page token is expired */
  PAGE_TOKEN_EXPIRED = 14,
  /** NOT_AUTHORIZED - The user is not authorized to make the request. */
  NOT_AUTHORIZED = 15,
  /** ILLEGAL_FIELD_STATE_TRANSITION - Illegal field state transition */
  ILLEGAL_FIELD_STATE_TRANSITION = 16,
  /** ILLEGAL_CHOICE_SET_OPTION_STATE_TRANSITION - Illegal choice set option state transition */
  ILLEGAL_CHOICE_SET_OPTION_STATE_TRANSITION = 17,
  /** INVALID_CHOICE_SET_OPTIONS - Invalid choice set options */
  INVALID_CHOICE_SET_OPTIONS = 18,
  /** INVALID_FIELD_KEY - Invalid field key */
  INVALID_FIELD_KEY = 19,
  /** INVALID_FIELD_PROPERTY_RANGE - A specified property on a field is outside the allowed range. */
  INVALID_FIELD_PROPERTY_RANGE = 20,
  /**
   * INVALID_LOCALIZED_STRING - A localized string wasn't valid. This may be because the locale is invalid,
   * its missing a default value, or the translation is empty for a set locale.
   */
  INVALID_LOCALIZED_STRING = 21,
  /** ILLEGAL_CHANGE_TO_PUBLISHED_FIELD - cannot change a property on a published field */
  ILLEGAL_CHANGE_TO_PUBLISHED_FIELD = 22,
  /** INVALID_FIELD_UPDATE_NOT_INCLUSIVE - A field update is not inclusive of the previous value */
  INVALID_FIELD_UPDATE_NOT_INCLUSIVE = 23,
  /** INVALID_CHOICE_SET_STATE - A field update is not inclusive of the previous value */
  INVALID_CHOICE_SET_STATE = 24,
  /** INTERNAL_SERVER_ERROR - An unknown error occurred */
  INTERNAL_SERVER_ERROR = 500,
  UNRECOGNIZED = -1,
}

export function exceptionTypeFromJSON(object: any): ExceptionType {
  switch (object) {
    case 0:
    case "EXCEPTION_TYPE_UNSPECIFIED":
      return ExceptionType.EXCEPTION_TYPE_UNSPECIFIED;
    case 1:
    case "FIELD_REQUIRED":
      return ExceptionType.FIELD_REQUIRED;
    case 2:
    case "METAMODEL_ALREADY_EXISTS":
      return ExceptionType.METAMODEL_ALREADY_EXISTS;
    case 3:
    case "METAMODEL_NOT_FOUND":
      return ExceptionType.METAMODEL_NOT_FOUND;
    case 4:
    case "ILLEGAL_METAMODEL_STATE_TRANSITION":
      return ExceptionType.ILLEGAL_METAMODEL_STATE_TRANSITION;
    case 5:
    case "INVALID_METAMODEL_DEPRECATION_POLICY":
      return ExceptionType.INVALID_METAMODEL_DEPRECATION_POLICY;
    case 6:
    case "METAMODEL_DELETION_DENIED_UNTIL":
      return ExceptionType.METAMODEL_DELETION_DENIED_UNTIL;
    case 7:
    case "INVALID_FIELD":
      return ExceptionType.INVALID_FIELD;
    case 8:
    case "METAMODEL_PRECONDITION_FAILED":
      return ExceptionType.METAMODEL_PRECONDITION_FAILED;
    case 9:
    case "DUPLICATE_FIELD_KEY":
      return ExceptionType.DUPLICATE_FIELD_KEY;
    case 10:
    case "ILLEGAL_FIELD_REMOVAL":
      return ExceptionType.ILLEGAL_FIELD_REMOVAL;
    case 11:
    case "ILLEGAL_FIELD_OPTIONS_FOR_FIELD":
      return ExceptionType.ILLEGAL_FIELD_OPTIONS_FOR_FIELD;
    case 12:
    case "UNSUPPORTED_CHANGE_TO_PUBLISHED_METAMODEL":
      return ExceptionType.UNSUPPORTED_CHANGE_TO_PUBLISHED_METAMODEL;
    case 13:
    case "ILLEGAL_METAMODEL_STATE_TRANSITION_IN_UPDATE":
      return ExceptionType.ILLEGAL_METAMODEL_STATE_TRANSITION_IN_UPDATE;
    case 14:
    case "PAGE_TOKEN_EXPIRED":
      return ExceptionType.PAGE_TOKEN_EXPIRED;
    case 15:
    case "NOT_AUTHORIZED":
      return ExceptionType.NOT_AUTHORIZED;
    case 16:
    case "ILLEGAL_FIELD_STATE_TRANSITION":
      return ExceptionType.ILLEGAL_FIELD_STATE_TRANSITION;
    case 17:
    case "ILLEGAL_CHOICE_SET_OPTION_STATE_TRANSITION":
      return ExceptionType.ILLEGAL_CHOICE_SET_OPTION_STATE_TRANSITION;
    case 18:
    case "INVALID_CHOICE_SET_OPTIONS":
      return ExceptionType.INVALID_CHOICE_SET_OPTIONS;
    case 19:
    case "INVALID_FIELD_KEY":
      return ExceptionType.INVALID_FIELD_KEY;
    case 20:
    case "INVALID_FIELD_PROPERTY_RANGE":
      return ExceptionType.INVALID_FIELD_PROPERTY_RANGE;
    case 21:
    case "INVALID_LOCALIZED_STRING":
      return ExceptionType.INVALID_LOCALIZED_STRING;
    case 22:
    case "ILLEGAL_CHANGE_TO_PUBLISHED_FIELD":
      return ExceptionType.ILLEGAL_CHANGE_TO_PUBLISHED_FIELD;
    case 23:
    case "INVALID_FIELD_UPDATE_NOT_INCLUSIVE":
      return ExceptionType.INVALID_FIELD_UPDATE_NOT_INCLUSIVE;
    case 24:
    case "INVALID_CHOICE_SET_STATE":
      return ExceptionType.INVALID_CHOICE_SET_STATE;
    case 500:
    case "INTERNAL_SERVER_ERROR":
      return ExceptionType.INTERNAL_SERVER_ERROR;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ExceptionType.UNRECOGNIZED;
  }
}

export function exceptionTypeToJSON(object: ExceptionType): string {
  switch (object) {
    case ExceptionType.EXCEPTION_TYPE_UNSPECIFIED:
      return "EXCEPTION_TYPE_UNSPECIFIED";
    case ExceptionType.FIELD_REQUIRED:
      return "FIELD_REQUIRED";
    case ExceptionType.METAMODEL_ALREADY_EXISTS:
      return "METAMODEL_ALREADY_EXISTS";
    case ExceptionType.METAMODEL_NOT_FOUND:
      return "METAMODEL_NOT_FOUND";
    case ExceptionType.ILLEGAL_METAMODEL_STATE_TRANSITION:
      return "ILLEGAL_METAMODEL_STATE_TRANSITION";
    case ExceptionType.INVALID_METAMODEL_DEPRECATION_POLICY:
      return "INVALID_METAMODEL_DEPRECATION_POLICY";
    case ExceptionType.METAMODEL_DELETION_DENIED_UNTIL:
      return "METAMODEL_DELETION_DENIED_UNTIL";
    case ExceptionType.INVALID_FIELD:
      return "INVALID_FIELD";
    case ExceptionType.METAMODEL_PRECONDITION_FAILED:
      return "METAMODEL_PRECONDITION_FAILED";
    case ExceptionType.DUPLICATE_FIELD_KEY:
      return "DUPLICATE_FIELD_KEY";
    case ExceptionType.ILLEGAL_FIELD_REMOVAL:
      return "ILLEGAL_FIELD_REMOVAL";
    case ExceptionType.ILLEGAL_FIELD_OPTIONS_FOR_FIELD:
      return "ILLEGAL_FIELD_OPTIONS_FOR_FIELD";
    case ExceptionType.UNSUPPORTED_CHANGE_TO_PUBLISHED_METAMODEL:
      return "UNSUPPORTED_CHANGE_TO_PUBLISHED_METAMODEL";
    case ExceptionType.ILLEGAL_METAMODEL_STATE_TRANSITION_IN_UPDATE:
      return "ILLEGAL_METAMODEL_STATE_TRANSITION_IN_UPDATE";
    case ExceptionType.PAGE_TOKEN_EXPIRED:
      return "PAGE_TOKEN_EXPIRED";
    case ExceptionType.NOT_AUTHORIZED:
      return "NOT_AUTHORIZED";
    case ExceptionType.ILLEGAL_FIELD_STATE_TRANSITION:
      return "ILLEGAL_FIELD_STATE_TRANSITION";
    case ExceptionType.ILLEGAL_CHOICE_SET_OPTION_STATE_TRANSITION:
      return "ILLEGAL_CHOICE_SET_OPTION_STATE_TRANSITION";
    case ExceptionType.INVALID_CHOICE_SET_OPTIONS:
      return "INVALID_CHOICE_SET_OPTIONS";
    case ExceptionType.INVALID_FIELD_KEY:
      return "INVALID_FIELD_KEY";
    case ExceptionType.INVALID_FIELD_PROPERTY_RANGE:
      return "INVALID_FIELD_PROPERTY_RANGE";
    case ExceptionType.INVALID_LOCALIZED_STRING:
      return "INVALID_LOCALIZED_STRING";
    case ExceptionType.ILLEGAL_CHANGE_TO_PUBLISHED_FIELD:
      return "ILLEGAL_CHANGE_TO_PUBLISHED_FIELD";
    case ExceptionType.INVALID_FIELD_UPDATE_NOT_INCLUSIVE:
      return "INVALID_FIELD_UPDATE_NOT_INCLUSIVE";
    case ExceptionType.INVALID_CHOICE_SET_STATE:
      return "INVALID_CHOICE_SET_STATE";
    case ExceptionType.INTERNAL_SERVER_ERROR:
      return "INTERNAL_SERVER_ERROR";
    case ExceptionType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Exception detail. */
export interface ExceptionDetail {
  /** The type of exception that occurred. Required. */
  errorType: ExceptionType;
}

function createBaseExceptionDetail(): ExceptionDetail {
  return { errorType: 0 };
}

export const ExceptionDetail: MessageFns<ExceptionDetail> = {
  encode(message: ExceptionDetail, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.errorType !== 0) {
      writer.uint32(8).int32(message.errorType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExceptionDetail {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExceptionDetail();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.errorType = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExceptionDetail {
    return { errorType: isSet(object.errorType) ? exceptionTypeFromJSON(object.errorType) : 0 };
  },

  toJSON(message: ExceptionDetail): unknown {
    const obj: any = {};
    if (message.errorType !== 0) {
      obj.errorType = exceptionTypeToJSON(message.errorType);
    }
    return obj;
  },

  create(base?: DeepPartial<ExceptionDetail>): ExceptionDetail {
    return ExceptionDetail.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExceptionDetail>): ExceptionDetail {
    const message = createBaseExceptionDetail();
    message.errorType = object.errorType ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
