// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/apps/drive/labels/v2beta/error_details.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.apps.drive.labels.v2beta";

/**
 * Describes violations in a request to create or update a Label or its
 * Fields.
 */
export interface InvalidArgument {
  /** Describes all violations in a client request. */
  fieldViolations: InvalidArgument_FieldViolation[];
}

/** Describes the Field in which the violation occurred. */
export interface InvalidArgument_FieldViolation {
  /**
   * The path to the field where this violation occurred. This path is
   * specified using `FieldMask` format:
   * https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask
   */
  field: string;
  /** The detailed reason for this FieldViolation. */
  reason: InvalidArgument_FieldViolation_Reason;
  /**
   * A message that describes the violation. This message is intended to
   * be shown to end users, and is localized into the requesting user's
   * preferred language.
   */
  displayMessage: string;
}

/** Possible reasons a field is invalid. */
export enum InvalidArgument_FieldViolation_Reason {
  /** REASON_UNSPECIFIED - Unknown reason. */
  REASON_UNSPECIFIED = 0,
  /** FIELD_REQUIRED - The referenced field is required. */
  FIELD_REQUIRED = 1,
  /** INVALID_VALUE - The referenced value was invalid. */
  INVALID_VALUE = 2,
  /** VALUE_OUT_OF_RANGE - The specified numeric value is out of the allowed range. */
  VALUE_OUT_OF_RANGE = 3,
  /** STRING_VALUE_TOO_LONG - The specified string value was too long. */
  STRING_VALUE_TOO_LONG = 4,
  /** MAX_ENTRIES_EXCEEDED - The number of entries exceeded the maximum. */
  MAX_ENTRIES_EXCEEDED = 5,
  /** FIELD_NOT_FOUND - The specified field is not found in the Label. */
  FIELD_NOT_FOUND = 6,
  /** CHOICE_NOT_FOUND - The specified choice is not found in the Field. */
  CHOICE_NOT_FOUND = 7,
  UNRECOGNIZED = -1,
}

export function invalidArgument_FieldViolation_ReasonFromJSON(object: any): InvalidArgument_FieldViolation_Reason {
  switch (object) {
    case 0:
    case "REASON_UNSPECIFIED":
      return InvalidArgument_FieldViolation_Reason.REASON_UNSPECIFIED;
    case 1:
    case "FIELD_REQUIRED":
      return InvalidArgument_FieldViolation_Reason.FIELD_REQUIRED;
    case 2:
    case "INVALID_VALUE":
      return InvalidArgument_FieldViolation_Reason.INVALID_VALUE;
    case 3:
    case "VALUE_OUT_OF_RANGE":
      return InvalidArgument_FieldViolation_Reason.VALUE_OUT_OF_RANGE;
    case 4:
    case "STRING_VALUE_TOO_LONG":
      return InvalidArgument_FieldViolation_Reason.STRING_VALUE_TOO_LONG;
    case 5:
    case "MAX_ENTRIES_EXCEEDED":
      return InvalidArgument_FieldViolation_Reason.MAX_ENTRIES_EXCEEDED;
    case 6:
    case "FIELD_NOT_FOUND":
      return InvalidArgument_FieldViolation_Reason.FIELD_NOT_FOUND;
    case 7:
    case "CHOICE_NOT_FOUND":
      return InvalidArgument_FieldViolation_Reason.CHOICE_NOT_FOUND;
    case -1:
    case "UNRECOGNIZED":
    default:
      return InvalidArgument_FieldViolation_Reason.UNRECOGNIZED;
  }
}

export function invalidArgument_FieldViolation_ReasonToJSON(object: InvalidArgument_FieldViolation_Reason): string {
  switch (object) {
    case InvalidArgument_FieldViolation_Reason.REASON_UNSPECIFIED:
      return "REASON_UNSPECIFIED";
    case InvalidArgument_FieldViolation_Reason.FIELD_REQUIRED:
      return "FIELD_REQUIRED";
    case InvalidArgument_FieldViolation_Reason.INVALID_VALUE:
      return "INVALID_VALUE";
    case InvalidArgument_FieldViolation_Reason.VALUE_OUT_OF_RANGE:
      return "VALUE_OUT_OF_RANGE";
    case InvalidArgument_FieldViolation_Reason.STRING_VALUE_TOO_LONG:
      return "STRING_VALUE_TOO_LONG";
    case InvalidArgument_FieldViolation_Reason.MAX_ENTRIES_EXCEEDED:
      return "MAX_ENTRIES_EXCEEDED";
    case InvalidArgument_FieldViolation_Reason.FIELD_NOT_FOUND:
      return "FIELD_NOT_FOUND";
    case InvalidArgument_FieldViolation_Reason.CHOICE_NOT_FOUND:
      return "CHOICE_NOT_FOUND";
    case InvalidArgument_FieldViolation_Reason.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Describes what preconditions have failed. */
export interface PreconditionFailure {
  /** Describes all violations in a client request. */
  violation: PreconditionFailure_Violation[];
}

/** Specific failure reason. */
export interface PreconditionFailure_Violation {
  /**
   * The path to the field where this violation occurred. This path is
   * specified using `FieldMask` format:
   * https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask
   */
  field: string;
  /** The type of this violation. */
  reason: PreconditionFailure_Violation_Reason;
  /**
   * A message that describes the violation. This message is intended to
   * be shown to end users, and is localized into the requesting user's
   * preferred language.
   */
  displayMessage: string;
}

/** The possible reasons a the violation occurred. */
export enum PreconditionFailure_Violation_Reason {
  /** REASON_UNSPECIFIED - Unknown violation type. */
  REASON_UNSPECIFIED = 0,
  /**
   * CANNOT_DISABLE - This Resource cannot be Disabled. Only Published resources can be
   * Disabled.
   */
  CANNOT_DISABLE = 1,
  /**
   * CANNOT_ENABLE - This Resource cannot be Enabled. Only Disabled resources can be
   * Enabled.
   */
  CANNOT_ENABLE = 2,
  /**
   * CANNOT_PUBLISH - This Resource cannot be Published. Only Draft or Disabled resources
   * can be Published.
   */
  CANNOT_PUBLISH = 3,
  /**
   * CANNOT_UNPUBLISH - This Resource cannot be Unpublished. Once published, resources may
   * not be set in "Draft" state.
   */
  CANNOT_UNPUBLISH = 4,
  /**
   * CANNOT_DELETE - This Resource cannot be Deleted. Only Disabled resources
   * can be Deleted.
   */
  CANNOT_DELETE = 5,
  /**
   * CANNOT_RESTRICT_RANGE - The request modified a range in a Field, but the new range does
   * not include the previous range. When this error happens, `field` points
   * at the Field where the violation occurred.
   */
  CANNOT_RESTRICT_RANGE = 6,
  /** CANNOT_CHANGE_PUBLISHED_FIELD - The specified change cannot be made to published Resources. */
  CANNOT_CHANGE_PUBLISHED_FIELD = 7,
  /**
   * CANNOT_CREATE_MORE_LABELS - The customer cannot create new labels because the maximum number
   * of labels for the customer has been reached.
   */
  CANNOT_CREATE_MORE_LABELS = 8,
  /** CANNOT_CHANGE_PUBLISHED_FIELD_TYPE - The Field type cannot be changed because the Field has been published. */
  CANNOT_CHANGE_PUBLISHED_FIELD_TYPE = 9,
  /** CANNOT_MODIFY_LOCKED_COMPONENT - The Label component is locked and cannot be deleted */
  CANNOT_MODIFY_LOCKED_COMPONENT = 10,
  /** UNSUPPORT_ENABLED_APP_SETTINGS - The Label cannot be enabled in the target application or applications. */
  UNSUPPORT_ENABLED_APP_SETTINGS = 11,
  UNRECOGNIZED = -1,
}

export function preconditionFailure_Violation_ReasonFromJSON(object: any): PreconditionFailure_Violation_Reason {
  switch (object) {
    case 0:
    case "REASON_UNSPECIFIED":
      return PreconditionFailure_Violation_Reason.REASON_UNSPECIFIED;
    case 1:
    case "CANNOT_DISABLE":
      return PreconditionFailure_Violation_Reason.CANNOT_DISABLE;
    case 2:
    case "CANNOT_ENABLE":
      return PreconditionFailure_Violation_Reason.CANNOT_ENABLE;
    case 3:
    case "CANNOT_PUBLISH":
      return PreconditionFailure_Violation_Reason.CANNOT_PUBLISH;
    case 4:
    case "CANNOT_UNPUBLISH":
      return PreconditionFailure_Violation_Reason.CANNOT_UNPUBLISH;
    case 5:
    case "CANNOT_DELETE":
      return PreconditionFailure_Violation_Reason.CANNOT_DELETE;
    case 6:
    case "CANNOT_RESTRICT_RANGE":
      return PreconditionFailure_Violation_Reason.CANNOT_RESTRICT_RANGE;
    case 7:
    case "CANNOT_CHANGE_PUBLISHED_FIELD":
      return PreconditionFailure_Violation_Reason.CANNOT_CHANGE_PUBLISHED_FIELD;
    case 8:
    case "CANNOT_CREATE_MORE_LABELS":
      return PreconditionFailure_Violation_Reason.CANNOT_CREATE_MORE_LABELS;
    case 9:
    case "CANNOT_CHANGE_PUBLISHED_FIELD_TYPE":
      return PreconditionFailure_Violation_Reason.CANNOT_CHANGE_PUBLISHED_FIELD_TYPE;
    case 10:
    case "CANNOT_MODIFY_LOCKED_COMPONENT":
      return PreconditionFailure_Violation_Reason.CANNOT_MODIFY_LOCKED_COMPONENT;
    case 11:
    case "UNSUPPORT_ENABLED_APP_SETTINGS":
      return PreconditionFailure_Violation_Reason.UNSUPPORT_ENABLED_APP_SETTINGS;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PreconditionFailure_Violation_Reason.UNRECOGNIZED;
  }
}

export function preconditionFailure_Violation_ReasonToJSON(object: PreconditionFailure_Violation_Reason): string {
  switch (object) {
    case PreconditionFailure_Violation_Reason.REASON_UNSPECIFIED:
      return "REASON_UNSPECIFIED";
    case PreconditionFailure_Violation_Reason.CANNOT_DISABLE:
      return "CANNOT_DISABLE";
    case PreconditionFailure_Violation_Reason.CANNOT_ENABLE:
      return "CANNOT_ENABLE";
    case PreconditionFailure_Violation_Reason.CANNOT_PUBLISH:
      return "CANNOT_PUBLISH";
    case PreconditionFailure_Violation_Reason.CANNOT_UNPUBLISH:
      return "CANNOT_UNPUBLISH";
    case PreconditionFailure_Violation_Reason.CANNOT_DELETE:
      return "CANNOT_DELETE";
    case PreconditionFailure_Violation_Reason.CANNOT_RESTRICT_RANGE:
      return "CANNOT_RESTRICT_RANGE";
    case PreconditionFailure_Violation_Reason.CANNOT_CHANGE_PUBLISHED_FIELD:
      return "CANNOT_CHANGE_PUBLISHED_FIELD";
    case PreconditionFailure_Violation_Reason.CANNOT_CREATE_MORE_LABELS:
      return "CANNOT_CREATE_MORE_LABELS";
    case PreconditionFailure_Violation_Reason.CANNOT_CHANGE_PUBLISHED_FIELD_TYPE:
      return "CANNOT_CHANGE_PUBLISHED_FIELD_TYPE";
    case PreconditionFailure_Violation_Reason.CANNOT_MODIFY_LOCKED_COMPONENT:
      return "CANNOT_MODIFY_LOCKED_COMPONENT";
    case PreconditionFailure_Violation_Reason.UNSUPPORT_ENABLED_APP_SETTINGS:
      return "UNSUPPORT_ENABLED_APP_SETTINGS";
    case PreconditionFailure_Violation_Reason.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseInvalidArgument(): InvalidArgument {
  return { fieldViolations: [] };
}

export const InvalidArgument: MessageFns<InvalidArgument> = {
  encode(message: InvalidArgument, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.fieldViolations) {
      InvalidArgument_FieldViolation.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InvalidArgument {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInvalidArgument();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.fieldViolations.push(InvalidArgument_FieldViolation.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InvalidArgument {
    return {
      fieldViolations: globalThis.Array.isArray(object?.fieldViolations)
        ? object.fieldViolations.map((e: any) => InvalidArgument_FieldViolation.fromJSON(e))
        : [],
    };
  },

  toJSON(message: InvalidArgument): unknown {
    const obj: any = {};
    if (message.fieldViolations?.length) {
      obj.fieldViolations = message.fieldViolations.map((e) => InvalidArgument_FieldViolation.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<InvalidArgument>): InvalidArgument {
    return InvalidArgument.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<InvalidArgument>): InvalidArgument {
    const message = createBaseInvalidArgument();
    message.fieldViolations = object.fieldViolations?.map((e) => InvalidArgument_FieldViolation.fromPartial(e)) || [];
    return message;
  },
};

function createBaseInvalidArgument_FieldViolation(): InvalidArgument_FieldViolation {
  return { field: "", reason: 0, displayMessage: "" };
}

export const InvalidArgument_FieldViolation: MessageFns<InvalidArgument_FieldViolation> = {
  encode(message: InvalidArgument_FieldViolation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.field !== "") {
      writer.uint32(10).string(message.field);
    }
    if (message.reason !== 0) {
      writer.uint32(16).int32(message.reason);
    }
    if (message.displayMessage !== "") {
      writer.uint32(26).string(message.displayMessage);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InvalidArgument_FieldViolation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInvalidArgument_FieldViolation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.field = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.reason = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.displayMessage = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InvalidArgument_FieldViolation {
    return {
      field: isSet(object.field) ? globalThis.String(object.field) : "",
      reason: isSet(object.reason) ? invalidArgument_FieldViolation_ReasonFromJSON(object.reason) : 0,
      displayMessage: isSet(object.displayMessage) ? globalThis.String(object.displayMessage) : "",
    };
  },

  toJSON(message: InvalidArgument_FieldViolation): unknown {
    const obj: any = {};
    if (message.field !== "") {
      obj.field = message.field;
    }
    if (message.reason !== 0) {
      obj.reason = invalidArgument_FieldViolation_ReasonToJSON(message.reason);
    }
    if (message.displayMessage !== "") {
      obj.displayMessage = message.displayMessage;
    }
    return obj;
  },

  create(base?: DeepPartial<InvalidArgument_FieldViolation>): InvalidArgument_FieldViolation {
    return InvalidArgument_FieldViolation.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<InvalidArgument_FieldViolation>): InvalidArgument_FieldViolation {
    const message = createBaseInvalidArgument_FieldViolation();
    message.field = object.field ?? "";
    message.reason = object.reason ?? 0;
    message.displayMessage = object.displayMessage ?? "";
    return message;
  },
};

function createBasePreconditionFailure(): PreconditionFailure {
  return { violation: [] };
}

export const PreconditionFailure: MessageFns<PreconditionFailure> = {
  encode(message: PreconditionFailure, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.violation) {
      PreconditionFailure_Violation.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PreconditionFailure {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePreconditionFailure();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.violation.push(PreconditionFailure_Violation.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PreconditionFailure {
    return {
      violation: globalThis.Array.isArray(object?.violation)
        ? object.violation.map((e: any) => PreconditionFailure_Violation.fromJSON(e))
        : [],
    };
  },

  toJSON(message: PreconditionFailure): unknown {
    const obj: any = {};
    if (message.violation?.length) {
      obj.violation = message.violation.map((e) => PreconditionFailure_Violation.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<PreconditionFailure>): PreconditionFailure {
    return PreconditionFailure.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PreconditionFailure>): PreconditionFailure {
    const message = createBasePreconditionFailure();
    message.violation = object.violation?.map((e) => PreconditionFailure_Violation.fromPartial(e)) || [];
    return message;
  },
};

function createBasePreconditionFailure_Violation(): PreconditionFailure_Violation {
  return { field: "", reason: 0, displayMessage: "" };
}

export const PreconditionFailure_Violation: MessageFns<PreconditionFailure_Violation> = {
  encode(message: PreconditionFailure_Violation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.field !== "") {
      writer.uint32(10).string(message.field);
    }
    if (message.reason !== 0) {
      writer.uint32(16).int32(message.reason);
    }
    if (message.displayMessage !== "") {
      writer.uint32(26).string(message.displayMessage);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PreconditionFailure_Violation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePreconditionFailure_Violation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.field = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.reason = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.displayMessage = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PreconditionFailure_Violation {
    return {
      field: isSet(object.field) ? globalThis.String(object.field) : "",
      reason: isSet(object.reason) ? preconditionFailure_Violation_ReasonFromJSON(object.reason) : 0,
      displayMessage: isSet(object.displayMessage) ? globalThis.String(object.displayMessage) : "",
    };
  },

  toJSON(message: PreconditionFailure_Violation): unknown {
    const obj: any = {};
    if (message.field !== "") {
      obj.field = message.field;
    }
    if (message.reason !== 0) {
      obj.reason = preconditionFailure_Violation_ReasonToJSON(message.reason);
    }
    if (message.displayMessage !== "") {
      obj.displayMessage = message.displayMessage;
    }
    return obj;
  },

  create(base?: DeepPartial<PreconditionFailure_Violation>): PreconditionFailure_Violation {
    return PreconditionFailure_Violation.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PreconditionFailure_Violation>): PreconditionFailure_Violation {
    const message = createBasePreconditionFailure_Violation();
    message.field = object.field ?? "";
    message.reason = object.reason ?? 0;
    message.displayMessage = object.displayMessage ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
