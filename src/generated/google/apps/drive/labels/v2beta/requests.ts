// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/apps/drive/labels/v2beta/requests.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { FieldMask } from "../../../../protobuf/field_mask.js";
import { Lifecycle_DisabledPolicy } from "./common.js";
import {
  Field,
  Field_DateOptions,
  Field_IntegerOptions,
  Field_Properties,
  Field_SelectionOptions,
  Field_SelectionOptions_Choice,
  Field_SelectionOptions_Choice_Properties,
  Field_TextOptions,
  Field_UserOptions,
} from "./field.js";
import {
  Label,
  Label_AppliedLabelPolicy_CopyMode,
  label_AppliedLabelPolicy_CopyModeFromJSON,
  label_AppliedLabelPolicy_CopyModeToJSON,
  Label_Properties,
} from "./label.js";
import { LabelLock } from "./label_lock.js";
import {
  LabelPermission,
  LabelPermission_LabelRole,
  labelPermission_LabelRoleFromJSON,
  labelPermission_LabelRoleToJSON,
} from "./label_permission.js";

export const protobufPackage = "google.apps.drive.labels.v2beta";

/**
 * Resource view that can be applied to label responses. The default value
 * `LABEL_VIEW_BASIC` implies the field mask:
 * `name,id,revision_id,label_type,properties.*`\
 */
export enum LabelView {
  /**
   * LABEL_VIEW_BASIC - Implies the field mask:
   * `name,id,revision_id,label_type,properties.*`
   */
  LABEL_VIEW_BASIC = 0,
  /** LABEL_VIEW_FULL - All possible fields. */
  LABEL_VIEW_FULL = 1,
  UNRECOGNIZED = -1,
}

export function labelViewFromJSON(object: any): LabelView {
  switch (object) {
    case 0:
    case "LABEL_VIEW_BASIC":
      return LabelView.LABEL_VIEW_BASIC;
    case 1:
    case "LABEL_VIEW_FULL":
      return LabelView.LABEL_VIEW_FULL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return LabelView.UNRECOGNIZED;
  }
}

export function labelViewToJSON(object: LabelView): string {
  switch (object) {
    case LabelView.LABEL_VIEW_BASIC:
      return "LABEL_VIEW_BASIC";
    case LabelView.LABEL_VIEW_FULL:
      return "LABEL_VIEW_FULL";
    case LabelView.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * Provides control over how write requests are executed. When not specified,
 * the last write wins.
 */
export interface WriteControl {
  /**
   * The [revision_id][google.apps.drive.labels.v1.Label.revision_id] of the
   * label that the write request will be applied to. If this is not the
   * latest revision of the label, the request will not be processed and will
   * return a 400 Bad Request error.
   */
  requiredRevisionId?: string | undefined;
}

/** Request to get the capabilities for a user. */
export interface GetUserCapabilitiesRequest {
  /**
   * Required. The resource name of the user. Only "users/me/capabilities" is
   * supported.
   */
  name: string;
  /**
   * The customer to scope this request to.
   * For example: "customers/abcd1234".
   * If unset, will return settings within the current customer.
   */
  customer: string;
}

/** Request to create a Label. */
export interface CreateLabelRequest {
  /** Required. The label to create. */
  label:
    | Label
    | undefined;
  /**
   * Set to `true` in order to use the user's admin privileges. The server
   * will verify the user is an admin before allowing access.
   */
  useAdminAccess: boolean;
  /**
   * The BCP-47 language code to use for evaluating localized Field labels in
   * response. When not specified, values in the default configured language
   * will be used.
   */
  languageCode: string;
}

/** Request to get a label by resource name. */
export interface GetLabelRequest {
  /**
   * Required. Label resource name.
   *
   * May be any of:
   *
   * * `labels/{id}` (equivalent to labels/{id}@latest)
   * * `labels/{id}@latest`
   * * `labels/{id}@published`
   * * `labels/{id}@{revision_id}`
   */
  name: string;
  /**
   * Set to `true` in order to use the user's admin credentials. The server
   * verifies that the user is an admin for the label before allowing access.
   */
  useAdminAccess: boolean;
  /**
   * The BCP-47 language code to use for evaluating localized field labels.
   * When not specified, values in the default configured language are used.
   */
  languageCode: string;
  /**
   * When specified, only certain fields belonging to the indicated view are
   * returned.
   */
  view: LabelView;
}

/**
 * The set of requests for updating aspects of a Label. If any request is not
 * valid, no requests will be applied.
 */
export interface DeltaUpdateLabelRequest {
  /** Required. The resource name of the Label to update. */
  name: string;
  /** Provides control over how write requests are executed. */
  writeControl:
    | WriteControl
    | undefined;
  /**
   * A list of updates to apply to the Label.
   * Requests will be applied in the order they are specified.
   */
  requests: DeltaUpdateLabelRequest_Request[];
  /**
   * Set to `true` in order to use the user's admin credentials. The server
   * will verify the user is an admin for the Label before allowing access.
   */
  useAdminAccess: boolean;
  /**
   * When specified, only certain fields belonging to the indicated view will be
   * returned.
   */
  view: LabelView;
  /**
   * The BCP-47 language code to use for evaluating localized Field labels when
   * `include_label_in_response` is `true`.
   */
  languageCode: string;
}

/** A single kind of update to apply to a Label. */
export interface DeltaUpdateLabelRequest_Request {
  /** Updates the Label properties. */
  updateLabel?:
    | DeltaUpdateLabelRequest_UpdateLabelPropertiesRequest
    | undefined;
  /** Creates a new Field. */
  createField?:
    | DeltaUpdateLabelRequest_CreateFieldRequest
    | undefined;
  /** Updates basic properties of a Field. */
  updateField?:
    | DeltaUpdateLabelRequest_UpdateFieldPropertiesRequest
    | undefined;
  /** Update Field type and/or type options. */
  updateFieldType?:
    | DeltaUpdateLabelRequest_UpdateFieldTypeRequest
    | undefined;
  /** Enables the Field. */
  enableField?:
    | DeltaUpdateLabelRequest_EnableFieldRequest
    | undefined;
  /** Disables the Field. */
  disableField?:
    | DeltaUpdateLabelRequest_DisableFieldRequest
    | undefined;
  /** Deletes a Field from the label. */
  deleteField?:
    | DeltaUpdateLabelRequest_DeleteFieldRequest
    | undefined;
  /** Creates Choice within a Selection field. */
  createSelectionChoice?:
    | DeltaUpdateLabelRequest_CreateSelectionChoiceRequest
    | undefined;
  /** Update a Choice properties within a Selection Field. */
  updateSelectionChoiceProperties?:
    | DeltaUpdateLabelRequest_UpdateSelectionChoicePropertiesRequest
    | undefined;
  /** Enable a Choice within a Selection Field. */
  enableSelectionChoice?:
    | DeltaUpdateLabelRequest_EnableSelectionChoiceRequest
    | undefined;
  /** Disable a Choice within a Selection Field. */
  disableSelectionChoice?:
    | DeltaUpdateLabelRequest_DisableSelectionChoiceRequest
    | undefined;
  /** Delete a Choice within a Selection Field. */
  deleteSelectionChoice?: DeltaUpdateLabelRequest_DeleteSelectionChoiceRequest | undefined;
}

/** Updates basic properties of a Label. */
export interface DeltaUpdateLabelRequest_UpdateLabelPropertiesRequest {
  /**
   * The fields that should be updated. At least one field must be specified.
   * The root `label_properties` is implied and should not be specified. A
   * single `*` can be used as short-hand for updating every field.
   */
  updateMask:
    | string[]
    | undefined;
  /** Required. Label properties to update. */
  properties: Label_Properties | undefined;
}

/** Request to disable the Field. */
export interface DeltaUpdateLabelRequest_DisableFieldRequest {
  /**
   * The fields that should be updated. At least one field must be specified.
   * The root `disabled_policy` is implied and should not be specified. A
   * single `*` can be used as short-hand for updating every field.
   */
  updateMask:
    | string[]
    | undefined;
  /** Required. Key of the Field to disable. */
  id: string;
  /** Required. Field Disabled Policy. */
  disabledPolicy: Lifecycle_DisabledPolicy | undefined;
}

/** Request to enable the Field. */
export interface DeltaUpdateLabelRequest_EnableFieldRequest {
  /** Required. ID of the Field to enable. */
  id: string;
}

/** Request to delete the Field. */
export interface DeltaUpdateLabelRequest_DeleteFieldRequest {
  /** Required. ID of the Field to delete. */
  id: string;
}

/** Request to create a Field within a Label. */
export interface DeltaUpdateLabelRequest_CreateFieldRequest {
  /** Required. Field to create. */
  field: Field | undefined;
}

/** Request to update Field properties. */
export interface DeltaUpdateLabelRequest_UpdateFieldPropertiesRequest {
  /**
   * The fields that should be updated. At least one field must be specified.
   * The root `properties` is implied and should not be specified. A single
   * `*` can be used as short-hand for updating every field.
   */
  updateMask:
    | string[]
    | undefined;
  /** Required. The Field to update. */
  id: string;
  /** Required. Basic Field properties. */
  properties: Field_Properties | undefined;
}

/** Request to change the type of a Field. */
export interface DeltaUpdateLabelRequest_UpdateFieldTypeRequest {
  /** Update field to Text. */
  textOptions?:
    | Field_TextOptions
    | undefined;
  /** Update field to Integer. */
  integerOptions?:
    | Field_IntegerOptions
    | undefined;
  /** Update field to Date. */
  dateOptions?:
    | Field_DateOptions
    | undefined;
  /** Update field to Selection. */
  selectionOptions?:
    | Field_SelectionOptions
    | undefined;
  /** Update field to User. */
  userOptions?:
    | Field_UserOptions
    | undefined;
  /**
   * The fields that should be updated. At least one field must be specified.
   * The root of `type_options` is implied and should not be specified. A
   * single `*` can be used as short-hand for updating every field.
   */
  updateMask:
    | string[]
    | undefined;
  /** Required. The Field to update. */
  id: string;
}

/** Request to create a Selection Choice. */
export interface DeltaUpdateLabelRequest_CreateSelectionChoiceRequest {
  /** Required. The Selection Field in which a Choice will be created. */
  fieldId: string;
  /** Required. The Choice to create. */
  choice: Field_SelectionOptions_Choice | undefined;
}

/** Request to update a Choice properties. */
export interface DeltaUpdateLabelRequest_UpdateSelectionChoicePropertiesRequest {
  /**
   * The fields that should be updated. At least one field must be specified.
   * The root `properties` is implied and should not be specified. A single
   * `*` can be used as short-hand for updating every field.
   */
  updateMask:
    | string[]
    | undefined;
  /** Required. The Selection Field to update. */
  fieldId: string;
  /** Required. The Choice to update. */
  id: string;
  /** Required. The Choice properties to update. */
  properties: Field_SelectionOptions_Choice_Properties | undefined;
}

/** Request to delete a Choice. */
export interface DeltaUpdateLabelRequest_DeleteSelectionChoiceRequest {
  /** Required. The Selection Field from which a Choice will be deleted. */
  fieldId: string;
  /** Required. Choice to delete. */
  id: string;
}

/** Request to disable a Choice. */
export interface DeltaUpdateLabelRequest_DisableSelectionChoiceRequest {
  /**
   * The fields that should be updated. At least one field must be specified.
   * The root `disabled_policy` is implied and should not be specified. A
   * single `*` can be used as short-hand for updating every field.
   */
  updateMask:
    | string[]
    | undefined;
  /** Required. The Selection Field in which a Choice will be disabled. */
  fieldId: string;
  /** Required. Choice to disable. */
  id: string;
  /** Required. The disabled policy to update. */
  disabledPolicy: Lifecycle_DisabledPolicy | undefined;
}

/** Request to enable a Choice. */
export interface DeltaUpdateLabelRequest_EnableSelectionChoiceRequest {
  /** Required. The Selection Field in which a Choice will be enabled. */
  fieldId: string;
  /** Required. Choice to enable. */
  id: string;
}

/** Response for Label update. */
export interface DeltaUpdateLabelResponse {
  /**
   * The reply of the updates. This maps 1:1 with the updates, although
   * responses to some requests may be empty.
   */
  responses: DeltaUpdateLabelResponse_Response[];
  /**
   * The label after updates were applied. This is only set if
   * [BatchUpdateLabelResponse2.include_label_in_response] is `true` and there
   * were no errors.
   */
  updatedLabel: Label | undefined;
}

/** A single response from an update. */
export interface DeltaUpdateLabelResponse_Response {
  /** Updated basic properties of a Label. */
  updateLabel?:
    | DeltaUpdateLabelResponse_UpdateLabelPropertiesResponse
    | undefined;
  /** Creates a new Field. */
  createField?:
    | DeltaUpdateLabelResponse_CreateFieldResponse
    | undefined;
  /** Updates basic properties of a Field. */
  updateField?:
    | DeltaUpdateLabelResponse_UpdateFieldPropertiesResponse
    | undefined;
  /** Update Field type and/or type options. */
  updateFieldType?:
    | DeltaUpdateLabelResponse_UpdateFieldTypeResponse
    | undefined;
  /** Enables Field. */
  enableField?:
    | DeltaUpdateLabelResponse_EnableFieldResponse
    | undefined;
  /** Disables Field. */
  disableField?:
    | DeltaUpdateLabelResponse_DisableFieldResponse
    | undefined;
  /** Deletes a Field from the label. */
  deleteField?:
    | DeltaUpdateLabelResponse_DeleteFieldResponse
    | undefined;
  /** Creates a new selection list option to add to a Selection Field. */
  createSelectionChoice?:
    | DeltaUpdateLabelResponse_CreateSelectionChoiceResponse
    | undefined;
  /** Updates a Choice within a Selection Field. */
  updateSelectionChoiceProperties?:
    | DeltaUpdateLabelResponse_UpdateSelectionChoicePropertiesResponse
    | undefined;
  /** Enables a Choice within a Selection Field. */
  enableSelectionChoice?:
    | DeltaUpdateLabelResponse_EnableSelectionChoiceResponse
    | undefined;
  /** Disables a Choice within a Selection Field. */
  disableSelectionChoice?:
    | DeltaUpdateLabelResponse_DisableSelectionChoiceResponse
    | undefined;
  /** Deletes a Choice from a Selection Field. */
  deleteSelectionChoice?: DeltaUpdateLabelResponse_DeleteSelectionChoiceResponse | undefined;
}

/** Response following update to Label properties. */
export interface DeltaUpdateLabelResponse_UpdateLabelPropertiesResponse {
}

/** Response following Field create. */
export interface DeltaUpdateLabelResponse_CreateFieldResponse {
  /**
   * The field of the created field. When left blank in a create request,
   * a key will be autogenerated and can be identified here.
   */
  id: string;
  /**
   * The priority of the created field. The priority may change from what
   * was specified to assure contiguous priorities between fields (1-n).
   */
  priority: number;
}

/** Response following update to Field properties. */
export interface DeltaUpdateLabelResponse_UpdateFieldPropertiesResponse {
  /**
   * The priority of the updated field. The priority may change from what
   * was specified to assure contiguous priorities between fields (1-n).
   */
  priority: number;
}

/** Response following update to Field type. */
export interface DeltaUpdateLabelResponse_UpdateFieldTypeResponse {
}

/** Response following Field enable. */
export interface DeltaUpdateLabelResponse_EnableFieldResponse {
}

/** Response following Field disable. */
export interface DeltaUpdateLabelResponse_DisableFieldResponse {
}

/** Response following Field delete. */
export interface DeltaUpdateLabelResponse_DeleteFieldResponse {
}

/** Response following Selection Choice create. */
export interface DeltaUpdateLabelResponse_CreateSelectionChoiceResponse {
  /** The server-generated id of the field. */
  fieldId: string;
  /** The server-generated ID of the created choice within the Field */
  id: string;
}

/** Response following update to Selection Choice properties. */
export interface DeltaUpdateLabelResponse_UpdateSelectionChoicePropertiesResponse {
  /**
   * The priority of the updated choice. The priority may change from what
   * was specified to assure contiguous priorities between choices (1-n).
   */
  priority: number;
}

/** Response following Choice enable. */
export interface DeltaUpdateLabelResponse_EnableSelectionChoiceResponse {
}

/** Response following Choice disable. */
export interface DeltaUpdateLabelResponse_DisableSelectionChoiceResponse {
}

/** Response following Choice delete. */
export interface DeltaUpdateLabelResponse_DeleteSelectionChoiceResponse {
}

/**
 * Request to update the `CopyMode` of the given Label. Changes to this policy
 * are not revisioned, do not require publishing, and take effect immediately.
 * \
 */
export interface UpdateLabelCopyModeRequest {
  /** Required. The resource name of the Label to update. */
  name: string;
  /**
   * Required. Indicates how the applied Label, and Field values should be copied
   * when a Drive item is copied.
   */
  copyMode: Label_AppliedLabelPolicy_CopyMode;
  /**
   * Set to `true` in order to use the user's admin credentials. The server
   * will verify the user is an admin for the Label before allowing access.
   */
  useAdminAccess: boolean;
  /**
   * The BCP-47 language code to use for evaluating localized field labels.
   * When not specified, values in the default configured language will be used.
   */
  languageCode: string;
  /**
   * When specified, only certain fields belonging to the indicated view will be
   * returned.
   */
  view: LabelView;
}

/** Request to get the limits for a Label. */
export interface GetLabelLimitsRequest {
  /**
   * Required. Label revision resource name
   * Must be: "limits/label"
   */
  name: string;
}

/** Request to list labels available to the current user. */
export interface ListLabelsRequest {
  /**
   * Set to `true` in order to use the user's admin credentials. This will
   * return all Labels within the customer.
   */
  useAdminAccess?:
    | boolean
    | undefined;
  /**
   * Specifies the level of access the user must have on the returned Labels.
   * The minimum role a user must have on a label.
   * Defaults to `READER`.
   */
  minimumRole?:
    | LabelPermission_LabelRole
    | undefined;
  /**
   * Whether to include only published labels in the results.
   *
   * * When `true`, only the current published label revisions are returned.
   *   Disabled labels are included. Returned label resource names
   *   reference the published revision (`labels/{id}/{revision_id}`).
   * * When `false`, the current label revisions are returned, which might not
   *   be published. Returned label resource names don't reference a specific
   *   revision (`labels/{id}`).
   */
  publishedOnly: boolean;
  /**
   * The customer to scope this list request to.
   * For example: "customers/abcd1234".
   * If unset, will return all labels within the current customer.
   */
  customer: string;
  /**
   * The BCP-47 language code to use for evaluating localized field labels.
   * When not specified, values in the default configured language are used.
   */
  languageCode: string;
  /** Maximum number of labels to return per page. Default: 50. Max: 200. */
  pageSize: number;
  /** The token of the page to return. */
  pageToken: string;
  /**
   * When specified, only certain fields belonging to the indicated view are
   * returned.
   */
  view: LabelView;
}

/** Response for listing Labels. */
export interface ListLabelsResponse {
  /** Labels. */
  labels: Label[];
  /** The token of the next page in the response. */
  nextPageToken: string;
}

/**
 * Creates or updates a permission on the Label. Permissions affect the Label
 * resource as a whole, are not revisioned, and do not require publishing.
 */
export interface CreateLabelPermissionRequest {
  /**
   * Required. The parent Label resource name on the Label Permission is
   * created. Format: labels/{label}
   */
  parent: string;
  /** Required. The permission to create or update on the Label. */
  labelPermission:
    | LabelPermission
    | undefined;
  /**
   * Set to `true` in order to use the user's admin credentials. The server
   * will verify the user is an admin for the Label before allowing access.
   */
  useAdminAccess: boolean;
}

/** Request to list the permissions on a Label. */
export interface ListLabelPermissionsRequest {
  /**
   * Required. The parent Label resource name on which Label Permission are
   * listed. Format: labels/{label}
   */
  parent: string;
  /**
   * Set to `true` in order to use the user's admin credentials. The server will
   * verify the user is an admin for the Label before allowing access.
   */
  useAdminAccess: boolean;
  /** Maximum number of permissions to return per page. Default: 50. Max: 200. */
  pageSize: number;
  /** The token of the page to return. */
  pageToken: string;
}

/** Response for listing the permissions on a Label. */
export interface ListLabelPermissionsResponse {
  /** Label permissions. */
  labelPermissions: LabelPermission[];
  /** The token of the next page in the response. */
  nextPageToken: string;
}

/**
 * Updates a Label Permission. Permissions affect the Label resource as a whole,
 * are not revisioned, and do not require publishing.
 */
export interface UpdateLabelPermissionRequest {
  /** Required. The parent Label resource name. */
  parent: string;
  /** Required. The permission to create or update on the Label. */
  labelPermission:
    | LabelPermission
    | undefined;
  /**
   * Set to `true` in order to use the user's admin credentials. The server
   * will verify the user is an admin for the Label before allowing access.
   */
  useAdminAccess: boolean;
}

/**
 * Deletes a Label Permission. Permissions affect the Label resource as a whole,
 * are not revisioned, and do not require publishing.
 */
export interface DeleteLabelPermissionRequest {
  /** Required. Label Permission resource name. */
  name: string;
  /**
   * Set to `true` in order to use the user's admin credentials. The server
   * will verify the user is an admin for the Label before allowing access.
   */
  useAdminAccess: boolean;
}

/** Updates one or more Label Permissions. */
export interface BatchUpdateLabelPermissionsRequest {
  /**
   * Required. The parent Label resource name shared by all permissions being
   * updated. Format: labels/{label} If this is set, the parent field in the
   * UpdateLabelPermissionRequest messages must either be empty or match this
   * field.
   */
  parent: string;
  /** Required. The request message specifying the resources to update. */
  requests: UpdateLabelPermissionRequest[];
  /**
   * Set to `true` in order to use the user's admin credentials. The server
   * will verify the user is an admin for the Label before allowing access.
   * If this is set, the use_admin_access field in the
   * UpdateLabelPermissionRequest messages must either be empty or match this
   * field.
   */
  useAdminAccess: boolean;
}

/** Response for updating one or more Label Permissions. */
export interface BatchUpdateLabelPermissionsResponse {
  /** Required. Permissions updated. */
  permissions: LabelPermission[];
}

/** Deletes one of more Label Permissions. */
export interface BatchDeleteLabelPermissionsRequest {
  /** Required. The request message specifying the resources to update. */
  requests: DeleteLabelPermissionRequest[];
  /**
   * Set to `true` in order to use the user's admin credentials. The server
   * will verify the user is an admin for the Label before allowing access.
   * If this is set, the use_admin_access field in the
   * DeleteLabelPermissionRequest messages must either be empty or match this
   * field.
   */
  useAdminAccess: boolean;
  /**
   * Required. The parent Label resource name shared by all permissions being
   * deleted. Format: labels/{label} If this is set, the parent field in the
   * UpdateLabelPermissionRequest messages must either be empty or match this
   * field.
   */
  parent: string;
}

/** Request to deprecate a published Label. */
export interface DisableLabelRequest {
  /**
   * The fields that should be updated. At least one field must be specified.
   * The root `disabled_policy` is implied and should not be specified. A
   * single `*` can be used as short-hand for updating every field.
   */
  updateMask:
    | string[]
    | undefined;
  /** Required. Label resource name. */
  name: string;
  /**
   * Set to `true` in order to use the user's admin credentials. The server
   * will verify the user is an admin for the Label before allowing access.
   */
  useAdminAccess: boolean;
  /**
   * Provides control over how write requests are executed. Defaults to unset,
   * which means last write wins.
   */
  writeControl:
    | WriteControl
    | undefined;
  /** Disabled policy to use. */
  disabledPolicy:
    | Lifecycle_DisabledPolicy
    | undefined;
  /**
   * The BCP-47 language code to use for evaluating localized field labels.
   * When not specified, values in the default configured language will be used.
   */
  languageCode: string;
}

/** Request to publish a label. */
export interface PublishLabelRequest {
  /** Required. Label resource name. */
  name: string;
  /**
   * Set to `true` in order to use the user's admin credentials. The server
   * will verify the user is an admin for the Label before allowing access.
   */
  useAdminAccess: boolean;
  /**
   * Provides control over how write requests are executed. Defaults to unset,
   * which means last write wins.
   */
  writeControl:
    | WriteControl
    | undefined;
  /**
   * The BCP-47 language code to use for evaluating localized field labels.
   * When not specified, values in the default configured language will be used.
   */
  languageCode: string;
}

/** Request to enable a label. */
export interface EnableLabelRequest {
  /** Required. Label resource name. */
  name: string;
  /**
   * Set to `true` in order to use the user's admin credentials. The server
   * will verify the user is an admin for the Label before allowing access.
   */
  useAdminAccess: boolean;
  /**
   * Provides control over how write requests are executed. Defaults to unset,
   * which means last write wins.
   */
  writeControl:
    | WriteControl
    | undefined;
  /**
   * The BCP-47 language code to use for evaluating localized field labels.
   * When not specified, values in the default configured language will be used.
   */
  languageCode: string;
}

/** Request to delete a label. */
export interface DeleteLabelRequest {
  /** Required. Label resource name. */
  name: string;
  /**
   * Set to `true` in order to use the user's admin credentials. The server
   * will verify the user is an admin for the Label before allowing access.
   */
  useAdminAccess: boolean;
  /**
   * Provides control over how write requests are executed. Defaults to unset,
   * which means last write wins.
   */
  writeControl: WriteControl | undefined;
}

/** A request to list the LabelLocks on a Label. */
export interface ListLabelLocksRequest {
  /**
   * Required. Label on which Locks are applied.
   * Format: labels/{label}
   */
  parent: string;
  /** Maximum number of Locks to return per page. Default: 100. Max: 200. */
  pageSize: number;
  /** The token of the page to return. */
  pageToken: string;
}

/** The response to a ListLabelLocksRequest. */
export interface ListLabelLocksResponse {
  /** LabelLocks. */
  labelLocks: LabelLock[];
  /** The token of the next page in the response. */
  nextPageToken: string;
}

function createBaseWriteControl(): WriteControl {
  return { requiredRevisionId: undefined };
}

export const WriteControl: MessageFns<WriteControl> = {
  encode(message: WriteControl, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.requiredRevisionId !== undefined) {
      writer.uint32(10).string(message.requiredRevisionId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WriteControl {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWriteControl();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.requiredRevisionId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WriteControl {
    return {
      requiredRevisionId: isSet(object.requiredRevisionId) ? globalThis.String(object.requiredRevisionId) : undefined,
    };
  },

  toJSON(message: WriteControl): unknown {
    const obj: any = {};
    if (message.requiredRevisionId !== undefined) {
      obj.requiredRevisionId = message.requiredRevisionId;
    }
    return obj;
  },

  create(base?: DeepPartial<WriteControl>): WriteControl {
    return WriteControl.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<WriteControl>): WriteControl {
    const message = createBaseWriteControl();
    message.requiredRevisionId = object.requiredRevisionId ?? undefined;
    return message;
  },
};

function createBaseGetUserCapabilitiesRequest(): GetUserCapabilitiesRequest {
  return { name: "", customer: "" };
}

export const GetUserCapabilitiesRequest: MessageFns<GetUserCapabilitiesRequest> = {
  encode(message: GetUserCapabilitiesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.customer !== "") {
      writer.uint32(18).string(message.customer);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetUserCapabilitiesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUserCapabilitiesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.customer = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetUserCapabilitiesRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      customer: isSet(object.customer) ? globalThis.String(object.customer) : "",
    };
  },

  toJSON(message: GetUserCapabilitiesRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.customer !== "") {
      obj.customer = message.customer;
    }
    return obj;
  },

  create(base?: DeepPartial<GetUserCapabilitiesRequest>): GetUserCapabilitiesRequest {
    return GetUserCapabilitiesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetUserCapabilitiesRequest>): GetUserCapabilitiesRequest {
    const message = createBaseGetUserCapabilitiesRequest();
    message.name = object.name ?? "";
    message.customer = object.customer ?? "";
    return message;
  },
};

function createBaseCreateLabelRequest(): CreateLabelRequest {
  return { label: undefined, useAdminAccess: false, languageCode: "" };
}

export const CreateLabelRequest: MessageFns<CreateLabelRequest> = {
  encode(message: CreateLabelRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.label !== undefined) {
      Label.encode(message.label, writer.uint32(10).fork()).join();
    }
    if (message.useAdminAccess !== false) {
      writer.uint32(16).bool(message.useAdminAccess);
    }
    if (message.languageCode !== "") {
      writer.uint32(26).string(message.languageCode);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateLabelRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateLabelRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.label = Label.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.useAdminAccess = reader.bool();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.languageCode = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateLabelRequest {
    return {
      label: isSet(object.label) ? Label.fromJSON(object.label) : undefined,
      useAdminAccess: isSet(object.useAdminAccess) ? globalThis.Boolean(object.useAdminAccess) : false,
      languageCode: isSet(object.languageCode) ? globalThis.String(object.languageCode) : "",
    };
  },

  toJSON(message: CreateLabelRequest): unknown {
    const obj: any = {};
    if (message.label !== undefined) {
      obj.label = Label.toJSON(message.label);
    }
    if (message.useAdminAccess !== false) {
      obj.useAdminAccess = message.useAdminAccess;
    }
    if (message.languageCode !== "") {
      obj.languageCode = message.languageCode;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateLabelRequest>): CreateLabelRequest {
    return CreateLabelRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateLabelRequest>): CreateLabelRequest {
    const message = createBaseCreateLabelRequest();
    message.label = (object.label !== undefined && object.label !== null) ? Label.fromPartial(object.label) : undefined;
    message.useAdminAccess = object.useAdminAccess ?? false;
    message.languageCode = object.languageCode ?? "";
    return message;
  },
};

function createBaseGetLabelRequest(): GetLabelRequest {
  return { name: "", useAdminAccess: false, languageCode: "", view: 0 };
}

export const GetLabelRequest: MessageFns<GetLabelRequest> = {
  encode(message: GetLabelRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.useAdminAccess !== false) {
      writer.uint32(16).bool(message.useAdminAccess);
    }
    if (message.languageCode !== "") {
      writer.uint32(26).string(message.languageCode);
    }
    if (message.view !== 0) {
      writer.uint32(32).int32(message.view);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetLabelRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetLabelRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.useAdminAccess = reader.bool();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.languageCode = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.view = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetLabelRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      useAdminAccess: isSet(object.useAdminAccess) ? globalThis.Boolean(object.useAdminAccess) : false,
      languageCode: isSet(object.languageCode) ? globalThis.String(object.languageCode) : "",
      view: isSet(object.view) ? labelViewFromJSON(object.view) : 0,
    };
  },

  toJSON(message: GetLabelRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.useAdminAccess !== false) {
      obj.useAdminAccess = message.useAdminAccess;
    }
    if (message.languageCode !== "") {
      obj.languageCode = message.languageCode;
    }
    if (message.view !== 0) {
      obj.view = labelViewToJSON(message.view);
    }
    return obj;
  },

  create(base?: DeepPartial<GetLabelRequest>): GetLabelRequest {
    return GetLabelRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetLabelRequest>): GetLabelRequest {
    const message = createBaseGetLabelRequest();
    message.name = object.name ?? "";
    message.useAdminAccess = object.useAdminAccess ?? false;
    message.languageCode = object.languageCode ?? "";
    message.view = object.view ?? 0;
    return message;
  },
};

function createBaseDeltaUpdateLabelRequest(): DeltaUpdateLabelRequest {
  return { name: "", writeControl: undefined, requests: [], useAdminAccess: false, view: 0, languageCode: "" };
}

export const DeltaUpdateLabelRequest: MessageFns<DeltaUpdateLabelRequest> = {
  encode(message: DeltaUpdateLabelRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.writeControl !== undefined) {
      WriteControl.encode(message.writeControl, writer.uint32(18).fork()).join();
    }
    for (const v of message.requests) {
      DeltaUpdateLabelRequest_Request.encode(v!, writer.uint32(26).fork()).join();
    }
    if (message.useAdminAccess !== false) {
      writer.uint32(32).bool(message.useAdminAccess);
    }
    if (message.view !== 0) {
      writer.uint32(40).int32(message.view);
    }
    if (message.languageCode !== "") {
      writer.uint32(50).string(message.languageCode);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeltaUpdateLabelRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeltaUpdateLabelRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.writeControl = WriteControl.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.requests.push(DeltaUpdateLabelRequest_Request.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.useAdminAccess = reader.bool();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.view = reader.int32() as any;
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.languageCode = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeltaUpdateLabelRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      writeControl: isSet(object.writeControl) ? WriteControl.fromJSON(object.writeControl) : undefined,
      requests: globalThis.Array.isArray(object?.requests)
        ? object.requests.map((e: any) => DeltaUpdateLabelRequest_Request.fromJSON(e))
        : [],
      useAdminAccess: isSet(object.useAdminAccess) ? globalThis.Boolean(object.useAdminAccess) : false,
      view: isSet(object.view) ? labelViewFromJSON(object.view) : 0,
      languageCode: isSet(object.languageCode) ? globalThis.String(object.languageCode) : "",
    };
  },

  toJSON(message: DeltaUpdateLabelRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.writeControl !== undefined) {
      obj.writeControl = WriteControl.toJSON(message.writeControl);
    }
    if (message.requests?.length) {
      obj.requests = message.requests.map((e) => DeltaUpdateLabelRequest_Request.toJSON(e));
    }
    if (message.useAdminAccess !== false) {
      obj.useAdminAccess = message.useAdminAccess;
    }
    if (message.view !== 0) {
      obj.view = labelViewToJSON(message.view);
    }
    if (message.languageCode !== "") {
      obj.languageCode = message.languageCode;
    }
    return obj;
  },

  create(base?: DeepPartial<DeltaUpdateLabelRequest>): DeltaUpdateLabelRequest {
    return DeltaUpdateLabelRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeltaUpdateLabelRequest>): DeltaUpdateLabelRequest {
    const message = createBaseDeltaUpdateLabelRequest();
    message.name = object.name ?? "";
    message.writeControl = (object.writeControl !== undefined && object.writeControl !== null)
      ? WriteControl.fromPartial(object.writeControl)
      : undefined;
    message.requests = object.requests?.map((e) => DeltaUpdateLabelRequest_Request.fromPartial(e)) || [];
    message.useAdminAccess = object.useAdminAccess ?? false;
    message.view = object.view ?? 0;
    message.languageCode = object.languageCode ?? "";
    return message;
  },
};

function createBaseDeltaUpdateLabelRequest_Request(): DeltaUpdateLabelRequest_Request {
  return {
    updateLabel: undefined,
    createField: undefined,
    updateField: undefined,
    updateFieldType: undefined,
    enableField: undefined,
    disableField: undefined,
    deleteField: undefined,
    createSelectionChoice: undefined,
    updateSelectionChoiceProperties: undefined,
    enableSelectionChoice: undefined,
    disableSelectionChoice: undefined,
    deleteSelectionChoice: undefined,
  };
}

export const DeltaUpdateLabelRequest_Request: MessageFns<DeltaUpdateLabelRequest_Request> = {
  encode(message: DeltaUpdateLabelRequest_Request, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.updateLabel !== undefined) {
      DeltaUpdateLabelRequest_UpdateLabelPropertiesRequest.encode(message.updateLabel, writer.uint32(10).fork()).join();
    }
    if (message.createField !== undefined) {
      DeltaUpdateLabelRequest_CreateFieldRequest.encode(message.createField, writer.uint32(18).fork()).join();
    }
    if (message.updateField !== undefined) {
      DeltaUpdateLabelRequest_UpdateFieldPropertiesRequest.encode(message.updateField, writer.uint32(26).fork()).join();
    }
    if (message.updateFieldType !== undefined) {
      DeltaUpdateLabelRequest_UpdateFieldTypeRequest.encode(message.updateFieldType, writer.uint32(34).fork()).join();
    }
    if (message.enableField !== undefined) {
      DeltaUpdateLabelRequest_EnableFieldRequest.encode(message.enableField, writer.uint32(42).fork()).join();
    }
    if (message.disableField !== undefined) {
      DeltaUpdateLabelRequest_DisableFieldRequest.encode(message.disableField, writer.uint32(50).fork()).join();
    }
    if (message.deleteField !== undefined) {
      DeltaUpdateLabelRequest_DeleteFieldRequest.encode(message.deleteField, writer.uint32(58).fork()).join();
    }
    if (message.createSelectionChoice !== undefined) {
      DeltaUpdateLabelRequest_CreateSelectionChoiceRequest.encode(
        message.createSelectionChoice,
        writer.uint32(66).fork(),
      ).join();
    }
    if (message.updateSelectionChoiceProperties !== undefined) {
      DeltaUpdateLabelRequest_UpdateSelectionChoicePropertiesRequest.encode(
        message.updateSelectionChoiceProperties,
        writer.uint32(74).fork(),
      ).join();
    }
    if (message.enableSelectionChoice !== undefined) {
      DeltaUpdateLabelRequest_EnableSelectionChoiceRequest.encode(
        message.enableSelectionChoice,
        writer.uint32(82).fork(),
      ).join();
    }
    if (message.disableSelectionChoice !== undefined) {
      DeltaUpdateLabelRequest_DisableSelectionChoiceRequest.encode(
        message.disableSelectionChoice,
        writer.uint32(90).fork(),
      ).join();
    }
    if (message.deleteSelectionChoice !== undefined) {
      DeltaUpdateLabelRequest_DeleteSelectionChoiceRequest.encode(
        message.deleteSelectionChoice,
        writer.uint32(98).fork(),
      ).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeltaUpdateLabelRequest_Request {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeltaUpdateLabelRequest_Request();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.updateLabel = DeltaUpdateLabelRequest_UpdateLabelPropertiesRequest.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.createField = DeltaUpdateLabelRequest_CreateFieldRequest.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.updateField = DeltaUpdateLabelRequest_UpdateFieldPropertiesRequest.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.updateFieldType = DeltaUpdateLabelRequest_UpdateFieldTypeRequest.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.enableField = DeltaUpdateLabelRequest_EnableFieldRequest.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.disableField = DeltaUpdateLabelRequest_DisableFieldRequest.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.deleteField = DeltaUpdateLabelRequest_DeleteFieldRequest.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.createSelectionChoice = DeltaUpdateLabelRequest_CreateSelectionChoiceRequest.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.updateSelectionChoiceProperties = DeltaUpdateLabelRequest_UpdateSelectionChoicePropertiesRequest
            .decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.enableSelectionChoice = DeltaUpdateLabelRequest_EnableSelectionChoiceRequest.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.disableSelectionChoice = DeltaUpdateLabelRequest_DisableSelectionChoiceRequest.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.deleteSelectionChoice = DeltaUpdateLabelRequest_DeleteSelectionChoiceRequest.decode(
            reader,
            reader.uint32(),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeltaUpdateLabelRequest_Request {
    return {
      updateLabel: isSet(object.updateLabel)
        ? DeltaUpdateLabelRequest_UpdateLabelPropertiesRequest.fromJSON(object.updateLabel)
        : undefined,
      createField: isSet(object.createField)
        ? DeltaUpdateLabelRequest_CreateFieldRequest.fromJSON(object.createField)
        : undefined,
      updateField: isSet(object.updateField)
        ? DeltaUpdateLabelRequest_UpdateFieldPropertiesRequest.fromJSON(object.updateField)
        : undefined,
      updateFieldType: isSet(object.updateFieldType)
        ? DeltaUpdateLabelRequest_UpdateFieldTypeRequest.fromJSON(object.updateFieldType)
        : undefined,
      enableField: isSet(object.enableField)
        ? DeltaUpdateLabelRequest_EnableFieldRequest.fromJSON(object.enableField)
        : undefined,
      disableField: isSet(object.disableField)
        ? DeltaUpdateLabelRequest_DisableFieldRequest.fromJSON(object.disableField)
        : undefined,
      deleteField: isSet(object.deleteField)
        ? DeltaUpdateLabelRequest_DeleteFieldRequest.fromJSON(object.deleteField)
        : undefined,
      createSelectionChoice: isSet(object.createSelectionChoice)
        ? DeltaUpdateLabelRequest_CreateSelectionChoiceRequest.fromJSON(object.createSelectionChoice)
        : undefined,
      updateSelectionChoiceProperties: isSet(object.updateSelectionChoiceProperties)
        ? DeltaUpdateLabelRequest_UpdateSelectionChoicePropertiesRequest.fromJSON(
          object.updateSelectionChoiceProperties,
        )
        : undefined,
      enableSelectionChoice: isSet(object.enableSelectionChoice)
        ? DeltaUpdateLabelRequest_EnableSelectionChoiceRequest.fromJSON(object.enableSelectionChoice)
        : undefined,
      disableSelectionChoice: isSet(object.disableSelectionChoice)
        ? DeltaUpdateLabelRequest_DisableSelectionChoiceRequest.fromJSON(object.disableSelectionChoice)
        : undefined,
      deleteSelectionChoice: isSet(object.deleteSelectionChoice)
        ? DeltaUpdateLabelRequest_DeleteSelectionChoiceRequest.fromJSON(object.deleteSelectionChoice)
        : undefined,
    };
  },

  toJSON(message: DeltaUpdateLabelRequest_Request): unknown {
    const obj: any = {};
    if (message.updateLabel !== undefined) {
      obj.updateLabel = DeltaUpdateLabelRequest_UpdateLabelPropertiesRequest.toJSON(message.updateLabel);
    }
    if (message.createField !== undefined) {
      obj.createField = DeltaUpdateLabelRequest_CreateFieldRequest.toJSON(message.createField);
    }
    if (message.updateField !== undefined) {
      obj.updateField = DeltaUpdateLabelRequest_UpdateFieldPropertiesRequest.toJSON(message.updateField);
    }
    if (message.updateFieldType !== undefined) {
      obj.updateFieldType = DeltaUpdateLabelRequest_UpdateFieldTypeRequest.toJSON(message.updateFieldType);
    }
    if (message.enableField !== undefined) {
      obj.enableField = DeltaUpdateLabelRequest_EnableFieldRequest.toJSON(message.enableField);
    }
    if (message.disableField !== undefined) {
      obj.disableField = DeltaUpdateLabelRequest_DisableFieldRequest.toJSON(message.disableField);
    }
    if (message.deleteField !== undefined) {
      obj.deleteField = DeltaUpdateLabelRequest_DeleteFieldRequest.toJSON(message.deleteField);
    }
    if (message.createSelectionChoice !== undefined) {
      obj.createSelectionChoice = DeltaUpdateLabelRequest_CreateSelectionChoiceRequest.toJSON(
        message.createSelectionChoice,
      );
    }
    if (message.updateSelectionChoiceProperties !== undefined) {
      obj.updateSelectionChoiceProperties = DeltaUpdateLabelRequest_UpdateSelectionChoicePropertiesRequest.toJSON(
        message.updateSelectionChoiceProperties,
      );
    }
    if (message.enableSelectionChoice !== undefined) {
      obj.enableSelectionChoice = DeltaUpdateLabelRequest_EnableSelectionChoiceRequest.toJSON(
        message.enableSelectionChoice,
      );
    }
    if (message.disableSelectionChoice !== undefined) {
      obj.disableSelectionChoice = DeltaUpdateLabelRequest_DisableSelectionChoiceRequest.toJSON(
        message.disableSelectionChoice,
      );
    }
    if (message.deleteSelectionChoice !== undefined) {
      obj.deleteSelectionChoice = DeltaUpdateLabelRequest_DeleteSelectionChoiceRequest.toJSON(
        message.deleteSelectionChoice,
      );
    }
    return obj;
  },

  create(base?: DeepPartial<DeltaUpdateLabelRequest_Request>): DeltaUpdateLabelRequest_Request {
    return DeltaUpdateLabelRequest_Request.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeltaUpdateLabelRequest_Request>): DeltaUpdateLabelRequest_Request {
    const message = createBaseDeltaUpdateLabelRequest_Request();
    message.updateLabel = (object.updateLabel !== undefined && object.updateLabel !== null)
      ? DeltaUpdateLabelRequest_UpdateLabelPropertiesRequest.fromPartial(object.updateLabel)
      : undefined;
    message.createField = (object.createField !== undefined && object.createField !== null)
      ? DeltaUpdateLabelRequest_CreateFieldRequest.fromPartial(object.createField)
      : undefined;
    message.updateField = (object.updateField !== undefined && object.updateField !== null)
      ? DeltaUpdateLabelRequest_UpdateFieldPropertiesRequest.fromPartial(object.updateField)
      : undefined;
    message.updateFieldType = (object.updateFieldType !== undefined && object.updateFieldType !== null)
      ? DeltaUpdateLabelRequest_UpdateFieldTypeRequest.fromPartial(object.updateFieldType)
      : undefined;
    message.enableField = (object.enableField !== undefined && object.enableField !== null)
      ? DeltaUpdateLabelRequest_EnableFieldRequest.fromPartial(object.enableField)
      : undefined;
    message.disableField = (object.disableField !== undefined && object.disableField !== null)
      ? DeltaUpdateLabelRequest_DisableFieldRequest.fromPartial(object.disableField)
      : undefined;
    message.deleteField = (object.deleteField !== undefined && object.deleteField !== null)
      ? DeltaUpdateLabelRequest_DeleteFieldRequest.fromPartial(object.deleteField)
      : undefined;
    message.createSelectionChoice =
      (object.createSelectionChoice !== undefined && object.createSelectionChoice !== null)
        ? DeltaUpdateLabelRequest_CreateSelectionChoiceRequest.fromPartial(object.createSelectionChoice)
        : undefined;
    message.updateSelectionChoiceProperties =
      (object.updateSelectionChoiceProperties !== undefined && object.updateSelectionChoiceProperties !== null)
        ? DeltaUpdateLabelRequest_UpdateSelectionChoicePropertiesRequest.fromPartial(
          object.updateSelectionChoiceProperties,
        )
        : undefined;
    message.enableSelectionChoice =
      (object.enableSelectionChoice !== undefined && object.enableSelectionChoice !== null)
        ? DeltaUpdateLabelRequest_EnableSelectionChoiceRequest.fromPartial(object.enableSelectionChoice)
        : undefined;
    message.disableSelectionChoice =
      (object.disableSelectionChoice !== undefined && object.disableSelectionChoice !== null)
        ? DeltaUpdateLabelRequest_DisableSelectionChoiceRequest.fromPartial(object.disableSelectionChoice)
        : undefined;
    message.deleteSelectionChoice =
      (object.deleteSelectionChoice !== undefined && object.deleteSelectionChoice !== null)
        ? DeltaUpdateLabelRequest_DeleteSelectionChoiceRequest.fromPartial(object.deleteSelectionChoice)
        : undefined;
    return message;
  },
};

function createBaseDeltaUpdateLabelRequest_UpdateLabelPropertiesRequest(): DeltaUpdateLabelRequest_UpdateLabelPropertiesRequest {
  return { updateMask: undefined, properties: undefined };
}

export const DeltaUpdateLabelRequest_UpdateLabelPropertiesRequest: MessageFns<
  DeltaUpdateLabelRequest_UpdateLabelPropertiesRequest
> = {
  encode(
    message: DeltaUpdateLabelRequest_UpdateLabelPropertiesRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(10).fork()).join();
    }
    if (message.properties !== undefined) {
      Label_Properties.encode(message.properties, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeltaUpdateLabelRequest_UpdateLabelPropertiesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeltaUpdateLabelRequest_UpdateLabelPropertiesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.properties = Label_Properties.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeltaUpdateLabelRequest_UpdateLabelPropertiesRequest {
    return {
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      properties: isSet(object.properties) ? Label_Properties.fromJSON(object.properties) : undefined,
    };
  },

  toJSON(message: DeltaUpdateLabelRequest_UpdateLabelPropertiesRequest): unknown {
    const obj: any = {};
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.properties !== undefined) {
      obj.properties = Label_Properties.toJSON(message.properties);
    }
    return obj;
  },

  create(
    base?: DeepPartial<DeltaUpdateLabelRequest_UpdateLabelPropertiesRequest>,
  ): DeltaUpdateLabelRequest_UpdateLabelPropertiesRequest {
    return DeltaUpdateLabelRequest_UpdateLabelPropertiesRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<DeltaUpdateLabelRequest_UpdateLabelPropertiesRequest>,
  ): DeltaUpdateLabelRequest_UpdateLabelPropertiesRequest {
    const message = createBaseDeltaUpdateLabelRequest_UpdateLabelPropertiesRequest();
    message.updateMask = object.updateMask ?? undefined;
    message.properties = (object.properties !== undefined && object.properties !== null)
      ? Label_Properties.fromPartial(object.properties)
      : undefined;
    return message;
  },
};

function createBaseDeltaUpdateLabelRequest_DisableFieldRequest(): DeltaUpdateLabelRequest_DisableFieldRequest {
  return { updateMask: undefined, id: "", disabledPolicy: undefined };
}

export const DeltaUpdateLabelRequest_DisableFieldRequest: MessageFns<DeltaUpdateLabelRequest_DisableFieldRequest> = {
  encode(
    message: DeltaUpdateLabelRequest_DisableFieldRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(10).fork()).join();
    }
    if (message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    if (message.disabledPolicy !== undefined) {
      Lifecycle_DisabledPolicy.encode(message.disabledPolicy, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeltaUpdateLabelRequest_DisableFieldRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeltaUpdateLabelRequest_DisableFieldRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.disabledPolicy = Lifecycle_DisabledPolicy.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeltaUpdateLabelRequest_DisableFieldRequest {
    return {
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      disabledPolicy: isSet(object.disabledPolicy)
        ? Lifecycle_DisabledPolicy.fromJSON(object.disabledPolicy)
        : undefined,
    };
  },

  toJSON(message: DeltaUpdateLabelRequest_DisableFieldRequest): unknown {
    const obj: any = {};
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.disabledPolicy !== undefined) {
      obj.disabledPolicy = Lifecycle_DisabledPolicy.toJSON(message.disabledPolicy);
    }
    return obj;
  },

  create(base?: DeepPartial<DeltaUpdateLabelRequest_DisableFieldRequest>): DeltaUpdateLabelRequest_DisableFieldRequest {
    return DeltaUpdateLabelRequest_DisableFieldRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<DeltaUpdateLabelRequest_DisableFieldRequest>,
  ): DeltaUpdateLabelRequest_DisableFieldRequest {
    const message = createBaseDeltaUpdateLabelRequest_DisableFieldRequest();
    message.updateMask = object.updateMask ?? undefined;
    message.id = object.id ?? "";
    message.disabledPolicy = (object.disabledPolicy !== undefined && object.disabledPolicy !== null)
      ? Lifecycle_DisabledPolicy.fromPartial(object.disabledPolicy)
      : undefined;
    return message;
  },
};

function createBaseDeltaUpdateLabelRequest_EnableFieldRequest(): DeltaUpdateLabelRequest_EnableFieldRequest {
  return { id: "" };
}

export const DeltaUpdateLabelRequest_EnableFieldRequest: MessageFns<DeltaUpdateLabelRequest_EnableFieldRequest> = {
  encode(message: DeltaUpdateLabelRequest_EnableFieldRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeltaUpdateLabelRequest_EnableFieldRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeltaUpdateLabelRequest_EnableFieldRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeltaUpdateLabelRequest_EnableFieldRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: DeltaUpdateLabelRequest_EnableFieldRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<DeltaUpdateLabelRequest_EnableFieldRequest>): DeltaUpdateLabelRequest_EnableFieldRequest {
    return DeltaUpdateLabelRequest_EnableFieldRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<DeltaUpdateLabelRequest_EnableFieldRequest>,
  ): DeltaUpdateLabelRequest_EnableFieldRequest {
    const message = createBaseDeltaUpdateLabelRequest_EnableFieldRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseDeltaUpdateLabelRequest_DeleteFieldRequest(): DeltaUpdateLabelRequest_DeleteFieldRequest {
  return { id: "" };
}

export const DeltaUpdateLabelRequest_DeleteFieldRequest: MessageFns<DeltaUpdateLabelRequest_DeleteFieldRequest> = {
  encode(message: DeltaUpdateLabelRequest_DeleteFieldRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeltaUpdateLabelRequest_DeleteFieldRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeltaUpdateLabelRequest_DeleteFieldRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeltaUpdateLabelRequest_DeleteFieldRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: DeltaUpdateLabelRequest_DeleteFieldRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<DeltaUpdateLabelRequest_DeleteFieldRequest>): DeltaUpdateLabelRequest_DeleteFieldRequest {
    return DeltaUpdateLabelRequest_DeleteFieldRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<DeltaUpdateLabelRequest_DeleteFieldRequest>,
  ): DeltaUpdateLabelRequest_DeleteFieldRequest {
    const message = createBaseDeltaUpdateLabelRequest_DeleteFieldRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseDeltaUpdateLabelRequest_CreateFieldRequest(): DeltaUpdateLabelRequest_CreateFieldRequest {
  return { field: undefined };
}

export const DeltaUpdateLabelRequest_CreateFieldRequest: MessageFns<DeltaUpdateLabelRequest_CreateFieldRequest> = {
  encode(message: DeltaUpdateLabelRequest_CreateFieldRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.field !== undefined) {
      Field.encode(message.field, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeltaUpdateLabelRequest_CreateFieldRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeltaUpdateLabelRequest_CreateFieldRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.field = Field.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeltaUpdateLabelRequest_CreateFieldRequest {
    return { field: isSet(object.field) ? Field.fromJSON(object.field) : undefined };
  },

  toJSON(message: DeltaUpdateLabelRequest_CreateFieldRequest): unknown {
    const obj: any = {};
    if (message.field !== undefined) {
      obj.field = Field.toJSON(message.field);
    }
    return obj;
  },

  create(base?: DeepPartial<DeltaUpdateLabelRequest_CreateFieldRequest>): DeltaUpdateLabelRequest_CreateFieldRequest {
    return DeltaUpdateLabelRequest_CreateFieldRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<DeltaUpdateLabelRequest_CreateFieldRequest>,
  ): DeltaUpdateLabelRequest_CreateFieldRequest {
    const message = createBaseDeltaUpdateLabelRequest_CreateFieldRequest();
    message.field = (object.field !== undefined && object.field !== null) ? Field.fromPartial(object.field) : undefined;
    return message;
  },
};

function createBaseDeltaUpdateLabelRequest_UpdateFieldPropertiesRequest(): DeltaUpdateLabelRequest_UpdateFieldPropertiesRequest {
  return { updateMask: undefined, id: "", properties: undefined };
}

export const DeltaUpdateLabelRequest_UpdateFieldPropertiesRequest: MessageFns<
  DeltaUpdateLabelRequest_UpdateFieldPropertiesRequest
> = {
  encode(
    message: DeltaUpdateLabelRequest_UpdateFieldPropertiesRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(10).fork()).join();
    }
    if (message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    if (message.properties !== undefined) {
      Field_Properties.encode(message.properties, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeltaUpdateLabelRequest_UpdateFieldPropertiesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeltaUpdateLabelRequest_UpdateFieldPropertiesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.properties = Field_Properties.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeltaUpdateLabelRequest_UpdateFieldPropertiesRequest {
    return {
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      properties: isSet(object.properties) ? Field_Properties.fromJSON(object.properties) : undefined,
    };
  },

  toJSON(message: DeltaUpdateLabelRequest_UpdateFieldPropertiesRequest): unknown {
    const obj: any = {};
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.properties !== undefined) {
      obj.properties = Field_Properties.toJSON(message.properties);
    }
    return obj;
  },

  create(
    base?: DeepPartial<DeltaUpdateLabelRequest_UpdateFieldPropertiesRequest>,
  ): DeltaUpdateLabelRequest_UpdateFieldPropertiesRequest {
    return DeltaUpdateLabelRequest_UpdateFieldPropertiesRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<DeltaUpdateLabelRequest_UpdateFieldPropertiesRequest>,
  ): DeltaUpdateLabelRequest_UpdateFieldPropertiesRequest {
    const message = createBaseDeltaUpdateLabelRequest_UpdateFieldPropertiesRequest();
    message.updateMask = object.updateMask ?? undefined;
    message.id = object.id ?? "";
    message.properties = (object.properties !== undefined && object.properties !== null)
      ? Field_Properties.fromPartial(object.properties)
      : undefined;
    return message;
  },
};

function createBaseDeltaUpdateLabelRequest_UpdateFieldTypeRequest(): DeltaUpdateLabelRequest_UpdateFieldTypeRequest {
  return {
    textOptions: undefined,
    integerOptions: undefined,
    dateOptions: undefined,
    selectionOptions: undefined,
    userOptions: undefined,
    updateMask: undefined,
    id: "",
  };
}

export const DeltaUpdateLabelRequest_UpdateFieldTypeRequest: MessageFns<
  DeltaUpdateLabelRequest_UpdateFieldTypeRequest
> = {
  encode(
    message: DeltaUpdateLabelRequest_UpdateFieldTypeRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.textOptions !== undefined) {
      Field_TextOptions.encode(message.textOptions, writer.uint32(26).fork()).join();
    }
    if (message.integerOptions !== undefined) {
      Field_IntegerOptions.encode(message.integerOptions, writer.uint32(42).fork()).join();
    }
    if (message.dateOptions !== undefined) {
      Field_DateOptions.encode(message.dateOptions, writer.uint32(50).fork()).join();
    }
    if (message.selectionOptions !== undefined) {
      Field_SelectionOptions.encode(message.selectionOptions, writer.uint32(58).fork()).join();
    }
    if (message.userOptions !== undefined) {
      Field_UserOptions.encode(message.userOptions, writer.uint32(66).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(10).fork()).join();
    }
    if (message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeltaUpdateLabelRequest_UpdateFieldTypeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeltaUpdateLabelRequest_UpdateFieldTypeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 3:
          if (tag !== 26) {
            break;
          }

          message.textOptions = Field_TextOptions.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.integerOptions = Field_IntegerOptions.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.dateOptions = Field_DateOptions.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.selectionOptions = Field_SelectionOptions.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.userOptions = Field_UserOptions.decode(reader, reader.uint32());
          continue;
        case 1:
          if (tag !== 10) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeltaUpdateLabelRequest_UpdateFieldTypeRequest {
    return {
      textOptions: isSet(object.textOptions) ? Field_TextOptions.fromJSON(object.textOptions) : undefined,
      integerOptions: isSet(object.integerOptions) ? Field_IntegerOptions.fromJSON(object.integerOptions) : undefined,
      dateOptions: isSet(object.dateOptions) ? Field_DateOptions.fromJSON(object.dateOptions) : undefined,
      selectionOptions: isSet(object.selectionOptions)
        ? Field_SelectionOptions.fromJSON(object.selectionOptions)
        : undefined,
      userOptions: isSet(object.userOptions) ? Field_UserOptions.fromJSON(object.userOptions) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      id: isSet(object.id) ? globalThis.String(object.id) : "",
    };
  },

  toJSON(message: DeltaUpdateLabelRequest_UpdateFieldTypeRequest): unknown {
    const obj: any = {};
    if (message.textOptions !== undefined) {
      obj.textOptions = Field_TextOptions.toJSON(message.textOptions);
    }
    if (message.integerOptions !== undefined) {
      obj.integerOptions = Field_IntegerOptions.toJSON(message.integerOptions);
    }
    if (message.dateOptions !== undefined) {
      obj.dateOptions = Field_DateOptions.toJSON(message.dateOptions);
    }
    if (message.selectionOptions !== undefined) {
      obj.selectionOptions = Field_SelectionOptions.toJSON(message.selectionOptions);
    }
    if (message.userOptions !== undefined) {
      obj.userOptions = Field_UserOptions.toJSON(message.userOptions);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(
    base?: DeepPartial<DeltaUpdateLabelRequest_UpdateFieldTypeRequest>,
  ): DeltaUpdateLabelRequest_UpdateFieldTypeRequest {
    return DeltaUpdateLabelRequest_UpdateFieldTypeRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<DeltaUpdateLabelRequest_UpdateFieldTypeRequest>,
  ): DeltaUpdateLabelRequest_UpdateFieldTypeRequest {
    const message = createBaseDeltaUpdateLabelRequest_UpdateFieldTypeRequest();
    message.textOptions = (object.textOptions !== undefined && object.textOptions !== null)
      ? Field_TextOptions.fromPartial(object.textOptions)
      : undefined;
    message.integerOptions = (object.integerOptions !== undefined && object.integerOptions !== null)
      ? Field_IntegerOptions.fromPartial(object.integerOptions)
      : undefined;
    message.dateOptions = (object.dateOptions !== undefined && object.dateOptions !== null)
      ? Field_DateOptions.fromPartial(object.dateOptions)
      : undefined;
    message.selectionOptions = (object.selectionOptions !== undefined && object.selectionOptions !== null)
      ? Field_SelectionOptions.fromPartial(object.selectionOptions)
      : undefined;
    message.userOptions = (object.userOptions !== undefined && object.userOptions !== null)
      ? Field_UserOptions.fromPartial(object.userOptions)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseDeltaUpdateLabelRequest_CreateSelectionChoiceRequest(): DeltaUpdateLabelRequest_CreateSelectionChoiceRequest {
  return { fieldId: "", choice: undefined };
}

export const DeltaUpdateLabelRequest_CreateSelectionChoiceRequest: MessageFns<
  DeltaUpdateLabelRequest_CreateSelectionChoiceRequest
> = {
  encode(
    message: DeltaUpdateLabelRequest_CreateSelectionChoiceRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.fieldId !== "") {
      writer.uint32(10).string(message.fieldId);
    }
    if (message.choice !== undefined) {
      Field_SelectionOptions_Choice.encode(message.choice, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeltaUpdateLabelRequest_CreateSelectionChoiceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeltaUpdateLabelRequest_CreateSelectionChoiceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.fieldId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.choice = Field_SelectionOptions_Choice.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeltaUpdateLabelRequest_CreateSelectionChoiceRequest {
    return {
      fieldId: isSet(object.fieldId) ? globalThis.String(object.fieldId) : "",
      choice: isSet(object.choice) ? Field_SelectionOptions_Choice.fromJSON(object.choice) : undefined,
    };
  },

  toJSON(message: DeltaUpdateLabelRequest_CreateSelectionChoiceRequest): unknown {
    const obj: any = {};
    if (message.fieldId !== "") {
      obj.fieldId = message.fieldId;
    }
    if (message.choice !== undefined) {
      obj.choice = Field_SelectionOptions_Choice.toJSON(message.choice);
    }
    return obj;
  },

  create(
    base?: DeepPartial<DeltaUpdateLabelRequest_CreateSelectionChoiceRequest>,
  ): DeltaUpdateLabelRequest_CreateSelectionChoiceRequest {
    return DeltaUpdateLabelRequest_CreateSelectionChoiceRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<DeltaUpdateLabelRequest_CreateSelectionChoiceRequest>,
  ): DeltaUpdateLabelRequest_CreateSelectionChoiceRequest {
    const message = createBaseDeltaUpdateLabelRequest_CreateSelectionChoiceRequest();
    message.fieldId = object.fieldId ?? "";
    message.choice = (object.choice !== undefined && object.choice !== null)
      ? Field_SelectionOptions_Choice.fromPartial(object.choice)
      : undefined;
    return message;
  },
};

function createBaseDeltaUpdateLabelRequest_UpdateSelectionChoicePropertiesRequest(): DeltaUpdateLabelRequest_UpdateSelectionChoicePropertiesRequest {
  return { updateMask: undefined, fieldId: "", id: "", properties: undefined };
}

export const DeltaUpdateLabelRequest_UpdateSelectionChoicePropertiesRequest: MessageFns<
  DeltaUpdateLabelRequest_UpdateSelectionChoicePropertiesRequest
> = {
  encode(
    message: DeltaUpdateLabelRequest_UpdateSelectionChoicePropertiesRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(10).fork()).join();
    }
    if (message.fieldId !== "") {
      writer.uint32(18).string(message.fieldId);
    }
    if (message.id !== "") {
      writer.uint32(26).string(message.id);
    }
    if (message.properties !== undefined) {
      Field_SelectionOptions_Choice_Properties.encode(message.properties, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): DeltaUpdateLabelRequest_UpdateSelectionChoicePropertiesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeltaUpdateLabelRequest_UpdateSelectionChoicePropertiesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.fieldId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.id = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.properties = Field_SelectionOptions_Choice_Properties.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeltaUpdateLabelRequest_UpdateSelectionChoicePropertiesRequest {
    return {
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      fieldId: isSet(object.fieldId) ? globalThis.String(object.fieldId) : "",
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      properties: isSet(object.properties)
        ? Field_SelectionOptions_Choice_Properties.fromJSON(object.properties)
        : undefined,
    };
  },

  toJSON(message: DeltaUpdateLabelRequest_UpdateSelectionChoicePropertiesRequest): unknown {
    const obj: any = {};
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.fieldId !== "") {
      obj.fieldId = message.fieldId;
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.properties !== undefined) {
      obj.properties = Field_SelectionOptions_Choice_Properties.toJSON(message.properties);
    }
    return obj;
  },

  create(
    base?: DeepPartial<DeltaUpdateLabelRequest_UpdateSelectionChoicePropertiesRequest>,
  ): DeltaUpdateLabelRequest_UpdateSelectionChoicePropertiesRequest {
    return DeltaUpdateLabelRequest_UpdateSelectionChoicePropertiesRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<DeltaUpdateLabelRequest_UpdateSelectionChoicePropertiesRequest>,
  ): DeltaUpdateLabelRequest_UpdateSelectionChoicePropertiesRequest {
    const message = createBaseDeltaUpdateLabelRequest_UpdateSelectionChoicePropertiesRequest();
    message.updateMask = object.updateMask ?? undefined;
    message.fieldId = object.fieldId ?? "";
    message.id = object.id ?? "";
    message.properties = (object.properties !== undefined && object.properties !== null)
      ? Field_SelectionOptions_Choice_Properties.fromPartial(object.properties)
      : undefined;
    return message;
  },
};

function createBaseDeltaUpdateLabelRequest_DeleteSelectionChoiceRequest(): DeltaUpdateLabelRequest_DeleteSelectionChoiceRequest {
  return { fieldId: "", id: "" };
}

export const DeltaUpdateLabelRequest_DeleteSelectionChoiceRequest: MessageFns<
  DeltaUpdateLabelRequest_DeleteSelectionChoiceRequest
> = {
  encode(
    message: DeltaUpdateLabelRequest_DeleteSelectionChoiceRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.fieldId !== "") {
      writer.uint32(10).string(message.fieldId);
    }
    if (message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeltaUpdateLabelRequest_DeleteSelectionChoiceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeltaUpdateLabelRequest_DeleteSelectionChoiceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.fieldId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeltaUpdateLabelRequest_DeleteSelectionChoiceRequest {
    return {
      fieldId: isSet(object.fieldId) ? globalThis.String(object.fieldId) : "",
      id: isSet(object.id) ? globalThis.String(object.id) : "",
    };
  },

  toJSON(message: DeltaUpdateLabelRequest_DeleteSelectionChoiceRequest): unknown {
    const obj: any = {};
    if (message.fieldId !== "") {
      obj.fieldId = message.fieldId;
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(
    base?: DeepPartial<DeltaUpdateLabelRequest_DeleteSelectionChoiceRequest>,
  ): DeltaUpdateLabelRequest_DeleteSelectionChoiceRequest {
    return DeltaUpdateLabelRequest_DeleteSelectionChoiceRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<DeltaUpdateLabelRequest_DeleteSelectionChoiceRequest>,
  ): DeltaUpdateLabelRequest_DeleteSelectionChoiceRequest {
    const message = createBaseDeltaUpdateLabelRequest_DeleteSelectionChoiceRequest();
    message.fieldId = object.fieldId ?? "";
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseDeltaUpdateLabelRequest_DisableSelectionChoiceRequest(): DeltaUpdateLabelRequest_DisableSelectionChoiceRequest {
  return { updateMask: undefined, fieldId: "", id: "", disabledPolicy: undefined };
}

export const DeltaUpdateLabelRequest_DisableSelectionChoiceRequest: MessageFns<
  DeltaUpdateLabelRequest_DisableSelectionChoiceRequest
> = {
  encode(
    message: DeltaUpdateLabelRequest_DisableSelectionChoiceRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(10).fork()).join();
    }
    if (message.fieldId !== "") {
      writer.uint32(18).string(message.fieldId);
    }
    if (message.id !== "") {
      writer.uint32(26).string(message.id);
    }
    if (message.disabledPolicy !== undefined) {
      Lifecycle_DisabledPolicy.encode(message.disabledPolicy, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeltaUpdateLabelRequest_DisableSelectionChoiceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeltaUpdateLabelRequest_DisableSelectionChoiceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.fieldId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.id = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.disabledPolicy = Lifecycle_DisabledPolicy.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeltaUpdateLabelRequest_DisableSelectionChoiceRequest {
    return {
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      fieldId: isSet(object.fieldId) ? globalThis.String(object.fieldId) : "",
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      disabledPolicy: isSet(object.disabledPolicy)
        ? Lifecycle_DisabledPolicy.fromJSON(object.disabledPolicy)
        : undefined,
    };
  },

  toJSON(message: DeltaUpdateLabelRequest_DisableSelectionChoiceRequest): unknown {
    const obj: any = {};
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.fieldId !== "") {
      obj.fieldId = message.fieldId;
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.disabledPolicy !== undefined) {
      obj.disabledPolicy = Lifecycle_DisabledPolicy.toJSON(message.disabledPolicy);
    }
    return obj;
  },

  create(
    base?: DeepPartial<DeltaUpdateLabelRequest_DisableSelectionChoiceRequest>,
  ): DeltaUpdateLabelRequest_DisableSelectionChoiceRequest {
    return DeltaUpdateLabelRequest_DisableSelectionChoiceRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<DeltaUpdateLabelRequest_DisableSelectionChoiceRequest>,
  ): DeltaUpdateLabelRequest_DisableSelectionChoiceRequest {
    const message = createBaseDeltaUpdateLabelRequest_DisableSelectionChoiceRequest();
    message.updateMask = object.updateMask ?? undefined;
    message.fieldId = object.fieldId ?? "";
    message.id = object.id ?? "";
    message.disabledPolicy = (object.disabledPolicy !== undefined && object.disabledPolicy !== null)
      ? Lifecycle_DisabledPolicy.fromPartial(object.disabledPolicy)
      : undefined;
    return message;
  },
};

function createBaseDeltaUpdateLabelRequest_EnableSelectionChoiceRequest(): DeltaUpdateLabelRequest_EnableSelectionChoiceRequest {
  return { fieldId: "", id: "" };
}

export const DeltaUpdateLabelRequest_EnableSelectionChoiceRequest: MessageFns<
  DeltaUpdateLabelRequest_EnableSelectionChoiceRequest
> = {
  encode(
    message: DeltaUpdateLabelRequest_EnableSelectionChoiceRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.fieldId !== "") {
      writer.uint32(10).string(message.fieldId);
    }
    if (message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeltaUpdateLabelRequest_EnableSelectionChoiceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeltaUpdateLabelRequest_EnableSelectionChoiceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.fieldId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeltaUpdateLabelRequest_EnableSelectionChoiceRequest {
    return {
      fieldId: isSet(object.fieldId) ? globalThis.String(object.fieldId) : "",
      id: isSet(object.id) ? globalThis.String(object.id) : "",
    };
  },

  toJSON(message: DeltaUpdateLabelRequest_EnableSelectionChoiceRequest): unknown {
    const obj: any = {};
    if (message.fieldId !== "") {
      obj.fieldId = message.fieldId;
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(
    base?: DeepPartial<DeltaUpdateLabelRequest_EnableSelectionChoiceRequest>,
  ): DeltaUpdateLabelRequest_EnableSelectionChoiceRequest {
    return DeltaUpdateLabelRequest_EnableSelectionChoiceRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<DeltaUpdateLabelRequest_EnableSelectionChoiceRequest>,
  ): DeltaUpdateLabelRequest_EnableSelectionChoiceRequest {
    const message = createBaseDeltaUpdateLabelRequest_EnableSelectionChoiceRequest();
    message.fieldId = object.fieldId ?? "";
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseDeltaUpdateLabelResponse(): DeltaUpdateLabelResponse {
  return { responses: [], updatedLabel: undefined };
}

export const DeltaUpdateLabelResponse: MessageFns<DeltaUpdateLabelResponse> = {
  encode(message: DeltaUpdateLabelResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.responses) {
      DeltaUpdateLabelResponse_Response.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.updatedLabel !== undefined) {
      Label.encode(message.updatedLabel, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeltaUpdateLabelResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeltaUpdateLabelResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.responses.push(DeltaUpdateLabelResponse_Response.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.updatedLabel = Label.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeltaUpdateLabelResponse {
    return {
      responses: globalThis.Array.isArray(object?.responses)
        ? object.responses.map((e: any) => DeltaUpdateLabelResponse_Response.fromJSON(e))
        : [],
      updatedLabel: isSet(object.updatedLabel) ? Label.fromJSON(object.updatedLabel) : undefined,
    };
  },

  toJSON(message: DeltaUpdateLabelResponse): unknown {
    const obj: any = {};
    if (message.responses?.length) {
      obj.responses = message.responses.map((e) => DeltaUpdateLabelResponse_Response.toJSON(e));
    }
    if (message.updatedLabel !== undefined) {
      obj.updatedLabel = Label.toJSON(message.updatedLabel);
    }
    return obj;
  },

  create(base?: DeepPartial<DeltaUpdateLabelResponse>): DeltaUpdateLabelResponse {
    return DeltaUpdateLabelResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeltaUpdateLabelResponse>): DeltaUpdateLabelResponse {
    const message = createBaseDeltaUpdateLabelResponse();
    message.responses = object.responses?.map((e) => DeltaUpdateLabelResponse_Response.fromPartial(e)) || [];
    message.updatedLabel = (object.updatedLabel !== undefined && object.updatedLabel !== null)
      ? Label.fromPartial(object.updatedLabel)
      : undefined;
    return message;
  },
};

function createBaseDeltaUpdateLabelResponse_Response(): DeltaUpdateLabelResponse_Response {
  return {
    updateLabel: undefined,
    createField: undefined,
    updateField: undefined,
    updateFieldType: undefined,
    enableField: undefined,
    disableField: undefined,
    deleteField: undefined,
    createSelectionChoice: undefined,
    updateSelectionChoiceProperties: undefined,
    enableSelectionChoice: undefined,
    disableSelectionChoice: undefined,
    deleteSelectionChoice: undefined,
  };
}

export const DeltaUpdateLabelResponse_Response: MessageFns<DeltaUpdateLabelResponse_Response> = {
  encode(message: DeltaUpdateLabelResponse_Response, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.updateLabel !== undefined) {
      DeltaUpdateLabelResponse_UpdateLabelPropertiesResponse.encode(message.updateLabel, writer.uint32(10).fork())
        .join();
    }
    if (message.createField !== undefined) {
      DeltaUpdateLabelResponse_CreateFieldResponse.encode(message.createField, writer.uint32(18).fork()).join();
    }
    if (message.updateField !== undefined) {
      DeltaUpdateLabelResponse_UpdateFieldPropertiesResponse.encode(message.updateField, writer.uint32(26).fork())
        .join();
    }
    if (message.updateFieldType !== undefined) {
      DeltaUpdateLabelResponse_UpdateFieldTypeResponse.encode(message.updateFieldType, writer.uint32(34).fork()).join();
    }
    if (message.enableField !== undefined) {
      DeltaUpdateLabelResponse_EnableFieldResponse.encode(message.enableField, writer.uint32(42).fork()).join();
    }
    if (message.disableField !== undefined) {
      DeltaUpdateLabelResponse_DisableFieldResponse.encode(message.disableField, writer.uint32(50).fork()).join();
    }
    if (message.deleteField !== undefined) {
      DeltaUpdateLabelResponse_DeleteFieldResponse.encode(message.deleteField, writer.uint32(58).fork()).join();
    }
    if (message.createSelectionChoice !== undefined) {
      DeltaUpdateLabelResponse_CreateSelectionChoiceResponse.encode(
        message.createSelectionChoice,
        writer.uint32(66).fork(),
      ).join();
    }
    if (message.updateSelectionChoiceProperties !== undefined) {
      DeltaUpdateLabelResponse_UpdateSelectionChoicePropertiesResponse.encode(
        message.updateSelectionChoiceProperties,
        writer.uint32(74).fork(),
      ).join();
    }
    if (message.enableSelectionChoice !== undefined) {
      DeltaUpdateLabelResponse_EnableSelectionChoiceResponse.encode(
        message.enableSelectionChoice,
        writer.uint32(82).fork(),
      ).join();
    }
    if (message.disableSelectionChoice !== undefined) {
      DeltaUpdateLabelResponse_DisableSelectionChoiceResponse.encode(
        message.disableSelectionChoice,
        writer.uint32(90).fork(),
      ).join();
    }
    if (message.deleteSelectionChoice !== undefined) {
      DeltaUpdateLabelResponse_DeleteSelectionChoiceResponse.encode(
        message.deleteSelectionChoice,
        writer.uint32(98).fork(),
      ).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeltaUpdateLabelResponse_Response {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeltaUpdateLabelResponse_Response();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.updateLabel = DeltaUpdateLabelResponse_UpdateLabelPropertiesResponse.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.createField = DeltaUpdateLabelResponse_CreateFieldResponse.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.updateField = DeltaUpdateLabelResponse_UpdateFieldPropertiesResponse.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.updateFieldType = DeltaUpdateLabelResponse_UpdateFieldTypeResponse.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.enableField = DeltaUpdateLabelResponse_EnableFieldResponse.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.disableField = DeltaUpdateLabelResponse_DisableFieldResponse.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.deleteField = DeltaUpdateLabelResponse_DeleteFieldResponse.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.createSelectionChoice = DeltaUpdateLabelResponse_CreateSelectionChoiceResponse.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.updateSelectionChoiceProperties = DeltaUpdateLabelResponse_UpdateSelectionChoicePropertiesResponse
            .decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.enableSelectionChoice = DeltaUpdateLabelResponse_EnableSelectionChoiceResponse.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.disableSelectionChoice = DeltaUpdateLabelResponse_DisableSelectionChoiceResponse.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.deleteSelectionChoice = DeltaUpdateLabelResponse_DeleteSelectionChoiceResponse.decode(
            reader,
            reader.uint32(),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeltaUpdateLabelResponse_Response {
    return {
      updateLabel: isSet(object.updateLabel)
        ? DeltaUpdateLabelResponse_UpdateLabelPropertiesResponse.fromJSON(object.updateLabel)
        : undefined,
      createField: isSet(object.createField)
        ? DeltaUpdateLabelResponse_CreateFieldResponse.fromJSON(object.createField)
        : undefined,
      updateField: isSet(object.updateField)
        ? DeltaUpdateLabelResponse_UpdateFieldPropertiesResponse.fromJSON(object.updateField)
        : undefined,
      updateFieldType: isSet(object.updateFieldType)
        ? DeltaUpdateLabelResponse_UpdateFieldTypeResponse.fromJSON(object.updateFieldType)
        : undefined,
      enableField: isSet(object.enableField)
        ? DeltaUpdateLabelResponse_EnableFieldResponse.fromJSON(object.enableField)
        : undefined,
      disableField: isSet(object.disableField)
        ? DeltaUpdateLabelResponse_DisableFieldResponse.fromJSON(object.disableField)
        : undefined,
      deleteField: isSet(object.deleteField)
        ? DeltaUpdateLabelResponse_DeleteFieldResponse.fromJSON(object.deleteField)
        : undefined,
      createSelectionChoice: isSet(object.createSelectionChoice)
        ? DeltaUpdateLabelResponse_CreateSelectionChoiceResponse.fromJSON(object.createSelectionChoice)
        : undefined,
      updateSelectionChoiceProperties: isSet(object.updateSelectionChoiceProperties)
        ? DeltaUpdateLabelResponse_UpdateSelectionChoicePropertiesResponse.fromJSON(
          object.updateSelectionChoiceProperties,
        )
        : undefined,
      enableSelectionChoice: isSet(object.enableSelectionChoice)
        ? DeltaUpdateLabelResponse_EnableSelectionChoiceResponse.fromJSON(object.enableSelectionChoice)
        : undefined,
      disableSelectionChoice: isSet(object.disableSelectionChoice)
        ? DeltaUpdateLabelResponse_DisableSelectionChoiceResponse.fromJSON(object.disableSelectionChoice)
        : undefined,
      deleteSelectionChoice: isSet(object.deleteSelectionChoice)
        ? DeltaUpdateLabelResponse_DeleteSelectionChoiceResponse.fromJSON(object.deleteSelectionChoice)
        : undefined,
    };
  },

  toJSON(message: DeltaUpdateLabelResponse_Response): unknown {
    const obj: any = {};
    if (message.updateLabel !== undefined) {
      obj.updateLabel = DeltaUpdateLabelResponse_UpdateLabelPropertiesResponse.toJSON(message.updateLabel);
    }
    if (message.createField !== undefined) {
      obj.createField = DeltaUpdateLabelResponse_CreateFieldResponse.toJSON(message.createField);
    }
    if (message.updateField !== undefined) {
      obj.updateField = DeltaUpdateLabelResponse_UpdateFieldPropertiesResponse.toJSON(message.updateField);
    }
    if (message.updateFieldType !== undefined) {
      obj.updateFieldType = DeltaUpdateLabelResponse_UpdateFieldTypeResponse.toJSON(message.updateFieldType);
    }
    if (message.enableField !== undefined) {
      obj.enableField = DeltaUpdateLabelResponse_EnableFieldResponse.toJSON(message.enableField);
    }
    if (message.disableField !== undefined) {
      obj.disableField = DeltaUpdateLabelResponse_DisableFieldResponse.toJSON(message.disableField);
    }
    if (message.deleteField !== undefined) {
      obj.deleteField = DeltaUpdateLabelResponse_DeleteFieldResponse.toJSON(message.deleteField);
    }
    if (message.createSelectionChoice !== undefined) {
      obj.createSelectionChoice = DeltaUpdateLabelResponse_CreateSelectionChoiceResponse.toJSON(
        message.createSelectionChoice,
      );
    }
    if (message.updateSelectionChoiceProperties !== undefined) {
      obj.updateSelectionChoiceProperties = DeltaUpdateLabelResponse_UpdateSelectionChoicePropertiesResponse.toJSON(
        message.updateSelectionChoiceProperties,
      );
    }
    if (message.enableSelectionChoice !== undefined) {
      obj.enableSelectionChoice = DeltaUpdateLabelResponse_EnableSelectionChoiceResponse.toJSON(
        message.enableSelectionChoice,
      );
    }
    if (message.disableSelectionChoice !== undefined) {
      obj.disableSelectionChoice = DeltaUpdateLabelResponse_DisableSelectionChoiceResponse.toJSON(
        message.disableSelectionChoice,
      );
    }
    if (message.deleteSelectionChoice !== undefined) {
      obj.deleteSelectionChoice = DeltaUpdateLabelResponse_DeleteSelectionChoiceResponse.toJSON(
        message.deleteSelectionChoice,
      );
    }
    return obj;
  },

  create(base?: DeepPartial<DeltaUpdateLabelResponse_Response>): DeltaUpdateLabelResponse_Response {
    return DeltaUpdateLabelResponse_Response.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeltaUpdateLabelResponse_Response>): DeltaUpdateLabelResponse_Response {
    const message = createBaseDeltaUpdateLabelResponse_Response();
    message.updateLabel = (object.updateLabel !== undefined && object.updateLabel !== null)
      ? DeltaUpdateLabelResponse_UpdateLabelPropertiesResponse.fromPartial(object.updateLabel)
      : undefined;
    message.createField = (object.createField !== undefined && object.createField !== null)
      ? DeltaUpdateLabelResponse_CreateFieldResponse.fromPartial(object.createField)
      : undefined;
    message.updateField = (object.updateField !== undefined && object.updateField !== null)
      ? DeltaUpdateLabelResponse_UpdateFieldPropertiesResponse.fromPartial(object.updateField)
      : undefined;
    message.updateFieldType = (object.updateFieldType !== undefined && object.updateFieldType !== null)
      ? DeltaUpdateLabelResponse_UpdateFieldTypeResponse.fromPartial(object.updateFieldType)
      : undefined;
    message.enableField = (object.enableField !== undefined && object.enableField !== null)
      ? DeltaUpdateLabelResponse_EnableFieldResponse.fromPartial(object.enableField)
      : undefined;
    message.disableField = (object.disableField !== undefined && object.disableField !== null)
      ? DeltaUpdateLabelResponse_DisableFieldResponse.fromPartial(object.disableField)
      : undefined;
    message.deleteField = (object.deleteField !== undefined && object.deleteField !== null)
      ? DeltaUpdateLabelResponse_DeleteFieldResponse.fromPartial(object.deleteField)
      : undefined;
    message.createSelectionChoice =
      (object.createSelectionChoice !== undefined && object.createSelectionChoice !== null)
        ? DeltaUpdateLabelResponse_CreateSelectionChoiceResponse.fromPartial(object.createSelectionChoice)
        : undefined;
    message.updateSelectionChoiceProperties =
      (object.updateSelectionChoiceProperties !== undefined && object.updateSelectionChoiceProperties !== null)
        ? DeltaUpdateLabelResponse_UpdateSelectionChoicePropertiesResponse.fromPartial(
          object.updateSelectionChoiceProperties,
        )
        : undefined;
    message.enableSelectionChoice =
      (object.enableSelectionChoice !== undefined && object.enableSelectionChoice !== null)
        ? DeltaUpdateLabelResponse_EnableSelectionChoiceResponse.fromPartial(object.enableSelectionChoice)
        : undefined;
    message.disableSelectionChoice =
      (object.disableSelectionChoice !== undefined && object.disableSelectionChoice !== null)
        ? DeltaUpdateLabelResponse_DisableSelectionChoiceResponse.fromPartial(object.disableSelectionChoice)
        : undefined;
    message.deleteSelectionChoice =
      (object.deleteSelectionChoice !== undefined && object.deleteSelectionChoice !== null)
        ? DeltaUpdateLabelResponse_DeleteSelectionChoiceResponse.fromPartial(object.deleteSelectionChoice)
        : undefined;
    return message;
  },
};

function createBaseDeltaUpdateLabelResponse_UpdateLabelPropertiesResponse(): DeltaUpdateLabelResponse_UpdateLabelPropertiesResponse {
  return {};
}

export const DeltaUpdateLabelResponse_UpdateLabelPropertiesResponse: MessageFns<
  DeltaUpdateLabelResponse_UpdateLabelPropertiesResponse
> = {
  encode(
    _: DeltaUpdateLabelResponse_UpdateLabelPropertiesResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeltaUpdateLabelResponse_UpdateLabelPropertiesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeltaUpdateLabelResponse_UpdateLabelPropertiesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): DeltaUpdateLabelResponse_UpdateLabelPropertiesResponse {
    return {};
  },

  toJSON(_: DeltaUpdateLabelResponse_UpdateLabelPropertiesResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(
    base?: DeepPartial<DeltaUpdateLabelResponse_UpdateLabelPropertiesResponse>,
  ): DeltaUpdateLabelResponse_UpdateLabelPropertiesResponse {
    return DeltaUpdateLabelResponse_UpdateLabelPropertiesResponse.fromPartial(base ?? {});
  },
  fromPartial(
    _: DeepPartial<DeltaUpdateLabelResponse_UpdateLabelPropertiesResponse>,
  ): DeltaUpdateLabelResponse_UpdateLabelPropertiesResponse {
    const message = createBaseDeltaUpdateLabelResponse_UpdateLabelPropertiesResponse();
    return message;
  },
};

function createBaseDeltaUpdateLabelResponse_CreateFieldResponse(): DeltaUpdateLabelResponse_CreateFieldResponse {
  return { id: "", priority: 0 };
}

export const DeltaUpdateLabelResponse_CreateFieldResponse: MessageFns<DeltaUpdateLabelResponse_CreateFieldResponse> = {
  encode(
    message: DeltaUpdateLabelResponse_CreateFieldResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.priority !== 0) {
      writer.uint32(16).int32(message.priority);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeltaUpdateLabelResponse_CreateFieldResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeltaUpdateLabelResponse_CreateFieldResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.priority = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeltaUpdateLabelResponse_CreateFieldResponse {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      priority: isSet(object.priority) ? globalThis.Number(object.priority) : 0,
    };
  },

  toJSON(message: DeltaUpdateLabelResponse_CreateFieldResponse): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.priority !== 0) {
      obj.priority = Math.round(message.priority);
    }
    return obj;
  },

  create(
    base?: DeepPartial<DeltaUpdateLabelResponse_CreateFieldResponse>,
  ): DeltaUpdateLabelResponse_CreateFieldResponse {
    return DeltaUpdateLabelResponse_CreateFieldResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<DeltaUpdateLabelResponse_CreateFieldResponse>,
  ): DeltaUpdateLabelResponse_CreateFieldResponse {
    const message = createBaseDeltaUpdateLabelResponse_CreateFieldResponse();
    message.id = object.id ?? "";
    message.priority = object.priority ?? 0;
    return message;
  },
};

function createBaseDeltaUpdateLabelResponse_UpdateFieldPropertiesResponse(): DeltaUpdateLabelResponse_UpdateFieldPropertiesResponse {
  return { priority: 0 };
}

export const DeltaUpdateLabelResponse_UpdateFieldPropertiesResponse: MessageFns<
  DeltaUpdateLabelResponse_UpdateFieldPropertiesResponse
> = {
  encode(
    message: DeltaUpdateLabelResponse_UpdateFieldPropertiesResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.priority !== 0) {
      writer.uint32(8).int32(message.priority);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeltaUpdateLabelResponse_UpdateFieldPropertiesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeltaUpdateLabelResponse_UpdateFieldPropertiesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.priority = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeltaUpdateLabelResponse_UpdateFieldPropertiesResponse {
    return { priority: isSet(object.priority) ? globalThis.Number(object.priority) : 0 };
  },

  toJSON(message: DeltaUpdateLabelResponse_UpdateFieldPropertiesResponse): unknown {
    const obj: any = {};
    if (message.priority !== 0) {
      obj.priority = Math.round(message.priority);
    }
    return obj;
  },

  create(
    base?: DeepPartial<DeltaUpdateLabelResponse_UpdateFieldPropertiesResponse>,
  ): DeltaUpdateLabelResponse_UpdateFieldPropertiesResponse {
    return DeltaUpdateLabelResponse_UpdateFieldPropertiesResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<DeltaUpdateLabelResponse_UpdateFieldPropertiesResponse>,
  ): DeltaUpdateLabelResponse_UpdateFieldPropertiesResponse {
    const message = createBaseDeltaUpdateLabelResponse_UpdateFieldPropertiesResponse();
    message.priority = object.priority ?? 0;
    return message;
  },
};

function createBaseDeltaUpdateLabelResponse_UpdateFieldTypeResponse(): DeltaUpdateLabelResponse_UpdateFieldTypeResponse {
  return {};
}

export const DeltaUpdateLabelResponse_UpdateFieldTypeResponse: MessageFns<
  DeltaUpdateLabelResponse_UpdateFieldTypeResponse
> = {
  encode(_: DeltaUpdateLabelResponse_UpdateFieldTypeResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeltaUpdateLabelResponse_UpdateFieldTypeResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeltaUpdateLabelResponse_UpdateFieldTypeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): DeltaUpdateLabelResponse_UpdateFieldTypeResponse {
    return {};
  },

  toJSON(_: DeltaUpdateLabelResponse_UpdateFieldTypeResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(
    base?: DeepPartial<DeltaUpdateLabelResponse_UpdateFieldTypeResponse>,
  ): DeltaUpdateLabelResponse_UpdateFieldTypeResponse {
    return DeltaUpdateLabelResponse_UpdateFieldTypeResponse.fromPartial(base ?? {});
  },
  fromPartial(
    _: DeepPartial<DeltaUpdateLabelResponse_UpdateFieldTypeResponse>,
  ): DeltaUpdateLabelResponse_UpdateFieldTypeResponse {
    const message = createBaseDeltaUpdateLabelResponse_UpdateFieldTypeResponse();
    return message;
  },
};

function createBaseDeltaUpdateLabelResponse_EnableFieldResponse(): DeltaUpdateLabelResponse_EnableFieldResponse {
  return {};
}

export const DeltaUpdateLabelResponse_EnableFieldResponse: MessageFns<DeltaUpdateLabelResponse_EnableFieldResponse> = {
  encode(_: DeltaUpdateLabelResponse_EnableFieldResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeltaUpdateLabelResponse_EnableFieldResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeltaUpdateLabelResponse_EnableFieldResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): DeltaUpdateLabelResponse_EnableFieldResponse {
    return {};
  },

  toJSON(_: DeltaUpdateLabelResponse_EnableFieldResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(
    base?: DeepPartial<DeltaUpdateLabelResponse_EnableFieldResponse>,
  ): DeltaUpdateLabelResponse_EnableFieldResponse {
    return DeltaUpdateLabelResponse_EnableFieldResponse.fromPartial(base ?? {});
  },
  fromPartial(
    _: DeepPartial<DeltaUpdateLabelResponse_EnableFieldResponse>,
  ): DeltaUpdateLabelResponse_EnableFieldResponse {
    const message = createBaseDeltaUpdateLabelResponse_EnableFieldResponse();
    return message;
  },
};

function createBaseDeltaUpdateLabelResponse_DisableFieldResponse(): DeltaUpdateLabelResponse_DisableFieldResponse {
  return {};
}

export const DeltaUpdateLabelResponse_DisableFieldResponse: MessageFns<DeltaUpdateLabelResponse_DisableFieldResponse> =
  {
    encode(_: DeltaUpdateLabelResponse_DisableFieldResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
      return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): DeltaUpdateLabelResponse_DisableFieldResponse {
      const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseDeltaUpdateLabelResponse_DisableFieldResponse();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(_: any): DeltaUpdateLabelResponse_DisableFieldResponse {
      return {};
    },

    toJSON(_: DeltaUpdateLabelResponse_DisableFieldResponse): unknown {
      const obj: any = {};
      return obj;
    },

    create(
      base?: DeepPartial<DeltaUpdateLabelResponse_DisableFieldResponse>,
    ): DeltaUpdateLabelResponse_DisableFieldResponse {
      return DeltaUpdateLabelResponse_DisableFieldResponse.fromPartial(base ?? {});
    },
    fromPartial(
      _: DeepPartial<DeltaUpdateLabelResponse_DisableFieldResponse>,
    ): DeltaUpdateLabelResponse_DisableFieldResponse {
      const message = createBaseDeltaUpdateLabelResponse_DisableFieldResponse();
      return message;
    },
  };

function createBaseDeltaUpdateLabelResponse_DeleteFieldResponse(): DeltaUpdateLabelResponse_DeleteFieldResponse {
  return {};
}

export const DeltaUpdateLabelResponse_DeleteFieldResponse: MessageFns<DeltaUpdateLabelResponse_DeleteFieldResponse> = {
  encode(_: DeltaUpdateLabelResponse_DeleteFieldResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeltaUpdateLabelResponse_DeleteFieldResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeltaUpdateLabelResponse_DeleteFieldResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): DeltaUpdateLabelResponse_DeleteFieldResponse {
    return {};
  },

  toJSON(_: DeltaUpdateLabelResponse_DeleteFieldResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(
    base?: DeepPartial<DeltaUpdateLabelResponse_DeleteFieldResponse>,
  ): DeltaUpdateLabelResponse_DeleteFieldResponse {
    return DeltaUpdateLabelResponse_DeleteFieldResponse.fromPartial(base ?? {});
  },
  fromPartial(
    _: DeepPartial<DeltaUpdateLabelResponse_DeleteFieldResponse>,
  ): DeltaUpdateLabelResponse_DeleteFieldResponse {
    const message = createBaseDeltaUpdateLabelResponse_DeleteFieldResponse();
    return message;
  },
};

function createBaseDeltaUpdateLabelResponse_CreateSelectionChoiceResponse(): DeltaUpdateLabelResponse_CreateSelectionChoiceResponse {
  return { fieldId: "", id: "" };
}

export const DeltaUpdateLabelResponse_CreateSelectionChoiceResponse: MessageFns<
  DeltaUpdateLabelResponse_CreateSelectionChoiceResponse
> = {
  encode(
    message: DeltaUpdateLabelResponse_CreateSelectionChoiceResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.fieldId !== "") {
      writer.uint32(10).string(message.fieldId);
    }
    if (message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeltaUpdateLabelResponse_CreateSelectionChoiceResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeltaUpdateLabelResponse_CreateSelectionChoiceResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.fieldId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeltaUpdateLabelResponse_CreateSelectionChoiceResponse {
    return {
      fieldId: isSet(object.fieldId) ? globalThis.String(object.fieldId) : "",
      id: isSet(object.id) ? globalThis.String(object.id) : "",
    };
  },

  toJSON(message: DeltaUpdateLabelResponse_CreateSelectionChoiceResponse): unknown {
    const obj: any = {};
    if (message.fieldId !== "") {
      obj.fieldId = message.fieldId;
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(
    base?: DeepPartial<DeltaUpdateLabelResponse_CreateSelectionChoiceResponse>,
  ): DeltaUpdateLabelResponse_CreateSelectionChoiceResponse {
    return DeltaUpdateLabelResponse_CreateSelectionChoiceResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<DeltaUpdateLabelResponse_CreateSelectionChoiceResponse>,
  ): DeltaUpdateLabelResponse_CreateSelectionChoiceResponse {
    const message = createBaseDeltaUpdateLabelResponse_CreateSelectionChoiceResponse();
    message.fieldId = object.fieldId ?? "";
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseDeltaUpdateLabelResponse_UpdateSelectionChoicePropertiesResponse(): DeltaUpdateLabelResponse_UpdateSelectionChoicePropertiesResponse {
  return { priority: 0 };
}

export const DeltaUpdateLabelResponse_UpdateSelectionChoicePropertiesResponse: MessageFns<
  DeltaUpdateLabelResponse_UpdateSelectionChoicePropertiesResponse
> = {
  encode(
    message: DeltaUpdateLabelResponse_UpdateSelectionChoicePropertiesResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.priority !== 0) {
      writer.uint32(8).int32(message.priority);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): DeltaUpdateLabelResponse_UpdateSelectionChoicePropertiesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeltaUpdateLabelResponse_UpdateSelectionChoicePropertiesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.priority = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeltaUpdateLabelResponse_UpdateSelectionChoicePropertiesResponse {
    return { priority: isSet(object.priority) ? globalThis.Number(object.priority) : 0 };
  },

  toJSON(message: DeltaUpdateLabelResponse_UpdateSelectionChoicePropertiesResponse): unknown {
    const obj: any = {};
    if (message.priority !== 0) {
      obj.priority = Math.round(message.priority);
    }
    return obj;
  },

  create(
    base?: DeepPartial<DeltaUpdateLabelResponse_UpdateSelectionChoicePropertiesResponse>,
  ): DeltaUpdateLabelResponse_UpdateSelectionChoicePropertiesResponse {
    return DeltaUpdateLabelResponse_UpdateSelectionChoicePropertiesResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<DeltaUpdateLabelResponse_UpdateSelectionChoicePropertiesResponse>,
  ): DeltaUpdateLabelResponse_UpdateSelectionChoicePropertiesResponse {
    const message = createBaseDeltaUpdateLabelResponse_UpdateSelectionChoicePropertiesResponse();
    message.priority = object.priority ?? 0;
    return message;
  },
};

function createBaseDeltaUpdateLabelResponse_EnableSelectionChoiceResponse(): DeltaUpdateLabelResponse_EnableSelectionChoiceResponse {
  return {};
}

export const DeltaUpdateLabelResponse_EnableSelectionChoiceResponse: MessageFns<
  DeltaUpdateLabelResponse_EnableSelectionChoiceResponse
> = {
  encode(
    _: DeltaUpdateLabelResponse_EnableSelectionChoiceResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeltaUpdateLabelResponse_EnableSelectionChoiceResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeltaUpdateLabelResponse_EnableSelectionChoiceResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): DeltaUpdateLabelResponse_EnableSelectionChoiceResponse {
    return {};
  },

  toJSON(_: DeltaUpdateLabelResponse_EnableSelectionChoiceResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(
    base?: DeepPartial<DeltaUpdateLabelResponse_EnableSelectionChoiceResponse>,
  ): DeltaUpdateLabelResponse_EnableSelectionChoiceResponse {
    return DeltaUpdateLabelResponse_EnableSelectionChoiceResponse.fromPartial(base ?? {});
  },
  fromPartial(
    _: DeepPartial<DeltaUpdateLabelResponse_EnableSelectionChoiceResponse>,
  ): DeltaUpdateLabelResponse_EnableSelectionChoiceResponse {
    const message = createBaseDeltaUpdateLabelResponse_EnableSelectionChoiceResponse();
    return message;
  },
};

function createBaseDeltaUpdateLabelResponse_DisableSelectionChoiceResponse(): DeltaUpdateLabelResponse_DisableSelectionChoiceResponse {
  return {};
}

export const DeltaUpdateLabelResponse_DisableSelectionChoiceResponse: MessageFns<
  DeltaUpdateLabelResponse_DisableSelectionChoiceResponse
> = {
  encode(
    _: DeltaUpdateLabelResponse_DisableSelectionChoiceResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeltaUpdateLabelResponse_DisableSelectionChoiceResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeltaUpdateLabelResponse_DisableSelectionChoiceResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): DeltaUpdateLabelResponse_DisableSelectionChoiceResponse {
    return {};
  },

  toJSON(_: DeltaUpdateLabelResponse_DisableSelectionChoiceResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(
    base?: DeepPartial<DeltaUpdateLabelResponse_DisableSelectionChoiceResponse>,
  ): DeltaUpdateLabelResponse_DisableSelectionChoiceResponse {
    return DeltaUpdateLabelResponse_DisableSelectionChoiceResponse.fromPartial(base ?? {});
  },
  fromPartial(
    _: DeepPartial<DeltaUpdateLabelResponse_DisableSelectionChoiceResponse>,
  ): DeltaUpdateLabelResponse_DisableSelectionChoiceResponse {
    const message = createBaseDeltaUpdateLabelResponse_DisableSelectionChoiceResponse();
    return message;
  },
};

function createBaseDeltaUpdateLabelResponse_DeleteSelectionChoiceResponse(): DeltaUpdateLabelResponse_DeleteSelectionChoiceResponse {
  return {};
}

export const DeltaUpdateLabelResponse_DeleteSelectionChoiceResponse: MessageFns<
  DeltaUpdateLabelResponse_DeleteSelectionChoiceResponse
> = {
  encode(
    _: DeltaUpdateLabelResponse_DeleteSelectionChoiceResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeltaUpdateLabelResponse_DeleteSelectionChoiceResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeltaUpdateLabelResponse_DeleteSelectionChoiceResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): DeltaUpdateLabelResponse_DeleteSelectionChoiceResponse {
    return {};
  },

  toJSON(_: DeltaUpdateLabelResponse_DeleteSelectionChoiceResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(
    base?: DeepPartial<DeltaUpdateLabelResponse_DeleteSelectionChoiceResponse>,
  ): DeltaUpdateLabelResponse_DeleteSelectionChoiceResponse {
    return DeltaUpdateLabelResponse_DeleteSelectionChoiceResponse.fromPartial(base ?? {});
  },
  fromPartial(
    _: DeepPartial<DeltaUpdateLabelResponse_DeleteSelectionChoiceResponse>,
  ): DeltaUpdateLabelResponse_DeleteSelectionChoiceResponse {
    const message = createBaseDeltaUpdateLabelResponse_DeleteSelectionChoiceResponse();
    return message;
  },
};

function createBaseUpdateLabelCopyModeRequest(): UpdateLabelCopyModeRequest {
  return { name: "", copyMode: 0, useAdminAccess: false, languageCode: "", view: 0 };
}

export const UpdateLabelCopyModeRequest: MessageFns<UpdateLabelCopyModeRequest> = {
  encode(message: UpdateLabelCopyModeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.copyMode !== 0) {
      writer.uint32(16).int32(message.copyMode);
    }
    if (message.useAdminAccess !== false) {
      writer.uint32(24).bool(message.useAdminAccess);
    }
    if (message.languageCode !== "") {
      writer.uint32(34).string(message.languageCode);
    }
    if (message.view !== 0) {
      writer.uint32(40).int32(message.view);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateLabelCopyModeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateLabelCopyModeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.copyMode = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.useAdminAccess = reader.bool();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.languageCode = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.view = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateLabelCopyModeRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      copyMode: isSet(object.copyMode) ? label_AppliedLabelPolicy_CopyModeFromJSON(object.copyMode) : 0,
      useAdminAccess: isSet(object.useAdminAccess) ? globalThis.Boolean(object.useAdminAccess) : false,
      languageCode: isSet(object.languageCode) ? globalThis.String(object.languageCode) : "",
      view: isSet(object.view) ? labelViewFromJSON(object.view) : 0,
    };
  },

  toJSON(message: UpdateLabelCopyModeRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.copyMode !== 0) {
      obj.copyMode = label_AppliedLabelPolicy_CopyModeToJSON(message.copyMode);
    }
    if (message.useAdminAccess !== false) {
      obj.useAdminAccess = message.useAdminAccess;
    }
    if (message.languageCode !== "") {
      obj.languageCode = message.languageCode;
    }
    if (message.view !== 0) {
      obj.view = labelViewToJSON(message.view);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateLabelCopyModeRequest>): UpdateLabelCopyModeRequest {
    return UpdateLabelCopyModeRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateLabelCopyModeRequest>): UpdateLabelCopyModeRequest {
    const message = createBaseUpdateLabelCopyModeRequest();
    message.name = object.name ?? "";
    message.copyMode = object.copyMode ?? 0;
    message.useAdminAccess = object.useAdminAccess ?? false;
    message.languageCode = object.languageCode ?? "";
    message.view = object.view ?? 0;
    return message;
  },
};

function createBaseGetLabelLimitsRequest(): GetLabelLimitsRequest {
  return { name: "" };
}

export const GetLabelLimitsRequest: MessageFns<GetLabelLimitsRequest> = {
  encode(message: GetLabelLimitsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetLabelLimitsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetLabelLimitsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetLabelLimitsRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetLabelLimitsRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetLabelLimitsRequest>): GetLabelLimitsRequest {
    return GetLabelLimitsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetLabelLimitsRequest>): GetLabelLimitsRequest {
    const message = createBaseGetLabelLimitsRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListLabelsRequest(): ListLabelsRequest {
  return {
    useAdminAccess: undefined,
    minimumRole: undefined,
    publishedOnly: false,
    customer: "",
    languageCode: "",
    pageSize: 0,
    pageToken: "",
    view: 0,
  };
}

export const ListLabelsRequest: MessageFns<ListLabelsRequest> = {
  encode(message: ListLabelsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.useAdminAccess !== undefined) {
      writer.uint32(24).bool(message.useAdminAccess);
    }
    if (message.minimumRole !== undefined) {
      writer.uint32(32).int32(message.minimumRole);
    }
    if (message.publishedOnly !== false) {
      writer.uint32(8).bool(message.publishedOnly);
    }
    if (message.customer !== "") {
      writer.uint32(18).string(message.customer);
    }
    if (message.languageCode !== "") {
      writer.uint32(42).string(message.languageCode);
    }
    if (message.pageSize !== 0) {
      writer.uint32(48).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(58).string(message.pageToken);
    }
    if (message.view !== 0) {
      writer.uint32(64).int32(message.view);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListLabelsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListLabelsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 3:
          if (tag !== 24) {
            break;
          }

          message.useAdminAccess = reader.bool();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.minimumRole = reader.int32() as any;
          continue;
        case 1:
          if (tag !== 8) {
            break;
          }

          message.publishedOnly = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.customer = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.languageCode = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.view = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListLabelsRequest {
    return {
      useAdminAccess: isSet(object.useAdminAccess) ? globalThis.Boolean(object.useAdminAccess) : undefined,
      minimumRole: isSet(object.minimumRole) ? labelPermission_LabelRoleFromJSON(object.minimumRole) : undefined,
      publishedOnly: isSet(object.publishedOnly) ? globalThis.Boolean(object.publishedOnly) : false,
      customer: isSet(object.customer) ? globalThis.String(object.customer) : "",
      languageCode: isSet(object.languageCode) ? globalThis.String(object.languageCode) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      view: isSet(object.view) ? labelViewFromJSON(object.view) : 0,
    };
  },

  toJSON(message: ListLabelsRequest): unknown {
    const obj: any = {};
    if (message.useAdminAccess !== undefined) {
      obj.useAdminAccess = message.useAdminAccess;
    }
    if (message.minimumRole !== undefined) {
      obj.minimumRole = labelPermission_LabelRoleToJSON(message.minimumRole);
    }
    if (message.publishedOnly !== false) {
      obj.publishedOnly = message.publishedOnly;
    }
    if (message.customer !== "") {
      obj.customer = message.customer;
    }
    if (message.languageCode !== "") {
      obj.languageCode = message.languageCode;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.view !== 0) {
      obj.view = labelViewToJSON(message.view);
    }
    return obj;
  },

  create(base?: DeepPartial<ListLabelsRequest>): ListLabelsRequest {
    return ListLabelsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListLabelsRequest>): ListLabelsRequest {
    const message = createBaseListLabelsRequest();
    message.useAdminAccess = object.useAdminAccess ?? undefined;
    message.minimumRole = object.minimumRole ?? undefined;
    message.publishedOnly = object.publishedOnly ?? false;
    message.customer = object.customer ?? "";
    message.languageCode = object.languageCode ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.view = object.view ?? 0;
    return message;
  },
};

function createBaseListLabelsResponse(): ListLabelsResponse {
  return { labels: [], nextPageToken: "" };
}

export const ListLabelsResponse: MessageFns<ListLabelsResponse> = {
  encode(message: ListLabelsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.labels) {
      Label.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListLabelsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListLabelsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.labels.push(Label.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListLabelsResponse {
    return {
      labels: globalThis.Array.isArray(object?.labels) ? object.labels.map((e: any) => Label.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListLabelsResponse): unknown {
    const obj: any = {};
    if (message.labels?.length) {
      obj.labels = message.labels.map((e) => Label.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListLabelsResponse>): ListLabelsResponse {
    return ListLabelsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListLabelsResponse>): ListLabelsResponse {
    const message = createBaseListLabelsResponse();
    message.labels = object.labels?.map((e) => Label.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseCreateLabelPermissionRequest(): CreateLabelPermissionRequest {
  return { parent: "", labelPermission: undefined, useAdminAccess: false };
}

export const CreateLabelPermissionRequest: MessageFns<CreateLabelPermissionRequest> = {
  encode(message: CreateLabelPermissionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.labelPermission !== undefined) {
      LabelPermission.encode(message.labelPermission, writer.uint32(18).fork()).join();
    }
    if (message.useAdminAccess !== false) {
      writer.uint32(24).bool(message.useAdminAccess);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateLabelPermissionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateLabelPermissionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.labelPermission = LabelPermission.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.useAdminAccess = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateLabelPermissionRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      labelPermission: isSet(object.labelPermission) ? LabelPermission.fromJSON(object.labelPermission) : undefined,
      useAdminAccess: isSet(object.useAdminAccess) ? globalThis.Boolean(object.useAdminAccess) : false,
    };
  },

  toJSON(message: CreateLabelPermissionRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.labelPermission !== undefined) {
      obj.labelPermission = LabelPermission.toJSON(message.labelPermission);
    }
    if (message.useAdminAccess !== false) {
      obj.useAdminAccess = message.useAdminAccess;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateLabelPermissionRequest>): CreateLabelPermissionRequest {
    return CreateLabelPermissionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateLabelPermissionRequest>): CreateLabelPermissionRequest {
    const message = createBaseCreateLabelPermissionRequest();
    message.parent = object.parent ?? "";
    message.labelPermission = (object.labelPermission !== undefined && object.labelPermission !== null)
      ? LabelPermission.fromPartial(object.labelPermission)
      : undefined;
    message.useAdminAccess = object.useAdminAccess ?? false;
    return message;
  },
};

function createBaseListLabelPermissionsRequest(): ListLabelPermissionsRequest {
  return { parent: "", useAdminAccess: false, pageSize: 0, pageToken: "" };
}

export const ListLabelPermissionsRequest: MessageFns<ListLabelPermissionsRequest> = {
  encode(message: ListLabelPermissionsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.useAdminAccess !== false) {
      writer.uint32(16).bool(message.useAdminAccess);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(34).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListLabelPermissionsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListLabelPermissionsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.useAdminAccess = reader.bool();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListLabelPermissionsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      useAdminAccess: isSet(object.useAdminAccess) ? globalThis.Boolean(object.useAdminAccess) : false,
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListLabelPermissionsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.useAdminAccess !== false) {
      obj.useAdminAccess = message.useAdminAccess;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListLabelPermissionsRequest>): ListLabelPermissionsRequest {
    return ListLabelPermissionsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListLabelPermissionsRequest>): ListLabelPermissionsRequest {
    const message = createBaseListLabelPermissionsRequest();
    message.parent = object.parent ?? "";
    message.useAdminAccess = object.useAdminAccess ?? false;
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListLabelPermissionsResponse(): ListLabelPermissionsResponse {
  return { labelPermissions: [], nextPageToken: "" };
}

export const ListLabelPermissionsResponse: MessageFns<ListLabelPermissionsResponse> = {
  encode(message: ListLabelPermissionsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.labelPermissions) {
      LabelPermission.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListLabelPermissionsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListLabelPermissionsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.labelPermissions.push(LabelPermission.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListLabelPermissionsResponse {
    return {
      labelPermissions: globalThis.Array.isArray(object?.labelPermissions)
        ? object.labelPermissions.map((e: any) => LabelPermission.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListLabelPermissionsResponse): unknown {
    const obj: any = {};
    if (message.labelPermissions?.length) {
      obj.labelPermissions = message.labelPermissions.map((e) => LabelPermission.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListLabelPermissionsResponse>): ListLabelPermissionsResponse {
    return ListLabelPermissionsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListLabelPermissionsResponse>): ListLabelPermissionsResponse {
    const message = createBaseListLabelPermissionsResponse();
    message.labelPermissions = object.labelPermissions?.map((e) => LabelPermission.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseUpdateLabelPermissionRequest(): UpdateLabelPermissionRequest {
  return { parent: "", labelPermission: undefined, useAdminAccess: false };
}

export const UpdateLabelPermissionRequest: MessageFns<UpdateLabelPermissionRequest> = {
  encode(message: UpdateLabelPermissionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.labelPermission !== undefined) {
      LabelPermission.encode(message.labelPermission, writer.uint32(18).fork()).join();
    }
    if (message.useAdminAccess !== false) {
      writer.uint32(24).bool(message.useAdminAccess);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateLabelPermissionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateLabelPermissionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.labelPermission = LabelPermission.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.useAdminAccess = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateLabelPermissionRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      labelPermission: isSet(object.labelPermission) ? LabelPermission.fromJSON(object.labelPermission) : undefined,
      useAdminAccess: isSet(object.useAdminAccess) ? globalThis.Boolean(object.useAdminAccess) : false,
    };
  },

  toJSON(message: UpdateLabelPermissionRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.labelPermission !== undefined) {
      obj.labelPermission = LabelPermission.toJSON(message.labelPermission);
    }
    if (message.useAdminAccess !== false) {
      obj.useAdminAccess = message.useAdminAccess;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateLabelPermissionRequest>): UpdateLabelPermissionRequest {
    return UpdateLabelPermissionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateLabelPermissionRequest>): UpdateLabelPermissionRequest {
    const message = createBaseUpdateLabelPermissionRequest();
    message.parent = object.parent ?? "";
    message.labelPermission = (object.labelPermission !== undefined && object.labelPermission !== null)
      ? LabelPermission.fromPartial(object.labelPermission)
      : undefined;
    message.useAdminAccess = object.useAdminAccess ?? false;
    return message;
  },
};

function createBaseDeleteLabelPermissionRequest(): DeleteLabelPermissionRequest {
  return { name: "", useAdminAccess: false };
}

export const DeleteLabelPermissionRequest: MessageFns<DeleteLabelPermissionRequest> = {
  encode(message: DeleteLabelPermissionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.useAdminAccess !== false) {
      writer.uint32(16).bool(message.useAdminAccess);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteLabelPermissionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteLabelPermissionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.useAdminAccess = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteLabelPermissionRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      useAdminAccess: isSet(object.useAdminAccess) ? globalThis.Boolean(object.useAdminAccess) : false,
    };
  },

  toJSON(message: DeleteLabelPermissionRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.useAdminAccess !== false) {
      obj.useAdminAccess = message.useAdminAccess;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteLabelPermissionRequest>): DeleteLabelPermissionRequest {
    return DeleteLabelPermissionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteLabelPermissionRequest>): DeleteLabelPermissionRequest {
    const message = createBaseDeleteLabelPermissionRequest();
    message.name = object.name ?? "";
    message.useAdminAccess = object.useAdminAccess ?? false;
    return message;
  },
};

function createBaseBatchUpdateLabelPermissionsRequest(): BatchUpdateLabelPermissionsRequest {
  return { parent: "", requests: [], useAdminAccess: false };
}

export const BatchUpdateLabelPermissionsRequest: MessageFns<BatchUpdateLabelPermissionsRequest> = {
  encode(message: BatchUpdateLabelPermissionsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    for (const v of message.requests) {
      UpdateLabelPermissionRequest.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.useAdminAccess !== false) {
      writer.uint32(24).bool(message.useAdminAccess);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BatchUpdateLabelPermissionsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBatchUpdateLabelPermissionsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.requests.push(UpdateLabelPermissionRequest.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.useAdminAccess = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BatchUpdateLabelPermissionsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      requests: globalThis.Array.isArray(object?.requests)
        ? object.requests.map((e: any) => UpdateLabelPermissionRequest.fromJSON(e))
        : [],
      useAdminAccess: isSet(object.useAdminAccess) ? globalThis.Boolean(object.useAdminAccess) : false,
    };
  },

  toJSON(message: BatchUpdateLabelPermissionsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.requests?.length) {
      obj.requests = message.requests.map((e) => UpdateLabelPermissionRequest.toJSON(e));
    }
    if (message.useAdminAccess !== false) {
      obj.useAdminAccess = message.useAdminAccess;
    }
    return obj;
  },

  create(base?: DeepPartial<BatchUpdateLabelPermissionsRequest>): BatchUpdateLabelPermissionsRequest {
    return BatchUpdateLabelPermissionsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BatchUpdateLabelPermissionsRequest>): BatchUpdateLabelPermissionsRequest {
    const message = createBaseBatchUpdateLabelPermissionsRequest();
    message.parent = object.parent ?? "";
    message.requests = object.requests?.map((e) => UpdateLabelPermissionRequest.fromPartial(e)) || [];
    message.useAdminAccess = object.useAdminAccess ?? false;
    return message;
  },
};

function createBaseBatchUpdateLabelPermissionsResponse(): BatchUpdateLabelPermissionsResponse {
  return { permissions: [] };
}

export const BatchUpdateLabelPermissionsResponse: MessageFns<BatchUpdateLabelPermissionsResponse> = {
  encode(message: BatchUpdateLabelPermissionsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.permissions) {
      LabelPermission.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BatchUpdateLabelPermissionsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBatchUpdateLabelPermissionsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.permissions.push(LabelPermission.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BatchUpdateLabelPermissionsResponse {
    return {
      permissions: globalThis.Array.isArray(object?.permissions)
        ? object.permissions.map((e: any) => LabelPermission.fromJSON(e))
        : [],
    };
  },

  toJSON(message: BatchUpdateLabelPermissionsResponse): unknown {
    const obj: any = {};
    if (message.permissions?.length) {
      obj.permissions = message.permissions.map((e) => LabelPermission.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<BatchUpdateLabelPermissionsResponse>): BatchUpdateLabelPermissionsResponse {
    return BatchUpdateLabelPermissionsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BatchUpdateLabelPermissionsResponse>): BatchUpdateLabelPermissionsResponse {
    const message = createBaseBatchUpdateLabelPermissionsResponse();
    message.permissions = object.permissions?.map((e) => LabelPermission.fromPartial(e)) || [];
    return message;
  },
};

function createBaseBatchDeleteLabelPermissionsRequest(): BatchDeleteLabelPermissionsRequest {
  return { requests: [], useAdminAccess: false, parent: "" };
}

export const BatchDeleteLabelPermissionsRequest: MessageFns<BatchDeleteLabelPermissionsRequest> = {
  encode(message: BatchDeleteLabelPermissionsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.requests) {
      DeleteLabelPermissionRequest.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.useAdminAccess !== false) {
      writer.uint32(16).bool(message.useAdminAccess);
    }
    if (message.parent !== "") {
      writer.uint32(26).string(message.parent);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BatchDeleteLabelPermissionsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBatchDeleteLabelPermissionsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.requests.push(DeleteLabelPermissionRequest.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.useAdminAccess = reader.bool();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.parent = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BatchDeleteLabelPermissionsRequest {
    return {
      requests: globalThis.Array.isArray(object?.requests)
        ? object.requests.map((e: any) => DeleteLabelPermissionRequest.fromJSON(e))
        : [],
      useAdminAccess: isSet(object.useAdminAccess) ? globalThis.Boolean(object.useAdminAccess) : false,
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
    };
  },

  toJSON(message: BatchDeleteLabelPermissionsRequest): unknown {
    const obj: any = {};
    if (message.requests?.length) {
      obj.requests = message.requests.map((e) => DeleteLabelPermissionRequest.toJSON(e));
    }
    if (message.useAdminAccess !== false) {
      obj.useAdminAccess = message.useAdminAccess;
    }
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    return obj;
  },

  create(base?: DeepPartial<BatchDeleteLabelPermissionsRequest>): BatchDeleteLabelPermissionsRequest {
    return BatchDeleteLabelPermissionsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BatchDeleteLabelPermissionsRequest>): BatchDeleteLabelPermissionsRequest {
    const message = createBaseBatchDeleteLabelPermissionsRequest();
    message.requests = object.requests?.map((e) => DeleteLabelPermissionRequest.fromPartial(e)) || [];
    message.useAdminAccess = object.useAdminAccess ?? false;
    message.parent = object.parent ?? "";
    return message;
  },
};

function createBaseDisableLabelRequest(): DisableLabelRequest {
  return {
    updateMask: undefined,
    name: "",
    useAdminAccess: false,
    writeControl: undefined,
    disabledPolicy: undefined,
    languageCode: "",
  };
}

export const DisableLabelRequest: MessageFns<DisableLabelRequest> = {
  encode(message: DisableLabelRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(10).fork()).join();
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.useAdminAccess !== false) {
      writer.uint32(24).bool(message.useAdminAccess);
    }
    if (message.writeControl !== undefined) {
      WriteControl.encode(message.writeControl, writer.uint32(34).fork()).join();
    }
    if (message.disabledPolicy !== undefined) {
      Lifecycle_DisabledPolicy.encode(message.disabledPolicy, writer.uint32(42).fork()).join();
    }
    if (message.languageCode !== "") {
      writer.uint32(50).string(message.languageCode);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DisableLabelRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDisableLabelRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.useAdminAccess = reader.bool();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.writeControl = WriteControl.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.disabledPolicy = Lifecycle_DisabledPolicy.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.languageCode = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DisableLabelRequest {
    return {
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      useAdminAccess: isSet(object.useAdminAccess) ? globalThis.Boolean(object.useAdminAccess) : false,
      writeControl: isSet(object.writeControl) ? WriteControl.fromJSON(object.writeControl) : undefined,
      disabledPolicy: isSet(object.disabledPolicy)
        ? Lifecycle_DisabledPolicy.fromJSON(object.disabledPolicy)
        : undefined,
      languageCode: isSet(object.languageCode) ? globalThis.String(object.languageCode) : "",
    };
  },

  toJSON(message: DisableLabelRequest): unknown {
    const obj: any = {};
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.useAdminAccess !== false) {
      obj.useAdminAccess = message.useAdminAccess;
    }
    if (message.writeControl !== undefined) {
      obj.writeControl = WriteControl.toJSON(message.writeControl);
    }
    if (message.disabledPolicy !== undefined) {
      obj.disabledPolicy = Lifecycle_DisabledPolicy.toJSON(message.disabledPolicy);
    }
    if (message.languageCode !== "") {
      obj.languageCode = message.languageCode;
    }
    return obj;
  },

  create(base?: DeepPartial<DisableLabelRequest>): DisableLabelRequest {
    return DisableLabelRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DisableLabelRequest>): DisableLabelRequest {
    const message = createBaseDisableLabelRequest();
    message.updateMask = object.updateMask ?? undefined;
    message.name = object.name ?? "";
    message.useAdminAccess = object.useAdminAccess ?? false;
    message.writeControl = (object.writeControl !== undefined && object.writeControl !== null)
      ? WriteControl.fromPartial(object.writeControl)
      : undefined;
    message.disabledPolicy = (object.disabledPolicy !== undefined && object.disabledPolicy !== null)
      ? Lifecycle_DisabledPolicy.fromPartial(object.disabledPolicy)
      : undefined;
    message.languageCode = object.languageCode ?? "";
    return message;
  },
};

function createBasePublishLabelRequest(): PublishLabelRequest {
  return { name: "", useAdminAccess: false, writeControl: undefined, languageCode: "" };
}

export const PublishLabelRequest: MessageFns<PublishLabelRequest> = {
  encode(message: PublishLabelRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.useAdminAccess !== false) {
      writer.uint32(16).bool(message.useAdminAccess);
    }
    if (message.writeControl !== undefined) {
      WriteControl.encode(message.writeControl, writer.uint32(26).fork()).join();
    }
    if (message.languageCode !== "") {
      writer.uint32(34).string(message.languageCode);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PublishLabelRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePublishLabelRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.useAdminAccess = reader.bool();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.writeControl = WriteControl.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.languageCode = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PublishLabelRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      useAdminAccess: isSet(object.useAdminAccess) ? globalThis.Boolean(object.useAdminAccess) : false,
      writeControl: isSet(object.writeControl) ? WriteControl.fromJSON(object.writeControl) : undefined,
      languageCode: isSet(object.languageCode) ? globalThis.String(object.languageCode) : "",
    };
  },

  toJSON(message: PublishLabelRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.useAdminAccess !== false) {
      obj.useAdminAccess = message.useAdminAccess;
    }
    if (message.writeControl !== undefined) {
      obj.writeControl = WriteControl.toJSON(message.writeControl);
    }
    if (message.languageCode !== "") {
      obj.languageCode = message.languageCode;
    }
    return obj;
  },

  create(base?: DeepPartial<PublishLabelRequest>): PublishLabelRequest {
    return PublishLabelRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PublishLabelRequest>): PublishLabelRequest {
    const message = createBasePublishLabelRequest();
    message.name = object.name ?? "";
    message.useAdminAccess = object.useAdminAccess ?? false;
    message.writeControl = (object.writeControl !== undefined && object.writeControl !== null)
      ? WriteControl.fromPartial(object.writeControl)
      : undefined;
    message.languageCode = object.languageCode ?? "";
    return message;
  },
};

function createBaseEnableLabelRequest(): EnableLabelRequest {
  return { name: "", useAdminAccess: false, writeControl: undefined, languageCode: "" };
}

export const EnableLabelRequest: MessageFns<EnableLabelRequest> = {
  encode(message: EnableLabelRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.useAdminAccess !== false) {
      writer.uint32(16).bool(message.useAdminAccess);
    }
    if (message.writeControl !== undefined) {
      WriteControl.encode(message.writeControl, writer.uint32(26).fork()).join();
    }
    if (message.languageCode !== "") {
      writer.uint32(34).string(message.languageCode);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EnableLabelRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEnableLabelRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.useAdminAccess = reader.bool();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.writeControl = WriteControl.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.languageCode = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EnableLabelRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      useAdminAccess: isSet(object.useAdminAccess) ? globalThis.Boolean(object.useAdminAccess) : false,
      writeControl: isSet(object.writeControl) ? WriteControl.fromJSON(object.writeControl) : undefined,
      languageCode: isSet(object.languageCode) ? globalThis.String(object.languageCode) : "",
    };
  },

  toJSON(message: EnableLabelRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.useAdminAccess !== false) {
      obj.useAdminAccess = message.useAdminAccess;
    }
    if (message.writeControl !== undefined) {
      obj.writeControl = WriteControl.toJSON(message.writeControl);
    }
    if (message.languageCode !== "") {
      obj.languageCode = message.languageCode;
    }
    return obj;
  },

  create(base?: DeepPartial<EnableLabelRequest>): EnableLabelRequest {
    return EnableLabelRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EnableLabelRequest>): EnableLabelRequest {
    const message = createBaseEnableLabelRequest();
    message.name = object.name ?? "";
    message.useAdminAccess = object.useAdminAccess ?? false;
    message.writeControl = (object.writeControl !== undefined && object.writeControl !== null)
      ? WriteControl.fromPartial(object.writeControl)
      : undefined;
    message.languageCode = object.languageCode ?? "";
    return message;
  },
};

function createBaseDeleteLabelRequest(): DeleteLabelRequest {
  return { name: "", useAdminAccess: false, writeControl: undefined };
}

export const DeleteLabelRequest: MessageFns<DeleteLabelRequest> = {
  encode(message: DeleteLabelRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.useAdminAccess !== false) {
      writer.uint32(16).bool(message.useAdminAccess);
    }
    if (message.writeControl !== undefined) {
      WriteControl.encode(message.writeControl, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteLabelRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteLabelRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.useAdminAccess = reader.bool();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.writeControl = WriteControl.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteLabelRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      useAdminAccess: isSet(object.useAdminAccess) ? globalThis.Boolean(object.useAdminAccess) : false,
      writeControl: isSet(object.writeControl) ? WriteControl.fromJSON(object.writeControl) : undefined,
    };
  },

  toJSON(message: DeleteLabelRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.useAdminAccess !== false) {
      obj.useAdminAccess = message.useAdminAccess;
    }
    if (message.writeControl !== undefined) {
      obj.writeControl = WriteControl.toJSON(message.writeControl);
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteLabelRequest>): DeleteLabelRequest {
    return DeleteLabelRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteLabelRequest>): DeleteLabelRequest {
    const message = createBaseDeleteLabelRequest();
    message.name = object.name ?? "";
    message.useAdminAccess = object.useAdminAccess ?? false;
    message.writeControl = (object.writeControl !== undefined && object.writeControl !== null)
      ? WriteControl.fromPartial(object.writeControl)
      : undefined;
    return message;
  },
};

function createBaseListLabelLocksRequest(): ListLabelLocksRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListLabelLocksRequest: MessageFns<ListLabelLocksRequest> = {
  encode(message: ListLabelLocksRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListLabelLocksRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListLabelLocksRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListLabelLocksRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListLabelLocksRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListLabelLocksRequest>): ListLabelLocksRequest {
    return ListLabelLocksRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListLabelLocksRequest>): ListLabelLocksRequest {
    const message = createBaseListLabelLocksRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListLabelLocksResponse(): ListLabelLocksResponse {
  return { labelLocks: [], nextPageToken: "" };
}

export const ListLabelLocksResponse: MessageFns<ListLabelLocksResponse> = {
  encode(message: ListLabelLocksResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.labelLocks) {
      LabelLock.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListLabelLocksResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListLabelLocksResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.labelLocks.push(LabelLock.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListLabelLocksResponse {
    return {
      labelLocks: globalThis.Array.isArray(object?.labelLocks)
        ? object.labelLocks.map((e: any) => LabelLock.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListLabelLocksResponse): unknown {
    const obj: any = {};
    if (message.labelLocks?.length) {
      obj.labelLocks = message.labelLocks.map((e) => LabelLock.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListLabelLocksResponse>): ListLabelLocksResponse {
    return ListLabelLocksResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListLabelLocksResponse>): ListLabelLocksResponse {
    const message = createBaseListLabelLocksResponse();
    message.labelLocks = object.labelLocks?.map((e) => LabelLock.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
