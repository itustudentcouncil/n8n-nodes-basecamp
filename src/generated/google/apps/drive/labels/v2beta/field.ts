// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/apps/drive/labels/v2beta/field.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../../protobuf/timestamp.js";
import { DateMessage } from "../../../../type/date.js";
import { BadgeColors, BadgeConfig, Lifecycle, LockStatus, UserInfo } from "./common.js";

export const protobufPackage = "google.apps.drive.labels.v2beta";

/**
 * Defines a field that has a display name, data type, and other
 * configuration options. This field defines the kind of metadata that may be
 * set on a Drive item.
 */
export interface Field {
  /** Text field options. */
  textOptions?:
    | Field_TextOptions
    | undefined;
  /** Integer field options. */
  integerOptions?:
    | Field_IntegerOptions
    | undefined;
  /** Date field options. */
  dateOptions?:
    | Field_DateOptions
    | undefined;
  /** Selection field options. */
  selectionOptions?:
    | Field_SelectionOptions
    | undefined;
  /** User field options. */
  userOptions?:
    | Field_UserOptions
    | undefined;
  /**
   * Output only. The key of a field, unique within a label or library.
   *
   * This value is autogenerated. Matches the regex: `([a-zA-Z0-9])+`
   */
  id: string;
  /**
   * Output only. The key to use when constructing Drive search queries to find
   * files based on values defined for this field on files.
   * For example, "`{query_key}` > 2001-01-01".
   */
  queryKey: string;
  /** The basic properties of the field. */
  properties:
    | Field_Properties
    | undefined;
  /** Output only. The lifecycle of this field. */
  lifecycle:
    | Lifecycle
    | undefined;
  /** Output only. UI display hints for rendering a field. */
  displayHints:
    | Field_DisplayHints
    | undefined;
  /** Output only. The capabilities this user has when editing this field. */
  schemaCapabilities:
    | Field_SchemaCapabilities
    | undefined;
  /**
   * Output only. The capabilities this user has on this field and its value
   * when the label is applied on Drive items.
   */
  appliedCapabilities:
    | Field_AppliedCapabilities
    | undefined;
  /** Output only. The user who created this field. */
  creator:
    | UserInfo
    | undefined;
  /** Output only. The time this field was created. */
  createTime:
    | Date
    | undefined;
  /** Output only. The user who modified this field. */
  updater:
    | UserInfo
    | undefined;
  /** Output only. The time this field was updated. */
  updateTime:
    | Date
    | undefined;
  /**
   * Output only. The user who published this field. This value has no meaning
   * when the field is not published.
   */
  publisher:
    | UserInfo
    | undefined;
  /**
   * Output only. The user who disabled this field. This value has no meaning
   * when the field is not disabled.
   */
  disabler:
    | UserInfo
    | undefined;
  /**
   * Output only. The time this field was disabled. This value has no meaning
   * when the field is not disabled.
   */
  disableTime:
    | Date
    | undefined;
  /** Output only. The LockStatus of this field. */
  lockStatus: LockStatus | undefined;
}

/** The basic properties of the field. */
export interface Field_Properties {
  /** Required. The display text to show in the UI identifying this field. */
  displayName: string;
  /** Whether the field should be marked as required. */
  required: boolean;
  /**
   * Input only. Insert or move this field before the indicated field. If
   * empty, the field is placed at the end of the list.
   */
  insertBeforeField: string;
}

/** UI display hints for rendering a field. */
export interface Field_DisplayHints {
  /** Whether the field should be shown as required in the UI. */
  required: boolean;
  /** Whether the field should be shown in the UI as disabled. */
  disabled: boolean;
  /**
   * This field should be hidden in the search menu when searching for Drive
   * items.
   */
  hiddenInSearch: boolean;
  /**
   * This field should be shown in the apply menu when applying values to a
   * Drive item.
   */
  shownInApply: boolean;
}

/** The capabilities related to this field when editing the field. */
export interface Field_SchemaCapabilities {
  /** Whether the user can change this field. */
  canUpdate: boolean;
  /**
   * Whether the user can delete this field.
   * The user must have permission and the field must be deprecated.
   */
  canDelete: boolean;
  /**
   * Whether the user can disable this field.
   * The user must have permission and this field must not already be
   * disabled.
   */
  canDisable: boolean;
  /**
   * Whether the user can enable this field.
   * The user must have permission and this field must be disabled.
   */
  canEnable: boolean;
}

/** The capabilities related to this field on applied metadata. */
export interface Field_AppliedCapabilities {
  /** Whether the user can read related applied metadata on items. */
  canRead: boolean;
  /** Whether the user can search for Drive items referencing this field. */
  canSearch: boolean;
  /** Whether the user can set this field on Drive items. */
  canWrite: boolean;
}

/** Options for a multi-valued variant of an associated field type. */
export interface Field_ListOptions {
  /** Maximum number of entries permitted. */
  maxEntries: number;
}

/** Options for the Text field type. */
export interface Field_TextOptions {
  /** Output only. The minimum valid length of values for the text field. */
  minLength: number;
  /** Output only. The maximum valid length of values for the text field. */
  maxLength: number;
}

/** Options for the Integer field type. */
export interface Field_IntegerOptions {
  /** Output only. The minimum valid value for the integer field. */
  minValue: Long;
  /** Output only. The maximum valid value for the integer field. */
  maxValue: Long;
}

/** Options for the date field type. */
export interface Field_DateOptions {
  /**
   * Localized date formatting option. Field values are rendered in
   * this format according to their locale.
   */
  dateFormatType: Field_DateOptions_DateFormat;
  /** Output only. ICU date format. */
  dateFormat: string;
  /** Output only. Minimum valid value (year, month, day). */
  minValue:
    | DateMessage
    | undefined;
  /** Output only. Maximum valid value (year, month, day). */
  maxValue: DateMessage | undefined;
}

/** Localized date format options. */
export enum Field_DateOptions_DateFormat {
  /** DATE_FORMAT_UNSPECIFIED - Date format unspecified. */
  DATE_FORMAT_UNSPECIFIED = 0,
  /**
   * LONG_DATE - Includes full month name.
   * For example, January 12, 1999
   * (MMMM d, y)
   */
  LONG_DATE = 1,
  /**
   * SHORT_DATE - Short, numeric, representation.
   * For example, 12/13/99
   * (M/d/yy)
   */
  SHORT_DATE = 2,
  UNRECOGNIZED = -1,
}

export function field_DateOptions_DateFormatFromJSON(object: any): Field_DateOptions_DateFormat {
  switch (object) {
    case 0:
    case "DATE_FORMAT_UNSPECIFIED":
      return Field_DateOptions_DateFormat.DATE_FORMAT_UNSPECIFIED;
    case 1:
    case "LONG_DATE":
      return Field_DateOptions_DateFormat.LONG_DATE;
    case 2:
    case "SHORT_DATE":
      return Field_DateOptions_DateFormat.SHORT_DATE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Field_DateOptions_DateFormat.UNRECOGNIZED;
  }
}

export function field_DateOptions_DateFormatToJSON(object: Field_DateOptions_DateFormat): string {
  switch (object) {
    case Field_DateOptions_DateFormat.DATE_FORMAT_UNSPECIFIED:
      return "DATE_FORMAT_UNSPECIFIED";
    case Field_DateOptions_DateFormat.LONG_DATE:
      return "LONG_DATE";
    case Field_DateOptions_DateFormat.SHORT_DATE:
      return "SHORT_DATE";
    case Field_DateOptions_DateFormat.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Options for the selection field type. */
export interface Field_SelectionOptions {
  /**
   * When specified, indicates this field supports a list of values.
   * Once the field is published, this cannot be changed.
   */
  listOptions:
    | Field_ListOptions
    | undefined;
  /**
   * The options available for this selection field.
   * The list order is consistent, and modified with `insert_before_choice`.
   */
  choices: Field_SelectionOptions_Choice[];
}

/** Selection field choice. */
export interface Field_SelectionOptions_Choice {
  /**
   * The unique value of the choice.
   * This ID is autogenerated. Matches the regex: `([a-zA-Z0-9_])+`.
   */
  id: string;
  /** Basic properties of the choice. */
  properties:
    | Field_SelectionOptions_Choice_Properties
    | undefined;
  /** Output only. Lifecycle of the choice. */
  lifecycle:
    | Lifecycle
    | undefined;
  /** Output only. UI display hints for rendering a choice. */
  displayHints:
    | Field_SelectionOptions_Choice_DisplayHints
    | undefined;
  /**
   * Output only. The capabilities related to this option when editing the
   * option.
   */
  schemaCapabilities:
    | Field_SelectionOptions_Choice_SchemaCapabilities
    | undefined;
  /**
   * Output only. The capabilities related to this choice on applied
   * metadata.
   */
  appliedCapabilities:
    | Field_SelectionOptions_Choice_AppliedCapabilities
    | undefined;
  /** Output only. The user who created this choice. */
  creator:
    | UserInfo
    | undefined;
  /** Output only. The time this choice was created. */
  createTime:
    | Date
    | undefined;
  /** Output only. The user who updated this choice last. */
  updater:
    | UserInfo
    | undefined;
  /** Output only. The time this choice was updated last. */
  updateTime:
    | Date
    | undefined;
  /**
   * Output only. The user who published this choice. This value has no
   * meaning when the choice is not published.
   */
  publisher:
    | UserInfo
    | undefined;
  /**
   * Output only. The time this choice was published. This value has no
   * meaning when the choice is not published.
   */
  publishTime:
    | Date
    | undefined;
  /**
   * Output only. The user who disabled this choice. This value has no
   * meaning when the option is not disabled.
   */
  disabler:
    | UserInfo
    | undefined;
  /**
   * Output only. The time this choice was disabled. This value has no
   * meaning when the choice is not disabled.
   */
  disableTime:
    | Date
    | undefined;
  /** Output only. The LockStatus of this choice. */
  lockStatus: LockStatus | undefined;
}

/** Basic properties of the choice. */
export interface Field_SelectionOptions_Choice_Properties {
  /** Required. The display text to show in the UI identifying this field. */
  displayName: string;
  /** The description of this label. */
  description: string;
  /**
   * The badge configuration for this choice. When set, the
   * label that owns this choice is considered a "badged label".
   */
  badgeConfig:
    | BadgeConfig
    | undefined;
  /**
   * Input only. Insert or move this choice before the indicated choice.
   * If empty, the choice is placed at the end of the list.
   */
  insertBeforeChoice: string;
}

/** UI display hints for rendering an option. */
export interface Field_SelectionOptions_Choice_DisplayHints {
  /** Whether the option should be shown in the UI as disabled. */
  disabled: boolean;
  /**
   * This option should be hidden in the search menu when searching for
   * Drive items.
   */
  hiddenInSearch: boolean;
  /**
   * This option should be shown in the apply menu when applying values to
   * a Drive item.
   */
  shownInApply: boolean;
  /**
   * The colors to use for the badge. Changed to Google Material colors
   * based on the chosen `properties.badge_config.color`.
   */
  badgeColors:
    | BadgeColors
    | undefined;
  /**
   * The dark-mode color to use for the badge. Changed to Google Material
   * colors based on the chosen `properties.badge_config.color`.
   */
  darkBadgeColors:
    | BadgeColors
    | undefined;
  /**
   * The priority of this badge. Used to compare and sort between multiple
   * badges. A lower number means the badge should be shown first.
   * When a badging configuration is not present, this will be 0.
   * Otherwise, this will be set to `BadgeConfig.priority_override` or the
   * default heuristic which prefers creation date of the label, and field
   * and option priority.
   */
  badgePriority: Long;
}

/** The capabilities related to this choice when editing the choice. */
export interface Field_SelectionOptions_Choice_SchemaCapabilities {
  /** Whether the user can update this choice. */
  canUpdate: boolean;
  /** Whether the user can delete this choice. */
  canDelete: boolean;
  /** Whether the user can disable this choice. */
  canDisable: boolean;
  /** Whether the user can enable this choice. */
  canEnable: boolean;
}

/** The capabilities related to this choice on applied metadata. */
export interface Field_SelectionOptions_Choice_AppliedCapabilities {
  /** Whether the user can read related applied metadata on items. */
  canRead: boolean;
  /** Whether the user can use this choice in search queries. */
  canSearch: boolean;
  /** Whether the user can select this choice on an item. */
  canSelect: boolean;
}

/** Options for the user field type. */
export interface Field_UserOptions {
  /**
   * When specified, indicates that this field supports a list of values.
   * Once the field is published, this cannot be changed.
   */
  listOptions: Field_ListOptions | undefined;
}

function createBaseField(): Field {
  return {
    textOptions: undefined,
    integerOptions: undefined,
    dateOptions: undefined,
    selectionOptions: undefined,
    userOptions: undefined,
    id: "",
    queryKey: "",
    properties: undefined,
    lifecycle: undefined,
    displayHints: undefined,
    schemaCapabilities: undefined,
    appliedCapabilities: undefined,
    creator: undefined,
    createTime: undefined,
    updater: undefined,
    updateTime: undefined,
    publisher: undefined,
    disabler: undefined,
    disableTime: undefined,
    lockStatus: undefined,
  };
}

export const Field: MessageFns<Field> = {
  encode(message: Field, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.textOptions !== undefined) {
      Field_TextOptions.encode(message.textOptions, writer.uint32(130).fork()).join();
    }
    if (message.integerOptions !== undefined) {
      Field_IntegerOptions.encode(message.integerOptions, writer.uint32(146).fork()).join();
    }
    if (message.dateOptions !== undefined) {
      Field_DateOptions.encode(message.dateOptions, writer.uint32(154).fork()).join();
    }
    if (message.selectionOptions !== undefined) {
      Field_SelectionOptions.encode(message.selectionOptions, writer.uint32(162).fork()).join();
    }
    if (message.userOptions !== undefined) {
      Field_UserOptions.encode(message.userOptions, writer.uint32(170).fork()).join();
    }
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.queryKey !== "") {
      writer.uint32(18).string(message.queryKey);
    }
    if (message.properties !== undefined) {
      Field_Properties.encode(message.properties, writer.uint32(26).fork()).join();
    }
    if (message.lifecycle !== undefined) {
      Lifecycle.encode(message.lifecycle, writer.uint32(34).fork()).join();
    }
    if (message.displayHints !== undefined) {
      Field_DisplayHints.encode(message.displayHints, writer.uint32(42).fork()).join();
    }
    if (message.schemaCapabilities !== undefined) {
      Field_SchemaCapabilities.encode(message.schemaCapabilities, writer.uint32(50).fork()).join();
    }
    if (message.appliedCapabilities !== undefined) {
      Field_AppliedCapabilities.encode(message.appliedCapabilities, writer.uint32(58).fork()).join();
    }
    if (message.creator !== undefined) {
      UserInfo.encode(message.creator, writer.uint32(66).fork()).join();
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(74).fork()).join();
    }
    if (message.updater !== undefined) {
      UserInfo.encode(message.updater, writer.uint32(82).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(90).fork()).join();
    }
    if (message.publisher !== undefined) {
      UserInfo.encode(message.publisher, writer.uint32(98).fork()).join();
    }
    if (message.disabler !== undefined) {
      UserInfo.encode(message.disabler, writer.uint32(106).fork()).join();
    }
    if (message.disableTime !== undefined) {
      Timestamp.encode(toTimestamp(message.disableTime), writer.uint32(114).fork()).join();
    }
    if (message.lockStatus !== undefined) {
      LockStatus.encode(message.lockStatus, writer.uint32(122).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Field {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseField();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 16:
          if (tag !== 130) {
            break;
          }

          message.textOptions = Field_TextOptions.decode(reader, reader.uint32());
          continue;
        case 18:
          if (tag !== 146) {
            break;
          }

          message.integerOptions = Field_IntegerOptions.decode(reader, reader.uint32());
          continue;
        case 19:
          if (tag !== 154) {
            break;
          }

          message.dateOptions = Field_DateOptions.decode(reader, reader.uint32());
          continue;
        case 20:
          if (tag !== 162) {
            break;
          }

          message.selectionOptions = Field_SelectionOptions.decode(reader, reader.uint32());
          continue;
        case 21:
          if (tag !== 170) {
            break;
          }

          message.userOptions = Field_UserOptions.decode(reader, reader.uint32());
          continue;
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.queryKey = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.properties = Field_Properties.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.lifecycle = Lifecycle.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.displayHints = Field_DisplayHints.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.schemaCapabilities = Field_SchemaCapabilities.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.appliedCapabilities = Field_AppliedCapabilities.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.creator = UserInfo.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.updater = UserInfo.decode(reader, reader.uint32());
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.publisher = UserInfo.decode(reader, reader.uint32());
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.disabler = UserInfo.decode(reader, reader.uint32());
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.disableTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.lockStatus = LockStatus.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Field {
    return {
      textOptions: isSet(object.textOptions) ? Field_TextOptions.fromJSON(object.textOptions) : undefined,
      integerOptions: isSet(object.integerOptions) ? Field_IntegerOptions.fromJSON(object.integerOptions) : undefined,
      dateOptions: isSet(object.dateOptions) ? Field_DateOptions.fromJSON(object.dateOptions) : undefined,
      selectionOptions: isSet(object.selectionOptions)
        ? Field_SelectionOptions.fromJSON(object.selectionOptions)
        : undefined,
      userOptions: isSet(object.userOptions) ? Field_UserOptions.fromJSON(object.userOptions) : undefined,
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      queryKey: isSet(object.queryKey) ? globalThis.String(object.queryKey) : "",
      properties: isSet(object.properties) ? Field_Properties.fromJSON(object.properties) : undefined,
      lifecycle: isSet(object.lifecycle) ? Lifecycle.fromJSON(object.lifecycle) : undefined,
      displayHints: isSet(object.displayHints) ? Field_DisplayHints.fromJSON(object.displayHints) : undefined,
      schemaCapabilities: isSet(object.schemaCapabilities)
        ? Field_SchemaCapabilities.fromJSON(object.schemaCapabilities)
        : undefined,
      appliedCapabilities: isSet(object.appliedCapabilities)
        ? Field_AppliedCapabilities.fromJSON(object.appliedCapabilities)
        : undefined,
      creator: isSet(object.creator) ? UserInfo.fromJSON(object.creator) : undefined,
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updater: isSet(object.updater) ? UserInfo.fromJSON(object.updater) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      publisher: isSet(object.publisher) ? UserInfo.fromJSON(object.publisher) : undefined,
      disabler: isSet(object.disabler) ? UserInfo.fromJSON(object.disabler) : undefined,
      disableTime: isSet(object.disableTime) ? fromJsonTimestamp(object.disableTime) : undefined,
      lockStatus: isSet(object.lockStatus) ? LockStatus.fromJSON(object.lockStatus) : undefined,
    };
  },

  toJSON(message: Field): unknown {
    const obj: any = {};
    if (message.textOptions !== undefined) {
      obj.textOptions = Field_TextOptions.toJSON(message.textOptions);
    }
    if (message.integerOptions !== undefined) {
      obj.integerOptions = Field_IntegerOptions.toJSON(message.integerOptions);
    }
    if (message.dateOptions !== undefined) {
      obj.dateOptions = Field_DateOptions.toJSON(message.dateOptions);
    }
    if (message.selectionOptions !== undefined) {
      obj.selectionOptions = Field_SelectionOptions.toJSON(message.selectionOptions);
    }
    if (message.userOptions !== undefined) {
      obj.userOptions = Field_UserOptions.toJSON(message.userOptions);
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.queryKey !== "") {
      obj.queryKey = message.queryKey;
    }
    if (message.properties !== undefined) {
      obj.properties = Field_Properties.toJSON(message.properties);
    }
    if (message.lifecycle !== undefined) {
      obj.lifecycle = Lifecycle.toJSON(message.lifecycle);
    }
    if (message.displayHints !== undefined) {
      obj.displayHints = Field_DisplayHints.toJSON(message.displayHints);
    }
    if (message.schemaCapabilities !== undefined) {
      obj.schemaCapabilities = Field_SchemaCapabilities.toJSON(message.schemaCapabilities);
    }
    if (message.appliedCapabilities !== undefined) {
      obj.appliedCapabilities = Field_AppliedCapabilities.toJSON(message.appliedCapabilities);
    }
    if (message.creator !== undefined) {
      obj.creator = UserInfo.toJSON(message.creator);
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updater !== undefined) {
      obj.updater = UserInfo.toJSON(message.updater);
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.publisher !== undefined) {
      obj.publisher = UserInfo.toJSON(message.publisher);
    }
    if (message.disabler !== undefined) {
      obj.disabler = UserInfo.toJSON(message.disabler);
    }
    if (message.disableTime !== undefined) {
      obj.disableTime = message.disableTime.toISOString();
    }
    if (message.lockStatus !== undefined) {
      obj.lockStatus = LockStatus.toJSON(message.lockStatus);
    }
    return obj;
  },

  create(base?: DeepPartial<Field>): Field {
    return Field.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Field>): Field {
    const message = createBaseField();
    message.textOptions = (object.textOptions !== undefined && object.textOptions !== null)
      ? Field_TextOptions.fromPartial(object.textOptions)
      : undefined;
    message.integerOptions = (object.integerOptions !== undefined && object.integerOptions !== null)
      ? Field_IntegerOptions.fromPartial(object.integerOptions)
      : undefined;
    message.dateOptions = (object.dateOptions !== undefined && object.dateOptions !== null)
      ? Field_DateOptions.fromPartial(object.dateOptions)
      : undefined;
    message.selectionOptions = (object.selectionOptions !== undefined && object.selectionOptions !== null)
      ? Field_SelectionOptions.fromPartial(object.selectionOptions)
      : undefined;
    message.userOptions = (object.userOptions !== undefined && object.userOptions !== null)
      ? Field_UserOptions.fromPartial(object.userOptions)
      : undefined;
    message.id = object.id ?? "";
    message.queryKey = object.queryKey ?? "";
    message.properties = (object.properties !== undefined && object.properties !== null)
      ? Field_Properties.fromPartial(object.properties)
      : undefined;
    message.lifecycle = (object.lifecycle !== undefined && object.lifecycle !== null)
      ? Lifecycle.fromPartial(object.lifecycle)
      : undefined;
    message.displayHints = (object.displayHints !== undefined && object.displayHints !== null)
      ? Field_DisplayHints.fromPartial(object.displayHints)
      : undefined;
    message.schemaCapabilities = (object.schemaCapabilities !== undefined && object.schemaCapabilities !== null)
      ? Field_SchemaCapabilities.fromPartial(object.schemaCapabilities)
      : undefined;
    message.appliedCapabilities = (object.appliedCapabilities !== undefined && object.appliedCapabilities !== null)
      ? Field_AppliedCapabilities.fromPartial(object.appliedCapabilities)
      : undefined;
    message.creator = (object.creator !== undefined && object.creator !== null)
      ? UserInfo.fromPartial(object.creator)
      : undefined;
    message.createTime = object.createTime ?? undefined;
    message.updater = (object.updater !== undefined && object.updater !== null)
      ? UserInfo.fromPartial(object.updater)
      : undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.publisher = (object.publisher !== undefined && object.publisher !== null)
      ? UserInfo.fromPartial(object.publisher)
      : undefined;
    message.disabler = (object.disabler !== undefined && object.disabler !== null)
      ? UserInfo.fromPartial(object.disabler)
      : undefined;
    message.disableTime = object.disableTime ?? undefined;
    message.lockStatus = (object.lockStatus !== undefined && object.lockStatus !== null)
      ? LockStatus.fromPartial(object.lockStatus)
      : undefined;
    return message;
  },
};

function createBaseField_Properties(): Field_Properties {
  return { displayName: "", required: false, insertBeforeField: "" };
}

export const Field_Properties: MessageFns<Field_Properties> = {
  encode(message: Field_Properties, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.displayName !== "") {
      writer.uint32(10).string(message.displayName);
    }
    if (message.required !== false) {
      writer.uint32(16).bool(message.required);
    }
    if (message.insertBeforeField !== "") {
      writer.uint32(26).string(message.insertBeforeField);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Field_Properties {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseField_Properties();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.required = reader.bool();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.insertBeforeField = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Field_Properties {
    return {
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      required: isSet(object.required) ? globalThis.Boolean(object.required) : false,
      insertBeforeField: isSet(object.insertBeforeField) ? globalThis.String(object.insertBeforeField) : "",
    };
  },

  toJSON(message: Field_Properties): unknown {
    const obj: any = {};
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.required !== false) {
      obj.required = message.required;
    }
    if (message.insertBeforeField !== "") {
      obj.insertBeforeField = message.insertBeforeField;
    }
    return obj;
  },

  create(base?: DeepPartial<Field_Properties>): Field_Properties {
    return Field_Properties.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Field_Properties>): Field_Properties {
    const message = createBaseField_Properties();
    message.displayName = object.displayName ?? "";
    message.required = object.required ?? false;
    message.insertBeforeField = object.insertBeforeField ?? "";
    return message;
  },
};

function createBaseField_DisplayHints(): Field_DisplayHints {
  return { required: false, disabled: false, hiddenInSearch: false, shownInApply: false };
}

export const Field_DisplayHints: MessageFns<Field_DisplayHints> = {
  encode(message: Field_DisplayHints, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.required !== false) {
      writer.uint32(8).bool(message.required);
    }
    if (message.disabled !== false) {
      writer.uint32(16).bool(message.disabled);
    }
    if (message.hiddenInSearch !== false) {
      writer.uint32(24).bool(message.hiddenInSearch);
    }
    if (message.shownInApply !== false) {
      writer.uint32(32).bool(message.shownInApply);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Field_DisplayHints {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseField_DisplayHints();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.required = reader.bool();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.disabled = reader.bool();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.hiddenInSearch = reader.bool();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.shownInApply = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Field_DisplayHints {
    return {
      required: isSet(object.required) ? globalThis.Boolean(object.required) : false,
      disabled: isSet(object.disabled) ? globalThis.Boolean(object.disabled) : false,
      hiddenInSearch: isSet(object.hiddenInSearch) ? globalThis.Boolean(object.hiddenInSearch) : false,
      shownInApply: isSet(object.shownInApply) ? globalThis.Boolean(object.shownInApply) : false,
    };
  },

  toJSON(message: Field_DisplayHints): unknown {
    const obj: any = {};
    if (message.required !== false) {
      obj.required = message.required;
    }
    if (message.disabled !== false) {
      obj.disabled = message.disabled;
    }
    if (message.hiddenInSearch !== false) {
      obj.hiddenInSearch = message.hiddenInSearch;
    }
    if (message.shownInApply !== false) {
      obj.shownInApply = message.shownInApply;
    }
    return obj;
  },

  create(base?: DeepPartial<Field_DisplayHints>): Field_DisplayHints {
    return Field_DisplayHints.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Field_DisplayHints>): Field_DisplayHints {
    const message = createBaseField_DisplayHints();
    message.required = object.required ?? false;
    message.disabled = object.disabled ?? false;
    message.hiddenInSearch = object.hiddenInSearch ?? false;
    message.shownInApply = object.shownInApply ?? false;
    return message;
  },
};

function createBaseField_SchemaCapabilities(): Field_SchemaCapabilities {
  return { canUpdate: false, canDelete: false, canDisable: false, canEnable: false };
}

export const Field_SchemaCapabilities: MessageFns<Field_SchemaCapabilities> = {
  encode(message: Field_SchemaCapabilities, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.canUpdate !== false) {
      writer.uint32(8).bool(message.canUpdate);
    }
    if (message.canDelete !== false) {
      writer.uint32(16).bool(message.canDelete);
    }
    if (message.canDisable !== false) {
      writer.uint32(24).bool(message.canDisable);
    }
    if (message.canEnable !== false) {
      writer.uint32(32).bool(message.canEnable);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Field_SchemaCapabilities {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseField_SchemaCapabilities();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.canUpdate = reader.bool();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.canDelete = reader.bool();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.canDisable = reader.bool();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.canEnable = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Field_SchemaCapabilities {
    return {
      canUpdate: isSet(object.canUpdate) ? globalThis.Boolean(object.canUpdate) : false,
      canDelete: isSet(object.canDelete) ? globalThis.Boolean(object.canDelete) : false,
      canDisable: isSet(object.canDisable) ? globalThis.Boolean(object.canDisable) : false,
      canEnable: isSet(object.canEnable) ? globalThis.Boolean(object.canEnable) : false,
    };
  },

  toJSON(message: Field_SchemaCapabilities): unknown {
    const obj: any = {};
    if (message.canUpdate !== false) {
      obj.canUpdate = message.canUpdate;
    }
    if (message.canDelete !== false) {
      obj.canDelete = message.canDelete;
    }
    if (message.canDisable !== false) {
      obj.canDisable = message.canDisable;
    }
    if (message.canEnable !== false) {
      obj.canEnable = message.canEnable;
    }
    return obj;
  },

  create(base?: DeepPartial<Field_SchemaCapabilities>): Field_SchemaCapabilities {
    return Field_SchemaCapabilities.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Field_SchemaCapabilities>): Field_SchemaCapabilities {
    const message = createBaseField_SchemaCapabilities();
    message.canUpdate = object.canUpdate ?? false;
    message.canDelete = object.canDelete ?? false;
    message.canDisable = object.canDisable ?? false;
    message.canEnable = object.canEnable ?? false;
    return message;
  },
};

function createBaseField_AppliedCapabilities(): Field_AppliedCapabilities {
  return { canRead: false, canSearch: false, canWrite: false };
}

export const Field_AppliedCapabilities: MessageFns<Field_AppliedCapabilities> = {
  encode(message: Field_AppliedCapabilities, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.canRead !== false) {
      writer.uint32(8).bool(message.canRead);
    }
    if (message.canSearch !== false) {
      writer.uint32(16).bool(message.canSearch);
    }
    if (message.canWrite !== false) {
      writer.uint32(24).bool(message.canWrite);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Field_AppliedCapabilities {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseField_AppliedCapabilities();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.canRead = reader.bool();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.canSearch = reader.bool();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.canWrite = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Field_AppliedCapabilities {
    return {
      canRead: isSet(object.canRead) ? globalThis.Boolean(object.canRead) : false,
      canSearch: isSet(object.canSearch) ? globalThis.Boolean(object.canSearch) : false,
      canWrite: isSet(object.canWrite) ? globalThis.Boolean(object.canWrite) : false,
    };
  },

  toJSON(message: Field_AppliedCapabilities): unknown {
    const obj: any = {};
    if (message.canRead !== false) {
      obj.canRead = message.canRead;
    }
    if (message.canSearch !== false) {
      obj.canSearch = message.canSearch;
    }
    if (message.canWrite !== false) {
      obj.canWrite = message.canWrite;
    }
    return obj;
  },

  create(base?: DeepPartial<Field_AppliedCapabilities>): Field_AppliedCapabilities {
    return Field_AppliedCapabilities.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Field_AppliedCapabilities>): Field_AppliedCapabilities {
    const message = createBaseField_AppliedCapabilities();
    message.canRead = object.canRead ?? false;
    message.canSearch = object.canSearch ?? false;
    message.canWrite = object.canWrite ?? false;
    return message;
  },
};

function createBaseField_ListOptions(): Field_ListOptions {
  return { maxEntries: 0 };
}

export const Field_ListOptions: MessageFns<Field_ListOptions> = {
  encode(message: Field_ListOptions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.maxEntries !== 0) {
      writer.uint32(8).int32(message.maxEntries);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Field_ListOptions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseField_ListOptions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.maxEntries = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Field_ListOptions {
    return { maxEntries: isSet(object.maxEntries) ? globalThis.Number(object.maxEntries) : 0 };
  },

  toJSON(message: Field_ListOptions): unknown {
    const obj: any = {};
    if (message.maxEntries !== 0) {
      obj.maxEntries = Math.round(message.maxEntries);
    }
    return obj;
  },

  create(base?: DeepPartial<Field_ListOptions>): Field_ListOptions {
    return Field_ListOptions.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Field_ListOptions>): Field_ListOptions {
    const message = createBaseField_ListOptions();
    message.maxEntries = object.maxEntries ?? 0;
    return message;
  },
};

function createBaseField_TextOptions(): Field_TextOptions {
  return { minLength: 0, maxLength: 0 };
}

export const Field_TextOptions: MessageFns<Field_TextOptions> = {
  encode(message: Field_TextOptions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.minLength !== 0) {
      writer.uint32(8).int32(message.minLength);
    }
    if (message.maxLength !== 0) {
      writer.uint32(16).int32(message.maxLength);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Field_TextOptions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseField_TextOptions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.minLength = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.maxLength = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Field_TextOptions {
    return {
      minLength: isSet(object.minLength) ? globalThis.Number(object.minLength) : 0,
      maxLength: isSet(object.maxLength) ? globalThis.Number(object.maxLength) : 0,
    };
  },

  toJSON(message: Field_TextOptions): unknown {
    const obj: any = {};
    if (message.minLength !== 0) {
      obj.minLength = Math.round(message.minLength);
    }
    if (message.maxLength !== 0) {
      obj.maxLength = Math.round(message.maxLength);
    }
    return obj;
  },

  create(base?: DeepPartial<Field_TextOptions>): Field_TextOptions {
    return Field_TextOptions.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Field_TextOptions>): Field_TextOptions {
    const message = createBaseField_TextOptions();
    message.minLength = object.minLength ?? 0;
    message.maxLength = object.maxLength ?? 0;
    return message;
  },
};

function createBaseField_IntegerOptions(): Field_IntegerOptions {
  return { minValue: Long.ZERO, maxValue: Long.ZERO };
}

export const Field_IntegerOptions: MessageFns<Field_IntegerOptions> = {
  encode(message: Field_IntegerOptions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.minValue.equals(Long.ZERO)) {
      writer.uint32(8).int64(message.minValue.toString());
    }
    if (!message.maxValue.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.maxValue.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Field_IntegerOptions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseField_IntegerOptions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.minValue = Long.fromString(reader.int64().toString());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.maxValue = Long.fromString(reader.int64().toString());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Field_IntegerOptions {
    return {
      minValue: isSet(object.minValue) ? Long.fromValue(object.minValue) : Long.ZERO,
      maxValue: isSet(object.maxValue) ? Long.fromValue(object.maxValue) : Long.ZERO,
    };
  },

  toJSON(message: Field_IntegerOptions): unknown {
    const obj: any = {};
    if (!message.minValue.equals(Long.ZERO)) {
      obj.minValue = (message.minValue || Long.ZERO).toString();
    }
    if (!message.maxValue.equals(Long.ZERO)) {
      obj.maxValue = (message.maxValue || Long.ZERO).toString();
    }
    return obj;
  },

  create(base?: DeepPartial<Field_IntegerOptions>): Field_IntegerOptions {
    return Field_IntegerOptions.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Field_IntegerOptions>): Field_IntegerOptions {
    const message = createBaseField_IntegerOptions();
    message.minValue = (object.minValue !== undefined && object.minValue !== null)
      ? Long.fromValue(object.minValue)
      : Long.ZERO;
    message.maxValue = (object.maxValue !== undefined && object.maxValue !== null)
      ? Long.fromValue(object.maxValue)
      : Long.ZERO;
    return message;
  },
};

function createBaseField_DateOptions(): Field_DateOptions {
  return { dateFormatType: 0, dateFormat: "", minValue: undefined, maxValue: undefined };
}

export const Field_DateOptions: MessageFns<Field_DateOptions> = {
  encode(message: Field_DateOptions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.dateFormatType !== 0) {
      writer.uint32(8).int32(message.dateFormatType);
    }
    if (message.dateFormat !== "") {
      writer.uint32(18).string(message.dateFormat);
    }
    if (message.minValue !== undefined) {
      DateMessage.encode(message.minValue, writer.uint32(26).fork()).join();
    }
    if (message.maxValue !== undefined) {
      DateMessage.encode(message.maxValue, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Field_DateOptions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseField_DateOptions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.dateFormatType = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.dateFormat = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.minValue = DateMessage.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.maxValue = DateMessage.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Field_DateOptions {
    return {
      dateFormatType: isSet(object.dateFormatType) ? field_DateOptions_DateFormatFromJSON(object.dateFormatType) : 0,
      dateFormat: isSet(object.dateFormat) ? globalThis.String(object.dateFormat) : "",
      minValue: isSet(object.minValue) ? DateMessage.fromJSON(object.minValue) : undefined,
      maxValue: isSet(object.maxValue) ? DateMessage.fromJSON(object.maxValue) : undefined,
    };
  },

  toJSON(message: Field_DateOptions): unknown {
    const obj: any = {};
    if (message.dateFormatType !== 0) {
      obj.dateFormatType = field_DateOptions_DateFormatToJSON(message.dateFormatType);
    }
    if (message.dateFormat !== "") {
      obj.dateFormat = message.dateFormat;
    }
    if (message.minValue !== undefined) {
      obj.minValue = DateMessage.toJSON(message.minValue);
    }
    if (message.maxValue !== undefined) {
      obj.maxValue = DateMessage.toJSON(message.maxValue);
    }
    return obj;
  },

  create(base?: DeepPartial<Field_DateOptions>): Field_DateOptions {
    return Field_DateOptions.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Field_DateOptions>): Field_DateOptions {
    const message = createBaseField_DateOptions();
    message.dateFormatType = object.dateFormatType ?? 0;
    message.dateFormat = object.dateFormat ?? "";
    message.minValue = (object.minValue !== undefined && object.minValue !== null)
      ? DateMessage.fromPartial(object.minValue)
      : undefined;
    message.maxValue = (object.maxValue !== undefined && object.maxValue !== null)
      ? DateMessage.fromPartial(object.maxValue)
      : undefined;
    return message;
  },
};

function createBaseField_SelectionOptions(): Field_SelectionOptions {
  return { listOptions: undefined, choices: [] };
}

export const Field_SelectionOptions: MessageFns<Field_SelectionOptions> = {
  encode(message: Field_SelectionOptions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.listOptions !== undefined) {
      Field_ListOptions.encode(message.listOptions, writer.uint32(10).fork()).join();
    }
    for (const v of message.choices) {
      Field_SelectionOptions_Choice.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Field_SelectionOptions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseField_SelectionOptions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.listOptions = Field_ListOptions.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.choices.push(Field_SelectionOptions_Choice.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Field_SelectionOptions {
    return {
      listOptions: isSet(object.listOptions) ? Field_ListOptions.fromJSON(object.listOptions) : undefined,
      choices: globalThis.Array.isArray(object?.choices)
        ? object.choices.map((e: any) => Field_SelectionOptions_Choice.fromJSON(e))
        : [],
    };
  },

  toJSON(message: Field_SelectionOptions): unknown {
    const obj: any = {};
    if (message.listOptions !== undefined) {
      obj.listOptions = Field_ListOptions.toJSON(message.listOptions);
    }
    if (message.choices?.length) {
      obj.choices = message.choices.map((e) => Field_SelectionOptions_Choice.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<Field_SelectionOptions>): Field_SelectionOptions {
    return Field_SelectionOptions.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Field_SelectionOptions>): Field_SelectionOptions {
    const message = createBaseField_SelectionOptions();
    message.listOptions = (object.listOptions !== undefined && object.listOptions !== null)
      ? Field_ListOptions.fromPartial(object.listOptions)
      : undefined;
    message.choices = object.choices?.map((e) => Field_SelectionOptions_Choice.fromPartial(e)) || [];
    return message;
  },
};

function createBaseField_SelectionOptions_Choice(): Field_SelectionOptions_Choice {
  return {
    id: "",
    properties: undefined,
    lifecycle: undefined,
    displayHints: undefined,
    schemaCapabilities: undefined,
    appliedCapabilities: undefined,
    creator: undefined,
    createTime: undefined,
    updater: undefined,
    updateTime: undefined,
    publisher: undefined,
    publishTime: undefined,
    disabler: undefined,
    disableTime: undefined,
    lockStatus: undefined,
  };
}

export const Field_SelectionOptions_Choice: MessageFns<Field_SelectionOptions_Choice> = {
  encode(message: Field_SelectionOptions_Choice, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.properties !== undefined) {
      Field_SelectionOptions_Choice_Properties.encode(message.properties, writer.uint32(18).fork()).join();
    }
    if (message.lifecycle !== undefined) {
      Lifecycle.encode(message.lifecycle, writer.uint32(26).fork()).join();
    }
    if (message.displayHints !== undefined) {
      Field_SelectionOptions_Choice_DisplayHints.encode(message.displayHints, writer.uint32(34).fork()).join();
    }
    if (message.schemaCapabilities !== undefined) {
      Field_SelectionOptions_Choice_SchemaCapabilities.encode(message.schemaCapabilities, writer.uint32(42).fork())
        .join();
    }
    if (message.appliedCapabilities !== undefined) {
      Field_SelectionOptions_Choice_AppliedCapabilities.encode(message.appliedCapabilities, writer.uint32(50).fork())
        .join();
    }
    if (message.creator !== undefined) {
      UserInfo.encode(message.creator, writer.uint32(58).fork()).join();
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(66).fork()).join();
    }
    if (message.updater !== undefined) {
      UserInfo.encode(message.updater, writer.uint32(74).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(82).fork()).join();
    }
    if (message.publisher !== undefined) {
      UserInfo.encode(message.publisher, writer.uint32(90).fork()).join();
    }
    if (message.publishTime !== undefined) {
      Timestamp.encode(toTimestamp(message.publishTime), writer.uint32(98).fork()).join();
    }
    if (message.disabler !== undefined) {
      UserInfo.encode(message.disabler, writer.uint32(106).fork()).join();
    }
    if (message.disableTime !== undefined) {
      Timestamp.encode(toTimestamp(message.disableTime), writer.uint32(114).fork()).join();
    }
    if (message.lockStatus !== undefined) {
      LockStatus.encode(message.lockStatus, writer.uint32(122).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Field_SelectionOptions_Choice {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseField_SelectionOptions_Choice();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.properties = Field_SelectionOptions_Choice_Properties.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.lifecycle = Lifecycle.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.displayHints = Field_SelectionOptions_Choice_DisplayHints.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.schemaCapabilities = Field_SelectionOptions_Choice_SchemaCapabilities.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.appliedCapabilities = Field_SelectionOptions_Choice_AppliedCapabilities.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.creator = UserInfo.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.updater = UserInfo.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.publisher = UserInfo.decode(reader, reader.uint32());
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.publishTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.disabler = UserInfo.decode(reader, reader.uint32());
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.disableTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.lockStatus = LockStatus.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Field_SelectionOptions_Choice {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      properties: isSet(object.properties)
        ? Field_SelectionOptions_Choice_Properties.fromJSON(object.properties)
        : undefined,
      lifecycle: isSet(object.lifecycle) ? Lifecycle.fromJSON(object.lifecycle) : undefined,
      displayHints: isSet(object.displayHints)
        ? Field_SelectionOptions_Choice_DisplayHints.fromJSON(object.displayHints)
        : undefined,
      schemaCapabilities: isSet(object.schemaCapabilities)
        ? Field_SelectionOptions_Choice_SchemaCapabilities.fromJSON(object.schemaCapabilities)
        : undefined,
      appliedCapabilities: isSet(object.appliedCapabilities)
        ? Field_SelectionOptions_Choice_AppliedCapabilities.fromJSON(object.appliedCapabilities)
        : undefined,
      creator: isSet(object.creator) ? UserInfo.fromJSON(object.creator) : undefined,
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updater: isSet(object.updater) ? UserInfo.fromJSON(object.updater) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      publisher: isSet(object.publisher) ? UserInfo.fromJSON(object.publisher) : undefined,
      publishTime: isSet(object.publishTime) ? fromJsonTimestamp(object.publishTime) : undefined,
      disabler: isSet(object.disabler) ? UserInfo.fromJSON(object.disabler) : undefined,
      disableTime: isSet(object.disableTime) ? fromJsonTimestamp(object.disableTime) : undefined,
      lockStatus: isSet(object.lockStatus) ? LockStatus.fromJSON(object.lockStatus) : undefined,
    };
  },

  toJSON(message: Field_SelectionOptions_Choice): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.properties !== undefined) {
      obj.properties = Field_SelectionOptions_Choice_Properties.toJSON(message.properties);
    }
    if (message.lifecycle !== undefined) {
      obj.lifecycle = Lifecycle.toJSON(message.lifecycle);
    }
    if (message.displayHints !== undefined) {
      obj.displayHints = Field_SelectionOptions_Choice_DisplayHints.toJSON(message.displayHints);
    }
    if (message.schemaCapabilities !== undefined) {
      obj.schemaCapabilities = Field_SelectionOptions_Choice_SchemaCapabilities.toJSON(message.schemaCapabilities);
    }
    if (message.appliedCapabilities !== undefined) {
      obj.appliedCapabilities = Field_SelectionOptions_Choice_AppliedCapabilities.toJSON(message.appliedCapabilities);
    }
    if (message.creator !== undefined) {
      obj.creator = UserInfo.toJSON(message.creator);
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updater !== undefined) {
      obj.updater = UserInfo.toJSON(message.updater);
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.publisher !== undefined) {
      obj.publisher = UserInfo.toJSON(message.publisher);
    }
    if (message.publishTime !== undefined) {
      obj.publishTime = message.publishTime.toISOString();
    }
    if (message.disabler !== undefined) {
      obj.disabler = UserInfo.toJSON(message.disabler);
    }
    if (message.disableTime !== undefined) {
      obj.disableTime = message.disableTime.toISOString();
    }
    if (message.lockStatus !== undefined) {
      obj.lockStatus = LockStatus.toJSON(message.lockStatus);
    }
    return obj;
  },

  create(base?: DeepPartial<Field_SelectionOptions_Choice>): Field_SelectionOptions_Choice {
    return Field_SelectionOptions_Choice.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Field_SelectionOptions_Choice>): Field_SelectionOptions_Choice {
    const message = createBaseField_SelectionOptions_Choice();
    message.id = object.id ?? "";
    message.properties = (object.properties !== undefined && object.properties !== null)
      ? Field_SelectionOptions_Choice_Properties.fromPartial(object.properties)
      : undefined;
    message.lifecycle = (object.lifecycle !== undefined && object.lifecycle !== null)
      ? Lifecycle.fromPartial(object.lifecycle)
      : undefined;
    message.displayHints = (object.displayHints !== undefined && object.displayHints !== null)
      ? Field_SelectionOptions_Choice_DisplayHints.fromPartial(object.displayHints)
      : undefined;
    message.schemaCapabilities = (object.schemaCapabilities !== undefined && object.schemaCapabilities !== null)
      ? Field_SelectionOptions_Choice_SchemaCapabilities.fromPartial(object.schemaCapabilities)
      : undefined;
    message.appliedCapabilities = (object.appliedCapabilities !== undefined && object.appliedCapabilities !== null)
      ? Field_SelectionOptions_Choice_AppliedCapabilities.fromPartial(object.appliedCapabilities)
      : undefined;
    message.creator = (object.creator !== undefined && object.creator !== null)
      ? UserInfo.fromPartial(object.creator)
      : undefined;
    message.createTime = object.createTime ?? undefined;
    message.updater = (object.updater !== undefined && object.updater !== null)
      ? UserInfo.fromPartial(object.updater)
      : undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.publisher = (object.publisher !== undefined && object.publisher !== null)
      ? UserInfo.fromPartial(object.publisher)
      : undefined;
    message.publishTime = object.publishTime ?? undefined;
    message.disabler = (object.disabler !== undefined && object.disabler !== null)
      ? UserInfo.fromPartial(object.disabler)
      : undefined;
    message.disableTime = object.disableTime ?? undefined;
    message.lockStatus = (object.lockStatus !== undefined && object.lockStatus !== null)
      ? LockStatus.fromPartial(object.lockStatus)
      : undefined;
    return message;
  },
};

function createBaseField_SelectionOptions_Choice_Properties(): Field_SelectionOptions_Choice_Properties {
  return { displayName: "", description: "", badgeConfig: undefined, insertBeforeChoice: "" };
}

export const Field_SelectionOptions_Choice_Properties: MessageFns<Field_SelectionOptions_Choice_Properties> = {
  encode(message: Field_SelectionOptions_Choice_Properties, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.displayName !== "") {
      writer.uint32(10).string(message.displayName);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.badgeConfig !== undefined) {
      BadgeConfig.encode(message.badgeConfig, writer.uint32(26).fork()).join();
    }
    if (message.insertBeforeChoice !== "") {
      writer.uint32(34).string(message.insertBeforeChoice);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Field_SelectionOptions_Choice_Properties {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseField_SelectionOptions_Choice_Properties();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.badgeConfig = BadgeConfig.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.insertBeforeChoice = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Field_SelectionOptions_Choice_Properties {
    return {
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      badgeConfig: isSet(object.badgeConfig) ? BadgeConfig.fromJSON(object.badgeConfig) : undefined,
      insertBeforeChoice: isSet(object.insertBeforeChoice) ? globalThis.String(object.insertBeforeChoice) : "",
    };
  },

  toJSON(message: Field_SelectionOptions_Choice_Properties): unknown {
    const obj: any = {};
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.badgeConfig !== undefined) {
      obj.badgeConfig = BadgeConfig.toJSON(message.badgeConfig);
    }
    if (message.insertBeforeChoice !== "") {
      obj.insertBeforeChoice = message.insertBeforeChoice;
    }
    return obj;
  },

  create(base?: DeepPartial<Field_SelectionOptions_Choice_Properties>): Field_SelectionOptions_Choice_Properties {
    return Field_SelectionOptions_Choice_Properties.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Field_SelectionOptions_Choice_Properties>): Field_SelectionOptions_Choice_Properties {
    const message = createBaseField_SelectionOptions_Choice_Properties();
    message.displayName = object.displayName ?? "";
    message.description = object.description ?? "";
    message.badgeConfig = (object.badgeConfig !== undefined && object.badgeConfig !== null)
      ? BadgeConfig.fromPartial(object.badgeConfig)
      : undefined;
    message.insertBeforeChoice = object.insertBeforeChoice ?? "";
    return message;
  },
};

function createBaseField_SelectionOptions_Choice_DisplayHints(): Field_SelectionOptions_Choice_DisplayHints {
  return {
    disabled: false,
    hiddenInSearch: false,
    shownInApply: false,
    badgeColors: undefined,
    darkBadgeColors: undefined,
    badgePriority: Long.ZERO,
  };
}

export const Field_SelectionOptions_Choice_DisplayHints: MessageFns<Field_SelectionOptions_Choice_DisplayHints> = {
  encode(message: Field_SelectionOptions_Choice_DisplayHints, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.disabled !== false) {
      writer.uint32(8).bool(message.disabled);
    }
    if (message.hiddenInSearch !== false) {
      writer.uint32(16).bool(message.hiddenInSearch);
    }
    if (message.shownInApply !== false) {
      writer.uint32(24).bool(message.shownInApply);
    }
    if (message.badgeColors !== undefined) {
      BadgeColors.encode(message.badgeColors, writer.uint32(34).fork()).join();
    }
    if (message.darkBadgeColors !== undefined) {
      BadgeColors.encode(message.darkBadgeColors, writer.uint32(42).fork()).join();
    }
    if (!message.badgePriority.equals(Long.ZERO)) {
      writer.uint32(48).int64(message.badgePriority.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Field_SelectionOptions_Choice_DisplayHints {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseField_SelectionOptions_Choice_DisplayHints();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.disabled = reader.bool();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.hiddenInSearch = reader.bool();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.shownInApply = reader.bool();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.badgeColors = BadgeColors.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.darkBadgeColors = BadgeColors.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.badgePriority = Long.fromString(reader.int64().toString());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Field_SelectionOptions_Choice_DisplayHints {
    return {
      disabled: isSet(object.disabled) ? globalThis.Boolean(object.disabled) : false,
      hiddenInSearch: isSet(object.hiddenInSearch) ? globalThis.Boolean(object.hiddenInSearch) : false,
      shownInApply: isSet(object.shownInApply) ? globalThis.Boolean(object.shownInApply) : false,
      badgeColors: isSet(object.badgeColors) ? BadgeColors.fromJSON(object.badgeColors) : undefined,
      darkBadgeColors: isSet(object.darkBadgeColors) ? BadgeColors.fromJSON(object.darkBadgeColors) : undefined,
      badgePriority: isSet(object.badgePriority) ? Long.fromValue(object.badgePriority) : Long.ZERO,
    };
  },

  toJSON(message: Field_SelectionOptions_Choice_DisplayHints): unknown {
    const obj: any = {};
    if (message.disabled !== false) {
      obj.disabled = message.disabled;
    }
    if (message.hiddenInSearch !== false) {
      obj.hiddenInSearch = message.hiddenInSearch;
    }
    if (message.shownInApply !== false) {
      obj.shownInApply = message.shownInApply;
    }
    if (message.badgeColors !== undefined) {
      obj.badgeColors = BadgeColors.toJSON(message.badgeColors);
    }
    if (message.darkBadgeColors !== undefined) {
      obj.darkBadgeColors = BadgeColors.toJSON(message.darkBadgeColors);
    }
    if (!message.badgePriority.equals(Long.ZERO)) {
      obj.badgePriority = (message.badgePriority || Long.ZERO).toString();
    }
    return obj;
  },

  create(base?: DeepPartial<Field_SelectionOptions_Choice_DisplayHints>): Field_SelectionOptions_Choice_DisplayHints {
    return Field_SelectionOptions_Choice_DisplayHints.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<Field_SelectionOptions_Choice_DisplayHints>,
  ): Field_SelectionOptions_Choice_DisplayHints {
    const message = createBaseField_SelectionOptions_Choice_DisplayHints();
    message.disabled = object.disabled ?? false;
    message.hiddenInSearch = object.hiddenInSearch ?? false;
    message.shownInApply = object.shownInApply ?? false;
    message.badgeColors = (object.badgeColors !== undefined && object.badgeColors !== null)
      ? BadgeColors.fromPartial(object.badgeColors)
      : undefined;
    message.darkBadgeColors = (object.darkBadgeColors !== undefined && object.darkBadgeColors !== null)
      ? BadgeColors.fromPartial(object.darkBadgeColors)
      : undefined;
    message.badgePriority = (object.badgePriority !== undefined && object.badgePriority !== null)
      ? Long.fromValue(object.badgePriority)
      : Long.ZERO;
    return message;
  },
};

function createBaseField_SelectionOptions_Choice_SchemaCapabilities(): Field_SelectionOptions_Choice_SchemaCapabilities {
  return { canUpdate: false, canDelete: false, canDisable: false, canEnable: false };
}

export const Field_SelectionOptions_Choice_SchemaCapabilities: MessageFns<
  Field_SelectionOptions_Choice_SchemaCapabilities
> = {
  encode(
    message: Field_SelectionOptions_Choice_SchemaCapabilities,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.canUpdate !== false) {
      writer.uint32(8).bool(message.canUpdate);
    }
    if (message.canDelete !== false) {
      writer.uint32(16).bool(message.canDelete);
    }
    if (message.canDisable !== false) {
      writer.uint32(24).bool(message.canDisable);
    }
    if (message.canEnable !== false) {
      writer.uint32(32).bool(message.canEnable);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Field_SelectionOptions_Choice_SchemaCapabilities {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseField_SelectionOptions_Choice_SchemaCapabilities();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.canUpdate = reader.bool();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.canDelete = reader.bool();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.canDisable = reader.bool();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.canEnable = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Field_SelectionOptions_Choice_SchemaCapabilities {
    return {
      canUpdate: isSet(object.canUpdate) ? globalThis.Boolean(object.canUpdate) : false,
      canDelete: isSet(object.canDelete) ? globalThis.Boolean(object.canDelete) : false,
      canDisable: isSet(object.canDisable) ? globalThis.Boolean(object.canDisable) : false,
      canEnable: isSet(object.canEnable) ? globalThis.Boolean(object.canEnable) : false,
    };
  },

  toJSON(message: Field_SelectionOptions_Choice_SchemaCapabilities): unknown {
    const obj: any = {};
    if (message.canUpdate !== false) {
      obj.canUpdate = message.canUpdate;
    }
    if (message.canDelete !== false) {
      obj.canDelete = message.canDelete;
    }
    if (message.canDisable !== false) {
      obj.canDisable = message.canDisable;
    }
    if (message.canEnable !== false) {
      obj.canEnable = message.canEnable;
    }
    return obj;
  },

  create(
    base?: DeepPartial<Field_SelectionOptions_Choice_SchemaCapabilities>,
  ): Field_SelectionOptions_Choice_SchemaCapabilities {
    return Field_SelectionOptions_Choice_SchemaCapabilities.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<Field_SelectionOptions_Choice_SchemaCapabilities>,
  ): Field_SelectionOptions_Choice_SchemaCapabilities {
    const message = createBaseField_SelectionOptions_Choice_SchemaCapabilities();
    message.canUpdate = object.canUpdate ?? false;
    message.canDelete = object.canDelete ?? false;
    message.canDisable = object.canDisable ?? false;
    message.canEnable = object.canEnable ?? false;
    return message;
  },
};

function createBaseField_SelectionOptions_Choice_AppliedCapabilities(): Field_SelectionOptions_Choice_AppliedCapabilities {
  return { canRead: false, canSearch: false, canSelect: false };
}

export const Field_SelectionOptions_Choice_AppliedCapabilities: MessageFns<
  Field_SelectionOptions_Choice_AppliedCapabilities
> = {
  encode(
    message: Field_SelectionOptions_Choice_AppliedCapabilities,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.canRead !== false) {
      writer.uint32(8).bool(message.canRead);
    }
    if (message.canSearch !== false) {
      writer.uint32(16).bool(message.canSearch);
    }
    if (message.canSelect !== false) {
      writer.uint32(24).bool(message.canSelect);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Field_SelectionOptions_Choice_AppliedCapabilities {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseField_SelectionOptions_Choice_AppliedCapabilities();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.canRead = reader.bool();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.canSearch = reader.bool();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.canSelect = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Field_SelectionOptions_Choice_AppliedCapabilities {
    return {
      canRead: isSet(object.canRead) ? globalThis.Boolean(object.canRead) : false,
      canSearch: isSet(object.canSearch) ? globalThis.Boolean(object.canSearch) : false,
      canSelect: isSet(object.canSelect) ? globalThis.Boolean(object.canSelect) : false,
    };
  },

  toJSON(message: Field_SelectionOptions_Choice_AppliedCapabilities): unknown {
    const obj: any = {};
    if (message.canRead !== false) {
      obj.canRead = message.canRead;
    }
    if (message.canSearch !== false) {
      obj.canSearch = message.canSearch;
    }
    if (message.canSelect !== false) {
      obj.canSelect = message.canSelect;
    }
    return obj;
  },

  create(
    base?: DeepPartial<Field_SelectionOptions_Choice_AppliedCapabilities>,
  ): Field_SelectionOptions_Choice_AppliedCapabilities {
    return Field_SelectionOptions_Choice_AppliedCapabilities.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<Field_SelectionOptions_Choice_AppliedCapabilities>,
  ): Field_SelectionOptions_Choice_AppliedCapabilities {
    const message = createBaseField_SelectionOptions_Choice_AppliedCapabilities();
    message.canRead = object.canRead ?? false;
    message.canSearch = object.canSearch ?? false;
    message.canSelect = object.canSelect ?? false;
    return message;
  },
};

function createBaseField_UserOptions(): Field_UserOptions {
  return { listOptions: undefined };
}

export const Field_UserOptions: MessageFns<Field_UserOptions> = {
  encode(message: Field_UserOptions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.listOptions !== undefined) {
      Field_ListOptions.encode(message.listOptions, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Field_UserOptions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseField_UserOptions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.listOptions = Field_ListOptions.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Field_UserOptions {
    return { listOptions: isSet(object.listOptions) ? Field_ListOptions.fromJSON(object.listOptions) : undefined };
  },

  toJSON(message: Field_UserOptions): unknown {
    const obj: any = {};
    if (message.listOptions !== undefined) {
      obj.listOptions = Field_ListOptions.toJSON(message.listOptions);
    }
    return obj;
  },

  create(base?: DeepPartial<Field_UserOptions>): Field_UserOptions {
    return Field_UserOptions.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Field_UserOptions>): Field_UserOptions {
    const message = createBaseField_UserOptions();
    message.listOptions = (object.listOptions !== undefined && object.listOptions !== null)
      ? Field_ListOptions.fromPartial(object.listOptions)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
