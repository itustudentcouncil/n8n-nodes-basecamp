// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/apps/drive/labels/v2/user_capabilities.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.apps.drive.labels.v2";

/** The capabilities of a user. */
export interface UserCapabilities {
  /** Output only. Resource name for the user capabilities. */
  name: string;
  /** Output only. Whether the user is allowed access to the label manager. */
  canAccessLabelManager: boolean;
  /**
   * Output only. Whether the user is an administrator for the shared labels
   * feature.
   */
  canAdministrateLabels: boolean;
  /** Output only. Whether the user is allowed to create new shared labels. */
  canCreateSharedLabels: boolean;
  /** Output only. Whether the user is allowed to create new admin labels. */
  canCreateAdminLabels: boolean;
}

function createBaseUserCapabilities(): UserCapabilities {
  return {
    name: "",
    canAccessLabelManager: false,
    canAdministrateLabels: false,
    canCreateSharedLabels: false,
    canCreateAdminLabels: false,
  };
}

export const UserCapabilities: MessageFns<UserCapabilities> = {
  encode(message: UserCapabilities, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.canAccessLabelManager !== false) {
      writer.uint32(16).bool(message.canAccessLabelManager);
    }
    if (message.canAdministrateLabels !== false) {
      writer.uint32(24).bool(message.canAdministrateLabels);
    }
    if (message.canCreateSharedLabels !== false) {
      writer.uint32(32).bool(message.canCreateSharedLabels);
    }
    if (message.canCreateAdminLabels !== false) {
      writer.uint32(40).bool(message.canCreateAdminLabels);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserCapabilities {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserCapabilities();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.canAccessLabelManager = reader.bool();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.canAdministrateLabels = reader.bool();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.canCreateSharedLabels = reader.bool();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.canCreateAdminLabels = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserCapabilities {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      canAccessLabelManager: isSet(object.canAccessLabelManager)
        ? globalThis.Boolean(object.canAccessLabelManager)
        : false,
      canAdministrateLabels: isSet(object.canAdministrateLabels)
        ? globalThis.Boolean(object.canAdministrateLabels)
        : false,
      canCreateSharedLabels: isSet(object.canCreateSharedLabels)
        ? globalThis.Boolean(object.canCreateSharedLabels)
        : false,
      canCreateAdminLabels: isSet(object.canCreateAdminLabels)
        ? globalThis.Boolean(object.canCreateAdminLabels)
        : false,
    };
  },

  toJSON(message: UserCapabilities): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.canAccessLabelManager !== false) {
      obj.canAccessLabelManager = message.canAccessLabelManager;
    }
    if (message.canAdministrateLabels !== false) {
      obj.canAdministrateLabels = message.canAdministrateLabels;
    }
    if (message.canCreateSharedLabels !== false) {
      obj.canCreateSharedLabels = message.canCreateSharedLabels;
    }
    if (message.canCreateAdminLabels !== false) {
      obj.canCreateAdminLabels = message.canCreateAdminLabels;
    }
    return obj;
  },

  create(base?: DeepPartial<UserCapabilities>): UserCapabilities {
    return UserCapabilities.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UserCapabilities>): UserCapabilities {
    const message = createBaseUserCapabilities();
    message.name = object.name ?? "";
    message.canAccessLabelManager = object.canAccessLabelManager ?? false;
    message.canAdministrateLabels = object.canAdministrateLabels ?? false;
    message.canCreateSharedLabels = object.canCreateSharedLabels ?? false;
    message.canCreateAdminLabels = object.canCreateAdminLabels ?? false;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
