// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/shopping/css/v1/css_product_common.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { Price } from "../../type/types.js";

export const protobufPackage = "google.shopping.css.v1";

/** Attributes for CSS Product. */
export interface Attributes {
  /** URL directly linking to your the Product Detail Page of the CSS. */
  cppLink?:
    | string
    | undefined;
  /** URL for the mobile-optimized version of the Product Detail Page of the CSS. */
  cppMobileLink?:
    | string
    | undefined;
  /**
   * Allows advertisers to override the item URL when the product is shown
   * within the context of Product Ads.
   */
  cppAdsRedirect?:
    | string
    | undefined;
  /** Low Price of the aggregate offer. */
  lowPrice:
    | Price
    | undefined;
  /** High Price of the aggregate offer. */
  highPrice:
    | Price
    | undefined;
  /** The number of aggregate offers. */
  numberOfOffers?:
    | Long
    | undefined;
  /** Condition of the headline offer. */
  headlineOfferCondition?:
    | string
    | undefined;
  /** Headline Price of the aggregate offer. */
  headlineOfferPrice:
    | Price
    | undefined;
  /** Link to the headline offer. */
  headlineOfferLink?:
    | string
    | undefined;
  /** Mobile Link to the headline offer. */
  headlineOfferMobileLink?:
    | string
    | undefined;
  /** Headline Price of the aggregate offer. */
  headlineOfferShippingPrice:
    | Price
    | undefined;
  /** Title of the item. */
  title?:
    | string
    | undefined;
  /** URL of an image of the item. */
  imageLink?:
    | string
    | undefined;
  /** Additional URL of images of the item. */
  additionalImageLinks: string[];
  /** Description of the item. */
  description?:
    | string
    | undefined;
  /**
   * Product Related Attributes.[14-36]
   * Brand of the item.
   */
  brand?:
    | string
    | undefined;
  /**
   * Manufacturer Part Number
   * ([MPN](https://support.google.com/merchants/answer/188494#mpn)) of the
   * item.
   */
  mpn?:
    | string
    | undefined;
  /**
   * Global Trade Item Number
   * ([GTIN](https://support.google.com/merchants/answer/188494#gtin)) of the
   * item.
   */
  gtin?:
    | string
    | undefined;
  /**
   * Categories of the item (formatted as in [products data
   * specification](https://support.google.com/merchants/answer/6324406)).
   */
  productTypes: string[];
  /**
   * Google's category of the item (see [Google product
   * taxonomy](https://support.google.com/merchants/answer/1705911)). When
   * querying products, this field will contain the user provided value. There
   * is currently no way to get back the auto assigned google product
   * categories through the API.
   */
  googleProductCategory?:
    | string
    | undefined;
  /** Set to true if the item is targeted towards adults. */
  adult?:
    | boolean
    | undefined;
  /** The number of identical products in a merchant-defined multipack. */
  multipack?:
    | Long
    | undefined;
  /**
   * Whether the item is a merchant-defined bundle. A bundle is a custom
   * grouping of different products sold by a merchant for a single price.
   */
  isBundle?:
    | boolean
    | undefined;
  /** Target age group of the item. */
  ageGroup?:
    | string
    | undefined;
  /** Color of the item. */
  color?:
    | string
    | undefined;
  /** Target gender of the item. */
  gender?:
    | string
    | undefined;
  /** The material of which the item is made. */
  material?:
    | string
    | undefined;
  /** The item's pattern (e.g. polka dots). */
  pattern?:
    | string
    | undefined;
  /**
   * Size of the item. Only one value is allowed. For variants with different
   * sizes, insert a separate product for each size with the same
   * `itemGroupId` value (see
   * [https://support.google.com/merchants/answer/6324492](size definition)).
   */
  size?:
    | string
    | undefined;
  /** System in which the size is specified. Recommended for apparel items. */
  sizeSystem?:
    | string
    | undefined;
  /**
   * The cut of the item. It can be used to represent combined size types for
   * apparel items. Maximum two of size types can be provided (see
   * [https://support.google.com/merchants/answer/6324497](size type)).
   */
  sizeTypes: string[];
  /** Shared identifier for all variants of the same product. */
  itemGroupId?:
    | string
    | undefined;
  /** Technical specification or additional product details. */
  productDetails: ProductDetail[];
  /**
   * The weight of the product in the units provided. The value must be
   * between 0 (exclusive) and 2000 (inclusive).
   */
  productWeight:
    | ProductWeight
    | undefined;
  /**
   * The length of the product in the units provided. The value must be
   * between 0 (exclusive) and 3000 (inclusive).
   */
  productLength:
    | ProductDimension
    | undefined;
  /**
   * The width of the product in the units provided. The value must be between
   * 0 (exclusive) and 3000 (inclusive).
   */
  productWidth:
    | ProductDimension
    | undefined;
  /**
   * The height of the product in the units provided. The value must be
   * between
   * 0 (exclusive) and 3000 (inclusive).
   */
  productHeight:
    | ProductDimension
    | undefined;
  /** Bullet points describing the most relevant highlights of a product. */
  productHighlights: string[];
  /** A list of certificates claimed by the CSS for the given product. */
  certifications: Certification[];
  /**
   * Date on which the item should expire, as specified upon insertion, in
   * [ISO
   * 8601](http://en.wikipedia.org/wiki/ISO_8601) format. The actual
   * expiration date is exposed in `productstatuses` as
   * [googleExpirationDate](https://support.google.com/merchants/answer/6324499)
   * and might be earlier if `expirationDate` is too far in the future.
   * Note: It may take 2+ days from the expiration date for the item to
   * actually get deleted.
   */
  expirationDate:
    | Date
    | undefined;
  /**
   * The list of destinations to include for this target (corresponds to
   * checked check boxes in Merchant Center). Default destinations are always
   * included unless provided in `excludedDestinations`.
   */
  includedDestinations: string[];
  /**
   * The list of destinations to exclude for this target (corresponds to
   * unchecked check boxes in Merchant Center).
   */
  excludedDestinations: string[];
  /** Publication of this item will be temporarily paused. */
  pause?:
    | string
    | undefined;
  /** Custom label 0 for custom grouping of items in a Shopping campaign. */
  customLabel0?:
    | string
    | undefined;
  /** Custom label 1 for custom grouping of items in a Shopping campaign. */
  customLabel1?:
    | string
    | undefined;
  /** Custom label 2 for custom grouping of items in a Shopping campaign. */
  customLabel2?:
    | string
    | undefined;
  /** Custom label 3 for custom grouping of items in a Shopping campaign. */
  customLabel3?:
    | string
    | undefined;
  /** Custom label 4 for custom grouping of items in a Shopping campaign. */
  customLabel4?: string | undefined;
}

/**
 * The certification for the product. Use the this attribute to describe
 * certifications, such as energy efficiency ratings, associated with a product.
 */
export interface Certification {
  /**
   * The name of the certification. At this time, the most common value is
   * "EPREL", which represents energy efficiency certifications in the EU
   * European Registry for Energy Labeling (EPREL) database.
   */
  name: string;
  /**
   * The authority or certification body responsible for issuing the
   * certification. At this time, the most common value is "EC" or
   * “European_Commission” for energy labels in the EU.
   */
  authority: string;
  /**
   * The code of the certification. For example, for the EPREL certificate with
   * the link https://eprel.ec.europa.eu/screen/product/dishwashers2019/123456
   * the code is 123456. The code is required for European Energy Labels.
   */
  code: string;
}

/** The product details. */
export interface ProductDetail {
  /** The section header used to group a set of product details. */
  sectionName: string;
  /** The name of the product detail. */
  attributeName: string;
  /** The value of the product detail. */
  attributeValue: string;
}

/** The dimension of the product. */
export interface ProductDimension {
  /**
   * Required. The dimension value represented as a number. The value can have a
   * maximum precision of four decimal places.
   */
  value: number;
  /**
   * Required. The dimension units.
   * Acceptable values are:
   *   * "`in`"
   *   * "`cm`"
   */
  unit: string;
}

/** The weight of the product. */
export interface ProductWeight {
  /**
   * Required. The weight represented as a number. The weight can have a maximum
   * precision of four decimal places.
   */
  value: number;
  /**
   * Required. The weight unit.
   * Acceptable values are:
   *   * "`g`"
   *   * "`kg`"
   *   * "`oz`"
   *   * "`lb`"
   */
  unit: string;
}

/**
 * The status of the Css Product, data validation issues, that is,
 * information about the Css Product computed asynchronously.
 */
export interface CssProductStatus {
  /** The intended destinations for the product. */
  destinationStatuses: CssProductStatus_DestinationStatus[];
  /** A list of all issues associated with the product. */
  itemLevelIssues: CssProductStatus_ItemLevelIssue[];
  /**
   * Date on which the item has been created, in [ISO
   * 8601](http://en.wikipedia.org/wiki/ISO_8601) format.
   */
  creationDate:
    | Date
    | undefined;
  /**
   * Date on which the item has been last updated, in [ISO
   * 8601](http://en.wikipedia.org/wiki/ISO_8601) format.
   */
  lastUpdateDate:
    | Date
    | undefined;
  /**
   * Date on which the item expires, in [ISO
   * 8601](http://en.wikipedia.org/wiki/ISO_8601) format.
   */
  googleExpirationDate: Date | undefined;
}

/** The destination status of the product status. */
export interface CssProductStatus_DestinationStatus {
  /** The name of the destination */
  destination: string;
  /**
   * List of country codes (ISO 3166-1 alpha-2) where the aggregate offer is
   * approved.
   */
  approvedCountries: string[];
  /**
   * List of country codes (ISO 3166-1 alpha-2) where the aggregate offer is
   * pending approval.
   */
  pendingCountries: string[];
  /**
   * List of country codes (ISO 3166-1 alpha-2) where the aggregate offer is
   * disapproved.
   */
  disapprovedCountries: string[];
}

/** The ItemLevelIssue of the product status. */
export interface CssProductStatus_ItemLevelIssue {
  /** The error code of the issue. */
  code: string;
  /** How this issue affects serving of the aggregate offer. */
  servability: string;
  /** Whether the issue can be resolved by the merchant. */
  resolution: string;
  /** The attribute's name, if the issue is caused by a single attribute. */
  attribute: string;
  /** The destination the issue applies to. */
  destination: string;
  /** A short issue description in English. */
  description: string;
  /** A detailed issue description in English. */
  detail: string;
  /** The URL of a web page to help with resolving this issue. */
  documentation: string;
  /**
   * List of country codes (ISO 3166-1 alpha-2) where issue applies to the
   * aggregate offer.
   */
  applicableCountries: string[];
}

function createBaseAttributes(): Attributes {
  return {
    cppLink: undefined,
    cppMobileLink: undefined,
    cppAdsRedirect: undefined,
    lowPrice: undefined,
    highPrice: undefined,
    numberOfOffers: undefined,
    headlineOfferCondition: undefined,
    headlineOfferPrice: undefined,
    headlineOfferLink: undefined,
    headlineOfferMobileLink: undefined,
    headlineOfferShippingPrice: undefined,
    title: undefined,
    imageLink: undefined,
    additionalImageLinks: [],
    description: undefined,
    brand: undefined,
    mpn: undefined,
    gtin: undefined,
    productTypes: [],
    googleProductCategory: undefined,
    adult: undefined,
    multipack: undefined,
    isBundle: undefined,
    ageGroup: undefined,
    color: undefined,
    gender: undefined,
    material: undefined,
    pattern: undefined,
    size: undefined,
    sizeSystem: undefined,
    sizeTypes: [],
    itemGroupId: undefined,
    productDetails: [],
    productWeight: undefined,
    productLength: undefined,
    productWidth: undefined,
    productHeight: undefined,
    productHighlights: [],
    certifications: [],
    expirationDate: undefined,
    includedDestinations: [],
    excludedDestinations: [],
    pause: undefined,
    customLabel0: undefined,
    customLabel1: undefined,
    customLabel2: undefined,
    customLabel3: undefined,
    customLabel4: undefined,
  };
}

export const Attributes: MessageFns<Attributes> = {
  encode(message: Attributes, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.cppLink !== undefined) {
      writer.uint32(10).string(message.cppLink);
    }
    if (message.cppMobileLink !== undefined) {
      writer.uint32(18).string(message.cppMobileLink);
    }
    if (message.cppAdsRedirect !== undefined) {
      writer.uint32(338).string(message.cppAdsRedirect);
    }
    if (message.lowPrice !== undefined) {
      Price.encode(message.lowPrice, writer.uint32(26).fork()).join();
    }
    if (message.highPrice !== undefined) {
      Price.encode(message.highPrice, writer.uint32(34).fork()).join();
    }
    if (message.numberOfOffers !== undefined) {
      writer.uint32(40).int64(message.numberOfOffers.toString());
    }
    if (message.headlineOfferCondition !== undefined) {
      writer.uint32(50).string(message.headlineOfferCondition);
    }
    if (message.headlineOfferPrice !== undefined) {
      Price.encode(message.headlineOfferPrice, writer.uint32(58).fork()).join();
    }
    if (message.headlineOfferLink !== undefined) {
      writer.uint32(66).string(message.headlineOfferLink);
    }
    if (message.headlineOfferMobileLink !== undefined) {
      writer.uint32(74).string(message.headlineOfferMobileLink);
    }
    if (message.headlineOfferShippingPrice !== undefined) {
      Price.encode(message.headlineOfferShippingPrice, writer.uint32(330).fork()).join();
    }
    if (message.title !== undefined) {
      writer.uint32(82).string(message.title);
    }
    if (message.imageLink !== undefined) {
      writer.uint32(90).string(message.imageLink);
    }
    for (const v of message.additionalImageLinks) {
      writer.uint32(98).string(v!);
    }
    if (message.description !== undefined) {
      writer.uint32(106).string(message.description);
    }
    if (message.brand !== undefined) {
      writer.uint32(114).string(message.brand);
    }
    if (message.mpn !== undefined) {
      writer.uint32(122).string(message.mpn);
    }
    if (message.gtin !== undefined) {
      writer.uint32(130).string(message.gtin);
    }
    for (const v of message.productTypes) {
      writer.uint32(290).string(v!);
    }
    if (message.googleProductCategory !== undefined) {
      writer.uint32(138).string(message.googleProductCategory);
    }
    if (message.adult !== undefined) {
      writer.uint32(144).bool(message.adult);
    }
    if (message.multipack !== undefined) {
      writer.uint32(152).int64(message.multipack.toString());
    }
    if (message.isBundle !== undefined) {
      writer.uint32(160).bool(message.isBundle);
    }
    if (message.ageGroup !== undefined) {
      writer.uint32(170).string(message.ageGroup);
    }
    if (message.color !== undefined) {
      writer.uint32(178).string(message.color);
    }
    if (message.gender !== undefined) {
      writer.uint32(186).string(message.gender);
    }
    if (message.material !== undefined) {
      writer.uint32(194).string(message.material);
    }
    if (message.pattern !== undefined) {
      writer.uint32(202).string(message.pattern);
    }
    if (message.size !== undefined) {
      writer.uint32(210).string(message.size);
    }
    if (message.sizeSystem !== undefined) {
      writer.uint32(218).string(message.sizeSystem);
    }
    for (const v of message.sizeTypes) {
      writer.uint32(226).string(v!);
    }
    if (message.itemGroupId !== undefined) {
      writer.uint32(234).string(message.itemGroupId);
    }
    for (const v of message.productDetails) {
      ProductDetail.encode(v!, writer.uint32(242).fork()).join();
    }
    if (message.productWeight !== undefined) {
      ProductWeight.encode(message.productWeight, writer.uint32(250).fork()).join();
    }
    if (message.productLength !== undefined) {
      ProductDimension.encode(message.productLength, writer.uint32(258).fork()).join();
    }
    if (message.productWidth !== undefined) {
      ProductDimension.encode(message.productWidth, writer.uint32(266).fork()).join();
    }
    if (message.productHeight !== undefined) {
      ProductDimension.encode(message.productHeight, writer.uint32(274).fork()).join();
    }
    for (const v of message.productHighlights) {
      writer.uint32(282).string(v!);
    }
    for (const v of message.certifications) {
      Certification.encode(v!, writer.uint32(314).fork()).join();
    }
    if (message.expirationDate !== undefined) {
      Timestamp.encode(toTimestamp(message.expirationDate), writer.uint32(322).fork()).join();
    }
    for (const v of message.includedDestinations) {
      writer.uint32(346).string(v!);
    }
    for (const v of message.excludedDestinations) {
      writer.uint32(354).string(v!);
    }
    if (message.pause !== undefined) {
      writer.uint32(362).string(message.pause);
    }
    if (message.customLabel0 !== undefined) {
      writer.uint32(370).string(message.customLabel0);
    }
    if (message.customLabel1 !== undefined) {
      writer.uint32(378).string(message.customLabel1);
    }
    if (message.customLabel2 !== undefined) {
      writer.uint32(386).string(message.customLabel2);
    }
    if (message.customLabel3 !== undefined) {
      writer.uint32(394).string(message.customLabel3);
    }
    if (message.customLabel4 !== undefined) {
      writer.uint32(402).string(message.customLabel4);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Attributes {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAttributes();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.cppLink = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.cppMobileLink = reader.string();
          continue;
        case 42:
          if (tag !== 338) {
            break;
          }

          message.cppAdsRedirect = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.lowPrice = Price.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.highPrice = Price.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.numberOfOffers = Long.fromString(reader.int64().toString());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.headlineOfferCondition = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.headlineOfferPrice = Price.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.headlineOfferLink = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.headlineOfferMobileLink = reader.string();
          continue;
        case 41:
          if (tag !== 330) {
            break;
          }

          message.headlineOfferShippingPrice = Price.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.title = reader.string();
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.imageLink = reader.string();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.additionalImageLinks.push(reader.string());
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.description = reader.string();
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.brand = reader.string();
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.mpn = reader.string();
          continue;
        case 16:
          if (tag !== 130) {
            break;
          }

          message.gtin = reader.string();
          continue;
        case 36:
          if (tag !== 290) {
            break;
          }

          message.productTypes.push(reader.string());
          continue;
        case 17:
          if (tag !== 138) {
            break;
          }

          message.googleProductCategory = reader.string();
          continue;
        case 18:
          if (tag !== 144) {
            break;
          }

          message.adult = reader.bool();
          continue;
        case 19:
          if (tag !== 152) {
            break;
          }

          message.multipack = Long.fromString(reader.int64().toString());
          continue;
        case 20:
          if (tag !== 160) {
            break;
          }

          message.isBundle = reader.bool();
          continue;
        case 21:
          if (tag !== 170) {
            break;
          }

          message.ageGroup = reader.string();
          continue;
        case 22:
          if (tag !== 178) {
            break;
          }

          message.color = reader.string();
          continue;
        case 23:
          if (tag !== 186) {
            break;
          }

          message.gender = reader.string();
          continue;
        case 24:
          if (tag !== 194) {
            break;
          }

          message.material = reader.string();
          continue;
        case 25:
          if (tag !== 202) {
            break;
          }

          message.pattern = reader.string();
          continue;
        case 26:
          if (tag !== 210) {
            break;
          }

          message.size = reader.string();
          continue;
        case 27:
          if (tag !== 218) {
            break;
          }

          message.sizeSystem = reader.string();
          continue;
        case 28:
          if (tag !== 226) {
            break;
          }

          message.sizeTypes.push(reader.string());
          continue;
        case 29:
          if (tag !== 234) {
            break;
          }

          message.itemGroupId = reader.string();
          continue;
        case 30:
          if (tag !== 242) {
            break;
          }

          message.productDetails.push(ProductDetail.decode(reader, reader.uint32()));
          continue;
        case 31:
          if (tag !== 250) {
            break;
          }

          message.productWeight = ProductWeight.decode(reader, reader.uint32());
          continue;
        case 32:
          if (tag !== 258) {
            break;
          }

          message.productLength = ProductDimension.decode(reader, reader.uint32());
          continue;
        case 33:
          if (tag !== 266) {
            break;
          }

          message.productWidth = ProductDimension.decode(reader, reader.uint32());
          continue;
        case 34:
          if (tag !== 274) {
            break;
          }

          message.productHeight = ProductDimension.decode(reader, reader.uint32());
          continue;
        case 35:
          if (tag !== 282) {
            break;
          }

          message.productHighlights.push(reader.string());
          continue;
        case 39:
          if (tag !== 314) {
            break;
          }

          message.certifications.push(Certification.decode(reader, reader.uint32()));
          continue;
        case 40:
          if (tag !== 322) {
            break;
          }

          message.expirationDate = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 43:
          if (tag !== 346) {
            break;
          }

          message.includedDestinations.push(reader.string());
          continue;
        case 44:
          if (tag !== 354) {
            break;
          }

          message.excludedDestinations.push(reader.string());
          continue;
        case 45:
          if (tag !== 362) {
            break;
          }

          message.pause = reader.string();
          continue;
        case 46:
          if (tag !== 370) {
            break;
          }

          message.customLabel0 = reader.string();
          continue;
        case 47:
          if (tag !== 378) {
            break;
          }

          message.customLabel1 = reader.string();
          continue;
        case 48:
          if (tag !== 386) {
            break;
          }

          message.customLabel2 = reader.string();
          continue;
        case 49:
          if (tag !== 394) {
            break;
          }

          message.customLabel3 = reader.string();
          continue;
        case 50:
          if (tag !== 402) {
            break;
          }

          message.customLabel4 = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Attributes {
    return {
      cppLink: isSet(object.cppLink) ? globalThis.String(object.cppLink) : undefined,
      cppMobileLink: isSet(object.cppMobileLink) ? globalThis.String(object.cppMobileLink) : undefined,
      cppAdsRedirect: isSet(object.cppAdsRedirect) ? globalThis.String(object.cppAdsRedirect) : undefined,
      lowPrice: isSet(object.lowPrice) ? Price.fromJSON(object.lowPrice) : undefined,
      highPrice: isSet(object.highPrice) ? Price.fromJSON(object.highPrice) : undefined,
      numberOfOffers: isSet(object.numberOfOffers) ? Long.fromValue(object.numberOfOffers) : undefined,
      headlineOfferCondition: isSet(object.headlineOfferCondition)
        ? globalThis.String(object.headlineOfferCondition)
        : undefined,
      headlineOfferPrice: isSet(object.headlineOfferPrice) ? Price.fromJSON(object.headlineOfferPrice) : undefined,
      headlineOfferLink: isSet(object.headlineOfferLink) ? globalThis.String(object.headlineOfferLink) : undefined,
      headlineOfferMobileLink: isSet(object.headlineOfferMobileLink)
        ? globalThis.String(object.headlineOfferMobileLink)
        : undefined,
      headlineOfferShippingPrice: isSet(object.headlineOfferShippingPrice)
        ? Price.fromJSON(object.headlineOfferShippingPrice)
        : undefined,
      title: isSet(object.title) ? globalThis.String(object.title) : undefined,
      imageLink: isSet(object.imageLink) ? globalThis.String(object.imageLink) : undefined,
      additionalImageLinks: globalThis.Array.isArray(object?.additionalImageLinks)
        ? object.additionalImageLinks.map((e: any) => globalThis.String(e))
        : [],
      description: isSet(object.description) ? globalThis.String(object.description) : undefined,
      brand: isSet(object.brand) ? globalThis.String(object.brand) : undefined,
      mpn: isSet(object.mpn) ? globalThis.String(object.mpn) : undefined,
      gtin: isSet(object.gtin) ? globalThis.String(object.gtin) : undefined,
      productTypes: globalThis.Array.isArray(object?.productTypes)
        ? object.productTypes.map((e: any) => globalThis.String(e))
        : [],
      googleProductCategory: isSet(object.googleProductCategory)
        ? globalThis.String(object.googleProductCategory)
        : undefined,
      adult: isSet(object.adult) ? globalThis.Boolean(object.adult) : undefined,
      multipack: isSet(object.multipack) ? Long.fromValue(object.multipack) : undefined,
      isBundle: isSet(object.isBundle) ? globalThis.Boolean(object.isBundle) : undefined,
      ageGroup: isSet(object.ageGroup) ? globalThis.String(object.ageGroup) : undefined,
      color: isSet(object.color) ? globalThis.String(object.color) : undefined,
      gender: isSet(object.gender) ? globalThis.String(object.gender) : undefined,
      material: isSet(object.material) ? globalThis.String(object.material) : undefined,
      pattern: isSet(object.pattern) ? globalThis.String(object.pattern) : undefined,
      size: isSet(object.size) ? globalThis.String(object.size) : undefined,
      sizeSystem: isSet(object.sizeSystem) ? globalThis.String(object.sizeSystem) : undefined,
      sizeTypes: globalThis.Array.isArray(object?.sizeTypes)
        ? object.sizeTypes.map((e: any) => globalThis.String(e))
        : [],
      itemGroupId: isSet(object.itemGroupId) ? globalThis.String(object.itemGroupId) : undefined,
      productDetails: globalThis.Array.isArray(object?.productDetails)
        ? object.productDetails.map((e: any) => ProductDetail.fromJSON(e))
        : [],
      productWeight: isSet(object.productWeight) ? ProductWeight.fromJSON(object.productWeight) : undefined,
      productLength: isSet(object.productLength) ? ProductDimension.fromJSON(object.productLength) : undefined,
      productWidth: isSet(object.productWidth) ? ProductDimension.fromJSON(object.productWidth) : undefined,
      productHeight: isSet(object.productHeight) ? ProductDimension.fromJSON(object.productHeight) : undefined,
      productHighlights: globalThis.Array.isArray(object?.productHighlights)
        ? object.productHighlights.map((e: any) => globalThis.String(e))
        : [],
      certifications: globalThis.Array.isArray(object?.certifications)
        ? object.certifications.map((e: any) => Certification.fromJSON(e))
        : [],
      expirationDate: isSet(object.expirationDate) ? fromJsonTimestamp(object.expirationDate) : undefined,
      includedDestinations: globalThis.Array.isArray(object?.includedDestinations)
        ? object.includedDestinations.map((e: any) => globalThis.String(e))
        : [],
      excludedDestinations: globalThis.Array.isArray(object?.excludedDestinations)
        ? object.excludedDestinations.map((e: any) => globalThis.String(e))
        : [],
      pause: isSet(object.pause) ? globalThis.String(object.pause) : undefined,
      customLabel0: isSet(object.customLabel0) ? globalThis.String(object.customLabel0) : undefined,
      customLabel1: isSet(object.customLabel1) ? globalThis.String(object.customLabel1) : undefined,
      customLabel2: isSet(object.customLabel2) ? globalThis.String(object.customLabel2) : undefined,
      customLabel3: isSet(object.customLabel3) ? globalThis.String(object.customLabel3) : undefined,
      customLabel4: isSet(object.customLabel4) ? globalThis.String(object.customLabel4) : undefined,
    };
  },

  toJSON(message: Attributes): unknown {
    const obj: any = {};
    if (message.cppLink !== undefined) {
      obj.cppLink = message.cppLink;
    }
    if (message.cppMobileLink !== undefined) {
      obj.cppMobileLink = message.cppMobileLink;
    }
    if (message.cppAdsRedirect !== undefined) {
      obj.cppAdsRedirect = message.cppAdsRedirect;
    }
    if (message.lowPrice !== undefined) {
      obj.lowPrice = Price.toJSON(message.lowPrice);
    }
    if (message.highPrice !== undefined) {
      obj.highPrice = Price.toJSON(message.highPrice);
    }
    if (message.numberOfOffers !== undefined) {
      obj.numberOfOffers = (message.numberOfOffers || Long.ZERO).toString();
    }
    if (message.headlineOfferCondition !== undefined) {
      obj.headlineOfferCondition = message.headlineOfferCondition;
    }
    if (message.headlineOfferPrice !== undefined) {
      obj.headlineOfferPrice = Price.toJSON(message.headlineOfferPrice);
    }
    if (message.headlineOfferLink !== undefined) {
      obj.headlineOfferLink = message.headlineOfferLink;
    }
    if (message.headlineOfferMobileLink !== undefined) {
      obj.headlineOfferMobileLink = message.headlineOfferMobileLink;
    }
    if (message.headlineOfferShippingPrice !== undefined) {
      obj.headlineOfferShippingPrice = Price.toJSON(message.headlineOfferShippingPrice);
    }
    if (message.title !== undefined) {
      obj.title = message.title;
    }
    if (message.imageLink !== undefined) {
      obj.imageLink = message.imageLink;
    }
    if (message.additionalImageLinks?.length) {
      obj.additionalImageLinks = message.additionalImageLinks;
    }
    if (message.description !== undefined) {
      obj.description = message.description;
    }
    if (message.brand !== undefined) {
      obj.brand = message.brand;
    }
    if (message.mpn !== undefined) {
      obj.mpn = message.mpn;
    }
    if (message.gtin !== undefined) {
      obj.gtin = message.gtin;
    }
    if (message.productTypes?.length) {
      obj.productTypes = message.productTypes;
    }
    if (message.googleProductCategory !== undefined) {
      obj.googleProductCategory = message.googleProductCategory;
    }
    if (message.adult !== undefined) {
      obj.adult = message.adult;
    }
    if (message.multipack !== undefined) {
      obj.multipack = (message.multipack || Long.ZERO).toString();
    }
    if (message.isBundle !== undefined) {
      obj.isBundle = message.isBundle;
    }
    if (message.ageGroup !== undefined) {
      obj.ageGroup = message.ageGroup;
    }
    if (message.color !== undefined) {
      obj.color = message.color;
    }
    if (message.gender !== undefined) {
      obj.gender = message.gender;
    }
    if (message.material !== undefined) {
      obj.material = message.material;
    }
    if (message.pattern !== undefined) {
      obj.pattern = message.pattern;
    }
    if (message.size !== undefined) {
      obj.size = message.size;
    }
    if (message.sizeSystem !== undefined) {
      obj.sizeSystem = message.sizeSystem;
    }
    if (message.sizeTypes?.length) {
      obj.sizeTypes = message.sizeTypes;
    }
    if (message.itemGroupId !== undefined) {
      obj.itemGroupId = message.itemGroupId;
    }
    if (message.productDetails?.length) {
      obj.productDetails = message.productDetails.map((e) => ProductDetail.toJSON(e));
    }
    if (message.productWeight !== undefined) {
      obj.productWeight = ProductWeight.toJSON(message.productWeight);
    }
    if (message.productLength !== undefined) {
      obj.productLength = ProductDimension.toJSON(message.productLength);
    }
    if (message.productWidth !== undefined) {
      obj.productWidth = ProductDimension.toJSON(message.productWidth);
    }
    if (message.productHeight !== undefined) {
      obj.productHeight = ProductDimension.toJSON(message.productHeight);
    }
    if (message.productHighlights?.length) {
      obj.productHighlights = message.productHighlights;
    }
    if (message.certifications?.length) {
      obj.certifications = message.certifications.map((e) => Certification.toJSON(e));
    }
    if (message.expirationDate !== undefined) {
      obj.expirationDate = message.expirationDate.toISOString();
    }
    if (message.includedDestinations?.length) {
      obj.includedDestinations = message.includedDestinations;
    }
    if (message.excludedDestinations?.length) {
      obj.excludedDestinations = message.excludedDestinations;
    }
    if (message.pause !== undefined) {
      obj.pause = message.pause;
    }
    if (message.customLabel0 !== undefined) {
      obj.customLabel0 = message.customLabel0;
    }
    if (message.customLabel1 !== undefined) {
      obj.customLabel1 = message.customLabel1;
    }
    if (message.customLabel2 !== undefined) {
      obj.customLabel2 = message.customLabel2;
    }
    if (message.customLabel3 !== undefined) {
      obj.customLabel3 = message.customLabel3;
    }
    if (message.customLabel4 !== undefined) {
      obj.customLabel4 = message.customLabel4;
    }
    return obj;
  },

  create(base?: DeepPartial<Attributes>): Attributes {
    return Attributes.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Attributes>): Attributes {
    const message = createBaseAttributes();
    message.cppLink = object.cppLink ?? undefined;
    message.cppMobileLink = object.cppMobileLink ?? undefined;
    message.cppAdsRedirect = object.cppAdsRedirect ?? undefined;
    message.lowPrice = (object.lowPrice !== undefined && object.lowPrice !== null)
      ? Price.fromPartial(object.lowPrice)
      : undefined;
    message.highPrice = (object.highPrice !== undefined && object.highPrice !== null)
      ? Price.fromPartial(object.highPrice)
      : undefined;
    message.numberOfOffers = (object.numberOfOffers !== undefined && object.numberOfOffers !== null)
      ? Long.fromValue(object.numberOfOffers)
      : undefined;
    message.headlineOfferCondition = object.headlineOfferCondition ?? undefined;
    message.headlineOfferPrice = (object.headlineOfferPrice !== undefined && object.headlineOfferPrice !== null)
      ? Price.fromPartial(object.headlineOfferPrice)
      : undefined;
    message.headlineOfferLink = object.headlineOfferLink ?? undefined;
    message.headlineOfferMobileLink = object.headlineOfferMobileLink ?? undefined;
    message.headlineOfferShippingPrice =
      (object.headlineOfferShippingPrice !== undefined && object.headlineOfferShippingPrice !== null)
        ? Price.fromPartial(object.headlineOfferShippingPrice)
        : undefined;
    message.title = object.title ?? undefined;
    message.imageLink = object.imageLink ?? undefined;
    message.additionalImageLinks = object.additionalImageLinks?.map((e) => e) || [];
    message.description = object.description ?? undefined;
    message.brand = object.brand ?? undefined;
    message.mpn = object.mpn ?? undefined;
    message.gtin = object.gtin ?? undefined;
    message.productTypes = object.productTypes?.map((e) => e) || [];
    message.googleProductCategory = object.googleProductCategory ?? undefined;
    message.adult = object.adult ?? undefined;
    message.multipack = (object.multipack !== undefined && object.multipack !== null)
      ? Long.fromValue(object.multipack)
      : undefined;
    message.isBundle = object.isBundle ?? undefined;
    message.ageGroup = object.ageGroup ?? undefined;
    message.color = object.color ?? undefined;
    message.gender = object.gender ?? undefined;
    message.material = object.material ?? undefined;
    message.pattern = object.pattern ?? undefined;
    message.size = object.size ?? undefined;
    message.sizeSystem = object.sizeSystem ?? undefined;
    message.sizeTypes = object.sizeTypes?.map((e) => e) || [];
    message.itemGroupId = object.itemGroupId ?? undefined;
    message.productDetails = object.productDetails?.map((e) => ProductDetail.fromPartial(e)) || [];
    message.productWeight = (object.productWeight !== undefined && object.productWeight !== null)
      ? ProductWeight.fromPartial(object.productWeight)
      : undefined;
    message.productLength = (object.productLength !== undefined && object.productLength !== null)
      ? ProductDimension.fromPartial(object.productLength)
      : undefined;
    message.productWidth = (object.productWidth !== undefined && object.productWidth !== null)
      ? ProductDimension.fromPartial(object.productWidth)
      : undefined;
    message.productHeight = (object.productHeight !== undefined && object.productHeight !== null)
      ? ProductDimension.fromPartial(object.productHeight)
      : undefined;
    message.productHighlights = object.productHighlights?.map((e) => e) || [];
    message.certifications = object.certifications?.map((e) => Certification.fromPartial(e)) || [];
    message.expirationDate = object.expirationDate ?? undefined;
    message.includedDestinations = object.includedDestinations?.map((e) => e) || [];
    message.excludedDestinations = object.excludedDestinations?.map((e) => e) || [];
    message.pause = object.pause ?? undefined;
    message.customLabel0 = object.customLabel0 ?? undefined;
    message.customLabel1 = object.customLabel1 ?? undefined;
    message.customLabel2 = object.customLabel2 ?? undefined;
    message.customLabel3 = object.customLabel3 ?? undefined;
    message.customLabel4 = object.customLabel4 ?? undefined;
    return message;
  },
};

function createBaseCertification(): Certification {
  return { name: "", authority: "", code: "" };
}

export const Certification: MessageFns<Certification> = {
  encode(message: Certification, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.authority !== "") {
      writer.uint32(18).string(message.authority);
    }
    if (message.code !== "") {
      writer.uint32(26).string(message.code);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Certification {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCertification();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.authority = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.code = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Certification {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      authority: isSet(object.authority) ? globalThis.String(object.authority) : "",
      code: isSet(object.code) ? globalThis.String(object.code) : "",
    };
  },

  toJSON(message: Certification): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.authority !== "") {
      obj.authority = message.authority;
    }
    if (message.code !== "") {
      obj.code = message.code;
    }
    return obj;
  },

  create(base?: DeepPartial<Certification>): Certification {
    return Certification.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Certification>): Certification {
    const message = createBaseCertification();
    message.name = object.name ?? "";
    message.authority = object.authority ?? "";
    message.code = object.code ?? "";
    return message;
  },
};

function createBaseProductDetail(): ProductDetail {
  return { sectionName: "", attributeName: "", attributeValue: "" };
}

export const ProductDetail: MessageFns<ProductDetail> = {
  encode(message: ProductDetail, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sectionName !== "") {
      writer.uint32(10).string(message.sectionName);
    }
    if (message.attributeName !== "") {
      writer.uint32(18).string(message.attributeName);
    }
    if (message.attributeValue !== "") {
      writer.uint32(26).string(message.attributeValue);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProductDetail {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProductDetail();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.sectionName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.attributeName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.attributeValue = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProductDetail {
    return {
      sectionName: isSet(object.sectionName) ? globalThis.String(object.sectionName) : "",
      attributeName: isSet(object.attributeName) ? globalThis.String(object.attributeName) : "",
      attributeValue: isSet(object.attributeValue) ? globalThis.String(object.attributeValue) : "",
    };
  },

  toJSON(message: ProductDetail): unknown {
    const obj: any = {};
    if (message.sectionName !== "") {
      obj.sectionName = message.sectionName;
    }
    if (message.attributeName !== "") {
      obj.attributeName = message.attributeName;
    }
    if (message.attributeValue !== "") {
      obj.attributeValue = message.attributeValue;
    }
    return obj;
  },

  create(base?: DeepPartial<ProductDetail>): ProductDetail {
    return ProductDetail.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ProductDetail>): ProductDetail {
    const message = createBaseProductDetail();
    message.sectionName = object.sectionName ?? "";
    message.attributeName = object.attributeName ?? "";
    message.attributeValue = object.attributeValue ?? "";
    return message;
  },
};

function createBaseProductDimension(): ProductDimension {
  return { value: 0, unit: "" };
}

export const ProductDimension: MessageFns<ProductDimension> = {
  encode(message: ProductDimension, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.value !== 0) {
      writer.uint32(9).double(message.value);
    }
    if (message.unit !== "") {
      writer.uint32(18).string(message.unit);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProductDimension {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProductDimension();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 9) {
            break;
          }

          message.value = reader.double();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.unit = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProductDimension {
    return {
      value: isSet(object.value) ? globalThis.Number(object.value) : 0,
      unit: isSet(object.unit) ? globalThis.String(object.unit) : "",
    };
  },

  toJSON(message: ProductDimension): unknown {
    const obj: any = {};
    if (message.value !== 0) {
      obj.value = message.value;
    }
    if (message.unit !== "") {
      obj.unit = message.unit;
    }
    return obj;
  },

  create(base?: DeepPartial<ProductDimension>): ProductDimension {
    return ProductDimension.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ProductDimension>): ProductDimension {
    const message = createBaseProductDimension();
    message.value = object.value ?? 0;
    message.unit = object.unit ?? "";
    return message;
  },
};

function createBaseProductWeight(): ProductWeight {
  return { value: 0, unit: "" };
}

export const ProductWeight: MessageFns<ProductWeight> = {
  encode(message: ProductWeight, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.value !== 0) {
      writer.uint32(9).double(message.value);
    }
    if (message.unit !== "") {
      writer.uint32(18).string(message.unit);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProductWeight {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProductWeight();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 9) {
            break;
          }

          message.value = reader.double();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.unit = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProductWeight {
    return {
      value: isSet(object.value) ? globalThis.Number(object.value) : 0,
      unit: isSet(object.unit) ? globalThis.String(object.unit) : "",
    };
  },

  toJSON(message: ProductWeight): unknown {
    const obj: any = {};
    if (message.value !== 0) {
      obj.value = message.value;
    }
    if (message.unit !== "") {
      obj.unit = message.unit;
    }
    return obj;
  },

  create(base?: DeepPartial<ProductWeight>): ProductWeight {
    return ProductWeight.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ProductWeight>): ProductWeight {
    const message = createBaseProductWeight();
    message.value = object.value ?? 0;
    message.unit = object.unit ?? "";
    return message;
  },
};

function createBaseCssProductStatus(): CssProductStatus {
  return {
    destinationStatuses: [],
    itemLevelIssues: [],
    creationDate: undefined,
    lastUpdateDate: undefined,
    googleExpirationDate: undefined,
  };
}

export const CssProductStatus: MessageFns<CssProductStatus> = {
  encode(message: CssProductStatus, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.destinationStatuses) {
      CssProductStatus_DestinationStatus.encode(v!, writer.uint32(26).fork()).join();
    }
    for (const v of message.itemLevelIssues) {
      CssProductStatus_ItemLevelIssue.encode(v!, writer.uint32(34).fork()).join();
    }
    if (message.creationDate !== undefined) {
      Timestamp.encode(toTimestamp(message.creationDate), writer.uint32(42).fork()).join();
    }
    if (message.lastUpdateDate !== undefined) {
      Timestamp.encode(toTimestamp(message.lastUpdateDate), writer.uint32(50).fork()).join();
    }
    if (message.googleExpirationDate !== undefined) {
      Timestamp.encode(toTimestamp(message.googleExpirationDate), writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CssProductStatus {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCssProductStatus();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 3:
          if (tag !== 26) {
            break;
          }

          message.destinationStatuses.push(CssProductStatus_DestinationStatus.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.itemLevelIssues.push(CssProductStatus_ItemLevelIssue.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.creationDate = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.lastUpdateDate = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.googleExpirationDate = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CssProductStatus {
    return {
      destinationStatuses: globalThis.Array.isArray(object?.destinationStatuses)
        ? object.destinationStatuses.map((e: any) => CssProductStatus_DestinationStatus.fromJSON(e))
        : [],
      itemLevelIssues: globalThis.Array.isArray(object?.itemLevelIssues)
        ? object.itemLevelIssues.map((e: any) => CssProductStatus_ItemLevelIssue.fromJSON(e))
        : [],
      creationDate: isSet(object.creationDate) ? fromJsonTimestamp(object.creationDate) : undefined,
      lastUpdateDate: isSet(object.lastUpdateDate) ? fromJsonTimestamp(object.lastUpdateDate) : undefined,
      googleExpirationDate: isSet(object.googleExpirationDate)
        ? fromJsonTimestamp(object.googleExpirationDate)
        : undefined,
    };
  },

  toJSON(message: CssProductStatus): unknown {
    const obj: any = {};
    if (message.destinationStatuses?.length) {
      obj.destinationStatuses = message.destinationStatuses.map((e) => CssProductStatus_DestinationStatus.toJSON(e));
    }
    if (message.itemLevelIssues?.length) {
      obj.itemLevelIssues = message.itemLevelIssues.map((e) => CssProductStatus_ItemLevelIssue.toJSON(e));
    }
    if (message.creationDate !== undefined) {
      obj.creationDate = message.creationDate.toISOString();
    }
    if (message.lastUpdateDate !== undefined) {
      obj.lastUpdateDate = message.lastUpdateDate.toISOString();
    }
    if (message.googleExpirationDate !== undefined) {
      obj.googleExpirationDate = message.googleExpirationDate.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<CssProductStatus>): CssProductStatus {
    return CssProductStatus.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CssProductStatus>): CssProductStatus {
    const message = createBaseCssProductStatus();
    message.destinationStatuses =
      object.destinationStatuses?.map((e) => CssProductStatus_DestinationStatus.fromPartial(e)) || [];
    message.itemLevelIssues = object.itemLevelIssues?.map((e) => CssProductStatus_ItemLevelIssue.fromPartial(e)) || [];
    message.creationDate = object.creationDate ?? undefined;
    message.lastUpdateDate = object.lastUpdateDate ?? undefined;
    message.googleExpirationDate = object.googleExpirationDate ?? undefined;
    return message;
  },
};

function createBaseCssProductStatus_DestinationStatus(): CssProductStatus_DestinationStatus {
  return { destination: "", approvedCountries: [], pendingCountries: [], disapprovedCountries: [] };
}

export const CssProductStatus_DestinationStatus: MessageFns<CssProductStatus_DestinationStatus> = {
  encode(message: CssProductStatus_DestinationStatus, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.destination !== "") {
      writer.uint32(10).string(message.destination);
    }
    for (const v of message.approvedCountries) {
      writer.uint32(18).string(v!);
    }
    for (const v of message.pendingCountries) {
      writer.uint32(26).string(v!);
    }
    for (const v of message.disapprovedCountries) {
      writer.uint32(34).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CssProductStatus_DestinationStatus {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCssProductStatus_DestinationStatus();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.destination = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.approvedCountries.push(reader.string());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pendingCountries.push(reader.string());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.disapprovedCountries.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CssProductStatus_DestinationStatus {
    return {
      destination: isSet(object.destination) ? globalThis.String(object.destination) : "",
      approvedCountries: globalThis.Array.isArray(object?.approvedCountries)
        ? object.approvedCountries.map((e: any) => globalThis.String(e))
        : [],
      pendingCountries: globalThis.Array.isArray(object?.pendingCountries)
        ? object.pendingCountries.map((e: any) => globalThis.String(e))
        : [],
      disapprovedCountries: globalThis.Array.isArray(object?.disapprovedCountries)
        ? object.disapprovedCountries.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: CssProductStatus_DestinationStatus): unknown {
    const obj: any = {};
    if (message.destination !== "") {
      obj.destination = message.destination;
    }
    if (message.approvedCountries?.length) {
      obj.approvedCountries = message.approvedCountries;
    }
    if (message.pendingCountries?.length) {
      obj.pendingCountries = message.pendingCountries;
    }
    if (message.disapprovedCountries?.length) {
      obj.disapprovedCountries = message.disapprovedCountries;
    }
    return obj;
  },

  create(base?: DeepPartial<CssProductStatus_DestinationStatus>): CssProductStatus_DestinationStatus {
    return CssProductStatus_DestinationStatus.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CssProductStatus_DestinationStatus>): CssProductStatus_DestinationStatus {
    const message = createBaseCssProductStatus_DestinationStatus();
    message.destination = object.destination ?? "";
    message.approvedCountries = object.approvedCountries?.map((e) => e) || [];
    message.pendingCountries = object.pendingCountries?.map((e) => e) || [];
    message.disapprovedCountries = object.disapprovedCountries?.map((e) => e) || [];
    return message;
  },
};

function createBaseCssProductStatus_ItemLevelIssue(): CssProductStatus_ItemLevelIssue {
  return {
    code: "",
    servability: "",
    resolution: "",
    attribute: "",
    destination: "",
    description: "",
    detail: "",
    documentation: "",
    applicableCountries: [],
  };
}

export const CssProductStatus_ItemLevelIssue: MessageFns<CssProductStatus_ItemLevelIssue> = {
  encode(message: CssProductStatus_ItemLevelIssue, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== "") {
      writer.uint32(10).string(message.code);
    }
    if (message.servability !== "") {
      writer.uint32(18).string(message.servability);
    }
    if (message.resolution !== "") {
      writer.uint32(26).string(message.resolution);
    }
    if (message.attribute !== "") {
      writer.uint32(34).string(message.attribute);
    }
    if (message.destination !== "") {
      writer.uint32(42).string(message.destination);
    }
    if (message.description !== "") {
      writer.uint32(50).string(message.description);
    }
    if (message.detail !== "") {
      writer.uint32(58).string(message.detail);
    }
    if (message.documentation !== "") {
      writer.uint32(66).string(message.documentation);
    }
    for (const v of message.applicableCountries) {
      writer.uint32(74).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CssProductStatus_ItemLevelIssue {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCssProductStatus_ItemLevelIssue();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.code = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.servability = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.resolution = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.attribute = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.destination = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.description = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.detail = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.documentation = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.applicableCountries.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CssProductStatus_ItemLevelIssue {
    return {
      code: isSet(object.code) ? globalThis.String(object.code) : "",
      servability: isSet(object.servability) ? globalThis.String(object.servability) : "",
      resolution: isSet(object.resolution) ? globalThis.String(object.resolution) : "",
      attribute: isSet(object.attribute) ? globalThis.String(object.attribute) : "",
      destination: isSet(object.destination) ? globalThis.String(object.destination) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      detail: isSet(object.detail) ? globalThis.String(object.detail) : "",
      documentation: isSet(object.documentation) ? globalThis.String(object.documentation) : "",
      applicableCountries: globalThis.Array.isArray(object?.applicableCountries)
        ? object.applicableCountries.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: CssProductStatus_ItemLevelIssue): unknown {
    const obj: any = {};
    if (message.code !== "") {
      obj.code = message.code;
    }
    if (message.servability !== "") {
      obj.servability = message.servability;
    }
    if (message.resolution !== "") {
      obj.resolution = message.resolution;
    }
    if (message.attribute !== "") {
      obj.attribute = message.attribute;
    }
    if (message.destination !== "") {
      obj.destination = message.destination;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.detail !== "") {
      obj.detail = message.detail;
    }
    if (message.documentation !== "") {
      obj.documentation = message.documentation;
    }
    if (message.applicableCountries?.length) {
      obj.applicableCountries = message.applicableCountries;
    }
    return obj;
  },

  create(base?: DeepPartial<CssProductStatus_ItemLevelIssue>): CssProductStatus_ItemLevelIssue {
    return CssProductStatus_ItemLevelIssue.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CssProductStatus_ItemLevelIssue>): CssProductStatus_ItemLevelIssue {
    const message = createBaseCssProductStatus_ItemLevelIssue();
    message.code = object.code ?? "";
    message.servability = object.servability ?? "";
    message.resolution = object.resolution ?? "";
    message.attribute = object.attribute ?? "";
    message.destination = object.destination ?? "";
    message.description = object.description ?? "";
    message.detail = object.detail ?? "";
    message.documentation = object.documentation ?? "";
    message.applicableCountries = object.applicableCountries?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
