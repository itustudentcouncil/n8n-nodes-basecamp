// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/shopping/merchant/products/v1beta/products.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import {
  Channel_ChannelEnum,
  channel_ChannelEnumFromJSON,
  channel_ChannelEnumToJSON,
  CustomAttribute,
} from "../../../type/types.js";
import { Attributes, ProductStatus } from "./products_common.js";

export const protobufPackage = "google.shopping.merchant.products.v1beta";

/**
 * The processed product, built from multiple [product
 * inputs][[google.shopping.content.bundles.Products.ProductInput] after
 * applying rules and supplemental data sources. This processed product matches
 * what is shown in your Merchant Center account and in Shopping ads and other
 * surfaces across Google. Each product is built from exactly one primary
 * data source product input, and multiple supplemental data source inputs.
 * After inserting, updating, or deleting a product input, it may take
 * several minutes before the updated processed product can be retrieved.
 *
 * All fields in the processed product and its sub-messages match the name of
 * their corresponding attribute in the [Product data
 * specification](https://support.google.com/merchants/answer/7052112) with some
 * exceptions.
 */
export interface Product {
  /**
   * The name of the product.
   * Format:
   * `"{product.name=accounts/{account}/products/{product}}"`
   */
  name: string;
  /**
   * Output only. The
   * [channel](https://support.google.com/merchants/answer/7361332) of the
   * product.
   */
  channel: Channel_ChannelEnum;
  /**
   * Output only. Your unique identifier for the product. This is the same for
   * the product input and processed product. Leading and trailing whitespaces
   * are stripped and multiple whitespaces are replaced by a single whitespace
   * upon submission. See the [product data
   * specification](https://support.google.com/merchants/answer/188494#id) for
   * details.
   */
  offerId: string;
  /**
   * Output only. The two-letter [ISO
   * 639-1](http://en.wikipedia.org/wiki/ISO_639-1) language code for the
   * product.
   */
  contentLanguage: string;
  /** Output only. The feed label for the product. */
  feedLabel: string;
  /** Output only. The primary data source of the product. */
  dataSource: string;
  /**
   * Output only. Represents the existing version (freshness) of the product,
   * which can be used to preserve the right order when multiple updates are
   * done at the same time.
   *
   * If set, the insertion is prevented when version number is lower than
   * the current version number of the existing product. Re-insertion (for
   * example, product refresh after 30 days) can be performed with the current
   * `version_number`.
   *
   * Only supported for insertions into primary data sources.
   *
   * If the operation is prevented, the aborted exception will be
   * thrown.
   */
  versionNumber?:
    | Long
    | undefined;
  /** Output only. A list of product attributes. */
  attributes:
    | Attributes
    | undefined;
  /**
   * Output only. A list of custom (merchant-provided) attributes. It can also
   * be used to submit any attribute of the data specification in its generic
   * form (for example,
   * `{ "name": "size type", "value": "regular" }`).
   * This is useful for submitting attributes not explicitly exposed by the
   * API, such as additional attributes used for Buy on Google.
   */
  customAttributes: CustomAttribute[];
  /**
   * Output only. The status of a product, data validation issues, that is,
   * information about a product computed asynchronously.
   */
  productStatus: ProductStatus | undefined;
}

/** Request message for the GetProduct method. */
export interface GetProductRequest {
  /**
   * Required. The name of the product to retrieve.
   * Format: `accounts/{account}/products/{product}`
   */
  name: string;
}

/** Request message for the ListProducts method. */
export interface ListProductsRequest {
  /**
   * Required. The account to list processed products for.
   * Format: accounts/{account}
   */
  parent: string;
  /**
   * The maximum number of products to return. The service may return fewer than
   * this value.
   * The maximum value is 1000; values above 1000 will be coerced to 1000.
   * If unspecified, the maximum number of products will be returned.
   */
  pageSize: number;
  /**
   * A page token, received from a previous `ListProducts` call.
   * Provide this to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to `ListProducts` must
   * match the call that provided the page token.
   */
  pageToken: string;
}

/** Response message for the ListProducts method. */
export interface ListProductsResponse {
  /**
   * The processed products from the specified account. These are your processed
   * products after applying rules and supplemental data sources.
   */
  products: Product[];
  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

function createBaseProduct(): Product {
  return {
    name: "",
    channel: 0,
    offerId: "",
    contentLanguage: "",
    feedLabel: "",
    dataSource: "",
    versionNumber: undefined,
    attributes: undefined,
    customAttributes: [],
    productStatus: undefined,
  };
}

export const Product: MessageFns<Product> = {
  encode(message: Product, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.channel !== 0) {
      writer.uint32(16).int32(message.channel);
    }
    if (message.offerId !== "") {
      writer.uint32(26).string(message.offerId);
    }
    if (message.contentLanguage !== "") {
      writer.uint32(34).string(message.contentLanguage);
    }
    if (message.feedLabel !== "") {
      writer.uint32(42).string(message.feedLabel);
    }
    if (message.dataSource !== "") {
      writer.uint32(50).string(message.dataSource);
    }
    if (message.versionNumber !== undefined) {
      writer.uint32(56).int64(message.versionNumber.toString());
    }
    if (message.attributes !== undefined) {
      Attributes.encode(message.attributes, writer.uint32(66).fork()).join();
    }
    for (const v of message.customAttributes) {
      CustomAttribute.encode(v!, writer.uint32(74).fork()).join();
    }
    if (message.productStatus !== undefined) {
      ProductStatus.encode(message.productStatus, writer.uint32(82).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Product {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProduct();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.channel = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.offerId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.contentLanguage = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.feedLabel = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.dataSource = reader.string();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.versionNumber = Long.fromString(reader.int64().toString());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.attributes = Attributes.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.customAttributes.push(CustomAttribute.decode(reader, reader.uint32()));
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.productStatus = ProductStatus.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Product {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      channel: isSet(object.channel) ? channel_ChannelEnumFromJSON(object.channel) : 0,
      offerId: isSet(object.offerId) ? globalThis.String(object.offerId) : "",
      contentLanguage: isSet(object.contentLanguage) ? globalThis.String(object.contentLanguage) : "",
      feedLabel: isSet(object.feedLabel) ? globalThis.String(object.feedLabel) : "",
      dataSource: isSet(object.dataSource) ? globalThis.String(object.dataSource) : "",
      versionNumber: isSet(object.versionNumber) ? Long.fromValue(object.versionNumber) : undefined,
      attributes: isSet(object.attributes) ? Attributes.fromJSON(object.attributes) : undefined,
      customAttributes: globalThis.Array.isArray(object?.customAttributes)
        ? object.customAttributes.map((e: any) => CustomAttribute.fromJSON(e))
        : [],
      productStatus: isSet(object.productStatus) ? ProductStatus.fromJSON(object.productStatus) : undefined,
    };
  },

  toJSON(message: Product): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.channel !== 0) {
      obj.channel = channel_ChannelEnumToJSON(message.channel);
    }
    if (message.offerId !== "") {
      obj.offerId = message.offerId;
    }
    if (message.contentLanguage !== "") {
      obj.contentLanguage = message.contentLanguage;
    }
    if (message.feedLabel !== "") {
      obj.feedLabel = message.feedLabel;
    }
    if (message.dataSource !== "") {
      obj.dataSource = message.dataSource;
    }
    if (message.versionNumber !== undefined) {
      obj.versionNumber = (message.versionNumber || Long.ZERO).toString();
    }
    if (message.attributes !== undefined) {
      obj.attributes = Attributes.toJSON(message.attributes);
    }
    if (message.customAttributes?.length) {
      obj.customAttributes = message.customAttributes.map((e) => CustomAttribute.toJSON(e));
    }
    if (message.productStatus !== undefined) {
      obj.productStatus = ProductStatus.toJSON(message.productStatus);
    }
    return obj;
  },

  create(base?: DeepPartial<Product>): Product {
    return Product.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Product>): Product {
    const message = createBaseProduct();
    message.name = object.name ?? "";
    message.channel = object.channel ?? 0;
    message.offerId = object.offerId ?? "";
    message.contentLanguage = object.contentLanguage ?? "";
    message.feedLabel = object.feedLabel ?? "";
    message.dataSource = object.dataSource ?? "";
    message.versionNumber = (object.versionNumber !== undefined && object.versionNumber !== null)
      ? Long.fromValue(object.versionNumber)
      : undefined;
    message.attributes = (object.attributes !== undefined && object.attributes !== null)
      ? Attributes.fromPartial(object.attributes)
      : undefined;
    message.customAttributes = object.customAttributes?.map((e) => CustomAttribute.fromPartial(e)) || [];
    message.productStatus = (object.productStatus !== undefined && object.productStatus !== null)
      ? ProductStatus.fromPartial(object.productStatus)
      : undefined;
    return message;
  },
};

function createBaseGetProductRequest(): GetProductRequest {
  return { name: "" };
}

export const GetProductRequest: MessageFns<GetProductRequest> = {
  encode(message: GetProductRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetProductRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetProductRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetProductRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetProductRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetProductRequest>): GetProductRequest {
    return GetProductRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetProductRequest>): GetProductRequest {
    const message = createBaseGetProductRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListProductsRequest(): ListProductsRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListProductsRequest: MessageFns<ListProductsRequest> = {
  encode(message: ListProductsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListProductsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListProductsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListProductsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListProductsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListProductsRequest>): ListProductsRequest {
    return ListProductsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListProductsRequest>): ListProductsRequest {
    const message = createBaseListProductsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListProductsResponse(): ListProductsResponse {
  return { products: [], nextPageToken: "" };
}

export const ListProductsResponse: MessageFns<ListProductsResponse> = {
  encode(message: ListProductsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.products) {
      Product.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListProductsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListProductsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.products.push(Product.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListProductsResponse {
    return {
      products: globalThis.Array.isArray(object?.products) ? object.products.map((e: any) => Product.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListProductsResponse): unknown {
    const obj: any = {};
    if (message.products?.length) {
      obj.products = message.products.map((e) => Product.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListProductsResponse>): ListProductsResponse {
    return ListProductsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListProductsResponse>): ListProductsResponse {
    const message = createBaseListProductsResponse();
    message.products = object.products?.map((e) => Product.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

/**
 * Service to use Product resource.
 * This service works for products with online channel only.
 */
export type ProductsServiceDefinition = typeof ProductsServiceDefinition;
export const ProductsServiceDefinition = {
  name: "ProductsService",
  fullName: "google.shopping.merchant.products.v1beta.ProductsService",
  methods: {
    /**
     * Retrieves the processed product from your Merchant Center account.
     *
     * After inserting, updating, or deleting a product input, it may take several
     * minutes before the updated final product can be retrieved.
     */
    getProduct: {
      name: "GetProduct",
      requestType: GetProductRequest,
      requestStream: false,
      responseType: Product,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              47,
              18,
              45,
              47,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              115,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              47,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Lists the processed products in your Merchant Center account. The response
     * might contain fewer items than specified by pageSize. Rely on pageToken to
     * determine if there are more items to be requested.
     *
     * After inserting, updating, or deleting a product input, it may take several
     * minutes before the updated processed product can be retrieved.
     */
    listProducts: {
      name: "ListProducts",
      requestType: ListProductsRequest,
      requestStream: false,
      responseType: ListProductsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              47,
              18,
              45,
              47,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              115,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              125,
              47,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              115,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface ProductsServiceImplementation<CallContextExt = {}> {
  /**
   * Retrieves the processed product from your Merchant Center account.
   *
   * After inserting, updating, or deleting a product input, it may take several
   * minutes before the updated final product can be retrieved.
   */
  getProduct(request: GetProductRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Product>>;
  /**
   * Lists the processed products in your Merchant Center account. The response
   * might contain fewer items than specified by pageSize. Rely on pageToken to
   * determine if there are more items to be requested.
   *
   * After inserting, updating, or deleting a product input, it may take several
   * minutes before the updated processed product can be retrieved.
   */
  listProducts(
    request: ListProductsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListProductsResponse>>;
}

export interface ProductsServiceClient<CallOptionsExt = {}> {
  /**
   * Retrieves the processed product from your Merchant Center account.
   *
   * After inserting, updating, or deleting a product input, it may take several
   * minutes before the updated final product can be retrieved.
   */
  getProduct(request: DeepPartial<GetProductRequest>, options?: CallOptions & CallOptionsExt): Promise<Product>;
  /**
   * Lists the processed products in your Merchant Center account. The response
   * might contain fewer items than specified by pageSize. Rely on pageToken to
   * determine if there are more items to be requested.
   *
   * After inserting, updating, or deleting a product input, it may take several
   * minutes before the updated processed product can be retrieved.
   */
  listProducts(
    request: DeepPartial<ListProductsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListProductsResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
