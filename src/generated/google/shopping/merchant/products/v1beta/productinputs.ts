// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/shopping/merchant/products/v1beta/productinputs.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Empty } from "../../../../protobuf/empty.js";
import {
  Channel_ChannelEnum,
  channel_ChannelEnumFromJSON,
  channel_ChannelEnumToJSON,
  CustomAttribute,
} from "../../../type/types.js";
import { Attributes } from "./products_common.js";

export const protobufPackage = "google.shopping.merchant.products.v1beta";

/**
 * This resource represents input data you submit for a product, not the
 * processed product that you see in Merchant Center, in Shopping ads, or across
 * Google surfaces. Product inputs, rules and supplemental data source data are
 * combined to create the processed
 * [product][google.shopping.content.bundles.Products.Product].
 *
 * Required product input attributes to pass data validation checks are
 * primarily defined in the [Products Data
 * Specification](https://support.google.com/merchants/answer/188494).
 *
 * The following attributes are required:
 * [feedLabel][google.shopping.content.bundles.Products.feed_label],
 * [contentLanguage][google.shopping.content.bundles.Products.content_language]
 * and [offerId][google.shopping.content.bundles.Products.offer_id].
 *
 * After inserting, updating, or deleting a product input, it may take several
 * minutes before the processed product can be retrieved.
 *
 * All fields in the product input and its sub-messages match the English name
 * of their corresponding attribute in the vertical spec with [some
 * exceptions](https://support.google.com/merchants/answer/7052112).
 */
export interface ProductInput {
  /**
   * Identifier. The name of the product input.
   * Format:
   * `"{productinput.name=accounts/{account}/productInputs/{productinput}}"`
   */
  name: string;
  /**
   * Output only. The name of the processed product.
   * Format:
   * `"{product.name=accounts/{account}/products/{product}}"`
   */
  product: string;
  /**
   * Required. Immutable. The
   * [channel](https://support.google.com/merchants/answer/7361332) of the
   * product.
   */
  channel: Channel_ChannelEnum;
  /**
   * Required. Immutable. Your unique identifier for the product. This is the
   * same for the product input and processed product. Leading and trailing
   * whitespaces are stripped and multiple whitespaces are replaced by a single
   * whitespace upon submission. See the [products data
   * specification](https://support.google.com/merchants/answer/188494#id) for
   * details.
   */
  offerId: string;
  /**
   * Required. Immutable. The two-letter [ISO
   * 639-1](http://en.wikipedia.org/wiki/ISO_639-1) language code for the
   * product.
   */
  contentLanguage: string;
  /**
   * Required. Immutable. The [feed
   * label](https://developers.google.com/shopping-content/guides/products/feed-labels)
   * for the product.
   */
  feedLabel: string;
  /**
   * Optional. Represents the existing version (freshness) of the product, which
   * can be used to preserve the right order when multiple updates are done at
   * the same time.
   *
   * If set, the insertion is prevented when version number is lower than
   * the current version number of the existing product. Re-insertion (for
   * example, product refresh after 30 days) can be performed with the current
   * `version_number`.
   *
   * Only supported for insertions into primary data sources.
   *
   * If the operation is prevented, the aborted exception will be
   * thrown.
   */
  versionNumber?:
    | Long
    | undefined;
  /** Optional. A list of product attributes. */
  attributes:
    | Attributes
    | undefined;
  /**
   * Optional. A list of custom (merchant-provided) attributes. It can also be
   * used for submitting any attribute of the data specification in its generic
   * form (for example,
   * `{ "name": "size type", "value": "regular" }`).
   * This is useful for submitting attributes not explicitly exposed by the
   * API, such as additional attributes used for Buy on Google.
   * Maximum allowed number of characters for each
   * custom attribute is 10240 (represents sum of characters for name and
   * value). Maximum 2500 custom attributes can be set per product, with total
   * size of 102.4kB. Underscores in custom attribute names are replaced by
   * spaces upon insertion.
   */
  customAttributes: CustomAttribute[];
}

/** Request message for the InsertProductInput method. */
export interface InsertProductInputRequest {
  /**
   * Required. The account where this product will be inserted.
   * Format: accounts/{account}
   */
  parent: string;
  /** Required. The product input to insert. */
  productInput:
    | ProductInput
    | undefined;
  /**
   * Required. The primary or supplemental product data source name. If the
   * product already exists and data source provided is different, then the
   * product will be moved to a new data source. Format:
   * `accounts/{account}/dataSources/{datasource}`.
   */
  dataSource: string;
}

/** Request message for the DeleteProductInput method. */
export interface DeleteProductInputRequest {
  /**
   * Required. The name of the product input resource to delete.
   * Format: accounts/{account}/productInputs/{product}
   */
  name: string;
  /**
   * Required. The primary or supplemental data source from which the product
   * input should be deleted. Format:
   * `accounts/{account}/dataSources/{datasource}`.
   */
  dataSource: string;
}

function createBaseProductInput(): ProductInput {
  return {
    name: "",
    product: "",
    channel: 0,
    offerId: "",
    contentLanguage: "",
    feedLabel: "",
    versionNumber: undefined,
    attributes: undefined,
    customAttributes: [],
  };
}

export const ProductInput: MessageFns<ProductInput> = {
  encode(message: ProductInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.product !== "") {
      writer.uint32(18).string(message.product);
    }
    if (message.channel !== 0) {
      writer.uint32(24).int32(message.channel);
    }
    if (message.offerId !== "") {
      writer.uint32(34).string(message.offerId);
    }
    if (message.contentLanguage !== "") {
      writer.uint32(42).string(message.contentLanguage);
    }
    if (message.feedLabel !== "") {
      writer.uint32(50).string(message.feedLabel);
    }
    if (message.versionNumber !== undefined) {
      writer.uint32(56).int64(message.versionNumber.toString());
    }
    if (message.attributes !== undefined) {
      Attributes.encode(message.attributes, writer.uint32(66).fork()).join();
    }
    for (const v of message.customAttributes) {
      CustomAttribute.encode(v!, writer.uint32(74).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProductInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProductInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.product = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.channel = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.offerId = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.contentLanguage = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.feedLabel = reader.string();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.versionNumber = Long.fromString(reader.int64().toString());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.attributes = Attributes.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.customAttributes.push(CustomAttribute.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProductInput {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      product: isSet(object.product) ? globalThis.String(object.product) : "",
      channel: isSet(object.channel) ? channel_ChannelEnumFromJSON(object.channel) : 0,
      offerId: isSet(object.offerId) ? globalThis.String(object.offerId) : "",
      contentLanguage: isSet(object.contentLanguage) ? globalThis.String(object.contentLanguage) : "",
      feedLabel: isSet(object.feedLabel) ? globalThis.String(object.feedLabel) : "",
      versionNumber: isSet(object.versionNumber) ? Long.fromValue(object.versionNumber) : undefined,
      attributes: isSet(object.attributes) ? Attributes.fromJSON(object.attributes) : undefined,
      customAttributes: globalThis.Array.isArray(object?.customAttributes)
        ? object.customAttributes.map((e: any) => CustomAttribute.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ProductInput): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.product !== "") {
      obj.product = message.product;
    }
    if (message.channel !== 0) {
      obj.channel = channel_ChannelEnumToJSON(message.channel);
    }
    if (message.offerId !== "") {
      obj.offerId = message.offerId;
    }
    if (message.contentLanguage !== "") {
      obj.contentLanguage = message.contentLanguage;
    }
    if (message.feedLabel !== "") {
      obj.feedLabel = message.feedLabel;
    }
    if (message.versionNumber !== undefined) {
      obj.versionNumber = (message.versionNumber || Long.ZERO).toString();
    }
    if (message.attributes !== undefined) {
      obj.attributes = Attributes.toJSON(message.attributes);
    }
    if (message.customAttributes?.length) {
      obj.customAttributes = message.customAttributes.map((e) => CustomAttribute.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ProductInput>): ProductInput {
    return ProductInput.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ProductInput>): ProductInput {
    const message = createBaseProductInput();
    message.name = object.name ?? "";
    message.product = object.product ?? "";
    message.channel = object.channel ?? 0;
    message.offerId = object.offerId ?? "";
    message.contentLanguage = object.contentLanguage ?? "";
    message.feedLabel = object.feedLabel ?? "";
    message.versionNumber = (object.versionNumber !== undefined && object.versionNumber !== null)
      ? Long.fromValue(object.versionNumber)
      : undefined;
    message.attributes = (object.attributes !== undefined && object.attributes !== null)
      ? Attributes.fromPartial(object.attributes)
      : undefined;
    message.customAttributes = object.customAttributes?.map((e) => CustomAttribute.fromPartial(e)) || [];
    return message;
  },
};

function createBaseInsertProductInputRequest(): InsertProductInputRequest {
  return { parent: "", productInput: undefined, dataSource: "" };
}

export const InsertProductInputRequest: MessageFns<InsertProductInputRequest> = {
  encode(message: InsertProductInputRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.productInput !== undefined) {
      ProductInput.encode(message.productInput, writer.uint32(18).fork()).join();
    }
    if (message.dataSource !== "") {
      writer.uint32(26).string(message.dataSource);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InsertProductInputRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInsertProductInputRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.productInput = ProductInput.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.dataSource = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InsertProductInputRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      productInput: isSet(object.productInput) ? ProductInput.fromJSON(object.productInput) : undefined,
      dataSource: isSet(object.dataSource) ? globalThis.String(object.dataSource) : "",
    };
  },

  toJSON(message: InsertProductInputRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.productInput !== undefined) {
      obj.productInput = ProductInput.toJSON(message.productInput);
    }
    if (message.dataSource !== "") {
      obj.dataSource = message.dataSource;
    }
    return obj;
  },

  create(base?: DeepPartial<InsertProductInputRequest>): InsertProductInputRequest {
    return InsertProductInputRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<InsertProductInputRequest>): InsertProductInputRequest {
    const message = createBaseInsertProductInputRequest();
    message.parent = object.parent ?? "";
    message.productInput = (object.productInput !== undefined && object.productInput !== null)
      ? ProductInput.fromPartial(object.productInput)
      : undefined;
    message.dataSource = object.dataSource ?? "";
    return message;
  },
};

function createBaseDeleteProductInputRequest(): DeleteProductInputRequest {
  return { name: "", dataSource: "" };
}

export const DeleteProductInputRequest: MessageFns<DeleteProductInputRequest> = {
  encode(message: DeleteProductInputRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.dataSource !== "") {
      writer.uint32(18).string(message.dataSource);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteProductInputRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteProductInputRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.dataSource = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteProductInputRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      dataSource: isSet(object.dataSource) ? globalThis.String(object.dataSource) : "",
    };
  },

  toJSON(message: DeleteProductInputRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.dataSource !== "") {
      obj.dataSource = message.dataSource;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteProductInputRequest>): DeleteProductInputRequest {
    return DeleteProductInputRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteProductInputRequest>): DeleteProductInputRequest {
    const message = createBaseDeleteProductInputRequest();
    message.name = object.name ?? "";
    message.dataSource = object.dataSource ?? "";
    return message;
  },
};

/**
 * Service to use ProductInput resource.
 * This service works for products with online channel only.
 */
export type ProductInputsServiceDefinition = typeof ProductInputsServiceDefinition;
export const ProductInputsServiceDefinition = {
  name: "ProductInputsService",
  fullName: "google.shopping.merchant.products.v1beta.ProductInputsService",
  methods: {
    /**
     * Uploads a product input to your Merchant Center account. If an input
     * with the same contentLanguage, offerId, and dataSource already exists,
     * this method replaces that entry.
     *
     * After inserting, updating, or deleting a product input, it may take several
     * minutes before the processed product can be retrieved.
     */
    insertProductInput: {
      name: "InsertProductInput",
      requestType: InsertProductInputRequest,
      requestStream: false,
      responseType: ProductInput,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              74,
              58,
              13,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              95,
              105,
              110,
              112,
              117,
              116,
              34,
              57,
              47,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              115,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              125,
              47,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              73,
              110,
              112,
              117,
              116,
              115,
              58,
              105,
              110,
              115,
              101,
              114,
              116,
            ]),
          ],
        },
      },
    },
    /**
     * Deletes a product input from your Merchant Center account.
     *
     * After inserting, updating, or deleting a product input, it may take several
     * minutes before the processed product can be retrieved.
     */
    deleteProductInput: {
      name: "DeleteProductInput",
      requestType: DeleteProductInputRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              52,
              42,
              50,
              47,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              115,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              47,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              73,
              110,
              112,
              117,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface ProductInputsServiceImplementation<CallContextExt = {}> {
  /**
   * Uploads a product input to your Merchant Center account. If an input
   * with the same contentLanguage, offerId, and dataSource already exists,
   * this method replaces that entry.
   *
   * After inserting, updating, or deleting a product input, it may take several
   * minutes before the processed product can be retrieved.
   */
  insertProductInput(
    request: InsertProductInputRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ProductInput>>;
  /**
   * Deletes a product input from your Merchant Center account.
   *
   * After inserting, updating, or deleting a product input, it may take several
   * minutes before the processed product can be retrieved.
   */
  deleteProductInput(
    request: DeleteProductInputRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
}

export interface ProductInputsServiceClient<CallOptionsExt = {}> {
  /**
   * Uploads a product input to your Merchant Center account. If an input
   * with the same contentLanguage, offerId, and dataSource already exists,
   * this method replaces that entry.
   *
   * After inserting, updating, or deleting a product input, it may take several
   * minutes before the processed product can be retrieved.
   */
  insertProductInput(
    request: DeepPartial<InsertProductInputRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ProductInput>;
  /**
   * Deletes a product input from your Merchant Center account.
   *
   * After inserting, updating, or deleting a product input, it may take several
   * minutes before the processed product can be retrieved.
   */
  deleteProductInput(
    request: DeepPartial<DeleteProductInputRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
