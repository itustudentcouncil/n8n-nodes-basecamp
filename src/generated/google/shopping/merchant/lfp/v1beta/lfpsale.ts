// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/shopping/merchant/lfp/v1beta/lfpsale.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Timestamp } from "../../../../protobuf/timestamp.js";
import { Price } from "../../../type/types.js";

export const protobufPackage = "google.shopping.merchant.lfp.v1beta";

/** A sale for the merchant. */
export interface LfpSale {
  /**
   * Output only. Identifier. The name of the `LfpSale` resource.
   * Format:
   * `accounts/{account}/lfpSales/{sale}`
   */
  name: string;
  /** Required. The Merchant Center ID of the merchant to submit the sale for. */
  targetAccount: Long;
  /**
   * Required. The identifier of the merchant's store. Either a `storeCode`
   * inserted through the API or the code of the store in the Business Profile.
   */
  storeCode: string;
  /**
   * Required. A unique identifier for the product. If both inventories and
   * sales are submitted for a merchant, this id should match for the same
   * product.
   *
   * **Note**: if the merchant sells the same product new and used, they should
   * have different IDs.
   */
  offerId: string;
  /**
   * Required. The [CLDR territory
   * code](https://github.com/unicode-org/cldr/blob/latest/common/main/en.xml)
   * for the country where the product is sold.
   */
  regionCode: string;
  /** Required. The two-letter ISO 639-1 language code for the item. */
  contentLanguage: string;
  /** Required. The Global Trade Item Number of the sold product. */
  gtin: string;
  /** Required. The unit price of the product. */
  price:
    | Price
    | undefined;
  /**
   * Required. The relative change of the available quantity. Negative for items
   * returned.
   */
  quantity: Long;
  /** Required. The timestamp for the sale. */
  saleTime:
    | Date
    | undefined;
  /** Output only. System generated globally unique ID for the `LfpSale`. */
  uid?:
    | string
    | undefined;
  /**
   * Optional. The [feed
   * label](https://developers.google.com/shopping-content/guides/products/feed-labels)
   * for the product. If this is not set, it will default to `regionCode`.
   */
  feedLabel?: string | undefined;
}

/** Request message for the InsertLfpSale method. */
export interface InsertLfpSaleRequest {
  /**
   * Required. The LFP provider account.
   * Format: `accounts/{lfp_partner}`
   */
  parent: string;
  /** Required. The sale to insert. */
  lfpSale: LfpSale | undefined;
}

function createBaseLfpSale(): LfpSale {
  return {
    name: "",
    targetAccount: Long.ZERO,
    storeCode: "",
    offerId: "",
    regionCode: "",
    contentLanguage: "",
    gtin: "",
    price: undefined,
    quantity: Long.ZERO,
    saleTime: undefined,
    uid: undefined,
    feedLabel: undefined,
  };
}

export const LfpSale: MessageFns<LfpSale> = {
  encode(message: LfpSale, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (!message.targetAccount.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.targetAccount.toString());
    }
    if (message.storeCode !== "") {
      writer.uint32(26).string(message.storeCode);
    }
    if (message.offerId !== "") {
      writer.uint32(34).string(message.offerId);
    }
    if (message.regionCode !== "") {
      writer.uint32(42).string(message.regionCode);
    }
    if (message.contentLanguage !== "") {
      writer.uint32(50).string(message.contentLanguage);
    }
    if (message.gtin !== "") {
      writer.uint32(58).string(message.gtin);
    }
    if (message.price !== undefined) {
      Price.encode(message.price, writer.uint32(66).fork()).join();
    }
    if (!message.quantity.equals(Long.ZERO)) {
      writer.uint32(72).int64(message.quantity.toString());
    }
    if (message.saleTime !== undefined) {
      Timestamp.encode(toTimestamp(message.saleTime), writer.uint32(82).fork()).join();
    }
    if (message.uid !== undefined) {
      writer.uint32(90).string(message.uid);
    }
    if (message.feedLabel !== undefined) {
      writer.uint32(98).string(message.feedLabel);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LfpSale {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLfpSale();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.targetAccount = Long.fromString(reader.int64().toString());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.storeCode = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.offerId = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.regionCode = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.contentLanguage = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.gtin = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.price = Price.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.quantity = Long.fromString(reader.int64().toString());
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.saleTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.uid = reader.string();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.feedLabel = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LfpSale {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      targetAccount: isSet(object.targetAccount) ? Long.fromValue(object.targetAccount) : Long.ZERO,
      storeCode: isSet(object.storeCode) ? globalThis.String(object.storeCode) : "",
      offerId: isSet(object.offerId) ? globalThis.String(object.offerId) : "",
      regionCode: isSet(object.regionCode) ? globalThis.String(object.regionCode) : "",
      contentLanguage: isSet(object.contentLanguage) ? globalThis.String(object.contentLanguage) : "",
      gtin: isSet(object.gtin) ? globalThis.String(object.gtin) : "",
      price: isSet(object.price) ? Price.fromJSON(object.price) : undefined,
      quantity: isSet(object.quantity) ? Long.fromValue(object.quantity) : Long.ZERO,
      saleTime: isSet(object.saleTime) ? fromJsonTimestamp(object.saleTime) : undefined,
      uid: isSet(object.uid) ? globalThis.String(object.uid) : undefined,
      feedLabel: isSet(object.feedLabel) ? globalThis.String(object.feedLabel) : undefined,
    };
  },

  toJSON(message: LfpSale): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (!message.targetAccount.equals(Long.ZERO)) {
      obj.targetAccount = (message.targetAccount || Long.ZERO).toString();
    }
    if (message.storeCode !== "") {
      obj.storeCode = message.storeCode;
    }
    if (message.offerId !== "") {
      obj.offerId = message.offerId;
    }
    if (message.regionCode !== "") {
      obj.regionCode = message.regionCode;
    }
    if (message.contentLanguage !== "") {
      obj.contentLanguage = message.contentLanguage;
    }
    if (message.gtin !== "") {
      obj.gtin = message.gtin;
    }
    if (message.price !== undefined) {
      obj.price = Price.toJSON(message.price);
    }
    if (!message.quantity.equals(Long.ZERO)) {
      obj.quantity = (message.quantity || Long.ZERO).toString();
    }
    if (message.saleTime !== undefined) {
      obj.saleTime = message.saleTime.toISOString();
    }
    if (message.uid !== undefined) {
      obj.uid = message.uid;
    }
    if (message.feedLabel !== undefined) {
      obj.feedLabel = message.feedLabel;
    }
    return obj;
  },

  create(base?: DeepPartial<LfpSale>): LfpSale {
    return LfpSale.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LfpSale>): LfpSale {
    const message = createBaseLfpSale();
    message.name = object.name ?? "";
    message.targetAccount = (object.targetAccount !== undefined && object.targetAccount !== null)
      ? Long.fromValue(object.targetAccount)
      : Long.ZERO;
    message.storeCode = object.storeCode ?? "";
    message.offerId = object.offerId ?? "";
    message.regionCode = object.regionCode ?? "";
    message.contentLanguage = object.contentLanguage ?? "";
    message.gtin = object.gtin ?? "";
    message.price = (object.price !== undefined && object.price !== null) ? Price.fromPartial(object.price) : undefined;
    message.quantity = (object.quantity !== undefined && object.quantity !== null)
      ? Long.fromValue(object.quantity)
      : Long.ZERO;
    message.saleTime = object.saleTime ?? undefined;
    message.uid = object.uid ?? undefined;
    message.feedLabel = object.feedLabel ?? undefined;
    return message;
  },
};

function createBaseInsertLfpSaleRequest(): InsertLfpSaleRequest {
  return { parent: "", lfpSale: undefined };
}

export const InsertLfpSaleRequest: MessageFns<InsertLfpSaleRequest> = {
  encode(message: InsertLfpSaleRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.lfpSale !== undefined) {
      LfpSale.encode(message.lfpSale, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InsertLfpSaleRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInsertLfpSaleRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.lfpSale = LfpSale.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InsertLfpSaleRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      lfpSale: isSet(object.lfpSale) ? LfpSale.fromJSON(object.lfpSale) : undefined,
    };
  },

  toJSON(message: InsertLfpSaleRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.lfpSale !== undefined) {
      obj.lfpSale = LfpSale.toJSON(message.lfpSale);
    }
    return obj;
  },

  create(base?: DeepPartial<InsertLfpSaleRequest>): InsertLfpSaleRequest {
    return InsertLfpSaleRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<InsertLfpSaleRequest>): InsertLfpSaleRequest {
    const message = createBaseInsertLfpSaleRequest();
    message.parent = object.parent ?? "";
    message.lfpSale = (object.lfpSale !== undefined && object.lfpSale !== null)
      ? LfpSale.fromPartial(object.lfpSale)
      : undefined;
    return message;
  },
};

/**
 * Service for a [LFP
 * partner](https://support.google.com/merchants/answer/7676652) to submit sales
 * data for a merchant.
 */
export type LfpSaleServiceDefinition = typeof LfpSaleServiceDefinition;
export const LfpSaleServiceDefinition = {
  name: "LfpSaleService",
  fullName: "google.shopping.merchant.lfp.v1beta.LfpSaleService",
  methods: {
    /** Inserts a `LfpSale` for the given merchant. */
    insertLfpSale: {
      name: "InsertLfpSale",
      requestType: InsertLfpSaleRequest,
      requestStream: false,
      responseType: LfpSale,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              59,
              58,
              8,
              108,
              102,
              112,
              95,
              115,
              97,
              108,
              101,
              34,
              47,
              47,
              108,
              102,
              112,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              125,
              47,
              108,
              102,
              112,
              83,
              97,
              108,
              101,
              115,
              58,
              105,
              110,
              115,
              101,
              114,
              116,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface LfpSaleServiceImplementation<CallContextExt = {}> {
  /** Inserts a `LfpSale` for the given merchant. */
  insertLfpSale(request: InsertLfpSaleRequest, context: CallContext & CallContextExt): Promise<DeepPartial<LfpSale>>;
}

export interface LfpSaleServiceClient<CallOptionsExt = {}> {
  /** Inserts a `LfpSale` for the given merchant. */
  insertLfpSale(request: DeepPartial<InsertLfpSaleRequest>, options?: CallOptions & CallOptionsExt): Promise<LfpSale>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
