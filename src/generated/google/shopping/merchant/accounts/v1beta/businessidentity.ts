// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/shopping/merchant/accounts/v1beta/businessidentity.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { FieldMask } from "../../../../protobuf/field_mask.js";

export const protobufPackage = "google.shopping.merchant.accounts.v1beta";

/**
 * Collection of information related to the [identity of a
 * business](https://support.google.com/merchants/answer/12564247).
 */
export interface BusinessIdentity {
  /**
   * Identifier. The resource name of the business identity.
   * Format: `accounts/{account}/businessIdentity`
   */
  name: string;
  /** Optional. Whether the identity attributes may be used for promotions. */
  promotionsConsent: BusinessIdentity_PromotionsConsent;
  /**
   * Optional. Specifies whether the business identifies itself as being
   * black-owned. This optional field will only be available for merchants with
   * a business country set to `US`. It is also not applicable for marketplaces
   * or marketplace sellers.
   */
  blackOwned:
    | BusinessIdentity_IdentityAttribute
    | undefined;
  /**
   * Optional. Specifies whether the business identifies itself as being
   * women-owned. This optional field will only be available for merchants with
   * a business country set to `US`. It is also not applicable for marketplaces
   * or marketplace sellers.
   */
  womenOwned:
    | BusinessIdentity_IdentityAttribute
    | undefined;
  /**
   * Optional. Specifies whether the business identifies itself as being
   * veteran-owned. This optional field will only be available for merchants
   * with a business country set to `US`. It is also not applicable for
   * marketplaces or marketplace sellers.
   */
  veteranOwned:
    | BusinessIdentity_IdentityAttribute
    | undefined;
  /**
   * Optional. Specifies whether the business identifies itself as being
   * latino-owned. This optional field will only be available for merchants with
   * a business country set to `US`. It is also not applicable for marketplaces
   * or marketplace sellers.
   */
  latinoOwned:
    | BusinessIdentity_IdentityAttribute
    | undefined;
  /**
   * Optional. Specifies whether the business identifies itself as a small
   * business. This optional field will only be available for merchants with a
   * business country set to `US`. It is also not applicable for marketplaces.
   */
  smallBusiness: BusinessIdentity_IdentityAttribute | undefined;
}

/**
 * All possible settings regarding promotions related to the business
 * identity.
 */
export enum BusinessIdentity_PromotionsConsent {
  /** PROMOTIONS_CONSENT_UNSPECIFIED - Default value indicating that no selection was made. */
  PROMOTIONS_CONSENT_UNSPECIFIED = 0,
  /**
   * PROMOTIONS_CONSENT_GIVEN - Indicates that the account consented to having their business identity
   * used for promotions.
   */
  PROMOTIONS_CONSENT_GIVEN = 1,
  /**
   * PROMOTIONS_CONSENT_DENIED - Indicates that the account did not consent to having their business
   * identity used for promotions.
   */
  PROMOTIONS_CONSENT_DENIED = 2,
  UNRECOGNIZED = -1,
}

export function businessIdentity_PromotionsConsentFromJSON(object: any): BusinessIdentity_PromotionsConsent {
  switch (object) {
    case 0:
    case "PROMOTIONS_CONSENT_UNSPECIFIED":
      return BusinessIdentity_PromotionsConsent.PROMOTIONS_CONSENT_UNSPECIFIED;
    case 1:
    case "PROMOTIONS_CONSENT_GIVEN":
      return BusinessIdentity_PromotionsConsent.PROMOTIONS_CONSENT_GIVEN;
    case 2:
    case "PROMOTIONS_CONSENT_DENIED":
      return BusinessIdentity_PromotionsConsent.PROMOTIONS_CONSENT_DENIED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BusinessIdentity_PromotionsConsent.UNRECOGNIZED;
  }
}

export function businessIdentity_PromotionsConsentToJSON(object: BusinessIdentity_PromotionsConsent): string {
  switch (object) {
    case BusinessIdentity_PromotionsConsent.PROMOTIONS_CONSENT_UNSPECIFIED:
      return "PROMOTIONS_CONSENT_UNSPECIFIED";
    case BusinessIdentity_PromotionsConsent.PROMOTIONS_CONSENT_GIVEN:
      return "PROMOTIONS_CONSENT_GIVEN";
    case BusinessIdentity_PromotionsConsent.PROMOTIONS_CONSENT_DENIED:
      return "PROMOTIONS_CONSENT_DENIED";
    case BusinessIdentity_PromotionsConsent.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** All information related to an identity attribute. */
export interface BusinessIdentity_IdentityAttribute {
  /** Required. The declaration of identity for this attribute. */
  identityDeclaration: BusinessIdentity_IdentityAttribute_IdentityDeclaration;
}

/** All possible settings regarding the declaration of an identity. */
export enum BusinessIdentity_IdentityAttribute_IdentityDeclaration {
  /** IDENTITY_DECLARATION_UNSPECIFIED - Default value indicating that no selection was made. */
  IDENTITY_DECLARATION_UNSPECIFIED = 0,
  /** SELF_IDENTIFIES_AS - Indicates that the account identifies with the attribute. */
  SELF_IDENTIFIES_AS = 1,
  /** DOES_NOT_SELF_IDENTIFY_AS - Indicates that the account does not identify with the attribute. */
  DOES_NOT_SELF_IDENTIFY_AS = 2,
  UNRECOGNIZED = -1,
}

export function businessIdentity_IdentityAttribute_IdentityDeclarationFromJSON(
  object: any,
): BusinessIdentity_IdentityAttribute_IdentityDeclaration {
  switch (object) {
    case 0:
    case "IDENTITY_DECLARATION_UNSPECIFIED":
      return BusinessIdentity_IdentityAttribute_IdentityDeclaration.IDENTITY_DECLARATION_UNSPECIFIED;
    case 1:
    case "SELF_IDENTIFIES_AS":
      return BusinessIdentity_IdentityAttribute_IdentityDeclaration.SELF_IDENTIFIES_AS;
    case 2:
    case "DOES_NOT_SELF_IDENTIFY_AS":
      return BusinessIdentity_IdentityAttribute_IdentityDeclaration.DOES_NOT_SELF_IDENTIFY_AS;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BusinessIdentity_IdentityAttribute_IdentityDeclaration.UNRECOGNIZED;
  }
}

export function businessIdentity_IdentityAttribute_IdentityDeclarationToJSON(
  object: BusinessIdentity_IdentityAttribute_IdentityDeclaration,
): string {
  switch (object) {
    case BusinessIdentity_IdentityAttribute_IdentityDeclaration.IDENTITY_DECLARATION_UNSPECIFIED:
      return "IDENTITY_DECLARATION_UNSPECIFIED";
    case BusinessIdentity_IdentityAttribute_IdentityDeclaration.SELF_IDENTIFIES_AS:
      return "SELF_IDENTIFIES_AS";
    case BusinessIdentity_IdentityAttribute_IdentityDeclaration.DOES_NOT_SELF_IDENTIFY_AS:
      return "DOES_NOT_SELF_IDENTIFY_AS";
    case BusinessIdentity_IdentityAttribute_IdentityDeclaration.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Request message for the `GetBusinessIdentity` method. */
export interface GetBusinessIdentityRequest {
  /**
   * Required. The resource name of the business identity.
   * Format: `accounts/{account}/businessIdentity`
   */
  name: string;
}

/** Request message for the `UpdateBusinessIdentity` method. */
export interface UpdateBusinessIdentityRequest {
  /** Required. The new version of the business identity. */
  businessIdentity:
    | BusinessIdentity
    | undefined;
  /** Required. List of fields being updated. */
  updateMask: string[] | undefined;
}

function createBaseBusinessIdentity(): BusinessIdentity {
  return {
    name: "",
    promotionsConsent: 0,
    blackOwned: undefined,
    womenOwned: undefined,
    veteranOwned: undefined,
    latinoOwned: undefined,
    smallBusiness: undefined,
  };
}

export const BusinessIdentity: MessageFns<BusinessIdentity> = {
  encode(message: BusinessIdentity, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.promotionsConsent !== 0) {
      writer.uint32(16).int32(message.promotionsConsent);
    }
    if (message.blackOwned !== undefined) {
      BusinessIdentity_IdentityAttribute.encode(message.blackOwned, writer.uint32(26).fork()).join();
    }
    if (message.womenOwned !== undefined) {
      BusinessIdentity_IdentityAttribute.encode(message.womenOwned, writer.uint32(34).fork()).join();
    }
    if (message.veteranOwned !== undefined) {
      BusinessIdentity_IdentityAttribute.encode(message.veteranOwned, writer.uint32(42).fork()).join();
    }
    if (message.latinoOwned !== undefined) {
      BusinessIdentity_IdentityAttribute.encode(message.latinoOwned, writer.uint32(50).fork()).join();
    }
    if (message.smallBusiness !== undefined) {
      BusinessIdentity_IdentityAttribute.encode(message.smallBusiness, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BusinessIdentity {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBusinessIdentity();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.promotionsConsent = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.blackOwned = BusinessIdentity_IdentityAttribute.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.womenOwned = BusinessIdentity_IdentityAttribute.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.veteranOwned = BusinessIdentity_IdentityAttribute.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.latinoOwned = BusinessIdentity_IdentityAttribute.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.smallBusiness = BusinessIdentity_IdentityAttribute.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BusinessIdentity {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      promotionsConsent: isSet(object.promotionsConsent)
        ? businessIdentity_PromotionsConsentFromJSON(object.promotionsConsent)
        : 0,
      blackOwned: isSet(object.blackOwned) ? BusinessIdentity_IdentityAttribute.fromJSON(object.blackOwned) : undefined,
      womenOwned: isSet(object.womenOwned) ? BusinessIdentity_IdentityAttribute.fromJSON(object.womenOwned) : undefined,
      veteranOwned: isSet(object.veteranOwned)
        ? BusinessIdentity_IdentityAttribute.fromJSON(object.veteranOwned)
        : undefined,
      latinoOwned: isSet(object.latinoOwned)
        ? BusinessIdentity_IdentityAttribute.fromJSON(object.latinoOwned)
        : undefined,
      smallBusiness: isSet(object.smallBusiness)
        ? BusinessIdentity_IdentityAttribute.fromJSON(object.smallBusiness)
        : undefined,
    };
  },

  toJSON(message: BusinessIdentity): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.promotionsConsent !== 0) {
      obj.promotionsConsent = businessIdentity_PromotionsConsentToJSON(message.promotionsConsent);
    }
    if (message.blackOwned !== undefined) {
      obj.blackOwned = BusinessIdentity_IdentityAttribute.toJSON(message.blackOwned);
    }
    if (message.womenOwned !== undefined) {
      obj.womenOwned = BusinessIdentity_IdentityAttribute.toJSON(message.womenOwned);
    }
    if (message.veteranOwned !== undefined) {
      obj.veteranOwned = BusinessIdentity_IdentityAttribute.toJSON(message.veteranOwned);
    }
    if (message.latinoOwned !== undefined) {
      obj.latinoOwned = BusinessIdentity_IdentityAttribute.toJSON(message.latinoOwned);
    }
    if (message.smallBusiness !== undefined) {
      obj.smallBusiness = BusinessIdentity_IdentityAttribute.toJSON(message.smallBusiness);
    }
    return obj;
  },

  create(base?: DeepPartial<BusinessIdentity>): BusinessIdentity {
    return BusinessIdentity.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BusinessIdentity>): BusinessIdentity {
    const message = createBaseBusinessIdentity();
    message.name = object.name ?? "";
    message.promotionsConsent = object.promotionsConsent ?? 0;
    message.blackOwned = (object.blackOwned !== undefined && object.blackOwned !== null)
      ? BusinessIdentity_IdentityAttribute.fromPartial(object.blackOwned)
      : undefined;
    message.womenOwned = (object.womenOwned !== undefined && object.womenOwned !== null)
      ? BusinessIdentity_IdentityAttribute.fromPartial(object.womenOwned)
      : undefined;
    message.veteranOwned = (object.veteranOwned !== undefined && object.veteranOwned !== null)
      ? BusinessIdentity_IdentityAttribute.fromPartial(object.veteranOwned)
      : undefined;
    message.latinoOwned = (object.latinoOwned !== undefined && object.latinoOwned !== null)
      ? BusinessIdentity_IdentityAttribute.fromPartial(object.latinoOwned)
      : undefined;
    message.smallBusiness = (object.smallBusiness !== undefined && object.smallBusiness !== null)
      ? BusinessIdentity_IdentityAttribute.fromPartial(object.smallBusiness)
      : undefined;
    return message;
  },
};

function createBaseBusinessIdentity_IdentityAttribute(): BusinessIdentity_IdentityAttribute {
  return { identityDeclaration: 0 };
}

export const BusinessIdentity_IdentityAttribute: MessageFns<BusinessIdentity_IdentityAttribute> = {
  encode(message: BusinessIdentity_IdentityAttribute, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.identityDeclaration !== 0) {
      writer.uint32(8).int32(message.identityDeclaration);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BusinessIdentity_IdentityAttribute {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBusinessIdentity_IdentityAttribute();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.identityDeclaration = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BusinessIdentity_IdentityAttribute {
    return {
      identityDeclaration: isSet(object.identityDeclaration)
        ? businessIdentity_IdentityAttribute_IdentityDeclarationFromJSON(object.identityDeclaration)
        : 0,
    };
  },

  toJSON(message: BusinessIdentity_IdentityAttribute): unknown {
    const obj: any = {};
    if (message.identityDeclaration !== 0) {
      obj.identityDeclaration = businessIdentity_IdentityAttribute_IdentityDeclarationToJSON(
        message.identityDeclaration,
      );
    }
    return obj;
  },

  create(base?: DeepPartial<BusinessIdentity_IdentityAttribute>): BusinessIdentity_IdentityAttribute {
    return BusinessIdentity_IdentityAttribute.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BusinessIdentity_IdentityAttribute>): BusinessIdentity_IdentityAttribute {
    const message = createBaseBusinessIdentity_IdentityAttribute();
    message.identityDeclaration = object.identityDeclaration ?? 0;
    return message;
  },
};

function createBaseGetBusinessIdentityRequest(): GetBusinessIdentityRequest {
  return { name: "" };
}

export const GetBusinessIdentityRequest: MessageFns<GetBusinessIdentityRequest> = {
  encode(message: GetBusinessIdentityRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetBusinessIdentityRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetBusinessIdentityRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetBusinessIdentityRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetBusinessIdentityRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetBusinessIdentityRequest>): GetBusinessIdentityRequest {
    return GetBusinessIdentityRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetBusinessIdentityRequest>): GetBusinessIdentityRequest {
    const message = createBaseGetBusinessIdentityRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpdateBusinessIdentityRequest(): UpdateBusinessIdentityRequest {
  return { businessIdentity: undefined, updateMask: undefined };
}

export const UpdateBusinessIdentityRequest: MessageFns<UpdateBusinessIdentityRequest> = {
  encode(message: UpdateBusinessIdentityRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.businessIdentity !== undefined) {
      BusinessIdentity.encode(message.businessIdentity, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateBusinessIdentityRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateBusinessIdentityRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.businessIdentity = BusinessIdentity.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateBusinessIdentityRequest {
    return {
      businessIdentity: isSet(object.businessIdentity) ? BusinessIdentity.fromJSON(object.businessIdentity) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateBusinessIdentityRequest): unknown {
    const obj: any = {};
    if (message.businessIdentity !== undefined) {
      obj.businessIdentity = BusinessIdentity.toJSON(message.businessIdentity);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateBusinessIdentityRequest>): UpdateBusinessIdentityRequest {
    return UpdateBusinessIdentityRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateBusinessIdentityRequest>): UpdateBusinessIdentityRequest {
    const message = createBaseUpdateBusinessIdentityRequest();
    message.businessIdentity = (object.businessIdentity !== undefined && object.businessIdentity !== null)
      ? BusinessIdentity.fromPartial(object.businessIdentity)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

/**
 * Service to support [business
 * identity](https://support.google.com/merchants/answer/12564247) API.
 */
export type BusinessIdentityServiceDefinition = typeof BusinessIdentityServiceDefinition;
export const BusinessIdentityServiceDefinition = {
  name: "BusinessIdentityService",
  fullName: "google.shopping.merchant.accounts.v1beta.BusinessIdentityService",
  methods: {
    /** Retrieves the business identity of an account. */
    getBusinessIdentity: {
      name: "GetBusinessIdentity",
      requestType: GetBusinessIdentityRequest,
      requestStream: false,
      responseType: BusinessIdentity,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              53,
              18,
              51,
              47,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              47,
              98,
              117,
              115,
              105,
              110,
              101,
              115,
              115,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Updates the business identity of an account. Executing this method requires
     * admin access.
     */
    updateBusinessIdentity: {
      name: "UpdateBusinessIdentity",
      requestType: UpdateBusinessIdentityRequest,
      requestStream: false,
      responseType: BusinessIdentity,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              29,
              98,
              117,
              115,
              105,
              110,
              101,
              115,
              115,
              95,
              105,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              90,
              58,
              17,
              98,
              117,
              115,
              105,
              110,
              101,
              115,
              115,
              95,
              105,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              50,
              69,
              47,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              98,
              117,
              115,
              105,
              110,
              101,
              115,
              115,
              95,
              105,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              46,
              110,
              97,
              109,
              101,
              61,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              47,
              98,
              117,
              115,
              105,
              110,
              101,
              115,
              115,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface BusinessIdentityServiceImplementation<CallContextExt = {}> {
  /** Retrieves the business identity of an account. */
  getBusinessIdentity(
    request: GetBusinessIdentityRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<BusinessIdentity>>;
  /**
   * Updates the business identity of an account. Executing this method requires
   * admin access.
   */
  updateBusinessIdentity(
    request: UpdateBusinessIdentityRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<BusinessIdentity>>;
}

export interface BusinessIdentityServiceClient<CallOptionsExt = {}> {
  /** Retrieves the business identity of an account. */
  getBusinessIdentity(
    request: DeepPartial<GetBusinessIdentityRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<BusinessIdentity>;
  /**
   * Updates the business identity of an account. Executing this method requires
   * admin access.
   */
  updateBusinessIdentity(
    request: DeepPartial<UpdateBusinessIdentityRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<BusinessIdentity>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
