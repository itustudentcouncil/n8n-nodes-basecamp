// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/shopping/merchant/accounts/v1beta/tax_rule.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Interval } from "../../../../type/interval.js";

export const protobufPackage = "google.shopping.merchant.accounts.v1beta";

/**
 * Primary type convension
 *
 * percent micro : 100% = 1 000 000 and 1% = 10 000
 *                 cannot be negative.
 *
 * Information about tax nexus and related parameters applicable to orders
 * delivered to the area covered by a single tax admin. Nexus is created when a
 * merchant is doing business in an area administered by tax admin (only US
 * states are supported for nexus configuration). If merchant has nexus in a US
 * state, merchant needs to pay tax to all tax authorities associated with
 * the shipping destination.
 * Next Id : 8
 */
export interface TaxRule {
  /**
   * The admin_id or criteria_id of the region in which this rule is
   * applicable.
   */
  locationId?:
    | Long
    | undefined;
  /** The range of postal codes in which this rule is applicable. */
  postCodeRange?:
    | TaxRule_TaxPostalCodeRange
    | undefined;
  /**
   * Rate that depends on delivery location: if merchant has a nexus in
   * corresponding US state, rates from authorities with jurisdiction over
   * delivery area are added up.
   */
  useGoogleRate?:
    | boolean
    | undefined;
  /**
   * A fixed rate specified in micros, where 100% = 1_000_000.
   * Suitable for origin-based states.
   */
  selfSpecifiedRateMicros?:
    | Long
    | undefined;
  /** Region code in which this rule is applicable */
  regionCode: string;
  /**
   * If set, shipping charge is taxed (at the same rate as product) when
   * delivering to this admin's area.
   * Can only be set on US states without category.
   */
  shippingTaxed: boolean;
  /**
   * Required. Time period when this rule is effective. If the duration is
   * missing from effective_time listed, then it is open ended to the future.
   * The start of this time period is inclusive, and the end is exclusive.
   */
  effectiveTimePeriod: Interval | undefined;
}

/** A range of postal codes that defines the area. */
export interface TaxRule_TaxPostalCodeRange {
  /**
   * Required. The start of the postal code range, which is also the smallest
   * in the range.
   */
  start: string;
  /**
   * The end of the postal code range. Will be the same as start if not
   * specified.
   */
  end: string;
}

function createBaseTaxRule(): TaxRule {
  return {
    locationId: undefined,
    postCodeRange: undefined,
    useGoogleRate: undefined,
    selfSpecifiedRateMicros: undefined,
    regionCode: "",
    shippingTaxed: false,
    effectiveTimePeriod: undefined,
  };
}

export const TaxRule: MessageFns<TaxRule> = {
  encode(message: TaxRule, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.locationId !== undefined) {
      writer.uint32(16).int64(message.locationId.toString());
    }
    if (message.postCodeRange !== undefined) {
      TaxRule_TaxPostalCodeRange.encode(message.postCodeRange, writer.uint32(26).fork()).join();
    }
    if (message.useGoogleRate !== undefined) {
      writer.uint32(32).bool(message.useGoogleRate);
    }
    if (message.selfSpecifiedRateMicros !== undefined) {
      writer.uint32(40).int64(message.selfSpecifiedRateMicros.toString());
    }
    if (message.regionCode !== "") {
      writer.uint32(10).string(message.regionCode);
    }
    if (message.shippingTaxed !== false) {
      writer.uint32(48).bool(message.shippingTaxed);
    }
    if (message.effectiveTimePeriod !== undefined) {
      Interval.encode(message.effectiveTimePeriod, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TaxRule {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTaxRule();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 16) {
            break;
          }

          message.locationId = Long.fromString(reader.int64().toString());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.postCodeRange = TaxRule_TaxPostalCodeRange.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.useGoogleRate = reader.bool();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.selfSpecifiedRateMicros = Long.fromString(reader.int64().toString());
          continue;
        case 1:
          if (tag !== 10) {
            break;
          }

          message.regionCode = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.shippingTaxed = reader.bool();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.effectiveTimePeriod = Interval.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TaxRule {
    return {
      locationId: isSet(object.locationId) ? Long.fromValue(object.locationId) : undefined,
      postCodeRange: isSet(object.postCodeRange)
        ? TaxRule_TaxPostalCodeRange.fromJSON(object.postCodeRange)
        : undefined,
      useGoogleRate: isSet(object.useGoogleRate) ? globalThis.Boolean(object.useGoogleRate) : undefined,
      selfSpecifiedRateMicros: isSet(object.selfSpecifiedRateMicros)
        ? Long.fromValue(object.selfSpecifiedRateMicros)
        : undefined,
      regionCode: isSet(object.regionCode) ? globalThis.String(object.regionCode) : "",
      shippingTaxed: isSet(object.shippingTaxed) ? globalThis.Boolean(object.shippingTaxed) : false,
      effectiveTimePeriod: isSet(object.effectiveTimePeriod)
        ? Interval.fromJSON(object.effectiveTimePeriod)
        : undefined,
    };
  },

  toJSON(message: TaxRule): unknown {
    const obj: any = {};
    if (message.locationId !== undefined) {
      obj.locationId = (message.locationId || Long.ZERO).toString();
    }
    if (message.postCodeRange !== undefined) {
      obj.postCodeRange = TaxRule_TaxPostalCodeRange.toJSON(message.postCodeRange);
    }
    if (message.useGoogleRate !== undefined) {
      obj.useGoogleRate = message.useGoogleRate;
    }
    if (message.selfSpecifiedRateMicros !== undefined) {
      obj.selfSpecifiedRateMicros = (message.selfSpecifiedRateMicros || Long.ZERO).toString();
    }
    if (message.regionCode !== "") {
      obj.regionCode = message.regionCode;
    }
    if (message.shippingTaxed !== false) {
      obj.shippingTaxed = message.shippingTaxed;
    }
    if (message.effectiveTimePeriod !== undefined) {
      obj.effectiveTimePeriod = Interval.toJSON(message.effectiveTimePeriod);
    }
    return obj;
  },

  create(base?: DeepPartial<TaxRule>): TaxRule {
    return TaxRule.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TaxRule>): TaxRule {
    const message = createBaseTaxRule();
    message.locationId = (object.locationId !== undefined && object.locationId !== null)
      ? Long.fromValue(object.locationId)
      : undefined;
    message.postCodeRange = (object.postCodeRange !== undefined && object.postCodeRange !== null)
      ? TaxRule_TaxPostalCodeRange.fromPartial(object.postCodeRange)
      : undefined;
    message.useGoogleRate = object.useGoogleRate ?? undefined;
    message.selfSpecifiedRateMicros =
      (object.selfSpecifiedRateMicros !== undefined && object.selfSpecifiedRateMicros !== null)
        ? Long.fromValue(object.selfSpecifiedRateMicros)
        : undefined;
    message.regionCode = object.regionCode ?? "";
    message.shippingTaxed = object.shippingTaxed ?? false;
    message.effectiveTimePeriod = (object.effectiveTimePeriod !== undefined && object.effectiveTimePeriod !== null)
      ? Interval.fromPartial(object.effectiveTimePeriod)
      : undefined;
    return message;
  },
};

function createBaseTaxRule_TaxPostalCodeRange(): TaxRule_TaxPostalCodeRange {
  return { start: "", end: "" };
}

export const TaxRule_TaxPostalCodeRange: MessageFns<TaxRule_TaxPostalCodeRange> = {
  encode(message: TaxRule_TaxPostalCodeRange, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.start !== "") {
      writer.uint32(10).string(message.start);
    }
    if (message.end !== "") {
      writer.uint32(18).string(message.end);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TaxRule_TaxPostalCodeRange {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTaxRule_TaxPostalCodeRange();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.start = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.end = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TaxRule_TaxPostalCodeRange {
    return {
      start: isSet(object.start) ? globalThis.String(object.start) : "",
      end: isSet(object.end) ? globalThis.String(object.end) : "",
    };
  },

  toJSON(message: TaxRule_TaxPostalCodeRange): unknown {
    const obj: any = {};
    if (message.start !== "") {
      obj.start = message.start;
    }
    if (message.end !== "") {
      obj.end = message.end;
    }
    return obj;
  },

  create(base?: DeepPartial<TaxRule_TaxPostalCodeRange>): TaxRule_TaxPostalCodeRange {
    return TaxRule_TaxPostalCodeRange.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TaxRule_TaxPostalCodeRange>): TaxRule_TaxPostalCodeRange {
    const message = createBaseTaxRule_TaxPostalCodeRange();
    message.start = object.start ?? "";
    message.end = object.end ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
