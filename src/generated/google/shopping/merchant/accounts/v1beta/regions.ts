// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/shopping/merchant/accounts/v1beta/regions.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Empty } from "../../../../protobuf/empty.js";
import { FieldMask } from "../../../../protobuf/field_mask.js";
import { BoolValue } from "../../../../protobuf/wrappers.js";

export const protobufPackage = "google.shopping.merchant.accounts.v1beta";

/** Request message for the `GetRegion` method. */
export interface GetRegionRequest {
  /**
   * Required. The name of the region to retrieve.
   * Format: `accounts/{account}/regions/{region}`
   */
  name: string;
}

/** Request message for the `CreateRegion` method. */
export interface CreateRegionRequest {
  /**
   * Required. The account to create a region for.
   * Format: `accounts/{account}`
   */
  parent: string;
  /**
   * Required. The identifier for the region, unique over all regions of the
   * same account.
   */
  regionId: string;
  /** Required. The region to create. */
  region: Region | undefined;
}

/** Request message for the `UpdateRegion` method. */
export interface UpdateRegionRequest {
  /** Required. The updated region. */
  region:
    | Region
    | undefined;
  /**
   * Optional. The comma-separated field mask indicating the fields to update.
   * Example:
   * `"displayName,postalCodeArea.regionCode"`.
   */
  updateMask: string[] | undefined;
}

/** Request message for the `DeleteRegion` method. */
export interface DeleteRegionRequest {
  /**
   * Required. The name of the region to delete.
   * Format: `accounts/{account}/regions/{region}`
   */
  name: string;
}

/** Request message for the `ListRegions` method. */
export interface ListRegionsRequest {
  /**
   * Required. The account to list regions for.
   * Format: `accounts/{account}`
   */
  parent: string;
  /**
   * Optional. The maximum number of regions to return. The service may return
   * fewer than this value.
   * If unspecified, at most 50 regions will be returned.
   * The maximum value is 1000; values above 1000 will be coerced to 1000.
   */
  pageSize: number;
  /**
   * Optional. A page token, received from a previous `ListRegions` call.
   * Provide this to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to `ListRegions` must
   * match the call that provided the page token.
   */
  pageToken: string;
}

/** Response message for the `ListRegions` method. */
export interface ListRegionsResponse {
  /** The regions from the specified merchant. */
  regions: Region[];
  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

/**
 * Represents a geographic region that you can use as a target with both the
 * `RegionalInventory` and `ShippingSettings` services. You can define regions
 * as collections of either postal codes or, in some countries, using predefined
 * geotargets. For more information, see [Set up regions
 * ](https://support.google.com/merchants/answer/7410946#zippy=%2Ccreate-a-new-region)
 * for more information.
 */
export interface Region {
  /**
   * Identifier. The resource name of the region.
   * Format: `accounts/{account}/regions/{region}`
   */
  name: string;
  /** Optional. The display name of the region. */
  displayName?:
    | string
    | undefined;
  /** Optional. A list of postal codes that defines the region area. */
  postalCodeArea:
    | Region_PostalCodeArea
    | undefined;
  /** Optional. A list of geotargets that defines the region area. */
  geotargetArea:
    | Region_GeoTargetArea
    | undefined;
  /**
   * Output only. Indicates if the region is eligible for use in the Regional
   * Inventory configuration.
   */
  regionalInventoryEligible:
    | boolean
    | undefined;
  /**
   * Output only. Indicates if the region is eligible for use in the Shipping
   * Services configuration.
   */
  shippingEligible: boolean | undefined;
}

/**
 * A list of postal codes that defines the region area.
 * Note: All regions defined using postal codes are accessible through the
 * account's `ShippingSettings.postalCodeGroups` resource.
 */
export interface Region_PostalCodeArea {
  /**
   * Required. [CLDR territory
   * code](http://www.unicode.org/repos/cldr/tags/latest/common/main/en.xml)
   * or the country the postal code group applies to.
   */
  regionCode: string;
  /** Required. A range of postal codes. */
  postalCodes: Region_PostalCodeArea_PostalCodeRange[];
}

/** A range of postal codes that defines the region area. */
export interface Region_PostalCodeArea_PostalCodeRange {
  /**
   * Required. A postal code or a pattern of the form prefix* denoting the
   * inclusive lower bound of the range defining the area. Examples values:
   * `94108`, `9410*`, `9*`.
   */
  begin: string;
  /**
   * Optional. A postal code or a pattern of the form `prefix*` denoting the
   * inclusive upper bound of the range defining the area. It must have the
   * same length as postalCodeRangeBegin: if postalCodeRangeBegin is a
   * postal code then postalCodeRangeEnd must be a postal code too; if
   * postalCodeRangeBegin is a pattern then postalCodeRangeEnd must be a
   * pattern with the same prefix length. Optional: if not set, then the
   * area is defined as being all the postal codes matching
   * postalCodeRangeBegin.
   */
  end: string;
}

/** A list of geotargets that defines the region area. */
export interface Region_GeoTargetArea {
  /**
   * Required. A non-empty list of [location
   * IDs](https://developers.google.com/adwords/api/docs/appendix/geotargeting).
   * They must all be of the same location type (for example, state).
   */
  geotargetCriteriaIds: Long[];
}

function createBaseGetRegionRequest(): GetRegionRequest {
  return { name: "" };
}

export const GetRegionRequest: MessageFns<GetRegionRequest> = {
  encode(message: GetRegionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetRegionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetRegionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetRegionRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetRegionRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetRegionRequest>): GetRegionRequest {
    return GetRegionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetRegionRequest>): GetRegionRequest {
    const message = createBaseGetRegionRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateRegionRequest(): CreateRegionRequest {
  return { parent: "", regionId: "", region: undefined };
}

export const CreateRegionRequest: MessageFns<CreateRegionRequest> = {
  encode(message: CreateRegionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.regionId !== "") {
      writer.uint32(18).string(message.regionId);
    }
    if (message.region !== undefined) {
      Region.encode(message.region, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateRegionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateRegionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.regionId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.region = Region.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateRegionRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      regionId: isSet(object.regionId) ? globalThis.String(object.regionId) : "",
      region: isSet(object.region) ? Region.fromJSON(object.region) : undefined,
    };
  },

  toJSON(message: CreateRegionRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.regionId !== "") {
      obj.regionId = message.regionId;
    }
    if (message.region !== undefined) {
      obj.region = Region.toJSON(message.region);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateRegionRequest>): CreateRegionRequest {
    return CreateRegionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateRegionRequest>): CreateRegionRequest {
    const message = createBaseCreateRegionRequest();
    message.parent = object.parent ?? "";
    message.regionId = object.regionId ?? "";
    message.region = (object.region !== undefined && object.region !== null)
      ? Region.fromPartial(object.region)
      : undefined;
    return message;
  },
};

function createBaseUpdateRegionRequest(): UpdateRegionRequest {
  return { region: undefined, updateMask: undefined };
}

export const UpdateRegionRequest: MessageFns<UpdateRegionRequest> = {
  encode(message: UpdateRegionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.region !== undefined) {
      Region.encode(message.region, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateRegionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateRegionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.region = Region.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateRegionRequest {
    return {
      region: isSet(object.region) ? Region.fromJSON(object.region) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateRegionRequest): unknown {
    const obj: any = {};
    if (message.region !== undefined) {
      obj.region = Region.toJSON(message.region);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateRegionRequest>): UpdateRegionRequest {
    return UpdateRegionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateRegionRequest>): UpdateRegionRequest {
    const message = createBaseUpdateRegionRequest();
    message.region = (object.region !== undefined && object.region !== null)
      ? Region.fromPartial(object.region)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseDeleteRegionRequest(): DeleteRegionRequest {
  return { name: "" };
}

export const DeleteRegionRequest: MessageFns<DeleteRegionRequest> = {
  encode(message: DeleteRegionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteRegionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteRegionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteRegionRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteRegionRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteRegionRequest>): DeleteRegionRequest {
    return DeleteRegionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteRegionRequest>): DeleteRegionRequest {
    const message = createBaseDeleteRegionRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListRegionsRequest(): ListRegionsRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListRegionsRequest: MessageFns<ListRegionsRequest> = {
  encode(message: ListRegionsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListRegionsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListRegionsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListRegionsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListRegionsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListRegionsRequest>): ListRegionsRequest {
    return ListRegionsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListRegionsRequest>): ListRegionsRequest {
    const message = createBaseListRegionsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListRegionsResponse(): ListRegionsResponse {
  return { regions: [], nextPageToken: "" };
}

export const ListRegionsResponse: MessageFns<ListRegionsResponse> = {
  encode(message: ListRegionsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.regions) {
      Region.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListRegionsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListRegionsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.regions.push(Region.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListRegionsResponse {
    return {
      regions: globalThis.Array.isArray(object?.regions) ? object.regions.map((e: any) => Region.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListRegionsResponse): unknown {
    const obj: any = {};
    if (message.regions?.length) {
      obj.regions = message.regions.map((e) => Region.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListRegionsResponse>): ListRegionsResponse {
    return ListRegionsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListRegionsResponse>): ListRegionsResponse {
    const message = createBaseListRegionsResponse();
    message.regions = object.regions?.map((e) => Region.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseRegion(): Region {
  return {
    name: "",
    displayName: undefined,
    postalCodeArea: undefined,
    geotargetArea: undefined,
    regionalInventoryEligible: undefined,
    shippingEligible: undefined,
  };
}

export const Region: MessageFns<Region> = {
  encode(message: Region, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.displayName !== undefined) {
      writer.uint32(18).string(message.displayName);
    }
    if (message.postalCodeArea !== undefined) {
      Region_PostalCodeArea.encode(message.postalCodeArea, writer.uint32(26).fork()).join();
    }
    if (message.geotargetArea !== undefined) {
      Region_GeoTargetArea.encode(message.geotargetArea, writer.uint32(34).fork()).join();
    }
    if (message.regionalInventoryEligible !== undefined) {
      BoolValue.encode({ value: message.regionalInventoryEligible! }, writer.uint32(42).fork()).join();
    }
    if (message.shippingEligible !== undefined) {
      BoolValue.encode({ value: message.shippingEligible! }, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Region {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRegion();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.postalCodeArea = Region_PostalCodeArea.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.geotargetArea = Region_GeoTargetArea.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.regionalInventoryEligible = BoolValue.decode(reader, reader.uint32()).value;
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.shippingEligible = BoolValue.decode(reader, reader.uint32()).value;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Region {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : undefined,
      postalCodeArea: isSet(object.postalCodeArea) ? Region_PostalCodeArea.fromJSON(object.postalCodeArea) : undefined,
      geotargetArea: isSet(object.geotargetArea) ? Region_GeoTargetArea.fromJSON(object.geotargetArea) : undefined,
      regionalInventoryEligible: isSet(object.regionalInventoryEligible)
        ? Boolean(object.regionalInventoryEligible)
        : undefined,
      shippingEligible: isSet(object.shippingEligible) ? Boolean(object.shippingEligible) : undefined,
    };
  },

  toJSON(message: Region): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.displayName !== undefined) {
      obj.displayName = message.displayName;
    }
    if (message.postalCodeArea !== undefined) {
      obj.postalCodeArea = Region_PostalCodeArea.toJSON(message.postalCodeArea);
    }
    if (message.geotargetArea !== undefined) {
      obj.geotargetArea = Region_GeoTargetArea.toJSON(message.geotargetArea);
    }
    if (message.regionalInventoryEligible !== undefined) {
      obj.regionalInventoryEligible = message.regionalInventoryEligible;
    }
    if (message.shippingEligible !== undefined) {
      obj.shippingEligible = message.shippingEligible;
    }
    return obj;
  },

  create(base?: DeepPartial<Region>): Region {
    return Region.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Region>): Region {
    const message = createBaseRegion();
    message.name = object.name ?? "";
    message.displayName = object.displayName ?? undefined;
    message.postalCodeArea = (object.postalCodeArea !== undefined && object.postalCodeArea !== null)
      ? Region_PostalCodeArea.fromPartial(object.postalCodeArea)
      : undefined;
    message.geotargetArea = (object.geotargetArea !== undefined && object.geotargetArea !== null)
      ? Region_GeoTargetArea.fromPartial(object.geotargetArea)
      : undefined;
    message.regionalInventoryEligible = object.regionalInventoryEligible ?? undefined;
    message.shippingEligible = object.shippingEligible ?? undefined;
    return message;
  },
};

function createBaseRegion_PostalCodeArea(): Region_PostalCodeArea {
  return { regionCode: "", postalCodes: [] };
}

export const Region_PostalCodeArea: MessageFns<Region_PostalCodeArea> = {
  encode(message: Region_PostalCodeArea, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.regionCode !== "") {
      writer.uint32(10).string(message.regionCode);
    }
    for (const v of message.postalCodes) {
      Region_PostalCodeArea_PostalCodeRange.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Region_PostalCodeArea {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRegion_PostalCodeArea();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.regionCode = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.postalCodes.push(Region_PostalCodeArea_PostalCodeRange.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Region_PostalCodeArea {
    return {
      regionCode: isSet(object.regionCode) ? globalThis.String(object.regionCode) : "",
      postalCodes: globalThis.Array.isArray(object?.postalCodes)
        ? object.postalCodes.map((e: any) => Region_PostalCodeArea_PostalCodeRange.fromJSON(e))
        : [],
    };
  },

  toJSON(message: Region_PostalCodeArea): unknown {
    const obj: any = {};
    if (message.regionCode !== "") {
      obj.regionCode = message.regionCode;
    }
    if (message.postalCodes?.length) {
      obj.postalCodes = message.postalCodes.map((e) => Region_PostalCodeArea_PostalCodeRange.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<Region_PostalCodeArea>): Region_PostalCodeArea {
    return Region_PostalCodeArea.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Region_PostalCodeArea>): Region_PostalCodeArea {
    const message = createBaseRegion_PostalCodeArea();
    message.regionCode = object.regionCode ?? "";
    message.postalCodes = object.postalCodes?.map((e) => Region_PostalCodeArea_PostalCodeRange.fromPartial(e)) || [];
    return message;
  },
};

function createBaseRegion_PostalCodeArea_PostalCodeRange(): Region_PostalCodeArea_PostalCodeRange {
  return { begin: "", end: "" };
}

export const Region_PostalCodeArea_PostalCodeRange: MessageFns<Region_PostalCodeArea_PostalCodeRange> = {
  encode(message: Region_PostalCodeArea_PostalCodeRange, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.begin !== "") {
      writer.uint32(10).string(message.begin);
    }
    if (message.end !== "") {
      writer.uint32(18).string(message.end);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Region_PostalCodeArea_PostalCodeRange {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRegion_PostalCodeArea_PostalCodeRange();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.begin = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.end = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Region_PostalCodeArea_PostalCodeRange {
    return {
      begin: isSet(object.begin) ? globalThis.String(object.begin) : "",
      end: isSet(object.end) ? globalThis.String(object.end) : "",
    };
  },

  toJSON(message: Region_PostalCodeArea_PostalCodeRange): unknown {
    const obj: any = {};
    if (message.begin !== "") {
      obj.begin = message.begin;
    }
    if (message.end !== "") {
      obj.end = message.end;
    }
    return obj;
  },

  create(base?: DeepPartial<Region_PostalCodeArea_PostalCodeRange>): Region_PostalCodeArea_PostalCodeRange {
    return Region_PostalCodeArea_PostalCodeRange.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Region_PostalCodeArea_PostalCodeRange>): Region_PostalCodeArea_PostalCodeRange {
    const message = createBaseRegion_PostalCodeArea_PostalCodeRange();
    message.begin = object.begin ?? "";
    message.end = object.end ?? "";
    return message;
  },
};

function createBaseRegion_GeoTargetArea(): Region_GeoTargetArea {
  return { geotargetCriteriaIds: [] };
}

export const Region_GeoTargetArea: MessageFns<Region_GeoTargetArea> = {
  encode(message: Region_GeoTargetArea, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    writer.uint32(10).fork();
    for (const v of message.geotargetCriteriaIds) {
      writer.int64(v.toString());
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Region_GeoTargetArea {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRegion_GeoTargetArea();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag === 8) {
            message.geotargetCriteriaIds.push(Long.fromString(reader.int64().toString()));

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.geotargetCriteriaIds.push(Long.fromString(reader.int64().toString()));
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Region_GeoTargetArea {
    return {
      geotargetCriteriaIds: globalThis.Array.isArray(object?.geotargetCriteriaIds)
        ? object.geotargetCriteriaIds.map((e: any) => Long.fromValue(e))
        : [],
    };
  },

  toJSON(message: Region_GeoTargetArea): unknown {
    const obj: any = {};
    if (message.geotargetCriteriaIds?.length) {
      obj.geotargetCriteriaIds = message.geotargetCriteriaIds.map((e) => (e || Long.ZERO).toString());
    }
    return obj;
  },

  create(base?: DeepPartial<Region_GeoTargetArea>): Region_GeoTargetArea {
    return Region_GeoTargetArea.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Region_GeoTargetArea>): Region_GeoTargetArea {
    const message = createBaseRegion_GeoTargetArea();
    message.geotargetCriteriaIds = object.geotargetCriteriaIds?.map((e) => Long.fromValue(e)) || [];
    return message;
  },
};

/**
 * Manages regions configuration.
 *
 * This API defines the following resource model:
 *
 * - [Region][google.shopping.merchant.accounts.v1main.Region]
 */
export type RegionsServiceDefinition = typeof RegionsServiceDefinition;
export const RegionsServiceDefinition = {
  name: "RegionsService",
  fullName: "google.shopping.merchant.accounts.v1beta.RegionsService",
  methods: {
    /** Retrieves a region defined in your Merchant Center account. */
    getRegion: {
      name: "GetRegion",
      requestType: GetRegionRequest,
      requestStream: false,
      responseType: Region,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              46,
              18,
              44,
              47,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              47,
              114,
              101,
              103,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Creates a region definition in your Merchant Center account. Executing this
     * method requires admin access.
     */
    createRegion: {
      name: "CreateRegion",
      requestType: CreateRegionRequest,
      requestStream: false,
      responseType: Region,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              23,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              114,
              101,
              103,
              105,
              111,
              110,
              44,
              114,
              101,
              103,
              105,
              111,
              110,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              54,
              58,
              6,
              114,
              101,
              103,
              105,
              111,
              110,
              34,
              44,
              47,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              125,
              47,
              114,
              101,
              103,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Updates a region definition in your Merchant Center account. Executing this
     * method requires admin access.
     */
    updateRegion: {
      name: "UpdateRegion",
      requestType: UpdateRegionRequest,
      requestStream: false,
      responseType: Region,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([18, 114, 101, 103, 105, 111, 110, 44, 117, 112, 100, 97, 116, 101, 95, 109, 97, 115, 107]),
          ],
          578365826: [
            Buffer.from([
              61,
              58,
              6,
              114,
              101,
              103,
              105,
              111,
              110,
              50,
              51,
              47,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              114,
              101,
              103,
              105,
              111,
              110,
              46,
              110,
              97,
              109,
              101,
              61,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              47,
              114,
              101,
              103,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Deletes a region definition from your Merchant Center account. Executing
     * this method requires admin access.
     */
    deleteRegion: {
      name: "DeleteRegion",
      requestType: DeleteRegionRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              46,
              42,
              44,
              47,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              47,
              114,
              101,
              103,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists the regions in your Merchant Center account. */
    listRegions: {
      name: "ListRegions",
      requestType: ListRegionsRequest,
      requestStream: false,
      responseType: ListRegionsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              46,
              18,
              44,
              47,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              125,
              47,
              114,
              101,
              103,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface RegionsServiceImplementation<CallContextExt = {}> {
  /** Retrieves a region defined in your Merchant Center account. */
  getRegion(request: GetRegionRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Region>>;
  /**
   * Creates a region definition in your Merchant Center account. Executing this
   * method requires admin access.
   */
  createRegion(request: CreateRegionRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Region>>;
  /**
   * Updates a region definition in your Merchant Center account. Executing this
   * method requires admin access.
   */
  updateRegion(request: UpdateRegionRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Region>>;
  /**
   * Deletes a region definition from your Merchant Center account. Executing
   * this method requires admin access.
   */
  deleteRegion(request: DeleteRegionRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
  /** Lists the regions in your Merchant Center account. */
  listRegions(
    request: ListRegionsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListRegionsResponse>>;
}

export interface RegionsServiceClient<CallOptionsExt = {}> {
  /** Retrieves a region defined in your Merchant Center account. */
  getRegion(request: DeepPartial<GetRegionRequest>, options?: CallOptions & CallOptionsExt): Promise<Region>;
  /**
   * Creates a region definition in your Merchant Center account. Executing this
   * method requires admin access.
   */
  createRegion(request: DeepPartial<CreateRegionRequest>, options?: CallOptions & CallOptionsExt): Promise<Region>;
  /**
   * Updates a region definition in your Merchant Center account. Executing this
   * method requires admin access.
   */
  updateRegion(request: DeepPartial<UpdateRegionRequest>, options?: CallOptions & CallOptionsExt): Promise<Region>;
  /**
   * Deletes a region definition from your Merchant Center account. Executing
   * this method requires admin access.
   */
  deleteRegion(request: DeepPartial<DeleteRegionRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
  /** Lists the regions in your Merchant Center account. */
  listRegions(
    request: DeepPartial<ListRegionsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListRegionsResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
