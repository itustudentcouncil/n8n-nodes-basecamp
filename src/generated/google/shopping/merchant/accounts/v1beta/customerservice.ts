// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/shopping/merchant/accounts/v1beta/customerservice.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { PhoneNumber } from "../../../../type/phone_number.js";

export const protobufPackage = "google.shopping.merchant.accounts.v1beta";

/** Customer service information. */
export interface CustomerService {
  /** Optional. The URI where customer service may be found. */
  uri?:
    | string
    | undefined;
  /** Optional. The email address where customer service may be reached. */
  email?:
    | string
    | undefined;
  /** Optional. The phone number where customer service may be called. */
  phone?: PhoneNumber | undefined;
}

function createBaseCustomerService(): CustomerService {
  return { uri: undefined, email: undefined, phone: undefined };
}

export const CustomerService: MessageFns<CustomerService> = {
  encode(message: CustomerService, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.uri !== undefined) {
      writer.uint32(10).string(message.uri);
    }
    if (message.email !== undefined) {
      writer.uint32(18).string(message.email);
    }
    if (message.phone !== undefined) {
      PhoneNumber.encode(message.phone, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CustomerService {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCustomerService();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.uri = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.email = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.phone = PhoneNumber.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CustomerService {
    return {
      uri: isSet(object.uri) ? globalThis.String(object.uri) : undefined,
      email: isSet(object.email) ? globalThis.String(object.email) : undefined,
      phone: isSet(object.phone) ? PhoneNumber.fromJSON(object.phone) : undefined,
    };
  },

  toJSON(message: CustomerService): unknown {
    const obj: any = {};
    if (message.uri !== undefined) {
      obj.uri = message.uri;
    }
    if (message.email !== undefined) {
      obj.email = message.email;
    }
    if (message.phone !== undefined) {
      obj.phone = PhoneNumber.toJSON(message.phone);
    }
    return obj;
  },

  create(base?: DeepPartial<CustomerService>): CustomerService {
    return CustomerService.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CustomerService>): CustomerService {
    const message = createBaseCustomerService();
    message.uri = object.uri ?? undefined;
    message.email = object.email ?? undefined;
    message.phone = (object.phone !== undefined && object.phone !== null)
      ? PhoneNumber.fromPartial(object.phone)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
