// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/shopping/merchant/accounts/v1beta/online_return_policy.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Price } from "../../../type/types.js";

export const protobufPackage = "google.shopping.merchant.accounts.v1beta";

/** Request message for the `GetOnlineReturnPolicy` method. */
export interface GetOnlineReturnPolicyRequest {
  /**
   * Required. The name of the return policy to retrieve.
   * Format: `accounts/{account}/onlineReturnPolicies/{return_policy}`
   */
  name: string;
}

/** Request message for the `ListOnlineReturnPolicies` method. */
export interface ListOnlineReturnPoliciesRequest {
  /**
   * Required. The merchant account for which to list return policies.
   * Format: `accounts/{account}`
   */
  parent: string;
  /**
   * Optional. The maximum number of `OnlineReturnPolicy` resources to return.
   * The service returns fewer than this value if the number of return policies
   * for the given merchant is less that than the `pageSize`. The default value
   * is 10. The maximum value is 100; If a value higher than the maximum is
   * specified, then the `pageSize` will default to the maximum
   */
  pageSize: number;
  /**
   * Optional. A page token, received from a previous `ListOnlineReturnPolicies`
   * call. Provide the page token to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to
   * `ListOnlineReturnPolicies` must match the call that provided the page
   * token. The token returned as
   * [nextPageToken][google.shopping.merchant.accounts.v1beta.ListOnlineReturnPoliciesResponse.next_page_token]
   * in the response to the previous request.
   */
  pageToken: string;
}

/** Response message for the `ListOnlineReturnPolicies` method. */
export interface ListOnlineReturnPoliciesResponse {
  /** The retrieved return policies. */
  onlineReturnPolicies: OnlineReturnPolicy[];
  /**
   * A token, which can be sent as `pageToken` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

/**
 * [Online return policy](https://support.google.com/merchants/answer/10220642)
 * object. This is currently used to represent return policies for ads and free
 * listings programs.
 */
export interface OnlineReturnPolicy {
  /**
   * Identifier. The name of the `OnlineReturnPolicy` resource.
   * Format: `accounts/{account}/onlineReturnPolicies/{return_policy}`
   */
  name: string;
  /** Output only. Return policy ID generated by Google. */
  returnPolicyId: string;
  /**
   * This field represents the unique user-defined label of the return policy.
   * It is important to note that the same label cannot be used in different
   * return policies for the same country. Unless a product specifies a specific
   * label attribute, policies will be automatically labeled as 'default'.
   * To assign a custom return policy to certain product groups, follow the
   * instructions provided in the [Return policy label]
   * (https://support.google.com/merchants/answer/9445425).
   * The label can contain up to 50 characters.
   */
  label: string;
  /**
   * The countries of sale where the return policy applies. The values
   * must be a valid 2 letter ISO 3166 code.
   */
  countries: string[];
  /** The return policy. */
  policy:
    | OnlineReturnPolicy_Policy
    | undefined;
  /**
   * The restocking fee that applies to all return reason categories. This would
   * be treated as a free restocking fee if the value is not set.
   */
  restockingFee:
    | OnlineReturnPolicy_RestockingFee
    | undefined;
  /**
   * The return methods of how customers can return an item. This value is
   * required to not be empty unless the type of return policy is noReturns.
   */
  returnMethods: OnlineReturnPolicy_ReturnMethod[];
  /**
   * The item conditions accepted for returns must not be empty unless the type
   * of return policy is 'noReturns'.
   */
  itemConditions: OnlineReturnPolicy_ItemCondition[];
  /**
   * The return shipping fee. Should be set only when customer need to download
   * and print the return label.
   */
  returnShippingFee:
    | OnlineReturnPolicy_ReturnShippingFee
    | undefined;
  /**
   * The return policy uri. This can used by Google to do a sanity check for the
   * policy. It must be a valid URL.
   */
  returnPolicyUri: string;
  /**
   * This field specifies if merchant only accepts defective products for
   * returns, and this field is required.
   */
  acceptDefectiveOnly?:
    | boolean
    | undefined;
  /**
   * The field specifies the number of days it takes for merchants to process
   * refunds, field is optional.
   */
  processRefundDays?:
    | number
    | undefined;
  /**
   * This field specifies if merchant allows customers to exchange products,
   * this field is required.
   */
  acceptExchange?: boolean | undefined;
}

/** The available return methods. */
export enum OnlineReturnPolicy_ReturnMethod {
  /** RETURN_METHOD_UNSPECIFIED - Default value. This value is unused. */
  RETURN_METHOD_UNSPECIFIED = 0,
  /** BY_MAIL - Return by mail. */
  BY_MAIL = 1,
  /** IN_STORE - Return in store. */
  IN_STORE = 2,
  /** AT_A_KIOSK - Return at a kiosk. */
  AT_A_KIOSK = 3,
  UNRECOGNIZED = -1,
}

export function onlineReturnPolicy_ReturnMethodFromJSON(object: any): OnlineReturnPolicy_ReturnMethod {
  switch (object) {
    case 0:
    case "RETURN_METHOD_UNSPECIFIED":
      return OnlineReturnPolicy_ReturnMethod.RETURN_METHOD_UNSPECIFIED;
    case 1:
    case "BY_MAIL":
      return OnlineReturnPolicy_ReturnMethod.BY_MAIL;
    case 2:
    case "IN_STORE":
      return OnlineReturnPolicy_ReturnMethod.IN_STORE;
    case 3:
    case "AT_A_KIOSK":
      return OnlineReturnPolicy_ReturnMethod.AT_A_KIOSK;
    case -1:
    case "UNRECOGNIZED":
    default:
      return OnlineReturnPolicy_ReturnMethod.UNRECOGNIZED;
  }
}

export function onlineReturnPolicy_ReturnMethodToJSON(object: OnlineReturnPolicy_ReturnMethod): string {
  switch (object) {
    case OnlineReturnPolicy_ReturnMethod.RETURN_METHOD_UNSPECIFIED:
      return "RETURN_METHOD_UNSPECIFIED";
    case OnlineReturnPolicy_ReturnMethod.BY_MAIL:
      return "BY_MAIL";
    case OnlineReturnPolicy_ReturnMethod.IN_STORE:
      return "IN_STORE";
    case OnlineReturnPolicy_ReturnMethod.AT_A_KIOSK:
      return "AT_A_KIOSK";
    case OnlineReturnPolicy_ReturnMethod.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** The available item conditions. */
export enum OnlineReturnPolicy_ItemCondition {
  /** ITEM_CONDITION_UNSPECIFIED - Default value. This value is unused. */
  ITEM_CONDITION_UNSPECIFIED = 0,
  /** NEW - New. */
  NEW = 1,
  /** USED - Used. */
  USED = 2,
  UNRECOGNIZED = -1,
}

export function onlineReturnPolicy_ItemConditionFromJSON(object: any): OnlineReturnPolicy_ItemCondition {
  switch (object) {
    case 0:
    case "ITEM_CONDITION_UNSPECIFIED":
      return OnlineReturnPolicy_ItemCondition.ITEM_CONDITION_UNSPECIFIED;
    case 1:
    case "NEW":
      return OnlineReturnPolicy_ItemCondition.NEW;
    case 2:
    case "USED":
      return OnlineReturnPolicy_ItemCondition.USED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return OnlineReturnPolicy_ItemCondition.UNRECOGNIZED;
  }
}

export function onlineReturnPolicy_ItemConditionToJSON(object: OnlineReturnPolicy_ItemCondition): string {
  switch (object) {
    case OnlineReturnPolicy_ItemCondition.ITEM_CONDITION_UNSPECIFIED:
      return "ITEM_CONDITION_UNSPECIFIED";
    case OnlineReturnPolicy_ItemCondition.NEW:
      return "NEW";
    case OnlineReturnPolicy_ItemCondition.USED:
      return "USED";
    case OnlineReturnPolicy_ItemCondition.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * The return shipping fee. This can either be a fixed fee or a boolean to
 * indicate that the customer pays the actual shipping cost.
 */
export interface OnlineReturnPolicy_ReturnShippingFee {
  /** Type of return shipping fee. */
  type: OnlineReturnPolicy_ReturnShippingFee_Type;
  /**
   * Fixed return shipping fee amount. This value is only applicable when type
   * is `FIXED`. We will treat the return shipping fee as free if type is
   * `FIXED` and this value is not set.
   */
  fixedFee: Price | undefined;
}

/** Return shipping fee types. */
export enum OnlineReturnPolicy_ReturnShippingFee_Type {
  /** TYPE_UNSPECIFIED - Default value. This value is unused. */
  TYPE_UNSPECIFIED = 0,
  /** FIXED - The return shipping fee is a fixed value. */
  FIXED = 1,
  /** CUSTOMER_PAYING_ACTUAL_FEE - Customers will pay the actual return shipping fee. */
  CUSTOMER_PAYING_ACTUAL_FEE = 2,
  UNRECOGNIZED = -1,
}

export function onlineReturnPolicy_ReturnShippingFee_TypeFromJSON(
  object: any,
): OnlineReturnPolicy_ReturnShippingFee_Type {
  switch (object) {
    case 0:
    case "TYPE_UNSPECIFIED":
      return OnlineReturnPolicy_ReturnShippingFee_Type.TYPE_UNSPECIFIED;
    case 1:
    case "FIXED":
      return OnlineReturnPolicy_ReturnShippingFee_Type.FIXED;
    case 2:
    case "CUSTOMER_PAYING_ACTUAL_FEE":
      return OnlineReturnPolicy_ReturnShippingFee_Type.CUSTOMER_PAYING_ACTUAL_FEE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return OnlineReturnPolicy_ReturnShippingFee_Type.UNRECOGNIZED;
  }
}

export function onlineReturnPolicy_ReturnShippingFee_TypeToJSON(
  object: OnlineReturnPolicy_ReturnShippingFee_Type,
): string {
  switch (object) {
    case OnlineReturnPolicy_ReturnShippingFee_Type.TYPE_UNSPECIFIED:
      return "TYPE_UNSPECIFIED";
    case OnlineReturnPolicy_ReturnShippingFee_Type.FIXED:
      return "FIXED";
    case OnlineReturnPolicy_ReturnShippingFee_Type.CUSTOMER_PAYING_ACTUAL_FEE:
      return "CUSTOMER_PAYING_ACTUAL_FEE";
    case OnlineReturnPolicy_ReturnShippingFee_Type.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** The restocking fee. This can be a flat fee or a micro percent. */
export interface OnlineReturnPolicy_RestockingFee {
  /** Fixed restocking fee. */
  fixedFee?:
    | Price
    | undefined;
  /**
   * Percent of total price in micros. 15,000,000 means 15% of the total
   * price would be charged.
   */
  microPercent?: number | undefined;
}

/** The available policies. */
export interface OnlineReturnPolicy_Policy {
  /** Policy type. */
  type: OnlineReturnPolicy_Policy_Type;
  /**
   * The number of days items can be returned after delivery, where one day
   * is defined as 24 hours after the delivery timestamp. Required for
   * `NUMBER_OF_DAYS_AFTER_DELIVERY` returns.
   */
  days: Long;
}

/** Return policy types. */
export enum OnlineReturnPolicy_Policy_Type {
  /** TYPE_UNSPECIFIED - Default value. This value is unused. */
  TYPE_UNSPECIFIED = 0,
  /** NUMBER_OF_DAYS_AFTER_DELIVERY - The number of days within which a return is valid after delivery. */
  NUMBER_OF_DAYS_AFTER_DELIVERY = 1,
  /** NO_RETURNS - No returns. */
  NO_RETURNS = 2,
  /** LIFETIME_RETURNS - Life time returns. */
  LIFETIME_RETURNS = 3,
  UNRECOGNIZED = -1,
}

export function onlineReturnPolicy_Policy_TypeFromJSON(object: any): OnlineReturnPolicy_Policy_Type {
  switch (object) {
    case 0:
    case "TYPE_UNSPECIFIED":
      return OnlineReturnPolicy_Policy_Type.TYPE_UNSPECIFIED;
    case 1:
    case "NUMBER_OF_DAYS_AFTER_DELIVERY":
      return OnlineReturnPolicy_Policy_Type.NUMBER_OF_DAYS_AFTER_DELIVERY;
    case 2:
    case "NO_RETURNS":
      return OnlineReturnPolicy_Policy_Type.NO_RETURNS;
    case 3:
    case "LIFETIME_RETURNS":
      return OnlineReturnPolicy_Policy_Type.LIFETIME_RETURNS;
    case -1:
    case "UNRECOGNIZED":
    default:
      return OnlineReturnPolicy_Policy_Type.UNRECOGNIZED;
  }
}

export function onlineReturnPolicy_Policy_TypeToJSON(object: OnlineReturnPolicy_Policy_Type): string {
  switch (object) {
    case OnlineReturnPolicy_Policy_Type.TYPE_UNSPECIFIED:
      return "TYPE_UNSPECIFIED";
    case OnlineReturnPolicy_Policy_Type.NUMBER_OF_DAYS_AFTER_DELIVERY:
      return "NUMBER_OF_DAYS_AFTER_DELIVERY";
    case OnlineReturnPolicy_Policy_Type.NO_RETURNS:
      return "NO_RETURNS";
    case OnlineReturnPolicy_Policy_Type.LIFETIME_RETURNS:
      return "LIFETIME_RETURNS";
    case OnlineReturnPolicy_Policy_Type.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseGetOnlineReturnPolicyRequest(): GetOnlineReturnPolicyRequest {
  return { name: "" };
}

export const GetOnlineReturnPolicyRequest: MessageFns<GetOnlineReturnPolicyRequest> = {
  encode(message: GetOnlineReturnPolicyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetOnlineReturnPolicyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetOnlineReturnPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetOnlineReturnPolicyRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetOnlineReturnPolicyRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetOnlineReturnPolicyRequest>): GetOnlineReturnPolicyRequest {
    return GetOnlineReturnPolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetOnlineReturnPolicyRequest>): GetOnlineReturnPolicyRequest {
    const message = createBaseGetOnlineReturnPolicyRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListOnlineReturnPoliciesRequest(): ListOnlineReturnPoliciesRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListOnlineReturnPoliciesRequest: MessageFns<ListOnlineReturnPoliciesRequest> = {
  encode(message: ListOnlineReturnPoliciesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListOnlineReturnPoliciesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListOnlineReturnPoliciesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListOnlineReturnPoliciesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListOnlineReturnPoliciesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListOnlineReturnPoliciesRequest>): ListOnlineReturnPoliciesRequest {
    return ListOnlineReturnPoliciesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListOnlineReturnPoliciesRequest>): ListOnlineReturnPoliciesRequest {
    const message = createBaseListOnlineReturnPoliciesRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListOnlineReturnPoliciesResponse(): ListOnlineReturnPoliciesResponse {
  return { onlineReturnPolicies: [], nextPageToken: "" };
}

export const ListOnlineReturnPoliciesResponse: MessageFns<ListOnlineReturnPoliciesResponse> = {
  encode(message: ListOnlineReturnPoliciesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.onlineReturnPolicies) {
      OnlineReturnPolicy.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListOnlineReturnPoliciesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListOnlineReturnPoliciesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.onlineReturnPolicies.push(OnlineReturnPolicy.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListOnlineReturnPoliciesResponse {
    return {
      onlineReturnPolicies: globalThis.Array.isArray(object?.onlineReturnPolicies)
        ? object.onlineReturnPolicies.map((e: any) => OnlineReturnPolicy.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListOnlineReturnPoliciesResponse): unknown {
    const obj: any = {};
    if (message.onlineReturnPolicies?.length) {
      obj.onlineReturnPolicies = message.onlineReturnPolicies.map((e) => OnlineReturnPolicy.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListOnlineReturnPoliciesResponse>): ListOnlineReturnPoliciesResponse {
    return ListOnlineReturnPoliciesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListOnlineReturnPoliciesResponse>): ListOnlineReturnPoliciesResponse {
    const message = createBaseListOnlineReturnPoliciesResponse();
    message.onlineReturnPolicies = object.onlineReturnPolicies?.map((e) => OnlineReturnPolicy.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseOnlineReturnPolicy(): OnlineReturnPolicy {
  return {
    name: "",
    returnPolicyId: "",
    label: "",
    countries: [],
    policy: undefined,
    restockingFee: undefined,
    returnMethods: [],
    itemConditions: [],
    returnShippingFee: undefined,
    returnPolicyUri: "",
    acceptDefectiveOnly: undefined,
    processRefundDays: undefined,
    acceptExchange: undefined,
  };
}

export const OnlineReturnPolicy: MessageFns<OnlineReturnPolicy> = {
  encode(message: OnlineReturnPolicy, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.returnPolicyId !== "") {
      writer.uint32(18).string(message.returnPolicyId);
    }
    if (message.label !== "") {
      writer.uint32(26).string(message.label);
    }
    for (const v of message.countries) {
      writer.uint32(34).string(v!);
    }
    if (message.policy !== undefined) {
      OnlineReturnPolicy_Policy.encode(message.policy, writer.uint32(42).fork()).join();
    }
    if (message.restockingFee !== undefined) {
      OnlineReturnPolicy_RestockingFee.encode(message.restockingFee, writer.uint32(50).fork()).join();
    }
    writer.uint32(58).fork();
    for (const v of message.returnMethods) {
      writer.int32(v);
    }
    writer.join();
    writer.uint32(66).fork();
    for (const v of message.itemConditions) {
      writer.int32(v);
    }
    writer.join();
    if (message.returnShippingFee !== undefined) {
      OnlineReturnPolicy_ReturnShippingFee.encode(message.returnShippingFee, writer.uint32(74).fork()).join();
    }
    if (message.returnPolicyUri !== "") {
      writer.uint32(82).string(message.returnPolicyUri);
    }
    if (message.acceptDefectiveOnly !== undefined) {
      writer.uint32(88).bool(message.acceptDefectiveOnly);
    }
    if (message.processRefundDays !== undefined) {
      writer.uint32(96).int32(message.processRefundDays);
    }
    if (message.acceptExchange !== undefined) {
      writer.uint32(104).bool(message.acceptExchange);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OnlineReturnPolicy {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOnlineReturnPolicy();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.returnPolicyId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.label = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.countries.push(reader.string());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.policy = OnlineReturnPolicy_Policy.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.restockingFee = OnlineReturnPolicy_RestockingFee.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag === 56) {
            message.returnMethods.push(reader.int32() as any);

            continue;
          }

          if (tag === 58) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.returnMethods.push(reader.int32() as any);
            }

            continue;
          }

          break;
        case 8:
          if (tag === 64) {
            message.itemConditions.push(reader.int32() as any);

            continue;
          }

          if (tag === 66) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.itemConditions.push(reader.int32() as any);
            }

            continue;
          }

          break;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.returnShippingFee = OnlineReturnPolicy_ReturnShippingFee.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.returnPolicyUri = reader.string();
          continue;
        case 11:
          if (tag !== 88) {
            break;
          }

          message.acceptDefectiveOnly = reader.bool();
          continue;
        case 12:
          if (tag !== 96) {
            break;
          }

          message.processRefundDays = reader.int32();
          continue;
        case 13:
          if (tag !== 104) {
            break;
          }

          message.acceptExchange = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OnlineReturnPolicy {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      returnPolicyId: isSet(object.returnPolicyId) ? globalThis.String(object.returnPolicyId) : "",
      label: isSet(object.label) ? globalThis.String(object.label) : "",
      countries: globalThis.Array.isArray(object?.countries)
        ? object.countries.map((e: any) => globalThis.String(e))
        : [],
      policy: isSet(object.policy) ? OnlineReturnPolicy_Policy.fromJSON(object.policy) : undefined,
      restockingFee: isSet(object.restockingFee)
        ? OnlineReturnPolicy_RestockingFee.fromJSON(object.restockingFee)
        : undefined,
      returnMethods: globalThis.Array.isArray(object?.returnMethods)
        ? object.returnMethods.map((e: any) => onlineReturnPolicy_ReturnMethodFromJSON(e))
        : [],
      itemConditions: globalThis.Array.isArray(object?.itemConditions)
        ? object.itemConditions.map((e: any) => onlineReturnPolicy_ItemConditionFromJSON(e))
        : [],
      returnShippingFee: isSet(object.returnShippingFee)
        ? OnlineReturnPolicy_ReturnShippingFee.fromJSON(object.returnShippingFee)
        : undefined,
      returnPolicyUri: isSet(object.returnPolicyUri) ? globalThis.String(object.returnPolicyUri) : "",
      acceptDefectiveOnly: isSet(object.acceptDefectiveOnly)
        ? globalThis.Boolean(object.acceptDefectiveOnly)
        : undefined,
      processRefundDays: isSet(object.processRefundDays) ? globalThis.Number(object.processRefundDays) : undefined,
      acceptExchange: isSet(object.acceptExchange) ? globalThis.Boolean(object.acceptExchange) : undefined,
    };
  },

  toJSON(message: OnlineReturnPolicy): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.returnPolicyId !== "") {
      obj.returnPolicyId = message.returnPolicyId;
    }
    if (message.label !== "") {
      obj.label = message.label;
    }
    if (message.countries?.length) {
      obj.countries = message.countries;
    }
    if (message.policy !== undefined) {
      obj.policy = OnlineReturnPolicy_Policy.toJSON(message.policy);
    }
    if (message.restockingFee !== undefined) {
      obj.restockingFee = OnlineReturnPolicy_RestockingFee.toJSON(message.restockingFee);
    }
    if (message.returnMethods?.length) {
      obj.returnMethods = message.returnMethods.map((e) => onlineReturnPolicy_ReturnMethodToJSON(e));
    }
    if (message.itemConditions?.length) {
      obj.itemConditions = message.itemConditions.map((e) => onlineReturnPolicy_ItemConditionToJSON(e));
    }
    if (message.returnShippingFee !== undefined) {
      obj.returnShippingFee = OnlineReturnPolicy_ReturnShippingFee.toJSON(message.returnShippingFee);
    }
    if (message.returnPolicyUri !== "") {
      obj.returnPolicyUri = message.returnPolicyUri;
    }
    if (message.acceptDefectiveOnly !== undefined) {
      obj.acceptDefectiveOnly = message.acceptDefectiveOnly;
    }
    if (message.processRefundDays !== undefined) {
      obj.processRefundDays = Math.round(message.processRefundDays);
    }
    if (message.acceptExchange !== undefined) {
      obj.acceptExchange = message.acceptExchange;
    }
    return obj;
  },

  create(base?: DeepPartial<OnlineReturnPolicy>): OnlineReturnPolicy {
    return OnlineReturnPolicy.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<OnlineReturnPolicy>): OnlineReturnPolicy {
    const message = createBaseOnlineReturnPolicy();
    message.name = object.name ?? "";
    message.returnPolicyId = object.returnPolicyId ?? "";
    message.label = object.label ?? "";
    message.countries = object.countries?.map((e) => e) || [];
    message.policy = (object.policy !== undefined && object.policy !== null)
      ? OnlineReturnPolicy_Policy.fromPartial(object.policy)
      : undefined;
    message.restockingFee = (object.restockingFee !== undefined && object.restockingFee !== null)
      ? OnlineReturnPolicy_RestockingFee.fromPartial(object.restockingFee)
      : undefined;
    message.returnMethods = object.returnMethods?.map((e) => e) || [];
    message.itemConditions = object.itemConditions?.map((e) => e) || [];
    message.returnShippingFee = (object.returnShippingFee !== undefined && object.returnShippingFee !== null)
      ? OnlineReturnPolicy_ReturnShippingFee.fromPartial(object.returnShippingFee)
      : undefined;
    message.returnPolicyUri = object.returnPolicyUri ?? "";
    message.acceptDefectiveOnly = object.acceptDefectiveOnly ?? undefined;
    message.processRefundDays = object.processRefundDays ?? undefined;
    message.acceptExchange = object.acceptExchange ?? undefined;
    return message;
  },
};

function createBaseOnlineReturnPolicy_ReturnShippingFee(): OnlineReturnPolicy_ReturnShippingFee {
  return { type: 0, fixedFee: undefined };
}

export const OnlineReturnPolicy_ReturnShippingFee: MessageFns<OnlineReturnPolicy_ReturnShippingFee> = {
  encode(message: OnlineReturnPolicy_ReturnShippingFee, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    if (message.fixedFee !== undefined) {
      Price.encode(message.fixedFee, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OnlineReturnPolicy_ReturnShippingFee {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOnlineReturnPolicy_ReturnShippingFee();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.fixedFee = Price.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OnlineReturnPolicy_ReturnShippingFee {
    return {
      type: isSet(object.type) ? onlineReturnPolicy_ReturnShippingFee_TypeFromJSON(object.type) : 0,
      fixedFee: isSet(object.fixedFee) ? Price.fromJSON(object.fixedFee) : undefined,
    };
  },

  toJSON(message: OnlineReturnPolicy_ReturnShippingFee): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = onlineReturnPolicy_ReturnShippingFee_TypeToJSON(message.type);
    }
    if (message.fixedFee !== undefined) {
      obj.fixedFee = Price.toJSON(message.fixedFee);
    }
    return obj;
  },

  create(base?: DeepPartial<OnlineReturnPolicy_ReturnShippingFee>): OnlineReturnPolicy_ReturnShippingFee {
    return OnlineReturnPolicy_ReturnShippingFee.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<OnlineReturnPolicy_ReturnShippingFee>): OnlineReturnPolicy_ReturnShippingFee {
    const message = createBaseOnlineReturnPolicy_ReturnShippingFee();
    message.type = object.type ?? 0;
    message.fixedFee = (object.fixedFee !== undefined && object.fixedFee !== null)
      ? Price.fromPartial(object.fixedFee)
      : undefined;
    return message;
  },
};

function createBaseOnlineReturnPolicy_RestockingFee(): OnlineReturnPolicy_RestockingFee {
  return { fixedFee: undefined, microPercent: undefined };
}

export const OnlineReturnPolicy_RestockingFee: MessageFns<OnlineReturnPolicy_RestockingFee> = {
  encode(message: OnlineReturnPolicy_RestockingFee, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.fixedFee !== undefined) {
      Price.encode(message.fixedFee, writer.uint32(10).fork()).join();
    }
    if (message.microPercent !== undefined) {
      writer.uint32(16).int32(message.microPercent);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OnlineReturnPolicy_RestockingFee {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOnlineReturnPolicy_RestockingFee();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.fixedFee = Price.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.microPercent = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OnlineReturnPolicy_RestockingFee {
    return {
      fixedFee: isSet(object.fixedFee) ? Price.fromJSON(object.fixedFee) : undefined,
      microPercent: isSet(object.microPercent) ? globalThis.Number(object.microPercent) : undefined,
    };
  },

  toJSON(message: OnlineReturnPolicy_RestockingFee): unknown {
    const obj: any = {};
    if (message.fixedFee !== undefined) {
      obj.fixedFee = Price.toJSON(message.fixedFee);
    }
    if (message.microPercent !== undefined) {
      obj.microPercent = Math.round(message.microPercent);
    }
    return obj;
  },

  create(base?: DeepPartial<OnlineReturnPolicy_RestockingFee>): OnlineReturnPolicy_RestockingFee {
    return OnlineReturnPolicy_RestockingFee.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<OnlineReturnPolicy_RestockingFee>): OnlineReturnPolicy_RestockingFee {
    const message = createBaseOnlineReturnPolicy_RestockingFee();
    message.fixedFee = (object.fixedFee !== undefined && object.fixedFee !== null)
      ? Price.fromPartial(object.fixedFee)
      : undefined;
    message.microPercent = object.microPercent ?? undefined;
    return message;
  },
};

function createBaseOnlineReturnPolicy_Policy(): OnlineReturnPolicy_Policy {
  return { type: 0, days: Long.ZERO };
}

export const OnlineReturnPolicy_Policy: MessageFns<OnlineReturnPolicy_Policy> = {
  encode(message: OnlineReturnPolicy_Policy, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    if (!message.days.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.days.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OnlineReturnPolicy_Policy {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOnlineReturnPolicy_Policy();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.days = Long.fromString(reader.int64().toString());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OnlineReturnPolicy_Policy {
    return {
      type: isSet(object.type) ? onlineReturnPolicy_Policy_TypeFromJSON(object.type) : 0,
      days: isSet(object.days) ? Long.fromValue(object.days) : Long.ZERO,
    };
  },

  toJSON(message: OnlineReturnPolicy_Policy): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = onlineReturnPolicy_Policy_TypeToJSON(message.type);
    }
    if (!message.days.equals(Long.ZERO)) {
      obj.days = (message.days || Long.ZERO).toString();
    }
    return obj;
  },

  create(base?: DeepPartial<OnlineReturnPolicy_Policy>): OnlineReturnPolicy_Policy {
    return OnlineReturnPolicy_Policy.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<OnlineReturnPolicy_Policy>): OnlineReturnPolicy_Policy {
    const message = createBaseOnlineReturnPolicy_Policy();
    message.type = object.type ?? 0;
    message.days = (object.days !== undefined && object.days !== null) ? Long.fromValue(object.days) : Long.ZERO;
    return message;
  },
};

/**
 * The service facilitates the management of a merchant's remorse return policy
 * configuration, encompassing return policies for both ads and free listings
 * ## programs. This API defines the following resource model:
 *
 * [OnlineReturnPolicy][google.shopping.merchant.accounts.v1.OnlineReturnPolicy]
 */
export type OnlineReturnPolicyServiceDefinition = typeof OnlineReturnPolicyServiceDefinition;
export const OnlineReturnPolicyServiceDefinition = {
  name: "OnlineReturnPolicyService",
  fullName: "google.shopping.merchant.accounts.v1beta.OnlineReturnPolicyService",
  methods: {
    /** Gets an existing return policy. */
    getOnlineReturnPolicy: {
      name: "GetOnlineReturnPolicy",
      requestType: GetOnlineReturnPolicyRequest,
      requestStream: false,
      responseType: OnlineReturnPolicy,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              59,
              18,
              57,
              47,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              47,
              111,
              110,
              108,
              105,
              110,
              101,
              82,
              101,
              116,
              117,
              114,
              110,
              80,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists all existing return policies. */
    listOnlineReturnPolicies: {
      name: "ListOnlineReturnPolicies",
      requestType: ListOnlineReturnPoliciesRequest,
      requestStream: false,
      responseType: ListOnlineReturnPoliciesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              59,
              18,
              57,
              47,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              125,
              47,
              111,
              110,
              108,
              105,
              110,
              101,
              82,
              101,
              116,
              117,
              114,
              110,
              80,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface OnlineReturnPolicyServiceImplementation<CallContextExt = {}> {
  /** Gets an existing return policy. */
  getOnlineReturnPolicy(
    request: GetOnlineReturnPolicyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<OnlineReturnPolicy>>;
  /** Lists all existing return policies. */
  listOnlineReturnPolicies(
    request: ListOnlineReturnPoliciesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListOnlineReturnPoliciesResponse>>;
}

export interface OnlineReturnPolicyServiceClient<CallOptionsExt = {}> {
  /** Gets an existing return policy. */
  getOnlineReturnPolicy(
    request: DeepPartial<GetOnlineReturnPolicyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<OnlineReturnPolicy>;
  /** Lists all existing return policies. */
  listOnlineReturnPolicies(
    request: DeepPartial<ListOnlineReturnPoliciesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListOnlineReturnPoliciesResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
