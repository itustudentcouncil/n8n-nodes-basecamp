// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/shopping/merchant/accounts/v1beta/termsofserviceagreementstate.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { DateMessage } from "../../../../type/date.js";
import { TermsOfServiceKind, termsOfServiceKindFromJSON, termsOfServiceKindToJSON } from "./termsofservicekind.js";

export const protobufPackage = "google.shopping.merchant.accounts.v1beta";

/**
 * This resource represents the agreement state for a given account and terms of
 * service kind.
 * The state is as follows:
 *
 * * If the merchant has accepted a terms of service:
 * [accepted](TermsOfServiceAggrementState.accepted) will be populated,
 * otherwise it will be empty
 * * If the merchant must sign a terms of service:
 * [required](TermsOfServiceAggrementState.required) will be populated,
 * otherwise it will be empty.
 *
 * Note that both [required](TermsOfServiceAggrementState.required) and
 * [accepted](TermsOfServiceAggrementState.accepted) can be present. In this
 * case the `accepted` terms of services will have an expiration date set in the
 * [valid_until](Accepted.valid_until) field. The `required` terms of services
 * need to be accepted before `valid_until` in order for the account to continue
 * having a valid agreement. When accepting new terms of services we expect 3Ps
 * to display the text associated with the given terms of service agreement (the
 * url to the file containing the text is added in the Required message below as
 * [tos_file_uri](Accepted.tos_file_uri). The actual acceptance of the terms of
 * service is done by calling accept on the [TermsOfService](TermsOfService)
 * resource.
 */
export interface TermsOfServiceAgreementState {
  /**
   * Identifier. The resource name of the terms of service version.
   * Format: `accounts/{account}/termsOfServiceAgreementState/{identifier}`
   * The identifier format is: `{TermsOfServiceKind}-{country}`
   * For example, an identifier could be: `MERCHANT_CENTER-US`
   */
  name: string;
  /**
   * Region code as defined by https://cldr.unicode.org/. This is the
   * country the current state applies to.
   */
  regionCode: string;
  /** Terms of Service kind associated with the particular version. */
  termsOfServiceKind: TermsOfServiceKind;
  /**
   * The accepted terms of service of this kind and for the associated
   * region_code
   */
  accepted?:
    | Accepted
    | undefined;
  /** The required terms of service */
  required?: Required | undefined;
}

/** Describes the accepted terms of service. */
export interface Accepted {
  /**
   * The accepted
   * [termsOfService](google.shopping.merchant.accounts.v1main.TermsOfService).
   */
  termsOfService: string;
  /**
   * The account where the acceptance was recorded. This can be the account
   * itself or, in the case of subaccounts, the MCA account.
   */
  acceptedBy: string;
  /**
   * When set, it states that the accepted
   * [TermsOfService](google.shopping.merchant.accounts.v1main.TermsOfService)
   * is only valid until the end of this date (in UTC). A new one must be
   * accepted before then. The information of the required
   * [TermsOfService](google.shopping.merchant.accounts.v1main.TermsOfService)
   * is found in the [Required](Required) message.
   */
  validUntil?: DateMessage | undefined;
}

/** Describes the terms of service which are required to be accepted. */
export interface Required {
  /**
   * The
   * [termsOfService](google.shopping.merchant.accounts.v1main.TermsOfService)
   * that need to be accepted.
   */
  termsOfService: string;
  /**
   * Full URL to the terms of service file. This field is the same as
   * [TermsOfService.file_uri](TermsOfService.file_uri), it is added
   * here for convenience only.
   */
  tosFileUri: string;
}

/** Request message for the `GetTermsOfServiceAgreementState` method. */
export interface GetTermsOfServiceAgreementStateRequest {
  /**
   * Required. The resource name of the terms of service version.
   * Format: `accounts/{account}/termsOfServiceAgreementState/{identifier}`
   * The identifier format is: `{TermsOfServiceKind}-{country}`
   */
  name: string;
}

/**
 * Request message for the `RetrieveForApplicationTermsOfServiceAgreementState`
 * method.
 */
export interface RetrieveForApplicationTermsOfServiceAgreementStateRequest {
  /**
   * Required. The account for which to get a TermsOfServiceAgreementState
   * Format: `accounts/{account}`
   */
  parent: string;
}

function createBaseTermsOfServiceAgreementState(): TermsOfServiceAgreementState {
  return { name: "", regionCode: "", termsOfServiceKind: 0, accepted: undefined, required: undefined };
}

export const TermsOfServiceAgreementState: MessageFns<TermsOfServiceAgreementState> = {
  encode(message: TermsOfServiceAgreementState, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.regionCode !== "") {
      writer.uint32(18).string(message.regionCode);
    }
    if (message.termsOfServiceKind !== 0) {
      writer.uint32(24).int32(message.termsOfServiceKind);
    }
    if (message.accepted !== undefined) {
      Accepted.encode(message.accepted, writer.uint32(34).fork()).join();
    }
    if (message.required !== undefined) {
      Required.encode(message.required, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TermsOfServiceAgreementState {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTermsOfServiceAgreementState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.regionCode = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.termsOfServiceKind = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.accepted = Accepted.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.required = Required.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TermsOfServiceAgreementState {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      regionCode: isSet(object.regionCode) ? globalThis.String(object.regionCode) : "",
      termsOfServiceKind: isSet(object.termsOfServiceKind) ? termsOfServiceKindFromJSON(object.termsOfServiceKind) : 0,
      accepted: isSet(object.accepted) ? Accepted.fromJSON(object.accepted) : undefined,
      required: isSet(object.required) ? Required.fromJSON(object.required) : undefined,
    };
  },

  toJSON(message: TermsOfServiceAgreementState): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.regionCode !== "") {
      obj.regionCode = message.regionCode;
    }
    if (message.termsOfServiceKind !== 0) {
      obj.termsOfServiceKind = termsOfServiceKindToJSON(message.termsOfServiceKind);
    }
    if (message.accepted !== undefined) {
      obj.accepted = Accepted.toJSON(message.accepted);
    }
    if (message.required !== undefined) {
      obj.required = Required.toJSON(message.required);
    }
    return obj;
  },

  create(base?: DeepPartial<TermsOfServiceAgreementState>): TermsOfServiceAgreementState {
    return TermsOfServiceAgreementState.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TermsOfServiceAgreementState>): TermsOfServiceAgreementState {
    const message = createBaseTermsOfServiceAgreementState();
    message.name = object.name ?? "";
    message.regionCode = object.regionCode ?? "";
    message.termsOfServiceKind = object.termsOfServiceKind ?? 0;
    message.accepted = (object.accepted !== undefined && object.accepted !== null)
      ? Accepted.fromPartial(object.accepted)
      : undefined;
    message.required = (object.required !== undefined && object.required !== null)
      ? Required.fromPartial(object.required)
      : undefined;
    return message;
  },
};

function createBaseAccepted(): Accepted {
  return { termsOfService: "", acceptedBy: "", validUntil: undefined };
}

export const Accepted: MessageFns<Accepted> = {
  encode(message: Accepted, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.termsOfService !== "") {
      writer.uint32(10).string(message.termsOfService);
    }
    if (message.acceptedBy !== "") {
      writer.uint32(18).string(message.acceptedBy);
    }
    if (message.validUntil !== undefined) {
      DateMessage.encode(message.validUntil, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Accepted {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAccepted();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.termsOfService = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.acceptedBy = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.validUntil = DateMessage.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Accepted {
    return {
      termsOfService: isSet(object.termsOfService) ? globalThis.String(object.termsOfService) : "",
      acceptedBy: isSet(object.acceptedBy) ? globalThis.String(object.acceptedBy) : "",
      validUntil: isSet(object.validUntil) ? DateMessage.fromJSON(object.validUntil) : undefined,
    };
  },

  toJSON(message: Accepted): unknown {
    const obj: any = {};
    if (message.termsOfService !== "") {
      obj.termsOfService = message.termsOfService;
    }
    if (message.acceptedBy !== "") {
      obj.acceptedBy = message.acceptedBy;
    }
    if (message.validUntil !== undefined) {
      obj.validUntil = DateMessage.toJSON(message.validUntil);
    }
    return obj;
  },

  create(base?: DeepPartial<Accepted>): Accepted {
    return Accepted.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Accepted>): Accepted {
    const message = createBaseAccepted();
    message.termsOfService = object.termsOfService ?? "";
    message.acceptedBy = object.acceptedBy ?? "";
    message.validUntil = (object.validUntil !== undefined && object.validUntil !== null)
      ? DateMessage.fromPartial(object.validUntil)
      : undefined;
    return message;
  },
};

function createBaseRequired(): Required {
  return { termsOfService: "", tosFileUri: "" };
}

export const Required: MessageFns<Required> = {
  encode(message: Required, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.termsOfService !== "") {
      writer.uint32(10).string(message.termsOfService);
    }
    if (message.tosFileUri !== "") {
      writer.uint32(18).string(message.tosFileUri);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Required {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRequired();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.termsOfService = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.tosFileUri = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Required {
    return {
      termsOfService: isSet(object.termsOfService) ? globalThis.String(object.termsOfService) : "",
      tosFileUri: isSet(object.tosFileUri) ? globalThis.String(object.tosFileUri) : "",
    };
  },

  toJSON(message: Required): unknown {
    const obj: any = {};
    if (message.termsOfService !== "") {
      obj.termsOfService = message.termsOfService;
    }
    if (message.tosFileUri !== "") {
      obj.tosFileUri = message.tosFileUri;
    }
    return obj;
  },

  create(base?: DeepPartial<Required>): Required {
    return Required.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Required>): Required {
    const message = createBaseRequired();
    message.termsOfService = object.termsOfService ?? "";
    message.tosFileUri = object.tosFileUri ?? "";
    return message;
  },
};

function createBaseGetTermsOfServiceAgreementStateRequest(): GetTermsOfServiceAgreementStateRequest {
  return { name: "" };
}

export const GetTermsOfServiceAgreementStateRequest: MessageFns<GetTermsOfServiceAgreementStateRequest> = {
  encode(message: GetTermsOfServiceAgreementStateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetTermsOfServiceAgreementStateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetTermsOfServiceAgreementStateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetTermsOfServiceAgreementStateRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetTermsOfServiceAgreementStateRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetTermsOfServiceAgreementStateRequest>): GetTermsOfServiceAgreementStateRequest {
    return GetTermsOfServiceAgreementStateRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetTermsOfServiceAgreementStateRequest>): GetTermsOfServiceAgreementStateRequest {
    const message = createBaseGetTermsOfServiceAgreementStateRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseRetrieveForApplicationTermsOfServiceAgreementStateRequest(): RetrieveForApplicationTermsOfServiceAgreementStateRequest {
  return { parent: "" };
}

export const RetrieveForApplicationTermsOfServiceAgreementStateRequest: MessageFns<
  RetrieveForApplicationTermsOfServiceAgreementStateRequest
> = {
  encode(
    message: RetrieveForApplicationTermsOfServiceAgreementStateRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RetrieveForApplicationTermsOfServiceAgreementStateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRetrieveForApplicationTermsOfServiceAgreementStateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RetrieveForApplicationTermsOfServiceAgreementStateRequest {
    return { parent: isSet(object.parent) ? globalThis.String(object.parent) : "" };
  },

  toJSON(message: RetrieveForApplicationTermsOfServiceAgreementStateRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    return obj;
  },

  create(
    base?: DeepPartial<RetrieveForApplicationTermsOfServiceAgreementStateRequest>,
  ): RetrieveForApplicationTermsOfServiceAgreementStateRequest {
    return RetrieveForApplicationTermsOfServiceAgreementStateRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<RetrieveForApplicationTermsOfServiceAgreementStateRequest>,
  ): RetrieveForApplicationTermsOfServiceAgreementStateRequest {
    const message = createBaseRetrieveForApplicationTermsOfServiceAgreementStateRequest();
    message.parent = object.parent ?? "";
    return message;
  },
};

/** Service to support `TermsOfServiceAgreementState` API. */
export type TermsOfServiceAgreementStateServiceDefinition = typeof TermsOfServiceAgreementStateServiceDefinition;
export const TermsOfServiceAgreementStateServiceDefinition = {
  name: "TermsOfServiceAgreementStateService",
  fullName: "google.shopping.merchant.accounts.v1beta.TermsOfServiceAgreementStateService",
  methods: {
    /** Returns the state of a terms of service agreement. */
    getTermsOfServiceAgreementState: {
      name: "GetTermsOfServiceAgreementState",
      requestType: GetTermsOfServiceAgreementStateRequest,
      requestStream: false,
      responseType: TermsOfServiceAgreementState,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              68,
              18,
              66,
              47,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              47,
              116,
              101,
              114,
              109,
              115,
              79,
              102,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              65,
              103,
              114,
              101,
              101,
              109,
              101,
              110,
              116,
              83,
              116,
              97,
              116,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Retrieves the state of the agreement for the application terms of service. */
    retrieveForApplicationTermsOfServiceAgreementState: {
      name: "RetrieveForApplicationTermsOfServiceAgreementState",
      requestType: RetrieveForApplicationTermsOfServiceAgreementStateRequest,
      requestStream: false,
      responseType: TermsOfServiceAgreementState,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              91,
              18,
              89,
              47,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              125,
              47,
              116,
              101,
              114,
              109,
              115,
              79,
              102,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              65,
              103,
              114,
              101,
              101,
              109,
              101,
              110,
              116,
              83,
              116,
              97,
              116,
              101,
              115,
              58,
              114,
              101,
              116,
              114,
              105,
              101,
              118,
              101,
              70,
              111,
              114,
              65,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface TermsOfServiceAgreementStateServiceImplementation<CallContextExt = {}> {
  /** Returns the state of a terms of service agreement. */
  getTermsOfServiceAgreementState(
    request: GetTermsOfServiceAgreementStateRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<TermsOfServiceAgreementState>>;
  /** Retrieves the state of the agreement for the application terms of service. */
  retrieveForApplicationTermsOfServiceAgreementState(
    request: RetrieveForApplicationTermsOfServiceAgreementStateRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<TermsOfServiceAgreementState>>;
}

export interface TermsOfServiceAgreementStateServiceClient<CallOptionsExt = {}> {
  /** Returns the state of a terms of service agreement. */
  getTermsOfServiceAgreementState(
    request: DeepPartial<GetTermsOfServiceAgreementStateRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<TermsOfServiceAgreementState>;
  /** Retrieves the state of the agreement for the application terms of service. */
  retrieveForApplicationTermsOfServiceAgreementState(
    request: DeepPartial<RetrieveForApplicationTermsOfServiceAgreementStateRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<TermsOfServiceAgreementState>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
