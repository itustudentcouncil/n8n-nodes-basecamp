// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/shopping/merchant/accounts/v1beta/businessinfo.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { FieldMask } from "../../../../protobuf/field_mask.js";
import { PhoneNumber } from "../../../../type/phone_number.js";
import { PostalAddress } from "../../../../type/postal_address.js";
import { CustomerService } from "./customerservice.js";
import {
  PhoneVerificationState,
  phoneVerificationStateFromJSON,
  phoneVerificationStateToJSON,
} from "./phoneverificationstate.js";

export const protobufPackage = "google.shopping.merchant.accounts.v1beta";

/** Collection of information related to a business. */
export interface BusinessInfo {
  /**
   * Identifier. The resource name of the business info.
   * Format: `accounts/{account}/businessInfo`
   */
  name: string;
  /** Optional. The address of the business. */
  address?:
    | PostalAddress
    | undefined;
  /** Output only. The phone number of the business. */
  phone?:
    | PhoneNumber
    | undefined;
  /** Output only. The phone verification state of the business. */
  phoneVerificationState?:
    | PhoneVerificationState
    | undefined;
  /** Optional. The customer service of the business. */
  customerService?:
    | CustomerService
    | undefined;
  /**
   * Optional. The 10-digit [Korean business registration
   * number](https://support.google.com/merchants/answer/9037766) separated with
   * dashes in the format: XXX-XX-XXXXX.
   */
  koreanBusinessRegistrationNumber?: string | undefined;
}

/** Request message for the `GetBusinessInfo` method. */
export interface GetBusinessInfoRequest {
  /**
   * Required. The resource name of the business info.
   * Format: `accounts/{account}/businessInfo`
   */
  name: string;
}

/** Request message for the `UpdateBusinessInfo` method. */
export interface UpdateBusinessInfoRequest {
  /** Required. The new version of the business info. */
  businessInfo:
    | BusinessInfo
    | undefined;
  /** Required. List of fields being updated. */
  updateMask: string[] | undefined;
}

function createBaseBusinessInfo(): BusinessInfo {
  return {
    name: "",
    address: undefined,
    phone: undefined,
    phoneVerificationState: undefined,
    customerService: undefined,
    koreanBusinessRegistrationNumber: undefined,
  };
}

export const BusinessInfo: MessageFns<BusinessInfo> = {
  encode(message: BusinessInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.address !== undefined) {
      PostalAddress.encode(message.address, writer.uint32(18).fork()).join();
    }
    if (message.phone !== undefined) {
      PhoneNumber.encode(message.phone, writer.uint32(26).fork()).join();
    }
    if (message.phoneVerificationState !== undefined) {
      writer.uint32(32).int32(message.phoneVerificationState);
    }
    if (message.customerService !== undefined) {
      CustomerService.encode(message.customerService, writer.uint32(42).fork()).join();
    }
    if (message.koreanBusinessRegistrationNumber !== undefined) {
      writer.uint32(50).string(message.koreanBusinessRegistrationNumber);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BusinessInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBusinessInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.address = PostalAddress.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.phone = PhoneNumber.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.phoneVerificationState = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.customerService = CustomerService.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.koreanBusinessRegistrationNumber = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BusinessInfo {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      address: isSet(object.address) ? PostalAddress.fromJSON(object.address) : undefined,
      phone: isSet(object.phone) ? PhoneNumber.fromJSON(object.phone) : undefined,
      phoneVerificationState: isSet(object.phoneVerificationState)
        ? phoneVerificationStateFromJSON(object.phoneVerificationState)
        : undefined,
      customerService: isSet(object.customerService) ? CustomerService.fromJSON(object.customerService) : undefined,
      koreanBusinessRegistrationNumber: isSet(object.koreanBusinessRegistrationNumber)
        ? globalThis.String(object.koreanBusinessRegistrationNumber)
        : undefined,
    };
  },

  toJSON(message: BusinessInfo): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.address !== undefined) {
      obj.address = PostalAddress.toJSON(message.address);
    }
    if (message.phone !== undefined) {
      obj.phone = PhoneNumber.toJSON(message.phone);
    }
    if (message.phoneVerificationState !== undefined) {
      obj.phoneVerificationState = phoneVerificationStateToJSON(message.phoneVerificationState);
    }
    if (message.customerService !== undefined) {
      obj.customerService = CustomerService.toJSON(message.customerService);
    }
    if (message.koreanBusinessRegistrationNumber !== undefined) {
      obj.koreanBusinessRegistrationNumber = message.koreanBusinessRegistrationNumber;
    }
    return obj;
  },

  create(base?: DeepPartial<BusinessInfo>): BusinessInfo {
    return BusinessInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BusinessInfo>): BusinessInfo {
    const message = createBaseBusinessInfo();
    message.name = object.name ?? "";
    message.address = (object.address !== undefined && object.address !== null)
      ? PostalAddress.fromPartial(object.address)
      : undefined;
    message.phone = (object.phone !== undefined && object.phone !== null)
      ? PhoneNumber.fromPartial(object.phone)
      : undefined;
    message.phoneVerificationState = object.phoneVerificationState ?? undefined;
    message.customerService = (object.customerService !== undefined && object.customerService !== null)
      ? CustomerService.fromPartial(object.customerService)
      : undefined;
    message.koreanBusinessRegistrationNumber = object.koreanBusinessRegistrationNumber ?? undefined;
    return message;
  },
};

function createBaseGetBusinessInfoRequest(): GetBusinessInfoRequest {
  return { name: "" };
}

export const GetBusinessInfoRequest: MessageFns<GetBusinessInfoRequest> = {
  encode(message: GetBusinessInfoRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetBusinessInfoRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetBusinessInfoRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetBusinessInfoRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetBusinessInfoRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetBusinessInfoRequest>): GetBusinessInfoRequest {
    return GetBusinessInfoRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetBusinessInfoRequest>): GetBusinessInfoRequest {
    const message = createBaseGetBusinessInfoRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpdateBusinessInfoRequest(): UpdateBusinessInfoRequest {
  return { businessInfo: undefined, updateMask: undefined };
}

export const UpdateBusinessInfoRequest: MessageFns<UpdateBusinessInfoRequest> = {
  encode(message: UpdateBusinessInfoRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.businessInfo !== undefined) {
      BusinessInfo.encode(message.businessInfo, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateBusinessInfoRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateBusinessInfoRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.businessInfo = BusinessInfo.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateBusinessInfoRequest {
    return {
      businessInfo: isSet(object.businessInfo) ? BusinessInfo.fromJSON(object.businessInfo) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateBusinessInfoRequest): unknown {
    const obj: any = {};
    if (message.businessInfo !== undefined) {
      obj.businessInfo = BusinessInfo.toJSON(message.businessInfo);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateBusinessInfoRequest>): UpdateBusinessInfoRequest {
    return UpdateBusinessInfoRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateBusinessInfoRequest>): UpdateBusinessInfoRequest {
    const message = createBaseUpdateBusinessInfoRequest();
    message.businessInfo = (object.businessInfo !== undefined && object.businessInfo !== null)
      ? BusinessInfo.fromPartial(object.businessInfo)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

/** Service to support business info API. */
export type BusinessInfoServiceDefinition = typeof BusinessInfoServiceDefinition;
export const BusinessInfoServiceDefinition = {
  name: "BusinessInfoService",
  fullName: "google.shopping.merchant.accounts.v1beta.BusinessInfoService",
  methods: {
    /** Retrieves the business info of an account. */
    getBusinessInfo: {
      name: "GetBusinessInfo",
      requestType: GetBusinessInfoRequest,
      requestStream: false,
      responseType: BusinessInfo,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              49,
              18,
              47,
              47,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              47,
              98,
              117,
              115,
              105,
              110,
              101,
              115,
              115,
              73,
              110,
              102,
              111,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Updates the business info of an account. Executing this method requires
     * admin access.
     */
    updateBusinessInfo: {
      name: "UpdateBusinessInfo",
      requestType: UpdateBusinessInfoRequest,
      requestStream: false,
      responseType: BusinessInfo,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              25,
              98,
              117,
              115,
              105,
              110,
              101,
              115,
              115,
              95,
              105,
              110,
              102,
              111,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              78,
              58,
              13,
              98,
              117,
              115,
              105,
              110,
              101,
              115,
              115,
              95,
              105,
              110,
              102,
              111,
              50,
              61,
              47,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              98,
              117,
              115,
              105,
              110,
              101,
              115,
              115,
              95,
              105,
              110,
              102,
              111,
              46,
              110,
              97,
              109,
              101,
              61,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              47,
              98,
              117,
              115,
              105,
              110,
              101,
              115,
              115,
              73,
              110,
              102,
              111,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface BusinessInfoServiceImplementation<CallContextExt = {}> {
  /** Retrieves the business info of an account. */
  getBusinessInfo(
    request: GetBusinessInfoRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<BusinessInfo>>;
  /**
   * Updates the business info of an account. Executing this method requires
   * admin access.
   */
  updateBusinessInfo(
    request: UpdateBusinessInfoRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<BusinessInfo>>;
}

export interface BusinessInfoServiceClient<CallOptionsExt = {}> {
  /** Retrieves the business info of an account. */
  getBusinessInfo(
    request: DeepPartial<GetBusinessInfoRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<BusinessInfo>;
  /**
   * Updates the business info of an account. Executing this method requires
   * admin access.
   */
  updateBusinessInfo(
    request: DeepPartial<UpdateBusinessInfoRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<BusinessInfo>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
