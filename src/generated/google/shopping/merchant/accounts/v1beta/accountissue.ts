// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/shopping/merchant/accounts/v1beta/accountissue.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import {
  ReportingContext_ReportingContextEnum,
  reportingContext_ReportingContextEnumFromJSON,
  reportingContext_ReportingContextEnumToJSON,
} from "../../../type/types.js";

export const protobufPackage = "google.shopping.merchant.accounts.v1beta";

/**
 * An
 * [`AccountIssue`](https://support.google.com/merchants/answer/12153802?sjid=17798438912526418908-EU#account).
 */
export interface AccountIssue {
  /**
   * Identifier. The resource name of the account issue.
   * Format: `accounts/{account}/issues/{id}`
   */
  name: string;
  /** The localized title of the issue. */
  title: string;
  /** The overall severity of the issue. */
  severity: AccountIssue_Severity;
  /** The impact this issue has on various destinations. */
  impactedDestinations: AccountIssue_ImpactedDestination[];
  /** Further localized details about the issue. */
  detail: string;
  /**
   * Link to Merchant Center Help Center providing further information about the
   * issue and how to fix it.
   */
  documentationUri: string;
}

/** All possible issue severities. */
export enum AccountIssue_Severity {
  /** SEVERITY_UNSPECIFIED - The severity is unknown. */
  SEVERITY_UNSPECIFIED = 0,
  /** CRITICAL - The issue causes offers to not serve. */
  CRITICAL = 1,
  /**
   * ERROR - The issue might affect offers (in the future) or might be an
   * indicator of issues with offers.
   */
  ERROR = 2,
  /** SUGGESTION - The issue is a suggestion for improvement. */
  SUGGESTION = 3,
  UNRECOGNIZED = -1,
}

export function accountIssue_SeverityFromJSON(object: any): AccountIssue_Severity {
  switch (object) {
    case 0:
    case "SEVERITY_UNSPECIFIED":
      return AccountIssue_Severity.SEVERITY_UNSPECIFIED;
    case 1:
    case "CRITICAL":
      return AccountIssue_Severity.CRITICAL;
    case 2:
    case "ERROR":
      return AccountIssue_Severity.ERROR;
    case 3:
    case "SUGGESTION":
      return AccountIssue_Severity.SUGGESTION;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AccountIssue_Severity.UNRECOGNIZED;
  }
}

export function accountIssue_SeverityToJSON(object: AccountIssue_Severity): string {
  switch (object) {
    case AccountIssue_Severity.SEVERITY_UNSPECIFIED:
      return "SEVERITY_UNSPECIFIED";
    case AccountIssue_Severity.CRITICAL:
      return "CRITICAL";
    case AccountIssue_Severity.ERROR:
      return "ERROR";
    case AccountIssue_Severity.SUGGESTION:
      return "SUGGESTION";
    case AccountIssue_Severity.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** The impact of the issue on a destination. */
export interface AccountIssue_ImpactedDestination {
  /** The impacted reporting context. */
  reportingContext?:
    | ReportingContext_ReportingContextEnum
    | undefined;
  /** The (negative) impact for various regions on the given destination. */
  impacts: AccountIssue_ImpactedDestination_Impact[];
}

/** The impact of the issue on a region. */
export interface AccountIssue_ImpactedDestination_Impact {
  /**
   * The [CLDR region code](https://cldr.unicode.org/) where this issue
   * applies.
   */
  regionCode: string;
  /** The severity of the issue on the destination and region. */
  severity: AccountIssue_Severity;
}

/** Request message for the `ListAccountIssues` method. */
export interface ListAccountIssuesRequest {
  /**
   * Required. The parent, which owns this collection of issues.
   * Format: `accounts/{account}`
   */
  parent: string;
  /**
   * Optional. The maximum number of issues to return. The service may return
   * fewer than this value. If unspecified, at most 50 users will be returned.
   * The maximum value is 100; values above 100 will be coerced to 100
   */
  pageSize: number;
  /**
   * Optional. A page token, received from a previous `ListAccountIssues` call.
   * Provide this to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to `ListAccountIssues` must
   * match the call that provided the page token.
   */
  pageToken: string;
  /**
   * Optional. The issues in the response will have human-readable fields in the
   * given language. The format is [BCP-47](https://tools.ietf.org/html/bcp47),
   * such as `en-US` or `sr-Latn`. If not value is provided, `en-US` will be
   * used.
   */
  languageCode: string;
  /**
   * Optional. The [IANA](https://www.iana.org/time-zones) timezone used to
   * localize times in human-readable fields. For example 'America/Los_Angeles'.
   * If not set, 'America/Los_Angeles' will be used.
   */
  timeZone: string;
}

/** Response message for the `ListAccountIssues` method. */
export interface ListAccountIssuesResponse {
  /** The issues from the specified account. */
  accountIssues: AccountIssue[];
  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

function createBaseAccountIssue(): AccountIssue {
  return { name: "", title: "", severity: 0, impactedDestinations: [], detail: "", documentationUri: "" };
}

export const AccountIssue: MessageFns<AccountIssue> = {
  encode(message: AccountIssue, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.severity !== 0) {
      writer.uint32(24).int32(message.severity);
    }
    for (const v of message.impactedDestinations) {
      AccountIssue_ImpactedDestination.encode(v!, writer.uint32(34).fork()).join();
    }
    if (message.detail !== "") {
      writer.uint32(42).string(message.detail);
    }
    if (message.documentationUri !== "") {
      writer.uint32(50).string(message.documentationUri);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AccountIssue {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAccountIssue();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.severity = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.impactedDestinations.push(AccountIssue_ImpactedDestination.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.detail = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.documentationUri = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AccountIssue {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      severity: isSet(object.severity) ? accountIssue_SeverityFromJSON(object.severity) : 0,
      impactedDestinations: globalThis.Array.isArray(object?.impactedDestinations)
        ? object.impactedDestinations.map((e: any) => AccountIssue_ImpactedDestination.fromJSON(e))
        : [],
      detail: isSet(object.detail) ? globalThis.String(object.detail) : "",
      documentationUri: isSet(object.documentationUri) ? globalThis.String(object.documentationUri) : "",
    };
  },

  toJSON(message: AccountIssue): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.severity !== 0) {
      obj.severity = accountIssue_SeverityToJSON(message.severity);
    }
    if (message.impactedDestinations?.length) {
      obj.impactedDestinations = message.impactedDestinations.map((e) => AccountIssue_ImpactedDestination.toJSON(e));
    }
    if (message.detail !== "") {
      obj.detail = message.detail;
    }
    if (message.documentationUri !== "") {
      obj.documentationUri = message.documentationUri;
    }
    return obj;
  },

  create(base?: DeepPartial<AccountIssue>): AccountIssue {
    return AccountIssue.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AccountIssue>): AccountIssue {
    const message = createBaseAccountIssue();
    message.name = object.name ?? "";
    message.title = object.title ?? "";
    message.severity = object.severity ?? 0;
    message.impactedDestinations =
      object.impactedDestinations?.map((e) => AccountIssue_ImpactedDestination.fromPartial(e)) || [];
    message.detail = object.detail ?? "";
    message.documentationUri = object.documentationUri ?? "";
    return message;
  },
};

function createBaseAccountIssue_ImpactedDestination(): AccountIssue_ImpactedDestination {
  return { reportingContext: undefined, impacts: [] };
}

export const AccountIssue_ImpactedDestination: MessageFns<AccountIssue_ImpactedDestination> = {
  encode(message: AccountIssue_ImpactedDestination, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.reportingContext !== undefined) {
      writer.uint32(8).int32(message.reportingContext);
    }
    for (const v of message.impacts) {
      AccountIssue_ImpactedDestination_Impact.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AccountIssue_ImpactedDestination {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAccountIssue_ImpactedDestination();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.reportingContext = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.impacts.push(AccountIssue_ImpactedDestination_Impact.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AccountIssue_ImpactedDestination {
    return {
      reportingContext: isSet(object.reportingContext)
        ? reportingContext_ReportingContextEnumFromJSON(object.reportingContext)
        : undefined,
      impacts: globalThis.Array.isArray(object?.impacts)
        ? object.impacts.map((e: any) => AccountIssue_ImpactedDestination_Impact.fromJSON(e))
        : [],
    };
  },

  toJSON(message: AccountIssue_ImpactedDestination): unknown {
    const obj: any = {};
    if (message.reportingContext !== undefined) {
      obj.reportingContext = reportingContext_ReportingContextEnumToJSON(message.reportingContext);
    }
    if (message.impacts?.length) {
      obj.impacts = message.impacts.map((e) => AccountIssue_ImpactedDestination_Impact.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<AccountIssue_ImpactedDestination>): AccountIssue_ImpactedDestination {
    return AccountIssue_ImpactedDestination.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AccountIssue_ImpactedDestination>): AccountIssue_ImpactedDestination {
    const message = createBaseAccountIssue_ImpactedDestination();
    message.reportingContext = object.reportingContext ?? undefined;
    message.impacts = object.impacts?.map((e) => AccountIssue_ImpactedDestination_Impact.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAccountIssue_ImpactedDestination_Impact(): AccountIssue_ImpactedDestination_Impact {
  return { regionCode: "", severity: 0 };
}

export const AccountIssue_ImpactedDestination_Impact: MessageFns<AccountIssue_ImpactedDestination_Impact> = {
  encode(message: AccountIssue_ImpactedDestination_Impact, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.regionCode !== "") {
      writer.uint32(10).string(message.regionCode);
    }
    if (message.severity !== 0) {
      writer.uint32(16).int32(message.severity);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AccountIssue_ImpactedDestination_Impact {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAccountIssue_ImpactedDestination_Impact();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.regionCode = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.severity = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AccountIssue_ImpactedDestination_Impact {
    return {
      regionCode: isSet(object.regionCode) ? globalThis.String(object.regionCode) : "",
      severity: isSet(object.severity) ? accountIssue_SeverityFromJSON(object.severity) : 0,
    };
  },

  toJSON(message: AccountIssue_ImpactedDestination_Impact): unknown {
    const obj: any = {};
    if (message.regionCode !== "") {
      obj.regionCode = message.regionCode;
    }
    if (message.severity !== 0) {
      obj.severity = accountIssue_SeverityToJSON(message.severity);
    }
    return obj;
  },

  create(base?: DeepPartial<AccountIssue_ImpactedDestination_Impact>): AccountIssue_ImpactedDestination_Impact {
    return AccountIssue_ImpactedDestination_Impact.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AccountIssue_ImpactedDestination_Impact>): AccountIssue_ImpactedDestination_Impact {
    const message = createBaseAccountIssue_ImpactedDestination_Impact();
    message.regionCode = object.regionCode ?? "";
    message.severity = object.severity ?? 0;
    return message;
  },
};

function createBaseListAccountIssuesRequest(): ListAccountIssuesRequest {
  return { parent: "", pageSize: 0, pageToken: "", languageCode: "", timeZone: "" };
}

export const ListAccountIssuesRequest: MessageFns<ListAccountIssuesRequest> = {
  encode(message: ListAccountIssuesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.languageCode !== "") {
      writer.uint32(34).string(message.languageCode);
    }
    if (message.timeZone !== "") {
      writer.uint32(42).string(message.timeZone);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAccountIssuesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAccountIssuesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.languageCode = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.timeZone = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAccountIssuesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      languageCode: isSet(object.languageCode) ? globalThis.String(object.languageCode) : "",
      timeZone: isSet(object.timeZone) ? globalThis.String(object.timeZone) : "",
    };
  },

  toJSON(message: ListAccountIssuesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.languageCode !== "") {
      obj.languageCode = message.languageCode;
    }
    if (message.timeZone !== "") {
      obj.timeZone = message.timeZone;
    }
    return obj;
  },

  create(base?: DeepPartial<ListAccountIssuesRequest>): ListAccountIssuesRequest {
    return ListAccountIssuesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAccountIssuesRequest>): ListAccountIssuesRequest {
    const message = createBaseListAccountIssuesRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.languageCode = object.languageCode ?? "";
    message.timeZone = object.timeZone ?? "";
    return message;
  },
};

function createBaseListAccountIssuesResponse(): ListAccountIssuesResponse {
  return { accountIssues: [], nextPageToken: "" };
}

export const ListAccountIssuesResponse: MessageFns<ListAccountIssuesResponse> = {
  encode(message: ListAccountIssuesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.accountIssues) {
      AccountIssue.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAccountIssuesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAccountIssuesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.accountIssues.push(AccountIssue.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAccountIssuesResponse {
    return {
      accountIssues: globalThis.Array.isArray(object?.accountIssues)
        ? object.accountIssues.map((e: any) => AccountIssue.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListAccountIssuesResponse): unknown {
    const obj: any = {};
    if (message.accountIssues?.length) {
      obj.accountIssues = message.accountIssues.map((e) => AccountIssue.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListAccountIssuesResponse>): ListAccountIssuesResponse {
    return ListAccountIssuesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAccountIssuesResponse>): ListAccountIssuesResponse {
    const message = createBaseListAccountIssuesResponse();
    message.accountIssues = object.accountIssues?.map((e) => AccountIssue.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

/** Service to support `AccountIssueService` API. */
export type AccountIssueServiceDefinition = typeof AccountIssueServiceDefinition;
export const AccountIssueServiceDefinition = {
  name: "AccountIssueService",
  fullName: "google.shopping.merchant.accounts.v1beta.AccountIssueService",
  methods: {
    /** Lists all account issues of a Merchant Center account. */
    listAccountIssues: {
      name: "ListAccountIssues",
      requestType: ListAccountIssuesRequest,
      requestStream: false,
      responseType: ListAccountIssuesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              45,
              18,
              43,
              47,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              125,
              47,
              105,
              115,
              115,
              117,
              101,
              115,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface AccountIssueServiceImplementation<CallContextExt = {}> {
  /** Lists all account issues of a Merchant Center account. */
  listAccountIssues(
    request: ListAccountIssuesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListAccountIssuesResponse>>;
}

export interface AccountIssueServiceClient<CallOptionsExt = {}> {
  /** Lists all account issues of a Merchant Center account. */
  listAccountIssues(
    request: DeepPartial<ListAccountIssuesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListAccountIssuesResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
