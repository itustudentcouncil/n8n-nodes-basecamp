// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/shopping/merchant/accounts/v1beta/autofeedsettings.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { FieldMask } from "../../../../protobuf/field_mask.js";

export const protobufPackage = "google.shopping.merchant.accounts.v1beta";

/**
 * Collection of information related to the
 * [autofeed](https://support.google.com/merchants/answer/7538732) settings.
 */
export interface AutofeedSettings {
  /**
   * Identifier. The resource name of the autofeed settings.
   * Format: `accounts/{account}/autofeedSettings`.
   */
  name: string;
  /**
   * Required. Enables or disables product crawling through the autofeed for the
   * given account. Autofeed accounts must meet [certain
   * conditions](https://support.google.com/merchants/answer/7538732#Configure_automated_feeds_Standard_Experience),
   * which can be checked through the `eligible` field.
   * The account must **not** be a marketplace.
   * When the autofeed is enabled for the first time, the products usually
   * appear instantly. When re-enabling, it might take up to 24 hours for
   * products to appear.
   */
  enableProducts: boolean;
  /**
   * Output only. Determines whether merchant is eligible for being enrolled
   * into an autofeed.
   */
  eligible: boolean;
}

/** Request message for the `GetAutofeedSettings` method. */
export interface GetAutofeedSettingsRequest {
  /**
   * Required. The resource name of the autofeed settings.
   * Format: `accounts/{account}/autofeedSettings`
   */
  name: string;
}

/** Request message for the `UpdateAutofeedSettings` method. */
export interface UpdateAutofeedSettingsRequest {
  /** Required. The new version of the autofeed setting. */
  autofeedSettings:
    | AutofeedSettings
    | undefined;
  /** Required. List of fields being updated. */
  updateMask: string[] | undefined;
}

function createBaseAutofeedSettings(): AutofeedSettings {
  return { name: "", enableProducts: false, eligible: false };
}

export const AutofeedSettings: MessageFns<AutofeedSettings> = {
  encode(message: AutofeedSettings, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.enableProducts !== false) {
      writer.uint32(16).bool(message.enableProducts);
    }
    if (message.eligible !== false) {
      writer.uint32(24).bool(message.eligible);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AutofeedSettings {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAutofeedSettings();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.enableProducts = reader.bool();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.eligible = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AutofeedSettings {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      enableProducts: isSet(object.enableProducts) ? globalThis.Boolean(object.enableProducts) : false,
      eligible: isSet(object.eligible) ? globalThis.Boolean(object.eligible) : false,
    };
  },

  toJSON(message: AutofeedSettings): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.enableProducts !== false) {
      obj.enableProducts = message.enableProducts;
    }
    if (message.eligible !== false) {
      obj.eligible = message.eligible;
    }
    return obj;
  },

  create(base?: DeepPartial<AutofeedSettings>): AutofeedSettings {
    return AutofeedSettings.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AutofeedSettings>): AutofeedSettings {
    const message = createBaseAutofeedSettings();
    message.name = object.name ?? "";
    message.enableProducts = object.enableProducts ?? false;
    message.eligible = object.eligible ?? false;
    return message;
  },
};

function createBaseGetAutofeedSettingsRequest(): GetAutofeedSettingsRequest {
  return { name: "" };
}

export const GetAutofeedSettingsRequest: MessageFns<GetAutofeedSettingsRequest> = {
  encode(message: GetAutofeedSettingsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAutofeedSettingsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAutofeedSettingsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAutofeedSettingsRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetAutofeedSettingsRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetAutofeedSettingsRequest>): GetAutofeedSettingsRequest {
    return GetAutofeedSettingsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetAutofeedSettingsRequest>): GetAutofeedSettingsRequest {
    const message = createBaseGetAutofeedSettingsRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpdateAutofeedSettingsRequest(): UpdateAutofeedSettingsRequest {
  return { autofeedSettings: undefined, updateMask: undefined };
}

export const UpdateAutofeedSettingsRequest: MessageFns<UpdateAutofeedSettingsRequest> = {
  encode(message: UpdateAutofeedSettingsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.autofeedSettings !== undefined) {
      AutofeedSettings.encode(message.autofeedSettings, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateAutofeedSettingsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateAutofeedSettingsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.autofeedSettings = AutofeedSettings.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateAutofeedSettingsRequest {
    return {
      autofeedSettings: isSet(object.autofeedSettings) ? AutofeedSettings.fromJSON(object.autofeedSettings) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateAutofeedSettingsRequest): unknown {
    const obj: any = {};
    if (message.autofeedSettings !== undefined) {
      obj.autofeedSettings = AutofeedSettings.toJSON(message.autofeedSettings);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateAutofeedSettingsRequest>): UpdateAutofeedSettingsRequest {
    return UpdateAutofeedSettingsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateAutofeedSettingsRequest>): UpdateAutofeedSettingsRequest {
    const message = createBaseUpdateAutofeedSettingsRequest();
    message.autofeedSettings = (object.autofeedSettings !== undefined && object.autofeedSettings !== null)
      ? AutofeedSettings.fromPartial(object.autofeedSettings)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

/**
 * Service to support
 * [autofeed](https://support.google.com/merchants/answer/7538732) setting.
 */
export type AutofeedSettingsServiceDefinition = typeof AutofeedSettingsServiceDefinition;
export const AutofeedSettingsServiceDefinition = {
  name: "AutofeedSettingsService",
  fullName: "google.shopping.merchant.accounts.v1beta.AutofeedSettingsService",
  methods: {
    /** Retrieves the autofeed settings of an account. */
    getAutofeedSettings: {
      name: "GetAutofeedSettings",
      requestType: GetAutofeedSettingsRequest,
      requestStream: false,
      responseType: AutofeedSettings,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              53,
              18,
              51,
              47,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              47,
              97,
              117,
              116,
              111,
              102,
              101,
              101,
              100,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              125,
            ]),
          ],
        },
      },
    },
    /** Updates the autofeed settings of an account. */
    updateAutofeedSettings: {
      name: "UpdateAutofeedSettings",
      requestType: UpdateAutofeedSettingsRequest,
      requestStream: false,
      responseType: AutofeedSettings,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              29,
              97,
              117,
              116,
              111,
              102,
              101,
              101,
              100,
              95,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              90,
              58,
              17,
              97,
              117,
              116,
              111,
              102,
              101,
              101,
              100,
              95,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              50,
              69,
              47,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              97,
              117,
              116,
              111,
              102,
              101,
              101,
              100,
              95,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              46,
              110,
              97,
              109,
              101,
              61,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              47,
              97,
              117,
              116,
              111,
              102,
              101,
              101,
              100,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface AutofeedSettingsServiceImplementation<CallContextExt = {}> {
  /** Retrieves the autofeed settings of an account. */
  getAutofeedSettings(
    request: GetAutofeedSettingsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AutofeedSettings>>;
  /** Updates the autofeed settings of an account. */
  updateAutofeedSettings(
    request: UpdateAutofeedSettingsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AutofeedSettings>>;
}

export interface AutofeedSettingsServiceClient<CallOptionsExt = {}> {
  /** Retrieves the autofeed settings of an account. */
  getAutofeedSettings(
    request: DeepPartial<GetAutofeedSettingsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AutofeedSettings>;
  /** Updates the autofeed settings of an account. */
  updateAutofeedSettings(
    request: DeepPartial<UpdateAutofeedSettingsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AutofeedSettings>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
