// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/shopping/merchant/accounts/v1beta/account_tax.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { FieldMask } from "../../../../protobuf/field_mask.js";
import { TaxRule } from "./tax_rule.js";

export const protobufPackage = "google.shopping.merchant.accounts.v1beta";

/** The tax settings of a merchant account. All methods require the admin role. */
export interface AccountTax {
  /**
   * Identifier. The name of the tax setting.
   * Format:
   * "{account_tax.name=accounts/{account}}"
   */
  name: string;
  /**
   * Output only. The ID of the account to which these account tax settings
   * belong.
   */
  account: Long;
  /**
   * Tax rules. "Define the tax rules in each region.
   * No tax will be presented if a region has no rule."
   */
  taxRules: TaxRule[];
}

/** Request to get tax settings */
export interface GetAccountTaxRequest {
  /** Required. The name from which tax settings will be retrieved */
  name: string;
}

/** Request to update the tax settings */
export interface UpdateAccountTaxRequest {
  /** Required. The tax setting that will be updated */
  accountTax:
    | AccountTax
    | undefined;
  /** The list of fields to be updated */
  updateMask: string[] | undefined;
}

/**
 * Request to list all sub-account tax settings only for the requesting merchant
 * This method can only be called on a multi-client account, otherwise it'll
 * return an error.
 */
export interface ListAccountTaxRequest {
  /**
   * Required. The parent, which owns this collection of account tax.
   * Format: accounts/{account}
   */
  parent: string;
  /**
   * The maximum number of tax settings to return in the response, used for
   * paging.
   */
  pageSize: number;
  /** The token returned by the previous request. */
  pageToken: string;
}

/**
 * Response to account tax list request
 * This method can only be called on a multi-client account, otherwise it'll
 * return an error.
 */
export interface ListAccountTaxResponse {
  /** Page of accounttax settings */
  accountTaxes: AccountTax[];
  /** The token for the retrieval of the next page of account tax settings. */
  nextPageToken: string;
}

function createBaseAccountTax(): AccountTax {
  return { name: "", account: Long.ZERO, taxRules: [] };
}

export const AccountTax: MessageFns<AccountTax> = {
  encode(message: AccountTax, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (!message.account.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.account.toString());
    }
    for (const v of message.taxRules) {
      TaxRule.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AccountTax {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAccountTax();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.account = Long.fromString(reader.int64().toString());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.taxRules.push(TaxRule.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AccountTax {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      account: isSet(object.account) ? Long.fromValue(object.account) : Long.ZERO,
      taxRules: globalThis.Array.isArray(object?.taxRules) ? object.taxRules.map((e: any) => TaxRule.fromJSON(e)) : [],
    };
  },

  toJSON(message: AccountTax): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (!message.account.equals(Long.ZERO)) {
      obj.account = (message.account || Long.ZERO).toString();
    }
    if (message.taxRules?.length) {
      obj.taxRules = message.taxRules.map((e) => TaxRule.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<AccountTax>): AccountTax {
    return AccountTax.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AccountTax>): AccountTax {
    const message = createBaseAccountTax();
    message.name = object.name ?? "";
    message.account = (object.account !== undefined && object.account !== null)
      ? Long.fromValue(object.account)
      : Long.ZERO;
    message.taxRules = object.taxRules?.map((e) => TaxRule.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetAccountTaxRequest(): GetAccountTaxRequest {
  return { name: "" };
}

export const GetAccountTaxRequest: MessageFns<GetAccountTaxRequest> = {
  encode(message: GetAccountTaxRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAccountTaxRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAccountTaxRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAccountTaxRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetAccountTaxRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetAccountTaxRequest>): GetAccountTaxRequest {
    return GetAccountTaxRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetAccountTaxRequest>): GetAccountTaxRequest {
    const message = createBaseGetAccountTaxRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpdateAccountTaxRequest(): UpdateAccountTaxRequest {
  return { accountTax: undefined, updateMask: undefined };
}

export const UpdateAccountTaxRequest: MessageFns<UpdateAccountTaxRequest> = {
  encode(message: UpdateAccountTaxRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.accountTax !== undefined) {
      AccountTax.encode(message.accountTax, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateAccountTaxRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateAccountTaxRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.accountTax = AccountTax.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateAccountTaxRequest {
    return {
      accountTax: isSet(object.accountTax) ? AccountTax.fromJSON(object.accountTax) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateAccountTaxRequest): unknown {
    const obj: any = {};
    if (message.accountTax !== undefined) {
      obj.accountTax = AccountTax.toJSON(message.accountTax);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateAccountTaxRequest>): UpdateAccountTaxRequest {
    return UpdateAccountTaxRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateAccountTaxRequest>): UpdateAccountTaxRequest {
    const message = createBaseUpdateAccountTaxRequest();
    message.accountTax = (object.accountTax !== undefined && object.accountTax !== null)
      ? AccountTax.fromPartial(object.accountTax)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseListAccountTaxRequest(): ListAccountTaxRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListAccountTaxRequest: MessageFns<ListAccountTaxRequest> = {
  encode(message: ListAccountTaxRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAccountTaxRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAccountTaxRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAccountTaxRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListAccountTaxRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListAccountTaxRequest>): ListAccountTaxRequest {
    return ListAccountTaxRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAccountTaxRequest>): ListAccountTaxRequest {
    const message = createBaseListAccountTaxRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListAccountTaxResponse(): ListAccountTaxResponse {
  return { accountTaxes: [], nextPageToken: "" };
}

export const ListAccountTaxResponse: MessageFns<ListAccountTaxResponse> = {
  encode(message: ListAccountTaxResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.accountTaxes) {
      AccountTax.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAccountTaxResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAccountTaxResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.accountTaxes.push(AccountTax.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAccountTaxResponse {
    return {
      accountTaxes: globalThis.Array.isArray(object?.accountTaxes)
        ? object.accountTaxes.map((e: any) => AccountTax.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListAccountTaxResponse): unknown {
    const obj: any = {};
    if (message.accountTaxes?.length) {
      obj.accountTaxes = message.accountTaxes.map((e) => AccountTax.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListAccountTaxResponse>): ListAccountTaxResponse {
    return ListAccountTaxResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAccountTaxResponse>): ListAccountTaxResponse {
    const message = createBaseListAccountTaxResponse();
    message.accountTaxes = object.accountTaxes?.map((e) => AccountTax.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

/**
 * Manages account level tax setting data.
 *
 * This API defines the following resource model:
 *
 * - [AccountTax][google.shopping.merchant.accounts.v1main.AccountTax]
 */
export type AccountTaxServiceDefinition = typeof AccountTaxServiceDefinition;
export const AccountTaxServiceDefinition = {
  name: "AccountTaxService",
  fullName: "google.shopping.merchant.accounts.v1beta.AccountTaxService",
  methods: {
    /** Returns the tax rules that match the conditions of GetAccountTaxRequest */
    getAccountTax: {
      name: "GetAccountTax",
      requestType: GetAccountTaxRequest,
      requestStream: false,
      responseType: AccountTax,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              49,
              18,
              47,
              47,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              47,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              116,
              97,
              120,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Lists the tax settings of the sub-accounts only in your
     * Merchant Center account.
     * This method can only be called on a multi-client account, otherwise it'll
     * return an error.
     */
    listAccountTax: {
      name: "ListAccountTax",
      requestType: ListAccountTaxRequest,
      requestStream: false,
      responseType: ListAccountTaxResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              49,
              18,
              47,
              47,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              125,
              47,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              116,
              97,
              120,
            ]),
          ],
        },
      },
    },
    /** Updates the tax settings of the account. */
    updateAccountTax: {
      name: "UpdateAccountTax",
      requestType: UpdateAccountTaxRequest,
      requestStream: false,
      responseType: AccountTax,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              23,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              95,
              116,
              97,
              120,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
            Buffer.from([11, 97, 99, 99, 111, 117, 110, 116, 95, 116, 97, 120]),
          ],
          578365826: [
            Buffer.from([
              74,
              58,
              11,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              95,
              116,
              97,
              120,
              50,
              59,
              47,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              95,
              116,
              97,
              120,
              46,
              110,
              97,
              109,
              101,
              61,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              47,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              116,
              97,
              120,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface AccountTaxServiceImplementation<CallContextExt = {}> {
  /** Returns the tax rules that match the conditions of GetAccountTaxRequest */
  getAccountTax(request: GetAccountTaxRequest, context: CallContext & CallContextExt): Promise<DeepPartial<AccountTax>>;
  /**
   * Lists the tax settings of the sub-accounts only in your
   * Merchant Center account.
   * This method can only be called on a multi-client account, otherwise it'll
   * return an error.
   */
  listAccountTax(
    request: ListAccountTaxRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListAccountTaxResponse>>;
  /** Updates the tax settings of the account. */
  updateAccountTax(
    request: UpdateAccountTaxRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AccountTax>>;
}

export interface AccountTaxServiceClient<CallOptionsExt = {}> {
  /** Returns the tax rules that match the conditions of GetAccountTaxRequest */
  getAccountTax(
    request: DeepPartial<GetAccountTaxRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AccountTax>;
  /**
   * Lists the tax settings of the sub-accounts only in your
   * Merchant Center account.
   * This method can only be called on a multi-client account, otherwise it'll
   * return an error.
   */
  listAccountTax(
    request: DeepPartial<ListAccountTaxRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListAccountTaxResponse>;
  /** Updates the tax settings of the account. */
  updateAccountTax(
    request: DeepPartial<UpdateAccountTaxRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AccountTax>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
