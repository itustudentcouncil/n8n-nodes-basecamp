// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/shopping/merchant/reports/v1beta/reports.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Timestamp } from "../../../../protobuf/timestamp.js";
import { DateMessage } from "../../../../type/date.js";
import {
  Channel_ChannelEnum,
  channel_ChannelEnumFromJSON,
  channel_ChannelEnumToJSON,
  Price,
  ReportingContext_ReportingContextEnum,
  reportingContext_ReportingContextEnumFromJSON,
  reportingContext_ReportingContextEnumToJSON,
} from "../../../type/types.js";

export const protobufPackage = "google.shopping.merchant.reports.v1beta";

/** Request message for the `ReportService.Search` method. */
export interface SearchRequest {
  /**
   * Required. Id of the account making the call. Must be a standalone account
   * or an MCA subaccount. Format: accounts/{account}
   */
  parent: string;
  /**
   * Required. Query that defines a report to be retrieved.
   *
   * For details on how to construct your query, see the Query Language
   * guide. For the full list of available tables and fields, see the Available
   * fields.
   */
  query: string;
  /**
   * Optional. Number of `ReportRows` to retrieve in a single page. Defaults to
   * 1000. Values above 5000 are coerced to 5000.
   */
  pageSize: number;
  /**
   * Optional. Token of the page to retrieve. If not specified, the first page
   * of results is returned. In order to request the next page of results, the
   * value obtained from `next_page_token` in the previous response should be
   * used.
   */
  pageToken: string;
}

/** Response message for the `ReportService.Search` method. */
export interface SearchResponse {
  /** Rows that matched the search query. */
  results: ReportRow[];
  /**
   * Token which can be sent as `page_token` to retrieve the next page. If
   * omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

/**
 * Result row returned from the search query.
 *
 * Only the message corresponding to the queried table is populated in the
 * response. Within the populated message, only the fields requested explicitly
 * in the query are populated.
 */
export interface ReportRow {
  /** Fields available for query in `product_performance_view` table. */
  productPerformanceView:
    | ProductPerformanceView
    | undefined;
  /** Fields available for query in `non_product_performance_view` table. */
  nonProductPerformanceView:
    | NonProductPerformanceView
    | undefined;
  /** Fields available for query in `product_view` table. */
  productView:
    | ProductView
    | undefined;
  /** Fields available for query in `price_competitiveness_product_view` table. */
  priceCompetitivenessProductView:
    | PriceCompetitivenessProductView
    | undefined;
  /** Fields available for query in `price_insights_product_view` table. */
  priceInsightsProductView:
    | PriceInsightsProductView
    | undefined;
  /** Fields available for query in `best_sellers_product_cluster_view` table. */
  bestSellersProductClusterView:
    | BestSellersProductClusterView
    | undefined;
  /** Fields available for query in `best_sellers_brand_view` table. */
  bestSellersBrandView:
    | BestSellersBrandView
    | undefined;
  /**
   * Fields available for query in `competitive_visibility_competitor_view`
   * table.
   */
  competitiveVisibilityCompetitorView:
    | CompetitiveVisibilityCompetitorView
    | undefined;
  /**
   * Fields available for query in `competitive_visibility_top_merchant_view`
   * table.
   */
  competitiveVisibilityTopMerchantView:
    | CompetitiveVisibilityTopMerchantView
    | undefined;
  /**
   * Fields available for query in `competitive_visibility_benchmark_view`
   * table.
   */
  competitiveVisibilityBenchmarkView: CompetitiveVisibilityBenchmarkView | undefined;
}

/**
 * Fields available for query in `product_performance_view` table.
 *
 * Product performance data for your account, including performance metrics (for
 * example, `clicks`) and dimensions according to which performance metrics are
 * segmented (for example, `offer_id`). Values of product dimensions, such as
 * `offer_id`, reflect the state of a product at the time of the impression.
 *
 * Segment fields cannot be selected in queries without also selecting at least
 * one metric field.
 *
 * Values are only set for fields requested explicitly in the request's search
 * query.
 */
export interface ProductPerformanceView {
  /** Marketing method to which metrics apply. Segment. */
  marketingMethod?:
    | MarketingMethod_MarketingMethodEnum
    | undefined;
  /**
   * Date in the merchant timezone to which metrics apply. Segment.
   *
   * Condition on `date` is required in the `WHERE` clause.
   */
  date:
    | DateMessage
    | undefined;
  /**
   * First day of the week (Monday) of the metrics date in the merchant
   * timezone. Segment.
   */
  week:
    | DateMessage
    | undefined;
  /**
   * Code of the country where the customer is located at the time of the event.
   * Represented in the ISO 3166 format. Segment.
   *
   * If the customer country cannot be determined, a special 'ZZ' code is
   * returned.
   */
  customerCountryCode?:
    | string
    | undefined;
  /** Merchant-provided id of the product. Segment. */
  offerId?:
    | string
    | undefined;
  /** Title of the product. Segment. */
  title?:
    | string
    | undefined;
  /** Brand of the product. Segment. */
  brand?:
    | string
    | undefined;
  /**
   * [Product category (1st
   * level)](https://developers.google.com/shopping-content/guides/reports/segmentation#category_and_product_type)
   * in Google's product taxonomy. Segment.
   */
  categoryL1?:
    | string
    | undefined;
  /**
   * [Product category (2nd
   * level)](https://developers.google.com/shopping-content/guides/reports/segmentation#category_and_product_type)
   * in Google's product taxonomy. Segment.
   */
  categoryL2?:
    | string
    | undefined;
  /**
   * [Product category (3rd
   * level)](https://developers.google.com/shopping-content/guides/reports/segmentation#category_and_product_type)
   * in Google's product taxonomy. Segment.
   */
  categoryL3?:
    | string
    | undefined;
  /**
   * [Product category (4th
   * level)](https://developers.google.com/shopping-content/guides/reports/segmentation#category_and_product_type)
   * in Google's product taxonomy. Segment.
   */
  categoryL4?:
    | string
    | undefined;
  /**
   * [Product category (5th
   * level)](https://developers.google.com/shopping-content/guides/reports/segmentation#category_and_product_type)
   * in Google's product taxonomy. Segment.
   */
  categoryL5?:
    | string
    | undefined;
  /**
   * [Product type (1st
   * level)](https://developers.google.com/shopping-content/guides/reports/segmentation#category_and_product_type)
   * in merchant's own product taxonomy. Segment.
   */
  productTypeL1?:
    | string
    | undefined;
  /**
   * [Product type (2nd
   * level)](https://developers.google.com/shopping-content/guides/reports/segmentation#category_and_product_type)
   * in merchant's own product taxonomy. Segment.
   */
  productTypeL2?:
    | string
    | undefined;
  /**
   * [Product type (3rd
   * level)](https://developers.google.com/shopping-content/guides/reports/segmentation#category_and_product_type)
   * in merchant's own product taxonomy. Segment.
   */
  productTypeL3?:
    | string
    | undefined;
  /**
   * [Product type (4th
   * level)](https://developers.google.com/shopping-content/guides/reports/segmentation#category_and_product_type)
   * in merchant's own product taxonomy. Segment.
   */
  productTypeL4?:
    | string
    | undefined;
  /**
   * [Product type (5th
   * level)](https://developers.google.com/shopping-content/guides/reports/segmentation#category_and_product_type)
   * in merchant's own product taxonomy. Segment.
   */
  productTypeL5?:
    | string
    | undefined;
  /** Custom label 0 for custom grouping of products. Segment. */
  customLabel0?:
    | string
    | undefined;
  /** Custom label 1 for custom grouping of products. Segment. */
  customLabel1?:
    | string
    | undefined;
  /** Custom label 2 for custom grouping of products. Segment. */
  customLabel2?:
    | string
    | undefined;
  /** Custom label 3 for custom grouping of products. Segment. */
  customLabel3?:
    | string
    | undefined;
  /** Custom label 4 for custom grouping of products. Segment. */
  customLabel4?:
    | string
    | undefined;
  /** Number of clicks. Metric. */
  clicks?:
    | Long
    | undefined;
  /** Number of times merchant's products are shown. Metric. */
  impressions?:
    | Long
    | undefined;
  /**
   * Click-through rate - the number of clicks merchant's products receive
   * (clicks) divided by the number of times the products are shown
   * (impressions). Metric.
   */
  clickThroughRate?:
    | number
    | undefined;
  /**
   * Number of conversions attributed to the product, reported on the conversion
   * date. Depending on the attribution model, a conversion might be distributed
   * across multiple clicks, where each click gets its own credit assigned. This
   * metric is a sum of all such credits. Metric.
   *
   * Available only for the `FREE` traffic source.
   */
  conversions?:
    | number
    | undefined;
  /**
   * Value of conversions attributed to the product, reported on the conversion
   * date. Metric.
   *
   * Available only for the `FREE` traffic source.
   */
  conversionValue:
    | Price
    | undefined;
  /**
   * Number of conversions divided by the number of clicks, reported on the
   * impression date. Metric.
   *
   * Available only for the `FREE` traffic source.
   */
  conversionRate?: number | undefined;
}

/**
 * Fields available for query in `product_view` table.
 *
 * Products in the current inventory. Products in this table are the same as in
 * Products sub-API but not all product attributes from Products sub-API are
 * available for query in this table. In contrast to Products sub-API, this
 * table allows to filter the returned list of products by product attributes.
 * To retrieve a single product by `id` or list all products, Products sub-API
 * should be used.
 *
 * Values are only set for fields requested explicitly in the request's search
 * query.
 */
export interface ProductView {
  /**
   * REST ID of the product, in the form of
   * `channel~languageCode~feedLabel~offerId`. Merchant API methods that operate
   * on products take this as their `name` parameter.
   *
   * Required in the `SELECT` clause.
   */
  id?:
    | string
    | undefined;
  /** Channel of the product. Can be `ONLINE` or `LOCAL`. */
  channel?:
    | Channel_ChannelEnum
    | undefined;
  /** Language code of the product in BCP 47 format. */
  languageCode?:
    | string
    | undefined;
  /** Feed label of the product. */
  feedLabel?:
    | string
    | undefined;
  /** Merchant-provided id of the product. */
  offerId?:
    | string
    | undefined;
  /** Title of the product. */
  title?:
    | string
    | undefined;
  /** Brand of the product. */
  brand?:
    | string
    | undefined;
  /**
   * Product category (1st level) in [Google's product
   * taxonomy](https://support.google.com/merchants/answer/6324436).
   */
  categoryL1?:
    | string
    | undefined;
  /**
   * Product category (2nd level) in [Google's product
   * taxonomy](https://support.google.com/merchants/answer/6324436).
   */
  categoryL2?:
    | string
    | undefined;
  /**
   * Product category (3rd level) in [Google's product
   * taxonomy](https://support.google.com/merchants/answer/6324436).
   */
  categoryL3?:
    | string
    | undefined;
  /**
   * Product category (4th level) in [Google's product
   * taxonomy](https://support.google.com/merchants/answer/6324436).
   */
  categoryL4?:
    | string
    | undefined;
  /**
   * Product category (5th level) in [Google's product
   * taxonomy](https://support.google.com/merchants/answer/6324436).
   */
  categoryL5?:
    | string
    | undefined;
  /**
   * Product type (1st level) in merchant's own [product
   * taxonomy](https://support.google.com/merchants/answer/6324406).
   */
  productTypeL1?:
    | string
    | undefined;
  /**
   * Product type (2nd level) in merchant's own [product
   * taxonomy](https://support.google.com/merchants/answer/6324406).
   */
  productTypeL2?:
    | string
    | undefined;
  /**
   * Product type (3rd level) in merchant's own [product
   * taxonomy](https://support.google.com/merchants/answer/6324406).
   */
  productTypeL3?:
    | string
    | undefined;
  /**
   * Product type (4th level) in merchant's own [product
   * taxonomy](https://support.google.com/merchants/answer/6324406).
   */
  productTypeL4?:
    | string
    | undefined;
  /**
   * Product type (5th level) in merchant's own [product
   * taxonomy](https://support.google.com/merchants/answer/6324406).
   */
  productTypeL5?:
    | string
    | undefined;
  /**
   * Product price. Absent if the information about the price of the product is
   * not available.
   */
  price:
    | Price
    | undefined;
  /**
   * [Condition](https://support.google.com/merchants/answer/6324469) of the
   * product.
   */
  condition?:
    | string
    | undefined;
  /**
   * [Availability](https://support.google.com/merchants/answer/6324448) of the
   * product.
   */
  availability?:
    | string
    | undefined;
  /**
   * Normalized [shipping
   * label](https://support.google.com/merchants/answer/6324504) specified in
   * the data source.
   */
  shippingLabel?:
    | string
    | undefined;
  /** List of Global Trade Item Numbers (GTINs) of the product. */
  gtin: string[];
  /** Item group id provided by the merchant for grouping variants together. */
  itemGroupId?:
    | string
    | undefined;
  /**
   * Link to the processed image of the product, hosted on the Google
   * infrastructure.
   */
  thumbnailLink?:
    | string
    | undefined;
  /** The time the merchant created the product in timestamp seconds. */
  creationTime:
    | Date
    | undefined;
  /** Expiration date for the product, specified on insertion. */
  expirationDate:
    | DateMessage
    | undefined;
  /** Aggregated status. */
  aggregatedReportingContextStatus?:
    | ProductView_AggregatedReportingContextStatus
    | undefined;
  /**
   * List of item issues for the product.
   *
   * **This field cannot be used for sorting the results.**
   *
   * **Only selected attributes of this field (for example,
   * `item_issues.severity.aggregated_severity`) can be used for filtering the
   * results.**
   */
  itemIssues: ProductView_ItemIssue[];
  /**
   * Estimated performance potential compared to highest performing products of
   * the merchant.
   */
  clickPotential: ProductView_ClickPotential;
  /**
   * Rank of the product based on its click potential. A product with
   * `click_potential_rank` 1 has the highest click potential among the
   * merchant's products that fulfill the search query conditions.
   */
  clickPotentialRank?: Long | undefined;
}

/**
 * Status of the product aggregated for all reporting contexts.
 *
 * Here's an example of how the aggregated status is computed:
 *
 * Free listings | Shopping ads | Status
 * --------------|--------------|------------------------------
 * Approved      | Approved     | ELIGIBLE
 * Approved      | Pending      | ELIGIBLE
 * Approved      | Disapproved  | ELIGIBLE_LIMITED
 * Pending       | Pending      | PENDING
 * Disapproved   | Disapproved  | NOT_ELIGIBLE_OR_DISAPPROVED
 */
export enum ProductView_AggregatedReportingContextStatus {
  /** AGGREGATED_REPORTING_CONTEXT_STATUS_UNSPECIFIED - Not specified. */
  AGGREGATED_REPORTING_CONTEXT_STATUS_UNSPECIFIED = 0,
  /** NOT_ELIGIBLE_OR_DISAPPROVED - Product is not eligible or is disapproved for all reporting contexts. */
  NOT_ELIGIBLE_OR_DISAPPROVED = 1,
  /** PENDING - Product's status is pending in all reporting contexts. */
  PENDING = 2,
  /** ELIGIBLE_LIMITED - Product is eligible for some (but not all) reporting contexts. */
  ELIGIBLE_LIMITED = 3,
  /** ELIGIBLE - Product is eligible for all reporting contexts. */
  ELIGIBLE = 4,
  UNRECOGNIZED = -1,
}

export function productView_AggregatedReportingContextStatusFromJSON(
  object: any,
): ProductView_AggregatedReportingContextStatus {
  switch (object) {
    case 0:
    case "AGGREGATED_REPORTING_CONTEXT_STATUS_UNSPECIFIED":
      return ProductView_AggregatedReportingContextStatus.AGGREGATED_REPORTING_CONTEXT_STATUS_UNSPECIFIED;
    case 1:
    case "NOT_ELIGIBLE_OR_DISAPPROVED":
      return ProductView_AggregatedReportingContextStatus.NOT_ELIGIBLE_OR_DISAPPROVED;
    case 2:
    case "PENDING":
      return ProductView_AggregatedReportingContextStatus.PENDING;
    case 3:
    case "ELIGIBLE_LIMITED":
      return ProductView_AggregatedReportingContextStatus.ELIGIBLE_LIMITED;
    case 4:
    case "ELIGIBLE":
      return ProductView_AggregatedReportingContextStatus.ELIGIBLE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ProductView_AggregatedReportingContextStatus.UNRECOGNIZED;
  }
}

export function productView_AggregatedReportingContextStatusToJSON(
  object: ProductView_AggregatedReportingContextStatus,
): string {
  switch (object) {
    case ProductView_AggregatedReportingContextStatus.AGGREGATED_REPORTING_CONTEXT_STATUS_UNSPECIFIED:
      return "AGGREGATED_REPORTING_CONTEXT_STATUS_UNSPECIFIED";
    case ProductView_AggregatedReportingContextStatus.NOT_ELIGIBLE_OR_DISAPPROVED:
      return "NOT_ELIGIBLE_OR_DISAPPROVED";
    case ProductView_AggregatedReportingContextStatus.PENDING:
      return "PENDING";
    case ProductView_AggregatedReportingContextStatus.ELIGIBLE_LIMITED:
      return "ELIGIBLE_LIMITED";
    case ProductView_AggregatedReportingContextStatus.ELIGIBLE:
      return "ELIGIBLE";
    case ProductView_AggregatedReportingContextStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * A product's [click
 * potential](https://support.google.com/merchants/answer/188488) estimates
 * its performance potential compared to highest performing products of the
 * merchant. Click potential of a product helps merchants to prioritize which
 * products to fix and helps them understand how products are performing
 * against their potential.
 */
export enum ProductView_ClickPotential {
  /** CLICK_POTENTIAL_UNSPECIFIED - Unknown predicted clicks impact. */
  CLICK_POTENTIAL_UNSPECIFIED = 0,
  /**
   * LOW - Potential to receive a low number of clicks compared to the highest
   * performing products of the merchant.
   */
  LOW = 1,
  /**
   * MEDIUM - Potential to receive a moderate number of clicks compared to the highest
   * performing products of the merchant.
   */
  MEDIUM = 2,
  /**
   * HIGH - Potential to receive a similar number of clicks as the highest performing
   * products of the merchant.
   */
  HIGH = 3,
  UNRECOGNIZED = -1,
}

export function productView_ClickPotentialFromJSON(object: any): ProductView_ClickPotential {
  switch (object) {
    case 0:
    case "CLICK_POTENTIAL_UNSPECIFIED":
      return ProductView_ClickPotential.CLICK_POTENTIAL_UNSPECIFIED;
    case 1:
    case "LOW":
      return ProductView_ClickPotential.LOW;
    case 2:
    case "MEDIUM":
      return ProductView_ClickPotential.MEDIUM;
    case 3:
    case "HIGH":
      return ProductView_ClickPotential.HIGH;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ProductView_ClickPotential.UNRECOGNIZED;
  }
}

export function productView_ClickPotentialToJSON(object: ProductView_ClickPotential): string {
  switch (object) {
    case ProductView_ClickPotential.CLICK_POTENTIAL_UNSPECIFIED:
      return "CLICK_POTENTIAL_UNSPECIFIED";
    case ProductView_ClickPotential.LOW:
      return "LOW";
    case ProductView_ClickPotential.MEDIUM:
      return "MEDIUM";
    case ProductView_ClickPotential.HIGH:
      return "HIGH";
    case ProductView_ClickPotential.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Item issue associated with the product. */
export interface ProductView_ItemIssue {
  /** Item issue type. */
  type:
    | ProductView_ItemIssue_ItemIssueType
    | undefined;
  /** Item issue severity. */
  severity:
    | ProductView_ItemIssue_ItemIssueSeverity
    | undefined;
  /** Item issue resolution. */
  resolution?: ProductView_ItemIssue_ItemIssueResolution | undefined;
}

/** How to resolve the issue. */
export enum ProductView_ItemIssue_ItemIssueResolution {
  /** ITEM_ISSUE_RESOLUTION_UNSPECIFIED - Not specified. */
  ITEM_ISSUE_RESOLUTION_UNSPECIFIED = 0,
  /** MERCHANT_ACTION - The merchant has to fix the issue. */
  MERCHANT_ACTION = 1,
  /**
   * PENDING_PROCESSING - The issue will be resolved automatically (for example, image crawl) or
   * through a Google review. No merchant action is required now. Resolution
   * might lead to another issue (for example, if crawl fails).
   */
  PENDING_PROCESSING = 2,
  UNRECOGNIZED = -1,
}

export function productView_ItemIssue_ItemIssueResolutionFromJSON(
  object: any,
): ProductView_ItemIssue_ItemIssueResolution {
  switch (object) {
    case 0:
    case "ITEM_ISSUE_RESOLUTION_UNSPECIFIED":
      return ProductView_ItemIssue_ItemIssueResolution.ITEM_ISSUE_RESOLUTION_UNSPECIFIED;
    case 1:
    case "MERCHANT_ACTION":
      return ProductView_ItemIssue_ItemIssueResolution.MERCHANT_ACTION;
    case 2:
    case "PENDING_PROCESSING":
      return ProductView_ItemIssue_ItemIssueResolution.PENDING_PROCESSING;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ProductView_ItemIssue_ItemIssueResolution.UNRECOGNIZED;
  }
}

export function productView_ItemIssue_ItemIssueResolutionToJSON(
  object: ProductView_ItemIssue_ItemIssueResolution,
): string {
  switch (object) {
    case ProductView_ItemIssue_ItemIssueResolution.ITEM_ISSUE_RESOLUTION_UNSPECIFIED:
      return "ITEM_ISSUE_RESOLUTION_UNSPECIFIED";
    case ProductView_ItemIssue_ItemIssueResolution.MERCHANT_ACTION:
      return "MERCHANT_ACTION";
    case ProductView_ItemIssue_ItemIssueResolution.PENDING_PROCESSING:
      return "PENDING_PROCESSING";
    case ProductView_ItemIssue_ItemIssueResolution.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Issue type. */
export interface ProductView_ItemIssue_ItemIssueType {
  /**
   * Error code of the issue, equivalent to the `code` of [Product
   * issues](https://developers.google.com/shopping-content/guides/product-issues).
   */
  code?:
    | string
    | undefined;
  /** Canonical attribute name for attribute-specific issues. */
  canonicalAttribute?: string | undefined;
}

/** How the issue affects the serving of the product. */
export interface ProductView_ItemIssue_ItemIssueSeverity {
  /** Issue severity per reporting context. */
  severityPerReportingContext: ProductView_ItemIssue_ItemIssueSeverity_IssueSeverityPerReportingContext[];
  /**
   * Aggregated severity of the issue for all reporting contexts it affects.
   *
   * **This field can be used for filtering the results.**
   */
  aggregatedSeverity?: ProductView_ItemIssue_ItemIssueSeverity_AggregatedIssueSeverity | undefined;
}

/** Issue severity aggregated for all reporting contexts. */
export enum ProductView_ItemIssue_ItemIssueSeverity_AggregatedIssueSeverity {
  /** AGGREGATED_ISSUE_SEVERITY_UNSPECIFIED - Not specified. */
  AGGREGATED_ISSUE_SEVERITY_UNSPECIFIED = 0,
  /** DISAPPROVED - Issue disapproves the product in at least one reporting context. */
  DISAPPROVED = 1,
  /** DEMOTED - Issue demotes the product in all reporting contexts it affects. */
  DEMOTED = 2,
  /** PENDING - Issue resolution is `PENDING_PROCESSING`. */
  PENDING = 3,
  UNRECOGNIZED = -1,
}

export function productView_ItemIssue_ItemIssueSeverity_AggregatedIssueSeverityFromJSON(
  object: any,
): ProductView_ItemIssue_ItemIssueSeverity_AggregatedIssueSeverity {
  switch (object) {
    case 0:
    case "AGGREGATED_ISSUE_SEVERITY_UNSPECIFIED":
      return ProductView_ItemIssue_ItemIssueSeverity_AggregatedIssueSeverity.AGGREGATED_ISSUE_SEVERITY_UNSPECIFIED;
    case 1:
    case "DISAPPROVED":
      return ProductView_ItemIssue_ItemIssueSeverity_AggregatedIssueSeverity.DISAPPROVED;
    case 2:
    case "DEMOTED":
      return ProductView_ItemIssue_ItemIssueSeverity_AggregatedIssueSeverity.DEMOTED;
    case 3:
    case "PENDING":
      return ProductView_ItemIssue_ItemIssueSeverity_AggregatedIssueSeverity.PENDING;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ProductView_ItemIssue_ItemIssueSeverity_AggregatedIssueSeverity.UNRECOGNIZED;
  }
}

export function productView_ItemIssue_ItemIssueSeverity_AggregatedIssueSeverityToJSON(
  object: ProductView_ItemIssue_ItemIssueSeverity_AggregatedIssueSeverity,
): string {
  switch (object) {
    case ProductView_ItemIssue_ItemIssueSeverity_AggregatedIssueSeverity.AGGREGATED_ISSUE_SEVERITY_UNSPECIFIED:
      return "AGGREGATED_ISSUE_SEVERITY_UNSPECIFIED";
    case ProductView_ItemIssue_ItemIssueSeverity_AggregatedIssueSeverity.DISAPPROVED:
      return "DISAPPROVED";
    case ProductView_ItemIssue_ItemIssueSeverity_AggregatedIssueSeverity.DEMOTED:
      return "DEMOTED";
    case ProductView_ItemIssue_ItemIssueSeverity_AggregatedIssueSeverity.PENDING:
      return "PENDING";
    case ProductView_ItemIssue_ItemIssueSeverity_AggregatedIssueSeverity.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Issue severity per reporting context. */
export interface ProductView_ItemIssue_ItemIssueSeverity_IssueSeverityPerReportingContext {
  /** Reporting context the issue applies to. */
  reportingContext?:
    | ReportingContext_ReportingContextEnum
    | undefined;
  /**
   * List of disapproved countries in the reporting context, represented
   * in ISO 3166 format.
   */
  disapprovedCountries: string[];
  /**
   * List of demoted countries in the reporting context, represented in
   * ISO 3166 format.
   */
  demotedCountries: string[];
}

/**
 * Fields available for query in `price_competitiveness_product_view` table.
 *
 * [Price competitiveness](https://support.google.com/merchants/answer/9626903)
 * report.
 *
 * Values are only set for fields requested explicitly in the request's search
 * query.
 */
export interface PriceCompetitivenessProductView {
  /**
   * Country of the price benchmark. Represented in the ISO 3166 format.
   *
   * Required in the `SELECT` clause.
   */
  reportCountryCode?:
    | string
    | undefined;
  /**
   * REST ID of the product, in the form of
   * `channel~languageCode~feedLabel~offerId`. Can be used to join data with the
   * `product_view` table.
   *
   * Required in the `SELECT` clause.
   */
  id?:
    | string
    | undefined;
  /** Merchant-provided id of the product. */
  offerId?:
    | string
    | undefined;
  /** Title of the product. */
  title?:
    | string
    | undefined;
  /** Brand of the product. */
  brand?:
    | string
    | undefined;
  /**
   * Product category (1st level) in [Google's product
   * taxonomy](https://support.google.com/merchants/answer/6324436).
   */
  categoryL1?:
    | string
    | undefined;
  /**
   * Product category (2nd level) in [Google's product
   * taxonomy](https://support.google.com/merchants/answer/6324436).
   */
  categoryL2?:
    | string
    | undefined;
  /**
   * Product category (3rd level) in [Google's product
   * taxonomy](https://support.google.com/merchants/answer/6324436).
   */
  categoryL3?:
    | string
    | undefined;
  /**
   * Product category (4th level) in [Google's product
   * taxonomy](https://support.google.com/merchants/answer/6324436).
   */
  categoryL4?:
    | string
    | undefined;
  /**
   * Product category (5th level) in [Google's product
   * taxonomy](https://support.google.com/merchants/answer/6324436).
   */
  categoryL5?:
    | string
    | undefined;
  /**
   * Product type (1st level) in merchant's own [product
   * taxonomy](https://support.google.com/merchants/answer/6324406).
   */
  productTypeL1?:
    | string
    | undefined;
  /**
   * Product type (2nd level) in merchant's own [product
   * taxonomy](https://support.google.com/merchants/answer/6324406).
   */
  productTypeL2?:
    | string
    | undefined;
  /**
   * Product type (3rd level) in merchant's own [product
   * taxonomy](https://support.google.com/merchants/answer/6324406).
   */
  productTypeL3?:
    | string
    | undefined;
  /**
   * Product type (4th level) in merchant's own [product
   * taxonomy](https://support.google.com/merchants/answer/6324406).
   */
  productTypeL4?:
    | string
    | undefined;
  /**
   * Product type (5th level) in merchant's own [product
   * taxonomy](https://support.google.com/merchants/answer/6324406).
   */
  productTypeL5?:
    | string
    | undefined;
  /** Current price of the product. */
  price:
    | Price
    | undefined;
  /**
   * Latest available price benchmark for the product's catalog in the benchmark
   * country.
   */
  benchmarkPrice: Price | undefined;
}

/**
 * Fields available for query in `price_insights_product_view` table.
 *
 * [Price insights](https://support.google.com/merchants/answer/11916926)
 * report.
 *
 * Values are only set for fields requested explicitly in the request's search
 * query.
 */
export interface PriceInsightsProductView {
  /**
   * REST ID of the product, in the form of
   * `channel~languageCode~feedLabel~offerId`. Can be used to join data with the
   * `product_view` table.
   *
   * Required in the `SELECT` clause.
   */
  id?:
    | string
    | undefined;
  /** Merchant-provided id of the product. */
  offerId?:
    | string
    | undefined;
  /** Title of the product. */
  title?:
    | string
    | undefined;
  /** Brand of the product. */
  brand?:
    | string
    | undefined;
  /**
   * Product category (1st level) in [Google's product
   * taxonomy](https://support.google.com/merchants/answer/6324436).
   */
  categoryL1?:
    | string
    | undefined;
  /**
   * Product category (2nd level) in [Google's product
   * taxonomy](https://support.google.com/merchants/answer/6324436).
   */
  categoryL2?:
    | string
    | undefined;
  /**
   * Product category (3rd level) in [Google's product
   * taxonomy](https://support.google.com/merchants/answer/6324436).
   */
  categoryL3?:
    | string
    | undefined;
  /**
   * Product category (4th level) in [Google's product
   * taxonomy](https://support.google.com/merchants/answer/6324436).
   */
  categoryL4?:
    | string
    | undefined;
  /**
   * Product category (5th level) in [Google's product
   * taxonomy](https://support.google.com/merchants/answer/6324436).
   */
  categoryL5?:
    | string
    | undefined;
  /**
   * Product type (1st level) in merchant's own [product
   * taxonomy](https://support.google.com/merchants/answer/6324406).
   */
  productTypeL1?:
    | string
    | undefined;
  /**
   * Product type (2nd level) in merchant's own [product
   * taxonomy](https://support.google.com/merchants/answer/6324406).
   */
  productTypeL2?:
    | string
    | undefined;
  /**
   * Product type (3rd level) in merchant's own [product
   * taxonomy](https://support.google.com/merchants/answer/6324406).
   */
  productTypeL3?:
    | string
    | undefined;
  /**
   * Product type (4th level) in merchant's own [product
   * taxonomy](https://support.google.com/merchants/answer/6324406).
   */
  productTypeL4?:
    | string
    | undefined;
  /**
   * Product type (5th level) in merchant's own [product
   * taxonomy](https://support.google.com/merchants/answer/6324406).
   */
  productTypeL5?:
    | string
    | undefined;
  /** Current price of the product. */
  price:
    | Price
    | undefined;
  /** Latest suggested price for the product. */
  suggestedPrice:
    | Price
    | undefined;
  /**
   * Predicted change in impressions as a fraction after introducing the
   * suggested price compared to current active price. For example, 0.05 is a 5%
   * predicted increase in impressions.
   */
  predictedImpressionsChangeFraction?:
    | number
    | undefined;
  /**
   * Predicted change in clicks as a fraction after introducing the
   * suggested price compared to current active price. For example, 0.05 is a 5%
   * predicted increase in clicks.
   */
  predictedClicksChangeFraction?:
    | number
    | undefined;
  /**
   * Predicted change in conversions as a fraction after introducing the
   * suggested price compared to current active price. For example, 0.05 is a 5%
   * predicted increase in conversions).
   */
  predictedConversionsChangeFraction?:
    | number
    | undefined;
  /** The predicted effectiveness of applying the price suggestion, bucketed. */
  effectiveness: PriceInsightsProductView_Effectiveness;
}

/**
 * Predicted effectiveness bucket.
 *
 * Effectiveness indicates which products would benefit most from price
 * changes. This rating takes into consideration the performance boost
 * predicted by adjusting the sale price and the difference between your
 * current price and the suggested price. Price suggestions with `HIGH`
 * effectiveness are predicted to drive the largest increase in performance.
 */
export enum PriceInsightsProductView_Effectiveness {
  /** EFFECTIVENESS_UNSPECIFIED - Effectiveness is unknown. */
  EFFECTIVENESS_UNSPECIFIED = 0,
  /** LOW - Effectiveness is low. */
  LOW = 1,
  /** MEDIUM - Effectiveness is medium. */
  MEDIUM = 2,
  /** HIGH - Effectiveness is high. */
  HIGH = 3,
  UNRECOGNIZED = -1,
}

export function priceInsightsProductView_EffectivenessFromJSON(object: any): PriceInsightsProductView_Effectiveness {
  switch (object) {
    case 0:
    case "EFFECTIVENESS_UNSPECIFIED":
      return PriceInsightsProductView_Effectiveness.EFFECTIVENESS_UNSPECIFIED;
    case 1:
    case "LOW":
      return PriceInsightsProductView_Effectiveness.LOW;
    case 2:
    case "MEDIUM":
      return PriceInsightsProductView_Effectiveness.MEDIUM;
    case 3:
    case "HIGH":
      return PriceInsightsProductView_Effectiveness.HIGH;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PriceInsightsProductView_Effectiveness.UNRECOGNIZED;
  }
}

export function priceInsightsProductView_EffectivenessToJSON(object: PriceInsightsProductView_Effectiveness): string {
  switch (object) {
    case PriceInsightsProductView_Effectiveness.EFFECTIVENESS_UNSPECIFIED:
      return "EFFECTIVENESS_UNSPECIFIED";
    case PriceInsightsProductView_Effectiveness.LOW:
      return "LOW";
    case PriceInsightsProductView_Effectiveness.MEDIUM:
      return "MEDIUM";
    case PriceInsightsProductView_Effectiveness.HIGH:
      return "HIGH";
    case PriceInsightsProductView_Effectiveness.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * Fields available for query in `best_sellers_product_cluster_view` table.
 *
 * [Best sellers](https://support.google.com/merchants/answer/9488679) report
 * with top product clusters. A product cluster is a grouping for different
 * offers and variants that represent the same product, for example, Google
 * Pixel 7.
 *
 * Values are only set for fields requested explicitly in the request's search
 * query.
 */
export interface BestSellersProductClusterView {
  /**
   * Report date. The value of this field can only be one of the following:
   *
   * *   The first day of the week (Monday) for weekly reports,
   * *   The first day of the month for monthly reports.
   *
   * Required in the `SELECT` clause. If a `WHERE` condition on `report_date` is
   * not specified in the query, the latest available weekly or monthly report
   * is returned.
   */
  reportDate:
    | DateMessage
    | undefined;
  /**
   * Granularity of the report. The ranking can be done over a week or a month
   * timeframe.
   *
   * Required in the `SELECT` clause. Condition on `report_granularity` is
   * required in the `WHERE` clause.
   */
  reportGranularity?:
    | ReportGranularity_ReportGranularityEnum
    | undefined;
  /**
   * Country where the ranking is calculated. Represented in the ISO 3166
   * format.
   *
   * Required in the `SELECT` clause. Condition on `report_country_code` is
   * required in the `WHERE` clause.
   */
  reportCountryCode?:
    | string
    | undefined;
  /**
   * Google product category ID to calculate the ranking for, represented in
   * [Google's product
   * taxonomy](https://support.google.com/merchants/answer/6324436).
   *
   * Required in the `SELECT` clause. If a `WHERE` condition on
   * `report_category_id` is not specified in the query, rankings for all
   * top-level categories are returned.
   */
  reportCategoryId?:
    | Long
    | undefined;
  /** Title of the product cluster. */
  title?:
    | string
    | undefined;
  /** Brand of the product cluster. */
  brand?:
    | string
    | undefined;
  /**
   * Product category (1st level) of the product cluster, represented in
   * [Google's product
   * taxonomy](https://support.google.com/merchants/answer/6324436).
   */
  categoryL1?:
    | string
    | undefined;
  /**
   * Product category (2nd level) of the product cluster, represented in
   * [Google's product
   * taxonomy](https://support.google.com/merchants/answer/6324436).
   */
  categoryL2?:
    | string
    | undefined;
  /**
   * Product category (3rd level) of the product cluster, represented in
   * [Google's product
   * taxonomy](https://support.google.com/merchants/answer/6324436).
   */
  categoryL3?:
    | string
    | undefined;
  /**
   * Product category (4th level) of the product cluster, represented in
   * [Google's product
   * taxonomy](https://support.google.com/merchants/answer/6324436).
   */
  categoryL4?:
    | string
    | undefined;
  /**
   * Product category (5th level) of the product cluster, represented in
   * [Google's product
   * taxonomy](https://support.google.com/merchants/answer/6324436).
   */
  categoryL5?:
    | string
    | undefined;
  /** GTINs of example variants of the product cluster. */
  variantGtins: string[];
  /**
   * Whether the product cluster is `IN_STOCK` in your product data source in at
   * least one of the countries, `OUT_OF_STOCK` in your product data source in
   * all countries, or `NOT_IN_INVENTORY` at all.
   *
   * The field doesn't take the Best sellers report country filter into account.
   */
  inventoryStatus?:
    | BestSellersProductClusterView_InventoryStatus
    | undefined;
  /**
   * Whether there is at least one product of the brand currently `IN_STOCK` in
   * your product data source in at least one of the countries, all products are
   * `OUT_OF_STOCK` in your product data source in all countries, or
   * `NOT_IN_INVENTORY`.
   *
   * The field doesn't take the Best sellers report country filter into account.
   */
  brandInventoryStatus?:
    | BestSellersProductClusterView_InventoryStatus
    | undefined;
  /**
   * Popularity of the product cluster on Ads and organic surfaces, in the
   * selected category and country, based on the estimated number of units sold.
   */
  rank?:
    | Long
    | undefined;
  /** Popularity rank in the previous week or month. */
  previousRank?:
    | Long
    | undefined;
  /**
   * Estimated demand in relation to the product cluster with the highest
   * popularity rank in the same category and country.
   */
  relativeDemand?:
    | RelativeDemand_RelativeDemandEnum
    | undefined;
  /**
   * Estimated demand in relation to the product cluster with the highest
   * popularity rank in the same category and country in the previous week or
   * month.
   */
  previousRelativeDemand?:
    | RelativeDemand_RelativeDemandEnum
    | undefined;
  /** Change in the estimated demand. Whether it rose, sank or remained flat. */
  relativeDemandChange?: RelativeDemandChangeType_RelativeDemandChangeTypeEnum | undefined;
}

/** Status of the product cluster or brand in your inventory. */
export enum BestSellersProductClusterView_InventoryStatus {
  /** INVENTORY_STATUS_UNSPECIFIED - Not specified. */
  INVENTORY_STATUS_UNSPECIFIED = 0,
  /** IN_STOCK - You have a product for this product cluster or brand in stock. */
  IN_STOCK = 1,
  /**
   * OUT_OF_STOCK - You have a product for this product cluster or brand in inventory but it
   * is currently out of stock.
   */
  OUT_OF_STOCK = 2,
  /** NOT_IN_INVENTORY - You do not have a product for this product cluster or brand in inventory. */
  NOT_IN_INVENTORY = 3,
  UNRECOGNIZED = -1,
}

export function bestSellersProductClusterView_InventoryStatusFromJSON(
  object: any,
): BestSellersProductClusterView_InventoryStatus {
  switch (object) {
    case 0:
    case "INVENTORY_STATUS_UNSPECIFIED":
      return BestSellersProductClusterView_InventoryStatus.INVENTORY_STATUS_UNSPECIFIED;
    case 1:
    case "IN_STOCK":
      return BestSellersProductClusterView_InventoryStatus.IN_STOCK;
    case 2:
    case "OUT_OF_STOCK":
      return BestSellersProductClusterView_InventoryStatus.OUT_OF_STOCK;
    case 3:
    case "NOT_IN_INVENTORY":
      return BestSellersProductClusterView_InventoryStatus.NOT_IN_INVENTORY;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BestSellersProductClusterView_InventoryStatus.UNRECOGNIZED;
  }
}

export function bestSellersProductClusterView_InventoryStatusToJSON(
  object: BestSellersProductClusterView_InventoryStatus,
): string {
  switch (object) {
    case BestSellersProductClusterView_InventoryStatus.INVENTORY_STATUS_UNSPECIFIED:
      return "INVENTORY_STATUS_UNSPECIFIED";
    case BestSellersProductClusterView_InventoryStatus.IN_STOCK:
      return "IN_STOCK";
    case BestSellersProductClusterView_InventoryStatus.OUT_OF_STOCK:
      return "OUT_OF_STOCK";
    case BestSellersProductClusterView_InventoryStatus.NOT_IN_INVENTORY:
      return "NOT_IN_INVENTORY";
    case BestSellersProductClusterView_InventoryStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * Fields available for query in `best_sellers_brand_view` table.
 *
 * [Best sellers](https://support.google.com/merchants/answer/9488679) report
 * with top brands.
 *
 * Values are only set for fields requested explicitly in the request's search
 * query.
 */
export interface BestSellersBrandView {
  /**
   * Report date. The value of this field can only be one of the following:
   *
   * *   The first day of the week (Monday) for weekly reports,
   * *   The first day of the month for monthly reports.
   *
   * Required in the `SELECT` clause. If a `WHERE` condition on `report_date` is
   * not specified in the query, the latest available weekly or monthly report
   * is returned.
   */
  reportDate:
    | DateMessage
    | undefined;
  /**
   * Granularity of the report. The ranking can be done over a week or a month
   * timeframe.
   *
   * Required in the `SELECT` clause. Condition on `report_granularity` is
   * required in the `WHERE` clause.
   */
  reportGranularity?:
    | ReportGranularity_ReportGranularityEnum
    | undefined;
  /**
   * Country where the ranking is calculated. Represented in the ISO 3166
   * format.
   *
   * Required in the `SELECT` clause. Condition on `report_country_code` is
   * required in the `WHERE` clause.
   */
  reportCountryCode?:
    | string
    | undefined;
  /**
   * Google product category ID to calculate the ranking for, represented in
   * [Google's product
   * taxonomy](https://support.google.com/merchants/answer/6324436).
   *
   * Required in the `SELECT` clause. If a `WHERE` condition on
   * `report_category_id` is not specified in the query, rankings for all
   * top-level categories are returned.
   */
  reportCategoryId?:
    | Long
    | undefined;
  /** Name of the brand. */
  brand?:
    | string
    | undefined;
  /**
   * Popularity of the brand on Ads and organic surfaces, in the selected
   * category and country, based on the estimated number of units sold.
   */
  rank?:
    | Long
    | undefined;
  /** Popularity rank in the previous week or month. */
  previousRank?:
    | Long
    | undefined;
  /**
   * Estimated demand in relation to the brand with the highest popularity rank
   * in the same category and country.
   */
  relativeDemand?:
    | RelativeDemand_RelativeDemandEnum
    | undefined;
  /**
   * Estimated demand in relation to the brand with the highest popularity rank
   * in the same category and country in the previous week or month.
   */
  previousRelativeDemand?:
    | RelativeDemand_RelativeDemandEnum
    | undefined;
  /** Change in the estimated demand. Whether it rose, sank or remained flat. */
  relativeDemandChange?: RelativeDemandChangeType_RelativeDemandChangeTypeEnum | undefined;
}

/**
 * Fields available for query in `non_product_performance_view` table.
 *
 * Performance data on images and online store links leading to your non-product
 * pages. This includes performance metrics (for example, `clicks`)
 * and dimensions according to which performance metrics are segmented (for
 * example, `date`).
 *
 * Segment fields cannot be selected in queries without also selecting at least
 * one metric field.
 *
 * Values are only set for fields requested explicitly in the request's search
 * query.
 */
export interface NonProductPerformanceView {
  /**
   * Date in the merchant timezone to which metrics apply. Segment.
   *
   * Condition on `date` is required in the `WHERE` clause.
   */
  date:
    | DateMessage
    | undefined;
  /**
   * First day of the week (Monday) of the metrics date in the merchant
   * timezone. Segment.
   */
  week:
    | DateMessage
    | undefined;
  /**
   * Number of clicks on images and online store links leading to your
   * non-product pages. Metric.
   */
  clicks?:
    | Long
    | undefined;
  /**
   * Number of times images and online store links leading to your non-product
   * pages were shown. Metric.
   */
  impressions?:
    | Long
    | undefined;
  /**
   * Click-through rate - the number of clicks (`clicks`) divided by the number
   * of impressions (`impressions`) of images and online store links leading to
   * your non-product pages. Metric.
   */
  clickThroughRate?: number | undefined;
}

/**
 * Fields available for query in `competitive_visibility_competitor_view` table.
 *
 * [Competitive
 * visibility](https://support.google.com/merchants/answer/11366442) report with
 * businesses with similar visibility.
 *
 * Values are only set for fields requested explicitly in the request's search
 * query.
 */
export interface CompetitiveVisibilityCompetitorView {
  /**
   * Date of this row.
   *
   * A condition on `date` is required in the `WHERE` clause.
   */
  date:
    | DateMessage
    | undefined;
  /**
   * Domain of your competitor or your domain, if 'is_your_domain' is true.
   *
   * Required in the `SELECT` clause. Cannot be filtered on in the 'WHERE'
   * clause.
   */
  domain?:
    | string
    | undefined;
  /**
   * True if this row contains data for your domain.
   *
   * Cannot be filtered on in the 'WHERE' clause.
   */
  isYourDomain?:
    | boolean
    | undefined;
  /**
   * Country where impressions appeared.
   *
   * Required in the `SELECT` clause. A condition on `report_country_code` is
   * required in the `WHERE` clause.
   */
  reportCountryCode?:
    | string
    | undefined;
  /**
   * Google product category ID to calculate the report for, represented in
   * [Google's product
   * taxonomy](https://support.google.com/merchants/answer/6324436).
   *
   * Required in the `SELECT` clause. A condition on `report_category_id` is
   * required in the `WHERE` clause.
   */
  reportCategoryId?:
    | Long
    | undefined;
  /**
   * Traffic source of impressions.
   *
   * Required in the `SELECT` clause.
   */
  trafficSource?:
    | TrafficSource_TrafficSourceEnum
    | undefined;
  /**
   * Position of the domain in the similar businesses ranking for the selected
   * keys (`date`, `report_category_id`, `report_country_code`,
   * `traffic_source`) based on impressions. 1 is the highest.
   *
   * Cannot be filtered on in the 'WHERE' clause.
   */
  rank?:
    | Long
    | undefined;
  /**
   * [Ads / organic ratio]
   * (https://support.google.com/merchants/answer/11366442#zippy=%2Cads-free-ratio)
   * shows how often the domain receives impressions from Shopping ads compared
   * to organic traffic. The number is rounded and bucketed.
   *
   * Cannot be filtered on in the 'WHERE' clause.
   */
  adsOrganicRatio?:
    | number
    | undefined;
  /**
   * [Page overlap rate]
   * (https://support.google.com/merchants/answer/11366442#zippy=%2Cpage-overlap-rate)
   * shows how frequently competing retailers’ offers are shown together with
   * your offers on the same page.
   *
   * Cannot be filtered on in the 'WHERE' clause.
   */
  pageOverlapRate?:
    | number
    | undefined;
  /**
   * [Higher position rate]
   * (https://support.google.com/merchants/answer/11366442#zippy=%2Chigher-position-rate)
   * shows how often a competitor’s offer got placed in a higher position on the
   * page than your offer.
   *
   * Cannot be filtered on in the 'WHERE' clause.
   */
  higherPositionRate?:
    | number
    | undefined;
  /**
   * [Relative visibility]
   * (https://support.google.com/merchants/answer/11366442#zippy=%2Crelative-visibility)
   * shows how often your competitors’ offers are shown compared to your offers.
   * In other words, this is the number of displayed impressions of a competitor
   * retailer divided by the number of your displayed impressions during a
   * selected time range for a selected product category and country.
   *
   * Cannot be filtered on in the 'WHERE' clause.
   */
  relativeVisibility?: number | undefined;
}

/**
 * Fields available for query in `competitive_visibility_top_merchant_view`
 * table.
 *
 * [Competitive
 * visibility](https://support.google.com/merchants/answer/11366442) report with
 * business with highest visibility.
 *
 * Values are only set for fields requested explicitly in the request's search
 * query.
 */
export interface CompetitiveVisibilityTopMerchantView {
  /**
   * Date of this row.
   *
   * Cannot be selected in the `SELECT` clause. A condition on `date` is
   * required in the `WHERE` clause.
   */
  date:
    | DateMessage
    | undefined;
  /**
   * Domain of your competitor or your domain, if 'is_your_domain' is true.
   *
   * Required in the `SELECT` clause. Cannot be filtered on in the 'WHERE'
   * clause.
   */
  domain?:
    | string
    | undefined;
  /**
   * True if this row contains data for your domain.
   *
   * Cannot be filtered on in the 'WHERE' clause.
   */
  isYourDomain?:
    | boolean
    | undefined;
  /**
   * Country where impressions appeared.
   *
   * Required in the `SELECT` clause. A condition on `report_country_code` is
   * required in the `WHERE` clause.
   */
  reportCountryCode?:
    | string
    | undefined;
  /**
   * Google product category ID to calculate the report for, represented in
   * [Google's product
   * taxonomy](https://support.google.com/merchants/answer/6324436).
   *
   * Required in the `SELECT` clause. A condition on `report_category_id` is
   * required in the `WHERE` clause.
   */
  reportCategoryId?:
    | Long
    | undefined;
  /**
   * Traffic source of impressions.
   *
   * Required in the `SELECT` clause.
   */
  trafficSource?:
    | TrafficSource_TrafficSourceEnum
    | undefined;
  /**
   * Position of the domain in the top merchants ranking for the selected keys
   * (`date`, `report_category_id`, `report_country_code`, `traffic_source`)
   * based on impressions. 1 is the highest.
   *
   * Cannot be filtered on in the 'WHERE' clause.
   */
  rank?:
    | Long
    | undefined;
  /**
   * [Ads / organic ratio]
   * (https://support.google.com/merchants/answer/11366442#zippy=%2Cads-free-ratio)
   * shows how often the domain receives impressions from Shopping ads compared
   * to organic traffic. The number is rounded and bucketed.
   *
   * Cannot be filtered on in the 'WHERE' clause.
   */
  adsOrganicRatio?:
    | number
    | undefined;
  /**
   * [Page overlap rate]
   * (https://support.google.com/merchants/answer/11366442#zippy=%2Cpage-overlap-rate)
   * shows how frequently competing retailers’ offers are shown together with
   * your offers on the same page.
   *
   * Cannot be filtered on in the 'WHERE' clause.
   */
  pageOverlapRate?:
    | number
    | undefined;
  /**
   * [Higher position rate]
   * (https://support.google.com/merchants/answer/11366442#zippy=%2Chigher-position-rate)
   * shows how often a competitor’s offer got placed in a higher position on the
   * page than your offer.
   *
   * Cannot be filtered on in the 'WHERE' clause.
   */
  higherPositionRate?: number | undefined;
}

/**
 * Fields available for query in `competitive_visibility_benchmark_view` table.
 *
 * [Competitive
 * visibility](https://support.google.com/merchants/answer/11366442) report with
 * the category benchmark.
 *
 * Values are only set for fields requested explicitly in the request's search
 * query.
 */
export interface CompetitiveVisibilityBenchmarkView {
  /**
   * Date of this row.
   *
   * Required in the `SELECT` clause. A condition on `date` is required in the
   * `WHERE` clause.
   */
  date:
    | DateMessage
    | undefined;
  /**
   * Country where impressions appeared.
   *
   * Required in the `SELECT` clause. A condition on `report_country_code` is
   * required in the `WHERE` clause.
   */
  reportCountryCode?:
    | string
    | undefined;
  /**
   * Google product category ID to calculate the report for, represented in
   * [Google's product
   * taxonomy](https://support.google.com/merchants/answer/6324436).
   *
   * Required in the `SELECT` clause. A condition on `report_category_id` is
   * required in the `WHERE` clause.
   */
  reportCategoryId?:
    | Long
    | undefined;
  /**
   * Traffic source of impressions.
   *
   * Required in the `SELECT` clause.
   */
  trafficSource?:
    | TrafficSource_TrafficSourceEnum
    | undefined;
  /**
   * Change in visibility based on impressions for your domain with respect to
   * the start of the selected time range (or first day with non-zero
   * impressions).
   *
   * Cannot be filtered on in the 'WHERE' clause.
   */
  yourDomainVisibilityTrend?:
    | number
    | undefined;
  /**
   * Change in visibility based on impressions with respect to the start of the
   * selected time range (or first day with non-zero impressions) for a
   * combined set of merchants with highest visibility approximating the
   * market.
   *
   * Cannot be filtered on in the 'WHERE' clause.
   */
  categoryBenchmarkVisibilityTrend?: number | undefined;
}

/**
 * Marketing method used to promote your products on Google (organic versus
 * ads).
 */
export interface MarketingMethod {
}

/** Marketing method values. */
export enum MarketingMethod_MarketingMethodEnum {
  /** MARKETING_METHOD_ENUM_UNSPECIFIED - Not specified. */
  MARKETING_METHOD_ENUM_UNSPECIFIED = 0,
  /** ORGANIC - Organic marketing. */
  ORGANIC = 1,
  /** ADS - Ads-based marketing. */
  ADS = 2,
  UNRECOGNIZED = -1,
}

export function marketingMethod_MarketingMethodEnumFromJSON(object: any): MarketingMethod_MarketingMethodEnum {
  switch (object) {
    case 0:
    case "MARKETING_METHOD_ENUM_UNSPECIFIED":
      return MarketingMethod_MarketingMethodEnum.MARKETING_METHOD_ENUM_UNSPECIFIED;
    case 1:
    case "ORGANIC":
      return MarketingMethod_MarketingMethodEnum.ORGANIC;
    case 2:
    case "ADS":
      return MarketingMethod_MarketingMethodEnum.ADS;
    case -1:
    case "UNRECOGNIZED":
    default:
      return MarketingMethod_MarketingMethodEnum.UNRECOGNIZED;
  }
}

export function marketingMethod_MarketingMethodEnumToJSON(object: MarketingMethod_MarketingMethodEnum): string {
  switch (object) {
    case MarketingMethod_MarketingMethodEnum.MARKETING_METHOD_ENUM_UNSPECIFIED:
      return "MARKETING_METHOD_ENUM_UNSPECIFIED";
    case MarketingMethod_MarketingMethodEnum.ORGANIC:
      return "ORGANIC";
    case MarketingMethod_MarketingMethodEnum.ADS:
      return "ADS";
    case MarketingMethod_MarketingMethodEnum.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * Granularity of the Best sellers report. Best sellers reports are computed
 * over a week and a month timeframe.
 */
export interface ReportGranularity {
}

/** Report granularity values. */
export enum ReportGranularity_ReportGranularityEnum {
  /** REPORT_GRANULARITY_ENUM_UNSPECIFIED - Not specified. */
  REPORT_GRANULARITY_ENUM_UNSPECIFIED = 0,
  /** WEEKLY - Report is computed over a week timeframe. */
  WEEKLY = 1,
  /** MONTHLY - Report is computed over a month timeframe. */
  MONTHLY = 2,
  UNRECOGNIZED = -1,
}

export function reportGranularity_ReportGranularityEnumFromJSON(object: any): ReportGranularity_ReportGranularityEnum {
  switch (object) {
    case 0:
    case "REPORT_GRANULARITY_ENUM_UNSPECIFIED":
      return ReportGranularity_ReportGranularityEnum.REPORT_GRANULARITY_ENUM_UNSPECIFIED;
    case 1:
    case "WEEKLY":
      return ReportGranularity_ReportGranularityEnum.WEEKLY;
    case 2:
    case "MONTHLY":
      return ReportGranularity_ReportGranularityEnum.MONTHLY;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ReportGranularity_ReportGranularityEnum.UNRECOGNIZED;
  }
}

export function reportGranularity_ReportGranularityEnumToJSON(object: ReportGranularity_ReportGranularityEnum): string {
  switch (object) {
    case ReportGranularity_ReportGranularityEnum.REPORT_GRANULARITY_ENUM_UNSPECIFIED:
      return "REPORT_GRANULARITY_ENUM_UNSPECIFIED";
    case ReportGranularity_ReportGranularityEnum.WEEKLY:
      return "WEEKLY";
    case ReportGranularity_ReportGranularityEnum.MONTHLY:
      return "MONTHLY";
    case ReportGranularity_ReportGranularityEnum.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Relative demand of a product cluster or brand in the Best sellers report. */
export interface RelativeDemand {
}

/** Relative demand values. */
export enum RelativeDemand_RelativeDemandEnum {
  /** RELATIVE_DEMAND_ENUM_UNSPECIFIED - Not specified. */
  RELATIVE_DEMAND_ENUM_UNSPECIFIED = 0,
  /**
   * VERY_LOW - Demand is 0-5% of the demand of the highest ranked product cluster or
   * brand.
   */
  VERY_LOW = 10,
  /**
   * LOW - Demand is 6-10% of the demand of the highest ranked product cluster or
   * brand.
   */
  LOW = 20,
  /**
   * MEDIUM - Demand is 11-20% of the demand of the highest ranked product cluster or
   * brand.
   */
  MEDIUM = 30,
  /**
   * HIGH - Demand is 21-50% of the demand of the highest ranked product cluster or
   * brand.
   */
  HIGH = 40,
  /**
   * VERY_HIGH - Demand is 51-100% of the demand of the highest ranked product cluster or
   * brand.
   */
  VERY_HIGH = 50,
  UNRECOGNIZED = -1,
}

export function relativeDemand_RelativeDemandEnumFromJSON(object: any): RelativeDemand_RelativeDemandEnum {
  switch (object) {
    case 0:
    case "RELATIVE_DEMAND_ENUM_UNSPECIFIED":
      return RelativeDemand_RelativeDemandEnum.RELATIVE_DEMAND_ENUM_UNSPECIFIED;
    case 10:
    case "VERY_LOW":
      return RelativeDemand_RelativeDemandEnum.VERY_LOW;
    case 20:
    case "LOW":
      return RelativeDemand_RelativeDemandEnum.LOW;
    case 30:
    case "MEDIUM":
      return RelativeDemand_RelativeDemandEnum.MEDIUM;
    case 40:
    case "HIGH":
      return RelativeDemand_RelativeDemandEnum.HIGH;
    case 50:
    case "VERY_HIGH":
      return RelativeDemand_RelativeDemandEnum.VERY_HIGH;
    case -1:
    case "UNRECOGNIZED":
    default:
      return RelativeDemand_RelativeDemandEnum.UNRECOGNIZED;
  }
}

export function relativeDemand_RelativeDemandEnumToJSON(object: RelativeDemand_RelativeDemandEnum): string {
  switch (object) {
    case RelativeDemand_RelativeDemandEnum.RELATIVE_DEMAND_ENUM_UNSPECIFIED:
      return "RELATIVE_DEMAND_ENUM_UNSPECIFIED";
    case RelativeDemand_RelativeDemandEnum.VERY_LOW:
      return "VERY_LOW";
    case RelativeDemand_RelativeDemandEnum.LOW:
      return "LOW";
    case RelativeDemand_RelativeDemandEnum.MEDIUM:
      return "MEDIUM";
    case RelativeDemand_RelativeDemandEnum.HIGH:
      return "HIGH";
    case RelativeDemand_RelativeDemandEnum.VERY_HIGH:
      return "VERY_HIGH";
    case RelativeDemand_RelativeDemandEnum.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * Relative demand of a product cluster or brand in the Best sellers report
 * compared to the previous time period.
 */
export interface RelativeDemandChangeType {
}

/** Relative demand change type values. */
export enum RelativeDemandChangeType_RelativeDemandChangeTypeEnum {
  /** RELATIVE_DEMAND_CHANGE_TYPE_ENUM_UNSPECIFIED - Not specified. */
  RELATIVE_DEMAND_CHANGE_TYPE_ENUM_UNSPECIFIED = 0,
  /** SINKER - Relative demand is lower than the previous time period. */
  SINKER = 1,
  /** FLAT - Relative demand is equal to the previous time period. */
  FLAT = 2,
  /** RISER - Relative demand is higher than the previous time period. */
  RISER = 3,
  UNRECOGNIZED = -1,
}

export function relativeDemandChangeType_RelativeDemandChangeTypeEnumFromJSON(
  object: any,
): RelativeDemandChangeType_RelativeDemandChangeTypeEnum {
  switch (object) {
    case 0:
    case "RELATIVE_DEMAND_CHANGE_TYPE_ENUM_UNSPECIFIED":
      return RelativeDemandChangeType_RelativeDemandChangeTypeEnum.RELATIVE_DEMAND_CHANGE_TYPE_ENUM_UNSPECIFIED;
    case 1:
    case "SINKER":
      return RelativeDemandChangeType_RelativeDemandChangeTypeEnum.SINKER;
    case 2:
    case "FLAT":
      return RelativeDemandChangeType_RelativeDemandChangeTypeEnum.FLAT;
    case 3:
    case "RISER":
      return RelativeDemandChangeType_RelativeDemandChangeTypeEnum.RISER;
    case -1:
    case "UNRECOGNIZED":
    default:
      return RelativeDemandChangeType_RelativeDemandChangeTypeEnum.UNRECOGNIZED;
  }
}

export function relativeDemandChangeType_RelativeDemandChangeTypeEnumToJSON(
  object: RelativeDemandChangeType_RelativeDemandChangeTypeEnum,
): string {
  switch (object) {
    case RelativeDemandChangeType_RelativeDemandChangeTypeEnum.RELATIVE_DEMAND_CHANGE_TYPE_ENUM_UNSPECIFIED:
      return "RELATIVE_DEMAND_CHANGE_TYPE_ENUM_UNSPECIFIED";
    case RelativeDemandChangeType_RelativeDemandChangeTypeEnum.SINKER:
      return "SINKER";
    case RelativeDemandChangeType_RelativeDemandChangeTypeEnum.FLAT:
      return "FLAT";
    case RelativeDemandChangeType_RelativeDemandChangeTypeEnum.RISER:
      return "RISER";
    case RelativeDemandChangeType_RelativeDemandChangeTypeEnum.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Traffic source of impressions in the Competitive visibility report. */
export interface TrafficSource {
}

/** Traffic source values. */
export enum TrafficSource_TrafficSourceEnum {
  /** TRAFFIC_SOURCE_ENUM_UNSPECIFIED - Not specified. */
  TRAFFIC_SOURCE_ENUM_UNSPECIFIED = 0,
  /** ORGANIC - Organic traffic. */
  ORGANIC = 1,
  /** ADS - Traffic from ads. */
  ADS = 2,
  /** ALL - Organic and ads traffic. */
  ALL = 3,
  UNRECOGNIZED = -1,
}

export function trafficSource_TrafficSourceEnumFromJSON(object: any): TrafficSource_TrafficSourceEnum {
  switch (object) {
    case 0:
    case "TRAFFIC_SOURCE_ENUM_UNSPECIFIED":
      return TrafficSource_TrafficSourceEnum.TRAFFIC_SOURCE_ENUM_UNSPECIFIED;
    case 1:
    case "ORGANIC":
      return TrafficSource_TrafficSourceEnum.ORGANIC;
    case 2:
    case "ADS":
      return TrafficSource_TrafficSourceEnum.ADS;
    case 3:
    case "ALL":
      return TrafficSource_TrafficSourceEnum.ALL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return TrafficSource_TrafficSourceEnum.UNRECOGNIZED;
  }
}

export function trafficSource_TrafficSourceEnumToJSON(object: TrafficSource_TrafficSourceEnum): string {
  switch (object) {
    case TrafficSource_TrafficSourceEnum.TRAFFIC_SOURCE_ENUM_UNSPECIFIED:
      return "TRAFFIC_SOURCE_ENUM_UNSPECIFIED";
    case TrafficSource_TrafficSourceEnum.ORGANIC:
      return "ORGANIC";
    case TrafficSource_TrafficSourceEnum.ADS:
      return "ADS";
    case TrafficSource_TrafficSourceEnum.ALL:
      return "ALL";
    case TrafficSource_TrafficSourceEnum.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseSearchRequest(): SearchRequest {
  return { parent: "", query: "", pageSize: 0, pageToken: "" };
}

export const SearchRequest: MessageFns<SearchRequest> = {
  encode(message: SearchRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.query !== "") {
      writer.uint32(18).string(message.query);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(34).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.query = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      query: isSet(object.query) ? globalThis.String(object.query) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: SearchRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.query !== "") {
      obj.query = message.query;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<SearchRequest>): SearchRequest {
    return SearchRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SearchRequest>): SearchRequest {
    const message = createBaseSearchRequest();
    message.parent = object.parent ?? "";
    message.query = object.query ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseSearchResponse(): SearchResponse {
  return { results: [], nextPageToken: "" };
}

export const SearchResponse: MessageFns<SearchResponse> = {
  encode(message: SearchResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.results) {
      ReportRow.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.results.push(ReportRow.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchResponse {
    return {
      results: globalThis.Array.isArray(object?.results) ? object.results.map((e: any) => ReportRow.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: SearchResponse): unknown {
    const obj: any = {};
    if (message.results?.length) {
      obj.results = message.results.map((e) => ReportRow.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<SearchResponse>): SearchResponse {
    return SearchResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SearchResponse>): SearchResponse {
    const message = createBaseSearchResponse();
    message.results = object.results?.map((e) => ReportRow.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseReportRow(): ReportRow {
  return {
    productPerformanceView: undefined,
    nonProductPerformanceView: undefined,
    productView: undefined,
    priceCompetitivenessProductView: undefined,
    priceInsightsProductView: undefined,
    bestSellersProductClusterView: undefined,
    bestSellersBrandView: undefined,
    competitiveVisibilityCompetitorView: undefined,
    competitiveVisibilityTopMerchantView: undefined,
    competitiveVisibilityBenchmarkView: undefined,
  };
}

export const ReportRow: MessageFns<ReportRow> = {
  encode(message: ReportRow, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.productPerformanceView !== undefined) {
      ProductPerformanceView.encode(message.productPerformanceView, writer.uint32(10).fork()).join();
    }
    if (message.nonProductPerformanceView !== undefined) {
      NonProductPerformanceView.encode(message.nonProductPerformanceView, writer.uint32(58).fork()).join();
    }
    if (message.productView !== undefined) {
      ProductView.encode(message.productView, writer.uint32(18).fork()).join();
    }
    if (message.priceCompetitivenessProductView !== undefined) {
      PriceCompetitivenessProductView.encode(message.priceCompetitivenessProductView, writer.uint32(26).fork()).join();
    }
    if (message.priceInsightsProductView !== undefined) {
      PriceInsightsProductView.encode(message.priceInsightsProductView, writer.uint32(34).fork()).join();
    }
    if (message.bestSellersProductClusterView !== undefined) {
      BestSellersProductClusterView.encode(message.bestSellersProductClusterView, writer.uint32(42).fork()).join();
    }
    if (message.bestSellersBrandView !== undefined) {
      BestSellersBrandView.encode(message.bestSellersBrandView, writer.uint32(50).fork()).join();
    }
    if (message.competitiveVisibilityCompetitorView !== undefined) {
      CompetitiveVisibilityCompetitorView.encode(message.competitiveVisibilityCompetitorView, writer.uint32(66).fork())
        .join();
    }
    if (message.competitiveVisibilityTopMerchantView !== undefined) {
      CompetitiveVisibilityTopMerchantView.encode(
        message.competitiveVisibilityTopMerchantView,
        writer.uint32(74).fork(),
      ).join();
    }
    if (message.competitiveVisibilityBenchmarkView !== undefined) {
      CompetitiveVisibilityBenchmarkView.encode(message.competitiveVisibilityBenchmarkView, writer.uint32(82).fork())
        .join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReportRow {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReportRow();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.productPerformanceView = ProductPerformanceView.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.nonProductPerformanceView = NonProductPerformanceView.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.productView = ProductView.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.priceCompetitivenessProductView = PriceCompetitivenessProductView.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.priceInsightsProductView = PriceInsightsProductView.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.bestSellersProductClusterView = BestSellersProductClusterView.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.bestSellersBrandView = BestSellersBrandView.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.competitiveVisibilityCompetitorView = CompetitiveVisibilityCompetitorView.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.competitiveVisibilityTopMerchantView = CompetitiveVisibilityTopMerchantView.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.competitiveVisibilityBenchmarkView = CompetitiveVisibilityBenchmarkView.decode(
            reader,
            reader.uint32(),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReportRow {
    return {
      productPerformanceView: isSet(object.productPerformanceView)
        ? ProductPerformanceView.fromJSON(object.productPerformanceView)
        : undefined,
      nonProductPerformanceView: isSet(object.nonProductPerformanceView)
        ? NonProductPerformanceView.fromJSON(object.nonProductPerformanceView)
        : undefined,
      productView: isSet(object.productView) ? ProductView.fromJSON(object.productView) : undefined,
      priceCompetitivenessProductView: isSet(object.priceCompetitivenessProductView)
        ? PriceCompetitivenessProductView.fromJSON(object.priceCompetitivenessProductView)
        : undefined,
      priceInsightsProductView: isSet(object.priceInsightsProductView)
        ? PriceInsightsProductView.fromJSON(object.priceInsightsProductView)
        : undefined,
      bestSellersProductClusterView: isSet(object.bestSellersProductClusterView)
        ? BestSellersProductClusterView.fromJSON(object.bestSellersProductClusterView)
        : undefined,
      bestSellersBrandView: isSet(object.bestSellersBrandView)
        ? BestSellersBrandView.fromJSON(object.bestSellersBrandView)
        : undefined,
      competitiveVisibilityCompetitorView: isSet(object.competitiveVisibilityCompetitorView)
        ? CompetitiveVisibilityCompetitorView.fromJSON(object.competitiveVisibilityCompetitorView)
        : undefined,
      competitiveVisibilityTopMerchantView: isSet(object.competitiveVisibilityTopMerchantView)
        ? CompetitiveVisibilityTopMerchantView.fromJSON(object.competitiveVisibilityTopMerchantView)
        : undefined,
      competitiveVisibilityBenchmarkView: isSet(object.competitiveVisibilityBenchmarkView)
        ? CompetitiveVisibilityBenchmarkView.fromJSON(object.competitiveVisibilityBenchmarkView)
        : undefined,
    };
  },

  toJSON(message: ReportRow): unknown {
    const obj: any = {};
    if (message.productPerformanceView !== undefined) {
      obj.productPerformanceView = ProductPerformanceView.toJSON(message.productPerformanceView);
    }
    if (message.nonProductPerformanceView !== undefined) {
      obj.nonProductPerformanceView = NonProductPerformanceView.toJSON(message.nonProductPerformanceView);
    }
    if (message.productView !== undefined) {
      obj.productView = ProductView.toJSON(message.productView);
    }
    if (message.priceCompetitivenessProductView !== undefined) {
      obj.priceCompetitivenessProductView = PriceCompetitivenessProductView.toJSON(
        message.priceCompetitivenessProductView,
      );
    }
    if (message.priceInsightsProductView !== undefined) {
      obj.priceInsightsProductView = PriceInsightsProductView.toJSON(message.priceInsightsProductView);
    }
    if (message.bestSellersProductClusterView !== undefined) {
      obj.bestSellersProductClusterView = BestSellersProductClusterView.toJSON(message.bestSellersProductClusterView);
    }
    if (message.bestSellersBrandView !== undefined) {
      obj.bestSellersBrandView = BestSellersBrandView.toJSON(message.bestSellersBrandView);
    }
    if (message.competitiveVisibilityCompetitorView !== undefined) {
      obj.competitiveVisibilityCompetitorView = CompetitiveVisibilityCompetitorView.toJSON(
        message.competitiveVisibilityCompetitorView,
      );
    }
    if (message.competitiveVisibilityTopMerchantView !== undefined) {
      obj.competitiveVisibilityTopMerchantView = CompetitiveVisibilityTopMerchantView.toJSON(
        message.competitiveVisibilityTopMerchantView,
      );
    }
    if (message.competitiveVisibilityBenchmarkView !== undefined) {
      obj.competitiveVisibilityBenchmarkView = CompetitiveVisibilityBenchmarkView.toJSON(
        message.competitiveVisibilityBenchmarkView,
      );
    }
    return obj;
  },

  create(base?: DeepPartial<ReportRow>): ReportRow {
    return ReportRow.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ReportRow>): ReportRow {
    const message = createBaseReportRow();
    message.productPerformanceView =
      (object.productPerformanceView !== undefined && object.productPerformanceView !== null)
        ? ProductPerformanceView.fromPartial(object.productPerformanceView)
        : undefined;
    message.nonProductPerformanceView =
      (object.nonProductPerformanceView !== undefined && object.nonProductPerformanceView !== null)
        ? NonProductPerformanceView.fromPartial(object.nonProductPerformanceView)
        : undefined;
    message.productView = (object.productView !== undefined && object.productView !== null)
      ? ProductView.fromPartial(object.productView)
      : undefined;
    message.priceCompetitivenessProductView =
      (object.priceCompetitivenessProductView !== undefined && object.priceCompetitivenessProductView !== null)
        ? PriceCompetitivenessProductView.fromPartial(object.priceCompetitivenessProductView)
        : undefined;
    message.priceInsightsProductView =
      (object.priceInsightsProductView !== undefined && object.priceInsightsProductView !== null)
        ? PriceInsightsProductView.fromPartial(object.priceInsightsProductView)
        : undefined;
    message.bestSellersProductClusterView =
      (object.bestSellersProductClusterView !== undefined && object.bestSellersProductClusterView !== null)
        ? BestSellersProductClusterView.fromPartial(object.bestSellersProductClusterView)
        : undefined;
    message.bestSellersBrandView = (object.bestSellersBrandView !== undefined && object.bestSellersBrandView !== null)
      ? BestSellersBrandView.fromPartial(object.bestSellersBrandView)
      : undefined;
    message.competitiveVisibilityCompetitorView =
      (object.competitiveVisibilityCompetitorView !== undefined && object.competitiveVisibilityCompetitorView !== null)
        ? CompetitiveVisibilityCompetitorView.fromPartial(object.competitiveVisibilityCompetitorView)
        : undefined;
    message.competitiveVisibilityTopMerchantView =
      (object.competitiveVisibilityTopMerchantView !== undefined &&
          object.competitiveVisibilityTopMerchantView !== null)
        ? CompetitiveVisibilityTopMerchantView.fromPartial(object.competitiveVisibilityTopMerchantView)
        : undefined;
    message.competitiveVisibilityBenchmarkView =
      (object.competitiveVisibilityBenchmarkView !== undefined && object.competitiveVisibilityBenchmarkView !== null)
        ? CompetitiveVisibilityBenchmarkView.fromPartial(object.competitiveVisibilityBenchmarkView)
        : undefined;
    return message;
  },
};

function createBaseProductPerformanceView(): ProductPerformanceView {
  return {
    marketingMethod: undefined,
    date: undefined,
    week: undefined,
    customerCountryCode: undefined,
    offerId: undefined,
    title: undefined,
    brand: undefined,
    categoryL1: undefined,
    categoryL2: undefined,
    categoryL3: undefined,
    categoryL4: undefined,
    categoryL5: undefined,
    productTypeL1: undefined,
    productTypeL2: undefined,
    productTypeL3: undefined,
    productTypeL4: undefined,
    productTypeL5: undefined,
    customLabel0: undefined,
    customLabel1: undefined,
    customLabel2: undefined,
    customLabel3: undefined,
    customLabel4: undefined,
    clicks: undefined,
    impressions: undefined,
    clickThroughRate: undefined,
    conversions: undefined,
    conversionValue: undefined,
    conversionRate: undefined,
  };
}

export const ProductPerformanceView: MessageFns<ProductPerformanceView> = {
  encode(message: ProductPerformanceView, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.marketingMethod !== undefined) {
      writer.uint32(8).int32(message.marketingMethod);
    }
    if (message.date !== undefined) {
      DateMessage.encode(message.date, writer.uint32(18).fork()).join();
    }
    if (message.week !== undefined) {
      DateMessage.encode(message.week, writer.uint32(26).fork()).join();
    }
    if (message.customerCountryCode !== undefined) {
      writer.uint32(34).string(message.customerCountryCode);
    }
    if (message.offerId !== undefined) {
      writer.uint32(42).string(message.offerId);
    }
    if (message.title !== undefined) {
      writer.uint32(50).string(message.title);
    }
    if (message.brand !== undefined) {
      writer.uint32(58).string(message.brand);
    }
    if (message.categoryL1 !== undefined) {
      writer.uint32(66).string(message.categoryL1);
    }
    if (message.categoryL2 !== undefined) {
      writer.uint32(74).string(message.categoryL2);
    }
    if (message.categoryL3 !== undefined) {
      writer.uint32(82).string(message.categoryL3);
    }
    if (message.categoryL4 !== undefined) {
      writer.uint32(90).string(message.categoryL4);
    }
    if (message.categoryL5 !== undefined) {
      writer.uint32(98).string(message.categoryL5);
    }
    if (message.productTypeL1 !== undefined) {
      writer.uint32(106).string(message.productTypeL1);
    }
    if (message.productTypeL2 !== undefined) {
      writer.uint32(114).string(message.productTypeL2);
    }
    if (message.productTypeL3 !== undefined) {
      writer.uint32(122).string(message.productTypeL3);
    }
    if (message.productTypeL4 !== undefined) {
      writer.uint32(130).string(message.productTypeL4);
    }
    if (message.productTypeL5 !== undefined) {
      writer.uint32(138).string(message.productTypeL5);
    }
    if (message.customLabel0 !== undefined) {
      writer.uint32(146).string(message.customLabel0);
    }
    if (message.customLabel1 !== undefined) {
      writer.uint32(154).string(message.customLabel1);
    }
    if (message.customLabel2 !== undefined) {
      writer.uint32(162).string(message.customLabel2);
    }
    if (message.customLabel3 !== undefined) {
      writer.uint32(170).string(message.customLabel3);
    }
    if (message.customLabel4 !== undefined) {
      writer.uint32(178).string(message.customLabel4);
    }
    if (message.clicks !== undefined) {
      writer.uint32(184).int64(message.clicks.toString());
    }
    if (message.impressions !== undefined) {
      writer.uint32(192).int64(message.impressions.toString());
    }
    if (message.clickThroughRate !== undefined) {
      writer.uint32(201).double(message.clickThroughRate);
    }
    if (message.conversions !== undefined) {
      writer.uint32(209).double(message.conversions);
    }
    if (message.conversionValue !== undefined) {
      Price.encode(message.conversionValue, writer.uint32(218).fork()).join();
    }
    if (message.conversionRate !== undefined) {
      writer.uint32(225).double(message.conversionRate);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProductPerformanceView {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProductPerformanceView();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.marketingMethod = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.date = DateMessage.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.week = DateMessage.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.customerCountryCode = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.offerId = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.title = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.brand = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.categoryL1 = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.categoryL2 = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.categoryL3 = reader.string();
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.categoryL4 = reader.string();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.categoryL5 = reader.string();
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.productTypeL1 = reader.string();
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.productTypeL2 = reader.string();
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.productTypeL3 = reader.string();
          continue;
        case 16:
          if (tag !== 130) {
            break;
          }

          message.productTypeL4 = reader.string();
          continue;
        case 17:
          if (tag !== 138) {
            break;
          }

          message.productTypeL5 = reader.string();
          continue;
        case 18:
          if (tag !== 146) {
            break;
          }

          message.customLabel0 = reader.string();
          continue;
        case 19:
          if (tag !== 154) {
            break;
          }

          message.customLabel1 = reader.string();
          continue;
        case 20:
          if (tag !== 162) {
            break;
          }

          message.customLabel2 = reader.string();
          continue;
        case 21:
          if (tag !== 170) {
            break;
          }

          message.customLabel3 = reader.string();
          continue;
        case 22:
          if (tag !== 178) {
            break;
          }

          message.customLabel4 = reader.string();
          continue;
        case 23:
          if (tag !== 184) {
            break;
          }

          message.clicks = Long.fromString(reader.int64().toString());
          continue;
        case 24:
          if (tag !== 192) {
            break;
          }

          message.impressions = Long.fromString(reader.int64().toString());
          continue;
        case 25:
          if (tag !== 201) {
            break;
          }

          message.clickThroughRate = reader.double();
          continue;
        case 26:
          if (tag !== 209) {
            break;
          }

          message.conversions = reader.double();
          continue;
        case 27:
          if (tag !== 218) {
            break;
          }

          message.conversionValue = Price.decode(reader, reader.uint32());
          continue;
        case 28:
          if (tag !== 225) {
            break;
          }

          message.conversionRate = reader.double();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProductPerformanceView {
    return {
      marketingMethod: isSet(object.marketingMethod)
        ? marketingMethod_MarketingMethodEnumFromJSON(object.marketingMethod)
        : undefined,
      date: isSet(object.date) ? DateMessage.fromJSON(object.date) : undefined,
      week: isSet(object.week) ? DateMessage.fromJSON(object.week) : undefined,
      customerCountryCode: isSet(object.customerCountryCode)
        ? globalThis.String(object.customerCountryCode)
        : undefined,
      offerId: isSet(object.offerId) ? globalThis.String(object.offerId) : undefined,
      title: isSet(object.title) ? globalThis.String(object.title) : undefined,
      brand: isSet(object.brand) ? globalThis.String(object.brand) : undefined,
      categoryL1: isSet(object.categoryL1) ? globalThis.String(object.categoryL1) : undefined,
      categoryL2: isSet(object.categoryL2) ? globalThis.String(object.categoryL2) : undefined,
      categoryL3: isSet(object.categoryL3) ? globalThis.String(object.categoryL3) : undefined,
      categoryL4: isSet(object.categoryL4) ? globalThis.String(object.categoryL4) : undefined,
      categoryL5: isSet(object.categoryL5) ? globalThis.String(object.categoryL5) : undefined,
      productTypeL1: isSet(object.productTypeL1) ? globalThis.String(object.productTypeL1) : undefined,
      productTypeL2: isSet(object.productTypeL2) ? globalThis.String(object.productTypeL2) : undefined,
      productTypeL3: isSet(object.productTypeL3) ? globalThis.String(object.productTypeL3) : undefined,
      productTypeL4: isSet(object.productTypeL4) ? globalThis.String(object.productTypeL4) : undefined,
      productTypeL5: isSet(object.productTypeL5) ? globalThis.String(object.productTypeL5) : undefined,
      customLabel0: isSet(object.customLabel0) ? globalThis.String(object.customLabel0) : undefined,
      customLabel1: isSet(object.customLabel1) ? globalThis.String(object.customLabel1) : undefined,
      customLabel2: isSet(object.customLabel2) ? globalThis.String(object.customLabel2) : undefined,
      customLabel3: isSet(object.customLabel3) ? globalThis.String(object.customLabel3) : undefined,
      customLabel4: isSet(object.customLabel4) ? globalThis.String(object.customLabel4) : undefined,
      clicks: isSet(object.clicks) ? Long.fromValue(object.clicks) : undefined,
      impressions: isSet(object.impressions) ? Long.fromValue(object.impressions) : undefined,
      clickThroughRate: isSet(object.clickThroughRate) ? globalThis.Number(object.clickThroughRate) : undefined,
      conversions: isSet(object.conversions) ? globalThis.Number(object.conversions) : undefined,
      conversionValue: isSet(object.conversionValue) ? Price.fromJSON(object.conversionValue) : undefined,
      conversionRate: isSet(object.conversionRate) ? globalThis.Number(object.conversionRate) : undefined,
    };
  },

  toJSON(message: ProductPerformanceView): unknown {
    const obj: any = {};
    if (message.marketingMethod !== undefined) {
      obj.marketingMethod = marketingMethod_MarketingMethodEnumToJSON(message.marketingMethod);
    }
    if (message.date !== undefined) {
      obj.date = DateMessage.toJSON(message.date);
    }
    if (message.week !== undefined) {
      obj.week = DateMessage.toJSON(message.week);
    }
    if (message.customerCountryCode !== undefined) {
      obj.customerCountryCode = message.customerCountryCode;
    }
    if (message.offerId !== undefined) {
      obj.offerId = message.offerId;
    }
    if (message.title !== undefined) {
      obj.title = message.title;
    }
    if (message.brand !== undefined) {
      obj.brand = message.brand;
    }
    if (message.categoryL1 !== undefined) {
      obj.categoryL1 = message.categoryL1;
    }
    if (message.categoryL2 !== undefined) {
      obj.categoryL2 = message.categoryL2;
    }
    if (message.categoryL3 !== undefined) {
      obj.categoryL3 = message.categoryL3;
    }
    if (message.categoryL4 !== undefined) {
      obj.categoryL4 = message.categoryL4;
    }
    if (message.categoryL5 !== undefined) {
      obj.categoryL5 = message.categoryL5;
    }
    if (message.productTypeL1 !== undefined) {
      obj.productTypeL1 = message.productTypeL1;
    }
    if (message.productTypeL2 !== undefined) {
      obj.productTypeL2 = message.productTypeL2;
    }
    if (message.productTypeL3 !== undefined) {
      obj.productTypeL3 = message.productTypeL3;
    }
    if (message.productTypeL4 !== undefined) {
      obj.productTypeL4 = message.productTypeL4;
    }
    if (message.productTypeL5 !== undefined) {
      obj.productTypeL5 = message.productTypeL5;
    }
    if (message.customLabel0 !== undefined) {
      obj.customLabel0 = message.customLabel0;
    }
    if (message.customLabel1 !== undefined) {
      obj.customLabel1 = message.customLabel1;
    }
    if (message.customLabel2 !== undefined) {
      obj.customLabel2 = message.customLabel2;
    }
    if (message.customLabel3 !== undefined) {
      obj.customLabel3 = message.customLabel3;
    }
    if (message.customLabel4 !== undefined) {
      obj.customLabel4 = message.customLabel4;
    }
    if (message.clicks !== undefined) {
      obj.clicks = (message.clicks || Long.ZERO).toString();
    }
    if (message.impressions !== undefined) {
      obj.impressions = (message.impressions || Long.ZERO).toString();
    }
    if (message.clickThroughRate !== undefined) {
      obj.clickThroughRate = message.clickThroughRate;
    }
    if (message.conversions !== undefined) {
      obj.conversions = message.conversions;
    }
    if (message.conversionValue !== undefined) {
      obj.conversionValue = Price.toJSON(message.conversionValue);
    }
    if (message.conversionRate !== undefined) {
      obj.conversionRate = message.conversionRate;
    }
    return obj;
  },

  create(base?: DeepPartial<ProductPerformanceView>): ProductPerformanceView {
    return ProductPerformanceView.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ProductPerformanceView>): ProductPerformanceView {
    const message = createBaseProductPerformanceView();
    message.marketingMethod = object.marketingMethod ?? undefined;
    message.date = (object.date !== undefined && object.date !== null)
      ? DateMessage.fromPartial(object.date)
      : undefined;
    message.week = (object.week !== undefined && object.week !== null)
      ? DateMessage.fromPartial(object.week)
      : undefined;
    message.customerCountryCode = object.customerCountryCode ?? undefined;
    message.offerId = object.offerId ?? undefined;
    message.title = object.title ?? undefined;
    message.brand = object.brand ?? undefined;
    message.categoryL1 = object.categoryL1 ?? undefined;
    message.categoryL2 = object.categoryL2 ?? undefined;
    message.categoryL3 = object.categoryL3 ?? undefined;
    message.categoryL4 = object.categoryL4 ?? undefined;
    message.categoryL5 = object.categoryL5 ?? undefined;
    message.productTypeL1 = object.productTypeL1 ?? undefined;
    message.productTypeL2 = object.productTypeL2 ?? undefined;
    message.productTypeL3 = object.productTypeL3 ?? undefined;
    message.productTypeL4 = object.productTypeL4 ?? undefined;
    message.productTypeL5 = object.productTypeL5 ?? undefined;
    message.customLabel0 = object.customLabel0 ?? undefined;
    message.customLabel1 = object.customLabel1 ?? undefined;
    message.customLabel2 = object.customLabel2 ?? undefined;
    message.customLabel3 = object.customLabel3 ?? undefined;
    message.customLabel4 = object.customLabel4 ?? undefined;
    message.clicks = (object.clicks !== undefined && object.clicks !== null)
      ? Long.fromValue(object.clicks)
      : undefined;
    message.impressions = (object.impressions !== undefined && object.impressions !== null)
      ? Long.fromValue(object.impressions)
      : undefined;
    message.clickThroughRate = object.clickThroughRate ?? undefined;
    message.conversions = object.conversions ?? undefined;
    message.conversionValue = (object.conversionValue !== undefined && object.conversionValue !== null)
      ? Price.fromPartial(object.conversionValue)
      : undefined;
    message.conversionRate = object.conversionRate ?? undefined;
    return message;
  },
};

function createBaseProductView(): ProductView {
  return {
    id: undefined,
    channel: undefined,
    languageCode: undefined,
    feedLabel: undefined,
    offerId: undefined,
    title: undefined,
    brand: undefined,
    categoryL1: undefined,
    categoryL2: undefined,
    categoryL3: undefined,
    categoryL4: undefined,
    categoryL5: undefined,
    productTypeL1: undefined,
    productTypeL2: undefined,
    productTypeL3: undefined,
    productTypeL4: undefined,
    productTypeL5: undefined,
    price: undefined,
    condition: undefined,
    availability: undefined,
    shippingLabel: undefined,
    gtin: [],
    itemGroupId: undefined,
    thumbnailLink: undefined,
    creationTime: undefined,
    expirationDate: undefined,
    aggregatedReportingContextStatus: undefined,
    itemIssues: [],
    clickPotential: 0,
    clickPotentialRank: undefined,
  };
}

export const ProductView: MessageFns<ProductView> = {
  encode(message: ProductView, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      writer.uint32(10).string(message.id);
    }
    if (message.channel !== undefined) {
      writer.uint32(224).int32(message.channel);
    }
    if (message.languageCode !== undefined) {
      writer.uint32(18).string(message.languageCode);
    }
    if (message.feedLabel !== undefined) {
      writer.uint32(26).string(message.feedLabel);
    }
    if (message.offerId !== undefined) {
      writer.uint32(34).string(message.offerId);
    }
    if (message.title !== undefined) {
      writer.uint32(42).string(message.title);
    }
    if (message.brand !== undefined) {
      writer.uint32(50).string(message.brand);
    }
    if (message.categoryL1 !== undefined) {
      writer.uint32(58).string(message.categoryL1);
    }
    if (message.categoryL2 !== undefined) {
      writer.uint32(66).string(message.categoryL2);
    }
    if (message.categoryL3 !== undefined) {
      writer.uint32(74).string(message.categoryL3);
    }
    if (message.categoryL4 !== undefined) {
      writer.uint32(82).string(message.categoryL4);
    }
    if (message.categoryL5 !== undefined) {
      writer.uint32(90).string(message.categoryL5);
    }
    if (message.productTypeL1 !== undefined) {
      writer.uint32(98).string(message.productTypeL1);
    }
    if (message.productTypeL2 !== undefined) {
      writer.uint32(106).string(message.productTypeL2);
    }
    if (message.productTypeL3 !== undefined) {
      writer.uint32(114).string(message.productTypeL3);
    }
    if (message.productTypeL4 !== undefined) {
      writer.uint32(122).string(message.productTypeL4);
    }
    if (message.productTypeL5 !== undefined) {
      writer.uint32(130).string(message.productTypeL5);
    }
    if (message.price !== undefined) {
      Price.encode(message.price, writer.uint32(138).fork()).join();
    }
    if (message.condition !== undefined) {
      writer.uint32(146).string(message.condition);
    }
    if (message.availability !== undefined) {
      writer.uint32(154).string(message.availability);
    }
    if (message.shippingLabel !== undefined) {
      writer.uint32(162).string(message.shippingLabel);
    }
    for (const v of message.gtin) {
      writer.uint32(170).string(v!);
    }
    if (message.itemGroupId !== undefined) {
      writer.uint32(178).string(message.itemGroupId);
    }
    if (message.thumbnailLink !== undefined) {
      writer.uint32(186).string(message.thumbnailLink);
    }
    if (message.creationTime !== undefined) {
      Timestamp.encode(toTimestamp(message.creationTime), writer.uint32(194).fork()).join();
    }
    if (message.expirationDate !== undefined) {
      DateMessage.encode(message.expirationDate, writer.uint32(202).fork()).join();
    }
    if (message.aggregatedReportingContextStatus !== undefined) {
      writer.uint32(208).int32(message.aggregatedReportingContextStatus);
    }
    for (const v of message.itemIssues) {
      ProductView_ItemIssue.encode(v!, writer.uint32(218).fork()).join();
    }
    if (message.clickPotential !== 0) {
      writer.uint32(232).int32(message.clickPotential);
    }
    if (message.clickPotentialRank !== undefined) {
      writer.uint32(240).int64(message.clickPotentialRank.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProductView {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProductView();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 28:
          if (tag !== 224) {
            break;
          }

          message.channel = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.languageCode = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.feedLabel = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.offerId = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.title = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.brand = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.categoryL1 = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.categoryL2 = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.categoryL3 = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.categoryL4 = reader.string();
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.categoryL5 = reader.string();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.productTypeL1 = reader.string();
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.productTypeL2 = reader.string();
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.productTypeL3 = reader.string();
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.productTypeL4 = reader.string();
          continue;
        case 16:
          if (tag !== 130) {
            break;
          }

          message.productTypeL5 = reader.string();
          continue;
        case 17:
          if (tag !== 138) {
            break;
          }

          message.price = Price.decode(reader, reader.uint32());
          continue;
        case 18:
          if (tag !== 146) {
            break;
          }

          message.condition = reader.string();
          continue;
        case 19:
          if (tag !== 154) {
            break;
          }

          message.availability = reader.string();
          continue;
        case 20:
          if (tag !== 162) {
            break;
          }

          message.shippingLabel = reader.string();
          continue;
        case 21:
          if (tag !== 170) {
            break;
          }

          message.gtin.push(reader.string());
          continue;
        case 22:
          if (tag !== 178) {
            break;
          }

          message.itemGroupId = reader.string();
          continue;
        case 23:
          if (tag !== 186) {
            break;
          }

          message.thumbnailLink = reader.string();
          continue;
        case 24:
          if (tag !== 194) {
            break;
          }

          message.creationTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 25:
          if (tag !== 202) {
            break;
          }

          message.expirationDate = DateMessage.decode(reader, reader.uint32());
          continue;
        case 26:
          if (tag !== 208) {
            break;
          }

          message.aggregatedReportingContextStatus = reader.int32() as any;
          continue;
        case 27:
          if (tag !== 218) {
            break;
          }

          message.itemIssues.push(ProductView_ItemIssue.decode(reader, reader.uint32()));
          continue;
        case 29:
          if (tag !== 232) {
            break;
          }

          message.clickPotential = reader.int32() as any;
          continue;
        case 30:
          if (tag !== 240) {
            break;
          }

          message.clickPotentialRank = Long.fromString(reader.int64().toString());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProductView {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : undefined,
      channel: isSet(object.channel) ? channel_ChannelEnumFromJSON(object.channel) : undefined,
      languageCode: isSet(object.languageCode) ? globalThis.String(object.languageCode) : undefined,
      feedLabel: isSet(object.feedLabel) ? globalThis.String(object.feedLabel) : undefined,
      offerId: isSet(object.offerId) ? globalThis.String(object.offerId) : undefined,
      title: isSet(object.title) ? globalThis.String(object.title) : undefined,
      brand: isSet(object.brand) ? globalThis.String(object.brand) : undefined,
      categoryL1: isSet(object.categoryL1) ? globalThis.String(object.categoryL1) : undefined,
      categoryL2: isSet(object.categoryL2) ? globalThis.String(object.categoryL2) : undefined,
      categoryL3: isSet(object.categoryL3) ? globalThis.String(object.categoryL3) : undefined,
      categoryL4: isSet(object.categoryL4) ? globalThis.String(object.categoryL4) : undefined,
      categoryL5: isSet(object.categoryL5) ? globalThis.String(object.categoryL5) : undefined,
      productTypeL1: isSet(object.productTypeL1) ? globalThis.String(object.productTypeL1) : undefined,
      productTypeL2: isSet(object.productTypeL2) ? globalThis.String(object.productTypeL2) : undefined,
      productTypeL3: isSet(object.productTypeL3) ? globalThis.String(object.productTypeL3) : undefined,
      productTypeL4: isSet(object.productTypeL4) ? globalThis.String(object.productTypeL4) : undefined,
      productTypeL5: isSet(object.productTypeL5) ? globalThis.String(object.productTypeL5) : undefined,
      price: isSet(object.price) ? Price.fromJSON(object.price) : undefined,
      condition: isSet(object.condition) ? globalThis.String(object.condition) : undefined,
      availability: isSet(object.availability) ? globalThis.String(object.availability) : undefined,
      shippingLabel: isSet(object.shippingLabel) ? globalThis.String(object.shippingLabel) : undefined,
      gtin: globalThis.Array.isArray(object?.gtin) ? object.gtin.map((e: any) => globalThis.String(e)) : [],
      itemGroupId: isSet(object.itemGroupId) ? globalThis.String(object.itemGroupId) : undefined,
      thumbnailLink: isSet(object.thumbnailLink) ? globalThis.String(object.thumbnailLink) : undefined,
      creationTime: isSet(object.creationTime) ? fromJsonTimestamp(object.creationTime) : undefined,
      expirationDate: isSet(object.expirationDate) ? DateMessage.fromJSON(object.expirationDate) : undefined,
      aggregatedReportingContextStatus: isSet(object.aggregatedReportingContextStatus)
        ? productView_AggregatedReportingContextStatusFromJSON(object.aggregatedReportingContextStatus)
        : undefined,
      itemIssues: globalThis.Array.isArray(object?.itemIssues)
        ? object.itemIssues.map((e: any) => ProductView_ItemIssue.fromJSON(e))
        : [],
      clickPotential: isSet(object.clickPotential) ? productView_ClickPotentialFromJSON(object.clickPotential) : 0,
      clickPotentialRank: isSet(object.clickPotentialRank) ? Long.fromValue(object.clickPotentialRank) : undefined,
    };
  },

  toJSON(message: ProductView): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = message.id;
    }
    if (message.channel !== undefined) {
      obj.channel = channel_ChannelEnumToJSON(message.channel);
    }
    if (message.languageCode !== undefined) {
      obj.languageCode = message.languageCode;
    }
    if (message.feedLabel !== undefined) {
      obj.feedLabel = message.feedLabel;
    }
    if (message.offerId !== undefined) {
      obj.offerId = message.offerId;
    }
    if (message.title !== undefined) {
      obj.title = message.title;
    }
    if (message.brand !== undefined) {
      obj.brand = message.brand;
    }
    if (message.categoryL1 !== undefined) {
      obj.categoryL1 = message.categoryL1;
    }
    if (message.categoryL2 !== undefined) {
      obj.categoryL2 = message.categoryL2;
    }
    if (message.categoryL3 !== undefined) {
      obj.categoryL3 = message.categoryL3;
    }
    if (message.categoryL4 !== undefined) {
      obj.categoryL4 = message.categoryL4;
    }
    if (message.categoryL5 !== undefined) {
      obj.categoryL5 = message.categoryL5;
    }
    if (message.productTypeL1 !== undefined) {
      obj.productTypeL1 = message.productTypeL1;
    }
    if (message.productTypeL2 !== undefined) {
      obj.productTypeL2 = message.productTypeL2;
    }
    if (message.productTypeL3 !== undefined) {
      obj.productTypeL3 = message.productTypeL3;
    }
    if (message.productTypeL4 !== undefined) {
      obj.productTypeL4 = message.productTypeL4;
    }
    if (message.productTypeL5 !== undefined) {
      obj.productTypeL5 = message.productTypeL5;
    }
    if (message.price !== undefined) {
      obj.price = Price.toJSON(message.price);
    }
    if (message.condition !== undefined) {
      obj.condition = message.condition;
    }
    if (message.availability !== undefined) {
      obj.availability = message.availability;
    }
    if (message.shippingLabel !== undefined) {
      obj.shippingLabel = message.shippingLabel;
    }
    if (message.gtin?.length) {
      obj.gtin = message.gtin;
    }
    if (message.itemGroupId !== undefined) {
      obj.itemGroupId = message.itemGroupId;
    }
    if (message.thumbnailLink !== undefined) {
      obj.thumbnailLink = message.thumbnailLink;
    }
    if (message.creationTime !== undefined) {
      obj.creationTime = message.creationTime.toISOString();
    }
    if (message.expirationDate !== undefined) {
      obj.expirationDate = DateMessage.toJSON(message.expirationDate);
    }
    if (message.aggregatedReportingContextStatus !== undefined) {
      obj.aggregatedReportingContextStatus = productView_AggregatedReportingContextStatusToJSON(
        message.aggregatedReportingContextStatus,
      );
    }
    if (message.itemIssues?.length) {
      obj.itemIssues = message.itemIssues.map((e) => ProductView_ItemIssue.toJSON(e));
    }
    if (message.clickPotential !== 0) {
      obj.clickPotential = productView_ClickPotentialToJSON(message.clickPotential);
    }
    if (message.clickPotentialRank !== undefined) {
      obj.clickPotentialRank = (message.clickPotentialRank || Long.ZERO).toString();
    }
    return obj;
  },

  create(base?: DeepPartial<ProductView>): ProductView {
    return ProductView.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ProductView>): ProductView {
    const message = createBaseProductView();
    message.id = object.id ?? undefined;
    message.channel = object.channel ?? undefined;
    message.languageCode = object.languageCode ?? undefined;
    message.feedLabel = object.feedLabel ?? undefined;
    message.offerId = object.offerId ?? undefined;
    message.title = object.title ?? undefined;
    message.brand = object.brand ?? undefined;
    message.categoryL1 = object.categoryL1 ?? undefined;
    message.categoryL2 = object.categoryL2 ?? undefined;
    message.categoryL3 = object.categoryL3 ?? undefined;
    message.categoryL4 = object.categoryL4 ?? undefined;
    message.categoryL5 = object.categoryL5 ?? undefined;
    message.productTypeL1 = object.productTypeL1 ?? undefined;
    message.productTypeL2 = object.productTypeL2 ?? undefined;
    message.productTypeL3 = object.productTypeL3 ?? undefined;
    message.productTypeL4 = object.productTypeL4 ?? undefined;
    message.productTypeL5 = object.productTypeL5 ?? undefined;
    message.price = (object.price !== undefined && object.price !== null) ? Price.fromPartial(object.price) : undefined;
    message.condition = object.condition ?? undefined;
    message.availability = object.availability ?? undefined;
    message.shippingLabel = object.shippingLabel ?? undefined;
    message.gtin = object.gtin?.map((e) => e) || [];
    message.itemGroupId = object.itemGroupId ?? undefined;
    message.thumbnailLink = object.thumbnailLink ?? undefined;
    message.creationTime = object.creationTime ?? undefined;
    message.expirationDate = (object.expirationDate !== undefined && object.expirationDate !== null)
      ? DateMessage.fromPartial(object.expirationDate)
      : undefined;
    message.aggregatedReportingContextStatus = object.aggregatedReportingContextStatus ?? undefined;
    message.itemIssues = object.itemIssues?.map((e) => ProductView_ItemIssue.fromPartial(e)) || [];
    message.clickPotential = object.clickPotential ?? 0;
    message.clickPotentialRank = (object.clickPotentialRank !== undefined && object.clickPotentialRank !== null)
      ? Long.fromValue(object.clickPotentialRank)
      : undefined;
    return message;
  },
};

function createBaseProductView_ItemIssue(): ProductView_ItemIssue {
  return { type: undefined, severity: undefined, resolution: undefined };
}

export const ProductView_ItemIssue: MessageFns<ProductView_ItemIssue> = {
  encode(message: ProductView_ItemIssue, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== undefined) {
      ProductView_ItemIssue_ItemIssueType.encode(message.type, writer.uint32(10).fork()).join();
    }
    if (message.severity !== undefined) {
      ProductView_ItemIssue_ItemIssueSeverity.encode(message.severity, writer.uint32(18).fork()).join();
    }
    if (message.resolution !== undefined) {
      writer.uint32(24).int32(message.resolution);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProductView_ItemIssue {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProductView_ItemIssue();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.type = ProductView_ItemIssue_ItemIssueType.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.severity = ProductView_ItemIssue_ItemIssueSeverity.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.resolution = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProductView_ItemIssue {
    return {
      type: isSet(object.type) ? ProductView_ItemIssue_ItemIssueType.fromJSON(object.type) : undefined,
      severity: isSet(object.severity) ? ProductView_ItemIssue_ItemIssueSeverity.fromJSON(object.severity) : undefined,
      resolution: isSet(object.resolution)
        ? productView_ItemIssue_ItemIssueResolutionFromJSON(object.resolution)
        : undefined,
    };
  },

  toJSON(message: ProductView_ItemIssue): unknown {
    const obj: any = {};
    if (message.type !== undefined) {
      obj.type = ProductView_ItemIssue_ItemIssueType.toJSON(message.type);
    }
    if (message.severity !== undefined) {
      obj.severity = ProductView_ItemIssue_ItemIssueSeverity.toJSON(message.severity);
    }
    if (message.resolution !== undefined) {
      obj.resolution = productView_ItemIssue_ItemIssueResolutionToJSON(message.resolution);
    }
    return obj;
  },

  create(base?: DeepPartial<ProductView_ItemIssue>): ProductView_ItemIssue {
    return ProductView_ItemIssue.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ProductView_ItemIssue>): ProductView_ItemIssue {
    const message = createBaseProductView_ItemIssue();
    message.type = (object.type !== undefined && object.type !== null)
      ? ProductView_ItemIssue_ItemIssueType.fromPartial(object.type)
      : undefined;
    message.severity = (object.severity !== undefined && object.severity !== null)
      ? ProductView_ItemIssue_ItemIssueSeverity.fromPartial(object.severity)
      : undefined;
    message.resolution = object.resolution ?? undefined;
    return message;
  },
};

function createBaseProductView_ItemIssue_ItemIssueType(): ProductView_ItemIssue_ItemIssueType {
  return { code: undefined, canonicalAttribute: undefined };
}

export const ProductView_ItemIssue_ItemIssueType: MessageFns<ProductView_ItemIssue_ItemIssueType> = {
  encode(message: ProductView_ItemIssue_ItemIssueType, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== undefined) {
      writer.uint32(10).string(message.code);
    }
    if (message.canonicalAttribute !== undefined) {
      writer.uint32(18).string(message.canonicalAttribute);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProductView_ItemIssue_ItemIssueType {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProductView_ItemIssue_ItemIssueType();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.code = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.canonicalAttribute = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProductView_ItemIssue_ItemIssueType {
    return {
      code: isSet(object.code) ? globalThis.String(object.code) : undefined,
      canonicalAttribute: isSet(object.canonicalAttribute) ? globalThis.String(object.canonicalAttribute) : undefined,
    };
  },

  toJSON(message: ProductView_ItemIssue_ItemIssueType): unknown {
    const obj: any = {};
    if (message.code !== undefined) {
      obj.code = message.code;
    }
    if (message.canonicalAttribute !== undefined) {
      obj.canonicalAttribute = message.canonicalAttribute;
    }
    return obj;
  },

  create(base?: DeepPartial<ProductView_ItemIssue_ItemIssueType>): ProductView_ItemIssue_ItemIssueType {
    return ProductView_ItemIssue_ItemIssueType.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ProductView_ItemIssue_ItemIssueType>): ProductView_ItemIssue_ItemIssueType {
    const message = createBaseProductView_ItemIssue_ItemIssueType();
    message.code = object.code ?? undefined;
    message.canonicalAttribute = object.canonicalAttribute ?? undefined;
    return message;
  },
};

function createBaseProductView_ItemIssue_ItemIssueSeverity(): ProductView_ItemIssue_ItemIssueSeverity {
  return { severityPerReportingContext: [], aggregatedSeverity: undefined };
}

export const ProductView_ItemIssue_ItemIssueSeverity: MessageFns<ProductView_ItemIssue_ItemIssueSeverity> = {
  encode(message: ProductView_ItemIssue_ItemIssueSeverity, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.severityPerReportingContext) {
      ProductView_ItemIssue_ItemIssueSeverity_IssueSeverityPerReportingContext.encode(v!, writer.uint32(10).fork())
        .join();
    }
    if (message.aggregatedSeverity !== undefined) {
      writer.uint32(16).int32(message.aggregatedSeverity);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProductView_ItemIssue_ItemIssueSeverity {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProductView_ItemIssue_ItemIssueSeverity();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.severityPerReportingContext.push(
            ProductView_ItemIssue_ItemIssueSeverity_IssueSeverityPerReportingContext.decode(reader, reader.uint32()),
          );
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.aggregatedSeverity = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProductView_ItemIssue_ItemIssueSeverity {
    return {
      severityPerReportingContext: globalThis.Array.isArray(object?.severityPerReportingContext)
        ? object.severityPerReportingContext.map((e: any) =>
          ProductView_ItemIssue_ItemIssueSeverity_IssueSeverityPerReportingContext.fromJSON(e)
        )
        : [],
      aggregatedSeverity: isSet(object.aggregatedSeverity)
        ? productView_ItemIssue_ItemIssueSeverity_AggregatedIssueSeverityFromJSON(object.aggregatedSeverity)
        : undefined,
    };
  },

  toJSON(message: ProductView_ItemIssue_ItemIssueSeverity): unknown {
    const obj: any = {};
    if (message.severityPerReportingContext?.length) {
      obj.severityPerReportingContext = message.severityPerReportingContext.map((e) =>
        ProductView_ItemIssue_ItemIssueSeverity_IssueSeverityPerReportingContext.toJSON(e)
      );
    }
    if (message.aggregatedSeverity !== undefined) {
      obj.aggregatedSeverity = productView_ItemIssue_ItemIssueSeverity_AggregatedIssueSeverityToJSON(
        message.aggregatedSeverity,
      );
    }
    return obj;
  },

  create(base?: DeepPartial<ProductView_ItemIssue_ItemIssueSeverity>): ProductView_ItemIssue_ItemIssueSeverity {
    return ProductView_ItemIssue_ItemIssueSeverity.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ProductView_ItemIssue_ItemIssueSeverity>): ProductView_ItemIssue_ItemIssueSeverity {
    const message = createBaseProductView_ItemIssue_ItemIssueSeverity();
    message.severityPerReportingContext =
      object.severityPerReportingContext?.map((e) =>
        ProductView_ItemIssue_ItemIssueSeverity_IssueSeverityPerReportingContext.fromPartial(e)
      ) || [];
    message.aggregatedSeverity = object.aggregatedSeverity ?? undefined;
    return message;
  },
};

function createBaseProductView_ItemIssue_ItemIssueSeverity_IssueSeverityPerReportingContext(): ProductView_ItemIssue_ItemIssueSeverity_IssueSeverityPerReportingContext {
  return { reportingContext: undefined, disapprovedCountries: [], demotedCountries: [] };
}

export const ProductView_ItemIssue_ItemIssueSeverity_IssueSeverityPerReportingContext: MessageFns<
  ProductView_ItemIssue_ItemIssueSeverity_IssueSeverityPerReportingContext
> = {
  encode(
    message: ProductView_ItemIssue_ItemIssueSeverity_IssueSeverityPerReportingContext,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.reportingContext !== undefined) {
      writer.uint32(8).int32(message.reportingContext);
    }
    for (const v of message.disapprovedCountries) {
      writer.uint32(18).string(v!);
    }
    for (const v of message.demotedCountries) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): ProductView_ItemIssue_ItemIssueSeverity_IssueSeverityPerReportingContext {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProductView_ItemIssue_ItemIssueSeverity_IssueSeverityPerReportingContext();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.reportingContext = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.disapprovedCountries.push(reader.string());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.demotedCountries.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProductView_ItemIssue_ItemIssueSeverity_IssueSeverityPerReportingContext {
    return {
      reportingContext: isSet(object.reportingContext)
        ? reportingContext_ReportingContextEnumFromJSON(object.reportingContext)
        : undefined,
      disapprovedCountries: globalThis.Array.isArray(object?.disapprovedCountries)
        ? object.disapprovedCountries.map((e: any) => globalThis.String(e))
        : [],
      demotedCountries: globalThis.Array.isArray(object?.demotedCountries)
        ? object.demotedCountries.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ProductView_ItemIssue_ItemIssueSeverity_IssueSeverityPerReportingContext): unknown {
    const obj: any = {};
    if (message.reportingContext !== undefined) {
      obj.reportingContext = reportingContext_ReportingContextEnumToJSON(message.reportingContext);
    }
    if (message.disapprovedCountries?.length) {
      obj.disapprovedCountries = message.disapprovedCountries;
    }
    if (message.demotedCountries?.length) {
      obj.demotedCountries = message.demotedCountries;
    }
    return obj;
  },

  create(
    base?: DeepPartial<ProductView_ItemIssue_ItemIssueSeverity_IssueSeverityPerReportingContext>,
  ): ProductView_ItemIssue_ItemIssueSeverity_IssueSeverityPerReportingContext {
    return ProductView_ItemIssue_ItemIssueSeverity_IssueSeverityPerReportingContext.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ProductView_ItemIssue_ItemIssueSeverity_IssueSeverityPerReportingContext>,
  ): ProductView_ItemIssue_ItemIssueSeverity_IssueSeverityPerReportingContext {
    const message = createBaseProductView_ItemIssue_ItemIssueSeverity_IssueSeverityPerReportingContext();
    message.reportingContext = object.reportingContext ?? undefined;
    message.disapprovedCountries = object.disapprovedCountries?.map((e) => e) || [];
    message.demotedCountries = object.demotedCountries?.map((e) => e) || [];
    return message;
  },
};

function createBasePriceCompetitivenessProductView(): PriceCompetitivenessProductView {
  return {
    reportCountryCode: undefined,
    id: undefined,
    offerId: undefined,
    title: undefined,
    brand: undefined,
    categoryL1: undefined,
    categoryL2: undefined,
    categoryL3: undefined,
    categoryL4: undefined,
    categoryL5: undefined,
    productTypeL1: undefined,
    productTypeL2: undefined,
    productTypeL3: undefined,
    productTypeL4: undefined,
    productTypeL5: undefined,
    price: undefined,
    benchmarkPrice: undefined,
  };
}

export const PriceCompetitivenessProductView: MessageFns<PriceCompetitivenessProductView> = {
  encode(message: PriceCompetitivenessProductView, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.reportCountryCode !== undefined) {
      writer.uint32(10).string(message.reportCountryCode);
    }
    if (message.id !== undefined) {
      writer.uint32(18).string(message.id);
    }
    if (message.offerId !== undefined) {
      writer.uint32(26).string(message.offerId);
    }
    if (message.title !== undefined) {
      writer.uint32(34).string(message.title);
    }
    if (message.brand !== undefined) {
      writer.uint32(42).string(message.brand);
    }
    if (message.categoryL1 !== undefined) {
      writer.uint32(50).string(message.categoryL1);
    }
    if (message.categoryL2 !== undefined) {
      writer.uint32(58).string(message.categoryL2);
    }
    if (message.categoryL3 !== undefined) {
      writer.uint32(66).string(message.categoryL3);
    }
    if (message.categoryL4 !== undefined) {
      writer.uint32(74).string(message.categoryL4);
    }
    if (message.categoryL5 !== undefined) {
      writer.uint32(82).string(message.categoryL5);
    }
    if (message.productTypeL1 !== undefined) {
      writer.uint32(90).string(message.productTypeL1);
    }
    if (message.productTypeL2 !== undefined) {
      writer.uint32(98).string(message.productTypeL2);
    }
    if (message.productTypeL3 !== undefined) {
      writer.uint32(106).string(message.productTypeL3);
    }
    if (message.productTypeL4 !== undefined) {
      writer.uint32(114).string(message.productTypeL4);
    }
    if (message.productTypeL5 !== undefined) {
      writer.uint32(122).string(message.productTypeL5);
    }
    if (message.price !== undefined) {
      Price.encode(message.price, writer.uint32(130).fork()).join();
    }
    if (message.benchmarkPrice !== undefined) {
      Price.encode(message.benchmarkPrice, writer.uint32(138).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PriceCompetitivenessProductView {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePriceCompetitivenessProductView();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.reportCountryCode = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.offerId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.title = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.brand = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.categoryL1 = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.categoryL2 = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.categoryL3 = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.categoryL4 = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.categoryL5 = reader.string();
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.productTypeL1 = reader.string();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.productTypeL2 = reader.string();
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.productTypeL3 = reader.string();
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.productTypeL4 = reader.string();
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.productTypeL5 = reader.string();
          continue;
        case 16:
          if (tag !== 130) {
            break;
          }

          message.price = Price.decode(reader, reader.uint32());
          continue;
        case 17:
          if (tag !== 138) {
            break;
          }

          message.benchmarkPrice = Price.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PriceCompetitivenessProductView {
    return {
      reportCountryCode: isSet(object.reportCountryCode) ? globalThis.String(object.reportCountryCode) : undefined,
      id: isSet(object.id) ? globalThis.String(object.id) : undefined,
      offerId: isSet(object.offerId) ? globalThis.String(object.offerId) : undefined,
      title: isSet(object.title) ? globalThis.String(object.title) : undefined,
      brand: isSet(object.brand) ? globalThis.String(object.brand) : undefined,
      categoryL1: isSet(object.categoryL1) ? globalThis.String(object.categoryL1) : undefined,
      categoryL2: isSet(object.categoryL2) ? globalThis.String(object.categoryL2) : undefined,
      categoryL3: isSet(object.categoryL3) ? globalThis.String(object.categoryL3) : undefined,
      categoryL4: isSet(object.categoryL4) ? globalThis.String(object.categoryL4) : undefined,
      categoryL5: isSet(object.categoryL5) ? globalThis.String(object.categoryL5) : undefined,
      productTypeL1: isSet(object.productTypeL1) ? globalThis.String(object.productTypeL1) : undefined,
      productTypeL2: isSet(object.productTypeL2) ? globalThis.String(object.productTypeL2) : undefined,
      productTypeL3: isSet(object.productTypeL3) ? globalThis.String(object.productTypeL3) : undefined,
      productTypeL4: isSet(object.productTypeL4) ? globalThis.String(object.productTypeL4) : undefined,
      productTypeL5: isSet(object.productTypeL5) ? globalThis.String(object.productTypeL5) : undefined,
      price: isSet(object.price) ? Price.fromJSON(object.price) : undefined,
      benchmarkPrice: isSet(object.benchmarkPrice) ? Price.fromJSON(object.benchmarkPrice) : undefined,
    };
  },

  toJSON(message: PriceCompetitivenessProductView): unknown {
    const obj: any = {};
    if (message.reportCountryCode !== undefined) {
      obj.reportCountryCode = message.reportCountryCode;
    }
    if (message.id !== undefined) {
      obj.id = message.id;
    }
    if (message.offerId !== undefined) {
      obj.offerId = message.offerId;
    }
    if (message.title !== undefined) {
      obj.title = message.title;
    }
    if (message.brand !== undefined) {
      obj.brand = message.brand;
    }
    if (message.categoryL1 !== undefined) {
      obj.categoryL1 = message.categoryL1;
    }
    if (message.categoryL2 !== undefined) {
      obj.categoryL2 = message.categoryL2;
    }
    if (message.categoryL3 !== undefined) {
      obj.categoryL3 = message.categoryL3;
    }
    if (message.categoryL4 !== undefined) {
      obj.categoryL4 = message.categoryL4;
    }
    if (message.categoryL5 !== undefined) {
      obj.categoryL5 = message.categoryL5;
    }
    if (message.productTypeL1 !== undefined) {
      obj.productTypeL1 = message.productTypeL1;
    }
    if (message.productTypeL2 !== undefined) {
      obj.productTypeL2 = message.productTypeL2;
    }
    if (message.productTypeL3 !== undefined) {
      obj.productTypeL3 = message.productTypeL3;
    }
    if (message.productTypeL4 !== undefined) {
      obj.productTypeL4 = message.productTypeL4;
    }
    if (message.productTypeL5 !== undefined) {
      obj.productTypeL5 = message.productTypeL5;
    }
    if (message.price !== undefined) {
      obj.price = Price.toJSON(message.price);
    }
    if (message.benchmarkPrice !== undefined) {
      obj.benchmarkPrice = Price.toJSON(message.benchmarkPrice);
    }
    return obj;
  },

  create(base?: DeepPartial<PriceCompetitivenessProductView>): PriceCompetitivenessProductView {
    return PriceCompetitivenessProductView.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PriceCompetitivenessProductView>): PriceCompetitivenessProductView {
    const message = createBasePriceCompetitivenessProductView();
    message.reportCountryCode = object.reportCountryCode ?? undefined;
    message.id = object.id ?? undefined;
    message.offerId = object.offerId ?? undefined;
    message.title = object.title ?? undefined;
    message.brand = object.brand ?? undefined;
    message.categoryL1 = object.categoryL1 ?? undefined;
    message.categoryL2 = object.categoryL2 ?? undefined;
    message.categoryL3 = object.categoryL3 ?? undefined;
    message.categoryL4 = object.categoryL4 ?? undefined;
    message.categoryL5 = object.categoryL5 ?? undefined;
    message.productTypeL1 = object.productTypeL1 ?? undefined;
    message.productTypeL2 = object.productTypeL2 ?? undefined;
    message.productTypeL3 = object.productTypeL3 ?? undefined;
    message.productTypeL4 = object.productTypeL4 ?? undefined;
    message.productTypeL5 = object.productTypeL5 ?? undefined;
    message.price = (object.price !== undefined && object.price !== null) ? Price.fromPartial(object.price) : undefined;
    message.benchmarkPrice = (object.benchmarkPrice !== undefined && object.benchmarkPrice !== null)
      ? Price.fromPartial(object.benchmarkPrice)
      : undefined;
    return message;
  },
};

function createBasePriceInsightsProductView(): PriceInsightsProductView {
  return {
    id: undefined,
    offerId: undefined,
    title: undefined,
    brand: undefined,
    categoryL1: undefined,
    categoryL2: undefined,
    categoryL3: undefined,
    categoryL4: undefined,
    categoryL5: undefined,
    productTypeL1: undefined,
    productTypeL2: undefined,
    productTypeL3: undefined,
    productTypeL4: undefined,
    productTypeL5: undefined,
    price: undefined,
    suggestedPrice: undefined,
    predictedImpressionsChangeFraction: undefined,
    predictedClicksChangeFraction: undefined,
    predictedConversionsChangeFraction: undefined,
    effectiveness: 0,
  };
}

export const PriceInsightsProductView: MessageFns<PriceInsightsProductView> = {
  encode(message: PriceInsightsProductView, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      writer.uint32(10).string(message.id);
    }
    if (message.offerId !== undefined) {
      writer.uint32(18).string(message.offerId);
    }
    if (message.title !== undefined) {
      writer.uint32(26).string(message.title);
    }
    if (message.brand !== undefined) {
      writer.uint32(34).string(message.brand);
    }
    if (message.categoryL1 !== undefined) {
      writer.uint32(42).string(message.categoryL1);
    }
    if (message.categoryL2 !== undefined) {
      writer.uint32(50).string(message.categoryL2);
    }
    if (message.categoryL3 !== undefined) {
      writer.uint32(58).string(message.categoryL3);
    }
    if (message.categoryL4 !== undefined) {
      writer.uint32(66).string(message.categoryL4);
    }
    if (message.categoryL5 !== undefined) {
      writer.uint32(74).string(message.categoryL5);
    }
    if (message.productTypeL1 !== undefined) {
      writer.uint32(82).string(message.productTypeL1);
    }
    if (message.productTypeL2 !== undefined) {
      writer.uint32(90).string(message.productTypeL2);
    }
    if (message.productTypeL3 !== undefined) {
      writer.uint32(98).string(message.productTypeL3);
    }
    if (message.productTypeL4 !== undefined) {
      writer.uint32(106).string(message.productTypeL4);
    }
    if (message.productTypeL5 !== undefined) {
      writer.uint32(114).string(message.productTypeL5);
    }
    if (message.price !== undefined) {
      Price.encode(message.price, writer.uint32(122).fork()).join();
    }
    if (message.suggestedPrice !== undefined) {
      Price.encode(message.suggestedPrice, writer.uint32(130).fork()).join();
    }
    if (message.predictedImpressionsChangeFraction !== undefined) {
      writer.uint32(137).double(message.predictedImpressionsChangeFraction);
    }
    if (message.predictedClicksChangeFraction !== undefined) {
      writer.uint32(145).double(message.predictedClicksChangeFraction);
    }
    if (message.predictedConversionsChangeFraction !== undefined) {
      writer.uint32(153).double(message.predictedConversionsChangeFraction);
    }
    if (message.effectiveness !== 0) {
      writer.uint32(176).int32(message.effectiveness);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PriceInsightsProductView {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePriceInsightsProductView();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.offerId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.title = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.brand = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.categoryL1 = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.categoryL2 = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.categoryL3 = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.categoryL4 = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.categoryL5 = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.productTypeL1 = reader.string();
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.productTypeL2 = reader.string();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.productTypeL3 = reader.string();
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.productTypeL4 = reader.string();
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.productTypeL5 = reader.string();
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.price = Price.decode(reader, reader.uint32());
          continue;
        case 16:
          if (tag !== 130) {
            break;
          }

          message.suggestedPrice = Price.decode(reader, reader.uint32());
          continue;
        case 17:
          if (tag !== 137) {
            break;
          }

          message.predictedImpressionsChangeFraction = reader.double();
          continue;
        case 18:
          if (tag !== 145) {
            break;
          }

          message.predictedClicksChangeFraction = reader.double();
          continue;
        case 19:
          if (tag !== 153) {
            break;
          }

          message.predictedConversionsChangeFraction = reader.double();
          continue;
        case 22:
          if (tag !== 176) {
            break;
          }

          message.effectiveness = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PriceInsightsProductView {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : undefined,
      offerId: isSet(object.offerId) ? globalThis.String(object.offerId) : undefined,
      title: isSet(object.title) ? globalThis.String(object.title) : undefined,
      brand: isSet(object.brand) ? globalThis.String(object.brand) : undefined,
      categoryL1: isSet(object.categoryL1) ? globalThis.String(object.categoryL1) : undefined,
      categoryL2: isSet(object.categoryL2) ? globalThis.String(object.categoryL2) : undefined,
      categoryL3: isSet(object.categoryL3) ? globalThis.String(object.categoryL3) : undefined,
      categoryL4: isSet(object.categoryL4) ? globalThis.String(object.categoryL4) : undefined,
      categoryL5: isSet(object.categoryL5) ? globalThis.String(object.categoryL5) : undefined,
      productTypeL1: isSet(object.productTypeL1) ? globalThis.String(object.productTypeL1) : undefined,
      productTypeL2: isSet(object.productTypeL2) ? globalThis.String(object.productTypeL2) : undefined,
      productTypeL3: isSet(object.productTypeL3) ? globalThis.String(object.productTypeL3) : undefined,
      productTypeL4: isSet(object.productTypeL4) ? globalThis.String(object.productTypeL4) : undefined,
      productTypeL5: isSet(object.productTypeL5) ? globalThis.String(object.productTypeL5) : undefined,
      price: isSet(object.price) ? Price.fromJSON(object.price) : undefined,
      suggestedPrice: isSet(object.suggestedPrice) ? Price.fromJSON(object.suggestedPrice) : undefined,
      predictedImpressionsChangeFraction: isSet(object.predictedImpressionsChangeFraction)
        ? globalThis.Number(object.predictedImpressionsChangeFraction)
        : undefined,
      predictedClicksChangeFraction: isSet(object.predictedClicksChangeFraction)
        ? globalThis.Number(object.predictedClicksChangeFraction)
        : undefined,
      predictedConversionsChangeFraction: isSet(object.predictedConversionsChangeFraction)
        ? globalThis.Number(object.predictedConversionsChangeFraction)
        : undefined,
      effectiveness: isSet(object.effectiveness)
        ? priceInsightsProductView_EffectivenessFromJSON(object.effectiveness)
        : 0,
    };
  },

  toJSON(message: PriceInsightsProductView): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = message.id;
    }
    if (message.offerId !== undefined) {
      obj.offerId = message.offerId;
    }
    if (message.title !== undefined) {
      obj.title = message.title;
    }
    if (message.brand !== undefined) {
      obj.brand = message.brand;
    }
    if (message.categoryL1 !== undefined) {
      obj.categoryL1 = message.categoryL1;
    }
    if (message.categoryL2 !== undefined) {
      obj.categoryL2 = message.categoryL2;
    }
    if (message.categoryL3 !== undefined) {
      obj.categoryL3 = message.categoryL3;
    }
    if (message.categoryL4 !== undefined) {
      obj.categoryL4 = message.categoryL4;
    }
    if (message.categoryL5 !== undefined) {
      obj.categoryL5 = message.categoryL5;
    }
    if (message.productTypeL1 !== undefined) {
      obj.productTypeL1 = message.productTypeL1;
    }
    if (message.productTypeL2 !== undefined) {
      obj.productTypeL2 = message.productTypeL2;
    }
    if (message.productTypeL3 !== undefined) {
      obj.productTypeL3 = message.productTypeL3;
    }
    if (message.productTypeL4 !== undefined) {
      obj.productTypeL4 = message.productTypeL4;
    }
    if (message.productTypeL5 !== undefined) {
      obj.productTypeL5 = message.productTypeL5;
    }
    if (message.price !== undefined) {
      obj.price = Price.toJSON(message.price);
    }
    if (message.suggestedPrice !== undefined) {
      obj.suggestedPrice = Price.toJSON(message.suggestedPrice);
    }
    if (message.predictedImpressionsChangeFraction !== undefined) {
      obj.predictedImpressionsChangeFraction = message.predictedImpressionsChangeFraction;
    }
    if (message.predictedClicksChangeFraction !== undefined) {
      obj.predictedClicksChangeFraction = message.predictedClicksChangeFraction;
    }
    if (message.predictedConversionsChangeFraction !== undefined) {
      obj.predictedConversionsChangeFraction = message.predictedConversionsChangeFraction;
    }
    if (message.effectiveness !== 0) {
      obj.effectiveness = priceInsightsProductView_EffectivenessToJSON(message.effectiveness);
    }
    return obj;
  },

  create(base?: DeepPartial<PriceInsightsProductView>): PriceInsightsProductView {
    return PriceInsightsProductView.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PriceInsightsProductView>): PriceInsightsProductView {
    const message = createBasePriceInsightsProductView();
    message.id = object.id ?? undefined;
    message.offerId = object.offerId ?? undefined;
    message.title = object.title ?? undefined;
    message.brand = object.brand ?? undefined;
    message.categoryL1 = object.categoryL1 ?? undefined;
    message.categoryL2 = object.categoryL2 ?? undefined;
    message.categoryL3 = object.categoryL3 ?? undefined;
    message.categoryL4 = object.categoryL4 ?? undefined;
    message.categoryL5 = object.categoryL5 ?? undefined;
    message.productTypeL1 = object.productTypeL1 ?? undefined;
    message.productTypeL2 = object.productTypeL2 ?? undefined;
    message.productTypeL3 = object.productTypeL3 ?? undefined;
    message.productTypeL4 = object.productTypeL4 ?? undefined;
    message.productTypeL5 = object.productTypeL5 ?? undefined;
    message.price = (object.price !== undefined && object.price !== null) ? Price.fromPartial(object.price) : undefined;
    message.suggestedPrice = (object.suggestedPrice !== undefined && object.suggestedPrice !== null)
      ? Price.fromPartial(object.suggestedPrice)
      : undefined;
    message.predictedImpressionsChangeFraction = object.predictedImpressionsChangeFraction ?? undefined;
    message.predictedClicksChangeFraction = object.predictedClicksChangeFraction ?? undefined;
    message.predictedConversionsChangeFraction = object.predictedConversionsChangeFraction ?? undefined;
    message.effectiveness = object.effectiveness ?? 0;
    return message;
  },
};

function createBaseBestSellersProductClusterView(): BestSellersProductClusterView {
  return {
    reportDate: undefined,
    reportGranularity: undefined,
    reportCountryCode: undefined,
    reportCategoryId: undefined,
    title: undefined,
    brand: undefined,
    categoryL1: undefined,
    categoryL2: undefined,
    categoryL3: undefined,
    categoryL4: undefined,
    categoryL5: undefined,
    variantGtins: [],
    inventoryStatus: undefined,
    brandInventoryStatus: undefined,
    rank: undefined,
    previousRank: undefined,
    relativeDemand: undefined,
    previousRelativeDemand: undefined,
    relativeDemandChange: undefined,
  };
}

export const BestSellersProductClusterView: MessageFns<BestSellersProductClusterView> = {
  encode(message: BestSellersProductClusterView, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.reportDate !== undefined) {
      DateMessage.encode(message.reportDate, writer.uint32(10).fork()).join();
    }
    if (message.reportGranularity !== undefined) {
      writer.uint32(16).int32(message.reportGranularity);
    }
    if (message.reportCountryCode !== undefined) {
      writer.uint32(26).string(message.reportCountryCode);
    }
    if (message.reportCategoryId !== undefined) {
      writer.uint32(32).int64(message.reportCategoryId.toString());
    }
    if (message.title !== undefined) {
      writer.uint32(50).string(message.title);
    }
    if (message.brand !== undefined) {
      writer.uint32(58).string(message.brand);
    }
    if (message.categoryL1 !== undefined) {
      writer.uint32(66).string(message.categoryL1);
    }
    if (message.categoryL2 !== undefined) {
      writer.uint32(74).string(message.categoryL2);
    }
    if (message.categoryL3 !== undefined) {
      writer.uint32(82).string(message.categoryL3);
    }
    if (message.categoryL4 !== undefined) {
      writer.uint32(90).string(message.categoryL4);
    }
    if (message.categoryL5 !== undefined) {
      writer.uint32(98).string(message.categoryL5);
    }
    for (const v of message.variantGtins) {
      writer.uint32(106).string(v!);
    }
    if (message.inventoryStatus !== undefined) {
      writer.uint32(112).int32(message.inventoryStatus);
    }
    if (message.brandInventoryStatus !== undefined) {
      writer.uint32(120).int32(message.brandInventoryStatus);
    }
    if (message.rank !== undefined) {
      writer.uint32(128).int64(message.rank.toString());
    }
    if (message.previousRank !== undefined) {
      writer.uint32(136).int64(message.previousRank.toString());
    }
    if (message.relativeDemand !== undefined) {
      writer.uint32(144).int32(message.relativeDemand);
    }
    if (message.previousRelativeDemand !== undefined) {
      writer.uint32(152).int32(message.previousRelativeDemand);
    }
    if (message.relativeDemandChange !== undefined) {
      writer.uint32(160).int32(message.relativeDemandChange);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BestSellersProductClusterView {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBestSellersProductClusterView();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.reportDate = DateMessage.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.reportGranularity = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.reportCountryCode = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.reportCategoryId = Long.fromString(reader.int64().toString());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.title = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.brand = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.categoryL1 = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.categoryL2 = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.categoryL3 = reader.string();
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.categoryL4 = reader.string();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.categoryL5 = reader.string();
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.variantGtins.push(reader.string());
          continue;
        case 14:
          if (tag !== 112) {
            break;
          }

          message.inventoryStatus = reader.int32() as any;
          continue;
        case 15:
          if (tag !== 120) {
            break;
          }

          message.brandInventoryStatus = reader.int32() as any;
          continue;
        case 16:
          if (tag !== 128) {
            break;
          }

          message.rank = Long.fromString(reader.int64().toString());
          continue;
        case 17:
          if (tag !== 136) {
            break;
          }

          message.previousRank = Long.fromString(reader.int64().toString());
          continue;
        case 18:
          if (tag !== 144) {
            break;
          }

          message.relativeDemand = reader.int32() as any;
          continue;
        case 19:
          if (tag !== 152) {
            break;
          }

          message.previousRelativeDemand = reader.int32() as any;
          continue;
        case 20:
          if (tag !== 160) {
            break;
          }

          message.relativeDemandChange = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BestSellersProductClusterView {
    return {
      reportDate: isSet(object.reportDate) ? DateMessage.fromJSON(object.reportDate) : undefined,
      reportGranularity: isSet(object.reportGranularity)
        ? reportGranularity_ReportGranularityEnumFromJSON(object.reportGranularity)
        : undefined,
      reportCountryCode: isSet(object.reportCountryCode) ? globalThis.String(object.reportCountryCode) : undefined,
      reportCategoryId: isSet(object.reportCategoryId) ? Long.fromValue(object.reportCategoryId) : undefined,
      title: isSet(object.title) ? globalThis.String(object.title) : undefined,
      brand: isSet(object.brand) ? globalThis.String(object.brand) : undefined,
      categoryL1: isSet(object.categoryL1) ? globalThis.String(object.categoryL1) : undefined,
      categoryL2: isSet(object.categoryL2) ? globalThis.String(object.categoryL2) : undefined,
      categoryL3: isSet(object.categoryL3) ? globalThis.String(object.categoryL3) : undefined,
      categoryL4: isSet(object.categoryL4) ? globalThis.String(object.categoryL4) : undefined,
      categoryL5: isSet(object.categoryL5) ? globalThis.String(object.categoryL5) : undefined,
      variantGtins: globalThis.Array.isArray(object?.variantGtins)
        ? object.variantGtins.map((e: any) => globalThis.String(e))
        : [],
      inventoryStatus: isSet(object.inventoryStatus)
        ? bestSellersProductClusterView_InventoryStatusFromJSON(object.inventoryStatus)
        : undefined,
      brandInventoryStatus: isSet(object.brandInventoryStatus)
        ? bestSellersProductClusterView_InventoryStatusFromJSON(object.brandInventoryStatus)
        : undefined,
      rank: isSet(object.rank) ? Long.fromValue(object.rank) : undefined,
      previousRank: isSet(object.previousRank) ? Long.fromValue(object.previousRank) : undefined,
      relativeDemand: isSet(object.relativeDemand)
        ? relativeDemand_RelativeDemandEnumFromJSON(object.relativeDemand)
        : undefined,
      previousRelativeDemand: isSet(object.previousRelativeDemand)
        ? relativeDemand_RelativeDemandEnumFromJSON(object.previousRelativeDemand)
        : undefined,
      relativeDemandChange: isSet(object.relativeDemandChange)
        ? relativeDemandChangeType_RelativeDemandChangeTypeEnumFromJSON(object.relativeDemandChange)
        : undefined,
    };
  },

  toJSON(message: BestSellersProductClusterView): unknown {
    const obj: any = {};
    if (message.reportDate !== undefined) {
      obj.reportDate = DateMessage.toJSON(message.reportDate);
    }
    if (message.reportGranularity !== undefined) {
      obj.reportGranularity = reportGranularity_ReportGranularityEnumToJSON(message.reportGranularity);
    }
    if (message.reportCountryCode !== undefined) {
      obj.reportCountryCode = message.reportCountryCode;
    }
    if (message.reportCategoryId !== undefined) {
      obj.reportCategoryId = (message.reportCategoryId || Long.ZERO).toString();
    }
    if (message.title !== undefined) {
      obj.title = message.title;
    }
    if (message.brand !== undefined) {
      obj.brand = message.brand;
    }
    if (message.categoryL1 !== undefined) {
      obj.categoryL1 = message.categoryL1;
    }
    if (message.categoryL2 !== undefined) {
      obj.categoryL2 = message.categoryL2;
    }
    if (message.categoryL3 !== undefined) {
      obj.categoryL3 = message.categoryL3;
    }
    if (message.categoryL4 !== undefined) {
      obj.categoryL4 = message.categoryL4;
    }
    if (message.categoryL5 !== undefined) {
      obj.categoryL5 = message.categoryL5;
    }
    if (message.variantGtins?.length) {
      obj.variantGtins = message.variantGtins;
    }
    if (message.inventoryStatus !== undefined) {
      obj.inventoryStatus = bestSellersProductClusterView_InventoryStatusToJSON(message.inventoryStatus);
    }
    if (message.brandInventoryStatus !== undefined) {
      obj.brandInventoryStatus = bestSellersProductClusterView_InventoryStatusToJSON(message.brandInventoryStatus);
    }
    if (message.rank !== undefined) {
      obj.rank = (message.rank || Long.ZERO).toString();
    }
    if (message.previousRank !== undefined) {
      obj.previousRank = (message.previousRank || Long.ZERO).toString();
    }
    if (message.relativeDemand !== undefined) {
      obj.relativeDemand = relativeDemand_RelativeDemandEnumToJSON(message.relativeDemand);
    }
    if (message.previousRelativeDemand !== undefined) {
      obj.previousRelativeDemand = relativeDemand_RelativeDemandEnumToJSON(message.previousRelativeDemand);
    }
    if (message.relativeDemandChange !== undefined) {
      obj.relativeDemandChange = relativeDemandChangeType_RelativeDemandChangeTypeEnumToJSON(
        message.relativeDemandChange,
      );
    }
    return obj;
  },

  create(base?: DeepPartial<BestSellersProductClusterView>): BestSellersProductClusterView {
    return BestSellersProductClusterView.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BestSellersProductClusterView>): BestSellersProductClusterView {
    const message = createBaseBestSellersProductClusterView();
    message.reportDate = (object.reportDate !== undefined && object.reportDate !== null)
      ? DateMessage.fromPartial(object.reportDate)
      : undefined;
    message.reportGranularity = object.reportGranularity ?? undefined;
    message.reportCountryCode = object.reportCountryCode ?? undefined;
    message.reportCategoryId = (object.reportCategoryId !== undefined && object.reportCategoryId !== null)
      ? Long.fromValue(object.reportCategoryId)
      : undefined;
    message.title = object.title ?? undefined;
    message.brand = object.brand ?? undefined;
    message.categoryL1 = object.categoryL1 ?? undefined;
    message.categoryL2 = object.categoryL2 ?? undefined;
    message.categoryL3 = object.categoryL3 ?? undefined;
    message.categoryL4 = object.categoryL4 ?? undefined;
    message.categoryL5 = object.categoryL5 ?? undefined;
    message.variantGtins = object.variantGtins?.map((e) => e) || [];
    message.inventoryStatus = object.inventoryStatus ?? undefined;
    message.brandInventoryStatus = object.brandInventoryStatus ?? undefined;
    message.rank = (object.rank !== undefined && object.rank !== null) ? Long.fromValue(object.rank) : undefined;
    message.previousRank = (object.previousRank !== undefined && object.previousRank !== null)
      ? Long.fromValue(object.previousRank)
      : undefined;
    message.relativeDemand = object.relativeDemand ?? undefined;
    message.previousRelativeDemand = object.previousRelativeDemand ?? undefined;
    message.relativeDemandChange = object.relativeDemandChange ?? undefined;
    return message;
  },
};

function createBaseBestSellersBrandView(): BestSellersBrandView {
  return {
    reportDate: undefined,
    reportGranularity: undefined,
    reportCountryCode: undefined,
    reportCategoryId: undefined,
    brand: undefined,
    rank: undefined,
    previousRank: undefined,
    relativeDemand: undefined,
    previousRelativeDemand: undefined,
    relativeDemandChange: undefined,
  };
}

export const BestSellersBrandView: MessageFns<BestSellersBrandView> = {
  encode(message: BestSellersBrandView, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.reportDate !== undefined) {
      DateMessage.encode(message.reportDate, writer.uint32(10).fork()).join();
    }
    if (message.reportGranularity !== undefined) {
      writer.uint32(16).int32(message.reportGranularity);
    }
    if (message.reportCountryCode !== undefined) {
      writer.uint32(26).string(message.reportCountryCode);
    }
    if (message.reportCategoryId !== undefined) {
      writer.uint32(32).int64(message.reportCategoryId.toString());
    }
    if (message.brand !== undefined) {
      writer.uint32(50).string(message.brand);
    }
    if (message.rank !== undefined) {
      writer.uint32(56).int64(message.rank.toString());
    }
    if (message.previousRank !== undefined) {
      writer.uint32(64).int64(message.previousRank.toString());
    }
    if (message.relativeDemand !== undefined) {
      writer.uint32(72).int32(message.relativeDemand);
    }
    if (message.previousRelativeDemand !== undefined) {
      writer.uint32(80).int32(message.previousRelativeDemand);
    }
    if (message.relativeDemandChange !== undefined) {
      writer.uint32(88).int32(message.relativeDemandChange);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BestSellersBrandView {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBestSellersBrandView();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.reportDate = DateMessage.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.reportGranularity = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.reportCountryCode = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.reportCategoryId = Long.fromString(reader.int64().toString());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.brand = reader.string();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.rank = Long.fromString(reader.int64().toString());
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.previousRank = Long.fromString(reader.int64().toString());
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.relativeDemand = reader.int32() as any;
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.previousRelativeDemand = reader.int32() as any;
          continue;
        case 11:
          if (tag !== 88) {
            break;
          }

          message.relativeDemandChange = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BestSellersBrandView {
    return {
      reportDate: isSet(object.reportDate) ? DateMessage.fromJSON(object.reportDate) : undefined,
      reportGranularity: isSet(object.reportGranularity)
        ? reportGranularity_ReportGranularityEnumFromJSON(object.reportGranularity)
        : undefined,
      reportCountryCode: isSet(object.reportCountryCode) ? globalThis.String(object.reportCountryCode) : undefined,
      reportCategoryId: isSet(object.reportCategoryId) ? Long.fromValue(object.reportCategoryId) : undefined,
      brand: isSet(object.brand) ? globalThis.String(object.brand) : undefined,
      rank: isSet(object.rank) ? Long.fromValue(object.rank) : undefined,
      previousRank: isSet(object.previousRank) ? Long.fromValue(object.previousRank) : undefined,
      relativeDemand: isSet(object.relativeDemand)
        ? relativeDemand_RelativeDemandEnumFromJSON(object.relativeDemand)
        : undefined,
      previousRelativeDemand: isSet(object.previousRelativeDemand)
        ? relativeDemand_RelativeDemandEnumFromJSON(object.previousRelativeDemand)
        : undefined,
      relativeDemandChange: isSet(object.relativeDemandChange)
        ? relativeDemandChangeType_RelativeDemandChangeTypeEnumFromJSON(object.relativeDemandChange)
        : undefined,
    };
  },

  toJSON(message: BestSellersBrandView): unknown {
    const obj: any = {};
    if (message.reportDate !== undefined) {
      obj.reportDate = DateMessage.toJSON(message.reportDate);
    }
    if (message.reportGranularity !== undefined) {
      obj.reportGranularity = reportGranularity_ReportGranularityEnumToJSON(message.reportGranularity);
    }
    if (message.reportCountryCode !== undefined) {
      obj.reportCountryCode = message.reportCountryCode;
    }
    if (message.reportCategoryId !== undefined) {
      obj.reportCategoryId = (message.reportCategoryId || Long.ZERO).toString();
    }
    if (message.brand !== undefined) {
      obj.brand = message.brand;
    }
    if (message.rank !== undefined) {
      obj.rank = (message.rank || Long.ZERO).toString();
    }
    if (message.previousRank !== undefined) {
      obj.previousRank = (message.previousRank || Long.ZERO).toString();
    }
    if (message.relativeDemand !== undefined) {
      obj.relativeDemand = relativeDemand_RelativeDemandEnumToJSON(message.relativeDemand);
    }
    if (message.previousRelativeDemand !== undefined) {
      obj.previousRelativeDemand = relativeDemand_RelativeDemandEnumToJSON(message.previousRelativeDemand);
    }
    if (message.relativeDemandChange !== undefined) {
      obj.relativeDemandChange = relativeDemandChangeType_RelativeDemandChangeTypeEnumToJSON(
        message.relativeDemandChange,
      );
    }
    return obj;
  },

  create(base?: DeepPartial<BestSellersBrandView>): BestSellersBrandView {
    return BestSellersBrandView.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BestSellersBrandView>): BestSellersBrandView {
    const message = createBaseBestSellersBrandView();
    message.reportDate = (object.reportDate !== undefined && object.reportDate !== null)
      ? DateMessage.fromPartial(object.reportDate)
      : undefined;
    message.reportGranularity = object.reportGranularity ?? undefined;
    message.reportCountryCode = object.reportCountryCode ?? undefined;
    message.reportCategoryId = (object.reportCategoryId !== undefined && object.reportCategoryId !== null)
      ? Long.fromValue(object.reportCategoryId)
      : undefined;
    message.brand = object.brand ?? undefined;
    message.rank = (object.rank !== undefined && object.rank !== null) ? Long.fromValue(object.rank) : undefined;
    message.previousRank = (object.previousRank !== undefined && object.previousRank !== null)
      ? Long.fromValue(object.previousRank)
      : undefined;
    message.relativeDemand = object.relativeDemand ?? undefined;
    message.previousRelativeDemand = object.previousRelativeDemand ?? undefined;
    message.relativeDemandChange = object.relativeDemandChange ?? undefined;
    return message;
  },
};

function createBaseNonProductPerformanceView(): NonProductPerformanceView {
  return { date: undefined, week: undefined, clicks: undefined, impressions: undefined, clickThroughRate: undefined };
}

export const NonProductPerformanceView: MessageFns<NonProductPerformanceView> = {
  encode(message: NonProductPerformanceView, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.date !== undefined) {
      DateMessage.encode(message.date, writer.uint32(10).fork()).join();
    }
    if (message.week !== undefined) {
      DateMessage.encode(message.week, writer.uint32(18).fork()).join();
    }
    if (message.clicks !== undefined) {
      writer.uint32(24).int64(message.clicks.toString());
    }
    if (message.impressions !== undefined) {
      writer.uint32(32).int64(message.impressions.toString());
    }
    if (message.clickThroughRate !== undefined) {
      writer.uint32(41).double(message.clickThroughRate);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NonProductPerformanceView {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNonProductPerformanceView();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.date = DateMessage.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.week = DateMessage.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.clicks = Long.fromString(reader.int64().toString());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.impressions = Long.fromString(reader.int64().toString());
          continue;
        case 5:
          if (tag !== 41) {
            break;
          }

          message.clickThroughRate = reader.double();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NonProductPerformanceView {
    return {
      date: isSet(object.date) ? DateMessage.fromJSON(object.date) : undefined,
      week: isSet(object.week) ? DateMessage.fromJSON(object.week) : undefined,
      clicks: isSet(object.clicks) ? Long.fromValue(object.clicks) : undefined,
      impressions: isSet(object.impressions) ? Long.fromValue(object.impressions) : undefined,
      clickThroughRate: isSet(object.clickThroughRate) ? globalThis.Number(object.clickThroughRate) : undefined,
    };
  },

  toJSON(message: NonProductPerformanceView): unknown {
    const obj: any = {};
    if (message.date !== undefined) {
      obj.date = DateMessage.toJSON(message.date);
    }
    if (message.week !== undefined) {
      obj.week = DateMessage.toJSON(message.week);
    }
    if (message.clicks !== undefined) {
      obj.clicks = (message.clicks || Long.ZERO).toString();
    }
    if (message.impressions !== undefined) {
      obj.impressions = (message.impressions || Long.ZERO).toString();
    }
    if (message.clickThroughRate !== undefined) {
      obj.clickThroughRate = message.clickThroughRate;
    }
    return obj;
  },

  create(base?: DeepPartial<NonProductPerformanceView>): NonProductPerformanceView {
    return NonProductPerformanceView.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<NonProductPerformanceView>): NonProductPerformanceView {
    const message = createBaseNonProductPerformanceView();
    message.date = (object.date !== undefined && object.date !== null)
      ? DateMessage.fromPartial(object.date)
      : undefined;
    message.week = (object.week !== undefined && object.week !== null)
      ? DateMessage.fromPartial(object.week)
      : undefined;
    message.clicks = (object.clicks !== undefined && object.clicks !== null)
      ? Long.fromValue(object.clicks)
      : undefined;
    message.impressions = (object.impressions !== undefined && object.impressions !== null)
      ? Long.fromValue(object.impressions)
      : undefined;
    message.clickThroughRate = object.clickThroughRate ?? undefined;
    return message;
  },
};

function createBaseCompetitiveVisibilityCompetitorView(): CompetitiveVisibilityCompetitorView {
  return {
    date: undefined,
    domain: undefined,
    isYourDomain: undefined,
    reportCountryCode: undefined,
    reportCategoryId: undefined,
    trafficSource: undefined,
    rank: undefined,
    adsOrganicRatio: undefined,
    pageOverlapRate: undefined,
    higherPositionRate: undefined,
    relativeVisibility: undefined,
  };
}

export const CompetitiveVisibilityCompetitorView: MessageFns<CompetitiveVisibilityCompetitorView> = {
  encode(message: CompetitiveVisibilityCompetitorView, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.date !== undefined) {
      DateMessage.encode(message.date, writer.uint32(10).fork()).join();
    }
    if (message.domain !== undefined) {
      writer.uint32(18).string(message.domain);
    }
    if (message.isYourDomain !== undefined) {
      writer.uint32(24).bool(message.isYourDomain);
    }
    if (message.reportCountryCode !== undefined) {
      writer.uint32(34).string(message.reportCountryCode);
    }
    if (message.reportCategoryId !== undefined) {
      writer.uint32(40).int64(message.reportCategoryId.toString());
    }
    if (message.trafficSource !== undefined) {
      writer.uint32(48).int32(message.trafficSource);
    }
    if (message.rank !== undefined) {
      writer.uint32(56).int64(message.rank.toString());
    }
    if (message.adsOrganicRatio !== undefined) {
      writer.uint32(65).double(message.adsOrganicRatio);
    }
    if (message.pageOverlapRate !== undefined) {
      writer.uint32(73).double(message.pageOverlapRate);
    }
    if (message.higherPositionRate !== undefined) {
      writer.uint32(81).double(message.higherPositionRate);
    }
    if (message.relativeVisibility !== undefined) {
      writer.uint32(89).double(message.relativeVisibility);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CompetitiveVisibilityCompetitorView {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCompetitiveVisibilityCompetitorView();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.date = DateMessage.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.domain = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.isYourDomain = reader.bool();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.reportCountryCode = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.reportCategoryId = Long.fromString(reader.int64().toString());
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.trafficSource = reader.int32() as any;
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.rank = Long.fromString(reader.int64().toString());
          continue;
        case 8:
          if (tag !== 65) {
            break;
          }

          message.adsOrganicRatio = reader.double();
          continue;
        case 9:
          if (tag !== 73) {
            break;
          }

          message.pageOverlapRate = reader.double();
          continue;
        case 10:
          if (tag !== 81) {
            break;
          }

          message.higherPositionRate = reader.double();
          continue;
        case 11:
          if (tag !== 89) {
            break;
          }

          message.relativeVisibility = reader.double();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CompetitiveVisibilityCompetitorView {
    return {
      date: isSet(object.date) ? DateMessage.fromJSON(object.date) : undefined,
      domain: isSet(object.domain) ? globalThis.String(object.domain) : undefined,
      isYourDomain: isSet(object.isYourDomain) ? globalThis.Boolean(object.isYourDomain) : undefined,
      reportCountryCode: isSet(object.reportCountryCode) ? globalThis.String(object.reportCountryCode) : undefined,
      reportCategoryId: isSet(object.reportCategoryId) ? Long.fromValue(object.reportCategoryId) : undefined,
      trafficSource: isSet(object.trafficSource)
        ? trafficSource_TrafficSourceEnumFromJSON(object.trafficSource)
        : undefined,
      rank: isSet(object.rank) ? Long.fromValue(object.rank) : undefined,
      adsOrganicRatio: isSet(object.adsOrganicRatio) ? globalThis.Number(object.adsOrganicRatio) : undefined,
      pageOverlapRate: isSet(object.pageOverlapRate) ? globalThis.Number(object.pageOverlapRate) : undefined,
      higherPositionRate: isSet(object.higherPositionRate) ? globalThis.Number(object.higherPositionRate) : undefined,
      relativeVisibility: isSet(object.relativeVisibility) ? globalThis.Number(object.relativeVisibility) : undefined,
    };
  },

  toJSON(message: CompetitiveVisibilityCompetitorView): unknown {
    const obj: any = {};
    if (message.date !== undefined) {
      obj.date = DateMessage.toJSON(message.date);
    }
    if (message.domain !== undefined) {
      obj.domain = message.domain;
    }
    if (message.isYourDomain !== undefined) {
      obj.isYourDomain = message.isYourDomain;
    }
    if (message.reportCountryCode !== undefined) {
      obj.reportCountryCode = message.reportCountryCode;
    }
    if (message.reportCategoryId !== undefined) {
      obj.reportCategoryId = (message.reportCategoryId || Long.ZERO).toString();
    }
    if (message.trafficSource !== undefined) {
      obj.trafficSource = trafficSource_TrafficSourceEnumToJSON(message.trafficSource);
    }
    if (message.rank !== undefined) {
      obj.rank = (message.rank || Long.ZERO).toString();
    }
    if (message.adsOrganicRatio !== undefined) {
      obj.adsOrganicRatio = message.adsOrganicRatio;
    }
    if (message.pageOverlapRate !== undefined) {
      obj.pageOverlapRate = message.pageOverlapRate;
    }
    if (message.higherPositionRate !== undefined) {
      obj.higherPositionRate = message.higherPositionRate;
    }
    if (message.relativeVisibility !== undefined) {
      obj.relativeVisibility = message.relativeVisibility;
    }
    return obj;
  },

  create(base?: DeepPartial<CompetitiveVisibilityCompetitorView>): CompetitiveVisibilityCompetitorView {
    return CompetitiveVisibilityCompetitorView.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CompetitiveVisibilityCompetitorView>): CompetitiveVisibilityCompetitorView {
    const message = createBaseCompetitiveVisibilityCompetitorView();
    message.date = (object.date !== undefined && object.date !== null)
      ? DateMessage.fromPartial(object.date)
      : undefined;
    message.domain = object.domain ?? undefined;
    message.isYourDomain = object.isYourDomain ?? undefined;
    message.reportCountryCode = object.reportCountryCode ?? undefined;
    message.reportCategoryId = (object.reportCategoryId !== undefined && object.reportCategoryId !== null)
      ? Long.fromValue(object.reportCategoryId)
      : undefined;
    message.trafficSource = object.trafficSource ?? undefined;
    message.rank = (object.rank !== undefined && object.rank !== null) ? Long.fromValue(object.rank) : undefined;
    message.adsOrganicRatio = object.adsOrganicRatio ?? undefined;
    message.pageOverlapRate = object.pageOverlapRate ?? undefined;
    message.higherPositionRate = object.higherPositionRate ?? undefined;
    message.relativeVisibility = object.relativeVisibility ?? undefined;
    return message;
  },
};

function createBaseCompetitiveVisibilityTopMerchantView(): CompetitiveVisibilityTopMerchantView {
  return {
    date: undefined,
    domain: undefined,
    isYourDomain: undefined,
    reportCountryCode: undefined,
    reportCategoryId: undefined,
    trafficSource: undefined,
    rank: undefined,
    adsOrganicRatio: undefined,
    pageOverlapRate: undefined,
    higherPositionRate: undefined,
  };
}

export const CompetitiveVisibilityTopMerchantView: MessageFns<CompetitiveVisibilityTopMerchantView> = {
  encode(message: CompetitiveVisibilityTopMerchantView, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.date !== undefined) {
      DateMessage.encode(message.date, writer.uint32(10).fork()).join();
    }
    if (message.domain !== undefined) {
      writer.uint32(18).string(message.domain);
    }
    if (message.isYourDomain !== undefined) {
      writer.uint32(24).bool(message.isYourDomain);
    }
    if (message.reportCountryCode !== undefined) {
      writer.uint32(34).string(message.reportCountryCode);
    }
    if (message.reportCategoryId !== undefined) {
      writer.uint32(40).int64(message.reportCategoryId.toString());
    }
    if (message.trafficSource !== undefined) {
      writer.uint32(48).int32(message.trafficSource);
    }
    if (message.rank !== undefined) {
      writer.uint32(56).int64(message.rank.toString());
    }
    if (message.adsOrganicRatio !== undefined) {
      writer.uint32(65).double(message.adsOrganicRatio);
    }
    if (message.pageOverlapRate !== undefined) {
      writer.uint32(73).double(message.pageOverlapRate);
    }
    if (message.higherPositionRate !== undefined) {
      writer.uint32(81).double(message.higherPositionRate);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CompetitiveVisibilityTopMerchantView {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCompetitiveVisibilityTopMerchantView();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.date = DateMessage.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.domain = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.isYourDomain = reader.bool();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.reportCountryCode = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.reportCategoryId = Long.fromString(reader.int64().toString());
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.trafficSource = reader.int32() as any;
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.rank = Long.fromString(reader.int64().toString());
          continue;
        case 8:
          if (tag !== 65) {
            break;
          }

          message.adsOrganicRatio = reader.double();
          continue;
        case 9:
          if (tag !== 73) {
            break;
          }

          message.pageOverlapRate = reader.double();
          continue;
        case 10:
          if (tag !== 81) {
            break;
          }

          message.higherPositionRate = reader.double();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CompetitiveVisibilityTopMerchantView {
    return {
      date: isSet(object.date) ? DateMessage.fromJSON(object.date) : undefined,
      domain: isSet(object.domain) ? globalThis.String(object.domain) : undefined,
      isYourDomain: isSet(object.isYourDomain) ? globalThis.Boolean(object.isYourDomain) : undefined,
      reportCountryCode: isSet(object.reportCountryCode) ? globalThis.String(object.reportCountryCode) : undefined,
      reportCategoryId: isSet(object.reportCategoryId) ? Long.fromValue(object.reportCategoryId) : undefined,
      trafficSource: isSet(object.trafficSource)
        ? trafficSource_TrafficSourceEnumFromJSON(object.trafficSource)
        : undefined,
      rank: isSet(object.rank) ? Long.fromValue(object.rank) : undefined,
      adsOrganicRatio: isSet(object.adsOrganicRatio) ? globalThis.Number(object.adsOrganicRatio) : undefined,
      pageOverlapRate: isSet(object.pageOverlapRate) ? globalThis.Number(object.pageOverlapRate) : undefined,
      higherPositionRate: isSet(object.higherPositionRate) ? globalThis.Number(object.higherPositionRate) : undefined,
    };
  },

  toJSON(message: CompetitiveVisibilityTopMerchantView): unknown {
    const obj: any = {};
    if (message.date !== undefined) {
      obj.date = DateMessage.toJSON(message.date);
    }
    if (message.domain !== undefined) {
      obj.domain = message.domain;
    }
    if (message.isYourDomain !== undefined) {
      obj.isYourDomain = message.isYourDomain;
    }
    if (message.reportCountryCode !== undefined) {
      obj.reportCountryCode = message.reportCountryCode;
    }
    if (message.reportCategoryId !== undefined) {
      obj.reportCategoryId = (message.reportCategoryId || Long.ZERO).toString();
    }
    if (message.trafficSource !== undefined) {
      obj.trafficSource = trafficSource_TrafficSourceEnumToJSON(message.trafficSource);
    }
    if (message.rank !== undefined) {
      obj.rank = (message.rank || Long.ZERO).toString();
    }
    if (message.adsOrganicRatio !== undefined) {
      obj.adsOrganicRatio = message.adsOrganicRatio;
    }
    if (message.pageOverlapRate !== undefined) {
      obj.pageOverlapRate = message.pageOverlapRate;
    }
    if (message.higherPositionRate !== undefined) {
      obj.higherPositionRate = message.higherPositionRate;
    }
    return obj;
  },

  create(base?: DeepPartial<CompetitiveVisibilityTopMerchantView>): CompetitiveVisibilityTopMerchantView {
    return CompetitiveVisibilityTopMerchantView.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CompetitiveVisibilityTopMerchantView>): CompetitiveVisibilityTopMerchantView {
    const message = createBaseCompetitiveVisibilityTopMerchantView();
    message.date = (object.date !== undefined && object.date !== null)
      ? DateMessage.fromPartial(object.date)
      : undefined;
    message.domain = object.domain ?? undefined;
    message.isYourDomain = object.isYourDomain ?? undefined;
    message.reportCountryCode = object.reportCountryCode ?? undefined;
    message.reportCategoryId = (object.reportCategoryId !== undefined && object.reportCategoryId !== null)
      ? Long.fromValue(object.reportCategoryId)
      : undefined;
    message.trafficSource = object.trafficSource ?? undefined;
    message.rank = (object.rank !== undefined && object.rank !== null) ? Long.fromValue(object.rank) : undefined;
    message.adsOrganicRatio = object.adsOrganicRatio ?? undefined;
    message.pageOverlapRate = object.pageOverlapRate ?? undefined;
    message.higherPositionRate = object.higherPositionRate ?? undefined;
    return message;
  },
};

function createBaseCompetitiveVisibilityBenchmarkView(): CompetitiveVisibilityBenchmarkView {
  return {
    date: undefined,
    reportCountryCode: undefined,
    reportCategoryId: undefined,
    trafficSource: undefined,
    yourDomainVisibilityTrend: undefined,
    categoryBenchmarkVisibilityTrend: undefined,
  };
}

export const CompetitiveVisibilityBenchmarkView: MessageFns<CompetitiveVisibilityBenchmarkView> = {
  encode(message: CompetitiveVisibilityBenchmarkView, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.date !== undefined) {
      DateMessage.encode(message.date, writer.uint32(10).fork()).join();
    }
    if (message.reportCountryCode !== undefined) {
      writer.uint32(18).string(message.reportCountryCode);
    }
    if (message.reportCategoryId !== undefined) {
      writer.uint32(24).int64(message.reportCategoryId.toString());
    }
    if (message.trafficSource !== undefined) {
      writer.uint32(32).int32(message.trafficSource);
    }
    if (message.yourDomainVisibilityTrend !== undefined) {
      writer.uint32(41).double(message.yourDomainVisibilityTrend);
    }
    if (message.categoryBenchmarkVisibilityTrend !== undefined) {
      writer.uint32(49).double(message.categoryBenchmarkVisibilityTrend);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CompetitiveVisibilityBenchmarkView {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCompetitiveVisibilityBenchmarkView();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.date = DateMessage.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.reportCountryCode = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.reportCategoryId = Long.fromString(reader.int64().toString());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.trafficSource = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 41) {
            break;
          }

          message.yourDomainVisibilityTrend = reader.double();
          continue;
        case 6:
          if (tag !== 49) {
            break;
          }

          message.categoryBenchmarkVisibilityTrend = reader.double();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CompetitiveVisibilityBenchmarkView {
    return {
      date: isSet(object.date) ? DateMessage.fromJSON(object.date) : undefined,
      reportCountryCode: isSet(object.reportCountryCode) ? globalThis.String(object.reportCountryCode) : undefined,
      reportCategoryId: isSet(object.reportCategoryId) ? Long.fromValue(object.reportCategoryId) : undefined,
      trafficSource: isSet(object.trafficSource)
        ? trafficSource_TrafficSourceEnumFromJSON(object.trafficSource)
        : undefined,
      yourDomainVisibilityTrend: isSet(object.yourDomainVisibilityTrend)
        ? globalThis.Number(object.yourDomainVisibilityTrend)
        : undefined,
      categoryBenchmarkVisibilityTrend: isSet(object.categoryBenchmarkVisibilityTrend)
        ? globalThis.Number(object.categoryBenchmarkVisibilityTrend)
        : undefined,
    };
  },

  toJSON(message: CompetitiveVisibilityBenchmarkView): unknown {
    const obj: any = {};
    if (message.date !== undefined) {
      obj.date = DateMessage.toJSON(message.date);
    }
    if (message.reportCountryCode !== undefined) {
      obj.reportCountryCode = message.reportCountryCode;
    }
    if (message.reportCategoryId !== undefined) {
      obj.reportCategoryId = (message.reportCategoryId || Long.ZERO).toString();
    }
    if (message.trafficSource !== undefined) {
      obj.trafficSource = trafficSource_TrafficSourceEnumToJSON(message.trafficSource);
    }
    if (message.yourDomainVisibilityTrend !== undefined) {
      obj.yourDomainVisibilityTrend = message.yourDomainVisibilityTrend;
    }
    if (message.categoryBenchmarkVisibilityTrend !== undefined) {
      obj.categoryBenchmarkVisibilityTrend = message.categoryBenchmarkVisibilityTrend;
    }
    return obj;
  },

  create(base?: DeepPartial<CompetitiveVisibilityBenchmarkView>): CompetitiveVisibilityBenchmarkView {
    return CompetitiveVisibilityBenchmarkView.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CompetitiveVisibilityBenchmarkView>): CompetitiveVisibilityBenchmarkView {
    const message = createBaseCompetitiveVisibilityBenchmarkView();
    message.date = (object.date !== undefined && object.date !== null)
      ? DateMessage.fromPartial(object.date)
      : undefined;
    message.reportCountryCode = object.reportCountryCode ?? undefined;
    message.reportCategoryId = (object.reportCategoryId !== undefined && object.reportCategoryId !== null)
      ? Long.fromValue(object.reportCategoryId)
      : undefined;
    message.trafficSource = object.trafficSource ?? undefined;
    message.yourDomainVisibilityTrend = object.yourDomainVisibilityTrend ?? undefined;
    message.categoryBenchmarkVisibilityTrend = object.categoryBenchmarkVisibilityTrend ?? undefined;
    return message;
  },
};

function createBaseMarketingMethod(): MarketingMethod {
  return {};
}

export const MarketingMethod: MessageFns<MarketingMethod> = {
  encode(_: MarketingMethod, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MarketingMethod {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMarketingMethod();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MarketingMethod {
    return {};
  },

  toJSON(_: MarketingMethod): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<MarketingMethod>): MarketingMethod {
    return MarketingMethod.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<MarketingMethod>): MarketingMethod {
    const message = createBaseMarketingMethod();
    return message;
  },
};

function createBaseReportGranularity(): ReportGranularity {
  return {};
}

export const ReportGranularity: MessageFns<ReportGranularity> = {
  encode(_: ReportGranularity, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReportGranularity {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReportGranularity();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ReportGranularity {
    return {};
  },

  toJSON(_: ReportGranularity): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<ReportGranularity>): ReportGranularity {
    return ReportGranularity.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<ReportGranularity>): ReportGranularity {
    const message = createBaseReportGranularity();
    return message;
  },
};

function createBaseRelativeDemand(): RelativeDemand {
  return {};
}

export const RelativeDemand: MessageFns<RelativeDemand> = {
  encode(_: RelativeDemand, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RelativeDemand {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRelativeDemand();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RelativeDemand {
    return {};
  },

  toJSON(_: RelativeDemand): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<RelativeDemand>): RelativeDemand {
    return RelativeDemand.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<RelativeDemand>): RelativeDemand {
    const message = createBaseRelativeDemand();
    return message;
  },
};

function createBaseRelativeDemandChangeType(): RelativeDemandChangeType {
  return {};
}

export const RelativeDemandChangeType: MessageFns<RelativeDemandChangeType> = {
  encode(_: RelativeDemandChangeType, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RelativeDemandChangeType {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRelativeDemandChangeType();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RelativeDemandChangeType {
    return {};
  },

  toJSON(_: RelativeDemandChangeType): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<RelativeDemandChangeType>): RelativeDemandChangeType {
    return RelativeDemandChangeType.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<RelativeDemandChangeType>): RelativeDemandChangeType {
    const message = createBaseRelativeDemandChangeType();
    return message;
  },
};

function createBaseTrafficSource(): TrafficSource {
  return {};
}

export const TrafficSource: MessageFns<TrafficSource> = {
  encode(_: TrafficSource, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TrafficSource {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTrafficSource();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): TrafficSource {
    return {};
  },

  toJSON(_: TrafficSource): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<TrafficSource>): TrafficSource {
    return TrafficSource.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<TrafficSource>): TrafficSource {
    const message = createBaseTrafficSource();
    return message;
  },
};

/**
 * Service for retrieving reports and insights about your products, their
 * performance, and their competitive environment on Google.
 */
export type ReportServiceDefinition = typeof ReportServiceDefinition;
export const ReportServiceDefinition = {
  name: "ReportService",
  fullName: "google.shopping.merchant.reports.v1beta.ReportService",
  methods: {
    /**
     * Retrieves a report defined by a search query. The response might contain
     * fewer rows than specified by `page_size`. Rely on `next_page_token` to
     * determine if there are more rows to be requested.
     */
    search: {
      name: "Search",
      requestType: SearchRequest,
      requestStream: false,
      responseType: SearchResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              55,
              58,
              1,
              42,
              34,
              50,
              47,
              114,
              101,
              112,
              111,
              114,
              116,
              115,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              125,
              47,
              114,
              101,
              112,
              111,
              114,
              116,
              115,
              58,
              115,
              101,
              97,
              114,
              99,
              104,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface ReportServiceImplementation<CallContextExt = {}> {
  /**
   * Retrieves a report defined by a search query. The response might contain
   * fewer rows than specified by `page_size`. Rely on `next_page_token` to
   * determine if there are more rows to be requested.
   */
  search(request: SearchRequest, context: CallContext & CallContextExt): Promise<DeepPartial<SearchResponse>>;
}

export interface ReportServiceClient<CallOptionsExt = {}> {
  /**
   * Retrieves a report defined by a search query. The response might contain
   * fewer rows than specified by `page_size`. Rely on `next_page_token` to
   * determine if there are more rows to be requested.
   */
  search(request: DeepPartial<SearchRequest>, options?: CallOptions & CallOptionsExt): Promise<SearchResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
