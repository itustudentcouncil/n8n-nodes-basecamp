// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/shopping/merchant/datasources/v1beta/datasourcetypes.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.shopping.merchant.datasources.v1beta";

/** The primary data source for local and online products. */
export interface PrimaryProductDataSource {
  /** Required. Immutable. Specifies the type of data source channel. */
  channel: PrimaryProductDataSource_Channel;
  /**
   * Optional. Immutable. The feed label that is specified on the data source
   * level.
   *
   * Must be less than or equal to 20 uppercase letters (A-Z), numbers (0-9),
   * and dashes (-).
   *
   * See also [migration to feed
   * labels](https://developers.google.com/shopping-content/guides/products/feed-labels).
   *
   * `feedLabel` and `contentLanguage` must be either both set or unset for data
   * sources with product content type.
   * They must be set for data sources with a file input.
   *
   * If set, the data source will only accept products matching this
   * combination. If unset, the data source will accept products without that
   * restriction.
   */
  feedLabel?:
    | string
    | undefined;
  /**
   * Optional. Immutable. The two-letter ISO 639-1 language of the items in the
   * data source.
   *
   * `feedLabel` and `contentLanguage` must be either both set or unset.
   * The fields can only be unset for data sources without file input.
   *
   * If set, the data source will only accept products matching this
   * combination. If unset, the data source will accept products without that
   * restriction.
   */
  contentLanguage?:
    | string
    | undefined;
  /**
   * Optional. The countries where the items may be displayed. Represented as a
   * [CLDR territory
   * code](https://github.com/unicode-org/cldr/blob/latest/common/main/en.xml).
   */
  countries: string[];
  /**
   * Optional. Default rule management of the data source. If set, the linked
   * data sources will be replaced.
   */
  defaultRule: PrimaryProductDataSource_DefaultRule | undefined;
}

/**
 * Data Source Channel.
 *
 * Channel is used to distinguish between data sources for different product
 * verticals.
 */
export enum PrimaryProductDataSource_Channel {
  /** CHANNEL_UNSPECIFIED - Not specified. */
  CHANNEL_UNSPECIFIED = 0,
  /** ONLINE_PRODUCTS - Online product. */
  ONLINE_PRODUCTS = 1,
  /** LOCAL_PRODUCTS - Local product. */
  LOCAL_PRODUCTS = 2,
  /**
   * PRODUCTS - Unified data source for both local and online products.
   * Note: Products management through the API is not possible for this
   * channel.
   */
  PRODUCTS = 3,
  UNRECOGNIZED = -1,
}

export function primaryProductDataSource_ChannelFromJSON(object: any): PrimaryProductDataSource_Channel {
  switch (object) {
    case 0:
    case "CHANNEL_UNSPECIFIED":
      return PrimaryProductDataSource_Channel.CHANNEL_UNSPECIFIED;
    case 1:
    case "ONLINE_PRODUCTS":
      return PrimaryProductDataSource_Channel.ONLINE_PRODUCTS;
    case 2:
    case "LOCAL_PRODUCTS":
      return PrimaryProductDataSource_Channel.LOCAL_PRODUCTS;
    case 3:
    case "PRODUCTS":
      return PrimaryProductDataSource_Channel.PRODUCTS;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PrimaryProductDataSource_Channel.UNRECOGNIZED;
  }
}

export function primaryProductDataSource_ChannelToJSON(object: PrimaryProductDataSource_Channel): string {
  switch (object) {
    case PrimaryProductDataSource_Channel.CHANNEL_UNSPECIFIED:
      return "CHANNEL_UNSPECIFIED";
    case PrimaryProductDataSource_Channel.ONLINE_PRODUCTS:
      return "ONLINE_PRODUCTS";
    case PrimaryProductDataSource_Channel.LOCAL_PRODUCTS:
      return "LOCAL_PRODUCTS";
    case PrimaryProductDataSource_Channel.PRODUCTS:
      return "PRODUCTS";
    case PrimaryProductDataSource_Channel.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Default rule management of the data source. */
export interface PrimaryProductDataSource_DefaultRule {
  /**
   * Required. The list of data sources linked in the [default
   * rule](https://support.google.com/merchants/answer/7450276).
   * This list is ordered by the default rule priority of joining the data.
   * It might include none or multiple references to `self` and supplemental
   * data sources.
   *
   * The list must not be empty.
   *
   * To link the data source to the default rule, you need to add a
   * new reference to this list (in sequential order).
   *
   * To unlink the data source from the default rule, you need to
   * remove the given reference from this list.
   *
   * Changing the order of this list will result in changing the priority of
   * data sources in the default rule.
   *
   * For example, providing the following list: [`1001`, `self`] will
   * take attribute values from supplemental data source `1001`, and fallback
   * to `self` if the attribute is not set in `1001`.
   */
  takeFromDataSources: DataSourceReference[];
}

/** The supplemental data source for local and online products. */
export interface SupplementalProductDataSource {
  /**
   * Optional. Immutable. The feed label that is specified on the data source
   * level.
   *
   * Must be less than or equal to 20 uppercase letters (A-Z), numbers (0-9),
   * and dashes (-).
   *
   * See also [migration to feed
   * labels](https://developers.google.com/shopping-content/guides/products/feed-labels).
   *
   * `feedLabel` and `contentLanguage` must be either both set or unset for data
   * sources with product content type.
   * They must be set for data sources with a file input.
   *
   * If set, the data source will only accept products matching this
   * combination. If unset, the data source will accept produts without that
   * restriction.
   */
  feedLabel?:
    | string
    | undefined;
  /**
   * Optional. Immutable. The two-letter ISO 639-1 language of the items in the
   * data source.
   *
   * `feedLabel` and `contentLanguage` must be either both set or unset.
   * The fields can only be unset for data sources without file input.
   *
   * If set, the data source will only accept products matching this
   * combination. If unset, the data source will accept produts without that
   * restriction.
   */
  contentLanguage?:
    | string
    | undefined;
  /**
   * Output only. The (unordered and deduplicated) list of all primary data
   * sources linked to this data source in either default or custom rules.
   * Supplemental data source cannot be deleted before all links are removed.
   */
  referencingPrimaryDataSources: DataSourceReference[];
}

/** The local inventory data source. */
export interface LocalInventoryDataSource {
  /**
   * Required. Immutable. The feed label of the offers to which the local
   * inventory is provided.
   *
   * Must be less than or equal to 20 uppercase letters (A-Z), numbers (0-9),
   * and dashes (-).
   *
   * See also [migration to feed
   * labels](https://developers.google.com/shopping-content/guides/products/feed-labels).
   */
  feedLabel: string;
  /**
   * Required. Immutable. The two-letter ISO 639-1 language of the items to
   * which the local inventory is provided.
   */
  contentLanguage: string;
}

/** The regional inventory data source. */
export interface RegionalInventoryDataSource {
  /**
   * Required. Immutable. The feed label of the offers to which the regional
   * inventory is provided.
   *
   * Must be less than or equal to 20 uppercase letters (A-Z), numbers (0-9),
   * and dashes (-).
   *
   * See also [migration to feed
   * labels](https://developers.google.com/shopping-content/guides/products/feed-labels).
   */
  feedLabel: string;
  /**
   * Required. Immutable. The two-letter ISO 639-1 language of the items to
   * which the regional inventory is provided.
   */
  contentLanguage: string;
}

/** The promotion data source. */
export interface PromotionDataSource {
  /**
   * Required. Immutable. The target country used as part of the unique
   * identifier. Represented as a [CLDR territory
   * code](https://github.com/unicode-org/cldr/blob/latest/common/main/en.xml).
   *
   * Promotions are only available in selected
   * [countries](https://support.google.com/merchants/answer/4588460).
   */
  targetCountry: string;
  /**
   * Required. Immutable. The two-letter ISO 639-1 language of the items in the
   * data source.
   */
  contentLanguage: string;
}

/**
 * Data source reference can be used to manage related data sources within the
 * data source service.
 */
export interface DataSourceReference {
  /** Self should be used to reference the primary data source itself. */
  self?:
    | boolean
    | undefined;
  /**
   * Optional. The name of the primary data source.
   * Format:
   * `accounts/{account}/dataSources/{datasource}`
   */
  primaryDataSourceName?:
    | string
    | undefined;
  /**
   * Optional. The name of the supplemental data source.
   * Format:
   * `accounts/{account}/dataSources/{datasource}`
   */
  supplementalDataSourceName?: string | undefined;
}

function createBasePrimaryProductDataSource(): PrimaryProductDataSource {
  return { channel: 0, feedLabel: undefined, contentLanguage: undefined, countries: [], defaultRule: undefined };
}

export const PrimaryProductDataSource: MessageFns<PrimaryProductDataSource> = {
  encode(message: PrimaryProductDataSource, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.channel !== 0) {
      writer.uint32(24).int32(message.channel);
    }
    if (message.feedLabel !== undefined) {
      writer.uint32(34).string(message.feedLabel);
    }
    if (message.contentLanguage !== undefined) {
      writer.uint32(42).string(message.contentLanguage);
    }
    for (const v of message.countries) {
      writer.uint32(50).string(v!);
    }
    if (message.defaultRule !== undefined) {
      PrimaryProductDataSource_DefaultRule.encode(message.defaultRule, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PrimaryProductDataSource {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePrimaryProductDataSource();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 3:
          if (tag !== 24) {
            break;
          }

          message.channel = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.feedLabel = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.contentLanguage = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.countries.push(reader.string());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.defaultRule = PrimaryProductDataSource_DefaultRule.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PrimaryProductDataSource {
    return {
      channel: isSet(object.channel) ? primaryProductDataSource_ChannelFromJSON(object.channel) : 0,
      feedLabel: isSet(object.feedLabel) ? globalThis.String(object.feedLabel) : undefined,
      contentLanguage: isSet(object.contentLanguage) ? globalThis.String(object.contentLanguage) : undefined,
      countries: globalThis.Array.isArray(object?.countries)
        ? object.countries.map((e: any) => globalThis.String(e))
        : [],
      defaultRule: isSet(object.defaultRule)
        ? PrimaryProductDataSource_DefaultRule.fromJSON(object.defaultRule)
        : undefined,
    };
  },

  toJSON(message: PrimaryProductDataSource): unknown {
    const obj: any = {};
    if (message.channel !== 0) {
      obj.channel = primaryProductDataSource_ChannelToJSON(message.channel);
    }
    if (message.feedLabel !== undefined) {
      obj.feedLabel = message.feedLabel;
    }
    if (message.contentLanguage !== undefined) {
      obj.contentLanguage = message.contentLanguage;
    }
    if (message.countries?.length) {
      obj.countries = message.countries;
    }
    if (message.defaultRule !== undefined) {
      obj.defaultRule = PrimaryProductDataSource_DefaultRule.toJSON(message.defaultRule);
    }
    return obj;
  },

  create(base?: DeepPartial<PrimaryProductDataSource>): PrimaryProductDataSource {
    return PrimaryProductDataSource.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PrimaryProductDataSource>): PrimaryProductDataSource {
    const message = createBasePrimaryProductDataSource();
    message.channel = object.channel ?? 0;
    message.feedLabel = object.feedLabel ?? undefined;
    message.contentLanguage = object.contentLanguage ?? undefined;
    message.countries = object.countries?.map((e) => e) || [];
    message.defaultRule = (object.defaultRule !== undefined && object.defaultRule !== null)
      ? PrimaryProductDataSource_DefaultRule.fromPartial(object.defaultRule)
      : undefined;
    return message;
  },
};

function createBasePrimaryProductDataSource_DefaultRule(): PrimaryProductDataSource_DefaultRule {
  return { takeFromDataSources: [] };
}

export const PrimaryProductDataSource_DefaultRule: MessageFns<PrimaryProductDataSource_DefaultRule> = {
  encode(message: PrimaryProductDataSource_DefaultRule, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.takeFromDataSources) {
      DataSourceReference.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PrimaryProductDataSource_DefaultRule {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePrimaryProductDataSource_DefaultRule();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.takeFromDataSources.push(DataSourceReference.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PrimaryProductDataSource_DefaultRule {
    return {
      takeFromDataSources: globalThis.Array.isArray(object?.takeFromDataSources)
        ? object.takeFromDataSources.map((e: any) => DataSourceReference.fromJSON(e))
        : [],
    };
  },

  toJSON(message: PrimaryProductDataSource_DefaultRule): unknown {
    const obj: any = {};
    if (message.takeFromDataSources?.length) {
      obj.takeFromDataSources = message.takeFromDataSources.map((e) => DataSourceReference.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<PrimaryProductDataSource_DefaultRule>): PrimaryProductDataSource_DefaultRule {
    return PrimaryProductDataSource_DefaultRule.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PrimaryProductDataSource_DefaultRule>): PrimaryProductDataSource_DefaultRule {
    const message = createBasePrimaryProductDataSource_DefaultRule();
    message.takeFromDataSources = object.takeFromDataSources?.map((e) => DataSourceReference.fromPartial(e)) || [];
    return message;
  },
};

function createBaseSupplementalProductDataSource(): SupplementalProductDataSource {
  return { feedLabel: undefined, contentLanguage: undefined, referencingPrimaryDataSources: [] };
}

export const SupplementalProductDataSource: MessageFns<SupplementalProductDataSource> = {
  encode(message: SupplementalProductDataSource, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.feedLabel !== undefined) {
      writer.uint32(34).string(message.feedLabel);
    }
    if (message.contentLanguage !== undefined) {
      writer.uint32(42).string(message.contentLanguage);
    }
    for (const v of message.referencingPrimaryDataSources) {
      DataSourceReference.encode(v!, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SupplementalProductDataSource {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSupplementalProductDataSource();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 4:
          if (tag !== 34) {
            break;
          }

          message.feedLabel = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.contentLanguage = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.referencingPrimaryDataSources.push(DataSourceReference.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SupplementalProductDataSource {
    return {
      feedLabel: isSet(object.feedLabel) ? globalThis.String(object.feedLabel) : undefined,
      contentLanguage: isSet(object.contentLanguage) ? globalThis.String(object.contentLanguage) : undefined,
      referencingPrimaryDataSources: globalThis.Array.isArray(object?.referencingPrimaryDataSources)
        ? object.referencingPrimaryDataSources.map((e: any) => DataSourceReference.fromJSON(e))
        : [],
    };
  },

  toJSON(message: SupplementalProductDataSource): unknown {
    const obj: any = {};
    if (message.feedLabel !== undefined) {
      obj.feedLabel = message.feedLabel;
    }
    if (message.contentLanguage !== undefined) {
      obj.contentLanguage = message.contentLanguage;
    }
    if (message.referencingPrimaryDataSources?.length) {
      obj.referencingPrimaryDataSources = message.referencingPrimaryDataSources.map((e) =>
        DataSourceReference.toJSON(e)
      );
    }
    return obj;
  },

  create(base?: DeepPartial<SupplementalProductDataSource>): SupplementalProductDataSource {
    return SupplementalProductDataSource.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SupplementalProductDataSource>): SupplementalProductDataSource {
    const message = createBaseSupplementalProductDataSource();
    message.feedLabel = object.feedLabel ?? undefined;
    message.contentLanguage = object.contentLanguage ?? undefined;
    message.referencingPrimaryDataSources =
      object.referencingPrimaryDataSources?.map((e) => DataSourceReference.fromPartial(e)) || [];
    return message;
  },
};

function createBaseLocalInventoryDataSource(): LocalInventoryDataSource {
  return { feedLabel: "", contentLanguage: "" };
}

export const LocalInventoryDataSource: MessageFns<LocalInventoryDataSource> = {
  encode(message: LocalInventoryDataSource, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.feedLabel !== "") {
      writer.uint32(34).string(message.feedLabel);
    }
    if (message.contentLanguage !== "") {
      writer.uint32(42).string(message.contentLanguage);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LocalInventoryDataSource {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLocalInventoryDataSource();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 4:
          if (tag !== 34) {
            break;
          }

          message.feedLabel = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.contentLanguage = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LocalInventoryDataSource {
    return {
      feedLabel: isSet(object.feedLabel) ? globalThis.String(object.feedLabel) : "",
      contentLanguage: isSet(object.contentLanguage) ? globalThis.String(object.contentLanguage) : "",
    };
  },

  toJSON(message: LocalInventoryDataSource): unknown {
    const obj: any = {};
    if (message.feedLabel !== "") {
      obj.feedLabel = message.feedLabel;
    }
    if (message.contentLanguage !== "") {
      obj.contentLanguage = message.contentLanguage;
    }
    return obj;
  },

  create(base?: DeepPartial<LocalInventoryDataSource>): LocalInventoryDataSource {
    return LocalInventoryDataSource.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LocalInventoryDataSource>): LocalInventoryDataSource {
    const message = createBaseLocalInventoryDataSource();
    message.feedLabel = object.feedLabel ?? "";
    message.contentLanguage = object.contentLanguage ?? "";
    return message;
  },
};

function createBaseRegionalInventoryDataSource(): RegionalInventoryDataSource {
  return { feedLabel: "", contentLanguage: "" };
}

export const RegionalInventoryDataSource: MessageFns<RegionalInventoryDataSource> = {
  encode(message: RegionalInventoryDataSource, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.feedLabel !== "") {
      writer.uint32(34).string(message.feedLabel);
    }
    if (message.contentLanguage !== "") {
      writer.uint32(42).string(message.contentLanguage);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RegionalInventoryDataSource {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRegionalInventoryDataSource();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 4:
          if (tag !== 34) {
            break;
          }

          message.feedLabel = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.contentLanguage = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RegionalInventoryDataSource {
    return {
      feedLabel: isSet(object.feedLabel) ? globalThis.String(object.feedLabel) : "",
      contentLanguage: isSet(object.contentLanguage) ? globalThis.String(object.contentLanguage) : "",
    };
  },

  toJSON(message: RegionalInventoryDataSource): unknown {
    const obj: any = {};
    if (message.feedLabel !== "") {
      obj.feedLabel = message.feedLabel;
    }
    if (message.contentLanguage !== "") {
      obj.contentLanguage = message.contentLanguage;
    }
    return obj;
  },

  create(base?: DeepPartial<RegionalInventoryDataSource>): RegionalInventoryDataSource {
    return RegionalInventoryDataSource.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RegionalInventoryDataSource>): RegionalInventoryDataSource {
    const message = createBaseRegionalInventoryDataSource();
    message.feedLabel = object.feedLabel ?? "";
    message.contentLanguage = object.contentLanguage ?? "";
    return message;
  },
};

function createBasePromotionDataSource(): PromotionDataSource {
  return { targetCountry: "", contentLanguage: "" };
}

export const PromotionDataSource: MessageFns<PromotionDataSource> = {
  encode(message: PromotionDataSource, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.targetCountry !== "") {
      writer.uint32(10).string(message.targetCountry);
    }
    if (message.contentLanguage !== "") {
      writer.uint32(18).string(message.contentLanguage);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PromotionDataSource {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePromotionDataSource();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.targetCountry = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.contentLanguage = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PromotionDataSource {
    return {
      targetCountry: isSet(object.targetCountry) ? globalThis.String(object.targetCountry) : "",
      contentLanguage: isSet(object.contentLanguage) ? globalThis.String(object.contentLanguage) : "",
    };
  },

  toJSON(message: PromotionDataSource): unknown {
    const obj: any = {};
    if (message.targetCountry !== "") {
      obj.targetCountry = message.targetCountry;
    }
    if (message.contentLanguage !== "") {
      obj.contentLanguage = message.contentLanguage;
    }
    return obj;
  },

  create(base?: DeepPartial<PromotionDataSource>): PromotionDataSource {
    return PromotionDataSource.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PromotionDataSource>): PromotionDataSource {
    const message = createBasePromotionDataSource();
    message.targetCountry = object.targetCountry ?? "";
    message.contentLanguage = object.contentLanguage ?? "";
    return message;
  },
};

function createBaseDataSourceReference(): DataSourceReference {
  return { self: undefined, primaryDataSourceName: undefined, supplementalDataSourceName: undefined };
}

export const DataSourceReference: MessageFns<DataSourceReference> = {
  encode(message: DataSourceReference, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.self !== undefined) {
      writer.uint32(8).bool(message.self);
    }
    if (message.primaryDataSourceName !== undefined) {
      writer.uint32(26).string(message.primaryDataSourceName);
    }
    if (message.supplementalDataSourceName !== undefined) {
      writer.uint32(18).string(message.supplementalDataSourceName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DataSourceReference {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDataSourceReference();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.self = reader.bool();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.primaryDataSourceName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.supplementalDataSourceName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DataSourceReference {
    return {
      self: isSet(object.self) ? globalThis.Boolean(object.self) : undefined,
      primaryDataSourceName: isSet(object.primaryDataSourceName)
        ? globalThis.String(object.primaryDataSourceName)
        : undefined,
      supplementalDataSourceName: isSet(object.supplementalDataSourceName)
        ? globalThis.String(object.supplementalDataSourceName)
        : undefined,
    };
  },

  toJSON(message: DataSourceReference): unknown {
    const obj: any = {};
    if (message.self !== undefined) {
      obj.self = message.self;
    }
    if (message.primaryDataSourceName !== undefined) {
      obj.primaryDataSourceName = message.primaryDataSourceName;
    }
    if (message.supplementalDataSourceName !== undefined) {
      obj.supplementalDataSourceName = message.supplementalDataSourceName;
    }
    return obj;
  },

  create(base?: DeepPartial<DataSourceReference>): DataSourceReference {
    return DataSourceReference.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DataSourceReference>): DataSourceReference {
    const message = createBaseDataSourceReference();
    message.self = object.self ?? undefined;
    message.primaryDataSourceName = object.primaryDataSourceName ?? undefined;
    message.supplementalDataSourceName = object.supplementalDataSourceName ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
