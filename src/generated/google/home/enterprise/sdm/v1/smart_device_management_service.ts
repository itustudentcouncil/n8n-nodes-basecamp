// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/home/enterprise/sdm/v1/smart_device_management_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Struct } from "../../../../protobuf/struct.js";
import { Device } from "./device.js";
import { Room, Structure } from "./site.js";

export const protobufPackage = "google.home.enterprise.sdm.v1";

/** Request message for SmartDeviceManagementService.GetDevice */
export interface GetDeviceRequest {
  /**
   * The name of the device requested. For example:
   * "enterprises/XYZ/devices/123"
   */
  name: string;
}

/** Request message for SmartDeviceManagementService.ListDevices */
export interface ListDevicesRequest {
  /** The parent enterprise to list devices under. E.g. "enterprises/XYZ". */
  parent: string;
  /**
   * Optional requested page size. Server may return fewer devices than
   * requested. If unspecified, server will pick an appropriate default.
   */
  pageSize: number;
  /** Optional token of the page to retrieve. */
  pageToken: string;
  /**
   * Optional filter to list devices.
   *
   * Filters can be done on:
   * Device custom name (substring match):
   * 'customName=wing'
   */
  filter: string;
}

/** Response message for SmartDeviceManagementService.ListDevices */
export interface ListDevicesResponse {
  /** The list of devices. */
  devices: Device[];
  /** The pagination token to retrieve the next page of results. */
  nextPageToken: string;
}

/** Request message for SmartDeviceManagementService.ExecuteDeviceCommand */
export interface ExecuteDeviceCommandRequest {
  /**
   * The name of the device requested. For example:
   * "enterprises/XYZ/devices/123"
   */
  name: string;
  /**
   * The command name to execute, represented by the fully qualified protobuf
   * message name.
   */
  command: string;
  /** The command message to execute, represented as a Struct. */
  params: { [key: string]: any } | undefined;
}

/** Response message for SmartDeviceManagementService.ExecuteDeviceCommand */
export interface ExecuteDeviceCommandResponse {
  /** The results of executing the command. */
  results: { [key: string]: any } | undefined;
}

/** Request message for SmartDeviceManagementService.GetStructure */
export interface GetStructureRequest {
  /**
   * The name of the structure requested. For example:
   * "enterprises/XYZ/structures/ABC".
   */
  name: string;
}

/** Request message for SmartDeviceManagementService.ListStructures */
export interface ListStructuresRequest {
  /** The parent enterprise to list structures under. E.g. "enterprises/XYZ". */
  parent: string;
  /**
   * Requested page size. Server may return fewer structures than requested.
   * If unspecified, server will pick an appropriate default.
   */
  pageSize: number;
  /** The token of the page to retrieve. */
  pageToken: string;
  /** Optional filter to list structures. */
  filter: string;
}

/** Response message for SmartDeviceManagementService.ListStructures */
export interface ListStructuresResponse {
  /** The list of structures. */
  structures: Structure[];
  /**
   * The pagination token to retrieve the next page of results.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

/** Request message for SmartDeviceManagementService.GetRoom */
export interface GetRoomRequest {
  /**
   * The name of the room requested. For example:
   * "enterprises/XYZ/structures/ABC/rooms/123".
   */
  name: string;
}

/** Request message for SmartDeviceManagementService.ListRooms */
export interface ListRoomsRequest {
  /**
   * The parent resource name of the rooms requested. For example:
   * "enterprises/XYZ/structures/ABC".
   */
  parent: string;
  /**
   * Requested page size. Server may return fewer rooms than requested.
   * If unspecified, server will pick an appropriate default.
   */
  pageSize: number;
  /** The token of the page to retrieve. */
  pageToken: string;
}

/** Response message for SmartDeviceManagementService.ListRooms */
export interface ListRoomsResponse {
  /** The list of rooms. */
  rooms: Room[];
  /**
   * The pagination token to retrieve the next page of results.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

function createBaseGetDeviceRequest(): GetDeviceRequest {
  return { name: "" };
}

export const GetDeviceRequest: MessageFns<GetDeviceRequest> = {
  encode(message: GetDeviceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetDeviceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDeviceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDeviceRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetDeviceRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetDeviceRequest>): GetDeviceRequest {
    return GetDeviceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetDeviceRequest>): GetDeviceRequest {
    const message = createBaseGetDeviceRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListDevicesRequest(): ListDevicesRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "" };
}

export const ListDevicesRequest: MessageFns<ListDevicesRequest> = {
  encode(message: ListDevicesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListDevicesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListDevicesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListDevicesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
    };
  },

  toJSON(message: ListDevicesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    return obj;
  },

  create(base?: DeepPartial<ListDevicesRequest>): ListDevicesRequest {
    return ListDevicesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListDevicesRequest>): ListDevicesRequest {
    const message = createBaseListDevicesRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    return message;
  },
};

function createBaseListDevicesResponse(): ListDevicesResponse {
  return { devices: [], nextPageToken: "" };
}

export const ListDevicesResponse: MessageFns<ListDevicesResponse> = {
  encode(message: ListDevicesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.devices) {
      Device.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListDevicesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListDevicesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.devices.push(Device.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListDevicesResponse {
    return {
      devices: globalThis.Array.isArray(object?.devices) ? object.devices.map((e: any) => Device.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListDevicesResponse): unknown {
    const obj: any = {};
    if (message.devices?.length) {
      obj.devices = message.devices.map((e) => Device.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListDevicesResponse>): ListDevicesResponse {
    return ListDevicesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListDevicesResponse>): ListDevicesResponse {
    const message = createBaseListDevicesResponse();
    message.devices = object.devices?.map((e) => Device.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseExecuteDeviceCommandRequest(): ExecuteDeviceCommandRequest {
  return { name: "", command: "", params: undefined };
}

export const ExecuteDeviceCommandRequest: MessageFns<ExecuteDeviceCommandRequest> = {
  encode(message: ExecuteDeviceCommandRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.command !== "") {
      writer.uint32(18).string(message.command);
    }
    if (message.params !== undefined) {
      Struct.encode(Struct.wrap(message.params), writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExecuteDeviceCommandRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExecuteDeviceCommandRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.command = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.params = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExecuteDeviceCommandRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      command: isSet(object.command) ? globalThis.String(object.command) : "",
      params: isObject(object.params) ? object.params : undefined,
    };
  },

  toJSON(message: ExecuteDeviceCommandRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.command !== "") {
      obj.command = message.command;
    }
    if (message.params !== undefined) {
      obj.params = message.params;
    }
    return obj;
  },

  create(base?: DeepPartial<ExecuteDeviceCommandRequest>): ExecuteDeviceCommandRequest {
    return ExecuteDeviceCommandRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExecuteDeviceCommandRequest>): ExecuteDeviceCommandRequest {
    const message = createBaseExecuteDeviceCommandRequest();
    message.name = object.name ?? "";
    message.command = object.command ?? "";
    message.params = object.params ?? undefined;
    return message;
  },
};

function createBaseExecuteDeviceCommandResponse(): ExecuteDeviceCommandResponse {
  return { results: undefined };
}

export const ExecuteDeviceCommandResponse: MessageFns<ExecuteDeviceCommandResponse> = {
  encode(message: ExecuteDeviceCommandResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.results !== undefined) {
      Struct.encode(Struct.wrap(message.results), writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExecuteDeviceCommandResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExecuteDeviceCommandResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.results = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExecuteDeviceCommandResponse {
    return { results: isObject(object.results) ? object.results : undefined };
  },

  toJSON(message: ExecuteDeviceCommandResponse): unknown {
    const obj: any = {};
    if (message.results !== undefined) {
      obj.results = message.results;
    }
    return obj;
  },

  create(base?: DeepPartial<ExecuteDeviceCommandResponse>): ExecuteDeviceCommandResponse {
    return ExecuteDeviceCommandResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExecuteDeviceCommandResponse>): ExecuteDeviceCommandResponse {
    const message = createBaseExecuteDeviceCommandResponse();
    message.results = object.results ?? undefined;
    return message;
  },
};

function createBaseGetStructureRequest(): GetStructureRequest {
  return { name: "" };
}

export const GetStructureRequest: MessageFns<GetStructureRequest> = {
  encode(message: GetStructureRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetStructureRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetStructureRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetStructureRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetStructureRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetStructureRequest>): GetStructureRequest {
    return GetStructureRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetStructureRequest>): GetStructureRequest {
    const message = createBaseGetStructureRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListStructuresRequest(): ListStructuresRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "" };
}

export const ListStructuresRequest: MessageFns<ListStructuresRequest> = {
  encode(message: ListStructuresRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListStructuresRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListStructuresRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListStructuresRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
    };
  },

  toJSON(message: ListStructuresRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    return obj;
  },

  create(base?: DeepPartial<ListStructuresRequest>): ListStructuresRequest {
    return ListStructuresRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListStructuresRequest>): ListStructuresRequest {
    const message = createBaseListStructuresRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    return message;
  },
};

function createBaseListStructuresResponse(): ListStructuresResponse {
  return { structures: [], nextPageToken: "" };
}

export const ListStructuresResponse: MessageFns<ListStructuresResponse> = {
  encode(message: ListStructuresResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.structures) {
      Structure.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListStructuresResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListStructuresResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.structures.push(Structure.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListStructuresResponse {
    return {
      structures: globalThis.Array.isArray(object?.structures)
        ? object.structures.map((e: any) => Structure.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListStructuresResponse): unknown {
    const obj: any = {};
    if (message.structures?.length) {
      obj.structures = message.structures.map((e) => Structure.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListStructuresResponse>): ListStructuresResponse {
    return ListStructuresResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListStructuresResponse>): ListStructuresResponse {
    const message = createBaseListStructuresResponse();
    message.structures = object.structures?.map((e) => Structure.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetRoomRequest(): GetRoomRequest {
  return { name: "" };
}

export const GetRoomRequest: MessageFns<GetRoomRequest> = {
  encode(message: GetRoomRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetRoomRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetRoomRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetRoomRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetRoomRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetRoomRequest>): GetRoomRequest {
    return GetRoomRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetRoomRequest>): GetRoomRequest {
    const message = createBaseGetRoomRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListRoomsRequest(): ListRoomsRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListRoomsRequest: MessageFns<ListRoomsRequest> = {
  encode(message: ListRoomsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListRoomsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListRoomsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListRoomsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListRoomsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListRoomsRequest>): ListRoomsRequest {
    return ListRoomsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListRoomsRequest>): ListRoomsRequest {
    const message = createBaseListRoomsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListRoomsResponse(): ListRoomsResponse {
  return { rooms: [], nextPageToken: "" };
}

export const ListRoomsResponse: MessageFns<ListRoomsResponse> = {
  encode(message: ListRoomsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.rooms) {
      Room.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListRoomsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListRoomsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.rooms.push(Room.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListRoomsResponse {
    return {
      rooms: globalThis.Array.isArray(object?.rooms) ? object.rooms.map((e: any) => Room.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListRoomsResponse): unknown {
    const obj: any = {};
    if (message.rooms?.length) {
      obj.rooms = message.rooms.map((e) => Room.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListRoomsResponse>): ListRoomsResponse {
    return ListRoomsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListRoomsResponse>): ListRoomsResponse {
    const message = createBaseListRoomsResponse();
    message.rooms = object.rooms?.map((e) => Room.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

/**
 * A service that allows API consumers to provision and manage Google
 * Home structures and devices for enterprise use cases.
 */
export type SmartDeviceManagementServiceDefinition = typeof SmartDeviceManagementServiceDefinition;
export const SmartDeviceManagementServiceDefinition = {
  name: "SmartDeviceManagementService",
  fullName: "google.home.enterprise.sdm.v1.SmartDeviceManagementService",
  methods: {
    /** Gets a device managed by the enterprise. */
    getDevice: {
      name: "GetDevice",
      requestType: GetDeviceRequest,
      requestStream: false,
      responseType: Device,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              36,
              18,
              34,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              101,
              110,
              116,
              101,
              114,
              112,
              114,
              105,
              115,
              101,
              115,
              47,
              42,
              47,
              100,
              101,
              118,
              105,
              99,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists devices managed by the enterprise. */
    listDevices: {
      name: "ListDevices",
      requestType: ListDevicesRequest,
      requestStream: false,
      responseType: ListDevicesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              36,
              18,
              34,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              101,
              110,
              116,
              101,
              114,
              112,
              114,
              105,
              115,
              101,
              115,
              47,
              42,
              125,
              47,
              100,
              101,
              118,
              105,
              99,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Executes a command to device managed by the enterprise. */
    executeDeviceCommand: {
      name: "ExecuteDeviceCommand",
      requestType: ExecuteDeviceCommandRequest,
      requestStream: false,
      responseType: ExecuteDeviceCommandResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              54,
              58,
              1,
              42,
              34,
              49,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              101,
              110,
              116,
              101,
              114,
              112,
              114,
              105,
              115,
              101,
              115,
              47,
              42,
              47,
              100,
              101,
              118,
              105,
              99,
              101,
              115,
              47,
              42,
              125,
              58,
              101,
              120,
              101,
              99,
              117,
              116,
              101,
              67,
              111,
              109,
              109,
              97,
              110,
              100,
            ]),
          ],
        },
      },
    },
    /** Gets a structure managed by the enterprise. */
    getStructure: {
      name: "GetStructure",
      requestType: GetStructureRequest,
      requestStream: false,
      responseType: Structure,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              39,
              18,
              37,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              101,
              110,
              116,
              101,
              114,
              112,
              114,
              105,
              115,
              101,
              115,
              47,
              42,
              47,
              115,
              116,
              114,
              117,
              99,
              116,
              117,
              114,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists structures managed by the enterprise. */
    listStructures: {
      name: "ListStructures",
      requestType: ListStructuresRequest,
      requestStream: false,
      responseType: ListStructuresResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              39,
              18,
              37,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              101,
              110,
              116,
              101,
              114,
              112,
              114,
              105,
              115,
              101,
              115,
              47,
              42,
              125,
              47,
              115,
              116,
              114,
              117,
              99,
              116,
              117,
              114,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets a room managed by the enterprise. */
    getRoom: {
      name: "GetRoom",
      requestType: GetRoomRequest,
      requestStream: false,
      responseType: Room,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              47,
              18,
              45,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              101,
              110,
              116,
              101,
              114,
              112,
              114,
              105,
              115,
              101,
              115,
              47,
              42,
              47,
              115,
              116,
              114,
              117,
              99,
              116,
              117,
              114,
              101,
              115,
              47,
              42,
              47,
              114,
              111,
              111,
              109,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists rooms managed by the enterprise. */
    listRooms: {
      name: "ListRooms",
      requestType: ListRoomsRequest,
      requestStream: false,
      responseType: ListRoomsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              47,
              18,
              45,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              101,
              110,
              116,
              101,
              114,
              112,
              114,
              105,
              115,
              101,
              115,
              47,
              42,
              47,
              115,
              116,
              114,
              117,
              99,
              116,
              117,
              114,
              101,
              115,
              47,
              42,
              125,
              47,
              114,
              111,
              111,
              109,
              115,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface SmartDeviceManagementServiceImplementation<CallContextExt = {}> {
  /** Gets a device managed by the enterprise. */
  getDevice(request: GetDeviceRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Device>>;
  /** Lists devices managed by the enterprise. */
  listDevices(
    request: ListDevicesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListDevicesResponse>>;
  /** Executes a command to device managed by the enterprise. */
  executeDeviceCommand(
    request: ExecuteDeviceCommandRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ExecuteDeviceCommandResponse>>;
  /** Gets a structure managed by the enterprise. */
  getStructure(request: GetStructureRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Structure>>;
  /** Lists structures managed by the enterprise. */
  listStructures(
    request: ListStructuresRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListStructuresResponse>>;
  /** Gets a room managed by the enterprise. */
  getRoom(request: GetRoomRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Room>>;
  /** Lists rooms managed by the enterprise. */
  listRooms(request: ListRoomsRequest, context: CallContext & CallContextExt): Promise<DeepPartial<ListRoomsResponse>>;
}

export interface SmartDeviceManagementServiceClient<CallOptionsExt = {}> {
  /** Gets a device managed by the enterprise. */
  getDevice(request: DeepPartial<GetDeviceRequest>, options?: CallOptions & CallOptionsExt): Promise<Device>;
  /** Lists devices managed by the enterprise. */
  listDevices(
    request: DeepPartial<ListDevicesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListDevicesResponse>;
  /** Executes a command to device managed by the enterprise. */
  executeDeviceCommand(
    request: DeepPartial<ExecuteDeviceCommandRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ExecuteDeviceCommandResponse>;
  /** Gets a structure managed by the enterprise. */
  getStructure(request: DeepPartial<GetStructureRequest>, options?: CallOptions & CallOptionsExt): Promise<Structure>;
  /** Lists structures managed by the enterprise. */
  listStructures(
    request: DeepPartial<ListStructuresRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListStructuresResponse>;
  /** Gets a room managed by the enterprise. */
  getRoom(request: DeepPartial<GetRoomRequest>, options?: CallOptions & CallOptionsExt): Promise<Room>;
  /** Lists rooms managed by the enterprise. */
  listRooms(request: DeepPartial<ListRoomsRequest>, options?: CallOptions & CallOptionsExt): Promise<ListRoomsResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
