// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/home/graph/v1/device.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Struct } from "../../../protobuf/struct.js";

export const protobufPackage = "google.home.graph.v1";

/** Third-party device definition. */
export interface Device {
  /** Third-party device ID. */
  id: string;
  /**
   * Hardware type of the device.
   * See [device
   * types](https://developers.home.google.com/cloud-to-cloud/guides).
   */
  type: string;
  /**
   * Traits supported by the device.
   * See [device
   * traits](https://developers.home.google.com/cloud-to-cloud/traits).
   */
  traits: string[];
  /** Names given to this device by your smart home Action. */
  name:
    | DeviceNames
    | undefined;
  /**
   * Indicates whether your smart home Action will report state of this device
   * to Google via
   * [ReportStateAndNotification][google.home.graph.v1.HomeGraphApiService.ReportStateAndNotification].
   */
  willReportState: boolean;
  /**
   * Suggested name for the room where this device is installed.
   * Google attempts to use this value during user setup.
   */
  roomHint: string;
  /**
   * Suggested name for the structure where this device is installed.
   * Google attempts to use this value during user setup.
   */
  structureHint: string;
  /** Device manufacturer, model, hardware version, and software version. */
  deviceInfo:
    | DeviceInfo
    | undefined;
  /** Attributes for the traits supported by the device. */
  attributes:
    | { [key: string]: any }
    | undefined;
  /**
   * Custom device attributes stored in Home Graph and provided to your
   * smart home Action in each
   * [QUERY](https://developers.home.google.com/cloud-to-cloud/intents/query)
   * and
   * [EXECUTE](https://developers.home.google.com/cloud-to-cloud/intents/execute)
   * intent.
   * Data in this object has a few constraints: No sensitive information,
   * including but not limited to Personally Identifiable Information.
   */
  customData:
    | { [key: string]: any }
    | undefined;
  /**
   * Alternate IDs associated with this device.
   * This is used to identify cloud synced devices enabled for [local
   * fulfillment](https://developers.home.google.com/local-home/overview).
   */
  otherDeviceIds: AgentOtherDeviceId[];
  /**
   * Indicates whether your smart home Action will report notifications
   * to Google for this device via
   * [ReportStateAndNotification][google.home.graph.v1.HomeGraphApiService.ReportStateAndNotification].
   *
   * If your smart home Action enables users to control device notifications,
   * you should update this field and call
   * [RequestSyncDevices][google.home.graph.v1.HomeGraphApiService.RequestSyncDevices].
   */
  notificationSupportedByAgent: boolean;
}

/** Identifiers used to describe the device. */
export interface DeviceNames {
  /** Primary name of the device, generally provided by the user. */
  name: string;
  /** Additional names provided by the user for the device. */
  nicknames: string[];
  /**
   * List of names provided by the manufacturer rather than the user, such as
   * serial numbers, SKUs, etc.
   */
  defaultNames: string[];
}

/** Device information. */
export interface DeviceInfo {
  /** Device manufacturer. */
  manufacturer: string;
  /** Device model. */
  model: string;
  /** Device hardware version. */
  hwVersion: string;
  /** Device software version. */
  swVersion: string;
}

/** Alternate third-party device ID. */
export interface AgentOtherDeviceId {
  /** Project ID for your smart home Action. */
  agentId: string;
  /** Unique third-party device ID. */
  deviceId: string;
}

function createBaseDevice(): Device {
  return {
    id: "",
    type: "",
    traits: [],
    name: undefined,
    willReportState: false,
    roomHint: "",
    structureHint: "",
    deviceInfo: undefined,
    attributes: undefined,
    customData: undefined,
    otherDeviceIds: [],
    notificationSupportedByAgent: false,
  };
}

export const Device: MessageFns<Device> = {
  encode(message: Device, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.type !== "") {
      writer.uint32(18).string(message.type);
    }
    for (const v of message.traits) {
      writer.uint32(26).string(v!);
    }
    if (message.name !== undefined) {
      DeviceNames.encode(message.name, writer.uint32(34).fork()).join();
    }
    if (message.willReportState !== false) {
      writer.uint32(40).bool(message.willReportState);
    }
    if (message.roomHint !== "") {
      writer.uint32(50).string(message.roomHint);
    }
    if (message.structureHint !== "") {
      writer.uint32(58).string(message.structureHint);
    }
    if (message.deviceInfo !== undefined) {
      DeviceInfo.encode(message.deviceInfo, writer.uint32(66).fork()).join();
    }
    if (message.attributes !== undefined) {
      Struct.encode(Struct.wrap(message.attributes), writer.uint32(74).fork()).join();
    }
    if (message.customData !== undefined) {
      Struct.encode(Struct.wrap(message.customData), writer.uint32(82).fork()).join();
    }
    for (const v of message.otherDeviceIds) {
      AgentOtherDeviceId.encode(v!, writer.uint32(90).fork()).join();
    }
    if (message.notificationSupportedByAgent !== false) {
      writer.uint32(96).bool(message.notificationSupportedByAgent);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Device {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDevice();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.type = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.traits.push(reader.string());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.name = DeviceNames.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.willReportState = reader.bool();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.roomHint = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.structureHint = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.deviceInfo = DeviceInfo.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.attributes = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.customData = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.otherDeviceIds.push(AgentOtherDeviceId.decode(reader, reader.uint32()));
          continue;
        case 12:
          if (tag !== 96) {
            break;
          }

          message.notificationSupportedByAgent = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Device {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      traits: globalThis.Array.isArray(object?.traits) ? object.traits.map((e: any) => globalThis.String(e)) : [],
      name: isSet(object.name) ? DeviceNames.fromJSON(object.name) : undefined,
      willReportState: isSet(object.willReportState) ? globalThis.Boolean(object.willReportState) : false,
      roomHint: isSet(object.roomHint) ? globalThis.String(object.roomHint) : "",
      structureHint: isSet(object.structureHint) ? globalThis.String(object.structureHint) : "",
      deviceInfo: isSet(object.deviceInfo) ? DeviceInfo.fromJSON(object.deviceInfo) : undefined,
      attributes: isObject(object.attributes) ? object.attributes : undefined,
      customData: isObject(object.customData) ? object.customData : undefined,
      otherDeviceIds: globalThis.Array.isArray(object?.otherDeviceIds)
        ? object.otherDeviceIds.map((e: any) => AgentOtherDeviceId.fromJSON(e))
        : [],
      notificationSupportedByAgent: isSet(object.notificationSupportedByAgent)
        ? globalThis.Boolean(object.notificationSupportedByAgent)
        : false,
    };
  },

  toJSON(message: Device): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.traits?.length) {
      obj.traits = message.traits;
    }
    if (message.name !== undefined) {
      obj.name = DeviceNames.toJSON(message.name);
    }
    if (message.willReportState !== false) {
      obj.willReportState = message.willReportState;
    }
    if (message.roomHint !== "") {
      obj.roomHint = message.roomHint;
    }
    if (message.structureHint !== "") {
      obj.structureHint = message.structureHint;
    }
    if (message.deviceInfo !== undefined) {
      obj.deviceInfo = DeviceInfo.toJSON(message.deviceInfo);
    }
    if (message.attributes !== undefined) {
      obj.attributes = message.attributes;
    }
    if (message.customData !== undefined) {
      obj.customData = message.customData;
    }
    if (message.otherDeviceIds?.length) {
      obj.otherDeviceIds = message.otherDeviceIds.map((e) => AgentOtherDeviceId.toJSON(e));
    }
    if (message.notificationSupportedByAgent !== false) {
      obj.notificationSupportedByAgent = message.notificationSupportedByAgent;
    }
    return obj;
  },

  create(base?: DeepPartial<Device>): Device {
    return Device.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Device>): Device {
    const message = createBaseDevice();
    message.id = object.id ?? "";
    message.type = object.type ?? "";
    message.traits = object.traits?.map((e) => e) || [];
    message.name = (object.name !== undefined && object.name !== null)
      ? DeviceNames.fromPartial(object.name)
      : undefined;
    message.willReportState = object.willReportState ?? false;
    message.roomHint = object.roomHint ?? "";
    message.structureHint = object.structureHint ?? "";
    message.deviceInfo = (object.deviceInfo !== undefined && object.deviceInfo !== null)
      ? DeviceInfo.fromPartial(object.deviceInfo)
      : undefined;
    message.attributes = object.attributes ?? undefined;
    message.customData = object.customData ?? undefined;
    message.otherDeviceIds = object.otherDeviceIds?.map((e) => AgentOtherDeviceId.fromPartial(e)) || [];
    message.notificationSupportedByAgent = object.notificationSupportedByAgent ?? false;
    return message;
  },
};

function createBaseDeviceNames(): DeviceNames {
  return { name: "", nicknames: [], defaultNames: [] };
}

export const DeviceNames: MessageFns<DeviceNames> = {
  encode(message: DeviceNames, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    for (const v of message.nicknames) {
      writer.uint32(18).string(v!);
    }
    for (const v of message.defaultNames) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeviceNames {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeviceNames();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nicknames.push(reader.string());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.defaultNames.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeviceNames {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      nicknames: globalThis.Array.isArray(object?.nicknames)
        ? object.nicknames.map((e: any) => globalThis.String(e))
        : [],
      defaultNames: globalThis.Array.isArray(object?.defaultNames)
        ? object.defaultNames.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: DeviceNames): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.nicknames?.length) {
      obj.nicknames = message.nicknames;
    }
    if (message.defaultNames?.length) {
      obj.defaultNames = message.defaultNames;
    }
    return obj;
  },

  create(base?: DeepPartial<DeviceNames>): DeviceNames {
    return DeviceNames.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeviceNames>): DeviceNames {
    const message = createBaseDeviceNames();
    message.name = object.name ?? "";
    message.nicknames = object.nicknames?.map((e) => e) || [];
    message.defaultNames = object.defaultNames?.map((e) => e) || [];
    return message;
  },
};

function createBaseDeviceInfo(): DeviceInfo {
  return { manufacturer: "", model: "", hwVersion: "", swVersion: "" };
}

export const DeviceInfo: MessageFns<DeviceInfo> = {
  encode(message: DeviceInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.manufacturer !== "") {
      writer.uint32(10).string(message.manufacturer);
    }
    if (message.model !== "") {
      writer.uint32(18).string(message.model);
    }
    if (message.hwVersion !== "") {
      writer.uint32(26).string(message.hwVersion);
    }
    if (message.swVersion !== "") {
      writer.uint32(34).string(message.swVersion);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeviceInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeviceInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.manufacturer = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.model = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.hwVersion = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.swVersion = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeviceInfo {
    return {
      manufacturer: isSet(object.manufacturer) ? globalThis.String(object.manufacturer) : "",
      model: isSet(object.model) ? globalThis.String(object.model) : "",
      hwVersion: isSet(object.hwVersion) ? globalThis.String(object.hwVersion) : "",
      swVersion: isSet(object.swVersion) ? globalThis.String(object.swVersion) : "",
    };
  },

  toJSON(message: DeviceInfo): unknown {
    const obj: any = {};
    if (message.manufacturer !== "") {
      obj.manufacturer = message.manufacturer;
    }
    if (message.model !== "") {
      obj.model = message.model;
    }
    if (message.hwVersion !== "") {
      obj.hwVersion = message.hwVersion;
    }
    if (message.swVersion !== "") {
      obj.swVersion = message.swVersion;
    }
    return obj;
  },

  create(base?: DeepPartial<DeviceInfo>): DeviceInfo {
    return DeviceInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeviceInfo>): DeviceInfo {
    const message = createBaseDeviceInfo();
    message.manufacturer = object.manufacturer ?? "";
    message.model = object.model ?? "";
    message.hwVersion = object.hwVersion ?? "";
    message.swVersion = object.swVersion ?? "";
    return message;
  },
};

function createBaseAgentOtherDeviceId(): AgentOtherDeviceId {
  return { agentId: "", deviceId: "" };
}

export const AgentOtherDeviceId: MessageFns<AgentOtherDeviceId> = {
  encode(message: AgentOtherDeviceId, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.agentId !== "") {
      writer.uint32(10).string(message.agentId);
    }
    if (message.deviceId !== "") {
      writer.uint32(18).string(message.deviceId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AgentOtherDeviceId {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAgentOtherDeviceId();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.agentId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.deviceId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AgentOtherDeviceId {
    return {
      agentId: isSet(object.agentId) ? globalThis.String(object.agentId) : "",
      deviceId: isSet(object.deviceId) ? globalThis.String(object.deviceId) : "",
    };
  },

  toJSON(message: AgentOtherDeviceId): unknown {
    const obj: any = {};
    if (message.agentId !== "") {
      obj.agentId = message.agentId;
    }
    if (message.deviceId !== "") {
      obj.deviceId = message.deviceId;
    }
    return obj;
  },

  create(base?: DeepPartial<AgentOtherDeviceId>): AgentOtherDeviceId {
    return AgentOtherDeviceId.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AgentOtherDeviceId>): AgentOtherDeviceId {
    const message = createBaseAgentOtherDeviceId();
    message.agentId = object.agentId ?? "";
    message.deviceId = object.deviceId ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
