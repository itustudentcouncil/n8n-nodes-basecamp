// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/monitoring/metricsscope/v1/metrics_scope.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../protobuf/timestamp.js";

export const protobufPackage = "google.monitoring.metricsscope.v1";

/**
 * Represents a [Metrics
 * Scope](https://cloud.google.com/monitoring/settings#concept-scope) in Cloud
 * Monitoring, which specifies one or more Google projects and zero or more AWS
 * accounts to monitor together.
 */
export interface MetricsScope {
  /**
   * Immutable. The resource name of the Monitoring Metrics Scope.
   * On input, the resource name can be specified with the
   * scoping project ID or number. On output, the resource name is
   * specified with the scoping project number.
   * Example:
   * `locations/global/metricsScopes/{SCOPING_PROJECT_ID_OR_NUMBER}`
   */
  name: string;
  /** Output only. The time when this `Metrics Scope` was created. */
  createTime:
    | Date
    | undefined;
  /** Output only. The time when this `Metrics Scope` record was last updated. */
  updateTime:
    | Date
    | undefined;
  /** Output only. The list of projects monitored by this `Metrics Scope`. */
  monitoredProjects: MonitoredProject[];
}

/**
 * A [project being
 * monitored](https://cloud.google.com/monitoring/settings/multiple-projects#create-multi)
 * by a `Metrics Scope`.
 */
export interface MonitoredProject {
  /**
   * Immutable. The resource name of the `MonitoredProject`. On input, the resource name
   * includes the scoping project ID and monitored project ID. On output, it
   * contains the equivalent project numbers.
   * Example:
   * `locations/global/metricsScopes/{SCOPING_PROJECT_ID_OR_NUMBER}/projects/{MONITORED_PROJECT_ID_OR_NUMBER}`
   */
  name: string;
  /** Output only. The time when this `MonitoredProject` was created. */
  createTime: Date | undefined;
}

function createBaseMetricsScope(): MetricsScope {
  return { name: "", createTime: undefined, updateTime: undefined, monitoredProjects: [] };
}

export const MetricsScope: MessageFns<MetricsScope> = {
  encode(message: MetricsScope, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(18).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(26).fork()).join();
    }
    for (const v of message.monitoredProjects) {
      MonitoredProject.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MetricsScope {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMetricsScope();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.monitoredProjects.push(MonitoredProject.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MetricsScope {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      monitoredProjects: globalThis.Array.isArray(object?.monitoredProjects)
        ? object.monitoredProjects.map((e: any) => MonitoredProject.fromJSON(e))
        : [],
    };
  },

  toJSON(message: MetricsScope): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.monitoredProjects?.length) {
      obj.monitoredProjects = message.monitoredProjects.map((e) => MonitoredProject.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<MetricsScope>): MetricsScope {
    return MetricsScope.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MetricsScope>): MetricsScope {
    const message = createBaseMetricsScope();
    message.name = object.name ?? "";
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.monitoredProjects = object.monitoredProjects?.map((e) => MonitoredProject.fromPartial(e)) || [];
    return message;
  },
};

function createBaseMonitoredProject(): MonitoredProject {
  return { name: "", createTime: undefined };
}

export const MonitoredProject: MessageFns<MonitoredProject> = {
  encode(message: MonitoredProject, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MonitoredProject {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMonitoredProject();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MonitoredProject {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
    };
  },

  toJSON(message: MonitoredProject): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<MonitoredProject>): MonitoredProject {
    return MonitoredProject.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MonitoredProject>): MonitoredProject {
    const message = createBaseMonitoredProject();
    message.name = object.name ?? "";
    message.createTime = object.createTime ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
