// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/monitoring/metricsscope/v1/metrics_scopes.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../longrunning/operations.js";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { MetricsScope, MonitoredProject } from "./metrics_scope.js";

export const protobufPackage = "google.monitoring.metricsscope.v1";

/** Request for the `GetMetricsScope` method. */
export interface GetMetricsScopeRequest {
  /**
   * Required. The resource name of the `Metrics Scope`.
   * Example:
   * `locations/global/metricsScopes/{SCOPING_PROJECT_ID_OR_NUMBER}`
   */
  name: string;
}

/** Request for the `ListMetricsScopesByMonitoredProject` method. */
export interface ListMetricsScopesByMonitoredProjectRequest {
  /**
   * Required. The resource name of the `Monitored Project` being requested.
   * Example:
   * `projects/{MONITORED_PROJECT_ID_OR_NUMBER}`
   */
  monitoredResourceContainer: string;
}

/** Response for the `ListMetricsScopesByMonitoredProject` method. */
export interface ListMetricsScopesByMonitoredProjectResponse {
  /**
   * A set of all metrics scopes that the specified monitored project has been
   * added to.
   */
  metricsScopes: MetricsScope[];
}

/** Request for the `CreateMonitoredProject` method. */
export interface CreateMonitoredProjectRequest {
  /**
   * Required. The resource name of the existing `Metrics Scope` that will monitor this
   * project.
   * Example:
   * `locations/global/metricsScopes/{SCOPING_PROJECT_ID_OR_NUMBER}`
   */
  parent: string;
  /**
   * Required. The initial `MonitoredProject` configuration.
   * Specify only the `monitored_project.name` field. All other fields are
   * ignored. The `monitored_project.name` must be in the format:
   * `locations/global/metricsScopes/{SCOPING_PROJECT_ID_OR_NUMBER}/projects/{MONITORED_PROJECT_ID_OR_NUMBER}`
   */
  monitoredProject: MonitoredProject | undefined;
}

/** Request for the `DeleteMonitoredProject` method. */
export interface DeleteMonitoredProjectRequest {
  /**
   * Required. The resource name of the `MonitoredProject`.
   * Example:
   * `locations/global/metricsScopes/{SCOPING_PROJECT_ID_OR_NUMBER}/projects/{MONITORED_PROJECT_ID_OR_NUMBER}`
   *
   * Authorization requires the following [Google
   * IAM](https://cloud.google.com/iam) permissions on both the `Metrics Scope`
   * and on the `MonitoredProject`: `monitoring.metricsScopes.link`
   */
  name: string;
}

/**
 * Contains metadata for longrunning operation for the edit Metrics Scope
 * endpoints.
 */
export interface OperationMetadata {
  /** Current state of the batch operation. */
  state: OperationMetadata_State;
  /** The time when the batch request was received. */
  createTime:
    | Date
    | undefined;
  /** The time when the operation result was last updated. */
  updateTime: Date | undefined;
}

/** Batch operation states. */
export enum OperationMetadata_State {
  /** STATE_UNSPECIFIED - Invalid. */
  STATE_UNSPECIFIED = 0,
  /** CREATED - Request has been received. */
  CREATED = 1,
  /** RUNNING - Request is actively being processed. */
  RUNNING = 2,
  /** DONE - The batch processing is done. */
  DONE = 3,
  /** CANCELLED - The batch processing was cancelled. */
  CANCELLED = 4,
  UNRECOGNIZED = -1,
}

export function operationMetadata_StateFromJSON(object: any): OperationMetadata_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return OperationMetadata_State.STATE_UNSPECIFIED;
    case 1:
    case "CREATED":
      return OperationMetadata_State.CREATED;
    case 2:
    case "RUNNING":
      return OperationMetadata_State.RUNNING;
    case 3:
    case "DONE":
      return OperationMetadata_State.DONE;
    case 4:
    case "CANCELLED":
      return OperationMetadata_State.CANCELLED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return OperationMetadata_State.UNRECOGNIZED;
  }
}

export function operationMetadata_StateToJSON(object: OperationMetadata_State): string {
  switch (object) {
    case OperationMetadata_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case OperationMetadata_State.CREATED:
      return "CREATED";
    case OperationMetadata_State.RUNNING:
      return "RUNNING";
    case OperationMetadata_State.DONE:
      return "DONE";
    case OperationMetadata_State.CANCELLED:
      return "CANCELLED";
    case OperationMetadata_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseGetMetricsScopeRequest(): GetMetricsScopeRequest {
  return { name: "" };
}

export const GetMetricsScopeRequest: MessageFns<GetMetricsScopeRequest> = {
  encode(message: GetMetricsScopeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetMetricsScopeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetMetricsScopeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetMetricsScopeRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetMetricsScopeRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetMetricsScopeRequest>): GetMetricsScopeRequest {
    return GetMetricsScopeRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetMetricsScopeRequest>): GetMetricsScopeRequest {
    const message = createBaseGetMetricsScopeRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListMetricsScopesByMonitoredProjectRequest(): ListMetricsScopesByMonitoredProjectRequest {
  return { monitoredResourceContainer: "" };
}

export const ListMetricsScopesByMonitoredProjectRequest: MessageFns<ListMetricsScopesByMonitoredProjectRequest> = {
  encode(message: ListMetricsScopesByMonitoredProjectRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.monitoredResourceContainer !== "") {
      writer.uint32(10).string(message.monitoredResourceContainer);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListMetricsScopesByMonitoredProjectRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListMetricsScopesByMonitoredProjectRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.monitoredResourceContainer = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListMetricsScopesByMonitoredProjectRequest {
    return {
      monitoredResourceContainer: isSet(object.monitoredResourceContainer)
        ? globalThis.String(object.monitoredResourceContainer)
        : "",
    };
  },

  toJSON(message: ListMetricsScopesByMonitoredProjectRequest): unknown {
    const obj: any = {};
    if (message.monitoredResourceContainer !== "") {
      obj.monitoredResourceContainer = message.monitoredResourceContainer;
    }
    return obj;
  },

  create(base?: DeepPartial<ListMetricsScopesByMonitoredProjectRequest>): ListMetricsScopesByMonitoredProjectRequest {
    return ListMetricsScopesByMonitoredProjectRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ListMetricsScopesByMonitoredProjectRequest>,
  ): ListMetricsScopesByMonitoredProjectRequest {
    const message = createBaseListMetricsScopesByMonitoredProjectRequest();
    message.monitoredResourceContainer = object.monitoredResourceContainer ?? "";
    return message;
  },
};

function createBaseListMetricsScopesByMonitoredProjectResponse(): ListMetricsScopesByMonitoredProjectResponse {
  return { metricsScopes: [] };
}

export const ListMetricsScopesByMonitoredProjectResponse: MessageFns<ListMetricsScopesByMonitoredProjectResponse> = {
  encode(
    message: ListMetricsScopesByMonitoredProjectResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    for (const v of message.metricsScopes) {
      MetricsScope.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListMetricsScopesByMonitoredProjectResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListMetricsScopesByMonitoredProjectResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.metricsScopes.push(MetricsScope.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListMetricsScopesByMonitoredProjectResponse {
    return {
      metricsScopes: globalThis.Array.isArray(object?.metricsScopes)
        ? object.metricsScopes.map((e: any) => MetricsScope.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ListMetricsScopesByMonitoredProjectResponse): unknown {
    const obj: any = {};
    if (message.metricsScopes?.length) {
      obj.metricsScopes = message.metricsScopes.map((e) => MetricsScope.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ListMetricsScopesByMonitoredProjectResponse>): ListMetricsScopesByMonitoredProjectResponse {
    return ListMetricsScopesByMonitoredProjectResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ListMetricsScopesByMonitoredProjectResponse>,
  ): ListMetricsScopesByMonitoredProjectResponse {
    const message = createBaseListMetricsScopesByMonitoredProjectResponse();
    message.metricsScopes = object.metricsScopes?.map((e) => MetricsScope.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCreateMonitoredProjectRequest(): CreateMonitoredProjectRequest {
  return { parent: "", monitoredProject: undefined };
}

export const CreateMonitoredProjectRequest: MessageFns<CreateMonitoredProjectRequest> = {
  encode(message: CreateMonitoredProjectRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.monitoredProject !== undefined) {
      MonitoredProject.encode(message.monitoredProject, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateMonitoredProjectRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateMonitoredProjectRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.monitoredProject = MonitoredProject.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateMonitoredProjectRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      monitoredProject: isSet(object.monitoredProject) ? MonitoredProject.fromJSON(object.monitoredProject) : undefined,
    };
  },

  toJSON(message: CreateMonitoredProjectRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.monitoredProject !== undefined) {
      obj.monitoredProject = MonitoredProject.toJSON(message.monitoredProject);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateMonitoredProjectRequest>): CreateMonitoredProjectRequest {
    return CreateMonitoredProjectRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateMonitoredProjectRequest>): CreateMonitoredProjectRequest {
    const message = createBaseCreateMonitoredProjectRequest();
    message.parent = object.parent ?? "";
    message.monitoredProject = (object.monitoredProject !== undefined && object.monitoredProject !== null)
      ? MonitoredProject.fromPartial(object.monitoredProject)
      : undefined;
    return message;
  },
};

function createBaseDeleteMonitoredProjectRequest(): DeleteMonitoredProjectRequest {
  return { name: "" };
}

export const DeleteMonitoredProjectRequest: MessageFns<DeleteMonitoredProjectRequest> = {
  encode(message: DeleteMonitoredProjectRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteMonitoredProjectRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteMonitoredProjectRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteMonitoredProjectRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteMonitoredProjectRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteMonitoredProjectRequest>): DeleteMonitoredProjectRequest {
    return DeleteMonitoredProjectRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteMonitoredProjectRequest>): DeleteMonitoredProjectRequest {
    const message = createBaseDeleteMonitoredProjectRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseOperationMetadata(): OperationMetadata {
  return { state: 0, createTime: undefined, updateTime: undefined };
}

export const OperationMetadata: MessageFns<OperationMetadata> = {
  encode(message: OperationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.state !== 0) {
      writer.uint32(8).int32(message.state);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(42).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OperationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOperationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OperationMetadata {
    return {
      state: isSet(object.state) ? operationMetadata_StateFromJSON(object.state) : 0,
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
    };
  },

  toJSON(message: OperationMetadata): unknown {
    const obj: any = {};
    if (message.state !== 0) {
      obj.state = operationMetadata_StateToJSON(message.state);
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<OperationMetadata>): OperationMetadata {
    return OperationMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<OperationMetadata>): OperationMetadata {
    const message = createBaseOperationMetadata();
    message.state = object.state ?? 0;
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    return message;
  },
};

/**
 * Manages Cloud Monitoring Metrics Scopes, and the monitoring of Google Cloud
 * projects and AWS accounts.
 */
export type MetricsScopesDefinition = typeof MetricsScopesDefinition;
export const MetricsScopesDefinition = {
  name: "MetricsScopes",
  fullName: "google.monitoring.metricsscope.v1.MetricsScopes",
  methods: {
    /** Returns a specific `Metrics Scope`. */
    getMetricsScope: {
      name: "GetMetricsScope",
      requestType: GetMetricsScopeRequest,
      requestStream: false,
      responseType: MetricsScope,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              45,
              18,
              43,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              103,
              108,
              111,
              98,
              97,
              108,
              47,
              109,
              101,
              116,
              114,
              105,
              99,
              115,
              83,
              99,
              111,
              112,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Returns a list of every `Metrics Scope` that a specific `MonitoredProject`
     * has been added to. The metrics scope representing the specified monitored
     * project will always be the first entry in the response.
     */
    listMetricsScopesByMonitoredProject: {
      name: "ListMetricsScopesByMonitoredProject",
      requestType: ListMetricsScopesByMonitoredProjectRequest,
      requestStream: false,
      responseType: ListMetricsScopesByMonitoredProjectResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              72,
              18,
              70,
              47,
              118,
              49,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              103,
              108,
              111,
              98,
              97,
              108,
              47,
              109,
              101,
              116,
              114,
              105,
              99,
              115,
              83,
              99,
              111,
              112,
              101,
              115,
              58,
              108,
              105,
              115,
              116,
              77,
              101,
              116,
              114,
              105,
              99,
              115,
              83,
              99,
              111,
              112,
              101,
              115,
              66,
              121,
              77,
              111,
              110,
              105,
              116,
              111,
              114,
              101,
              100,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
            ]),
          ],
        },
      },
    },
    /**
     * Adds a `MonitoredProject` with the given project ID
     * to the specified `Metrics Scope`.
     */
    createMonitoredProject: {
      name: "CreateMonitoredProject",
      requestType: CreateMonitoredProjectRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              37,
              10,
              16,
              77,
              111,
              110,
              105,
              116,
              111,
              114,
              101,
              100,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              24,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              109,
              111,
              110,
              105,
              116,
              111,
              114,
              101,
              100,
              95,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
            ]),
          ],
          578365826: [
            Buffer.from([
              75,
              58,
              17,
              109,
              111,
              110,
              105,
              116,
              111,
              114,
              101,
              100,
              95,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              34,
              54,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              103,
              108,
              111,
              98,
              97,
              108,
              47,
              109,
              101,
              116,
              114,
              105,
              99,
              115,
              83,
              99,
              111,
              112,
              101,
              115,
              47,
              42,
              125,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /** Deletes a `MonitoredProject` from the specified `Metrics Scope`. */
    deleteMonitoredProject: {
      name: "DeleteMonitoredProject",
      requestType: DeleteMonitoredProjectRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              42,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              56,
              42,
              54,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              103,
              108,
              111,
              98,
              97,
              108,
              47,
              109,
              101,
              116,
              114,
              105,
              99,
              115,
              83,
              99,
              111,
              112,
              101,
              115,
              47,
              42,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface MetricsScopesServiceImplementation<CallContextExt = {}> {
  /** Returns a specific `Metrics Scope`. */
  getMetricsScope(
    request: GetMetricsScopeRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<MetricsScope>>;
  /**
   * Returns a list of every `Metrics Scope` that a specific `MonitoredProject`
   * has been added to. The metrics scope representing the specified monitored
   * project will always be the first entry in the response.
   */
  listMetricsScopesByMonitoredProject(
    request: ListMetricsScopesByMonitoredProjectRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListMetricsScopesByMonitoredProjectResponse>>;
  /**
   * Adds a `MonitoredProject` with the given project ID
   * to the specified `Metrics Scope`.
   */
  createMonitoredProject(
    request: CreateMonitoredProjectRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Deletes a `MonitoredProject` from the specified `Metrics Scope`. */
  deleteMonitoredProject(
    request: DeleteMonitoredProjectRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
}

export interface MetricsScopesClient<CallOptionsExt = {}> {
  /** Returns a specific `Metrics Scope`. */
  getMetricsScope(
    request: DeepPartial<GetMetricsScopeRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<MetricsScope>;
  /**
   * Returns a list of every `Metrics Scope` that a specific `MonitoredProject`
   * has been added to. The metrics scope representing the specified monitored
   * project will always be the first entry in the response.
   */
  listMetricsScopesByMonitoredProject(
    request: DeepPartial<ListMetricsScopesByMonitoredProjectRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListMetricsScopesByMonitoredProjectResponse>;
  /**
   * Adds a `MonitoredProject` with the given project ID
   * to the specified `Metrics Scope`.
   */
  createMonitoredProject(
    request: DeepPartial<CreateMonitoredProjectRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Deletes a `MonitoredProject` from the specified `Metrics Scope`. */
  deleteMonitoredProject(
    request: DeepPartial<DeleteMonitoredProjectRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
