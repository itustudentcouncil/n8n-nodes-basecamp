// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/monitoring/dashboard/v1/logs_panel.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.monitoring.dashboard.v1";

/** A widget that displays a stream of log. */
export interface LogsPanel {
  /**
   * A filter that chooses which log entries to return.  See [Advanced Logs
   * Queries](https://cloud.google.com/logging/docs/view/advanced-queries).
   * Only log entries that match the filter are returned.  An empty filter
   * matches all log entries.
   */
  filter: string;
  /**
   * The names of logging resources to collect logs for. Currently only projects
   * are supported. If empty, the widget will default to the host project.
   */
  resourceNames: string[];
}

function createBaseLogsPanel(): LogsPanel {
  return { filter: "", resourceNames: [] };
}

export const LogsPanel: MessageFns<LogsPanel> = {
  encode(message: LogsPanel, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.filter !== "") {
      writer.uint32(10).string(message.filter);
    }
    for (const v of message.resourceNames) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LogsPanel {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLogsPanel();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.resourceNames.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LogsPanel {
    return {
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      resourceNames: globalThis.Array.isArray(object?.resourceNames)
        ? object.resourceNames.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: LogsPanel): unknown {
    const obj: any = {};
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.resourceNames?.length) {
      obj.resourceNames = message.resourceNames;
    }
    return obj;
  },

  create(base?: DeepPartial<LogsPanel>): LogsPanel {
    return LogsPanel.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LogsPanel>): LogsPanel {
    const message = createBaseLogsPanel();
    message.filter = object.filter ?? "";
    message.resourceNames = object.resourceNames?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
