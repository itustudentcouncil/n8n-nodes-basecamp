// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/monitoring/dashboard/v1/dashboard_filter.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.monitoring.dashboard.v1";

/** A filter to reduce the amount of data charted in relevant widgets. */
export interface DashboardFilter {
  /** Required. The key for the label */
  labelKey: string;
  /**
   * The placeholder text that can be referenced in a filter string or MQL
   * query. If omitted, the dashboard filter will be applied to all relevant
   * widgets in the dashboard.
   */
  templateVariable: string;
  /** A variable-length string value. */
  stringValue?:
    | string
    | undefined;
  /** The specified filter type */
  filterType: DashboardFilter_FilterType;
}

/** The type for the dashboard filter */
export enum DashboardFilter_FilterType {
  /** FILTER_TYPE_UNSPECIFIED - Filter type is unspecified. This is not valid in a well-formed request. */
  FILTER_TYPE_UNSPECIFIED = 0,
  /** RESOURCE_LABEL - Filter on a resource label value */
  RESOURCE_LABEL = 1,
  /** METRIC_LABEL - Filter on a metrics label value */
  METRIC_LABEL = 2,
  /** USER_METADATA_LABEL - Filter on a user metadata label value */
  USER_METADATA_LABEL = 3,
  /** SYSTEM_METADATA_LABEL - Filter on a system metadata label value */
  SYSTEM_METADATA_LABEL = 4,
  /** GROUP - Filter on a group id */
  GROUP = 5,
  UNRECOGNIZED = -1,
}

export function dashboardFilter_FilterTypeFromJSON(object: any): DashboardFilter_FilterType {
  switch (object) {
    case 0:
    case "FILTER_TYPE_UNSPECIFIED":
      return DashboardFilter_FilterType.FILTER_TYPE_UNSPECIFIED;
    case 1:
    case "RESOURCE_LABEL":
      return DashboardFilter_FilterType.RESOURCE_LABEL;
    case 2:
    case "METRIC_LABEL":
      return DashboardFilter_FilterType.METRIC_LABEL;
    case 3:
    case "USER_METADATA_LABEL":
      return DashboardFilter_FilterType.USER_METADATA_LABEL;
    case 4:
    case "SYSTEM_METADATA_LABEL":
      return DashboardFilter_FilterType.SYSTEM_METADATA_LABEL;
    case 5:
    case "GROUP":
      return DashboardFilter_FilterType.GROUP;
    case -1:
    case "UNRECOGNIZED":
    default:
      return DashboardFilter_FilterType.UNRECOGNIZED;
  }
}

export function dashboardFilter_FilterTypeToJSON(object: DashboardFilter_FilterType): string {
  switch (object) {
    case DashboardFilter_FilterType.FILTER_TYPE_UNSPECIFIED:
      return "FILTER_TYPE_UNSPECIFIED";
    case DashboardFilter_FilterType.RESOURCE_LABEL:
      return "RESOURCE_LABEL";
    case DashboardFilter_FilterType.METRIC_LABEL:
      return "METRIC_LABEL";
    case DashboardFilter_FilterType.USER_METADATA_LABEL:
      return "USER_METADATA_LABEL";
    case DashboardFilter_FilterType.SYSTEM_METADATA_LABEL:
      return "SYSTEM_METADATA_LABEL";
    case DashboardFilter_FilterType.GROUP:
      return "GROUP";
    case DashboardFilter_FilterType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseDashboardFilter(): DashboardFilter {
  return { labelKey: "", templateVariable: "", stringValue: undefined, filterType: 0 };
}

export const DashboardFilter: MessageFns<DashboardFilter> = {
  encode(message: DashboardFilter, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.labelKey !== "") {
      writer.uint32(10).string(message.labelKey);
    }
    if (message.templateVariable !== "") {
      writer.uint32(26).string(message.templateVariable);
    }
    if (message.stringValue !== undefined) {
      writer.uint32(34).string(message.stringValue);
    }
    if (message.filterType !== 0) {
      writer.uint32(40).int32(message.filterType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DashboardFilter {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDashboardFilter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.labelKey = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.templateVariable = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.stringValue = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.filterType = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DashboardFilter {
    return {
      labelKey: isSet(object.labelKey) ? globalThis.String(object.labelKey) : "",
      templateVariable: isSet(object.templateVariable) ? globalThis.String(object.templateVariable) : "",
      stringValue: isSet(object.stringValue) ? globalThis.String(object.stringValue) : undefined,
      filterType: isSet(object.filterType) ? dashboardFilter_FilterTypeFromJSON(object.filterType) : 0,
    };
  },

  toJSON(message: DashboardFilter): unknown {
    const obj: any = {};
    if (message.labelKey !== "") {
      obj.labelKey = message.labelKey;
    }
    if (message.templateVariable !== "") {
      obj.templateVariable = message.templateVariable;
    }
    if (message.stringValue !== undefined) {
      obj.stringValue = message.stringValue;
    }
    if (message.filterType !== 0) {
      obj.filterType = dashboardFilter_FilterTypeToJSON(message.filterType);
    }
    return obj;
  },

  create(base?: DeepPartial<DashboardFilter>): DashboardFilter {
    return DashboardFilter.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DashboardFilter>): DashboardFilter {
    const message = createBaseDashboardFilter();
    message.labelKey = object.labelKey ?? "";
    message.templateVariable = object.templateVariable ?? "";
    message.stringValue = object.stringValue ?? undefined;
    message.filterType = object.filterType ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
