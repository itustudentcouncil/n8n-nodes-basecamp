// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/monitoring/dashboard/v1/dashboards_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Empty } from "../../../protobuf/empty.js";
import { Dashboard } from "./dashboard.js";

export const protobufPackage = "google.monitoring.dashboard.v1";

/** The `CreateDashboard` request. */
export interface CreateDashboardRequest {
  /**
   * Required. The project on which to execute the request. The format is:
   *
   *     projects/[PROJECT_ID_OR_NUMBER]
   *
   * The `[PROJECT_ID_OR_NUMBER]` must match the dashboard resource name.
   */
  parent: string;
  /** Required. The initial dashboard specification. */
  dashboard:
    | Dashboard
    | undefined;
  /**
   * If set, validate the request and preview the review, but do not actually
   * save it.
   */
  validateOnly: boolean;
}

/** The `ListDashboards` request. */
export interface ListDashboardsRequest {
  /**
   * Required. The scope of the dashboards to list. The format is:
   *
   *     projects/[PROJECT_ID_OR_NUMBER]
   */
  parent: string;
  /**
   * A positive number that is the maximum number of results to return.
   * If unspecified, a default of 1000 is used.
   */
  pageSize: number;
  /**
   * Optional. If this field is not empty then it must contain the
   * `nextPageToken` value returned by a previous call to this method.  Using
   * this field causes the method to return additional results from the previous
   * method call.
   */
  pageToken: string;
}

/** The `ListDashboards` request. */
export interface ListDashboardsResponse {
  /** The list of requested dashboards. */
  dashboards: Dashboard[];
  /**
   * If there are more results than have been returned, then this field is set
   * to a non-empty value.  To see the additional results,
   * use that value as `page_token` in the next call to this method.
   */
  nextPageToken: string;
}

/** The `GetDashboard` request. */
export interface GetDashboardRequest {
  /**
   * Required. The resource name of the Dashboard. The format is one of:
   *
   *  -  `dashboards/[DASHBOARD_ID]` (for system dashboards)
   *  -  `projects/[PROJECT_ID_OR_NUMBER]/dashboards/[DASHBOARD_ID]`
   *       (for custom dashboards).
   */
  name: string;
}

/** The `DeleteDashboard` request. */
export interface DeleteDashboardRequest {
  /**
   * Required. The resource name of the Dashboard. The format is:
   *
   *     projects/[PROJECT_ID_OR_NUMBER]/dashboards/[DASHBOARD_ID]
   */
  name: string;
}

/** The `UpdateDashboard` request. */
export interface UpdateDashboardRequest {
  /** Required. The dashboard that will replace the existing dashboard. */
  dashboard:
    | Dashboard
    | undefined;
  /**
   * If set, validate the request and preview the review, but do not actually
   * save it.
   */
  validateOnly: boolean;
}

function createBaseCreateDashboardRequest(): CreateDashboardRequest {
  return { parent: "", dashboard: undefined, validateOnly: false };
}

export const CreateDashboardRequest: MessageFns<CreateDashboardRequest> = {
  encode(message: CreateDashboardRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.dashboard !== undefined) {
      Dashboard.encode(message.dashboard, writer.uint32(18).fork()).join();
    }
    if (message.validateOnly !== false) {
      writer.uint32(24).bool(message.validateOnly);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateDashboardRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateDashboardRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.dashboard = Dashboard.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateDashboardRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      dashboard: isSet(object.dashboard) ? Dashboard.fromJSON(object.dashboard) : undefined,
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
    };
  },

  toJSON(message: CreateDashboardRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.dashboard !== undefined) {
      obj.dashboard = Dashboard.toJSON(message.dashboard);
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateDashboardRequest>): CreateDashboardRequest {
    return CreateDashboardRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateDashboardRequest>): CreateDashboardRequest {
    const message = createBaseCreateDashboardRequest();
    message.parent = object.parent ?? "";
    message.dashboard = (object.dashboard !== undefined && object.dashboard !== null)
      ? Dashboard.fromPartial(object.dashboard)
      : undefined;
    message.validateOnly = object.validateOnly ?? false;
    return message;
  },
};

function createBaseListDashboardsRequest(): ListDashboardsRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListDashboardsRequest: MessageFns<ListDashboardsRequest> = {
  encode(message: ListDashboardsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListDashboardsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListDashboardsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListDashboardsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListDashboardsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListDashboardsRequest>): ListDashboardsRequest {
    return ListDashboardsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListDashboardsRequest>): ListDashboardsRequest {
    const message = createBaseListDashboardsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListDashboardsResponse(): ListDashboardsResponse {
  return { dashboards: [], nextPageToken: "" };
}

export const ListDashboardsResponse: MessageFns<ListDashboardsResponse> = {
  encode(message: ListDashboardsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.dashboards) {
      Dashboard.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListDashboardsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListDashboardsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.dashboards.push(Dashboard.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListDashboardsResponse {
    return {
      dashboards: globalThis.Array.isArray(object?.dashboards)
        ? object.dashboards.map((e: any) => Dashboard.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListDashboardsResponse): unknown {
    const obj: any = {};
    if (message.dashboards?.length) {
      obj.dashboards = message.dashboards.map((e) => Dashboard.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListDashboardsResponse>): ListDashboardsResponse {
    return ListDashboardsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListDashboardsResponse>): ListDashboardsResponse {
    const message = createBaseListDashboardsResponse();
    message.dashboards = object.dashboards?.map((e) => Dashboard.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetDashboardRequest(): GetDashboardRequest {
  return { name: "" };
}

export const GetDashboardRequest: MessageFns<GetDashboardRequest> = {
  encode(message: GetDashboardRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetDashboardRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDashboardRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDashboardRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetDashboardRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetDashboardRequest>): GetDashboardRequest {
    return GetDashboardRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetDashboardRequest>): GetDashboardRequest {
    const message = createBaseGetDashboardRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseDeleteDashboardRequest(): DeleteDashboardRequest {
  return { name: "" };
}

export const DeleteDashboardRequest: MessageFns<DeleteDashboardRequest> = {
  encode(message: DeleteDashboardRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteDashboardRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteDashboardRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteDashboardRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteDashboardRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteDashboardRequest>): DeleteDashboardRequest {
    return DeleteDashboardRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteDashboardRequest>): DeleteDashboardRequest {
    const message = createBaseDeleteDashboardRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpdateDashboardRequest(): UpdateDashboardRequest {
  return { dashboard: undefined, validateOnly: false };
}

export const UpdateDashboardRequest: MessageFns<UpdateDashboardRequest> = {
  encode(message: UpdateDashboardRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.dashboard !== undefined) {
      Dashboard.encode(message.dashboard, writer.uint32(10).fork()).join();
    }
    if (message.validateOnly !== false) {
      writer.uint32(24).bool(message.validateOnly);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateDashboardRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateDashboardRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.dashboard = Dashboard.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateDashboardRequest {
    return {
      dashboard: isSet(object.dashboard) ? Dashboard.fromJSON(object.dashboard) : undefined,
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
    };
  },

  toJSON(message: UpdateDashboardRequest): unknown {
    const obj: any = {};
    if (message.dashboard !== undefined) {
      obj.dashboard = Dashboard.toJSON(message.dashboard);
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateDashboardRequest>): UpdateDashboardRequest {
    return UpdateDashboardRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateDashboardRequest>): UpdateDashboardRequest {
    const message = createBaseUpdateDashboardRequest();
    message.dashboard = (object.dashboard !== undefined && object.dashboard !== null)
      ? Dashboard.fromPartial(object.dashboard)
      : undefined;
    message.validateOnly = object.validateOnly ?? false;
    return message;
  },
};

/**
 * Manages Stackdriver dashboards. A dashboard is an arrangement of data display
 * widgets in a specific layout.
 */
export type DashboardsServiceDefinition = typeof DashboardsServiceDefinition;
export const DashboardsServiceDefinition = {
  name: "DashboardsService",
  fullName: "google.monitoring.dashboard.v1.DashboardsService",
  methods: {
    /**
     * Creates a new custom dashboard. For examples on how you can use this API to
     * create dashboards, see [Managing dashboards by
     * API](https://cloud.google.com/monitoring/dashboards/api-dashboard). This
     * method requires the `monitoring.dashboards.create` permission on the
     * specified project. For more information about permissions, see [Cloud
     * Identity and Access Management](https://cloud.google.com/iam).
     */
    createDashboard: {
      name: "CreateDashboard",
      requestType: CreateDashboardRequest,
      requestStream: false,
      responseType: Dashboard,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([16, 112, 97, 114, 101, 110, 116, 44, 100, 97, 115, 104, 98, 111, 97, 114, 100])],
          578365826: [
            Buffer.from([
              47,
              58,
              9,
              100,
              97,
              115,
              104,
              98,
              111,
              97,
              114,
              100,
              34,
              34,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              47,
              100,
              97,
              115,
              104,
              98,
              111,
              97,
              114,
              100,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Lists the existing dashboards.
     *
     * This method requires the `monitoring.dashboards.list` permission
     * on the specified project. For more information, see
     * [Cloud Identity and Access Management](https://cloud.google.com/iam).
     */
    listDashboards: {
      name: "ListDashboards",
      requestType: ListDashboardsRequest,
      requestStream: false,
      responseType: ListDashboardsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              36,
              18,
              34,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              47,
              100,
              97,
              115,
              104,
              98,
              111,
              97,
              114,
              100,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Fetches a specific dashboard.
     *
     * This method requires the `monitoring.dashboards.get` permission
     * on the specified dashboard. For more information, see
     * [Cloud Identity and Access Management](https://cloud.google.com/iam).
     */
    getDashboard: {
      name: "GetDashboard",
      requestType: GetDashboardRequest,
      requestStream: false,
      responseType: Dashboard,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              36,
              18,
              34,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              100,
              97,
              115,
              104,
              98,
              111,
              97,
              114,
              100,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Deletes an existing custom dashboard.
     *
     * This method requires the `monitoring.dashboards.delete` permission
     * on the specified dashboard. For more information, see
     * [Cloud Identity and Access Management](https://cloud.google.com/iam).
     */
    deleteDashboard: {
      name: "DeleteDashboard",
      requestType: DeleteDashboardRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              36,
              42,
              34,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              100,
              97,
              115,
              104,
              98,
              111,
              97,
              114,
              100,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Replaces an existing custom dashboard with a new definition.
     *
     * This method requires the `monitoring.dashboards.update` permission
     * on the specified dashboard. For more information, see
     * [Cloud Identity and Access Management](https://cloud.google.com/iam).
     */
    updateDashboard: {
      name: "UpdateDashboard",
      requestType: UpdateDashboardRequest,
      requestStream: false,
      responseType: Dashboard,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              57,
              58,
              9,
              100,
              97,
              115,
              104,
              98,
              111,
              97,
              114,
              100,
              50,
              44,
              47,
              118,
              49,
              47,
              123,
              100,
              97,
              115,
              104,
              98,
              111,
              97,
              114,
              100,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              100,
              97,
              115,
              104,
              98,
              111,
              97,
              114,
              100,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface DashboardsServiceImplementation<CallContextExt = {}> {
  /**
   * Creates a new custom dashboard. For examples on how you can use this API to
   * create dashboards, see [Managing dashboards by
   * API](https://cloud.google.com/monitoring/dashboards/api-dashboard). This
   * method requires the `monitoring.dashboards.create` permission on the
   * specified project. For more information about permissions, see [Cloud
   * Identity and Access Management](https://cloud.google.com/iam).
   */
  createDashboard(
    request: CreateDashboardRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Dashboard>>;
  /**
   * Lists the existing dashboards.
   *
   * This method requires the `monitoring.dashboards.list` permission
   * on the specified project. For more information, see
   * [Cloud Identity and Access Management](https://cloud.google.com/iam).
   */
  listDashboards(
    request: ListDashboardsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListDashboardsResponse>>;
  /**
   * Fetches a specific dashboard.
   *
   * This method requires the `monitoring.dashboards.get` permission
   * on the specified dashboard. For more information, see
   * [Cloud Identity and Access Management](https://cloud.google.com/iam).
   */
  getDashboard(request: GetDashboardRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Dashboard>>;
  /**
   * Deletes an existing custom dashboard.
   *
   * This method requires the `monitoring.dashboards.delete` permission
   * on the specified dashboard. For more information, see
   * [Cloud Identity and Access Management](https://cloud.google.com/iam).
   */
  deleteDashboard(request: DeleteDashboardRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
  /**
   * Replaces an existing custom dashboard with a new definition.
   *
   * This method requires the `monitoring.dashboards.update` permission
   * on the specified dashboard. For more information, see
   * [Cloud Identity and Access Management](https://cloud.google.com/iam).
   */
  updateDashboard(
    request: UpdateDashboardRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Dashboard>>;
}

export interface DashboardsServiceClient<CallOptionsExt = {}> {
  /**
   * Creates a new custom dashboard. For examples on how you can use this API to
   * create dashboards, see [Managing dashboards by
   * API](https://cloud.google.com/monitoring/dashboards/api-dashboard). This
   * method requires the `monitoring.dashboards.create` permission on the
   * specified project. For more information about permissions, see [Cloud
   * Identity and Access Management](https://cloud.google.com/iam).
   */
  createDashboard(
    request: DeepPartial<CreateDashboardRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Dashboard>;
  /**
   * Lists the existing dashboards.
   *
   * This method requires the `monitoring.dashboards.list` permission
   * on the specified project. For more information, see
   * [Cloud Identity and Access Management](https://cloud.google.com/iam).
   */
  listDashboards(
    request: DeepPartial<ListDashboardsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListDashboardsResponse>;
  /**
   * Fetches a specific dashboard.
   *
   * This method requires the `monitoring.dashboards.get` permission
   * on the specified dashboard. For more information, see
   * [Cloud Identity and Access Management](https://cloud.google.com/iam).
   */
  getDashboard(request: DeepPartial<GetDashboardRequest>, options?: CallOptions & CallOptionsExt): Promise<Dashboard>;
  /**
   * Deletes an existing custom dashboard.
   *
   * This method requires the `monitoring.dashboards.delete` permission
   * on the specified dashboard. For more information, see
   * [Cloud Identity and Access Management](https://cloud.google.com/iam).
   */
  deleteDashboard(request: DeepPartial<DeleteDashboardRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
  /**
   * Replaces an existing custom dashboard with a new definition.
   *
   * This method requires the `monitoring.dashboards.update` permission
   * on the specified dashboard. For more information, see
   * [Cloud Identity and Access Management](https://cloud.google.com/iam).
   */
  updateDashboard(
    request: DeepPartial<UpdateDashboardRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Dashboard>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
