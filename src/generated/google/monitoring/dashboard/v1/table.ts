// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/monitoring/dashboard/v1/table.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Duration } from "../../../protobuf/duration.js";
import { TimeSeriesQuery } from "./metrics.js";
import { TableDisplayOptions } from "./table_display_options.js";

export const protobufPackage = "google.monitoring.dashboard.v1";

/** A table that displays time series data. */
export interface TimeSeriesTable {
  /** Required. The data displayed in this table. */
  dataSets: TimeSeriesTable_TableDataSet[];
  /** Optional. Store rendering strategy */
  metricVisualization: TimeSeriesTable_MetricVisualization;
  /** Optional. The list of the persistent column settings for the table. */
  columnSettings: TimeSeriesTable_ColumnSettings[];
}

/** Enum for metric metric_visualization */
export enum TimeSeriesTable_MetricVisualization {
  /** METRIC_VISUALIZATION_UNSPECIFIED - Unspecified state */
  METRIC_VISUALIZATION_UNSPECIFIED = 0,
  /** NUMBER - Default text rendering */
  NUMBER = 1,
  /** BAR - Horizontal bar rendering */
  BAR = 2,
  UNRECOGNIZED = -1,
}

export function timeSeriesTable_MetricVisualizationFromJSON(object: any): TimeSeriesTable_MetricVisualization {
  switch (object) {
    case 0:
    case "METRIC_VISUALIZATION_UNSPECIFIED":
      return TimeSeriesTable_MetricVisualization.METRIC_VISUALIZATION_UNSPECIFIED;
    case 1:
    case "NUMBER":
      return TimeSeriesTable_MetricVisualization.NUMBER;
    case 2:
    case "BAR":
      return TimeSeriesTable_MetricVisualization.BAR;
    case -1:
    case "UNRECOGNIZED":
    default:
      return TimeSeriesTable_MetricVisualization.UNRECOGNIZED;
  }
}

export function timeSeriesTable_MetricVisualizationToJSON(object: TimeSeriesTable_MetricVisualization): string {
  switch (object) {
    case TimeSeriesTable_MetricVisualization.METRIC_VISUALIZATION_UNSPECIFIED:
      return "METRIC_VISUALIZATION_UNSPECIFIED";
    case TimeSeriesTable_MetricVisualization.NUMBER:
      return "NUMBER";
    case TimeSeriesTable_MetricVisualization.BAR:
      return "BAR";
    case TimeSeriesTable_MetricVisualization.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Groups a time series query definition with table options. */
export interface TimeSeriesTable_TableDataSet {
  /**
   * Required. Fields for querying time series data from the
   * Stackdriver metrics API.
   */
  timeSeriesQuery:
    | TimeSeriesQuery
    | undefined;
  /**
   * Optional. A template string for naming `TimeSeries` in the resulting data
   * set. This should be a string with interpolations of the form
   * `${label_name}`, which will resolve to the label's value i.e.
   * "${resource.labels.project_id}."
   */
  tableTemplate: string;
  /**
   * Optional. The lower bound on data point frequency for this data set,
   * implemented by specifying the minimum alignment period to use in a time
   * series query For example, if the data is published once every 10 minutes,
   * the `min_alignment_period` should be at least 10 minutes. It would not
   * make sense to fetch and align data at one minute intervals.
   */
  minAlignmentPeriod:
    | Duration
    | undefined;
  /**
   * Optional. Table display options for configuring how the table is
   * rendered.
   */
  tableDisplayOptions: TableDisplayOptions | undefined;
}

/** The persistent settings for a table's columns. */
export interface TimeSeriesTable_ColumnSettings {
  /** Required. The id of the column. */
  column: string;
  /** Required. Whether the column should be visible on page load. */
  visible: boolean;
}

function createBaseTimeSeriesTable(): TimeSeriesTable {
  return { dataSets: [], metricVisualization: 0, columnSettings: [] };
}

export const TimeSeriesTable: MessageFns<TimeSeriesTable> = {
  encode(message: TimeSeriesTable, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.dataSets) {
      TimeSeriesTable_TableDataSet.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.metricVisualization !== 0) {
      writer.uint32(16).int32(message.metricVisualization);
    }
    for (const v of message.columnSettings) {
      TimeSeriesTable_ColumnSettings.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TimeSeriesTable {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTimeSeriesTable();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.dataSets.push(TimeSeriesTable_TableDataSet.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.metricVisualization = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.columnSettings.push(TimeSeriesTable_ColumnSettings.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TimeSeriesTable {
    return {
      dataSets: globalThis.Array.isArray(object?.dataSets)
        ? object.dataSets.map((e: any) => TimeSeriesTable_TableDataSet.fromJSON(e))
        : [],
      metricVisualization: isSet(object.metricVisualization)
        ? timeSeriesTable_MetricVisualizationFromJSON(object.metricVisualization)
        : 0,
      columnSettings: globalThis.Array.isArray(object?.columnSettings)
        ? object.columnSettings.map((e: any) => TimeSeriesTable_ColumnSettings.fromJSON(e))
        : [],
    };
  },

  toJSON(message: TimeSeriesTable): unknown {
    const obj: any = {};
    if (message.dataSets?.length) {
      obj.dataSets = message.dataSets.map((e) => TimeSeriesTable_TableDataSet.toJSON(e));
    }
    if (message.metricVisualization !== 0) {
      obj.metricVisualization = timeSeriesTable_MetricVisualizationToJSON(message.metricVisualization);
    }
    if (message.columnSettings?.length) {
      obj.columnSettings = message.columnSettings.map((e) => TimeSeriesTable_ColumnSettings.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<TimeSeriesTable>): TimeSeriesTable {
    return TimeSeriesTable.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TimeSeriesTable>): TimeSeriesTable {
    const message = createBaseTimeSeriesTable();
    message.dataSets = object.dataSets?.map((e) => TimeSeriesTable_TableDataSet.fromPartial(e)) || [];
    message.metricVisualization = object.metricVisualization ?? 0;
    message.columnSettings = object.columnSettings?.map((e) => TimeSeriesTable_ColumnSettings.fromPartial(e)) || [];
    return message;
  },
};

function createBaseTimeSeriesTable_TableDataSet(): TimeSeriesTable_TableDataSet {
  return {
    timeSeriesQuery: undefined,
    tableTemplate: "",
    minAlignmentPeriod: undefined,
    tableDisplayOptions: undefined,
  };
}

export const TimeSeriesTable_TableDataSet: MessageFns<TimeSeriesTable_TableDataSet> = {
  encode(message: TimeSeriesTable_TableDataSet, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.timeSeriesQuery !== undefined) {
      TimeSeriesQuery.encode(message.timeSeriesQuery, writer.uint32(10).fork()).join();
    }
    if (message.tableTemplate !== "") {
      writer.uint32(18).string(message.tableTemplate);
    }
    if (message.minAlignmentPeriod !== undefined) {
      Duration.encode(message.minAlignmentPeriod, writer.uint32(26).fork()).join();
    }
    if (message.tableDisplayOptions !== undefined) {
      TableDisplayOptions.encode(message.tableDisplayOptions, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TimeSeriesTable_TableDataSet {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTimeSeriesTable_TableDataSet();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.timeSeriesQuery = TimeSeriesQuery.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.tableTemplate = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.minAlignmentPeriod = Duration.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.tableDisplayOptions = TableDisplayOptions.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TimeSeriesTable_TableDataSet {
    return {
      timeSeriesQuery: isSet(object.timeSeriesQuery) ? TimeSeriesQuery.fromJSON(object.timeSeriesQuery) : undefined,
      tableTemplate: isSet(object.tableTemplate) ? globalThis.String(object.tableTemplate) : "",
      minAlignmentPeriod: isSet(object.minAlignmentPeriod) ? Duration.fromJSON(object.minAlignmentPeriod) : undefined,
      tableDisplayOptions: isSet(object.tableDisplayOptions)
        ? TableDisplayOptions.fromJSON(object.tableDisplayOptions)
        : undefined,
    };
  },

  toJSON(message: TimeSeriesTable_TableDataSet): unknown {
    const obj: any = {};
    if (message.timeSeriesQuery !== undefined) {
      obj.timeSeriesQuery = TimeSeriesQuery.toJSON(message.timeSeriesQuery);
    }
    if (message.tableTemplate !== "") {
      obj.tableTemplate = message.tableTemplate;
    }
    if (message.minAlignmentPeriod !== undefined) {
      obj.minAlignmentPeriod = Duration.toJSON(message.minAlignmentPeriod);
    }
    if (message.tableDisplayOptions !== undefined) {
      obj.tableDisplayOptions = TableDisplayOptions.toJSON(message.tableDisplayOptions);
    }
    return obj;
  },

  create(base?: DeepPartial<TimeSeriesTable_TableDataSet>): TimeSeriesTable_TableDataSet {
    return TimeSeriesTable_TableDataSet.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TimeSeriesTable_TableDataSet>): TimeSeriesTable_TableDataSet {
    const message = createBaseTimeSeriesTable_TableDataSet();
    message.timeSeriesQuery = (object.timeSeriesQuery !== undefined && object.timeSeriesQuery !== null)
      ? TimeSeriesQuery.fromPartial(object.timeSeriesQuery)
      : undefined;
    message.tableTemplate = object.tableTemplate ?? "";
    message.minAlignmentPeriod = (object.minAlignmentPeriod !== undefined && object.minAlignmentPeriod !== null)
      ? Duration.fromPartial(object.minAlignmentPeriod)
      : undefined;
    message.tableDisplayOptions = (object.tableDisplayOptions !== undefined && object.tableDisplayOptions !== null)
      ? TableDisplayOptions.fromPartial(object.tableDisplayOptions)
      : undefined;
    return message;
  },
};

function createBaseTimeSeriesTable_ColumnSettings(): TimeSeriesTable_ColumnSettings {
  return { column: "", visible: false };
}

export const TimeSeriesTable_ColumnSettings: MessageFns<TimeSeriesTable_ColumnSettings> = {
  encode(message: TimeSeriesTable_ColumnSettings, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.column !== "") {
      writer.uint32(10).string(message.column);
    }
    if (message.visible !== false) {
      writer.uint32(16).bool(message.visible);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TimeSeriesTable_ColumnSettings {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTimeSeriesTable_ColumnSettings();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.column = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.visible = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TimeSeriesTable_ColumnSettings {
    return {
      column: isSet(object.column) ? globalThis.String(object.column) : "",
      visible: isSet(object.visible) ? globalThis.Boolean(object.visible) : false,
    };
  },

  toJSON(message: TimeSeriesTable_ColumnSettings): unknown {
    const obj: any = {};
    if (message.column !== "") {
      obj.column = message.column;
    }
    if (message.visible !== false) {
      obj.visible = message.visible;
    }
    return obj;
  },

  create(base?: DeepPartial<TimeSeriesTable_ColumnSettings>): TimeSeriesTable_ColumnSettings {
    return TimeSeriesTable_ColumnSettings.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TimeSeriesTable_ColumnSettings>): TimeSeriesTable_ColumnSettings {
    const message = createBaseTimeSeriesTable_ColumnSettings();
    message.column = object.column ?? "";
    message.visible = object.visible ?? false;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
