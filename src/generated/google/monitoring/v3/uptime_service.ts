// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/monitoring/v3/uptime_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Empty } from "../../protobuf/empty.js";
import { FieldMask } from "../../protobuf/field_mask.js";
import { UptimeCheckConfig, UptimeCheckIp } from "./uptime.js";

export const protobufPackage = "google.monitoring.v3";

/** The protocol for the `ListUptimeCheckConfigs` request. */
export interface ListUptimeCheckConfigsRequest {
  /**
   * Required. The
   * [project](https://cloud.google.com/monitoring/api/v3#project_name) whose
   * Uptime check configurations are listed. The format is:
   *
   *     projects/[PROJECT_ID_OR_NUMBER]
   */
  parent: string;
  /**
   * If provided, this field specifies the criteria that must be met by
   * uptime checks to be included in the response.
   *
   * For more details, see [Filtering
   * syntax](https://cloud.google.com/monitoring/api/v3/sorting-and-filtering#filter_syntax).
   */
  filter: string;
  /**
   * The maximum number of results to return in a single response. The server
   * may further constrain the maximum number of results returned in a single
   * page. If the page_size is <=0, the server will decide the number of results
   * to be returned.
   */
  pageSize: number;
  /**
   * If this field is not empty then it must contain the `nextPageToken` value
   * returned by a previous call to this method.  Using this field causes the
   * method to return more results from the previous method call.
   */
  pageToken: string;
}

/** The protocol for the `ListUptimeCheckConfigs` response. */
export interface ListUptimeCheckConfigsResponse {
  /** The returned Uptime check configurations. */
  uptimeCheckConfigs: UptimeCheckConfig[];
  /**
   * This field represents the pagination token to retrieve the next page of
   * results. If the value is empty, it means no further results for the
   * request. To retrieve the next page of results, the value of the
   * next_page_token is passed to the subsequent List method call (in the
   * request message's page_token field).
   */
  nextPageToken: string;
  /**
   * The total number of Uptime check configurations for the project,
   * irrespective of any pagination.
   */
  totalSize: number;
}

/** The protocol for the `GetUptimeCheckConfig` request. */
export interface GetUptimeCheckConfigRequest {
  /**
   * Required. The Uptime check configuration to retrieve. The format is:
   *
   *     projects/[PROJECT_ID_OR_NUMBER]/uptimeCheckConfigs/[UPTIME_CHECK_ID]
   */
  name: string;
}

/** The protocol for the `CreateUptimeCheckConfig` request. */
export interface CreateUptimeCheckConfigRequest {
  /**
   * Required. The
   * [project](https://cloud.google.com/monitoring/api/v3#project_name) in which
   * to create the Uptime check. The format is:
   *
   *     projects/[PROJECT_ID_OR_NUMBER]
   */
  parent: string;
  /** Required. The new Uptime check configuration. */
  uptimeCheckConfig: UptimeCheckConfig | undefined;
}

/** The protocol for the `UpdateUptimeCheckConfig` request. */
export interface UpdateUptimeCheckConfigRequest {
  /**
   * Optional. If present, only the listed fields in the current Uptime check
   * configuration are updated with values from the new configuration. If this
   * field is empty, then the current configuration is completely replaced with
   * the new configuration.
   */
  updateMask:
    | string[]
    | undefined;
  /**
   * Required. If an `updateMask` has been specified, this field gives
   * the values for the set of fields mentioned in the `updateMask`. If an
   * `updateMask` has not been given, this Uptime check configuration replaces
   * the current configuration. If a field is mentioned in `updateMask` but
   * the corresponding field is omitted in this partial Uptime check
   * configuration, it has the effect of deleting/clearing the field from the
   * configuration on the server.
   *
   * The following fields can be updated: `display_name`,
   * `http_check`, `tcp_check`, `timeout`, `content_matchers`, and
   * `selected_regions`.
   */
  uptimeCheckConfig: UptimeCheckConfig | undefined;
}

/** The protocol for the `DeleteUptimeCheckConfig` request. */
export interface DeleteUptimeCheckConfigRequest {
  /**
   * Required. The Uptime check configuration to delete. The format is:
   *
   *     projects/[PROJECT_ID_OR_NUMBER]/uptimeCheckConfigs/[UPTIME_CHECK_ID]
   */
  name: string;
}

/** The protocol for the `ListUptimeCheckIps` request. */
export interface ListUptimeCheckIpsRequest {
  /**
   * The maximum number of results to return in a single response. The server
   * may further constrain the maximum number of results returned in a single
   * page. If the page_size is <=0, the server will decide the number of results
   * to be returned.
   * NOTE: this field is not yet implemented
   */
  pageSize: number;
  /**
   * If this field is not empty then it must contain the `nextPageToken` value
   * returned by a previous call to this method.  Using this field causes the
   * method to return more results from the previous method call.
   * NOTE: this field is not yet implemented
   */
  pageToken: string;
}

/** The protocol for the `ListUptimeCheckIps` response. */
export interface ListUptimeCheckIpsResponse {
  /**
   * The returned list of IP addresses (including region and location) that the
   * checkers run from.
   */
  uptimeCheckIps: UptimeCheckIp[];
  /**
   * This field represents the pagination token to retrieve the next page of
   * results. If the value is empty, it means no further results for the
   * request. To retrieve the next page of results, the value of the
   * next_page_token is passed to the subsequent List method call (in the
   * request message's page_token field).
   * NOTE: this field is not yet implemented
   */
  nextPageToken: string;
}

function createBaseListUptimeCheckConfigsRequest(): ListUptimeCheckConfigsRequest {
  return { parent: "", filter: "", pageSize: 0, pageToken: "" };
}

export const ListUptimeCheckConfigsRequest: MessageFns<ListUptimeCheckConfigsRequest> = {
  encode(message: ListUptimeCheckConfigsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.filter !== "") {
      writer.uint32(18).string(message.filter);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(34).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListUptimeCheckConfigsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListUptimeCheckConfigsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListUptimeCheckConfigsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListUptimeCheckConfigsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListUptimeCheckConfigsRequest>): ListUptimeCheckConfigsRequest {
    return ListUptimeCheckConfigsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListUptimeCheckConfigsRequest>): ListUptimeCheckConfigsRequest {
    const message = createBaseListUptimeCheckConfigsRequest();
    message.parent = object.parent ?? "";
    message.filter = object.filter ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListUptimeCheckConfigsResponse(): ListUptimeCheckConfigsResponse {
  return { uptimeCheckConfigs: [], nextPageToken: "", totalSize: 0 };
}

export const ListUptimeCheckConfigsResponse: MessageFns<ListUptimeCheckConfigsResponse> = {
  encode(message: ListUptimeCheckConfigsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.uptimeCheckConfigs) {
      UptimeCheckConfig.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    if (message.totalSize !== 0) {
      writer.uint32(24).int32(message.totalSize);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListUptimeCheckConfigsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListUptimeCheckConfigsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.uptimeCheckConfigs.push(UptimeCheckConfig.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.totalSize = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListUptimeCheckConfigsResponse {
    return {
      uptimeCheckConfigs: globalThis.Array.isArray(object?.uptimeCheckConfigs)
        ? object.uptimeCheckConfigs.map((e: any) => UptimeCheckConfig.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      totalSize: isSet(object.totalSize) ? globalThis.Number(object.totalSize) : 0,
    };
  },

  toJSON(message: ListUptimeCheckConfigsResponse): unknown {
    const obj: any = {};
    if (message.uptimeCheckConfigs?.length) {
      obj.uptimeCheckConfigs = message.uptimeCheckConfigs.map((e) => UptimeCheckConfig.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.totalSize !== 0) {
      obj.totalSize = Math.round(message.totalSize);
    }
    return obj;
  },

  create(base?: DeepPartial<ListUptimeCheckConfigsResponse>): ListUptimeCheckConfigsResponse {
    return ListUptimeCheckConfigsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListUptimeCheckConfigsResponse>): ListUptimeCheckConfigsResponse {
    const message = createBaseListUptimeCheckConfigsResponse();
    message.uptimeCheckConfigs = object.uptimeCheckConfigs?.map((e) => UptimeCheckConfig.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.totalSize = object.totalSize ?? 0;
    return message;
  },
};

function createBaseGetUptimeCheckConfigRequest(): GetUptimeCheckConfigRequest {
  return { name: "" };
}

export const GetUptimeCheckConfigRequest: MessageFns<GetUptimeCheckConfigRequest> = {
  encode(message: GetUptimeCheckConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetUptimeCheckConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUptimeCheckConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetUptimeCheckConfigRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetUptimeCheckConfigRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetUptimeCheckConfigRequest>): GetUptimeCheckConfigRequest {
    return GetUptimeCheckConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetUptimeCheckConfigRequest>): GetUptimeCheckConfigRequest {
    const message = createBaseGetUptimeCheckConfigRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateUptimeCheckConfigRequest(): CreateUptimeCheckConfigRequest {
  return { parent: "", uptimeCheckConfig: undefined };
}

export const CreateUptimeCheckConfigRequest: MessageFns<CreateUptimeCheckConfigRequest> = {
  encode(message: CreateUptimeCheckConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.uptimeCheckConfig !== undefined) {
      UptimeCheckConfig.encode(message.uptimeCheckConfig, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateUptimeCheckConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateUptimeCheckConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.uptimeCheckConfig = UptimeCheckConfig.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateUptimeCheckConfigRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      uptimeCheckConfig: isSet(object.uptimeCheckConfig)
        ? UptimeCheckConfig.fromJSON(object.uptimeCheckConfig)
        : undefined,
    };
  },

  toJSON(message: CreateUptimeCheckConfigRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.uptimeCheckConfig !== undefined) {
      obj.uptimeCheckConfig = UptimeCheckConfig.toJSON(message.uptimeCheckConfig);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateUptimeCheckConfigRequest>): CreateUptimeCheckConfigRequest {
    return CreateUptimeCheckConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateUptimeCheckConfigRequest>): CreateUptimeCheckConfigRequest {
    const message = createBaseCreateUptimeCheckConfigRequest();
    message.parent = object.parent ?? "";
    message.uptimeCheckConfig = (object.uptimeCheckConfig !== undefined && object.uptimeCheckConfig !== null)
      ? UptimeCheckConfig.fromPartial(object.uptimeCheckConfig)
      : undefined;
    return message;
  },
};

function createBaseUpdateUptimeCheckConfigRequest(): UpdateUptimeCheckConfigRequest {
  return { updateMask: undefined, uptimeCheckConfig: undefined };
}

export const UpdateUptimeCheckConfigRequest: MessageFns<UpdateUptimeCheckConfigRequest> = {
  encode(message: UpdateUptimeCheckConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    if (message.uptimeCheckConfig !== undefined) {
      UptimeCheckConfig.encode(message.uptimeCheckConfig, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateUptimeCheckConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateUptimeCheckConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.uptimeCheckConfig = UptimeCheckConfig.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateUptimeCheckConfigRequest {
    return {
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      uptimeCheckConfig: isSet(object.uptimeCheckConfig)
        ? UptimeCheckConfig.fromJSON(object.uptimeCheckConfig)
        : undefined,
    };
  },

  toJSON(message: UpdateUptimeCheckConfigRequest): unknown {
    const obj: any = {};
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.uptimeCheckConfig !== undefined) {
      obj.uptimeCheckConfig = UptimeCheckConfig.toJSON(message.uptimeCheckConfig);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateUptimeCheckConfigRequest>): UpdateUptimeCheckConfigRequest {
    return UpdateUptimeCheckConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateUptimeCheckConfigRequest>): UpdateUptimeCheckConfigRequest {
    const message = createBaseUpdateUptimeCheckConfigRequest();
    message.updateMask = object.updateMask ?? undefined;
    message.uptimeCheckConfig = (object.uptimeCheckConfig !== undefined && object.uptimeCheckConfig !== null)
      ? UptimeCheckConfig.fromPartial(object.uptimeCheckConfig)
      : undefined;
    return message;
  },
};

function createBaseDeleteUptimeCheckConfigRequest(): DeleteUptimeCheckConfigRequest {
  return { name: "" };
}

export const DeleteUptimeCheckConfigRequest: MessageFns<DeleteUptimeCheckConfigRequest> = {
  encode(message: DeleteUptimeCheckConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteUptimeCheckConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteUptimeCheckConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteUptimeCheckConfigRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteUptimeCheckConfigRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteUptimeCheckConfigRequest>): DeleteUptimeCheckConfigRequest {
    return DeleteUptimeCheckConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteUptimeCheckConfigRequest>): DeleteUptimeCheckConfigRequest {
    const message = createBaseDeleteUptimeCheckConfigRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListUptimeCheckIpsRequest(): ListUptimeCheckIpsRequest {
  return { pageSize: 0, pageToken: "" };
}

export const ListUptimeCheckIpsRequest: MessageFns<ListUptimeCheckIpsRequest> = {
  encode(message: ListUptimeCheckIpsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListUptimeCheckIpsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListUptimeCheckIpsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListUptimeCheckIpsRequest {
    return {
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListUptimeCheckIpsRequest): unknown {
    const obj: any = {};
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListUptimeCheckIpsRequest>): ListUptimeCheckIpsRequest {
    return ListUptimeCheckIpsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListUptimeCheckIpsRequest>): ListUptimeCheckIpsRequest {
    const message = createBaseListUptimeCheckIpsRequest();
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListUptimeCheckIpsResponse(): ListUptimeCheckIpsResponse {
  return { uptimeCheckIps: [], nextPageToken: "" };
}

export const ListUptimeCheckIpsResponse: MessageFns<ListUptimeCheckIpsResponse> = {
  encode(message: ListUptimeCheckIpsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.uptimeCheckIps) {
      UptimeCheckIp.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListUptimeCheckIpsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListUptimeCheckIpsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.uptimeCheckIps.push(UptimeCheckIp.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListUptimeCheckIpsResponse {
    return {
      uptimeCheckIps: globalThis.Array.isArray(object?.uptimeCheckIps)
        ? object.uptimeCheckIps.map((e: any) => UptimeCheckIp.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListUptimeCheckIpsResponse): unknown {
    const obj: any = {};
    if (message.uptimeCheckIps?.length) {
      obj.uptimeCheckIps = message.uptimeCheckIps.map((e) => UptimeCheckIp.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListUptimeCheckIpsResponse>): ListUptimeCheckIpsResponse {
    return ListUptimeCheckIpsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListUptimeCheckIpsResponse>): ListUptimeCheckIpsResponse {
    const message = createBaseListUptimeCheckIpsResponse();
    message.uptimeCheckIps = object.uptimeCheckIps?.map((e) => UptimeCheckIp.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

/**
 * The UptimeCheckService API is used to manage (list, create, delete, edit)
 * Uptime check configurations in the Cloud Monitoring product. An Uptime
 * check is a piece of configuration that determines which resources and
 * services to monitor for availability. These configurations can also be
 * configured interactively by navigating to the [Cloud console]
 * (https://console.cloud.google.com), selecting the appropriate project,
 * clicking on "Monitoring" on the left-hand side to navigate to Cloud
 * Monitoring, and then clicking on "Uptime".
 */
export type UptimeCheckServiceDefinition = typeof UptimeCheckServiceDefinition;
export const UptimeCheckServiceDefinition = {
  name: "UptimeCheckService",
  fullName: "google.monitoring.v3.UptimeCheckService",
  methods: {
    /**
     * Lists the existing valid Uptime check configurations for the project
     * (leaving out any invalid configurations).
     */
    listUptimeCheckConfigs: {
      name: "ListUptimeCheckConfigs",
      requestType: ListUptimeCheckConfigsRequest,
      requestStream: false,
      responseType: ListUptimeCheckConfigsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              44,
              18,
              42,
              47,
              118,
              51,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              47,
              117,
              112,
              116,
              105,
              109,
              101,
              67,
              104,
              101,
              99,
              107,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets a single Uptime check configuration. */
    getUptimeCheckConfig: {
      name: "GetUptimeCheckConfig",
      requestType: GetUptimeCheckConfigRequest,
      requestStream: false,
      responseType: UptimeCheckConfig,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              44,
              18,
              42,
              47,
              118,
              51,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              117,
              112,
              116,
              105,
              109,
              101,
              67,
              104,
              101,
              99,
              107,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Creates a new Uptime check configuration. */
    createUptimeCheckConfig: {
      name: "CreateUptimeCheckConfig",
      requestType: CreateUptimeCheckConfigRequest,
      requestStream: false,
      responseType: UptimeCheckConfig,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              26,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              117,
              112,
              116,
              105,
              109,
              101,
              95,
              99,
              104,
              101,
              99,
              107,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
            ]),
          ],
          578365826: [
            Buffer.from([
              65,
              58,
              19,
              117,
              112,
              116,
              105,
              109,
              101,
              95,
              99,
              104,
              101,
              99,
              107,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              34,
              42,
              47,
              118,
              51,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              47,
              117,
              112,
              116,
              105,
              109,
              101,
              67,
              104,
              101,
              99,
              107,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Updates an Uptime check configuration. You can either replace the entire
     * configuration with a new one or replace only certain fields in the current
     * configuration by specifying the fields to be updated via `updateMask`.
     * Returns the updated configuration.
     */
    updateUptimeCheckConfig: {
      name: "UpdateUptimeCheckConfig",
      requestType: UpdateUptimeCheckConfigRequest,
      requestStream: false,
      responseType: UptimeCheckConfig,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([19, 117, 112, 116, 105, 109, 101, 95, 99, 104, 101, 99, 107, 95, 99, 111, 110, 102, 105, 103]),
          ],
          578365826: [
            Buffer.from([
              85,
              58,
              19,
              117,
              112,
              116,
              105,
              109,
              101,
              95,
              99,
              104,
              101,
              99,
              107,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              50,
              62,
              47,
              118,
              51,
              47,
              123,
              117,
              112,
              116,
              105,
              109,
              101,
              95,
              99,
              104,
              101,
              99,
              107,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              117,
              112,
              116,
              105,
              109,
              101,
              67,
              104,
              101,
              99,
              107,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Deletes an Uptime check configuration. Note that this method will fail
     * if the Uptime check configuration is referenced by an alert policy or
     * other dependent configs that would be rendered invalid by the deletion.
     */
    deleteUptimeCheckConfig: {
      name: "DeleteUptimeCheckConfig",
      requestType: DeleteUptimeCheckConfigRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              44,
              42,
              42,
              47,
              118,
              51,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              117,
              112,
              116,
              105,
              109,
              101,
              67,
              104,
              101,
              99,
              107,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Returns the list of IP addresses that checkers run from */
    listUptimeCheckIps: {
      name: "ListUptimeCheckIps",
      requestType: ListUptimeCheckIpsRequest,
      requestStream: false,
      responseType: ListUptimeCheckIpsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              20,
              18,
              18,
              47,
              118,
              51,
              47,
              117,
              112,
              116,
              105,
              109,
              101,
              67,
              104,
              101,
              99,
              107,
              73,
              112,
              115,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface UptimeCheckServiceImplementation<CallContextExt = {}> {
  /**
   * Lists the existing valid Uptime check configurations for the project
   * (leaving out any invalid configurations).
   */
  listUptimeCheckConfigs(
    request: ListUptimeCheckConfigsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListUptimeCheckConfigsResponse>>;
  /** Gets a single Uptime check configuration. */
  getUptimeCheckConfig(
    request: GetUptimeCheckConfigRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UptimeCheckConfig>>;
  /** Creates a new Uptime check configuration. */
  createUptimeCheckConfig(
    request: CreateUptimeCheckConfigRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UptimeCheckConfig>>;
  /**
   * Updates an Uptime check configuration. You can either replace the entire
   * configuration with a new one or replace only certain fields in the current
   * configuration by specifying the fields to be updated via `updateMask`.
   * Returns the updated configuration.
   */
  updateUptimeCheckConfig(
    request: UpdateUptimeCheckConfigRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UptimeCheckConfig>>;
  /**
   * Deletes an Uptime check configuration. Note that this method will fail
   * if the Uptime check configuration is referenced by an alert policy or
   * other dependent configs that would be rendered invalid by the deletion.
   */
  deleteUptimeCheckConfig(
    request: DeleteUptimeCheckConfigRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  /** Returns the list of IP addresses that checkers run from */
  listUptimeCheckIps(
    request: ListUptimeCheckIpsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListUptimeCheckIpsResponse>>;
}

export interface UptimeCheckServiceClient<CallOptionsExt = {}> {
  /**
   * Lists the existing valid Uptime check configurations for the project
   * (leaving out any invalid configurations).
   */
  listUptimeCheckConfigs(
    request: DeepPartial<ListUptimeCheckConfigsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListUptimeCheckConfigsResponse>;
  /** Gets a single Uptime check configuration. */
  getUptimeCheckConfig(
    request: DeepPartial<GetUptimeCheckConfigRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UptimeCheckConfig>;
  /** Creates a new Uptime check configuration. */
  createUptimeCheckConfig(
    request: DeepPartial<CreateUptimeCheckConfigRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UptimeCheckConfig>;
  /**
   * Updates an Uptime check configuration. You can either replace the entire
   * configuration with a new one or replace only certain fields in the current
   * configuration by specifying the fields to be updated via `updateMask`.
   * Returns the updated configuration.
   */
  updateUptimeCheckConfig(
    request: DeepPartial<UpdateUptimeCheckConfigRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UptimeCheckConfig>;
  /**
   * Deletes an Uptime check configuration. Note that this method will fail
   * if the Uptime check configuration is referenced by an alert policy or
   * other dependent configs that would be rendered invalid by the deletion.
   */
  deleteUptimeCheckConfig(
    request: DeepPartial<DeleteUptimeCheckConfigRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  /** Returns the list of IP addresses that checkers run from */
  listUptimeCheckIps(
    request: DeepPartial<ListUptimeCheckIpsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListUptimeCheckIpsResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
