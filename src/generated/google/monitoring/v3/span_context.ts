// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/monitoring/v3/span_context.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.monitoring.v3";

/**
 * The context of a span. This is attached to an
 * [Exemplar][google.api.Distribution.Exemplar]
 * in [Distribution][google.api.Distribution] values during aggregation.
 *
 * It contains the name of a span with format:
 *
 *     projects/[PROJECT_ID_OR_NUMBER]/traces/[TRACE_ID]/spans/[SPAN_ID]
 */
export interface SpanContext {
  /**
   * The resource name of the span. The format is:
   *
   *     projects/[PROJECT_ID_OR_NUMBER]/traces/[TRACE_ID]/spans/[SPAN_ID]
   *
   * `[TRACE_ID]` is a unique identifier for a trace within a project;
   * it is a 32-character hexadecimal encoding of a 16-byte array.
   *
   * `[SPAN_ID]` is a unique identifier for a span within a trace; it
   * is a 16-character hexadecimal encoding of an 8-byte array.
   */
  spanName: string;
}

function createBaseSpanContext(): SpanContext {
  return { spanName: "" };
}

export const SpanContext: MessageFns<SpanContext> = {
  encode(message: SpanContext, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.spanName !== "") {
      writer.uint32(10).string(message.spanName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SpanContext {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSpanContext();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.spanName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SpanContext {
    return { spanName: isSet(object.spanName) ? globalThis.String(object.spanName) : "" };
  },

  toJSON(message: SpanContext): unknown {
    const obj: any = {};
    if (message.spanName !== "") {
      obj.spanName = message.spanName;
    }
    return obj;
  },

  create(base?: DeepPartial<SpanContext>): SpanContext {
    return SpanContext.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SpanContext>): SpanContext {
    const message = createBaseSpanContext();
    message.spanName = object.spanName ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
