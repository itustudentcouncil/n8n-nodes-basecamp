// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/monitoring/v3/alert_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Empty } from "../../protobuf/empty.js";
import { FieldMask } from "../../protobuf/field_mask.js";
import { AlertPolicy } from "./alert.js";

export const protobufPackage = "google.monitoring.v3";

/** The protocol for the `CreateAlertPolicy` request. */
export interface CreateAlertPolicyRequest {
  /**
   * Required. The
   * [project](https://cloud.google.com/monitoring/api/v3#project_name) in which
   * to create the alerting policy. The format is:
   *
   *     projects/[PROJECT_ID_OR_NUMBER]
   *
   * Note that this field names the parent container in which the alerting
   * policy will be written, not the name of the created policy. |name| must be
   * a host project of a Metrics Scope, otherwise INVALID_ARGUMENT error will
   * return. The alerting policy that is returned will have a name that contains
   * a normalized representation of this name as a prefix but adds a suffix of
   * the form `/alertPolicies/[ALERT_POLICY_ID]`, identifying the policy in the
   * container.
   */
  name: string;
  /**
   * Required. The requested alerting policy. You should omit the `name` field
   * in this policy. The name will be returned in the new policy, including a
   * new `[ALERT_POLICY_ID]` value.
   */
  alertPolicy: AlertPolicy | undefined;
}

/** The protocol for the `GetAlertPolicy` request. */
export interface GetAlertPolicyRequest {
  /**
   * Required. The alerting policy to retrieve. The format is:
   *
   *     projects/[PROJECT_ID_OR_NUMBER]/alertPolicies/[ALERT_POLICY_ID]
   */
  name: string;
}

/** The protocol for the `ListAlertPolicies` request. */
export interface ListAlertPoliciesRequest {
  /**
   * Required. The
   * [project](https://cloud.google.com/monitoring/api/v3#project_name) whose
   * alert policies are to be listed. The format is:
   *
   *     projects/[PROJECT_ID_OR_NUMBER]
   *
   * Note that this field names the parent container in which the alerting
   * policies to be listed are stored. To retrieve a single alerting policy
   * by name, use the
   * [GetAlertPolicy][google.monitoring.v3.AlertPolicyService.GetAlertPolicy]
   * operation, instead.
   */
  name: string;
  /**
   * If provided, this field specifies the criteria that must be met by
   * alert policies to be included in the response.
   *
   * For more details, see [sorting and
   * filtering](https://cloud.google.com/monitoring/api/v3/sorting-and-filtering).
   */
  filter: string;
  /**
   * A comma-separated list of fields by which to sort the result. Supports
   * the same set of field references as the `filter` field. Entries can be
   * prefixed with a minus sign to sort by the field in descending order.
   *
   * For more details, see [sorting and
   * filtering](https://cloud.google.com/monitoring/api/v3/sorting-and-filtering).
   */
  orderBy: string;
  /** The maximum number of results to return in a single response. */
  pageSize: number;
  /**
   * If this field is not empty then it must contain the `nextPageToken` value
   * returned by a previous call to this method.  Using this field causes the
   * method to return more results from the previous method call.
   */
  pageToken: string;
}

/** The protocol for the `ListAlertPolicies` response. */
export interface ListAlertPoliciesResponse {
  /** The returned alert policies. */
  alertPolicies: AlertPolicy[];
  /**
   * If there might be more results than were returned, then this field is set
   * to a non-empty value. To see the additional results,
   * use that value as `page_token` in the next call to this method.
   */
  nextPageToken: string;
  /**
   * The total number of alert policies in all pages. This number is only an
   * estimate, and may change in subsequent pages. https://aip.dev/158
   */
  totalSize: number;
}

/** The protocol for the `UpdateAlertPolicy` request. */
export interface UpdateAlertPolicyRequest {
  /**
   * Optional. A list of alerting policy field names. If this field is not
   * empty, each listed field in the existing alerting policy is set to the
   * value of the corresponding field in the supplied policy (`alert_policy`),
   * or to the field's default value if the field is not in the supplied
   * alerting policy.  Fields not listed retain their previous value.
   *
   * Examples of valid field masks include `display_name`, `documentation`,
   * `documentation.content`, `documentation.mime_type`, `user_labels`,
   * `user_label.nameofkey`, `enabled`, `conditions`, `combiner`, etc.
   *
   * If this field is empty, then the supplied alerting policy replaces the
   * existing policy. It is the same as deleting the existing policy and
   * adding the supplied policy, except for the following:
   *
   * +   The new policy will have the same `[ALERT_POLICY_ID]` as the former
   *     policy. This gives you continuity with the former policy in your
   *     notifications and incidents.
   * +   Conditions in the new policy will keep their former `[CONDITION_ID]` if
   *     the supplied condition includes the `name` field with that
   *     `[CONDITION_ID]`. If the supplied condition omits the `name` field,
   *     then a new `[CONDITION_ID]` is created.
   */
  updateMask:
    | string[]
    | undefined;
  /**
   * Required. The updated alerting policy or the updated values for the
   * fields listed in `update_mask`.
   * If `update_mask` is not empty, any fields in this policy that are
   * not in `update_mask` are ignored.
   */
  alertPolicy: AlertPolicy | undefined;
}

/** The protocol for the `DeleteAlertPolicy` request. */
export interface DeleteAlertPolicyRequest {
  /**
   * Required. The alerting policy to delete. The format is:
   *
   *     projects/[PROJECT_ID_OR_NUMBER]/alertPolicies/[ALERT_POLICY_ID]
   *
   * For more information, see [AlertPolicy][google.monitoring.v3.AlertPolicy].
   */
  name: string;
}

function createBaseCreateAlertPolicyRequest(): CreateAlertPolicyRequest {
  return { name: "", alertPolicy: undefined };
}

export const CreateAlertPolicyRequest: MessageFns<CreateAlertPolicyRequest> = {
  encode(message: CreateAlertPolicyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    if (message.alertPolicy !== undefined) {
      AlertPolicy.encode(message.alertPolicy, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateAlertPolicyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateAlertPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 3:
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.alertPolicy = AlertPolicy.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateAlertPolicyRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      alertPolicy: isSet(object.alertPolicy) ? AlertPolicy.fromJSON(object.alertPolicy) : undefined,
    };
  },

  toJSON(message: CreateAlertPolicyRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.alertPolicy !== undefined) {
      obj.alertPolicy = AlertPolicy.toJSON(message.alertPolicy);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateAlertPolicyRequest>): CreateAlertPolicyRequest {
    return CreateAlertPolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateAlertPolicyRequest>): CreateAlertPolicyRequest {
    const message = createBaseCreateAlertPolicyRequest();
    message.name = object.name ?? "";
    message.alertPolicy = (object.alertPolicy !== undefined && object.alertPolicy !== null)
      ? AlertPolicy.fromPartial(object.alertPolicy)
      : undefined;
    return message;
  },
};

function createBaseGetAlertPolicyRequest(): GetAlertPolicyRequest {
  return { name: "" };
}

export const GetAlertPolicyRequest: MessageFns<GetAlertPolicyRequest> = {
  encode(message: GetAlertPolicyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAlertPolicyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAlertPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 3:
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAlertPolicyRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetAlertPolicyRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetAlertPolicyRequest>): GetAlertPolicyRequest {
    return GetAlertPolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetAlertPolicyRequest>): GetAlertPolicyRequest {
    const message = createBaseGetAlertPolicyRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListAlertPoliciesRequest(): ListAlertPoliciesRequest {
  return { name: "", filter: "", orderBy: "", pageSize: 0, pageToken: "" };
}

export const ListAlertPoliciesRequest: MessageFns<ListAlertPoliciesRequest> = {
  encode(message: ListAlertPoliciesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(34).string(message.name);
    }
    if (message.filter !== "") {
      writer.uint32(42).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(50).string(message.orderBy);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAlertPoliciesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAlertPoliciesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 4:
          if (tag !== 34) {
            break;
          }

          message.name = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.orderBy = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAlertPoliciesRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListAlertPoliciesRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListAlertPoliciesRequest>): ListAlertPoliciesRequest {
    return ListAlertPoliciesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAlertPoliciesRequest>): ListAlertPoliciesRequest {
    const message = createBaseListAlertPoliciesRequest();
    message.name = object.name ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListAlertPoliciesResponse(): ListAlertPoliciesResponse {
  return { alertPolicies: [], nextPageToken: "", totalSize: 0 };
}

export const ListAlertPoliciesResponse: MessageFns<ListAlertPoliciesResponse> = {
  encode(message: ListAlertPoliciesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.alertPolicies) {
      AlertPolicy.encode(v!, writer.uint32(26).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    if (message.totalSize !== 0) {
      writer.uint32(32).int32(message.totalSize);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAlertPoliciesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAlertPoliciesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 3:
          if (tag !== 26) {
            break;
          }

          message.alertPolicies.push(AlertPolicy.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.totalSize = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAlertPoliciesResponse {
    return {
      alertPolicies: globalThis.Array.isArray(object?.alertPolicies)
        ? object.alertPolicies.map((e: any) => AlertPolicy.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      totalSize: isSet(object.totalSize) ? globalThis.Number(object.totalSize) : 0,
    };
  },

  toJSON(message: ListAlertPoliciesResponse): unknown {
    const obj: any = {};
    if (message.alertPolicies?.length) {
      obj.alertPolicies = message.alertPolicies.map((e) => AlertPolicy.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.totalSize !== 0) {
      obj.totalSize = Math.round(message.totalSize);
    }
    return obj;
  },

  create(base?: DeepPartial<ListAlertPoliciesResponse>): ListAlertPoliciesResponse {
    return ListAlertPoliciesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAlertPoliciesResponse>): ListAlertPoliciesResponse {
    const message = createBaseListAlertPoliciesResponse();
    message.alertPolicies = object.alertPolicies?.map((e) => AlertPolicy.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.totalSize = object.totalSize ?? 0;
    return message;
  },
};

function createBaseUpdateAlertPolicyRequest(): UpdateAlertPolicyRequest {
  return { updateMask: undefined, alertPolicy: undefined };
}

export const UpdateAlertPolicyRequest: MessageFns<UpdateAlertPolicyRequest> = {
  encode(message: UpdateAlertPolicyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    if (message.alertPolicy !== undefined) {
      AlertPolicy.encode(message.alertPolicy, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateAlertPolicyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateAlertPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.alertPolicy = AlertPolicy.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateAlertPolicyRequest {
    return {
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      alertPolicy: isSet(object.alertPolicy) ? AlertPolicy.fromJSON(object.alertPolicy) : undefined,
    };
  },

  toJSON(message: UpdateAlertPolicyRequest): unknown {
    const obj: any = {};
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.alertPolicy !== undefined) {
      obj.alertPolicy = AlertPolicy.toJSON(message.alertPolicy);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateAlertPolicyRequest>): UpdateAlertPolicyRequest {
    return UpdateAlertPolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateAlertPolicyRequest>): UpdateAlertPolicyRequest {
    const message = createBaseUpdateAlertPolicyRequest();
    message.updateMask = object.updateMask ?? undefined;
    message.alertPolicy = (object.alertPolicy !== undefined && object.alertPolicy !== null)
      ? AlertPolicy.fromPartial(object.alertPolicy)
      : undefined;
    return message;
  },
};

function createBaseDeleteAlertPolicyRequest(): DeleteAlertPolicyRequest {
  return { name: "" };
}

export const DeleteAlertPolicyRequest: MessageFns<DeleteAlertPolicyRequest> = {
  encode(message: DeleteAlertPolicyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteAlertPolicyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteAlertPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 3:
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteAlertPolicyRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteAlertPolicyRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteAlertPolicyRequest>): DeleteAlertPolicyRequest {
    return DeleteAlertPolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteAlertPolicyRequest>): DeleteAlertPolicyRequest {
    const message = createBaseDeleteAlertPolicyRequest();
    message.name = object.name ?? "";
    return message;
  },
};

/**
 * The AlertPolicyService API is used to manage (list, create, delete,
 * edit) alert policies in Cloud Monitoring. An alerting policy is
 * a description of the conditions under which some aspect of your
 * system is considered to be "unhealthy" and the ways to notify
 * people or services about this state. In addition to using this API, alert
 * policies can also be managed through
 * [Cloud Monitoring](https://cloud.google.com/monitoring/docs/),
 * which can be reached by clicking the "Monitoring" tab in
 * [Cloud console](https://console.cloud.google.com/).
 */
export type AlertPolicyServiceDefinition = typeof AlertPolicyServiceDefinition;
export const AlertPolicyServiceDefinition = {
  name: "AlertPolicyService",
  fullName: "google.monitoring.v3.AlertPolicyService",
  methods: {
    /** Lists the existing alerting policies for the workspace. */
    listAlertPolicies: {
      name: "ListAlertPolicies",
      requestType: ListAlertPoliciesRequest,
      requestStream: false,
      responseType: ListAlertPoliciesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              37,
              18,
              35,
              47,
              118,
              51,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              47,
              97,
              108,
              101,
              114,
              116,
              80,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets a single alerting policy. */
    getAlertPolicy: {
      name: "GetAlertPolicy",
      requestType: GetAlertPolicyRequest,
      requestStream: false,
      responseType: AlertPolicy,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              39,
              18,
              37,
              47,
              118,
              51,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              97,
              108,
              101,
              114,
              116,
              80,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Creates a new alerting policy.
     *
     * Design your application to single-thread API calls that modify the state of
     * alerting policies in a single project. This includes calls to
     * CreateAlertPolicy, DeleteAlertPolicy and UpdateAlertPolicy.
     */
    createAlertPolicy: {
      name: "CreateAlertPolicy",
      requestType: CreateAlertPolicyRequest,
      requestStream: false,
      responseType: AlertPolicy,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([17, 110, 97, 109, 101, 44, 97, 108, 101, 114, 116, 95, 112, 111, 108, 105, 99, 121])],
          578365826: [
            Buffer.from([
              51,
              58,
              12,
              97,
              108,
              101,
              114,
              116,
              95,
              112,
              111,
              108,
              105,
              99,
              121,
              34,
              35,
              47,
              118,
              51,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              47,
              97,
              108,
              101,
              114,
              116,
              80,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Deletes an alerting policy.
     *
     * Design your application to single-thread API calls that modify the state of
     * alerting policies in a single project. This includes calls to
     * CreateAlertPolicy, DeleteAlertPolicy and UpdateAlertPolicy.
     */
    deleteAlertPolicy: {
      name: "DeleteAlertPolicy",
      requestType: DeleteAlertPolicyRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              39,
              42,
              37,
              47,
              118,
              51,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              97,
              108,
              101,
              114,
              116,
              80,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Updates an alerting policy. You can either replace the entire policy with
     * a new one or replace only certain fields in the current alerting policy by
     * specifying the fields to be updated via `updateMask`. Returns the
     * updated alerting policy.
     *
     * Design your application to single-thread API calls that modify the state of
     * alerting policies in a single project. This includes calls to
     * CreateAlertPolicy, DeleteAlertPolicy and UpdateAlertPolicy.
     */
    updateAlertPolicy: {
      name: "UpdateAlertPolicy",
      requestType: UpdateAlertPolicyRequest,
      requestStream: false,
      responseType: AlertPolicy,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              24,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
              44,
              97,
              108,
              101,
              114,
              116,
              95,
              112,
              111,
              108,
              105,
              99,
              121,
            ]),
          ],
          578365826: [
            Buffer.from([
              66,
              58,
              12,
              97,
              108,
              101,
              114,
              116,
              95,
              112,
              111,
              108,
              105,
              99,
              121,
              50,
              50,
              47,
              118,
              51,
              47,
              123,
              97,
              108,
              101,
              114,
              116,
              95,
              112,
              111,
              108,
              105,
              99,
              121,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              97,
              108,
              101,
              114,
              116,
              80,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface AlertPolicyServiceImplementation<CallContextExt = {}> {
  /** Lists the existing alerting policies for the workspace. */
  listAlertPolicies(
    request: ListAlertPoliciesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListAlertPoliciesResponse>>;
  /** Gets a single alerting policy. */
  getAlertPolicy(
    request: GetAlertPolicyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AlertPolicy>>;
  /**
   * Creates a new alerting policy.
   *
   * Design your application to single-thread API calls that modify the state of
   * alerting policies in a single project. This includes calls to
   * CreateAlertPolicy, DeleteAlertPolicy and UpdateAlertPolicy.
   */
  createAlertPolicy(
    request: CreateAlertPolicyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AlertPolicy>>;
  /**
   * Deletes an alerting policy.
   *
   * Design your application to single-thread API calls that modify the state of
   * alerting policies in a single project. This includes calls to
   * CreateAlertPolicy, DeleteAlertPolicy and UpdateAlertPolicy.
   */
  deleteAlertPolicy(
    request: DeleteAlertPolicyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  /**
   * Updates an alerting policy. You can either replace the entire policy with
   * a new one or replace only certain fields in the current alerting policy by
   * specifying the fields to be updated via `updateMask`. Returns the
   * updated alerting policy.
   *
   * Design your application to single-thread API calls that modify the state of
   * alerting policies in a single project. This includes calls to
   * CreateAlertPolicy, DeleteAlertPolicy and UpdateAlertPolicy.
   */
  updateAlertPolicy(
    request: UpdateAlertPolicyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AlertPolicy>>;
}

export interface AlertPolicyServiceClient<CallOptionsExt = {}> {
  /** Lists the existing alerting policies for the workspace. */
  listAlertPolicies(
    request: DeepPartial<ListAlertPoliciesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListAlertPoliciesResponse>;
  /** Gets a single alerting policy. */
  getAlertPolicy(
    request: DeepPartial<GetAlertPolicyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AlertPolicy>;
  /**
   * Creates a new alerting policy.
   *
   * Design your application to single-thread API calls that modify the state of
   * alerting policies in a single project. This includes calls to
   * CreateAlertPolicy, DeleteAlertPolicy and UpdateAlertPolicy.
   */
  createAlertPolicy(
    request: DeepPartial<CreateAlertPolicyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AlertPolicy>;
  /**
   * Deletes an alerting policy.
   *
   * Design your application to single-thread API calls that modify the state of
   * alerting policies in a single project. This includes calls to
   * CreateAlertPolicy, DeleteAlertPolicy and UpdateAlertPolicy.
   */
  deleteAlertPolicy(
    request: DeepPartial<DeleteAlertPolicyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  /**
   * Updates an alerting policy. You can either replace the entire policy with
   * a new one or replace only certain fields in the current alerting policy by
   * specifying the fields to be updated via `updateMask`. Returns the
   * updated alerting policy.
   *
   * Design your application to single-thread API calls that modify the state of
   * alerting policies in a single project. This includes calls to
   * CreateAlertPolicy, DeleteAlertPolicy and UpdateAlertPolicy.
   */
  updateAlertPolicy(
    request: DeepPartial<UpdateAlertPolicyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AlertPolicy>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
