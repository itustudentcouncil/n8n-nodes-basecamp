// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/maps/routes/v1/custom_route.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Route } from "./route.js";

export const protobufPackage = "google.maps.routes.v1";

/**
 * Encapsulates a custom route computed based on the route objective specified
 * by the customer. CustomRoute contains a route and a route token, which can be
 * passed to NavSDK to reconstruct the custom route for turn by turn navigation.
 */
export interface CustomRoute {
  /** The route considered 'best' for the input route objective. */
  route:
    | Route
    | undefined;
  /**
   * Web-safe base64 encoded route token that can be passed to NavSDK, which
   * allows NavSDK to reconstruct the route during navigation, and in the event
   * of rerouting honor the original intention when RoutesPreferred
   * ComputeCustomRoutes is called. Customers should treat this token as an
   * opaque blob.
   */
  token: string;
}

function createBaseCustomRoute(): CustomRoute {
  return { route: undefined, token: "" };
}

export const CustomRoute: MessageFns<CustomRoute> = {
  encode(message: CustomRoute, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.route !== undefined) {
      Route.encode(message.route, writer.uint32(90).fork()).join();
    }
    if (message.token !== "") {
      writer.uint32(98).string(message.token);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CustomRoute {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCustomRoute();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 11:
          if (tag !== 90) {
            break;
          }

          message.route = Route.decode(reader, reader.uint32());
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.token = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CustomRoute {
    return {
      route: isSet(object.route) ? Route.fromJSON(object.route) : undefined,
      token: isSet(object.token) ? globalThis.String(object.token) : "",
    };
  },

  toJSON(message: CustomRoute): unknown {
    const obj: any = {};
    if (message.route !== undefined) {
      obj.route = Route.toJSON(message.route);
    }
    if (message.token !== "") {
      obj.token = message.token;
    }
    return obj;
  },

  create(base?: DeepPartial<CustomRoute>): CustomRoute {
    return CustomRoute.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CustomRoute>): CustomRoute {
    const message = createBaseCustomRoute();
    message.route = (object.route !== undefined && object.route !== null) ? Route.fromPartial(object.route) : undefined;
    message.token = object.token ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
