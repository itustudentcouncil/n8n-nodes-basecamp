// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/maps/routes/v1/polyline.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Struct } from "../../../protobuf/struct.js";

export const protobufPackage = "google.maps.routes.v1";

/** A set of values that specify the quality of the polyline. */
export enum PolylineQuality {
  /** POLYLINE_QUALITY_UNSPECIFIED - No polyline quality preference specified. Defaults to `OVERVIEW`. */
  POLYLINE_QUALITY_UNSPECIFIED = 0,
  /**
   * HIGH_QUALITY - Specifies a high-quality polyline - which is composed using more points
   * than `OVERVIEW`, at the cost of increased response size. Use this value
   * when you need more precision.
   */
  HIGH_QUALITY = 1,
  /**
   * OVERVIEW - Specifies an overview polyline - which is composed using a small number of
   * points. Use this value when displaying an overview of the route. Using this
   * option has a lower request latency compared to using the
   * `HIGH_QUALITY` option.
   */
  OVERVIEW = 2,
  UNRECOGNIZED = -1,
}

export function polylineQualityFromJSON(object: any): PolylineQuality {
  switch (object) {
    case 0:
    case "POLYLINE_QUALITY_UNSPECIFIED":
      return PolylineQuality.POLYLINE_QUALITY_UNSPECIFIED;
    case 1:
    case "HIGH_QUALITY":
      return PolylineQuality.HIGH_QUALITY;
    case 2:
    case "OVERVIEW":
      return PolylineQuality.OVERVIEW;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PolylineQuality.UNRECOGNIZED;
  }
}

export function polylineQualityToJSON(object: PolylineQuality): string {
  switch (object) {
    case PolylineQuality.POLYLINE_QUALITY_UNSPECIFIED:
      return "POLYLINE_QUALITY_UNSPECIFIED";
    case PolylineQuality.HIGH_QUALITY:
      return "HIGH_QUALITY";
    case PolylineQuality.OVERVIEW:
      return "OVERVIEW";
    case PolylineQuality.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Specifies the preferred type of polyline to be returned. */
export enum PolylineEncoding {
  /** POLYLINE_ENCODING_UNSPECIFIED - No polyline type preference specified. Defaults to `ENCODED_POLYLINE`. */
  POLYLINE_ENCODING_UNSPECIFIED = 0,
  /**
   * ENCODED_POLYLINE - Specifies a polyline encoded using the [polyline encoding
   * algorithm](https://developers.google.com/maps/documentation/utilities/polylinealgorithm).
   */
  ENCODED_POLYLINE = 1,
  /**
   * GEO_JSON_LINESTRING - Specifies a polyline using the [GeoJSON LineString
   * format](https://tools.ietf.org/html/rfc7946#section-3.1.4)
   */
  GEO_JSON_LINESTRING = 2,
  UNRECOGNIZED = -1,
}

export function polylineEncodingFromJSON(object: any): PolylineEncoding {
  switch (object) {
    case 0:
    case "POLYLINE_ENCODING_UNSPECIFIED":
      return PolylineEncoding.POLYLINE_ENCODING_UNSPECIFIED;
    case 1:
    case "ENCODED_POLYLINE":
      return PolylineEncoding.ENCODED_POLYLINE;
    case 2:
    case "GEO_JSON_LINESTRING":
      return PolylineEncoding.GEO_JSON_LINESTRING;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PolylineEncoding.UNRECOGNIZED;
  }
}

export function polylineEncodingToJSON(object: PolylineEncoding): string {
  switch (object) {
    case PolylineEncoding.POLYLINE_ENCODING_UNSPECIFIED:
      return "POLYLINE_ENCODING_UNSPECIFIED";
    case PolylineEncoding.ENCODED_POLYLINE:
      return "ENCODED_POLYLINE";
    case PolylineEncoding.GEO_JSON_LINESTRING:
      return "GEO_JSON_LINESTRING";
    case PolylineEncoding.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Encapsulates an encoded polyline. */
export interface Polyline {
  /**
   * The string encoding of the polyline using the [polyline encoding
   * algorithm](https://developers.google.com/maps/documentation/utilities/polylinealgorithm)
   */
  encodedPolyline?:
    | string
    | undefined;
  /**
   * Specifies a polyline using the [GeoJSON LineString
   * format](https://tools.ietf.org/html/rfc7946#section-3.1.4)
   */
  geoJsonLinestring?: { [key: string]: any } | undefined;
}

function createBasePolyline(): Polyline {
  return { encodedPolyline: undefined, geoJsonLinestring: undefined };
}

export const Polyline: MessageFns<Polyline> = {
  encode(message: Polyline, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.encodedPolyline !== undefined) {
      writer.uint32(10).string(message.encodedPolyline);
    }
    if (message.geoJsonLinestring !== undefined) {
      Struct.encode(Struct.wrap(message.geoJsonLinestring), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Polyline {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePolyline();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.encodedPolyline = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.geoJsonLinestring = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Polyline {
    return {
      encodedPolyline: isSet(object.encodedPolyline) ? globalThis.String(object.encodedPolyline) : undefined,
      geoJsonLinestring: isObject(object.geoJsonLinestring) ? object.geoJsonLinestring : undefined,
    };
  },

  toJSON(message: Polyline): unknown {
    const obj: any = {};
    if (message.encodedPolyline !== undefined) {
      obj.encodedPolyline = message.encodedPolyline;
    }
    if (message.geoJsonLinestring !== undefined) {
      obj.geoJsonLinestring = message.geoJsonLinestring;
    }
    return obj;
  },

  create(base?: DeepPartial<Polyline>): Polyline {
    return Polyline.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Polyline>): Polyline {
    const message = createBasePolyline();
    message.encodedPolyline = object.encodedPolyline ?? undefined;
    message.geoJsonLinestring = object.geoJsonLinestring ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
