// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/maps/routes/v1/compute_custom_routes_response.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { CustomRoute } from "./custom_route.js";
import {
  FallbackReason,
  fallbackReasonFromJSON,
  fallbackReasonToJSON,
  FallbackRoutingMode,
  fallbackRoutingModeFromJSON,
  fallbackRoutingModeToJSON,
} from "./fallback_info.js";

export const protobufPackage = "google.maps.routes.v1";

/** ComputeCustomRoutes response message. */
export interface ComputeCustomRoutesResponse {
  /** The ‘best’ routes for the input route objective. */
  routes: CustomRoute[];
  /** The fastest reference route. */
  fastestRoute:
    | CustomRoute
    | undefined;
  /** The shortest reference route. */
  shortestRoute:
    | CustomRoute
    | undefined;
  /** Fallback info for custom routes. */
  fallbackInfo: ComputeCustomRoutesResponse_FallbackInfo | undefined;
}

/**
 * Encapsulates fallback info for ComputeCustomRoutes. ComputeCustomRoutes
 * performs two types of fallbacks:
 *
 * 1. If it cannot compute the route using the routing_preference requested by
 * the customer, it will fallback to another routing mode. In this case
 * fallback_routing_mode and routing_mode_fallback_reason are used to
 * communicate the fallback routing mode used, as well as the reason for
 * fallback.
 *
 * 2. If it cannot compute a 'best' route for the route objective specified by
 * the customer, it might fallback to another objective.
 * fallback_route_objective is used to communicate the fallback route
 * objective.
 */
export interface ComputeCustomRoutesResponse_FallbackInfo {
  /**
   * Routing mode used for the response. If fallback was triggered, the mode
   * may be different from routing preference set in the original client
   * request.
   */
  routingMode: FallbackRoutingMode;
  /**
   * The reason why fallback response was used instead of the original
   * response.
   * This field is only populated when the fallback mode is triggered and
   * the fallback response is returned.
   */
  routingModeReason: FallbackReason;
  /**
   * The route objective used for the response. If fallback was triggered, the
   * objective may be different from the route objective provided in the
   * original client request.
   */
  routeObjective: ComputeCustomRoutesResponse_FallbackInfo_FallbackRouteObjective;
}

/** RouteObjective used for the response. */
export enum ComputeCustomRoutesResponse_FallbackInfo_FallbackRouteObjective {
  /** FALLBACK_ROUTE_OBJECTIVE_UNSPECIFIED - Fallback route objective unspecified. */
  FALLBACK_ROUTE_OBJECTIVE_UNSPECIFIED = 0,
  /**
   * FALLBACK_RATECARD_WITHOUT_TOLL_PRICE_DATA - If customer requests RateCard and sets include_tolls to true, and
   * Google does not have toll price data for the route, the API falls back
   * to RateCard without considering toll price.
   */
  FALLBACK_RATECARD_WITHOUT_TOLL_PRICE_DATA = 1,
  UNRECOGNIZED = -1,
}

export function computeCustomRoutesResponse_FallbackInfo_FallbackRouteObjectiveFromJSON(
  object: any,
): ComputeCustomRoutesResponse_FallbackInfo_FallbackRouteObjective {
  switch (object) {
    case 0:
    case "FALLBACK_ROUTE_OBJECTIVE_UNSPECIFIED":
      return ComputeCustomRoutesResponse_FallbackInfo_FallbackRouteObjective.FALLBACK_ROUTE_OBJECTIVE_UNSPECIFIED;
    case 1:
    case "FALLBACK_RATECARD_WITHOUT_TOLL_PRICE_DATA":
      return ComputeCustomRoutesResponse_FallbackInfo_FallbackRouteObjective.FALLBACK_RATECARD_WITHOUT_TOLL_PRICE_DATA;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ComputeCustomRoutesResponse_FallbackInfo_FallbackRouteObjective.UNRECOGNIZED;
  }
}

export function computeCustomRoutesResponse_FallbackInfo_FallbackRouteObjectiveToJSON(
  object: ComputeCustomRoutesResponse_FallbackInfo_FallbackRouteObjective,
): string {
  switch (object) {
    case ComputeCustomRoutesResponse_FallbackInfo_FallbackRouteObjective.FALLBACK_ROUTE_OBJECTIVE_UNSPECIFIED:
      return "FALLBACK_ROUTE_OBJECTIVE_UNSPECIFIED";
    case ComputeCustomRoutesResponse_FallbackInfo_FallbackRouteObjective.FALLBACK_RATECARD_WITHOUT_TOLL_PRICE_DATA:
      return "FALLBACK_RATECARD_WITHOUT_TOLL_PRICE_DATA";
    case ComputeCustomRoutesResponse_FallbackInfo_FallbackRouteObjective.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseComputeCustomRoutesResponse(): ComputeCustomRoutesResponse {
  return { routes: [], fastestRoute: undefined, shortestRoute: undefined, fallbackInfo: undefined };
}

export const ComputeCustomRoutesResponse: MessageFns<ComputeCustomRoutesResponse> = {
  encode(message: ComputeCustomRoutesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.routes) {
      CustomRoute.encode(v!, writer.uint32(58).fork()).join();
    }
    if (message.fastestRoute !== undefined) {
      CustomRoute.encode(message.fastestRoute, writer.uint32(42).fork()).join();
    }
    if (message.shortestRoute !== undefined) {
      CustomRoute.encode(message.shortestRoute, writer.uint32(50).fork()).join();
    }
    if (message.fallbackInfo !== undefined) {
      ComputeCustomRoutesResponse_FallbackInfo.encode(message.fallbackInfo, writer.uint32(66).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ComputeCustomRoutesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseComputeCustomRoutesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 7:
          if (tag !== 58) {
            break;
          }

          message.routes.push(CustomRoute.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.fastestRoute = CustomRoute.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.shortestRoute = CustomRoute.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.fallbackInfo = ComputeCustomRoutesResponse_FallbackInfo.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ComputeCustomRoutesResponse {
    return {
      routes: globalThis.Array.isArray(object?.routes) ? object.routes.map((e: any) => CustomRoute.fromJSON(e)) : [],
      fastestRoute: isSet(object.fastestRoute) ? CustomRoute.fromJSON(object.fastestRoute) : undefined,
      shortestRoute: isSet(object.shortestRoute) ? CustomRoute.fromJSON(object.shortestRoute) : undefined,
      fallbackInfo: isSet(object.fallbackInfo)
        ? ComputeCustomRoutesResponse_FallbackInfo.fromJSON(object.fallbackInfo)
        : undefined,
    };
  },

  toJSON(message: ComputeCustomRoutesResponse): unknown {
    const obj: any = {};
    if (message.routes?.length) {
      obj.routes = message.routes.map((e) => CustomRoute.toJSON(e));
    }
    if (message.fastestRoute !== undefined) {
      obj.fastestRoute = CustomRoute.toJSON(message.fastestRoute);
    }
    if (message.shortestRoute !== undefined) {
      obj.shortestRoute = CustomRoute.toJSON(message.shortestRoute);
    }
    if (message.fallbackInfo !== undefined) {
      obj.fallbackInfo = ComputeCustomRoutesResponse_FallbackInfo.toJSON(message.fallbackInfo);
    }
    return obj;
  },

  create(base?: DeepPartial<ComputeCustomRoutesResponse>): ComputeCustomRoutesResponse {
    return ComputeCustomRoutesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ComputeCustomRoutesResponse>): ComputeCustomRoutesResponse {
    const message = createBaseComputeCustomRoutesResponse();
    message.routes = object.routes?.map((e) => CustomRoute.fromPartial(e)) || [];
    message.fastestRoute = (object.fastestRoute !== undefined && object.fastestRoute !== null)
      ? CustomRoute.fromPartial(object.fastestRoute)
      : undefined;
    message.shortestRoute = (object.shortestRoute !== undefined && object.shortestRoute !== null)
      ? CustomRoute.fromPartial(object.shortestRoute)
      : undefined;
    message.fallbackInfo = (object.fallbackInfo !== undefined && object.fallbackInfo !== null)
      ? ComputeCustomRoutesResponse_FallbackInfo.fromPartial(object.fallbackInfo)
      : undefined;
    return message;
  },
};

function createBaseComputeCustomRoutesResponse_FallbackInfo(): ComputeCustomRoutesResponse_FallbackInfo {
  return { routingMode: 0, routingModeReason: 0, routeObjective: 0 };
}

export const ComputeCustomRoutesResponse_FallbackInfo: MessageFns<ComputeCustomRoutesResponse_FallbackInfo> = {
  encode(message: ComputeCustomRoutesResponse_FallbackInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.routingMode !== 0) {
      writer.uint32(8).int32(message.routingMode);
    }
    if (message.routingModeReason !== 0) {
      writer.uint32(16).int32(message.routingModeReason);
    }
    if (message.routeObjective !== 0) {
      writer.uint32(24).int32(message.routeObjective);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ComputeCustomRoutesResponse_FallbackInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseComputeCustomRoutesResponse_FallbackInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.routingMode = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.routingModeReason = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.routeObjective = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ComputeCustomRoutesResponse_FallbackInfo {
    return {
      routingMode: isSet(object.routingMode) ? fallbackRoutingModeFromJSON(object.routingMode) : 0,
      routingModeReason: isSet(object.routingModeReason) ? fallbackReasonFromJSON(object.routingModeReason) : 0,
      routeObjective: isSet(object.routeObjective)
        ? computeCustomRoutesResponse_FallbackInfo_FallbackRouteObjectiveFromJSON(object.routeObjective)
        : 0,
    };
  },

  toJSON(message: ComputeCustomRoutesResponse_FallbackInfo): unknown {
    const obj: any = {};
    if (message.routingMode !== 0) {
      obj.routingMode = fallbackRoutingModeToJSON(message.routingMode);
    }
    if (message.routingModeReason !== 0) {
      obj.routingModeReason = fallbackReasonToJSON(message.routingModeReason);
    }
    if (message.routeObjective !== 0) {
      obj.routeObjective = computeCustomRoutesResponse_FallbackInfo_FallbackRouteObjectiveToJSON(
        message.routeObjective,
      );
    }
    return obj;
  },

  create(base?: DeepPartial<ComputeCustomRoutesResponse_FallbackInfo>): ComputeCustomRoutesResponse_FallbackInfo {
    return ComputeCustomRoutesResponse_FallbackInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ComputeCustomRoutesResponse_FallbackInfo>): ComputeCustomRoutesResponse_FallbackInfo {
    const message = createBaseComputeCustomRoutesResponse_FallbackInfo();
    message.routingMode = object.routingMode ?? 0;
    message.routingModeReason = object.routingModeReason ?? 0;
    message.routeObjective = object.routeObjective ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
