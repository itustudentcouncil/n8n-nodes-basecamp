// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/maps/routes/v1/route_matrix_element.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Duration } from "../../../protobuf/duration.js";
import { Status } from "../../../rpc/status.js";
import { FallbackInfo } from "./fallback_info.js";
import { RouteTravelAdvisory } from "./route.js";

export const protobufPackage = "google.maps.routes.v1";

/** The condition of the route being returned. */
export enum RouteMatrixElementCondition {
  /** ROUTE_MATRIX_ELEMENT_CONDITION_UNSPECIFIED - Only used when the `status` of the element is not OK. */
  ROUTE_MATRIX_ELEMENT_CONDITION_UNSPECIFIED = 0,
  /**
   * ROUTE_EXISTS - A route was found, and the corresponding information was filled out for the
   * element.
   */
  ROUTE_EXISTS = 1,
  /**
   * ROUTE_NOT_FOUND - No route could be found. Fields containing route information, such as
   * `distance_meters` or `duration`, will not be filled out in the element.
   */
  ROUTE_NOT_FOUND = 2,
  UNRECOGNIZED = -1,
}

export function routeMatrixElementConditionFromJSON(object: any): RouteMatrixElementCondition {
  switch (object) {
    case 0:
    case "ROUTE_MATRIX_ELEMENT_CONDITION_UNSPECIFIED":
      return RouteMatrixElementCondition.ROUTE_MATRIX_ELEMENT_CONDITION_UNSPECIFIED;
    case 1:
    case "ROUTE_EXISTS":
      return RouteMatrixElementCondition.ROUTE_EXISTS;
    case 2:
    case "ROUTE_NOT_FOUND":
      return RouteMatrixElementCondition.ROUTE_NOT_FOUND;
    case -1:
    case "UNRECOGNIZED":
    default:
      return RouteMatrixElementCondition.UNRECOGNIZED;
  }
}

export function routeMatrixElementConditionToJSON(object: RouteMatrixElementCondition): string {
  switch (object) {
    case RouteMatrixElementCondition.ROUTE_MATRIX_ELEMENT_CONDITION_UNSPECIFIED:
      return "ROUTE_MATRIX_ELEMENT_CONDITION_UNSPECIFIED";
    case RouteMatrixElementCondition.ROUTE_EXISTS:
      return "ROUTE_EXISTS";
    case RouteMatrixElementCondition.ROUTE_NOT_FOUND:
      return "ROUTE_NOT_FOUND";
    case RouteMatrixElementCondition.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * Encapsulates route information computed for an origin/destination pair in the
 * ComputeRouteMatrix API. This proto can be streamed to the client.
 */
export interface RouteMatrixElement {
  /** Zero-based index of the origin in the request. */
  originIndex: number;
  /** Zero-based index of the destination in the request. */
  destinationIndex: number;
  /** Error status code for this element. */
  status:
    | Status
    | undefined;
  /** Indicates whether the route was found or not. Independent of status. */
  condition: RouteMatrixElementCondition;
  /** The travel distance of the route, in meters. */
  distanceMeters: number;
  /**
   * The length of time needed to navigate the route. If you set the
   * `routing_preference` to `TRAFFIC_UNAWARE`, then this value is the same as
   * `static_duration`. If you set the `routing_preference` to either
   * `TRAFFIC_AWARE` or `TRAFFIC_AWARE_OPTIMAL`, then this value is calculated
   * taking traffic conditions into account.
   */
  duration:
    | Duration
    | undefined;
  /**
   * The duration of traveling through the route without taking traffic
   * conditions into consideration.
   */
  staticDuration:
    | Duration
    | undefined;
  /**
   * Additional information about the route. For example: restriction
   * information and toll information
   */
  travelAdvisory:
    | RouteTravelAdvisory
    | undefined;
  /**
   * In some cases when the server is not able to compute the route with the
   * given preferences for this particular origin/destination pair, it may
   * fall back to using a different mode of computation. When fallback mode is
   * used, this field contains detailed information about the fallback response.
   * Otherwise this field is unset.
   */
  fallbackInfo: FallbackInfo | undefined;
}

function createBaseRouteMatrixElement(): RouteMatrixElement {
  return {
    originIndex: 0,
    destinationIndex: 0,
    status: undefined,
    condition: 0,
    distanceMeters: 0,
    duration: undefined,
    staticDuration: undefined,
    travelAdvisory: undefined,
    fallbackInfo: undefined,
  };
}

export const RouteMatrixElement: MessageFns<RouteMatrixElement> = {
  encode(message: RouteMatrixElement, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.originIndex !== 0) {
      writer.uint32(8).int32(message.originIndex);
    }
    if (message.destinationIndex !== 0) {
      writer.uint32(16).int32(message.destinationIndex);
    }
    if (message.status !== undefined) {
      Status.encode(message.status, writer.uint32(26).fork()).join();
    }
    if (message.condition !== 0) {
      writer.uint32(72).int32(message.condition);
    }
    if (message.distanceMeters !== 0) {
      writer.uint32(32).int32(message.distanceMeters);
    }
    if (message.duration !== undefined) {
      Duration.encode(message.duration, writer.uint32(42).fork()).join();
    }
    if (message.staticDuration !== undefined) {
      Duration.encode(message.staticDuration, writer.uint32(50).fork()).join();
    }
    if (message.travelAdvisory !== undefined) {
      RouteTravelAdvisory.encode(message.travelAdvisory, writer.uint32(58).fork()).join();
    }
    if (message.fallbackInfo !== undefined) {
      FallbackInfo.encode(message.fallbackInfo, writer.uint32(66).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RouteMatrixElement {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRouteMatrixElement();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.originIndex = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.destinationIndex = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.status = Status.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.condition = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.distanceMeters = reader.int32();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.duration = Duration.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.staticDuration = Duration.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.travelAdvisory = RouteTravelAdvisory.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.fallbackInfo = FallbackInfo.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RouteMatrixElement {
    return {
      originIndex: isSet(object.originIndex) ? globalThis.Number(object.originIndex) : 0,
      destinationIndex: isSet(object.destinationIndex) ? globalThis.Number(object.destinationIndex) : 0,
      status: isSet(object.status) ? Status.fromJSON(object.status) : undefined,
      condition: isSet(object.condition) ? routeMatrixElementConditionFromJSON(object.condition) : 0,
      distanceMeters: isSet(object.distanceMeters) ? globalThis.Number(object.distanceMeters) : 0,
      duration: isSet(object.duration) ? Duration.fromJSON(object.duration) : undefined,
      staticDuration: isSet(object.staticDuration) ? Duration.fromJSON(object.staticDuration) : undefined,
      travelAdvisory: isSet(object.travelAdvisory) ? RouteTravelAdvisory.fromJSON(object.travelAdvisory) : undefined,
      fallbackInfo: isSet(object.fallbackInfo) ? FallbackInfo.fromJSON(object.fallbackInfo) : undefined,
    };
  },

  toJSON(message: RouteMatrixElement): unknown {
    const obj: any = {};
    if (message.originIndex !== 0) {
      obj.originIndex = Math.round(message.originIndex);
    }
    if (message.destinationIndex !== 0) {
      obj.destinationIndex = Math.round(message.destinationIndex);
    }
    if (message.status !== undefined) {
      obj.status = Status.toJSON(message.status);
    }
    if (message.condition !== 0) {
      obj.condition = routeMatrixElementConditionToJSON(message.condition);
    }
    if (message.distanceMeters !== 0) {
      obj.distanceMeters = Math.round(message.distanceMeters);
    }
    if (message.duration !== undefined) {
      obj.duration = Duration.toJSON(message.duration);
    }
    if (message.staticDuration !== undefined) {
      obj.staticDuration = Duration.toJSON(message.staticDuration);
    }
    if (message.travelAdvisory !== undefined) {
      obj.travelAdvisory = RouteTravelAdvisory.toJSON(message.travelAdvisory);
    }
    if (message.fallbackInfo !== undefined) {
      obj.fallbackInfo = FallbackInfo.toJSON(message.fallbackInfo);
    }
    return obj;
  },

  create(base?: DeepPartial<RouteMatrixElement>): RouteMatrixElement {
    return RouteMatrixElement.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RouteMatrixElement>): RouteMatrixElement {
    const message = createBaseRouteMatrixElement();
    message.originIndex = object.originIndex ?? 0;
    message.destinationIndex = object.destinationIndex ?? 0;
    message.status = (object.status !== undefined && object.status !== null)
      ? Status.fromPartial(object.status)
      : undefined;
    message.condition = object.condition ?? 0;
    message.distanceMeters = object.distanceMeters ?? 0;
    message.duration = (object.duration !== undefined && object.duration !== null)
      ? Duration.fromPartial(object.duration)
      : undefined;
    message.staticDuration = (object.staticDuration !== undefined && object.staticDuration !== null)
      ? Duration.fromPartial(object.staticDuration)
      : undefined;
    message.travelAdvisory = (object.travelAdvisory !== undefined && object.travelAdvisory !== null)
      ? RouteTravelAdvisory.fromPartial(object.travelAdvisory)
      : undefined;
    message.fallbackInfo = (object.fallbackInfo !== undefined && object.fallbackInfo !== null)
      ? FallbackInfo.fromPartial(object.fallbackInfo)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
