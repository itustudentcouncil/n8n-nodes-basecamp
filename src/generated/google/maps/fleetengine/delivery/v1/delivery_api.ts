// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/maps/fleetengine/delivery/v1/delivery_api.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Viewport } from "../../../../geo/type/viewport.js";
import { FieldMask } from "../../../../protobuf/field_mask.js";
import { DeliveryVehicle } from "./delivery_vehicles.js";
import { DeliveryRequestHeader } from "./header.js";
import { TaskTrackingInfo } from "./task_tracking_info.js";
import { Task } from "./tasks.js";

export const protobufPackage = "maps.fleetengine.delivery.v1";

/** The `CreateDeliveryVehicle` request message. */
export interface CreateDeliveryVehicleRequest {
  /** Optional. The standard Delivery API request header. */
  header:
    | DeliveryRequestHeader
    | undefined;
  /**
   * Required. Must be in the format `providers/{provider}`. The provider must
   * be the Google Cloud Project ID. For example, `sample-cloud-project`.
   */
  parent: string;
  /**
   * Required. The Delivery Vehicle ID must be unique and subject to the
   * following restrictions:
   *
   * * Must be a valid Unicode string.
   * * Limited to a maximum length of 64 characters.
   * * Normalized according to [Unicode Normalization Form C]
   * (http://www.unicode.org/reports/tr15/).
   * * May not contain any of the following ASCII characters: '/', ':', '?',
   * ',', or '#'.
   */
  deliveryVehicleId: string;
  /**
   * Required. The `DeliveryVehicle` entity to create. When creating a new
   * delivery vehicle, you may set the following optional fields:
   *
   * * type
   * * last_location
   * * attributes
   *
   * Note: The DeliveryVehicle's `name` field is ignored. All other
   * DeliveryVehicle fields must not be set; otherwise, an error is returned.
   */
  deliveryVehicle: DeliveryVehicle | undefined;
}

/** The `GetDeliveryVehicle` request message. */
export interface GetDeliveryVehicleRequest {
  /** Optional. The standard Delivery API request header. */
  header:
    | DeliveryRequestHeader
    | undefined;
  /**
   * Required. Must be in the format
   * `providers/{provider}/deliveryVehicles/{delivery_vehicle}`.
   * The `provider` must be the Google Cloud Project ID. For example,
   * `sample-cloud-project`.
   */
  name: string;
}

/** The `ListDeliveryVehicles` request message. */
export interface ListDeliveryVehiclesRequest {
  /** Optional. The standard Delivery API request header. */
  header:
    | DeliveryRequestHeader
    | undefined;
  /**
   * Required. Must be in the format `providers/{provider}`.
   * The `provider` must be the Google Cloud Project ID.
   * For example, `sample-cloud-project`.
   */
  parent: string;
  /**
   * Optional. The maximum number of vehicles to return. The service may return
   * fewer than this number. If you don't specify this number, then the server
   * determines the number of results to return.
   */
  pageSize: number;
  /**
   * Optional. A page token, received from a previous `ListDeliveryVehicles`
   * call. You must provide this in order to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to `ListDeliveryVehicles`
   * must match the call that provided the page token.
   */
  pageToken: string;
  /**
   * Optional. A filter query to apply when listing delivery vehicles. See
   * http://aip.dev/160 for examples of the filter syntax. If you don't specify
   * a value, or if you specify an empty string for the filter, then all
   * delivery vehicles are returned.
   *
   * Note that the only queries supported for `ListDeliveryVehicles` are
   * on vehicle attributes (for example, `attributes.<key> = <value>` or
   * `attributes.<key1> = <value1> AND attributes.<key2> = <value2>`). Also, all
   * attributes are stored as strings, so the only supported comparisons against
   * attributes are string comparisons. In order to compare against number or
   * boolean values, the values must be explicitly quoted to be treated as
   * strings (for example, `attributes.<key> = "10"` or
   * `attributes.<key> = "true"`).
   *
   * The maximum number of restrictions allowed in a filter query is 50. A
   * restriction is a part of the query of the form
   * `attribute.<KEY> <COMPARATOR> <VALUE>`, for example `attributes.foo = bar`
   * is 1 restriction.
   */
  filter: string;
  /**
   * Optional. A filter that limits the vehicles returned to those whose last
   * known location was in the rectangular area defined by the viewport.
   */
  viewport: Viewport | undefined;
}

/** The `ListDeliveryVehicles` response message. */
export interface ListDeliveryVehiclesResponse {
  /**
   * The set of delivery vehicles that meet the requested filtering criteria.
   * When no filter is specified, the request returns all delivery vehicles. A
   * successful response can also be empty. An empty response indicates that no
   * delivery vehicles were found meeting the requested filter criteria.
   */
  deliveryVehicles: DeliveryVehicle[];
  /**
   * You can pass this token in the `ListDeliveryVehiclesRequest` to continue to
   * list results. When all of the results are returned, this field won't be in
   * the response, or it will be an empty string.
   */
  nextPageToken: string;
  /**
   * The total number of delivery vehicles that match the request criteria,
   * across all pages.
   */
  totalSize: Long;
}

/** The `UpdateDeliveryVehicle` request message. */
export interface UpdateDeliveryVehicleRequest {
  /** Optional. The standard Delivery API request header. */
  header:
    | DeliveryRequestHeader
    | undefined;
  /**
   * Required. The `DeliveryVehicle` entity update to apply.
   * Note: You cannot update the name of the `DeliveryVehicle`.
   */
  deliveryVehicle:
    | DeliveryVehicle
    | undefined;
  /**
   * Required. A field mask that indicates which `DeliveryVehicle` fields to
   * update. Note that the update_mask must contain at least one field.
   *
   * This is a comma-separated list of fully qualified names of fields. Example:
   * `"remaining_vehicle_journey_segments"`.
   */
  updateMask: string[] | undefined;
}

/** The `BatchCreateTask` request message. */
export interface BatchCreateTasksRequest {
  /**
   * Optional. The standard Delivery API request header.
   * Note: If you set this field, then the header field in the
   * `CreateTaskRequest` messages must either be empty, or it must match this
   * field.
   */
  header:
    | DeliveryRequestHeader
    | undefined;
  /**
   * Required. The parent resource shared by all tasks. This value must be in
   * the format `providers/{provider}`. The `provider` must be the Google Cloud
   * Project ID. For example, `sample-cloud-project`. The parent field in the
   * `CreateTaskRequest` messages must either  be empty, or it must match this
   * field.
   */
  parent: string;
  /**
   * Required. The request message that specifies the resources to create.
   * Note: You can create a maximum of 500 tasks in a batch.
   */
  requests: CreateTaskRequest[];
}

/** The `BatchCreateTask` response message. */
export interface BatchCreateTasksResponse {
  /** The created Tasks. */
  tasks: Task[];
}

/** The `CreateTask` request message. */
export interface CreateTaskRequest {
  /** Optional. The standard Delivery API request header. */
  header:
    | DeliveryRequestHeader
    | undefined;
  /**
   * Required. Must be in the format `providers/{provider}`. The `provider` must
   * be the Google Cloud Project ID. For example, `sample-cloud-project`.
   */
  parent: string;
  /**
   * Required. The Task ID must be unique, but it should be not a shipment
   * tracking ID. To store a shipment tracking ID, use the `tracking_id` field.
   * Note that multiple tasks can have the same `tracking_id`. Task IDs are
   * subject to the following restrictions:
   *
   * * Must be a valid Unicode string.
   * * Limited to a maximum length of 64 characters.
   * * Normalized according to [Unicode Normalization Form C]
   * (http://www.unicode.org/reports/tr15/).
   * * May not contain any of the following ASCII characters: '/', ':', '?',
   * ',', or '#'.
   */
  taskId: string;
  /**
   * Required. The Task entity to create.
   * When creating a Task, the following fields are required:
   *
   * * `type`
   * * `state` (must be set to `OPEN`)
   * * `tracking_id` (must not be set for `UNAVAILABLE` or `SCHEDULED_STOP`
   * tasks, but required for all other task types)
   * * `planned_location` (optional for `UNAVAILABLE` tasks)
   * * `task_duration`
   *
   * Note: The Task's `name` field is ignored. All other Task fields must not be
   * set; otherwise, an error is returned.
   */
  task: Task | undefined;
}

/** The `GetTask` request message. */
export interface GetTaskRequest {
  /** Optional. The standard Delivery API request header. */
  header:
    | DeliveryRequestHeader
    | undefined;
  /**
   * Required. Must be in the format `providers/{provider}/tasks/{task}`. The
   * `provider` must be the Google Cloud Project ID. For example,
   * `sample-cloud-project`.
   */
  name: string;
}

/** The `UpdateTask` request message. */
export interface UpdateTaskRequest {
  /** Optional. The standard Delivery API request header. */
  header:
    | DeliveryRequestHeader
    | undefined;
  /**
   * Required. The Task associated with the update.
   * The following fields are maintained by Fleet Engine. Do not update
   * them using `Task.update`.
   *
   *   * `last_location`.
   *   * `last_location_snappable`.
   *   * `name`.
   *   * `remaining_vehicle_journey_segments`.
   *   * `task_outcome_location_source`.
   *
   * Note: You cannot change the value of `task_outcome` once you set it.
   *
   * If the Task has been assigned to a delivery vehicle, then don't set the
   * Task state to CLOSED using `Task.update`. Instead, remove the `VehicleStop`
   * that contains the Task from the delivery vehicle, which automatically sets
   * the Task state to CLOSED.
   */
  task:
    | Task
    | undefined;
  /**
   * Required. The field mask that indicates which Task fields to update.
   * Note: The `update_mask` must contain at least one field.
   *
   * This is a comma-separated list of fully qualified names of fields. Example:
   * `"task_outcome,task_outcome_time,task_outcome_location"`.
   */
  updateMask: string[] | undefined;
}

/** The `ListTasks` request message. */
export interface ListTasksRequest {
  /** Optional. The standard Delivery API request header. */
  header:
    | DeliveryRequestHeader
    | undefined;
  /**
   * Required. Must be in the format `providers/{provider}`.
   * The `provider` must be the Google Cloud Project ID. For example,
   * `sample-cloud-project`.
   */
  parent: string;
  /**
   * Optional. The maximum number of Tasks to return. The service may return
   * fewer than this value. If you don't specify this value, then the server
   * determines the number of results to return.
   */
  pageSize: number;
  /**
   * Optional. A page token received from a previous `ListTasks` call.
   * You can provide this to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to `ListTasks` must match
   * the call that provided the page token.
   */
  pageToken: string;
  /**
   * Optional. A filter query to apply when listing Tasks. See
   * http://aip.dev/160 for examples of filter syntax. If you don't specify a
   * value, or if you filter on an empty string, then all Tasks are returned.
   * For information about the Task properties that you can filter on, see [List
   * tasks](https://developers.google.com/maps/documentation/mobility/fleet-engine/journeys/tasks/find-tasks#filter_listed_tasks).
   */
  filter: string;
}

/**
 * The `ListTasks` response that contains the set of Tasks that meet the filter
 * criteria in the `ListTasksRequest`.
 */
export interface ListTasksResponse {
  /**
   * The set of Tasks that meet the requested filtering criteria. When no filter
   * is specified, the request returns all tasks. A successful response can also
   * be empty. An empty response indicates that no Tasks were found meeting the
   * requested filter criteria.
   */
  tasks: Task[];
  /**
   * Pass this token in the `ListTasksRequest` to continue to list results.
   * If all results have been returned, then this field is either an empty
   * string, or it doesn't appear in the response.
   */
  nextPageToken: string;
  /**
   * The total number of Tasks that match the request criteria, across all
   * pages.
   */
  totalSize: Long;
}

/** The `GetTaskTrackingInfoRequest` request message. */
export interface GetTaskTrackingInfoRequest {
  /** Optional. The standard Delivery API request header. */
  header:
    | DeliveryRequestHeader
    | undefined;
  /**
   * Required. Must be in the format
   * `providers/{provider}/taskTrackingInfo/{tracking_id}`. The `provider`
   * must be the Google Cloud Project ID, and the `tracking_id` must be the
   * tracking ID associated with the task. An example name can be
   * `providers/sample-cloud-project/taskTrackingInfo/sample-tracking-id`.
   */
  name: string;
}

function createBaseCreateDeliveryVehicleRequest(): CreateDeliveryVehicleRequest {
  return { header: undefined, parent: "", deliveryVehicleId: "", deliveryVehicle: undefined };
}

export const CreateDeliveryVehicleRequest: MessageFns<CreateDeliveryVehicleRequest> = {
  encode(message: CreateDeliveryVehicleRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.header !== undefined) {
      DeliveryRequestHeader.encode(message.header, writer.uint32(10).fork()).join();
    }
    if (message.parent !== "") {
      writer.uint32(26).string(message.parent);
    }
    if (message.deliveryVehicleId !== "") {
      writer.uint32(34).string(message.deliveryVehicleId);
    }
    if (message.deliveryVehicle !== undefined) {
      DeliveryVehicle.encode(message.deliveryVehicle, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateDeliveryVehicleRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateDeliveryVehicleRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.header = DeliveryRequestHeader.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.deliveryVehicleId = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.deliveryVehicle = DeliveryVehicle.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateDeliveryVehicleRequest {
    return {
      header: isSet(object.header) ? DeliveryRequestHeader.fromJSON(object.header) : undefined,
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      deliveryVehicleId: isSet(object.deliveryVehicleId) ? globalThis.String(object.deliveryVehicleId) : "",
      deliveryVehicle: isSet(object.deliveryVehicle) ? DeliveryVehicle.fromJSON(object.deliveryVehicle) : undefined,
    };
  },

  toJSON(message: CreateDeliveryVehicleRequest): unknown {
    const obj: any = {};
    if (message.header !== undefined) {
      obj.header = DeliveryRequestHeader.toJSON(message.header);
    }
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.deliveryVehicleId !== "") {
      obj.deliveryVehicleId = message.deliveryVehicleId;
    }
    if (message.deliveryVehicle !== undefined) {
      obj.deliveryVehicle = DeliveryVehicle.toJSON(message.deliveryVehicle);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateDeliveryVehicleRequest>): CreateDeliveryVehicleRequest {
    return CreateDeliveryVehicleRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateDeliveryVehicleRequest>): CreateDeliveryVehicleRequest {
    const message = createBaseCreateDeliveryVehicleRequest();
    message.header = (object.header !== undefined && object.header !== null)
      ? DeliveryRequestHeader.fromPartial(object.header)
      : undefined;
    message.parent = object.parent ?? "";
    message.deliveryVehicleId = object.deliveryVehicleId ?? "";
    message.deliveryVehicle = (object.deliveryVehicle !== undefined && object.deliveryVehicle !== null)
      ? DeliveryVehicle.fromPartial(object.deliveryVehicle)
      : undefined;
    return message;
  },
};

function createBaseGetDeliveryVehicleRequest(): GetDeliveryVehicleRequest {
  return { header: undefined, name: "" };
}

export const GetDeliveryVehicleRequest: MessageFns<GetDeliveryVehicleRequest> = {
  encode(message: GetDeliveryVehicleRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.header !== undefined) {
      DeliveryRequestHeader.encode(message.header, writer.uint32(10).fork()).join();
    }
    if (message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetDeliveryVehicleRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDeliveryVehicleRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.header = DeliveryRequestHeader.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDeliveryVehicleRequest {
    return {
      header: isSet(object.header) ? DeliveryRequestHeader.fromJSON(object.header) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
    };
  },

  toJSON(message: GetDeliveryVehicleRequest): unknown {
    const obj: any = {};
    if (message.header !== undefined) {
      obj.header = DeliveryRequestHeader.toJSON(message.header);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetDeliveryVehicleRequest>): GetDeliveryVehicleRequest {
    return GetDeliveryVehicleRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetDeliveryVehicleRequest>): GetDeliveryVehicleRequest {
    const message = createBaseGetDeliveryVehicleRequest();
    message.header = (object.header !== undefined && object.header !== null)
      ? DeliveryRequestHeader.fromPartial(object.header)
      : undefined;
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListDeliveryVehiclesRequest(): ListDeliveryVehiclesRequest {
  return { header: undefined, parent: "", pageSize: 0, pageToken: "", filter: "", viewport: undefined };
}

export const ListDeliveryVehiclesRequest: MessageFns<ListDeliveryVehiclesRequest> = {
  encode(message: ListDeliveryVehiclesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.header !== undefined) {
      DeliveryRequestHeader.encode(message.header, writer.uint32(10).fork()).join();
    }
    if (message.parent !== "") {
      writer.uint32(26).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(32).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(42).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(50).string(message.filter);
    }
    if (message.viewport !== undefined) {
      Viewport.encode(message.viewport, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListDeliveryVehiclesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListDeliveryVehiclesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.header = DeliveryRequestHeader.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.viewport = Viewport.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListDeliveryVehiclesRequest {
    return {
      header: isSet(object.header) ? DeliveryRequestHeader.fromJSON(object.header) : undefined,
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      viewport: isSet(object.viewport) ? Viewport.fromJSON(object.viewport) : undefined,
    };
  },

  toJSON(message: ListDeliveryVehiclesRequest): unknown {
    const obj: any = {};
    if (message.header !== undefined) {
      obj.header = DeliveryRequestHeader.toJSON(message.header);
    }
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.viewport !== undefined) {
      obj.viewport = Viewport.toJSON(message.viewport);
    }
    return obj;
  },

  create(base?: DeepPartial<ListDeliveryVehiclesRequest>): ListDeliveryVehiclesRequest {
    return ListDeliveryVehiclesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListDeliveryVehiclesRequest>): ListDeliveryVehiclesRequest {
    const message = createBaseListDeliveryVehiclesRequest();
    message.header = (object.header !== undefined && object.header !== null)
      ? DeliveryRequestHeader.fromPartial(object.header)
      : undefined;
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.viewport = (object.viewport !== undefined && object.viewport !== null)
      ? Viewport.fromPartial(object.viewport)
      : undefined;
    return message;
  },
};

function createBaseListDeliveryVehiclesResponse(): ListDeliveryVehiclesResponse {
  return { deliveryVehicles: [], nextPageToken: "", totalSize: Long.ZERO };
}

export const ListDeliveryVehiclesResponse: MessageFns<ListDeliveryVehiclesResponse> = {
  encode(message: ListDeliveryVehiclesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.deliveryVehicles) {
      DeliveryVehicle.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    if (!message.totalSize.equals(Long.ZERO)) {
      writer.uint32(24).int64(message.totalSize.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListDeliveryVehiclesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListDeliveryVehiclesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.deliveryVehicles.push(DeliveryVehicle.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.totalSize = Long.fromString(reader.int64().toString());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListDeliveryVehiclesResponse {
    return {
      deliveryVehicles: globalThis.Array.isArray(object?.deliveryVehicles)
        ? object.deliveryVehicles.map((e: any) => DeliveryVehicle.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      totalSize: isSet(object.totalSize) ? Long.fromValue(object.totalSize) : Long.ZERO,
    };
  },

  toJSON(message: ListDeliveryVehiclesResponse): unknown {
    const obj: any = {};
    if (message.deliveryVehicles?.length) {
      obj.deliveryVehicles = message.deliveryVehicles.map((e) => DeliveryVehicle.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (!message.totalSize.equals(Long.ZERO)) {
      obj.totalSize = (message.totalSize || Long.ZERO).toString();
    }
    return obj;
  },

  create(base?: DeepPartial<ListDeliveryVehiclesResponse>): ListDeliveryVehiclesResponse {
    return ListDeliveryVehiclesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListDeliveryVehiclesResponse>): ListDeliveryVehiclesResponse {
    const message = createBaseListDeliveryVehiclesResponse();
    message.deliveryVehicles = object.deliveryVehicles?.map((e) => DeliveryVehicle.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.totalSize = (object.totalSize !== undefined && object.totalSize !== null)
      ? Long.fromValue(object.totalSize)
      : Long.ZERO;
    return message;
  },
};

function createBaseUpdateDeliveryVehicleRequest(): UpdateDeliveryVehicleRequest {
  return { header: undefined, deliveryVehicle: undefined, updateMask: undefined };
}

export const UpdateDeliveryVehicleRequest: MessageFns<UpdateDeliveryVehicleRequest> = {
  encode(message: UpdateDeliveryVehicleRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.header !== undefined) {
      DeliveryRequestHeader.encode(message.header, writer.uint32(10).fork()).join();
    }
    if (message.deliveryVehicle !== undefined) {
      DeliveryVehicle.encode(message.deliveryVehicle, writer.uint32(26).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateDeliveryVehicleRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateDeliveryVehicleRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.header = DeliveryRequestHeader.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.deliveryVehicle = DeliveryVehicle.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateDeliveryVehicleRequest {
    return {
      header: isSet(object.header) ? DeliveryRequestHeader.fromJSON(object.header) : undefined,
      deliveryVehicle: isSet(object.deliveryVehicle) ? DeliveryVehicle.fromJSON(object.deliveryVehicle) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateDeliveryVehicleRequest): unknown {
    const obj: any = {};
    if (message.header !== undefined) {
      obj.header = DeliveryRequestHeader.toJSON(message.header);
    }
    if (message.deliveryVehicle !== undefined) {
      obj.deliveryVehicle = DeliveryVehicle.toJSON(message.deliveryVehicle);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateDeliveryVehicleRequest>): UpdateDeliveryVehicleRequest {
    return UpdateDeliveryVehicleRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateDeliveryVehicleRequest>): UpdateDeliveryVehicleRequest {
    const message = createBaseUpdateDeliveryVehicleRequest();
    message.header = (object.header !== undefined && object.header !== null)
      ? DeliveryRequestHeader.fromPartial(object.header)
      : undefined;
    message.deliveryVehicle = (object.deliveryVehicle !== undefined && object.deliveryVehicle !== null)
      ? DeliveryVehicle.fromPartial(object.deliveryVehicle)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseBatchCreateTasksRequest(): BatchCreateTasksRequest {
  return { header: undefined, parent: "", requests: [] };
}

export const BatchCreateTasksRequest: MessageFns<BatchCreateTasksRequest> = {
  encode(message: BatchCreateTasksRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.header !== undefined) {
      DeliveryRequestHeader.encode(message.header, writer.uint32(10).fork()).join();
    }
    if (message.parent !== "") {
      writer.uint32(26).string(message.parent);
    }
    for (const v of message.requests) {
      CreateTaskRequest.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BatchCreateTasksRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBatchCreateTasksRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.header = DeliveryRequestHeader.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.requests.push(CreateTaskRequest.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BatchCreateTasksRequest {
    return {
      header: isSet(object.header) ? DeliveryRequestHeader.fromJSON(object.header) : undefined,
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      requests: globalThis.Array.isArray(object?.requests)
        ? object.requests.map((e: any) => CreateTaskRequest.fromJSON(e))
        : [],
    };
  },

  toJSON(message: BatchCreateTasksRequest): unknown {
    const obj: any = {};
    if (message.header !== undefined) {
      obj.header = DeliveryRequestHeader.toJSON(message.header);
    }
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.requests?.length) {
      obj.requests = message.requests.map((e) => CreateTaskRequest.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<BatchCreateTasksRequest>): BatchCreateTasksRequest {
    return BatchCreateTasksRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BatchCreateTasksRequest>): BatchCreateTasksRequest {
    const message = createBaseBatchCreateTasksRequest();
    message.header = (object.header !== undefined && object.header !== null)
      ? DeliveryRequestHeader.fromPartial(object.header)
      : undefined;
    message.parent = object.parent ?? "";
    message.requests = object.requests?.map((e) => CreateTaskRequest.fromPartial(e)) || [];
    return message;
  },
};

function createBaseBatchCreateTasksResponse(): BatchCreateTasksResponse {
  return { tasks: [] };
}

export const BatchCreateTasksResponse: MessageFns<BatchCreateTasksResponse> = {
  encode(message: BatchCreateTasksResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.tasks) {
      Task.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BatchCreateTasksResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBatchCreateTasksResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.tasks.push(Task.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BatchCreateTasksResponse {
    return { tasks: globalThis.Array.isArray(object?.tasks) ? object.tasks.map((e: any) => Task.fromJSON(e)) : [] };
  },

  toJSON(message: BatchCreateTasksResponse): unknown {
    const obj: any = {};
    if (message.tasks?.length) {
      obj.tasks = message.tasks.map((e) => Task.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<BatchCreateTasksResponse>): BatchCreateTasksResponse {
    return BatchCreateTasksResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BatchCreateTasksResponse>): BatchCreateTasksResponse {
    const message = createBaseBatchCreateTasksResponse();
    message.tasks = object.tasks?.map((e) => Task.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCreateTaskRequest(): CreateTaskRequest {
  return { header: undefined, parent: "", taskId: "", task: undefined };
}

export const CreateTaskRequest: MessageFns<CreateTaskRequest> = {
  encode(message: CreateTaskRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.header !== undefined) {
      DeliveryRequestHeader.encode(message.header, writer.uint32(10).fork()).join();
    }
    if (message.parent !== "") {
      writer.uint32(26).string(message.parent);
    }
    if (message.taskId !== "") {
      writer.uint32(42).string(message.taskId);
    }
    if (message.task !== undefined) {
      Task.encode(message.task, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateTaskRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateTaskRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.header = DeliveryRequestHeader.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.taskId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.task = Task.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateTaskRequest {
    return {
      header: isSet(object.header) ? DeliveryRequestHeader.fromJSON(object.header) : undefined,
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      taskId: isSet(object.taskId) ? globalThis.String(object.taskId) : "",
      task: isSet(object.task) ? Task.fromJSON(object.task) : undefined,
    };
  },

  toJSON(message: CreateTaskRequest): unknown {
    const obj: any = {};
    if (message.header !== undefined) {
      obj.header = DeliveryRequestHeader.toJSON(message.header);
    }
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.taskId !== "") {
      obj.taskId = message.taskId;
    }
    if (message.task !== undefined) {
      obj.task = Task.toJSON(message.task);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateTaskRequest>): CreateTaskRequest {
    return CreateTaskRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateTaskRequest>): CreateTaskRequest {
    const message = createBaseCreateTaskRequest();
    message.header = (object.header !== undefined && object.header !== null)
      ? DeliveryRequestHeader.fromPartial(object.header)
      : undefined;
    message.parent = object.parent ?? "";
    message.taskId = object.taskId ?? "";
    message.task = (object.task !== undefined && object.task !== null) ? Task.fromPartial(object.task) : undefined;
    return message;
  },
};

function createBaseGetTaskRequest(): GetTaskRequest {
  return { header: undefined, name: "" };
}

export const GetTaskRequest: MessageFns<GetTaskRequest> = {
  encode(message: GetTaskRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.header !== undefined) {
      DeliveryRequestHeader.encode(message.header, writer.uint32(10).fork()).join();
    }
    if (message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetTaskRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetTaskRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.header = DeliveryRequestHeader.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetTaskRequest {
    return {
      header: isSet(object.header) ? DeliveryRequestHeader.fromJSON(object.header) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
    };
  },

  toJSON(message: GetTaskRequest): unknown {
    const obj: any = {};
    if (message.header !== undefined) {
      obj.header = DeliveryRequestHeader.toJSON(message.header);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetTaskRequest>): GetTaskRequest {
    return GetTaskRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetTaskRequest>): GetTaskRequest {
    const message = createBaseGetTaskRequest();
    message.header = (object.header !== undefined && object.header !== null)
      ? DeliveryRequestHeader.fromPartial(object.header)
      : undefined;
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpdateTaskRequest(): UpdateTaskRequest {
  return { header: undefined, task: undefined, updateMask: undefined };
}

export const UpdateTaskRequest: MessageFns<UpdateTaskRequest> = {
  encode(message: UpdateTaskRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.header !== undefined) {
      DeliveryRequestHeader.encode(message.header, writer.uint32(10).fork()).join();
    }
    if (message.task !== undefined) {
      Task.encode(message.task, writer.uint32(26).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateTaskRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateTaskRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.header = DeliveryRequestHeader.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.task = Task.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateTaskRequest {
    return {
      header: isSet(object.header) ? DeliveryRequestHeader.fromJSON(object.header) : undefined,
      task: isSet(object.task) ? Task.fromJSON(object.task) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateTaskRequest): unknown {
    const obj: any = {};
    if (message.header !== undefined) {
      obj.header = DeliveryRequestHeader.toJSON(message.header);
    }
    if (message.task !== undefined) {
      obj.task = Task.toJSON(message.task);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateTaskRequest>): UpdateTaskRequest {
    return UpdateTaskRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateTaskRequest>): UpdateTaskRequest {
    const message = createBaseUpdateTaskRequest();
    message.header = (object.header !== undefined && object.header !== null)
      ? DeliveryRequestHeader.fromPartial(object.header)
      : undefined;
    message.task = (object.task !== undefined && object.task !== null) ? Task.fromPartial(object.task) : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseListTasksRequest(): ListTasksRequest {
  return { header: undefined, parent: "", pageSize: 0, pageToken: "", filter: "" };
}

export const ListTasksRequest: MessageFns<ListTasksRequest> = {
  encode(message: ListTasksRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.header !== undefined) {
      DeliveryRequestHeader.encode(message.header, writer.uint32(10).fork()).join();
    }
    if (message.parent !== "") {
      writer.uint32(26).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(32).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(42).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(50).string(message.filter);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListTasksRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListTasksRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.header = DeliveryRequestHeader.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.filter = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListTasksRequest {
    return {
      header: isSet(object.header) ? DeliveryRequestHeader.fromJSON(object.header) : undefined,
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
    };
  },

  toJSON(message: ListTasksRequest): unknown {
    const obj: any = {};
    if (message.header !== undefined) {
      obj.header = DeliveryRequestHeader.toJSON(message.header);
    }
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    return obj;
  },

  create(base?: DeepPartial<ListTasksRequest>): ListTasksRequest {
    return ListTasksRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListTasksRequest>): ListTasksRequest {
    const message = createBaseListTasksRequest();
    message.header = (object.header !== undefined && object.header !== null)
      ? DeliveryRequestHeader.fromPartial(object.header)
      : undefined;
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    return message;
  },
};

function createBaseListTasksResponse(): ListTasksResponse {
  return { tasks: [], nextPageToken: "", totalSize: Long.ZERO };
}

export const ListTasksResponse: MessageFns<ListTasksResponse> = {
  encode(message: ListTasksResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.tasks) {
      Task.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    if (!message.totalSize.equals(Long.ZERO)) {
      writer.uint32(24).int64(message.totalSize.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListTasksResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListTasksResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.tasks.push(Task.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.totalSize = Long.fromString(reader.int64().toString());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListTasksResponse {
    return {
      tasks: globalThis.Array.isArray(object?.tasks) ? object.tasks.map((e: any) => Task.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      totalSize: isSet(object.totalSize) ? Long.fromValue(object.totalSize) : Long.ZERO,
    };
  },

  toJSON(message: ListTasksResponse): unknown {
    const obj: any = {};
    if (message.tasks?.length) {
      obj.tasks = message.tasks.map((e) => Task.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (!message.totalSize.equals(Long.ZERO)) {
      obj.totalSize = (message.totalSize || Long.ZERO).toString();
    }
    return obj;
  },

  create(base?: DeepPartial<ListTasksResponse>): ListTasksResponse {
    return ListTasksResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListTasksResponse>): ListTasksResponse {
    const message = createBaseListTasksResponse();
    message.tasks = object.tasks?.map((e) => Task.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.totalSize = (object.totalSize !== undefined && object.totalSize !== null)
      ? Long.fromValue(object.totalSize)
      : Long.ZERO;
    return message;
  },
};

function createBaseGetTaskTrackingInfoRequest(): GetTaskTrackingInfoRequest {
  return { header: undefined, name: "" };
}

export const GetTaskTrackingInfoRequest: MessageFns<GetTaskTrackingInfoRequest> = {
  encode(message: GetTaskTrackingInfoRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.header !== undefined) {
      DeliveryRequestHeader.encode(message.header, writer.uint32(10).fork()).join();
    }
    if (message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetTaskTrackingInfoRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetTaskTrackingInfoRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.header = DeliveryRequestHeader.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetTaskTrackingInfoRequest {
    return {
      header: isSet(object.header) ? DeliveryRequestHeader.fromJSON(object.header) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
    };
  },

  toJSON(message: GetTaskTrackingInfoRequest): unknown {
    const obj: any = {};
    if (message.header !== undefined) {
      obj.header = DeliveryRequestHeader.toJSON(message.header);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetTaskTrackingInfoRequest>): GetTaskTrackingInfoRequest {
    return GetTaskTrackingInfoRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetTaskTrackingInfoRequest>): GetTaskTrackingInfoRequest {
    const message = createBaseGetTaskTrackingInfoRequest();
    message.header = (object.header !== undefined && object.header !== null)
      ? DeliveryRequestHeader.fromPartial(object.header)
      : undefined;
    message.name = object.name ?? "";
    return message;
  },
};

/** The Last Mile Delivery service. */
export type DeliveryServiceDefinition = typeof DeliveryServiceDefinition;
export const DeliveryServiceDefinition = {
  name: "DeliveryService",
  fullName: "maps.fleetengine.delivery.v1.DeliveryService",
  methods: {
    /** Creates and returns a new `DeliveryVehicle`. */
    createDeliveryVehicle: {
      name: "CreateDeliveryVehicle",
      requestType: CreateDeliveryVehicleRequest,
      requestStream: false,
      responseType: DeliveryVehicle,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              43,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              100,
              101,
              108,
              105,
              118,
              101,
              114,
              121,
              95,
              118,
              101,
              104,
              105,
              99,
              108,
              101,
              44,
              100,
              101,
              108,
              105,
              118,
              101,
              114,
              121,
              95,
              118,
              101,
              104,
              105,
              99,
              108,
              101,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              61,
              58,
              16,
              100,
              101,
              108,
              105,
              118,
              101,
              114,
              121,
              95,
              118,
              101,
              104,
              105,
              99,
              108,
              101,
              34,
              41,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              47,
              42,
              125,
              47,
              100,
              101,
              108,
              105,
              118,
              101,
              114,
              121,
              86,
              101,
              104,
              105,
              99,
              108,
              101,
              115,
            ]),
          ],
          578365834: [
            Buffer.from([
              37,
              18,
              35,
              10,
              6,
              112,
              97,
              114,
              101,
              110,
              116,
              18,
              25,
              123,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              95,
              105,
              100,
              61,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Returns the specified `DeliveryVehicle` instance. */
    getDeliveryVehicle: {
      name: "GetDeliveryVehicle",
      requestType: GetDeliveryVehicleRequest,
      requestStream: false,
      responseType: DeliveryVehicle,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              43,
              18,
              41,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              100,
              101,
              108,
              105,
              118,
              101,
              114,
              121,
              86,
              101,
              104,
              105,
              99,
              108,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
          578365834: [
            Buffer.from([
              35,
              18,
              33,
              10,
              4,
              110,
              97,
              109,
              101,
              18,
              25,
              123,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              95,
              105,
              100,
              61,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Writes updated `DeliveryVehicle` data to Fleet Engine, and assigns
     * `Tasks` to the `DeliveryVehicle`. You cannot update the name of the
     * `DeliveryVehicle`. You *can* update `remaining_vehicle_journey_segments`,
     * but it must contain all of the `VehicleJourneySegment`s to be persisted on
     * the `DeliveryVehicle`. The `task_id`s are retrieved from
     * `remaining_vehicle_journey_segments`, and their corresponding `Tasks` are
     * assigned to the `DeliveryVehicle` if they have not yet been assigned.
     */
    updateDeliveryVehicle: {
      name: "UpdateDeliveryVehicle",
      requestType: UpdateDeliveryVehicleRequest,
      requestStream: false,
      responseType: DeliveryVehicle,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              28,
              100,
              101,
              108,
              105,
              118,
              101,
              114,
              121,
              95,
              118,
              101,
              104,
              105,
              99,
              108,
              101,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              78,
              58,
              16,
              100,
              101,
              108,
              105,
              118,
              101,
              114,
              121,
              95,
              118,
              101,
              104,
              105,
              99,
              108,
              101,
              50,
              58,
              47,
              118,
              49,
              47,
              123,
              100,
              101,
              108,
              105,
              118,
              101,
              114,
              121,
              95,
              118,
              101,
              104,
              105,
              99,
              108,
              101,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              100,
              101,
              108,
              105,
              118,
              101,
              114,
              121,
              86,
              101,
              104,
              105,
              99,
              108,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
          578365834: [
            Buffer.from([
              52,
              18,
              50,
              10,
              21,
              100,
              101,
              108,
              105,
              118,
              101,
              114,
              121,
              95,
              118,
              101,
              104,
              105,
              99,
              108,
              101,
              46,
              110,
              97,
              109,
              101,
              18,
              25,
              123,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              95,
              105,
              100,
              61,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Creates and returns a batch of new `Task` objects. */
    batchCreateTasks: {
      name: "BatchCreateTasks",
      requestType: BatchCreateTasksRequest,
      requestStream: false,
      responseType: BatchCreateTasksResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              47,
              58,
              1,
              42,
              34,
              42,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              47,
              42,
              125,
              47,
              116,
              97,
              115,
              107,
              115,
              58,
              98,
              97,
              116,
              99,
              104,
              67,
              114,
              101,
              97,
              116,
              101,
            ]),
          ],
          578365834: [
            Buffer.from([
              37,
              18,
              35,
              10,
              6,
              112,
              97,
              114,
              101,
              110,
              116,
              18,
              25,
              123,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              95,
              105,
              100,
              61,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Creates and returns a new `Task` object. */
    createTask: {
      name: "CreateTask",
      requestType: CreateTaskRequest,
      requestStream: false,
      responseType: Task,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([19, 112, 97, 114, 101, 110, 116, 44, 116, 97, 115, 107, 44, 116, 97, 115, 107, 95, 105, 100]),
          ],
          578365826: [
            Buffer.from([
              38,
              58,
              4,
              116,
              97,
              115,
              107,
              34,
              30,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              47,
              42,
              125,
              47,
              116,
              97,
              115,
              107,
              115,
            ]),
          ],
          578365834: [
            Buffer.from([
              37,
              18,
              35,
              10,
              6,
              112,
              97,
              114,
              101,
              110,
              116,
              18,
              25,
              123,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              95,
              105,
              100,
              61,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Gets information about a `Task`. */
    getTask: {
      name: "GetTask",
      requestType: GetTaskRequest,
      requestStream: false,
      responseType: Task,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              32,
              18,
              30,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              116,
              97,
              115,
              107,
              115,
              47,
              42,
              125,
            ]),
          ],
          578365834: [
            Buffer.from([
              35,
              18,
              33,
              10,
              4,
              110,
              97,
              109,
              101,
              18,
              25,
              123,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              95,
              105,
              100,
              61,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Updates `Task` data. */
    updateTask: {
      name: "UpdateTask",
      requestType: UpdateTaskRequest,
      requestStream: false,
      responseType: Task,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([16, 116, 97, 115, 107, 44, 117, 112, 100, 97, 116, 101, 95, 109, 97, 115, 107])],
          578365826: [
            Buffer.from([
              43,
              58,
              4,
              116,
              97,
              115,
              107,
              50,
              35,
              47,
              118,
              49,
              47,
              123,
              116,
              97,
              115,
              107,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              116,
              97,
              115,
              107,
              115,
              47,
              42,
              125,
            ]),
          ],
          578365834: [
            Buffer.from([
              40,
              18,
              38,
              10,
              9,
              116,
              97,
              115,
              107,
              46,
              110,
              97,
              109,
              101,
              18,
              25,
              123,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              95,
              105,
              100,
              61,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Gets all `Task`s that meet the specified filtering criteria. */
    listTasks: {
      name: "ListTasks",
      requestType: ListTasksRequest,
      requestStream: false,
      responseType: ListTasksResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              32,
              18,
              30,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              47,
              42,
              125,
              47,
              116,
              97,
              115,
              107,
              115,
            ]),
          ],
          578365834: [
            Buffer.from([
              37,
              18,
              35,
              10,
              6,
              112,
              97,
              114,
              101,
              110,
              116,
              18,
              25,
              123,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              95,
              105,
              100,
              61,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Returns the specified `TaskTrackingInfo` instance. */
    getTaskTrackingInfo: {
      name: "GetTaskTrackingInfo",
      requestType: GetTaskTrackingInfoRequest,
      requestStream: false,
      responseType: TaskTrackingInfo,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              43,
              18,
              41,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              116,
              97,
              115,
              107,
              84,
              114,
              97,
              99,
              107,
              105,
              110,
              103,
              73,
              110,
              102,
              111,
              47,
              42,
              125,
            ]),
          ],
          578365834: [
            Buffer.from([
              35,
              18,
              33,
              10,
              4,
              110,
              97,
              109,
              101,
              18,
              25,
              123,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              95,
              105,
              100,
              61,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Gets all `DeliveryVehicle`s that meet the specified filtering criteria. */
    listDeliveryVehicles: {
      name: "ListDeliveryVehicles",
      requestType: ListDeliveryVehiclesRequest,
      requestStream: false,
      responseType: ListDeliveryVehiclesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              43,
              18,
              41,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              47,
              42,
              125,
              47,
              100,
              101,
              108,
              105,
              118,
              101,
              114,
              121,
              86,
              101,
              104,
              105,
              99,
              108,
              101,
              115,
            ]),
          ],
          578365834: [
            Buffer.from([
              37,
              18,
              35,
              10,
              6,
              112,
              97,
              114,
              101,
              110,
              116,
              18,
              25,
              123,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              95,
              105,
              100,
              61,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface DeliveryServiceImplementation<CallContextExt = {}> {
  /** Creates and returns a new `DeliveryVehicle`. */
  createDeliveryVehicle(
    request: CreateDeliveryVehicleRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<DeliveryVehicle>>;
  /** Returns the specified `DeliveryVehicle` instance. */
  getDeliveryVehicle(
    request: GetDeliveryVehicleRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<DeliveryVehicle>>;
  /**
   * Writes updated `DeliveryVehicle` data to Fleet Engine, and assigns
   * `Tasks` to the `DeliveryVehicle`. You cannot update the name of the
   * `DeliveryVehicle`. You *can* update `remaining_vehicle_journey_segments`,
   * but it must contain all of the `VehicleJourneySegment`s to be persisted on
   * the `DeliveryVehicle`. The `task_id`s are retrieved from
   * `remaining_vehicle_journey_segments`, and their corresponding `Tasks` are
   * assigned to the `DeliveryVehicle` if they have not yet been assigned.
   */
  updateDeliveryVehicle(
    request: UpdateDeliveryVehicleRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<DeliveryVehicle>>;
  /** Creates and returns a batch of new `Task` objects. */
  batchCreateTasks(
    request: BatchCreateTasksRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<BatchCreateTasksResponse>>;
  /** Creates and returns a new `Task` object. */
  createTask(request: CreateTaskRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Task>>;
  /** Gets information about a `Task`. */
  getTask(request: GetTaskRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Task>>;
  /** Updates `Task` data. */
  updateTask(request: UpdateTaskRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Task>>;
  /** Gets all `Task`s that meet the specified filtering criteria. */
  listTasks(request: ListTasksRequest, context: CallContext & CallContextExt): Promise<DeepPartial<ListTasksResponse>>;
  /** Returns the specified `TaskTrackingInfo` instance. */
  getTaskTrackingInfo(
    request: GetTaskTrackingInfoRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<TaskTrackingInfo>>;
  /** Gets all `DeliveryVehicle`s that meet the specified filtering criteria. */
  listDeliveryVehicles(
    request: ListDeliveryVehiclesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListDeliveryVehiclesResponse>>;
}

export interface DeliveryServiceClient<CallOptionsExt = {}> {
  /** Creates and returns a new `DeliveryVehicle`. */
  createDeliveryVehicle(
    request: DeepPartial<CreateDeliveryVehicleRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<DeliveryVehicle>;
  /** Returns the specified `DeliveryVehicle` instance. */
  getDeliveryVehicle(
    request: DeepPartial<GetDeliveryVehicleRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<DeliveryVehicle>;
  /**
   * Writes updated `DeliveryVehicle` data to Fleet Engine, and assigns
   * `Tasks` to the `DeliveryVehicle`. You cannot update the name of the
   * `DeliveryVehicle`. You *can* update `remaining_vehicle_journey_segments`,
   * but it must contain all of the `VehicleJourneySegment`s to be persisted on
   * the `DeliveryVehicle`. The `task_id`s are retrieved from
   * `remaining_vehicle_journey_segments`, and their corresponding `Tasks` are
   * assigned to the `DeliveryVehicle` if they have not yet been assigned.
   */
  updateDeliveryVehicle(
    request: DeepPartial<UpdateDeliveryVehicleRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<DeliveryVehicle>;
  /** Creates and returns a batch of new `Task` objects. */
  batchCreateTasks(
    request: DeepPartial<BatchCreateTasksRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<BatchCreateTasksResponse>;
  /** Creates and returns a new `Task` object. */
  createTask(request: DeepPartial<CreateTaskRequest>, options?: CallOptions & CallOptionsExt): Promise<Task>;
  /** Gets information about a `Task`. */
  getTask(request: DeepPartial<GetTaskRequest>, options?: CallOptions & CallOptionsExt): Promise<Task>;
  /** Updates `Task` data. */
  updateTask(request: DeepPartial<UpdateTaskRequest>, options?: CallOptions & CallOptionsExt): Promise<Task>;
  /** Gets all `Task`s that meet the specified filtering criteria. */
  listTasks(request: DeepPartial<ListTasksRequest>, options?: CallOptions & CallOptionsExt): Promise<ListTasksResponse>;
  /** Returns the specified `TaskTrackingInfo` instance. */
  getTaskTrackingInfo(
    request: DeepPartial<GetTaskTrackingInfoRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<TaskTrackingInfo>;
  /** Gets all `DeliveryVehicle`s that meet the specified filtering criteria. */
  listDeliveryVehicles(
    request: DeepPartial<ListDeliveryVehiclesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListDeliveryVehiclesResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
