// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/maps/routing/v2/vehicle_info.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import {
  VehicleEmissionType,
  vehicleEmissionTypeFromJSON,
  vehicleEmissionTypeToJSON,
} from "./vehicle_emission_type.js";

export const protobufPackage = "google.maps.routing.v2";

/** Contains the vehicle information, such as the vehicle emission type. */
export interface VehicleInfo {
  /**
   * Describes the vehicle's emission type.
   * Applies only to the `DRIVE`
   * [`RouteTravelMode`][google.maps.routing.v2.RouteTravelMode].
   */
  emissionType: VehicleEmissionType;
}

function createBaseVehicleInfo(): VehicleInfo {
  return { emissionType: 0 };
}

export const VehicleInfo: MessageFns<VehicleInfo> = {
  encode(message: VehicleInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.emissionType !== 0) {
      writer.uint32(16).int32(message.emissionType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VehicleInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVehicleInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 16) {
            break;
          }

          message.emissionType = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VehicleInfo {
    return { emissionType: isSet(object.emissionType) ? vehicleEmissionTypeFromJSON(object.emissionType) : 0 };
  },

  toJSON(message: VehicleInfo): unknown {
    const obj: any = {};
    if (message.emissionType !== 0) {
      obj.emissionType = vehicleEmissionTypeToJSON(message.emissionType);
    }
    return obj;
  },

  create(base?: DeepPartial<VehicleInfo>): VehicleInfo {
    return VehicleInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<VehicleInfo>): VehicleInfo {
    const message = createBaseVehicleInfo();
    message.emissionType = object.emissionType ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
