// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/maps/routing/v2/waypoint.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Location } from "./location.js";

export const protobufPackage = "google.maps.routing.v2";

/**
 * Encapsulates a waypoint. Waypoints mark both the beginning and end of a
 * route, and include intermediate stops along the route.
 */
export interface Waypoint {
  /**
   * A point specified using geographic coordinates, including an optional
   * heading.
   */
  location?:
    | Location
    | undefined;
  /** The POI Place ID associated with the waypoint. */
  placeId?:
    | string
    | undefined;
  /**
   * Human readable address or a plus code.
   * See https://plus.codes for details.
   */
  address?:
    | string
    | undefined;
  /**
   * Marks this waypoint as a milestone rather a stopping point. For
   * each non-via waypoint in the request, the response appends an entry to the
   * [`legs`][google.maps.routing.v2.Route.legs]
   * array to provide the details for stopovers on that leg of the trip. Set
   * this value to true when you want the route to pass through this waypoint
   * without stopping over. Via waypoints don't cause an entry to be added to
   * the `legs` array, but they do route the journey through the waypoint. You
   * can only set this value on waypoints that are intermediates. The request
   * fails if you set this field on terminal waypoints. If
   * `ComputeRoutesRequest.optimize_waypoint_order` is set to true then this
   * field cannot be set to true; otherwise, the request fails.
   */
  via: boolean;
  /**
   * Indicates that the waypoint is meant for vehicles to stop at, where the
   * intention is to either pickup or drop-off. When you set this value, the
   * calculated route won't include non-`via` waypoints on roads that are
   * unsuitable for pickup and drop-off. This option works only for `DRIVE` and
   * `TWO_WHEELER` travel modes, and when the `location_type` is
   * [`Location`][google.maps.routing.v2.Location].
   */
  vehicleStopover: boolean;
  /**
   * Indicates that the location of this waypoint is meant to have a preference
   * for the vehicle to stop at a particular side of road. When you set this
   * value, the route will pass through the location so that the vehicle can
   * stop at the side of road that the location is biased towards from the
   * center of the road. This option works only for `DRIVE` and `TWO_WHEELER`
   * [`RouteTravelMode`][google.maps.routing.v2.RouteTravelMode].
   */
  sideOfRoad: boolean;
}

function createBaseWaypoint(): Waypoint {
  return {
    location: undefined,
    placeId: undefined,
    address: undefined,
    via: false,
    vehicleStopover: false,
    sideOfRoad: false,
  };
}

export const Waypoint: MessageFns<Waypoint> = {
  encode(message: Waypoint, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.location !== undefined) {
      Location.encode(message.location, writer.uint32(10).fork()).join();
    }
    if (message.placeId !== undefined) {
      writer.uint32(18).string(message.placeId);
    }
    if (message.address !== undefined) {
      writer.uint32(58).string(message.address);
    }
    if (message.via !== false) {
      writer.uint32(24).bool(message.via);
    }
    if (message.vehicleStopover !== false) {
      writer.uint32(32).bool(message.vehicleStopover);
    }
    if (message.sideOfRoad !== false) {
      writer.uint32(40).bool(message.sideOfRoad);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Waypoint {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWaypoint();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.location = Location.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.placeId = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.address = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.via = reader.bool();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.vehicleStopover = reader.bool();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.sideOfRoad = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Waypoint {
    return {
      location: isSet(object.location) ? Location.fromJSON(object.location) : undefined,
      placeId: isSet(object.placeId) ? globalThis.String(object.placeId) : undefined,
      address: isSet(object.address) ? globalThis.String(object.address) : undefined,
      via: isSet(object.via) ? globalThis.Boolean(object.via) : false,
      vehicleStopover: isSet(object.vehicleStopover) ? globalThis.Boolean(object.vehicleStopover) : false,
      sideOfRoad: isSet(object.sideOfRoad) ? globalThis.Boolean(object.sideOfRoad) : false,
    };
  },

  toJSON(message: Waypoint): unknown {
    const obj: any = {};
    if (message.location !== undefined) {
      obj.location = Location.toJSON(message.location);
    }
    if (message.placeId !== undefined) {
      obj.placeId = message.placeId;
    }
    if (message.address !== undefined) {
      obj.address = message.address;
    }
    if (message.via !== false) {
      obj.via = message.via;
    }
    if (message.vehicleStopover !== false) {
      obj.vehicleStopover = message.vehicleStopover;
    }
    if (message.sideOfRoad !== false) {
      obj.sideOfRoad = message.sideOfRoad;
    }
    return obj;
  },

  create(base?: DeepPartial<Waypoint>): Waypoint {
    return Waypoint.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Waypoint>): Waypoint {
    const message = createBaseWaypoint();
    message.location = (object.location !== undefined && object.location !== null)
      ? Location.fromPartial(object.location)
      : undefined;
    message.placeId = object.placeId ?? undefined;
    message.address = object.address ?? undefined;
    message.via = object.via ?? false;
    message.vehicleStopover = object.vehicleStopover ?? false;
    message.sideOfRoad = object.sideOfRoad ?? false;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
