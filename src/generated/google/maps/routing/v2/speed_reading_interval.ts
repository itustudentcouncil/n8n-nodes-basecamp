// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/maps/routing/v2/speed_reading_interval.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.maps.routing.v2";

/**
 * Traffic density indicator on a contiguous segment of a polyline or path.
 * Given a path with points P_0, P_1, ... , P_N (zero-based index), the
 * `SpeedReadingInterval` defines an interval and describes its traffic using
 * the following categories.
 */
export interface SpeedReadingInterval {
  /** The starting index of this interval in the polyline. */
  startPolylinePointIndex?:
    | number
    | undefined;
  /** The ending index of this interval in the polyline. */
  endPolylinePointIndex?:
    | number
    | undefined;
  /** Traffic speed in this interval. */
  speed?: SpeedReadingInterval_Speed | undefined;
}

/** The classification of polyline speed based on traffic data. */
export enum SpeedReadingInterval_Speed {
  /** SPEED_UNSPECIFIED - Default value. This value is unused. */
  SPEED_UNSPECIFIED = 0,
  /** NORMAL - Normal speed, no slowdown is detected. */
  NORMAL = 1,
  /** SLOW - Slowdown detected, but no traffic jam formed. */
  SLOW = 2,
  /** TRAFFIC_JAM - Traffic jam detected. */
  TRAFFIC_JAM = 3,
  UNRECOGNIZED = -1,
}

export function speedReadingInterval_SpeedFromJSON(object: any): SpeedReadingInterval_Speed {
  switch (object) {
    case 0:
    case "SPEED_UNSPECIFIED":
      return SpeedReadingInterval_Speed.SPEED_UNSPECIFIED;
    case 1:
    case "NORMAL":
      return SpeedReadingInterval_Speed.NORMAL;
    case 2:
    case "SLOW":
      return SpeedReadingInterval_Speed.SLOW;
    case 3:
    case "TRAFFIC_JAM":
      return SpeedReadingInterval_Speed.TRAFFIC_JAM;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SpeedReadingInterval_Speed.UNRECOGNIZED;
  }
}

export function speedReadingInterval_SpeedToJSON(object: SpeedReadingInterval_Speed): string {
  switch (object) {
    case SpeedReadingInterval_Speed.SPEED_UNSPECIFIED:
      return "SPEED_UNSPECIFIED";
    case SpeedReadingInterval_Speed.NORMAL:
      return "NORMAL";
    case SpeedReadingInterval_Speed.SLOW:
      return "SLOW";
    case SpeedReadingInterval_Speed.TRAFFIC_JAM:
      return "TRAFFIC_JAM";
    case SpeedReadingInterval_Speed.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseSpeedReadingInterval(): SpeedReadingInterval {
  return { startPolylinePointIndex: undefined, endPolylinePointIndex: undefined, speed: undefined };
}

export const SpeedReadingInterval: MessageFns<SpeedReadingInterval> = {
  encode(message: SpeedReadingInterval, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.startPolylinePointIndex !== undefined) {
      writer.uint32(8).int32(message.startPolylinePointIndex);
    }
    if (message.endPolylinePointIndex !== undefined) {
      writer.uint32(16).int32(message.endPolylinePointIndex);
    }
    if (message.speed !== undefined) {
      writer.uint32(24).int32(message.speed);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SpeedReadingInterval {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSpeedReadingInterval();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.startPolylinePointIndex = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.endPolylinePointIndex = reader.int32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.speed = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SpeedReadingInterval {
    return {
      startPolylinePointIndex: isSet(object.startPolylinePointIndex)
        ? globalThis.Number(object.startPolylinePointIndex)
        : undefined,
      endPolylinePointIndex: isSet(object.endPolylinePointIndex)
        ? globalThis.Number(object.endPolylinePointIndex)
        : undefined,
      speed: isSet(object.speed) ? speedReadingInterval_SpeedFromJSON(object.speed) : undefined,
    };
  },

  toJSON(message: SpeedReadingInterval): unknown {
    const obj: any = {};
    if (message.startPolylinePointIndex !== undefined) {
      obj.startPolylinePointIndex = Math.round(message.startPolylinePointIndex);
    }
    if (message.endPolylinePointIndex !== undefined) {
      obj.endPolylinePointIndex = Math.round(message.endPolylinePointIndex);
    }
    if (message.speed !== undefined) {
      obj.speed = speedReadingInterval_SpeedToJSON(message.speed);
    }
    return obj;
  },

  create(base?: DeepPartial<SpeedReadingInterval>): SpeedReadingInterval {
    return SpeedReadingInterval.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SpeedReadingInterval>): SpeedReadingInterval {
    const message = createBaseSpeedReadingInterval();
    message.startPolylinePointIndex = object.startPolylinePointIndex ?? undefined;
    message.endPolylinePointIndex = object.endPolylinePointIndex ?? undefined;
    message.speed = object.speed ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
