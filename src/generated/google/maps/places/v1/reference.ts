// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/maps/places/v1/reference.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Review } from "./review.js";

export const protobufPackage = "google.maps.places.v1";

/**
 * Experimental: See
 * https://developers.google.com/maps/documentation/places/web-service/experimental/places-generative
 * for more details.
 *
 * Reference that the generative content is related to.
 */
export interface References {
  /** Reviews that serve as references. */
  reviews: Review[];
  /**
   * The list of resource names of the referenced places. This name can be used
   * in other APIs that accept Place resource names.
   */
  places: string[];
}

function createBaseReferences(): References {
  return { reviews: [], places: [] };
}

export const References: MessageFns<References> = {
  encode(message: References, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.reviews) {
      Review.encode(v!, writer.uint32(10).fork()).join();
    }
    for (const v of message.places) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): References {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReferences();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.reviews.push(Review.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.places.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): References {
    return {
      reviews: globalThis.Array.isArray(object?.reviews) ? object.reviews.map((e: any) => Review.fromJSON(e)) : [],
      places: globalThis.Array.isArray(object?.places) ? object.places.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: References): unknown {
    const obj: any = {};
    if (message.reviews?.length) {
      obj.reviews = message.reviews.map((e) => Review.toJSON(e));
    }
    if (message.places?.length) {
      obj.places = message.places;
    }
    return obj;
  },

  create(base?: DeepPartial<References>): References {
    return References.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<References>): References {
    const message = createBaseReferences();
    message.reviews = object.reviews?.map((e) => Review.fromPartial(e)) || [];
    message.places = object.places?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
