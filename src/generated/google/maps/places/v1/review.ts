// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/maps/places/v1/review.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { LocalizedText } from "../../../type/localized_text.js";
import { AuthorAttribution } from "./attribution.js";

export const protobufPackage = "google.maps.places.v1";

/** Information about a review of a place. */
export interface Review {
  /**
   * A reference representing this place review which may be used to look up
   * this place review again (also called the API "resource" name:
   * `places/{place_id}/reviews/{review}`).
   */
  name: string;
  /**
   * A string of formatted recent time, expressing the review time relative
   * to the current time in a form appropriate for the language and country.
   */
  relativePublishTimeDescription: string;
  /** The localized text of the review. */
  text:
    | LocalizedText
    | undefined;
  /** The review text in its original language. */
  originalText:
    | LocalizedText
    | undefined;
  /** A number between 1.0 and 5.0, also called the number of stars. */
  rating: number;
  /** This review's author. */
  authorAttribution:
    | AuthorAttribution
    | undefined;
  /** Timestamp for the review. */
  publishTime: Date | undefined;
}

function createBaseReview(): Review {
  return {
    name: "",
    relativePublishTimeDescription: "",
    text: undefined,
    originalText: undefined,
    rating: 0,
    authorAttribution: undefined,
    publishTime: undefined,
  };
}

export const Review: MessageFns<Review> = {
  encode(message: Review, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.relativePublishTimeDescription !== "") {
      writer.uint32(18).string(message.relativePublishTimeDescription);
    }
    if (message.text !== undefined) {
      LocalizedText.encode(message.text, writer.uint32(74).fork()).join();
    }
    if (message.originalText !== undefined) {
      LocalizedText.encode(message.originalText, writer.uint32(98).fork()).join();
    }
    if (message.rating !== 0) {
      writer.uint32(57).double(message.rating);
    }
    if (message.authorAttribution !== undefined) {
      AuthorAttribution.encode(message.authorAttribution, writer.uint32(106).fork()).join();
    }
    if (message.publishTime !== undefined) {
      Timestamp.encode(toTimestamp(message.publishTime), writer.uint32(114).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Review {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReview();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.relativePublishTimeDescription = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.text = LocalizedText.decode(reader, reader.uint32());
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.originalText = LocalizedText.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 57) {
            break;
          }

          message.rating = reader.double();
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.authorAttribution = AuthorAttribution.decode(reader, reader.uint32());
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.publishTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Review {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      relativePublishTimeDescription: isSet(object.relativePublishTimeDescription)
        ? globalThis.String(object.relativePublishTimeDescription)
        : "",
      text: isSet(object.text) ? LocalizedText.fromJSON(object.text) : undefined,
      originalText: isSet(object.originalText) ? LocalizedText.fromJSON(object.originalText) : undefined,
      rating: isSet(object.rating) ? globalThis.Number(object.rating) : 0,
      authorAttribution: isSet(object.authorAttribution)
        ? AuthorAttribution.fromJSON(object.authorAttribution)
        : undefined,
      publishTime: isSet(object.publishTime) ? fromJsonTimestamp(object.publishTime) : undefined,
    };
  },

  toJSON(message: Review): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.relativePublishTimeDescription !== "") {
      obj.relativePublishTimeDescription = message.relativePublishTimeDescription;
    }
    if (message.text !== undefined) {
      obj.text = LocalizedText.toJSON(message.text);
    }
    if (message.originalText !== undefined) {
      obj.originalText = LocalizedText.toJSON(message.originalText);
    }
    if (message.rating !== 0) {
      obj.rating = message.rating;
    }
    if (message.authorAttribution !== undefined) {
      obj.authorAttribution = AuthorAttribution.toJSON(message.authorAttribution);
    }
    if (message.publishTime !== undefined) {
      obj.publishTime = message.publishTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<Review>): Review {
    return Review.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Review>): Review {
    const message = createBaseReview();
    message.name = object.name ?? "";
    message.relativePublishTimeDescription = object.relativePublishTimeDescription ?? "";
    message.text = (object.text !== undefined && object.text !== null)
      ? LocalizedText.fromPartial(object.text)
      : undefined;
    message.originalText = (object.originalText !== undefined && object.originalText !== null)
      ? LocalizedText.fromPartial(object.originalText)
      : undefined;
    message.rating = object.rating ?? 0;
    message.authorAttribution = (object.authorAttribution !== undefined && object.authorAttribution !== null)
      ? AuthorAttribution.fromPartial(object.authorAttribution)
      : undefined;
    message.publishTime = object.publishTime ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
