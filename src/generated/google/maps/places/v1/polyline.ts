// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/maps/places/v1/polyline.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.maps.places.v1";

/**
 * A route polyline.  Only supports an [encoded
 * polyline](https://developers.google.com/maps/documentation/utilities/polylinealgorithm),
 * which can be passed as a string and includes compression with minimal
 * lossiness. This is the Routes API default output.
 */
export interface Polyline {
  /**
   * An [encoded
   * polyline](https://developers.google.com/maps/documentation/utilities/polylinealgorithm),
   * as returned by the [Routes API by
   * default](https://developers.google.com/maps/documentation/routes/reference/rest/v2/TopLevel/computeRoutes#polylineencoding).
   * See the
   * [encoder](https://developers.google.com/maps/documentation/utilities/polylineutility)
   * and
   * [decoder](https://developers.google.com/maps/documentation/routes/polylinedecoder)
   * tools.
   */
  encodedPolyline?: string | undefined;
}

function createBasePolyline(): Polyline {
  return { encodedPolyline: undefined };
}

export const Polyline: MessageFns<Polyline> = {
  encode(message: Polyline, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.encodedPolyline !== undefined) {
      writer.uint32(10).string(message.encodedPolyline);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Polyline {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePolyline();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.encodedPolyline = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Polyline {
    return { encodedPolyline: isSet(object.encodedPolyline) ? globalThis.String(object.encodedPolyline) : undefined };
  },

  toJSON(message: Polyline): unknown {
    const obj: any = {};
    if (message.encodedPolyline !== undefined) {
      obj.encodedPolyline = message.encodedPolyline;
    }
    return obj;
  },

  create(base?: DeepPartial<Polyline>): Polyline {
    return Polyline.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Polyline>): Polyline {
    const message = createBasePolyline();
    message.encodedPolyline = object.encodedPolyline ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
