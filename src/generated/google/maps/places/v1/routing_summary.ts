// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/maps/places/v1/routing_summary.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Duration } from "../../../protobuf/duration.js";

export const protobufPackage = "google.maps.places.v1";

/**
 * The duration and distance from the routing origin to a place in the
 * response, and a second leg from that place to the destination, if requested.
 * Note: Adding `routingSummaries` in the field mask without also including
 * either the `routingParameters.origin` parameter or the
 * `searchAlongRouteParameters.polyline.encodedPolyline` parameter in the
 * request causes an error.
 */
export interface RoutingSummary {
  /**
   * The legs of the trip.
   *
   * When you calculate travel duration and distance from a set origin, `legs`
   * contains a single leg containing the duration and distance from the origin
   * to the destination.  When you do a search along route, `legs` contains two
   * legs: one from the origin to place, and one from the place to the
   * destination.
   */
  legs: RoutingSummary_Leg[];
}

/** A leg is a single portion of a journey from one location to another. */
export interface RoutingSummary_Leg {
  /** The time it takes to complete this leg of the trip. */
  duration:
    | Duration
    | undefined;
  /** The distance of this leg of the trip. */
  distanceMeters: number;
}

function createBaseRoutingSummary(): RoutingSummary {
  return { legs: [] };
}

export const RoutingSummary: MessageFns<RoutingSummary> = {
  encode(message: RoutingSummary, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.legs) {
      RoutingSummary_Leg.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RoutingSummary {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRoutingSummary();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.legs.push(RoutingSummary_Leg.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RoutingSummary {
    return {
      legs: globalThis.Array.isArray(object?.legs) ? object.legs.map((e: any) => RoutingSummary_Leg.fromJSON(e)) : [],
    };
  },

  toJSON(message: RoutingSummary): unknown {
    const obj: any = {};
    if (message.legs?.length) {
      obj.legs = message.legs.map((e) => RoutingSummary_Leg.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<RoutingSummary>): RoutingSummary {
    return RoutingSummary.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RoutingSummary>): RoutingSummary {
    const message = createBaseRoutingSummary();
    message.legs = object.legs?.map((e) => RoutingSummary_Leg.fromPartial(e)) || [];
    return message;
  },
};

function createBaseRoutingSummary_Leg(): RoutingSummary_Leg {
  return { duration: undefined, distanceMeters: 0 };
}

export const RoutingSummary_Leg: MessageFns<RoutingSummary_Leg> = {
  encode(message: RoutingSummary_Leg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.duration !== undefined) {
      Duration.encode(message.duration, writer.uint32(10).fork()).join();
    }
    if (message.distanceMeters !== 0) {
      writer.uint32(16).int32(message.distanceMeters);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RoutingSummary_Leg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRoutingSummary_Leg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.duration = Duration.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.distanceMeters = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RoutingSummary_Leg {
    return {
      duration: isSet(object.duration) ? Duration.fromJSON(object.duration) : undefined,
      distanceMeters: isSet(object.distanceMeters) ? globalThis.Number(object.distanceMeters) : 0,
    };
  },

  toJSON(message: RoutingSummary_Leg): unknown {
    const obj: any = {};
    if (message.duration !== undefined) {
      obj.duration = Duration.toJSON(message.duration);
    }
    if (message.distanceMeters !== 0) {
      obj.distanceMeters = Math.round(message.distanceMeters);
    }
    return obj;
  },

  create(base?: DeepPartial<RoutingSummary_Leg>): RoutingSummary_Leg {
    return RoutingSummary_Leg.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RoutingSummary_Leg>): RoutingSummary_Leg {
    const message = createBaseRoutingSummary_Leg();
    message.duration = (object.duration !== undefined && object.duration !== null)
      ? Duration.fromPartial(object.duration)
      : undefined;
    message.distanceMeters = object.distanceMeters ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
