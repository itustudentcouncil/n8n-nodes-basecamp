// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/maps/places/v1/content_block.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { LocalizedText } from "../../../type/localized_text.js";
import { References } from "./reference.js";

export const protobufPackage = "google.maps.places.v1";

/** A block of content that can be served individually. */
export interface ContentBlock {
  /** The topic of the content, for example "overview" or "restaurant". */
  topic: string;
  /** Content related to the topic. */
  content:
    | LocalizedText
    | undefined;
  /**
   * Experimental: See
   * https://developers.google.com/maps/documentation/places/web-service/experimental/places-generative
   * for more details.
   *
   * References that are related to this block of content.
   */
  references: References | undefined;
}

function createBaseContentBlock(): ContentBlock {
  return { topic: "", content: undefined, references: undefined };
}

export const ContentBlock: MessageFns<ContentBlock> = {
  encode(message: ContentBlock, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.topic !== "") {
      writer.uint32(10).string(message.topic);
    }
    if (message.content !== undefined) {
      LocalizedText.encode(message.content, writer.uint32(18).fork()).join();
    }
    if (message.references !== undefined) {
      References.encode(message.references, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ContentBlock {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseContentBlock();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.topic = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.content = LocalizedText.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.references = References.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ContentBlock {
    return {
      topic: isSet(object.topic) ? globalThis.String(object.topic) : "",
      content: isSet(object.content) ? LocalizedText.fromJSON(object.content) : undefined,
      references: isSet(object.references) ? References.fromJSON(object.references) : undefined,
    };
  },

  toJSON(message: ContentBlock): unknown {
    const obj: any = {};
    if (message.topic !== "") {
      obj.topic = message.topic;
    }
    if (message.content !== undefined) {
      obj.content = LocalizedText.toJSON(message.content);
    }
    if (message.references !== undefined) {
      obj.references = References.toJSON(message.references);
    }
    return obj;
  },

  create(base?: DeepPartial<ContentBlock>): ContentBlock {
    return ContentBlock.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ContentBlock>): ContentBlock {
    const message = createBaseContentBlock();
    message.topic = object.topic ?? "";
    message.content = (object.content !== undefined && object.content !== null)
      ? LocalizedText.fromPartial(object.content)
      : undefined;
    message.references = (object.references !== undefined && object.references !== null)
      ? References.fromPartial(object.references)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
