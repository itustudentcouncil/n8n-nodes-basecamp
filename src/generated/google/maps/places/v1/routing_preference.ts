// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/maps/places/v1/routing_preference.proto

/* eslint-disable */

export const protobufPackage = "google.maps.places.v1";

/**
 * A set of values that specify factors to take into consideration when
 * calculating the route.
 */
export enum RoutingPreference {
  /** ROUTING_PREFERENCE_UNSPECIFIED - No routing preference specified. Default to `TRAFFIC_UNAWARE`. */
  ROUTING_PREFERENCE_UNSPECIFIED = 0,
  /**
   * TRAFFIC_UNAWARE - Computes routes without taking live traffic conditions into consideration.
   * Suitable when traffic conditions don't matter or are not applicable.
   * Using this value produces the lowest latency.
   * Note: For [`TravelMode`][google.maps.places.v1.TravelMode]
   * `DRIVE` and `TWO_WHEELER`, the route and duration chosen are based on road
   * network and average time-independent traffic conditions, not current road
   * conditions. Consequently, routes may include roads that are temporarily
   * closed. Results for a given
   * request may vary over time due to changes in the road network, updated
   * average traffic conditions, and the distributed nature of the service.
   * Results may also vary between nearly-equivalent routes at any time or
   * frequency.
   */
  TRAFFIC_UNAWARE = 1,
  /**
   * TRAFFIC_AWARE - Calculates routes taking live traffic conditions into consideration.
   * In contrast to `TRAFFIC_AWARE_OPTIMAL`, some optimizations are applied to
   * significantly reduce latency.
   */
  TRAFFIC_AWARE = 2,
  /**
   * TRAFFIC_AWARE_OPTIMAL - Calculates the routes taking live traffic conditions into consideration,
   * without applying most performance optimizations. Using this value produces
   * the highest latency.
   */
  TRAFFIC_AWARE_OPTIMAL = 3,
  UNRECOGNIZED = -1,
}

export function routingPreferenceFromJSON(object: any): RoutingPreference {
  switch (object) {
    case 0:
    case "ROUTING_PREFERENCE_UNSPECIFIED":
      return RoutingPreference.ROUTING_PREFERENCE_UNSPECIFIED;
    case 1:
    case "TRAFFIC_UNAWARE":
      return RoutingPreference.TRAFFIC_UNAWARE;
    case 2:
    case "TRAFFIC_AWARE":
      return RoutingPreference.TRAFFIC_AWARE;
    case 3:
    case "TRAFFIC_AWARE_OPTIMAL":
      return RoutingPreference.TRAFFIC_AWARE_OPTIMAL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return RoutingPreference.UNRECOGNIZED;
  }
}

export function routingPreferenceToJSON(object: RoutingPreference): string {
  switch (object) {
    case RoutingPreference.ROUTING_PREFERENCE_UNSPECIFIED:
      return "ROUTING_PREFERENCE_UNSPECIFIED";
    case RoutingPreference.TRAFFIC_UNAWARE:
      return "TRAFFIC_UNAWARE";
    case RoutingPreference.TRAFFIC_AWARE:
      return "TRAFFIC_AWARE";
    case RoutingPreference.TRAFFIC_AWARE_OPTIMAL:
      return "TRAFFIC_AWARE_OPTIMAL";
    case RoutingPreference.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}
