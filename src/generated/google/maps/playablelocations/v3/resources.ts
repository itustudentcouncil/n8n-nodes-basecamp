// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/maps/playablelocations/v3/resources.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.maps.playablelocations.v3";

/**
 * A report submitted by a player about a playable location that is considered
 * inappropriate for use in the game.
 */
export interface PlayerReport {
  /** Required. The name of the playable location. */
  locationName: string;
  /** Required. One or more reasons why this playable location is considered bad. */
  reasons: PlayerReport_BadLocationReason[];
  /**
   * Required. A free-form description detailing why the playable location is
   * considered bad.
   */
  reasonDetails: string;
  /**
   * Language code (in BCP-47 format) indicating the language of the freeform
   * description provided in `reason_details`. Examples are "en", "en-US" or
   * "ja-Latn". For more information, see
   * http://www.unicode.org/reports/tr35/#Unicode_locale_identifier.
   */
  languageCode: string;
}

/** The reason why the playable location is considered bad. */
export enum PlayerReport_BadLocationReason {
  /** BAD_LOCATION_REASON_UNSPECIFIED - Unspecified reason. Do not use. */
  BAD_LOCATION_REASON_UNSPECIFIED = 0,
  /** OTHER - The reason isn't one of the reasons in this enumeration. */
  OTHER = 1,
  /**
   * NOT_PEDESTRIAN_ACCESSIBLE - The playable location isn't accessible to pedestrians. For example, if
   * it's in the middle of a highway.
   */
  NOT_PEDESTRIAN_ACCESSIBLE = 2,
  /**
   * NOT_OPEN_TO_PUBLIC - The playable location isn't open to the public. For example, a private
   * office building.
   */
  NOT_OPEN_TO_PUBLIC = 4,
  /**
   * PERMANENTLY_CLOSED - The playable location is permanently closed. For example, when a business
   * has been shut down.
   */
  PERMANENTLY_CLOSED = 5,
  /**
   * TEMPORARILY_INACCESSIBLE - The playable location is temporarily inaccessible. For example, when a
   * business has closed for renovations.
   */
  TEMPORARILY_INACCESSIBLE = 6,
  UNRECOGNIZED = -1,
}

export function playerReport_BadLocationReasonFromJSON(object: any): PlayerReport_BadLocationReason {
  switch (object) {
    case 0:
    case "BAD_LOCATION_REASON_UNSPECIFIED":
      return PlayerReport_BadLocationReason.BAD_LOCATION_REASON_UNSPECIFIED;
    case 1:
    case "OTHER":
      return PlayerReport_BadLocationReason.OTHER;
    case 2:
    case "NOT_PEDESTRIAN_ACCESSIBLE":
      return PlayerReport_BadLocationReason.NOT_PEDESTRIAN_ACCESSIBLE;
    case 4:
    case "NOT_OPEN_TO_PUBLIC":
      return PlayerReport_BadLocationReason.NOT_OPEN_TO_PUBLIC;
    case 5:
    case "PERMANENTLY_CLOSED":
      return PlayerReport_BadLocationReason.PERMANENTLY_CLOSED;
    case 6:
    case "TEMPORARILY_INACCESSIBLE":
      return PlayerReport_BadLocationReason.TEMPORARILY_INACCESSIBLE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PlayerReport_BadLocationReason.UNRECOGNIZED;
  }
}

export function playerReport_BadLocationReasonToJSON(object: PlayerReport_BadLocationReason): string {
  switch (object) {
    case PlayerReport_BadLocationReason.BAD_LOCATION_REASON_UNSPECIFIED:
      return "BAD_LOCATION_REASON_UNSPECIFIED";
    case PlayerReport_BadLocationReason.OTHER:
      return "OTHER";
    case PlayerReport_BadLocationReason.NOT_PEDESTRIAN_ACCESSIBLE:
      return "NOT_PEDESTRIAN_ACCESSIBLE";
    case PlayerReport_BadLocationReason.NOT_OPEN_TO_PUBLIC:
      return "NOT_OPEN_TO_PUBLIC";
    case PlayerReport_BadLocationReason.PERMANENTLY_CLOSED:
      return "PERMANENTLY_CLOSED";
    case PlayerReport_BadLocationReason.TEMPORARILY_INACCESSIBLE:
      return "TEMPORARILY_INACCESSIBLE";
    case PlayerReport_BadLocationReason.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Encapsulates impression event details. */
export interface Impression {
  /** Required. The name of the playable location. */
  locationName: string;
  /** Required. The type of impression event. */
  impressionType: Impression_ImpressionType;
  /**
   * An arbitrary, developer-defined type identifier for each type of game
   * object used in your game.
   *
   * Since players interact with differ types of game objects in different ways,
   * this field allows you to segregate impression data by type for analysis.
   *
   * You should assign a unique `game_object_type` ID to represent a distinct
   * type of game object in your game.
   *
   * For example, 1=monster location, 2=powerup location.
   */
  gameObjectType: number;
}

/** The type of impression event. */
export enum Impression_ImpressionType {
  /** IMPRESSION_TYPE_UNSPECIFIED - Unspecified type. Do not use. */
  IMPRESSION_TYPE_UNSPECIFIED = 0,
  /** PRESENTED - The playable location was presented to a player. */
  PRESENTED = 1,
  /** INTERACTED - A player interacted with the playable location. */
  INTERACTED = 2,
  UNRECOGNIZED = -1,
}

export function impression_ImpressionTypeFromJSON(object: any): Impression_ImpressionType {
  switch (object) {
    case 0:
    case "IMPRESSION_TYPE_UNSPECIFIED":
      return Impression_ImpressionType.IMPRESSION_TYPE_UNSPECIFIED;
    case 1:
    case "PRESENTED":
      return Impression_ImpressionType.PRESENTED;
    case 2:
    case "INTERACTED":
      return Impression_ImpressionType.INTERACTED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Impression_ImpressionType.UNRECOGNIZED;
  }
}

export function impression_ImpressionTypeToJSON(object: Impression_ImpressionType): string {
  switch (object) {
    case Impression_ImpressionType.IMPRESSION_TYPE_UNSPECIFIED:
      return "IMPRESSION_TYPE_UNSPECIFIED";
    case Impression_ImpressionType.PRESENTED:
      return "PRESENTED";
    case Impression_ImpressionType.INTERACTED:
      return "INTERACTED";
    case Impression_ImpressionType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBasePlayerReport(): PlayerReport {
  return { locationName: "", reasons: [], reasonDetails: "", languageCode: "" };
}

export const PlayerReport: MessageFns<PlayerReport> = {
  encode(message: PlayerReport, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.locationName !== "") {
      writer.uint32(10).string(message.locationName);
    }
    writer.uint32(18).fork();
    for (const v of message.reasons) {
      writer.int32(v);
    }
    writer.join();
    if (message.reasonDetails !== "") {
      writer.uint32(26).string(message.reasonDetails);
    }
    if (message.languageCode !== "") {
      writer.uint32(34).string(message.languageCode);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PlayerReport {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerReport();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.locationName = reader.string();
          continue;
        case 2:
          if (tag === 16) {
            message.reasons.push(reader.int32() as any);

            continue;
          }

          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.reasons.push(reader.int32() as any);
            }

            continue;
          }

          break;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.reasonDetails = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.languageCode = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerReport {
    return {
      locationName: isSet(object.locationName) ? globalThis.String(object.locationName) : "",
      reasons: globalThis.Array.isArray(object?.reasons)
        ? object.reasons.map((e: any) => playerReport_BadLocationReasonFromJSON(e))
        : [],
      reasonDetails: isSet(object.reasonDetails) ? globalThis.String(object.reasonDetails) : "",
      languageCode: isSet(object.languageCode) ? globalThis.String(object.languageCode) : "",
    };
  },

  toJSON(message: PlayerReport): unknown {
    const obj: any = {};
    if (message.locationName !== "") {
      obj.locationName = message.locationName;
    }
    if (message.reasons?.length) {
      obj.reasons = message.reasons.map((e) => playerReport_BadLocationReasonToJSON(e));
    }
    if (message.reasonDetails !== "") {
      obj.reasonDetails = message.reasonDetails;
    }
    if (message.languageCode !== "") {
      obj.languageCode = message.languageCode;
    }
    return obj;
  },

  create(base?: DeepPartial<PlayerReport>): PlayerReport {
    return PlayerReport.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PlayerReport>): PlayerReport {
    const message = createBasePlayerReport();
    message.locationName = object.locationName ?? "";
    message.reasons = object.reasons?.map((e) => e) || [];
    message.reasonDetails = object.reasonDetails ?? "";
    message.languageCode = object.languageCode ?? "";
    return message;
  },
};

function createBaseImpression(): Impression {
  return { locationName: "", impressionType: 0, gameObjectType: 0 };
}

export const Impression: MessageFns<Impression> = {
  encode(message: Impression, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.locationName !== "") {
      writer.uint32(10).string(message.locationName);
    }
    if (message.impressionType !== 0) {
      writer.uint32(16).int32(message.impressionType);
    }
    if (message.gameObjectType !== 0) {
      writer.uint32(32).int32(message.gameObjectType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Impression {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImpression();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.locationName = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.impressionType = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.gameObjectType = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Impression {
    return {
      locationName: isSet(object.locationName) ? globalThis.String(object.locationName) : "",
      impressionType: isSet(object.impressionType) ? impression_ImpressionTypeFromJSON(object.impressionType) : 0,
      gameObjectType: isSet(object.gameObjectType) ? globalThis.Number(object.gameObjectType) : 0,
    };
  },

  toJSON(message: Impression): unknown {
    const obj: any = {};
    if (message.locationName !== "") {
      obj.locationName = message.locationName;
    }
    if (message.impressionType !== 0) {
      obj.impressionType = impression_ImpressionTypeToJSON(message.impressionType);
    }
    if (message.gameObjectType !== 0) {
      obj.gameObjectType = Math.round(message.gameObjectType);
    }
    return obj;
  },

  create(base?: DeepPartial<Impression>): Impression {
    return Impression.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Impression>): Impression {
    const message = createBaseImpression();
    message.locationName = object.locationName ?? "";
    message.impressionType = object.impressionType ?? 0;
    message.gameObjectType = object.gameObjectType ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
