// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/maps/regionlookup/v1alpha/region_search_values.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { LatLng } from "../../../type/latlng.js";

export const protobufPackage = "google.maps.regionlookup.v1alpha";

/**
 * Region Search Values.
 *
 * Desired search values of a single region.
 *
 * Location must be specified by one of the following: address, latlng or
 * place_id. If none is specified, an INVALID_ARGUMENT error is returned.
 * region_code must also be provided when address is specified.
 *
 * The fields address, latlng and place_id specify a location contained inside
 * the region to match. For example if address is "1600 Amphitheatre Pkwy,
 * Mountain View, CA 94043" the API returns the following matched_place_id
 * results when the following place_types are specified:
 *
 * place_type:                   matched_place_id results:
 * postal_code                   Place ID for "94043"
 * administrative_area_level_1   Place ID for The State of California
 * administrative_area_level_2   Place ID for Santa Clara County
 * etc.
 *
 * More Examples:
 *
 * If latlng is "latitude: 37.4220656 longitude: -122.0862784" and place_type
 * is "locality", the result contains the Place ID (of type "locality") for
 * that location (the Place ID of Mountain View, CA, in this case).
 *
 * If place_id is "ChIJj61dQgK6j4AR4GeTYWZsKWw" (Place ID for Google office in
 * Mountain view, CA) and place_type is "locality", the result contains the
 * Place ID (of type "locality") for that location (the Place ID of Mountain
 * View, CA, in this case).
 *
 * If no match is found, matched_place_id is not set.
 *
 * Candidates Place IDs are returned when a search finds multiple Place
 * IDs for the location specified. For example if the API is searching for
 * region Place IDs of type neighboorhood for a location that is contained
 * within multiple neighboords. The Place Ids will be returned as candidates in
 * the candidate_place_ids field.
 *
 * Next available tag: 10
 */
export interface RegionSearchValue {
  /**
   * The unstructured street address that is contained inside a region to
   * match. region_code is required when address is specified.
   */
  address?:
    | string
    | undefined;
  /** The latitude and longitude that is contained inside a region to match. */
  latlng?:
    | LatLng
    | undefined;
  /** The Place ID that is contained inside a region to match. */
  placeId?:
    | string
    | undefined;
  /** Required. The type of the place to match. */
  placeType: RegionSearchValue_PlaceType;
  /**
   * The BCP-47 language code, such as "en-US" or "sr-Latn", corresponding to
   * the language in which the place name and address is requested. If none is
   * requested, then it defaults to English.
   */
  languageCode: string;
  /**
   * Two-letter ISO-3166 country/region code for the location you're trying to
   * match. region_code is required when address is specified.
   */
  regionCode: string;
}

/** Possible place types to match to. */
export enum RegionSearchValue_PlaceType {
  /** PLACE_TYPE_UNSPECIFIED - Default value. This value is unused. */
  PLACE_TYPE_UNSPECIFIED = 0,
  /** POSTAL_CODE - Postal code. */
  POSTAL_CODE = 1,
  /** ADMINISTRATIVE_AREA_LEVEL_1 - Administrative area level 1 (State in the US). */
  ADMINISTRATIVE_AREA_LEVEL_1 = 2,
  /** ADMINISTRATIVE_AREA_LEVEL_2 - Administrative area level 2 (County in the US). */
  ADMINISTRATIVE_AREA_LEVEL_2 = 3,
  /** LOCALITY - Locality (City). */
  LOCALITY = 4,
  /** NEIGHBORHOOD - Neighborhood. */
  NEIGHBORHOOD = 5,
  /** COUNTRY - Country. */
  COUNTRY = 6,
  /** SUBLOCALITY - Sublocality. */
  SUBLOCALITY = 7,
  /** ADMINISTRATIVE_AREA_LEVEL_3 - Administrative area level 3. */
  ADMINISTRATIVE_AREA_LEVEL_3 = 8,
  /** ADMINISTRATIVE_AREA_LEVEL_4 - Administrative area level 4. */
  ADMINISTRATIVE_AREA_LEVEL_4 = 9,
  /** SCHOOL_DISTRICT - School district. */
  SCHOOL_DISTRICT = 10,
  UNRECOGNIZED = -1,
}

export function regionSearchValue_PlaceTypeFromJSON(object: any): RegionSearchValue_PlaceType {
  switch (object) {
    case 0:
    case "PLACE_TYPE_UNSPECIFIED":
      return RegionSearchValue_PlaceType.PLACE_TYPE_UNSPECIFIED;
    case 1:
    case "POSTAL_CODE":
      return RegionSearchValue_PlaceType.POSTAL_CODE;
    case 2:
    case "ADMINISTRATIVE_AREA_LEVEL_1":
      return RegionSearchValue_PlaceType.ADMINISTRATIVE_AREA_LEVEL_1;
    case 3:
    case "ADMINISTRATIVE_AREA_LEVEL_2":
      return RegionSearchValue_PlaceType.ADMINISTRATIVE_AREA_LEVEL_2;
    case 4:
    case "LOCALITY":
      return RegionSearchValue_PlaceType.LOCALITY;
    case 5:
    case "NEIGHBORHOOD":
      return RegionSearchValue_PlaceType.NEIGHBORHOOD;
    case 6:
    case "COUNTRY":
      return RegionSearchValue_PlaceType.COUNTRY;
    case 7:
    case "SUBLOCALITY":
      return RegionSearchValue_PlaceType.SUBLOCALITY;
    case 8:
    case "ADMINISTRATIVE_AREA_LEVEL_3":
      return RegionSearchValue_PlaceType.ADMINISTRATIVE_AREA_LEVEL_3;
    case 9:
    case "ADMINISTRATIVE_AREA_LEVEL_4":
      return RegionSearchValue_PlaceType.ADMINISTRATIVE_AREA_LEVEL_4;
    case 10:
    case "SCHOOL_DISTRICT":
      return RegionSearchValue_PlaceType.SCHOOL_DISTRICT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return RegionSearchValue_PlaceType.UNRECOGNIZED;
  }
}

export function regionSearchValue_PlaceTypeToJSON(object: RegionSearchValue_PlaceType): string {
  switch (object) {
    case RegionSearchValue_PlaceType.PLACE_TYPE_UNSPECIFIED:
      return "PLACE_TYPE_UNSPECIFIED";
    case RegionSearchValue_PlaceType.POSTAL_CODE:
      return "POSTAL_CODE";
    case RegionSearchValue_PlaceType.ADMINISTRATIVE_AREA_LEVEL_1:
      return "ADMINISTRATIVE_AREA_LEVEL_1";
    case RegionSearchValue_PlaceType.ADMINISTRATIVE_AREA_LEVEL_2:
      return "ADMINISTRATIVE_AREA_LEVEL_2";
    case RegionSearchValue_PlaceType.LOCALITY:
      return "LOCALITY";
    case RegionSearchValue_PlaceType.NEIGHBORHOOD:
      return "NEIGHBORHOOD";
    case RegionSearchValue_PlaceType.COUNTRY:
      return "COUNTRY";
    case RegionSearchValue_PlaceType.SUBLOCALITY:
      return "SUBLOCALITY";
    case RegionSearchValue_PlaceType.ADMINISTRATIVE_AREA_LEVEL_3:
      return "ADMINISTRATIVE_AREA_LEVEL_3";
    case RegionSearchValue_PlaceType.ADMINISTRATIVE_AREA_LEVEL_4:
      return "ADMINISTRATIVE_AREA_LEVEL_4";
    case RegionSearchValue_PlaceType.SCHOOL_DISTRICT:
      return "SCHOOL_DISTRICT";
    case RegionSearchValue_PlaceType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseRegionSearchValue(): RegionSearchValue {
  return { address: undefined, latlng: undefined, placeId: undefined, placeType: 0, languageCode: "", regionCode: "" };
}

export const RegionSearchValue: MessageFns<RegionSearchValue> = {
  encode(message: RegionSearchValue, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.address !== undefined) {
      writer.uint32(10).string(message.address);
    }
    if (message.latlng !== undefined) {
      LatLng.encode(message.latlng, writer.uint32(18).fork()).join();
    }
    if (message.placeId !== undefined) {
      writer.uint32(26).string(message.placeId);
    }
    if (message.placeType !== 0) {
      writer.uint32(48).int32(message.placeType);
    }
    if (message.languageCode !== "") {
      writer.uint32(58).string(message.languageCode);
    }
    if (message.regionCode !== "") {
      writer.uint32(66).string(message.regionCode);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RegionSearchValue {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRegionSearchValue();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.address = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.latlng = LatLng.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.placeId = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.placeType = reader.int32() as any;
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.languageCode = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.regionCode = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RegionSearchValue {
    return {
      address: isSet(object.address) ? globalThis.String(object.address) : undefined,
      latlng: isSet(object.latlng) ? LatLng.fromJSON(object.latlng) : undefined,
      placeId: isSet(object.placeId) ? globalThis.String(object.placeId) : undefined,
      placeType: isSet(object.placeType) ? regionSearchValue_PlaceTypeFromJSON(object.placeType) : 0,
      languageCode: isSet(object.languageCode) ? globalThis.String(object.languageCode) : "",
      regionCode: isSet(object.regionCode) ? globalThis.String(object.regionCode) : "",
    };
  },

  toJSON(message: RegionSearchValue): unknown {
    const obj: any = {};
    if (message.address !== undefined) {
      obj.address = message.address;
    }
    if (message.latlng !== undefined) {
      obj.latlng = LatLng.toJSON(message.latlng);
    }
    if (message.placeId !== undefined) {
      obj.placeId = message.placeId;
    }
    if (message.placeType !== 0) {
      obj.placeType = regionSearchValue_PlaceTypeToJSON(message.placeType);
    }
    if (message.languageCode !== "") {
      obj.languageCode = message.languageCode;
    }
    if (message.regionCode !== "") {
      obj.regionCode = message.regionCode;
    }
    return obj;
  },

  create(base?: DeepPartial<RegionSearchValue>): RegionSearchValue {
    return RegionSearchValue.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RegionSearchValue>): RegionSearchValue {
    const message = createBaseRegionSearchValue();
    message.address = object.address ?? undefined;
    message.latlng = (object.latlng !== undefined && object.latlng !== null)
      ? LatLng.fromPartial(object.latlng)
      : undefined;
    message.placeId = object.placeId ?? undefined;
    message.placeType = object.placeType ?? 0;
    message.languageCode = object.languageCode ?? "";
    message.regionCode = object.regionCode ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
