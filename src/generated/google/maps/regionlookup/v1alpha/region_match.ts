// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/maps/regionlookup/v1alpha/region_match.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.maps.regionlookup.v1alpha";

/**
 * Region Match.
 *
 * Next available tag: 5
 */
export interface RegionMatch {
  /**
   * Place ID of the region that is matched. If region is found, this field is
   * not set.
   */
  matchedPlaceId: string;
  /** Region candidate IDs. Up to three candidates may be returned. */
  candidatePlaceIds: string[];
  /** Matching debug information for when no match is found. */
  debugInfo: string;
}

function createBaseRegionMatch(): RegionMatch {
  return { matchedPlaceId: "", candidatePlaceIds: [], debugInfo: "" };
}

export const RegionMatch: MessageFns<RegionMatch> = {
  encode(message: RegionMatch, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.matchedPlaceId !== "") {
      writer.uint32(10).string(message.matchedPlaceId);
    }
    for (const v of message.candidatePlaceIds) {
      writer.uint32(18).string(v!);
    }
    if (message.debugInfo !== "") {
      writer.uint32(26).string(message.debugInfo);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RegionMatch {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRegionMatch();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.matchedPlaceId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.candidatePlaceIds.push(reader.string());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.debugInfo = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RegionMatch {
    return {
      matchedPlaceId: isSet(object.matchedPlaceId) ? globalThis.String(object.matchedPlaceId) : "",
      candidatePlaceIds: globalThis.Array.isArray(object?.candidatePlaceIds)
        ? object.candidatePlaceIds.map((e: any) => globalThis.String(e))
        : [],
      debugInfo: isSet(object.debugInfo) ? globalThis.String(object.debugInfo) : "",
    };
  },

  toJSON(message: RegionMatch): unknown {
    const obj: any = {};
    if (message.matchedPlaceId !== "") {
      obj.matchedPlaceId = message.matchedPlaceId;
    }
    if (message.candidatePlaceIds?.length) {
      obj.candidatePlaceIds = message.candidatePlaceIds;
    }
    if (message.debugInfo !== "") {
      obj.debugInfo = message.debugInfo;
    }
    return obj;
  },

  create(base?: DeepPartial<RegionMatch>): RegionMatch {
    return RegionMatch.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RegionMatch>): RegionMatch {
    const message = createBaseRegionMatch();
    message.matchedPlaceId = object.matchedPlaceId ?? "";
    message.candidatePlaceIds = object.candidatePlaceIds?.map((e) => e) || [];
    message.debugInfo = object.debugInfo ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
