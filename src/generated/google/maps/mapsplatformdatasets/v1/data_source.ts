// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/maps/mapsplatformdatasets/v1/data_source.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.maps.mapsplatformdatasets.v1";

/** The format of the file being uploaded. */
export enum FileFormat {
  /** FILE_FORMAT_UNSPECIFIED - Unspecified file format. */
  FILE_FORMAT_UNSPECIFIED = 0,
  /** FILE_FORMAT_GEOJSON - GeoJson file. */
  FILE_FORMAT_GEOJSON = 1,
  /** FILE_FORMAT_KML - KML file. */
  FILE_FORMAT_KML = 2,
  /** FILE_FORMAT_CSV - CSV file. */
  FILE_FORMAT_CSV = 3,
  UNRECOGNIZED = -1,
}

export function fileFormatFromJSON(object: any): FileFormat {
  switch (object) {
    case 0:
    case "FILE_FORMAT_UNSPECIFIED":
      return FileFormat.FILE_FORMAT_UNSPECIFIED;
    case 1:
    case "FILE_FORMAT_GEOJSON":
      return FileFormat.FILE_FORMAT_GEOJSON;
    case 2:
    case "FILE_FORMAT_KML":
      return FileFormat.FILE_FORMAT_KML;
    case 3:
    case "FILE_FORMAT_CSV":
      return FileFormat.FILE_FORMAT_CSV;
    case -1:
    case "UNRECOGNIZED":
    default:
      return FileFormat.UNRECOGNIZED;
  }
}

export function fileFormatToJSON(object: FileFormat): string {
  switch (object) {
    case FileFormat.FILE_FORMAT_UNSPECIFIED:
      return "FILE_FORMAT_UNSPECIFIED";
    case FileFormat.FILE_FORMAT_GEOJSON:
      return "FILE_FORMAT_GEOJSON";
    case FileFormat.FILE_FORMAT_KML:
      return "FILE_FORMAT_KML";
    case FileFormat.FILE_FORMAT_CSV:
      return "FILE_FORMAT_CSV";
    case FileFormat.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** The details about the data source when it is a local file. */
export interface LocalFileSource {
  /** The file name of the uploaded file. */
  filename: string;
  /** The format of the file that is being uploaded. */
  fileFormat: FileFormat;
}

/** The details about the data source when it is in Google Cloud Storage. */
export interface GcsSource {
  /** Source data URI. For example, `gs://my_bucket/my_object`. */
  inputUri: string;
  /**
   * The file format of the Google Cloud Storage object. This is used mainly for
   * validation.
   */
  fileFormat: FileFormat;
}

function createBaseLocalFileSource(): LocalFileSource {
  return { filename: "", fileFormat: 0 };
}

export const LocalFileSource: MessageFns<LocalFileSource> = {
  encode(message: LocalFileSource, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.filename !== "") {
      writer.uint32(10).string(message.filename);
    }
    if (message.fileFormat !== 0) {
      writer.uint32(16).int32(message.fileFormat);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LocalFileSource {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLocalFileSource();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.filename = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.fileFormat = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LocalFileSource {
    return {
      filename: isSet(object.filename) ? globalThis.String(object.filename) : "",
      fileFormat: isSet(object.fileFormat) ? fileFormatFromJSON(object.fileFormat) : 0,
    };
  },

  toJSON(message: LocalFileSource): unknown {
    const obj: any = {};
    if (message.filename !== "") {
      obj.filename = message.filename;
    }
    if (message.fileFormat !== 0) {
      obj.fileFormat = fileFormatToJSON(message.fileFormat);
    }
    return obj;
  },

  create(base?: DeepPartial<LocalFileSource>): LocalFileSource {
    return LocalFileSource.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LocalFileSource>): LocalFileSource {
    const message = createBaseLocalFileSource();
    message.filename = object.filename ?? "";
    message.fileFormat = object.fileFormat ?? 0;
    return message;
  },
};

function createBaseGcsSource(): GcsSource {
  return { inputUri: "", fileFormat: 0 };
}

export const GcsSource: MessageFns<GcsSource> = {
  encode(message: GcsSource, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.inputUri !== "") {
      writer.uint32(10).string(message.inputUri);
    }
    if (message.fileFormat !== 0) {
      writer.uint32(16).int32(message.fileFormat);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GcsSource {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGcsSource();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.inputUri = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.fileFormat = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GcsSource {
    return {
      inputUri: isSet(object.inputUri) ? globalThis.String(object.inputUri) : "",
      fileFormat: isSet(object.fileFormat) ? fileFormatFromJSON(object.fileFormat) : 0,
    };
  },

  toJSON(message: GcsSource): unknown {
    const obj: any = {};
    if (message.inputUri !== "") {
      obj.inputUri = message.inputUri;
    }
    if (message.fileFormat !== 0) {
      obj.fileFormat = fileFormatToJSON(message.fileFormat);
    }
    return obj;
  },

  create(base?: DeepPartial<GcsSource>): GcsSource {
    return GcsSource.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GcsSource>): GcsSource {
    const message = createBaseGcsSource();
    message.inputUri = object.inputUri ?? "";
    message.fileFormat = object.fileFormat ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
