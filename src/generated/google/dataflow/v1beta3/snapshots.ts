// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/dataflow/v1beta3/snapshots.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Duration } from "../../protobuf/duration.js";
import { Timestamp } from "../../protobuf/timestamp.js";

export const protobufPackage = "google.dataflow.v1beta3";

/** Snapshot state. */
export enum SnapshotState {
  /** UNKNOWN_SNAPSHOT_STATE - Unknown state. */
  UNKNOWN_SNAPSHOT_STATE = 0,
  /**
   * PENDING - Snapshot intent to create has been persisted, snapshotting of state has not
   * yet started.
   */
  PENDING = 1,
  /** RUNNING - Snapshotting is being performed. */
  RUNNING = 2,
  /** READY - Snapshot has been created and is ready to be used. */
  READY = 3,
  /** FAILED - Snapshot failed to be created. */
  FAILED = 4,
  /** DELETED - Snapshot has been deleted. */
  DELETED = 5,
  UNRECOGNIZED = -1,
}

export function snapshotStateFromJSON(object: any): SnapshotState {
  switch (object) {
    case 0:
    case "UNKNOWN_SNAPSHOT_STATE":
      return SnapshotState.UNKNOWN_SNAPSHOT_STATE;
    case 1:
    case "PENDING":
      return SnapshotState.PENDING;
    case 2:
    case "RUNNING":
      return SnapshotState.RUNNING;
    case 3:
    case "READY":
      return SnapshotState.READY;
    case 4:
    case "FAILED":
      return SnapshotState.FAILED;
    case 5:
    case "DELETED":
      return SnapshotState.DELETED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SnapshotState.UNRECOGNIZED;
  }
}

export function snapshotStateToJSON(object: SnapshotState): string {
  switch (object) {
    case SnapshotState.UNKNOWN_SNAPSHOT_STATE:
      return "UNKNOWN_SNAPSHOT_STATE";
    case SnapshotState.PENDING:
      return "PENDING";
    case SnapshotState.RUNNING:
      return "RUNNING";
    case SnapshotState.READY:
      return "READY";
    case SnapshotState.FAILED:
      return "FAILED";
    case SnapshotState.DELETED:
      return "DELETED";
    case SnapshotState.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Represents a Pubsub snapshot. */
export interface PubsubSnapshotMetadata {
  /** The name of the Pubsub topic. */
  topicName: string;
  /** The name of the Pubsub snapshot. */
  snapshotName: string;
  /** The expire time of the Pubsub snapshot. */
  expireTime: Date | undefined;
}

/** Represents a snapshot of a job. */
export interface Snapshot {
  /** The unique ID of this snapshot. */
  id: string;
  /** The project this snapshot belongs to. */
  projectId: string;
  /** The job this snapshot was created from. */
  sourceJobId: string;
  /** The time this snapshot was created. */
  creationTime:
    | Date
    | undefined;
  /** The time after which this snapshot will be automatically deleted. */
  ttl:
    | Duration
    | undefined;
  /** State of the snapshot. */
  state: SnapshotState;
  /** Pub/Sub snapshot metadata. */
  pubsubMetadata: PubsubSnapshotMetadata[];
  /** User specified description of the snapshot. Maybe empty. */
  description: string;
  /**
   * The disk byte size of the snapshot. Only available for snapshots in READY
   * state.
   */
  diskSizeBytes: Long;
  /** Cloud region where this snapshot lives in, e.g., "us-central1". */
  region: string;
}

/** Request to get information about a snapshot */
export interface GetSnapshotRequest {
  /** The ID of the Cloud Platform project that the snapshot belongs to. */
  projectId: string;
  /** The ID of the snapshot. */
  snapshotId: string;
  /** The location that contains this snapshot. */
  location: string;
}

/** Request to delete a snapshot. */
export interface DeleteSnapshotRequest {
  /** The ID of the Cloud Platform project that the snapshot belongs to. */
  projectId: string;
  /** The ID of the snapshot. */
  snapshotId: string;
  /** The location that contains this snapshot. */
  location: string;
}

/** Response from deleting a snapshot. */
export interface DeleteSnapshotResponse {
}

/** Request to list snapshots. */
export interface ListSnapshotsRequest {
  /** The project ID to list snapshots for. */
  projectId: string;
  /** If specified, list snapshots created from this job. */
  jobId: string;
  /** The location to list snapshots in. */
  location: string;
}

/** List of snapshots. */
export interface ListSnapshotsResponse {
  /** Returned snapshots. */
  snapshots: Snapshot[];
}

function createBasePubsubSnapshotMetadata(): PubsubSnapshotMetadata {
  return { topicName: "", snapshotName: "", expireTime: undefined };
}

export const PubsubSnapshotMetadata: MessageFns<PubsubSnapshotMetadata> = {
  encode(message: PubsubSnapshotMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.topicName !== "") {
      writer.uint32(10).string(message.topicName);
    }
    if (message.snapshotName !== "") {
      writer.uint32(18).string(message.snapshotName);
    }
    if (message.expireTime !== undefined) {
      Timestamp.encode(toTimestamp(message.expireTime), writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PubsubSnapshotMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePubsubSnapshotMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.topicName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.snapshotName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.expireTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PubsubSnapshotMetadata {
    return {
      topicName: isSet(object.topicName) ? globalThis.String(object.topicName) : "",
      snapshotName: isSet(object.snapshotName) ? globalThis.String(object.snapshotName) : "",
      expireTime: isSet(object.expireTime) ? fromJsonTimestamp(object.expireTime) : undefined,
    };
  },

  toJSON(message: PubsubSnapshotMetadata): unknown {
    const obj: any = {};
    if (message.topicName !== "") {
      obj.topicName = message.topicName;
    }
    if (message.snapshotName !== "") {
      obj.snapshotName = message.snapshotName;
    }
    if (message.expireTime !== undefined) {
      obj.expireTime = message.expireTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<PubsubSnapshotMetadata>): PubsubSnapshotMetadata {
    return PubsubSnapshotMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PubsubSnapshotMetadata>): PubsubSnapshotMetadata {
    const message = createBasePubsubSnapshotMetadata();
    message.topicName = object.topicName ?? "";
    message.snapshotName = object.snapshotName ?? "";
    message.expireTime = object.expireTime ?? undefined;
    return message;
  },
};

function createBaseSnapshot(): Snapshot {
  return {
    id: "",
    projectId: "",
    sourceJobId: "",
    creationTime: undefined,
    ttl: undefined,
    state: 0,
    pubsubMetadata: [],
    description: "",
    diskSizeBytes: Long.ZERO,
    region: "",
  };
}

export const Snapshot: MessageFns<Snapshot> = {
  encode(message: Snapshot, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.projectId !== "") {
      writer.uint32(18).string(message.projectId);
    }
    if (message.sourceJobId !== "") {
      writer.uint32(26).string(message.sourceJobId);
    }
    if (message.creationTime !== undefined) {
      Timestamp.encode(toTimestamp(message.creationTime), writer.uint32(34).fork()).join();
    }
    if (message.ttl !== undefined) {
      Duration.encode(message.ttl, writer.uint32(42).fork()).join();
    }
    if (message.state !== 0) {
      writer.uint32(48).int32(message.state);
    }
    for (const v of message.pubsubMetadata) {
      PubsubSnapshotMetadata.encode(v!, writer.uint32(58).fork()).join();
    }
    if (message.description !== "") {
      writer.uint32(66).string(message.description);
    }
    if (!message.diskSizeBytes.equals(Long.ZERO)) {
      writer.uint32(72).int64(message.diskSizeBytes.toString());
    }
    if (message.region !== "") {
      writer.uint32(82).string(message.region);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Snapshot {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSnapshot();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.sourceJobId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.creationTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.ttl = Duration.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.pubsubMetadata.push(PubsubSnapshotMetadata.decode(reader, reader.uint32()));
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.description = reader.string();
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.diskSizeBytes = Long.fromString(reader.int64().toString());
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.region = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Snapshot {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      projectId: isSet(object.projectId) ? globalThis.String(object.projectId) : "",
      sourceJobId: isSet(object.sourceJobId) ? globalThis.String(object.sourceJobId) : "",
      creationTime: isSet(object.creationTime) ? fromJsonTimestamp(object.creationTime) : undefined,
      ttl: isSet(object.ttl) ? Duration.fromJSON(object.ttl) : undefined,
      state: isSet(object.state) ? snapshotStateFromJSON(object.state) : 0,
      pubsubMetadata: globalThis.Array.isArray(object?.pubsubMetadata)
        ? object.pubsubMetadata.map((e: any) => PubsubSnapshotMetadata.fromJSON(e))
        : [],
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      diskSizeBytes: isSet(object.diskSizeBytes) ? Long.fromValue(object.diskSizeBytes) : Long.ZERO,
      region: isSet(object.region) ? globalThis.String(object.region) : "",
    };
  },

  toJSON(message: Snapshot): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.sourceJobId !== "") {
      obj.sourceJobId = message.sourceJobId;
    }
    if (message.creationTime !== undefined) {
      obj.creationTime = message.creationTime.toISOString();
    }
    if (message.ttl !== undefined) {
      obj.ttl = Duration.toJSON(message.ttl);
    }
    if (message.state !== 0) {
      obj.state = snapshotStateToJSON(message.state);
    }
    if (message.pubsubMetadata?.length) {
      obj.pubsubMetadata = message.pubsubMetadata.map((e) => PubsubSnapshotMetadata.toJSON(e));
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (!message.diskSizeBytes.equals(Long.ZERO)) {
      obj.diskSizeBytes = (message.diskSizeBytes || Long.ZERO).toString();
    }
    if (message.region !== "") {
      obj.region = message.region;
    }
    return obj;
  },

  create(base?: DeepPartial<Snapshot>): Snapshot {
    return Snapshot.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Snapshot>): Snapshot {
    const message = createBaseSnapshot();
    message.id = object.id ?? "";
    message.projectId = object.projectId ?? "";
    message.sourceJobId = object.sourceJobId ?? "";
    message.creationTime = object.creationTime ?? undefined;
    message.ttl = (object.ttl !== undefined && object.ttl !== null) ? Duration.fromPartial(object.ttl) : undefined;
    message.state = object.state ?? 0;
    message.pubsubMetadata = object.pubsubMetadata?.map((e) => PubsubSnapshotMetadata.fromPartial(e)) || [];
    message.description = object.description ?? "";
    message.diskSizeBytes = (object.diskSizeBytes !== undefined && object.diskSizeBytes !== null)
      ? Long.fromValue(object.diskSizeBytes)
      : Long.ZERO;
    message.region = object.region ?? "";
    return message;
  },
};

function createBaseGetSnapshotRequest(): GetSnapshotRequest {
  return { projectId: "", snapshotId: "", location: "" };
}

export const GetSnapshotRequest: MessageFns<GetSnapshotRequest> = {
  encode(message: GetSnapshotRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.snapshotId !== "") {
      writer.uint32(18).string(message.snapshotId);
    }
    if (message.location !== "") {
      writer.uint32(26).string(message.location);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetSnapshotRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSnapshotRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.snapshotId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.location = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetSnapshotRequest {
    return {
      projectId: isSet(object.projectId) ? globalThis.String(object.projectId) : "",
      snapshotId: isSet(object.snapshotId) ? globalThis.String(object.snapshotId) : "",
      location: isSet(object.location) ? globalThis.String(object.location) : "",
    };
  },

  toJSON(message: GetSnapshotRequest): unknown {
    const obj: any = {};
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.snapshotId !== "") {
      obj.snapshotId = message.snapshotId;
    }
    if (message.location !== "") {
      obj.location = message.location;
    }
    return obj;
  },

  create(base?: DeepPartial<GetSnapshotRequest>): GetSnapshotRequest {
    return GetSnapshotRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetSnapshotRequest>): GetSnapshotRequest {
    const message = createBaseGetSnapshotRequest();
    message.projectId = object.projectId ?? "";
    message.snapshotId = object.snapshotId ?? "";
    message.location = object.location ?? "";
    return message;
  },
};

function createBaseDeleteSnapshotRequest(): DeleteSnapshotRequest {
  return { projectId: "", snapshotId: "", location: "" };
}

export const DeleteSnapshotRequest: MessageFns<DeleteSnapshotRequest> = {
  encode(message: DeleteSnapshotRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.snapshotId !== "") {
      writer.uint32(18).string(message.snapshotId);
    }
    if (message.location !== "") {
      writer.uint32(26).string(message.location);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteSnapshotRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteSnapshotRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.snapshotId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.location = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteSnapshotRequest {
    return {
      projectId: isSet(object.projectId) ? globalThis.String(object.projectId) : "",
      snapshotId: isSet(object.snapshotId) ? globalThis.String(object.snapshotId) : "",
      location: isSet(object.location) ? globalThis.String(object.location) : "",
    };
  },

  toJSON(message: DeleteSnapshotRequest): unknown {
    const obj: any = {};
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.snapshotId !== "") {
      obj.snapshotId = message.snapshotId;
    }
    if (message.location !== "") {
      obj.location = message.location;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteSnapshotRequest>): DeleteSnapshotRequest {
    return DeleteSnapshotRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteSnapshotRequest>): DeleteSnapshotRequest {
    const message = createBaseDeleteSnapshotRequest();
    message.projectId = object.projectId ?? "";
    message.snapshotId = object.snapshotId ?? "";
    message.location = object.location ?? "";
    return message;
  },
};

function createBaseDeleteSnapshotResponse(): DeleteSnapshotResponse {
  return {};
}

export const DeleteSnapshotResponse: MessageFns<DeleteSnapshotResponse> = {
  encode(_: DeleteSnapshotResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteSnapshotResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteSnapshotResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): DeleteSnapshotResponse {
    return {};
  },

  toJSON(_: DeleteSnapshotResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<DeleteSnapshotResponse>): DeleteSnapshotResponse {
    return DeleteSnapshotResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<DeleteSnapshotResponse>): DeleteSnapshotResponse {
    const message = createBaseDeleteSnapshotResponse();
    return message;
  },
};

function createBaseListSnapshotsRequest(): ListSnapshotsRequest {
  return { projectId: "", jobId: "", location: "" };
}

export const ListSnapshotsRequest: MessageFns<ListSnapshotsRequest> = {
  encode(message: ListSnapshotsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.jobId !== "") {
      writer.uint32(26).string(message.jobId);
    }
    if (message.location !== "") {
      writer.uint32(18).string(message.location);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListSnapshotsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSnapshotsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.jobId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.location = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListSnapshotsRequest {
    return {
      projectId: isSet(object.projectId) ? globalThis.String(object.projectId) : "",
      jobId: isSet(object.jobId) ? globalThis.String(object.jobId) : "",
      location: isSet(object.location) ? globalThis.String(object.location) : "",
    };
  },

  toJSON(message: ListSnapshotsRequest): unknown {
    const obj: any = {};
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.jobId !== "") {
      obj.jobId = message.jobId;
    }
    if (message.location !== "") {
      obj.location = message.location;
    }
    return obj;
  },

  create(base?: DeepPartial<ListSnapshotsRequest>): ListSnapshotsRequest {
    return ListSnapshotsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListSnapshotsRequest>): ListSnapshotsRequest {
    const message = createBaseListSnapshotsRequest();
    message.projectId = object.projectId ?? "";
    message.jobId = object.jobId ?? "";
    message.location = object.location ?? "";
    return message;
  },
};

function createBaseListSnapshotsResponse(): ListSnapshotsResponse {
  return { snapshots: [] };
}

export const ListSnapshotsResponse: MessageFns<ListSnapshotsResponse> = {
  encode(message: ListSnapshotsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.snapshots) {
      Snapshot.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListSnapshotsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSnapshotsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.snapshots.push(Snapshot.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListSnapshotsResponse {
    return {
      snapshots: globalThis.Array.isArray(object?.snapshots)
        ? object.snapshots.map((e: any) => Snapshot.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ListSnapshotsResponse): unknown {
    const obj: any = {};
    if (message.snapshots?.length) {
      obj.snapshots = message.snapshots.map((e) => Snapshot.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ListSnapshotsResponse>): ListSnapshotsResponse {
    return ListSnapshotsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListSnapshotsResponse>): ListSnapshotsResponse {
    const message = createBaseListSnapshotsResponse();
    message.snapshots = object.snapshots?.map((e) => Snapshot.fromPartial(e)) || [];
    return message;
  },
};

/** Provides methods to manage snapshots of Google Cloud Dataflow jobs. */
export type SnapshotsV1Beta3Definition = typeof SnapshotsV1Beta3Definition;
export const SnapshotsV1Beta3Definition = {
  name: "SnapshotsV1Beta3",
  fullName: "google.dataflow.v1beta3.SnapshotsV1Beta3",
  methods: {
    /** Gets information about a snapshot. */
    getSnapshot: {
      name: "GetSnapshot",
      requestType: GetSnapshotRequest,
      requestStream: false,
      responseType: Snapshot,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              129,
              1,
              90,
              53,
              18,
              51,
              47,
              118,
              49,
              98,
              51,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              95,
              105,
              100,
              125,
              47,
              115,
              110,
              97,
              112,
              115,
              104,
              111,
              116,
              115,
              47,
              123,
              115,
              110,
              97,
              112,
              115,
              104,
              111,
              116,
              95,
              105,
              100,
              125,
              18,
              72,
              47,
              118,
              49,
              98,
              51,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              95,
              105,
              100,
              125,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              123,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              125,
              47,
              115,
              110,
              97,
              112,
              115,
              104,
              111,
              116,
              115,
              47,
              123,
              115,
              110,
              97,
              112,
              115,
              104,
              111,
              116,
              95,
              105,
              100,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes a snapshot. */
    deleteSnapshot: {
      name: "DeleteSnapshot",
      requestType: DeleteSnapshotRequest,
      requestStream: false,
      responseType: DeleteSnapshotResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              115,
              90,
              39,
              42,
              37,
              47,
              118,
              49,
              98,
              51,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              95,
              105,
              100,
              125,
              47,
              115,
              110,
              97,
              112,
              115,
              104,
              111,
              116,
              115,
              42,
              72,
              47,
              118,
              49,
              98,
              51,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              95,
              105,
              100,
              125,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              123,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              125,
              47,
              115,
              110,
              97,
              112,
              115,
              104,
              111,
              116,
              115,
              47,
              123,
              115,
              110,
              97,
              112,
              115,
              104,
              111,
              116,
              95,
              105,
              100,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists snapshots. */
    listSnapshots: {
      name: "ListSnapshots",
      requestType: ListSnapshotsRequest,
      requestStream: false,
      responseType: ListSnapshotsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              177,
              1,
              90,
              60,
              18,
              58,
              47,
              118,
              49,
              98,
              51,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              95,
              105,
              100,
              125,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              123,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              125,
              47,
              115,
              110,
              97,
              112,
              115,
              104,
              111,
              116,
              115,
              90,
              39,
              18,
              37,
              47,
              118,
              49,
              98,
              51,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              95,
              105,
              100,
              125,
              47,
              115,
              110,
              97,
              112,
              115,
              104,
              111,
              116,
              115,
              18,
              72,
              47,
              118,
              49,
              98,
              51,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              95,
              105,
              100,
              125,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              123,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              125,
              47,
              106,
              111,
              98,
              115,
              47,
              123,
              106,
              111,
              98,
              95,
              105,
              100,
              125,
              47,
              115,
              110,
              97,
              112,
              115,
              104,
              111,
              116,
              115,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface SnapshotsV1Beta3ServiceImplementation<CallContextExt = {}> {
  /** Gets information about a snapshot. */
  getSnapshot(request: GetSnapshotRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Snapshot>>;
  /** Deletes a snapshot. */
  deleteSnapshot(
    request: DeleteSnapshotRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<DeleteSnapshotResponse>>;
  /** Lists snapshots. */
  listSnapshots(
    request: ListSnapshotsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListSnapshotsResponse>>;
}

export interface SnapshotsV1Beta3Client<CallOptionsExt = {}> {
  /** Gets information about a snapshot. */
  getSnapshot(request: DeepPartial<GetSnapshotRequest>, options?: CallOptions & CallOptionsExt): Promise<Snapshot>;
  /** Deletes a snapshot. */
  deleteSnapshot(
    request: DeepPartial<DeleteSnapshotRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<DeleteSnapshotResponse>;
  /** Lists snapshots. */
  listSnapshots(
    request: DeepPartial<ListSnapshotsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListSnapshotsResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
