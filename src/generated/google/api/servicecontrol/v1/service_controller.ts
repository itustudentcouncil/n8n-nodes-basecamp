// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/api/servicecontrol/v1/service_controller.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Status } from "../../../rpc/status.js";
import { CheckError } from "./check_error.js";
import { Operation } from "./operation.js";

export const protobufPackage = "google.api.servicecontrol.v1";

/** Request message for the Check method. */
export interface CheckRequest {
  /**
   * The service name as specified in its service configuration. For example,
   * `"pubsub.googleapis.com"`.
   *
   * See
   * [google.api.Service](https://cloud.google.com/service-management/reference/rpc/google.api#google.api.Service)
   * for the definition of a service name.
   */
  serviceName: string;
  /** The operation to be checked. */
  operation:
    | Operation
    | undefined;
  /**
   * Specifies which version of service configuration should be used to process
   * the request.
   *
   * If unspecified or no matching version can be found, the
   * latest one will be used.
   */
  serviceConfigId: string;
}

/** Response message for the Check method. */
export interface CheckResponse {
  /**
   * The same operation_id value used in the
   * [CheckRequest][google.api.servicecontrol.v1.CheckRequest]. Used for logging
   * and diagnostics purposes.
   */
  operationId: string;
  /**
   * Indicate the decision of the check.
   *
   * If no check errors are present, the service should process the operation.
   * Otherwise the service should use the list of errors to determine the
   * appropriate action.
   */
  checkErrors: CheckError[];
  /** The actual config id used to process the request. */
  serviceConfigId: string;
  /** The current service rollout id used to process the request. */
  serviceRolloutId: string;
  /** Feedback data returned from the server during processing a Check request. */
  checkInfo: CheckResponse_CheckInfo | undefined;
}

/** Contains additional information about the check operation. */
export interface CheckResponse_CheckInfo {
  /**
   * A list of fields and label keys that are ignored by the server.
   * The client doesn't need to send them for following requests to improve
   * performance and allow better aggregation.
   */
  unusedArguments: string[];
  /** Consumer info of this check. */
  consumerInfo:
    | CheckResponse_ConsumerInfo
    | undefined;
  /**
   * The unique id of the api key in the format of "apikey:<UID>".
   * This field will be populated when the consumer passed to Service Control
   * is an API key and all the API key related validations are successful.
   */
  apiKeyUid: string;
}

/** `ConsumerInfo` provides information about the consumer. */
export interface CheckResponse_ConsumerInfo {
  /**
   * The Google cloud project number, e.g. 1234567890. A value of 0 indicates
   * no project number is found.
   *
   * NOTE: This field is deprecated after we support flexible consumer
   * id. New code should not depend on this field anymore.
   */
  projectNumber: Long;
  /**
   * The type of the consumer which should have been defined in
   * [Google Resource Manager](https://cloud.google.com/resource-manager/).
   */
  type: CheckResponse_ConsumerInfo_ConsumerType;
  /**
   * The consumer identity number, can be Google cloud project number, folder
   * number or organization number e.g. 1234567890. A value of 0 indicates no
   * consumer number is found.
   */
  consumerNumber: Long;
}

/**
 * The type of the consumer as defined in
 * [Google Resource Manager](https://cloud.google.com/resource-manager/).
 */
export enum CheckResponse_ConsumerInfo_ConsumerType {
  /** CONSUMER_TYPE_UNSPECIFIED - This is never used. */
  CONSUMER_TYPE_UNSPECIFIED = 0,
  /** PROJECT - The consumer is a Google Cloud Project. */
  PROJECT = 1,
  /** FOLDER - The consumer is a Google Cloud Folder. */
  FOLDER = 2,
  /** ORGANIZATION - The consumer is a Google Cloud Organization. */
  ORGANIZATION = 3,
  /**
   * SERVICE_SPECIFIC - Service-specific resource container which is defined by the service
   * producer to offer their users the ability to manage service control
   * functionalities at a finer level of granularity than the PROJECT.
   */
  SERVICE_SPECIFIC = 4,
  UNRECOGNIZED = -1,
}

export function checkResponse_ConsumerInfo_ConsumerTypeFromJSON(object: any): CheckResponse_ConsumerInfo_ConsumerType {
  switch (object) {
    case 0:
    case "CONSUMER_TYPE_UNSPECIFIED":
      return CheckResponse_ConsumerInfo_ConsumerType.CONSUMER_TYPE_UNSPECIFIED;
    case 1:
    case "PROJECT":
      return CheckResponse_ConsumerInfo_ConsumerType.PROJECT;
    case 2:
    case "FOLDER":
      return CheckResponse_ConsumerInfo_ConsumerType.FOLDER;
    case 3:
    case "ORGANIZATION":
      return CheckResponse_ConsumerInfo_ConsumerType.ORGANIZATION;
    case 4:
    case "SERVICE_SPECIFIC":
      return CheckResponse_ConsumerInfo_ConsumerType.SERVICE_SPECIFIC;
    case -1:
    case "UNRECOGNIZED":
    default:
      return CheckResponse_ConsumerInfo_ConsumerType.UNRECOGNIZED;
  }
}

export function checkResponse_ConsumerInfo_ConsumerTypeToJSON(object: CheckResponse_ConsumerInfo_ConsumerType): string {
  switch (object) {
    case CheckResponse_ConsumerInfo_ConsumerType.CONSUMER_TYPE_UNSPECIFIED:
      return "CONSUMER_TYPE_UNSPECIFIED";
    case CheckResponse_ConsumerInfo_ConsumerType.PROJECT:
      return "PROJECT";
    case CheckResponse_ConsumerInfo_ConsumerType.FOLDER:
      return "FOLDER";
    case CheckResponse_ConsumerInfo_ConsumerType.ORGANIZATION:
      return "ORGANIZATION";
    case CheckResponse_ConsumerInfo_ConsumerType.SERVICE_SPECIFIC:
      return "SERVICE_SPECIFIC";
    case CheckResponse_ConsumerInfo_ConsumerType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Request message for the Report method. */
export interface ReportRequest {
  /**
   * The service name as specified in its service configuration. For example,
   * `"pubsub.googleapis.com"`.
   *
   * See
   * [google.api.Service](https://cloud.google.com/service-management/reference/rpc/google.api#google.api.Service)
   * for the definition of a service name.
   */
  serviceName: string;
  /**
   * Operations to be reported.
   *
   * Typically the service should report one operation per request.
   * Putting multiple operations into a single request is allowed, but should
   * be used only when multiple operations are natually available at the time
   * of the report.
   *
   * There is no limit on the number of operations in the same ReportRequest,
   * however the ReportRequest size should be no larger than 1MB. See
   * [ReportResponse.report_errors][google.api.servicecontrol.v1.ReportResponse.report_errors]
   * for partial failure behavior.
   */
  operations: Operation[];
  /**
   * Specifies which version of service config should be used to process the
   * request.
   *
   * If unspecified or no matching version can be found, the
   * latest one will be used.
   */
  serviceConfigId: string;
}

/** Response message for the Report method. */
export interface ReportResponse {
  /**
   * Partial failures, one for each `Operation` in the request that failed
   * processing. There are three possible combinations of the RPC status:
   *
   * 1. The combination of a successful RPC status and an empty `report_errors`
   *    list indicates a complete success where all `Operations` in the
   *    request are processed successfully.
   * 2. The combination of a successful RPC status and a non-empty
   *    `report_errors` list indicates a partial success where some
   *    `Operations` in the request succeeded. Each
   *    `Operation` that failed processing has a corresponding item
   *    in this list.
   * 3. A failed RPC status indicates a general non-deterministic failure.
   *    When this happens, it's impossible to know which of the
   *    'Operations' in the request succeeded or failed.
   */
  reportErrors: ReportResponse_ReportError[];
  /** The actual config id used to process the request. */
  serviceConfigId: string;
  /** The current service rollout id used to process the request. */
  serviceRolloutId: string;
}

/**
 * Represents the processing error of one
 * [Operation][google.api.servicecontrol.v1.Operation] in the request.
 */
export interface ReportResponse_ReportError {
  /**
   * The
   * [Operation.operation_id][google.api.servicecontrol.v1.Operation.operation_id]
   * value from the request.
   */
  operationId: string;
  /**
   * Details of the error when processing the
   * [Operation][google.api.servicecontrol.v1.Operation].
   */
  status: Status | undefined;
}

function createBaseCheckRequest(): CheckRequest {
  return { serviceName: "", operation: undefined, serviceConfigId: "" };
}

export const CheckRequest: MessageFns<CheckRequest> = {
  encode(message: CheckRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.serviceName !== "") {
      writer.uint32(10).string(message.serviceName);
    }
    if (message.operation !== undefined) {
      Operation.encode(message.operation, writer.uint32(18).fork()).join();
    }
    if (message.serviceConfigId !== "") {
      writer.uint32(34).string(message.serviceConfigId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CheckRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCheckRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.serviceName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.operation = Operation.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.serviceConfigId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CheckRequest {
    return {
      serviceName: isSet(object.serviceName) ? globalThis.String(object.serviceName) : "",
      operation: isSet(object.operation) ? Operation.fromJSON(object.operation) : undefined,
      serviceConfigId: isSet(object.serviceConfigId) ? globalThis.String(object.serviceConfigId) : "",
    };
  },

  toJSON(message: CheckRequest): unknown {
    const obj: any = {};
    if (message.serviceName !== "") {
      obj.serviceName = message.serviceName;
    }
    if (message.operation !== undefined) {
      obj.operation = Operation.toJSON(message.operation);
    }
    if (message.serviceConfigId !== "") {
      obj.serviceConfigId = message.serviceConfigId;
    }
    return obj;
  },

  create(base?: DeepPartial<CheckRequest>): CheckRequest {
    return CheckRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CheckRequest>): CheckRequest {
    const message = createBaseCheckRequest();
    message.serviceName = object.serviceName ?? "";
    message.operation = (object.operation !== undefined && object.operation !== null)
      ? Operation.fromPartial(object.operation)
      : undefined;
    message.serviceConfigId = object.serviceConfigId ?? "";
    return message;
  },
};

function createBaseCheckResponse(): CheckResponse {
  return { operationId: "", checkErrors: [], serviceConfigId: "", serviceRolloutId: "", checkInfo: undefined };
}

export const CheckResponse: MessageFns<CheckResponse> = {
  encode(message: CheckResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.operationId !== "") {
      writer.uint32(10).string(message.operationId);
    }
    for (const v of message.checkErrors) {
      CheckError.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.serviceConfigId !== "") {
      writer.uint32(42).string(message.serviceConfigId);
    }
    if (message.serviceRolloutId !== "") {
      writer.uint32(90).string(message.serviceRolloutId);
    }
    if (message.checkInfo !== undefined) {
      CheckResponse_CheckInfo.encode(message.checkInfo, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CheckResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCheckResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.operationId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.checkErrors.push(CheckError.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.serviceConfigId = reader.string();
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.serviceRolloutId = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.checkInfo = CheckResponse_CheckInfo.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CheckResponse {
    return {
      operationId: isSet(object.operationId) ? globalThis.String(object.operationId) : "",
      checkErrors: globalThis.Array.isArray(object?.checkErrors)
        ? object.checkErrors.map((e: any) => CheckError.fromJSON(e))
        : [],
      serviceConfigId: isSet(object.serviceConfigId) ? globalThis.String(object.serviceConfigId) : "",
      serviceRolloutId: isSet(object.serviceRolloutId) ? globalThis.String(object.serviceRolloutId) : "",
      checkInfo: isSet(object.checkInfo) ? CheckResponse_CheckInfo.fromJSON(object.checkInfo) : undefined,
    };
  },

  toJSON(message: CheckResponse): unknown {
    const obj: any = {};
    if (message.operationId !== "") {
      obj.operationId = message.operationId;
    }
    if (message.checkErrors?.length) {
      obj.checkErrors = message.checkErrors.map((e) => CheckError.toJSON(e));
    }
    if (message.serviceConfigId !== "") {
      obj.serviceConfigId = message.serviceConfigId;
    }
    if (message.serviceRolloutId !== "") {
      obj.serviceRolloutId = message.serviceRolloutId;
    }
    if (message.checkInfo !== undefined) {
      obj.checkInfo = CheckResponse_CheckInfo.toJSON(message.checkInfo);
    }
    return obj;
  },

  create(base?: DeepPartial<CheckResponse>): CheckResponse {
    return CheckResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CheckResponse>): CheckResponse {
    const message = createBaseCheckResponse();
    message.operationId = object.operationId ?? "";
    message.checkErrors = object.checkErrors?.map((e) => CheckError.fromPartial(e)) || [];
    message.serviceConfigId = object.serviceConfigId ?? "";
    message.serviceRolloutId = object.serviceRolloutId ?? "";
    message.checkInfo = (object.checkInfo !== undefined && object.checkInfo !== null)
      ? CheckResponse_CheckInfo.fromPartial(object.checkInfo)
      : undefined;
    return message;
  },
};

function createBaseCheckResponse_CheckInfo(): CheckResponse_CheckInfo {
  return { unusedArguments: [], consumerInfo: undefined, apiKeyUid: "" };
}

export const CheckResponse_CheckInfo: MessageFns<CheckResponse_CheckInfo> = {
  encode(message: CheckResponse_CheckInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.unusedArguments) {
      writer.uint32(10).string(v!);
    }
    if (message.consumerInfo !== undefined) {
      CheckResponse_ConsumerInfo.encode(message.consumerInfo, writer.uint32(18).fork()).join();
    }
    if (message.apiKeyUid !== "") {
      writer.uint32(42).string(message.apiKeyUid);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CheckResponse_CheckInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCheckResponse_CheckInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.unusedArguments.push(reader.string());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.consumerInfo = CheckResponse_ConsumerInfo.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.apiKeyUid = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CheckResponse_CheckInfo {
    return {
      unusedArguments: globalThis.Array.isArray(object?.unusedArguments)
        ? object.unusedArguments.map((e: any) => globalThis.String(e))
        : [],
      consumerInfo: isSet(object.consumerInfo) ? CheckResponse_ConsumerInfo.fromJSON(object.consumerInfo) : undefined,
      apiKeyUid: isSet(object.apiKeyUid) ? globalThis.String(object.apiKeyUid) : "",
    };
  },

  toJSON(message: CheckResponse_CheckInfo): unknown {
    const obj: any = {};
    if (message.unusedArguments?.length) {
      obj.unusedArguments = message.unusedArguments;
    }
    if (message.consumerInfo !== undefined) {
      obj.consumerInfo = CheckResponse_ConsumerInfo.toJSON(message.consumerInfo);
    }
    if (message.apiKeyUid !== "") {
      obj.apiKeyUid = message.apiKeyUid;
    }
    return obj;
  },

  create(base?: DeepPartial<CheckResponse_CheckInfo>): CheckResponse_CheckInfo {
    return CheckResponse_CheckInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CheckResponse_CheckInfo>): CheckResponse_CheckInfo {
    const message = createBaseCheckResponse_CheckInfo();
    message.unusedArguments = object.unusedArguments?.map((e) => e) || [];
    message.consumerInfo = (object.consumerInfo !== undefined && object.consumerInfo !== null)
      ? CheckResponse_ConsumerInfo.fromPartial(object.consumerInfo)
      : undefined;
    message.apiKeyUid = object.apiKeyUid ?? "";
    return message;
  },
};

function createBaseCheckResponse_ConsumerInfo(): CheckResponse_ConsumerInfo {
  return { projectNumber: Long.ZERO, type: 0, consumerNumber: Long.ZERO };
}

export const CheckResponse_ConsumerInfo: MessageFns<CheckResponse_ConsumerInfo> = {
  encode(message: CheckResponse_ConsumerInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.projectNumber.equals(Long.ZERO)) {
      writer.uint32(8).int64(message.projectNumber.toString());
    }
    if (message.type !== 0) {
      writer.uint32(16).int32(message.type);
    }
    if (!message.consumerNumber.equals(Long.ZERO)) {
      writer.uint32(24).int64(message.consumerNumber.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CheckResponse_ConsumerInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCheckResponse_ConsumerInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.projectNumber = Long.fromString(reader.int64().toString());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.consumerNumber = Long.fromString(reader.int64().toString());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CheckResponse_ConsumerInfo {
    return {
      projectNumber: isSet(object.projectNumber) ? Long.fromValue(object.projectNumber) : Long.ZERO,
      type: isSet(object.type) ? checkResponse_ConsumerInfo_ConsumerTypeFromJSON(object.type) : 0,
      consumerNumber: isSet(object.consumerNumber) ? Long.fromValue(object.consumerNumber) : Long.ZERO,
    };
  },

  toJSON(message: CheckResponse_ConsumerInfo): unknown {
    const obj: any = {};
    if (!message.projectNumber.equals(Long.ZERO)) {
      obj.projectNumber = (message.projectNumber || Long.ZERO).toString();
    }
    if (message.type !== 0) {
      obj.type = checkResponse_ConsumerInfo_ConsumerTypeToJSON(message.type);
    }
    if (!message.consumerNumber.equals(Long.ZERO)) {
      obj.consumerNumber = (message.consumerNumber || Long.ZERO).toString();
    }
    return obj;
  },

  create(base?: DeepPartial<CheckResponse_ConsumerInfo>): CheckResponse_ConsumerInfo {
    return CheckResponse_ConsumerInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CheckResponse_ConsumerInfo>): CheckResponse_ConsumerInfo {
    const message = createBaseCheckResponse_ConsumerInfo();
    message.projectNumber = (object.projectNumber !== undefined && object.projectNumber !== null)
      ? Long.fromValue(object.projectNumber)
      : Long.ZERO;
    message.type = object.type ?? 0;
    message.consumerNumber = (object.consumerNumber !== undefined && object.consumerNumber !== null)
      ? Long.fromValue(object.consumerNumber)
      : Long.ZERO;
    return message;
  },
};

function createBaseReportRequest(): ReportRequest {
  return { serviceName: "", operations: [], serviceConfigId: "" };
}

export const ReportRequest: MessageFns<ReportRequest> = {
  encode(message: ReportRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.serviceName !== "") {
      writer.uint32(10).string(message.serviceName);
    }
    for (const v of message.operations) {
      Operation.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.serviceConfigId !== "") {
      writer.uint32(26).string(message.serviceConfigId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReportRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReportRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.serviceName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.operations.push(Operation.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.serviceConfigId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReportRequest {
    return {
      serviceName: isSet(object.serviceName) ? globalThis.String(object.serviceName) : "",
      operations: globalThis.Array.isArray(object?.operations)
        ? object.operations.map((e: any) => Operation.fromJSON(e))
        : [],
      serviceConfigId: isSet(object.serviceConfigId) ? globalThis.String(object.serviceConfigId) : "",
    };
  },

  toJSON(message: ReportRequest): unknown {
    const obj: any = {};
    if (message.serviceName !== "") {
      obj.serviceName = message.serviceName;
    }
    if (message.operations?.length) {
      obj.operations = message.operations.map((e) => Operation.toJSON(e));
    }
    if (message.serviceConfigId !== "") {
      obj.serviceConfigId = message.serviceConfigId;
    }
    return obj;
  },

  create(base?: DeepPartial<ReportRequest>): ReportRequest {
    return ReportRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ReportRequest>): ReportRequest {
    const message = createBaseReportRequest();
    message.serviceName = object.serviceName ?? "";
    message.operations = object.operations?.map((e) => Operation.fromPartial(e)) || [];
    message.serviceConfigId = object.serviceConfigId ?? "";
    return message;
  },
};

function createBaseReportResponse(): ReportResponse {
  return { reportErrors: [], serviceConfigId: "", serviceRolloutId: "" };
}

export const ReportResponse: MessageFns<ReportResponse> = {
  encode(message: ReportResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.reportErrors) {
      ReportResponse_ReportError.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.serviceConfigId !== "") {
      writer.uint32(18).string(message.serviceConfigId);
    }
    if (message.serviceRolloutId !== "") {
      writer.uint32(34).string(message.serviceRolloutId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReportResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReportResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.reportErrors.push(ReportResponse_ReportError.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.serviceConfigId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.serviceRolloutId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReportResponse {
    return {
      reportErrors: globalThis.Array.isArray(object?.reportErrors)
        ? object.reportErrors.map((e: any) => ReportResponse_ReportError.fromJSON(e))
        : [],
      serviceConfigId: isSet(object.serviceConfigId) ? globalThis.String(object.serviceConfigId) : "",
      serviceRolloutId: isSet(object.serviceRolloutId) ? globalThis.String(object.serviceRolloutId) : "",
    };
  },

  toJSON(message: ReportResponse): unknown {
    const obj: any = {};
    if (message.reportErrors?.length) {
      obj.reportErrors = message.reportErrors.map((e) => ReportResponse_ReportError.toJSON(e));
    }
    if (message.serviceConfigId !== "") {
      obj.serviceConfigId = message.serviceConfigId;
    }
    if (message.serviceRolloutId !== "") {
      obj.serviceRolloutId = message.serviceRolloutId;
    }
    return obj;
  },

  create(base?: DeepPartial<ReportResponse>): ReportResponse {
    return ReportResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ReportResponse>): ReportResponse {
    const message = createBaseReportResponse();
    message.reportErrors = object.reportErrors?.map((e) => ReportResponse_ReportError.fromPartial(e)) || [];
    message.serviceConfigId = object.serviceConfigId ?? "";
    message.serviceRolloutId = object.serviceRolloutId ?? "";
    return message;
  },
};

function createBaseReportResponse_ReportError(): ReportResponse_ReportError {
  return { operationId: "", status: undefined };
}

export const ReportResponse_ReportError: MessageFns<ReportResponse_ReportError> = {
  encode(message: ReportResponse_ReportError, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.operationId !== "") {
      writer.uint32(10).string(message.operationId);
    }
    if (message.status !== undefined) {
      Status.encode(message.status, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReportResponse_ReportError {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReportResponse_ReportError();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.operationId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.status = Status.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReportResponse_ReportError {
    return {
      operationId: isSet(object.operationId) ? globalThis.String(object.operationId) : "",
      status: isSet(object.status) ? Status.fromJSON(object.status) : undefined,
    };
  },

  toJSON(message: ReportResponse_ReportError): unknown {
    const obj: any = {};
    if (message.operationId !== "") {
      obj.operationId = message.operationId;
    }
    if (message.status !== undefined) {
      obj.status = Status.toJSON(message.status);
    }
    return obj;
  },

  create(base?: DeepPartial<ReportResponse_ReportError>): ReportResponse_ReportError {
    return ReportResponse_ReportError.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ReportResponse_ReportError>): ReportResponse_ReportError {
    const message = createBaseReportResponse_ReportError();
    message.operationId = object.operationId ?? "";
    message.status = (object.status !== undefined && object.status !== null)
      ? Status.fromPartial(object.status)
      : undefined;
    return message;
  },
};

/**
 * [Google Service Control API](/service-control/overview)
 *
 * Lets clients check and report operations against a [managed
 * service](https://cloud.google.com/service-management/reference/rpc/google.api/servicemanagement.v1#google.api.servicemanagement.v1.ManagedService).
 */
export type ServiceControllerDefinition = typeof ServiceControllerDefinition;
export const ServiceControllerDefinition = {
  name: "ServiceController",
  fullName: "google.api.servicecontrol.v1.ServiceController",
  methods: {
    /**
     * Checks whether an operation on a service should be allowed to proceed
     * based on the configuration of the service and related policies. It must be
     * called before the operation is executed.
     *
     * If feasible, the client should cache the check results and reuse them for
     * 60 seconds. In case of any server errors, the client should rely on the
     * cached results for much longer time to avoid outage.
     * WARNING: There is general 60s delay for the configuration and policy
     * propagation, therefore callers MUST NOT depend on the `Check` method having
     * the latest policy information.
     *
     * NOTE: the [CheckRequest][google.api.servicecontrol.v1.CheckRequest] has
     * the size limit (wire-format byte size) of 1MB.
     *
     * This method requires the `servicemanagement.services.check` permission
     * on the specified service. For more information, see
     * [Cloud IAM](https://cloud.google.com/iam).
     */
    check: {
      name: "Check",
      requestType: CheckRequest,
      requestStream: false,
      responseType: CheckResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              38,
              58,
              1,
              42,
              34,
              33,
              47,
              118,
              49,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
              47,
              123,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              95,
              110,
              97,
              109,
              101,
              125,
              58,
              99,
              104,
              101,
              99,
              107,
            ]),
          ],
        },
      },
    },
    /**
     * Reports operation results to Google Service Control, such as logs and
     * metrics. It should be called after an operation is completed.
     *
     * If feasible, the client should aggregate reporting data for up to 5
     * seconds to reduce API traffic. Limiting aggregation to 5 seconds is to
     * reduce data loss during client crashes. Clients should carefully choose
     * the aggregation time window to avoid data loss risk more than 0.01%
     * for business and compliance reasons.
     *
     * NOTE: the [ReportRequest][google.api.servicecontrol.v1.ReportRequest] has
     * the size limit (wire-format byte size) of 1MB.
     *
     * This method requires the `servicemanagement.services.report` permission
     * on the specified service. For more information, see
     * [Google Cloud IAM](https://cloud.google.com/iam).
     */
    report: {
      name: "Report",
      requestType: ReportRequest,
      requestStream: false,
      responseType: ReportResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              39,
              58,
              1,
              42,
              34,
              34,
              47,
              118,
              49,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
              47,
              123,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              95,
              110,
              97,
              109,
              101,
              125,
              58,
              114,
              101,
              112,
              111,
              114,
              116,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface ServiceControllerServiceImplementation<CallContextExt = {}> {
  /**
   * Checks whether an operation on a service should be allowed to proceed
   * based on the configuration of the service and related policies. It must be
   * called before the operation is executed.
   *
   * If feasible, the client should cache the check results and reuse them for
   * 60 seconds. In case of any server errors, the client should rely on the
   * cached results for much longer time to avoid outage.
   * WARNING: There is general 60s delay for the configuration and policy
   * propagation, therefore callers MUST NOT depend on the `Check` method having
   * the latest policy information.
   *
   * NOTE: the [CheckRequest][google.api.servicecontrol.v1.CheckRequest] has
   * the size limit (wire-format byte size) of 1MB.
   *
   * This method requires the `servicemanagement.services.check` permission
   * on the specified service. For more information, see
   * [Cloud IAM](https://cloud.google.com/iam).
   */
  check(request: CheckRequest, context: CallContext & CallContextExt): Promise<DeepPartial<CheckResponse>>;
  /**
   * Reports operation results to Google Service Control, such as logs and
   * metrics. It should be called after an operation is completed.
   *
   * If feasible, the client should aggregate reporting data for up to 5
   * seconds to reduce API traffic. Limiting aggregation to 5 seconds is to
   * reduce data loss during client crashes. Clients should carefully choose
   * the aggregation time window to avoid data loss risk more than 0.01%
   * for business and compliance reasons.
   *
   * NOTE: the [ReportRequest][google.api.servicecontrol.v1.ReportRequest] has
   * the size limit (wire-format byte size) of 1MB.
   *
   * This method requires the `servicemanagement.services.report` permission
   * on the specified service. For more information, see
   * [Google Cloud IAM](https://cloud.google.com/iam).
   */
  report(request: ReportRequest, context: CallContext & CallContextExt): Promise<DeepPartial<ReportResponse>>;
}

export interface ServiceControllerClient<CallOptionsExt = {}> {
  /**
   * Checks whether an operation on a service should be allowed to proceed
   * based on the configuration of the service and related policies. It must be
   * called before the operation is executed.
   *
   * If feasible, the client should cache the check results and reuse them for
   * 60 seconds. In case of any server errors, the client should rely on the
   * cached results for much longer time to avoid outage.
   * WARNING: There is general 60s delay for the configuration and policy
   * propagation, therefore callers MUST NOT depend on the `Check` method having
   * the latest policy information.
   *
   * NOTE: the [CheckRequest][google.api.servicecontrol.v1.CheckRequest] has
   * the size limit (wire-format byte size) of 1MB.
   *
   * This method requires the `servicemanagement.services.check` permission
   * on the specified service. For more information, see
   * [Cloud IAM](https://cloud.google.com/iam).
   */
  check(request: DeepPartial<CheckRequest>, options?: CallOptions & CallOptionsExt): Promise<CheckResponse>;
  /**
   * Reports operation results to Google Service Control, such as logs and
   * metrics. It should be called after an operation is completed.
   *
   * If feasible, the client should aggregate reporting data for up to 5
   * seconds to reduce API traffic. Limiting aggregation to 5 seconds is to
   * reduce data loss during client crashes. Clients should carefully choose
   * the aggregation time window to avoid data loss risk more than 0.01%
   * for business and compliance reasons.
   *
   * NOTE: the [ReportRequest][google.api.servicecontrol.v1.ReportRequest] has
   * the size limit (wire-format byte size) of 1MB.
   *
   * This method requires the `servicemanagement.services.report` permission
   * on the specified service. For more information, see
   * [Google Cloud IAM](https://cloud.google.com/iam).
   */
  report(request: DeepPartial<ReportRequest>, options?: CallOptions & CallOptionsExt): Promise<ReportResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
