// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/api/servicemanagement/v1/servicemanager.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../longrunning/operations.js";
import { Any } from "../../../protobuf/any.js";
import { Service } from "../../service.js";
import { ChangeReport, ConfigSource, Diagnostic, ManagedService, Rollout } from "./resources.js";

export const protobufPackage = "google.api.servicemanagement.v1";

/** Request message for `ListServices` method. */
export interface ListServicesRequest {
  /** Include services produced by the specified project. */
  producerProjectId: string;
  /**
   * The max number of items to include in the response list. Page size is 50
   * if not specified. Maximum value is 500.
   */
  pageSize: number;
  /**
   * Token identifying which result to start with; returned by a previous list
   * call.
   */
  pageToken: string;
  /**
   * Include services consumed by the specified consumer.
   *
   * The Google Service Management implementation accepts the following
   * forms:
   * - project:<project_id>
   *
   * @deprecated
   */
  consumerId: string;
}

/** Response message for `ListServices` method. */
export interface ListServicesResponse {
  /** The returned services will only have the name field set. */
  services: ManagedService[];
  /** Token that can be passed to `ListServices` to resume a paginated query. */
  nextPageToken: string;
}

/** Request message for `GetService` method. */
export interface GetServiceRequest {
  /**
   * Required. The name of the service.  See the `ServiceManager` overview for
   * naming requirements.  For example: `example.googleapis.com`.
   */
  serviceName: string;
}

/** Request message for CreateService method. */
export interface CreateServiceRequest {
  /** Required. Initial values for the service resource. */
  service: ManagedService | undefined;
}

/** Request message for DeleteService method. */
export interface DeleteServiceRequest {
  /**
   * Required. The name of the service.  See the
   * [overview](https://cloud.google.com/service-management/overview) for naming
   * requirements.  For example: `example.googleapis.com`.
   */
  serviceName: string;
}

/** Request message for UndeleteService method. */
export interface UndeleteServiceRequest {
  /**
   * Required. The name of the service. See the
   * [overview](https://cloud.google.com/service-management/overview) for naming
   * requirements. For example: `example.googleapis.com`.
   */
  serviceName: string;
}

/** Response message for UndeleteService method. */
export interface UndeleteServiceResponse {
  /** Revived service resource. */
  service: ManagedService | undefined;
}

/** Request message for GetServiceConfig method. */
export interface GetServiceConfigRequest {
  /**
   * Required. The name of the service.  See the
   * [overview](https://cloud.google.com/service-management/overview) for naming
   * requirements.  For example: `example.googleapis.com`.
   */
  serviceName: string;
  /**
   * Required. The id of the service configuration resource.
   *
   * This field must be specified for the server to return all fields, including
   * `SourceInfo`.
   */
  configId: string;
  /**
   * Specifies which parts of the Service Config should be returned in the
   * response.
   */
  view: GetServiceConfigRequest_ConfigView;
}

export enum GetServiceConfigRequest_ConfigView {
  /** BASIC - Server response includes all fields except SourceInfo. */
  BASIC = 0,
  /**
   * FULL - Server response includes all fields including SourceInfo.
   * SourceFiles are of type 'google.api.servicemanagement.v1.ConfigFile'
   * and are only available for configs created using the
   * SubmitConfigSource method.
   */
  FULL = 1,
  UNRECOGNIZED = -1,
}

export function getServiceConfigRequest_ConfigViewFromJSON(object: any): GetServiceConfigRequest_ConfigView {
  switch (object) {
    case 0:
    case "BASIC":
      return GetServiceConfigRequest_ConfigView.BASIC;
    case 1:
    case "FULL":
      return GetServiceConfigRequest_ConfigView.FULL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return GetServiceConfigRequest_ConfigView.UNRECOGNIZED;
  }
}

export function getServiceConfigRequest_ConfigViewToJSON(object: GetServiceConfigRequest_ConfigView): string {
  switch (object) {
    case GetServiceConfigRequest_ConfigView.BASIC:
      return "BASIC";
    case GetServiceConfigRequest_ConfigView.FULL:
      return "FULL";
    case GetServiceConfigRequest_ConfigView.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Request message for ListServiceConfigs method. */
export interface ListServiceConfigsRequest {
  /**
   * Required. The name of the service.  See the
   * [overview](https://cloud.google.com/service-management/overview) for naming
   * requirements.  For example: `example.googleapis.com`.
   */
  serviceName: string;
  /** The token of the page to retrieve. */
  pageToken: string;
  /**
   * The max number of items to include in the response list. Page size is 50
   * if not specified. Maximum value is 100.
   */
  pageSize: number;
}

/** Response message for ListServiceConfigs method. */
export interface ListServiceConfigsResponse {
  /** The list of service configuration resources. */
  serviceConfigs: Service[];
  /** The token of the next page of results. */
  nextPageToken: string;
}

/** Request message for CreateServiceConfig method. */
export interface CreateServiceConfigRequest {
  /**
   * Required. The name of the service.  See the
   * [overview](https://cloud.google.com/service-management/overview) for naming
   * requirements.  For example: `example.googleapis.com`.
   */
  serviceName: string;
  /** Required. The service configuration resource. */
  serviceConfig: Service | undefined;
}

/** Request message for SubmitConfigSource method. */
export interface SubmitConfigSourceRequest {
  /**
   * Required. The name of the service.  See the
   * [overview](https://cloud.google.com/service-management/overview) for naming
   * requirements.  For example: `example.googleapis.com`.
   */
  serviceName: string;
  /** Required. The source configuration for the service. */
  configSource:
    | ConfigSource
    | undefined;
  /**
   * Optional. If set, this will result in the generation of a
   * `google.api.Service` configuration based on the `ConfigSource` provided,
   * but the generated config and the sources will NOT be persisted.
   */
  validateOnly: boolean;
}

/** Response message for SubmitConfigSource method. */
export interface SubmitConfigSourceResponse {
  /** The generated service configuration. */
  serviceConfig: Service | undefined;
}

/** Request message for 'CreateServiceRollout' */
export interface CreateServiceRolloutRequest {
  /**
   * Required. The name of the service.  See the
   * [overview](https://cloud.google.com/service-management/overview) for naming
   * requirements.  For example: `example.googleapis.com`.
   */
  serviceName: string;
  /** Required. The rollout resource. The `service_name` field is output only. */
  rollout: Rollout | undefined;
}

/** Request message for 'ListServiceRollouts' */
export interface ListServiceRolloutsRequest {
  /**
   * Required. The name of the service.  See the
   * [overview](https://cloud.google.com/service-management/overview) for naming
   * requirements.  For example: `example.googleapis.com`.
   */
  serviceName: string;
  /** The token of the page to retrieve. */
  pageToken: string;
  /**
   * The max number of items to include in the response list. Page size is 50
   * if not specified. Maximum value is 100.
   */
  pageSize: number;
  /**
   * Required. Use `filter` to return subset of rollouts.
   * The following filters are supported:
   *
   *  -- By [status]
   *  [google.api.servicemanagement.v1.Rollout.RolloutStatus]. For example,
   *  `filter='status=SUCCESS'`
   *
   *  -- By [strategy]
   *  [google.api.servicemanagement.v1.Rollout.strategy]. For example,
   *  `filter='strategy=TrafficPercentStrategy'`
   */
  filter: string;
}

/** Response message for ListServiceRollouts method. */
export interface ListServiceRolloutsResponse {
  /** The list of rollout resources. */
  rollouts: Rollout[];
  /** The token of the next page of results. */
  nextPageToken: string;
}

/** Request message for GetServiceRollout method. */
export interface GetServiceRolloutRequest {
  /**
   * Required. The name of the service.  See the
   * [overview](https://cloud.google.com/service-management/overview) for naming
   * requirements.  For example: `example.googleapis.com`.
   */
  serviceName: string;
  /** Required. The id of the rollout resource. */
  rolloutId: string;
}

/** Operation payload for EnableService method. */
export interface EnableServiceResponse {
}

/** Request message for GenerateConfigReport method. */
export interface GenerateConfigReportRequest {
  /**
   * Required. Service configuration for which we want to generate the report.
   * For this version of API, the supported types are
   * [google.api.servicemanagement.v1.ConfigRef][google.api.servicemanagement.v1.ConfigRef],
   * [google.api.servicemanagement.v1.ConfigSource][google.api.servicemanagement.v1.ConfigSource],
   * and [google.api.Service][google.api.Service]
   */
  newConfig:
    | Any
    | undefined;
  /**
   * Optional. Service configuration against which the comparison will be done.
   * For this version of API, the supported types are
   * [google.api.servicemanagement.v1.ConfigRef][google.api.servicemanagement.v1.ConfigRef],
   * [google.api.servicemanagement.v1.ConfigSource][google.api.servicemanagement.v1.ConfigSource],
   * and [google.api.Service][google.api.Service]
   */
  oldConfig: Any | undefined;
}

/** Response message for GenerateConfigReport method. */
export interface GenerateConfigReportResponse {
  /** Name of the service this report belongs to. */
  serviceName: string;
  /** ID of the service configuration this report belongs to. */
  id: string;
  /**
   * list of ChangeReport, each corresponding to comparison between two
   * service configurations.
   */
  changeReports: ChangeReport[];
  /**
   * Errors / Linter warnings associated with the service definition this
   * report
   * belongs to.
   */
  diagnostics: Diagnostic[];
}

function createBaseListServicesRequest(): ListServicesRequest {
  return { producerProjectId: "", pageSize: 0, pageToken: "", consumerId: "" };
}

export const ListServicesRequest: MessageFns<ListServicesRequest> = {
  encode(message: ListServicesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.producerProjectId !== "") {
      writer.uint32(10).string(message.producerProjectId);
    }
    if (message.pageSize !== 0) {
      writer.uint32(40).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(50).string(message.pageToken);
    }
    if (message.consumerId !== "") {
      writer.uint32(58).string(message.consumerId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListServicesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListServicesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.producerProjectId = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.consumerId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListServicesRequest {
    return {
      producerProjectId: isSet(object.producerProjectId) ? globalThis.String(object.producerProjectId) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      consumerId: isSet(object.consumerId) ? globalThis.String(object.consumerId) : "",
    };
  },

  toJSON(message: ListServicesRequest): unknown {
    const obj: any = {};
    if (message.producerProjectId !== "") {
      obj.producerProjectId = message.producerProjectId;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.consumerId !== "") {
      obj.consumerId = message.consumerId;
    }
    return obj;
  },

  create(base?: DeepPartial<ListServicesRequest>): ListServicesRequest {
    return ListServicesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListServicesRequest>): ListServicesRequest {
    const message = createBaseListServicesRequest();
    message.producerProjectId = object.producerProjectId ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.consumerId = object.consumerId ?? "";
    return message;
  },
};

function createBaseListServicesResponse(): ListServicesResponse {
  return { services: [], nextPageToken: "" };
}

export const ListServicesResponse: MessageFns<ListServicesResponse> = {
  encode(message: ListServicesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.services) {
      ManagedService.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListServicesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListServicesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.services.push(ManagedService.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListServicesResponse {
    return {
      services: globalThis.Array.isArray(object?.services)
        ? object.services.map((e: any) => ManagedService.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListServicesResponse): unknown {
    const obj: any = {};
    if (message.services?.length) {
      obj.services = message.services.map((e) => ManagedService.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListServicesResponse>): ListServicesResponse {
    return ListServicesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListServicesResponse>): ListServicesResponse {
    const message = createBaseListServicesResponse();
    message.services = object.services?.map((e) => ManagedService.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetServiceRequest(): GetServiceRequest {
  return { serviceName: "" };
}

export const GetServiceRequest: MessageFns<GetServiceRequest> = {
  encode(message: GetServiceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.serviceName !== "") {
      writer.uint32(10).string(message.serviceName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetServiceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetServiceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.serviceName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetServiceRequest {
    return { serviceName: isSet(object.serviceName) ? globalThis.String(object.serviceName) : "" };
  },

  toJSON(message: GetServiceRequest): unknown {
    const obj: any = {};
    if (message.serviceName !== "") {
      obj.serviceName = message.serviceName;
    }
    return obj;
  },

  create(base?: DeepPartial<GetServiceRequest>): GetServiceRequest {
    return GetServiceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetServiceRequest>): GetServiceRequest {
    const message = createBaseGetServiceRequest();
    message.serviceName = object.serviceName ?? "";
    return message;
  },
};

function createBaseCreateServiceRequest(): CreateServiceRequest {
  return { service: undefined };
}

export const CreateServiceRequest: MessageFns<CreateServiceRequest> = {
  encode(message: CreateServiceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.service !== undefined) {
      ManagedService.encode(message.service, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateServiceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateServiceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.service = ManagedService.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateServiceRequest {
    return { service: isSet(object.service) ? ManagedService.fromJSON(object.service) : undefined };
  },

  toJSON(message: CreateServiceRequest): unknown {
    const obj: any = {};
    if (message.service !== undefined) {
      obj.service = ManagedService.toJSON(message.service);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateServiceRequest>): CreateServiceRequest {
    return CreateServiceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateServiceRequest>): CreateServiceRequest {
    const message = createBaseCreateServiceRequest();
    message.service = (object.service !== undefined && object.service !== null)
      ? ManagedService.fromPartial(object.service)
      : undefined;
    return message;
  },
};

function createBaseDeleteServiceRequest(): DeleteServiceRequest {
  return { serviceName: "" };
}

export const DeleteServiceRequest: MessageFns<DeleteServiceRequest> = {
  encode(message: DeleteServiceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.serviceName !== "") {
      writer.uint32(10).string(message.serviceName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteServiceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteServiceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.serviceName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteServiceRequest {
    return { serviceName: isSet(object.serviceName) ? globalThis.String(object.serviceName) : "" };
  },

  toJSON(message: DeleteServiceRequest): unknown {
    const obj: any = {};
    if (message.serviceName !== "") {
      obj.serviceName = message.serviceName;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteServiceRequest>): DeleteServiceRequest {
    return DeleteServiceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteServiceRequest>): DeleteServiceRequest {
    const message = createBaseDeleteServiceRequest();
    message.serviceName = object.serviceName ?? "";
    return message;
  },
};

function createBaseUndeleteServiceRequest(): UndeleteServiceRequest {
  return { serviceName: "" };
}

export const UndeleteServiceRequest: MessageFns<UndeleteServiceRequest> = {
  encode(message: UndeleteServiceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.serviceName !== "") {
      writer.uint32(10).string(message.serviceName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UndeleteServiceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUndeleteServiceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.serviceName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UndeleteServiceRequest {
    return { serviceName: isSet(object.serviceName) ? globalThis.String(object.serviceName) : "" };
  },

  toJSON(message: UndeleteServiceRequest): unknown {
    const obj: any = {};
    if (message.serviceName !== "") {
      obj.serviceName = message.serviceName;
    }
    return obj;
  },

  create(base?: DeepPartial<UndeleteServiceRequest>): UndeleteServiceRequest {
    return UndeleteServiceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UndeleteServiceRequest>): UndeleteServiceRequest {
    const message = createBaseUndeleteServiceRequest();
    message.serviceName = object.serviceName ?? "";
    return message;
  },
};

function createBaseUndeleteServiceResponse(): UndeleteServiceResponse {
  return { service: undefined };
}

export const UndeleteServiceResponse: MessageFns<UndeleteServiceResponse> = {
  encode(message: UndeleteServiceResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.service !== undefined) {
      ManagedService.encode(message.service, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UndeleteServiceResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUndeleteServiceResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.service = ManagedService.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UndeleteServiceResponse {
    return { service: isSet(object.service) ? ManagedService.fromJSON(object.service) : undefined };
  },

  toJSON(message: UndeleteServiceResponse): unknown {
    const obj: any = {};
    if (message.service !== undefined) {
      obj.service = ManagedService.toJSON(message.service);
    }
    return obj;
  },

  create(base?: DeepPartial<UndeleteServiceResponse>): UndeleteServiceResponse {
    return UndeleteServiceResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UndeleteServiceResponse>): UndeleteServiceResponse {
    const message = createBaseUndeleteServiceResponse();
    message.service = (object.service !== undefined && object.service !== null)
      ? ManagedService.fromPartial(object.service)
      : undefined;
    return message;
  },
};

function createBaseGetServiceConfigRequest(): GetServiceConfigRequest {
  return { serviceName: "", configId: "", view: 0 };
}

export const GetServiceConfigRequest: MessageFns<GetServiceConfigRequest> = {
  encode(message: GetServiceConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.serviceName !== "") {
      writer.uint32(10).string(message.serviceName);
    }
    if (message.configId !== "") {
      writer.uint32(18).string(message.configId);
    }
    if (message.view !== 0) {
      writer.uint32(24).int32(message.view);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetServiceConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetServiceConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.serviceName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.configId = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.view = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetServiceConfigRequest {
    return {
      serviceName: isSet(object.serviceName) ? globalThis.String(object.serviceName) : "",
      configId: isSet(object.configId) ? globalThis.String(object.configId) : "",
      view: isSet(object.view) ? getServiceConfigRequest_ConfigViewFromJSON(object.view) : 0,
    };
  },

  toJSON(message: GetServiceConfigRequest): unknown {
    const obj: any = {};
    if (message.serviceName !== "") {
      obj.serviceName = message.serviceName;
    }
    if (message.configId !== "") {
      obj.configId = message.configId;
    }
    if (message.view !== 0) {
      obj.view = getServiceConfigRequest_ConfigViewToJSON(message.view);
    }
    return obj;
  },

  create(base?: DeepPartial<GetServiceConfigRequest>): GetServiceConfigRequest {
    return GetServiceConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetServiceConfigRequest>): GetServiceConfigRequest {
    const message = createBaseGetServiceConfigRequest();
    message.serviceName = object.serviceName ?? "";
    message.configId = object.configId ?? "";
    message.view = object.view ?? 0;
    return message;
  },
};

function createBaseListServiceConfigsRequest(): ListServiceConfigsRequest {
  return { serviceName: "", pageToken: "", pageSize: 0 };
}

export const ListServiceConfigsRequest: MessageFns<ListServiceConfigsRequest> = {
  encode(message: ListServiceConfigsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.serviceName !== "") {
      writer.uint32(10).string(message.serviceName);
    }
    if (message.pageToken !== "") {
      writer.uint32(18).string(message.pageToken);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListServiceConfigsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListServiceConfigsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.serviceName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListServiceConfigsRequest {
    return {
      serviceName: isSet(object.serviceName) ? globalThis.String(object.serviceName) : "",
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
    };
  },

  toJSON(message: ListServiceConfigsRequest): unknown {
    const obj: any = {};
    if (message.serviceName !== "") {
      obj.serviceName = message.serviceName;
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    return obj;
  },

  create(base?: DeepPartial<ListServiceConfigsRequest>): ListServiceConfigsRequest {
    return ListServiceConfigsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListServiceConfigsRequest>): ListServiceConfigsRequest {
    const message = createBaseListServiceConfigsRequest();
    message.serviceName = object.serviceName ?? "";
    message.pageToken = object.pageToken ?? "";
    message.pageSize = object.pageSize ?? 0;
    return message;
  },
};

function createBaseListServiceConfigsResponse(): ListServiceConfigsResponse {
  return { serviceConfigs: [], nextPageToken: "" };
}

export const ListServiceConfigsResponse: MessageFns<ListServiceConfigsResponse> = {
  encode(message: ListServiceConfigsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.serviceConfigs) {
      Service.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListServiceConfigsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListServiceConfigsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.serviceConfigs.push(Service.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListServiceConfigsResponse {
    return {
      serviceConfigs: globalThis.Array.isArray(object?.serviceConfigs)
        ? object.serviceConfigs.map((e: any) => Service.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListServiceConfigsResponse): unknown {
    const obj: any = {};
    if (message.serviceConfigs?.length) {
      obj.serviceConfigs = message.serviceConfigs.map((e) => Service.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListServiceConfigsResponse>): ListServiceConfigsResponse {
    return ListServiceConfigsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListServiceConfigsResponse>): ListServiceConfigsResponse {
    const message = createBaseListServiceConfigsResponse();
    message.serviceConfigs = object.serviceConfigs?.map((e) => Service.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseCreateServiceConfigRequest(): CreateServiceConfigRequest {
  return { serviceName: "", serviceConfig: undefined };
}

export const CreateServiceConfigRequest: MessageFns<CreateServiceConfigRequest> = {
  encode(message: CreateServiceConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.serviceName !== "") {
      writer.uint32(10).string(message.serviceName);
    }
    if (message.serviceConfig !== undefined) {
      Service.encode(message.serviceConfig, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateServiceConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateServiceConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.serviceName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.serviceConfig = Service.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateServiceConfigRequest {
    return {
      serviceName: isSet(object.serviceName) ? globalThis.String(object.serviceName) : "",
      serviceConfig: isSet(object.serviceConfig) ? Service.fromJSON(object.serviceConfig) : undefined,
    };
  },

  toJSON(message: CreateServiceConfigRequest): unknown {
    const obj: any = {};
    if (message.serviceName !== "") {
      obj.serviceName = message.serviceName;
    }
    if (message.serviceConfig !== undefined) {
      obj.serviceConfig = Service.toJSON(message.serviceConfig);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateServiceConfigRequest>): CreateServiceConfigRequest {
    return CreateServiceConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateServiceConfigRequest>): CreateServiceConfigRequest {
    const message = createBaseCreateServiceConfigRequest();
    message.serviceName = object.serviceName ?? "";
    message.serviceConfig = (object.serviceConfig !== undefined && object.serviceConfig !== null)
      ? Service.fromPartial(object.serviceConfig)
      : undefined;
    return message;
  },
};

function createBaseSubmitConfigSourceRequest(): SubmitConfigSourceRequest {
  return { serviceName: "", configSource: undefined, validateOnly: false };
}

export const SubmitConfigSourceRequest: MessageFns<SubmitConfigSourceRequest> = {
  encode(message: SubmitConfigSourceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.serviceName !== "") {
      writer.uint32(10).string(message.serviceName);
    }
    if (message.configSource !== undefined) {
      ConfigSource.encode(message.configSource, writer.uint32(18).fork()).join();
    }
    if (message.validateOnly !== false) {
      writer.uint32(24).bool(message.validateOnly);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SubmitConfigSourceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSubmitConfigSourceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.serviceName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.configSource = ConfigSource.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SubmitConfigSourceRequest {
    return {
      serviceName: isSet(object.serviceName) ? globalThis.String(object.serviceName) : "",
      configSource: isSet(object.configSource) ? ConfigSource.fromJSON(object.configSource) : undefined,
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
    };
  },

  toJSON(message: SubmitConfigSourceRequest): unknown {
    const obj: any = {};
    if (message.serviceName !== "") {
      obj.serviceName = message.serviceName;
    }
    if (message.configSource !== undefined) {
      obj.configSource = ConfigSource.toJSON(message.configSource);
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    return obj;
  },

  create(base?: DeepPartial<SubmitConfigSourceRequest>): SubmitConfigSourceRequest {
    return SubmitConfigSourceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SubmitConfigSourceRequest>): SubmitConfigSourceRequest {
    const message = createBaseSubmitConfigSourceRequest();
    message.serviceName = object.serviceName ?? "";
    message.configSource = (object.configSource !== undefined && object.configSource !== null)
      ? ConfigSource.fromPartial(object.configSource)
      : undefined;
    message.validateOnly = object.validateOnly ?? false;
    return message;
  },
};

function createBaseSubmitConfigSourceResponse(): SubmitConfigSourceResponse {
  return { serviceConfig: undefined };
}

export const SubmitConfigSourceResponse: MessageFns<SubmitConfigSourceResponse> = {
  encode(message: SubmitConfigSourceResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.serviceConfig !== undefined) {
      Service.encode(message.serviceConfig, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SubmitConfigSourceResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSubmitConfigSourceResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.serviceConfig = Service.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SubmitConfigSourceResponse {
    return { serviceConfig: isSet(object.serviceConfig) ? Service.fromJSON(object.serviceConfig) : undefined };
  },

  toJSON(message: SubmitConfigSourceResponse): unknown {
    const obj: any = {};
    if (message.serviceConfig !== undefined) {
      obj.serviceConfig = Service.toJSON(message.serviceConfig);
    }
    return obj;
  },

  create(base?: DeepPartial<SubmitConfigSourceResponse>): SubmitConfigSourceResponse {
    return SubmitConfigSourceResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SubmitConfigSourceResponse>): SubmitConfigSourceResponse {
    const message = createBaseSubmitConfigSourceResponse();
    message.serviceConfig = (object.serviceConfig !== undefined && object.serviceConfig !== null)
      ? Service.fromPartial(object.serviceConfig)
      : undefined;
    return message;
  },
};

function createBaseCreateServiceRolloutRequest(): CreateServiceRolloutRequest {
  return { serviceName: "", rollout: undefined };
}

export const CreateServiceRolloutRequest: MessageFns<CreateServiceRolloutRequest> = {
  encode(message: CreateServiceRolloutRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.serviceName !== "") {
      writer.uint32(10).string(message.serviceName);
    }
    if (message.rollout !== undefined) {
      Rollout.encode(message.rollout, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateServiceRolloutRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateServiceRolloutRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.serviceName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.rollout = Rollout.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateServiceRolloutRequest {
    return {
      serviceName: isSet(object.serviceName) ? globalThis.String(object.serviceName) : "",
      rollout: isSet(object.rollout) ? Rollout.fromJSON(object.rollout) : undefined,
    };
  },

  toJSON(message: CreateServiceRolloutRequest): unknown {
    const obj: any = {};
    if (message.serviceName !== "") {
      obj.serviceName = message.serviceName;
    }
    if (message.rollout !== undefined) {
      obj.rollout = Rollout.toJSON(message.rollout);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateServiceRolloutRequest>): CreateServiceRolloutRequest {
    return CreateServiceRolloutRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateServiceRolloutRequest>): CreateServiceRolloutRequest {
    const message = createBaseCreateServiceRolloutRequest();
    message.serviceName = object.serviceName ?? "";
    message.rollout = (object.rollout !== undefined && object.rollout !== null)
      ? Rollout.fromPartial(object.rollout)
      : undefined;
    return message;
  },
};

function createBaseListServiceRolloutsRequest(): ListServiceRolloutsRequest {
  return { serviceName: "", pageToken: "", pageSize: 0, filter: "" };
}

export const ListServiceRolloutsRequest: MessageFns<ListServiceRolloutsRequest> = {
  encode(message: ListServiceRolloutsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.serviceName !== "") {
      writer.uint32(10).string(message.serviceName);
    }
    if (message.pageToken !== "") {
      writer.uint32(18).string(message.pageToken);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListServiceRolloutsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListServiceRolloutsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.serviceName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListServiceRolloutsRequest {
    return {
      serviceName: isSet(object.serviceName) ? globalThis.String(object.serviceName) : "",
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
    };
  },

  toJSON(message: ListServiceRolloutsRequest): unknown {
    const obj: any = {};
    if (message.serviceName !== "") {
      obj.serviceName = message.serviceName;
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    return obj;
  },

  create(base?: DeepPartial<ListServiceRolloutsRequest>): ListServiceRolloutsRequest {
    return ListServiceRolloutsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListServiceRolloutsRequest>): ListServiceRolloutsRequest {
    const message = createBaseListServiceRolloutsRequest();
    message.serviceName = object.serviceName ?? "";
    message.pageToken = object.pageToken ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.filter = object.filter ?? "";
    return message;
  },
};

function createBaseListServiceRolloutsResponse(): ListServiceRolloutsResponse {
  return { rollouts: [], nextPageToken: "" };
}

export const ListServiceRolloutsResponse: MessageFns<ListServiceRolloutsResponse> = {
  encode(message: ListServiceRolloutsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.rollouts) {
      Rollout.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListServiceRolloutsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListServiceRolloutsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.rollouts.push(Rollout.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListServiceRolloutsResponse {
    return {
      rollouts: globalThis.Array.isArray(object?.rollouts) ? object.rollouts.map((e: any) => Rollout.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListServiceRolloutsResponse): unknown {
    const obj: any = {};
    if (message.rollouts?.length) {
      obj.rollouts = message.rollouts.map((e) => Rollout.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListServiceRolloutsResponse>): ListServiceRolloutsResponse {
    return ListServiceRolloutsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListServiceRolloutsResponse>): ListServiceRolloutsResponse {
    const message = createBaseListServiceRolloutsResponse();
    message.rollouts = object.rollouts?.map((e) => Rollout.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetServiceRolloutRequest(): GetServiceRolloutRequest {
  return { serviceName: "", rolloutId: "" };
}

export const GetServiceRolloutRequest: MessageFns<GetServiceRolloutRequest> = {
  encode(message: GetServiceRolloutRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.serviceName !== "") {
      writer.uint32(10).string(message.serviceName);
    }
    if (message.rolloutId !== "") {
      writer.uint32(18).string(message.rolloutId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetServiceRolloutRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetServiceRolloutRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.serviceName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.rolloutId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetServiceRolloutRequest {
    return {
      serviceName: isSet(object.serviceName) ? globalThis.String(object.serviceName) : "",
      rolloutId: isSet(object.rolloutId) ? globalThis.String(object.rolloutId) : "",
    };
  },

  toJSON(message: GetServiceRolloutRequest): unknown {
    const obj: any = {};
    if (message.serviceName !== "") {
      obj.serviceName = message.serviceName;
    }
    if (message.rolloutId !== "") {
      obj.rolloutId = message.rolloutId;
    }
    return obj;
  },

  create(base?: DeepPartial<GetServiceRolloutRequest>): GetServiceRolloutRequest {
    return GetServiceRolloutRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetServiceRolloutRequest>): GetServiceRolloutRequest {
    const message = createBaseGetServiceRolloutRequest();
    message.serviceName = object.serviceName ?? "";
    message.rolloutId = object.rolloutId ?? "";
    return message;
  },
};

function createBaseEnableServiceResponse(): EnableServiceResponse {
  return {};
}

export const EnableServiceResponse: MessageFns<EnableServiceResponse> = {
  encode(_: EnableServiceResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EnableServiceResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEnableServiceResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): EnableServiceResponse {
    return {};
  },

  toJSON(_: EnableServiceResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<EnableServiceResponse>): EnableServiceResponse {
    return EnableServiceResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<EnableServiceResponse>): EnableServiceResponse {
    const message = createBaseEnableServiceResponse();
    return message;
  },
};

function createBaseGenerateConfigReportRequest(): GenerateConfigReportRequest {
  return { newConfig: undefined, oldConfig: undefined };
}

export const GenerateConfigReportRequest: MessageFns<GenerateConfigReportRequest> = {
  encode(message: GenerateConfigReportRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.newConfig !== undefined) {
      Any.encode(message.newConfig, writer.uint32(10).fork()).join();
    }
    if (message.oldConfig !== undefined) {
      Any.encode(message.oldConfig, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GenerateConfigReportRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenerateConfigReportRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.newConfig = Any.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.oldConfig = Any.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenerateConfigReportRequest {
    return {
      newConfig: isSet(object.newConfig) ? Any.fromJSON(object.newConfig) : undefined,
      oldConfig: isSet(object.oldConfig) ? Any.fromJSON(object.oldConfig) : undefined,
    };
  },

  toJSON(message: GenerateConfigReportRequest): unknown {
    const obj: any = {};
    if (message.newConfig !== undefined) {
      obj.newConfig = Any.toJSON(message.newConfig);
    }
    if (message.oldConfig !== undefined) {
      obj.oldConfig = Any.toJSON(message.oldConfig);
    }
    return obj;
  },

  create(base?: DeepPartial<GenerateConfigReportRequest>): GenerateConfigReportRequest {
    return GenerateConfigReportRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GenerateConfigReportRequest>): GenerateConfigReportRequest {
    const message = createBaseGenerateConfigReportRequest();
    message.newConfig = (object.newConfig !== undefined && object.newConfig !== null)
      ? Any.fromPartial(object.newConfig)
      : undefined;
    message.oldConfig = (object.oldConfig !== undefined && object.oldConfig !== null)
      ? Any.fromPartial(object.oldConfig)
      : undefined;
    return message;
  },
};

function createBaseGenerateConfigReportResponse(): GenerateConfigReportResponse {
  return { serviceName: "", id: "", changeReports: [], diagnostics: [] };
}

export const GenerateConfigReportResponse: MessageFns<GenerateConfigReportResponse> = {
  encode(message: GenerateConfigReportResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.serviceName !== "") {
      writer.uint32(10).string(message.serviceName);
    }
    if (message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    for (const v of message.changeReports) {
      ChangeReport.encode(v!, writer.uint32(26).fork()).join();
    }
    for (const v of message.diagnostics) {
      Diagnostic.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GenerateConfigReportResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenerateConfigReportResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.serviceName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.changeReports.push(ChangeReport.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.diagnostics.push(Diagnostic.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenerateConfigReportResponse {
    return {
      serviceName: isSet(object.serviceName) ? globalThis.String(object.serviceName) : "",
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      changeReports: globalThis.Array.isArray(object?.changeReports)
        ? object.changeReports.map((e: any) => ChangeReport.fromJSON(e))
        : [],
      diagnostics: globalThis.Array.isArray(object?.diagnostics)
        ? object.diagnostics.map((e: any) => Diagnostic.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GenerateConfigReportResponse): unknown {
    const obj: any = {};
    if (message.serviceName !== "") {
      obj.serviceName = message.serviceName;
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.changeReports?.length) {
      obj.changeReports = message.changeReports.map((e) => ChangeReport.toJSON(e));
    }
    if (message.diagnostics?.length) {
      obj.diagnostics = message.diagnostics.map((e) => Diagnostic.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<GenerateConfigReportResponse>): GenerateConfigReportResponse {
    return GenerateConfigReportResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GenerateConfigReportResponse>): GenerateConfigReportResponse {
    const message = createBaseGenerateConfigReportResponse();
    message.serviceName = object.serviceName ?? "";
    message.id = object.id ?? "";
    message.changeReports = object.changeReports?.map((e) => ChangeReport.fromPartial(e)) || [];
    message.diagnostics = object.diagnostics?.map((e) => Diagnostic.fromPartial(e)) || [];
    return message;
  },
};

/**
 * [Google Service Management
 * API](https://cloud.google.com/service-infrastructure/docs/overview)
 */
export type ServiceManagerDefinition = typeof ServiceManagerDefinition;
export const ServiceManagerDefinition = {
  name: "ServiceManager",
  fullName: "google.api.servicemanagement.v1.ServiceManager",
  methods: {
    /**
     * Lists managed services.
     *
     * Returns all public services. For authenticated users, also returns all
     * services the calling user has "servicemanagement.services.get" permission
     * for.
     */
    listServices: {
      name: "ListServices",
      requestType: ListServicesRequest,
      requestStream: false,
      responseType: ListServicesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              31,
              112,
              114,
              111,
              100,
              117,
              99,
              101,
              114,
              95,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              95,
              105,
              100,
              44,
              99,
              111,
              110,
              115,
              117,
              109,
              101,
              114,
              95,
              105,
              100,
            ]),
          ],
          578365826: [Buffer.from([14, 18, 12, 47, 118, 49, 47, 115, 101, 114, 118, 105, 99, 101, 115])],
        },
      },
    },
    /**
     * Gets a managed service. Authentication is required unless the service is
     * public.
     */
    getService: {
      name: "GetService",
      requestType: GetServiceRequest,
      requestStream: false,
      responseType: ManagedService,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([12, 115, 101, 114, 118, 105, 99, 101, 95, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              29,
              18,
              27,
              47,
              118,
              49,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
              47,
              123,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              95,
              110,
              97,
              109,
              101,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Creates a new managed service.
     *
     * A managed service is immutable, and is subject to mandatory 30-day
     * data retention. You cannot move a service or recreate it within 30 days
     * after deletion.
     *
     * One producer project can own no more than 500 services. For security and
     * reliability purposes, a production service should be hosted in a
     * dedicated producer project.
     *
     * Operation<response: ManagedService>
     */
    createService: {
      name: "CreateService",
      requestType: CreateServiceRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              99,
              10,
              46,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              97,
              112,
              105,
              46,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              109,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              46,
              118,
              49,
              46,
              77,
              97,
              110,
              97,
              103,
              101,
              100,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              18,
              49,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              97,
              112,
              105,
              46,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              109,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              46,
              118,
              49,
              46,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([7, 115, 101, 114, 118, 105, 99, 101])],
          578365826: [
            Buffer.from([
              23,
              58,
              7,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              34,
              12,
              47,
              118,
              49,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Deletes a managed service. This method will change the service to the
     * `Soft-Delete` state for 30 days. Within this period, service producers may
     * call
     * [UndeleteService][google.api.servicemanagement.v1.ServiceManager.UndeleteService]
     * to restore the service. After 30 days, the service will be permanently
     * deleted.
     *
     * Operation<response: google.protobuf.Empty>
     */
    deleteService: {
      name: "DeleteService",
      requestType: DeleteServiceRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              74,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              49,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              97,
              112,
              105,
              46,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              109,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              46,
              118,
              49,
              46,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([12, 115, 101, 114, 118, 105, 99, 101, 95, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              29,
              42,
              27,
              47,
              118,
              49,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
              47,
              123,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              95,
              110,
              97,
              109,
              101,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Revives a previously deleted managed service. The method restores the
     * service using the configuration at the time the service was deleted.
     * The target service must exist and must have been deleted within the
     * last 30 days.
     *
     * Operation<response: UndeleteServiceResponse>
     */
    undeleteService: {
      name: "UndeleteService",
      requestType: UndeleteServiceRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              108,
              10,
              55,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              97,
              112,
              105,
              46,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              109,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              46,
              118,
              49,
              46,
              85,
              110,
              100,
              101,
              108,
              101,
              116,
              101,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              18,
              49,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              97,
              112,
              105,
              46,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              109,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              46,
              118,
              49,
              46,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([12, 115, 101, 114, 118, 105, 99, 101, 95, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              38,
              34,
              36,
              47,
              118,
              49,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
              47,
              123,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              95,
              110,
              97,
              109,
              101,
              125,
              58,
              117,
              110,
              100,
              101,
              108,
              101,
              116,
              101,
            ]),
          ],
        },
      },
    },
    /**
     * Lists the history of the service configuration for a managed service,
     * from the newest to the oldest.
     */
    listServiceConfigs: {
      name: "ListServiceConfigs",
      requestType: ListServiceConfigsRequest,
      requestStream: false,
      responseType: ListServiceConfigsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([12, 115, 101, 114, 118, 105, 99, 101, 95, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              37,
              18,
              35,
              47,
              118,
              49,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
              47,
              123,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              95,
              110,
              97,
              109,
              101,
              125,
              47,
              99,
              111,
              110,
              102,
              105,
              103,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets a service configuration (version) for a managed service. */
    getServiceConfig: {
      name: "GetServiceConfig",
      requestType: GetServiceConfigRequest,
      requestStream: false,
      responseType: Service,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              27,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              95,
              110,
              97,
              109,
              101,
              44,
              99,
              111,
              110,
              102,
              105,
              103,
              95,
              105,
              100,
              44,
              118,
              105,
              101,
              119,
            ]),
          ],
          578365826: [
            Buffer.from([
              87,
              90,
              36,
              18,
              34,
              47,
              118,
              49,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
              47,
              123,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              95,
              110,
              97,
              109,
              101,
              125,
              47,
              99,
              111,
              110,
              102,
              105,
              103,
              18,
              47,
              47,
              118,
              49,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
              47,
              123,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              95,
              110,
              97,
              109,
              101,
              125,
              47,
              99,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              123,
              99,
              111,
              110,
              102,
              105,
              103,
              95,
              105,
              100,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Creates a new service configuration (version) for a managed service.
     * This method only stores the service configuration. To roll out the service
     * configuration to backend systems please call
     * [CreateServiceRollout][google.api.servicemanagement.v1.ServiceManager.CreateServiceRollout].
     *
     * Only the 100 most recent service configurations and ones referenced by
     * existing rollouts are kept for each service. The rest will be deleted
     * eventually.
     */
    createServiceConfig: {
      name: "CreateServiceConfig",
      requestType: CreateServiceConfigRequest,
      requestStream: false,
      responseType: Service,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              27,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              95,
              110,
              97,
              109,
              101,
              44,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
            ]),
          ],
          578365826: [
            Buffer.from([
              53,
              58,
              14,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              34,
              35,
              47,
              118,
              49,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
              47,
              123,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              95,
              110,
              97,
              109,
              101,
              125,
              47,
              99,
              111,
              110,
              102,
              105,
              103,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Creates a new service configuration (version) for a managed service based
     * on
     * user-supplied configuration source files (for example: OpenAPI
     * Specification). This method stores the source configurations as well as the
     * generated service configuration. To rollout the service configuration to
     * other services,
     * please call
     * [CreateServiceRollout][google.api.servicemanagement.v1.ServiceManager.CreateServiceRollout].
     *
     * Only the 100 most recent configuration sources and ones referenced by
     * existing service configurtions are kept for each service. The rest will be
     * deleted eventually.
     *
     * Operation<response: SubmitConfigSourceResponse>
     */
    submitConfigSource: {
      name: "SubmitConfigSource",
      requestType: SubmitConfigSourceRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              111,
              10,
              58,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              97,
              112,
              105,
              46,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              109,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              46,
              118,
              49,
              46,
              83,
              117,
              98,
              109,
              105,
              116,
              67,
              111,
              110,
              102,
              105,
              103,
              83,
              111,
              117,
              114,
              99,
              101,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              18,
              49,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              97,
              112,
              105,
              46,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              109,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              46,
              118,
              49,
              46,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              40,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              95,
              110,
              97,
              109,
              101,
              44,
              99,
              111,
              110,
              102,
              105,
              103,
              95,
              115,
              111,
              117,
              114,
              99,
              101,
              44,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              101,
              95,
              111,
              110,
              108,
              121,
            ]),
          ],
          578365826: [
            Buffer.from([
              47,
              58,
              1,
              42,
              34,
              42,
              47,
              118,
              49,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
              47,
              123,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              95,
              110,
              97,
              109,
              101,
              125,
              47,
              99,
              111,
              110,
              102,
              105,
              103,
              115,
              58,
              115,
              117,
              98,
              109,
              105,
              116,
            ]),
          ],
        },
      },
    },
    /**
     * Lists the history of the service configuration rollouts for a managed
     * service, from the newest to the oldest.
     */
    listServiceRollouts: {
      name: "ListServiceRollouts",
      requestType: ListServiceRolloutsRequest,
      requestStream: false,
      responseType: ListServiceRolloutsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              19,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              95,
              110,
              97,
              109,
              101,
              44,
              102,
              105,
              108,
              116,
              101,
              114,
            ]),
          ],
          578365826: [
            Buffer.from([
              38,
              18,
              36,
              47,
              118,
              49,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
              47,
              123,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              95,
              110,
              97,
              109,
              101,
              125,
              47,
              114,
              111,
              108,
              108,
              111,
              117,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Gets a service configuration
     * [rollout][google.api.servicemanagement.v1.Rollout].
     */
    getServiceRollout: {
      name: "GetServiceRollout",
      requestType: GetServiceRolloutRequest,
      requestStream: false,
      responseType: Rollout,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              23,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              95,
              110,
              97,
              109,
              101,
              44,
              114,
              111,
              108,
              108,
              111,
              117,
              116,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              51,
              18,
              49,
              47,
              118,
              49,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
              47,
              123,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              95,
              110,
              97,
              109,
              101,
              125,
              47,
              114,
              111,
              108,
              108,
              111,
              117,
              116,
              115,
              47,
              123,
              114,
              111,
              108,
              108,
              111,
              117,
              116,
              95,
              105,
              100,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Creates a new service configuration rollout. Based on rollout, the
     * Google Service Management will roll out the service configurations to
     * different backend services. For example, the logging configuration will be
     * pushed to Google Cloud Logging.
     *
     * Please note that any previous pending and running Rollouts and associated
     * Operations will be automatically cancelled so that the latest Rollout will
     * not be blocked by previous Rollouts.
     *
     * Only the 100 most recent (in any state) and the last 10 successful (if not
     * already part of the set of 100 most recent) rollouts are kept for each
     * service. The rest will be deleted eventually.
     *
     * Operation<response: Rollout>
     */
    createServiceRollout: {
      name: "CreateServiceRollout",
      requestType: CreateServiceRolloutRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              92,
              10,
              39,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              97,
              112,
              105,
              46,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              109,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              46,
              118,
              49,
              46,
              82,
              111,
              108,
              108,
              111,
              117,
              116,
              18,
              49,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              97,
              112,
              105,
              46,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              109,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              46,
              118,
              49,
              46,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              20,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              95,
              110,
              97,
              109,
              101,
              44,
              114,
              111,
              108,
              108,
              111,
              117,
              116,
            ]),
          ],
          578365826: [
            Buffer.from([
              47,
              58,
              7,
              114,
              111,
              108,
              108,
              111,
              117,
              116,
              34,
              36,
              47,
              118,
              49,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
              47,
              123,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              95,
              110,
              97,
              109,
              101,
              125,
              47,
              114,
              111,
              108,
              108,
              111,
              117,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Generates and returns a report (errors, warnings and changes from
     * existing configurations) associated with
     * GenerateConfigReportRequest.new_value
     *
     * If GenerateConfigReportRequest.old_value is specified,
     * GenerateConfigReportRequest will contain a single ChangeReport based on the
     * comparison between GenerateConfigReportRequest.new_value and
     * GenerateConfigReportRequest.old_value.
     * If GenerateConfigReportRequest.old_value is not specified, this method
     * will compare GenerateConfigReportRequest.new_value with the last pushed
     * service configuration.
     */
    generateConfigReport: {
      name: "GenerateConfigReport",
      requestType: GenerateConfigReportRequest,
      requestStream: false,
      responseType: GenerateConfigReportResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              21,
              110,
              101,
              119,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              44,
              111,
              108,
              100,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
            ]),
          ],
          578365826: [
            Buffer.from([
              38,
              58,
              1,
              42,
              34,
              33,
              47,
              118,
              49,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
              58,
              103,
              101,
              110,
              101,
              114,
              97,
              116,
              101,
              67,
              111,
              110,
              102,
              105,
              103,
              82,
              101,
              112,
              111,
              114,
              116,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface ServiceManagerServiceImplementation<CallContextExt = {}> {
  /**
   * Lists managed services.
   *
   * Returns all public services. For authenticated users, also returns all
   * services the calling user has "servicemanagement.services.get" permission
   * for.
   */
  listServices(
    request: ListServicesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListServicesResponse>>;
  /**
   * Gets a managed service. Authentication is required unless the service is
   * public.
   */
  getService(request: GetServiceRequest, context: CallContext & CallContextExt): Promise<DeepPartial<ManagedService>>;
  /**
   * Creates a new managed service.
   *
   * A managed service is immutable, and is subject to mandatory 30-day
   * data retention. You cannot move a service or recreate it within 30 days
   * after deletion.
   *
   * One producer project can own no more than 500 services. For security and
   * reliability purposes, a production service should be hosted in a
   * dedicated producer project.
   *
   * Operation<response: ManagedService>
   */
  createService(request: CreateServiceRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /**
   * Deletes a managed service. This method will change the service to the
   * `Soft-Delete` state for 30 days. Within this period, service producers may
   * call
   * [UndeleteService][google.api.servicemanagement.v1.ServiceManager.UndeleteService]
   * to restore the service. After 30 days, the service will be permanently
   * deleted.
   *
   * Operation<response: google.protobuf.Empty>
   */
  deleteService(request: DeleteServiceRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /**
   * Revives a previously deleted managed service. The method restores the
   * service using the configuration at the time the service was deleted.
   * The target service must exist and must have been deleted within the
   * last 30 days.
   *
   * Operation<response: UndeleteServiceResponse>
   */
  undeleteService(
    request: UndeleteServiceRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Lists the history of the service configuration for a managed service,
   * from the newest to the oldest.
   */
  listServiceConfigs(
    request: ListServiceConfigsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListServiceConfigsResponse>>;
  /** Gets a service configuration (version) for a managed service. */
  getServiceConfig(
    request: GetServiceConfigRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Service>>;
  /**
   * Creates a new service configuration (version) for a managed service.
   * This method only stores the service configuration. To roll out the service
   * configuration to backend systems please call
   * [CreateServiceRollout][google.api.servicemanagement.v1.ServiceManager.CreateServiceRollout].
   *
   * Only the 100 most recent service configurations and ones referenced by
   * existing rollouts are kept for each service. The rest will be deleted
   * eventually.
   */
  createServiceConfig(
    request: CreateServiceConfigRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Service>>;
  /**
   * Creates a new service configuration (version) for a managed service based
   * on
   * user-supplied configuration source files (for example: OpenAPI
   * Specification). This method stores the source configurations as well as the
   * generated service configuration. To rollout the service configuration to
   * other services,
   * please call
   * [CreateServiceRollout][google.api.servicemanagement.v1.ServiceManager.CreateServiceRollout].
   *
   * Only the 100 most recent configuration sources and ones referenced by
   * existing service configurtions are kept for each service. The rest will be
   * deleted eventually.
   *
   * Operation<response: SubmitConfigSourceResponse>
   */
  submitConfigSource(
    request: SubmitConfigSourceRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Lists the history of the service configuration rollouts for a managed
   * service, from the newest to the oldest.
   */
  listServiceRollouts(
    request: ListServiceRolloutsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListServiceRolloutsResponse>>;
  /**
   * Gets a service configuration
   * [rollout][google.api.servicemanagement.v1.Rollout].
   */
  getServiceRollout(
    request: GetServiceRolloutRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Rollout>>;
  /**
   * Creates a new service configuration rollout. Based on rollout, the
   * Google Service Management will roll out the service configurations to
   * different backend services. For example, the logging configuration will be
   * pushed to Google Cloud Logging.
   *
   * Please note that any previous pending and running Rollouts and associated
   * Operations will be automatically cancelled so that the latest Rollout will
   * not be blocked by previous Rollouts.
   *
   * Only the 100 most recent (in any state) and the last 10 successful (if not
   * already part of the set of 100 most recent) rollouts are kept for each
   * service. The rest will be deleted eventually.
   *
   * Operation<response: Rollout>
   */
  createServiceRollout(
    request: CreateServiceRolloutRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Generates and returns a report (errors, warnings and changes from
   * existing configurations) associated with
   * GenerateConfigReportRequest.new_value
   *
   * If GenerateConfigReportRequest.old_value is specified,
   * GenerateConfigReportRequest will contain a single ChangeReport based on the
   * comparison between GenerateConfigReportRequest.new_value and
   * GenerateConfigReportRequest.old_value.
   * If GenerateConfigReportRequest.old_value is not specified, this method
   * will compare GenerateConfigReportRequest.new_value with the last pushed
   * service configuration.
   */
  generateConfigReport(
    request: GenerateConfigReportRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GenerateConfigReportResponse>>;
}

export interface ServiceManagerClient<CallOptionsExt = {}> {
  /**
   * Lists managed services.
   *
   * Returns all public services. For authenticated users, also returns all
   * services the calling user has "servicemanagement.services.get" permission
   * for.
   */
  listServices(
    request: DeepPartial<ListServicesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListServicesResponse>;
  /**
   * Gets a managed service. Authentication is required unless the service is
   * public.
   */
  getService(request: DeepPartial<GetServiceRequest>, options?: CallOptions & CallOptionsExt): Promise<ManagedService>;
  /**
   * Creates a new managed service.
   *
   * A managed service is immutable, and is subject to mandatory 30-day
   * data retention. You cannot move a service or recreate it within 30 days
   * after deletion.
   *
   * One producer project can own no more than 500 services. For security and
   * reliability purposes, a production service should be hosted in a
   * dedicated producer project.
   *
   * Operation<response: ManagedService>
   */
  createService(request: DeepPartial<CreateServiceRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /**
   * Deletes a managed service. This method will change the service to the
   * `Soft-Delete` state for 30 days. Within this period, service producers may
   * call
   * [UndeleteService][google.api.servicemanagement.v1.ServiceManager.UndeleteService]
   * to restore the service. After 30 days, the service will be permanently
   * deleted.
   *
   * Operation<response: google.protobuf.Empty>
   */
  deleteService(request: DeepPartial<DeleteServiceRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /**
   * Revives a previously deleted managed service. The method restores the
   * service using the configuration at the time the service was deleted.
   * The target service must exist and must have been deleted within the
   * last 30 days.
   *
   * Operation<response: UndeleteServiceResponse>
   */
  undeleteService(
    request: DeepPartial<UndeleteServiceRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Lists the history of the service configuration for a managed service,
   * from the newest to the oldest.
   */
  listServiceConfigs(
    request: DeepPartial<ListServiceConfigsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListServiceConfigsResponse>;
  /** Gets a service configuration (version) for a managed service. */
  getServiceConfig(
    request: DeepPartial<GetServiceConfigRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Service>;
  /**
   * Creates a new service configuration (version) for a managed service.
   * This method only stores the service configuration. To roll out the service
   * configuration to backend systems please call
   * [CreateServiceRollout][google.api.servicemanagement.v1.ServiceManager.CreateServiceRollout].
   *
   * Only the 100 most recent service configurations and ones referenced by
   * existing rollouts are kept for each service. The rest will be deleted
   * eventually.
   */
  createServiceConfig(
    request: DeepPartial<CreateServiceConfigRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Service>;
  /**
   * Creates a new service configuration (version) for a managed service based
   * on
   * user-supplied configuration source files (for example: OpenAPI
   * Specification). This method stores the source configurations as well as the
   * generated service configuration. To rollout the service configuration to
   * other services,
   * please call
   * [CreateServiceRollout][google.api.servicemanagement.v1.ServiceManager.CreateServiceRollout].
   *
   * Only the 100 most recent configuration sources and ones referenced by
   * existing service configurtions are kept for each service. The rest will be
   * deleted eventually.
   *
   * Operation<response: SubmitConfigSourceResponse>
   */
  submitConfigSource(
    request: DeepPartial<SubmitConfigSourceRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Lists the history of the service configuration rollouts for a managed
   * service, from the newest to the oldest.
   */
  listServiceRollouts(
    request: DeepPartial<ListServiceRolloutsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListServiceRolloutsResponse>;
  /**
   * Gets a service configuration
   * [rollout][google.api.servicemanagement.v1.Rollout].
   */
  getServiceRollout(
    request: DeepPartial<GetServiceRolloutRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Rollout>;
  /**
   * Creates a new service configuration rollout. Based on rollout, the
   * Google Service Management will roll out the service configurations to
   * different backend services. For example, the logging configuration will be
   * pushed to Google Cloud Logging.
   *
   * Please note that any previous pending and running Rollouts and associated
   * Operations will be automatically cancelled so that the latest Rollout will
   * not be blocked by previous Rollouts.
   *
   * Only the 100 most recent (in any state) and the last 10 successful (if not
   * already part of the set of 100 most recent) rollouts are kept for each
   * service. The rest will be deleted eventually.
   *
   * Operation<response: Rollout>
   */
  createServiceRollout(
    request: DeepPartial<CreateServiceRolloutRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Generates and returns a report (errors, warnings and changes from
   * existing configurations) associated with
   * GenerateConfigReportRequest.new_value
   *
   * If GenerateConfigReportRequest.old_value is specified,
   * GenerateConfigReportRequest will contain a single ChangeReport based on the
   * comparison between GenerateConfigReportRequest.new_value and
   * GenerateConfigReportRequest.old_value.
   * If GenerateConfigReportRequest.old_value is not specified, this method
   * will compare GenerateConfigReportRequest.new_value with the last pushed
   * service configuration.
   */
  generateConfigReport(
    request: DeepPartial<GenerateConfigReportRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GenerateConfigReportResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
