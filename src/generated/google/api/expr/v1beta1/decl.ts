// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/api/expr/v1beta1/decl.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Expr } from "./expr.js";

export const protobufPackage = "google.api.expr.v1beta1";

/** A declaration. */
export interface Decl {
  /** The id of the declaration. */
  id: number;
  /** The name of the declaration. */
  name: string;
  /** The documentation string for the declaration. */
  doc: string;
  /** An identifier declaration. */
  ident?:
    | IdentDecl
    | undefined;
  /** A function declaration. */
  function?: FunctionDecl | undefined;
}

/**
 * The declared type of a variable.
 *
 * Extends runtime type values with extra information used for type checking
 * and dispatching.
 */
export interface DeclType {
  /** The expression id of the declared type, if applicable. */
  id: number;
  /** The type name, e.g. 'int', 'my.type.Type' or 'T' */
  type: string;
  /**
   * An ordered list of type parameters, e.g. `<string, int>`.
   * Only applies to a subset of types, e.g. `map`, `list`.
   */
  typeParams: DeclType[];
}

/** An identifier declaration. */
export interface IdentDecl {
  /** Optional type of the identifier. */
  type:
    | DeclType
    | undefined;
  /** Optional value of the identifier. */
  value: Expr | undefined;
}

/** A function declaration. */
export interface FunctionDecl {
  /** The function arguments. */
  args: IdentDecl[];
  /** Optional declared return type. */
  returnType:
    | DeclType
    | undefined;
  /** If the first argument of the function is the receiver. */
  receiverFunction: boolean;
}

function createBaseDecl(): Decl {
  return { id: 0, name: "", doc: "", ident: undefined, function: undefined };
}

export const Decl: MessageFns<Decl> = {
  encode(message: Decl, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.doc !== "") {
      writer.uint32(26).string(message.doc);
    }
    if (message.ident !== undefined) {
      IdentDecl.encode(message.ident, writer.uint32(34).fork()).join();
    }
    if (message.function !== undefined) {
      FunctionDecl.encode(message.function, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Decl {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDecl();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.doc = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.ident = IdentDecl.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.function = FunctionDecl.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Decl {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      doc: isSet(object.doc) ? globalThis.String(object.doc) : "",
      ident: isSet(object.ident) ? IdentDecl.fromJSON(object.ident) : undefined,
      function: isSet(object.function) ? FunctionDecl.fromJSON(object.function) : undefined,
    };
  },

  toJSON(message: Decl): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.doc !== "") {
      obj.doc = message.doc;
    }
    if (message.ident !== undefined) {
      obj.ident = IdentDecl.toJSON(message.ident);
    }
    if (message.function !== undefined) {
      obj.function = FunctionDecl.toJSON(message.function);
    }
    return obj;
  },

  create(base?: DeepPartial<Decl>): Decl {
    return Decl.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Decl>): Decl {
    const message = createBaseDecl();
    message.id = object.id ?? 0;
    message.name = object.name ?? "";
    message.doc = object.doc ?? "";
    message.ident = (object.ident !== undefined && object.ident !== null)
      ? IdentDecl.fromPartial(object.ident)
      : undefined;
    message.function = (object.function !== undefined && object.function !== null)
      ? FunctionDecl.fromPartial(object.function)
      : undefined;
    return message;
  },
};

function createBaseDeclType(): DeclType {
  return { id: 0, type: "", typeParams: [] };
}

export const DeclType: MessageFns<DeclType> = {
  encode(message: DeclType, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.type !== "") {
      writer.uint32(18).string(message.type);
    }
    for (const v of message.typeParams) {
      DeclType.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeclType {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeclType();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.type = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.typeParams.push(DeclType.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeclType {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      typeParams: globalThis.Array.isArray(object?.typeParams)
        ? object.typeParams.map((e: any) => DeclType.fromJSON(e))
        : [],
    };
  },

  toJSON(message: DeclType): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.typeParams?.length) {
      obj.typeParams = message.typeParams.map((e) => DeclType.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<DeclType>): DeclType {
    return DeclType.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeclType>): DeclType {
    const message = createBaseDeclType();
    message.id = object.id ?? 0;
    message.type = object.type ?? "";
    message.typeParams = object.typeParams?.map((e) => DeclType.fromPartial(e)) || [];
    return message;
  },
};

function createBaseIdentDecl(): IdentDecl {
  return { type: undefined, value: undefined };
}

export const IdentDecl: MessageFns<IdentDecl> = {
  encode(message: IdentDecl, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== undefined) {
      DeclType.encode(message.type, writer.uint32(26).fork()).join();
    }
    if (message.value !== undefined) {
      Expr.encode(message.value, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IdentDecl {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIdentDecl();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 3:
          if (tag !== 26) {
            break;
          }

          message.type = DeclType.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.value = Expr.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IdentDecl {
    return {
      type: isSet(object.type) ? DeclType.fromJSON(object.type) : undefined,
      value: isSet(object.value) ? Expr.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: IdentDecl): unknown {
    const obj: any = {};
    if (message.type !== undefined) {
      obj.type = DeclType.toJSON(message.type);
    }
    if (message.value !== undefined) {
      obj.value = Expr.toJSON(message.value);
    }
    return obj;
  },

  create(base?: DeepPartial<IdentDecl>): IdentDecl {
    return IdentDecl.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<IdentDecl>): IdentDecl {
    const message = createBaseIdentDecl();
    message.type = (object.type !== undefined && object.type !== null) ? DeclType.fromPartial(object.type) : undefined;
    message.value = (object.value !== undefined && object.value !== null) ? Expr.fromPartial(object.value) : undefined;
    return message;
  },
};

function createBaseFunctionDecl(): FunctionDecl {
  return { args: [], returnType: undefined, receiverFunction: false };
}

export const FunctionDecl: MessageFns<FunctionDecl> = {
  encode(message: FunctionDecl, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.args) {
      IdentDecl.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.returnType !== undefined) {
      DeclType.encode(message.returnType, writer.uint32(18).fork()).join();
    }
    if (message.receiverFunction !== false) {
      writer.uint32(24).bool(message.receiverFunction);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FunctionDecl {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFunctionDecl();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.args.push(IdentDecl.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.returnType = DeclType.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.receiverFunction = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FunctionDecl {
    return {
      args: globalThis.Array.isArray(object?.args) ? object.args.map((e: any) => IdentDecl.fromJSON(e)) : [],
      returnType: isSet(object.returnType) ? DeclType.fromJSON(object.returnType) : undefined,
      receiverFunction: isSet(object.receiverFunction) ? globalThis.Boolean(object.receiverFunction) : false,
    };
  },

  toJSON(message: FunctionDecl): unknown {
    const obj: any = {};
    if (message.args?.length) {
      obj.args = message.args.map((e) => IdentDecl.toJSON(e));
    }
    if (message.returnType !== undefined) {
      obj.returnType = DeclType.toJSON(message.returnType);
    }
    if (message.receiverFunction !== false) {
      obj.receiverFunction = message.receiverFunction;
    }
    return obj;
  },

  create(base?: DeepPartial<FunctionDecl>): FunctionDecl {
    return FunctionDecl.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FunctionDecl>): FunctionDecl {
    const message = createBaseFunctionDecl();
    message.args = object.args?.map((e) => IdentDecl.fromPartial(e)) || [];
    message.returnType = (object.returnType !== undefined && object.returnType !== null)
      ? DeclType.fromPartial(object.returnType)
      : undefined;
    message.receiverFunction = object.receiverFunction ?? false;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
