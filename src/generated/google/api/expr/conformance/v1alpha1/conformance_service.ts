// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/api/expr/conformance/v1alpha1/conformance_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Status } from "../../../../rpc/status.js";
import { CheckedExpr, Decl } from "../../v1alpha1/checked.js";
import { ExprValue } from "../../v1alpha1/eval.js";
import { ParsedExpr } from "../../v1alpha1/syntax.js";

export const protobufPackage = "google.api.expr.conformance.v1alpha1";

/** Request message for the Parse method. */
export interface ParseRequest {
  /** Required. Source text in CEL syntax. */
  celSource: string;
  /** Tag for version of CEL syntax, for future use. */
  syntaxVersion: string;
  /** File or resource for source text, used in [SourceInfo][google.api.SourceInfo]. */
  sourceLocation: string;
  /** Prevent macro expansion.  See "Macros" in Language Defiinition. */
  disableMacros: boolean;
}

/** Response message for the Parse method. */
export interface ParseResponse {
  /** The parsed representation, or unset if parsing failed. */
  parsedExpr:
    | ParsedExpr
    | undefined;
  /** Any number of issues with [StatusDetails][] as the details. */
  issues: Status[];
}

/** Request message for the Check method. */
export interface CheckRequest {
  /** Required. The parsed representation of the CEL program. */
  parsedExpr:
    | ParsedExpr
    | undefined;
  /**
   * Declarations of types for external variables and functions.
   * Required if program uses external variables or functions
   * not in the default environment.
   */
  typeEnv: Decl[];
  /**
   * The protocol buffer context.  See "Name Resolution" in the
   * Language Definition.
   */
  container: string;
  /**
   * If true, use only the declarations in [type_env][google.api.expr.conformance.v1alpha1.CheckRequest.type_env].  If false (default),
   * add declarations for the standard definitions to the type environment.  See
   * "Standard Definitions" in the Language Definition.
   */
  noStdEnv: boolean;
}

/** Response message for the Check method. */
export interface CheckResponse {
  /** The annotated representation, or unset if checking failed. */
  checkedExpr:
    | CheckedExpr
    | undefined;
  /** Any number of issues with [StatusDetails][] as the details. */
  issues: Status[];
}

/** Request message for the Eval method. */
export interface EvalRequest {
  /** Evaluate based on the parsed representation. */
  parsedExpr?:
    | ParsedExpr
    | undefined;
  /** Evaluate based on the checked representation. */
  checkedExpr?:
    | CheckedExpr
    | undefined;
  /**
   * Bindings for the external variables.  The types SHOULD be compatible
   * with the type environment in [CheckRequest][google.api.expr.conformance.v1alpha1.CheckRequest], if checked.
   */
  bindings: { [key: string]: ExprValue };
  /** SHOULD be the same container as used in [CheckRequest][google.api.expr.conformance.v1alpha1.CheckRequest], if checked. */
  container: string;
}

export interface EvalRequest_BindingsEntry {
  key: string;
  value: ExprValue | undefined;
}

/** Response message for the Eval method. */
export interface EvalResponse {
  /** The execution result, or unset if execution couldn't start. */
  result:
    | ExprValue
    | undefined;
  /**
   * Any number of issues with [StatusDetails][] as the details.
   * Note that CEL execution errors are reified into [ExprValue][].
   * Nevertheless, we'll allow out-of-band issues to be raised,
   * which also makes the replies more regular.
   */
  issues: Status[];
}

/** A specific position in source. */
export interface SourcePosition {
  /** The source location name (e.g. file name). */
  location: string;
  /** The UTF-8 code unit offset. */
  offset: number;
  /**
   * The 1-based index of the starting line in the source text
   * where the issue occurs, or 0 if unknown.
   */
  line: number;
  /**
   * The 0-based index of the starting position within the line of source text
   * where the issue occurs.  Only meaningful if line is nonzero.
   */
  column: number;
}

/**
 * Warnings or errors in service execution are represented by
 * [google.rpc.Status][google.rpc.Status] messages, with the following message
 * in the details field.
 */
export interface IssueDetails {
  /** The severity of the issue. */
  severity: IssueDetails_Severity;
  /** Position in the source, if known. */
  position:
    | SourcePosition
    | undefined;
  /** Expression ID from [Expr][], 0 if unknown. */
  id: Long;
}

/** Severities of issues. */
export enum IssueDetails_Severity {
  /** SEVERITY_UNSPECIFIED - An unspecified severity. */
  SEVERITY_UNSPECIFIED = 0,
  /**
   * DEPRECATION - Deprecation issue for statements and method that may no longer be
   * supported or maintained.
   */
  DEPRECATION = 1,
  /** WARNING - Warnings such as: unused variables. */
  WARNING = 2,
  /** ERROR - Errors such as: unmatched curly braces or variable redefinition. */
  ERROR = 3,
  UNRECOGNIZED = -1,
}

export function issueDetails_SeverityFromJSON(object: any): IssueDetails_Severity {
  switch (object) {
    case 0:
    case "SEVERITY_UNSPECIFIED":
      return IssueDetails_Severity.SEVERITY_UNSPECIFIED;
    case 1:
    case "DEPRECATION":
      return IssueDetails_Severity.DEPRECATION;
    case 2:
    case "WARNING":
      return IssueDetails_Severity.WARNING;
    case 3:
    case "ERROR":
      return IssueDetails_Severity.ERROR;
    case -1:
    case "UNRECOGNIZED":
    default:
      return IssueDetails_Severity.UNRECOGNIZED;
  }
}

export function issueDetails_SeverityToJSON(object: IssueDetails_Severity): string {
  switch (object) {
    case IssueDetails_Severity.SEVERITY_UNSPECIFIED:
      return "SEVERITY_UNSPECIFIED";
    case IssueDetails_Severity.DEPRECATION:
      return "DEPRECATION";
    case IssueDetails_Severity.WARNING:
      return "WARNING";
    case IssueDetails_Severity.ERROR:
      return "ERROR";
    case IssueDetails_Severity.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseParseRequest(): ParseRequest {
  return { celSource: "", syntaxVersion: "", sourceLocation: "", disableMacros: false };
}

export const ParseRequest: MessageFns<ParseRequest> = {
  encode(message: ParseRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.celSource !== "") {
      writer.uint32(10).string(message.celSource);
    }
    if (message.syntaxVersion !== "") {
      writer.uint32(18).string(message.syntaxVersion);
    }
    if (message.sourceLocation !== "") {
      writer.uint32(26).string(message.sourceLocation);
    }
    if (message.disableMacros !== false) {
      writer.uint32(32).bool(message.disableMacros);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ParseRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseParseRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.celSource = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.syntaxVersion = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.sourceLocation = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.disableMacros = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ParseRequest {
    return {
      celSource: isSet(object.celSource) ? globalThis.String(object.celSource) : "",
      syntaxVersion: isSet(object.syntaxVersion) ? globalThis.String(object.syntaxVersion) : "",
      sourceLocation: isSet(object.sourceLocation) ? globalThis.String(object.sourceLocation) : "",
      disableMacros: isSet(object.disableMacros) ? globalThis.Boolean(object.disableMacros) : false,
    };
  },

  toJSON(message: ParseRequest): unknown {
    const obj: any = {};
    if (message.celSource !== "") {
      obj.celSource = message.celSource;
    }
    if (message.syntaxVersion !== "") {
      obj.syntaxVersion = message.syntaxVersion;
    }
    if (message.sourceLocation !== "") {
      obj.sourceLocation = message.sourceLocation;
    }
    if (message.disableMacros !== false) {
      obj.disableMacros = message.disableMacros;
    }
    return obj;
  },

  create(base?: DeepPartial<ParseRequest>): ParseRequest {
    return ParseRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ParseRequest>): ParseRequest {
    const message = createBaseParseRequest();
    message.celSource = object.celSource ?? "";
    message.syntaxVersion = object.syntaxVersion ?? "";
    message.sourceLocation = object.sourceLocation ?? "";
    message.disableMacros = object.disableMacros ?? false;
    return message;
  },
};

function createBaseParseResponse(): ParseResponse {
  return { parsedExpr: undefined, issues: [] };
}

export const ParseResponse: MessageFns<ParseResponse> = {
  encode(message: ParseResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parsedExpr !== undefined) {
      ParsedExpr.encode(message.parsedExpr, writer.uint32(10).fork()).join();
    }
    for (const v of message.issues) {
      Status.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ParseResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseParseResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parsedExpr = ParsedExpr.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.issues.push(Status.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ParseResponse {
    return {
      parsedExpr: isSet(object.parsedExpr) ? ParsedExpr.fromJSON(object.parsedExpr) : undefined,
      issues: globalThis.Array.isArray(object?.issues) ? object.issues.map((e: any) => Status.fromJSON(e)) : [],
    };
  },

  toJSON(message: ParseResponse): unknown {
    const obj: any = {};
    if (message.parsedExpr !== undefined) {
      obj.parsedExpr = ParsedExpr.toJSON(message.parsedExpr);
    }
    if (message.issues?.length) {
      obj.issues = message.issues.map((e) => Status.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ParseResponse>): ParseResponse {
    return ParseResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ParseResponse>): ParseResponse {
    const message = createBaseParseResponse();
    message.parsedExpr = (object.parsedExpr !== undefined && object.parsedExpr !== null)
      ? ParsedExpr.fromPartial(object.parsedExpr)
      : undefined;
    message.issues = object.issues?.map((e) => Status.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCheckRequest(): CheckRequest {
  return { parsedExpr: undefined, typeEnv: [], container: "", noStdEnv: false };
}

export const CheckRequest: MessageFns<CheckRequest> = {
  encode(message: CheckRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parsedExpr !== undefined) {
      ParsedExpr.encode(message.parsedExpr, writer.uint32(10).fork()).join();
    }
    for (const v of message.typeEnv) {
      Decl.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.container !== "") {
      writer.uint32(26).string(message.container);
    }
    if (message.noStdEnv !== false) {
      writer.uint32(32).bool(message.noStdEnv);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CheckRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCheckRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parsedExpr = ParsedExpr.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.typeEnv.push(Decl.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.container = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.noStdEnv = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CheckRequest {
    return {
      parsedExpr: isSet(object.parsedExpr) ? ParsedExpr.fromJSON(object.parsedExpr) : undefined,
      typeEnv: globalThis.Array.isArray(object?.typeEnv) ? object.typeEnv.map((e: any) => Decl.fromJSON(e)) : [],
      container: isSet(object.container) ? globalThis.String(object.container) : "",
      noStdEnv: isSet(object.noStdEnv) ? globalThis.Boolean(object.noStdEnv) : false,
    };
  },

  toJSON(message: CheckRequest): unknown {
    const obj: any = {};
    if (message.parsedExpr !== undefined) {
      obj.parsedExpr = ParsedExpr.toJSON(message.parsedExpr);
    }
    if (message.typeEnv?.length) {
      obj.typeEnv = message.typeEnv.map((e) => Decl.toJSON(e));
    }
    if (message.container !== "") {
      obj.container = message.container;
    }
    if (message.noStdEnv !== false) {
      obj.noStdEnv = message.noStdEnv;
    }
    return obj;
  },

  create(base?: DeepPartial<CheckRequest>): CheckRequest {
    return CheckRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CheckRequest>): CheckRequest {
    const message = createBaseCheckRequest();
    message.parsedExpr = (object.parsedExpr !== undefined && object.parsedExpr !== null)
      ? ParsedExpr.fromPartial(object.parsedExpr)
      : undefined;
    message.typeEnv = object.typeEnv?.map((e) => Decl.fromPartial(e)) || [];
    message.container = object.container ?? "";
    message.noStdEnv = object.noStdEnv ?? false;
    return message;
  },
};

function createBaseCheckResponse(): CheckResponse {
  return { checkedExpr: undefined, issues: [] };
}

export const CheckResponse: MessageFns<CheckResponse> = {
  encode(message: CheckResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.checkedExpr !== undefined) {
      CheckedExpr.encode(message.checkedExpr, writer.uint32(10).fork()).join();
    }
    for (const v of message.issues) {
      Status.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CheckResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCheckResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.checkedExpr = CheckedExpr.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.issues.push(Status.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CheckResponse {
    return {
      checkedExpr: isSet(object.checkedExpr) ? CheckedExpr.fromJSON(object.checkedExpr) : undefined,
      issues: globalThis.Array.isArray(object?.issues) ? object.issues.map((e: any) => Status.fromJSON(e)) : [],
    };
  },

  toJSON(message: CheckResponse): unknown {
    const obj: any = {};
    if (message.checkedExpr !== undefined) {
      obj.checkedExpr = CheckedExpr.toJSON(message.checkedExpr);
    }
    if (message.issues?.length) {
      obj.issues = message.issues.map((e) => Status.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<CheckResponse>): CheckResponse {
    return CheckResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CheckResponse>): CheckResponse {
    const message = createBaseCheckResponse();
    message.checkedExpr = (object.checkedExpr !== undefined && object.checkedExpr !== null)
      ? CheckedExpr.fromPartial(object.checkedExpr)
      : undefined;
    message.issues = object.issues?.map((e) => Status.fromPartial(e)) || [];
    return message;
  },
};

function createBaseEvalRequest(): EvalRequest {
  return { parsedExpr: undefined, checkedExpr: undefined, bindings: {}, container: "" };
}

export const EvalRequest: MessageFns<EvalRequest> = {
  encode(message: EvalRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parsedExpr !== undefined) {
      ParsedExpr.encode(message.parsedExpr, writer.uint32(10).fork()).join();
    }
    if (message.checkedExpr !== undefined) {
      CheckedExpr.encode(message.checkedExpr, writer.uint32(18).fork()).join();
    }
    Object.entries(message.bindings).forEach(([key, value]) => {
      EvalRequest_BindingsEntry.encode({ key: key as any, value }, writer.uint32(26).fork()).join();
    });
    if (message.container !== "") {
      writer.uint32(34).string(message.container);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EvalRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEvalRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parsedExpr = ParsedExpr.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.checkedExpr = CheckedExpr.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          const entry3 = EvalRequest_BindingsEntry.decode(reader, reader.uint32());
          if (entry3.value !== undefined) {
            message.bindings[entry3.key] = entry3.value;
          }
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.container = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EvalRequest {
    return {
      parsedExpr: isSet(object.parsedExpr) ? ParsedExpr.fromJSON(object.parsedExpr) : undefined,
      checkedExpr: isSet(object.checkedExpr) ? CheckedExpr.fromJSON(object.checkedExpr) : undefined,
      bindings: isObject(object.bindings)
        ? Object.entries(object.bindings).reduce<{ [key: string]: ExprValue }>((acc, [key, value]) => {
          acc[key] = ExprValue.fromJSON(value);
          return acc;
        }, {})
        : {},
      container: isSet(object.container) ? globalThis.String(object.container) : "",
    };
  },

  toJSON(message: EvalRequest): unknown {
    const obj: any = {};
    if (message.parsedExpr !== undefined) {
      obj.parsedExpr = ParsedExpr.toJSON(message.parsedExpr);
    }
    if (message.checkedExpr !== undefined) {
      obj.checkedExpr = CheckedExpr.toJSON(message.checkedExpr);
    }
    if (message.bindings) {
      const entries = Object.entries(message.bindings);
      if (entries.length > 0) {
        obj.bindings = {};
        entries.forEach(([k, v]) => {
          obj.bindings[k] = ExprValue.toJSON(v);
        });
      }
    }
    if (message.container !== "") {
      obj.container = message.container;
    }
    return obj;
  },

  create(base?: DeepPartial<EvalRequest>): EvalRequest {
    return EvalRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EvalRequest>): EvalRequest {
    const message = createBaseEvalRequest();
    message.parsedExpr = (object.parsedExpr !== undefined && object.parsedExpr !== null)
      ? ParsedExpr.fromPartial(object.parsedExpr)
      : undefined;
    message.checkedExpr = (object.checkedExpr !== undefined && object.checkedExpr !== null)
      ? CheckedExpr.fromPartial(object.checkedExpr)
      : undefined;
    message.bindings = Object.entries(object.bindings ?? {}).reduce<{ [key: string]: ExprValue }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = ExprValue.fromPartial(value);
        }
        return acc;
      },
      {},
    );
    message.container = object.container ?? "";
    return message;
  },
};

function createBaseEvalRequest_BindingsEntry(): EvalRequest_BindingsEntry {
  return { key: "", value: undefined };
}

export const EvalRequest_BindingsEntry: MessageFns<EvalRequest_BindingsEntry> = {
  encode(message: EvalRequest_BindingsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      ExprValue.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EvalRequest_BindingsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEvalRequest_BindingsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = ExprValue.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EvalRequest_BindingsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? ExprValue.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: EvalRequest_BindingsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = ExprValue.toJSON(message.value);
    }
    return obj;
  },

  create(base?: DeepPartial<EvalRequest_BindingsEntry>): EvalRequest_BindingsEntry {
    return EvalRequest_BindingsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EvalRequest_BindingsEntry>): EvalRequest_BindingsEntry {
    const message = createBaseEvalRequest_BindingsEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? ExprValue.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseEvalResponse(): EvalResponse {
  return { result: undefined, issues: [] };
}

export const EvalResponse: MessageFns<EvalResponse> = {
  encode(message: EvalResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.result !== undefined) {
      ExprValue.encode(message.result, writer.uint32(10).fork()).join();
    }
    for (const v of message.issues) {
      Status.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EvalResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEvalResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.result = ExprValue.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.issues.push(Status.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EvalResponse {
    return {
      result: isSet(object.result) ? ExprValue.fromJSON(object.result) : undefined,
      issues: globalThis.Array.isArray(object?.issues) ? object.issues.map((e: any) => Status.fromJSON(e)) : [],
    };
  },

  toJSON(message: EvalResponse): unknown {
    const obj: any = {};
    if (message.result !== undefined) {
      obj.result = ExprValue.toJSON(message.result);
    }
    if (message.issues?.length) {
      obj.issues = message.issues.map((e) => Status.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<EvalResponse>): EvalResponse {
    return EvalResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EvalResponse>): EvalResponse {
    const message = createBaseEvalResponse();
    message.result = (object.result !== undefined && object.result !== null)
      ? ExprValue.fromPartial(object.result)
      : undefined;
    message.issues = object.issues?.map((e) => Status.fromPartial(e)) || [];
    return message;
  },
};

function createBaseSourcePosition(): SourcePosition {
  return { location: "", offset: 0, line: 0, column: 0 };
}

export const SourcePosition: MessageFns<SourcePosition> = {
  encode(message: SourcePosition, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.location !== "") {
      writer.uint32(10).string(message.location);
    }
    if (message.offset !== 0) {
      writer.uint32(16).int32(message.offset);
    }
    if (message.line !== 0) {
      writer.uint32(24).int32(message.line);
    }
    if (message.column !== 0) {
      writer.uint32(32).int32(message.column);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SourcePosition {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSourcePosition();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.location = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.offset = reader.int32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.line = reader.int32();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.column = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SourcePosition {
    return {
      location: isSet(object.location) ? globalThis.String(object.location) : "",
      offset: isSet(object.offset) ? globalThis.Number(object.offset) : 0,
      line: isSet(object.line) ? globalThis.Number(object.line) : 0,
      column: isSet(object.column) ? globalThis.Number(object.column) : 0,
    };
  },

  toJSON(message: SourcePosition): unknown {
    const obj: any = {};
    if (message.location !== "") {
      obj.location = message.location;
    }
    if (message.offset !== 0) {
      obj.offset = Math.round(message.offset);
    }
    if (message.line !== 0) {
      obj.line = Math.round(message.line);
    }
    if (message.column !== 0) {
      obj.column = Math.round(message.column);
    }
    return obj;
  },

  create(base?: DeepPartial<SourcePosition>): SourcePosition {
    return SourcePosition.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SourcePosition>): SourcePosition {
    const message = createBaseSourcePosition();
    message.location = object.location ?? "";
    message.offset = object.offset ?? 0;
    message.line = object.line ?? 0;
    message.column = object.column ?? 0;
    return message;
  },
};

function createBaseIssueDetails(): IssueDetails {
  return { severity: 0, position: undefined, id: Long.ZERO };
}

export const IssueDetails: MessageFns<IssueDetails> = {
  encode(message: IssueDetails, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.severity !== 0) {
      writer.uint32(8).int32(message.severity);
    }
    if (message.position !== undefined) {
      SourcePosition.encode(message.position, writer.uint32(18).fork()).join();
    }
    if (!message.id.equals(Long.ZERO)) {
      writer.uint32(24).int64(message.id.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IssueDetails {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIssueDetails();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.severity = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.position = SourcePosition.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.id = Long.fromString(reader.int64().toString());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IssueDetails {
    return {
      severity: isSet(object.severity) ? issueDetails_SeverityFromJSON(object.severity) : 0,
      position: isSet(object.position) ? SourcePosition.fromJSON(object.position) : undefined,
      id: isSet(object.id) ? Long.fromValue(object.id) : Long.ZERO,
    };
  },

  toJSON(message: IssueDetails): unknown {
    const obj: any = {};
    if (message.severity !== 0) {
      obj.severity = issueDetails_SeverityToJSON(message.severity);
    }
    if (message.position !== undefined) {
      obj.position = SourcePosition.toJSON(message.position);
    }
    if (!message.id.equals(Long.ZERO)) {
      obj.id = (message.id || Long.ZERO).toString();
    }
    return obj;
  },

  create(base?: DeepPartial<IssueDetails>): IssueDetails {
    return IssueDetails.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<IssueDetails>): IssueDetails {
    const message = createBaseIssueDetails();
    message.severity = object.severity ?? 0;
    message.position = (object.position !== undefined && object.position !== null)
      ? SourcePosition.fromPartial(object.position)
      : undefined;
    message.id = (object.id !== undefined && object.id !== null) ? Long.fromValue(object.id) : Long.ZERO;
    return message;
  },
};

/**
 * Access a CEL implementation from another process or machine.
 * A CEL implementation is decomposed as a parser, a static checker,
 * and an evaluator.  Every CEL implementation is expected to provide
 * a server for this API.  The API will be used for conformance testing
 * and other utilities.
 */
export type ConformanceServiceDefinition = typeof ConformanceServiceDefinition;
export const ConformanceServiceDefinition = {
  name: "ConformanceService",
  fullName: "google.api.expr.conformance.v1alpha1.ConformanceService",
  methods: {
    /** Transforms CEL source text into a parsed representation. */
    parse: {
      name: "Parse",
      requestType: ParseRequest,
      requestStream: false,
      responseType: ParseResponse,
      responseStream: false,
      options: {},
    },
    /**
     * Runs static checks on a parsed CEL representation and return
     * an annotated representation, or a set of issues.
     */
    check: {
      name: "Check",
      requestType: CheckRequest,
      requestStream: false,
      responseType: CheckResponse,
      responseStream: false,
      options: {},
    },
    /**
     * Evaluates a parsed or annotation CEL representation given
     * values of external bindings.
     */
    eval: {
      name: "Eval",
      requestType: EvalRequest,
      requestStream: false,
      responseType: EvalResponse,
      responseStream: false,
      options: {},
    },
  },
} as const;

export interface ConformanceServiceImplementation<CallContextExt = {}> {
  /** Transforms CEL source text into a parsed representation. */
  parse(request: ParseRequest, context: CallContext & CallContextExt): Promise<DeepPartial<ParseResponse>>;
  /**
   * Runs static checks on a parsed CEL representation and return
   * an annotated representation, or a set of issues.
   */
  check(request: CheckRequest, context: CallContext & CallContextExt): Promise<DeepPartial<CheckResponse>>;
  /**
   * Evaluates a parsed or annotation CEL representation given
   * values of external bindings.
   */
  eval(request: EvalRequest, context: CallContext & CallContextExt): Promise<DeepPartial<EvalResponse>>;
}

export interface ConformanceServiceClient<CallOptionsExt = {}> {
  /** Transforms CEL source text into a parsed representation. */
  parse(request: DeepPartial<ParseRequest>, options?: CallOptions & CallOptionsExt): Promise<ParseResponse>;
  /**
   * Runs static checks on a parsed CEL representation and return
   * an annotated representation, or a set of issues.
   */
  check(request: DeepPartial<CheckRequest>, options?: CallOptions & CallOptionsExt): Promise<CheckResponse>;
  /**
   * Evaluates a parsed or annotation CEL representation given
   * values of external bindings.
   */
  eval(request: DeepPartial<EvalRequest>, options?: CallOptions & CallOptionsExt): Promise<EvalResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
