// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/api/apikeys/v2/resources.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../protobuf/timestamp.js";

export const protobufPackage = "google.api.apikeys.v2";

/** The representation of a key managed by the API Keys API. */
export interface Key {
  /**
   * Output only. The resource name of the key.
   * The `name` has the form:
   * `projects/<PROJECT_NUMBER>/locations/global/keys/<KEY_ID>`.
   * For example:
   * `projects/123456867718/locations/global/keys/b7ff1f9f-8275-410a-94dd-3855ee9b5dd2`
   *
   * NOTE: Key is a global resource; hence the only supported value for
   * location is `global`.
   */
  name: string;
  /** Output only. Unique id in UUID4 format. */
  uid: string;
  /**
   * Human-readable display name of this key that you can modify.
   * The maximum length is 63 characters.
   */
  displayName: string;
  /**
   * Output only. An encrypted and signed value held by this key.
   * This field can be accessed only through the `GetKeyString` method.
   */
  keyString: string;
  /**
   * Output only. A timestamp identifying the time this key was originally
   * created.
   */
  createTime:
    | Date
    | undefined;
  /**
   * Output only. A timestamp identifying the time this key was last
   * updated.
   */
  updateTime:
    | Date
    | undefined;
  /**
   * Output only. A timestamp when this key was deleted. If the resource is not
   * deleted, this must be empty.
   */
  deleteTime:
    | Date
    | undefined;
  /**
   * Annotations is an unstructured key-value map stored with a policy that
   * may be set by external tools to store and retrieve arbitrary metadata.
   * They are not queryable and should be preserved when modifying objects.
   */
  annotations: { [key: string]: string };
  /** Key restrictions. */
  restrictions:
    | Restrictions
    | undefined;
  /**
   * Output only. A checksum computed by the server based on the current value
   * of the Key resource. This may be sent on update and delete requests to
   * ensure the client has an up-to-date value before proceeding. See
   * https://google.aip.dev/154.
   */
  etag: string;
}

export interface Key_AnnotationsEntry {
  key: string;
  value: string;
}

/** Describes the restrictions on the key. */
export interface Restrictions {
  /** The HTTP referrers (websites) that are allowed to use the key. */
  browserKeyRestrictions?:
    | BrowserKeyRestrictions
    | undefined;
  /** The IP addresses of callers that are allowed to use the key. */
  serverKeyRestrictions?:
    | ServerKeyRestrictions
    | undefined;
  /** The Android apps that are allowed to use the key. */
  androidKeyRestrictions?:
    | AndroidKeyRestrictions
    | undefined;
  /** The iOS apps that are allowed to use the key. */
  iosKeyRestrictions?:
    | IosKeyRestrictions
    | undefined;
  /**
   * A restriction for a specific service and optionally one or
   * more specific methods. Requests are allowed if they
   * match any of these restrictions. If no restrictions are
   * specified, all targets are allowed.
   */
  apiTargets: ApiTarget[];
}

/** The HTTP referrers (websites) that are allowed to use the key. */
export interface BrowserKeyRestrictions {
  /**
   * A list of regular expressions for the referrer URLs that are allowed
   * to make API calls with this key.
   */
  allowedReferrers: string[];
}

/** The IP addresses of callers that are allowed to use the key. */
export interface ServerKeyRestrictions {
  /**
   * A list of the caller IP addresses that are allowed to make API calls
   * with this key.
   */
  allowedIps: string[];
}

/** The Android apps that are allowed to use the key. */
export interface AndroidKeyRestrictions {
  /**
   * A list of Android applications that are allowed to make API calls with
   * this key.
   */
  allowedApplications: AndroidApplication[];
}

/** Identifier of an Android application for key use. */
export interface AndroidApplication {
  /**
   * The SHA1 fingerprint of the application. For example, both sha1 formats are
   * acceptable : DA:39:A3:EE:5E:6B:4B:0D:32:55:BF:EF:95:60:18:90:AF:D8:07:09 or
   * DA39A3EE5E6B4B0D3255BFEF95601890AFD80709.
   * Output format is the latter.
   */
  sha1Fingerprint: string;
  /** The package name of the application. */
  packageName: string;
}

/** The iOS apps that are allowed to use the key. */
export interface IosKeyRestrictions {
  /** A list of bundle IDs that are allowed when making API calls with this key. */
  allowedBundleIds: string[];
}

/**
 * A restriction for a specific service and optionally one or multiple
 * specific methods. Both fields are case insensitive.
 */
export interface ApiTarget {
  /**
   * The service for this restriction. It should be the canonical
   * service name, for example: `translate.googleapis.com`.
   * You can use [`gcloud services list`](/sdk/gcloud/reference/services/list)
   * to get a list of services that are enabled in the project.
   */
  service: string;
  /**
   * Optional. List of one or more methods that can be called.
   * If empty, all methods for the service are allowed. A wildcard
   * (*) can be used as the last symbol.
   * Valid examples:
   *   `google.cloud.translate.v2.TranslateService.GetSupportedLanguage`
   *   `TranslateText`
   *   `Get*`
   *   `translate.googleapis.com.Get*`
   */
  methods: string[];
}

function createBaseKey(): Key {
  return {
    name: "",
    uid: "",
    displayName: "",
    keyString: "",
    createTime: undefined,
    updateTime: undefined,
    deleteTime: undefined,
    annotations: {},
    restrictions: undefined,
    etag: "",
  };
}

export const Key: MessageFns<Key> = {
  encode(message: Key, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.uid !== "") {
      writer.uint32(42).string(message.uid);
    }
    if (message.displayName !== "") {
      writer.uint32(18).string(message.displayName);
    }
    if (message.keyString !== "") {
      writer.uint32(26).string(message.keyString);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(34).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(50).fork()).join();
    }
    if (message.deleteTime !== undefined) {
      Timestamp.encode(toTimestamp(message.deleteTime), writer.uint32(58).fork()).join();
    }
    Object.entries(message.annotations).forEach(([key, value]) => {
      Key_AnnotationsEntry.encode({ key: key as any, value }, writer.uint32(66).fork()).join();
    });
    if (message.restrictions !== undefined) {
      Restrictions.encode(message.restrictions, writer.uint32(74).fork()).join();
    }
    if (message.etag !== "") {
      writer.uint32(90).string(message.etag);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Key {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseKey();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.uid = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.keyString = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.deleteTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          const entry8 = Key_AnnotationsEntry.decode(reader, reader.uint32());
          if (entry8.value !== undefined) {
            message.annotations[entry8.key] = entry8.value;
          }
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.restrictions = Restrictions.decode(reader, reader.uint32());
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.etag = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Key {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      uid: isSet(object.uid) ? globalThis.String(object.uid) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      keyString: isSet(object.keyString) ? globalThis.String(object.keyString) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      deleteTime: isSet(object.deleteTime) ? fromJsonTimestamp(object.deleteTime) : undefined,
      annotations: isObject(object.annotations)
        ? Object.entries(object.annotations).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      restrictions: isSet(object.restrictions) ? Restrictions.fromJSON(object.restrictions) : undefined,
      etag: isSet(object.etag) ? globalThis.String(object.etag) : "",
    };
  },

  toJSON(message: Key): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.uid !== "") {
      obj.uid = message.uid;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.keyString !== "") {
      obj.keyString = message.keyString;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.deleteTime !== undefined) {
      obj.deleteTime = message.deleteTime.toISOString();
    }
    if (message.annotations) {
      const entries = Object.entries(message.annotations);
      if (entries.length > 0) {
        obj.annotations = {};
        entries.forEach(([k, v]) => {
          obj.annotations[k] = v;
        });
      }
    }
    if (message.restrictions !== undefined) {
      obj.restrictions = Restrictions.toJSON(message.restrictions);
    }
    if (message.etag !== "") {
      obj.etag = message.etag;
    }
    return obj;
  },

  create(base?: DeepPartial<Key>): Key {
    return Key.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Key>): Key {
    const message = createBaseKey();
    message.name = object.name ?? "";
    message.uid = object.uid ?? "";
    message.displayName = object.displayName ?? "";
    message.keyString = object.keyString ?? "";
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.deleteTime = object.deleteTime ?? undefined;
    message.annotations = Object.entries(object.annotations ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    message.restrictions = (object.restrictions !== undefined && object.restrictions !== null)
      ? Restrictions.fromPartial(object.restrictions)
      : undefined;
    message.etag = object.etag ?? "";
    return message;
  },
};

function createBaseKey_AnnotationsEntry(): Key_AnnotationsEntry {
  return { key: "", value: "" };
}

export const Key_AnnotationsEntry: MessageFns<Key_AnnotationsEntry> = {
  encode(message: Key_AnnotationsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Key_AnnotationsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseKey_AnnotationsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Key_AnnotationsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: Key_AnnotationsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<Key_AnnotationsEntry>): Key_AnnotationsEntry {
    return Key_AnnotationsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Key_AnnotationsEntry>): Key_AnnotationsEntry {
    const message = createBaseKey_AnnotationsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseRestrictions(): Restrictions {
  return {
    browserKeyRestrictions: undefined,
    serverKeyRestrictions: undefined,
    androidKeyRestrictions: undefined,
    iosKeyRestrictions: undefined,
    apiTargets: [],
  };
}

export const Restrictions: MessageFns<Restrictions> = {
  encode(message: Restrictions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.browserKeyRestrictions !== undefined) {
      BrowserKeyRestrictions.encode(message.browserKeyRestrictions, writer.uint32(10).fork()).join();
    }
    if (message.serverKeyRestrictions !== undefined) {
      ServerKeyRestrictions.encode(message.serverKeyRestrictions, writer.uint32(18).fork()).join();
    }
    if (message.androidKeyRestrictions !== undefined) {
      AndroidKeyRestrictions.encode(message.androidKeyRestrictions, writer.uint32(26).fork()).join();
    }
    if (message.iosKeyRestrictions !== undefined) {
      IosKeyRestrictions.encode(message.iosKeyRestrictions, writer.uint32(34).fork()).join();
    }
    for (const v of message.apiTargets) {
      ApiTarget.encode(v!, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Restrictions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRestrictions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.browserKeyRestrictions = BrowserKeyRestrictions.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.serverKeyRestrictions = ServerKeyRestrictions.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.androidKeyRestrictions = AndroidKeyRestrictions.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.iosKeyRestrictions = IosKeyRestrictions.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.apiTargets.push(ApiTarget.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Restrictions {
    return {
      browserKeyRestrictions: isSet(object.browserKeyRestrictions)
        ? BrowserKeyRestrictions.fromJSON(object.browserKeyRestrictions)
        : undefined,
      serverKeyRestrictions: isSet(object.serverKeyRestrictions)
        ? ServerKeyRestrictions.fromJSON(object.serverKeyRestrictions)
        : undefined,
      androidKeyRestrictions: isSet(object.androidKeyRestrictions)
        ? AndroidKeyRestrictions.fromJSON(object.androidKeyRestrictions)
        : undefined,
      iosKeyRestrictions: isSet(object.iosKeyRestrictions)
        ? IosKeyRestrictions.fromJSON(object.iosKeyRestrictions)
        : undefined,
      apiTargets: globalThis.Array.isArray(object?.apiTargets)
        ? object.apiTargets.map((e: any) => ApiTarget.fromJSON(e))
        : [],
    };
  },

  toJSON(message: Restrictions): unknown {
    const obj: any = {};
    if (message.browserKeyRestrictions !== undefined) {
      obj.browserKeyRestrictions = BrowserKeyRestrictions.toJSON(message.browserKeyRestrictions);
    }
    if (message.serverKeyRestrictions !== undefined) {
      obj.serverKeyRestrictions = ServerKeyRestrictions.toJSON(message.serverKeyRestrictions);
    }
    if (message.androidKeyRestrictions !== undefined) {
      obj.androidKeyRestrictions = AndroidKeyRestrictions.toJSON(message.androidKeyRestrictions);
    }
    if (message.iosKeyRestrictions !== undefined) {
      obj.iosKeyRestrictions = IosKeyRestrictions.toJSON(message.iosKeyRestrictions);
    }
    if (message.apiTargets?.length) {
      obj.apiTargets = message.apiTargets.map((e) => ApiTarget.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<Restrictions>): Restrictions {
    return Restrictions.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Restrictions>): Restrictions {
    const message = createBaseRestrictions();
    message.browserKeyRestrictions =
      (object.browserKeyRestrictions !== undefined && object.browserKeyRestrictions !== null)
        ? BrowserKeyRestrictions.fromPartial(object.browserKeyRestrictions)
        : undefined;
    message.serverKeyRestrictions =
      (object.serverKeyRestrictions !== undefined && object.serverKeyRestrictions !== null)
        ? ServerKeyRestrictions.fromPartial(object.serverKeyRestrictions)
        : undefined;
    message.androidKeyRestrictions =
      (object.androidKeyRestrictions !== undefined && object.androidKeyRestrictions !== null)
        ? AndroidKeyRestrictions.fromPartial(object.androidKeyRestrictions)
        : undefined;
    message.iosKeyRestrictions = (object.iosKeyRestrictions !== undefined && object.iosKeyRestrictions !== null)
      ? IosKeyRestrictions.fromPartial(object.iosKeyRestrictions)
      : undefined;
    message.apiTargets = object.apiTargets?.map((e) => ApiTarget.fromPartial(e)) || [];
    return message;
  },
};

function createBaseBrowserKeyRestrictions(): BrowserKeyRestrictions {
  return { allowedReferrers: [] };
}

export const BrowserKeyRestrictions: MessageFns<BrowserKeyRestrictions> = {
  encode(message: BrowserKeyRestrictions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.allowedReferrers) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BrowserKeyRestrictions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBrowserKeyRestrictions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.allowedReferrers.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BrowserKeyRestrictions {
    return {
      allowedReferrers: globalThis.Array.isArray(object?.allowedReferrers)
        ? object.allowedReferrers.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: BrowserKeyRestrictions): unknown {
    const obj: any = {};
    if (message.allowedReferrers?.length) {
      obj.allowedReferrers = message.allowedReferrers;
    }
    return obj;
  },

  create(base?: DeepPartial<BrowserKeyRestrictions>): BrowserKeyRestrictions {
    return BrowserKeyRestrictions.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BrowserKeyRestrictions>): BrowserKeyRestrictions {
    const message = createBaseBrowserKeyRestrictions();
    message.allowedReferrers = object.allowedReferrers?.map((e) => e) || [];
    return message;
  },
};

function createBaseServerKeyRestrictions(): ServerKeyRestrictions {
  return { allowedIps: [] };
}

export const ServerKeyRestrictions: MessageFns<ServerKeyRestrictions> = {
  encode(message: ServerKeyRestrictions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.allowedIps) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ServerKeyRestrictions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServerKeyRestrictions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.allowedIps.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ServerKeyRestrictions {
    return {
      allowedIps: globalThis.Array.isArray(object?.allowedIps)
        ? object.allowedIps.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ServerKeyRestrictions): unknown {
    const obj: any = {};
    if (message.allowedIps?.length) {
      obj.allowedIps = message.allowedIps;
    }
    return obj;
  },

  create(base?: DeepPartial<ServerKeyRestrictions>): ServerKeyRestrictions {
    return ServerKeyRestrictions.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ServerKeyRestrictions>): ServerKeyRestrictions {
    const message = createBaseServerKeyRestrictions();
    message.allowedIps = object.allowedIps?.map((e) => e) || [];
    return message;
  },
};

function createBaseAndroidKeyRestrictions(): AndroidKeyRestrictions {
  return { allowedApplications: [] };
}

export const AndroidKeyRestrictions: MessageFns<AndroidKeyRestrictions> = {
  encode(message: AndroidKeyRestrictions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.allowedApplications) {
      AndroidApplication.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AndroidKeyRestrictions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAndroidKeyRestrictions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.allowedApplications.push(AndroidApplication.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AndroidKeyRestrictions {
    return {
      allowedApplications: globalThis.Array.isArray(object?.allowedApplications)
        ? object.allowedApplications.map((e: any) => AndroidApplication.fromJSON(e))
        : [],
    };
  },

  toJSON(message: AndroidKeyRestrictions): unknown {
    const obj: any = {};
    if (message.allowedApplications?.length) {
      obj.allowedApplications = message.allowedApplications.map((e) => AndroidApplication.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<AndroidKeyRestrictions>): AndroidKeyRestrictions {
    return AndroidKeyRestrictions.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AndroidKeyRestrictions>): AndroidKeyRestrictions {
    const message = createBaseAndroidKeyRestrictions();
    message.allowedApplications = object.allowedApplications?.map((e) => AndroidApplication.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAndroidApplication(): AndroidApplication {
  return { sha1Fingerprint: "", packageName: "" };
}

export const AndroidApplication: MessageFns<AndroidApplication> = {
  encode(message: AndroidApplication, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sha1Fingerprint !== "") {
      writer.uint32(10).string(message.sha1Fingerprint);
    }
    if (message.packageName !== "") {
      writer.uint32(18).string(message.packageName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AndroidApplication {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAndroidApplication();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.sha1Fingerprint = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.packageName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AndroidApplication {
    return {
      sha1Fingerprint: isSet(object.sha1Fingerprint) ? globalThis.String(object.sha1Fingerprint) : "",
      packageName: isSet(object.packageName) ? globalThis.String(object.packageName) : "",
    };
  },

  toJSON(message: AndroidApplication): unknown {
    const obj: any = {};
    if (message.sha1Fingerprint !== "") {
      obj.sha1Fingerprint = message.sha1Fingerprint;
    }
    if (message.packageName !== "") {
      obj.packageName = message.packageName;
    }
    return obj;
  },

  create(base?: DeepPartial<AndroidApplication>): AndroidApplication {
    return AndroidApplication.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AndroidApplication>): AndroidApplication {
    const message = createBaseAndroidApplication();
    message.sha1Fingerprint = object.sha1Fingerprint ?? "";
    message.packageName = object.packageName ?? "";
    return message;
  },
};

function createBaseIosKeyRestrictions(): IosKeyRestrictions {
  return { allowedBundleIds: [] };
}

export const IosKeyRestrictions: MessageFns<IosKeyRestrictions> = {
  encode(message: IosKeyRestrictions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.allowedBundleIds) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IosKeyRestrictions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIosKeyRestrictions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.allowedBundleIds.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IosKeyRestrictions {
    return {
      allowedBundleIds: globalThis.Array.isArray(object?.allowedBundleIds)
        ? object.allowedBundleIds.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: IosKeyRestrictions): unknown {
    const obj: any = {};
    if (message.allowedBundleIds?.length) {
      obj.allowedBundleIds = message.allowedBundleIds;
    }
    return obj;
  },

  create(base?: DeepPartial<IosKeyRestrictions>): IosKeyRestrictions {
    return IosKeyRestrictions.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<IosKeyRestrictions>): IosKeyRestrictions {
    const message = createBaseIosKeyRestrictions();
    message.allowedBundleIds = object.allowedBundleIds?.map((e) => e) || [];
    return message;
  },
};

function createBaseApiTarget(): ApiTarget {
  return { service: "", methods: [] };
}

export const ApiTarget: MessageFns<ApiTarget> = {
  encode(message: ApiTarget, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.service !== "") {
      writer.uint32(10).string(message.service);
    }
    for (const v of message.methods) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ApiTarget {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseApiTarget();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.service = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.methods.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ApiTarget {
    return {
      service: isSet(object.service) ? globalThis.String(object.service) : "",
      methods: globalThis.Array.isArray(object?.methods) ? object.methods.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: ApiTarget): unknown {
    const obj: any = {};
    if (message.service !== "") {
      obj.service = message.service;
    }
    if (message.methods?.length) {
      obj.methods = message.methods;
    }
    return obj;
  },

  create(base?: DeepPartial<ApiTarget>): ApiTarget {
    return ApiTarget.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ApiTarget>): ApiTarget {
    const message = createBaseApiTarget();
    message.service = object.service ?? "";
    message.methods = object.methods?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
