// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/api/cloudquotas/v1/cloudquotas.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { FieldMask } from "../../../protobuf/field_mask.js";
import {
  QuotaInfo,
  QuotaPreference,
  QuotaSafetyCheck,
  quotaSafetyCheckFromJSON,
  quotaSafetyCheckToJSON,
} from "./resources.js";

export const protobufPackage = "google.api.cloudquotas.v1";

/** Message for requesting list of QuotaInfos */
export interface ListQuotaInfosRequest {
  /**
   * Required. Parent value of QuotaInfo resources.
   * Listing across different resource containers (such as 'projects/-') is not
   * allowed.
   *
   * Example names:
   * `projects/123/locations/global/services/compute.googleapis.com`
   * `folders/234/locations/global/services/compute.googleapis.com`
   * `organizations/345/locations/global/services/compute.googleapis.com`
   */
  parent: string;
  /**
   * Optional. Requested page size. Server may return fewer items than
   * requested. If unspecified, server will pick an appropriate default.
   */
  pageSize: number;
  /** Optional. A token identifying a page of results the server should return. */
  pageToken: string;
}

/** Message for response to listing QuotaInfos */
export interface ListQuotaInfosResponse {
  /** The list of QuotaInfo */
  quotaInfos: QuotaInfo[];
  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

/** Message for getting a QuotaInfo */
export interface GetQuotaInfoRequest {
  /**
   * Required. The resource name of the quota info.
   *
   * An example name:
   * `projects/123/locations/global/services/compute.googleapis.com/quotaInfos/CpusPerProjectPerRegion`
   */
  name: string;
}

/** Message for requesting list of QuotaPreferences */
export interface ListQuotaPreferencesRequest {
  /**
   * Required. Parent value of QuotaPreference resources.
   * Listing across different resource containers (such as 'projects/-') is not
   * allowed.
   *
   * When the value starts with 'folders' or 'organizations', it lists the
   * QuotaPreferences for org quotas in the container. It does not list the
   * QuotaPreferences in the descendant projects of the container.
   *
   * Example parents:
   * `projects/123/locations/global`
   */
  parent: string;
  /**
   * Optional. Requested page size. Server may return fewer items than
   * requested. If unspecified, server will pick an appropriate default.
   */
  pageSize: number;
  /** Optional. A token identifying a page of results the server should return. */
  pageToken: string;
  /**
   * Optional. Filter result QuotaPreferences by their state, type,
   * create/update time range.
   *
   * Example filters:
   * `reconciling=true AND request_type=CLOUD_CONSOLE`,
   * `reconciling=true OR creation_time>2022-12-03T10:30:00`
   */
  filter: string;
  /**
   * Optional. How to order of the results. By default, the results are ordered
   * by create time.
   *
   * Example orders:
   * `quota_id`,
   * `service, create_time`
   */
  orderBy: string;
}

/** Message for response to listing QuotaPreferences */
export interface ListQuotaPreferencesResponse {
  /** The list of QuotaPreference */
  quotaPreferences: QuotaPreference[];
  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
  /** Locations that could not be reached. */
  unreachable: string[];
}

/** Message for getting a QuotaPreference */
export interface GetQuotaPreferenceRequest {
  /**
   * Required. Name of the resource
   *
   * Example name:
   * `projects/123/locations/global/quota_preferences/my-config-for-us-east1`
   */
  name: string;
}

/** Message for creating a QuotaPreference */
export interface CreateQuotaPreferenceRequest {
  /**
   * Required. Value for parent.
   *
   * Example:
   * `projects/123/locations/global`
   */
  parent: string;
  /**
   * Optional. Id of the requesting object, must be unique under its parent.
   * If client does not set this field, the service will generate one.
   */
  quotaPreferenceId: string;
  /** Required. The resource being created */
  quotaPreference:
    | QuotaPreference
    | undefined;
  /** The list of quota safety checks to be ignored. */
  ignoreSafetyChecks: QuotaSafetyCheck[];
}

/** Message for updating a QuotaPreference */
export interface UpdateQuotaPreferenceRequest {
  /**
   * Optional. Field mask is used to specify the fields to be overwritten in the
   * QuotaPreference resource by the update.
   * The fields specified in the update_mask are relative to the resource, not
   * the full request. A field will be overwritten if it is in the mask. If the
   * user does not provide a mask then all fields will be overwritten.
   */
  updateMask:
    | string[]
    | undefined;
  /** Required. The resource being updated */
  quotaPreference:
    | QuotaPreference
    | undefined;
  /**
   * Optional. If set to true, and the quota preference is not found, a new one
   * will be created. In this situation, `update_mask` is ignored.
   */
  allowMissing: boolean;
  /**
   * Optional. If set to true, validate the request, but do not actually update.
   * Note that a request being valid does not mean that the request is
   * guaranteed to be fulfilled.
   */
  validateOnly: boolean;
  /** The list of quota safety checks to be ignored. */
  ignoreSafetyChecks: QuotaSafetyCheck[];
}

function createBaseListQuotaInfosRequest(): ListQuotaInfosRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListQuotaInfosRequest: MessageFns<ListQuotaInfosRequest> = {
  encode(message: ListQuotaInfosRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListQuotaInfosRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListQuotaInfosRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListQuotaInfosRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListQuotaInfosRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListQuotaInfosRequest>): ListQuotaInfosRequest {
    return ListQuotaInfosRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListQuotaInfosRequest>): ListQuotaInfosRequest {
    const message = createBaseListQuotaInfosRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListQuotaInfosResponse(): ListQuotaInfosResponse {
  return { quotaInfos: [], nextPageToken: "" };
}

export const ListQuotaInfosResponse: MessageFns<ListQuotaInfosResponse> = {
  encode(message: ListQuotaInfosResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.quotaInfos) {
      QuotaInfo.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListQuotaInfosResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListQuotaInfosResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.quotaInfos.push(QuotaInfo.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListQuotaInfosResponse {
    return {
      quotaInfos: globalThis.Array.isArray(object?.quotaInfos)
        ? object.quotaInfos.map((e: any) => QuotaInfo.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListQuotaInfosResponse): unknown {
    const obj: any = {};
    if (message.quotaInfos?.length) {
      obj.quotaInfos = message.quotaInfos.map((e) => QuotaInfo.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListQuotaInfosResponse>): ListQuotaInfosResponse {
    return ListQuotaInfosResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListQuotaInfosResponse>): ListQuotaInfosResponse {
    const message = createBaseListQuotaInfosResponse();
    message.quotaInfos = object.quotaInfos?.map((e) => QuotaInfo.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetQuotaInfoRequest(): GetQuotaInfoRequest {
  return { name: "" };
}

export const GetQuotaInfoRequest: MessageFns<GetQuotaInfoRequest> = {
  encode(message: GetQuotaInfoRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetQuotaInfoRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetQuotaInfoRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetQuotaInfoRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetQuotaInfoRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetQuotaInfoRequest>): GetQuotaInfoRequest {
    return GetQuotaInfoRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetQuotaInfoRequest>): GetQuotaInfoRequest {
    const message = createBaseGetQuotaInfoRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListQuotaPreferencesRequest(): ListQuotaPreferencesRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListQuotaPreferencesRequest: MessageFns<ListQuotaPreferencesRequest> = {
  encode(message: ListQuotaPreferencesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListQuotaPreferencesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListQuotaPreferencesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListQuotaPreferencesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListQuotaPreferencesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListQuotaPreferencesRequest>): ListQuotaPreferencesRequest {
    return ListQuotaPreferencesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListQuotaPreferencesRequest>): ListQuotaPreferencesRequest {
    const message = createBaseListQuotaPreferencesRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListQuotaPreferencesResponse(): ListQuotaPreferencesResponse {
  return { quotaPreferences: [], nextPageToken: "", unreachable: [] };
}

export const ListQuotaPreferencesResponse: MessageFns<ListQuotaPreferencesResponse> = {
  encode(message: ListQuotaPreferencesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.quotaPreferences) {
      QuotaPreference.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListQuotaPreferencesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListQuotaPreferencesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.quotaPreferences.push(QuotaPreference.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListQuotaPreferencesResponse {
    return {
      quotaPreferences: globalThis.Array.isArray(object?.quotaPreferences)
        ? object.quotaPreferences.map((e: any) => QuotaPreference.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListQuotaPreferencesResponse): unknown {
    const obj: any = {};
    if (message.quotaPreferences?.length) {
      obj.quotaPreferences = message.quotaPreferences.map((e) => QuotaPreference.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListQuotaPreferencesResponse>): ListQuotaPreferencesResponse {
    return ListQuotaPreferencesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListQuotaPreferencesResponse>): ListQuotaPreferencesResponse {
    const message = createBaseListQuotaPreferencesResponse();
    message.quotaPreferences = object.quotaPreferences?.map((e) => QuotaPreference.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetQuotaPreferenceRequest(): GetQuotaPreferenceRequest {
  return { name: "" };
}

export const GetQuotaPreferenceRequest: MessageFns<GetQuotaPreferenceRequest> = {
  encode(message: GetQuotaPreferenceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetQuotaPreferenceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetQuotaPreferenceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetQuotaPreferenceRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetQuotaPreferenceRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetQuotaPreferenceRequest>): GetQuotaPreferenceRequest {
    return GetQuotaPreferenceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetQuotaPreferenceRequest>): GetQuotaPreferenceRequest {
    const message = createBaseGetQuotaPreferenceRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateQuotaPreferenceRequest(): CreateQuotaPreferenceRequest {
  return { parent: "", quotaPreferenceId: "", quotaPreference: undefined, ignoreSafetyChecks: [] };
}

export const CreateQuotaPreferenceRequest: MessageFns<CreateQuotaPreferenceRequest> = {
  encode(message: CreateQuotaPreferenceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.quotaPreferenceId !== "") {
      writer.uint32(18).string(message.quotaPreferenceId);
    }
    if (message.quotaPreference !== undefined) {
      QuotaPreference.encode(message.quotaPreference, writer.uint32(26).fork()).join();
    }
    writer.uint32(34).fork();
    for (const v of message.ignoreSafetyChecks) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateQuotaPreferenceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateQuotaPreferenceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.quotaPreferenceId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.quotaPreference = QuotaPreference.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag === 32) {
            message.ignoreSafetyChecks.push(reader.int32() as any);

            continue;
          }

          if (tag === 34) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.ignoreSafetyChecks.push(reader.int32() as any);
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateQuotaPreferenceRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      quotaPreferenceId: isSet(object.quotaPreferenceId) ? globalThis.String(object.quotaPreferenceId) : "",
      quotaPreference: isSet(object.quotaPreference) ? QuotaPreference.fromJSON(object.quotaPreference) : undefined,
      ignoreSafetyChecks: globalThis.Array.isArray(object?.ignoreSafetyChecks)
        ? object.ignoreSafetyChecks.map((e: any) => quotaSafetyCheckFromJSON(e))
        : [],
    };
  },

  toJSON(message: CreateQuotaPreferenceRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.quotaPreferenceId !== "") {
      obj.quotaPreferenceId = message.quotaPreferenceId;
    }
    if (message.quotaPreference !== undefined) {
      obj.quotaPreference = QuotaPreference.toJSON(message.quotaPreference);
    }
    if (message.ignoreSafetyChecks?.length) {
      obj.ignoreSafetyChecks = message.ignoreSafetyChecks.map((e) => quotaSafetyCheckToJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<CreateQuotaPreferenceRequest>): CreateQuotaPreferenceRequest {
    return CreateQuotaPreferenceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateQuotaPreferenceRequest>): CreateQuotaPreferenceRequest {
    const message = createBaseCreateQuotaPreferenceRequest();
    message.parent = object.parent ?? "";
    message.quotaPreferenceId = object.quotaPreferenceId ?? "";
    message.quotaPreference = (object.quotaPreference !== undefined && object.quotaPreference !== null)
      ? QuotaPreference.fromPartial(object.quotaPreference)
      : undefined;
    message.ignoreSafetyChecks = object.ignoreSafetyChecks?.map((e) => e) || [];
    return message;
  },
};

function createBaseUpdateQuotaPreferenceRequest(): UpdateQuotaPreferenceRequest {
  return {
    updateMask: undefined,
    quotaPreference: undefined,
    allowMissing: false,
    validateOnly: false,
    ignoreSafetyChecks: [],
  };
}

export const UpdateQuotaPreferenceRequest: MessageFns<UpdateQuotaPreferenceRequest> = {
  encode(message: UpdateQuotaPreferenceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(10).fork()).join();
    }
    if (message.quotaPreference !== undefined) {
      QuotaPreference.encode(message.quotaPreference, writer.uint32(18).fork()).join();
    }
    if (message.allowMissing !== false) {
      writer.uint32(24).bool(message.allowMissing);
    }
    if (message.validateOnly !== false) {
      writer.uint32(32).bool(message.validateOnly);
    }
    writer.uint32(42).fork();
    for (const v of message.ignoreSafetyChecks) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateQuotaPreferenceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateQuotaPreferenceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.quotaPreference = QuotaPreference.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.allowMissing = reader.bool();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
        case 5:
          if (tag === 40) {
            message.ignoreSafetyChecks.push(reader.int32() as any);

            continue;
          }

          if (tag === 42) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.ignoreSafetyChecks.push(reader.int32() as any);
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateQuotaPreferenceRequest {
    return {
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      quotaPreference: isSet(object.quotaPreference) ? QuotaPreference.fromJSON(object.quotaPreference) : undefined,
      allowMissing: isSet(object.allowMissing) ? globalThis.Boolean(object.allowMissing) : false,
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
      ignoreSafetyChecks: globalThis.Array.isArray(object?.ignoreSafetyChecks)
        ? object.ignoreSafetyChecks.map((e: any) => quotaSafetyCheckFromJSON(e))
        : [],
    };
  },

  toJSON(message: UpdateQuotaPreferenceRequest): unknown {
    const obj: any = {};
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.quotaPreference !== undefined) {
      obj.quotaPreference = QuotaPreference.toJSON(message.quotaPreference);
    }
    if (message.allowMissing !== false) {
      obj.allowMissing = message.allowMissing;
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    if (message.ignoreSafetyChecks?.length) {
      obj.ignoreSafetyChecks = message.ignoreSafetyChecks.map((e) => quotaSafetyCheckToJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateQuotaPreferenceRequest>): UpdateQuotaPreferenceRequest {
    return UpdateQuotaPreferenceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateQuotaPreferenceRequest>): UpdateQuotaPreferenceRequest {
    const message = createBaseUpdateQuotaPreferenceRequest();
    message.updateMask = object.updateMask ?? undefined;
    message.quotaPreference = (object.quotaPreference !== undefined && object.quotaPreference !== null)
      ? QuotaPreference.fromPartial(object.quotaPreference)
      : undefined;
    message.allowMissing = object.allowMissing ?? false;
    message.validateOnly = object.validateOnly ?? false;
    message.ignoreSafetyChecks = object.ignoreSafetyChecks?.map((e) => e) || [];
    return message;
  },
};

/**
 * The Cloud Quotas API is an infrastructure service for Google Cloud that lets
 * service consumers list and manage their resource usage limits.
 *
 * - List/Get the metadata and current status of the quotas for a service.
 * - Create/Update quota preferencess that declare the preferred quota values.
 * - Check the status of a quota preference request.
 * - List/Get pending and historical quota preference.
 */
export type CloudQuotasDefinition = typeof CloudQuotasDefinition;
export const CloudQuotasDefinition = {
  name: "CloudQuotas",
  fullName: "google.api.cloudquotas.v1.CloudQuotas",
  methods: {
    /** Lists QuotaInfos of all quotas for a given project, folder or organization. */
    listQuotaInfos: {
      name: "ListQuotaInfos",
      requestType: ListQuotaInfosRequest,
      requestStream: false,
      responseType: ListQuotaInfosResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              185,
              1,
              90,
              64,
              18,
              62,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
              47,
              42,
              125,
              47,
              113,
              117,
              111,
              116,
              97,
              73,
              110,
              102,
              111,
              115,
              90,
              58,
              18,
              56,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
              47,
              42,
              125,
              47,
              113,
              117,
              111,
              116,
              97,
              73,
              110,
              102,
              111,
              115,
              18,
              57,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
              47,
              42,
              125,
              47,
              113,
              117,
              111,
              116,
              97,
              73,
              110,
              102,
              111,
              115,
            ]),
          ],
        },
      },
    },
    /** Retrieve the QuotaInfo of a quota for a project, folder or organization. */
    getQuotaInfo: {
      name: "GetQuotaInfo",
      requestType: GetQuotaInfoRequest,
      requestStream: false,
      responseType: QuotaInfo,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              185,
              1,
              90,
              64,
              18,
              62,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
              47,
              42,
              47,
              113,
              117,
              111,
              116,
              97,
              73,
              110,
              102,
              111,
              115,
              47,
              42,
              125,
              90,
              58,
              18,
              56,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
              47,
              42,
              47,
              113,
              117,
              111,
              116,
              97,
              73,
              110,
              102,
              111,
              115,
              47,
              42,
              125,
              18,
              57,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
              47,
              42,
              47,
              113,
              117,
              111,
              116,
              97,
              73,
              110,
              102,
              111,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists QuotaPreferences in a given project, folder or organization. */
    listQuotaPreferences: {
      name: "ListQuotaPreferences",
      requestType: ListQuotaPreferencesRequest,
      requestStream: false,
      responseType: ListQuotaPreferencesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              170,
              1,
              90,
              53,
              18,
              51,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              113,
              117,
              111,
              116,
              97,
              80,
              114,
              101,
              102,
              101,
              114,
              101,
              110,
              99,
              101,
              115,
              90,
              59,
              18,
              57,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              113,
              117,
              111,
              116,
              97,
              80,
              114,
              101,
              102,
              101,
              114,
              101,
              110,
              99,
              101,
              115,
              18,
              52,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              113,
              117,
              111,
              116,
              97,
              80,
              114,
              101,
              102,
              101,
              114,
              101,
              110,
              99,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets details of a single QuotaPreference. */
    getQuotaPreference: {
      name: "GetQuotaPreference",
      requestType: GetQuotaPreferenceRequest,
      requestStream: false,
      responseType: QuotaPreference,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              170,
              1,
              90,
              59,
              18,
              57,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              113,
              117,
              111,
              116,
              97,
              80,
              114,
              101,
              102,
              101,
              114,
              101,
              110,
              99,
              101,
              115,
              47,
              42,
              125,
              90,
              53,
              18,
              51,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              113,
              117,
              111,
              116,
              97,
              80,
              114,
              101,
              102,
              101,
              114,
              101,
              110,
              99,
              101,
              115,
              47,
              42,
              125,
              18,
              52,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              113,
              117,
              111,
              116,
              97,
              80,
              114,
              101,
              102,
              101,
              114,
              101,
              110,
              99,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Creates a new QuotaPreference that declares the desired value for a quota. */
    createQuotaPreference: {
      name: "CreateQuotaPreference",
      requestType: CreateQuotaPreferenceRequest,
      requestStream: false,
      responseType: QuotaPreference,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              43,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              113,
              117,
              111,
              116,
              97,
              95,
              112,
              114,
              101,
              102,
              101,
              114,
              101,
              110,
              99,
              101,
              44,
              113,
              117,
              111,
              116,
              97,
              95,
              112,
              114,
              101,
              102,
              101,
              114,
              101,
              110,
              99,
              101,
              95,
              105,
              100,
            ]),
            Buffer.from([
              23,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              113,
              117,
              111,
              116,
              97,
              95,
              112,
              114,
              101,
              102,
              101,
              114,
              101,
              110,
              99,
              101,
            ]),
          ],
          578365826: [
            Buffer.from([
              224,
              1,
              58,
              16,
              113,
              117,
              111,
              116,
              97,
              95,
              112,
              114,
              101,
              102,
              101,
              114,
              101,
              110,
              99,
              101,
              90,
              71,
              58,
              16,
              113,
              117,
              111,
              116,
              97,
              95,
              112,
              114,
              101,
              102,
              101,
              114,
              101,
              110,
              99,
              101,
              34,
              51,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              113,
              117,
              111,
              116,
              97,
              80,
              114,
              101,
              102,
              101,
              114,
              101,
              110,
              99,
              101,
              115,
              90,
              77,
              58,
              16,
              113,
              117,
              111,
              116,
              97,
              95,
              112,
              114,
              101,
              102,
              101,
              114,
              101,
              110,
              99,
              101,
              34,
              57,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              113,
              117,
              111,
              116,
              97,
              80,
              114,
              101,
              102,
              101,
              114,
              101,
              110,
              99,
              101,
              115,
              34,
              52,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              113,
              117,
              111,
              116,
              97,
              80,
              114,
              101,
              102,
              101,
              114,
              101,
              110,
              99,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Updates the parameters of a single QuotaPreference. It can updates the
     * config in any states, not just the ones pending approval.
     */
    updateQuotaPreference: {
      name: "UpdateQuotaPreference",
      requestType: UpdateQuotaPreferenceRequest,
      requestStream: false,
      responseType: QuotaPreference,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              28,
              113,
              117,
              111,
              116,
              97,
              95,
              112,
              114,
              101,
              102,
              101,
              114,
              101,
              110,
              99,
              101,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              147,
              2,
              58,
              16,
              113,
              117,
              111,
              116,
              97,
              95,
              112,
              114,
              101,
              102,
              101,
              114,
              101,
              110,
              99,
              101,
              90,
              88,
              58,
              16,
              113,
              117,
              111,
              116,
              97,
              95,
              112,
              114,
              101,
              102,
              101,
              114,
              101,
              110,
              99,
              101,
              50,
              68,
              47,
              118,
              49,
              47,
              123,
              113,
              117,
              111,
              116,
              97,
              95,
              112,
              114,
              101,
              102,
              101,
              114,
              101,
              110,
              99,
              101,
              46,
              110,
              97,
              109,
              101,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              113,
              117,
              111,
              116,
              97,
              80,
              114,
              101,
              102,
              101,
              114,
              101,
              110,
              99,
              101,
              115,
              47,
              42,
              125,
              90,
              94,
              58,
              16,
              113,
              117,
              111,
              116,
              97,
              95,
              112,
              114,
              101,
              102,
              101,
              114,
              101,
              110,
              99,
              101,
              50,
              74,
              47,
              118,
              49,
              47,
              123,
              113,
              117,
              111,
              116,
              97,
              95,
              112,
              114,
              101,
              102,
              101,
              114,
              101,
              110,
              99,
              101,
              46,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              113,
              117,
              111,
              116,
              97,
              80,
              114,
              101,
              102,
              101,
              114,
              101,
              110,
              99,
              101,
              115,
              47,
              42,
              125,
              50,
              69,
              47,
              118,
              49,
              47,
              123,
              113,
              117,
              111,
              116,
              97,
              95,
              112,
              114,
              101,
              102,
              101,
              114,
              101,
              110,
              99,
              101,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              113,
              117,
              111,
              116,
              97,
              80,
              114,
              101,
              102,
              101,
              114,
              101,
              110,
              99,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface CloudQuotasServiceImplementation<CallContextExt = {}> {
  /** Lists QuotaInfos of all quotas for a given project, folder or organization. */
  listQuotaInfos(
    request: ListQuotaInfosRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListQuotaInfosResponse>>;
  /** Retrieve the QuotaInfo of a quota for a project, folder or organization. */
  getQuotaInfo(request: GetQuotaInfoRequest, context: CallContext & CallContextExt): Promise<DeepPartial<QuotaInfo>>;
  /** Lists QuotaPreferences in a given project, folder or organization. */
  listQuotaPreferences(
    request: ListQuotaPreferencesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListQuotaPreferencesResponse>>;
  /** Gets details of a single QuotaPreference. */
  getQuotaPreference(
    request: GetQuotaPreferenceRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<QuotaPreference>>;
  /** Creates a new QuotaPreference that declares the desired value for a quota. */
  createQuotaPreference(
    request: CreateQuotaPreferenceRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<QuotaPreference>>;
  /**
   * Updates the parameters of a single QuotaPreference. It can updates the
   * config in any states, not just the ones pending approval.
   */
  updateQuotaPreference(
    request: UpdateQuotaPreferenceRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<QuotaPreference>>;
}

export interface CloudQuotasClient<CallOptionsExt = {}> {
  /** Lists QuotaInfos of all quotas for a given project, folder or organization. */
  listQuotaInfos(
    request: DeepPartial<ListQuotaInfosRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListQuotaInfosResponse>;
  /** Retrieve the QuotaInfo of a quota for a project, folder or organization. */
  getQuotaInfo(request: DeepPartial<GetQuotaInfoRequest>, options?: CallOptions & CallOptionsExt): Promise<QuotaInfo>;
  /** Lists QuotaPreferences in a given project, folder or organization. */
  listQuotaPreferences(
    request: DeepPartial<ListQuotaPreferencesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListQuotaPreferencesResponse>;
  /** Gets details of a single QuotaPreference. */
  getQuotaPreference(
    request: DeepPartial<GetQuotaPreferenceRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<QuotaPreference>;
  /** Creates a new QuotaPreference that declares the desired value for a quota. */
  createQuotaPreference(
    request: DeepPartial<CreateQuotaPreferenceRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<QuotaPreference>;
  /**
   * Updates the parameters of a single QuotaPreference. It can updates the
   * config in any states, not just the ones pending approval.
   */
  updateQuotaPreference(
    request: DeepPartial<UpdateQuotaPreferenceRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<QuotaPreference>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
