// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/logging/v2/logging_config.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../longrunning/operations.js";
import { Empty } from "../../protobuf/empty.js";
import { FieldMask } from "../../protobuf/field_mask.js";
import { Timestamp } from "../../protobuf/timestamp.js";

export const protobufPackage = "google.logging.v2";

/**
 * List of different operation states.
 * High level state of the operation. This is used to report the job's
 * current state to the user. Once a long running operation is created,
 * the current state of the operation can be queried even before the
 * operation is finished and the final result is available.
 */
export enum OperationState {
  /** OPERATION_STATE_UNSPECIFIED - Should not be used. */
  OPERATION_STATE_UNSPECIFIED = 0,
  /** OPERATION_STATE_SCHEDULED - The operation is scheduled. */
  OPERATION_STATE_SCHEDULED = 1,
  /** OPERATION_STATE_WAITING_FOR_PERMISSIONS - Waiting for necessary permissions. */
  OPERATION_STATE_WAITING_FOR_PERMISSIONS = 2,
  /** OPERATION_STATE_RUNNING - The operation is running. */
  OPERATION_STATE_RUNNING = 3,
  /** OPERATION_STATE_SUCCEEDED - The operation was completed successfully. */
  OPERATION_STATE_SUCCEEDED = 4,
  /** OPERATION_STATE_FAILED - The operation failed. */
  OPERATION_STATE_FAILED = 5,
  /** OPERATION_STATE_CANCELLED - The operation was cancelled by the user. */
  OPERATION_STATE_CANCELLED = 6,
  UNRECOGNIZED = -1,
}

export function operationStateFromJSON(object: any): OperationState {
  switch (object) {
    case 0:
    case "OPERATION_STATE_UNSPECIFIED":
      return OperationState.OPERATION_STATE_UNSPECIFIED;
    case 1:
    case "OPERATION_STATE_SCHEDULED":
      return OperationState.OPERATION_STATE_SCHEDULED;
    case 2:
    case "OPERATION_STATE_WAITING_FOR_PERMISSIONS":
      return OperationState.OPERATION_STATE_WAITING_FOR_PERMISSIONS;
    case 3:
    case "OPERATION_STATE_RUNNING":
      return OperationState.OPERATION_STATE_RUNNING;
    case 4:
    case "OPERATION_STATE_SUCCEEDED":
      return OperationState.OPERATION_STATE_SUCCEEDED;
    case 5:
    case "OPERATION_STATE_FAILED":
      return OperationState.OPERATION_STATE_FAILED;
    case 6:
    case "OPERATION_STATE_CANCELLED":
      return OperationState.OPERATION_STATE_CANCELLED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return OperationState.UNRECOGNIZED;
  }
}

export function operationStateToJSON(object: OperationState): string {
  switch (object) {
    case OperationState.OPERATION_STATE_UNSPECIFIED:
      return "OPERATION_STATE_UNSPECIFIED";
    case OperationState.OPERATION_STATE_SCHEDULED:
      return "OPERATION_STATE_SCHEDULED";
    case OperationState.OPERATION_STATE_WAITING_FOR_PERMISSIONS:
      return "OPERATION_STATE_WAITING_FOR_PERMISSIONS";
    case OperationState.OPERATION_STATE_RUNNING:
      return "OPERATION_STATE_RUNNING";
    case OperationState.OPERATION_STATE_SUCCEEDED:
      return "OPERATION_STATE_SUCCEEDED";
    case OperationState.OPERATION_STATE_FAILED:
      return "OPERATION_STATE_FAILED";
    case OperationState.OPERATION_STATE_CANCELLED:
      return "OPERATION_STATE_CANCELLED";
    case OperationState.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** LogBucket lifecycle states. */
export enum LifecycleState {
  /**
   * LIFECYCLE_STATE_UNSPECIFIED - Unspecified state. This is only used/useful for distinguishing unset
   * values.
   */
  LIFECYCLE_STATE_UNSPECIFIED = 0,
  /** ACTIVE - The normal and active state. */
  ACTIVE = 1,
  /**
   * DELETE_REQUESTED - The resource has been marked for deletion by the user. For some resources
   * (e.g. buckets), this can be reversed by an un-delete operation.
   */
  DELETE_REQUESTED = 2,
  /**
   * UPDATING - The resource has been marked for an update by the user. It will remain in
   * this state until the update is complete.
   */
  UPDATING = 3,
  /**
   * CREATING - The resource has been marked for creation by the user. It will remain in
   * this state until the creation is complete.
   */
  CREATING = 4,
  /** FAILED - The resource is in an INTERNAL error state. */
  FAILED = 5,
  UNRECOGNIZED = -1,
}

export function lifecycleStateFromJSON(object: any): LifecycleState {
  switch (object) {
    case 0:
    case "LIFECYCLE_STATE_UNSPECIFIED":
      return LifecycleState.LIFECYCLE_STATE_UNSPECIFIED;
    case 1:
    case "ACTIVE":
      return LifecycleState.ACTIVE;
    case 2:
    case "DELETE_REQUESTED":
      return LifecycleState.DELETE_REQUESTED;
    case 3:
    case "UPDATING":
      return LifecycleState.UPDATING;
    case 4:
    case "CREATING":
      return LifecycleState.CREATING;
    case 5:
    case "FAILED":
      return LifecycleState.FAILED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return LifecycleState.UNRECOGNIZED;
  }
}

export function lifecycleStateToJSON(object: LifecycleState): string {
  switch (object) {
    case LifecycleState.LIFECYCLE_STATE_UNSPECIFIED:
      return "LIFECYCLE_STATE_UNSPECIFIED";
    case LifecycleState.ACTIVE:
      return "ACTIVE";
    case LifecycleState.DELETE_REQUESTED:
      return "DELETE_REQUESTED";
    case LifecycleState.UPDATING:
      return "UPDATING";
    case LifecycleState.CREATING:
      return "CREATING";
    case LifecycleState.FAILED:
      return "FAILED";
    case LifecycleState.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * IndexType is used for custom indexing. It describes the type of an indexed
 * field.
 */
export enum IndexType {
  /** INDEX_TYPE_UNSPECIFIED - The index's type is unspecified. */
  INDEX_TYPE_UNSPECIFIED = 0,
  /** INDEX_TYPE_STRING - The index is a string-type index. */
  INDEX_TYPE_STRING = 1,
  /** INDEX_TYPE_INTEGER - The index is a integer-type index. */
  INDEX_TYPE_INTEGER = 2,
  UNRECOGNIZED = -1,
}

export function indexTypeFromJSON(object: any): IndexType {
  switch (object) {
    case 0:
    case "INDEX_TYPE_UNSPECIFIED":
      return IndexType.INDEX_TYPE_UNSPECIFIED;
    case 1:
    case "INDEX_TYPE_STRING":
      return IndexType.INDEX_TYPE_STRING;
    case 2:
    case "INDEX_TYPE_INTEGER":
      return IndexType.INDEX_TYPE_INTEGER;
    case -1:
    case "UNRECOGNIZED":
    default:
      return IndexType.UNRECOGNIZED;
  }
}

export function indexTypeToJSON(object: IndexType): string {
  switch (object) {
    case IndexType.INDEX_TYPE_UNSPECIFIED:
      return "INDEX_TYPE_UNSPECIFIED";
    case IndexType.INDEX_TYPE_STRING:
      return "INDEX_TYPE_STRING";
    case IndexType.INDEX_TYPE_INTEGER:
      return "INDEX_TYPE_INTEGER";
    case IndexType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Configuration for an indexed field. */
export interface IndexConfig {
  /**
   * Required. The LogEntry field path to index.
   *
   * Note that some paths are automatically indexed, and other paths are not
   * eligible for indexing. See [indexing documentation](
   * https://cloud.google.com/logging/docs/view/advanced-queries#indexed-fields)
   * for details.
   *
   * For example: `jsonPayload.request.status`
   */
  fieldPath: string;
  /** Required. The type of data in this index. */
  type: IndexType;
  /**
   * Output only. The timestamp when the index was last modified.
   *
   * This is used to return the timestamp, and will be ignored if supplied
   * during update.
   */
  createTime: Date | undefined;
}

/** Describes a repository in which log entries are stored. */
export interface LogBucket {
  /**
   * Output only. The resource name of the bucket.
   *
   * For example:
   *
   *   `projects/my-project/locations/global/buckets/my-bucket`
   *
   * For a list of supported locations, see [Supported
   * Regions](https://cloud.google.com/logging/docs/region-support)
   *
   * For the location of `global` it is unspecified where log entries are
   * actually stored.
   *
   * After a bucket has been created, the location cannot be changed.
   */
  name: string;
  /** Describes this bucket. */
  description: string;
  /**
   * Output only. The creation timestamp of the bucket. This is not set for any
   * of the default buckets.
   */
  createTime:
    | Date
    | undefined;
  /** Output only. The last update timestamp of the bucket. */
  updateTime:
    | Date
    | undefined;
  /**
   * Logs will be retained by default for this amount of time, after which they
   * will automatically be deleted. The minimum retention period is 1 day. If
   * this value is set to zero at bucket creation time, the default time of 30
   * days will be used.
   */
  retentionDays: number;
  /**
   * Whether the bucket is locked.
   *
   * The retention period on a locked bucket cannot be changed. Locked buckets
   * may only be deleted if they are empty.
   */
  locked: boolean;
  /** Output only. The bucket lifecycle state. */
  lifecycleState: LifecycleState;
  /**
   * Whether log analytics is enabled for this bucket.
   *
   * Once enabled, log analytics features cannot be disabled.
   */
  analyticsEnabled: boolean;
  /**
   * Log entry field paths that are denied access in this bucket.
   *
   * The following fields and their children are eligible: `textPayload`,
   * `jsonPayload`, `protoPayload`, `httpRequest`, `labels`, `sourceLocation`.
   *
   * Restricting a repeated field will restrict all values. Adding a parent will
   * block all child fields. (e.g. `foo.bar` will block `foo.bar.baz`)
   */
  restrictedFields: string[];
  /** A list of indexed fields and related configuration data. */
  indexConfigs: IndexConfig[];
  /**
   * The CMEK settings of the log bucket. If present, new log entries written to
   * this log bucket are encrypted using the CMEK key provided in this
   * configuration. If a log bucket has CMEK settings, the CMEK settings cannot
   * be disabled later by updating the log bucket. Changing the KMS key is
   * allowed.
   */
  cmekSettings: CmekSettings | undefined;
}

/** Describes a view over log entries in a bucket. */
export interface LogView {
  /**
   * The resource name of the view.
   *
   * For example:
   *
   *   `projects/my-project/locations/global/buckets/my-bucket/views/my-view`
   */
  name: string;
  /** Describes this view. */
  description: string;
  /** Output only. The creation timestamp of the view. */
  createTime:
    | Date
    | undefined;
  /** Output only. The last update timestamp of the view. */
  updateTime:
    | Date
    | undefined;
  /**
   * Filter that restricts which log entries in a bucket are visible in this
   * view.
   *
   * Filters are restricted to be a logical AND of ==/!= of any of the
   * following:
   *
   *   - originating project/folder/organization/billing account.
   *   - resource type
   *   - log id
   *
   * For example:
   *
   *   SOURCE("projects/myproject") AND resource.type = "gce_instance"
   *                                AND LOG_ID("stdout")
   */
  filter: string;
}

/**
 * Describes a sink used to export log entries to one of the following
 * destinations in any project: a Cloud Storage bucket, a BigQuery dataset, a
 * Pub/Sub topic or a Cloud Logging log bucket. A logs filter controls which log
 * entries are exported. The sink must be created within a project,
 * organization, billing account, or folder.
 */
export interface LogSink {
  /**
   * Required. The client-assigned sink identifier, unique within the project.
   *
   * For example: `"my-syslog-errors-to-pubsub"`. Sink identifiers are limited
   * to 100 characters and can include only the following characters: upper and
   * lower-case alphanumeric characters, underscores, hyphens, and periods.
   * First character has to be alphanumeric.
   */
  name: string;
  /**
   * Required. The export destination:
   *
   *     "storage.googleapis.com/[GCS_BUCKET]"
   *     "bigquery.googleapis.com/projects/[PROJECT_ID]/datasets/[DATASET]"
   *     "pubsub.googleapis.com/projects/[PROJECT_ID]/topics/[TOPIC_ID]"
   *
   * The sink's `writer_identity`, set when the sink is created, must have
   * permission to write to the destination or else the log entries are not
   * exported. For more information, see
   * [Exporting Logs with
   * Sinks](https://cloud.google.com/logging/docs/api/tasks/exporting-logs).
   */
  destination: string;
  /**
   * Optional. An [advanced logs
   * filter](https://cloud.google.com/logging/docs/view/advanced-queries). The
   * only exported log entries are those that are in the resource owning the
   * sink and that match the filter.
   *
   * For example:
   *
   *   `logName="projects/[PROJECT_ID]/logs/[LOG_ID]" AND severity>=ERROR`
   */
  filter: string;
  /**
   * Optional. A description of this sink.
   *
   * The maximum length of the description is 8000 characters.
   */
  description: string;
  /**
   * Optional. If set to true, then this sink is disabled and it does not export
   * any log entries.
   */
  disabled: boolean;
  /**
   * Optional. Log entries that match any of these exclusion filters will not be
   * exported.
   *
   * If a log entry is matched by both `filter` and one of `exclusion_filters`
   * it will not be exported.
   */
  exclusions: LogExclusion[];
  /**
   * Deprecated. This field is unused.
   *
   * @deprecated
   */
  outputVersionFormat: LogSink_VersionFormat;
  /**
   * Output only. An IAM identity&mdash;a service account or group&mdash;under
   * which Cloud Logging writes the exported log entries to the sink's
   * destination. This field is either set by specifying
   * `custom_writer_identity` or set automatically by
   * [sinks.create][google.logging.v2.ConfigServiceV2.CreateSink] and
   * [sinks.update][google.logging.v2.ConfigServiceV2.UpdateSink] based on the
   * value of `unique_writer_identity` in those methods.
   *
   * Until you grant this identity write-access to the destination, log entry
   * exports from this sink will fail. For more information, see [Granting
   * Access for a
   * Resource](https://cloud.google.com/iam/docs/granting-roles-to-service-accounts#granting_access_to_a_service_account_for_a_resource).
   * Consult the destination service's documentation to determine the
   * appropriate IAM roles to assign to the identity.
   *
   * Sinks that have a destination that is a log bucket in the same project as
   * the sink cannot have a writer_identity and no additional permissions are
   * required.
   */
  writerIdentity: string;
  /**
   * Optional. This field applies only to sinks owned by organizations and
   * folders. If the field is false, the default, only the logs owned by the
   * sink's parent resource are available for export. If the field is true, then
   * log entries from all the projects, folders, and billing accounts contained
   * in the sink's parent resource are also available for export. Whether a
   * particular log entry from the children is exported depends on the sink's
   * filter expression.
   *
   * For example, if this field is true, then the filter
   * `resource.type=gce_instance` would export all Compute Engine VM instance
   * log entries from all projects in the sink's parent.
   *
   * To only export entries from certain child projects, filter on the project
   * part of the log name:
   *
   *   logName:("projects/test-project1/" OR "projects/test-project2/") AND
   *   resource.type=gce_instance
   */
  includeChildren: boolean;
  /** Optional. Options that affect sinks exporting data to BigQuery. */
  bigqueryOptions?:
    | BigQueryOptions
    | undefined;
  /**
   * Output only. The creation timestamp of the sink.
   *
   * This field may not be present for older sinks.
   */
  createTime:
    | Date
    | undefined;
  /**
   * Output only. The last update timestamp of the sink.
   *
   * This field may not be present for older sinks.
   */
  updateTime: Date | undefined;
}

/** Deprecated. This is unused. */
export enum LogSink_VersionFormat {
  /** VERSION_FORMAT_UNSPECIFIED - An unspecified format version that will default to V2. */
  VERSION_FORMAT_UNSPECIFIED = 0,
  /** V2 - `LogEntry` version 2 format. */
  V2 = 1,
  /** V1 - `LogEntry` version 1 format. */
  V1 = 2,
  UNRECOGNIZED = -1,
}

export function logSink_VersionFormatFromJSON(object: any): LogSink_VersionFormat {
  switch (object) {
    case 0:
    case "VERSION_FORMAT_UNSPECIFIED":
      return LogSink_VersionFormat.VERSION_FORMAT_UNSPECIFIED;
    case 1:
    case "V2":
      return LogSink_VersionFormat.V2;
    case 2:
    case "V1":
      return LogSink_VersionFormat.V1;
    case -1:
    case "UNRECOGNIZED":
    default:
      return LogSink_VersionFormat.UNRECOGNIZED;
  }
}

export function logSink_VersionFormatToJSON(object: LogSink_VersionFormat): string {
  switch (object) {
    case LogSink_VersionFormat.VERSION_FORMAT_UNSPECIFIED:
      return "VERSION_FORMAT_UNSPECIFIED";
    case LogSink_VersionFormat.V2:
      return "V2";
    case LogSink_VersionFormat.V1:
      return "V1";
    case LogSink_VersionFormat.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Describes a BigQuery dataset that was created by a link. */
export interface BigQueryDataset {
  /**
   * Output only. The full resource name of the BigQuery dataset. The DATASET_ID
   * will match the ID of the link, so the link must match the naming
   * restrictions of BigQuery datasets (alphanumeric characters and underscores
   * only).
   *
   * The dataset will have a resource path of
   *   "bigquery.googleapis.com/projects/[PROJECT_ID]/datasets/[DATASET_ID]"
   */
  datasetId: string;
}

/** Describes a link connected to an analytics enabled bucket. */
export interface Link {
  /**
   * The resource name of the link. The name can have up to 100 characters.
   * A valid link id (at the end of the link name) must only have alphanumeric
   * characters and underscores within it.
   *
   *     "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/links/[LINK_ID]"
   *     "organizations/[ORGANIZATION_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/links/[LINK_ID]"
   *     "billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/links/[LINK_ID]"
   *     "folders/[FOLDER_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/links/[LINK_ID]"
   *
   * For example:
   *
   *   `projects/my-project/locations/global/buckets/my-bucket/links/my_link
   */
  name: string;
  /**
   * Describes this link.
   *
   * The maximum length of the description is 8000 characters.
   */
  description: string;
  /** Output only. The creation timestamp of the link. */
  createTime:
    | Date
    | undefined;
  /** Output only. The resource lifecycle state. */
  lifecycleState: LifecycleState;
  /**
   * The information of a BigQuery Dataset. When a link is created, a BigQuery
   * dataset is created along with it, in the same project as the LogBucket it's
   * linked to. This dataset will also have BigQuery Views corresponding to the
   * LogViews in the bucket.
   */
  bigqueryDataset: BigQueryDataset | undefined;
}

/** Options that change functionality of a sink exporting data to BigQuery. */
export interface BigQueryOptions {
  /**
   * Optional. Whether to use [BigQuery's partition
   * tables](https://cloud.google.com/bigquery/docs/partitioned-tables). By
   * default, Cloud Logging creates dated tables based on the log entries'
   * timestamps, e.g. syslog_20170523. With partitioned tables the date suffix
   * is no longer present and [special query
   * syntax](https://cloud.google.com/bigquery/docs/querying-partitioned-tables)
   * has to be used instead. In both cases, tables are sharded based on UTC
   * timezone.
   */
  usePartitionedTables: boolean;
  /**
   * Output only. True if new timestamp column based partitioning is in use,
   * false if legacy ingestion-time partitioning is in use.
   *
   * All new sinks will have this field set true and will use timestamp column
   * based partitioning. If use_partitioned_tables is false, this value has no
   * meaning and will be false. Legacy sinks using partitioned tables will have
   * this field set to false.
   */
  usesTimestampColumnPartitioning: boolean;
}

/** The parameters to `ListBuckets`. */
export interface ListBucketsRequest {
  /**
   * Required. The parent resource whose buckets are to be listed:
   *
   *     "projects/[PROJECT_ID]/locations/[LOCATION_ID]"
   *     "organizations/[ORGANIZATION_ID]/locations/[LOCATION_ID]"
   *     "billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION_ID]"
   *     "folders/[FOLDER_ID]/locations/[LOCATION_ID]"
   *
   * Note: The locations portion of the resource must be specified, but
   * supplying the character `-` in place of [LOCATION_ID] will return all
   * buckets.
   */
  parent: string;
  /**
   * Optional. If present, then retrieve the next batch of results from the
   * preceding call to this method. `pageToken` must be the value of
   * `nextPageToken` from the previous response. The values of other method
   * parameters should be identical to those in the previous call.
   */
  pageToken: string;
  /**
   * Optional. The maximum number of results to return from this request.
   * Non-positive values are ignored. The presence of `nextPageToken` in the
   * response indicates that more results might be available.
   */
  pageSize: number;
}

/** The response from ListBuckets. */
export interface ListBucketsResponse {
  /** A list of buckets. */
  buckets: LogBucket[];
  /**
   * If there might be more results than appear in this response, then
   * `nextPageToken` is included. To get the next set of results, call the same
   * method again using the value of `nextPageToken` as `pageToken`.
   */
  nextPageToken: string;
}

/** The parameters to `CreateBucket`. */
export interface CreateBucketRequest {
  /**
   * Required. The resource in which to create the log bucket:
   *
   *     "projects/[PROJECT_ID]/locations/[LOCATION_ID]"
   *
   * For example:
   *
   *   `"projects/my-project/locations/global"`
   */
  parent: string;
  /**
   * Required. A client-assigned identifier such as `"my-bucket"`. Identifiers
   * are limited to 100 characters and can include only letters, digits,
   * underscores, hyphens, and periods.
   */
  bucketId: string;
  /**
   * Required. The new bucket. The region specified in the new bucket must be
   * compliant with any Location Restriction Org Policy. The name field in the
   * bucket is ignored.
   */
  bucket: LogBucket | undefined;
}

/** The parameters to `UpdateBucket`. */
export interface UpdateBucketRequest {
  /**
   * Required. The full resource name of the bucket to update.
   *
   *     "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
   *     "organizations/[ORGANIZATION_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
   *     "billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
   *     "folders/[FOLDER_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
   *
   * For example:
   *
   *   `"projects/my-project/locations/global/buckets/my-bucket"`
   */
  name: string;
  /** Required. The updated bucket. */
  bucket:
    | LogBucket
    | undefined;
  /**
   * Required. Field mask that specifies the fields in `bucket` that need an
   * update. A bucket field will be overwritten if, and only if, it is in the
   * update mask. `name` and output only fields cannot be updated.
   *
   * For a detailed `FieldMask` definition, see:
   * https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#google.protobuf.FieldMask
   *
   * For example: `updateMask=retention_days`
   */
  updateMask: string[] | undefined;
}

/** The parameters to `GetBucket`. */
export interface GetBucketRequest {
  /**
   * Required. The resource name of the bucket:
   *
   *     "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
   *     "organizations/[ORGANIZATION_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
   *     "billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
   *     "folders/[FOLDER_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
   *
   * For example:
   *
   *   `"projects/my-project/locations/global/buckets/my-bucket"`
   */
  name: string;
}

/** The parameters to `DeleteBucket`. */
export interface DeleteBucketRequest {
  /**
   * Required. The full resource name of the bucket to delete.
   *
   *     "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
   *     "organizations/[ORGANIZATION_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
   *     "billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
   *     "folders/[FOLDER_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
   *
   * For example:
   *
   *   `"projects/my-project/locations/global/buckets/my-bucket"`
   */
  name: string;
}

/** The parameters to `UndeleteBucket`. */
export interface UndeleteBucketRequest {
  /**
   * Required. The full resource name of the bucket to undelete.
   *
   *     "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
   *     "organizations/[ORGANIZATION_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
   *     "billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
   *     "folders/[FOLDER_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
   *
   * For example:
   *
   *   `"projects/my-project/locations/global/buckets/my-bucket"`
   */
  name: string;
}

/** The parameters to `ListViews`. */
export interface ListViewsRequest {
  /**
   * Required. The bucket whose views are to be listed:
   *
   *     "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
   */
  parent: string;
  /**
   * Optional. If present, then retrieve the next batch of results from the
   * preceding call to this method. `pageToken` must be the value of
   * `nextPageToken` from the previous response. The values of other method
   * parameters should be identical to those in the previous call.
   */
  pageToken: string;
  /**
   * Optional. The maximum number of results to return from this request.
   *
   * Non-positive values are ignored. The presence of `nextPageToken` in the
   * response indicates that more results might be available.
   */
  pageSize: number;
}

/** The response from ListViews. */
export interface ListViewsResponse {
  /** A list of views. */
  views: LogView[];
  /**
   * If there might be more results than appear in this response, then
   * `nextPageToken` is included. To get the next set of results, call the same
   * method again using the value of `nextPageToken` as `pageToken`.
   */
  nextPageToken: string;
}

/** The parameters to `CreateView`. */
export interface CreateViewRequest {
  /**
   * Required. The bucket in which to create the view
   *
   *     `"projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"`
   *
   * For example:
   *
   *   `"projects/my-project/locations/global/buckets/my-bucket"`
   */
  parent: string;
  /**
   * Required. A client-assigned identifier such as `"my-view"`. Identifiers are
   * limited to 100 characters and can include only letters, digits,
   * underscores, hyphens, and periods.
   */
  viewId: string;
  /** Required. The new view. */
  view: LogView | undefined;
}

/** The parameters to `UpdateView`. */
export interface UpdateViewRequest {
  /**
   * Required. The full resource name of the view to update
   *
   *     "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/views/[VIEW_ID]"
   *
   * For example:
   *
   *   `"projects/my-project/locations/global/buckets/my-bucket/views/my-view"`
   */
  name: string;
  /** Required. The updated view. */
  view:
    | LogView
    | undefined;
  /**
   * Optional. Field mask that specifies the fields in `view` that need
   * an update. A field will be overwritten if, and only if, it is
   * in the update mask. `name` and output only fields cannot be updated.
   *
   * For a detailed `FieldMask` definition, see
   * https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#google.protobuf.FieldMask
   *
   * For example: `updateMask=filter`
   */
  updateMask: string[] | undefined;
}

/** The parameters to `GetView`. */
export interface GetViewRequest {
  /**
   * Required. The resource name of the policy:
   *
   *     "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/views/[VIEW_ID]"
   *
   * For example:
   *
   *   `"projects/my-project/locations/global/buckets/my-bucket/views/my-view"`
   */
  name: string;
}

/** The parameters to `DeleteView`. */
export interface DeleteViewRequest {
  /**
   * Required. The full resource name of the view to delete:
   *
   *     "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/views/[VIEW_ID]"
   *
   * For example:
   *
   *    `"projects/my-project/locations/global/buckets/my-bucket/views/my-view"`
   */
  name: string;
}

/** The parameters to `ListSinks`. */
export interface ListSinksRequest {
  /**
   * Required. The parent resource whose sinks are to be listed:
   *
   *     "projects/[PROJECT_ID]"
   *     "organizations/[ORGANIZATION_ID]"
   *     "billingAccounts/[BILLING_ACCOUNT_ID]"
   *     "folders/[FOLDER_ID]"
   */
  parent: string;
  /**
   * Optional. If present, then retrieve the next batch of results from the
   * preceding call to this method. `pageToken` must be the value of
   * `nextPageToken` from the previous response. The values of other method
   * parameters should be identical to those in the previous call.
   */
  pageToken: string;
  /**
   * Optional. The maximum number of results to return from this request.
   * Non-positive values are ignored. The presence of `nextPageToken` in the
   * response indicates that more results might be available.
   */
  pageSize: number;
}

/** Result returned from `ListSinks`. */
export interface ListSinksResponse {
  /** A list of sinks. */
  sinks: LogSink[];
  /**
   * If there might be more results than appear in this response, then
   * `nextPageToken` is included. To get the next set of results, call the same
   * method again using the value of `nextPageToken` as `pageToken`.
   */
  nextPageToken: string;
}

/** The parameters to `GetSink`. */
export interface GetSinkRequest {
  /**
   * Required. The resource name of the sink:
   *
   *     "projects/[PROJECT_ID]/sinks/[SINK_ID]"
   *     "organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]"
   *     "billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]"
   *     "folders/[FOLDER_ID]/sinks/[SINK_ID]"
   *
   * For example:
   *
   *   `"projects/my-project/sinks/my-sink"`
   */
  sinkName: string;
}

/** The parameters to `CreateSink`. */
export interface CreateSinkRequest {
  /**
   * Required. The resource in which to create the sink:
   *
   *     "projects/[PROJECT_ID]"
   *     "organizations/[ORGANIZATION_ID]"
   *     "billingAccounts/[BILLING_ACCOUNT_ID]"
   *     "folders/[FOLDER_ID]"
   *
   * For examples:
   *
   *   `"projects/my-project"`
   *   `"organizations/123456789"`
   */
  parent: string;
  /**
   * Required. The new sink, whose `name` parameter is a sink identifier that
   * is not already in use.
   */
  sink:
    | LogSink
    | undefined;
  /**
   * Optional. Determines the kind of IAM identity returned as `writer_identity`
   * in the new sink. If this value is omitted or set to false, and if the
   * sink's parent is a project, then the value returned as `writer_identity` is
   * the same group or service account used by Cloud Logging before the addition
   * of writer identities to this API. The sink's destination must be in the
   * same project as the sink itself.
   *
   * If this field is set to true, or if the sink is owned by a non-project
   * resource such as an organization, then the value of `writer_identity` will
   * be a unique service account used only for exports from the new sink. For
   * more information, see `writer_identity` in
   * [LogSink][google.logging.v2.LogSink].
   */
  uniqueWriterIdentity: boolean;
}

/** The parameters to `UpdateSink`. */
export interface UpdateSinkRequest {
  /**
   * Required. The full resource name of the sink to update, including the
   * parent resource and the sink identifier:
   *
   *     "projects/[PROJECT_ID]/sinks/[SINK_ID]"
   *     "organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]"
   *     "billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]"
   *     "folders/[FOLDER_ID]/sinks/[SINK_ID]"
   *
   * For example:
   *
   *   `"projects/my-project/sinks/my-sink"`
   */
  sinkName: string;
  /**
   * Required. The updated sink, whose name is the same identifier that appears
   * as part of `sink_name`.
   */
  sink:
    | LogSink
    | undefined;
  /**
   * Optional. See [sinks.create][google.logging.v2.ConfigServiceV2.CreateSink]
   * for a description of this field. When updating a sink, the effect of this
   * field on the value of `writer_identity` in the updated sink depends on both
   * the old and new values of this field:
   *
   * +   If the old and new values of this field are both false or both true,
   *     then there is no change to the sink's `writer_identity`.
   * +   If the old value is false and the new value is true, then
   *     `writer_identity` is changed to a unique service account.
   * +   It is an error if the old value is true and the new value is
   *     set to false or defaulted to false.
   */
  uniqueWriterIdentity: boolean;
  /**
   * Optional. Field mask that specifies the fields in `sink` that need
   * an update. A sink field will be overwritten if, and only if, it is
   * in the update mask. `name` and output only fields cannot be updated.
   *
   * An empty `updateMask` is temporarily treated as using the following mask
   * for backwards compatibility purposes:
   *
   *   `destination,filter,includeChildren`
   *
   * At some point in the future, behavior will be removed and specifying an
   * empty `updateMask` will be an error.
   *
   * For a detailed `FieldMask` definition, see
   * https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#google.protobuf.FieldMask
   *
   * For example: `updateMask=filter`
   */
  updateMask: string[] | undefined;
}

/** The parameters to `DeleteSink`. */
export interface DeleteSinkRequest {
  /**
   * Required. The full resource name of the sink to delete, including the
   * parent resource and the sink identifier:
   *
   *     "projects/[PROJECT_ID]/sinks/[SINK_ID]"
   *     "organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]"
   *     "billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]"
   *     "folders/[FOLDER_ID]/sinks/[SINK_ID]"
   *
   * For example:
   *
   *   `"projects/my-project/sinks/my-sink"`
   */
  sinkName: string;
}

/** The parameters to CreateLink. */
export interface CreateLinkRequest {
  /**
   * Required. The full resource name of the bucket to create a link for.
   *
   *     "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
   *     "organizations/[ORGANIZATION_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
   *     "billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
   *     "folders/[FOLDER_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
   */
  parent: string;
  /** Required. The new link. */
  link:
    | Link
    | undefined;
  /**
   * Required. The ID to use for the link. The link_id can have up to 100
   * characters. A valid link_id must only have alphanumeric characters and
   * underscores within it.
   */
  linkId: string;
}

/** The parameters to DeleteLink. */
export interface DeleteLinkRequest {
  /**
   * Required. The full resource name of the link to delete.
   *
   *  "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/links/[LINK_ID]"
   *   "organizations/[ORGANIZATION_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/links/[LINK_ID]"
   *   "billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/links/[LINK_ID]"
   *   "folders/[FOLDER_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/links/[LINK_ID]"
   */
  name: string;
}

/** The parameters to ListLinks. */
export interface ListLinksRequest {
  /**
   * Required. The parent resource whose links are to be listed:
   *
   *   "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/links/"
   *   "organizations/[ORGANIZATION_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/"
   *   "billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/"
   *   "folders/[FOLDER_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/
   */
  parent: string;
  /**
   * Optional. If present, then retrieve the next batch of results from the
   * preceding call to this method. `pageToken` must be the value of
   * `nextPageToken` from the previous response.
   */
  pageToken: string;
  /** Optional. The maximum number of results to return from this request. */
  pageSize: number;
}

/** The response from ListLinks. */
export interface ListLinksResponse {
  /** A list of links. */
  links: Link[];
  /**
   * If there might be more results than those appearing in this response, then
   * `nextPageToken` is included. To get the next set of results, call the same
   * method again using the value of `nextPageToken` as `pageToken`.
   */
  nextPageToken: string;
}

/** The parameters to GetLink. */
export interface GetLinkRequest {
  /**
   * Required. The resource name of the link:
   *
   *   "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/links/[LINK_ID]"
   *   "organizations/[ORGANIZATION_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/links/[LINK_ID]"
   *   "billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/links/[LINK_ID]"
   *   "folders/[FOLDER_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/links/[LINK_ID]
   */
  name: string;
}

/**
 * Specifies a set of log entries that are filtered out by a sink. If
 * your Google Cloud resource receives a large volume of log entries, you can
 * use exclusions to reduce your chargeable logs. Note that exclusions on
 * organization-level and folder-level sinks don't apply to child resources.
 * Note also that you cannot modify the _Required sink or exclude logs from it.
 */
export interface LogExclusion {
  /**
   * Required. A client-assigned identifier, such as
   * `"load-balancer-exclusion"`. Identifiers are limited to 100 characters and
   * can include only letters, digits, underscores, hyphens, and periods. First
   * character has to be alphanumeric.
   */
  name: string;
  /** Optional. A description of this exclusion. */
  description: string;
  /**
   * Required. An [advanced logs
   * filter](https://cloud.google.com/logging/docs/view/advanced-queries) that
   * matches the log entries to be excluded. By using the [sample
   * function](https://cloud.google.com/logging/docs/view/advanced-queries#sample),
   * you can exclude less than 100% of the matching log entries.
   *
   * For example, the following query matches 99% of low-severity log entries
   * from Google Cloud Storage buckets:
   *
   *   `resource.type=gcs_bucket severity<ERROR sample(insertId, 0.99)`
   */
  filter: string;
  /**
   * Optional. If set to True, then this exclusion is disabled and it does not
   * exclude any log entries. You can [update an
   * exclusion][google.logging.v2.ConfigServiceV2.UpdateExclusion] to change the
   * value of this field.
   */
  disabled: boolean;
  /**
   * Output only. The creation timestamp of the exclusion.
   *
   * This field may not be present for older exclusions.
   */
  createTime:
    | Date
    | undefined;
  /**
   * Output only. The last update timestamp of the exclusion.
   *
   * This field may not be present for older exclusions.
   */
  updateTime: Date | undefined;
}

/** The parameters to `ListExclusions`. */
export interface ListExclusionsRequest {
  /**
   * Required. The parent resource whose exclusions are to be listed.
   *
   *     "projects/[PROJECT_ID]"
   *     "organizations/[ORGANIZATION_ID]"
   *     "billingAccounts/[BILLING_ACCOUNT_ID]"
   *     "folders/[FOLDER_ID]"
   */
  parent: string;
  /**
   * Optional. If present, then retrieve the next batch of results from the
   * preceding call to this method. `pageToken` must be the value of
   * `nextPageToken` from the previous response. The values of other method
   * parameters should be identical to those in the previous call.
   */
  pageToken: string;
  /**
   * Optional. The maximum number of results to return from this request.
   * Non-positive values are ignored. The presence of `nextPageToken` in the
   * response indicates that more results might be available.
   */
  pageSize: number;
}

/** Result returned from `ListExclusions`. */
export interface ListExclusionsResponse {
  /** A list of exclusions. */
  exclusions: LogExclusion[];
  /**
   * If there might be more results than appear in this response, then
   * `nextPageToken` is included. To get the next set of results, call the same
   * method again using the value of `nextPageToken` as `pageToken`.
   */
  nextPageToken: string;
}

/** The parameters to `GetExclusion`. */
export interface GetExclusionRequest {
  /**
   * Required. The resource name of an existing exclusion:
   *
   *     "projects/[PROJECT_ID]/exclusions/[EXCLUSION_ID]"
   *     "organizations/[ORGANIZATION_ID]/exclusions/[EXCLUSION_ID]"
   *     "billingAccounts/[BILLING_ACCOUNT_ID]/exclusions/[EXCLUSION_ID]"
   *     "folders/[FOLDER_ID]/exclusions/[EXCLUSION_ID]"
   *
   * For example:
   *
   *   `"projects/my-project/exclusions/my-exclusion"`
   */
  name: string;
}

/** The parameters to `CreateExclusion`. */
export interface CreateExclusionRequest {
  /**
   * Required. The parent resource in which to create the exclusion:
   *
   *     "projects/[PROJECT_ID]"
   *     "organizations/[ORGANIZATION_ID]"
   *     "billingAccounts/[BILLING_ACCOUNT_ID]"
   *     "folders/[FOLDER_ID]"
   *
   * For examples:
   *
   *   `"projects/my-logging-project"`
   *   `"organizations/123456789"`
   */
  parent: string;
  /**
   * Required. The new exclusion, whose `name` parameter is an exclusion name
   * that is not already used in the parent resource.
   */
  exclusion: LogExclusion | undefined;
}

/** The parameters to `UpdateExclusion`. */
export interface UpdateExclusionRequest {
  /**
   * Required. The resource name of the exclusion to update:
   *
   *     "projects/[PROJECT_ID]/exclusions/[EXCLUSION_ID]"
   *     "organizations/[ORGANIZATION_ID]/exclusions/[EXCLUSION_ID]"
   *     "billingAccounts/[BILLING_ACCOUNT_ID]/exclusions/[EXCLUSION_ID]"
   *     "folders/[FOLDER_ID]/exclusions/[EXCLUSION_ID]"
   *
   * For example:
   *
   *   `"projects/my-project/exclusions/my-exclusion"`
   */
  name: string;
  /**
   * Required. New values for the existing exclusion. Only the fields specified
   * in `update_mask` are relevant.
   */
  exclusion:
    | LogExclusion
    | undefined;
  /**
   * Required. A non-empty list of fields to change in the existing exclusion.
   * New values for the fields are taken from the corresponding fields in the
   * [LogExclusion][google.logging.v2.LogExclusion] included in this request.
   * Fields not mentioned in `update_mask` are not changed and are ignored in
   * the request.
   *
   * For example, to change the filter and description of an exclusion,
   * specify an `update_mask` of `"filter,description"`.
   */
  updateMask: string[] | undefined;
}

/** The parameters to `DeleteExclusion`. */
export interface DeleteExclusionRequest {
  /**
   * Required. The resource name of an existing exclusion to delete:
   *
   *     "projects/[PROJECT_ID]/exclusions/[EXCLUSION_ID]"
   *     "organizations/[ORGANIZATION_ID]/exclusions/[EXCLUSION_ID]"
   *     "billingAccounts/[BILLING_ACCOUNT_ID]/exclusions/[EXCLUSION_ID]"
   *     "folders/[FOLDER_ID]/exclusions/[EXCLUSION_ID]"
   *
   * For example:
   *
   *   `"projects/my-project/exclusions/my-exclusion"`
   */
  name: string;
}

/**
 * The parameters to
 * [GetCmekSettings][google.logging.v2.ConfigServiceV2.GetCmekSettings].
 *
 * See [Enabling CMEK for Log
 * Router](https://cloud.google.com/logging/docs/routing/managed-encryption) for
 * more information.
 */
export interface GetCmekSettingsRequest {
  /**
   * Required. The resource for which to retrieve CMEK settings.
   *
   *     "projects/[PROJECT_ID]/cmekSettings"
   *     "organizations/[ORGANIZATION_ID]/cmekSettings"
   *     "billingAccounts/[BILLING_ACCOUNT_ID]/cmekSettings"
   *     "folders/[FOLDER_ID]/cmekSettings"
   *
   * For example:
   *
   *   `"organizations/12345/cmekSettings"`
   *
   * Note: CMEK for the Log Router can be configured for Google Cloud projects,
   * folders, organizations and billing accounts. Once configured for an
   * organization, it applies to all projects and folders in the Google Cloud
   * organization.
   */
  name: string;
}

/**
 * The parameters to
 * [UpdateCmekSettings][google.logging.v2.ConfigServiceV2.UpdateCmekSettings].
 *
 * See [Enabling CMEK for Log
 * Router](https://cloud.google.com/logging/docs/routing/managed-encryption) for
 * more information.
 */
export interface UpdateCmekSettingsRequest {
  /**
   * Required. The resource name for the CMEK settings to update.
   *
   *     "projects/[PROJECT_ID]/cmekSettings"
   *     "organizations/[ORGANIZATION_ID]/cmekSettings"
   *     "billingAccounts/[BILLING_ACCOUNT_ID]/cmekSettings"
   *     "folders/[FOLDER_ID]/cmekSettings"
   *
   * For example:
   *
   *   `"organizations/12345/cmekSettings"`
   *
   * Note: CMEK for the Log Router can currently only be configured for Google
   * Cloud organizations. Once configured, it applies to all projects and
   * folders in the Google Cloud organization.
   */
  name: string;
  /**
   * Required. The CMEK settings to update.
   *
   * See [Enabling CMEK for Log
   * Router](https://cloud.google.com/logging/docs/routing/managed-encryption)
   * for more information.
   */
  cmekSettings:
    | CmekSettings
    | undefined;
  /**
   * Optional. Field mask identifying which fields from `cmek_settings` should
   * be updated. A field will be overwritten if and only if it is in the update
   * mask. Output only fields cannot be updated.
   *
   * See [FieldMask][google.protobuf.FieldMask] for more information.
   *
   * For example: `"updateMask=kmsKeyName"`
   */
  updateMask: string[] | undefined;
}

/**
 * Describes the customer-managed encryption key (CMEK) settings associated with
 * a project, folder, organization, billing account, or flexible resource.
 *
 * Note: CMEK for the Log Router can currently only be configured for Google
 * Cloud organizations. Once configured, it applies to all projects and folders
 * in the Google Cloud organization.
 *
 * See [Enabling CMEK for Log
 * Router](https://cloud.google.com/logging/docs/routing/managed-encryption) for
 * more information.
 */
export interface CmekSettings {
  /** Output only. The resource name of the CMEK settings. */
  name: string;
  /**
   * The resource name for the configured Cloud KMS key.
   *
   * KMS key name format:
   *
   *     "projects/[PROJECT_ID]/locations/[LOCATION]/keyRings/[KEYRING]/cryptoKeys/[KEY]"
   *
   * For example:
   *
   *   `"projects/my-project/locations/us-central1/keyRings/my-ring/cryptoKeys/my-key"`
   *
   * To enable CMEK for the Log Router, set this field to a valid
   * `kms_key_name` for which the associated service account has the required
   * cloudkms.cryptoKeyEncrypterDecrypter roles assigned for the key.
   *
   * The Cloud KMS key used by the Log Router can be updated by changing the
   * `kms_key_name` to a new valid key name or disabled by setting the key name
   * to an empty string. Encryption operations that are in progress will be
   * completed with the key that was in use when they started. Decryption
   * operations will be completed using the key that was used at the time of
   * encryption unless access to that key has been revoked.
   *
   * To disable CMEK for the Log Router, set this field to an empty string.
   *
   * See [Enabling CMEK for Log
   * Router](https://cloud.google.com/logging/docs/routing/managed-encryption)
   * for more information.
   */
  kmsKeyName: string;
  /**
   * The CryptoKeyVersion resource name for the configured Cloud KMS key.
   *
   * KMS key name format:
   *
   *     "projects/[PROJECT_ID]/locations/[LOCATION]/keyRings/[KEYRING]/cryptoKeys/[KEY]/cryptoKeyVersions/[VERSION]"
   *
   * For example:
   *
   *   `"projects/my-project/locations/us-central1/keyRings/my-ring/cryptoKeys/my-key/cryptoKeyVersions/1"`
   *
   * This is a read-only field used to convey the specific configured
   * CryptoKeyVersion of `kms_key` that has been configured. It will be
   * populated in cases where the CMEK settings are bound to a single key
   * version.
   *
   * If this field is populated, the `kms_key` is tied to a specific
   * CryptoKeyVersion.
   */
  kmsKeyVersionName: string;
  /**
   * Output only. The service account that will be used by the Log Router to
   * access your Cloud KMS key.
   *
   * Before enabling CMEK for Log Router, you must first assign the
   * cloudkms.cryptoKeyEncrypterDecrypter role to the service account that
   * the Log Router will use to access your Cloud KMS key. Use
   * [GetCmekSettings][google.logging.v2.ConfigServiceV2.GetCmekSettings] to
   * obtain the service account ID.
   *
   * See [Enabling CMEK for Log
   * Router](https://cloud.google.com/logging/docs/routing/managed-encryption)
   * for more information.
   */
  serviceAccountId: string;
}

/**
 * The parameters to
 * [GetSettings][google.logging.v2.ConfigServiceV2.GetSettings].
 *
 * See [Enabling CMEK for Log
 * Router](https://cloud.google.com/logging/docs/routing/managed-encryption) for
 * more information.
 */
export interface GetSettingsRequest {
  /**
   * Required. The resource for which to retrieve settings.
   *
   *     "projects/[PROJECT_ID]/settings"
   *     "organizations/[ORGANIZATION_ID]/settings"
   *     "billingAccounts/[BILLING_ACCOUNT_ID]/settings"
   *     "folders/[FOLDER_ID]/settings"
   *
   * For example:
   *
   *   `"organizations/12345/settings"`
   *
   * Note: Settings for the Log Router can be get for Google Cloud projects,
   * folders, organizations and billing accounts. Currently it can only be
   * configured for organizations. Once configured for an organization, it
   * applies to all projects and folders in the Google Cloud organization.
   */
  name: string;
}

/**
 * The parameters to
 * [UpdateSettings][google.logging.v2.ConfigServiceV2.UpdateSettings].
 *
 * See [Enabling CMEK for Log
 * Router](https://cloud.google.com/logging/docs/routing/managed-encryption) for
 * more information.
 */
export interface UpdateSettingsRequest {
  /**
   * Required. The resource name for the settings to update.
   *
   *     "organizations/[ORGANIZATION_ID]/settings"
   *
   * For example:
   *
   *   `"organizations/12345/settings"`
   *
   * Note: Settings for the Log Router can currently only be configured for
   * Google Cloud organizations. Once configured, it applies to all projects and
   * folders in the Google Cloud organization.
   */
  name: string;
  /**
   * Required. The settings to update.
   *
   * See [Enabling CMEK for Log
   * Router](https://cloud.google.com/logging/docs/routing/managed-encryption)
   * for more information.
   */
  settings:
    | Settings
    | undefined;
  /**
   * Optional. Field mask identifying which fields from `settings` should
   * be updated. A field will be overwritten if and only if it is in the update
   * mask. Output only fields cannot be updated.
   *
   * See [FieldMask][google.protobuf.FieldMask] for more information.
   *
   * For example: `"updateMask=kmsKeyName"`
   */
  updateMask: string[] | undefined;
}

/**
 * Describes the settings associated with a project, folder, organization,
 * billing account, or flexible resource.
 */
export interface Settings {
  /** Output only. The resource name of the settings. */
  name: string;
  /**
   * Optional. The resource name for the configured Cloud KMS key.
   *
   * KMS key name format:
   *
   *     "projects/[PROJECT_ID]/locations/[LOCATION]/keyRings/[KEYRING]/cryptoKeys/[KEY]"
   *
   * For example:
   *
   *   `"projects/my-project/locations/us-central1/keyRings/my-ring/cryptoKeys/my-key"`
   *
   * To enable CMEK for the Log Router, set this field to a valid
   * `kms_key_name` for which the associated service account has the required
   * `roles/cloudkms.cryptoKeyEncrypterDecrypter` role assigned for the key.
   *
   * The Cloud KMS key used by the Log Router can be updated by changing the
   * `kms_key_name` to a new valid key name. Encryption operations that are in
   * progress will be completed with the key that was in use when they started.
   * Decryption operations will be completed using the key that was used at the
   * time of encryption unless access to that key has been revoked.
   *
   * To disable CMEK for the Log Router, set this field to an empty string.
   *
   * See [Enabling CMEK for Log
   * Router](https://cloud.google.com/logging/docs/routing/managed-encryption)
   * for more information.
   */
  kmsKeyName: string;
  /**
   * Output only. The service account that will be used by the Log Router to
   * access your Cloud KMS key.
   *
   * Before enabling CMEK for Log Router, you must first assign the role
   * `roles/cloudkms.cryptoKeyEncrypterDecrypter` to the service account that
   * the Log Router will use to access your Cloud KMS key. Use
   * [GetSettings][google.logging.v2.ConfigServiceV2.GetSettings] to
   * obtain the service account ID.
   *
   * See [Enabling CMEK for Log
   * Router](https://cloud.google.com/logging/docs/routing/managed-encryption)
   * for more information.
   */
  kmsServiceAccountId: string;
  /**
   * Optional. The Cloud region that will be used for _Default and _Required log
   * buckets for newly created projects and folders. For example `europe-west1`.
   * This setting does not affect the location of custom log buckets.
   */
  storageLocation: string;
  /**
   * Optional. If set to true, the _Default sink in newly created projects and
   * folders will created in a disabled state. This can be used to automatically
   * disable log ingestion if there is already an aggregated sink configured in
   * the hierarchy. The _Default sink can be re-enabled manually if needed.
   */
  disableDefaultSink: boolean;
}

/** The parameters to CopyLogEntries. */
export interface CopyLogEntriesRequest {
  /**
   * Required. Log bucket from which to copy log entries.
   *
   * For example:
   *
   *   `"projects/my-project/locations/global/buckets/my-source-bucket"`
   */
  name: string;
  /**
   * Optional. A filter specifying which log entries to copy. The filter must be
   * no more than 20k characters. An empty filter matches all log entries.
   */
  filter: string;
  /** Required. Destination to which to copy log entries. */
  destination: string;
}

/** Metadata for CopyLogEntries long running operations. */
export interface CopyLogEntriesMetadata {
  /** The create time of an operation. */
  startTime:
    | Date
    | undefined;
  /** The end time of an operation. */
  endTime:
    | Date
    | undefined;
  /** State of an operation. */
  state: OperationState;
  /** Identifies whether the user has requested cancellation of the operation. */
  cancellationRequested: boolean;
  /** CopyLogEntries RPC request. */
  request:
    | CopyLogEntriesRequest
    | undefined;
  /** Estimated progress of the operation (0 - 100%). */
  progress: number;
  /**
   * The IAM identity of a service account that must be granted access to the
   * destination.
   *
   * If the service account is not granted permission to the destination within
   * an hour, the operation will be cancelled.
   *
   * For example: `"serviceAccount:foo@bar.com"`
   */
  writerIdentity: string;
}

/** Response type for CopyLogEntries long running operations. */
export interface CopyLogEntriesResponse {
  /** Number of log entries copied. */
  logEntriesCopiedCount: Long;
}

/** Metadata for LongRunningUpdateBucket Operations. */
export interface BucketMetadata {
  /** The create time of an operation. */
  startTime:
    | Date
    | undefined;
  /** The end time of an operation. */
  endTime:
    | Date
    | undefined;
  /** State of an operation. */
  state: OperationState;
  /** LongRunningCreateBucket RPC request. */
  createBucketRequest?:
    | CreateBucketRequest
    | undefined;
  /** LongRunningUpdateBucket RPC request. */
  updateBucketRequest?: UpdateBucketRequest | undefined;
}

/** Metadata for long running Link operations. */
export interface LinkMetadata {
  /** The start time of an operation. */
  startTime:
    | Date
    | undefined;
  /** The end time of an operation. */
  endTime:
    | Date
    | undefined;
  /** State of an operation. */
  state: OperationState;
  /** CreateLink RPC request. */
  createLinkRequest?:
    | CreateLinkRequest
    | undefined;
  /** DeleteLink RPC request. */
  deleteLinkRequest?: DeleteLinkRequest | undefined;
}

/** Cloud Logging specific location metadata. */
export interface LocationMetadata {
  /**
   * Indicates whether or not Log Analytics features are supported in the given
   * location.
   */
  logAnalyticsEnabled: boolean;
}

function createBaseIndexConfig(): IndexConfig {
  return { fieldPath: "", type: 0, createTime: undefined };
}

export const IndexConfig: MessageFns<IndexConfig> = {
  encode(message: IndexConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.fieldPath !== "") {
      writer.uint32(10).string(message.fieldPath);
    }
    if (message.type !== 0) {
      writer.uint32(16).int32(message.type);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IndexConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIndexConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.fieldPath = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IndexConfig {
    return {
      fieldPath: isSet(object.fieldPath) ? globalThis.String(object.fieldPath) : "",
      type: isSet(object.type) ? indexTypeFromJSON(object.type) : 0,
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
    };
  },

  toJSON(message: IndexConfig): unknown {
    const obj: any = {};
    if (message.fieldPath !== "") {
      obj.fieldPath = message.fieldPath;
    }
    if (message.type !== 0) {
      obj.type = indexTypeToJSON(message.type);
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<IndexConfig>): IndexConfig {
    return IndexConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<IndexConfig>): IndexConfig {
    const message = createBaseIndexConfig();
    message.fieldPath = object.fieldPath ?? "";
    message.type = object.type ?? 0;
    message.createTime = object.createTime ?? undefined;
    return message;
  },
};

function createBaseLogBucket(): LogBucket {
  return {
    name: "",
    description: "",
    createTime: undefined,
    updateTime: undefined,
    retentionDays: 0,
    locked: false,
    lifecycleState: 0,
    analyticsEnabled: false,
    restrictedFields: [],
    indexConfigs: [],
    cmekSettings: undefined,
  };
}

export const LogBucket: MessageFns<LogBucket> = {
  encode(message: LogBucket, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(34).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(42).fork()).join();
    }
    if (message.retentionDays !== 0) {
      writer.uint32(88).int32(message.retentionDays);
    }
    if (message.locked !== false) {
      writer.uint32(72).bool(message.locked);
    }
    if (message.lifecycleState !== 0) {
      writer.uint32(96).int32(message.lifecycleState);
    }
    if (message.analyticsEnabled !== false) {
      writer.uint32(112).bool(message.analyticsEnabled);
    }
    for (const v of message.restrictedFields) {
      writer.uint32(122).string(v!);
    }
    for (const v of message.indexConfigs) {
      IndexConfig.encode(v!, writer.uint32(138).fork()).join();
    }
    if (message.cmekSettings !== undefined) {
      CmekSettings.encode(message.cmekSettings, writer.uint32(154).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LogBucket {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLogBucket();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 11:
          if (tag !== 88) {
            break;
          }

          message.retentionDays = reader.int32();
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.locked = reader.bool();
          continue;
        case 12:
          if (tag !== 96) {
            break;
          }

          message.lifecycleState = reader.int32() as any;
          continue;
        case 14:
          if (tag !== 112) {
            break;
          }

          message.analyticsEnabled = reader.bool();
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.restrictedFields.push(reader.string());
          continue;
        case 17:
          if (tag !== 138) {
            break;
          }

          message.indexConfigs.push(IndexConfig.decode(reader, reader.uint32()));
          continue;
        case 19:
          if (tag !== 154) {
            break;
          }

          message.cmekSettings = CmekSettings.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LogBucket {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      retentionDays: isSet(object.retentionDays) ? globalThis.Number(object.retentionDays) : 0,
      locked: isSet(object.locked) ? globalThis.Boolean(object.locked) : false,
      lifecycleState: isSet(object.lifecycleState) ? lifecycleStateFromJSON(object.lifecycleState) : 0,
      analyticsEnabled: isSet(object.analyticsEnabled) ? globalThis.Boolean(object.analyticsEnabled) : false,
      restrictedFields: globalThis.Array.isArray(object?.restrictedFields)
        ? object.restrictedFields.map((e: any) => globalThis.String(e))
        : [],
      indexConfigs: globalThis.Array.isArray(object?.indexConfigs)
        ? object.indexConfigs.map((e: any) => IndexConfig.fromJSON(e))
        : [],
      cmekSettings: isSet(object.cmekSettings) ? CmekSettings.fromJSON(object.cmekSettings) : undefined,
    };
  },

  toJSON(message: LogBucket): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.retentionDays !== 0) {
      obj.retentionDays = Math.round(message.retentionDays);
    }
    if (message.locked !== false) {
      obj.locked = message.locked;
    }
    if (message.lifecycleState !== 0) {
      obj.lifecycleState = lifecycleStateToJSON(message.lifecycleState);
    }
    if (message.analyticsEnabled !== false) {
      obj.analyticsEnabled = message.analyticsEnabled;
    }
    if (message.restrictedFields?.length) {
      obj.restrictedFields = message.restrictedFields;
    }
    if (message.indexConfigs?.length) {
      obj.indexConfigs = message.indexConfigs.map((e) => IndexConfig.toJSON(e));
    }
    if (message.cmekSettings !== undefined) {
      obj.cmekSettings = CmekSettings.toJSON(message.cmekSettings);
    }
    return obj;
  },

  create(base?: DeepPartial<LogBucket>): LogBucket {
    return LogBucket.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LogBucket>): LogBucket {
    const message = createBaseLogBucket();
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.retentionDays = object.retentionDays ?? 0;
    message.locked = object.locked ?? false;
    message.lifecycleState = object.lifecycleState ?? 0;
    message.analyticsEnabled = object.analyticsEnabled ?? false;
    message.restrictedFields = object.restrictedFields?.map((e) => e) || [];
    message.indexConfigs = object.indexConfigs?.map((e) => IndexConfig.fromPartial(e)) || [];
    message.cmekSettings = (object.cmekSettings !== undefined && object.cmekSettings !== null)
      ? CmekSettings.fromPartial(object.cmekSettings)
      : undefined;
    return message;
  },
};

function createBaseLogView(): LogView {
  return { name: "", description: "", createTime: undefined, updateTime: undefined, filter: "" };
}

export const LogView: MessageFns<LogView> = {
  encode(message: LogView, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(34).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(42).fork()).join();
    }
    if (message.filter !== "") {
      writer.uint32(58).string(message.filter);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LogView {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLogView();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.filter = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LogView {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
    };
  },

  toJSON(message: LogView): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    return obj;
  },

  create(base?: DeepPartial<LogView>): LogView {
    return LogView.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LogView>): LogView {
    const message = createBaseLogView();
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.filter = object.filter ?? "";
    return message;
  },
};

function createBaseLogSink(): LogSink {
  return {
    name: "",
    destination: "",
    filter: "",
    description: "",
    disabled: false,
    exclusions: [],
    outputVersionFormat: 0,
    writerIdentity: "",
    includeChildren: false,
    bigqueryOptions: undefined,
    createTime: undefined,
    updateTime: undefined,
  };
}

export const LogSink: MessageFns<LogSink> = {
  encode(message: LogSink, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.destination !== "") {
      writer.uint32(26).string(message.destination);
    }
    if (message.filter !== "") {
      writer.uint32(42).string(message.filter);
    }
    if (message.description !== "") {
      writer.uint32(146).string(message.description);
    }
    if (message.disabled !== false) {
      writer.uint32(152).bool(message.disabled);
    }
    for (const v of message.exclusions) {
      LogExclusion.encode(v!, writer.uint32(130).fork()).join();
    }
    if (message.outputVersionFormat !== 0) {
      writer.uint32(48).int32(message.outputVersionFormat);
    }
    if (message.writerIdentity !== "") {
      writer.uint32(66).string(message.writerIdentity);
    }
    if (message.includeChildren !== false) {
      writer.uint32(72).bool(message.includeChildren);
    }
    if (message.bigqueryOptions !== undefined) {
      BigQueryOptions.encode(message.bigqueryOptions, writer.uint32(98).fork()).join();
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(106).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(114).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LogSink {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLogSink();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.destination = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 18:
          if (tag !== 146) {
            break;
          }

          message.description = reader.string();
          continue;
        case 19:
          if (tag !== 152) {
            break;
          }

          message.disabled = reader.bool();
          continue;
        case 16:
          if (tag !== 130) {
            break;
          }

          message.exclusions.push(LogExclusion.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.outputVersionFormat = reader.int32() as any;
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.writerIdentity = reader.string();
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.includeChildren = reader.bool();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.bigqueryOptions = BigQueryOptions.decode(reader, reader.uint32());
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LogSink {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      destination: isSet(object.destination) ? globalThis.String(object.destination) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      disabled: isSet(object.disabled) ? globalThis.Boolean(object.disabled) : false,
      exclusions: globalThis.Array.isArray(object?.exclusions)
        ? object.exclusions.map((e: any) => LogExclusion.fromJSON(e))
        : [],
      outputVersionFormat: isSet(object.outputVersionFormat)
        ? logSink_VersionFormatFromJSON(object.outputVersionFormat)
        : 0,
      writerIdentity: isSet(object.writerIdentity) ? globalThis.String(object.writerIdentity) : "",
      includeChildren: isSet(object.includeChildren) ? globalThis.Boolean(object.includeChildren) : false,
      bigqueryOptions: isSet(object.bigqueryOptions) ? BigQueryOptions.fromJSON(object.bigqueryOptions) : undefined,
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
    };
  },

  toJSON(message: LogSink): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.destination !== "") {
      obj.destination = message.destination;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.disabled !== false) {
      obj.disabled = message.disabled;
    }
    if (message.exclusions?.length) {
      obj.exclusions = message.exclusions.map((e) => LogExclusion.toJSON(e));
    }
    if (message.outputVersionFormat !== 0) {
      obj.outputVersionFormat = logSink_VersionFormatToJSON(message.outputVersionFormat);
    }
    if (message.writerIdentity !== "") {
      obj.writerIdentity = message.writerIdentity;
    }
    if (message.includeChildren !== false) {
      obj.includeChildren = message.includeChildren;
    }
    if (message.bigqueryOptions !== undefined) {
      obj.bigqueryOptions = BigQueryOptions.toJSON(message.bigqueryOptions);
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<LogSink>): LogSink {
    return LogSink.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LogSink>): LogSink {
    const message = createBaseLogSink();
    message.name = object.name ?? "";
    message.destination = object.destination ?? "";
    message.filter = object.filter ?? "";
    message.description = object.description ?? "";
    message.disabled = object.disabled ?? false;
    message.exclusions = object.exclusions?.map((e) => LogExclusion.fromPartial(e)) || [];
    message.outputVersionFormat = object.outputVersionFormat ?? 0;
    message.writerIdentity = object.writerIdentity ?? "";
    message.includeChildren = object.includeChildren ?? false;
    message.bigqueryOptions = (object.bigqueryOptions !== undefined && object.bigqueryOptions !== null)
      ? BigQueryOptions.fromPartial(object.bigqueryOptions)
      : undefined;
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    return message;
  },
};

function createBaseBigQueryDataset(): BigQueryDataset {
  return { datasetId: "" };
}

export const BigQueryDataset: MessageFns<BigQueryDataset> = {
  encode(message: BigQueryDataset, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.datasetId !== "") {
      writer.uint32(10).string(message.datasetId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BigQueryDataset {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBigQueryDataset();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.datasetId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BigQueryDataset {
    return { datasetId: isSet(object.datasetId) ? globalThis.String(object.datasetId) : "" };
  },

  toJSON(message: BigQueryDataset): unknown {
    const obj: any = {};
    if (message.datasetId !== "") {
      obj.datasetId = message.datasetId;
    }
    return obj;
  },

  create(base?: DeepPartial<BigQueryDataset>): BigQueryDataset {
    return BigQueryDataset.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BigQueryDataset>): BigQueryDataset {
    const message = createBaseBigQueryDataset();
    message.datasetId = object.datasetId ?? "";
    return message;
  },
};

function createBaseLink(): Link {
  return { name: "", description: "", createTime: undefined, lifecycleState: 0, bigqueryDataset: undefined };
}

export const Link: MessageFns<Link> = {
  encode(message: Link, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(26).fork()).join();
    }
    if (message.lifecycleState !== 0) {
      writer.uint32(32).int32(message.lifecycleState);
    }
    if (message.bigqueryDataset !== undefined) {
      BigQueryDataset.encode(message.bigqueryDataset, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Link {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLink();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.lifecycleState = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.bigqueryDataset = BigQueryDataset.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Link {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      lifecycleState: isSet(object.lifecycleState) ? lifecycleStateFromJSON(object.lifecycleState) : 0,
      bigqueryDataset: isSet(object.bigqueryDataset) ? BigQueryDataset.fromJSON(object.bigqueryDataset) : undefined,
    };
  },

  toJSON(message: Link): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.lifecycleState !== 0) {
      obj.lifecycleState = lifecycleStateToJSON(message.lifecycleState);
    }
    if (message.bigqueryDataset !== undefined) {
      obj.bigqueryDataset = BigQueryDataset.toJSON(message.bigqueryDataset);
    }
    return obj;
  },

  create(base?: DeepPartial<Link>): Link {
    return Link.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Link>): Link {
    const message = createBaseLink();
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.createTime = object.createTime ?? undefined;
    message.lifecycleState = object.lifecycleState ?? 0;
    message.bigqueryDataset = (object.bigqueryDataset !== undefined && object.bigqueryDataset !== null)
      ? BigQueryDataset.fromPartial(object.bigqueryDataset)
      : undefined;
    return message;
  },
};

function createBaseBigQueryOptions(): BigQueryOptions {
  return { usePartitionedTables: false, usesTimestampColumnPartitioning: false };
}

export const BigQueryOptions: MessageFns<BigQueryOptions> = {
  encode(message: BigQueryOptions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.usePartitionedTables !== false) {
      writer.uint32(8).bool(message.usePartitionedTables);
    }
    if (message.usesTimestampColumnPartitioning !== false) {
      writer.uint32(24).bool(message.usesTimestampColumnPartitioning);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BigQueryOptions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBigQueryOptions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.usePartitionedTables = reader.bool();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.usesTimestampColumnPartitioning = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BigQueryOptions {
    return {
      usePartitionedTables: isSet(object.usePartitionedTables)
        ? globalThis.Boolean(object.usePartitionedTables)
        : false,
      usesTimestampColumnPartitioning: isSet(object.usesTimestampColumnPartitioning)
        ? globalThis.Boolean(object.usesTimestampColumnPartitioning)
        : false,
    };
  },

  toJSON(message: BigQueryOptions): unknown {
    const obj: any = {};
    if (message.usePartitionedTables !== false) {
      obj.usePartitionedTables = message.usePartitionedTables;
    }
    if (message.usesTimestampColumnPartitioning !== false) {
      obj.usesTimestampColumnPartitioning = message.usesTimestampColumnPartitioning;
    }
    return obj;
  },

  create(base?: DeepPartial<BigQueryOptions>): BigQueryOptions {
    return BigQueryOptions.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BigQueryOptions>): BigQueryOptions {
    const message = createBaseBigQueryOptions();
    message.usePartitionedTables = object.usePartitionedTables ?? false;
    message.usesTimestampColumnPartitioning = object.usesTimestampColumnPartitioning ?? false;
    return message;
  },
};

function createBaseListBucketsRequest(): ListBucketsRequest {
  return { parent: "", pageToken: "", pageSize: 0 };
}

export const ListBucketsRequest: MessageFns<ListBucketsRequest> = {
  encode(message: ListBucketsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageToken !== "") {
      writer.uint32(18).string(message.pageToken);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListBucketsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListBucketsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListBucketsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
    };
  },

  toJSON(message: ListBucketsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    return obj;
  },

  create(base?: DeepPartial<ListBucketsRequest>): ListBucketsRequest {
    return ListBucketsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListBucketsRequest>): ListBucketsRequest {
    const message = createBaseListBucketsRequest();
    message.parent = object.parent ?? "";
    message.pageToken = object.pageToken ?? "";
    message.pageSize = object.pageSize ?? 0;
    return message;
  },
};

function createBaseListBucketsResponse(): ListBucketsResponse {
  return { buckets: [], nextPageToken: "" };
}

export const ListBucketsResponse: MessageFns<ListBucketsResponse> = {
  encode(message: ListBucketsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.buckets) {
      LogBucket.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListBucketsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListBucketsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.buckets.push(LogBucket.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListBucketsResponse {
    return {
      buckets: globalThis.Array.isArray(object?.buckets) ? object.buckets.map((e: any) => LogBucket.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListBucketsResponse): unknown {
    const obj: any = {};
    if (message.buckets?.length) {
      obj.buckets = message.buckets.map((e) => LogBucket.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListBucketsResponse>): ListBucketsResponse {
    return ListBucketsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListBucketsResponse>): ListBucketsResponse {
    const message = createBaseListBucketsResponse();
    message.buckets = object.buckets?.map((e) => LogBucket.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseCreateBucketRequest(): CreateBucketRequest {
  return { parent: "", bucketId: "", bucket: undefined };
}

export const CreateBucketRequest: MessageFns<CreateBucketRequest> = {
  encode(message: CreateBucketRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.bucketId !== "") {
      writer.uint32(18).string(message.bucketId);
    }
    if (message.bucket !== undefined) {
      LogBucket.encode(message.bucket, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateBucketRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateBucketRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.bucketId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.bucket = LogBucket.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateBucketRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      bucketId: isSet(object.bucketId) ? globalThis.String(object.bucketId) : "",
      bucket: isSet(object.bucket) ? LogBucket.fromJSON(object.bucket) : undefined,
    };
  },

  toJSON(message: CreateBucketRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.bucketId !== "") {
      obj.bucketId = message.bucketId;
    }
    if (message.bucket !== undefined) {
      obj.bucket = LogBucket.toJSON(message.bucket);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateBucketRequest>): CreateBucketRequest {
    return CreateBucketRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateBucketRequest>): CreateBucketRequest {
    const message = createBaseCreateBucketRequest();
    message.parent = object.parent ?? "";
    message.bucketId = object.bucketId ?? "";
    message.bucket = (object.bucket !== undefined && object.bucket !== null)
      ? LogBucket.fromPartial(object.bucket)
      : undefined;
    return message;
  },
};

function createBaseUpdateBucketRequest(): UpdateBucketRequest {
  return { name: "", bucket: undefined, updateMask: undefined };
}

export const UpdateBucketRequest: MessageFns<UpdateBucketRequest> = {
  encode(message: UpdateBucketRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.bucket !== undefined) {
      LogBucket.encode(message.bucket, writer.uint32(18).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateBucketRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateBucketRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.bucket = LogBucket.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateBucketRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      bucket: isSet(object.bucket) ? LogBucket.fromJSON(object.bucket) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateBucketRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.bucket !== undefined) {
      obj.bucket = LogBucket.toJSON(message.bucket);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateBucketRequest>): UpdateBucketRequest {
    return UpdateBucketRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateBucketRequest>): UpdateBucketRequest {
    const message = createBaseUpdateBucketRequest();
    message.name = object.name ?? "";
    message.bucket = (object.bucket !== undefined && object.bucket !== null)
      ? LogBucket.fromPartial(object.bucket)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseGetBucketRequest(): GetBucketRequest {
  return { name: "" };
}

export const GetBucketRequest: MessageFns<GetBucketRequest> = {
  encode(message: GetBucketRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetBucketRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetBucketRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetBucketRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetBucketRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetBucketRequest>): GetBucketRequest {
    return GetBucketRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetBucketRequest>): GetBucketRequest {
    const message = createBaseGetBucketRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseDeleteBucketRequest(): DeleteBucketRequest {
  return { name: "" };
}

export const DeleteBucketRequest: MessageFns<DeleteBucketRequest> = {
  encode(message: DeleteBucketRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteBucketRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteBucketRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteBucketRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteBucketRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteBucketRequest>): DeleteBucketRequest {
    return DeleteBucketRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteBucketRequest>): DeleteBucketRequest {
    const message = createBaseDeleteBucketRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUndeleteBucketRequest(): UndeleteBucketRequest {
  return { name: "" };
}

export const UndeleteBucketRequest: MessageFns<UndeleteBucketRequest> = {
  encode(message: UndeleteBucketRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UndeleteBucketRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUndeleteBucketRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UndeleteBucketRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: UndeleteBucketRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<UndeleteBucketRequest>): UndeleteBucketRequest {
    return UndeleteBucketRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UndeleteBucketRequest>): UndeleteBucketRequest {
    const message = createBaseUndeleteBucketRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListViewsRequest(): ListViewsRequest {
  return { parent: "", pageToken: "", pageSize: 0 };
}

export const ListViewsRequest: MessageFns<ListViewsRequest> = {
  encode(message: ListViewsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageToken !== "") {
      writer.uint32(18).string(message.pageToken);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListViewsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListViewsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListViewsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
    };
  },

  toJSON(message: ListViewsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    return obj;
  },

  create(base?: DeepPartial<ListViewsRequest>): ListViewsRequest {
    return ListViewsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListViewsRequest>): ListViewsRequest {
    const message = createBaseListViewsRequest();
    message.parent = object.parent ?? "";
    message.pageToken = object.pageToken ?? "";
    message.pageSize = object.pageSize ?? 0;
    return message;
  },
};

function createBaseListViewsResponse(): ListViewsResponse {
  return { views: [], nextPageToken: "" };
}

export const ListViewsResponse: MessageFns<ListViewsResponse> = {
  encode(message: ListViewsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.views) {
      LogView.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListViewsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListViewsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.views.push(LogView.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListViewsResponse {
    return {
      views: globalThis.Array.isArray(object?.views) ? object.views.map((e: any) => LogView.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListViewsResponse): unknown {
    const obj: any = {};
    if (message.views?.length) {
      obj.views = message.views.map((e) => LogView.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListViewsResponse>): ListViewsResponse {
    return ListViewsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListViewsResponse>): ListViewsResponse {
    const message = createBaseListViewsResponse();
    message.views = object.views?.map((e) => LogView.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseCreateViewRequest(): CreateViewRequest {
  return { parent: "", viewId: "", view: undefined };
}

export const CreateViewRequest: MessageFns<CreateViewRequest> = {
  encode(message: CreateViewRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.viewId !== "") {
      writer.uint32(18).string(message.viewId);
    }
    if (message.view !== undefined) {
      LogView.encode(message.view, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateViewRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateViewRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.viewId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.view = LogView.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateViewRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      viewId: isSet(object.viewId) ? globalThis.String(object.viewId) : "",
      view: isSet(object.view) ? LogView.fromJSON(object.view) : undefined,
    };
  },

  toJSON(message: CreateViewRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.viewId !== "") {
      obj.viewId = message.viewId;
    }
    if (message.view !== undefined) {
      obj.view = LogView.toJSON(message.view);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateViewRequest>): CreateViewRequest {
    return CreateViewRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateViewRequest>): CreateViewRequest {
    const message = createBaseCreateViewRequest();
    message.parent = object.parent ?? "";
    message.viewId = object.viewId ?? "";
    message.view = (object.view !== undefined && object.view !== null) ? LogView.fromPartial(object.view) : undefined;
    return message;
  },
};

function createBaseUpdateViewRequest(): UpdateViewRequest {
  return { name: "", view: undefined, updateMask: undefined };
}

export const UpdateViewRequest: MessageFns<UpdateViewRequest> = {
  encode(message: UpdateViewRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.view !== undefined) {
      LogView.encode(message.view, writer.uint32(18).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateViewRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateViewRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.view = LogView.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateViewRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      view: isSet(object.view) ? LogView.fromJSON(object.view) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateViewRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.view !== undefined) {
      obj.view = LogView.toJSON(message.view);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateViewRequest>): UpdateViewRequest {
    return UpdateViewRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateViewRequest>): UpdateViewRequest {
    const message = createBaseUpdateViewRequest();
    message.name = object.name ?? "";
    message.view = (object.view !== undefined && object.view !== null) ? LogView.fromPartial(object.view) : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseGetViewRequest(): GetViewRequest {
  return { name: "" };
}

export const GetViewRequest: MessageFns<GetViewRequest> = {
  encode(message: GetViewRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetViewRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetViewRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetViewRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetViewRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetViewRequest>): GetViewRequest {
    return GetViewRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetViewRequest>): GetViewRequest {
    const message = createBaseGetViewRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseDeleteViewRequest(): DeleteViewRequest {
  return { name: "" };
}

export const DeleteViewRequest: MessageFns<DeleteViewRequest> = {
  encode(message: DeleteViewRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteViewRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteViewRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteViewRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteViewRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteViewRequest>): DeleteViewRequest {
    return DeleteViewRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteViewRequest>): DeleteViewRequest {
    const message = createBaseDeleteViewRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListSinksRequest(): ListSinksRequest {
  return { parent: "", pageToken: "", pageSize: 0 };
}

export const ListSinksRequest: MessageFns<ListSinksRequest> = {
  encode(message: ListSinksRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageToken !== "") {
      writer.uint32(18).string(message.pageToken);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListSinksRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSinksRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListSinksRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
    };
  },

  toJSON(message: ListSinksRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    return obj;
  },

  create(base?: DeepPartial<ListSinksRequest>): ListSinksRequest {
    return ListSinksRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListSinksRequest>): ListSinksRequest {
    const message = createBaseListSinksRequest();
    message.parent = object.parent ?? "";
    message.pageToken = object.pageToken ?? "";
    message.pageSize = object.pageSize ?? 0;
    return message;
  },
};

function createBaseListSinksResponse(): ListSinksResponse {
  return { sinks: [], nextPageToken: "" };
}

export const ListSinksResponse: MessageFns<ListSinksResponse> = {
  encode(message: ListSinksResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.sinks) {
      LogSink.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListSinksResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSinksResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.sinks.push(LogSink.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListSinksResponse {
    return {
      sinks: globalThis.Array.isArray(object?.sinks) ? object.sinks.map((e: any) => LogSink.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListSinksResponse): unknown {
    const obj: any = {};
    if (message.sinks?.length) {
      obj.sinks = message.sinks.map((e) => LogSink.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListSinksResponse>): ListSinksResponse {
    return ListSinksResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListSinksResponse>): ListSinksResponse {
    const message = createBaseListSinksResponse();
    message.sinks = object.sinks?.map((e) => LogSink.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetSinkRequest(): GetSinkRequest {
  return { sinkName: "" };
}

export const GetSinkRequest: MessageFns<GetSinkRequest> = {
  encode(message: GetSinkRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sinkName !== "") {
      writer.uint32(10).string(message.sinkName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetSinkRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSinkRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.sinkName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetSinkRequest {
    return { sinkName: isSet(object.sinkName) ? globalThis.String(object.sinkName) : "" };
  },

  toJSON(message: GetSinkRequest): unknown {
    const obj: any = {};
    if (message.sinkName !== "") {
      obj.sinkName = message.sinkName;
    }
    return obj;
  },

  create(base?: DeepPartial<GetSinkRequest>): GetSinkRequest {
    return GetSinkRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetSinkRequest>): GetSinkRequest {
    const message = createBaseGetSinkRequest();
    message.sinkName = object.sinkName ?? "";
    return message;
  },
};

function createBaseCreateSinkRequest(): CreateSinkRequest {
  return { parent: "", sink: undefined, uniqueWriterIdentity: false };
}

export const CreateSinkRequest: MessageFns<CreateSinkRequest> = {
  encode(message: CreateSinkRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.sink !== undefined) {
      LogSink.encode(message.sink, writer.uint32(18).fork()).join();
    }
    if (message.uniqueWriterIdentity !== false) {
      writer.uint32(24).bool(message.uniqueWriterIdentity);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateSinkRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateSinkRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.sink = LogSink.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.uniqueWriterIdentity = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateSinkRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      sink: isSet(object.sink) ? LogSink.fromJSON(object.sink) : undefined,
      uniqueWriterIdentity: isSet(object.uniqueWriterIdentity)
        ? globalThis.Boolean(object.uniqueWriterIdentity)
        : false,
    };
  },

  toJSON(message: CreateSinkRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.sink !== undefined) {
      obj.sink = LogSink.toJSON(message.sink);
    }
    if (message.uniqueWriterIdentity !== false) {
      obj.uniqueWriterIdentity = message.uniqueWriterIdentity;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateSinkRequest>): CreateSinkRequest {
    return CreateSinkRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateSinkRequest>): CreateSinkRequest {
    const message = createBaseCreateSinkRequest();
    message.parent = object.parent ?? "";
    message.sink = (object.sink !== undefined && object.sink !== null) ? LogSink.fromPartial(object.sink) : undefined;
    message.uniqueWriterIdentity = object.uniqueWriterIdentity ?? false;
    return message;
  },
};

function createBaseUpdateSinkRequest(): UpdateSinkRequest {
  return { sinkName: "", sink: undefined, uniqueWriterIdentity: false, updateMask: undefined };
}

export const UpdateSinkRequest: MessageFns<UpdateSinkRequest> = {
  encode(message: UpdateSinkRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sinkName !== "") {
      writer.uint32(10).string(message.sinkName);
    }
    if (message.sink !== undefined) {
      LogSink.encode(message.sink, writer.uint32(18).fork()).join();
    }
    if (message.uniqueWriterIdentity !== false) {
      writer.uint32(24).bool(message.uniqueWriterIdentity);
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateSinkRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateSinkRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.sinkName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.sink = LogSink.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.uniqueWriterIdentity = reader.bool();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateSinkRequest {
    return {
      sinkName: isSet(object.sinkName) ? globalThis.String(object.sinkName) : "",
      sink: isSet(object.sink) ? LogSink.fromJSON(object.sink) : undefined,
      uniqueWriterIdentity: isSet(object.uniqueWriterIdentity)
        ? globalThis.Boolean(object.uniqueWriterIdentity)
        : false,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateSinkRequest): unknown {
    const obj: any = {};
    if (message.sinkName !== "") {
      obj.sinkName = message.sinkName;
    }
    if (message.sink !== undefined) {
      obj.sink = LogSink.toJSON(message.sink);
    }
    if (message.uniqueWriterIdentity !== false) {
      obj.uniqueWriterIdentity = message.uniqueWriterIdentity;
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateSinkRequest>): UpdateSinkRequest {
    return UpdateSinkRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateSinkRequest>): UpdateSinkRequest {
    const message = createBaseUpdateSinkRequest();
    message.sinkName = object.sinkName ?? "";
    message.sink = (object.sink !== undefined && object.sink !== null) ? LogSink.fromPartial(object.sink) : undefined;
    message.uniqueWriterIdentity = object.uniqueWriterIdentity ?? false;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseDeleteSinkRequest(): DeleteSinkRequest {
  return { sinkName: "" };
}

export const DeleteSinkRequest: MessageFns<DeleteSinkRequest> = {
  encode(message: DeleteSinkRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sinkName !== "") {
      writer.uint32(10).string(message.sinkName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteSinkRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteSinkRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.sinkName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteSinkRequest {
    return { sinkName: isSet(object.sinkName) ? globalThis.String(object.sinkName) : "" };
  },

  toJSON(message: DeleteSinkRequest): unknown {
    const obj: any = {};
    if (message.sinkName !== "") {
      obj.sinkName = message.sinkName;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteSinkRequest>): DeleteSinkRequest {
    return DeleteSinkRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteSinkRequest>): DeleteSinkRequest {
    const message = createBaseDeleteSinkRequest();
    message.sinkName = object.sinkName ?? "";
    return message;
  },
};

function createBaseCreateLinkRequest(): CreateLinkRequest {
  return { parent: "", link: undefined, linkId: "" };
}

export const CreateLinkRequest: MessageFns<CreateLinkRequest> = {
  encode(message: CreateLinkRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.link !== undefined) {
      Link.encode(message.link, writer.uint32(18).fork()).join();
    }
    if (message.linkId !== "") {
      writer.uint32(26).string(message.linkId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateLinkRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateLinkRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.link = Link.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.linkId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateLinkRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      link: isSet(object.link) ? Link.fromJSON(object.link) : undefined,
      linkId: isSet(object.linkId) ? globalThis.String(object.linkId) : "",
    };
  },

  toJSON(message: CreateLinkRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.link !== undefined) {
      obj.link = Link.toJSON(message.link);
    }
    if (message.linkId !== "") {
      obj.linkId = message.linkId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateLinkRequest>): CreateLinkRequest {
    return CreateLinkRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateLinkRequest>): CreateLinkRequest {
    const message = createBaseCreateLinkRequest();
    message.parent = object.parent ?? "";
    message.link = (object.link !== undefined && object.link !== null) ? Link.fromPartial(object.link) : undefined;
    message.linkId = object.linkId ?? "";
    return message;
  },
};

function createBaseDeleteLinkRequest(): DeleteLinkRequest {
  return { name: "" };
}

export const DeleteLinkRequest: MessageFns<DeleteLinkRequest> = {
  encode(message: DeleteLinkRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteLinkRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteLinkRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteLinkRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteLinkRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteLinkRequest>): DeleteLinkRequest {
    return DeleteLinkRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteLinkRequest>): DeleteLinkRequest {
    const message = createBaseDeleteLinkRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListLinksRequest(): ListLinksRequest {
  return { parent: "", pageToken: "", pageSize: 0 };
}

export const ListLinksRequest: MessageFns<ListLinksRequest> = {
  encode(message: ListLinksRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageToken !== "") {
      writer.uint32(18).string(message.pageToken);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListLinksRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListLinksRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListLinksRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
    };
  },

  toJSON(message: ListLinksRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    return obj;
  },

  create(base?: DeepPartial<ListLinksRequest>): ListLinksRequest {
    return ListLinksRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListLinksRequest>): ListLinksRequest {
    const message = createBaseListLinksRequest();
    message.parent = object.parent ?? "";
    message.pageToken = object.pageToken ?? "";
    message.pageSize = object.pageSize ?? 0;
    return message;
  },
};

function createBaseListLinksResponse(): ListLinksResponse {
  return { links: [], nextPageToken: "" };
}

export const ListLinksResponse: MessageFns<ListLinksResponse> = {
  encode(message: ListLinksResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.links) {
      Link.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListLinksResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListLinksResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.links.push(Link.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListLinksResponse {
    return {
      links: globalThis.Array.isArray(object?.links) ? object.links.map((e: any) => Link.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListLinksResponse): unknown {
    const obj: any = {};
    if (message.links?.length) {
      obj.links = message.links.map((e) => Link.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListLinksResponse>): ListLinksResponse {
    return ListLinksResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListLinksResponse>): ListLinksResponse {
    const message = createBaseListLinksResponse();
    message.links = object.links?.map((e) => Link.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetLinkRequest(): GetLinkRequest {
  return { name: "" };
}

export const GetLinkRequest: MessageFns<GetLinkRequest> = {
  encode(message: GetLinkRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetLinkRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetLinkRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetLinkRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetLinkRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetLinkRequest>): GetLinkRequest {
    return GetLinkRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetLinkRequest>): GetLinkRequest {
    const message = createBaseGetLinkRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseLogExclusion(): LogExclusion {
  return { name: "", description: "", filter: "", disabled: false, createTime: undefined, updateTime: undefined };
}

export const LogExclusion: MessageFns<LogExclusion> = {
  encode(message: LogExclusion, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.filter !== "") {
      writer.uint32(26).string(message.filter);
    }
    if (message.disabled !== false) {
      writer.uint32(32).bool(message.disabled);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(42).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LogExclusion {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLogExclusion();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.disabled = reader.bool();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LogExclusion {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      disabled: isSet(object.disabled) ? globalThis.Boolean(object.disabled) : false,
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
    };
  },

  toJSON(message: LogExclusion): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.disabled !== false) {
      obj.disabled = message.disabled;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<LogExclusion>): LogExclusion {
    return LogExclusion.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LogExclusion>): LogExclusion {
    const message = createBaseLogExclusion();
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.filter = object.filter ?? "";
    message.disabled = object.disabled ?? false;
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    return message;
  },
};

function createBaseListExclusionsRequest(): ListExclusionsRequest {
  return { parent: "", pageToken: "", pageSize: 0 };
}

export const ListExclusionsRequest: MessageFns<ListExclusionsRequest> = {
  encode(message: ListExclusionsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageToken !== "") {
      writer.uint32(18).string(message.pageToken);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListExclusionsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListExclusionsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListExclusionsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
    };
  },

  toJSON(message: ListExclusionsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    return obj;
  },

  create(base?: DeepPartial<ListExclusionsRequest>): ListExclusionsRequest {
    return ListExclusionsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListExclusionsRequest>): ListExclusionsRequest {
    const message = createBaseListExclusionsRequest();
    message.parent = object.parent ?? "";
    message.pageToken = object.pageToken ?? "";
    message.pageSize = object.pageSize ?? 0;
    return message;
  },
};

function createBaseListExclusionsResponse(): ListExclusionsResponse {
  return { exclusions: [], nextPageToken: "" };
}

export const ListExclusionsResponse: MessageFns<ListExclusionsResponse> = {
  encode(message: ListExclusionsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.exclusions) {
      LogExclusion.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListExclusionsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListExclusionsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.exclusions.push(LogExclusion.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListExclusionsResponse {
    return {
      exclusions: globalThis.Array.isArray(object?.exclusions)
        ? object.exclusions.map((e: any) => LogExclusion.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListExclusionsResponse): unknown {
    const obj: any = {};
    if (message.exclusions?.length) {
      obj.exclusions = message.exclusions.map((e) => LogExclusion.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListExclusionsResponse>): ListExclusionsResponse {
    return ListExclusionsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListExclusionsResponse>): ListExclusionsResponse {
    const message = createBaseListExclusionsResponse();
    message.exclusions = object.exclusions?.map((e) => LogExclusion.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetExclusionRequest(): GetExclusionRequest {
  return { name: "" };
}

export const GetExclusionRequest: MessageFns<GetExclusionRequest> = {
  encode(message: GetExclusionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetExclusionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetExclusionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetExclusionRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetExclusionRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetExclusionRequest>): GetExclusionRequest {
    return GetExclusionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetExclusionRequest>): GetExclusionRequest {
    const message = createBaseGetExclusionRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateExclusionRequest(): CreateExclusionRequest {
  return { parent: "", exclusion: undefined };
}

export const CreateExclusionRequest: MessageFns<CreateExclusionRequest> = {
  encode(message: CreateExclusionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.exclusion !== undefined) {
      LogExclusion.encode(message.exclusion, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateExclusionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateExclusionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.exclusion = LogExclusion.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateExclusionRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      exclusion: isSet(object.exclusion) ? LogExclusion.fromJSON(object.exclusion) : undefined,
    };
  },

  toJSON(message: CreateExclusionRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.exclusion !== undefined) {
      obj.exclusion = LogExclusion.toJSON(message.exclusion);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateExclusionRequest>): CreateExclusionRequest {
    return CreateExclusionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateExclusionRequest>): CreateExclusionRequest {
    const message = createBaseCreateExclusionRequest();
    message.parent = object.parent ?? "";
    message.exclusion = (object.exclusion !== undefined && object.exclusion !== null)
      ? LogExclusion.fromPartial(object.exclusion)
      : undefined;
    return message;
  },
};

function createBaseUpdateExclusionRequest(): UpdateExclusionRequest {
  return { name: "", exclusion: undefined, updateMask: undefined };
}

export const UpdateExclusionRequest: MessageFns<UpdateExclusionRequest> = {
  encode(message: UpdateExclusionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.exclusion !== undefined) {
      LogExclusion.encode(message.exclusion, writer.uint32(18).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateExclusionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateExclusionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.exclusion = LogExclusion.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateExclusionRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      exclusion: isSet(object.exclusion) ? LogExclusion.fromJSON(object.exclusion) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateExclusionRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.exclusion !== undefined) {
      obj.exclusion = LogExclusion.toJSON(message.exclusion);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateExclusionRequest>): UpdateExclusionRequest {
    return UpdateExclusionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateExclusionRequest>): UpdateExclusionRequest {
    const message = createBaseUpdateExclusionRequest();
    message.name = object.name ?? "";
    message.exclusion = (object.exclusion !== undefined && object.exclusion !== null)
      ? LogExclusion.fromPartial(object.exclusion)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseDeleteExclusionRequest(): DeleteExclusionRequest {
  return { name: "" };
}

export const DeleteExclusionRequest: MessageFns<DeleteExclusionRequest> = {
  encode(message: DeleteExclusionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteExclusionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteExclusionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteExclusionRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteExclusionRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteExclusionRequest>): DeleteExclusionRequest {
    return DeleteExclusionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteExclusionRequest>): DeleteExclusionRequest {
    const message = createBaseDeleteExclusionRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseGetCmekSettingsRequest(): GetCmekSettingsRequest {
  return { name: "" };
}

export const GetCmekSettingsRequest: MessageFns<GetCmekSettingsRequest> = {
  encode(message: GetCmekSettingsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCmekSettingsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCmekSettingsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCmekSettingsRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetCmekSettingsRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetCmekSettingsRequest>): GetCmekSettingsRequest {
    return GetCmekSettingsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetCmekSettingsRequest>): GetCmekSettingsRequest {
    const message = createBaseGetCmekSettingsRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpdateCmekSettingsRequest(): UpdateCmekSettingsRequest {
  return { name: "", cmekSettings: undefined, updateMask: undefined };
}

export const UpdateCmekSettingsRequest: MessageFns<UpdateCmekSettingsRequest> = {
  encode(message: UpdateCmekSettingsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.cmekSettings !== undefined) {
      CmekSettings.encode(message.cmekSettings, writer.uint32(18).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateCmekSettingsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateCmekSettingsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.cmekSettings = CmekSettings.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateCmekSettingsRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      cmekSettings: isSet(object.cmekSettings) ? CmekSettings.fromJSON(object.cmekSettings) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateCmekSettingsRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.cmekSettings !== undefined) {
      obj.cmekSettings = CmekSettings.toJSON(message.cmekSettings);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateCmekSettingsRequest>): UpdateCmekSettingsRequest {
    return UpdateCmekSettingsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateCmekSettingsRequest>): UpdateCmekSettingsRequest {
    const message = createBaseUpdateCmekSettingsRequest();
    message.name = object.name ?? "";
    message.cmekSettings = (object.cmekSettings !== undefined && object.cmekSettings !== null)
      ? CmekSettings.fromPartial(object.cmekSettings)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseCmekSettings(): CmekSettings {
  return { name: "", kmsKeyName: "", kmsKeyVersionName: "", serviceAccountId: "" };
}

export const CmekSettings: MessageFns<CmekSettings> = {
  encode(message: CmekSettings, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.kmsKeyName !== "") {
      writer.uint32(18).string(message.kmsKeyName);
    }
    if (message.kmsKeyVersionName !== "") {
      writer.uint32(34).string(message.kmsKeyVersionName);
    }
    if (message.serviceAccountId !== "") {
      writer.uint32(26).string(message.serviceAccountId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CmekSettings {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCmekSettings();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.kmsKeyName = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.kmsKeyVersionName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.serviceAccountId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CmekSettings {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      kmsKeyName: isSet(object.kmsKeyName) ? globalThis.String(object.kmsKeyName) : "",
      kmsKeyVersionName: isSet(object.kmsKeyVersionName) ? globalThis.String(object.kmsKeyVersionName) : "",
      serviceAccountId: isSet(object.serviceAccountId) ? globalThis.String(object.serviceAccountId) : "",
    };
  },

  toJSON(message: CmekSettings): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.kmsKeyName !== "") {
      obj.kmsKeyName = message.kmsKeyName;
    }
    if (message.kmsKeyVersionName !== "") {
      obj.kmsKeyVersionName = message.kmsKeyVersionName;
    }
    if (message.serviceAccountId !== "") {
      obj.serviceAccountId = message.serviceAccountId;
    }
    return obj;
  },

  create(base?: DeepPartial<CmekSettings>): CmekSettings {
    return CmekSettings.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CmekSettings>): CmekSettings {
    const message = createBaseCmekSettings();
    message.name = object.name ?? "";
    message.kmsKeyName = object.kmsKeyName ?? "";
    message.kmsKeyVersionName = object.kmsKeyVersionName ?? "";
    message.serviceAccountId = object.serviceAccountId ?? "";
    return message;
  },
};

function createBaseGetSettingsRequest(): GetSettingsRequest {
  return { name: "" };
}

export const GetSettingsRequest: MessageFns<GetSettingsRequest> = {
  encode(message: GetSettingsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetSettingsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSettingsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetSettingsRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetSettingsRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetSettingsRequest>): GetSettingsRequest {
    return GetSettingsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetSettingsRequest>): GetSettingsRequest {
    const message = createBaseGetSettingsRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpdateSettingsRequest(): UpdateSettingsRequest {
  return { name: "", settings: undefined, updateMask: undefined };
}

export const UpdateSettingsRequest: MessageFns<UpdateSettingsRequest> = {
  encode(message: UpdateSettingsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.settings !== undefined) {
      Settings.encode(message.settings, writer.uint32(18).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateSettingsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateSettingsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.settings = Settings.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateSettingsRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      settings: isSet(object.settings) ? Settings.fromJSON(object.settings) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateSettingsRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.settings !== undefined) {
      obj.settings = Settings.toJSON(message.settings);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateSettingsRequest>): UpdateSettingsRequest {
    return UpdateSettingsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateSettingsRequest>): UpdateSettingsRequest {
    const message = createBaseUpdateSettingsRequest();
    message.name = object.name ?? "";
    message.settings = (object.settings !== undefined && object.settings !== null)
      ? Settings.fromPartial(object.settings)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseSettings(): Settings {
  return { name: "", kmsKeyName: "", kmsServiceAccountId: "", storageLocation: "", disableDefaultSink: false };
}

export const Settings: MessageFns<Settings> = {
  encode(message: Settings, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.kmsKeyName !== "") {
      writer.uint32(18).string(message.kmsKeyName);
    }
    if (message.kmsServiceAccountId !== "") {
      writer.uint32(26).string(message.kmsServiceAccountId);
    }
    if (message.storageLocation !== "") {
      writer.uint32(34).string(message.storageLocation);
    }
    if (message.disableDefaultSink !== false) {
      writer.uint32(40).bool(message.disableDefaultSink);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Settings {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSettings();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.kmsKeyName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.kmsServiceAccountId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.storageLocation = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.disableDefaultSink = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Settings {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      kmsKeyName: isSet(object.kmsKeyName) ? globalThis.String(object.kmsKeyName) : "",
      kmsServiceAccountId: isSet(object.kmsServiceAccountId) ? globalThis.String(object.kmsServiceAccountId) : "",
      storageLocation: isSet(object.storageLocation) ? globalThis.String(object.storageLocation) : "",
      disableDefaultSink: isSet(object.disableDefaultSink) ? globalThis.Boolean(object.disableDefaultSink) : false,
    };
  },

  toJSON(message: Settings): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.kmsKeyName !== "") {
      obj.kmsKeyName = message.kmsKeyName;
    }
    if (message.kmsServiceAccountId !== "") {
      obj.kmsServiceAccountId = message.kmsServiceAccountId;
    }
    if (message.storageLocation !== "") {
      obj.storageLocation = message.storageLocation;
    }
    if (message.disableDefaultSink !== false) {
      obj.disableDefaultSink = message.disableDefaultSink;
    }
    return obj;
  },

  create(base?: DeepPartial<Settings>): Settings {
    return Settings.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Settings>): Settings {
    const message = createBaseSettings();
    message.name = object.name ?? "";
    message.kmsKeyName = object.kmsKeyName ?? "";
    message.kmsServiceAccountId = object.kmsServiceAccountId ?? "";
    message.storageLocation = object.storageLocation ?? "";
    message.disableDefaultSink = object.disableDefaultSink ?? false;
    return message;
  },
};

function createBaseCopyLogEntriesRequest(): CopyLogEntriesRequest {
  return { name: "", filter: "", destination: "" };
}

export const CopyLogEntriesRequest: MessageFns<CopyLogEntriesRequest> = {
  encode(message: CopyLogEntriesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.filter !== "") {
      writer.uint32(26).string(message.filter);
    }
    if (message.destination !== "") {
      writer.uint32(34).string(message.destination);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CopyLogEntriesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCopyLogEntriesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.destination = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CopyLogEntriesRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      destination: isSet(object.destination) ? globalThis.String(object.destination) : "",
    };
  },

  toJSON(message: CopyLogEntriesRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.destination !== "") {
      obj.destination = message.destination;
    }
    return obj;
  },

  create(base?: DeepPartial<CopyLogEntriesRequest>): CopyLogEntriesRequest {
    return CopyLogEntriesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CopyLogEntriesRequest>): CopyLogEntriesRequest {
    const message = createBaseCopyLogEntriesRequest();
    message.name = object.name ?? "";
    message.filter = object.filter ?? "";
    message.destination = object.destination ?? "";
    return message;
  },
};

function createBaseCopyLogEntriesMetadata(): CopyLogEntriesMetadata {
  return {
    startTime: undefined,
    endTime: undefined,
    state: 0,
    cancellationRequested: false,
    request: undefined,
    progress: 0,
    writerIdentity: "",
  };
}

export const CopyLogEntriesMetadata: MessageFns<CopyLogEntriesMetadata> = {
  encode(message: CopyLogEntriesMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.startTime !== undefined) {
      Timestamp.encode(toTimestamp(message.startTime), writer.uint32(10).fork()).join();
    }
    if (message.endTime !== undefined) {
      Timestamp.encode(toTimestamp(message.endTime), writer.uint32(18).fork()).join();
    }
    if (message.state !== 0) {
      writer.uint32(24).int32(message.state);
    }
    if (message.cancellationRequested !== false) {
      writer.uint32(32).bool(message.cancellationRequested);
    }
    if (message.request !== undefined) {
      CopyLogEntriesRequest.encode(message.request, writer.uint32(42).fork()).join();
    }
    if (message.progress !== 0) {
      writer.uint32(48).int32(message.progress);
    }
    if (message.writerIdentity !== "") {
      writer.uint32(58).string(message.writerIdentity);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CopyLogEntriesMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCopyLogEntriesMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.startTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.endTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.cancellationRequested = reader.bool();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.request = CopyLogEntriesRequest.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.progress = reader.int32();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.writerIdentity = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CopyLogEntriesMetadata {
    return {
      startTime: isSet(object.startTime) ? fromJsonTimestamp(object.startTime) : undefined,
      endTime: isSet(object.endTime) ? fromJsonTimestamp(object.endTime) : undefined,
      state: isSet(object.state) ? operationStateFromJSON(object.state) : 0,
      cancellationRequested: isSet(object.cancellationRequested)
        ? globalThis.Boolean(object.cancellationRequested)
        : false,
      request: isSet(object.request) ? CopyLogEntriesRequest.fromJSON(object.request) : undefined,
      progress: isSet(object.progress) ? globalThis.Number(object.progress) : 0,
      writerIdentity: isSet(object.writerIdentity) ? globalThis.String(object.writerIdentity) : "",
    };
  },

  toJSON(message: CopyLogEntriesMetadata): unknown {
    const obj: any = {};
    if (message.startTime !== undefined) {
      obj.startTime = message.startTime.toISOString();
    }
    if (message.endTime !== undefined) {
      obj.endTime = message.endTime.toISOString();
    }
    if (message.state !== 0) {
      obj.state = operationStateToJSON(message.state);
    }
    if (message.cancellationRequested !== false) {
      obj.cancellationRequested = message.cancellationRequested;
    }
    if (message.request !== undefined) {
      obj.request = CopyLogEntriesRequest.toJSON(message.request);
    }
    if (message.progress !== 0) {
      obj.progress = Math.round(message.progress);
    }
    if (message.writerIdentity !== "") {
      obj.writerIdentity = message.writerIdentity;
    }
    return obj;
  },

  create(base?: DeepPartial<CopyLogEntriesMetadata>): CopyLogEntriesMetadata {
    return CopyLogEntriesMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CopyLogEntriesMetadata>): CopyLogEntriesMetadata {
    const message = createBaseCopyLogEntriesMetadata();
    message.startTime = object.startTime ?? undefined;
    message.endTime = object.endTime ?? undefined;
    message.state = object.state ?? 0;
    message.cancellationRequested = object.cancellationRequested ?? false;
    message.request = (object.request !== undefined && object.request !== null)
      ? CopyLogEntriesRequest.fromPartial(object.request)
      : undefined;
    message.progress = object.progress ?? 0;
    message.writerIdentity = object.writerIdentity ?? "";
    return message;
  },
};

function createBaseCopyLogEntriesResponse(): CopyLogEntriesResponse {
  return { logEntriesCopiedCount: Long.ZERO };
}

export const CopyLogEntriesResponse: MessageFns<CopyLogEntriesResponse> = {
  encode(message: CopyLogEntriesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.logEntriesCopiedCount.equals(Long.ZERO)) {
      writer.uint32(8).int64(message.logEntriesCopiedCount.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CopyLogEntriesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCopyLogEntriesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.logEntriesCopiedCount = Long.fromString(reader.int64().toString());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CopyLogEntriesResponse {
    return {
      logEntriesCopiedCount: isSet(object.logEntriesCopiedCount)
        ? Long.fromValue(object.logEntriesCopiedCount)
        : Long.ZERO,
    };
  },

  toJSON(message: CopyLogEntriesResponse): unknown {
    const obj: any = {};
    if (!message.logEntriesCopiedCount.equals(Long.ZERO)) {
      obj.logEntriesCopiedCount = (message.logEntriesCopiedCount || Long.ZERO).toString();
    }
    return obj;
  },

  create(base?: DeepPartial<CopyLogEntriesResponse>): CopyLogEntriesResponse {
    return CopyLogEntriesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CopyLogEntriesResponse>): CopyLogEntriesResponse {
    const message = createBaseCopyLogEntriesResponse();
    message.logEntriesCopiedCount =
      (object.logEntriesCopiedCount !== undefined && object.logEntriesCopiedCount !== null)
        ? Long.fromValue(object.logEntriesCopiedCount)
        : Long.ZERO;
    return message;
  },
};

function createBaseBucketMetadata(): BucketMetadata {
  return {
    startTime: undefined,
    endTime: undefined,
    state: 0,
    createBucketRequest: undefined,
    updateBucketRequest: undefined,
  };
}

export const BucketMetadata: MessageFns<BucketMetadata> = {
  encode(message: BucketMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.startTime !== undefined) {
      Timestamp.encode(toTimestamp(message.startTime), writer.uint32(10).fork()).join();
    }
    if (message.endTime !== undefined) {
      Timestamp.encode(toTimestamp(message.endTime), writer.uint32(18).fork()).join();
    }
    if (message.state !== 0) {
      writer.uint32(24).int32(message.state);
    }
    if (message.createBucketRequest !== undefined) {
      CreateBucketRequest.encode(message.createBucketRequest, writer.uint32(34).fork()).join();
    }
    if (message.updateBucketRequest !== undefined) {
      UpdateBucketRequest.encode(message.updateBucketRequest, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BucketMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBucketMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.startTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.endTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.createBucketRequest = CreateBucketRequest.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.updateBucketRequest = UpdateBucketRequest.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BucketMetadata {
    return {
      startTime: isSet(object.startTime) ? fromJsonTimestamp(object.startTime) : undefined,
      endTime: isSet(object.endTime) ? fromJsonTimestamp(object.endTime) : undefined,
      state: isSet(object.state) ? operationStateFromJSON(object.state) : 0,
      createBucketRequest: isSet(object.createBucketRequest)
        ? CreateBucketRequest.fromJSON(object.createBucketRequest)
        : undefined,
      updateBucketRequest: isSet(object.updateBucketRequest)
        ? UpdateBucketRequest.fromJSON(object.updateBucketRequest)
        : undefined,
    };
  },

  toJSON(message: BucketMetadata): unknown {
    const obj: any = {};
    if (message.startTime !== undefined) {
      obj.startTime = message.startTime.toISOString();
    }
    if (message.endTime !== undefined) {
      obj.endTime = message.endTime.toISOString();
    }
    if (message.state !== 0) {
      obj.state = operationStateToJSON(message.state);
    }
    if (message.createBucketRequest !== undefined) {
      obj.createBucketRequest = CreateBucketRequest.toJSON(message.createBucketRequest);
    }
    if (message.updateBucketRequest !== undefined) {
      obj.updateBucketRequest = UpdateBucketRequest.toJSON(message.updateBucketRequest);
    }
    return obj;
  },

  create(base?: DeepPartial<BucketMetadata>): BucketMetadata {
    return BucketMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BucketMetadata>): BucketMetadata {
    const message = createBaseBucketMetadata();
    message.startTime = object.startTime ?? undefined;
    message.endTime = object.endTime ?? undefined;
    message.state = object.state ?? 0;
    message.createBucketRequest = (object.createBucketRequest !== undefined && object.createBucketRequest !== null)
      ? CreateBucketRequest.fromPartial(object.createBucketRequest)
      : undefined;
    message.updateBucketRequest = (object.updateBucketRequest !== undefined && object.updateBucketRequest !== null)
      ? UpdateBucketRequest.fromPartial(object.updateBucketRequest)
      : undefined;
    return message;
  },
};

function createBaseLinkMetadata(): LinkMetadata {
  return {
    startTime: undefined,
    endTime: undefined,
    state: 0,
    createLinkRequest: undefined,
    deleteLinkRequest: undefined,
  };
}

export const LinkMetadata: MessageFns<LinkMetadata> = {
  encode(message: LinkMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.startTime !== undefined) {
      Timestamp.encode(toTimestamp(message.startTime), writer.uint32(10).fork()).join();
    }
    if (message.endTime !== undefined) {
      Timestamp.encode(toTimestamp(message.endTime), writer.uint32(18).fork()).join();
    }
    if (message.state !== 0) {
      writer.uint32(24).int32(message.state);
    }
    if (message.createLinkRequest !== undefined) {
      CreateLinkRequest.encode(message.createLinkRequest, writer.uint32(34).fork()).join();
    }
    if (message.deleteLinkRequest !== undefined) {
      DeleteLinkRequest.encode(message.deleteLinkRequest, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LinkMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLinkMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.startTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.endTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.createLinkRequest = CreateLinkRequest.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.deleteLinkRequest = DeleteLinkRequest.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LinkMetadata {
    return {
      startTime: isSet(object.startTime) ? fromJsonTimestamp(object.startTime) : undefined,
      endTime: isSet(object.endTime) ? fromJsonTimestamp(object.endTime) : undefined,
      state: isSet(object.state) ? operationStateFromJSON(object.state) : 0,
      createLinkRequest: isSet(object.createLinkRequest)
        ? CreateLinkRequest.fromJSON(object.createLinkRequest)
        : undefined,
      deleteLinkRequest: isSet(object.deleteLinkRequest)
        ? DeleteLinkRequest.fromJSON(object.deleteLinkRequest)
        : undefined,
    };
  },

  toJSON(message: LinkMetadata): unknown {
    const obj: any = {};
    if (message.startTime !== undefined) {
      obj.startTime = message.startTime.toISOString();
    }
    if (message.endTime !== undefined) {
      obj.endTime = message.endTime.toISOString();
    }
    if (message.state !== 0) {
      obj.state = operationStateToJSON(message.state);
    }
    if (message.createLinkRequest !== undefined) {
      obj.createLinkRequest = CreateLinkRequest.toJSON(message.createLinkRequest);
    }
    if (message.deleteLinkRequest !== undefined) {
      obj.deleteLinkRequest = DeleteLinkRequest.toJSON(message.deleteLinkRequest);
    }
    return obj;
  },

  create(base?: DeepPartial<LinkMetadata>): LinkMetadata {
    return LinkMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LinkMetadata>): LinkMetadata {
    const message = createBaseLinkMetadata();
    message.startTime = object.startTime ?? undefined;
    message.endTime = object.endTime ?? undefined;
    message.state = object.state ?? 0;
    message.createLinkRequest = (object.createLinkRequest !== undefined && object.createLinkRequest !== null)
      ? CreateLinkRequest.fromPartial(object.createLinkRequest)
      : undefined;
    message.deleteLinkRequest = (object.deleteLinkRequest !== undefined && object.deleteLinkRequest !== null)
      ? DeleteLinkRequest.fromPartial(object.deleteLinkRequest)
      : undefined;
    return message;
  },
};

function createBaseLocationMetadata(): LocationMetadata {
  return { logAnalyticsEnabled: false };
}

export const LocationMetadata: MessageFns<LocationMetadata> = {
  encode(message: LocationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.logAnalyticsEnabled !== false) {
      writer.uint32(8).bool(message.logAnalyticsEnabled);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LocationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLocationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.logAnalyticsEnabled = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LocationMetadata {
    return {
      logAnalyticsEnabled: isSet(object.logAnalyticsEnabled) ? globalThis.Boolean(object.logAnalyticsEnabled) : false,
    };
  },

  toJSON(message: LocationMetadata): unknown {
    const obj: any = {};
    if (message.logAnalyticsEnabled !== false) {
      obj.logAnalyticsEnabled = message.logAnalyticsEnabled;
    }
    return obj;
  },

  create(base?: DeepPartial<LocationMetadata>): LocationMetadata {
    return LocationMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LocationMetadata>): LocationMetadata {
    const message = createBaseLocationMetadata();
    message.logAnalyticsEnabled = object.logAnalyticsEnabled ?? false;
    return message;
  },
};

/** Service for configuring sinks used to route log entries. */
export type ConfigServiceV2Definition = typeof ConfigServiceV2Definition;
export const ConfigServiceV2Definition = {
  name: "ConfigServiceV2",
  fullName: "google.logging.v2.ConfigServiceV2",
  methods: {
    /** Lists log buckets. */
    listBuckets: {
      name: "ListBuckets",
      requestType: ListBucketsRequest,
      requestStream: false,
      responseType: ListBucketsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              237,
              1,
              90,
              45,
              18,
              43,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              98,
              117,
              99,
              107,
              101,
              116,
              115,
              90,
              50,
              18,
              48,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              98,
              117,
              99,
              107,
              101,
              116,
              115,
              90,
              44,
              18,
              42,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              98,
              117,
              99,
              107,
              101,
              116,
              115,
              90,
              52,
              18,
              50,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              98,
              105,
              108,
              108,
              105,
              110,
              103,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              98,
              117,
              99,
              107,
              101,
              116,
              115,
              18,
              36,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              42,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              98,
              117,
              99,
              107,
              101,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets a log bucket. */
    getBucket: {
      name: "GetBucket",
      requestType: GetBucketRequest,
      requestStream: false,
      responseType: LogBucket,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              237,
              1,
              90,
              45,
              18,
              43,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              117,
              99,
              107,
              101,
              116,
              115,
              47,
              42,
              125,
              90,
              50,
              18,
              48,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              117,
              99,
              107,
              101,
              116,
              115,
              47,
              42,
              125,
              90,
              44,
              18,
              42,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              117,
              99,
              107,
              101,
              116,
              115,
              47,
              42,
              125,
              90,
              52,
              18,
              50,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              98,
              105,
              108,
              108,
              105,
              110,
              103,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              117,
              99,
              107,
              101,
              116,
              115,
              47,
              42,
              125,
              18,
              36,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              42,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              117,
              99,
              107,
              101,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Creates a log bucket asynchronously that can be used to store log entries.
     *
     * After a bucket has been created, the bucket's location cannot be changed.
     */
    createBucketAsync: {
      name: "CreateBucketAsync",
      requestType: CreateBucketRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              27,
              10,
              9,
              76,
              111,
              103,
              66,
              117,
              99,
              107,
              101,
              116,
              18,
              14,
              66,
              117,
              99,
              107,
              101,
              116,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          578365826: [
            Buffer.from([
              209,
              2,
              58,
              6,
              98,
              117,
              99,
              107,
              101,
              116,
              90,
              65,
              58,
              6,
              98,
              117,
              99,
              107,
              101,
              116,
              34,
              55,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              98,
              117,
              99,
              107,
              101,
              116,
              115,
              58,
              99,
              114,
              101,
              97,
              116,
              101,
              65,
              115,
              121,
              110,
              99,
              90,
              70,
              58,
              6,
              98,
              117,
              99,
              107,
              101,
              116,
              34,
              60,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              98,
              117,
              99,
              107,
              101,
              116,
              115,
              58,
              99,
              114,
              101,
              97,
              116,
              101,
              65,
              115,
              121,
              110,
              99,
              90,
              64,
              58,
              6,
              98,
              117,
              99,
              107,
              101,
              116,
              34,
              54,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              98,
              117,
              99,
              107,
              101,
              116,
              115,
              58,
              99,
              114,
              101,
              97,
              116,
              101,
              65,
              115,
              121,
              110,
              99,
              90,
              72,
              58,
              6,
              98,
              117,
              99,
              107,
              101,
              116,
              34,
              62,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              98,
              105,
              108,
              108,
              105,
              110,
              103,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              98,
              117,
              99,
              107,
              101,
              116,
              115,
              58,
              99,
              114,
              101,
              97,
              116,
              101,
              65,
              115,
              121,
              110,
              99,
              34,
              48,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              42,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              98,
              117,
              99,
              107,
              101,
              116,
              115,
              58,
              99,
              114,
              101,
              97,
              116,
              101,
              65,
              115,
              121,
              110,
              99,
            ]),
          ],
        },
      },
    },
    /**
     * Updates a log bucket asynchronously.
     *
     * If the bucket has a `lifecycle_state` of `DELETE_REQUESTED`, then
     * `FAILED_PRECONDITION` will be returned.
     *
     * After a bucket has been created, the bucket's location cannot be changed.
     */
    updateBucketAsync: {
      name: "UpdateBucketAsync",
      requestType: UpdateBucketRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              27,
              10,
              9,
              76,
              111,
              103,
              66,
              117,
              99,
              107,
              101,
              116,
              18,
              14,
              66,
              117,
              99,
              107,
              101,
              116,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          578365826: [
            Buffer.from([
              209,
              2,
              58,
              6,
              98,
              117,
              99,
              107,
              101,
              116,
              90,
              65,
              58,
              6,
              98,
              117,
              99,
              107,
              101,
              116,
              34,
              55,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              117,
              99,
              107,
              101,
              116,
              115,
              47,
              42,
              125,
              58,
              117,
              112,
              100,
              97,
              116,
              101,
              65,
              115,
              121,
              110,
              99,
              90,
              70,
              58,
              6,
              98,
              117,
              99,
              107,
              101,
              116,
              34,
              60,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              117,
              99,
              107,
              101,
              116,
              115,
              47,
              42,
              125,
              58,
              117,
              112,
              100,
              97,
              116,
              101,
              65,
              115,
              121,
              110,
              99,
              90,
              64,
              58,
              6,
              98,
              117,
              99,
              107,
              101,
              116,
              34,
              54,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              117,
              99,
              107,
              101,
              116,
              115,
              47,
              42,
              125,
              58,
              117,
              112,
              100,
              97,
              116,
              101,
              65,
              115,
              121,
              110,
              99,
              90,
              72,
              58,
              6,
              98,
              117,
              99,
              107,
              101,
              116,
              34,
              62,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              98,
              105,
              108,
              108,
              105,
              110,
              103,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              117,
              99,
              107,
              101,
              116,
              115,
              47,
              42,
              125,
              58,
              117,
              112,
              100,
              97,
              116,
              101,
              65,
              115,
              121,
              110,
              99,
              34,
              48,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              42,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              117,
              99,
              107,
              101,
              116,
              115,
              47,
              42,
              125,
              58,
              117,
              112,
              100,
              97,
              116,
              101,
              65,
              115,
              121,
              110,
              99,
            ]),
          ],
        },
      },
    },
    /**
     * Creates a log bucket that can be used to store log entries. After a bucket
     * has been created, the bucket's location cannot be changed.
     */
    createBucket: {
      name: "CreateBucket",
      requestType: CreateBucketRequest,
      requestStream: false,
      responseType: LogBucket,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              149,
              2,
              58,
              6,
              98,
              117,
              99,
              107,
              101,
              116,
              90,
              53,
              58,
              6,
              98,
              117,
              99,
              107,
              101,
              116,
              34,
              43,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              98,
              117,
              99,
              107,
              101,
              116,
              115,
              90,
              58,
              58,
              6,
              98,
              117,
              99,
              107,
              101,
              116,
              34,
              48,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              98,
              117,
              99,
              107,
              101,
              116,
              115,
              90,
              52,
              58,
              6,
              98,
              117,
              99,
              107,
              101,
              116,
              34,
              42,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              98,
              117,
              99,
              107,
              101,
              116,
              115,
              90,
              60,
              58,
              6,
              98,
              117,
              99,
              107,
              101,
              116,
              34,
              50,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              98,
              105,
              108,
              108,
              105,
              110,
              103,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              98,
              117,
              99,
              107,
              101,
              116,
              115,
              34,
              36,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              42,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              98,
              117,
              99,
              107,
              101,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Updates a log bucket.
     *
     * If the bucket has a `lifecycle_state` of `DELETE_REQUESTED`, then
     * `FAILED_PRECONDITION` will be returned.
     *
     * After a bucket has been created, the bucket's location cannot be changed.
     */
    updateBucket: {
      name: "UpdateBucket",
      requestType: UpdateBucketRequest,
      requestStream: false,
      responseType: LogBucket,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              149,
              2,
              58,
              6,
              98,
              117,
              99,
              107,
              101,
              116,
              90,
              53,
              58,
              6,
              98,
              117,
              99,
              107,
              101,
              116,
              50,
              43,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              117,
              99,
              107,
              101,
              116,
              115,
              47,
              42,
              125,
              90,
              58,
              58,
              6,
              98,
              117,
              99,
              107,
              101,
              116,
              50,
              48,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              117,
              99,
              107,
              101,
              116,
              115,
              47,
              42,
              125,
              90,
              52,
              58,
              6,
              98,
              117,
              99,
              107,
              101,
              116,
              50,
              42,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              117,
              99,
              107,
              101,
              116,
              115,
              47,
              42,
              125,
              90,
              60,
              58,
              6,
              98,
              117,
              99,
              107,
              101,
              116,
              50,
              50,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              98,
              105,
              108,
              108,
              105,
              110,
              103,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              117,
              99,
              107,
              101,
              116,
              115,
              47,
              42,
              125,
              50,
              36,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              42,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              117,
              99,
              107,
              101,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Deletes a log bucket.
     *
     * Changes the bucket's `lifecycle_state` to the `DELETE_REQUESTED` state.
     * After 7 days, the bucket will be purged and all log entries in the bucket
     * will be permanently deleted.
     */
    deleteBucket: {
      name: "DeleteBucket",
      requestType: DeleteBucketRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              237,
              1,
              90,
              45,
              42,
              43,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              117,
              99,
              107,
              101,
              116,
              115,
              47,
              42,
              125,
              90,
              50,
              42,
              48,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              117,
              99,
              107,
              101,
              116,
              115,
              47,
              42,
              125,
              90,
              44,
              42,
              42,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              117,
              99,
              107,
              101,
              116,
              115,
              47,
              42,
              125,
              90,
              52,
              42,
              50,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              98,
              105,
              108,
              108,
              105,
              110,
              103,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              117,
              99,
              107,
              101,
              116,
              115,
              47,
              42,
              125,
              42,
              36,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              42,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              117,
              99,
              107,
              101,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Undeletes a log bucket. A bucket that has been deleted can be undeleted
     * within the grace period of 7 days.
     */
    undeleteBucket: {
      name: "UndeleteBucket",
      requestType: UndeleteBucketRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              169,
              2,
              58,
              1,
              42,
              90,
              57,
              58,
              1,
              42,
              34,
              52,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              117,
              99,
              107,
              101,
              116,
              115,
              47,
              42,
              125,
              58,
              117,
              110,
              100,
              101,
              108,
              101,
              116,
              101,
              90,
              62,
              58,
              1,
              42,
              34,
              57,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              117,
              99,
              107,
              101,
              116,
              115,
              47,
              42,
              125,
              58,
              117,
              110,
              100,
              101,
              108,
              101,
              116,
              101,
              90,
              56,
              58,
              1,
              42,
              34,
              51,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              117,
              99,
              107,
              101,
              116,
              115,
              47,
              42,
              125,
              58,
              117,
              110,
              100,
              101,
              108,
              101,
              116,
              101,
              90,
              64,
              58,
              1,
              42,
              34,
              59,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              98,
              105,
              108,
              108,
              105,
              110,
              103,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              117,
              99,
              107,
              101,
              116,
              115,
              47,
              42,
              125,
              58,
              117,
              110,
              100,
              101,
              108,
              101,
              116,
              101,
              34,
              45,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              42,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              117,
              99,
              107,
              101,
              116,
              115,
              47,
              42,
              125,
              58,
              117,
              110,
              100,
              101,
              108,
              101,
              116,
              101,
            ]),
          ],
        },
      },
    },
    /** Lists views on a log bucket. */
    listViews: {
      name: "ListViews",
      requestType: ListViewsRequest,
      requestStream: false,
      responseType: ListViewsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              149,
              2,
              90,
              53,
              18,
              51,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              117,
              99,
              107,
              101,
              116,
              115,
              47,
              42,
              125,
              47,
              118,
              105,
              101,
              119,
              115,
              90,
              58,
              18,
              56,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              117,
              99,
              107,
              101,
              116,
              115,
              47,
              42,
              125,
              47,
              118,
              105,
              101,
              119,
              115,
              90,
              52,
              18,
              50,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              117,
              99,
              107,
              101,
              116,
              115,
              47,
              42,
              125,
              47,
              118,
              105,
              101,
              119,
              115,
              90,
              60,
              18,
              58,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              98,
              105,
              108,
              108,
              105,
              110,
              103,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              117,
              99,
              107,
              101,
              116,
              115,
              47,
              42,
              125,
              47,
              118,
              105,
              101,
              119,
              115,
              18,
              44,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              42,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              117,
              99,
              107,
              101,
              116,
              115,
              47,
              42,
              125,
              47,
              118,
              105,
              101,
              119,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets a view on a log bucket.. */
    getView: {
      name: "GetView",
      requestType: GetViewRequest,
      requestStream: false,
      responseType: LogView,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              149,
              2,
              90,
              53,
              18,
              51,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              117,
              99,
              107,
              101,
              116,
              115,
              47,
              42,
              47,
              118,
              105,
              101,
              119,
              115,
              47,
              42,
              125,
              90,
              58,
              18,
              56,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              117,
              99,
              107,
              101,
              116,
              115,
              47,
              42,
              47,
              118,
              105,
              101,
              119,
              115,
              47,
              42,
              125,
              90,
              52,
              18,
              50,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              117,
              99,
              107,
              101,
              116,
              115,
              47,
              42,
              47,
              118,
              105,
              101,
              119,
              115,
              47,
              42,
              125,
              90,
              60,
              18,
              58,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              98,
              105,
              108,
              108,
              105,
              110,
              103,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              117,
              99,
              107,
              101,
              116,
              115,
              47,
              42,
              47,
              118,
              105,
              101,
              119,
              115,
              47,
              42,
              125,
              18,
              44,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              42,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              117,
              99,
              107,
              101,
              116,
              115,
              47,
              42,
              47,
              118,
              105,
              101,
              119,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Creates a view over log entries in a log bucket. A bucket may contain a
     * maximum of 30 views.
     */
    createView: {
      name: "CreateView",
      requestType: CreateViewRequest,
      requestStream: false,
      responseType: LogView,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              179,
              2,
              58,
              4,
              118,
              105,
              101,
              119,
              90,
              59,
              58,
              4,
              118,
              105,
              101,
              119,
              34,
              51,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              117,
              99,
              107,
              101,
              116,
              115,
              47,
              42,
              125,
              47,
              118,
              105,
              101,
              119,
              115,
              90,
              64,
              58,
              4,
              118,
              105,
              101,
              119,
              34,
              56,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              117,
              99,
              107,
              101,
              116,
              115,
              47,
              42,
              125,
              47,
              118,
              105,
              101,
              119,
              115,
              90,
              58,
              58,
              4,
              118,
              105,
              101,
              119,
              34,
              50,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              117,
              99,
              107,
              101,
              116,
              115,
              47,
              42,
              125,
              47,
              118,
              105,
              101,
              119,
              115,
              90,
              66,
              58,
              4,
              118,
              105,
              101,
              119,
              34,
              58,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              98,
              105,
              108,
              108,
              105,
              110,
              103,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              117,
              99,
              107,
              101,
              116,
              115,
              47,
              42,
              125,
              47,
              118,
              105,
              101,
              119,
              115,
              34,
              44,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              42,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              117,
              99,
              107,
              101,
              116,
              115,
              47,
              42,
              125,
              47,
              118,
              105,
              101,
              119,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Updates a view on a log bucket. This method replaces the following fields
     * in the existing view with values from the new view: `filter`.
     * If an `UNAVAILABLE` error is returned, this indicates that system is not in
     * a state where it can update the view. If this occurs, please try again in a
     * few minutes.
     */
    updateView: {
      name: "UpdateView",
      requestType: UpdateViewRequest,
      requestStream: false,
      responseType: LogView,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              179,
              2,
              58,
              4,
              118,
              105,
              101,
              119,
              90,
              59,
              58,
              4,
              118,
              105,
              101,
              119,
              50,
              51,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              117,
              99,
              107,
              101,
              116,
              115,
              47,
              42,
              47,
              118,
              105,
              101,
              119,
              115,
              47,
              42,
              125,
              90,
              64,
              58,
              4,
              118,
              105,
              101,
              119,
              50,
              56,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              117,
              99,
              107,
              101,
              116,
              115,
              47,
              42,
              47,
              118,
              105,
              101,
              119,
              115,
              47,
              42,
              125,
              90,
              58,
              58,
              4,
              118,
              105,
              101,
              119,
              50,
              50,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              117,
              99,
              107,
              101,
              116,
              115,
              47,
              42,
              47,
              118,
              105,
              101,
              119,
              115,
              47,
              42,
              125,
              90,
              66,
              58,
              4,
              118,
              105,
              101,
              119,
              50,
              58,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              98,
              105,
              108,
              108,
              105,
              110,
              103,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              117,
              99,
              107,
              101,
              116,
              115,
              47,
              42,
              47,
              118,
              105,
              101,
              119,
              115,
              47,
              42,
              125,
              50,
              44,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              42,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              117,
              99,
              107,
              101,
              116,
              115,
              47,
              42,
              47,
              118,
              105,
              101,
              119,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Deletes a view on a log bucket.
     * If an `UNAVAILABLE` error is returned, this indicates that system is not in
     * a state where it can delete the view. If this occurs, please try again in a
     * few minutes.
     */
    deleteView: {
      name: "DeleteView",
      requestType: DeleteViewRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              149,
              2,
              90,
              53,
              42,
              51,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              117,
              99,
              107,
              101,
              116,
              115,
              47,
              42,
              47,
              118,
              105,
              101,
              119,
              115,
              47,
              42,
              125,
              90,
              58,
              42,
              56,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              117,
              99,
              107,
              101,
              116,
              115,
              47,
              42,
              47,
              118,
              105,
              101,
              119,
              115,
              47,
              42,
              125,
              90,
              52,
              42,
              50,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              117,
              99,
              107,
              101,
              116,
              115,
              47,
              42,
              47,
              118,
              105,
              101,
              119,
              115,
              47,
              42,
              125,
              90,
              60,
              42,
              58,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              98,
              105,
              108,
              108,
              105,
              110,
              103,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              117,
              99,
              107,
              101,
              116,
              115,
              47,
              42,
              47,
              118,
              105,
              101,
              119,
              115,
              47,
              42,
              125,
              42,
              44,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              42,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              117,
              99,
              107,
              101,
              116,
              115,
              47,
              42,
              47,
              118,
              105,
              101,
              119,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists sinks. */
    listSinks: {
      name: "ListSinks",
      requestType: ListSinksRequest,
      requestStream: false,
      responseType: ListSinksResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              167,
              1,
              90,
              31,
              18,
              29,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              47,
              115,
              105,
              110,
              107,
              115,
              90,
              36,
              18,
              34,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              115,
              105,
              110,
              107,
              115,
              90,
              30,
              18,
              28,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              125,
              47,
              115,
              105,
              110,
              107,
              115,
              90,
              38,
              18,
              36,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              98,
              105,
              108,
              108,
              105,
              110,
              103,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              125,
              47,
              115,
              105,
              110,
              107,
              115,
              18,
              22,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              42,
              47,
              42,
              125,
              47,
              115,
              105,
              110,
              107,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets a sink. */
    getSink: {
      name: "GetSink",
      requestType: GetSinkRequest,
      requestStream: false,
      responseType: LogSink,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([9, 115, 105, 110, 107, 95, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              192,
              1,
              90,
              36,
              18,
              34,
              47,
              118,
              50,
              47,
              123,
              115,
              105,
              110,
              107,
              95,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              115,
              105,
              110,
              107,
              115,
              47,
              42,
              125,
              90,
              41,
              18,
              39,
              47,
              118,
              50,
              47,
              123,
              115,
              105,
              110,
              107,
              95,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              105,
              110,
              107,
              115,
              47,
              42,
              125,
              90,
              35,
              18,
              33,
              47,
              118,
              50,
              47,
              123,
              115,
              105,
              110,
              107,
              95,
              110,
              97,
              109,
              101,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              115,
              105,
              110,
              107,
              115,
              47,
              42,
              125,
              90,
              43,
              18,
              41,
              47,
              118,
              50,
              47,
              123,
              115,
              105,
              110,
              107,
              95,
              110,
              97,
              109,
              101,
              61,
              98,
              105,
              108,
              108,
              105,
              110,
              103,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              47,
              115,
              105,
              110,
              107,
              115,
              47,
              42,
              125,
              18,
              27,
              47,
              118,
              50,
              47,
              123,
              115,
              105,
              110,
              107,
              95,
              110,
              97,
              109,
              101,
              61,
              42,
              47,
              42,
              47,
              115,
              105,
              110,
              107,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Creates a sink that exports specified log entries to a destination. The
     * export of newly-ingested log entries begins immediately, unless the sink's
     * `writer_identity` is not permitted to write to the destination. A sink can
     * export log entries only from the resource owning the sink.
     */
    createSink: {
      name: "CreateSink",
      requestType: CreateSinkRequest,
      requestStream: false,
      responseType: LogSink,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([11, 112, 97, 114, 101, 110, 116, 44, 115, 105, 110, 107])],
          578365826: [
            Buffer.from([
              197,
              1,
              58,
              4,
              115,
              105,
              110,
              107,
              90,
              37,
              58,
              4,
              115,
              105,
              110,
              107,
              34,
              29,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              47,
              115,
              105,
              110,
              107,
              115,
              90,
              42,
              58,
              4,
              115,
              105,
              110,
              107,
              34,
              34,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              115,
              105,
              110,
              107,
              115,
              90,
              36,
              58,
              4,
              115,
              105,
              110,
              107,
              34,
              28,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              125,
              47,
              115,
              105,
              110,
              107,
              115,
              90,
              44,
              58,
              4,
              115,
              105,
              110,
              107,
              34,
              36,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              98,
              105,
              108,
              108,
              105,
              110,
              103,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              125,
              47,
              115,
              105,
              110,
              107,
              115,
              34,
              22,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              42,
              47,
              42,
              125,
              47,
              115,
              105,
              110,
              107,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Updates a sink. This method replaces the following fields in the existing
     * sink with values from the new sink: `destination`, and `filter`.
     *
     * The updated sink might also have a new `writer_identity`; see the
     * `unique_writer_identity` field.
     */
    updateSink: {
      name: "UpdateSink",
      requestType: UpdateSinkRequest,
      requestStream: false,
      responseType: LogSink,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              26,
              115,
              105,
              110,
              107,
              95,
              110,
              97,
              109,
              101,
              44,
              115,
              105,
              110,
              107,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
            Buffer.from([14, 115, 105, 110, 107, 95, 110, 97, 109, 101, 44, 115, 105, 110, 107]),
          ],
          578365826: [
            Buffer.from([
              153,
              3,
              58,
              4,
              115,
              105,
              110,
              107,
              90,
              42,
              58,
              4,
              115,
              105,
              110,
              107,
              26,
              34,
              47,
              118,
              50,
              47,
              123,
              115,
              105,
              110,
              107,
              95,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              115,
              105,
              110,
              107,
              115,
              47,
              42,
              125,
              90,
              47,
              58,
              4,
              115,
              105,
              110,
              107,
              26,
              39,
              47,
              118,
              50,
              47,
              123,
              115,
              105,
              110,
              107,
              95,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              105,
              110,
              107,
              115,
              47,
              42,
              125,
              90,
              41,
              58,
              4,
              115,
              105,
              110,
              107,
              26,
              33,
              47,
              118,
              50,
              47,
              123,
              115,
              105,
              110,
              107,
              95,
              110,
              97,
              109,
              101,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              115,
              105,
              110,
              107,
              115,
              47,
              42,
              125,
              90,
              49,
              58,
              4,
              115,
              105,
              110,
              107,
              26,
              41,
              47,
              118,
              50,
              47,
              123,
              115,
              105,
              110,
              107,
              95,
              110,
              97,
              109,
              101,
              61,
              98,
              105,
              108,
              108,
              105,
              110,
              103,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              47,
              115,
              105,
              110,
              107,
              115,
              47,
              42,
              125,
              90,
              42,
              58,
              4,
              115,
              105,
              110,
              107,
              50,
              34,
              47,
              118,
              50,
              47,
              123,
              115,
              105,
              110,
              107,
              95,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              115,
              105,
              110,
              107,
              115,
              47,
              42,
              125,
              90,
              47,
              58,
              4,
              115,
              105,
              110,
              107,
              50,
              39,
              47,
              118,
              50,
              47,
              123,
              115,
              105,
              110,
              107,
              95,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              105,
              110,
              107,
              115,
              47,
              42,
              125,
              90,
              41,
              58,
              4,
              115,
              105,
              110,
              107,
              50,
              33,
              47,
              118,
              50,
              47,
              123,
              115,
              105,
              110,
              107,
              95,
              110,
              97,
              109,
              101,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              115,
              105,
              110,
              107,
              115,
              47,
              42,
              125,
              90,
              49,
              58,
              4,
              115,
              105,
              110,
              107,
              50,
              41,
              47,
              118,
              50,
              47,
              123,
              115,
              105,
              110,
              107,
              95,
              110,
              97,
              109,
              101,
              61,
              98,
              105,
              108,
              108,
              105,
              110,
              103,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              47,
              115,
              105,
              110,
              107,
              115,
              47,
              42,
              125,
              26,
              27,
              47,
              118,
              50,
              47,
              123,
              115,
              105,
              110,
              107,
              95,
              110,
              97,
              109,
              101,
              61,
              42,
              47,
              42,
              47,
              115,
              105,
              110,
              107,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Deletes a sink. If the sink has a unique `writer_identity`, then that
     * service account is also deleted.
     */
    deleteSink: {
      name: "DeleteSink",
      requestType: DeleteSinkRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([9, 115, 105, 110, 107, 95, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              192,
              1,
              90,
              36,
              42,
              34,
              47,
              118,
              50,
              47,
              123,
              115,
              105,
              110,
              107,
              95,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              115,
              105,
              110,
              107,
              115,
              47,
              42,
              125,
              90,
              41,
              42,
              39,
              47,
              118,
              50,
              47,
              123,
              115,
              105,
              110,
              107,
              95,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              105,
              110,
              107,
              115,
              47,
              42,
              125,
              90,
              35,
              42,
              33,
              47,
              118,
              50,
              47,
              123,
              115,
              105,
              110,
              107,
              95,
              110,
              97,
              109,
              101,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              115,
              105,
              110,
              107,
              115,
              47,
              42,
              125,
              90,
              43,
              42,
              41,
              47,
              118,
              50,
              47,
              123,
              115,
              105,
              110,
              107,
              95,
              110,
              97,
              109,
              101,
              61,
              98,
              105,
              108,
              108,
              105,
              110,
              103,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              47,
              115,
              105,
              110,
              107,
              115,
              47,
              42,
              125,
              42,
              27,
              47,
              118,
              50,
              47,
              123,
              115,
              105,
              110,
              107,
              95,
              110,
              97,
              109,
              101,
              61,
              42,
              47,
              42,
              47,
              115,
              105,
              110,
              107,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Asynchronously creates a linked dataset in BigQuery which makes it possible
     * to use BigQuery to read the logs stored in the log bucket. A log bucket may
     * currently only contain one link.
     */
    createLink: {
      name: "CreateLink",
      requestType: CreateLinkRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([20, 10, 4, 76, 105, 110, 107, 18, 12, 76, 105, 110, 107, 77, 101, 116, 97, 100, 97, 116, 97]),
          ],
          8410: [
            Buffer.from([
              19,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              108,
              105,
              110,
              107,
              44,
              108,
              105,
              110,
              107,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              179,
              2,
              58,
              4,
              108,
              105,
              110,
              107,
              90,
              59,
              58,
              4,
              108,
              105,
              110,
              107,
              34,
              51,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              117,
              99,
              107,
              101,
              116,
              115,
              47,
              42,
              125,
              47,
              108,
              105,
              110,
              107,
              115,
              90,
              64,
              58,
              4,
              108,
              105,
              110,
              107,
              34,
              56,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              117,
              99,
              107,
              101,
              116,
              115,
              47,
              42,
              125,
              47,
              108,
              105,
              110,
              107,
              115,
              90,
              58,
              58,
              4,
              108,
              105,
              110,
              107,
              34,
              50,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              117,
              99,
              107,
              101,
              116,
              115,
              47,
              42,
              125,
              47,
              108,
              105,
              110,
              107,
              115,
              90,
              66,
              58,
              4,
              108,
              105,
              110,
              107,
              34,
              58,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              98,
              105,
              108,
              108,
              105,
              110,
              103,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              117,
              99,
              107,
              101,
              116,
              115,
              47,
              42,
              125,
              47,
              108,
              105,
              110,
              107,
              115,
              34,
              44,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              42,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              117,
              99,
              107,
              101,
              116,
              115,
              47,
              42,
              125,
              47,
              108,
              105,
              110,
              107,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Deletes a link. This will also delete the corresponding BigQuery linked
     * dataset.
     */
    deleteLink: {
      name: "DeleteLink",
      requestType: DeleteLinkRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              37,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              12,
              76,
              105,
              110,
              107,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              149,
              2,
              90,
              53,
              42,
              51,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              117,
              99,
              107,
              101,
              116,
              115,
              47,
              42,
              47,
              108,
              105,
              110,
              107,
              115,
              47,
              42,
              125,
              90,
              58,
              42,
              56,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              117,
              99,
              107,
              101,
              116,
              115,
              47,
              42,
              47,
              108,
              105,
              110,
              107,
              115,
              47,
              42,
              125,
              90,
              52,
              42,
              50,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              117,
              99,
              107,
              101,
              116,
              115,
              47,
              42,
              47,
              108,
              105,
              110,
              107,
              115,
              47,
              42,
              125,
              90,
              60,
              42,
              58,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              98,
              105,
              108,
              108,
              105,
              110,
              103,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              117,
              99,
              107,
              101,
              116,
              115,
              47,
              42,
              47,
              108,
              105,
              110,
              107,
              115,
              47,
              42,
              125,
              42,
              44,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              42,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              117,
              99,
              107,
              101,
              116,
              115,
              47,
              42,
              47,
              108,
              105,
              110,
              107,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists links. */
    listLinks: {
      name: "ListLinks",
      requestType: ListLinksRequest,
      requestStream: false,
      responseType: ListLinksResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              149,
              2,
              90,
              53,
              18,
              51,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              117,
              99,
              107,
              101,
              116,
              115,
              47,
              42,
              125,
              47,
              108,
              105,
              110,
              107,
              115,
              90,
              58,
              18,
              56,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              117,
              99,
              107,
              101,
              116,
              115,
              47,
              42,
              125,
              47,
              108,
              105,
              110,
              107,
              115,
              90,
              52,
              18,
              50,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              117,
              99,
              107,
              101,
              116,
              115,
              47,
              42,
              125,
              47,
              108,
              105,
              110,
              107,
              115,
              90,
              60,
              18,
              58,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              98,
              105,
              108,
              108,
              105,
              110,
              103,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              117,
              99,
              107,
              101,
              116,
              115,
              47,
              42,
              125,
              47,
              108,
              105,
              110,
              107,
              115,
              18,
              44,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              42,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              117,
              99,
              107,
              101,
              116,
              115,
              47,
              42,
              125,
              47,
              108,
              105,
              110,
              107,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets a link. */
    getLink: {
      name: "GetLink",
      requestType: GetLinkRequest,
      requestStream: false,
      responseType: Link,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              149,
              2,
              90,
              53,
              18,
              51,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              117,
              99,
              107,
              101,
              116,
              115,
              47,
              42,
              47,
              108,
              105,
              110,
              107,
              115,
              47,
              42,
              125,
              90,
              58,
              18,
              56,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              117,
              99,
              107,
              101,
              116,
              115,
              47,
              42,
              47,
              108,
              105,
              110,
              107,
              115,
              47,
              42,
              125,
              90,
              52,
              18,
              50,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              117,
              99,
              107,
              101,
              116,
              115,
              47,
              42,
              47,
              108,
              105,
              110,
              107,
              115,
              47,
              42,
              125,
              90,
              60,
              18,
              58,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              98,
              105,
              108,
              108,
              105,
              110,
              103,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              117,
              99,
              107,
              101,
              116,
              115,
              47,
              42,
              47,
              108,
              105,
              110,
              107,
              115,
              47,
              42,
              125,
              18,
              44,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              42,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              117,
              99,
              107,
              101,
              116,
              115,
              47,
              42,
              47,
              108,
              105,
              110,
              107,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists all the exclusions on the _Default sink in a parent resource. */
    listExclusions: {
      name: "ListExclusions",
      requestType: ListExclusionsRequest,
      requestStream: false,
      responseType: ListExclusionsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              192,
              1,
              90,
              36,
              18,
              34,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              47,
              101,
              120,
              99,
              108,
              117,
              115,
              105,
              111,
              110,
              115,
              90,
              41,
              18,
              39,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              101,
              120,
              99,
              108,
              117,
              115,
              105,
              111,
              110,
              115,
              90,
              35,
              18,
              33,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              125,
              47,
              101,
              120,
              99,
              108,
              117,
              115,
              105,
              111,
              110,
              115,
              90,
              43,
              18,
              41,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              98,
              105,
              108,
              108,
              105,
              110,
              103,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              125,
              47,
              101,
              120,
              99,
              108,
              117,
              115,
              105,
              111,
              110,
              115,
              18,
              27,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              42,
              47,
              42,
              125,
              47,
              101,
              120,
              99,
              108,
              117,
              115,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets the description of an exclusion in the _Default sink. */
    getExclusion: {
      name: "GetExclusion",
      requestType: GetExclusionRequest,
      requestStream: false,
      responseType: LogExclusion,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              192,
              1,
              90,
              36,
              18,
              34,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              101,
              120,
              99,
              108,
              117,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              90,
              41,
              18,
              39,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              120,
              99,
              108,
              117,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              90,
              35,
              18,
              33,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              101,
              120,
              99,
              108,
              117,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              90,
              43,
              18,
              41,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              98,
              105,
              108,
              108,
              105,
              110,
              103,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              47,
              101,
              120,
              99,
              108,
              117,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              18,
              27,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              42,
              47,
              42,
              47,
              101,
              120,
              99,
              108,
              117,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Creates a new exclusion in the _Default sink in a specified parent
     * resource. Only log entries belonging to that resource can be excluded. You
     * can have up to 10 exclusions in a resource.
     */
    createExclusion: {
      name: "CreateExclusion",
      requestType: CreateExclusionRequest,
      requestStream: false,
      responseType: LogExclusion,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([16, 112, 97, 114, 101, 110, 116, 44, 101, 120, 99, 108, 117, 115, 105, 111, 110])],
          578365826: [
            Buffer.from([
              247,
              1,
              58,
              9,
              101,
              120,
              99,
              108,
              117,
              115,
              105,
              111,
              110,
              90,
              47,
              58,
              9,
              101,
              120,
              99,
              108,
              117,
              115,
              105,
              111,
              110,
              34,
              34,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              47,
              101,
              120,
              99,
              108,
              117,
              115,
              105,
              111,
              110,
              115,
              90,
              52,
              58,
              9,
              101,
              120,
              99,
              108,
              117,
              115,
              105,
              111,
              110,
              34,
              39,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              101,
              120,
              99,
              108,
              117,
              115,
              105,
              111,
              110,
              115,
              90,
              46,
              58,
              9,
              101,
              120,
              99,
              108,
              117,
              115,
              105,
              111,
              110,
              34,
              33,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              125,
              47,
              101,
              120,
              99,
              108,
              117,
              115,
              105,
              111,
              110,
              115,
              90,
              54,
              58,
              9,
              101,
              120,
              99,
              108,
              117,
              115,
              105,
              111,
              110,
              34,
              41,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              98,
              105,
              108,
              108,
              105,
              110,
              103,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              125,
              47,
              101,
              120,
              99,
              108,
              117,
              115,
              105,
              111,
              110,
              115,
              34,
              27,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              42,
              47,
              42,
              125,
              47,
              101,
              120,
              99,
              108,
              117,
              115,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Changes one or more properties of an existing exclusion in the _Default
     * sink.
     */
    updateExclusion: {
      name: "UpdateExclusion",
      requestType: UpdateExclusionRequest,
      requestStream: false,
      responseType: LogExclusion,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              26,
              110,
              97,
              109,
              101,
              44,
              101,
              120,
              99,
              108,
              117,
              115,
              105,
              111,
              110,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              247,
              1,
              58,
              9,
              101,
              120,
              99,
              108,
              117,
              115,
              105,
              111,
              110,
              90,
              47,
              58,
              9,
              101,
              120,
              99,
              108,
              117,
              115,
              105,
              111,
              110,
              50,
              34,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              101,
              120,
              99,
              108,
              117,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              90,
              52,
              58,
              9,
              101,
              120,
              99,
              108,
              117,
              115,
              105,
              111,
              110,
              50,
              39,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              120,
              99,
              108,
              117,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              90,
              46,
              58,
              9,
              101,
              120,
              99,
              108,
              117,
              115,
              105,
              111,
              110,
              50,
              33,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              101,
              120,
              99,
              108,
              117,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              90,
              54,
              58,
              9,
              101,
              120,
              99,
              108,
              117,
              115,
              105,
              111,
              110,
              50,
              41,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              98,
              105,
              108,
              108,
              105,
              110,
              103,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              47,
              101,
              120,
              99,
              108,
              117,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              50,
              27,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              42,
              47,
              42,
              47,
              101,
              120,
              99,
              108,
              117,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes an exclusion in the _Default sink. */
    deleteExclusion: {
      name: "DeleteExclusion",
      requestType: DeleteExclusionRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              192,
              1,
              90,
              36,
              42,
              34,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              101,
              120,
              99,
              108,
              117,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              90,
              41,
              42,
              39,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              120,
              99,
              108,
              117,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              90,
              35,
              42,
              33,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              101,
              120,
              99,
              108,
              117,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              90,
              43,
              42,
              41,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              98,
              105,
              108,
              108,
              105,
              110,
              103,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              47,
              101,
              120,
              99,
              108,
              117,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              42,
              27,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              42,
              47,
              42,
              47,
              101,
              120,
              99,
              108,
              117,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Gets the Logging CMEK settings for the given resource.
     *
     * Note: CMEK for the Log Router can be configured for Google Cloud projects,
     * folders, organizations and billing accounts. Once configured for an
     * organization, it applies to all projects and folders in the Google Cloud
     * organization.
     *
     * See [Enabling CMEK for Log
     * Router](https://cloud.google.com/logging/docs/routing/managed-encryption)
     * for more information.
     */
    getCmekSettings: {
      name: "GetCmekSettings",
      requestType: GetCmekSettingsRequest,
      requestStream: false,
      responseType: CmekSettings,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              192,
              1,
              90,
              36,
              18,
              34,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              47,
              99,
              109,
              101,
              107,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              90,
              41,
              18,
              39,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              99,
              109,
              101,
              107,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              90,
              35,
              18,
              33,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              125,
              47,
              99,
              109,
              101,
              107,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              90,
              43,
              18,
              41,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              98,
              105,
              108,
              108,
              105,
              110,
              103,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              125,
              47,
              99,
              109,
              101,
              107,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              18,
              27,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              42,
              47,
              42,
              125,
              47,
              99,
              109,
              101,
              107,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Updates the Log Router CMEK settings for the given resource.
     *
     * Note: CMEK for the Log Router can currently only be configured for Google
     * Cloud organizations. Once configured, it applies to all projects and
     * folders in the Google Cloud organization.
     *
     * [UpdateCmekSettings][google.logging.v2.ConfigServiceV2.UpdateCmekSettings]
     * will fail if 1) `kms_key_name` is invalid, or 2) the associated service
     * account does not have the required
     * `roles/cloudkms.cryptoKeyEncrypterDecrypter` role assigned for the key, or
     * 3) access to the key is disabled.
     *
     * See [Enabling CMEK for Log
     * Router](https://cloud.google.com/logging/docs/routing/managed-encryption)
     * for more information.
     */
    updateCmekSettings: {
      name: "UpdateCmekSettings",
      requestType: UpdateCmekSettingsRequest,
      requestStream: false,
      responseType: CmekSettings,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              102,
              58,
              13,
              99,
              109,
              101,
              107,
              95,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              90,
              56,
              58,
              13,
              99,
              109,
              101,
              107,
              95,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              50,
              39,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              99,
              109,
              101,
              107,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              50,
              27,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              42,
              47,
              42,
              125,
              47,
              99,
              109,
              101,
              107,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Gets the Log Router settings for the given resource.
     *
     * Note: Settings for the Log Router can be get for Google Cloud projects,
     * folders, organizations and billing accounts. Currently it can only be
     * configured for organizations. Once configured for an organization, it
     * applies to all projects and folders in the Google Cloud organization.
     *
     * See [Enabling CMEK for Log
     * Router](https://cloud.google.com/logging/docs/routing/managed-encryption)
     * for more information.
     */
    getSettings: {
      name: "GetSettings",
      requestType: GetSettingsRequest,
      requestStream: false,
      responseType: Settings,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              172,
              1,
              90,
              32,
              18,
              30,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              90,
              37,
              18,
              35,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              90,
              31,
              18,
              29,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              125,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              90,
              39,
              18,
              37,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              98,
              105,
              108,
              108,
              105,
              110,
              103,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              125,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              18,
              23,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              42,
              47,
              42,
              125,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Updates the Log Router settings for the given resource.
     *
     * Note: Settings for the Log Router can currently only be configured for
     * Google Cloud organizations. Once configured, it applies to all projects and
     * folders in the Google Cloud organization.
     *
     * [UpdateSettings][google.logging.v2.ConfigServiceV2.UpdateSettings]
     * will fail if 1) `kms_key_name` is invalid, or 2) the associated service
     * account does not have the required
     * `roles/cloudkms.cryptoKeyEncrypterDecrypter` role assigned for the key, or
     * 3) access to the key is disabled. 4) `location_id` is not supported by
     * Logging. 5) `location_id` violate OrgPolicy.
     *
     * See [Enabling CMEK for Log
     * Router](https://cloud.google.com/logging/docs/routing/managed-encryption)
     * for more information.
     */
    updateSettings: {
      name: "UpdateSettings",
      requestType: UpdateSettingsRequest,
      requestStream: false,
      responseType: Settings,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              20,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              127,
              58,
              8,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              90,
              47,
              58,
              8,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              50,
              35,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              90,
              41,
              58,
              8,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              50,
              29,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              125,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              50,
              23,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              42,
              47,
              42,
              125,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
            ]),
          ],
        },
      },
    },
    /** Copies a set of log entries from a log bucket to a Cloud Storage bucket. */
    copyLogEntries: {
      name: "CopyLogEntries",
      requestType: CopyLogEntriesRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              48,
              10,
              22,
              67,
              111,
              112,
              121,
              76,
              111,
              103,
              69,
              110,
              116,
              114,
              105,
              101,
              115,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              18,
              22,
              67,
              111,
              112,
              121,
              76,
              111,
              103,
              69,
              110,
              116,
              114,
              105,
              101,
              115,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          578365826: [
            Buffer.from([
              21,
              58,
              1,
              42,
              34,
              16,
              47,
              118,
              50,
              47,
              101,
              110,
              116,
              114,
              105,
              101,
              115,
              58,
              99,
              111,
              112,
              121,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface ConfigServiceV2ServiceImplementation<CallContextExt = {}> {
  /** Lists log buckets. */
  listBuckets(
    request: ListBucketsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListBucketsResponse>>;
  /** Gets a log bucket. */
  getBucket(request: GetBucketRequest, context: CallContext & CallContextExt): Promise<DeepPartial<LogBucket>>;
  /**
   * Creates a log bucket asynchronously that can be used to store log entries.
   *
   * After a bucket has been created, the bucket's location cannot be changed.
   */
  createBucketAsync(
    request: CreateBucketRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Updates a log bucket asynchronously.
   *
   * If the bucket has a `lifecycle_state` of `DELETE_REQUESTED`, then
   * `FAILED_PRECONDITION` will be returned.
   *
   * After a bucket has been created, the bucket's location cannot be changed.
   */
  updateBucketAsync(
    request: UpdateBucketRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Creates a log bucket that can be used to store log entries. After a bucket
   * has been created, the bucket's location cannot be changed.
   */
  createBucket(request: CreateBucketRequest, context: CallContext & CallContextExt): Promise<DeepPartial<LogBucket>>;
  /**
   * Updates a log bucket.
   *
   * If the bucket has a `lifecycle_state` of `DELETE_REQUESTED`, then
   * `FAILED_PRECONDITION` will be returned.
   *
   * After a bucket has been created, the bucket's location cannot be changed.
   */
  updateBucket(request: UpdateBucketRequest, context: CallContext & CallContextExt): Promise<DeepPartial<LogBucket>>;
  /**
   * Deletes a log bucket.
   *
   * Changes the bucket's `lifecycle_state` to the `DELETE_REQUESTED` state.
   * After 7 days, the bucket will be purged and all log entries in the bucket
   * will be permanently deleted.
   */
  deleteBucket(request: DeleteBucketRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
  /**
   * Undeletes a log bucket. A bucket that has been deleted can be undeleted
   * within the grace period of 7 days.
   */
  undeleteBucket(request: UndeleteBucketRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
  /** Lists views on a log bucket. */
  listViews(request: ListViewsRequest, context: CallContext & CallContextExt): Promise<DeepPartial<ListViewsResponse>>;
  /** Gets a view on a log bucket.. */
  getView(request: GetViewRequest, context: CallContext & CallContextExt): Promise<DeepPartial<LogView>>;
  /**
   * Creates a view over log entries in a log bucket. A bucket may contain a
   * maximum of 30 views.
   */
  createView(request: CreateViewRequest, context: CallContext & CallContextExt): Promise<DeepPartial<LogView>>;
  /**
   * Updates a view on a log bucket. This method replaces the following fields
   * in the existing view with values from the new view: `filter`.
   * If an `UNAVAILABLE` error is returned, this indicates that system is not in
   * a state where it can update the view. If this occurs, please try again in a
   * few minutes.
   */
  updateView(request: UpdateViewRequest, context: CallContext & CallContextExt): Promise<DeepPartial<LogView>>;
  /**
   * Deletes a view on a log bucket.
   * If an `UNAVAILABLE` error is returned, this indicates that system is not in
   * a state where it can delete the view. If this occurs, please try again in a
   * few minutes.
   */
  deleteView(request: DeleteViewRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
  /** Lists sinks. */
  listSinks(request: ListSinksRequest, context: CallContext & CallContextExt): Promise<DeepPartial<ListSinksResponse>>;
  /** Gets a sink. */
  getSink(request: GetSinkRequest, context: CallContext & CallContextExt): Promise<DeepPartial<LogSink>>;
  /**
   * Creates a sink that exports specified log entries to a destination. The
   * export of newly-ingested log entries begins immediately, unless the sink's
   * `writer_identity` is not permitted to write to the destination. A sink can
   * export log entries only from the resource owning the sink.
   */
  createSink(request: CreateSinkRequest, context: CallContext & CallContextExt): Promise<DeepPartial<LogSink>>;
  /**
   * Updates a sink. This method replaces the following fields in the existing
   * sink with values from the new sink: `destination`, and `filter`.
   *
   * The updated sink might also have a new `writer_identity`; see the
   * `unique_writer_identity` field.
   */
  updateSink(request: UpdateSinkRequest, context: CallContext & CallContextExt): Promise<DeepPartial<LogSink>>;
  /**
   * Deletes a sink. If the sink has a unique `writer_identity`, then that
   * service account is also deleted.
   */
  deleteSink(request: DeleteSinkRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
  /**
   * Asynchronously creates a linked dataset in BigQuery which makes it possible
   * to use BigQuery to read the logs stored in the log bucket. A log bucket may
   * currently only contain one link.
   */
  createLink(request: CreateLinkRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /**
   * Deletes a link. This will also delete the corresponding BigQuery linked
   * dataset.
   */
  deleteLink(request: DeleteLinkRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /** Lists links. */
  listLinks(request: ListLinksRequest, context: CallContext & CallContextExt): Promise<DeepPartial<ListLinksResponse>>;
  /** Gets a link. */
  getLink(request: GetLinkRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Link>>;
  /** Lists all the exclusions on the _Default sink in a parent resource. */
  listExclusions(
    request: ListExclusionsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListExclusionsResponse>>;
  /** Gets the description of an exclusion in the _Default sink. */
  getExclusion(request: GetExclusionRequest, context: CallContext & CallContextExt): Promise<DeepPartial<LogExclusion>>;
  /**
   * Creates a new exclusion in the _Default sink in a specified parent
   * resource. Only log entries belonging to that resource can be excluded. You
   * can have up to 10 exclusions in a resource.
   */
  createExclusion(
    request: CreateExclusionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<LogExclusion>>;
  /**
   * Changes one or more properties of an existing exclusion in the _Default
   * sink.
   */
  updateExclusion(
    request: UpdateExclusionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<LogExclusion>>;
  /** Deletes an exclusion in the _Default sink. */
  deleteExclusion(request: DeleteExclusionRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
  /**
   * Gets the Logging CMEK settings for the given resource.
   *
   * Note: CMEK for the Log Router can be configured for Google Cloud projects,
   * folders, organizations and billing accounts. Once configured for an
   * organization, it applies to all projects and folders in the Google Cloud
   * organization.
   *
   * See [Enabling CMEK for Log
   * Router](https://cloud.google.com/logging/docs/routing/managed-encryption)
   * for more information.
   */
  getCmekSettings(
    request: GetCmekSettingsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<CmekSettings>>;
  /**
   * Updates the Log Router CMEK settings for the given resource.
   *
   * Note: CMEK for the Log Router can currently only be configured for Google
   * Cloud organizations. Once configured, it applies to all projects and
   * folders in the Google Cloud organization.
   *
   * [UpdateCmekSettings][google.logging.v2.ConfigServiceV2.UpdateCmekSettings]
   * will fail if 1) `kms_key_name` is invalid, or 2) the associated service
   * account does not have the required
   * `roles/cloudkms.cryptoKeyEncrypterDecrypter` role assigned for the key, or
   * 3) access to the key is disabled.
   *
   * See [Enabling CMEK for Log
   * Router](https://cloud.google.com/logging/docs/routing/managed-encryption)
   * for more information.
   */
  updateCmekSettings(
    request: UpdateCmekSettingsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<CmekSettings>>;
  /**
   * Gets the Log Router settings for the given resource.
   *
   * Note: Settings for the Log Router can be get for Google Cloud projects,
   * folders, organizations and billing accounts. Currently it can only be
   * configured for organizations. Once configured for an organization, it
   * applies to all projects and folders in the Google Cloud organization.
   *
   * See [Enabling CMEK for Log
   * Router](https://cloud.google.com/logging/docs/routing/managed-encryption)
   * for more information.
   */
  getSettings(request: GetSettingsRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Settings>>;
  /**
   * Updates the Log Router settings for the given resource.
   *
   * Note: Settings for the Log Router can currently only be configured for
   * Google Cloud organizations. Once configured, it applies to all projects and
   * folders in the Google Cloud organization.
   *
   * [UpdateSettings][google.logging.v2.ConfigServiceV2.UpdateSettings]
   * will fail if 1) `kms_key_name` is invalid, or 2) the associated service
   * account does not have the required
   * `roles/cloudkms.cryptoKeyEncrypterDecrypter` role assigned for the key, or
   * 3) access to the key is disabled. 4) `location_id` is not supported by
   * Logging. 5) `location_id` violate OrgPolicy.
   *
   * See [Enabling CMEK for Log
   * Router](https://cloud.google.com/logging/docs/routing/managed-encryption)
   * for more information.
   */
  updateSettings(request: UpdateSettingsRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Settings>>;
  /** Copies a set of log entries from a log bucket to a Cloud Storage bucket. */
  copyLogEntries(
    request: CopyLogEntriesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
}

export interface ConfigServiceV2Client<CallOptionsExt = {}> {
  /** Lists log buckets. */
  listBuckets(
    request: DeepPartial<ListBucketsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListBucketsResponse>;
  /** Gets a log bucket. */
  getBucket(request: DeepPartial<GetBucketRequest>, options?: CallOptions & CallOptionsExt): Promise<LogBucket>;
  /**
   * Creates a log bucket asynchronously that can be used to store log entries.
   *
   * After a bucket has been created, the bucket's location cannot be changed.
   */
  createBucketAsync(
    request: DeepPartial<CreateBucketRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Updates a log bucket asynchronously.
   *
   * If the bucket has a `lifecycle_state` of `DELETE_REQUESTED`, then
   * `FAILED_PRECONDITION` will be returned.
   *
   * After a bucket has been created, the bucket's location cannot be changed.
   */
  updateBucketAsync(
    request: DeepPartial<UpdateBucketRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Creates a log bucket that can be used to store log entries. After a bucket
   * has been created, the bucket's location cannot be changed.
   */
  createBucket(request: DeepPartial<CreateBucketRequest>, options?: CallOptions & CallOptionsExt): Promise<LogBucket>;
  /**
   * Updates a log bucket.
   *
   * If the bucket has a `lifecycle_state` of `DELETE_REQUESTED`, then
   * `FAILED_PRECONDITION` will be returned.
   *
   * After a bucket has been created, the bucket's location cannot be changed.
   */
  updateBucket(request: DeepPartial<UpdateBucketRequest>, options?: CallOptions & CallOptionsExt): Promise<LogBucket>;
  /**
   * Deletes a log bucket.
   *
   * Changes the bucket's `lifecycle_state` to the `DELETE_REQUESTED` state.
   * After 7 days, the bucket will be purged and all log entries in the bucket
   * will be permanently deleted.
   */
  deleteBucket(request: DeepPartial<DeleteBucketRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
  /**
   * Undeletes a log bucket. A bucket that has been deleted can be undeleted
   * within the grace period of 7 days.
   */
  undeleteBucket(request: DeepPartial<UndeleteBucketRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
  /** Lists views on a log bucket. */
  listViews(request: DeepPartial<ListViewsRequest>, options?: CallOptions & CallOptionsExt): Promise<ListViewsResponse>;
  /** Gets a view on a log bucket.. */
  getView(request: DeepPartial<GetViewRequest>, options?: CallOptions & CallOptionsExt): Promise<LogView>;
  /**
   * Creates a view over log entries in a log bucket. A bucket may contain a
   * maximum of 30 views.
   */
  createView(request: DeepPartial<CreateViewRequest>, options?: CallOptions & CallOptionsExt): Promise<LogView>;
  /**
   * Updates a view on a log bucket. This method replaces the following fields
   * in the existing view with values from the new view: `filter`.
   * If an `UNAVAILABLE` error is returned, this indicates that system is not in
   * a state where it can update the view. If this occurs, please try again in a
   * few minutes.
   */
  updateView(request: DeepPartial<UpdateViewRequest>, options?: CallOptions & CallOptionsExt): Promise<LogView>;
  /**
   * Deletes a view on a log bucket.
   * If an `UNAVAILABLE` error is returned, this indicates that system is not in
   * a state where it can delete the view. If this occurs, please try again in a
   * few minutes.
   */
  deleteView(request: DeepPartial<DeleteViewRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
  /** Lists sinks. */
  listSinks(request: DeepPartial<ListSinksRequest>, options?: CallOptions & CallOptionsExt): Promise<ListSinksResponse>;
  /** Gets a sink. */
  getSink(request: DeepPartial<GetSinkRequest>, options?: CallOptions & CallOptionsExt): Promise<LogSink>;
  /**
   * Creates a sink that exports specified log entries to a destination. The
   * export of newly-ingested log entries begins immediately, unless the sink's
   * `writer_identity` is not permitted to write to the destination. A sink can
   * export log entries only from the resource owning the sink.
   */
  createSink(request: DeepPartial<CreateSinkRequest>, options?: CallOptions & CallOptionsExt): Promise<LogSink>;
  /**
   * Updates a sink. This method replaces the following fields in the existing
   * sink with values from the new sink: `destination`, and `filter`.
   *
   * The updated sink might also have a new `writer_identity`; see the
   * `unique_writer_identity` field.
   */
  updateSink(request: DeepPartial<UpdateSinkRequest>, options?: CallOptions & CallOptionsExt): Promise<LogSink>;
  /**
   * Deletes a sink. If the sink has a unique `writer_identity`, then that
   * service account is also deleted.
   */
  deleteSink(request: DeepPartial<DeleteSinkRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
  /**
   * Asynchronously creates a linked dataset in BigQuery which makes it possible
   * to use BigQuery to read the logs stored in the log bucket. A log bucket may
   * currently only contain one link.
   */
  createLink(request: DeepPartial<CreateLinkRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /**
   * Deletes a link. This will also delete the corresponding BigQuery linked
   * dataset.
   */
  deleteLink(request: DeepPartial<DeleteLinkRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /** Lists links. */
  listLinks(request: DeepPartial<ListLinksRequest>, options?: CallOptions & CallOptionsExt): Promise<ListLinksResponse>;
  /** Gets a link. */
  getLink(request: DeepPartial<GetLinkRequest>, options?: CallOptions & CallOptionsExt): Promise<Link>;
  /** Lists all the exclusions on the _Default sink in a parent resource. */
  listExclusions(
    request: DeepPartial<ListExclusionsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListExclusionsResponse>;
  /** Gets the description of an exclusion in the _Default sink. */
  getExclusion(
    request: DeepPartial<GetExclusionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<LogExclusion>;
  /**
   * Creates a new exclusion in the _Default sink in a specified parent
   * resource. Only log entries belonging to that resource can be excluded. You
   * can have up to 10 exclusions in a resource.
   */
  createExclusion(
    request: DeepPartial<CreateExclusionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<LogExclusion>;
  /**
   * Changes one or more properties of an existing exclusion in the _Default
   * sink.
   */
  updateExclusion(
    request: DeepPartial<UpdateExclusionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<LogExclusion>;
  /** Deletes an exclusion in the _Default sink. */
  deleteExclusion(request: DeepPartial<DeleteExclusionRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
  /**
   * Gets the Logging CMEK settings for the given resource.
   *
   * Note: CMEK for the Log Router can be configured for Google Cloud projects,
   * folders, organizations and billing accounts. Once configured for an
   * organization, it applies to all projects and folders in the Google Cloud
   * organization.
   *
   * See [Enabling CMEK for Log
   * Router](https://cloud.google.com/logging/docs/routing/managed-encryption)
   * for more information.
   */
  getCmekSettings(
    request: DeepPartial<GetCmekSettingsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<CmekSettings>;
  /**
   * Updates the Log Router CMEK settings for the given resource.
   *
   * Note: CMEK for the Log Router can currently only be configured for Google
   * Cloud organizations. Once configured, it applies to all projects and
   * folders in the Google Cloud organization.
   *
   * [UpdateCmekSettings][google.logging.v2.ConfigServiceV2.UpdateCmekSettings]
   * will fail if 1) `kms_key_name` is invalid, or 2) the associated service
   * account does not have the required
   * `roles/cloudkms.cryptoKeyEncrypterDecrypter` role assigned for the key, or
   * 3) access to the key is disabled.
   *
   * See [Enabling CMEK for Log
   * Router](https://cloud.google.com/logging/docs/routing/managed-encryption)
   * for more information.
   */
  updateCmekSettings(
    request: DeepPartial<UpdateCmekSettingsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<CmekSettings>;
  /**
   * Gets the Log Router settings for the given resource.
   *
   * Note: Settings for the Log Router can be get for Google Cloud projects,
   * folders, organizations and billing accounts. Currently it can only be
   * configured for organizations. Once configured for an organization, it
   * applies to all projects and folders in the Google Cloud organization.
   *
   * See [Enabling CMEK for Log
   * Router](https://cloud.google.com/logging/docs/routing/managed-encryption)
   * for more information.
   */
  getSettings(request: DeepPartial<GetSettingsRequest>, options?: CallOptions & CallOptionsExt): Promise<Settings>;
  /**
   * Updates the Log Router settings for the given resource.
   *
   * Note: Settings for the Log Router can currently only be configured for
   * Google Cloud organizations. Once configured, it applies to all projects and
   * folders in the Google Cloud organization.
   *
   * [UpdateSettings][google.logging.v2.ConfigServiceV2.UpdateSettings]
   * will fail if 1) `kms_key_name` is invalid, or 2) the associated service
   * account does not have the required
   * `roles/cloudkms.cryptoKeyEncrypterDecrypter` role assigned for the key, or
   * 3) access to the key is disabled. 4) `location_id` is not supported by
   * Logging. 5) `location_id` violate OrgPolicy.
   *
   * See [Enabling CMEK for Log
   * Router](https://cloud.google.com/logging/docs/routing/managed-encryption)
   * for more information.
   */
  updateSettings(
    request: DeepPartial<UpdateSettingsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Settings>;
  /** Copies a set of log entries from a log bucket to a Cloud Storage bucket. */
  copyLogEntries(
    request: DeepPartial<CopyLogEntriesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
