// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/devtools/cloudtrace/v2/tracing.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Empty } from "../../../protobuf/empty.js";
import { Span } from "./trace.js";

export const protobufPackage = "google.devtools.cloudtrace.v2";

/** The request message for the `BatchWriteSpans` method. */
export interface BatchWriteSpansRequest {
  /**
   * Required. The name of the project where the spans belong. The format is
   * `projects/[PROJECT_ID]`.
   */
  name: string;
  /**
   * Required. A list of new spans. The span names must not match existing
   * spans, otherwise the results are undefined.
   */
  spans: Span[];
}

function createBaseBatchWriteSpansRequest(): BatchWriteSpansRequest {
  return { name: "", spans: [] };
}

export const BatchWriteSpansRequest: MessageFns<BatchWriteSpansRequest> = {
  encode(message: BatchWriteSpansRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    for (const v of message.spans) {
      Span.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BatchWriteSpansRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBatchWriteSpansRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.spans.push(Span.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BatchWriteSpansRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      spans: globalThis.Array.isArray(object?.spans) ? object.spans.map((e: any) => Span.fromJSON(e)) : [],
    };
  },

  toJSON(message: BatchWriteSpansRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.spans?.length) {
      obj.spans = message.spans.map((e) => Span.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<BatchWriteSpansRequest>): BatchWriteSpansRequest {
    return BatchWriteSpansRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BatchWriteSpansRequest>): BatchWriteSpansRequest {
    const message = createBaseBatchWriteSpansRequest();
    message.name = object.name ?? "";
    message.spans = object.spans?.map((e) => Span.fromPartial(e)) || [];
    return message;
  },
};

/**
 * Service for collecting and viewing traces and spans within a trace.
 *
 * A trace is a collection of spans corresponding to a single
 * operation or a set of operations in an application.
 *
 * A span is an individual timed event which forms a node of the trace tree.
 * A single trace can contain spans from multiple services.
 */
export type TraceServiceDefinition = typeof TraceServiceDefinition;
export const TraceServiceDefinition = {
  name: "TraceService",
  fullName: "google.devtools.cloudtrace.v2.TraceService",
  methods: {
    /**
     * Batch writes new spans to new or existing traces. You cannot update
     * existing spans.
     */
    batchWriteSpans: {
      name: "BatchWriteSpans",
      requestType: BatchWriteSpansRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([10, 110, 97, 109, 101, 44, 115, 112, 97, 110, 115])],
          578365826: [
            Buffer.from([
              44,
              58,
              1,
              42,
              34,
              39,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              47,
              116,
              114,
              97,
              99,
              101,
              115,
              58,
              98,
              97,
              116,
              99,
              104,
              87,
              114,
              105,
              116,
              101,
            ]),
          ],
        },
      },
    },
    /** Creates a new span. */
    createSpan: {
      name: "CreateSpan",
      requestType: Span,
      requestStream: false,
      responseType: Span,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              43,
              58,
              1,
              42,
              34,
              38,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              116,
              114,
              97,
              99,
              101,
              115,
              47,
              42,
              47,
              115,
              112,
              97,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface TraceServiceImplementation<CallContextExt = {}> {
  /**
   * Batch writes new spans to new or existing traces. You cannot update
   * existing spans.
   */
  batchWriteSpans(request: BatchWriteSpansRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
  /** Creates a new span. */
  createSpan(request: Span, context: CallContext & CallContextExt): Promise<DeepPartial<Span>>;
}

export interface TraceServiceClient<CallOptionsExt = {}> {
  /**
   * Batch writes new spans to new or existing traces. You cannot update
   * existing spans.
   */
  batchWriteSpans(request: DeepPartial<BatchWriteSpansRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
  /** Creates a new span. */
  createSpan(request: DeepPartial<Span>, options?: CallOptions & CallOptionsExt): Promise<Span>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
