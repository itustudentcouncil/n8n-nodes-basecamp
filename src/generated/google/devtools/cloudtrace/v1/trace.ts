// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/devtools/cloudtrace/v1/trace.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Empty } from "../../../protobuf/empty.js";
import { Timestamp } from "../../../protobuf/timestamp.js";

export const protobufPackage = "google.devtools.cloudtrace.v1";

/**
 * A trace describes how long it takes for an application to perform an
 * operation. It consists of a set of spans, each of which represent a single
 * timed event within the operation.
 */
export interface Trace {
  /** Project ID of the Cloud project where the trace data is stored. */
  projectId: string;
  /**
   * Globally unique identifier for the trace. This identifier is a 128-bit
   * numeric value formatted as a 32-byte hex string. For example,
   * `382d4f4c6b7bb2f4a972559d9085001d`.
   */
  traceId: string;
  /** Collection of spans in the trace. */
  spans: TraceSpan[];
}

/** List of new or updated traces. */
export interface Traces {
  /** List of traces. */
  traces: Trace[];
}

/**
 * A span represents a single timed event within a trace. Spans can be nested
 * and form a trace tree. Often, a trace contains a root span that describes the
 * end-to-end latency of an operation and, optionally, one or more subspans for
 * its suboperations. Spans do not need to be contiguous. There may be gaps
 * between spans in a trace.
 */
export interface TraceSpan {
  /**
   * Identifier for the span. Must be a 64-bit integer other than 0 and
   * unique within a trace. For example, `2205310701640571284`.
   */
  spanId: Long;
  /**
   * Distinguishes between spans generated in a particular context. For example,
   * two spans with the same name may be distinguished using `RPC_CLIENT`
   * and `RPC_SERVER` to identify queueing latency associated with the span.
   */
  kind: TraceSpan_SpanKind;
  /**
   * Name of the span. Must be less than 128 bytes. The span name is sanitized
   * and displayed in the Stackdriver Trace tool in the
   * Google Cloud Platform Console.
   * The name may be a method name or some other per-call site name.
   * For the same executable and the same call point, a best practice is
   * to use a consistent name, which makes it easier to correlate
   * cross-trace spans.
   */
  name: string;
  /** Start time of the span in nanoseconds from the UNIX epoch. */
  startTime:
    | Date
    | undefined;
  /** End time of the span in nanoseconds from the UNIX epoch. */
  endTime:
    | Date
    | undefined;
  /** Optional. ID of the parent span, if any. */
  parentSpanId: Long;
  /**
   * Collection of labels associated with the span. Label keys must be less than
   * 128 bytes. Label values must be less than 16 kilobytes (10MB for
   * `/stacktrace` values).
   *
   * Some predefined label keys exist, or you may create your own. When creating
   * your own, we recommend the following formats:
   *
   * * `/category/product/key` for agents of well-known products (e.g.
   *   `/db/mongodb/read_size`).
   * * `short_host/path/key` for domain-specific keys (e.g.
   *   `foo.com/myproduct/bar`)
   *
   * Predefined labels include:
   *
   * *   `/agent`
   * *   `/component`
   * *   `/error/message`
   * *   `/error/name`
   * *   `/http/client_city`
   * *   `/http/client_country`
   * *   `/http/client_protocol`
   * *   `/http/client_region`
   * *   `/http/host`
   * *   `/http/method`
   * *   `/http/path`
   * *   `/http/redirected_url`
   * *   `/http/request/size`
   * *   `/http/response/size`
   * *   `/http/route`
   * *   `/http/status_code`
   * *   `/http/url`
   * *   `/http/user_agent`
   * *   `/pid`
   * *   `/stacktrace`
   * *   `/tid`
   */
  labels: { [key: string]: string };
}

/**
 * Type of span. Can be used to specify additional relationships between spans
 * in addition to a parent/child relationship.
 */
export enum TraceSpan_SpanKind {
  /** SPAN_KIND_UNSPECIFIED - Unspecified. */
  SPAN_KIND_UNSPECIFIED = 0,
  /**
   * RPC_SERVER - Indicates that the span covers server-side handling of an RPC or other
   * remote network request.
   */
  RPC_SERVER = 1,
  /**
   * RPC_CLIENT - Indicates that the span covers the client-side wrapper around an RPC or
   * other remote request.
   */
  RPC_CLIENT = 2,
  UNRECOGNIZED = -1,
}

export function traceSpan_SpanKindFromJSON(object: any): TraceSpan_SpanKind {
  switch (object) {
    case 0:
    case "SPAN_KIND_UNSPECIFIED":
      return TraceSpan_SpanKind.SPAN_KIND_UNSPECIFIED;
    case 1:
    case "RPC_SERVER":
      return TraceSpan_SpanKind.RPC_SERVER;
    case 2:
    case "RPC_CLIENT":
      return TraceSpan_SpanKind.RPC_CLIENT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return TraceSpan_SpanKind.UNRECOGNIZED;
  }
}

export function traceSpan_SpanKindToJSON(object: TraceSpan_SpanKind): string {
  switch (object) {
    case TraceSpan_SpanKind.SPAN_KIND_UNSPECIFIED:
      return "SPAN_KIND_UNSPECIFIED";
    case TraceSpan_SpanKind.RPC_SERVER:
      return "RPC_SERVER";
    case TraceSpan_SpanKind.RPC_CLIENT:
      return "RPC_CLIENT";
    case TraceSpan_SpanKind.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface TraceSpan_LabelsEntry {
  key: string;
  value: string;
}

/**
 * The request message for the `ListTraces` method. All fields are required
 * unless specified.
 */
export interface ListTracesRequest {
  /** Required. ID of the Cloud project where the trace data is stored. */
  projectId: string;
  /**
   * Optional. Type of data returned for traces in the list. Default is
   * `MINIMAL`.
   */
  view: ListTracesRequest_ViewType;
  /**
   * Optional. Maximum number of traces to return. If not specified or <= 0, the
   * implementation selects a reasonable value.  The implementation may
   * return fewer traces than the requested page size.
   */
  pageSize: number;
  /**
   * Token identifying the page of results to return. If provided, use the
   * value of the `next_page_token` field from a previous request.
   */
  pageToken: string;
  /**
   * Start of the time interval (inclusive) during which the trace data was
   * collected from the application.
   */
  startTime:
    | Date
    | undefined;
  /**
   * End of the time interval (inclusive) during which the trace data was
   * collected from the application.
   */
  endTime:
    | Date
    | undefined;
  /**
   * Optional. A filter against labels for the request.
   *
   * By default, searches use prefix matching. To specify exact match, prepend
   * a plus symbol (`+`) to the search term.
   * Multiple terms are ANDed. Syntax:
   *
   * *   `root:NAME_PREFIX` or `NAME_PREFIX`: Return traces where any root
   *     span starts with `NAME_PREFIX`.
   * *   `+root:NAME` or `+NAME`: Return traces where any root span's name is
   *     exactly `NAME`.
   * *   `span:NAME_PREFIX`: Return traces where any span starts with
   *     `NAME_PREFIX`.
   * *   `+span:NAME`: Return traces where any span's name is exactly
   *     `NAME`.
   * *   `latency:DURATION`: Return traces whose overall latency is
   *     greater or equal to than `DURATION`. Accepted units are nanoseconds
   *     (`ns`), milliseconds (`ms`), and seconds (`s`). Default is `ms`. For
   *     example, `latency:24ms` returns traces whose overall latency
   *     is greater than or equal to 24 milliseconds.
   * *   `label:LABEL_KEY`: Return all traces containing the specified
   *     label key (exact match, case-sensitive) regardless of the key:value
   *     pair's value (including empty values).
   * *   `LABEL_KEY:VALUE_PREFIX`: Return all traces containing the specified
   *     label key (exact match, case-sensitive) whose value starts with
   *     `VALUE_PREFIX`. Both a key and a value must be specified.
   * *   `+LABEL_KEY:VALUE`: Return all traces containing a key:value pair
   *     exactly matching the specified text. Both a key and a value must be
   *     specified.
   * *   `method:VALUE`: Equivalent to `/http/method:VALUE`.
   * *   `url:VALUE`: Equivalent to `/http/url:VALUE`.
   */
  filter: string;
  /**
   * Optional. Field used to sort the returned traces.
   * Can be one of the following:
   *
   * *   `trace_id`
   * *   `name` (`name` field of root span in the trace)
   * *   `duration` (difference between `end_time` and `start_time` fields of
   *      the root span)
   * *   `start` (`start_time` field of the root span)
   *
   * Descending order can be specified by appending `desc` to the sort field
   * (for example, `name desc`).
   *
   * Only one sort field is permitted.
   */
  orderBy: string;
}

/** Type of data returned for traces in the list. */
export enum ListTracesRequest_ViewType {
  /** VIEW_TYPE_UNSPECIFIED - Default is `MINIMAL` if unspecified. */
  VIEW_TYPE_UNSPECIFIED = 0,
  /**
   * MINIMAL - Minimal view of the trace record that contains only the project
   * and trace IDs.
   */
  MINIMAL = 1,
  /**
   * ROOTSPAN - Root span view of the trace record that returns the root spans along
   * with the minimal trace data.
   */
  ROOTSPAN = 2,
  /**
   * COMPLETE - Complete view of the trace record that contains the actual trace data.
   * This is equivalent to calling the REST `get` or RPC `GetTrace` method
   * using the ID of each listed trace.
   */
  COMPLETE = 3,
  UNRECOGNIZED = -1,
}

export function listTracesRequest_ViewTypeFromJSON(object: any): ListTracesRequest_ViewType {
  switch (object) {
    case 0:
    case "VIEW_TYPE_UNSPECIFIED":
      return ListTracesRequest_ViewType.VIEW_TYPE_UNSPECIFIED;
    case 1:
    case "MINIMAL":
      return ListTracesRequest_ViewType.MINIMAL;
    case 2:
    case "ROOTSPAN":
      return ListTracesRequest_ViewType.ROOTSPAN;
    case 3:
    case "COMPLETE":
      return ListTracesRequest_ViewType.COMPLETE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ListTracesRequest_ViewType.UNRECOGNIZED;
  }
}

export function listTracesRequest_ViewTypeToJSON(object: ListTracesRequest_ViewType): string {
  switch (object) {
    case ListTracesRequest_ViewType.VIEW_TYPE_UNSPECIFIED:
      return "VIEW_TYPE_UNSPECIFIED";
    case ListTracesRequest_ViewType.MINIMAL:
      return "MINIMAL";
    case ListTracesRequest_ViewType.ROOTSPAN:
      return "ROOTSPAN";
    case ListTracesRequest_ViewType.COMPLETE:
      return "COMPLETE";
    case ListTracesRequest_ViewType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** The response message for the `ListTraces` method. */
export interface ListTracesResponse {
  /** List of trace records as specified by the view parameter. */
  traces: Trace[];
  /**
   * If defined, indicates that there are more traces that match the request
   * and that this value should be passed to the next request to continue
   * retrieving additional traces.
   */
  nextPageToken: string;
}

/** The request message for the `GetTrace` method. */
export interface GetTraceRequest {
  /** Required. ID of the Cloud project where the trace data is stored. */
  projectId: string;
  /** Required. ID of the trace to return. */
  traceId: string;
}

/** The request message for the `PatchTraces` method. */
export interface PatchTracesRequest {
  /** Required. ID of the Cloud project where the trace data is stored. */
  projectId: string;
  /** Required. The body of the message. */
  traces: Traces | undefined;
}

function createBaseTrace(): Trace {
  return { projectId: "", traceId: "", spans: [] };
}

export const Trace: MessageFns<Trace> = {
  encode(message: Trace, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.traceId !== "") {
      writer.uint32(18).string(message.traceId);
    }
    for (const v of message.spans) {
      TraceSpan.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Trace {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTrace();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.traceId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.spans.push(TraceSpan.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Trace {
    return {
      projectId: isSet(object.projectId) ? globalThis.String(object.projectId) : "",
      traceId: isSet(object.traceId) ? globalThis.String(object.traceId) : "",
      spans: globalThis.Array.isArray(object?.spans) ? object.spans.map((e: any) => TraceSpan.fromJSON(e)) : [],
    };
  },

  toJSON(message: Trace): unknown {
    const obj: any = {};
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.traceId !== "") {
      obj.traceId = message.traceId;
    }
    if (message.spans?.length) {
      obj.spans = message.spans.map((e) => TraceSpan.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<Trace>): Trace {
    return Trace.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Trace>): Trace {
    const message = createBaseTrace();
    message.projectId = object.projectId ?? "";
    message.traceId = object.traceId ?? "";
    message.spans = object.spans?.map((e) => TraceSpan.fromPartial(e)) || [];
    return message;
  },
};

function createBaseTraces(): Traces {
  return { traces: [] };
}

export const Traces: MessageFns<Traces> = {
  encode(message: Traces, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.traces) {
      Trace.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Traces {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTraces();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.traces.push(Trace.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Traces {
    return { traces: globalThis.Array.isArray(object?.traces) ? object.traces.map((e: any) => Trace.fromJSON(e)) : [] };
  },

  toJSON(message: Traces): unknown {
    const obj: any = {};
    if (message.traces?.length) {
      obj.traces = message.traces.map((e) => Trace.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<Traces>): Traces {
    return Traces.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Traces>): Traces {
    const message = createBaseTraces();
    message.traces = object.traces?.map((e) => Trace.fromPartial(e)) || [];
    return message;
  },
};

function createBaseTraceSpan(): TraceSpan {
  return {
    spanId: Long.UZERO,
    kind: 0,
    name: "",
    startTime: undefined,
    endTime: undefined,
    parentSpanId: Long.UZERO,
    labels: {},
  };
}

export const TraceSpan: MessageFns<TraceSpan> = {
  encode(message: TraceSpan, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.spanId.equals(Long.UZERO)) {
      writer.uint32(9).fixed64(message.spanId.toString());
    }
    if (message.kind !== 0) {
      writer.uint32(16).int32(message.kind);
    }
    if (message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    if (message.startTime !== undefined) {
      Timestamp.encode(toTimestamp(message.startTime), writer.uint32(34).fork()).join();
    }
    if (message.endTime !== undefined) {
      Timestamp.encode(toTimestamp(message.endTime), writer.uint32(42).fork()).join();
    }
    if (!message.parentSpanId.equals(Long.UZERO)) {
      writer.uint32(49).fixed64(message.parentSpanId.toString());
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      TraceSpan_LabelsEntry.encode({ key: key as any, value }, writer.uint32(58).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TraceSpan {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTraceSpan();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 9) {
            break;
          }

          message.spanId = Long.fromString(reader.fixed64().toString(), true);
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.kind = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.startTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.endTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 49) {
            break;
          }

          message.parentSpanId = Long.fromString(reader.fixed64().toString(), true);
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          const entry7 = TraceSpan_LabelsEntry.decode(reader, reader.uint32());
          if (entry7.value !== undefined) {
            message.labels[entry7.key] = entry7.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TraceSpan {
    return {
      spanId: isSet(object.spanId) ? Long.fromValue(object.spanId) : Long.UZERO,
      kind: isSet(object.kind) ? traceSpan_SpanKindFromJSON(object.kind) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      startTime: isSet(object.startTime) ? fromJsonTimestamp(object.startTime) : undefined,
      endTime: isSet(object.endTime) ? fromJsonTimestamp(object.endTime) : undefined,
      parentSpanId: isSet(object.parentSpanId) ? Long.fromValue(object.parentSpanId) : Long.UZERO,
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: TraceSpan): unknown {
    const obj: any = {};
    if (!message.spanId.equals(Long.UZERO)) {
      obj.spanId = (message.spanId || Long.UZERO).toString();
    }
    if (message.kind !== 0) {
      obj.kind = traceSpan_SpanKindToJSON(message.kind);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.startTime !== undefined) {
      obj.startTime = message.startTime.toISOString();
    }
    if (message.endTime !== undefined) {
      obj.endTime = message.endTime.toISOString();
    }
    if (!message.parentSpanId.equals(Long.UZERO)) {
      obj.parentSpanId = (message.parentSpanId || Long.UZERO).toString();
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    return obj;
  },

  create(base?: DeepPartial<TraceSpan>): TraceSpan {
    return TraceSpan.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TraceSpan>): TraceSpan {
    const message = createBaseTraceSpan();
    message.spanId = (object.spanId !== undefined && object.spanId !== null)
      ? Long.fromValue(object.spanId)
      : Long.UZERO;
    message.kind = object.kind ?? 0;
    message.name = object.name ?? "";
    message.startTime = object.startTime ?? undefined;
    message.endTime = object.endTime ?? undefined;
    message.parentSpanId = (object.parentSpanId !== undefined && object.parentSpanId !== null)
      ? Long.fromValue(object.parentSpanId)
      : Long.UZERO;
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseTraceSpan_LabelsEntry(): TraceSpan_LabelsEntry {
  return { key: "", value: "" };
}

export const TraceSpan_LabelsEntry: MessageFns<TraceSpan_LabelsEntry> = {
  encode(message: TraceSpan_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TraceSpan_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTraceSpan_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TraceSpan_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: TraceSpan_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<TraceSpan_LabelsEntry>): TraceSpan_LabelsEntry {
    return TraceSpan_LabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TraceSpan_LabelsEntry>): TraceSpan_LabelsEntry {
    const message = createBaseTraceSpan_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseListTracesRequest(): ListTracesRequest {
  return {
    projectId: "",
    view: 0,
    pageSize: 0,
    pageToken: "",
    startTime: undefined,
    endTime: undefined,
    filter: "",
    orderBy: "",
  };
}

export const ListTracesRequest: MessageFns<ListTracesRequest> = {
  encode(message: ListTracesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.view !== 0) {
      writer.uint32(16).int32(message.view);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(34).string(message.pageToken);
    }
    if (message.startTime !== undefined) {
      Timestamp.encode(toTimestamp(message.startTime), writer.uint32(42).fork()).join();
    }
    if (message.endTime !== undefined) {
      Timestamp.encode(toTimestamp(message.endTime), writer.uint32(50).fork()).join();
    }
    if (message.filter !== "") {
      writer.uint32(58).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(66).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListTracesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListTracesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.view = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.startTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.endTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListTracesRequest {
    return {
      projectId: isSet(object.projectId) ? globalThis.String(object.projectId) : "",
      view: isSet(object.view) ? listTracesRequest_ViewTypeFromJSON(object.view) : 0,
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      startTime: isSet(object.startTime) ? fromJsonTimestamp(object.startTime) : undefined,
      endTime: isSet(object.endTime) ? fromJsonTimestamp(object.endTime) : undefined,
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListTracesRequest): unknown {
    const obj: any = {};
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.view !== 0) {
      obj.view = listTracesRequest_ViewTypeToJSON(message.view);
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.startTime !== undefined) {
      obj.startTime = message.startTime.toISOString();
    }
    if (message.endTime !== undefined) {
      obj.endTime = message.endTime.toISOString();
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListTracesRequest>): ListTracesRequest {
    return ListTracesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListTracesRequest>): ListTracesRequest {
    const message = createBaseListTracesRequest();
    message.projectId = object.projectId ?? "";
    message.view = object.view ?? 0;
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.startTime = object.startTime ?? undefined;
    message.endTime = object.endTime ?? undefined;
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListTracesResponse(): ListTracesResponse {
  return { traces: [], nextPageToken: "" };
}

export const ListTracesResponse: MessageFns<ListTracesResponse> = {
  encode(message: ListTracesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.traces) {
      Trace.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListTracesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListTracesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.traces.push(Trace.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListTracesResponse {
    return {
      traces: globalThis.Array.isArray(object?.traces) ? object.traces.map((e: any) => Trace.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListTracesResponse): unknown {
    const obj: any = {};
    if (message.traces?.length) {
      obj.traces = message.traces.map((e) => Trace.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListTracesResponse>): ListTracesResponse {
    return ListTracesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListTracesResponse>): ListTracesResponse {
    const message = createBaseListTracesResponse();
    message.traces = object.traces?.map((e) => Trace.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetTraceRequest(): GetTraceRequest {
  return { projectId: "", traceId: "" };
}

export const GetTraceRequest: MessageFns<GetTraceRequest> = {
  encode(message: GetTraceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.traceId !== "") {
      writer.uint32(18).string(message.traceId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetTraceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetTraceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.traceId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetTraceRequest {
    return {
      projectId: isSet(object.projectId) ? globalThis.String(object.projectId) : "",
      traceId: isSet(object.traceId) ? globalThis.String(object.traceId) : "",
    };
  },

  toJSON(message: GetTraceRequest): unknown {
    const obj: any = {};
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.traceId !== "") {
      obj.traceId = message.traceId;
    }
    return obj;
  },

  create(base?: DeepPartial<GetTraceRequest>): GetTraceRequest {
    return GetTraceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetTraceRequest>): GetTraceRequest {
    const message = createBaseGetTraceRequest();
    message.projectId = object.projectId ?? "";
    message.traceId = object.traceId ?? "";
    return message;
  },
};

function createBasePatchTracesRequest(): PatchTracesRequest {
  return { projectId: "", traces: undefined };
}

export const PatchTracesRequest: MessageFns<PatchTracesRequest> = {
  encode(message: PatchTracesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.traces !== undefined) {
      Traces.encode(message.traces, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PatchTracesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePatchTracesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.traces = Traces.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PatchTracesRequest {
    return {
      projectId: isSet(object.projectId) ? globalThis.String(object.projectId) : "",
      traces: isSet(object.traces) ? Traces.fromJSON(object.traces) : undefined,
    };
  },

  toJSON(message: PatchTracesRequest): unknown {
    const obj: any = {};
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.traces !== undefined) {
      obj.traces = Traces.toJSON(message.traces);
    }
    return obj;
  },

  create(base?: DeepPartial<PatchTracesRequest>): PatchTracesRequest {
    return PatchTracesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PatchTracesRequest>): PatchTracesRequest {
    const message = createBasePatchTracesRequest();
    message.projectId = object.projectId ?? "";
    message.traces = (object.traces !== undefined && object.traces !== null)
      ? Traces.fromPartial(object.traces)
      : undefined;
    return message;
  },
};

/**
 * This file describes an API for collecting and viewing traces and spans
 * within a trace.  A Trace is a collection of spans corresponding to a single
 * operation or set of operations for an application. A span is an individual
 * timed event which forms a node of the trace tree. Spans for a single trace
 * may span multiple services.
 */
export type TraceServiceDefinition = typeof TraceServiceDefinition;
export const TraceServiceDefinition = {
  name: "TraceService",
  fullName: "google.devtools.cloudtrace.v1.TraceService",
  methods: {
    /** Returns of a list of traces that match the specified filter conditions. */
    listTraces: {
      name: "ListTraces",
      requestType: ListTracesRequest,
      requestStream: false,
      responseType: ListTracesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([10, 112, 114, 111, 106, 101, 99, 116, 95, 105, 100])],
          578365826: [
            Buffer.from([
              34,
              18,
              32,
              47,
              118,
              49,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              95,
              105,
              100,
              125,
              47,
              116,
              114,
              97,
              99,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets a single trace by its ID. */
    getTrace: {
      name: "GetTrace",
      requestType: GetTraceRequest,
      requestStream: false,
      responseType: Trace,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([19, 112, 114, 111, 106, 101, 99, 116, 95, 105, 100, 44, 116, 114, 97, 99, 101, 95, 105, 100]),
          ],
          578365826: [
            Buffer.from([
              45,
              18,
              43,
              47,
              118,
              49,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              95,
              105,
              100,
              125,
              47,
              116,
              114,
              97,
              99,
              101,
              115,
              47,
              123,
              116,
              114,
              97,
              99,
              101,
              95,
              105,
              100,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Sends new traces to Stackdriver Trace or updates existing traces. If the ID
     * of a trace that you send matches that of an existing trace, any fields
     * in the existing trace and its spans are overwritten by the provided values,
     * and any new fields provided are merged with the existing trace data. If the
     * ID does not match, a new trace is created.
     */
    patchTraces: {
      name: "PatchTraces",
      requestType: PatchTracesRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([17, 112, 114, 111, 106, 101, 99, 116, 95, 105, 100, 44, 116, 114, 97, 99, 101, 115])],
          578365826: [
            Buffer.from([
              42,
              58,
              6,
              116,
              114,
              97,
              99,
              101,
              115,
              50,
              32,
              47,
              118,
              49,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              95,
              105,
              100,
              125,
              47,
              116,
              114,
              97,
              99,
              101,
              115,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface TraceServiceImplementation<CallContextExt = {}> {
  /** Returns of a list of traces that match the specified filter conditions. */
  listTraces(
    request: ListTracesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListTracesResponse>>;
  /** Gets a single trace by its ID. */
  getTrace(request: GetTraceRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Trace>>;
  /**
   * Sends new traces to Stackdriver Trace or updates existing traces. If the ID
   * of a trace that you send matches that of an existing trace, any fields
   * in the existing trace and its spans are overwritten by the provided values,
   * and any new fields provided are merged with the existing trace data. If the
   * ID does not match, a new trace is created.
   */
  patchTraces(request: PatchTracesRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
}

export interface TraceServiceClient<CallOptionsExt = {}> {
  /** Returns of a list of traces that match the specified filter conditions. */
  listTraces(
    request: DeepPartial<ListTracesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListTracesResponse>;
  /** Gets a single trace by its ID. */
  getTrace(request: DeepPartial<GetTraceRequest>, options?: CallOptions & CallOptionsExt): Promise<Trace>;
  /**
   * Sends new traces to Stackdriver Trace or updates existing traces. If the ID
   * of a trace that you send matches that of an existing trace, any fields
   * in the existing trace and its spans are overwritten by the provided values,
   * and any new fields provided are merged with the existing trace data. If the
   * ID does not match, a new trace is created.
   */
  patchTraces(request: DeepPartial<PatchTracesRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
