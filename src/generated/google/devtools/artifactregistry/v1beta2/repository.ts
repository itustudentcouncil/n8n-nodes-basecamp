// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/devtools/artifactregistry/v1beta2/repository.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { Timestamp } from "../../../protobuf/timestamp.js";

export const protobufPackage = "google.devtools.artifactregistry.v1beta2";

/** A Repository for storing artifacts with a specific format. */
export interface Repository {
  /**
   * Maven repository config contains repository level configuration
   * for the repositories of maven type.
   */
  mavenConfig?:
    | Repository_MavenRepositoryConfig
    | undefined;
  /**
   * The name of the repository, for example:
   * "projects/p1/locations/us-central1/repositories/repo1".
   */
  name: string;
  /** The format of packages that are stored in the repository. */
  format: Repository_Format;
  /** The user-provided description of the repository. */
  description: string;
  /**
   * Labels with user-defined metadata.
   * This field may contain up to 64 entries. Label keys and values may be no
   * longer than 63 characters. Label keys must begin with a lowercase letter
   * and may only contain lowercase letters, numeric characters, underscores,
   * and dashes.
   */
  labels: { [key: string]: string };
  /** The time when the repository was created. */
  createTime:
    | Date
    | undefined;
  /** The time when the repository was last updated. */
  updateTime:
    | Date
    | undefined;
  /**
   * The Cloud KMS resource name of the customer managed encryption key thatâ€™s
   * used to encrypt the contents of the Repository. Has the form:
   * `projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key`.
   * This value may not be changed after the Repository has been created.
   */
  kmsKeyName: string;
}

/** A package format. */
export enum Repository_Format {
  /** FORMAT_UNSPECIFIED - Unspecified package format. */
  FORMAT_UNSPECIFIED = 0,
  /** DOCKER - Docker package format. */
  DOCKER = 1,
  /** MAVEN - Maven package format. */
  MAVEN = 2,
  /** NPM - NPM package format. */
  NPM = 3,
  /** APT - APT package format. */
  APT = 5,
  /** YUM - YUM package format. */
  YUM = 6,
  /** PYTHON - Python package format. */
  PYTHON = 8,
  UNRECOGNIZED = -1,
}

export function repository_FormatFromJSON(object: any): Repository_Format {
  switch (object) {
    case 0:
    case "FORMAT_UNSPECIFIED":
      return Repository_Format.FORMAT_UNSPECIFIED;
    case 1:
    case "DOCKER":
      return Repository_Format.DOCKER;
    case 2:
    case "MAVEN":
      return Repository_Format.MAVEN;
    case 3:
    case "NPM":
      return Repository_Format.NPM;
    case 5:
    case "APT":
      return Repository_Format.APT;
    case 6:
    case "YUM":
      return Repository_Format.YUM;
    case 8:
    case "PYTHON":
      return Repository_Format.PYTHON;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Repository_Format.UNRECOGNIZED;
  }
}

export function repository_FormatToJSON(object: Repository_Format): string {
  switch (object) {
    case Repository_Format.FORMAT_UNSPECIFIED:
      return "FORMAT_UNSPECIFIED";
    case Repository_Format.DOCKER:
      return "DOCKER";
    case Repository_Format.MAVEN:
      return "MAVEN";
    case Repository_Format.NPM:
      return "NPM";
    case Repository_Format.APT:
      return "APT";
    case Repository_Format.YUM:
      return "YUM";
    case Repository_Format.PYTHON:
      return "PYTHON";
    case Repository_Format.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * MavenRepositoryConfig is maven related repository details.
 * Provides additional configuration details for repositories of the maven
 * format type.
 */
export interface Repository_MavenRepositoryConfig {
  /**
   * The repository with this flag will allow publishing
   * the same snapshot versions.
   */
  allowSnapshotOverwrites: boolean;
  /** Version policy defines the versions that the registry will accept. */
  versionPolicy: Repository_MavenRepositoryConfig_VersionPolicy;
}

/** VersionPolicy is the version policy for the repository. */
export enum Repository_MavenRepositoryConfig_VersionPolicy {
  /**
   * VERSION_POLICY_UNSPECIFIED - VERSION_POLICY_UNSPECIFIED - the version policy is not defined.
   * When the version policy is not defined, no validation is performed
   * for the versions.
   */
  VERSION_POLICY_UNSPECIFIED = 0,
  /** RELEASE - RELEASE - repository will accept only Release versions. */
  RELEASE = 1,
  /** SNAPSHOT - SNAPSHOT - repository will accept only Snapshot versions. */
  SNAPSHOT = 2,
  UNRECOGNIZED = -1,
}

export function repository_MavenRepositoryConfig_VersionPolicyFromJSON(
  object: any,
): Repository_MavenRepositoryConfig_VersionPolicy {
  switch (object) {
    case 0:
    case "VERSION_POLICY_UNSPECIFIED":
      return Repository_MavenRepositoryConfig_VersionPolicy.VERSION_POLICY_UNSPECIFIED;
    case 1:
    case "RELEASE":
      return Repository_MavenRepositoryConfig_VersionPolicy.RELEASE;
    case 2:
    case "SNAPSHOT":
      return Repository_MavenRepositoryConfig_VersionPolicy.SNAPSHOT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Repository_MavenRepositoryConfig_VersionPolicy.UNRECOGNIZED;
  }
}

export function repository_MavenRepositoryConfig_VersionPolicyToJSON(
  object: Repository_MavenRepositoryConfig_VersionPolicy,
): string {
  switch (object) {
    case Repository_MavenRepositoryConfig_VersionPolicy.VERSION_POLICY_UNSPECIFIED:
      return "VERSION_POLICY_UNSPECIFIED";
    case Repository_MavenRepositoryConfig_VersionPolicy.RELEASE:
      return "RELEASE";
    case Repository_MavenRepositoryConfig_VersionPolicy.SNAPSHOT:
      return "SNAPSHOT";
    case Repository_MavenRepositoryConfig_VersionPolicy.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Repository_LabelsEntry {
  key: string;
  value: string;
}

/** The request to list repositories. */
export interface ListRepositoriesRequest {
  /** Required. The name of the parent resource whose repositories will be listed. */
  parent: string;
  /** The maximum number of repositories to return. Maximum page size is 1,000. */
  pageSize: number;
  /** The next_page_token value returned from a previous list request, if any. */
  pageToken: string;
}

/** The response from listing repositories. */
export interface ListRepositoriesResponse {
  /** The repositories returned. */
  repositories: Repository[];
  /**
   * The token to retrieve the next page of repositories, or empty if there are
   * no more repositories to return.
   */
  nextPageToken: string;
}

/** The request to retrieve a repository. */
export interface GetRepositoryRequest {
  /** Required. The name of the repository to retrieve. */
  name: string;
}

/** The request to create a new repository. */
export interface CreateRepositoryRequest {
  /** Required. The name of the parent resource where the repository will be created. */
  parent: string;
  /** The repository id to use for this repository. */
  repositoryId: string;
  /** The repository to be created. */
  repository: Repository | undefined;
}

/** The request to update a repository. */
export interface UpdateRepositoryRequest {
  /** The repository that replaces the resource on the server. */
  repository:
    | Repository
    | undefined;
  /**
   * The update mask applies to the resource. For the `FieldMask` definition,
   * see
   * https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask
   */
  updateMask: string[] | undefined;
}

/** The request to delete a repository. */
export interface DeleteRepositoryRequest {
  /** Required. The name of the repository to delete. */
  name: string;
}

function createBaseRepository(): Repository {
  return {
    mavenConfig: undefined,
    name: "",
    format: 0,
    description: "",
    labels: {},
    createTime: undefined,
    updateTime: undefined,
    kmsKeyName: "",
  };
}

export const Repository: MessageFns<Repository> = {
  encode(message: Repository, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.mavenConfig !== undefined) {
      Repository_MavenRepositoryConfig.encode(message.mavenConfig, writer.uint32(74).fork()).join();
    }
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.format !== 0) {
      writer.uint32(16).int32(message.format);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      Repository_LabelsEntry.encode({ key: key as any, value }, writer.uint32(34).fork()).join();
    });
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(42).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(50).fork()).join();
    }
    if (message.kmsKeyName !== "") {
      writer.uint32(66).string(message.kmsKeyName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Repository {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRepository();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 9:
          if (tag !== 74) {
            break;
          }

          message.mavenConfig = Repository_MavenRepositoryConfig.decode(reader, reader.uint32());
          continue;
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.format = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          const entry4 = Repository_LabelsEntry.decode(reader, reader.uint32());
          if (entry4.value !== undefined) {
            message.labels[entry4.key] = entry4.value;
          }
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.kmsKeyName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Repository {
    return {
      mavenConfig: isSet(object.mavenConfig)
        ? Repository_MavenRepositoryConfig.fromJSON(object.mavenConfig)
        : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      format: isSet(object.format) ? repository_FormatFromJSON(object.format) : 0,
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      kmsKeyName: isSet(object.kmsKeyName) ? globalThis.String(object.kmsKeyName) : "",
    };
  },

  toJSON(message: Repository): unknown {
    const obj: any = {};
    if (message.mavenConfig !== undefined) {
      obj.mavenConfig = Repository_MavenRepositoryConfig.toJSON(message.mavenConfig);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.format !== 0) {
      obj.format = repository_FormatToJSON(message.format);
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.kmsKeyName !== "") {
      obj.kmsKeyName = message.kmsKeyName;
    }
    return obj;
  },

  create(base?: DeepPartial<Repository>): Repository {
    return Repository.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Repository>): Repository {
    const message = createBaseRepository();
    message.mavenConfig = (object.mavenConfig !== undefined && object.mavenConfig !== null)
      ? Repository_MavenRepositoryConfig.fromPartial(object.mavenConfig)
      : undefined;
    message.name = object.name ?? "";
    message.format = object.format ?? 0;
    message.description = object.description ?? "";
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.kmsKeyName = object.kmsKeyName ?? "";
    return message;
  },
};

function createBaseRepository_MavenRepositoryConfig(): Repository_MavenRepositoryConfig {
  return { allowSnapshotOverwrites: false, versionPolicy: 0 };
}

export const Repository_MavenRepositoryConfig: MessageFns<Repository_MavenRepositoryConfig> = {
  encode(message: Repository_MavenRepositoryConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.allowSnapshotOverwrites !== false) {
      writer.uint32(8).bool(message.allowSnapshotOverwrites);
    }
    if (message.versionPolicy !== 0) {
      writer.uint32(16).int32(message.versionPolicy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Repository_MavenRepositoryConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRepository_MavenRepositoryConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.allowSnapshotOverwrites = reader.bool();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.versionPolicy = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Repository_MavenRepositoryConfig {
    return {
      allowSnapshotOverwrites: isSet(object.allowSnapshotOverwrites)
        ? globalThis.Boolean(object.allowSnapshotOverwrites)
        : false,
      versionPolicy: isSet(object.versionPolicy)
        ? repository_MavenRepositoryConfig_VersionPolicyFromJSON(object.versionPolicy)
        : 0,
    };
  },

  toJSON(message: Repository_MavenRepositoryConfig): unknown {
    const obj: any = {};
    if (message.allowSnapshotOverwrites !== false) {
      obj.allowSnapshotOverwrites = message.allowSnapshotOverwrites;
    }
    if (message.versionPolicy !== 0) {
      obj.versionPolicy = repository_MavenRepositoryConfig_VersionPolicyToJSON(message.versionPolicy);
    }
    return obj;
  },

  create(base?: DeepPartial<Repository_MavenRepositoryConfig>): Repository_MavenRepositoryConfig {
    return Repository_MavenRepositoryConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Repository_MavenRepositoryConfig>): Repository_MavenRepositoryConfig {
    const message = createBaseRepository_MavenRepositoryConfig();
    message.allowSnapshotOverwrites = object.allowSnapshotOverwrites ?? false;
    message.versionPolicy = object.versionPolicy ?? 0;
    return message;
  },
};

function createBaseRepository_LabelsEntry(): Repository_LabelsEntry {
  return { key: "", value: "" };
}

export const Repository_LabelsEntry: MessageFns<Repository_LabelsEntry> = {
  encode(message: Repository_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Repository_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRepository_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Repository_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: Repository_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<Repository_LabelsEntry>): Repository_LabelsEntry {
    return Repository_LabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Repository_LabelsEntry>): Repository_LabelsEntry {
    const message = createBaseRepository_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseListRepositoriesRequest(): ListRepositoriesRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListRepositoriesRequest: MessageFns<ListRepositoriesRequest> = {
  encode(message: ListRepositoriesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListRepositoriesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListRepositoriesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListRepositoriesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListRepositoriesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListRepositoriesRequest>): ListRepositoriesRequest {
    return ListRepositoriesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListRepositoriesRequest>): ListRepositoriesRequest {
    const message = createBaseListRepositoriesRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListRepositoriesResponse(): ListRepositoriesResponse {
  return { repositories: [], nextPageToken: "" };
}

export const ListRepositoriesResponse: MessageFns<ListRepositoriesResponse> = {
  encode(message: ListRepositoriesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.repositories) {
      Repository.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListRepositoriesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListRepositoriesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.repositories.push(Repository.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListRepositoriesResponse {
    return {
      repositories: globalThis.Array.isArray(object?.repositories)
        ? object.repositories.map((e: any) => Repository.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListRepositoriesResponse): unknown {
    const obj: any = {};
    if (message.repositories?.length) {
      obj.repositories = message.repositories.map((e) => Repository.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListRepositoriesResponse>): ListRepositoriesResponse {
    return ListRepositoriesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListRepositoriesResponse>): ListRepositoriesResponse {
    const message = createBaseListRepositoriesResponse();
    message.repositories = object.repositories?.map((e) => Repository.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetRepositoryRequest(): GetRepositoryRequest {
  return { name: "" };
}

export const GetRepositoryRequest: MessageFns<GetRepositoryRequest> = {
  encode(message: GetRepositoryRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetRepositoryRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetRepositoryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetRepositoryRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetRepositoryRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetRepositoryRequest>): GetRepositoryRequest {
    return GetRepositoryRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetRepositoryRequest>): GetRepositoryRequest {
    const message = createBaseGetRepositoryRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateRepositoryRequest(): CreateRepositoryRequest {
  return { parent: "", repositoryId: "", repository: undefined };
}

export const CreateRepositoryRequest: MessageFns<CreateRepositoryRequest> = {
  encode(message: CreateRepositoryRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.repositoryId !== "") {
      writer.uint32(18).string(message.repositoryId);
    }
    if (message.repository !== undefined) {
      Repository.encode(message.repository, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateRepositoryRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateRepositoryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.repositoryId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.repository = Repository.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateRepositoryRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      repositoryId: isSet(object.repositoryId) ? globalThis.String(object.repositoryId) : "",
      repository: isSet(object.repository) ? Repository.fromJSON(object.repository) : undefined,
    };
  },

  toJSON(message: CreateRepositoryRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.repositoryId !== "") {
      obj.repositoryId = message.repositoryId;
    }
    if (message.repository !== undefined) {
      obj.repository = Repository.toJSON(message.repository);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateRepositoryRequest>): CreateRepositoryRequest {
    return CreateRepositoryRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateRepositoryRequest>): CreateRepositoryRequest {
    const message = createBaseCreateRepositoryRequest();
    message.parent = object.parent ?? "";
    message.repositoryId = object.repositoryId ?? "";
    message.repository = (object.repository !== undefined && object.repository !== null)
      ? Repository.fromPartial(object.repository)
      : undefined;
    return message;
  },
};

function createBaseUpdateRepositoryRequest(): UpdateRepositoryRequest {
  return { repository: undefined, updateMask: undefined };
}

export const UpdateRepositoryRequest: MessageFns<UpdateRepositoryRequest> = {
  encode(message: UpdateRepositoryRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.repository !== undefined) {
      Repository.encode(message.repository, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateRepositoryRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateRepositoryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.repository = Repository.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateRepositoryRequest {
    return {
      repository: isSet(object.repository) ? Repository.fromJSON(object.repository) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateRepositoryRequest): unknown {
    const obj: any = {};
    if (message.repository !== undefined) {
      obj.repository = Repository.toJSON(message.repository);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateRepositoryRequest>): UpdateRepositoryRequest {
    return UpdateRepositoryRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateRepositoryRequest>): UpdateRepositoryRequest {
    const message = createBaseUpdateRepositoryRequest();
    message.repository = (object.repository !== undefined && object.repository !== null)
      ? Repository.fromPartial(object.repository)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseDeleteRepositoryRequest(): DeleteRepositoryRequest {
  return { name: "" };
}

export const DeleteRepositoryRequest: MessageFns<DeleteRepositoryRequest> = {
  encode(message: DeleteRepositoryRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteRepositoryRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteRepositoryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteRepositoryRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteRepositoryRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteRepositoryRequest>): DeleteRepositoryRequest {
    return DeleteRepositoryRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteRepositoryRequest>): DeleteRepositoryRequest {
    const message = createBaseDeleteRepositoryRequest();
    message.name = object.name ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
