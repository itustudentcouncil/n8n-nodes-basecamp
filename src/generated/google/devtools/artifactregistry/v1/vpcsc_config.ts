// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/devtools/artifactregistry/v1/vpcsc_config.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { FieldMask } from "../../../protobuf/field_mask.js";

export const protobufPackage = "google.devtools.artifactregistry.v1";

/** The Artifact Registry VPC SC config that apply to a Project. */
export interface VPCSCConfig {
  /**
   * The name of the project's VPC SC Config.
   *
   * Always of the form:
   * projects/{projectID}/locations/{location}/vpcscConfig
   *
   * In update request: never set
   * In response: always set
   */
  name: string;
  /**
   * The project per location VPC SC policy that defines the VPC SC behavior for
   * the Remote Repository (Allow/Deny).
   */
  vpcscPolicy: VPCSCConfig_VPCSCPolicy;
}

/** VPCSCPolicy is the VPC SC policy for project and location. */
export enum VPCSCConfig_VPCSCPolicy {
  /**
   * VPCSC_POLICY_UNSPECIFIED - VPCSC_POLICY_UNSPECIFIED - the VPS SC policy is not defined.
   * When VPS SC policy is not defined - the Service will use the default
   * behavior (VPCSC_DENY).
   */
  VPCSC_POLICY_UNSPECIFIED = 0,
  /**
   * DENY - VPCSC_DENY - repository will block the requests to the Upstreams for the
   * Remote Repositories if the resource is in the perimeter.
   */
  DENY = 1,
  /**
   * ALLOW - VPCSC_ALLOW - repository will allow the requests to the Upstreams for the
   * Remote Repositories if the resource is in the perimeter.
   */
  ALLOW = 2,
  UNRECOGNIZED = -1,
}

export function vPCSCConfig_VPCSCPolicyFromJSON(object: any): VPCSCConfig_VPCSCPolicy {
  switch (object) {
    case 0:
    case "VPCSC_POLICY_UNSPECIFIED":
      return VPCSCConfig_VPCSCPolicy.VPCSC_POLICY_UNSPECIFIED;
    case 1:
    case "DENY":
      return VPCSCConfig_VPCSCPolicy.DENY;
    case 2:
    case "ALLOW":
      return VPCSCConfig_VPCSCPolicy.ALLOW;
    case -1:
    case "UNRECOGNIZED":
    default:
      return VPCSCConfig_VPCSCPolicy.UNRECOGNIZED;
  }
}

export function vPCSCConfig_VPCSCPolicyToJSON(object: VPCSCConfig_VPCSCPolicy): string {
  switch (object) {
    case VPCSCConfig_VPCSCPolicy.VPCSC_POLICY_UNSPECIFIED:
      return "VPCSC_POLICY_UNSPECIFIED";
    case VPCSCConfig_VPCSCPolicy.DENY:
      return "DENY";
    case VPCSCConfig_VPCSCPolicy.ALLOW:
      return "ALLOW";
    case VPCSCConfig_VPCSCPolicy.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Gets the VPC SC config for a project. */
export interface GetVPCSCConfigRequest {
  /** Required. The name of the VPCSCConfig resource. */
  name: string;
}

/** Sets the VPCSC config of the project. */
export interface UpdateVPCSCConfigRequest {
  /** The project config. */
  vpcscConfig:
    | VPCSCConfig
    | undefined;
  /** Field mask to support partial updates. */
  updateMask: string[] | undefined;
}

function createBaseVPCSCConfig(): VPCSCConfig {
  return { name: "", vpcscPolicy: 0 };
}

export const VPCSCConfig: MessageFns<VPCSCConfig> = {
  encode(message: VPCSCConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.vpcscPolicy !== 0) {
      writer.uint32(16).int32(message.vpcscPolicy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VPCSCConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVPCSCConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.vpcscPolicy = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VPCSCConfig {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      vpcscPolicy: isSet(object.vpcscPolicy) ? vPCSCConfig_VPCSCPolicyFromJSON(object.vpcscPolicy) : 0,
    };
  },

  toJSON(message: VPCSCConfig): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.vpcscPolicy !== 0) {
      obj.vpcscPolicy = vPCSCConfig_VPCSCPolicyToJSON(message.vpcscPolicy);
    }
    return obj;
  },

  create(base?: DeepPartial<VPCSCConfig>): VPCSCConfig {
    return VPCSCConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<VPCSCConfig>): VPCSCConfig {
    const message = createBaseVPCSCConfig();
    message.name = object.name ?? "";
    message.vpcscPolicy = object.vpcscPolicy ?? 0;
    return message;
  },
};

function createBaseGetVPCSCConfigRequest(): GetVPCSCConfigRequest {
  return { name: "" };
}

export const GetVPCSCConfigRequest: MessageFns<GetVPCSCConfigRequest> = {
  encode(message: GetVPCSCConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetVPCSCConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetVPCSCConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetVPCSCConfigRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetVPCSCConfigRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetVPCSCConfigRequest>): GetVPCSCConfigRequest {
    return GetVPCSCConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetVPCSCConfigRequest>): GetVPCSCConfigRequest {
    const message = createBaseGetVPCSCConfigRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpdateVPCSCConfigRequest(): UpdateVPCSCConfigRequest {
  return { vpcscConfig: undefined, updateMask: undefined };
}

export const UpdateVPCSCConfigRequest: MessageFns<UpdateVPCSCConfigRequest> = {
  encode(message: UpdateVPCSCConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.vpcscConfig !== undefined) {
      VPCSCConfig.encode(message.vpcscConfig, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateVPCSCConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateVPCSCConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.vpcscConfig = VPCSCConfig.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateVPCSCConfigRequest {
    return {
      vpcscConfig: isSet(object.vpcscConfig) ? VPCSCConfig.fromJSON(object.vpcscConfig) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateVPCSCConfigRequest): unknown {
    const obj: any = {};
    if (message.vpcscConfig !== undefined) {
      obj.vpcscConfig = VPCSCConfig.toJSON(message.vpcscConfig);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateVPCSCConfigRequest>): UpdateVPCSCConfigRequest {
    return UpdateVPCSCConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateVPCSCConfigRequest>): UpdateVPCSCConfigRequest {
    const message = createBaseUpdateVPCSCConfigRequest();
    message.vpcscConfig = (object.vpcscConfig !== undefined && object.vpcscConfig !== null)
      ? VPCSCConfig.fromPartial(object.vpcscConfig)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
