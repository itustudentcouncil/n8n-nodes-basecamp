// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/devtools/artifactregistry/v1/repository.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Duration } from "../../../protobuf/duration.js";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { Timestamp } from "../../../protobuf/timestamp.js";

export const protobufPackage = "google.devtools.artifactregistry.v1";

/** Artifact policy configuration for the repository contents. */
export interface UpstreamPolicy {
  /** The user-provided ID of the upstream policy. */
  id: string;
  /**
   * A reference to the repository resource, for example:
   * `projects/p1/locations/us-central1/repositories/repo1`.
   */
  repository: string;
  /** Entries with a greater priority value take precedence in the pull order. */
  priority: number;
}

/**
 * CleanupPolicyCondition is a set of conditions attached to a CleanupPolicy.
 * If multiple entries are set, all must be satisfied for the condition to be
 * satisfied.
 */
export interface CleanupPolicyCondition {
  /** Match versions by tag status. */
  tagState?:
    | CleanupPolicyCondition_TagState
    | undefined;
  /** Match versions by tag prefix. Applied on any prefix match. */
  tagPrefixes: string[];
  /** Match versions by version name prefix. Applied on any prefix match. */
  versionNamePrefixes: string[];
  /** Match versions by package prefix. Applied on any prefix match. */
  packageNamePrefixes: string[];
  /** Match versions older than a duration. */
  olderThan?:
    | Duration
    | undefined;
  /** Match versions newer than a duration. */
  newerThan?: Duration | undefined;
}

/** Statuses applying to versions. */
export enum CleanupPolicyCondition_TagState {
  /** TAG_STATE_UNSPECIFIED - Tag status not specified. */
  TAG_STATE_UNSPECIFIED = 0,
  /** TAGGED - Applies to tagged versions only. */
  TAGGED = 1,
  /** UNTAGGED - Applies to untagged versions only. */
  UNTAGGED = 2,
  /** ANY - Applies to all versions. */
  ANY = 3,
  UNRECOGNIZED = -1,
}

export function cleanupPolicyCondition_TagStateFromJSON(object: any): CleanupPolicyCondition_TagState {
  switch (object) {
    case 0:
    case "TAG_STATE_UNSPECIFIED":
      return CleanupPolicyCondition_TagState.TAG_STATE_UNSPECIFIED;
    case 1:
    case "TAGGED":
      return CleanupPolicyCondition_TagState.TAGGED;
    case 2:
    case "UNTAGGED":
      return CleanupPolicyCondition_TagState.UNTAGGED;
    case 3:
    case "ANY":
      return CleanupPolicyCondition_TagState.ANY;
    case -1:
    case "UNRECOGNIZED":
    default:
      return CleanupPolicyCondition_TagState.UNRECOGNIZED;
  }
}

export function cleanupPolicyCondition_TagStateToJSON(object: CleanupPolicyCondition_TagState): string {
  switch (object) {
    case CleanupPolicyCondition_TagState.TAG_STATE_UNSPECIFIED:
      return "TAG_STATE_UNSPECIFIED";
    case CleanupPolicyCondition_TagState.TAGGED:
      return "TAGGED";
    case CleanupPolicyCondition_TagState.UNTAGGED:
      return "UNTAGGED";
    case CleanupPolicyCondition_TagState.ANY:
      return "ANY";
    case CleanupPolicyCondition_TagState.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * CleanupPolicyMostRecentVersions is an alternate condition of a CleanupPolicy
 * for retaining a minimum number of versions.
 */
export interface CleanupPolicyMostRecentVersions {
  /** List of package name prefixes that will apply this rule. */
  packageNamePrefixes: string[];
  /** Minimum number of versions to keep. */
  keepCount?: number | undefined;
}

/** Artifact policy configuration for repository cleanup policies. */
export interface CleanupPolicy {
  /** Policy condition for matching versions. */
  condition?:
    | CleanupPolicyCondition
    | undefined;
  /**
   * Policy condition for retaining a minimum number of versions. May only be
   * specified with a Keep action.
   */
  mostRecentVersions?:
    | CleanupPolicyMostRecentVersions
    | undefined;
  /** The user-provided ID of the cleanup policy. */
  id: string;
  /** Policy action. */
  action: CleanupPolicy_Action;
}

/** Action type for a cleanup policy. */
export enum CleanupPolicy_Action {
  /** ACTION_UNSPECIFIED - Action not specified. */
  ACTION_UNSPECIFIED = 0,
  /** DELETE - Delete action. */
  DELETE = 1,
  /** KEEP - Keep action. */
  KEEP = 2,
  UNRECOGNIZED = -1,
}

export function cleanupPolicy_ActionFromJSON(object: any): CleanupPolicy_Action {
  switch (object) {
    case 0:
    case "ACTION_UNSPECIFIED":
      return CleanupPolicy_Action.ACTION_UNSPECIFIED;
    case 1:
    case "DELETE":
      return CleanupPolicy_Action.DELETE;
    case 2:
    case "KEEP":
      return CleanupPolicy_Action.KEEP;
    case -1:
    case "UNRECOGNIZED":
    default:
      return CleanupPolicy_Action.UNRECOGNIZED;
  }
}

export function cleanupPolicy_ActionToJSON(object: CleanupPolicy_Action): string {
  switch (object) {
    case CleanupPolicy_Action.ACTION_UNSPECIFIED:
      return "ACTION_UNSPECIFIED";
    case CleanupPolicy_Action.DELETE:
      return "DELETE";
    case CleanupPolicy_Action.KEEP:
      return "KEEP";
    case CleanupPolicy_Action.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Virtual repository configuration. */
export interface VirtualRepositoryConfig {
  /**
   * Policies that configure the upstream artifacts distributed by the Virtual
   * Repository. Upstream policies cannot be set on a standard repository.
   */
  upstreamPolicies: UpstreamPolicy[];
}

/** Remote repository configuration. */
export interface RemoteRepositoryConfig {
  /** Specific settings for a Docker remote repository. */
  dockerRepository?:
    | RemoteRepositoryConfig_DockerRepository
    | undefined;
  /** Specific settings for a Maven remote repository. */
  mavenRepository?:
    | RemoteRepositoryConfig_MavenRepository
    | undefined;
  /** Specific settings for an Npm remote repository. */
  npmRepository?:
    | RemoteRepositoryConfig_NpmRepository
    | undefined;
  /** Specific settings for a Python remote repository. */
  pythonRepository?:
    | RemoteRepositoryConfig_PythonRepository
    | undefined;
  /** Specific settings for an Apt remote repository. */
  aptRepository?:
    | RemoteRepositoryConfig_AptRepository
    | undefined;
  /** Specific settings for a Yum remote repository. */
  yumRepository?:
    | RemoteRepositoryConfig_YumRepository
    | undefined;
  /** The description of the remote source. */
  description: string;
  /** Optional. The credentials used to access the remote repository. */
  upstreamCredentials: RemoteRepositoryConfig_UpstreamCredentials | undefined;
}

/** The credentials to access the remote repository. */
export interface RemoteRepositoryConfig_UpstreamCredentials {
  /** Use username and password to access the remote repository. */
  usernamePasswordCredentials?: RemoteRepositoryConfig_UpstreamCredentials_UsernamePasswordCredentials | undefined;
}

/** Username and password credentials. */
export interface RemoteRepositoryConfig_UpstreamCredentials_UsernamePasswordCredentials {
  /** The username to access the remote repository. */
  username: string;
  /**
   * The Secret Manager key version that holds the password to access the
   * remote repository. Must be in the format of
   * `projects/{project}/secrets/{secret}/versions/{version}`.
   */
  passwordSecretVersion: string;
}

/** Configuration for a Docker remote repository. */
export interface RemoteRepositoryConfig_DockerRepository {
  /**
   * One of the publicly available Docker repositories supported by Artifact
   * Registry.
   */
  publicRepository?: RemoteRepositoryConfig_DockerRepository_PublicRepository | undefined;
}

/**
 * Predefined list of publicly available Docker repositories like Docker
 * Hub.
 */
export enum RemoteRepositoryConfig_DockerRepository_PublicRepository {
  /** PUBLIC_REPOSITORY_UNSPECIFIED - Unspecified repository. */
  PUBLIC_REPOSITORY_UNSPECIFIED = 0,
  /** DOCKER_HUB - Docker Hub. */
  DOCKER_HUB = 1,
  UNRECOGNIZED = -1,
}

export function remoteRepositoryConfig_DockerRepository_PublicRepositoryFromJSON(
  object: any,
): RemoteRepositoryConfig_DockerRepository_PublicRepository {
  switch (object) {
    case 0:
    case "PUBLIC_REPOSITORY_UNSPECIFIED":
      return RemoteRepositoryConfig_DockerRepository_PublicRepository.PUBLIC_REPOSITORY_UNSPECIFIED;
    case 1:
    case "DOCKER_HUB":
      return RemoteRepositoryConfig_DockerRepository_PublicRepository.DOCKER_HUB;
    case -1:
    case "UNRECOGNIZED":
    default:
      return RemoteRepositoryConfig_DockerRepository_PublicRepository.UNRECOGNIZED;
  }
}

export function remoteRepositoryConfig_DockerRepository_PublicRepositoryToJSON(
  object: RemoteRepositoryConfig_DockerRepository_PublicRepository,
): string {
  switch (object) {
    case RemoteRepositoryConfig_DockerRepository_PublicRepository.PUBLIC_REPOSITORY_UNSPECIFIED:
      return "PUBLIC_REPOSITORY_UNSPECIFIED";
    case RemoteRepositoryConfig_DockerRepository_PublicRepository.DOCKER_HUB:
      return "DOCKER_HUB";
    case RemoteRepositoryConfig_DockerRepository_PublicRepository.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Configuration for a Maven remote repository. */
export interface RemoteRepositoryConfig_MavenRepository {
  /**
   * One of the publicly available Maven repositories supported by Artifact
   * Registry.
   */
  publicRepository?: RemoteRepositoryConfig_MavenRepository_PublicRepository | undefined;
}

/**
 * Predefined list of publicly available Maven repositories like Maven
 * Central.
 */
export enum RemoteRepositoryConfig_MavenRepository_PublicRepository {
  /** PUBLIC_REPOSITORY_UNSPECIFIED - Unspecified repository. */
  PUBLIC_REPOSITORY_UNSPECIFIED = 0,
  /** MAVEN_CENTRAL - Maven Central. */
  MAVEN_CENTRAL = 1,
  UNRECOGNIZED = -1,
}

export function remoteRepositoryConfig_MavenRepository_PublicRepositoryFromJSON(
  object: any,
): RemoteRepositoryConfig_MavenRepository_PublicRepository {
  switch (object) {
    case 0:
    case "PUBLIC_REPOSITORY_UNSPECIFIED":
      return RemoteRepositoryConfig_MavenRepository_PublicRepository.PUBLIC_REPOSITORY_UNSPECIFIED;
    case 1:
    case "MAVEN_CENTRAL":
      return RemoteRepositoryConfig_MavenRepository_PublicRepository.MAVEN_CENTRAL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return RemoteRepositoryConfig_MavenRepository_PublicRepository.UNRECOGNIZED;
  }
}

export function remoteRepositoryConfig_MavenRepository_PublicRepositoryToJSON(
  object: RemoteRepositoryConfig_MavenRepository_PublicRepository,
): string {
  switch (object) {
    case RemoteRepositoryConfig_MavenRepository_PublicRepository.PUBLIC_REPOSITORY_UNSPECIFIED:
      return "PUBLIC_REPOSITORY_UNSPECIFIED";
    case RemoteRepositoryConfig_MavenRepository_PublicRepository.MAVEN_CENTRAL:
      return "MAVEN_CENTRAL";
    case RemoteRepositoryConfig_MavenRepository_PublicRepository.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Configuration for a Npm remote repository. */
export interface RemoteRepositoryConfig_NpmRepository {
  /**
   * One of the publicly available Npm repositories supported by Artifact
   * Registry.
   */
  publicRepository?: RemoteRepositoryConfig_NpmRepository_PublicRepository | undefined;
}

/** Predefined list of publicly available NPM repositories like npmjs. */
export enum RemoteRepositoryConfig_NpmRepository_PublicRepository {
  /** PUBLIC_REPOSITORY_UNSPECIFIED - Unspecified repository. */
  PUBLIC_REPOSITORY_UNSPECIFIED = 0,
  /** NPMJS - npmjs. */
  NPMJS = 1,
  UNRECOGNIZED = -1,
}

export function remoteRepositoryConfig_NpmRepository_PublicRepositoryFromJSON(
  object: any,
): RemoteRepositoryConfig_NpmRepository_PublicRepository {
  switch (object) {
    case 0:
    case "PUBLIC_REPOSITORY_UNSPECIFIED":
      return RemoteRepositoryConfig_NpmRepository_PublicRepository.PUBLIC_REPOSITORY_UNSPECIFIED;
    case 1:
    case "NPMJS":
      return RemoteRepositoryConfig_NpmRepository_PublicRepository.NPMJS;
    case -1:
    case "UNRECOGNIZED":
    default:
      return RemoteRepositoryConfig_NpmRepository_PublicRepository.UNRECOGNIZED;
  }
}

export function remoteRepositoryConfig_NpmRepository_PublicRepositoryToJSON(
  object: RemoteRepositoryConfig_NpmRepository_PublicRepository,
): string {
  switch (object) {
    case RemoteRepositoryConfig_NpmRepository_PublicRepository.PUBLIC_REPOSITORY_UNSPECIFIED:
      return "PUBLIC_REPOSITORY_UNSPECIFIED";
    case RemoteRepositoryConfig_NpmRepository_PublicRepository.NPMJS:
      return "NPMJS";
    case RemoteRepositoryConfig_NpmRepository_PublicRepository.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Configuration for a Python remote repository. */
export interface RemoteRepositoryConfig_PythonRepository {
  /**
   * One of the publicly available Python repositories supported by Artifact
   * Registry.
   */
  publicRepository?: RemoteRepositoryConfig_PythonRepository_PublicRepository | undefined;
}

/** Predefined list of publicly available Python repositories like PyPI.org. */
export enum RemoteRepositoryConfig_PythonRepository_PublicRepository {
  /** PUBLIC_REPOSITORY_UNSPECIFIED - Unspecified repository. */
  PUBLIC_REPOSITORY_UNSPECIFIED = 0,
  /** PYPI - PyPI. */
  PYPI = 1,
  UNRECOGNIZED = -1,
}

export function remoteRepositoryConfig_PythonRepository_PublicRepositoryFromJSON(
  object: any,
): RemoteRepositoryConfig_PythonRepository_PublicRepository {
  switch (object) {
    case 0:
    case "PUBLIC_REPOSITORY_UNSPECIFIED":
      return RemoteRepositoryConfig_PythonRepository_PublicRepository.PUBLIC_REPOSITORY_UNSPECIFIED;
    case 1:
    case "PYPI":
      return RemoteRepositoryConfig_PythonRepository_PublicRepository.PYPI;
    case -1:
    case "UNRECOGNIZED":
    default:
      return RemoteRepositoryConfig_PythonRepository_PublicRepository.UNRECOGNIZED;
  }
}

export function remoteRepositoryConfig_PythonRepository_PublicRepositoryToJSON(
  object: RemoteRepositoryConfig_PythonRepository_PublicRepository,
): string {
  switch (object) {
    case RemoteRepositoryConfig_PythonRepository_PublicRepository.PUBLIC_REPOSITORY_UNSPECIFIED:
      return "PUBLIC_REPOSITORY_UNSPECIFIED";
    case RemoteRepositoryConfig_PythonRepository_PublicRepository.PYPI:
      return "PYPI";
    case RemoteRepositoryConfig_PythonRepository_PublicRepository.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Configuration for an Apt remote repository. */
export interface RemoteRepositoryConfig_AptRepository {
  /**
   * One of the publicly available Apt repositories supported by Artifact
   * Registry.
   */
  publicRepository?: RemoteRepositoryConfig_AptRepository_PublicRepository | undefined;
}

/**
 * Publicly available Apt repositories constructed from a common repository
 * base and a custom repository path.
 */
export interface RemoteRepositoryConfig_AptRepository_PublicRepository {
  /** A common public repository base for Apt. */
  repositoryBase: RemoteRepositoryConfig_AptRepository_PublicRepository_RepositoryBase;
  /** A custom field to define a path to a specific repository from the base. */
  repositoryPath: string;
}

/** Predefined list of publicly available repository bases for Apt. */
export enum RemoteRepositoryConfig_AptRepository_PublicRepository_RepositoryBase {
  /** REPOSITORY_BASE_UNSPECIFIED - Unspecified repository base. */
  REPOSITORY_BASE_UNSPECIFIED = 0,
  /** DEBIAN - Debian. */
  DEBIAN = 1,
  /** UBUNTU - Ubuntu LTS/Pro. */
  UBUNTU = 2,
  UNRECOGNIZED = -1,
}

export function remoteRepositoryConfig_AptRepository_PublicRepository_RepositoryBaseFromJSON(
  object: any,
): RemoteRepositoryConfig_AptRepository_PublicRepository_RepositoryBase {
  switch (object) {
    case 0:
    case "REPOSITORY_BASE_UNSPECIFIED":
      return RemoteRepositoryConfig_AptRepository_PublicRepository_RepositoryBase.REPOSITORY_BASE_UNSPECIFIED;
    case 1:
    case "DEBIAN":
      return RemoteRepositoryConfig_AptRepository_PublicRepository_RepositoryBase.DEBIAN;
    case 2:
    case "UBUNTU":
      return RemoteRepositoryConfig_AptRepository_PublicRepository_RepositoryBase.UBUNTU;
    case -1:
    case "UNRECOGNIZED":
    default:
      return RemoteRepositoryConfig_AptRepository_PublicRepository_RepositoryBase.UNRECOGNIZED;
  }
}

export function remoteRepositoryConfig_AptRepository_PublicRepository_RepositoryBaseToJSON(
  object: RemoteRepositoryConfig_AptRepository_PublicRepository_RepositoryBase,
): string {
  switch (object) {
    case RemoteRepositoryConfig_AptRepository_PublicRepository_RepositoryBase.REPOSITORY_BASE_UNSPECIFIED:
      return "REPOSITORY_BASE_UNSPECIFIED";
    case RemoteRepositoryConfig_AptRepository_PublicRepository_RepositoryBase.DEBIAN:
      return "DEBIAN";
    case RemoteRepositoryConfig_AptRepository_PublicRepository_RepositoryBase.UBUNTU:
      return "UBUNTU";
    case RemoteRepositoryConfig_AptRepository_PublicRepository_RepositoryBase.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Configuration for a Yum remote repository. */
export interface RemoteRepositoryConfig_YumRepository {
  /**
   * One of the publicly available Yum repositories supported by Artifact
   * Registry.
   */
  publicRepository?: RemoteRepositoryConfig_YumRepository_PublicRepository | undefined;
}

/**
 * Publicly available Yum repositories constructed from a common repository
 * base and a custom repository path.
 */
export interface RemoteRepositoryConfig_YumRepository_PublicRepository {
  /** A common public repository base for Yum. */
  repositoryBase: RemoteRepositoryConfig_YumRepository_PublicRepository_RepositoryBase;
  /** A custom field to define a path to a specific repository from the base. */
  repositoryPath: string;
}

/** Predefined list of publicly available repository bases for Yum. */
export enum RemoteRepositoryConfig_YumRepository_PublicRepository_RepositoryBase {
  /** REPOSITORY_BASE_UNSPECIFIED - Unspecified repository base. */
  REPOSITORY_BASE_UNSPECIFIED = 0,
  /** CENTOS - CentOS. */
  CENTOS = 1,
  /** CENTOS_DEBUG - CentOS Debug. */
  CENTOS_DEBUG = 2,
  /** CENTOS_VAULT - CentOS Vault. */
  CENTOS_VAULT = 3,
  /** CENTOS_STREAM - CentOS Stream. */
  CENTOS_STREAM = 4,
  /** ROCKY - Rocky. */
  ROCKY = 5,
  /** EPEL - Fedora Extra Packages for Enterprise Linux (EPEL). */
  EPEL = 6,
  UNRECOGNIZED = -1,
}

export function remoteRepositoryConfig_YumRepository_PublicRepository_RepositoryBaseFromJSON(
  object: any,
): RemoteRepositoryConfig_YumRepository_PublicRepository_RepositoryBase {
  switch (object) {
    case 0:
    case "REPOSITORY_BASE_UNSPECIFIED":
      return RemoteRepositoryConfig_YumRepository_PublicRepository_RepositoryBase.REPOSITORY_BASE_UNSPECIFIED;
    case 1:
    case "CENTOS":
      return RemoteRepositoryConfig_YumRepository_PublicRepository_RepositoryBase.CENTOS;
    case 2:
    case "CENTOS_DEBUG":
      return RemoteRepositoryConfig_YumRepository_PublicRepository_RepositoryBase.CENTOS_DEBUG;
    case 3:
    case "CENTOS_VAULT":
      return RemoteRepositoryConfig_YumRepository_PublicRepository_RepositoryBase.CENTOS_VAULT;
    case 4:
    case "CENTOS_STREAM":
      return RemoteRepositoryConfig_YumRepository_PublicRepository_RepositoryBase.CENTOS_STREAM;
    case 5:
    case "ROCKY":
      return RemoteRepositoryConfig_YumRepository_PublicRepository_RepositoryBase.ROCKY;
    case 6:
    case "EPEL":
      return RemoteRepositoryConfig_YumRepository_PublicRepository_RepositoryBase.EPEL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return RemoteRepositoryConfig_YumRepository_PublicRepository_RepositoryBase.UNRECOGNIZED;
  }
}

export function remoteRepositoryConfig_YumRepository_PublicRepository_RepositoryBaseToJSON(
  object: RemoteRepositoryConfig_YumRepository_PublicRepository_RepositoryBase,
): string {
  switch (object) {
    case RemoteRepositoryConfig_YumRepository_PublicRepository_RepositoryBase.REPOSITORY_BASE_UNSPECIFIED:
      return "REPOSITORY_BASE_UNSPECIFIED";
    case RemoteRepositoryConfig_YumRepository_PublicRepository_RepositoryBase.CENTOS:
      return "CENTOS";
    case RemoteRepositoryConfig_YumRepository_PublicRepository_RepositoryBase.CENTOS_DEBUG:
      return "CENTOS_DEBUG";
    case RemoteRepositoryConfig_YumRepository_PublicRepository_RepositoryBase.CENTOS_VAULT:
      return "CENTOS_VAULT";
    case RemoteRepositoryConfig_YumRepository_PublicRepository_RepositoryBase.CENTOS_STREAM:
      return "CENTOS_STREAM";
    case RemoteRepositoryConfig_YumRepository_PublicRepository_RepositoryBase.ROCKY:
      return "ROCKY";
    case RemoteRepositoryConfig_YumRepository_PublicRepository_RepositoryBase.EPEL:
      return "EPEL";
    case RemoteRepositoryConfig_YumRepository_PublicRepository_RepositoryBase.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** A Repository for storing artifacts with a specific format. */
export interface Repository {
  /**
   * Maven repository config contains repository level configuration
   * for the repositories of maven type.
   */
  mavenConfig?:
    | Repository_MavenRepositoryConfig
    | undefined;
  /**
   * Docker repository config contains repository level configuration
   * for the repositories of docker type.
   */
  dockerConfig?:
    | Repository_DockerRepositoryConfig
    | undefined;
  /** Configuration specific for a Virtual Repository. */
  virtualRepositoryConfig?:
    | VirtualRepositoryConfig
    | undefined;
  /** Configuration specific for a Remote Repository. */
  remoteRepositoryConfig?:
    | RemoteRepositoryConfig
    | undefined;
  /**
   * The name of the repository, for example:
   * `projects/p1/locations/us-central1/repositories/repo1`.
   */
  name: string;
  /** Optional. The format of packages that are stored in the repository. */
  format: Repository_Format;
  /** The user-provided description of the repository. */
  description: string;
  /**
   * Labels with user-defined metadata.
   * This field may contain up to 64 entries. Label keys and values may be no
   * longer than 63 characters. Label keys must begin with a lowercase letter
   * and may only contain lowercase letters, numeric characters, underscores,
   * and dashes.
   */
  labels: { [key: string]: string };
  /** Output only. The time when the repository was created. */
  createTime:
    | Date
    | undefined;
  /** Output only. The time when the repository was last updated. */
  updateTime:
    | Date
    | undefined;
  /**
   * The Cloud KMS resource name of the customer managed encryption key that's
   * used to encrypt the contents of the Repository. Has the form:
   * `projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key`.
   * This value may not be changed after the Repository has been created.
   */
  kmsKeyName: string;
  /** Optional. The mode of the repository. */
  mode: Repository_Mode;
  /**
   * Optional. Cleanup policies for this repository. Cleanup policies indicate
   * when certain package versions can be automatically deleted. Map keys are
   * policy IDs supplied by users during policy creation. They must unique
   * within a repository and be under 128 characters in length.
   */
  cleanupPolicies: { [key: string]: CleanupPolicy };
  /**
   * Output only. The size, in bytes, of all artifact storage in this
   * repository. Repositories that are generally available or in public preview
   *  use this to calculate storage costs.
   */
  sizeBytes: Long;
  /** Output only. If set, the repository satisfies physical zone separation. */
  satisfiesPzs: boolean;
  /**
   * Optional. If true, the cleanup pipeline is prevented from deleting versions
   * in this repository.
   */
  cleanupPolicyDryRun: boolean;
}

/** A package format. */
export enum Repository_Format {
  /** FORMAT_UNSPECIFIED - Unspecified package format. */
  FORMAT_UNSPECIFIED = 0,
  /** DOCKER - Docker package format. */
  DOCKER = 1,
  /** MAVEN - Maven package format. */
  MAVEN = 2,
  /** NPM - NPM package format. */
  NPM = 3,
  /** APT - APT package format. */
  APT = 5,
  /** YUM - YUM package format. */
  YUM = 6,
  /** PYTHON - Python package format. */
  PYTHON = 8,
  /** KFP - Kubeflow Pipelines package format. */
  KFP = 9,
  /** GO - Go package format. */
  GO = 10,
  UNRECOGNIZED = -1,
}

export function repository_FormatFromJSON(object: any): Repository_Format {
  switch (object) {
    case 0:
    case "FORMAT_UNSPECIFIED":
      return Repository_Format.FORMAT_UNSPECIFIED;
    case 1:
    case "DOCKER":
      return Repository_Format.DOCKER;
    case 2:
    case "MAVEN":
      return Repository_Format.MAVEN;
    case 3:
    case "NPM":
      return Repository_Format.NPM;
    case 5:
    case "APT":
      return Repository_Format.APT;
    case 6:
    case "YUM":
      return Repository_Format.YUM;
    case 8:
    case "PYTHON":
      return Repository_Format.PYTHON;
    case 9:
    case "KFP":
      return Repository_Format.KFP;
    case 10:
    case "GO":
      return Repository_Format.GO;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Repository_Format.UNRECOGNIZED;
  }
}

export function repository_FormatToJSON(object: Repository_Format): string {
  switch (object) {
    case Repository_Format.FORMAT_UNSPECIFIED:
      return "FORMAT_UNSPECIFIED";
    case Repository_Format.DOCKER:
      return "DOCKER";
    case Repository_Format.MAVEN:
      return "MAVEN";
    case Repository_Format.NPM:
      return "NPM";
    case Repository_Format.APT:
      return "APT";
    case Repository_Format.YUM:
      return "YUM";
    case Repository_Format.PYTHON:
      return "PYTHON";
    case Repository_Format.KFP:
      return "KFP";
    case Repository_Format.GO:
      return "GO";
    case Repository_Format.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * The mode configures the repository to serve artifacts from different
 * sources.
 */
export enum Repository_Mode {
  /** MODE_UNSPECIFIED - Unspecified mode. */
  MODE_UNSPECIFIED = 0,
  /** STANDARD_REPOSITORY - A standard repository storing artifacts. */
  STANDARD_REPOSITORY = 1,
  /** VIRTUAL_REPOSITORY - A virtual repository to serve artifacts from one or more sources. */
  VIRTUAL_REPOSITORY = 2,
  /** REMOTE_REPOSITORY - A remote repository to serve artifacts from a remote source. */
  REMOTE_REPOSITORY = 3,
  UNRECOGNIZED = -1,
}

export function repository_ModeFromJSON(object: any): Repository_Mode {
  switch (object) {
    case 0:
    case "MODE_UNSPECIFIED":
      return Repository_Mode.MODE_UNSPECIFIED;
    case 1:
    case "STANDARD_REPOSITORY":
      return Repository_Mode.STANDARD_REPOSITORY;
    case 2:
    case "VIRTUAL_REPOSITORY":
      return Repository_Mode.VIRTUAL_REPOSITORY;
    case 3:
    case "REMOTE_REPOSITORY":
      return Repository_Mode.REMOTE_REPOSITORY;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Repository_Mode.UNRECOGNIZED;
  }
}

export function repository_ModeToJSON(object: Repository_Mode): string {
  switch (object) {
    case Repository_Mode.MODE_UNSPECIFIED:
      return "MODE_UNSPECIFIED";
    case Repository_Mode.STANDARD_REPOSITORY:
      return "STANDARD_REPOSITORY";
    case Repository_Mode.VIRTUAL_REPOSITORY:
      return "VIRTUAL_REPOSITORY";
    case Repository_Mode.REMOTE_REPOSITORY:
      return "REMOTE_REPOSITORY";
    case Repository_Mode.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * MavenRepositoryConfig is maven related repository details.
 * Provides additional configuration details for repositories of the maven
 * format type.
 */
export interface Repository_MavenRepositoryConfig {
  /**
   * The repository with this flag will allow publishing
   * the same snapshot versions.
   */
  allowSnapshotOverwrites: boolean;
  /** Version policy defines the versions that the registry will accept. */
  versionPolicy: Repository_MavenRepositoryConfig_VersionPolicy;
}

/** VersionPolicy is the version policy for the repository. */
export enum Repository_MavenRepositoryConfig_VersionPolicy {
  /**
   * VERSION_POLICY_UNSPECIFIED - VERSION_POLICY_UNSPECIFIED - the version policy is not defined.
   * When the version policy is not defined, no validation is performed
   * for the versions.
   */
  VERSION_POLICY_UNSPECIFIED = 0,
  /** RELEASE - RELEASE - repository will accept only Release versions. */
  RELEASE = 1,
  /** SNAPSHOT - SNAPSHOT - repository will accept only Snapshot versions. */
  SNAPSHOT = 2,
  UNRECOGNIZED = -1,
}

export function repository_MavenRepositoryConfig_VersionPolicyFromJSON(
  object: any,
): Repository_MavenRepositoryConfig_VersionPolicy {
  switch (object) {
    case 0:
    case "VERSION_POLICY_UNSPECIFIED":
      return Repository_MavenRepositoryConfig_VersionPolicy.VERSION_POLICY_UNSPECIFIED;
    case 1:
    case "RELEASE":
      return Repository_MavenRepositoryConfig_VersionPolicy.RELEASE;
    case 2:
    case "SNAPSHOT":
      return Repository_MavenRepositoryConfig_VersionPolicy.SNAPSHOT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Repository_MavenRepositoryConfig_VersionPolicy.UNRECOGNIZED;
  }
}

export function repository_MavenRepositoryConfig_VersionPolicyToJSON(
  object: Repository_MavenRepositoryConfig_VersionPolicy,
): string {
  switch (object) {
    case Repository_MavenRepositoryConfig_VersionPolicy.VERSION_POLICY_UNSPECIFIED:
      return "VERSION_POLICY_UNSPECIFIED";
    case Repository_MavenRepositoryConfig_VersionPolicy.RELEASE:
      return "RELEASE";
    case Repository_MavenRepositoryConfig_VersionPolicy.SNAPSHOT:
      return "SNAPSHOT";
    case Repository_MavenRepositoryConfig_VersionPolicy.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * DockerRepositoryConfig is docker related repository details.
 * Provides additional configuration details for repositories of the docker
 * format type.
 */
export interface Repository_DockerRepositoryConfig {
  /**
   * The repository which enabled this flag prevents all tags from being
   * modified, moved or deleted. This does not prevent tags from being
   * created.
   */
  immutableTags: boolean;
}

export interface Repository_LabelsEntry {
  key: string;
  value: string;
}

export interface Repository_CleanupPoliciesEntry {
  key: string;
  value: CleanupPolicy | undefined;
}

/** The request to list repositories. */
export interface ListRepositoriesRequest {
  /**
   * Required. The name of the parent resource whose repositories will be
   * listed.
   */
  parent: string;
  /** The maximum number of repositories to return. Maximum page size is 1,000. */
  pageSize: number;
  /** The next_page_token value returned from a previous list request, if any. */
  pageToken: string;
}

/** The response from listing repositories. */
export interface ListRepositoriesResponse {
  /** The repositories returned. */
  repositories: Repository[];
  /**
   * The token to retrieve the next page of repositories, or empty if there are
   * no more repositories to return.
   */
  nextPageToken: string;
}

/** The request to retrieve a repository. */
export interface GetRepositoryRequest {
  /** Required. The name of the repository to retrieve. */
  name: string;
}

/** The request to create a new repository. */
export interface CreateRepositoryRequest {
  /**
   * Required. The name of the parent resource where the repository will be
   * created.
   */
  parent: string;
  /** Required. The repository id to use for this repository. */
  repositoryId: string;
  /** Required. The repository to be created. */
  repository: Repository | undefined;
}

/** The request to update a repository. */
export interface UpdateRepositoryRequest {
  /** The repository that replaces the resource on the server. */
  repository:
    | Repository
    | undefined;
  /**
   * The update mask applies to the resource. For the `FieldMask` definition,
   * see
   * https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask
   */
  updateMask: string[] | undefined;
}

/** The request to delete a repository. */
export interface DeleteRepositoryRequest {
  /** Required. The name of the repository to delete. */
  name: string;
}

function createBaseUpstreamPolicy(): UpstreamPolicy {
  return { id: "", repository: "", priority: 0 };
}

export const UpstreamPolicy: MessageFns<UpstreamPolicy> = {
  encode(message: UpstreamPolicy, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.repository !== "") {
      writer.uint32(18).string(message.repository);
    }
    if (message.priority !== 0) {
      writer.uint32(24).int32(message.priority);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpstreamPolicy {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpstreamPolicy();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.repository = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.priority = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpstreamPolicy {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      repository: isSet(object.repository) ? globalThis.String(object.repository) : "",
      priority: isSet(object.priority) ? globalThis.Number(object.priority) : 0,
    };
  },

  toJSON(message: UpstreamPolicy): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.repository !== "") {
      obj.repository = message.repository;
    }
    if (message.priority !== 0) {
      obj.priority = Math.round(message.priority);
    }
    return obj;
  },

  create(base?: DeepPartial<UpstreamPolicy>): UpstreamPolicy {
    return UpstreamPolicy.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpstreamPolicy>): UpstreamPolicy {
    const message = createBaseUpstreamPolicy();
    message.id = object.id ?? "";
    message.repository = object.repository ?? "";
    message.priority = object.priority ?? 0;
    return message;
  },
};

function createBaseCleanupPolicyCondition(): CleanupPolicyCondition {
  return {
    tagState: undefined,
    tagPrefixes: [],
    versionNamePrefixes: [],
    packageNamePrefixes: [],
    olderThan: undefined,
    newerThan: undefined,
  };
}

export const CleanupPolicyCondition: MessageFns<CleanupPolicyCondition> = {
  encode(message: CleanupPolicyCondition, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tagState !== undefined) {
      writer.uint32(16).int32(message.tagState);
    }
    for (const v of message.tagPrefixes) {
      writer.uint32(26).string(v!);
    }
    for (const v of message.versionNamePrefixes) {
      writer.uint32(34).string(v!);
    }
    for (const v of message.packageNamePrefixes) {
      writer.uint32(42).string(v!);
    }
    if (message.olderThan !== undefined) {
      Duration.encode(message.olderThan, writer.uint32(50).fork()).join();
    }
    if (message.newerThan !== undefined) {
      Duration.encode(message.newerThan, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CleanupPolicyCondition {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCleanupPolicyCondition();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 16) {
            break;
          }

          message.tagState = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.tagPrefixes.push(reader.string());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.versionNamePrefixes.push(reader.string());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.packageNamePrefixes.push(reader.string());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.olderThan = Duration.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.newerThan = Duration.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CleanupPolicyCondition {
    return {
      tagState: isSet(object.tagState) ? cleanupPolicyCondition_TagStateFromJSON(object.tagState) : undefined,
      tagPrefixes: globalThis.Array.isArray(object?.tagPrefixes)
        ? object.tagPrefixes.map((e: any) => globalThis.String(e))
        : [],
      versionNamePrefixes: globalThis.Array.isArray(object?.versionNamePrefixes)
        ? object.versionNamePrefixes.map((e: any) => globalThis.String(e))
        : [],
      packageNamePrefixes: globalThis.Array.isArray(object?.packageNamePrefixes)
        ? object.packageNamePrefixes.map((e: any) => globalThis.String(e))
        : [],
      olderThan: isSet(object.olderThan) ? Duration.fromJSON(object.olderThan) : undefined,
      newerThan: isSet(object.newerThan) ? Duration.fromJSON(object.newerThan) : undefined,
    };
  },

  toJSON(message: CleanupPolicyCondition): unknown {
    const obj: any = {};
    if (message.tagState !== undefined) {
      obj.tagState = cleanupPolicyCondition_TagStateToJSON(message.tagState);
    }
    if (message.tagPrefixes?.length) {
      obj.tagPrefixes = message.tagPrefixes;
    }
    if (message.versionNamePrefixes?.length) {
      obj.versionNamePrefixes = message.versionNamePrefixes;
    }
    if (message.packageNamePrefixes?.length) {
      obj.packageNamePrefixes = message.packageNamePrefixes;
    }
    if (message.olderThan !== undefined) {
      obj.olderThan = Duration.toJSON(message.olderThan);
    }
    if (message.newerThan !== undefined) {
      obj.newerThan = Duration.toJSON(message.newerThan);
    }
    return obj;
  },

  create(base?: DeepPartial<CleanupPolicyCondition>): CleanupPolicyCondition {
    return CleanupPolicyCondition.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CleanupPolicyCondition>): CleanupPolicyCondition {
    const message = createBaseCleanupPolicyCondition();
    message.tagState = object.tagState ?? undefined;
    message.tagPrefixes = object.tagPrefixes?.map((e) => e) || [];
    message.versionNamePrefixes = object.versionNamePrefixes?.map((e) => e) || [];
    message.packageNamePrefixes = object.packageNamePrefixes?.map((e) => e) || [];
    message.olderThan = (object.olderThan !== undefined && object.olderThan !== null)
      ? Duration.fromPartial(object.olderThan)
      : undefined;
    message.newerThan = (object.newerThan !== undefined && object.newerThan !== null)
      ? Duration.fromPartial(object.newerThan)
      : undefined;
    return message;
  },
};

function createBaseCleanupPolicyMostRecentVersions(): CleanupPolicyMostRecentVersions {
  return { packageNamePrefixes: [], keepCount: undefined };
}

export const CleanupPolicyMostRecentVersions: MessageFns<CleanupPolicyMostRecentVersions> = {
  encode(message: CleanupPolicyMostRecentVersions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.packageNamePrefixes) {
      writer.uint32(10).string(v!);
    }
    if (message.keepCount !== undefined) {
      writer.uint32(16).int32(message.keepCount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CleanupPolicyMostRecentVersions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCleanupPolicyMostRecentVersions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.packageNamePrefixes.push(reader.string());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.keepCount = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CleanupPolicyMostRecentVersions {
    return {
      packageNamePrefixes: globalThis.Array.isArray(object?.packageNamePrefixes)
        ? object.packageNamePrefixes.map((e: any) => globalThis.String(e))
        : [],
      keepCount: isSet(object.keepCount) ? globalThis.Number(object.keepCount) : undefined,
    };
  },

  toJSON(message: CleanupPolicyMostRecentVersions): unknown {
    const obj: any = {};
    if (message.packageNamePrefixes?.length) {
      obj.packageNamePrefixes = message.packageNamePrefixes;
    }
    if (message.keepCount !== undefined) {
      obj.keepCount = Math.round(message.keepCount);
    }
    return obj;
  },

  create(base?: DeepPartial<CleanupPolicyMostRecentVersions>): CleanupPolicyMostRecentVersions {
    return CleanupPolicyMostRecentVersions.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CleanupPolicyMostRecentVersions>): CleanupPolicyMostRecentVersions {
    const message = createBaseCleanupPolicyMostRecentVersions();
    message.packageNamePrefixes = object.packageNamePrefixes?.map((e) => e) || [];
    message.keepCount = object.keepCount ?? undefined;
    return message;
  },
};

function createBaseCleanupPolicy(): CleanupPolicy {
  return { condition: undefined, mostRecentVersions: undefined, id: "", action: 0 };
}

export const CleanupPolicy: MessageFns<CleanupPolicy> = {
  encode(message: CleanupPolicy, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.condition !== undefined) {
      CleanupPolicyCondition.encode(message.condition, writer.uint32(18).fork()).join();
    }
    if (message.mostRecentVersions !== undefined) {
      CleanupPolicyMostRecentVersions.encode(message.mostRecentVersions, writer.uint32(34).fork()).join();
    }
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.action !== 0) {
      writer.uint32(24).int32(message.action);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CleanupPolicy {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCleanupPolicy();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.condition = CleanupPolicyCondition.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.mostRecentVersions = CleanupPolicyMostRecentVersions.decode(reader, reader.uint32());
          continue;
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.action = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CleanupPolicy {
    return {
      condition: isSet(object.condition) ? CleanupPolicyCondition.fromJSON(object.condition) : undefined,
      mostRecentVersions: isSet(object.mostRecentVersions)
        ? CleanupPolicyMostRecentVersions.fromJSON(object.mostRecentVersions)
        : undefined,
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      action: isSet(object.action) ? cleanupPolicy_ActionFromJSON(object.action) : 0,
    };
  },

  toJSON(message: CleanupPolicy): unknown {
    const obj: any = {};
    if (message.condition !== undefined) {
      obj.condition = CleanupPolicyCondition.toJSON(message.condition);
    }
    if (message.mostRecentVersions !== undefined) {
      obj.mostRecentVersions = CleanupPolicyMostRecentVersions.toJSON(message.mostRecentVersions);
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.action !== 0) {
      obj.action = cleanupPolicy_ActionToJSON(message.action);
    }
    return obj;
  },

  create(base?: DeepPartial<CleanupPolicy>): CleanupPolicy {
    return CleanupPolicy.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CleanupPolicy>): CleanupPolicy {
    const message = createBaseCleanupPolicy();
    message.condition = (object.condition !== undefined && object.condition !== null)
      ? CleanupPolicyCondition.fromPartial(object.condition)
      : undefined;
    message.mostRecentVersions = (object.mostRecentVersions !== undefined && object.mostRecentVersions !== null)
      ? CleanupPolicyMostRecentVersions.fromPartial(object.mostRecentVersions)
      : undefined;
    message.id = object.id ?? "";
    message.action = object.action ?? 0;
    return message;
  },
};

function createBaseVirtualRepositoryConfig(): VirtualRepositoryConfig {
  return { upstreamPolicies: [] };
}

export const VirtualRepositoryConfig: MessageFns<VirtualRepositoryConfig> = {
  encode(message: VirtualRepositoryConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.upstreamPolicies) {
      UpstreamPolicy.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VirtualRepositoryConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVirtualRepositoryConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.upstreamPolicies.push(UpstreamPolicy.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VirtualRepositoryConfig {
    return {
      upstreamPolicies: globalThis.Array.isArray(object?.upstreamPolicies)
        ? object.upstreamPolicies.map((e: any) => UpstreamPolicy.fromJSON(e))
        : [],
    };
  },

  toJSON(message: VirtualRepositoryConfig): unknown {
    const obj: any = {};
    if (message.upstreamPolicies?.length) {
      obj.upstreamPolicies = message.upstreamPolicies.map((e) => UpstreamPolicy.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<VirtualRepositoryConfig>): VirtualRepositoryConfig {
    return VirtualRepositoryConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<VirtualRepositoryConfig>): VirtualRepositoryConfig {
    const message = createBaseVirtualRepositoryConfig();
    message.upstreamPolicies = object.upstreamPolicies?.map((e) => UpstreamPolicy.fromPartial(e)) || [];
    return message;
  },
};

function createBaseRemoteRepositoryConfig(): RemoteRepositoryConfig {
  return {
    dockerRepository: undefined,
    mavenRepository: undefined,
    npmRepository: undefined,
    pythonRepository: undefined,
    aptRepository: undefined,
    yumRepository: undefined,
    description: "",
    upstreamCredentials: undefined,
  };
}

export const RemoteRepositoryConfig: MessageFns<RemoteRepositoryConfig> = {
  encode(message: RemoteRepositoryConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.dockerRepository !== undefined) {
      RemoteRepositoryConfig_DockerRepository.encode(message.dockerRepository, writer.uint32(18).fork()).join();
    }
    if (message.mavenRepository !== undefined) {
      RemoteRepositoryConfig_MavenRepository.encode(message.mavenRepository, writer.uint32(26).fork()).join();
    }
    if (message.npmRepository !== undefined) {
      RemoteRepositoryConfig_NpmRepository.encode(message.npmRepository, writer.uint32(34).fork()).join();
    }
    if (message.pythonRepository !== undefined) {
      RemoteRepositoryConfig_PythonRepository.encode(message.pythonRepository, writer.uint32(42).fork()).join();
    }
    if (message.aptRepository !== undefined) {
      RemoteRepositoryConfig_AptRepository.encode(message.aptRepository, writer.uint32(50).fork()).join();
    }
    if (message.yumRepository !== undefined) {
      RemoteRepositoryConfig_YumRepository.encode(message.yumRepository, writer.uint32(58).fork()).join();
    }
    if (message.description !== "") {
      writer.uint32(10).string(message.description);
    }
    if (message.upstreamCredentials !== undefined) {
      RemoteRepositoryConfig_UpstreamCredentials.encode(message.upstreamCredentials, writer.uint32(74).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoteRepositoryConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoteRepositoryConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.dockerRepository = RemoteRepositoryConfig_DockerRepository.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.mavenRepository = RemoteRepositoryConfig_MavenRepository.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.npmRepository = RemoteRepositoryConfig_NpmRepository.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.pythonRepository = RemoteRepositoryConfig_PythonRepository.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.aptRepository = RemoteRepositoryConfig_AptRepository.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.yumRepository = RemoteRepositoryConfig_YumRepository.decode(reader, reader.uint32());
          continue;
        case 1:
          if (tag !== 10) {
            break;
          }

          message.description = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.upstreamCredentials = RemoteRepositoryConfig_UpstreamCredentials.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoteRepositoryConfig {
    return {
      dockerRepository: isSet(object.dockerRepository)
        ? RemoteRepositoryConfig_DockerRepository.fromJSON(object.dockerRepository)
        : undefined,
      mavenRepository: isSet(object.mavenRepository)
        ? RemoteRepositoryConfig_MavenRepository.fromJSON(object.mavenRepository)
        : undefined,
      npmRepository: isSet(object.npmRepository)
        ? RemoteRepositoryConfig_NpmRepository.fromJSON(object.npmRepository)
        : undefined,
      pythonRepository: isSet(object.pythonRepository)
        ? RemoteRepositoryConfig_PythonRepository.fromJSON(object.pythonRepository)
        : undefined,
      aptRepository: isSet(object.aptRepository)
        ? RemoteRepositoryConfig_AptRepository.fromJSON(object.aptRepository)
        : undefined,
      yumRepository: isSet(object.yumRepository)
        ? RemoteRepositoryConfig_YumRepository.fromJSON(object.yumRepository)
        : undefined,
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      upstreamCredentials: isSet(object.upstreamCredentials)
        ? RemoteRepositoryConfig_UpstreamCredentials.fromJSON(object.upstreamCredentials)
        : undefined,
    };
  },

  toJSON(message: RemoteRepositoryConfig): unknown {
    const obj: any = {};
    if (message.dockerRepository !== undefined) {
      obj.dockerRepository = RemoteRepositoryConfig_DockerRepository.toJSON(message.dockerRepository);
    }
    if (message.mavenRepository !== undefined) {
      obj.mavenRepository = RemoteRepositoryConfig_MavenRepository.toJSON(message.mavenRepository);
    }
    if (message.npmRepository !== undefined) {
      obj.npmRepository = RemoteRepositoryConfig_NpmRepository.toJSON(message.npmRepository);
    }
    if (message.pythonRepository !== undefined) {
      obj.pythonRepository = RemoteRepositoryConfig_PythonRepository.toJSON(message.pythonRepository);
    }
    if (message.aptRepository !== undefined) {
      obj.aptRepository = RemoteRepositoryConfig_AptRepository.toJSON(message.aptRepository);
    }
    if (message.yumRepository !== undefined) {
      obj.yumRepository = RemoteRepositoryConfig_YumRepository.toJSON(message.yumRepository);
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.upstreamCredentials !== undefined) {
      obj.upstreamCredentials = RemoteRepositoryConfig_UpstreamCredentials.toJSON(message.upstreamCredentials);
    }
    return obj;
  },

  create(base?: DeepPartial<RemoteRepositoryConfig>): RemoteRepositoryConfig {
    return RemoteRepositoryConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoteRepositoryConfig>): RemoteRepositoryConfig {
    const message = createBaseRemoteRepositoryConfig();
    message.dockerRepository = (object.dockerRepository !== undefined && object.dockerRepository !== null)
      ? RemoteRepositoryConfig_DockerRepository.fromPartial(object.dockerRepository)
      : undefined;
    message.mavenRepository = (object.mavenRepository !== undefined && object.mavenRepository !== null)
      ? RemoteRepositoryConfig_MavenRepository.fromPartial(object.mavenRepository)
      : undefined;
    message.npmRepository = (object.npmRepository !== undefined && object.npmRepository !== null)
      ? RemoteRepositoryConfig_NpmRepository.fromPartial(object.npmRepository)
      : undefined;
    message.pythonRepository = (object.pythonRepository !== undefined && object.pythonRepository !== null)
      ? RemoteRepositoryConfig_PythonRepository.fromPartial(object.pythonRepository)
      : undefined;
    message.aptRepository = (object.aptRepository !== undefined && object.aptRepository !== null)
      ? RemoteRepositoryConfig_AptRepository.fromPartial(object.aptRepository)
      : undefined;
    message.yumRepository = (object.yumRepository !== undefined && object.yumRepository !== null)
      ? RemoteRepositoryConfig_YumRepository.fromPartial(object.yumRepository)
      : undefined;
    message.description = object.description ?? "";
    message.upstreamCredentials = (object.upstreamCredentials !== undefined && object.upstreamCredentials !== null)
      ? RemoteRepositoryConfig_UpstreamCredentials.fromPartial(object.upstreamCredentials)
      : undefined;
    return message;
  },
};

function createBaseRemoteRepositoryConfig_UpstreamCredentials(): RemoteRepositoryConfig_UpstreamCredentials {
  return { usernamePasswordCredentials: undefined };
}

export const RemoteRepositoryConfig_UpstreamCredentials: MessageFns<RemoteRepositoryConfig_UpstreamCredentials> = {
  encode(message: RemoteRepositoryConfig_UpstreamCredentials, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.usernamePasswordCredentials !== undefined) {
      RemoteRepositoryConfig_UpstreamCredentials_UsernamePasswordCredentials.encode(
        message.usernamePasswordCredentials,
        writer.uint32(10).fork(),
      ).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoteRepositoryConfig_UpstreamCredentials {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoteRepositoryConfig_UpstreamCredentials();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.usernamePasswordCredentials = RemoteRepositoryConfig_UpstreamCredentials_UsernamePasswordCredentials
            .decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoteRepositoryConfig_UpstreamCredentials {
    return {
      usernamePasswordCredentials: isSet(object.usernamePasswordCredentials)
        ? RemoteRepositoryConfig_UpstreamCredentials_UsernamePasswordCredentials.fromJSON(
          object.usernamePasswordCredentials,
        )
        : undefined,
    };
  },

  toJSON(message: RemoteRepositoryConfig_UpstreamCredentials): unknown {
    const obj: any = {};
    if (message.usernamePasswordCredentials !== undefined) {
      obj.usernamePasswordCredentials = RemoteRepositoryConfig_UpstreamCredentials_UsernamePasswordCredentials.toJSON(
        message.usernamePasswordCredentials,
      );
    }
    return obj;
  },

  create(base?: DeepPartial<RemoteRepositoryConfig_UpstreamCredentials>): RemoteRepositoryConfig_UpstreamCredentials {
    return RemoteRepositoryConfig_UpstreamCredentials.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<RemoteRepositoryConfig_UpstreamCredentials>,
  ): RemoteRepositoryConfig_UpstreamCredentials {
    const message = createBaseRemoteRepositoryConfig_UpstreamCredentials();
    message.usernamePasswordCredentials =
      (object.usernamePasswordCredentials !== undefined && object.usernamePasswordCredentials !== null)
        ? RemoteRepositoryConfig_UpstreamCredentials_UsernamePasswordCredentials.fromPartial(
          object.usernamePasswordCredentials,
        )
        : undefined;
    return message;
  },
};

function createBaseRemoteRepositoryConfig_UpstreamCredentials_UsernamePasswordCredentials(): RemoteRepositoryConfig_UpstreamCredentials_UsernamePasswordCredentials {
  return { username: "", passwordSecretVersion: "" };
}

export const RemoteRepositoryConfig_UpstreamCredentials_UsernamePasswordCredentials: MessageFns<
  RemoteRepositoryConfig_UpstreamCredentials_UsernamePasswordCredentials
> = {
  encode(
    message: RemoteRepositoryConfig_UpstreamCredentials_UsernamePasswordCredentials,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.username !== "") {
      writer.uint32(10).string(message.username);
    }
    if (message.passwordSecretVersion !== "") {
      writer.uint32(18).string(message.passwordSecretVersion);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): RemoteRepositoryConfig_UpstreamCredentials_UsernamePasswordCredentials {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoteRepositoryConfig_UpstreamCredentials_UsernamePasswordCredentials();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.username = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.passwordSecretVersion = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoteRepositoryConfig_UpstreamCredentials_UsernamePasswordCredentials {
    return {
      username: isSet(object.username) ? globalThis.String(object.username) : "",
      passwordSecretVersion: isSet(object.passwordSecretVersion) ? globalThis.String(object.passwordSecretVersion) : "",
    };
  },

  toJSON(message: RemoteRepositoryConfig_UpstreamCredentials_UsernamePasswordCredentials): unknown {
    const obj: any = {};
    if (message.username !== "") {
      obj.username = message.username;
    }
    if (message.passwordSecretVersion !== "") {
      obj.passwordSecretVersion = message.passwordSecretVersion;
    }
    return obj;
  },

  create(
    base?: DeepPartial<RemoteRepositoryConfig_UpstreamCredentials_UsernamePasswordCredentials>,
  ): RemoteRepositoryConfig_UpstreamCredentials_UsernamePasswordCredentials {
    return RemoteRepositoryConfig_UpstreamCredentials_UsernamePasswordCredentials.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<RemoteRepositoryConfig_UpstreamCredentials_UsernamePasswordCredentials>,
  ): RemoteRepositoryConfig_UpstreamCredentials_UsernamePasswordCredentials {
    const message = createBaseRemoteRepositoryConfig_UpstreamCredentials_UsernamePasswordCredentials();
    message.username = object.username ?? "";
    message.passwordSecretVersion = object.passwordSecretVersion ?? "";
    return message;
  },
};

function createBaseRemoteRepositoryConfig_DockerRepository(): RemoteRepositoryConfig_DockerRepository {
  return { publicRepository: undefined };
}

export const RemoteRepositoryConfig_DockerRepository: MessageFns<RemoteRepositoryConfig_DockerRepository> = {
  encode(message: RemoteRepositoryConfig_DockerRepository, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.publicRepository !== undefined) {
      writer.uint32(8).int32(message.publicRepository);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoteRepositoryConfig_DockerRepository {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoteRepositoryConfig_DockerRepository();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.publicRepository = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoteRepositoryConfig_DockerRepository {
    return {
      publicRepository: isSet(object.publicRepository)
        ? remoteRepositoryConfig_DockerRepository_PublicRepositoryFromJSON(object.publicRepository)
        : undefined,
    };
  },

  toJSON(message: RemoteRepositoryConfig_DockerRepository): unknown {
    const obj: any = {};
    if (message.publicRepository !== undefined) {
      obj.publicRepository = remoteRepositoryConfig_DockerRepository_PublicRepositoryToJSON(message.publicRepository);
    }
    return obj;
  },

  create(base?: DeepPartial<RemoteRepositoryConfig_DockerRepository>): RemoteRepositoryConfig_DockerRepository {
    return RemoteRepositoryConfig_DockerRepository.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoteRepositoryConfig_DockerRepository>): RemoteRepositoryConfig_DockerRepository {
    const message = createBaseRemoteRepositoryConfig_DockerRepository();
    message.publicRepository = object.publicRepository ?? undefined;
    return message;
  },
};

function createBaseRemoteRepositoryConfig_MavenRepository(): RemoteRepositoryConfig_MavenRepository {
  return { publicRepository: undefined };
}

export const RemoteRepositoryConfig_MavenRepository: MessageFns<RemoteRepositoryConfig_MavenRepository> = {
  encode(message: RemoteRepositoryConfig_MavenRepository, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.publicRepository !== undefined) {
      writer.uint32(8).int32(message.publicRepository);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoteRepositoryConfig_MavenRepository {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoteRepositoryConfig_MavenRepository();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.publicRepository = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoteRepositoryConfig_MavenRepository {
    return {
      publicRepository: isSet(object.publicRepository)
        ? remoteRepositoryConfig_MavenRepository_PublicRepositoryFromJSON(object.publicRepository)
        : undefined,
    };
  },

  toJSON(message: RemoteRepositoryConfig_MavenRepository): unknown {
    const obj: any = {};
    if (message.publicRepository !== undefined) {
      obj.publicRepository = remoteRepositoryConfig_MavenRepository_PublicRepositoryToJSON(message.publicRepository);
    }
    return obj;
  },

  create(base?: DeepPartial<RemoteRepositoryConfig_MavenRepository>): RemoteRepositoryConfig_MavenRepository {
    return RemoteRepositoryConfig_MavenRepository.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoteRepositoryConfig_MavenRepository>): RemoteRepositoryConfig_MavenRepository {
    const message = createBaseRemoteRepositoryConfig_MavenRepository();
    message.publicRepository = object.publicRepository ?? undefined;
    return message;
  },
};

function createBaseRemoteRepositoryConfig_NpmRepository(): RemoteRepositoryConfig_NpmRepository {
  return { publicRepository: undefined };
}

export const RemoteRepositoryConfig_NpmRepository: MessageFns<RemoteRepositoryConfig_NpmRepository> = {
  encode(message: RemoteRepositoryConfig_NpmRepository, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.publicRepository !== undefined) {
      writer.uint32(8).int32(message.publicRepository);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoteRepositoryConfig_NpmRepository {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoteRepositoryConfig_NpmRepository();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.publicRepository = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoteRepositoryConfig_NpmRepository {
    return {
      publicRepository: isSet(object.publicRepository)
        ? remoteRepositoryConfig_NpmRepository_PublicRepositoryFromJSON(object.publicRepository)
        : undefined,
    };
  },

  toJSON(message: RemoteRepositoryConfig_NpmRepository): unknown {
    const obj: any = {};
    if (message.publicRepository !== undefined) {
      obj.publicRepository = remoteRepositoryConfig_NpmRepository_PublicRepositoryToJSON(message.publicRepository);
    }
    return obj;
  },

  create(base?: DeepPartial<RemoteRepositoryConfig_NpmRepository>): RemoteRepositoryConfig_NpmRepository {
    return RemoteRepositoryConfig_NpmRepository.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoteRepositoryConfig_NpmRepository>): RemoteRepositoryConfig_NpmRepository {
    const message = createBaseRemoteRepositoryConfig_NpmRepository();
    message.publicRepository = object.publicRepository ?? undefined;
    return message;
  },
};

function createBaseRemoteRepositoryConfig_PythonRepository(): RemoteRepositoryConfig_PythonRepository {
  return { publicRepository: undefined };
}

export const RemoteRepositoryConfig_PythonRepository: MessageFns<RemoteRepositoryConfig_PythonRepository> = {
  encode(message: RemoteRepositoryConfig_PythonRepository, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.publicRepository !== undefined) {
      writer.uint32(8).int32(message.publicRepository);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoteRepositoryConfig_PythonRepository {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoteRepositoryConfig_PythonRepository();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.publicRepository = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoteRepositoryConfig_PythonRepository {
    return {
      publicRepository: isSet(object.publicRepository)
        ? remoteRepositoryConfig_PythonRepository_PublicRepositoryFromJSON(object.publicRepository)
        : undefined,
    };
  },

  toJSON(message: RemoteRepositoryConfig_PythonRepository): unknown {
    const obj: any = {};
    if (message.publicRepository !== undefined) {
      obj.publicRepository = remoteRepositoryConfig_PythonRepository_PublicRepositoryToJSON(message.publicRepository);
    }
    return obj;
  },

  create(base?: DeepPartial<RemoteRepositoryConfig_PythonRepository>): RemoteRepositoryConfig_PythonRepository {
    return RemoteRepositoryConfig_PythonRepository.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoteRepositoryConfig_PythonRepository>): RemoteRepositoryConfig_PythonRepository {
    const message = createBaseRemoteRepositoryConfig_PythonRepository();
    message.publicRepository = object.publicRepository ?? undefined;
    return message;
  },
};

function createBaseRemoteRepositoryConfig_AptRepository(): RemoteRepositoryConfig_AptRepository {
  return { publicRepository: undefined };
}

export const RemoteRepositoryConfig_AptRepository: MessageFns<RemoteRepositoryConfig_AptRepository> = {
  encode(message: RemoteRepositoryConfig_AptRepository, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.publicRepository !== undefined) {
      RemoteRepositoryConfig_AptRepository_PublicRepository.encode(message.publicRepository, writer.uint32(10).fork())
        .join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoteRepositoryConfig_AptRepository {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoteRepositoryConfig_AptRepository();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.publicRepository = RemoteRepositoryConfig_AptRepository_PublicRepository.decode(
            reader,
            reader.uint32(),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoteRepositoryConfig_AptRepository {
    return {
      publicRepository: isSet(object.publicRepository)
        ? RemoteRepositoryConfig_AptRepository_PublicRepository.fromJSON(object.publicRepository)
        : undefined,
    };
  },

  toJSON(message: RemoteRepositoryConfig_AptRepository): unknown {
    const obj: any = {};
    if (message.publicRepository !== undefined) {
      obj.publicRepository = RemoteRepositoryConfig_AptRepository_PublicRepository.toJSON(message.publicRepository);
    }
    return obj;
  },

  create(base?: DeepPartial<RemoteRepositoryConfig_AptRepository>): RemoteRepositoryConfig_AptRepository {
    return RemoteRepositoryConfig_AptRepository.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoteRepositoryConfig_AptRepository>): RemoteRepositoryConfig_AptRepository {
    const message = createBaseRemoteRepositoryConfig_AptRepository();
    message.publicRepository = (object.publicRepository !== undefined && object.publicRepository !== null)
      ? RemoteRepositoryConfig_AptRepository_PublicRepository.fromPartial(object.publicRepository)
      : undefined;
    return message;
  },
};

function createBaseRemoteRepositoryConfig_AptRepository_PublicRepository(): RemoteRepositoryConfig_AptRepository_PublicRepository {
  return { repositoryBase: 0, repositoryPath: "" };
}

export const RemoteRepositoryConfig_AptRepository_PublicRepository: MessageFns<
  RemoteRepositoryConfig_AptRepository_PublicRepository
> = {
  encode(
    message: RemoteRepositoryConfig_AptRepository_PublicRepository,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.repositoryBase !== 0) {
      writer.uint32(8).int32(message.repositoryBase);
    }
    if (message.repositoryPath !== "") {
      writer.uint32(18).string(message.repositoryPath);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoteRepositoryConfig_AptRepository_PublicRepository {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoteRepositoryConfig_AptRepository_PublicRepository();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.repositoryBase = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.repositoryPath = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoteRepositoryConfig_AptRepository_PublicRepository {
    return {
      repositoryBase: isSet(object.repositoryBase)
        ? remoteRepositoryConfig_AptRepository_PublicRepository_RepositoryBaseFromJSON(object.repositoryBase)
        : 0,
      repositoryPath: isSet(object.repositoryPath) ? globalThis.String(object.repositoryPath) : "",
    };
  },

  toJSON(message: RemoteRepositoryConfig_AptRepository_PublicRepository): unknown {
    const obj: any = {};
    if (message.repositoryBase !== 0) {
      obj.repositoryBase = remoteRepositoryConfig_AptRepository_PublicRepository_RepositoryBaseToJSON(
        message.repositoryBase,
      );
    }
    if (message.repositoryPath !== "") {
      obj.repositoryPath = message.repositoryPath;
    }
    return obj;
  },

  create(
    base?: DeepPartial<RemoteRepositoryConfig_AptRepository_PublicRepository>,
  ): RemoteRepositoryConfig_AptRepository_PublicRepository {
    return RemoteRepositoryConfig_AptRepository_PublicRepository.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<RemoteRepositoryConfig_AptRepository_PublicRepository>,
  ): RemoteRepositoryConfig_AptRepository_PublicRepository {
    const message = createBaseRemoteRepositoryConfig_AptRepository_PublicRepository();
    message.repositoryBase = object.repositoryBase ?? 0;
    message.repositoryPath = object.repositoryPath ?? "";
    return message;
  },
};

function createBaseRemoteRepositoryConfig_YumRepository(): RemoteRepositoryConfig_YumRepository {
  return { publicRepository: undefined };
}

export const RemoteRepositoryConfig_YumRepository: MessageFns<RemoteRepositoryConfig_YumRepository> = {
  encode(message: RemoteRepositoryConfig_YumRepository, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.publicRepository !== undefined) {
      RemoteRepositoryConfig_YumRepository_PublicRepository.encode(message.publicRepository, writer.uint32(10).fork())
        .join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoteRepositoryConfig_YumRepository {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoteRepositoryConfig_YumRepository();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.publicRepository = RemoteRepositoryConfig_YumRepository_PublicRepository.decode(
            reader,
            reader.uint32(),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoteRepositoryConfig_YumRepository {
    return {
      publicRepository: isSet(object.publicRepository)
        ? RemoteRepositoryConfig_YumRepository_PublicRepository.fromJSON(object.publicRepository)
        : undefined,
    };
  },

  toJSON(message: RemoteRepositoryConfig_YumRepository): unknown {
    const obj: any = {};
    if (message.publicRepository !== undefined) {
      obj.publicRepository = RemoteRepositoryConfig_YumRepository_PublicRepository.toJSON(message.publicRepository);
    }
    return obj;
  },

  create(base?: DeepPartial<RemoteRepositoryConfig_YumRepository>): RemoteRepositoryConfig_YumRepository {
    return RemoteRepositoryConfig_YumRepository.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoteRepositoryConfig_YumRepository>): RemoteRepositoryConfig_YumRepository {
    const message = createBaseRemoteRepositoryConfig_YumRepository();
    message.publicRepository = (object.publicRepository !== undefined && object.publicRepository !== null)
      ? RemoteRepositoryConfig_YumRepository_PublicRepository.fromPartial(object.publicRepository)
      : undefined;
    return message;
  },
};

function createBaseRemoteRepositoryConfig_YumRepository_PublicRepository(): RemoteRepositoryConfig_YumRepository_PublicRepository {
  return { repositoryBase: 0, repositoryPath: "" };
}

export const RemoteRepositoryConfig_YumRepository_PublicRepository: MessageFns<
  RemoteRepositoryConfig_YumRepository_PublicRepository
> = {
  encode(
    message: RemoteRepositoryConfig_YumRepository_PublicRepository,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.repositoryBase !== 0) {
      writer.uint32(8).int32(message.repositoryBase);
    }
    if (message.repositoryPath !== "") {
      writer.uint32(18).string(message.repositoryPath);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoteRepositoryConfig_YumRepository_PublicRepository {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoteRepositoryConfig_YumRepository_PublicRepository();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.repositoryBase = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.repositoryPath = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoteRepositoryConfig_YumRepository_PublicRepository {
    return {
      repositoryBase: isSet(object.repositoryBase)
        ? remoteRepositoryConfig_YumRepository_PublicRepository_RepositoryBaseFromJSON(object.repositoryBase)
        : 0,
      repositoryPath: isSet(object.repositoryPath) ? globalThis.String(object.repositoryPath) : "",
    };
  },

  toJSON(message: RemoteRepositoryConfig_YumRepository_PublicRepository): unknown {
    const obj: any = {};
    if (message.repositoryBase !== 0) {
      obj.repositoryBase = remoteRepositoryConfig_YumRepository_PublicRepository_RepositoryBaseToJSON(
        message.repositoryBase,
      );
    }
    if (message.repositoryPath !== "") {
      obj.repositoryPath = message.repositoryPath;
    }
    return obj;
  },

  create(
    base?: DeepPartial<RemoteRepositoryConfig_YumRepository_PublicRepository>,
  ): RemoteRepositoryConfig_YumRepository_PublicRepository {
    return RemoteRepositoryConfig_YumRepository_PublicRepository.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<RemoteRepositoryConfig_YumRepository_PublicRepository>,
  ): RemoteRepositoryConfig_YumRepository_PublicRepository {
    const message = createBaseRemoteRepositoryConfig_YumRepository_PublicRepository();
    message.repositoryBase = object.repositoryBase ?? 0;
    message.repositoryPath = object.repositoryPath ?? "";
    return message;
  },
};

function createBaseRepository(): Repository {
  return {
    mavenConfig: undefined,
    dockerConfig: undefined,
    virtualRepositoryConfig: undefined,
    remoteRepositoryConfig: undefined,
    name: "",
    format: 0,
    description: "",
    labels: {},
    createTime: undefined,
    updateTime: undefined,
    kmsKeyName: "",
    mode: 0,
    cleanupPolicies: {},
    sizeBytes: Long.ZERO,
    satisfiesPzs: false,
    cleanupPolicyDryRun: false,
  };
}

export const Repository: MessageFns<Repository> = {
  encode(message: Repository, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.mavenConfig !== undefined) {
      Repository_MavenRepositoryConfig.encode(message.mavenConfig, writer.uint32(74).fork()).join();
    }
    if (message.dockerConfig !== undefined) {
      Repository_DockerRepositoryConfig.encode(message.dockerConfig, writer.uint32(138).fork()).join();
    }
    if (message.virtualRepositoryConfig !== undefined) {
      VirtualRepositoryConfig.encode(message.virtualRepositoryConfig, writer.uint32(114).fork()).join();
    }
    if (message.remoteRepositoryConfig !== undefined) {
      RemoteRepositoryConfig.encode(message.remoteRepositoryConfig, writer.uint32(122).fork()).join();
    }
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.format !== 0) {
      writer.uint32(16).int32(message.format);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      Repository_LabelsEntry.encode({ key: key as any, value }, writer.uint32(34).fork()).join();
    });
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(42).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(50).fork()).join();
    }
    if (message.kmsKeyName !== "") {
      writer.uint32(66).string(message.kmsKeyName);
    }
    if (message.mode !== 0) {
      writer.uint32(80).int32(message.mode);
    }
    Object.entries(message.cleanupPolicies).forEach(([key, value]) => {
      Repository_CleanupPoliciesEntry.encode({ key: key as any, value }, writer.uint32(98).fork()).join();
    });
    if (!message.sizeBytes.equals(Long.ZERO)) {
      writer.uint32(104).int64(message.sizeBytes.toString());
    }
    if (message.satisfiesPzs !== false) {
      writer.uint32(128).bool(message.satisfiesPzs);
    }
    if (message.cleanupPolicyDryRun !== false) {
      writer.uint32(144).bool(message.cleanupPolicyDryRun);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Repository {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRepository();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 9:
          if (tag !== 74) {
            break;
          }

          message.mavenConfig = Repository_MavenRepositoryConfig.decode(reader, reader.uint32());
          continue;
        case 17:
          if (tag !== 138) {
            break;
          }

          message.dockerConfig = Repository_DockerRepositoryConfig.decode(reader, reader.uint32());
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.virtualRepositoryConfig = VirtualRepositoryConfig.decode(reader, reader.uint32());
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.remoteRepositoryConfig = RemoteRepositoryConfig.decode(reader, reader.uint32());
          continue;
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.format = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          const entry4 = Repository_LabelsEntry.decode(reader, reader.uint32());
          if (entry4.value !== undefined) {
            message.labels[entry4.key] = entry4.value;
          }
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.kmsKeyName = reader.string();
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.mode = reader.int32() as any;
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          const entry12 = Repository_CleanupPoliciesEntry.decode(reader, reader.uint32());
          if (entry12.value !== undefined) {
            message.cleanupPolicies[entry12.key] = entry12.value;
          }
          continue;
        case 13:
          if (tag !== 104) {
            break;
          }

          message.sizeBytes = Long.fromString(reader.int64().toString());
          continue;
        case 16:
          if (tag !== 128) {
            break;
          }

          message.satisfiesPzs = reader.bool();
          continue;
        case 18:
          if (tag !== 144) {
            break;
          }

          message.cleanupPolicyDryRun = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Repository {
    return {
      mavenConfig: isSet(object.mavenConfig)
        ? Repository_MavenRepositoryConfig.fromJSON(object.mavenConfig)
        : undefined,
      dockerConfig: isSet(object.dockerConfig)
        ? Repository_DockerRepositoryConfig.fromJSON(object.dockerConfig)
        : undefined,
      virtualRepositoryConfig: isSet(object.virtualRepositoryConfig)
        ? VirtualRepositoryConfig.fromJSON(object.virtualRepositoryConfig)
        : undefined,
      remoteRepositoryConfig: isSet(object.remoteRepositoryConfig)
        ? RemoteRepositoryConfig.fromJSON(object.remoteRepositoryConfig)
        : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      format: isSet(object.format) ? repository_FormatFromJSON(object.format) : 0,
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      kmsKeyName: isSet(object.kmsKeyName) ? globalThis.String(object.kmsKeyName) : "",
      mode: isSet(object.mode) ? repository_ModeFromJSON(object.mode) : 0,
      cleanupPolicies: isObject(object.cleanupPolicies)
        ? Object.entries(object.cleanupPolicies).reduce<{ [key: string]: CleanupPolicy }>((acc, [key, value]) => {
          acc[key] = CleanupPolicy.fromJSON(value);
          return acc;
        }, {})
        : {},
      sizeBytes: isSet(object.sizeBytes) ? Long.fromValue(object.sizeBytes) : Long.ZERO,
      satisfiesPzs: isSet(object.satisfiesPzs) ? globalThis.Boolean(object.satisfiesPzs) : false,
      cleanupPolicyDryRun: isSet(object.cleanupPolicyDryRun) ? globalThis.Boolean(object.cleanupPolicyDryRun) : false,
    };
  },

  toJSON(message: Repository): unknown {
    const obj: any = {};
    if (message.mavenConfig !== undefined) {
      obj.mavenConfig = Repository_MavenRepositoryConfig.toJSON(message.mavenConfig);
    }
    if (message.dockerConfig !== undefined) {
      obj.dockerConfig = Repository_DockerRepositoryConfig.toJSON(message.dockerConfig);
    }
    if (message.virtualRepositoryConfig !== undefined) {
      obj.virtualRepositoryConfig = VirtualRepositoryConfig.toJSON(message.virtualRepositoryConfig);
    }
    if (message.remoteRepositoryConfig !== undefined) {
      obj.remoteRepositoryConfig = RemoteRepositoryConfig.toJSON(message.remoteRepositoryConfig);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.format !== 0) {
      obj.format = repository_FormatToJSON(message.format);
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.kmsKeyName !== "") {
      obj.kmsKeyName = message.kmsKeyName;
    }
    if (message.mode !== 0) {
      obj.mode = repository_ModeToJSON(message.mode);
    }
    if (message.cleanupPolicies) {
      const entries = Object.entries(message.cleanupPolicies);
      if (entries.length > 0) {
        obj.cleanupPolicies = {};
        entries.forEach(([k, v]) => {
          obj.cleanupPolicies[k] = CleanupPolicy.toJSON(v);
        });
      }
    }
    if (!message.sizeBytes.equals(Long.ZERO)) {
      obj.sizeBytes = (message.sizeBytes || Long.ZERO).toString();
    }
    if (message.satisfiesPzs !== false) {
      obj.satisfiesPzs = message.satisfiesPzs;
    }
    if (message.cleanupPolicyDryRun !== false) {
      obj.cleanupPolicyDryRun = message.cleanupPolicyDryRun;
    }
    return obj;
  },

  create(base?: DeepPartial<Repository>): Repository {
    return Repository.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Repository>): Repository {
    const message = createBaseRepository();
    message.mavenConfig = (object.mavenConfig !== undefined && object.mavenConfig !== null)
      ? Repository_MavenRepositoryConfig.fromPartial(object.mavenConfig)
      : undefined;
    message.dockerConfig = (object.dockerConfig !== undefined && object.dockerConfig !== null)
      ? Repository_DockerRepositoryConfig.fromPartial(object.dockerConfig)
      : undefined;
    message.virtualRepositoryConfig =
      (object.virtualRepositoryConfig !== undefined && object.virtualRepositoryConfig !== null)
        ? VirtualRepositoryConfig.fromPartial(object.virtualRepositoryConfig)
        : undefined;
    message.remoteRepositoryConfig =
      (object.remoteRepositoryConfig !== undefined && object.remoteRepositoryConfig !== null)
        ? RemoteRepositoryConfig.fromPartial(object.remoteRepositoryConfig)
        : undefined;
    message.name = object.name ?? "";
    message.format = object.format ?? 0;
    message.description = object.description ?? "";
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.kmsKeyName = object.kmsKeyName ?? "";
    message.mode = object.mode ?? 0;
    message.cleanupPolicies = Object.entries(object.cleanupPolicies ?? {}).reduce<{ [key: string]: CleanupPolicy }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = CleanupPolicy.fromPartial(value);
        }
        return acc;
      },
      {},
    );
    message.sizeBytes = (object.sizeBytes !== undefined && object.sizeBytes !== null)
      ? Long.fromValue(object.sizeBytes)
      : Long.ZERO;
    message.satisfiesPzs = object.satisfiesPzs ?? false;
    message.cleanupPolicyDryRun = object.cleanupPolicyDryRun ?? false;
    return message;
  },
};

function createBaseRepository_MavenRepositoryConfig(): Repository_MavenRepositoryConfig {
  return { allowSnapshotOverwrites: false, versionPolicy: 0 };
}

export const Repository_MavenRepositoryConfig: MessageFns<Repository_MavenRepositoryConfig> = {
  encode(message: Repository_MavenRepositoryConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.allowSnapshotOverwrites !== false) {
      writer.uint32(8).bool(message.allowSnapshotOverwrites);
    }
    if (message.versionPolicy !== 0) {
      writer.uint32(16).int32(message.versionPolicy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Repository_MavenRepositoryConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRepository_MavenRepositoryConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.allowSnapshotOverwrites = reader.bool();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.versionPolicy = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Repository_MavenRepositoryConfig {
    return {
      allowSnapshotOverwrites: isSet(object.allowSnapshotOverwrites)
        ? globalThis.Boolean(object.allowSnapshotOverwrites)
        : false,
      versionPolicy: isSet(object.versionPolicy)
        ? repository_MavenRepositoryConfig_VersionPolicyFromJSON(object.versionPolicy)
        : 0,
    };
  },

  toJSON(message: Repository_MavenRepositoryConfig): unknown {
    const obj: any = {};
    if (message.allowSnapshotOverwrites !== false) {
      obj.allowSnapshotOverwrites = message.allowSnapshotOverwrites;
    }
    if (message.versionPolicy !== 0) {
      obj.versionPolicy = repository_MavenRepositoryConfig_VersionPolicyToJSON(message.versionPolicy);
    }
    return obj;
  },

  create(base?: DeepPartial<Repository_MavenRepositoryConfig>): Repository_MavenRepositoryConfig {
    return Repository_MavenRepositoryConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Repository_MavenRepositoryConfig>): Repository_MavenRepositoryConfig {
    const message = createBaseRepository_MavenRepositoryConfig();
    message.allowSnapshotOverwrites = object.allowSnapshotOverwrites ?? false;
    message.versionPolicy = object.versionPolicy ?? 0;
    return message;
  },
};

function createBaseRepository_DockerRepositoryConfig(): Repository_DockerRepositoryConfig {
  return { immutableTags: false };
}

export const Repository_DockerRepositoryConfig: MessageFns<Repository_DockerRepositoryConfig> = {
  encode(message: Repository_DockerRepositoryConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.immutableTags !== false) {
      writer.uint32(8).bool(message.immutableTags);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Repository_DockerRepositoryConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRepository_DockerRepositoryConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.immutableTags = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Repository_DockerRepositoryConfig {
    return { immutableTags: isSet(object.immutableTags) ? globalThis.Boolean(object.immutableTags) : false };
  },

  toJSON(message: Repository_DockerRepositoryConfig): unknown {
    const obj: any = {};
    if (message.immutableTags !== false) {
      obj.immutableTags = message.immutableTags;
    }
    return obj;
  },

  create(base?: DeepPartial<Repository_DockerRepositoryConfig>): Repository_DockerRepositoryConfig {
    return Repository_DockerRepositoryConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Repository_DockerRepositoryConfig>): Repository_DockerRepositoryConfig {
    const message = createBaseRepository_DockerRepositoryConfig();
    message.immutableTags = object.immutableTags ?? false;
    return message;
  },
};

function createBaseRepository_LabelsEntry(): Repository_LabelsEntry {
  return { key: "", value: "" };
}

export const Repository_LabelsEntry: MessageFns<Repository_LabelsEntry> = {
  encode(message: Repository_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Repository_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRepository_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Repository_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: Repository_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<Repository_LabelsEntry>): Repository_LabelsEntry {
    return Repository_LabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Repository_LabelsEntry>): Repository_LabelsEntry {
    const message = createBaseRepository_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseRepository_CleanupPoliciesEntry(): Repository_CleanupPoliciesEntry {
  return { key: "", value: undefined };
}

export const Repository_CleanupPoliciesEntry: MessageFns<Repository_CleanupPoliciesEntry> = {
  encode(message: Repository_CleanupPoliciesEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      CleanupPolicy.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Repository_CleanupPoliciesEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRepository_CleanupPoliciesEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = CleanupPolicy.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Repository_CleanupPoliciesEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? CleanupPolicy.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: Repository_CleanupPoliciesEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = CleanupPolicy.toJSON(message.value);
    }
    return obj;
  },

  create(base?: DeepPartial<Repository_CleanupPoliciesEntry>): Repository_CleanupPoliciesEntry {
    return Repository_CleanupPoliciesEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Repository_CleanupPoliciesEntry>): Repository_CleanupPoliciesEntry {
    const message = createBaseRepository_CleanupPoliciesEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? CleanupPolicy.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseListRepositoriesRequest(): ListRepositoriesRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListRepositoriesRequest: MessageFns<ListRepositoriesRequest> = {
  encode(message: ListRepositoriesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListRepositoriesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListRepositoriesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListRepositoriesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListRepositoriesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListRepositoriesRequest>): ListRepositoriesRequest {
    return ListRepositoriesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListRepositoriesRequest>): ListRepositoriesRequest {
    const message = createBaseListRepositoriesRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListRepositoriesResponse(): ListRepositoriesResponse {
  return { repositories: [], nextPageToken: "" };
}

export const ListRepositoriesResponse: MessageFns<ListRepositoriesResponse> = {
  encode(message: ListRepositoriesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.repositories) {
      Repository.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListRepositoriesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListRepositoriesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.repositories.push(Repository.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListRepositoriesResponse {
    return {
      repositories: globalThis.Array.isArray(object?.repositories)
        ? object.repositories.map((e: any) => Repository.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListRepositoriesResponse): unknown {
    const obj: any = {};
    if (message.repositories?.length) {
      obj.repositories = message.repositories.map((e) => Repository.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListRepositoriesResponse>): ListRepositoriesResponse {
    return ListRepositoriesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListRepositoriesResponse>): ListRepositoriesResponse {
    const message = createBaseListRepositoriesResponse();
    message.repositories = object.repositories?.map((e) => Repository.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetRepositoryRequest(): GetRepositoryRequest {
  return { name: "" };
}

export const GetRepositoryRequest: MessageFns<GetRepositoryRequest> = {
  encode(message: GetRepositoryRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetRepositoryRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetRepositoryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetRepositoryRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetRepositoryRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetRepositoryRequest>): GetRepositoryRequest {
    return GetRepositoryRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetRepositoryRequest>): GetRepositoryRequest {
    const message = createBaseGetRepositoryRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateRepositoryRequest(): CreateRepositoryRequest {
  return { parent: "", repositoryId: "", repository: undefined };
}

export const CreateRepositoryRequest: MessageFns<CreateRepositoryRequest> = {
  encode(message: CreateRepositoryRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.repositoryId !== "") {
      writer.uint32(18).string(message.repositoryId);
    }
    if (message.repository !== undefined) {
      Repository.encode(message.repository, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateRepositoryRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateRepositoryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.repositoryId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.repository = Repository.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateRepositoryRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      repositoryId: isSet(object.repositoryId) ? globalThis.String(object.repositoryId) : "",
      repository: isSet(object.repository) ? Repository.fromJSON(object.repository) : undefined,
    };
  },

  toJSON(message: CreateRepositoryRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.repositoryId !== "") {
      obj.repositoryId = message.repositoryId;
    }
    if (message.repository !== undefined) {
      obj.repository = Repository.toJSON(message.repository);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateRepositoryRequest>): CreateRepositoryRequest {
    return CreateRepositoryRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateRepositoryRequest>): CreateRepositoryRequest {
    const message = createBaseCreateRepositoryRequest();
    message.parent = object.parent ?? "";
    message.repositoryId = object.repositoryId ?? "";
    message.repository = (object.repository !== undefined && object.repository !== null)
      ? Repository.fromPartial(object.repository)
      : undefined;
    return message;
  },
};

function createBaseUpdateRepositoryRequest(): UpdateRepositoryRequest {
  return { repository: undefined, updateMask: undefined };
}

export const UpdateRepositoryRequest: MessageFns<UpdateRepositoryRequest> = {
  encode(message: UpdateRepositoryRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.repository !== undefined) {
      Repository.encode(message.repository, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateRepositoryRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateRepositoryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.repository = Repository.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateRepositoryRequest {
    return {
      repository: isSet(object.repository) ? Repository.fromJSON(object.repository) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateRepositoryRequest): unknown {
    const obj: any = {};
    if (message.repository !== undefined) {
      obj.repository = Repository.toJSON(message.repository);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateRepositoryRequest>): UpdateRepositoryRequest {
    return UpdateRepositoryRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateRepositoryRequest>): UpdateRepositoryRequest {
    const message = createBaseUpdateRepositoryRequest();
    message.repository = (object.repository !== undefined && object.repository !== null)
      ? Repository.fromPartial(object.repository)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseDeleteRepositoryRequest(): DeleteRepositoryRequest {
  return { name: "" };
}

export const DeleteRepositoryRequest: MessageFns<DeleteRepositoryRequest> = {
  encode(message: DeleteRepositoryRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteRepositoryRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteRepositoryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteRepositoryRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteRepositoryRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteRepositoryRequest>): DeleteRepositoryRequest {
    return DeleteRepositoryRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteRepositoryRequest>): DeleteRepositoryRequest {
    const message = createBaseDeleteRepositoryRequest();
    message.name = object.name ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
