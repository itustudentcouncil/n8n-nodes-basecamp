// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/devtools/artifactregistry/v1/artifact.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../protobuf/timestamp.js";

export const protobufPackage = "google.devtools.artifactregistry.v1";

/**
 * DockerImage represents a docker artifact.
 * The following fields are returned as untyped metadata in the Version
 * resource, using camelcase keys (i.e. metadata.imageSizeBytes):
 * * imageSizeBytes
 * * mediaType
 * * buildTime
 */
export interface DockerImage {
  /**
   * Required. registry_location, project_id, repository_name and image id forms
   * a unique image
   * name:`projects/<project_id>/locations/<location>/repository/<repository_name>/dockerImages/<docker_image>`.
   * For example,
   * "projects/test-project/locations/us-west4/repositories/test-repo/dockerImages/
   * nginx@sha256:e9954c1fc875017be1c3e36eca16be2d9e9bccc4bf072163515467d6a823c7cf",
   * where "us-west4" is the registry_location, "test-project" is the
   * project_id, "test-repo" is the repository_name and
   * "nginx@sha256:e9954c1fc875017be1c3e36eca16be2d9e9bccc4bf072163515467d6a823c7cf"
   * is the image's digest.
   */
  name: string;
  /**
   * Required. URL to access the image.
   * Example:
   * us-west4-docker.pkg.dev/test-project/test-repo/nginx@sha256:e9954c1fc875017be1c3e36eca16be2d9e9bccc4bf072163515467d6a823c7cf
   */
  uri: string;
  /** Tags attached to this image. */
  tags: string[];
  /**
   * Calculated size of the image.
   * This field is returned as the 'metadata.imageSizeBytes' field in the
   * Version resource.
   */
  imageSizeBytes: Long;
  /** Time the image was uploaded. */
  uploadTime:
    | Date
    | undefined;
  /**
   * Media type of this image, e.g.
   * "application/vnd.docker.distribution.manifest.v2+json".
   * This field is returned as the 'metadata.mediaType' field in the
   * Version resource.
   */
  mediaType: string;
  /**
   * The time this image was built.
   * This field is returned as the 'metadata.buildTime' field in the
   * Version resource.
   * The build time is returned to the client as an RFC 3339 string, which can
   * be easily used with the JavaScript Date constructor.
   */
  buildTime:
    | Date
    | undefined;
  /** Output only. The time when the docker image was last updated. */
  updateTime: Date | undefined;
}

/** The request to list docker images. */
export interface ListDockerImagesRequest {
  /**
   * Required. The name of the parent resource whose docker images will be
   * listed.
   */
  parent: string;
  /** The maximum number of artifacts to return. */
  pageSize: number;
  /** The next_page_token value returned from a previous list request, if any. */
  pageToken: string;
  /** The field to order the results by. */
  orderBy: string;
}

/** The response from listing docker images. */
export interface ListDockerImagesResponse {
  /** The docker images returned. */
  dockerImages: DockerImage[];
  /**
   * The token to retrieve the next page of artifacts, or empty if there are no
   * more artifacts to return.
   */
  nextPageToken: string;
}

/** The request to get docker images. */
export interface GetDockerImageRequest {
  /** Required. The name of the docker images. */
  name: string;
}

/** MavenArtifact represents a maven artifact. */
export interface MavenArtifact {
  /**
   * Required. registry_location, project_id, repository_name and maven_artifact
   * forms a unique artifact For example,
   * "projects/test-project/locations/us-west4/repositories/test-repo/mavenArtifacts/
   * com.google.guava:guava:31.0-jre",
   * where "us-west4" is the registry_location, "test-project" is the
   * project_id, "test-repo" is the repository_name and
   * "com.google.guava:guava:31.0-jre"
   * is the maven artifact.
   */
  name: string;
  /**
   * Required. URL to access the pom file of the artifact.
   * Example:
   * us-west4-maven.pkg.dev/test-project/test-repo/com/google/guava/guava/31.0/guava-31.0.pom
   */
  pomUri: string;
  /**
   * Group ID for the artifact.
   * Example:
   * com.google.guava
   */
  groupId: string;
  /** Artifact ID for the artifact. */
  artifactId: string;
  /** Version of this artifact. */
  version: string;
  /** Output only. Time the artifact was created. */
  createTime:
    | Date
    | undefined;
  /** Output only. Time the artifact was updated. */
  updateTime: Date | undefined;
}

/** The request to list maven artifacts. */
export interface ListMavenArtifactsRequest {
  /**
   * Required. The name of the parent resource whose maven artifacts will be
   * listed.
   */
  parent: string;
  /** The maximum number of artifacts to return. */
  pageSize: number;
  /** The next_page_token value returned from a previous list request, if any. */
  pageToken: string;
}

/** The response from listing maven artifacts. */
export interface ListMavenArtifactsResponse {
  /** The maven artifacts returned. */
  mavenArtifacts: MavenArtifact[];
  /**
   * The token to retrieve the next page of artifacts, or empty if there are no
   * more artifacts to return.
   */
  nextPageToken: string;
}

/** The request to get maven artifacts. */
export interface GetMavenArtifactRequest {
  /** Required. The name of the maven artifact. */
  name: string;
}

/** NpmPackage represents an npm artifact. */
export interface NpmPackage {
  /**
   * Required. registry_location, project_id, repository_name and npm_package
   * forms a unique package For example,
   * "projects/test-project/locations/us-west4/repositories/test-repo/npmPackages/
   * npm_test:1.0.0",
   * where "us-west4" is the registry_location, "test-project" is the
   * project_id, "test-repo" is the repository_name and
   * npm_test:1.0.0" is the npm package.
   */
  name: string;
  /** Package for the artifact. */
  packageName: string;
  /** Version of this package. */
  version: string;
  /** Tags attached to this package. */
  tags: string[];
  /** Output only. Time the package was created. */
  createTime:
    | Date
    | undefined;
  /** Output only. Time the package was updated. */
  updateTime: Date | undefined;
}

/** The request to list npm packages. */
export interface ListNpmPackagesRequest {
  /**
   * Required. The name of the parent resource whose npm packages will be
   * listed.
   */
  parent: string;
  /** The maximum number of artifacts to return. */
  pageSize: number;
  /** The next_page_token value returned from a previous list request, if any. */
  pageToken: string;
}

/** The response from listing npm packages. */
export interface ListNpmPackagesResponse {
  /** The npm packages returned. */
  npmPackages: NpmPackage[];
  /**
   * The token to retrieve the next page of artifacts, or empty if there are no
   * more artifacts to return.
   */
  nextPageToken: string;
}

/** The request to get npm packages. */
export interface GetNpmPackageRequest {
  /** Required. The name of the npm package. */
  name: string;
}

/** PythonPackage represents a python artifact. */
export interface PythonPackage {
  /**
   * Required. registry_location, project_id, repository_name and python_package
   * forms a unique package
   * name:`projects/<project_id>/locations/<location>/repository/<repository_name>/pythonPackages/<python_package>`.
   * For example,
   * "projects/test-project/locations/us-west4/repositories/test-repo/pythonPackages/
   * python_package:1.0.0",
   * where "us-west4" is the registry_location, "test-project" is the
   * project_id, "test-repo" is the repository_name and
   * python_package:1.0.0" is the python package.
   */
  name: string;
  /**
   * Required. URL to access the package.
   * Example:
   * us-west4-python.pkg.dev/test-project/test-repo/python_package/file-name-1.0.0.tar.gz
   */
  uri: string;
  /** Package for the artifact. */
  packageName: string;
  /** Version of this package. */
  version: string;
  /** Output only. Time the package was created. */
  createTime:
    | Date
    | undefined;
  /** Output only. Time the package was updated. */
  updateTime: Date | undefined;
}

/** The request to list python packages. */
export interface ListPythonPackagesRequest {
  /**
   * Required. The name of the parent resource whose python packages will be
   * listed.
   */
  parent: string;
  /** The maximum number of artifacts to return. */
  pageSize: number;
  /** The next_page_token value returned from a previous list request, if any. */
  pageToken: string;
}

/** The response from listing python packages. */
export interface ListPythonPackagesResponse {
  /** The python packages returned. */
  pythonPackages: PythonPackage[];
  /**
   * The token to retrieve the next page of artifacts, or empty if there are no
   * more artifacts to return.
   */
  nextPageToken: string;
}

/** The request to get python packages. */
export interface GetPythonPackageRequest {
  /** Required. The name of the python package. */
  name: string;
}

function createBaseDockerImage(): DockerImage {
  return {
    name: "",
    uri: "",
    tags: [],
    imageSizeBytes: Long.ZERO,
    uploadTime: undefined,
    mediaType: "",
    buildTime: undefined,
    updateTime: undefined,
  };
}

export const DockerImage: MessageFns<DockerImage> = {
  encode(message: DockerImage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.uri !== "") {
      writer.uint32(18).string(message.uri);
    }
    for (const v of message.tags) {
      writer.uint32(26).string(v!);
    }
    if (!message.imageSizeBytes.equals(Long.ZERO)) {
      writer.uint32(32).int64(message.imageSizeBytes.toString());
    }
    if (message.uploadTime !== undefined) {
      Timestamp.encode(toTimestamp(message.uploadTime), writer.uint32(42).fork()).join();
    }
    if (message.mediaType !== "") {
      writer.uint32(50).string(message.mediaType);
    }
    if (message.buildTime !== undefined) {
      Timestamp.encode(toTimestamp(message.buildTime), writer.uint32(58).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(66).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DockerImage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDockerImage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.uri = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.tags.push(reader.string());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.imageSizeBytes = Long.fromString(reader.int64().toString());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.uploadTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.mediaType = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.buildTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DockerImage {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      uri: isSet(object.uri) ? globalThis.String(object.uri) : "",
      tags: globalThis.Array.isArray(object?.tags) ? object.tags.map((e: any) => globalThis.String(e)) : [],
      imageSizeBytes: isSet(object.imageSizeBytes) ? Long.fromValue(object.imageSizeBytes) : Long.ZERO,
      uploadTime: isSet(object.uploadTime) ? fromJsonTimestamp(object.uploadTime) : undefined,
      mediaType: isSet(object.mediaType) ? globalThis.String(object.mediaType) : "",
      buildTime: isSet(object.buildTime) ? fromJsonTimestamp(object.buildTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
    };
  },

  toJSON(message: DockerImage): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.uri !== "") {
      obj.uri = message.uri;
    }
    if (message.tags?.length) {
      obj.tags = message.tags;
    }
    if (!message.imageSizeBytes.equals(Long.ZERO)) {
      obj.imageSizeBytes = (message.imageSizeBytes || Long.ZERO).toString();
    }
    if (message.uploadTime !== undefined) {
      obj.uploadTime = message.uploadTime.toISOString();
    }
    if (message.mediaType !== "") {
      obj.mediaType = message.mediaType;
    }
    if (message.buildTime !== undefined) {
      obj.buildTime = message.buildTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<DockerImage>): DockerImage {
    return DockerImage.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DockerImage>): DockerImage {
    const message = createBaseDockerImage();
    message.name = object.name ?? "";
    message.uri = object.uri ?? "";
    message.tags = object.tags?.map((e) => e) || [];
    message.imageSizeBytes = (object.imageSizeBytes !== undefined && object.imageSizeBytes !== null)
      ? Long.fromValue(object.imageSizeBytes)
      : Long.ZERO;
    message.uploadTime = object.uploadTime ?? undefined;
    message.mediaType = object.mediaType ?? "";
    message.buildTime = object.buildTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    return message;
  },
};

function createBaseListDockerImagesRequest(): ListDockerImagesRequest {
  return { parent: "", pageSize: 0, pageToken: "", orderBy: "" };
}

export const ListDockerImagesRequest: MessageFns<ListDockerImagesRequest> = {
  encode(message: ListDockerImagesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.orderBy !== "") {
      writer.uint32(34).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListDockerImagesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListDockerImagesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListDockerImagesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListDockerImagesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListDockerImagesRequest>): ListDockerImagesRequest {
    return ListDockerImagesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListDockerImagesRequest>): ListDockerImagesRequest {
    const message = createBaseListDockerImagesRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListDockerImagesResponse(): ListDockerImagesResponse {
  return { dockerImages: [], nextPageToken: "" };
}

export const ListDockerImagesResponse: MessageFns<ListDockerImagesResponse> = {
  encode(message: ListDockerImagesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.dockerImages) {
      DockerImage.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListDockerImagesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListDockerImagesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.dockerImages.push(DockerImage.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListDockerImagesResponse {
    return {
      dockerImages: globalThis.Array.isArray(object?.dockerImages)
        ? object.dockerImages.map((e: any) => DockerImage.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListDockerImagesResponse): unknown {
    const obj: any = {};
    if (message.dockerImages?.length) {
      obj.dockerImages = message.dockerImages.map((e) => DockerImage.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListDockerImagesResponse>): ListDockerImagesResponse {
    return ListDockerImagesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListDockerImagesResponse>): ListDockerImagesResponse {
    const message = createBaseListDockerImagesResponse();
    message.dockerImages = object.dockerImages?.map((e) => DockerImage.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetDockerImageRequest(): GetDockerImageRequest {
  return { name: "" };
}

export const GetDockerImageRequest: MessageFns<GetDockerImageRequest> = {
  encode(message: GetDockerImageRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetDockerImageRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDockerImageRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDockerImageRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetDockerImageRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetDockerImageRequest>): GetDockerImageRequest {
    return GetDockerImageRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetDockerImageRequest>): GetDockerImageRequest {
    const message = createBaseGetDockerImageRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseMavenArtifact(): MavenArtifact {
  return {
    name: "",
    pomUri: "",
    groupId: "",
    artifactId: "",
    version: "",
    createTime: undefined,
    updateTime: undefined,
  };
}

export const MavenArtifact: MessageFns<MavenArtifact> = {
  encode(message: MavenArtifact, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.pomUri !== "") {
      writer.uint32(18).string(message.pomUri);
    }
    if (message.groupId !== "") {
      writer.uint32(26).string(message.groupId);
    }
    if (message.artifactId !== "") {
      writer.uint32(34).string(message.artifactId);
    }
    if (message.version !== "") {
      writer.uint32(42).string(message.version);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(50).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MavenArtifact {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMavenArtifact();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.pomUri = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.groupId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.artifactId = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.version = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MavenArtifact {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      pomUri: isSet(object.pomUri) ? globalThis.String(object.pomUri) : "",
      groupId: isSet(object.groupId) ? globalThis.String(object.groupId) : "",
      artifactId: isSet(object.artifactId) ? globalThis.String(object.artifactId) : "",
      version: isSet(object.version) ? globalThis.String(object.version) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
    };
  },

  toJSON(message: MavenArtifact): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.pomUri !== "") {
      obj.pomUri = message.pomUri;
    }
    if (message.groupId !== "") {
      obj.groupId = message.groupId;
    }
    if (message.artifactId !== "") {
      obj.artifactId = message.artifactId;
    }
    if (message.version !== "") {
      obj.version = message.version;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<MavenArtifact>): MavenArtifact {
    return MavenArtifact.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MavenArtifact>): MavenArtifact {
    const message = createBaseMavenArtifact();
    message.name = object.name ?? "";
    message.pomUri = object.pomUri ?? "";
    message.groupId = object.groupId ?? "";
    message.artifactId = object.artifactId ?? "";
    message.version = object.version ?? "";
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    return message;
  },
};

function createBaseListMavenArtifactsRequest(): ListMavenArtifactsRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListMavenArtifactsRequest: MessageFns<ListMavenArtifactsRequest> = {
  encode(message: ListMavenArtifactsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListMavenArtifactsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListMavenArtifactsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListMavenArtifactsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListMavenArtifactsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListMavenArtifactsRequest>): ListMavenArtifactsRequest {
    return ListMavenArtifactsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListMavenArtifactsRequest>): ListMavenArtifactsRequest {
    const message = createBaseListMavenArtifactsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListMavenArtifactsResponse(): ListMavenArtifactsResponse {
  return { mavenArtifacts: [], nextPageToken: "" };
}

export const ListMavenArtifactsResponse: MessageFns<ListMavenArtifactsResponse> = {
  encode(message: ListMavenArtifactsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.mavenArtifacts) {
      MavenArtifact.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListMavenArtifactsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListMavenArtifactsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.mavenArtifacts.push(MavenArtifact.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListMavenArtifactsResponse {
    return {
      mavenArtifacts: globalThis.Array.isArray(object?.mavenArtifacts)
        ? object.mavenArtifacts.map((e: any) => MavenArtifact.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListMavenArtifactsResponse): unknown {
    const obj: any = {};
    if (message.mavenArtifacts?.length) {
      obj.mavenArtifacts = message.mavenArtifacts.map((e) => MavenArtifact.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListMavenArtifactsResponse>): ListMavenArtifactsResponse {
    return ListMavenArtifactsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListMavenArtifactsResponse>): ListMavenArtifactsResponse {
    const message = createBaseListMavenArtifactsResponse();
    message.mavenArtifacts = object.mavenArtifacts?.map((e) => MavenArtifact.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetMavenArtifactRequest(): GetMavenArtifactRequest {
  return { name: "" };
}

export const GetMavenArtifactRequest: MessageFns<GetMavenArtifactRequest> = {
  encode(message: GetMavenArtifactRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetMavenArtifactRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetMavenArtifactRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetMavenArtifactRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetMavenArtifactRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetMavenArtifactRequest>): GetMavenArtifactRequest {
    return GetMavenArtifactRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetMavenArtifactRequest>): GetMavenArtifactRequest {
    const message = createBaseGetMavenArtifactRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseNpmPackage(): NpmPackage {
  return { name: "", packageName: "", version: "", tags: [], createTime: undefined, updateTime: undefined };
}

export const NpmPackage: MessageFns<NpmPackage> = {
  encode(message: NpmPackage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.packageName !== "") {
      writer.uint32(26).string(message.packageName);
    }
    if (message.version !== "") {
      writer.uint32(34).string(message.version);
    }
    for (const v of message.tags) {
      writer.uint32(42).string(v!);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(50).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NpmPackage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNpmPackage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.packageName = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.version = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.tags.push(reader.string());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NpmPackage {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      packageName: isSet(object.packageName) ? globalThis.String(object.packageName) : "",
      version: isSet(object.version) ? globalThis.String(object.version) : "",
      tags: globalThis.Array.isArray(object?.tags) ? object.tags.map((e: any) => globalThis.String(e)) : [],
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
    };
  },

  toJSON(message: NpmPackage): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.packageName !== "") {
      obj.packageName = message.packageName;
    }
    if (message.version !== "") {
      obj.version = message.version;
    }
    if (message.tags?.length) {
      obj.tags = message.tags;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<NpmPackage>): NpmPackage {
    return NpmPackage.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<NpmPackage>): NpmPackage {
    const message = createBaseNpmPackage();
    message.name = object.name ?? "";
    message.packageName = object.packageName ?? "";
    message.version = object.version ?? "";
    message.tags = object.tags?.map((e) => e) || [];
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    return message;
  },
};

function createBaseListNpmPackagesRequest(): ListNpmPackagesRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListNpmPackagesRequest: MessageFns<ListNpmPackagesRequest> = {
  encode(message: ListNpmPackagesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListNpmPackagesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListNpmPackagesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListNpmPackagesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListNpmPackagesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListNpmPackagesRequest>): ListNpmPackagesRequest {
    return ListNpmPackagesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListNpmPackagesRequest>): ListNpmPackagesRequest {
    const message = createBaseListNpmPackagesRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListNpmPackagesResponse(): ListNpmPackagesResponse {
  return { npmPackages: [], nextPageToken: "" };
}

export const ListNpmPackagesResponse: MessageFns<ListNpmPackagesResponse> = {
  encode(message: ListNpmPackagesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.npmPackages) {
      NpmPackage.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListNpmPackagesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListNpmPackagesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.npmPackages.push(NpmPackage.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListNpmPackagesResponse {
    return {
      npmPackages: globalThis.Array.isArray(object?.npmPackages)
        ? object.npmPackages.map((e: any) => NpmPackage.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListNpmPackagesResponse): unknown {
    const obj: any = {};
    if (message.npmPackages?.length) {
      obj.npmPackages = message.npmPackages.map((e) => NpmPackage.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListNpmPackagesResponse>): ListNpmPackagesResponse {
    return ListNpmPackagesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListNpmPackagesResponse>): ListNpmPackagesResponse {
    const message = createBaseListNpmPackagesResponse();
    message.npmPackages = object.npmPackages?.map((e) => NpmPackage.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetNpmPackageRequest(): GetNpmPackageRequest {
  return { name: "" };
}

export const GetNpmPackageRequest: MessageFns<GetNpmPackageRequest> = {
  encode(message: GetNpmPackageRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetNpmPackageRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetNpmPackageRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetNpmPackageRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetNpmPackageRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetNpmPackageRequest>): GetNpmPackageRequest {
    return GetNpmPackageRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetNpmPackageRequest>): GetNpmPackageRequest {
    const message = createBaseGetNpmPackageRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBasePythonPackage(): PythonPackage {
  return { name: "", uri: "", packageName: "", version: "", createTime: undefined, updateTime: undefined };
}

export const PythonPackage: MessageFns<PythonPackage> = {
  encode(message: PythonPackage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.uri !== "") {
      writer.uint32(18).string(message.uri);
    }
    if (message.packageName !== "") {
      writer.uint32(26).string(message.packageName);
    }
    if (message.version !== "") {
      writer.uint32(34).string(message.version);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(50).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PythonPackage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePythonPackage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.uri = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.packageName = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.version = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PythonPackage {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      uri: isSet(object.uri) ? globalThis.String(object.uri) : "",
      packageName: isSet(object.packageName) ? globalThis.String(object.packageName) : "",
      version: isSet(object.version) ? globalThis.String(object.version) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
    };
  },

  toJSON(message: PythonPackage): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.uri !== "") {
      obj.uri = message.uri;
    }
    if (message.packageName !== "") {
      obj.packageName = message.packageName;
    }
    if (message.version !== "") {
      obj.version = message.version;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<PythonPackage>): PythonPackage {
    return PythonPackage.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PythonPackage>): PythonPackage {
    const message = createBasePythonPackage();
    message.name = object.name ?? "";
    message.uri = object.uri ?? "";
    message.packageName = object.packageName ?? "";
    message.version = object.version ?? "";
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    return message;
  },
};

function createBaseListPythonPackagesRequest(): ListPythonPackagesRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListPythonPackagesRequest: MessageFns<ListPythonPackagesRequest> = {
  encode(message: ListPythonPackagesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListPythonPackagesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListPythonPackagesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListPythonPackagesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListPythonPackagesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListPythonPackagesRequest>): ListPythonPackagesRequest {
    return ListPythonPackagesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListPythonPackagesRequest>): ListPythonPackagesRequest {
    const message = createBaseListPythonPackagesRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListPythonPackagesResponse(): ListPythonPackagesResponse {
  return { pythonPackages: [], nextPageToken: "" };
}

export const ListPythonPackagesResponse: MessageFns<ListPythonPackagesResponse> = {
  encode(message: ListPythonPackagesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.pythonPackages) {
      PythonPackage.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListPythonPackagesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListPythonPackagesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.pythonPackages.push(PythonPackage.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListPythonPackagesResponse {
    return {
      pythonPackages: globalThis.Array.isArray(object?.pythonPackages)
        ? object.pythonPackages.map((e: any) => PythonPackage.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListPythonPackagesResponse): unknown {
    const obj: any = {};
    if (message.pythonPackages?.length) {
      obj.pythonPackages = message.pythonPackages.map((e) => PythonPackage.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListPythonPackagesResponse>): ListPythonPackagesResponse {
    return ListPythonPackagesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListPythonPackagesResponse>): ListPythonPackagesResponse {
    const message = createBaseListPythonPackagesResponse();
    message.pythonPackages = object.pythonPackages?.map((e) => PythonPackage.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetPythonPackageRequest(): GetPythonPackageRequest {
  return { name: "" };
}

export const GetPythonPackageRequest: MessageFns<GetPythonPackageRequest> = {
  encode(message: GetPythonPackageRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetPythonPackageRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPythonPackageRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetPythonPackageRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetPythonPackageRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetPythonPackageRequest>): GetPythonPackageRequest {
    return GetPythonPackageRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetPythonPackageRequest>): GetPythonPackageRequest {
    const message = createBaseGetPythonPackageRequest();
    message.name = object.name ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
