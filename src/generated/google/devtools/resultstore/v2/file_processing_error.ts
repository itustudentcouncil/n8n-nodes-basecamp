// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/devtools/resultstore/v2/file_processing_error.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.devtools.resultstore.v2";

/** Errors in file post-processing are categorized using this enum. */
export enum FileProcessingErrorType {
  /** FILE_PROCESSING_ERROR_TYPE_UNSPECIFIED - Type unspecified or not listed here. */
  FILE_PROCESSING_ERROR_TYPE_UNSPECIFIED = 0,
  /** GENERIC_READ_ERROR - A read error occurred trying to read the file. */
  GENERIC_READ_ERROR = 1,
  /** GENERIC_PARSE_ERROR - There was an error trying to parse the file. */
  GENERIC_PARSE_ERROR = 2,
  /** FILE_TOO_LARGE - File is exceeds size limit. */
  FILE_TOO_LARGE = 3,
  /** OUTPUT_TOO_LARGE - The result of parsing the file exceeded size limit. */
  OUTPUT_TOO_LARGE = 4,
  /** ACCESS_DENIED - Read access to the file was denied by file system. */
  ACCESS_DENIED = 5,
  /** DEADLINE_EXCEEDED - Deadline exceeded trying to read the file. */
  DEADLINE_EXCEEDED = 6,
  /** NOT_FOUND - File not found. */
  NOT_FOUND = 7,
  /** FILE_EMPTY - File is empty but was expected to have content. */
  FILE_EMPTY = 8,
  UNRECOGNIZED = -1,
}

export function fileProcessingErrorTypeFromJSON(object: any): FileProcessingErrorType {
  switch (object) {
    case 0:
    case "FILE_PROCESSING_ERROR_TYPE_UNSPECIFIED":
      return FileProcessingErrorType.FILE_PROCESSING_ERROR_TYPE_UNSPECIFIED;
    case 1:
    case "GENERIC_READ_ERROR":
      return FileProcessingErrorType.GENERIC_READ_ERROR;
    case 2:
    case "GENERIC_PARSE_ERROR":
      return FileProcessingErrorType.GENERIC_PARSE_ERROR;
    case 3:
    case "FILE_TOO_LARGE":
      return FileProcessingErrorType.FILE_TOO_LARGE;
    case 4:
    case "OUTPUT_TOO_LARGE":
      return FileProcessingErrorType.OUTPUT_TOO_LARGE;
    case 5:
    case "ACCESS_DENIED":
      return FileProcessingErrorType.ACCESS_DENIED;
    case 6:
    case "DEADLINE_EXCEEDED":
      return FileProcessingErrorType.DEADLINE_EXCEEDED;
    case 7:
    case "NOT_FOUND":
      return FileProcessingErrorType.NOT_FOUND;
    case 8:
    case "FILE_EMPTY":
      return FileProcessingErrorType.FILE_EMPTY;
    case -1:
    case "UNRECOGNIZED":
    default:
      return FileProcessingErrorType.UNRECOGNIZED;
  }
}

export function fileProcessingErrorTypeToJSON(object: FileProcessingErrorType): string {
  switch (object) {
    case FileProcessingErrorType.FILE_PROCESSING_ERROR_TYPE_UNSPECIFIED:
      return "FILE_PROCESSING_ERROR_TYPE_UNSPECIFIED";
    case FileProcessingErrorType.GENERIC_READ_ERROR:
      return "GENERIC_READ_ERROR";
    case FileProcessingErrorType.GENERIC_PARSE_ERROR:
      return "GENERIC_PARSE_ERROR";
    case FileProcessingErrorType.FILE_TOO_LARGE:
      return "FILE_TOO_LARGE";
    case FileProcessingErrorType.OUTPUT_TOO_LARGE:
      return "OUTPUT_TOO_LARGE";
    case FileProcessingErrorType.ACCESS_DENIED:
      return "ACCESS_DENIED";
    case FileProcessingErrorType.DEADLINE_EXCEEDED:
      return "DEADLINE_EXCEEDED";
    case FileProcessingErrorType.NOT_FOUND:
      return "NOT_FOUND";
    case FileProcessingErrorType.FILE_EMPTY:
      return "FILE_EMPTY";
    case FileProcessingErrorType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Stores errors reading or parsing a file during post-processing. */
export interface FileProcessingErrors {
  /** The uid of the File being read or parsed. */
  fileUid: string;
  /** What went wrong. */
  fileProcessingErrors: FileProcessingError[];
}

/** Stores an error reading or parsing a file during post-processing. */
export interface FileProcessingError {
  /** The type of error that occurred. */
  type: FileProcessingErrorType;
  /** Error message describing the problem. */
  message: string;
}

function createBaseFileProcessingErrors(): FileProcessingErrors {
  return { fileUid: "", fileProcessingErrors: [] };
}

export const FileProcessingErrors: MessageFns<FileProcessingErrors> = {
  encode(message: FileProcessingErrors, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.fileUid !== "") {
      writer.uint32(10).string(message.fileUid);
    }
    for (const v of message.fileProcessingErrors) {
      FileProcessingError.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FileProcessingErrors {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFileProcessingErrors();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.fileUid = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.fileProcessingErrors.push(FileProcessingError.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FileProcessingErrors {
    return {
      fileUid: isSet(object.fileUid) ? globalThis.String(object.fileUid) : "",
      fileProcessingErrors: globalThis.Array.isArray(object?.fileProcessingErrors)
        ? object.fileProcessingErrors.map((e: any) => FileProcessingError.fromJSON(e))
        : [],
    };
  },

  toJSON(message: FileProcessingErrors): unknown {
    const obj: any = {};
    if (message.fileUid !== "") {
      obj.fileUid = message.fileUid;
    }
    if (message.fileProcessingErrors?.length) {
      obj.fileProcessingErrors = message.fileProcessingErrors.map((e) => FileProcessingError.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<FileProcessingErrors>): FileProcessingErrors {
    return FileProcessingErrors.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FileProcessingErrors>): FileProcessingErrors {
    const message = createBaseFileProcessingErrors();
    message.fileUid = object.fileUid ?? "";
    message.fileProcessingErrors = object.fileProcessingErrors?.map((e) => FileProcessingError.fromPartial(e)) || [];
    return message;
  },
};

function createBaseFileProcessingError(): FileProcessingError {
  return { type: 0, message: "" };
}

export const FileProcessingError: MessageFns<FileProcessingError> = {
  encode(message: FileProcessingError, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FileProcessingError {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFileProcessingError();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FileProcessingError {
    return {
      type: isSet(object.type) ? fileProcessingErrorTypeFromJSON(object.type) : 0,
      message: isSet(object.message) ? globalThis.String(object.message) : "",
    };
  },

  toJSON(message: FileProcessingError): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = fileProcessingErrorTypeToJSON(message.type);
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create(base?: DeepPartial<FileProcessingError>): FileProcessingError {
    return FileProcessingError.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FileProcessingError>): FileProcessingError {
    const message = createBaseFileProcessingError();
    message.type = object.type ?? 0;
    message.message = object.message ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
