// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/devtools/resultstore/v2/download_metadata.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { UploadStatus, uploadStatusFromJSON, uploadStatusToJSON } from "./common.js";

export const protobufPackage = "google.devtools.resultstore.v2";

/** The download metadata for an invocation */
export interface DownloadMetadata {
  /**
   * The name of the download metadata.  Its format will be:
   * invocations/${INVOCATION_ID}/downloadMetadata
   */
  name: string;
  /**
   * Indicates the upload status of the invocation, whether it is
   * post-processing, or immutable, etc.
   */
  uploadStatus: UploadStatus;
  /**
   * If populated, the time when CreateInvocation is called.
   * This does not necessarily line up with the start time of the invocation.
   * Please use invocation.timing.start_time for that purpose.
   */
  createTime:
    | Date
    | undefined;
  /**
   * If populated, the time when FinalizeInvocation is called or when invocation
   * is automatically finalized. This field is populated when upload_status
   * becomes POST_PROCESSING.
   */
  finalizeTime:
    | Date
    | undefined;
  /**
   * If populated, the time when all post processing is done and the invocation
   * is marked as immutable. This field is populated when upload_status becomes
   * IMMUTABLE.
   */
  immutableTime: Date | undefined;
}

function createBaseDownloadMetadata(): DownloadMetadata {
  return { name: "", uploadStatus: 0, createTime: undefined, finalizeTime: undefined, immutableTime: undefined };
}

export const DownloadMetadata: MessageFns<DownloadMetadata> = {
  encode(message: DownloadMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.uploadStatus !== 0) {
      writer.uint32(16).int32(message.uploadStatus);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(26).fork()).join();
    }
    if (message.finalizeTime !== undefined) {
      Timestamp.encode(toTimestamp(message.finalizeTime), writer.uint32(34).fork()).join();
    }
    if (message.immutableTime !== undefined) {
      Timestamp.encode(toTimestamp(message.immutableTime), writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DownloadMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDownloadMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.uploadStatus = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.finalizeTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.immutableTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DownloadMetadata {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      uploadStatus: isSet(object.uploadStatus) ? uploadStatusFromJSON(object.uploadStatus) : 0,
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      finalizeTime: isSet(object.finalizeTime) ? fromJsonTimestamp(object.finalizeTime) : undefined,
      immutableTime: isSet(object.immutableTime) ? fromJsonTimestamp(object.immutableTime) : undefined,
    };
  },

  toJSON(message: DownloadMetadata): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.uploadStatus !== 0) {
      obj.uploadStatus = uploadStatusToJSON(message.uploadStatus);
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.finalizeTime !== undefined) {
      obj.finalizeTime = message.finalizeTime.toISOString();
    }
    if (message.immutableTime !== undefined) {
      obj.immutableTime = message.immutableTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<DownloadMetadata>): DownloadMetadata {
    return DownloadMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DownloadMetadata>): DownloadMetadata {
    const message = createBaseDownloadMetadata();
    message.name = object.name ?? "";
    message.uploadStatus = object.uploadStatus ?? 0;
    message.createTime = object.createTime ?? undefined;
    message.finalizeTime = object.finalizeTime ?? undefined;
    message.immutableTime = object.immutableTime ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
