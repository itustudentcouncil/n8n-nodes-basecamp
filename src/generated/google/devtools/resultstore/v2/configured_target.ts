// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/devtools/resultstore/v2/configured_target.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Duration } from "../../../protobuf/duration.js";
import { Property, StatusAttributes, Timing } from "./common.js";
import { File } from "./file.js";

export const protobufPackage = "google.devtools.resultstore.v2";

/**
 * Each ConfiguredTarget represents data for a given configuration of a given
 * target in a given Invocation.
 * Every ConfiguredTarget should have at least one Action as a child resource
 * before the invocation is finalized. Refer to the Action's documentation for
 * more info on this.
 */
export interface ConfiguredTarget {
  /**
   * The resource name.  Its format must be:
   * invocations/${INVOCATION_ID}/targets/${url_encode(TARGET_ID)}/configuredTargets/${url_encode(CONFIG_ID)}
   * where ${CONFIG_ID} must match the ID of an existing Configuration under
   * this Invocation.
   */
  name: string;
  /**
   * The resource ID components that identify the ConfiguredTarget. They must
   * match the resource name after proper encoding.
   */
  id:
    | ConfiguredTarget_Id
    | undefined;
  /**
   * The aggregate status for this configuration of this target. If testing
   * was not requested, set this to the build status (e.g. BUILT or
   * FAILED_TO_BUILD).
   */
  statusAttributes:
    | StatusAttributes
    | undefined;
  /** Captures the start time and duration of this configured target. */
  timing:
    | Timing
    | undefined;
  /** Test specific attributes for this ConfiguredTarget. */
  testAttributes:
    | ConfiguredTestAttributes
    | undefined;
  /**
   * Arbitrary name-value pairs.
   * This is implemented as a multi-map. Multiple properties are allowed with
   * the same key. Properties will be returned in lexicographical order by key.
   */
  properties: Property[];
  /**
   * A list of file references for configured target level files.
   * The file IDs must be unique within this list. Duplicate file IDs will
   * result in an error. Files will be returned in lexicographical order by ID.
   */
  files: File[];
}

/** The resource ID components that identify the ConfiguredTarget. */
export interface ConfiguredTarget_Id {
  /** The Invocation ID. */
  invocationId: string;
  /** The Target ID. */
  targetId: string;
  /** The Configuration ID. */
  configurationId: string;
}

/** Attributes that apply only to test actions under this configured target. */
export interface ConfiguredTestAttributes {
  /**
   * Total number of test runs. For example, in bazel this is specified with
   * --runs_per_test. Zero if runs_per_test is not used.
   */
  totalRunCount: number;
  /** Total number of test shards. Zero if shard count was not specified. */
  totalShardCount: number;
  /** How long test is allowed to run. */
  timeoutDuration: Duration | undefined;
}

function createBaseConfiguredTarget(): ConfiguredTarget {
  return {
    name: "",
    id: undefined,
    statusAttributes: undefined,
    timing: undefined,
    testAttributes: undefined,
    properties: [],
    files: [],
  };
}

export const ConfiguredTarget: MessageFns<ConfiguredTarget> = {
  encode(message: ConfiguredTarget, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.id !== undefined) {
      ConfiguredTarget_Id.encode(message.id, writer.uint32(18).fork()).join();
    }
    if (message.statusAttributes !== undefined) {
      StatusAttributes.encode(message.statusAttributes, writer.uint32(26).fork()).join();
    }
    if (message.timing !== undefined) {
      Timing.encode(message.timing, writer.uint32(34).fork()).join();
    }
    if (message.testAttributes !== undefined) {
      ConfiguredTestAttributes.encode(message.testAttributes, writer.uint32(50).fork()).join();
    }
    for (const v of message.properties) {
      Property.encode(v!, writer.uint32(58).fork()).join();
    }
    for (const v of message.files) {
      File.encode(v!, writer.uint32(66).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConfiguredTarget {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConfiguredTarget();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.id = ConfiguredTarget_Id.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.statusAttributes = StatusAttributes.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.timing = Timing.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.testAttributes = ConfiguredTestAttributes.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.properties.push(Property.decode(reader, reader.uint32()));
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.files.push(File.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConfiguredTarget {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      id: isSet(object.id) ? ConfiguredTarget_Id.fromJSON(object.id) : undefined,
      statusAttributes: isSet(object.statusAttributes) ? StatusAttributes.fromJSON(object.statusAttributes) : undefined,
      timing: isSet(object.timing) ? Timing.fromJSON(object.timing) : undefined,
      testAttributes: isSet(object.testAttributes)
        ? ConfiguredTestAttributes.fromJSON(object.testAttributes)
        : undefined,
      properties: globalThis.Array.isArray(object?.properties)
        ? object.properties.map((e: any) => Property.fromJSON(e))
        : [],
      files: globalThis.Array.isArray(object?.files) ? object.files.map((e: any) => File.fromJSON(e)) : [],
    };
  },

  toJSON(message: ConfiguredTarget): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.id !== undefined) {
      obj.id = ConfiguredTarget_Id.toJSON(message.id);
    }
    if (message.statusAttributes !== undefined) {
      obj.statusAttributes = StatusAttributes.toJSON(message.statusAttributes);
    }
    if (message.timing !== undefined) {
      obj.timing = Timing.toJSON(message.timing);
    }
    if (message.testAttributes !== undefined) {
      obj.testAttributes = ConfiguredTestAttributes.toJSON(message.testAttributes);
    }
    if (message.properties?.length) {
      obj.properties = message.properties.map((e) => Property.toJSON(e));
    }
    if (message.files?.length) {
      obj.files = message.files.map((e) => File.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ConfiguredTarget>): ConfiguredTarget {
    return ConfiguredTarget.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ConfiguredTarget>): ConfiguredTarget {
    const message = createBaseConfiguredTarget();
    message.name = object.name ?? "";
    message.id = (object.id !== undefined && object.id !== null)
      ? ConfiguredTarget_Id.fromPartial(object.id)
      : undefined;
    message.statusAttributes = (object.statusAttributes !== undefined && object.statusAttributes !== null)
      ? StatusAttributes.fromPartial(object.statusAttributes)
      : undefined;
    message.timing = (object.timing !== undefined && object.timing !== null)
      ? Timing.fromPartial(object.timing)
      : undefined;
    message.testAttributes = (object.testAttributes !== undefined && object.testAttributes !== null)
      ? ConfiguredTestAttributes.fromPartial(object.testAttributes)
      : undefined;
    message.properties = object.properties?.map((e) => Property.fromPartial(e)) || [];
    message.files = object.files?.map((e) => File.fromPartial(e)) || [];
    return message;
  },
};

function createBaseConfiguredTarget_Id(): ConfiguredTarget_Id {
  return { invocationId: "", targetId: "", configurationId: "" };
}

export const ConfiguredTarget_Id: MessageFns<ConfiguredTarget_Id> = {
  encode(message: ConfiguredTarget_Id, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.invocationId !== "") {
      writer.uint32(10).string(message.invocationId);
    }
    if (message.targetId !== "") {
      writer.uint32(18).string(message.targetId);
    }
    if (message.configurationId !== "") {
      writer.uint32(26).string(message.configurationId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConfiguredTarget_Id {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConfiguredTarget_Id();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.invocationId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.targetId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.configurationId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConfiguredTarget_Id {
    return {
      invocationId: isSet(object.invocationId) ? globalThis.String(object.invocationId) : "",
      targetId: isSet(object.targetId) ? globalThis.String(object.targetId) : "",
      configurationId: isSet(object.configurationId) ? globalThis.String(object.configurationId) : "",
    };
  },

  toJSON(message: ConfiguredTarget_Id): unknown {
    const obj: any = {};
    if (message.invocationId !== "") {
      obj.invocationId = message.invocationId;
    }
    if (message.targetId !== "") {
      obj.targetId = message.targetId;
    }
    if (message.configurationId !== "") {
      obj.configurationId = message.configurationId;
    }
    return obj;
  },

  create(base?: DeepPartial<ConfiguredTarget_Id>): ConfiguredTarget_Id {
    return ConfiguredTarget_Id.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ConfiguredTarget_Id>): ConfiguredTarget_Id {
    const message = createBaseConfiguredTarget_Id();
    message.invocationId = object.invocationId ?? "";
    message.targetId = object.targetId ?? "";
    message.configurationId = object.configurationId ?? "";
    return message;
  },
};

function createBaseConfiguredTestAttributes(): ConfiguredTestAttributes {
  return { totalRunCount: 0, totalShardCount: 0, timeoutDuration: undefined };
}

export const ConfiguredTestAttributes: MessageFns<ConfiguredTestAttributes> = {
  encode(message: ConfiguredTestAttributes, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.totalRunCount !== 0) {
      writer.uint32(16).int32(message.totalRunCount);
    }
    if (message.totalShardCount !== 0) {
      writer.uint32(24).int32(message.totalShardCount);
    }
    if (message.timeoutDuration !== undefined) {
      Duration.encode(message.timeoutDuration, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConfiguredTestAttributes {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConfiguredTestAttributes();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 16) {
            break;
          }

          message.totalRunCount = reader.int32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.totalShardCount = reader.int32();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.timeoutDuration = Duration.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConfiguredTestAttributes {
    return {
      totalRunCount: isSet(object.totalRunCount) ? globalThis.Number(object.totalRunCount) : 0,
      totalShardCount: isSet(object.totalShardCount) ? globalThis.Number(object.totalShardCount) : 0,
      timeoutDuration: isSet(object.timeoutDuration) ? Duration.fromJSON(object.timeoutDuration) : undefined,
    };
  },

  toJSON(message: ConfiguredTestAttributes): unknown {
    const obj: any = {};
    if (message.totalRunCount !== 0) {
      obj.totalRunCount = Math.round(message.totalRunCount);
    }
    if (message.totalShardCount !== 0) {
      obj.totalShardCount = Math.round(message.totalShardCount);
    }
    if (message.timeoutDuration !== undefined) {
      obj.timeoutDuration = Duration.toJSON(message.timeoutDuration);
    }
    return obj;
  },

  create(base?: DeepPartial<ConfiguredTestAttributes>): ConfiguredTestAttributes {
    return ConfiguredTestAttributes.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ConfiguredTestAttributes>): ConfiguredTestAttributes {
    const message = createBaseConfiguredTestAttributes();
    message.totalRunCount = object.totalRunCount ?? 0;
    message.totalShardCount = object.totalShardCount ?? 0;
    message.timeoutDuration = (object.timeoutDuration !== undefined && object.timeoutDuration !== null)
      ? Duration.fromPartial(object.timeoutDuration)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
