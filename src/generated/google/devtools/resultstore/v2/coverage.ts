// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/devtools/resultstore/v2/coverage.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.devtools.resultstore.v2";

/** Describes line coverage for a file */
export interface LineCoverage {
  /**
   * Which source lines in the file represent the start of a statement that was
   * instrumented to detect whether it was executed by the test.
   *
   * This is a bitfield where i-th bit corresponds to the i-th line. Divide line
   * number by 8 to get index into byte array. Mod line number by 8 to get bit
   * number (0 = LSB, 7 = MSB).
   *
   * A 1 denotes the line was instrumented.
   * A 0 denotes the line was not instrumented.
   */
  instrumentedLines: Buffer;
  /**
   * Which of the instrumented source lines were executed by the test. Should
   * include lines that were not instrumented.
   *
   * This is a bitfield where i-th bit corresponds to the i-th line. Divide line
   * number by 8 to get index into byte array. Mod line number by 8 to get bit
   * number (0 = LSB, 7 = MSB).
   *
   * A 1 denotes the line was executed.
   * A 0 denotes the line was not executed.
   */
  executedLines: Buffer;
}

/** Describes branch coverage for a file */
export interface BranchCoverage {
  /**
   * The field branch_present denotes the lines containing at least one branch.
   *
   * This is a bitfield where i-th bit corresponds to the i-th line. Divide line
   * number by 8 to get index into byte array. Mod line number by 8 to get bit
   * number (0 = LSB, 7 = MSB).
   *
   * A 1 denotes the line contains at least one branch.
   * A 0 denotes the line contains no branches.
   */
  branchPresent: Buffer;
  /**
   * Contains the number of branches present, only for the lines which have the
   * corresponding bit set in branch_present, in a relative order ignoring
   * lines which do not have any branches.
   */
  branchesInLine: number[];
  /**
   * As each branch can have any one of the following three states: not
   * executed, executed but not taken, executed and taken.
   *
   * This is a bitfield where i-th bit corresponds to the i-th branch. Divide
   * branch number by 8 to get index into byte array. Mod branch number by 8 to
   * get bit number (0 = LSB, 7 = MSB).
   *
   * i-th bit of the following two byte arrays are used to denote the above
   * mentioned states.
   *
   * not executed: i-th bit of executed == 0 && i-th bit of taken == 0
   * executed but not taken: i-th bit of executed == 1 && i-th bit of taken == 0
   * executed and taken: i-th bit of executed == 1 && i-th bit of taken == 1
   */
  executed: Buffer;
  /** Described above. */
  taken: Buffer;
}

/** Describes code coverage for a particular file under test. */
export interface FileCoverage {
  /** Path of source file within the SourceContext of this Invocation. */
  path: string;
  /** Details of lines in a file for calculating line coverage. */
  lineCoverage:
    | LineCoverage
    | undefined;
  /** Details of branches in a file for calculating branch coverage. */
  branchCoverage: BranchCoverage | undefined;
}

/**
 * Describes code coverage for a build or test Action. This is used to store
 * baseline coverage for build Actions and test coverage for test Actions.
 */
export interface ActionCoverage {
  /** List of coverage info for all source files that the TestResult covers. */
  fileCoverages: FileCoverage[];
}

/**
 * Describes aggregate code coverage for a collection of build or test Actions.
 * A line or branch is covered if and only if it is covered in any of the build
 * or test actions.
 */
export interface AggregateCoverage {
  /** Aggregated coverage info for all source files that the actions cover. */
  fileCoverages: FileCoverage[];
}

function createBaseLineCoverage(): LineCoverage {
  return { instrumentedLines: Buffer.alloc(0), executedLines: Buffer.alloc(0) };
}

export const LineCoverage: MessageFns<LineCoverage> = {
  encode(message: LineCoverage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.instrumentedLines.length !== 0) {
      writer.uint32(10).bytes(message.instrumentedLines);
    }
    if (message.executedLines.length !== 0) {
      writer.uint32(18).bytes(message.executedLines);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LineCoverage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLineCoverage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.instrumentedLines = Buffer.from(reader.bytes());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.executedLines = Buffer.from(reader.bytes());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LineCoverage {
    return {
      instrumentedLines: isSet(object.instrumentedLines)
        ? Buffer.from(bytesFromBase64(object.instrumentedLines))
        : Buffer.alloc(0),
      executedLines: isSet(object.executedLines) ? Buffer.from(bytesFromBase64(object.executedLines)) : Buffer.alloc(0),
    };
  },

  toJSON(message: LineCoverage): unknown {
    const obj: any = {};
    if (message.instrumentedLines.length !== 0) {
      obj.instrumentedLines = base64FromBytes(message.instrumentedLines);
    }
    if (message.executedLines.length !== 0) {
      obj.executedLines = base64FromBytes(message.executedLines);
    }
    return obj;
  },

  create(base?: DeepPartial<LineCoverage>): LineCoverage {
    return LineCoverage.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LineCoverage>): LineCoverage {
    const message = createBaseLineCoverage();
    message.instrumentedLines = object.instrumentedLines ?? Buffer.alloc(0);
    message.executedLines = object.executedLines ?? Buffer.alloc(0);
    return message;
  },
};

function createBaseBranchCoverage(): BranchCoverage {
  return { branchPresent: Buffer.alloc(0), branchesInLine: [], executed: Buffer.alloc(0), taken: Buffer.alloc(0) };
}

export const BranchCoverage: MessageFns<BranchCoverage> = {
  encode(message: BranchCoverage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.branchPresent.length !== 0) {
      writer.uint32(10).bytes(message.branchPresent);
    }
    writer.uint32(18).fork();
    for (const v of message.branchesInLine) {
      writer.int32(v);
    }
    writer.join();
    if (message.executed.length !== 0) {
      writer.uint32(26).bytes(message.executed);
    }
    if (message.taken.length !== 0) {
      writer.uint32(34).bytes(message.taken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BranchCoverage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBranchCoverage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.branchPresent = Buffer.from(reader.bytes());
          continue;
        case 2:
          if (tag === 16) {
            message.branchesInLine.push(reader.int32());

            continue;
          }

          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.branchesInLine.push(reader.int32());
            }

            continue;
          }

          break;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.executed = Buffer.from(reader.bytes());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.taken = Buffer.from(reader.bytes());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BranchCoverage {
    return {
      branchPresent: isSet(object.branchPresent) ? Buffer.from(bytesFromBase64(object.branchPresent)) : Buffer.alloc(0),
      branchesInLine: globalThis.Array.isArray(object?.branchesInLine)
        ? object.branchesInLine.map((e: any) => globalThis.Number(e))
        : [],
      executed: isSet(object.executed) ? Buffer.from(bytesFromBase64(object.executed)) : Buffer.alloc(0),
      taken: isSet(object.taken) ? Buffer.from(bytesFromBase64(object.taken)) : Buffer.alloc(0),
    };
  },

  toJSON(message: BranchCoverage): unknown {
    const obj: any = {};
    if (message.branchPresent.length !== 0) {
      obj.branchPresent = base64FromBytes(message.branchPresent);
    }
    if (message.branchesInLine?.length) {
      obj.branchesInLine = message.branchesInLine.map((e) => Math.round(e));
    }
    if (message.executed.length !== 0) {
      obj.executed = base64FromBytes(message.executed);
    }
    if (message.taken.length !== 0) {
      obj.taken = base64FromBytes(message.taken);
    }
    return obj;
  },

  create(base?: DeepPartial<BranchCoverage>): BranchCoverage {
    return BranchCoverage.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BranchCoverage>): BranchCoverage {
    const message = createBaseBranchCoverage();
    message.branchPresent = object.branchPresent ?? Buffer.alloc(0);
    message.branchesInLine = object.branchesInLine?.map((e) => e) || [];
    message.executed = object.executed ?? Buffer.alloc(0);
    message.taken = object.taken ?? Buffer.alloc(0);
    return message;
  },
};

function createBaseFileCoverage(): FileCoverage {
  return { path: "", lineCoverage: undefined, branchCoverage: undefined };
}

export const FileCoverage: MessageFns<FileCoverage> = {
  encode(message: FileCoverage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.path !== "") {
      writer.uint32(10).string(message.path);
    }
    if (message.lineCoverage !== undefined) {
      LineCoverage.encode(message.lineCoverage, writer.uint32(18).fork()).join();
    }
    if (message.branchCoverage !== undefined) {
      BranchCoverage.encode(message.branchCoverage, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FileCoverage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFileCoverage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.path = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.lineCoverage = LineCoverage.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.branchCoverage = BranchCoverage.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FileCoverage {
    return {
      path: isSet(object.path) ? globalThis.String(object.path) : "",
      lineCoverage: isSet(object.lineCoverage) ? LineCoverage.fromJSON(object.lineCoverage) : undefined,
      branchCoverage: isSet(object.branchCoverage) ? BranchCoverage.fromJSON(object.branchCoverage) : undefined,
    };
  },

  toJSON(message: FileCoverage): unknown {
    const obj: any = {};
    if (message.path !== "") {
      obj.path = message.path;
    }
    if (message.lineCoverage !== undefined) {
      obj.lineCoverage = LineCoverage.toJSON(message.lineCoverage);
    }
    if (message.branchCoverage !== undefined) {
      obj.branchCoverage = BranchCoverage.toJSON(message.branchCoverage);
    }
    return obj;
  },

  create(base?: DeepPartial<FileCoverage>): FileCoverage {
    return FileCoverage.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FileCoverage>): FileCoverage {
    const message = createBaseFileCoverage();
    message.path = object.path ?? "";
    message.lineCoverage = (object.lineCoverage !== undefined && object.lineCoverage !== null)
      ? LineCoverage.fromPartial(object.lineCoverage)
      : undefined;
    message.branchCoverage = (object.branchCoverage !== undefined && object.branchCoverage !== null)
      ? BranchCoverage.fromPartial(object.branchCoverage)
      : undefined;
    return message;
  },
};

function createBaseActionCoverage(): ActionCoverage {
  return { fileCoverages: [] };
}

export const ActionCoverage: MessageFns<ActionCoverage> = {
  encode(message: ActionCoverage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.fileCoverages) {
      FileCoverage.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ActionCoverage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseActionCoverage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.fileCoverages.push(FileCoverage.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ActionCoverage {
    return {
      fileCoverages: globalThis.Array.isArray(object?.fileCoverages)
        ? object.fileCoverages.map((e: any) => FileCoverage.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ActionCoverage): unknown {
    const obj: any = {};
    if (message.fileCoverages?.length) {
      obj.fileCoverages = message.fileCoverages.map((e) => FileCoverage.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ActionCoverage>): ActionCoverage {
    return ActionCoverage.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ActionCoverage>): ActionCoverage {
    const message = createBaseActionCoverage();
    message.fileCoverages = object.fileCoverages?.map((e) => FileCoverage.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAggregateCoverage(): AggregateCoverage {
  return { fileCoverages: [] };
}

export const AggregateCoverage: MessageFns<AggregateCoverage> = {
  encode(message: AggregateCoverage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.fileCoverages) {
      FileCoverage.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AggregateCoverage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAggregateCoverage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.fileCoverages.push(FileCoverage.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AggregateCoverage {
    return {
      fileCoverages: globalThis.Array.isArray(object?.fileCoverages)
        ? object.fileCoverages.map((e: any) => FileCoverage.fromJSON(e))
        : [],
    };
  },

  toJSON(message: AggregateCoverage): unknown {
    const obj: any = {};
    if (message.fileCoverages?.length) {
      obj.fileCoverages = message.fileCoverages.map((e) => FileCoverage.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<AggregateCoverage>): AggregateCoverage {
    return AggregateCoverage.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AggregateCoverage>): AggregateCoverage {
    const message = createBaseAggregateCoverage();
    message.fileCoverages = object.fileCoverages?.map((e) => FileCoverage.fromPartial(e)) || [];
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
}

function base64FromBytes(arr: Uint8Array): string {
  return globalThis.Buffer.from(arr).toString("base64");
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
