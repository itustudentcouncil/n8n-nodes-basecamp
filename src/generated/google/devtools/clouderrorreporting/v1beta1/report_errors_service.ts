// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/devtools/clouderrorreporting/v1beta1/report_errors_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { ErrorContext, ServiceContext } from "./common.js";

export const protobufPackage = "google.devtools.clouderrorreporting.v1beta1";

/** A request for reporting an individual error event. */
export interface ReportErrorEventRequest {
  /**
   * Required. The resource name of the Google Cloud Platform project. Written
   * as `projects/{projectId}`, where `{projectId}` is the
   * [Google Cloud Platform project
   * ID](https://support.google.com/cloud/answer/6158840).
   *
   * Example: // `projects/my-project-123`.
   */
  projectName: string;
  /** Required. The error event to be reported. */
  event: ReportedErrorEvent | undefined;
}

/**
 * Response for reporting an individual error event.
 * Data may be added to this message in the future.
 */
export interface ReportErrorEventResponse {
}

/** An error event which is reported to the Error Reporting system. */
export interface ReportedErrorEvent {
  /**
   * Optional. Time when the event occurred.
   * If not provided, the time when the event was received by the
   * Error Reporting system is used. If provided, the time must not
   * exceed the [logs retention
   * period](https://cloud.google.com/logging/quotas#logs_retention_periods) in
   * the past, or be more than 24 hours in the future.
   * If an invalid time is provided, then an error is returned.
   */
  eventTime:
    | Date
    | undefined;
  /** Required. The service context in which this error has occurred. */
  serviceContext:
    | ServiceContext
    | undefined;
  /**
   * Required. The error message.
   * If no `context.reportLocation` is provided, the message must contain a
   * header (typically consisting of the exception type name and an error
   * message) and an exception stack trace in one of the supported programming
   * languages and formats.
   * Supported languages are Java, Python, JavaScript, Ruby, C#, PHP, and Go.
   * Supported stack trace formats are:
   *
   * * **Java**: Must be the return value of
   * [`Throwable.printStackTrace()`](https://docs.oracle.com/javase/7/docs/api/java/lang/Throwable.html#printStackTrace%28%29).
   * * **Python**: Must be the return value of
   * [`traceback.format_exc()`](https://docs.python.org/2/library/traceback.html#traceback.format_exc).
   * * **JavaScript**: Must be the value of
   * [`error.stack`](https://github.com/v8/v8/wiki/Stack-Trace-API) as returned
   * by V8.
   * * **Ruby**: Must contain frames returned by
   * [`Exception.backtrace`](https://ruby-doc.org/core-2.2.0/Exception.html#method-i-backtrace).
   * * **C#**: Must be the return value of
   * [`Exception.ToString()`](https://msdn.microsoft.com/en-us/library/system.exception.tostring.aspx).
   * * **PHP**: Must be prefixed with `"PHP (Notice|Parse error|Fatal
   * error|Warning): "` and contain the result of
   * [`(string)$exception`](https://php.net/manual/en/exception.tostring.php).
   * * **Go**: Must be the return value of
   * [`runtime.Stack()`](https://golang.org/pkg/runtime/debug/#Stack).
   */
  message: string;
  /** Optional. A description of the context in which the error occurred. */
  context: ErrorContext | undefined;
}

function createBaseReportErrorEventRequest(): ReportErrorEventRequest {
  return { projectName: "", event: undefined };
}

export const ReportErrorEventRequest: MessageFns<ReportErrorEventRequest> = {
  encode(message: ReportErrorEventRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.projectName !== "") {
      writer.uint32(10).string(message.projectName);
    }
    if (message.event !== undefined) {
      ReportedErrorEvent.encode(message.event, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReportErrorEventRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReportErrorEventRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.event = ReportedErrorEvent.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReportErrorEventRequest {
    return {
      projectName: isSet(object.projectName) ? globalThis.String(object.projectName) : "",
      event: isSet(object.event) ? ReportedErrorEvent.fromJSON(object.event) : undefined,
    };
  },

  toJSON(message: ReportErrorEventRequest): unknown {
    const obj: any = {};
    if (message.projectName !== "") {
      obj.projectName = message.projectName;
    }
    if (message.event !== undefined) {
      obj.event = ReportedErrorEvent.toJSON(message.event);
    }
    return obj;
  },

  create(base?: DeepPartial<ReportErrorEventRequest>): ReportErrorEventRequest {
    return ReportErrorEventRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ReportErrorEventRequest>): ReportErrorEventRequest {
    const message = createBaseReportErrorEventRequest();
    message.projectName = object.projectName ?? "";
    message.event = (object.event !== undefined && object.event !== null)
      ? ReportedErrorEvent.fromPartial(object.event)
      : undefined;
    return message;
  },
};

function createBaseReportErrorEventResponse(): ReportErrorEventResponse {
  return {};
}

export const ReportErrorEventResponse: MessageFns<ReportErrorEventResponse> = {
  encode(_: ReportErrorEventResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReportErrorEventResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReportErrorEventResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ReportErrorEventResponse {
    return {};
  },

  toJSON(_: ReportErrorEventResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<ReportErrorEventResponse>): ReportErrorEventResponse {
    return ReportErrorEventResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<ReportErrorEventResponse>): ReportErrorEventResponse {
    const message = createBaseReportErrorEventResponse();
    return message;
  },
};

function createBaseReportedErrorEvent(): ReportedErrorEvent {
  return { eventTime: undefined, serviceContext: undefined, message: "", context: undefined };
}

export const ReportedErrorEvent: MessageFns<ReportedErrorEvent> = {
  encode(message: ReportedErrorEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.eventTime !== undefined) {
      Timestamp.encode(toTimestamp(message.eventTime), writer.uint32(10).fork()).join();
    }
    if (message.serviceContext !== undefined) {
      ServiceContext.encode(message.serviceContext, writer.uint32(18).fork()).join();
    }
    if (message.message !== "") {
      writer.uint32(26).string(message.message);
    }
    if (message.context !== undefined) {
      ErrorContext.encode(message.context, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReportedErrorEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReportedErrorEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.eventTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.serviceContext = ServiceContext.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.message = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.context = ErrorContext.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReportedErrorEvent {
    return {
      eventTime: isSet(object.eventTime) ? fromJsonTimestamp(object.eventTime) : undefined,
      serviceContext: isSet(object.serviceContext) ? ServiceContext.fromJSON(object.serviceContext) : undefined,
      message: isSet(object.message) ? globalThis.String(object.message) : "",
      context: isSet(object.context) ? ErrorContext.fromJSON(object.context) : undefined,
    };
  },

  toJSON(message: ReportedErrorEvent): unknown {
    const obj: any = {};
    if (message.eventTime !== undefined) {
      obj.eventTime = message.eventTime.toISOString();
    }
    if (message.serviceContext !== undefined) {
      obj.serviceContext = ServiceContext.toJSON(message.serviceContext);
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    if (message.context !== undefined) {
      obj.context = ErrorContext.toJSON(message.context);
    }
    return obj;
  },

  create(base?: DeepPartial<ReportedErrorEvent>): ReportedErrorEvent {
    return ReportedErrorEvent.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ReportedErrorEvent>): ReportedErrorEvent {
    const message = createBaseReportedErrorEvent();
    message.eventTime = object.eventTime ?? undefined;
    message.serviceContext = (object.serviceContext !== undefined && object.serviceContext !== null)
      ? ServiceContext.fromPartial(object.serviceContext)
      : undefined;
    message.message = object.message ?? "";
    message.context = (object.context !== undefined && object.context !== null)
      ? ErrorContext.fromPartial(object.context)
      : undefined;
    return message;
  },
};

/** An API for reporting error events. */
export type ReportErrorsServiceDefinition = typeof ReportErrorsServiceDefinition;
export const ReportErrorsServiceDefinition = {
  name: "ReportErrorsService",
  fullName: "google.devtools.clouderrorreporting.v1beta1.ReportErrorsService",
  methods: {
    /**
     * Report an individual error event and record the event to a log.
     *
     * This endpoint accepts **either** an OAuth token,
     * **or** an [API key](https://support.google.com/cloud/answer/6158862)
     * for authentication. To use an API key, append it to the URL as the value of
     * a `key` parameter. For example:
     *
     * `POST
     * https://clouderrorreporting.googleapis.com/v1beta1/{projectName}/events:report?key=123ABC456`
     *
     * **Note:** [Error Reporting] (https://cloud.google.com/error-reporting)
     * is a service built on Cloud Logging and can analyze log entries when all of
     * the following are true:
     *
     * * Customer-managed encryption keys (CMEK) are disabled on the log bucket.
     * * The log bucket satisfies one of the following:
     *     * The log bucket is stored in the same project where the logs
     *     originated.
     *     * The logs were routed to a project, and then that project stored those
     *     logs in a log bucket that it owns.
     */
    reportErrorEvent: {
      name: "ReportErrorEvent",
      requestType: ReportErrorEventRequest,
      requestStream: false,
      responseType: ReportErrorEventResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([18, 112, 114, 111, 106, 101, 99, 116, 95, 110, 97, 109, 101, 44, 101, 118, 101, 110, 116]),
          ],
          578365826: [
            Buffer.from([
              57,
              58,
              5,
              101,
              118,
              101,
              110,
              116,
              34,
              48,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              95,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              47,
              101,
              118,
              101,
              110,
              116,
              115,
              58,
              114,
              101,
              112,
              111,
              114,
              116,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface ReportErrorsServiceImplementation<CallContextExt = {}> {
  /**
   * Report an individual error event and record the event to a log.
   *
   * This endpoint accepts **either** an OAuth token,
   * **or** an [API key](https://support.google.com/cloud/answer/6158862)
   * for authentication. To use an API key, append it to the URL as the value of
   * a `key` parameter. For example:
   *
   * `POST
   * https://clouderrorreporting.googleapis.com/v1beta1/{projectName}/events:report?key=123ABC456`
   *
   * **Note:** [Error Reporting] (https://cloud.google.com/error-reporting)
   * is a service built on Cloud Logging and can analyze log entries when all of
   * the following are true:
   *
   * * Customer-managed encryption keys (CMEK) are disabled on the log bucket.
   * * The log bucket satisfies one of the following:
   *     * The log bucket is stored in the same project where the logs
   *     originated.
   *     * The logs were routed to a project, and then that project stored those
   *     logs in a log bucket that it owns.
   */
  reportErrorEvent(
    request: ReportErrorEventRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ReportErrorEventResponse>>;
}

export interface ReportErrorsServiceClient<CallOptionsExt = {}> {
  /**
   * Report an individual error event and record the event to a log.
   *
   * This endpoint accepts **either** an OAuth token,
   * **or** an [API key](https://support.google.com/cloud/answer/6158862)
   * for authentication. To use an API key, append it to the URL as the value of
   * a `key` parameter. For example:
   *
   * `POST
   * https://clouderrorreporting.googleapis.com/v1beta1/{projectName}/events:report?key=123ABC456`
   *
   * **Note:** [Error Reporting] (https://cloud.google.com/error-reporting)
   * is a service built on Cloud Logging and can analyze log entries when all of
   * the following are true:
   *
   * * Customer-managed encryption keys (CMEK) are disabled on the log bucket.
   * * The log bucket satisfies one of the following:
   *     * The log bucket is stored in the same project where the logs
   *     originated.
   *     * The logs were routed to a project, and then that project stored those
   *     logs in a log bucket that it owns.
   */
  reportErrorEvent(
    request: DeepPartial<ReportErrorEventRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ReportErrorEventResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
