// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/devtools/clouderrorreporting/v1beta1/error_group_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { ErrorGroup } from "./common.js";

export const protobufPackage = "google.devtools.clouderrorreporting.v1beta1";

/** A request to return an individual group. */
export interface GetGroupRequest {
  /**
   * Required. The group resource name. Written as either
   * `projects/{projectID}/groups/{group_id}` or
   * `projects/{projectID}/locations/{location}/groups/{group_id}`. Call
   * [groupStats.list]
   * [google.devtools.clouderrorreporting.v1beta1.ErrorStatsService.ListGroupStats]
   * to return a list of groups belonging to this project.
   *
   * Examples: `projects/my-project-123/groups/my-group`,
   * `projects/my-project-123/locations/global/groups/my-group`
   *
   * In the group resource name, the `group_id` is a unique identifier for a
   * particular error group. The identifier is derived from key parts of the
   * error-log content and is treated as Service Data. For information about
   * how Service Data is handled, see [Google Cloud Privacy
   * Notice](https://cloud.google.com/terms/cloud-privacy-notice).
   *
   * For a list of supported locations, see [Supported
   * Regions](https://cloud.google.com/logging/docs/region-support). `global` is
   * the default when unspecified.
   */
  groupName: string;
}

/** A request to replace the existing data for the given group. */
export interface UpdateGroupRequest {
  /** Required. The group which replaces the resource on the server. */
  group: ErrorGroup | undefined;
}

function createBaseGetGroupRequest(): GetGroupRequest {
  return { groupName: "" };
}

export const GetGroupRequest: MessageFns<GetGroupRequest> = {
  encode(message: GetGroupRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.groupName !== "") {
      writer.uint32(10).string(message.groupName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetGroupRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetGroupRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.groupName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetGroupRequest {
    return { groupName: isSet(object.groupName) ? globalThis.String(object.groupName) : "" };
  },

  toJSON(message: GetGroupRequest): unknown {
    const obj: any = {};
    if (message.groupName !== "") {
      obj.groupName = message.groupName;
    }
    return obj;
  },

  create(base?: DeepPartial<GetGroupRequest>): GetGroupRequest {
    return GetGroupRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetGroupRequest>): GetGroupRequest {
    const message = createBaseGetGroupRequest();
    message.groupName = object.groupName ?? "";
    return message;
  },
};

function createBaseUpdateGroupRequest(): UpdateGroupRequest {
  return { group: undefined };
}

export const UpdateGroupRequest: MessageFns<UpdateGroupRequest> = {
  encode(message: UpdateGroupRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.group !== undefined) {
      ErrorGroup.encode(message.group, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateGroupRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateGroupRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.group = ErrorGroup.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateGroupRequest {
    return { group: isSet(object.group) ? ErrorGroup.fromJSON(object.group) : undefined };
  },

  toJSON(message: UpdateGroupRequest): unknown {
    const obj: any = {};
    if (message.group !== undefined) {
      obj.group = ErrorGroup.toJSON(message.group);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateGroupRequest>): UpdateGroupRequest {
    return UpdateGroupRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateGroupRequest>): UpdateGroupRequest {
    const message = createBaseUpdateGroupRequest();
    message.group = (object.group !== undefined && object.group !== null)
      ? ErrorGroup.fromPartial(object.group)
      : undefined;
    return message;
  },
};

/** Service for retrieving and updating individual error groups. */
export type ErrorGroupServiceDefinition = typeof ErrorGroupServiceDefinition;
export const ErrorGroupServiceDefinition = {
  name: "ErrorGroupService",
  fullName: "google.devtools.clouderrorreporting.v1beta1.ErrorGroupService",
  methods: {
    /** Get the specified group. */
    getGroup: {
      name: "GetGroup",
      requestType: GetGroupRequest,
      requestStream: false,
      responseType: ErrorGroup,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([10, 103, 114, 111, 117, 112, 95, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              100,
              90,
              55,
              18,
              53,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              103,
              114,
              111,
              117,
              112,
              95,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              103,
              114,
              111,
              117,
              112,
              115,
              47,
              42,
              125,
              18,
              41,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              103,
              114,
              111,
              117,
              112,
              95,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              103,
              114,
              111,
              117,
              112,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Replace the data for the specified group.
     * Fails if the group does not exist.
     */
    updateGroup: {
      name: "UpdateGroup",
      requestType: UpdateGroupRequest,
      requestStream: false,
      responseType: ErrorGroup,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([5, 103, 114, 111, 117, 112])],
          578365826: [
            Buffer.from([
              114,
              58,
              5,
              103,
              114,
              111,
              117,
              112,
              90,
              62,
              58,
              5,
              103,
              114,
              111,
              117,
              112,
              26,
              53,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              103,
              114,
              111,
              117,
              112,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              103,
              114,
              111,
              117,
              112,
              115,
              47,
              42,
              125,
              26,
              41,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              103,
              114,
              111,
              117,
              112,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              103,
              114,
              111,
              117,
              112,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface ErrorGroupServiceImplementation<CallContextExt = {}> {
  /** Get the specified group. */
  getGroup(request: GetGroupRequest, context: CallContext & CallContextExt): Promise<DeepPartial<ErrorGroup>>;
  /**
   * Replace the data for the specified group.
   * Fails if the group does not exist.
   */
  updateGroup(request: UpdateGroupRequest, context: CallContext & CallContextExt): Promise<DeepPartial<ErrorGroup>>;
}

export interface ErrorGroupServiceClient<CallOptionsExt = {}> {
  /** Get the specified group. */
  getGroup(request: DeepPartial<GetGroupRequest>, options?: CallOptions & CallOptionsExt): Promise<ErrorGroup>;
  /**
   * Replace the data for the specified group.
   * Fails if the group does not exist.
   */
  updateGroup(request: DeepPartial<UpdateGroupRequest>, options?: CallOptions & CallOptionsExt): Promise<ErrorGroup>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
