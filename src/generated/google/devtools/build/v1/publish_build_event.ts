// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/devtools/build/v1/publish_build_event.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Duration } from "../../../protobuf/duration.js";
import { Empty } from "../../../protobuf/empty.js";
import { BuildEvent, StreamId } from "./build_events.js";

export const protobufPackage = "google.devtools.build.v1";

/**
 * Publishes 'lifecycle events' that update the high-level state of a build:
 * - BuildEnqueued: When a build is scheduled.
 * - InvocationAttemptStarted: When work for a build starts; there can be
 *     multiple invocations for a build (e.g. retries).
 * - InvocationAttemptCompleted: When work for a build finishes.
 * - BuildFinished: When a build is finished.
 */
export interface PublishLifecycleEventRequest {
  /** The interactivity of this build. */
  serviceLevel: PublishLifecycleEventRequest_ServiceLevel;
  /**
   * Required. The lifecycle build event. If this is a build tool event, the RPC
   * will fail with INVALID_REQUEST.
   */
  buildEvent:
    | OrderedBuildEvent
    | undefined;
  /**
   * If the next event for this build or invocation (depending on the event
   * type) hasn't been published after this duration from when {build_event}
   * is written to BES, consider this stream expired. If this field is not set,
   * BES backend will use its own default value.
   */
  streamTimeout:
    | Duration
    | undefined;
  /**
   * Additional information about a build request. These are define by the event
   * publishers, and the Build Event Service does not validate or interpret
   * them. They are used while notifying internal systems of new builds and
   * invocations if the OrderedBuildEvent.event type is
   * BuildEnqueued/InvocationAttemptStarted.
   */
  notificationKeywords: string[];
  /**
   * Required. The project this build is associated with.
   * This should match the project used for the initial call to
   * PublishLifecycleEvent (containing a BuildEnqueued message).
   */
  projectId: string;
  /**
   * Whether to require a previously received matching parent lifecycle event
   * for the current request's event before continuing processing.
   * - InvocationAttemptStarted and BuildFinished events require a BuildEnqueued
   *   parent event.
   * - InvocationAttemptFinished events require an InvocationAttemptStarted
   *   parent event.
   */
  checkPrecedingLifecycleEventsPresent: boolean;
}

/**
 * The service level of the build request. Backends only uses this value when
 * the BuildEnqueued event is published to determine what level of service
 * this build should receive.
 */
export enum PublishLifecycleEventRequest_ServiceLevel {
  /**
   * NONINTERACTIVE - Non-interactive builds can tolerate longer event latencies. This is the
   * default ServiceLevel if callers do not specify one.
   */
  NONINTERACTIVE = 0,
  /** INTERACTIVE - The events of an interactive build should be delivered with low latency. */
  INTERACTIVE = 1,
  UNRECOGNIZED = -1,
}

export function publishLifecycleEventRequest_ServiceLevelFromJSON(
  object: any,
): PublishLifecycleEventRequest_ServiceLevel {
  switch (object) {
    case 0:
    case "NONINTERACTIVE":
      return PublishLifecycleEventRequest_ServiceLevel.NONINTERACTIVE;
    case 1:
    case "INTERACTIVE":
      return PublishLifecycleEventRequest_ServiceLevel.INTERACTIVE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PublishLifecycleEventRequest_ServiceLevel.UNRECOGNIZED;
  }
}

export function publishLifecycleEventRequest_ServiceLevelToJSON(
  object: PublishLifecycleEventRequest_ServiceLevel,
): string {
  switch (object) {
    case PublishLifecycleEventRequest_ServiceLevel.NONINTERACTIVE:
      return "NONINTERACTIVE";
    case PublishLifecycleEventRequest_ServiceLevel.INTERACTIVE:
      return "INTERACTIVE";
    case PublishLifecycleEventRequest_ServiceLevel.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * States which event has been committed. Any failure to commit will cause
 * RPC errors, hence not recorded by this proto.
 */
export interface PublishBuildToolEventStreamResponse {
  /** The stream that contains this event. */
  streamId:
    | StreamId
    | undefined;
  /** The sequence number of this event that has been committed. */
  sequenceNumber: Long;
}

/**
 * Build event with contextual information about the stream it belongs to and
 * its position in that stream.
 */
export interface OrderedBuildEvent {
  /** Which build event stream this event belongs to. */
  streamId:
    | StreamId
    | undefined;
  /**
   * The position of this event in the stream. The sequence numbers for a build
   * event stream should be a sequence of consecutive natural numbers starting
   * from one. (1, 2, 3, ...)
   */
  sequenceNumber: Long;
  /** The actual event. */
  event: BuildEvent | undefined;
}

/** Streaming request message for PublishBuildToolEventStream. */
export interface PublishBuildToolEventStreamRequest {
  /**
   * Required. The build event with position info.
   * New publishing clients should use this field rather than the 3 above.
   */
  orderedBuildEvent:
    | OrderedBuildEvent
    | undefined;
  /**
   * The keywords to be attached to the notification which notifies the start
   * of a new build event stream. BES only reads this field when sequence_number
   * or ordered_build_event.sequence_number is 1 in this message. If this field
   * is empty, BES will not publish notification messages for this stream.
   */
  notificationKeywords: string[];
  /**
   * Required. The project this build is associated with.
   * This should match the project used for the initial call to
   * PublishLifecycleEvent (containing a BuildEnqueued message).
   */
  projectId: string;
  /**
   * Whether to require a previously received matching InvocationAttemptStarted
   * event before continuing event processing for the event in the current
   * request. BES only performs this check for events with sequence_number 1
   * i.e. the first event in the stream.
   */
  checkPrecedingLifecycleEventsPresent: boolean;
}

function createBasePublishLifecycleEventRequest(): PublishLifecycleEventRequest {
  return {
    serviceLevel: 0,
    buildEvent: undefined,
    streamTimeout: undefined,
    notificationKeywords: [],
    projectId: "",
    checkPrecedingLifecycleEventsPresent: false,
  };
}

export const PublishLifecycleEventRequest: MessageFns<PublishLifecycleEventRequest> = {
  encode(message: PublishLifecycleEventRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.serviceLevel !== 0) {
      writer.uint32(8).int32(message.serviceLevel);
    }
    if (message.buildEvent !== undefined) {
      OrderedBuildEvent.encode(message.buildEvent, writer.uint32(18).fork()).join();
    }
    if (message.streamTimeout !== undefined) {
      Duration.encode(message.streamTimeout, writer.uint32(26).fork()).join();
    }
    for (const v of message.notificationKeywords) {
      writer.uint32(34).string(v!);
    }
    if (message.projectId !== "") {
      writer.uint32(50).string(message.projectId);
    }
    if (message.checkPrecedingLifecycleEventsPresent !== false) {
      writer.uint32(56).bool(message.checkPrecedingLifecycleEventsPresent);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PublishLifecycleEventRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePublishLifecycleEventRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.serviceLevel = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.buildEvent = OrderedBuildEvent.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.streamTimeout = Duration.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.notificationKeywords.push(reader.string());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.checkPrecedingLifecycleEventsPresent = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PublishLifecycleEventRequest {
    return {
      serviceLevel: isSet(object.serviceLevel)
        ? publishLifecycleEventRequest_ServiceLevelFromJSON(object.serviceLevel)
        : 0,
      buildEvent: isSet(object.buildEvent) ? OrderedBuildEvent.fromJSON(object.buildEvent) : undefined,
      streamTimeout: isSet(object.streamTimeout) ? Duration.fromJSON(object.streamTimeout) : undefined,
      notificationKeywords: globalThis.Array.isArray(object?.notificationKeywords)
        ? object.notificationKeywords.map((e: any) => globalThis.String(e))
        : [],
      projectId: isSet(object.projectId) ? globalThis.String(object.projectId) : "",
      checkPrecedingLifecycleEventsPresent: isSet(object.checkPrecedingLifecycleEventsPresent)
        ? globalThis.Boolean(object.checkPrecedingLifecycleEventsPresent)
        : false,
    };
  },

  toJSON(message: PublishLifecycleEventRequest): unknown {
    const obj: any = {};
    if (message.serviceLevel !== 0) {
      obj.serviceLevel = publishLifecycleEventRequest_ServiceLevelToJSON(message.serviceLevel);
    }
    if (message.buildEvent !== undefined) {
      obj.buildEvent = OrderedBuildEvent.toJSON(message.buildEvent);
    }
    if (message.streamTimeout !== undefined) {
      obj.streamTimeout = Duration.toJSON(message.streamTimeout);
    }
    if (message.notificationKeywords?.length) {
      obj.notificationKeywords = message.notificationKeywords;
    }
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.checkPrecedingLifecycleEventsPresent !== false) {
      obj.checkPrecedingLifecycleEventsPresent = message.checkPrecedingLifecycleEventsPresent;
    }
    return obj;
  },

  create(base?: DeepPartial<PublishLifecycleEventRequest>): PublishLifecycleEventRequest {
    return PublishLifecycleEventRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PublishLifecycleEventRequest>): PublishLifecycleEventRequest {
    const message = createBasePublishLifecycleEventRequest();
    message.serviceLevel = object.serviceLevel ?? 0;
    message.buildEvent = (object.buildEvent !== undefined && object.buildEvent !== null)
      ? OrderedBuildEvent.fromPartial(object.buildEvent)
      : undefined;
    message.streamTimeout = (object.streamTimeout !== undefined && object.streamTimeout !== null)
      ? Duration.fromPartial(object.streamTimeout)
      : undefined;
    message.notificationKeywords = object.notificationKeywords?.map((e) => e) || [];
    message.projectId = object.projectId ?? "";
    message.checkPrecedingLifecycleEventsPresent = object.checkPrecedingLifecycleEventsPresent ?? false;
    return message;
  },
};

function createBasePublishBuildToolEventStreamResponse(): PublishBuildToolEventStreamResponse {
  return { streamId: undefined, sequenceNumber: Long.ZERO };
}

export const PublishBuildToolEventStreamResponse: MessageFns<PublishBuildToolEventStreamResponse> = {
  encode(message: PublishBuildToolEventStreamResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.streamId !== undefined) {
      StreamId.encode(message.streamId, writer.uint32(10).fork()).join();
    }
    if (!message.sequenceNumber.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.sequenceNumber.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PublishBuildToolEventStreamResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePublishBuildToolEventStreamResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.streamId = StreamId.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.sequenceNumber = Long.fromString(reader.int64().toString());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PublishBuildToolEventStreamResponse {
    return {
      streamId: isSet(object.streamId) ? StreamId.fromJSON(object.streamId) : undefined,
      sequenceNumber: isSet(object.sequenceNumber) ? Long.fromValue(object.sequenceNumber) : Long.ZERO,
    };
  },

  toJSON(message: PublishBuildToolEventStreamResponse): unknown {
    const obj: any = {};
    if (message.streamId !== undefined) {
      obj.streamId = StreamId.toJSON(message.streamId);
    }
    if (!message.sequenceNumber.equals(Long.ZERO)) {
      obj.sequenceNumber = (message.sequenceNumber || Long.ZERO).toString();
    }
    return obj;
  },

  create(base?: DeepPartial<PublishBuildToolEventStreamResponse>): PublishBuildToolEventStreamResponse {
    return PublishBuildToolEventStreamResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PublishBuildToolEventStreamResponse>): PublishBuildToolEventStreamResponse {
    const message = createBasePublishBuildToolEventStreamResponse();
    message.streamId = (object.streamId !== undefined && object.streamId !== null)
      ? StreamId.fromPartial(object.streamId)
      : undefined;
    message.sequenceNumber = (object.sequenceNumber !== undefined && object.sequenceNumber !== null)
      ? Long.fromValue(object.sequenceNumber)
      : Long.ZERO;
    return message;
  },
};

function createBaseOrderedBuildEvent(): OrderedBuildEvent {
  return { streamId: undefined, sequenceNumber: Long.ZERO, event: undefined };
}

export const OrderedBuildEvent: MessageFns<OrderedBuildEvent> = {
  encode(message: OrderedBuildEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.streamId !== undefined) {
      StreamId.encode(message.streamId, writer.uint32(10).fork()).join();
    }
    if (!message.sequenceNumber.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.sequenceNumber.toString());
    }
    if (message.event !== undefined) {
      BuildEvent.encode(message.event, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OrderedBuildEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOrderedBuildEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.streamId = StreamId.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.sequenceNumber = Long.fromString(reader.int64().toString());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.event = BuildEvent.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OrderedBuildEvent {
    return {
      streamId: isSet(object.streamId) ? StreamId.fromJSON(object.streamId) : undefined,
      sequenceNumber: isSet(object.sequenceNumber) ? Long.fromValue(object.sequenceNumber) : Long.ZERO,
      event: isSet(object.event) ? BuildEvent.fromJSON(object.event) : undefined,
    };
  },

  toJSON(message: OrderedBuildEvent): unknown {
    const obj: any = {};
    if (message.streamId !== undefined) {
      obj.streamId = StreamId.toJSON(message.streamId);
    }
    if (!message.sequenceNumber.equals(Long.ZERO)) {
      obj.sequenceNumber = (message.sequenceNumber || Long.ZERO).toString();
    }
    if (message.event !== undefined) {
      obj.event = BuildEvent.toJSON(message.event);
    }
    return obj;
  },

  create(base?: DeepPartial<OrderedBuildEvent>): OrderedBuildEvent {
    return OrderedBuildEvent.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<OrderedBuildEvent>): OrderedBuildEvent {
    const message = createBaseOrderedBuildEvent();
    message.streamId = (object.streamId !== undefined && object.streamId !== null)
      ? StreamId.fromPartial(object.streamId)
      : undefined;
    message.sequenceNumber = (object.sequenceNumber !== undefined && object.sequenceNumber !== null)
      ? Long.fromValue(object.sequenceNumber)
      : Long.ZERO;
    message.event = (object.event !== undefined && object.event !== null)
      ? BuildEvent.fromPartial(object.event)
      : undefined;
    return message;
  },
};

function createBasePublishBuildToolEventStreamRequest(): PublishBuildToolEventStreamRequest {
  return {
    orderedBuildEvent: undefined,
    notificationKeywords: [],
    projectId: "",
    checkPrecedingLifecycleEventsPresent: false,
  };
}

export const PublishBuildToolEventStreamRequest: MessageFns<PublishBuildToolEventStreamRequest> = {
  encode(message: PublishBuildToolEventStreamRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.orderedBuildEvent !== undefined) {
      OrderedBuildEvent.encode(message.orderedBuildEvent, writer.uint32(34).fork()).join();
    }
    for (const v of message.notificationKeywords) {
      writer.uint32(42).string(v!);
    }
    if (message.projectId !== "") {
      writer.uint32(50).string(message.projectId);
    }
    if (message.checkPrecedingLifecycleEventsPresent !== false) {
      writer.uint32(56).bool(message.checkPrecedingLifecycleEventsPresent);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PublishBuildToolEventStreamRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePublishBuildToolEventStreamRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 4:
          if (tag !== 34) {
            break;
          }

          message.orderedBuildEvent = OrderedBuildEvent.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.notificationKeywords.push(reader.string());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.checkPrecedingLifecycleEventsPresent = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PublishBuildToolEventStreamRequest {
    return {
      orderedBuildEvent: isSet(object.orderedBuildEvent)
        ? OrderedBuildEvent.fromJSON(object.orderedBuildEvent)
        : undefined,
      notificationKeywords: globalThis.Array.isArray(object?.notificationKeywords)
        ? object.notificationKeywords.map((e: any) => globalThis.String(e))
        : [],
      projectId: isSet(object.projectId) ? globalThis.String(object.projectId) : "",
      checkPrecedingLifecycleEventsPresent: isSet(object.checkPrecedingLifecycleEventsPresent)
        ? globalThis.Boolean(object.checkPrecedingLifecycleEventsPresent)
        : false,
    };
  },

  toJSON(message: PublishBuildToolEventStreamRequest): unknown {
    const obj: any = {};
    if (message.orderedBuildEvent !== undefined) {
      obj.orderedBuildEvent = OrderedBuildEvent.toJSON(message.orderedBuildEvent);
    }
    if (message.notificationKeywords?.length) {
      obj.notificationKeywords = message.notificationKeywords;
    }
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.checkPrecedingLifecycleEventsPresent !== false) {
      obj.checkPrecedingLifecycleEventsPresent = message.checkPrecedingLifecycleEventsPresent;
    }
    return obj;
  },

  create(base?: DeepPartial<PublishBuildToolEventStreamRequest>): PublishBuildToolEventStreamRequest {
    return PublishBuildToolEventStreamRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PublishBuildToolEventStreamRequest>): PublishBuildToolEventStreamRequest {
    const message = createBasePublishBuildToolEventStreamRequest();
    message.orderedBuildEvent = (object.orderedBuildEvent !== undefined && object.orderedBuildEvent !== null)
      ? OrderedBuildEvent.fromPartial(object.orderedBuildEvent)
      : undefined;
    message.notificationKeywords = object.notificationKeywords?.map((e) => e) || [];
    message.projectId = object.projectId ?? "";
    message.checkPrecedingLifecycleEventsPresent = object.checkPrecedingLifecycleEventsPresent ?? false;
    return message;
  },
};

/**
 * A service for publishing BuildEvents. BuildEvents are generated by Build
 * Systems to record actions taken during a Build. Events occur in streams,
 * are identified by a StreamId, and ordered by sequence number in a stream.
 *
 * A Build may contain several streams of BuildEvents, depending on the systems
 * that are involved in the Build. Some BuildEvents are used to declare the
 * beginning and end of major portions of a Build; these are called
 * LifecycleEvents, and are used (for example) to indicate the beginning or end
 * of a Build, and the beginning or end of an Invocation attempt (there can be
 * more than 1 Invocation in a Build if, for example, a failure occurs somewhere
 * and it needs to be retried).
 *
 * Other, build-tool events represent actions taken by the Build tool, such as
 * target objects produced via compilation, tests run, et cetera. There could be
 * more than one build tool stream for an invocation attempt of a build.
 */
export type PublishBuildEventDefinition = typeof PublishBuildEventDefinition;
export const PublishBuildEventDefinition = {
  name: "PublishBuildEvent",
  fullName: "google.devtools.build.v1.PublishBuildEvent",
  methods: {
    /**
     * Publish a build event stating the new state of a build (typically from the
     * build queue). The BuildEnqueued event must be published before all other
     * events for the same build ID.
     *
     * The backend will persist the event and deliver it to registered frontend
     * jobs immediately without batching.
     *
     * The commit status of the request is reported by the RPC's util_status()
     * function. The error code is the canonical error code defined in
     * //util/task/codes.proto.
     */
    publishLifecycleEvent: {
      name: "PublishLifecycleEvent",
      requestType: PublishLifecycleEventRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              90,
              58,
              1,
              42,
              90,
              32,
              58,
              1,
              42,
              34,
              27,
              47,
              118,
              49,
              47,
              108,
              105,
              102,
              101,
              99,
              121,
              99,
              108,
              101,
              69,
              118,
              101,
              110,
              116,
              115,
              58,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              34,
              51,
              47,
              118,
              49,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              95,
              105,
              100,
              61,
              42,
              125,
              47,
              108,
              105,
              102,
              101,
              99,
              121,
              99,
              108,
              101,
              69,
              118,
              101,
              110,
              116,
              115,
              58,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
            ]),
          ],
        },
      },
    },
    /**
     * Publish build tool events belonging to the same stream to a backend job
     * using bidirectional streaming.
     */
    publishBuildToolEventStream: {
      name: "PublishBuildToolEventStream",
      requestType: PublishBuildToolEventStreamRequest,
      requestStream: true,
      responseType: PublishBuildToolEventStreamResponse,
      responseStream: true,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              52,
              111,
              114,
              100,
              101,
              114,
              101,
              100,
              95,
              98,
              117,
              105,
              108,
              100,
              95,
              101,
              118,
              101,
              110,
              116,
              44,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              95,
              107,
              101,
              121,
              119,
              111,
              114,
              100,
              115,
              44,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              72,
              58,
              1,
              42,
              90,
              23,
              58,
              1,
              42,
              34,
              18,
              47,
              118,
              49,
              47,
              101,
              118,
              101,
              110,
              116,
              115,
              58,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              34,
              42,
              47,
              118,
              49,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              95,
              105,
              100,
              61,
              42,
              125,
              47,
              101,
              118,
              101,
              110,
              116,
              115,
              58,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface PublishBuildEventServiceImplementation<CallContextExt = {}> {
  /**
   * Publish a build event stating the new state of a build (typically from the
   * build queue). The BuildEnqueued event must be published before all other
   * events for the same build ID.
   *
   * The backend will persist the event and deliver it to registered frontend
   * jobs immediately without batching.
   *
   * The commit status of the request is reported by the RPC's util_status()
   * function. The error code is the canonical error code defined in
   * //util/task/codes.proto.
   */
  publishLifecycleEvent(
    request: PublishLifecycleEventRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  /**
   * Publish build tool events belonging to the same stream to a backend job
   * using bidirectional streaming.
   */
  publishBuildToolEventStream(
    request: AsyncIterable<PublishBuildToolEventStreamRequest>,
    context: CallContext & CallContextExt,
  ): ServerStreamingMethodResult<DeepPartial<PublishBuildToolEventStreamResponse>>;
}

export interface PublishBuildEventClient<CallOptionsExt = {}> {
  /**
   * Publish a build event stating the new state of a build (typically from the
   * build queue). The BuildEnqueued event must be published before all other
   * events for the same build ID.
   *
   * The backend will persist the event and deliver it to registered frontend
   * jobs immediately without batching.
   *
   * The commit status of the request is reported by the RPC's util_status()
   * function. The error code is the canonical error code defined in
   * //util/task/codes.proto.
   */
  publishLifecycleEvent(
    request: DeepPartial<PublishLifecycleEventRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  /**
   * Publish build tool events belonging to the same stream to a backend job
   * using bidirectional streaming.
   */
  publishBuildToolEventStream(
    request: AsyncIterable<DeepPartial<PublishBuildToolEventStreamRequest>>,
    options?: CallOptions & CallOptionsExt,
  ): AsyncIterable<PublishBuildToolEventStreamResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export type ServerStreamingMethodResult<Response> = { [Symbol.asyncIterator](): AsyncIterator<Response, void> };

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
