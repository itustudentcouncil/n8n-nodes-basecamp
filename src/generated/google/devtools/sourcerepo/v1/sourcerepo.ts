// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/devtools/sourcerepo/v1/sourcerepo.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import {
  GetIamPolicyRequest,
  SetIamPolicyRequest,
  TestIamPermissionsRequest,
  TestIamPermissionsResponse,
} from "../../../iam/v1/iam_policy.js";
import { Policy } from "../../../iam/v1/policy.js";
import { Empty } from "../../../protobuf/empty.js";

export const protobufPackage = "google.devtools.sourcerepo.v1";

/** A repository (or repo) is a Git repository storing versioned source content. */
export interface Repo {
  /**
   * Resource name of the repository, of the form
   * `projects/<project>/repos/<repo>`.  The repo name may contain slashes.
   * eg, `projects/myproject/repos/name/with/slash`
   */
  name: string;
  /**
   * The disk usage of the repo, in bytes. Read-only field. Size is only
   * returned by GetRepo.
   */
  size: Long;
  /**
   * URL to clone the repository from Google Cloud Source Repositories.
   * Read-only field.
   */
  url: string;
  /**
   * How this repository mirrors a repository managed by another service.
   * Read-only field.
   */
  mirrorConfig: MirrorConfig | undefined;
}

/**
 * Configuration to automatically mirror a repository from another
 * hosting service, for example GitHub or BitBucket.
 */
export interface MirrorConfig {
  /** URL of the main repository at the other hosting service. */
  url: string;
  /**
   * ID of the webhook listening to updates to trigger mirroring.
   * Removing this webhook from the other hosting service will stop
   * Google Cloud Source Repositories from receiving notifications,
   * and thereby disabling mirroring.
   */
  webhookId: string;
  /**
   * ID of the SSH deploy key at the other hosting service.
   * Removing this key from the other service would deauthorize
   * Google Cloud Source Repositories from mirroring.
   */
  deployKeyId: string;
}

/** Request for GetRepo. */
export interface GetRepoRequest {
  /**
   * The name of the requested repository. Values are of the form
   * `projects/<project>/repos/<repo>`.
   */
  name: string;
}

/** Request for ListRepos. */
export interface ListReposRequest {
  /**
   * The project ID whose repos should be listed. Values are of the form
   * `projects/<project>`.
   */
  name: string;
  /**
   * Maximum number of repositories to return; between 1 and 500.
   * If not set or zero, defaults to 100 at the server.
   */
  pageSize: number;
  /**
   * Resume listing repositories where a prior ListReposResponse
   * left off. This is an opaque token that must be obtained from
   * a recent, prior ListReposResponse's next_page_token field.
   */
  pageToken: string;
}

/** Response for ListRepos.  The size is not set in the returned repositories. */
export interface ListReposResponse {
  /** The listed repos. */
  repos: Repo[];
  /**
   * If non-empty, additional repositories exist within the project. These
   * can be retrieved by including this value in the next ListReposRequest's
   * page_token field.
   */
  nextPageToken: string;
}

/** Request for CreateRepo */
export interface CreateRepoRequest {
  /**
   * The project in which to create the repo. Values are of the form
   * `projects/<project>`.
   */
  parent: string;
  /**
   * The repo to create.  Only name should be set; setting other fields
   * is an error.  The project in the name should match the parent field.
   */
  repo: Repo | undefined;
}

/** Request for DeleteRepo. */
export interface DeleteRepoRequest {
  /**
   * The name of the repo to delete. Values are of the form
   * `projects/<project>/repos/<repo>`.
   */
  name: string;
}

function createBaseRepo(): Repo {
  return { name: "", size: Long.ZERO, url: "", mirrorConfig: undefined };
}

export const Repo: MessageFns<Repo> = {
  encode(message: Repo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (!message.size.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.size.toString());
    }
    if (message.url !== "") {
      writer.uint32(26).string(message.url);
    }
    if (message.mirrorConfig !== undefined) {
      MirrorConfig.encode(message.mirrorConfig, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Repo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRepo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.size = Long.fromString(reader.int64().toString());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.url = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.mirrorConfig = MirrorConfig.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Repo {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      size: isSet(object.size) ? Long.fromValue(object.size) : Long.ZERO,
      url: isSet(object.url) ? globalThis.String(object.url) : "",
      mirrorConfig: isSet(object.mirrorConfig) ? MirrorConfig.fromJSON(object.mirrorConfig) : undefined,
    };
  },

  toJSON(message: Repo): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (!message.size.equals(Long.ZERO)) {
      obj.size = (message.size || Long.ZERO).toString();
    }
    if (message.url !== "") {
      obj.url = message.url;
    }
    if (message.mirrorConfig !== undefined) {
      obj.mirrorConfig = MirrorConfig.toJSON(message.mirrorConfig);
    }
    return obj;
  },

  create(base?: DeepPartial<Repo>): Repo {
    return Repo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Repo>): Repo {
    const message = createBaseRepo();
    message.name = object.name ?? "";
    message.size = (object.size !== undefined && object.size !== null) ? Long.fromValue(object.size) : Long.ZERO;
    message.url = object.url ?? "";
    message.mirrorConfig = (object.mirrorConfig !== undefined && object.mirrorConfig !== null)
      ? MirrorConfig.fromPartial(object.mirrorConfig)
      : undefined;
    return message;
  },
};

function createBaseMirrorConfig(): MirrorConfig {
  return { url: "", webhookId: "", deployKeyId: "" };
}

export const MirrorConfig: MessageFns<MirrorConfig> = {
  encode(message: MirrorConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.url !== "") {
      writer.uint32(10).string(message.url);
    }
    if (message.webhookId !== "") {
      writer.uint32(18).string(message.webhookId);
    }
    if (message.deployKeyId !== "") {
      writer.uint32(26).string(message.deployKeyId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MirrorConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMirrorConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.url = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.webhookId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.deployKeyId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MirrorConfig {
    return {
      url: isSet(object.url) ? globalThis.String(object.url) : "",
      webhookId: isSet(object.webhookId) ? globalThis.String(object.webhookId) : "",
      deployKeyId: isSet(object.deployKeyId) ? globalThis.String(object.deployKeyId) : "",
    };
  },

  toJSON(message: MirrorConfig): unknown {
    const obj: any = {};
    if (message.url !== "") {
      obj.url = message.url;
    }
    if (message.webhookId !== "") {
      obj.webhookId = message.webhookId;
    }
    if (message.deployKeyId !== "") {
      obj.deployKeyId = message.deployKeyId;
    }
    return obj;
  },

  create(base?: DeepPartial<MirrorConfig>): MirrorConfig {
    return MirrorConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MirrorConfig>): MirrorConfig {
    const message = createBaseMirrorConfig();
    message.url = object.url ?? "";
    message.webhookId = object.webhookId ?? "";
    message.deployKeyId = object.deployKeyId ?? "";
    return message;
  },
};

function createBaseGetRepoRequest(): GetRepoRequest {
  return { name: "" };
}

export const GetRepoRequest: MessageFns<GetRepoRequest> = {
  encode(message: GetRepoRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetRepoRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetRepoRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetRepoRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetRepoRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetRepoRequest>): GetRepoRequest {
    return GetRepoRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetRepoRequest>): GetRepoRequest {
    const message = createBaseGetRepoRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListReposRequest(): ListReposRequest {
  return { name: "", pageSize: 0, pageToken: "" };
}

export const ListReposRequest: MessageFns<ListReposRequest> = {
  encode(message: ListReposRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListReposRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListReposRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListReposRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListReposRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListReposRequest>): ListReposRequest {
    return ListReposRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListReposRequest>): ListReposRequest {
    const message = createBaseListReposRequest();
    message.name = object.name ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListReposResponse(): ListReposResponse {
  return { repos: [], nextPageToken: "" };
}

export const ListReposResponse: MessageFns<ListReposResponse> = {
  encode(message: ListReposResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.repos) {
      Repo.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListReposResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListReposResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.repos.push(Repo.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListReposResponse {
    return {
      repos: globalThis.Array.isArray(object?.repos) ? object.repos.map((e: any) => Repo.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListReposResponse): unknown {
    const obj: any = {};
    if (message.repos?.length) {
      obj.repos = message.repos.map((e) => Repo.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListReposResponse>): ListReposResponse {
    return ListReposResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListReposResponse>): ListReposResponse {
    const message = createBaseListReposResponse();
    message.repos = object.repos?.map((e) => Repo.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseCreateRepoRequest(): CreateRepoRequest {
  return { parent: "", repo: undefined };
}

export const CreateRepoRequest: MessageFns<CreateRepoRequest> = {
  encode(message: CreateRepoRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.repo !== undefined) {
      Repo.encode(message.repo, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateRepoRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateRepoRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.repo = Repo.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateRepoRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      repo: isSet(object.repo) ? Repo.fromJSON(object.repo) : undefined,
    };
  },

  toJSON(message: CreateRepoRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.repo !== undefined) {
      obj.repo = Repo.toJSON(message.repo);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateRepoRequest>): CreateRepoRequest {
    return CreateRepoRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateRepoRequest>): CreateRepoRequest {
    const message = createBaseCreateRepoRequest();
    message.parent = object.parent ?? "";
    message.repo = (object.repo !== undefined && object.repo !== null) ? Repo.fromPartial(object.repo) : undefined;
    return message;
  },
};

function createBaseDeleteRepoRequest(): DeleteRepoRequest {
  return { name: "" };
}

export const DeleteRepoRequest: MessageFns<DeleteRepoRequest> = {
  encode(message: DeleteRepoRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteRepoRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteRepoRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteRepoRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteRepoRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteRepoRequest>): DeleteRepoRequest {
    return DeleteRepoRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteRepoRequest>): DeleteRepoRequest {
    const message = createBaseDeleteRepoRequest();
    message.name = object.name ?? "";
    return message;
  },
};

/** The Source Repo API service. */
export type SourceRepoDefinition = typeof SourceRepoDefinition;
export const SourceRepoDefinition = {
  name: "SourceRepo",
  fullName: "google.devtools.sourcerepo.v1.SourceRepo",
  methods: {
    /**
     * Returns all repos belonging to a project. The sizes of the repos are
     * not set by ListRepos.  To get the size of a repo, use GetRepo.
     */
    listRepos: {
      name: "ListRepos",
      requestType: ListReposRequest,
      requestStream: false,
      responseType: ListReposResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              29,
              18,
              27,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              47,
              114,
              101,
              112,
              111,
              115,
            ]),
          ],
        },
      },
    },
    /** Returns information about a repo. */
    getRepo: {
      name: "GetRepo",
      requestType: GetRepoRequest,
      requestStream: false,
      responseType: Repo,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              32,
              18,
              30,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              114,
              101,
              112,
              111,
              115,
              47,
              42,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Creates a repo in the given project with the given name.
     *
     * If the named repository already exists, `CreateRepo` returns
     * `ALREADY_EXISTS`.
     */
    createRepo: {
      name: "CreateRepo",
      requestType: CreateRepoRequest,
      requestStream: false,
      responseType: Repo,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              37,
              58,
              4,
              114,
              101,
              112,
              111,
              34,
              29,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              47,
              114,
              101,
              112,
              111,
              115,
            ]),
          ],
        },
      },
    },
    /** Deletes a repo. */
    deleteRepo: {
      name: "DeleteRepo",
      requestType: DeleteRepoRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              32,
              42,
              30,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              114,
              101,
              112,
              111,
              115,
              47,
              42,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Sets the access control policy on the specified resource. Replaces any
     * existing policy.
     */
    setIamPolicy: {
      name: "SetIamPolicy",
      requestType: SetIamPolicyRequest,
      requestStream: false,
      responseType: Policy,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              52,
              58,
              1,
              42,
              34,
              47,
              47,
              118,
              49,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              114,
              101,
              112,
              111,
              115,
              47,
              42,
              42,
              125,
              58,
              115,
              101,
              116,
              73,
              97,
              109,
              80,
              111,
              108,
              105,
              99,
              121,
            ]),
          ],
        },
      },
    },
    /**
     * Gets the access control policy for a resource.
     * Returns an empty policy if the resource exists and does not have a policy
     * set.
     */
    getIamPolicy: {
      name: "GetIamPolicy",
      requestType: GetIamPolicyRequest,
      requestStream: false,
      responseType: Policy,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              49,
              18,
              47,
              47,
              118,
              49,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              114,
              101,
              112,
              111,
              115,
              47,
              42,
              42,
              125,
              58,
              103,
              101,
              116,
              73,
              97,
              109,
              80,
              111,
              108,
              105,
              99,
              121,
            ]),
          ],
        },
      },
    },
    /**
     * Returns permissions that a caller has on the specified resource.
     * If the resource does not exist, this will return an empty set of
     * permissions, not a NOT_FOUND error.
     */
    testIamPermissions: {
      name: "TestIamPermissions",
      requestType: TestIamPermissionsRequest,
      requestStream: false,
      responseType: TestIamPermissionsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              58,
              58,
              1,
              42,
              34,
              53,
              47,
              118,
              49,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              114,
              101,
              112,
              111,
              115,
              47,
              42,
              42,
              125,
              58,
              116,
              101,
              115,
              116,
              73,
              97,
              109,
              80,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface SourceRepoServiceImplementation<CallContextExt = {}> {
  /**
   * Returns all repos belonging to a project. The sizes of the repos are
   * not set by ListRepos.  To get the size of a repo, use GetRepo.
   */
  listRepos(request: ListReposRequest, context: CallContext & CallContextExt): Promise<DeepPartial<ListReposResponse>>;
  /** Returns information about a repo. */
  getRepo(request: GetRepoRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Repo>>;
  /**
   * Creates a repo in the given project with the given name.
   *
   * If the named repository already exists, `CreateRepo` returns
   * `ALREADY_EXISTS`.
   */
  createRepo(request: CreateRepoRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Repo>>;
  /** Deletes a repo. */
  deleteRepo(request: DeleteRepoRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
  /**
   * Sets the access control policy on the specified resource. Replaces any
   * existing policy.
   */
  setIamPolicy(request: SetIamPolicyRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Policy>>;
  /**
   * Gets the access control policy for a resource.
   * Returns an empty policy if the resource exists and does not have a policy
   * set.
   */
  getIamPolicy(request: GetIamPolicyRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Policy>>;
  /**
   * Returns permissions that a caller has on the specified resource.
   * If the resource does not exist, this will return an empty set of
   * permissions, not a NOT_FOUND error.
   */
  testIamPermissions(
    request: TestIamPermissionsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<TestIamPermissionsResponse>>;
}

export interface SourceRepoClient<CallOptionsExt = {}> {
  /**
   * Returns all repos belonging to a project. The sizes of the repos are
   * not set by ListRepos.  To get the size of a repo, use GetRepo.
   */
  listRepos(request: DeepPartial<ListReposRequest>, options?: CallOptions & CallOptionsExt): Promise<ListReposResponse>;
  /** Returns information about a repo. */
  getRepo(request: DeepPartial<GetRepoRequest>, options?: CallOptions & CallOptionsExt): Promise<Repo>;
  /**
   * Creates a repo in the given project with the given name.
   *
   * If the named repository already exists, `CreateRepo` returns
   * `ALREADY_EXISTS`.
   */
  createRepo(request: DeepPartial<CreateRepoRequest>, options?: CallOptions & CallOptionsExt): Promise<Repo>;
  /** Deletes a repo. */
  deleteRepo(request: DeepPartial<DeleteRepoRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
  /**
   * Sets the access control policy on the specified resource. Replaces any
   * existing policy.
   */
  setIamPolicy(request: DeepPartial<SetIamPolicyRequest>, options?: CallOptions & CallOptionsExt): Promise<Policy>;
  /**
   * Gets the access control policy for a resource.
   * Returns an empty policy if the resource exists and does not have a policy
   * set.
   */
  getIamPolicy(request: DeepPartial<GetIamPolicyRequest>, options?: CallOptions & CallOptionsExt): Promise<Policy>;
  /**
   * Returns permissions that a caller has on the specified resource.
   * If the resource does not exist, this will return an empty set of
   * permissions, not a NOT_FOUND error.
   */
  testIamPermissions(
    request: DeepPartial<TestIamPermissionsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<TestIamPermissionsResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
