// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/devtools/cloudprofiler/v2/profiler.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Duration } from "../../../protobuf/duration.js";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { Timestamp } from "../../../protobuf/timestamp.js";

export const protobufPackage = "google.devtools.cloudprofiler.v2";

/**
 * ProfileType is type of profiling data.
 * NOTE: the enumeration member names are used (in lowercase) as unique string
 * identifiers of profile types, so they must not be renamed.
 */
export enum ProfileType {
  /** PROFILE_TYPE_UNSPECIFIED - Unspecified profile type. */
  PROFILE_TYPE_UNSPECIFIED = 0,
  /** CPU - Thread CPU time sampling. */
  CPU = 1,
  /** WALL - Wallclock time sampling. More expensive as stops all threads. */
  WALL = 2,
  /**
   * HEAP - In-use heap profile. Represents a snapshot of the allocations that are
   * live at the time of the profiling.
   */
  HEAP = 3,
  /** THREADS - Single-shot collection of all thread stacks. */
  THREADS = 4,
  /** CONTENTION - Synchronization contention profile. */
  CONTENTION = 5,
  /** PEAK_HEAP - Peak heap profile. */
  PEAK_HEAP = 6,
  /**
   * HEAP_ALLOC - Heap allocation profile. It represents the aggregation of all allocations
   * made over the duration of the profile. All allocations are included,
   * including those that might have been freed by the end of the profiling
   * interval. The profile is in particular useful for garbage collecting
   * languages to understand which parts of the code create most of the garbage
   * collection pressure to see if those can be optimized.
   */
  HEAP_ALLOC = 7,
  UNRECOGNIZED = -1,
}

export function profileTypeFromJSON(object: any): ProfileType {
  switch (object) {
    case 0:
    case "PROFILE_TYPE_UNSPECIFIED":
      return ProfileType.PROFILE_TYPE_UNSPECIFIED;
    case 1:
    case "CPU":
      return ProfileType.CPU;
    case 2:
    case "WALL":
      return ProfileType.WALL;
    case 3:
    case "HEAP":
      return ProfileType.HEAP;
    case 4:
    case "THREADS":
      return ProfileType.THREADS;
    case 5:
    case "CONTENTION":
      return ProfileType.CONTENTION;
    case 6:
    case "PEAK_HEAP":
      return ProfileType.PEAK_HEAP;
    case 7:
    case "HEAP_ALLOC":
      return ProfileType.HEAP_ALLOC;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ProfileType.UNRECOGNIZED;
  }
}

export function profileTypeToJSON(object: ProfileType): string {
  switch (object) {
    case ProfileType.PROFILE_TYPE_UNSPECIFIED:
      return "PROFILE_TYPE_UNSPECIFIED";
    case ProfileType.CPU:
      return "CPU";
    case ProfileType.WALL:
      return "WALL";
    case ProfileType.HEAP:
      return "HEAP";
    case ProfileType.THREADS:
      return "THREADS";
    case ProfileType.CONTENTION:
      return "CONTENTION";
    case ProfileType.PEAK_HEAP:
      return "PEAK_HEAP";
    case ProfileType.HEAP_ALLOC:
      return "HEAP_ALLOC";
    case ProfileType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * CreateProfileRequest describes a profile resource online creation request.
 * The deployment field must be populated. The profile_type specifies the list
 * of profile types supported by the agent. The creation call will hang until a
 * profile of one of these types needs to be collected.
 */
export interface CreateProfileRequest {
  /** Parent project to create the profile in. */
  parent: string;
  /** Deployment details. */
  deployment:
    | Deployment
    | undefined;
  /** One or more profile types that the agent is capable of providing. */
  profileType: ProfileType[];
}

/**
 * CreateOfflineProfileRequest describes a profile resource offline creation
 * request.
 */
export interface CreateOfflineProfileRequest {
  /** Parent project to create the profile in. */
  parent: string;
  /** Contents of the profile to create. */
  profile: Profile | undefined;
}

/** UpdateProfileRequest contains the profile to update. */
export interface UpdateProfileRequest {
  /** Profile to update. */
  profile:
    | Profile
    | undefined;
  /**
   * Field mask used to specify the fields to be overwritten. Currently only
   * profile_bytes and labels fields are supported by UpdateProfile, so only
   * those fields can be specified in the mask. When no mask is provided, all
   * fields are overwritten.
   */
  updateMask: string[] | undefined;
}

/** Profile resource. */
export interface Profile {
  /** Output only. Opaque, server-assigned, unique ID for this profile. */
  name: string;
  /**
   * Type of profile.
   * For offline mode, this must be specified when creating the profile. For
   * online mode it is assigned and returned by the server.
   */
  profileType: ProfileType;
  /** Deployment this profile corresponds to. */
  deployment:
    | Deployment
    | undefined;
  /**
   * Duration of the profiling session.
   * Input (for the offline mode) or output (for the online mode).
   * The field represents requested profiling duration. It may slightly differ
   * from the effective profiling duration, which is recorded in the profile
   * data, in case the profiling can't be stopped immediately (e.g. in case
   * stopping the profiling is handled asynchronously).
   */
  duration:
    | Duration
    | undefined;
  /**
   * Input only. Profile bytes, as a gzip compressed serialized proto, the
   * format is https://github.com/google/pprof/blob/master/proto/profile.proto.
   */
  profileBytes: Buffer;
  /**
   * Input only. Labels associated to this specific profile. These labels will
   * get merged with the deployment labels for the final data set. See
   * documentation on deployment labels for validation rules and limits.
   */
  labels: { [key: string]: string };
  /**
   * Output only. Start time for the profile.
   * This output is only present in response from the ListProfiles method.
   */
  startTime: Date | undefined;
}

export interface Profile_LabelsEntry {
  key: string;
  value: string;
}

/** Deployment contains the deployment identification information. */
export interface Deployment {
  /**
   * Project ID is the ID of a cloud project.
   * Validation regex: `^[a-z][-a-z0-9:.]{4,61}[a-z0-9]$`.
   */
  projectId: string;
  /**
   * Target is the service name used to group related deployments:
   * * Service name for App Engine Flex / Standard.
   * * Cluster and container name for GKE.
   * * User-specified string for direct Compute Engine profiling (e.g. Java).
   * * Job name for Dataflow.
   * Validation regex: `^[a-z0-9]([-a-z0-9_.]{0,253}[a-z0-9])?$`.
   */
  target: string;
  /**
   * Labels identify the deployment within the user universe and same target.
   * Validation regex for label names: `^[a-z0-9]([a-z0-9-]{0,61}[a-z0-9])?$`.
   * Value for an individual label must be <= 512 bytes, the total
   * size of all label names and values must be <= 1024 bytes.
   *
   * Label named "language" can be used to record the programming language of
   * the profiled deployment. The standard choices for the value include "java",
   * "go", "python", "ruby", "nodejs", "php", "dotnet".
   *
   * For deployments running on Google Cloud Platform, "zone" or "region" label
   * should be present describing the deployment location. An example of a zone
   * is "us-central1-a", an example of a region is "us-central1" or
   * "us-central".
   */
  labels: { [key: string]: string };
}

export interface Deployment_LabelsEntry {
  key: string;
  value: string;
}

/**
 * ListProfilesRequest contains request parameters for listing profiles for
 * deployments in projects which the user has permissions to view.
 */
export interface ListProfilesRequest {
  /**
   * Required. The parent, which owns this collection of profiles.
   * Format: projects/{user_project_id}
   */
  parent: string;
  /**
   * The maximum number of items to return.
   * Default page_size is 1000.
   * Max limit is 1000.
   */
  pageSize: number;
  /**
   * The token to continue pagination and get profiles from a particular page.
   * When paginating, all other parameters provided to `ListProfiles` must match
   * the call that provided the page token.
   */
  pageToken: string;
}

/**
 * ListProfileResponse contains the list of collected profiles for deployments
 * in projects which the user has permissions to view.
 */
export interface ListProfilesResponse {
  /** List of profiles fetched. */
  profiles: Profile[];
  /**
   * Token to receive the next page of results.
   * This field maybe empty if there are no more profiles to fetch.
   */
  nextPageToken: string;
  /**
   * Number of profiles that were skipped in the current page since they were
   * not able to be fetched successfully. This should typically be zero. A
   * non-zero value may indicate a transient failure, in which case if the
   * number is too high for your use case, the call may be retried.
   */
  skippedProfiles: number;
}

function createBaseCreateProfileRequest(): CreateProfileRequest {
  return { parent: "", deployment: undefined, profileType: [] };
}

export const CreateProfileRequest: MessageFns<CreateProfileRequest> = {
  encode(message: CreateProfileRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(34).string(message.parent);
    }
    if (message.deployment !== undefined) {
      Deployment.encode(message.deployment, writer.uint32(10).fork()).join();
    }
    writer.uint32(18).fork();
    for (const v of message.profileType) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateProfileRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateProfileRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 4:
          if (tag !== 34) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 1:
          if (tag !== 10) {
            break;
          }

          message.deployment = Deployment.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag === 16) {
            message.profileType.push(reader.int32() as any);

            continue;
          }

          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.profileType.push(reader.int32() as any);
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateProfileRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      deployment: isSet(object.deployment) ? Deployment.fromJSON(object.deployment) : undefined,
      profileType: globalThis.Array.isArray(object?.profileType)
        ? object.profileType.map((e: any) => profileTypeFromJSON(e))
        : [],
    };
  },

  toJSON(message: CreateProfileRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.deployment !== undefined) {
      obj.deployment = Deployment.toJSON(message.deployment);
    }
    if (message.profileType?.length) {
      obj.profileType = message.profileType.map((e) => profileTypeToJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<CreateProfileRequest>): CreateProfileRequest {
    return CreateProfileRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateProfileRequest>): CreateProfileRequest {
    const message = createBaseCreateProfileRequest();
    message.parent = object.parent ?? "";
    message.deployment = (object.deployment !== undefined && object.deployment !== null)
      ? Deployment.fromPartial(object.deployment)
      : undefined;
    message.profileType = object.profileType?.map((e) => e) || [];
    return message;
  },
};

function createBaseCreateOfflineProfileRequest(): CreateOfflineProfileRequest {
  return { parent: "", profile: undefined };
}

export const CreateOfflineProfileRequest: MessageFns<CreateOfflineProfileRequest> = {
  encode(message: CreateOfflineProfileRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.profile !== undefined) {
      Profile.encode(message.profile, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateOfflineProfileRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateOfflineProfileRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.profile = Profile.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateOfflineProfileRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      profile: isSet(object.profile) ? Profile.fromJSON(object.profile) : undefined,
    };
  },

  toJSON(message: CreateOfflineProfileRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.profile !== undefined) {
      obj.profile = Profile.toJSON(message.profile);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateOfflineProfileRequest>): CreateOfflineProfileRequest {
    return CreateOfflineProfileRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateOfflineProfileRequest>): CreateOfflineProfileRequest {
    const message = createBaseCreateOfflineProfileRequest();
    message.parent = object.parent ?? "";
    message.profile = (object.profile !== undefined && object.profile !== null)
      ? Profile.fromPartial(object.profile)
      : undefined;
    return message;
  },
};

function createBaseUpdateProfileRequest(): UpdateProfileRequest {
  return { profile: undefined, updateMask: undefined };
}

export const UpdateProfileRequest: MessageFns<UpdateProfileRequest> = {
  encode(message: UpdateProfileRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.profile !== undefined) {
      Profile.encode(message.profile, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateProfileRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateProfileRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.profile = Profile.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateProfileRequest {
    return {
      profile: isSet(object.profile) ? Profile.fromJSON(object.profile) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateProfileRequest): unknown {
    const obj: any = {};
    if (message.profile !== undefined) {
      obj.profile = Profile.toJSON(message.profile);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateProfileRequest>): UpdateProfileRequest {
    return UpdateProfileRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateProfileRequest>): UpdateProfileRequest {
    const message = createBaseUpdateProfileRequest();
    message.profile = (object.profile !== undefined && object.profile !== null)
      ? Profile.fromPartial(object.profile)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseProfile(): Profile {
  return {
    name: "",
    profileType: 0,
    deployment: undefined,
    duration: undefined,
    profileBytes: Buffer.alloc(0),
    labels: {},
    startTime: undefined,
  };
}

export const Profile: MessageFns<Profile> = {
  encode(message: Profile, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.profileType !== 0) {
      writer.uint32(16).int32(message.profileType);
    }
    if (message.deployment !== undefined) {
      Deployment.encode(message.deployment, writer.uint32(26).fork()).join();
    }
    if (message.duration !== undefined) {
      Duration.encode(message.duration, writer.uint32(34).fork()).join();
    }
    if (message.profileBytes.length !== 0) {
      writer.uint32(42).bytes(message.profileBytes);
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      Profile_LabelsEntry.encode({ key: key as any, value }, writer.uint32(50).fork()).join();
    });
    if (message.startTime !== undefined) {
      Timestamp.encode(toTimestamp(message.startTime), writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Profile {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProfile();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.profileType = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.deployment = Deployment.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.duration = Duration.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.profileBytes = Buffer.from(reader.bytes());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          const entry6 = Profile_LabelsEntry.decode(reader, reader.uint32());
          if (entry6.value !== undefined) {
            message.labels[entry6.key] = entry6.value;
          }
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.startTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Profile {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      profileType: isSet(object.profileType) ? profileTypeFromJSON(object.profileType) : 0,
      deployment: isSet(object.deployment) ? Deployment.fromJSON(object.deployment) : undefined,
      duration: isSet(object.duration) ? Duration.fromJSON(object.duration) : undefined,
      profileBytes: isSet(object.profileBytes) ? Buffer.from(bytesFromBase64(object.profileBytes)) : Buffer.alloc(0),
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      startTime: isSet(object.startTime) ? fromJsonTimestamp(object.startTime) : undefined,
    };
  },

  toJSON(message: Profile): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.profileType !== 0) {
      obj.profileType = profileTypeToJSON(message.profileType);
    }
    if (message.deployment !== undefined) {
      obj.deployment = Deployment.toJSON(message.deployment);
    }
    if (message.duration !== undefined) {
      obj.duration = Duration.toJSON(message.duration);
    }
    if (message.profileBytes.length !== 0) {
      obj.profileBytes = base64FromBytes(message.profileBytes);
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    if (message.startTime !== undefined) {
      obj.startTime = message.startTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<Profile>): Profile {
    return Profile.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Profile>): Profile {
    const message = createBaseProfile();
    message.name = object.name ?? "";
    message.profileType = object.profileType ?? 0;
    message.deployment = (object.deployment !== undefined && object.deployment !== null)
      ? Deployment.fromPartial(object.deployment)
      : undefined;
    message.duration = (object.duration !== undefined && object.duration !== null)
      ? Duration.fromPartial(object.duration)
      : undefined;
    message.profileBytes = object.profileBytes ?? Buffer.alloc(0);
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.startTime = object.startTime ?? undefined;
    return message;
  },
};

function createBaseProfile_LabelsEntry(): Profile_LabelsEntry {
  return { key: "", value: "" };
}

export const Profile_LabelsEntry: MessageFns<Profile_LabelsEntry> = {
  encode(message: Profile_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Profile_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProfile_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Profile_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: Profile_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<Profile_LabelsEntry>): Profile_LabelsEntry {
    return Profile_LabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Profile_LabelsEntry>): Profile_LabelsEntry {
    const message = createBaseProfile_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseDeployment(): Deployment {
  return { projectId: "", target: "", labels: {} };
}

export const Deployment: MessageFns<Deployment> = {
  encode(message: Deployment, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.target !== "") {
      writer.uint32(18).string(message.target);
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      Deployment_LabelsEntry.encode({ key: key as any, value }, writer.uint32(26).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Deployment {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeployment();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.target = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          const entry3 = Deployment_LabelsEntry.decode(reader, reader.uint32());
          if (entry3.value !== undefined) {
            message.labels[entry3.key] = entry3.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Deployment {
    return {
      projectId: isSet(object.projectId) ? globalThis.String(object.projectId) : "",
      target: isSet(object.target) ? globalThis.String(object.target) : "",
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: Deployment): unknown {
    const obj: any = {};
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.target !== "") {
      obj.target = message.target;
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    return obj;
  },

  create(base?: DeepPartial<Deployment>): Deployment {
    return Deployment.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Deployment>): Deployment {
    const message = createBaseDeployment();
    message.projectId = object.projectId ?? "";
    message.target = object.target ?? "";
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseDeployment_LabelsEntry(): Deployment_LabelsEntry {
  return { key: "", value: "" };
}

export const Deployment_LabelsEntry: MessageFns<Deployment_LabelsEntry> = {
  encode(message: Deployment_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Deployment_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeployment_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Deployment_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: Deployment_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<Deployment_LabelsEntry>): Deployment_LabelsEntry {
    return Deployment_LabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Deployment_LabelsEntry>): Deployment_LabelsEntry {
    const message = createBaseDeployment_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseListProfilesRequest(): ListProfilesRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListProfilesRequest: MessageFns<ListProfilesRequest> = {
  encode(message: ListProfilesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListProfilesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListProfilesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListProfilesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListProfilesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListProfilesRequest>): ListProfilesRequest {
    return ListProfilesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListProfilesRequest>): ListProfilesRequest {
    const message = createBaseListProfilesRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListProfilesResponse(): ListProfilesResponse {
  return { profiles: [], nextPageToken: "", skippedProfiles: 0 };
}

export const ListProfilesResponse: MessageFns<ListProfilesResponse> = {
  encode(message: ListProfilesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.profiles) {
      Profile.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    if (message.skippedProfiles !== 0) {
      writer.uint32(24).int32(message.skippedProfiles);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListProfilesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListProfilesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.profiles.push(Profile.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.skippedProfiles = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListProfilesResponse {
    return {
      profiles: globalThis.Array.isArray(object?.profiles) ? object.profiles.map((e: any) => Profile.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      skippedProfiles: isSet(object.skippedProfiles) ? globalThis.Number(object.skippedProfiles) : 0,
    };
  },

  toJSON(message: ListProfilesResponse): unknown {
    const obj: any = {};
    if (message.profiles?.length) {
      obj.profiles = message.profiles.map((e) => Profile.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.skippedProfiles !== 0) {
      obj.skippedProfiles = Math.round(message.skippedProfiles);
    }
    return obj;
  },

  create(base?: DeepPartial<ListProfilesResponse>): ListProfilesResponse {
    return ListProfilesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListProfilesResponse>): ListProfilesResponse {
    const message = createBaseListProfilesResponse();
    message.profiles = object.profiles?.map((e) => Profile.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.skippedProfiles = object.skippedProfiles ?? 0;
    return message;
  },
};

/**
 * Manage the collection of continuous profiling data provided by profiling
 * agents running in the cloud or by an offline provider of profiling data.
 *
 * __The APIs listed in this service are intended for use within our profiler
 * agents only.__
 */
export type ProfilerServiceDefinition = typeof ProfilerServiceDefinition;
export const ProfilerServiceDefinition = {
  name: "ProfilerService",
  fullName: "google.devtools.cloudprofiler.v2.ProfilerService",
  methods: {
    /**
     * CreateProfile creates a new profile resource in the online mode.
     *
     * _Direct use of this API is discouraged, please use a [supported
     * profiler
     * agent](https://cloud.google.com/profiler/docs/about-profiler#profiling_agent)
     * instead for profile collection._
     *
     * The server ensures that the new profiles are created at a constant rate per
     * deployment, so the creation request may hang for some time until the next
     * profile session is available.
     *
     * The request may fail with ABORTED error if the creation is not available
     * within ~1m, the response will indicate the duration of the backoff the
     * client should take before attempting creating a profile again. The backoff
     * duration is returned in google.rpc.RetryInfo extension on the response
     * status. To a gRPC client, the extension will be return as a
     * binary-serialized proto in the trailing metadata item named
     * "google.rpc.retryinfo-bin".
     */
    createProfile: {
      name: "CreateProfile",
      requestType: CreateProfileRequest,
      requestStream: false,
      responseType: Profile,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              37,
              58,
              1,
              42,
              34,
              32,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              47,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * CreateOfflineProfile creates a new profile resource in the offline
     * mode. The client provides the profile to create along with the profile
     * bytes, the server records it.
     *
     * _Direct use of this API is discouraged, please use a [supported
     * profiler
     * agent](https://cloud.google.com/profiler/docs/about-profiler#profiling_agent)
     * instead for profile collection._
     */
    createOfflineProfile: {
      name: "CreateOfflineProfile",
      requestType: CreateOfflineProfileRequest,
      requestStream: false,
      responseType: Profile,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([14, 112, 97, 114, 101, 110, 116, 44, 112, 114, 111, 102, 105, 108, 101])],
          578365826: [
            Buffer.from([
              57,
              58,
              7,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              46,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              47,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              115,
              58,
              99,
              114,
              101,
              97,
              116,
              101,
              79,
              102,
              102,
              108,
              105,
              110,
              101,
            ]),
          ],
        },
      },
    },
    /**
     * UpdateProfile updates the profile bytes and labels on the profile resource
     * created in the online mode. Updating the bytes for profiles created in the
     * offline mode is currently not supported: the profile content must be
     * provided at the time of the profile creation.
     *
     * _Direct use of this API is discouraged, please use a [supported
     * profiler
     * agent](https://cloud.google.com/profiler/docs/about-profiler#profiling_agent)
     * instead for profile collection._
     */
    updateProfile: {
      name: "UpdateProfile",
      requestType: UpdateProfileRequest,
      requestStream: false,
      responseType: Profile,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              19,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              51,
              58,
              7,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              50,
              40,
              47,
              118,
              50,
              47,
              123,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface ProfilerServiceImplementation<CallContextExt = {}> {
  /**
   * CreateProfile creates a new profile resource in the online mode.
   *
   * _Direct use of this API is discouraged, please use a [supported
   * profiler
   * agent](https://cloud.google.com/profiler/docs/about-profiler#profiling_agent)
   * instead for profile collection._
   *
   * The server ensures that the new profiles are created at a constant rate per
   * deployment, so the creation request may hang for some time until the next
   * profile session is available.
   *
   * The request may fail with ABORTED error if the creation is not available
   * within ~1m, the response will indicate the duration of the backoff the
   * client should take before attempting creating a profile again. The backoff
   * duration is returned in google.rpc.RetryInfo extension on the response
   * status. To a gRPC client, the extension will be return as a
   * binary-serialized proto in the trailing metadata item named
   * "google.rpc.retryinfo-bin".
   */
  createProfile(request: CreateProfileRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Profile>>;
  /**
   * CreateOfflineProfile creates a new profile resource in the offline
   * mode. The client provides the profile to create along with the profile
   * bytes, the server records it.
   *
   * _Direct use of this API is discouraged, please use a [supported
   * profiler
   * agent](https://cloud.google.com/profiler/docs/about-profiler#profiling_agent)
   * instead for profile collection._
   */
  createOfflineProfile(
    request: CreateOfflineProfileRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Profile>>;
  /**
   * UpdateProfile updates the profile bytes and labels on the profile resource
   * created in the online mode. Updating the bytes for profiles created in the
   * offline mode is currently not supported: the profile content must be
   * provided at the time of the profile creation.
   *
   * _Direct use of this API is discouraged, please use a [supported
   * profiler
   * agent](https://cloud.google.com/profiler/docs/about-profiler#profiling_agent)
   * instead for profile collection._
   */
  updateProfile(request: UpdateProfileRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Profile>>;
}

export interface ProfilerServiceClient<CallOptionsExt = {}> {
  /**
   * CreateProfile creates a new profile resource in the online mode.
   *
   * _Direct use of this API is discouraged, please use a [supported
   * profiler
   * agent](https://cloud.google.com/profiler/docs/about-profiler#profiling_agent)
   * instead for profile collection._
   *
   * The server ensures that the new profiles are created at a constant rate per
   * deployment, so the creation request may hang for some time until the next
   * profile session is available.
   *
   * The request may fail with ABORTED error if the creation is not available
   * within ~1m, the response will indicate the duration of the backoff the
   * client should take before attempting creating a profile again. The backoff
   * duration is returned in google.rpc.RetryInfo extension on the response
   * status. To a gRPC client, the extension will be return as a
   * binary-serialized proto in the trailing metadata item named
   * "google.rpc.retryinfo-bin".
   */
  createProfile(request: DeepPartial<CreateProfileRequest>, options?: CallOptions & CallOptionsExt): Promise<Profile>;
  /**
   * CreateOfflineProfile creates a new profile resource in the offline
   * mode. The client provides the profile to create along with the profile
   * bytes, the server records it.
   *
   * _Direct use of this API is discouraged, please use a [supported
   * profiler
   * agent](https://cloud.google.com/profiler/docs/about-profiler#profiling_agent)
   * instead for profile collection._
   */
  createOfflineProfile(
    request: DeepPartial<CreateOfflineProfileRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Profile>;
  /**
   * UpdateProfile updates the profile bytes and labels on the profile resource
   * created in the online mode. Updating the bytes for profiles created in the
   * offline mode is currently not supported: the profile content must be
   * provided at the time of the profile creation.
   *
   * _Direct use of this API is discouraged, please use a [supported
   * profiler
   * agent](https://cloud.google.com/profiler/docs/about-profiler#profiling_agent)
   * instead for profile collection._
   */
  updateProfile(request: DeepPartial<UpdateProfileRequest>, options?: CallOptions & CallOptionsExt): Promise<Profile>;
}

/**
 * Service allows existing Cloud Profiler customers to export their profile data
 * out of Google Cloud.
 */
export type ExportServiceDefinition = typeof ExportServiceDefinition;
export const ExportServiceDefinition = {
  name: "ExportService",
  fullName: "google.devtools.cloudprofiler.v2.ExportService",
  methods: {
    /**
     * Lists profiles which have been collected so far and for which the caller
     * has permission to view.
     */
    listProfiles: {
      name: "ListProfiles",
      requestType: ListProfilesRequest,
      requestStream: false,
      responseType: ListProfilesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              34,
              18,
              32,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              47,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              115,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface ExportServiceImplementation<CallContextExt = {}> {
  /**
   * Lists profiles which have been collected so far and for which the caller
   * has permission to view.
   */
  listProfiles(
    request: ListProfilesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListProfilesResponse>>;
}

export interface ExportServiceClient<CallOptionsExt = {}> {
  /**
   * Lists profiles which have been collected so far and for which the caller
   * has permission to view.
   */
  listProfiles(
    request: DeepPartial<ListProfilesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListProfilesResponse>;
}

function bytesFromBase64(b64: string): Uint8Array {
  return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
}

function base64FromBytes(arr: Uint8Array): string {
  return globalThis.Buffer.from(arr).toString("base64");
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
