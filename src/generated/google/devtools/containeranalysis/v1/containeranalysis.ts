// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/devtools/containeranalysis/v1/containeranalysis.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Severity, severityFromJSON, severityToJSON } from "../../../../grafeas/v1/severity.js";
import {
  GetIamPolicyRequest,
  SetIamPolicyRequest,
  TestIamPermissionsRequest,
  TestIamPermissionsResponse,
} from "../../../iam/v1/iam_policy.js";
import { Policy } from "../../../iam/v1/policy.js";

export const protobufPackage = "google.devtools.containeranalysis.v1";

/** Request to get a vulnerability summary for some set of occurrences. */
export interface GetVulnerabilityOccurrencesSummaryRequest {
  /**
   * Required. The name of the project to get a vulnerability summary for in the form of
   * `projects/[PROJECT_ID]`.
   */
  parent: string;
  /** The filter expression. */
  filter: string;
}

/**
 * A summary of how many vulnerability occurrences there are per resource and
 * severity type.
 */
export interface VulnerabilityOccurrencesSummary {
  /** A listing by resource of the number of fixable and total vulnerabilities. */
  counts: VulnerabilityOccurrencesSummary_FixableTotalByDigest[];
}

/** Per resource and severity counts of fixable and total vulnerabilities. */
export interface VulnerabilityOccurrencesSummary_FixableTotalByDigest {
  /** The affected resource. */
  resourceUri: string;
  /**
   * The severity for this count. SEVERITY_UNSPECIFIED indicates total across
   * all severities.
   */
  severity: Severity;
  /** The number of fixable vulnerabilities associated with this resource. */
  fixableCount: Long;
  /** The total number of vulnerabilities associated with this resource. */
  totalCount: Long;
}

function createBaseGetVulnerabilityOccurrencesSummaryRequest(): GetVulnerabilityOccurrencesSummaryRequest {
  return { parent: "", filter: "" };
}

export const GetVulnerabilityOccurrencesSummaryRequest: MessageFns<GetVulnerabilityOccurrencesSummaryRequest> = {
  encode(message: GetVulnerabilityOccurrencesSummaryRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.filter !== "") {
      writer.uint32(18).string(message.filter);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetVulnerabilityOccurrencesSummaryRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetVulnerabilityOccurrencesSummaryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.filter = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetVulnerabilityOccurrencesSummaryRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
    };
  },

  toJSON(message: GetVulnerabilityOccurrencesSummaryRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    return obj;
  },

  create(base?: DeepPartial<GetVulnerabilityOccurrencesSummaryRequest>): GetVulnerabilityOccurrencesSummaryRequest {
    return GetVulnerabilityOccurrencesSummaryRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<GetVulnerabilityOccurrencesSummaryRequest>,
  ): GetVulnerabilityOccurrencesSummaryRequest {
    const message = createBaseGetVulnerabilityOccurrencesSummaryRequest();
    message.parent = object.parent ?? "";
    message.filter = object.filter ?? "";
    return message;
  },
};

function createBaseVulnerabilityOccurrencesSummary(): VulnerabilityOccurrencesSummary {
  return { counts: [] };
}

export const VulnerabilityOccurrencesSummary: MessageFns<VulnerabilityOccurrencesSummary> = {
  encode(message: VulnerabilityOccurrencesSummary, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.counts) {
      VulnerabilityOccurrencesSummary_FixableTotalByDigest.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VulnerabilityOccurrencesSummary {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVulnerabilityOccurrencesSummary();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.counts.push(VulnerabilityOccurrencesSummary_FixableTotalByDigest.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VulnerabilityOccurrencesSummary {
    return {
      counts: globalThis.Array.isArray(object?.counts)
        ? object.counts.map((e: any) => VulnerabilityOccurrencesSummary_FixableTotalByDigest.fromJSON(e))
        : [],
    };
  },

  toJSON(message: VulnerabilityOccurrencesSummary): unknown {
    const obj: any = {};
    if (message.counts?.length) {
      obj.counts = message.counts.map((e) => VulnerabilityOccurrencesSummary_FixableTotalByDigest.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<VulnerabilityOccurrencesSummary>): VulnerabilityOccurrencesSummary {
    return VulnerabilityOccurrencesSummary.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<VulnerabilityOccurrencesSummary>): VulnerabilityOccurrencesSummary {
    const message = createBaseVulnerabilityOccurrencesSummary();
    message.counts = object.counts?.map((e) => VulnerabilityOccurrencesSummary_FixableTotalByDigest.fromPartial(e)) ||
      [];
    return message;
  },
};

function createBaseVulnerabilityOccurrencesSummary_FixableTotalByDigest(): VulnerabilityOccurrencesSummary_FixableTotalByDigest {
  return { resourceUri: "", severity: 0, fixableCount: Long.ZERO, totalCount: Long.ZERO };
}

export const VulnerabilityOccurrencesSummary_FixableTotalByDigest: MessageFns<
  VulnerabilityOccurrencesSummary_FixableTotalByDigest
> = {
  encode(
    message: VulnerabilityOccurrencesSummary_FixableTotalByDigest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.resourceUri !== "") {
      writer.uint32(10).string(message.resourceUri);
    }
    if (message.severity !== 0) {
      writer.uint32(16).int32(message.severity);
    }
    if (!message.fixableCount.equals(Long.ZERO)) {
      writer.uint32(24).int64(message.fixableCount.toString());
    }
    if (!message.totalCount.equals(Long.ZERO)) {
      writer.uint32(32).int64(message.totalCount.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VulnerabilityOccurrencesSummary_FixableTotalByDigest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVulnerabilityOccurrencesSummary_FixableTotalByDigest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceUri = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.severity = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.fixableCount = Long.fromString(reader.int64().toString());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.totalCount = Long.fromString(reader.int64().toString());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VulnerabilityOccurrencesSummary_FixableTotalByDigest {
    return {
      resourceUri: isSet(object.resourceUri) ? globalThis.String(object.resourceUri) : "",
      severity: isSet(object.severity) ? severityFromJSON(object.severity) : 0,
      fixableCount: isSet(object.fixableCount) ? Long.fromValue(object.fixableCount) : Long.ZERO,
      totalCount: isSet(object.totalCount) ? Long.fromValue(object.totalCount) : Long.ZERO,
    };
  },

  toJSON(message: VulnerabilityOccurrencesSummary_FixableTotalByDigest): unknown {
    const obj: any = {};
    if (message.resourceUri !== "") {
      obj.resourceUri = message.resourceUri;
    }
    if (message.severity !== 0) {
      obj.severity = severityToJSON(message.severity);
    }
    if (!message.fixableCount.equals(Long.ZERO)) {
      obj.fixableCount = (message.fixableCount || Long.ZERO).toString();
    }
    if (!message.totalCount.equals(Long.ZERO)) {
      obj.totalCount = (message.totalCount || Long.ZERO).toString();
    }
    return obj;
  },

  create(
    base?: DeepPartial<VulnerabilityOccurrencesSummary_FixableTotalByDigest>,
  ): VulnerabilityOccurrencesSummary_FixableTotalByDigest {
    return VulnerabilityOccurrencesSummary_FixableTotalByDigest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<VulnerabilityOccurrencesSummary_FixableTotalByDigest>,
  ): VulnerabilityOccurrencesSummary_FixableTotalByDigest {
    const message = createBaseVulnerabilityOccurrencesSummary_FixableTotalByDigest();
    message.resourceUri = object.resourceUri ?? "";
    message.severity = object.severity ?? 0;
    message.fixableCount = (object.fixableCount !== undefined && object.fixableCount !== null)
      ? Long.fromValue(object.fixableCount)
      : Long.ZERO;
    message.totalCount = (object.totalCount !== undefined && object.totalCount !== null)
      ? Long.fromValue(object.totalCount)
      : Long.ZERO;
    return message;
  },
};

/**
 * Retrieves analysis results of Cloud components such as Docker container
 * images. The Container Analysis API is an implementation of the
 * [Grafeas](https://grafeas.io) API.
 *
 * Analysis results are stored as a series of occurrences. An `Occurrence`
 * contains information about a specific analysis instance on a resource. An
 * occurrence refers to a `Note`. A note contains details describing the
 * analysis and is generally stored in a separate project, called a `Provider`.
 * Multiple occurrences can refer to the same note.
 *
 * For example, an SSL vulnerability could affect multiple images. In this case,
 * there would be one note for the vulnerability and an occurrence for each
 * image with the vulnerability referring to that note.
 */
export type ContainerAnalysisDefinition = typeof ContainerAnalysisDefinition;
export const ContainerAnalysisDefinition = {
  name: "ContainerAnalysis",
  fullName: "google.devtools.containeranalysis.v1.ContainerAnalysis",
  methods: {
    /**
     * Sets the access control policy on the specified note or occurrence.
     * Requires `containeranalysis.notes.setIamPolicy` or
     * `containeranalysis.occurrences.setIamPolicy` permission if the resource is
     * a note or an occurrence, respectively.
     *
     * The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for
     * notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for
     * occurrences.
     */
    setIamPolicy: {
      name: "SetIamPolicy",
      requestType: SetIamPolicyRequest,
      requestStream: false,
      responseType: Policy,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([15, 114, 101, 115, 111, 117, 114, 99, 101, 44, 112, 111, 108, 105, 99, 121])],
          578365826: [
            Buffer.from([
              110,
              58,
              1,
              42,
              90,
              57,
              58,
              1,
              42,
              34,
              52,
              47,
              118,
              49,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              111,
              99,
              99,
              117,
              114,
              114,
              101,
              110,
              99,
              101,
              115,
              47,
              42,
              125,
              58,
              115,
              101,
              116,
              73,
              97,
              109,
              80,
              111,
              108,
              105,
              99,
              121,
              34,
              46,
              47,
              118,
              49,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              110,
              111,
              116,
              101,
              115,
              47,
              42,
              125,
              58,
              115,
              101,
              116,
              73,
              97,
              109,
              80,
              111,
              108,
              105,
              99,
              121,
            ]),
          ],
        },
      },
    },
    /**
     * Gets the access control policy for a note or an occurrence resource.
     * Requires `containeranalysis.notes.setIamPolicy` or
     * `containeranalysis.occurrences.setIamPolicy` permission if the resource is
     * a note or occurrence, respectively.
     *
     * The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for
     * notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for
     * occurrences.
     */
    getIamPolicy: {
      name: "GetIamPolicy",
      requestType: GetIamPolicyRequest,
      requestStream: false,
      responseType: Policy,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([8, 114, 101, 115, 111, 117, 114, 99, 101])],
          578365826: [
            Buffer.from([
              110,
              58,
              1,
              42,
              90,
              57,
              58,
              1,
              42,
              34,
              52,
              47,
              118,
              49,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              111,
              99,
              99,
              117,
              114,
              114,
              101,
              110,
              99,
              101,
              115,
              47,
              42,
              125,
              58,
              103,
              101,
              116,
              73,
              97,
              109,
              80,
              111,
              108,
              105,
              99,
              121,
              34,
              46,
              47,
              118,
              49,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              110,
              111,
              116,
              101,
              115,
              47,
              42,
              125,
              58,
              103,
              101,
              116,
              73,
              97,
              109,
              80,
              111,
              108,
              105,
              99,
              121,
            ]),
          ],
        },
      },
    },
    /**
     * Returns the permissions that a caller has on the specified note or
     * occurrence. Requires list permission on the project (for example,
     * `containeranalysis.notes.list`).
     *
     * The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for
     * notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for
     * occurrences.
     */
    testIamPermissions: {
      name: "TestIamPermissions",
      requestType: TestIamPermissionsRequest,
      requestStream: false,
      responseType: TestIamPermissionsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              20,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              44,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              115,
            ]),
          ],
          578365826: [
            Buffer.from([
              122,
              58,
              1,
              42,
              90,
              63,
              58,
              1,
              42,
              34,
              58,
              47,
              118,
              49,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              111,
              99,
              99,
              117,
              114,
              114,
              101,
              110,
              99,
              101,
              115,
              47,
              42,
              125,
              58,
              116,
              101,
              115,
              116,
              73,
              97,
              109,
              80,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              115,
              34,
              52,
              47,
              118,
              49,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              110,
              111,
              116,
              101,
              115,
              47,
              42,
              125,
              58,
              116,
              101,
              115,
              116,
              73,
              97,
              109,
              80,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets a summary of the number and severity of occurrences. */
    getVulnerabilityOccurrencesSummary: {
      name: "GetVulnerabilityOccurrencesSummary",
      requestType: GetVulnerabilityOccurrencesSummaryRequest,
      requestStream: false,
      responseType: VulnerabilityOccurrencesSummary,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([13, 112, 97, 114, 101, 110, 116, 44, 102, 105, 108, 116, 101, 114])],
          578365826: [
            Buffer.from([
              58,
              18,
              56,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              47,
              111,
              99,
              99,
              117,
              114,
              114,
              101,
              110,
              99,
              101,
              115,
              58,
              118,
              117,
              108,
              110,
              101,
              114,
              97,
              98,
              105,
              108,
              105,
              116,
              121,
              83,
              117,
              109,
              109,
              97,
              114,
              121,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface ContainerAnalysisServiceImplementation<CallContextExt = {}> {
  /**
   * Sets the access control policy on the specified note or occurrence.
   * Requires `containeranalysis.notes.setIamPolicy` or
   * `containeranalysis.occurrences.setIamPolicy` permission if the resource is
   * a note or an occurrence, respectively.
   *
   * The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for
   * notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for
   * occurrences.
   */
  setIamPolicy(request: SetIamPolicyRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Policy>>;
  /**
   * Gets the access control policy for a note or an occurrence resource.
   * Requires `containeranalysis.notes.setIamPolicy` or
   * `containeranalysis.occurrences.setIamPolicy` permission if the resource is
   * a note or occurrence, respectively.
   *
   * The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for
   * notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for
   * occurrences.
   */
  getIamPolicy(request: GetIamPolicyRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Policy>>;
  /**
   * Returns the permissions that a caller has on the specified note or
   * occurrence. Requires list permission on the project (for example,
   * `containeranalysis.notes.list`).
   *
   * The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for
   * notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for
   * occurrences.
   */
  testIamPermissions(
    request: TestIamPermissionsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<TestIamPermissionsResponse>>;
  /** Gets a summary of the number and severity of occurrences. */
  getVulnerabilityOccurrencesSummary(
    request: GetVulnerabilityOccurrencesSummaryRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<VulnerabilityOccurrencesSummary>>;
}

export interface ContainerAnalysisClient<CallOptionsExt = {}> {
  /**
   * Sets the access control policy on the specified note or occurrence.
   * Requires `containeranalysis.notes.setIamPolicy` or
   * `containeranalysis.occurrences.setIamPolicy` permission if the resource is
   * a note or an occurrence, respectively.
   *
   * The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for
   * notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for
   * occurrences.
   */
  setIamPolicy(request: DeepPartial<SetIamPolicyRequest>, options?: CallOptions & CallOptionsExt): Promise<Policy>;
  /**
   * Gets the access control policy for a note or an occurrence resource.
   * Requires `containeranalysis.notes.setIamPolicy` or
   * `containeranalysis.occurrences.setIamPolicy` permission if the resource is
   * a note or occurrence, respectively.
   *
   * The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for
   * notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for
   * occurrences.
   */
  getIamPolicy(request: DeepPartial<GetIamPolicyRequest>, options?: CallOptions & CallOptionsExt): Promise<Policy>;
  /**
   * Returns the permissions that a caller has on the specified note or
   * occurrence. Requires list permission on the project (for example,
   * `containeranalysis.notes.list`).
   *
   * The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for
   * notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for
   * occurrences.
   */
  testIamPermissions(
    request: DeepPartial<TestIamPermissionsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<TestIamPermissionsResponse>;
  /** Gets a summary of the number and severity of occurrences. */
  getVulnerabilityOccurrencesSummary(
    request: DeepPartial<GetVulnerabilityOccurrencesSummaryRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<VulnerabilityOccurrencesSummary>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
