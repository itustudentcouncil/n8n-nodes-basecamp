// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/devtools/containeranalysis/v1beta1/build/build.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { BuildProvenance } from "../provenance/provenance.js";

export const protobufPackage = "grafeas.v1beta1.build";

/**
 * Note holding the version of the provider's builder and the signature of the
 * provenance message in the build details occurrence.
 */
export interface Build {
  /** Required. Immutable. Version of the builder which produced this build. */
  builderVersion: string;
  /**
   * Signature of the build in occurrences pointing to this build note
   * containing build details.
   */
  signature: BuildSignature | undefined;
}

/** Message encapsulating the signature of the verified build. */
export interface BuildSignature {
  /**
   * Public key of the builder which can be used to verify that the related
   * findings are valid and unchanged. If `key_type` is empty, this defaults
   * to PEM encoded public keys.
   *
   * This field may be empty if `key_id` references an external key.
   *
   * For Cloud Build based signatures, this is a PEM encoded public
   * key. To verify the Cloud Build signature, place the contents of
   * this field into a file (public.pem). The signature field is base64-decoded
   * into its binary representation in signature.bin, and the provenance bytes
   * from `BuildDetails` are base64-decoded into a binary representation in
   * signed.bin. OpenSSL can then verify the signature:
   * `openssl sha256 -verify public.pem -signature signature.bin signed.bin`
   */
  publicKey: string;
  /**
   * Required. Signature of the related `BuildProvenance`. In JSON, this is
   * base-64 encoded.
   */
  signature: Buffer;
  /**
   * An ID for the key used to sign. This could be either an ID for the key
   * stored in `public_key` (such as the ID or fingerprint for a PGP key, or the
   * CN for a cert), or a reference to an external key (such as a reference to a
   * key in Cloud Key Management Service).
   */
  keyId: string;
  /**
   * The type of the key, either stored in `public_key` or referenced in
   * `key_id`.
   */
  keyType: BuildSignature_KeyType;
}

/** Public key formats. */
export enum BuildSignature_KeyType {
  /** KEY_TYPE_UNSPECIFIED - `KeyType` is not set. */
  KEY_TYPE_UNSPECIFIED = 0,
  /** PGP_ASCII_ARMORED - `PGP ASCII Armored` public key. */
  PGP_ASCII_ARMORED = 1,
  /** PKIX_PEM - `PKIX PEM` public key. */
  PKIX_PEM = 2,
  UNRECOGNIZED = -1,
}

export function buildSignature_KeyTypeFromJSON(object: any): BuildSignature_KeyType {
  switch (object) {
    case 0:
    case "KEY_TYPE_UNSPECIFIED":
      return BuildSignature_KeyType.KEY_TYPE_UNSPECIFIED;
    case 1:
    case "PGP_ASCII_ARMORED":
      return BuildSignature_KeyType.PGP_ASCII_ARMORED;
    case 2:
    case "PKIX_PEM":
      return BuildSignature_KeyType.PKIX_PEM;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BuildSignature_KeyType.UNRECOGNIZED;
  }
}

export function buildSignature_KeyTypeToJSON(object: BuildSignature_KeyType): string {
  switch (object) {
    case BuildSignature_KeyType.KEY_TYPE_UNSPECIFIED:
      return "KEY_TYPE_UNSPECIFIED";
    case BuildSignature_KeyType.PGP_ASCII_ARMORED:
      return "PGP_ASCII_ARMORED";
    case BuildSignature_KeyType.PKIX_PEM:
      return "PKIX_PEM";
    case BuildSignature_KeyType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Details of a build occurrence. */
export interface Details {
  /** Required. The actual provenance for the build. */
  provenance:
    | BuildProvenance
    | undefined;
  /**
   * Serialized JSON representation of the provenance, used in generating the
   * build signature in the corresponding build note. After verifying the
   * signature, `provenance_bytes` can be unmarshalled and compared to the
   * provenance to confirm that it is unchanged. A base64-encoded string
   * representation of the provenance bytes is used for the signature in order
   * to interoperate with openssl which expects this format for signature
   * verification.
   *
   * The serialized form is captured both to avoid ambiguity in how the
   * provenance is marshalled to json as well to prevent incompatibilities with
   * future changes.
   */
  provenanceBytes: string;
}

function createBaseBuild(): Build {
  return { builderVersion: "", signature: undefined };
}

export const Build: MessageFns<Build> = {
  encode(message: Build, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.builderVersion !== "") {
      writer.uint32(10).string(message.builderVersion);
    }
    if (message.signature !== undefined) {
      BuildSignature.encode(message.signature, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Build {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBuild();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.builderVersion = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.signature = BuildSignature.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Build {
    return {
      builderVersion: isSet(object.builderVersion) ? globalThis.String(object.builderVersion) : "",
      signature: isSet(object.signature) ? BuildSignature.fromJSON(object.signature) : undefined,
    };
  },

  toJSON(message: Build): unknown {
    const obj: any = {};
    if (message.builderVersion !== "") {
      obj.builderVersion = message.builderVersion;
    }
    if (message.signature !== undefined) {
      obj.signature = BuildSignature.toJSON(message.signature);
    }
    return obj;
  },

  create(base?: DeepPartial<Build>): Build {
    return Build.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Build>): Build {
    const message = createBaseBuild();
    message.builderVersion = object.builderVersion ?? "";
    message.signature = (object.signature !== undefined && object.signature !== null)
      ? BuildSignature.fromPartial(object.signature)
      : undefined;
    return message;
  },
};

function createBaseBuildSignature(): BuildSignature {
  return { publicKey: "", signature: Buffer.alloc(0), keyId: "", keyType: 0 };
}

export const BuildSignature: MessageFns<BuildSignature> = {
  encode(message: BuildSignature, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.publicKey !== "") {
      writer.uint32(10).string(message.publicKey);
    }
    if (message.signature.length !== 0) {
      writer.uint32(18).bytes(message.signature);
    }
    if (message.keyId !== "") {
      writer.uint32(26).string(message.keyId);
    }
    if (message.keyType !== 0) {
      writer.uint32(32).int32(message.keyType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BuildSignature {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBuildSignature();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.publicKey = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.signature = Buffer.from(reader.bytes());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.keyId = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.keyType = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BuildSignature {
    return {
      publicKey: isSet(object.publicKey) ? globalThis.String(object.publicKey) : "",
      signature: isSet(object.signature) ? Buffer.from(bytesFromBase64(object.signature)) : Buffer.alloc(0),
      keyId: isSet(object.keyId) ? globalThis.String(object.keyId) : "",
      keyType: isSet(object.keyType) ? buildSignature_KeyTypeFromJSON(object.keyType) : 0,
    };
  },

  toJSON(message: BuildSignature): unknown {
    const obj: any = {};
    if (message.publicKey !== "") {
      obj.publicKey = message.publicKey;
    }
    if (message.signature.length !== 0) {
      obj.signature = base64FromBytes(message.signature);
    }
    if (message.keyId !== "") {
      obj.keyId = message.keyId;
    }
    if (message.keyType !== 0) {
      obj.keyType = buildSignature_KeyTypeToJSON(message.keyType);
    }
    return obj;
  },

  create(base?: DeepPartial<BuildSignature>): BuildSignature {
    return BuildSignature.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BuildSignature>): BuildSignature {
    const message = createBaseBuildSignature();
    message.publicKey = object.publicKey ?? "";
    message.signature = object.signature ?? Buffer.alloc(0);
    message.keyId = object.keyId ?? "";
    message.keyType = object.keyType ?? 0;
    return message;
  },
};

function createBaseDetails(): Details {
  return { provenance: undefined, provenanceBytes: "" };
}

export const Details: MessageFns<Details> = {
  encode(message: Details, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.provenance !== undefined) {
      BuildProvenance.encode(message.provenance, writer.uint32(10).fork()).join();
    }
    if (message.provenanceBytes !== "") {
      writer.uint32(18).string(message.provenanceBytes);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Details {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDetails();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.provenance = BuildProvenance.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.provenanceBytes = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Details {
    return {
      provenance: isSet(object.provenance) ? BuildProvenance.fromJSON(object.provenance) : undefined,
      provenanceBytes: isSet(object.provenanceBytes) ? globalThis.String(object.provenanceBytes) : "",
    };
  },

  toJSON(message: Details): unknown {
    const obj: any = {};
    if (message.provenance !== undefined) {
      obj.provenance = BuildProvenance.toJSON(message.provenance);
    }
    if (message.provenanceBytes !== "") {
      obj.provenanceBytes = message.provenanceBytes;
    }
    return obj;
  },

  create(base?: DeepPartial<Details>): Details {
    return Details.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Details>): Details {
    const message = createBaseDetails();
    message.provenance = (object.provenance !== undefined && object.provenance !== null)
      ? BuildProvenance.fromPartial(object.provenance)
      : undefined;
    message.provenanceBytes = object.provenanceBytes ?? "";
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
}

function base64FromBytes(arr: Uint8Array): string {
  return globalThis.Buffer.from(arr).toString("base64");
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
