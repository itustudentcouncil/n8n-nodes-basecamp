// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/devtools/containeranalysis/v1beta1/deployment/deployment.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../../protobuf/timestamp.js";

export const protobufPackage = "grafeas.v1beta1.deployment";

/** An artifact that can be deployed in some runtime. */
export interface Deployable {
  /** Required. Resource URI for the artifact being deployed. */
  resourceUri: string[];
}

/** Details of a deployment occurrence. */
export interface Details {
  /** Required. Deployment history for the resource. */
  deployment: Deployment | undefined;
}

/** The period during which some deployable was active in a runtime. */
export interface Deployment {
  /** Identity of the user that triggered this deployment. */
  userEmail: string;
  /** Required. Beginning of the lifetime of this deployment. */
  deployTime:
    | Date
    | undefined;
  /** End of the lifetime of this deployment. */
  undeployTime:
    | Date
    | undefined;
  /** Configuration used to create this deployment. */
  config: string;
  /** Address of the runtime element hosting this deployment. */
  address: string;
  /**
   * Output only. Resource URI for the artifact being deployed taken from
   * the deployable field with the same name.
   */
  resourceUri: string[];
  /** Platform hosting this deployment. */
  platform: Deployment_Platform;
}

/** Types of platforms. */
export enum Deployment_Platform {
  /** PLATFORM_UNSPECIFIED - Unknown. */
  PLATFORM_UNSPECIFIED = 0,
  /** GKE - Google Container Engine. */
  GKE = 1,
  /** FLEX - Google App Engine: Flexible Environment. */
  FLEX = 2,
  /** CUSTOM - Custom user-defined platform. */
  CUSTOM = 3,
  UNRECOGNIZED = -1,
}

export function deployment_PlatformFromJSON(object: any): Deployment_Platform {
  switch (object) {
    case 0:
    case "PLATFORM_UNSPECIFIED":
      return Deployment_Platform.PLATFORM_UNSPECIFIED;
    case 1:
    case "GKE":
      return Deployment_Platform.GKE;
    case 2:
    case "FLEX":
      return Deployment_Platform.FLEX;
    case 3:
    case "CUSTOM":
      return Deployment_Platform.CUSTOM;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Deployment_Platform.UNRECOGNIZED;
  }
}

export function deployment_PlatformToJSON(object: Deployment_Platform): string {
  switch (object) {
    case Deployment_Platform.PLATFORM_UNSPECIFIED:
      return "PLATFORM_UNSPECIFIED";
    case Deployment_Platform.GKE:
      return "GKE";
    case Deployment_Platform.FLEX:
      return "FLEX";
    case Deployment_Platform.CUSTOM:
      return "CUSTOM";
    case Deployment_Platform.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseDeployable(): Deployable {
  return { resourceUri: [] };
}

export const Deployable: MessageFns<Deployable> = {
  encode(message: Deployable, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.resourceUri) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Deployable {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeployable();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceUri.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Deployable {
    return {
      resourceUri: globalThis.Array.isArray(object?.resourceUri)
        ? object.resourceUri.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: Deployable): unknown {
    const obj: any = {};
    if (message.resourceUri?.length) {
      obj.resourceUri = message.resourceUri;
    }
    return obj;
  },

  create(base?: DeepPartial<Deployable>): Deployable {
    return Deployable.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Deployable>): Deployable {
    const message = createBaseDeployable();
    message.resourceUri = object.resourceUri?.map((e) => e) || [];
    return message;
  },
};

function createBaseDetails(): Details {
  return { deployment: undefined };
}

export const Details: MessageFns<Details> = {
  encode(message: Details, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.deployment !== undefined) {
      Deployment.encode(message.deployment, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Details {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDetails();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.deployment = Deployment.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Details {
    return { deployment: isSet(object.deployment) ? Deployment.fromJSON(object.deployment) : undefined };
  },

  toJSON(message: Details): unknown {
    const obj: any = {};
    if (message.deployment !== undefined) {
      obj.deployment = Deployment.toJSON(message.deployment);
    }
    return obj;
  },

  create(base?: DeepPartial<Details>): Details {
    return Details.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Details>): Details {
    const message = createBaseDetails();
    message.deployment = (object.deployment !== undefined && object.deployment !== null)
      ? Deployment.fromPartial(object.deployment)
      : undefined;
    return message;
  },
};

function createBaseDeployment(): Deployment {
  return {
    userEmail: "",
    deployTime: undefined,
    undeployTime: undefined,
    config: "",
    address: "",
    resourceUri: [],
    platform: 0,
  };
}

export const Deployment: MessageFns<Deployment> = {
  encode(message: Deployment, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userEmail !== "") {
      writer.uint32(10).string(message.userEmail);
    }
    if (message.deployTime !== undefined) {
      Timestamp.encode(toTimestamp(message.deployTime), writer.uint32(18).fork()).join();
    }
    if (message.undeployTime !== undefined) {
      Timestamp.encode(toTimestamp(message.undeployTime), writer.uint32(26).fork()).join();
    }
    if (message.config !== "") {
      writer.uint32(34).string(message.config);
    }
    if (message.address !== "") {
      writer.uint32(42).string(message.address);
    }
    for (const v of message.resourceUri) {
      writer.uint32(50).string(v!);
    }
    if (message.platform !== 0) {
      writer.uint32(56).int32(message.platform);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Deployment {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeployment();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userEmail = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.deployTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.undeployTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.config = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.address = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.resourceUri.push(reader.string());
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.platform = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Deployment {
    return {
      userEmail: isSet(object.userEmail) ? globalThis.String(object.userEmail) : "",
      deployTime: isSet(object.deployTime) ? fromJsonTimestamp(object.deployTime) : undefined,
      undeployTime: isSet(object.undeployTime) ? fromJsonTimestamp(object.undeployTime) : undefined,
      config: isSet(object.config) ? globalThis.String(object.config) : "",
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      resourceUri: globalThis.Array.isArray(object?.resourceUri)
        ? object.resourceUri.map((e: any) => globalThis.String(e))
        : [],
      platform: isSet(object.platform) ? deployment_PlatformFromJSON(object.platform) : 0,
    };
  },

  toJSON(message: Deployment): unknown {
    const obj: any = {};
    if (message.userEmail !== "") {
      obj.userEmail = message.userEmail;
    }
    if (message.deployTime !== undefined) {
      obj.deployTime = message.deployTime.toISOString();
    }
    if (message.undeployTime !== undefined) {
      obj.undeployTime = message.undeployTime.toISOString();
    }
    if (message.config !== "") {
      obj.config = message.config;
    }
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.resourceUri?.length) {
      obj.resourceUri = message.resourceUri;
    }
    if (message.platform !== 0) {
      obj.platform = deployment_PlatformToJSON(message.platform);
    }
    return obj;
  },

  create(base?: DeepPartial<Deployment>): Deployment {
    return Deployment.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Deployment>): Deployment {
    const message = createBaseDeployment();
    message.userEmail = object.userEmail ?? "";
    message.deployTime = object.deployTime ?? undefined;
    message.undeployTime = object.undeployTime ?? undefined;
    message.config = object.config ?? "";
    message.address = object.address ?? "";
    message.resourceUri = object.resourceUri?.map((e) => e) || [];
    message.platform = object.platform ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
