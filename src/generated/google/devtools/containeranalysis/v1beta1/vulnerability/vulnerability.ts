// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/devtools/containeranalysis/v1beta1/vulnerability/vulnerability.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../../protobuf/timestamp.js";
import { RelatedUrl } from "../common/common.js";
import { CVSSv3 } from "../cvss/cvss.js";
import { Version } from "../package/package.js";

export const protobufPackage = "grafeas.v1beta1.vulnerability";

/** Note provider-assigned severity/impact ranking. */
export enum Severity {
  /** SEVERITY_UNSPECIFIED - Unknown. */
  SEVERITY_UNSPECIFIED = 0,
  /** MINIMAL - Minimal severity. */
  MINIMAL = 1,
  /** LOW - Low severity. */
  LOW = 2,
  /** MEDIUM - Medium severity. */
  MEDIUM = 3,
  /** HIGH - High severity. */
  HIGH = 4,
  /** CRITICAL - Critical severity. */
  CRITICAL = 5,
  UNRECOGNIZED = -1,
}

export function severityFromJSON(object: any): Severity {
  switch (object) {
    case 0:
    case "SEVERITY_UNSPECIFIED":
      return Severity.SEVERITY_UNSPECIFIED;
    case 1:
    case "MINIMAL":
      return Severity.MINIMAL;
    case 2:
    case "LOW":
      return Severity.LOW;
    case 3:
    case "MEDIUM":
      return Severity.MEDIUM;
    case 4:
    case "HIGH":
      return Severity.HIGH;
    case 5:
    case "CRITICAL":
      return Severity.CRITICAL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Severity.UNRECOGNIZED;
  }
}

export function severityToJSON(object: Severity): string {
  switch (object) {
    case Severity.SEVERITY_UNSPECIFIED:
      return "SEVERITY_UNSPECIFIED";
    case Severity.MINIMAL:
      return "MINIMAL";
    case Severity.LOW:
      return "LOW";
    case Severity.MEDIUM:
      return "MEDIUM";
    case Severity.HIGH:
      return "HIGH";
    case Severity.CRITICAL:
      return "CRITICAL";
    case Severity.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Vulnerability provides metadata about a security vulnerability in a Note. */
export interface Vulnerability {
  /** The CVSS score for this vulnerability. */
  cvssScore: number;
  /** Note provider assigned impact of the vulnerability. */
  severity: Severity;
  /**
   * All information about the package to specifically identify this
   * vulnerability. One entry per (version range and cpe_uri) the package
   * vulnerability has manifested in.
   */
  details: Vulnerability_Detail[];
  /** The full description of the CVSSv3. */
  cvssV3:
    | CVSSv3
    | undefined;
  /**
   * Windows details get their own format because the information format and
   * model don't match a normal detail. Specifically Windows updates are done as
   * patches, thus Windows vulnerabilities really are a missing package, rather
   * than a package being at an incorrect version.
   */
  windowsDetails: Vulnerability_WindowsDetail[];
  /**
   * The time this information was last changed at the source. This is an
   * upstream timestamp from the underlying information source - e.g. Ubuntu
   * security tracker.
   */
  sourceUpdateTime: Date | undefined;
}

/**
 * Identifies all appearances of this vulnerability in the package for a
 * specific distro/location. For example: glibc in
 * cpe:/o:debian:debian_linux:8 for versions 2.1 - 2.2
 */
export interface Vulnerability_Detail {
  /**
   * Required. The CPE URI in
   * [cpe format](https://cpe.mitre.org/specification/) in which the
   * vulnerability manifests. Examples include distro or storage location for
   * vulnerable jar.
   */
  cpeUri: string;
  /** Required. The name of the package where the vulnerability was found. */
  package: string;
  /** The min version of the package in which the vulnerability exists. */
  minAffectedVersion:
    | Version
    | undefined;
  /** The max version of the package in which the vulnerability exists. */
  maxAffectedVersion:
    | Version
    | undefined;
  /** The severity (eg: distro assigned severity) for this vulnerability. */
  severityName: string;
  /** A vendor-specific description of this note. */
  description: string;
  /** The fix for this specific package version. */
  fixedLocation:
    | VulnerabilityLocation
    | undefined;
  /**
   * The type of package; whether native or non native(ruby gems, node.js
   * packages etc).
   */
  packageType: string;
  /**
   * Whether this detail is obsolete. Occurrences are expected not to point to
   * obsolete details.
   */
  isObsolete: boolean;
  /**
   * The time this information was last changed at the source. This is an
   * upstream timestamp from the underlying information source - e.g. Ubuntu
   * security tracker.
   */
  sourceUpdateTime: Date | undefined;
}

export interface Vulnerability_WindowsDetail {
  /**
   * Required. The CPE URI in
   * [cpe format](https://cpe.mitre.org/specification/) in which the
   * vulnerability manifests. Examples include distro or storage location for
   * vulnerable jar.
   */
  cpeUri: string;
  /** Required. The name of the vulnerability. */
  name: string;
  /** The description of the vulnerability. */
  description: string;
  /**
   * Required. The names of the KBs which have hotfixes to mitigate this
   * vulnerability. Note that there may be multiple hotfixes (and thus
   * multiple KBs) that mitigate a given vulnerability. Currently any listed
   * kb's presence is considered a fix.
   */
  fixingKbs: Vulnerability_WindowsDetail_KnowledgeBase[];
}

export interface Vulnerability_WindowsDetail_KnowledgeBase {
  /** The KB name (generally of the form KB[0-9]+ i.e. KB123456). */
  name: string;
  /**
   * A link to the KB in the Windows update catalog -
   * https://www.catalog.update.microsoft.com/
   */
  url: string;
}

/** Details of a vulnerability Occurrence. */
export interface Details {
  /**
   * The type of package; whether native or non native(ruby gems, node.js
   * packages etc)
   */
  type: string;
  /** Output only. The note provider assigned Severity of the vulnerability. */
  severity: Severity;
  /**
   * Output only. The CVSS score of this vulnerability. CVSS score is on a
   * scale of 0-10 where 0 indicates low severity and 10 indicates high
   * severity.
   */
  cvssScore: number;
  /**
   * Required. The set of affected locations and their fixes (if available)
   * within the associated resource.
   */
  packageIssue: PackageIssue[];
  /** Output only. A one sentence description of this vulnerability. */
  shortDescription: string;
  /** Output only. A detailed description of this vulnerability. */
  longDescription: string;
  /** Output only. URLs related to this vulnerability. */
  relatedUrls: RelatedUrl[];
  /**
   * The distro assigned severity for this vulnerability when it is
   * available, and note provider assigned severity when distro has not yet
   * assigned a severity for this vulnerability.
   */
  effectiveSeverity: Severity;
}

/**
 * This message wraps a location affected by a vulnerability and its
 * associated fix (if one is available).
 */
export interface PackageIssue {
  /** Required. The location of the vulnerability. */
  affectedLocation:
    | VulnerabilityLocation
    | undefined;
  /** The location of the available fix for vulnerability. */
  fixedLocation:
    | VulnerabilityLocation
    | undefined;
  /**
   * Deprecated, use Details.effective_severity instead
   * The severity (e.g., distro assigned severity) for this vulnerability.
   */
  severityName: string;
}

/** The location of the vulnerability. */
export interface VulnerabilityLocation {
  /**
   * Required. The CPE URI in [cpe format](https://cpe.mitre.org/specification/)
   * format. Examples include distro or storage location for vulnerable jar.
   */
  cpeUri: string;
  /** Required. The package being described. */
  package: string;
  /** Required. The version of the package being described. */
  version: Version | undefined;
}

function createBaseVulnerability(): Vulnerability {
  return { cvssScore: 0, severity: 0, details: [], cvssV3: undefined, windowsDetails: [], sourceUpdateTime: undefined };
}

export const Vulnerability: MessageFns<Vulnerability> = {
  encode(message: Vulnerability, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.cvssScore !== 0) {
      writer.uint32(13).float(message.cvssScore);
    }
    if (message.severity !== 0) {
      writer.uint32(16).int32(message.severity);
    }
    for (const v of message.details) {
      Vulnerability_Detail.encode(v!, writer.uint32(26).fork()).join();
    }
    if (message.cvssV3 !== undefined) {
      CVSSv3.encode(message.cvssV3, writer.uint32(34).fork()).join();
    }
    for (const v of message.windowsDetails) {
      Vulnerability_WindowsDetail.encode(v!, writer.uint32(42).fork()).join();
    }
    if (message.sourceUpdateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.sourceUpdateTime), writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Vulnerability {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVulnerability();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 13) {
            break;
          }

          message.cvssScore = reader.float();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.severity = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.details.push(Vulnerability_Detail.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.cvssV3 = CVSSv3.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.windowsDetails.push(Vulnerability_WindowsDetail.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.sourceUpdateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Vulnerability {
    return {
      cvssScore: isSet(object.cvssScore) ? globalThis.Number(object.cvssScore) : 0,
      severity: isSet(object.severity) ? severityFromJSON(object.severity) : 0,
      details: globalThis.Array.isArray(object?.details)
        ? object.details.map((e: any) => Vulnerability_Detail.fromJSON(e))
        : [],
      cvssV3: isSet(object.cvssV3) ? CVSSv3.fromJSON(object.cvssV3) : undefined,
      windowsDetails: globalThis.Array.isArray(object?.windowsDetails)
        ? object.windowsDetails.map((e: any) => Vulnerability_WindowsDetail.fromJSON(e))
        : [],
      sourceUpdateTime: isSet(object.sourceUpdateTime) ? fromJsonTimestamp(object.sourceUpdateTime) : undefined,
    };
  },

  toJSON(message: Vulnerability): unknown {
    const obj: any = {};
    if (message.cvssScore !== 0) {
      obj.cvssScore = message.cvssScore;
    }
    if (message.severity !== 0) {
      obj.severity = severityToJSON(message.severity);
    }
    if (message.details?.length) {
      obj.details = message.details.map((e) => Vulnerability_Detail.toJSON(e));
    }
    if (message.cvssV3 !== undefined) {
      obj.cvssV3 = CVSSv3.toJSON(message.cvssV3);
    }
    if (message.windowsDetails?.length) {
      obj.windowsDetails = message.windowsDetails.map((e) => Vulnerability_WindowsDetail.toJSON(e));
    }
    if (message.sourceUpdateTime !== undefined) {
      obj.sourceUpdateTime = message.sourceUpdateTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<Vulnerability>): Vulnerability {
    return Vulnerability.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Vulnerability>): Vulnerability {
    const message = createBaseVulnerability();
    message.cvssScore = object.cvssScore ?? 0;
    message.severity = object.severity ?? 0;
    message.details = object.details?.map((e) => Vulnerability_Detail.fromPartial(e)) || [];
    message.cvssV3 = (object.cvssV3 !== undefined && object.cvssV3 !== null)
      ? CVSSv3.fromPartial(object.cvssV3)
      : undefined;
    message.windowsDetails = object.windowsDetails?.map((e) => Vulnerability_WindowsDetail.fromPartial(e)) || [];
    message.sourceUpdateTime = object.sourceUpdateTime ?? undefined;
    return message;
  },
};

function createBaseVulnerability_Detail(): Vulnerability_Detail {
  return {
    cpeUri: "",
    package: "",
    minAffectedVersion: undefined,
    maxAffectedVersion: undefined,
    severityName: "",
    description: "",
    fixedLocation: undefined,
    packageType: "",
    isObsolete: false,
    sourceUpdateTime: undefined,
  };
}

export const Vulnerability_Detail: MessageFns<Vulnerability_Detail> = {
  encode(message: Vulnerability_Detail, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.cpeUri !== "") {
      writer.uint32(10).string(message.cpeUri);
    }
    if (message.package !== "") {
      writer.uint32(18).string(message.package);
    }
    if (message.minAffectedVersion !== undefined) {
      Version.encode(message.minAffectedVersion, writer.uint32(26).fork()).join();
    }
    if (message.maxAffectedVersion !== undefined) {
      Version.encode(message.maxAffectedVersion, writer.uint32(34).fork()).join();
    }
    if (message.severityName !== "") {
      writer.uint32(42).string(message.severityName);
    }
    if (message.description !== "") {
      writer.uint32(50).string(message.description);
    }
    if (message.fixedLocation !== undefined) {
      VulnerabilityLocation.encode(message.fixedLocation, writer.uint32(58).fork()).join();
    }
    if (message.packageType !== "") {
      writer.uint32(66).string(message.packageType);
    }
    if (message.isObsolete !== false) {
      writer.uint32(72).bool(message.isObsolete);
    }
    if (message.sourceUpdateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.sourceUpdateTime), writer.uint32(82).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Vulnerability_Detail {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVulnerability_Detail();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.cpeUri = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.package = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.minAffectedVersion = Version.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.maxAffectedVersion = Version.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.severityName = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.description = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.fixedLocation = VulnerabilityLocation.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.packageType = reader.string();
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.isObsolete = reader.bool();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.sourceUpdateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Vulnerability_Detail {
    return {
      cpeUri: isSet(object.cpeUri) ? globalThis.String(object.cpeUri) : "",
      package: isSet(object.package) ? globalThis.String(object.package) : "",
      minAffectedVersion: isSet(object.minAffectedVersion) ? Version.fromJSON(object.minAffectedVersion) : undefined,
      maxAffectedVersion: isSet(object.maxAffectedVersion) ? Version.fromJSON(object.maxAffectedVersion) : undefined,
      severityName: isSet(object.severityName) ? globalThis.String(object.severityName) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      fixedLocation: isSet(object.fixedLocation) ? VulnerabilityLocation.fromJSON(object.fixedLocation) : undefined,
      packageType: isSet(object.packageType) ? globalThis.String(object.packageType) : "",
      isObsolete: isSet(object.isObsolete) ? globalThis.Boolean(object.isObsolete) : false,
      sourceUpdateTime: isSet(object.sourceUpdateTime) ? fromJsonTimestamp(object.sourceUpdateTime) : undefined,
    };
  },

  toJSON(message: Vulnerability_Detail): unknown {
    const obj: any = {};
    if (message.cpeUri !== "") {
      obj.cpeUri = message.cpeUri;
    }
    if (message.package !== "") {
      obj.package = message.package;
    }
    if (message.minAffectedVersion !== undefined) {
      obj.minAffectedVersion = Version.toJSON(message.minAffectedVersion);
    }
    if (message.maxAffectedVersion !== undefined) {
      obj.maxAffectedVersion = Version.toJSON(message.maxAffectedVersion);
    }
    if (message.severityName !== "") {
      obj.severityName = message.severityName;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.fixedLocation !== undefined) {
      obj.fixedLocation = VulnerabilityLocation.toJSON(message.fixedLocation);
    }
    if (message.packageType !== "") {
      obj.packageType = message.packageType;
    }
    if (message.isObsolete !== false) {
      obj.isObsolete = message.isObsolete;
    }
    if (message.sourceUpdateTime !== undefined) {
      obj.sourceUpdateTime = message.sourceUpdateTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<Vulnerability_Detail>): Vulnerability_Detail {
    return Vulnerability_Detail.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Vulnerability_Detail>): Vulnerability_Detail {
    const message = createBaseVulnerability_Detail();
    message.cpeUri = object.cpeUri ?? "";
    message.package = object.package ?? "";
    message.minAffectedVersion = (object.minAffectedVersion !== undefined && object.minAffectedVersion !== null)
      ? Version.fromPartial(object.minAffectedVersion)
      : undefined;
    message.maxAffectedVersion = (object.maxAffectedVersion !== undefined && object.maxAffectedVersion !== null)
      ? Version.fromPartial(object.maxAffectedVersion)
      : undefined;
    message.severityName = object.severityName ?? "";
    message.description = object.description ?? "";
    message.fixedLocation = (object.fixedLocation !== undefined && object.fixedLocation !== null)
      ? VulnerabilityLocation.fromPartial(object.fixedLocation)
      : undefined;
    message.packageType = object.packageType ?? "";
    message.isObsolete = object.isObsolete ?? false;
    message.sourceUpdateTime = object.sourceUpdateTime ?? undefined;
    return message;
  },
};

function createBaseVulnerability_WindowsDetail(): Vulnerability_WindowsDetail {
  return { cpeUri: "", name: "", description: "", fixingKbs: [] };
}

export const Vulnerability_WindowsDetail: MessageFns<Vulnerability_WindowsDetail> = {
  encode(message: Vulnerability_WindowsDetail, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.cpeUri !== "") {
      writer.uint32(10).string(message.cpeUri);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    for (const v of message.fixingKbs) {
      Vulnerability_WindowsDetail_KnowledgeBase.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Vulnerability_WindowsDetail {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVulnerability_WindowsDetail();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.cpeUri = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.fixingKbs.push(Vulnerability_WindowsDetail_KnowledgeBase.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Vulnerability_WindowsDetail {
    return {
      cpeUri: isSet(object.cpeUri) ? globalThis.String(object.cpeUri) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      fixingKbs: globalThis.Array.isArray(object?.fixingKbs)
        ? object.fixingKbs.map((e: any) => Vulnerability_WindowsDetail_KnowledgeBase.fromJSON(e))
        : [],
    };
  },

  toJSON(message: Vulnerability_WindowsDetail): unknown {
    const obj: any = {};
    if (message.cpeUri !== "") {
      obj.cpeUri = message.cpeUri;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.fixingKbs?.length) {
      obj.fixingKbs = message.fixingKbs.map((e) => Vulnerability_WindowsDetail_KnowledgeBase.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<Vulnerability_WindowsDetail>): Vulnerability_WindowsDetail {
    return Vulnerability_WindowsDetail.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Vulnerability_WindowsDetail>): Vulnerability_WindowsDetail {
    const message = createBaseVulnerability_WindowsDetail();
    message.cpeUri = object.cpeUri ?? "";
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.fixingKbs = object.fixingKbs?.map((e) => Vulnerability_WindowsDetail_KnowledgeBase.fromPartial(e)) || [];
    return message;
  },
};

function createBaseVulnerability_WindowsDetail_KnowledgeBase(): Vulnerability_WindowsDetail_KnowledgeBase {
  return { name: "", url: "" };
}

export const Vulnerability_WindowsDetail_KnowledgeBase: MessageFns<Vulnerability_WindowsDetail_KnowledgeBase> = {
  encode(message: Vulnerability_WindowsDetail_KnowledgeBase, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.url !== "") {
      writer.uint32(18).string(message.url);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Vulnerability_WindowsDetail_KnowledgeBase {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVulnerability_WindowsDetail_KnowledgeBase();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.url = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Vulnerability_WindowsDetail_KnowledgeBase {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      url: isSet(object.url) ? globalThis.String(object.url) : "",
    };
  },

  toJSON(message: Vulnerability_WindowsDetail_KnowledgeBase): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.url !== "") {
      obj.url = message.url;
    }
    return obj;
  },

  create(base?: DeepPartial<Vulnerability_WindowsDetail_KnowledgeBase>): Vulnerability_WindowsDetail_KnowledgeBase {
    return Vulnerability_WindowsDetail_KnowledgeBase.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<Vulnerability_WindowsDetail_KnowledgeBase>,
  ): Vulnerability_WindowsDetail_KnowledgeBase {
    const message = createBaseVulnerability_WindowsDetail_KnowledgeBase();
    message.name = object.name ?? "";
    message.url = object.url ?? "";
    return message;
  },
};

function createBaseDetails(): Details {
  return {
    type: "",
    severity: 0,
    cvssScore: 0,
    packageIssue: [],
    shortDescription: "",
    longDescription: "",
    relatedUrls: [],
    effectiveSeverity: 0,
  };
}

export const Details: MessageFns<Details> = {
  encode(message: Details, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== "") {
      writer.uint32(10).string(message.type);
    }
    if (message.severity !== 0) {
      writer.uint32(16).int32(message.severity);
    }
    if (message.cvssScore !== 0) {
      writer.uint32(29).float(message.cvssScore);
    }
    for (const v of message.packageIssue) {
      PackageIssue.encode(v!, writer.uint32(34).fork()).join();
    }
    if (message.shortDescription !== "") {
      writer.uint32(42).string(message.shortDescription);
    }
    if (message.longDescription !== "") {
      writer.uint32(50).string(message.longDescription);
    }
    for (const v of message.relatedUrls) {
      RelatedUrl.encode(v!, writer.uint32(58).fork()).join();
    }
    if (message.effectiveSeverity !== 0) {
      writer.uint32(64).int32(message.effectiveSeverity);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Details {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDetails();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.type = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.severity = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 29) {
            break;
          }

          message.cvssScore = reader.float();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.packageIssue.push(PackageIssue.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.shortDescription = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.longDescription = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.relatedUrls.push(RelatedUrl.decode(reader, reader.uint32()));
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.effectiveSeverity = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Details {
    return {
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      severity: isSet(object.severity) ? severityFromJSON(object.severity) : 0,
      cvssScore: isSet(object.cvssScore) ? globalThis.Number(object.cvssScore) : 0,
      packageIssue: globalThis.Array.isArray(object?.packageIssue)
        ? object.packageIssue.map((e: any) => PackageIssue.fromJSON(e))
        : [],
      shortDescription: isSet(object.shortDescription) ? globalThis.String(object.shortDescription) : "",
      longDescription: isSet(object.longDescription) ? globalThis.String(object.longDescription) : "",
      relatedUrls: globalThis.Array.isArray(object?.relatedUrls)
        ? object.relatedUrls.map((e: any) => RelatedUrl.fromJSON(e))
        : [],
      effectiveSeverity: isSet(object.effectiveSeverity) ? severityFromJSON(object.effectiveSeverity) : 0,
    };
  },

  toJSON(message: Details): unknown {
    const obj: any = {};
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.severity !== 0) {
      obj.severity = severityToJSON(message.severity);
    }
    if (message.cvssScore !== 0) {
      obj.cvssScore = message.cvssScore;
    }
    if (message.packageIssue?.length) {
      obj.packageIssue = message.packageIssue.map((e) => PackageIssue.toJSON(e));
    }
    if (message.shortDescription !== "") {
      obj.shortDescription = message.shortDescription;
    }
    if (message.longDescription !== "") {
      obj.longDescription = message.longDescription;
    }
    if (message.relatedUrls?.length) {
      obj.relatedUrls = message.relatedUrls.map((e) => RelatedUrl.toJSON(e));
    }
    if (message.effectiveSeverity !== 0) {
      obj.effectiveSeverity = severityToJSON(message.effectiveSeverity);
    }
    return obj;
  },

  create(base?: DeepPartial<Details>): Details {
    return Details.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Details>): Details {
    const message = createBaseDetails();
    message.type = object.type ?? "";
    message.severity = object.severity ?? 0;
    message.cvssScore = object.cvssScore ?? 0;
    message.packageIssue = object.packageIssue?.map((e) => PackageIssue.fromPartial(e)) || [];
    message.shortDescription = object.shortDescription ?? "";
    message.longDescription = object.longDescription ?? "";
    message.relatedUrls = object.relatedUrls?.map((e) => RelatedUrl.fromPartial(e)) || [];
    message.effectiveSeverity = object.effectiveSeverity ?? 0;
    return message;
  },
};

function createBasePackageIssue(): PackageIssue {
  return { affectedLocation: undefined, fixedLocation: undefined, severityName: "" };
}

export const PackageIssue: MessageFns<PackageIssue> = {
  encode(message: PackageIssue, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.affectedLocation !== undefined) {
      VulnerabilityLocation.encode(message.affectedLocation, writer.uint32(10).fork()).join();
    }
    if (message.fixedLocation !== undefined) {
      VulnerabilityLocation.encode(message.fixedLocation, writer.uint32(18).fork()).join();
    }
    if (message.severityName !== "") {
      writer.uint32(26).string(message.severityName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PackageIssue {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePackageIssue();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.affectedLocation = VulnerabilityLocation.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.fixedLocation = VulnerabilityLocation.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.severityName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PackageIssue {
    return {
      affectedLocation: isSet(object.affectedLocation)
        ? VulnerabilityLocation.fromJSON(object.affectedLocation)
        : undefined,
      fixedLocation: isSet(object.fixedLocation) ? VulnerabilityLocation.fromJSON(object.fixedLocation) : undefined,
      severityName: isSet(object.severityName) ? globalThis.String(object.severityName) : "",
    };
  },

  toJSON(message: PackageIssue): unknown {
    const obj: any = {};
    if (message.affectedLocation !== undefined) {
      obj.affectedLocation = VulnerabilityLocation.toJSON(message.affectedLocation);
    }
    if (message.fixedLocation !== undefined) {
      obj.fixedLocation = VulnerabilityLocation.toJSON(message.fixedLocation);
    }
    if (message.severityName !== "") {
      obj.severityName = message.severityName;
    }
    return obj;
  },

  create(base?: DeepPartial<PackageIssue>): PackageIssue {
    return PackageIssue.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PackageIssue>): PackageIssue {
    const message = createBasePackageIssue();
    message.affectedLocation = (object.affectedLocation !== undefined && object.affectedLocation !== null)
      ? VulnerabilityLocation.fromPartial(object.affectedLocation)
      : undefined;
    message.fixedLocation = (object.fixedLocation !== undefined && object.fixedLocation !== null)
      ? VulnerabilityLocation.fromPartial(object.fixedLocation)
      : undefined;
    message.severityName = object.severityName ?? "";
    return message;
  },
};

function createBaseVulnerabilityLocation(): VulnerabilityLocation {
  return { cpeUri: "", package: "", version: undefined };
}

export const VulnerabilityLocation: MessageFns<VulnerabilityLocation> = {
  encode(message: VulnerabilityLocation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.cpeUri !== "") {
      writer.uint32(10).string(message.cpeUri);
    }
    if (message.package !== "") {
      writer.uint32(18).string(message.package);
    }
    if (message.version !== undefined) {
      Version.encode(message.version, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VulnerabilityLocation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVulnerabilityLocation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.cpeUri = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.package = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.version = Version.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VulnerabilityLocation {
    return {
      cpeUri: isSet(object.cpeUri) ? globalThis.String(object.cpeUri) : "",
      package: isSet(object.package) ? globalThis.String(object.package) : "",
      version: isSet(object.version) ? Version.fromJSON(object.version) : undefined,
    };
  },

  toJSON(message: VulnerabilityLocation): unknown {
    const obj: any = {};
    if (message.cpeUri !== "") {
      obj.cpeUri = message.cpeUri;
    }
    if (message.package !== "") {
      obj.package = message.package;
    }
    if (message.version !== undefined) {
      obj.version = Version.toJSON(message.version);
    }
    return obj;
  },

  create(base?: DeepPartial<VulnerabilityLocation>): VulnerabilityLocation {
    return VulnerabilityLocation.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<VulnerabilityLocation>): VulnerabilityLocation {
    const message = createBaseVulnerabilityLocation();
    message.cpeUri = object.cpeUri ?? "";
    message.package = object.package ?? "";
    message.version = (object.version !== undefined && object.version !== null)
      ? Version.fromPartial(object.version)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
