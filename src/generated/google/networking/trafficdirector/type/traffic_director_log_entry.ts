// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/networking/trafficdirector/type/traffic_director_log_entry.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.networking.trafficdirector.type";

/**
 * A common proto for describing how the Traffic Director handles
 * xDS-connections/requests/responses.
 */
export interface TrafficDirectorLogEntry {
  /** An ID of xDS-client connecting to the Traffic Director. */
  nodeId: string;
  /**
   * The string representation of IPv4 or IPv6 address of xDS-client
   * connecting to the Traffic Director.
   * IPv4 address must be in the format defined in RFC791, four octets separated
   * by a period. Size of a string is between 7-15 characters. Example: 1.2.3.4
   * IPv6 address must be in one of the formats defined in RFC4291. Size of a
   * string is between 7-39 characters. Example: 2001:DB8:0:0:8:800:200C:417A
   */
  nodeIp: string;
  /** A free text describing details of the event. */
  description: string;
  /** Type of xDS-client connecting to Traffic Director */
  clientType: TrafficDirectorLogEntry_ClientType;
  /** The version of xDS-client connecting to Traffic Director. */
  clientVersion: string;
  /** The xDS API version used by xDS clients connecting to Traffic Director. */
  transportApiVersion: TrafficDirectorLogEntry_TransportApiVersion;
}

/** Defines possible values of client type. */
export enum TrafficDirectorLogEntry_ClientType {
  /** CLIENT_TYPE_UNSPECIFIED - Unspecified. */
  CLIENT_TYPE_UNSPECIFIED = 0,
  /** ENVOY - Envoy client. */
  ENVOY = 1,
  /** GRPC_JAVA - gRPC Java client. */
  GRPC_JAVA = 2,
  /** GRPC_CPP - gRPC C++ client. */
  GRPC_CPP = 3,
  /** GRPC_PYTHON - gRPC Python client. */
  GRPC_PYTHON = 4,
  /** GRPC_GO - gRPC Go client. */
  GRPC_GO = 5,
  /** GRPC_RUBY - gRPC Ruby client. */
  GRPC_RUBY = 6,
  /** GRPC_PHP - gRPC Ruby client. */
  GRPC_PHP = 7,
  /** GRPC_NODE - gRPC Node client. */
  GRPC_NODE = 8,
  /** GRPC_CSHARP - gRPC CSharp client. */
  GRPC_CSHARP = 9,
  /** UNKNOWN - unknown client type. */
  UNKNOWN = 10,
  UNRECOGNIZED = -1,
}

export function trafficDirectorLogEntry_ClientTypeFromJSON(object: any): TrafficDirectorLogEntry_ClientType {
  switch (object) {
    case 0:
    case "CLIENT_TYPE_UNSPECIFIED":
      return TrafficDirectorLogEntry_ClientType.CLIENT_TYPE_UNSPECIFIED;
    case 1:
    case "ENVOY":
      return TrafficDirectorLogEntry_ClientType.ENVOY;
    case 2:
    case "GRPC_JAVA":
      return TrafficDirectorLogEntry_ClientType.GRPC_JAVA;
    case 3:
    case "GRPC_CPP":
      return TrafficDirectorLogEntry_ClientType.GRPC_CPP;
    case 4:
    case "GRPC_PYTHON":
      return TrafficDirectorLogEntry_ClientType.GRPC_PYTHON;
    case 5:
    case "GRPC_GO":
      return TrafficDirectorLogEntry_ClientType.GRPC_GO;
    case 6:
    case "GRPC_RUBY":
      return TrafficDirectorLogEntry_ClientType.GRPC_RUBY;
    case 7:
    case "GRPC_PHP":
      return TrafficDirectorLogEntry_ClientType.GRPC_PHP;
    case 8:
    case "GRPC_NODE":
      return TrafficDirectorLogEntry_ClientType.GRPC_NODE;
    case 9:
    case "GRPC_CSHARP":
      return TrafficDirectorLogEntry_ClientType.GRPC_CSHARP;
    case 10:
    case "UNKNOWN":
      return TrafficDirectorLogEntry_ClientType.UNKNOWN;
    case -1:
    case "UNRECOGNIZED":
    default:
      return TrafficDirectorLogEntry_ClientType.UNRECOGNIZED;
  }
}

export function trafficDirectorLogEntry_ClientTypeToJSON(object: TrafficDirectorLogEntry_ClientType): string {
  switch (object) {
    case TrafficDirectorLogEntry_ClientType.CLIENT_TYPE_UNSPECIFIED:
      return "CLIENT_TYPE_UNSPECIFIED";
    case TrafficDirectorLogEntry_ClientType.ENVOY:
      return "ENVOY";
    case TrafficDirectorLogEntry_ClientType.GRPC_JAVA:
      return "GRPC_JAVA";
    case TrafficDirectorLogEntry_ClientType.GRPC_CPP:
      return "GRPC_CPP";
    case TrafficDirectorLogEntry_ClientType.GRPC_PYTHON:
      return "GRPC_PYTHON";
    case TrafficDirectorLogEntry_ClientType.GRPC_GO:
      return "GRPC_GO";
    case TrafficDirectorLogEntry_ClientType.GRPC_RUBY:
      return "GRPC_RUBY";
    case TrafficDirectorLogEntry_ClientType.GRPC_PHP:
      return "GRPC_PHP";
    case TrafficDirectorLogEntry_ClientType.GRPC_NODE:
      return "GRPC_NODE";
    case TrafficDirectorLogEntry_ClientType.GRPC_CSHARP:
      return "GRPC_CSHARP";
    case TrafficDirectorLogEntry_ClientType.UNKNOWN:
      return "UNKNOWN";
    case TrafficDirectorLogEntry_ClientType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Defines possible values of API version. */
export enum TrafficDirectorLogEntry_TransportApiVersion {
  /** TRANSPORT_API_VERSION_UNSPECIFIED - Unspecified. */
  TRANSPORT_API_VERSION_UNSPECIFIED = 0,
  /** V2 - v2 xDS version. */
  V2 = 1,
  /** V3 - v3 xDS version. */
  V3 = 2,
  UNRECOGNIZED = -1,
}

export function trafficDirectorLogEntry_TransportApiVersionFromJSON(
  object: any,
): TrafficDirectorLogEntry_TransportApiVersion {
  switch (object) {
    case 0:
    case "TRANSPORT_API_VERSION_UNSPECIFIED":
      return TrafficDirectorLogEntry_TransportApiVersion.TRANSPORT_API_VERSION_UNSPECIFIED;
    case 1:
    case "V2":
      return TrafficDirectorLogEntry_TransportApiVersion.V2;
    case 2:
    case "V3":
      return TrafficDirectorLogEntry_TransportApiVersion.V3;
    case -1:
    case "UNRECOGNIZED":
    default:
      return TrafficDirectorLogEntry_TransportApiVersion.UNRECOGNIZED;
  }
}

export function trafficDirectorLogEntry_TransportApiVersionToJSON(
  object: TrafficDirectorLogEntry_TransportApiVersion,
): string {
  switch (object) {
    case TrafficDirectorLogEntry_TransportApiVersion.TRANSPORT_API_VERSION_UNSPECIFIED:
      return "TRANSPORT_API_VERSION_UNSPECIFIED";
    case TrafficDirectorLogEntry_TransportApiVersion.V2:
      return "V2";
    case TrafficDirectorLogEntry_TransportApiVersion.V3:
      return "V3";
    case TrafficDirectorLogEntry_TransportApiVersion.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseTrafficDirectorLogEntry(): TrafficDirectorLogEntry {
  return { nodeId: "", nodeIp: "", description: "", clientType: 0, clientVersion: "", transportApiVersion: 0 };
}

export const TrafficDirectorLogEntry: MessageFns<TrafficDirectorLogEntry> = {
  encode(message: TrafficDirectorLogEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.nodeId !== "") {
      writer.uint32(10).string(message.nodeId);
    }
    if (message.nodeIp !== "") {
      writer.uint32(18).string(message.nodeIp);
    }
    if (message.description !== "") {
      writer.uint32(34).string(message.description);
    }
    if (message.clientType !== 0) {
      writer.uint32(40).int32(message.clientType);
    }
    if (message.clientVersion !== "") {
      writer.uint32(50).string(message.clientVersion);
    }
    if (message.transportApiVersion !== 0) {
      writer.uint32(56).int32(message.transportApiVersion);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TrafficDirectorLogEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTrafficDirectorLogEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.nodeId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nodeIp = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.description = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.clientType = reader.int32() as any;
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.clientVersion = reader.string();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.transportApiVersion = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TrafficDirectorLogEntry {
    return {
      nodeId: isSet(object.nodeId) ? globalThis.String(object.nodeId) : "",
      nodeIp: isSet(object.nodeIp) ? globalThis.String(object.nodeIp) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      clientType: isSet(object.clientType) ? trafficDirectorLogEntry_ClientTypeFromJSON(object.clientType) : 0,
      clientVersion: isSet(object.clientVersion) ? globalThis.String(object.clientVersion) : "",
      transportApiVersion: isSet(object.transportApiVersion)
        ? trafficDirectorLogEntry_TransportApiVersionFromJSON(object.transportApiVersion)
        : 0,
    };
  },

  toJSON(message: TrafficDirectorLogEntry): unknown {
    const obj: any = {};
    if (message.nodeId !== "") {
      obj.nodeId = message.nodeId;
    }
    if (message.nodeIp !== "") {
      obj.nodeIp = message.nodeIp;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.clientType !== 0) {
      obj.clientType = trafficDirectorLogEntry_ClientTypeToJSON(message.clientType);
    }
    if (message.clientVersion !== "") {
      obj.clientVersion = message.clientVersion;
    }
    if (message.transportApiVersion !== 0) {
      obj.transportApiVersion = trafficDirectorLogEntry_TransportApiVersionToJSON(message.transportApiVersion);
    }
    return obj;
  },

  create(base?: DeepPartial<TrafficDirectorLogEntry>): TrafficDirectorLogEntry {
    return TrafficDirectorLogEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TrafficDirectorLogEntry>): TrafficDirectorLogEntry {
    const message = createBaseTrafficDirectorLogEntry();
    message.nodeId = object.nodeId ?? "";
    message.nodeIp = object.nodeIp ?? "";
    message.description = object.description ?? "";
    message.clientType = object.clientType ?? 0;
    message.clientVersion = object.clientVersion ?? "";
    message.transportApiVersion = object.transportApiVersion ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
