// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/searchads360/v0/resources/customer.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import {
  AccountStatusEnum_AccountStatus,
  accountStatusEnum_AccountStatusFromJSON,
  accountStatusEnum_AccountStatusToJSON,
} from "../enums/account_status.js";
import {
  AccountTypeEnum_AccountType,
  accountTypeEnum_AccountTypeFromJSON,
  accountTypeEnum_AccountTypeToJSON,
} from "../enums/account_type.js";
import {
  ConversionTrackingStatusEnum_ConversionTrackingStatus,
  conversionTrackingStatusEnum_ConversionTrackingStatusFromJSON,
  conversionTrackingStatusEnum_ConversionTrackingStatusToJSON,
} from "../enums/conversion_tracking_status_enum.js";
import {
  CustomerStatusEnum_CustomerStatus,
  customerStatusEnum_CustomerStatusFromJSON,
  customerStatusEnum_CustomerStatusToJSON,
} from "../enums/customer_status.js";

export const protobufPackage = "google.ads.searchads360.v0.resources";

/** A customer. */
export interface Customer {
  /**
   * Immutable. The resource name of the customer.
   * Customer resource names have the form:
   *
   * `customers/{customer_id}`
   */
  resourceName: string;
  /** Output only. The ID of the customer. */
  id?:
    | Long
    | undefined;
  /** Optional, non-unique descriptive name of the customer. */
  descriptiveName?:
    | string
    | undefined;
  /**
   * Immutable. The currency in which the account operates.
   * A subset of the currency codes from the ISO 4217 standard is
   * supported.
   */
  currencyCode?:
    | string
    | undefined;
  /** Immutable. The local timezone ID of the customer. */
  timeZone?:
    | string
    | undefined;
  /** The URL template for constructing a tracking URL out of parameters. */
  trackingUrlTemplate?:
    | string
    | undefined;
  /** The URL template for appending params to the final URL. */
  finalUrlSuffix?:
    | string
    | undefined;
  /** Whether auto-tagging is enabled for the customer. */
  autoTaggingEnabled?:
    | boolean
    | undefined;
  /** Output only. Whether the customer is a manager. */
  manager?:
    | boolean
    | undefined;
  /** Output only. Conversion tracking setting for a customer. */
  conversionTrackingSetting:
    | ConversionTrackingSetting
    | undefined;
  /**
   * Output only. Engine account type, for example, Google Ads, Microsoft
   * Advertising, Yahoo Japan, Baidu, Facebook, Engine Track, etc.
   */
  accountType: AccountTypeEnum_AccountType;
  /**
   * Output only. DoubleClick Campaign Manager (DCM) setting for a manager
   * customer.
   */
  doubleClickCampaignManagerSetting:
    | DoubleClickCampaignManagerSetting
    | undefined;
  /** Output only. Account status, for example, Enabled, Paused, Removed, etc. */
  accountStatus: AccountStatusEnum_AccountStatus;
  /**
   * Output only. The datetime when this customer was last modified. The
   * datetime is in the customer's time zone and in "yyyy-MM-dd HH:mm:ss.ssssss"
   * format.
   */
  lastModifiedTime: string;
  /** Output only. ID of the account in the external engine account. */
  engineId: string;
  /** Output only. The status of the customer. */
  status: CustomerStatusEnum_CustomerStatus;
  /**
   * Output only. The timestamp when this customer was created. The timestamp is
   * in the customer's time zone and in "yyyy-MM-dd HH:mm:ss" format.
   */
  creationTime: string;
}

/**
 * A collection of customer-wide settings related to Search Ads 360 Conversion
 * Tracking.
 */
export interface ConversionTrackingSetting {
  /**
   * Output only. The conversion tracking id used for this account. This id
   * doesn't indicate whether the customer uses conversion tracking
   * (conversion_tracking_status does). This field is read-only.
   */
  conversionTrackingId?:
    | Long
    | undefined;
  /**
   * Output only. The conversion tracking id of the customer's manager. This is
   * set when the customer is opted into  conversion tracking, and it overrides
   * conversion_tracking_id. This field can only be managed through the Google
   * Ads UI. This field is read-only.
   */
  googleAdsCrossAccountConversionTrackingId?:
    | Long
    | undefined;
  /**
   * Output only. The conversion tracking id of the customer's manager. This is
   * set when the customer is opted into cross-account conversion tracking, and
   * it overrides conversion_tracking_id.
   */
  crossAccountConversionTrackingId?:
    | Long
    | undefined;
  /**
   * Output only. Whether the customer has accepted customer data terms. If
   * using cross-account conversion tracking, this value is inherited from the
   * manager. This field is read-only. For more
   * information, see https://support.google.com/adspolicy/answer/7475709.
   */
  acceptedCustomerDataTerms: boolean;
  /**
   * Output only. Conversion tracking status. It indicates whether the customer
   * is using conversion tracking, and who is the conversion tracking owner of
   * this customer. If this customer is using cross-account conversion tracking,
   * the value returned will differ based on the `login-customer-id` of the
   * request.
   */
  conversionTrackingStatus: ConversionTrackingStatusEnum_ConversionTrackingStatus;
  /**
   * Output only. Whether the customer is opted-in for enhanced conversions
   * for leads. If using cross-account conversion tracking, this value is
   * inherited from the manager. This field is read-only.
   */
  enhancedConversionsForLeadsEnabled: boolean;
  /**
   * Output only. The resource name of the customer where conversions are
   * created and managed. This field is read-only.
   */
  googleAdsConversionCustomer: string;
}

/** DoubleClick Campaign Manager (DCM) setting for a manager customer. */
export interface DoubleClickCampaignManagerSetting {
  /**
   * Output only. ID of the Campaign Manager advertiser associated with this
   * customer.
   */
  advertiserId: Long;
  /**
   * Output only. ID of the Campaign Manager network associated with this
   * customer.
   */
  networkId: Long;
  /**
   * Output only. Time zone of the Campaign Manager network associated with this
   * customer in IANA Time Zone Database format, such as America/New_York.
   */
  timeZone: string;
}

function createBaseCustomer(): Customer {
  return {
    resourceName: "",
    id: undefined,
    descriptiveName: undefined,
    currencyCode: undefined,
    timeZone: undefined,
    trackingUrlTemplate: undefined,
    finalUrlSuffix: undefined,
    autoTaggingEnabled: undefined,
    manager: undefined,
    conversionTrackingSetting: undefined,
    accountType: 0,
    doubleClickCampaignManagerSetting: undefined,
    accountStatus: 0,
    lastModifiedTime: "",
    engineId: "",
    status: 0,
    creationTime: "",
  };
}

export const Customer: MessageFns<Customer> = {
  encode(message: Customer, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(10).string(message.resourceName);
    }
    if (message.id !== undefined) {
      writer.uint32(152).int64(message.id.toString());
    }
    if (message.descriptiveName !== undefined) {
      writer.uint32(162).string(message.descriptiveName);
    }
    if (message.currencyCode !== undefined) {
      writer.uint32(170).string(message.currencyCode);
    }
    if (message.timeZone !== undefined) {
      writer.uint32(178).string(message.timeZone);
    }
    if (message.trackingUrlTemplate !== undefined) {
      writer.uint32(186).string(message.trackingUrlTemplate);
    }
    if (message.finalUrlSuffix !== undefined) {
      writer.uint32(194).string(message.finalUrlSuffix);
    }
    if (message.autoTaggingEnabled !== undefined) {
      writer.uint32(200).bool(message.autoTaggingEnabled);
    }
    if (message.manager !== undefined) {
      writer.uint32(216).bool(message.manager);
    }
    if (message.conversionTrackingSetting !== undefined) {
      ConversionTrackingSetting.encode(message.conversionTrackingSetting, writer.uint32(114).fork()).join();
    }
    if (message.accountType !== 0) {
      writer.uint32(248).int32(message.accountType);
    }
    if (message.doubleClickCampaignManagerSetting !== undefined) {
      DoubleClickCampaignManagerSetting.encode(message.doubleClickCampaignManagerSetting, writer.uint32(258).fork())
        .join();
    }
    if (message.accountStatus !== 0) {
      writer.uint32(264).int32(message.accountStatus);
    }
    if (message.lastModifiedTime !== "") {
      writer.uint32(274).string(message.lastModifiedTime);
    }
    if (message.engineId !== "") {
      writer.uint32(282).string(message.engineId);
    }
    if (message.status !== 0) {
      writer.uint32(288).int32(message.status);
    }
    if (message.creationTime !== "") {
      writer.uint32(338).string(message.creationTime);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Customer {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCustomer();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceName = reader.string();
          continue;
        case 19:
          if (tag !== 152) {
            break;
          }

          message.id = Long.fromString(reader.int64().toString());
          continue;
        case 20:
          if (tag !== 162) {
            break;
          }

          message.descriptiveName = reader.string();
          continue;
        case 21:
          if (tag !== 170) {
            break;
          }

          message.currencyCode = reader.string();
          continue;
        case 22:
          if (tag !== 178) {
            break;
          }

          message.timeZone = reader.string();
          continue;
        case 23:
          if (tag !== 186) {
            break;
          }

          message.trackingUrlTemplate = reader.string();
          continue;
        case 24:
          if (tag !== 194) {
            break;
          }

          message.finalUrlSuffix = reader.string();
          continue;
        case 25:
          if (tag !== 200) {
            break;
          }

          message.autoTaggingEnabled = reader.bool();
          continue;
        case 27:
          if (tag !== 216) {
            break;
          }

          message.manager = reader.bool();
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.conversionTrackingSetting = ConversionTrackingSetting.decode(reader, reader.uint32());
          continue;
        case 31:
          if (tag !== 248) {
            break;
          }

          message.accountType = reader.int32() as any;
          continue;
        case 32:
          if (tag !== 258) {
            break;
          }

          message.doubleClickCampaignManagerSetting = DoubleClickCampaignManagerSetting.decode(reader, reader.uint32());
          continue;
        case 33:
          if (tag !== 264) {
            break;
          }

          message.accountStatus = reader.int32() as any;
          continue;
        case 34:
          if (tag !== 274) {
            break;
          }

          message.lastModifiedTime = reader.string();
          continue;
        case 35:
          if (tag !== 282) {
            break;
          }

          message.engineId = reader.string();
          continue;
        case 36:
          if (tag !== 288) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        case 42:
          if (tag !== 338) {
            break;
          }

          message.creationTime = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Customer {
    return {
      resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "",
      id: isSet(object.id) ? Long.fromValue(object.id) : undefined,
      descriptiveName: isSet(object.descriptiveName) ? globalThis.String(object.descriptiveName) : undefined,
      currencyCode: isSet(object.currencyCode) ? globalThis.String(object.currencyCode) : undefined,
      timeZone: isSet(object.timeZone) ? globalThis.String(object.timeZone) : undefined,
      trackingUrlTemplate: isSet(object.trackingUrlTemplate)
        ? globalThis.String(object.trackingUrlTemplate)
        : undefined,
      finalUrlSuffix: isSet(object.finalUrlSuffix) ? globalThis.String(object.finalUrlSuffix) : undefined,
      autoTaggingEnabled: isSet(object.autoTaggingEnabled) ? globalThis.Boolean(object.autoTaggingEnabled) : undefined,
      manager: isSet(object.manager) ? globalThis.Boolean(object.manager) : undefined,
      conversionTrackingSetting: isSet(object.conversionTrackingSetting)
        ? ConversionTrackingSetting.fromJSON(object.conversionTrackingSetting)
        : undefined,
      accountType: isSet(object.accountType) ? accountTypeEnum_AccountTypeFromJSON(object.accountType) : 0,
      doubleClickCampaignManagerSetting: isSet(object.doubleClickCampaignManagerSetting)
        ? DoubleClickCampaignManagerSetting.fromJSON(object.doubleClickCampaignManagerSetting)
        : undefined,
      accountStatus: isSet(object.accountStatus) ? accountStatusEnum_AccountStatusFromJSON(object.accountStatus) : 0,
      lastModifiedTime: isSet(object.lastModifiedTime) ? globalThis.String(object.lastModifiedTime) : "",
      engineId: isSet(object.engineId) ? globalThis.String(object.engineId) : "",
      status: isSet(object.status) ? customerStatusEnum_CustomerStatusFromJSON(object.status) : 0,
      creationTime: isSet(object.creationTime) ? globalThis.String(object.creationTime) : "",
    };
  },

  toJSON(message: Customer): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    if (message.id !== undefined) {
      obj.id = (message.id || Long.ZERO).toString();
    }
    if (message.descriptiveName !== undefined) {
      obj.descriptiveName = message.descriptiveName;
    }
    if (message.currencyCode !== undefined) {
      obj.currencyCode = message.currencyCode;
    }
    if (message.timeZone !== undefined) {
      obj.timeZone = message.timeZone;
    }
    if (message.trackingUrlTemplate !== undefined) {
      obj.trackingUrlTemplate = message.trackingUrlTemplate;
    }
    if (message.finalUrlSuffix !== undefined) {
      obj.finalUrlSuffix = message.finalUrlSuffix;
    }
    if (message.autoTaggingEnabled !== undefined) {
      obj.autoTaggingEnabled = message.autoTaggingEnabled;
    }
    if (message.manager !== undefined) {
      obj.manager = message.manager;
    }
    if (message.conversionTrackingSetting !== undefined) {
      obj.conversionTrackingSetting = ConversionTrackingSetting.toJSON(message.conversionTrackingSetting);
    }
    if (message.accountType !== 0) {
      obj.accountType = accountTypeEnum_AccountTypeToJSON(message.accountType);
    }
    if (message.doubleClickCampaignManagerSetting !== undefined) {
      obj.doubleClickCampaignManagerSetting = DoubleClickCampaignManagerSetting.toJSON(
        message.doubleClickCampaignManagerSetting,
      );
    }
    if (message.accountStatus !== 0) {
      obj.accountStatus = accountStatusEnum_AccountStatusToJSON(message.accountStatus);
    }
    if (message.lastModifiedTime !== "") {
      obj.lastModifiedTime = message.lastModifiedTime;
    }
    if (message.engineId !== "") {
      obj.engineId = message.engineId;
    }
    if (message.status !== 0) {
      obj.status = customerStatusEnum_CustomerStatusToJSON(message.status);
    }
    if (message.creationTime !== "") {
      obj.creationTime = message.creationTime;
    }
    return obj;
  },

  create(base?: DeepPartial<Customer>): Customer {
    return Customer.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Customer>): Customer {
    const message = createBaseCustomer();
    message.resourceName = object.resourceName ?? "";
    message.id = (object.id !== undefined && object.id !== null) ? Long.fromValue(object.id) : undefined;
    message.descriptiveName = object.descriptiveName ?? undefined;
    message.currencyCode = object.currencyCode ?? undefined;
    message.timeZone = object.timeZone ?? undefined;
    message.trackingUrlTemplate = object.trackingUrlTemplate ?? undefined;
    message.finalUrlSuffix = object.finalUrlSuffix ?? undefined;
    message.autoTaggingEnabled = object.autoTaggingEnabled ?? undefined;
    message.manager = object.manager ?? undefined;
    message.conversionTrackingSetting =
      (object.conversionTrackingSetting !== undefined && object.conversionTrackingSetting !== null)
        ? ConversionTrackingSetting.fromPartial(object.conversionTrackingSetting)
        : undefined;
    message.accountType = object.accountType ?? 0;
    message.doubleClickCampaignManagerSetting =
      (object.doubleClickCampaignManagerSetting !== undefined && object.doubleClickCampaignManagerSetting !== null)
        ? DoubleClickCampaignManagerSetting.fromPartial(object.doubleClickCampaignManagerSetting)
        : undefined;
    message.accountStatus = object.accountStatus ?? 0;
    message.lastModifiedTime = object.lastModifiedTime ?? "";
    message.engineId = object.engineId ?? "";
    message.status = object.status ?? 0;
    message.creationTime = object.creationTime ?? "";
    return message;
  },
};

function createBaseConversionTrackingSetting(): ConversionTrackingSetting {
  return {
    conversionTrackingId: undefined,
    googleAdsCrossAccountConversionTrackingId: undefined,
    crossAccountConversionTrackingId: undefined,
    acceptedCustomerDataTerms: false,
    conversionTrackingStatus: 0,
    enhancedConversionsForLeadsEnabled: false,
    googleAdsConversionCustomer: "",
  };
}

export const ConversionTrackingSetting: MessageFns<ConversionTrackingSetting> = {
  encode(message: ConversionTrackingSetting, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.conversionTrackingId !== undefined) {
      writer.uint32(24).int64(message.conversionTrackingId.toString());
    }
    if (message.googleAdsCrossAccountConversionTrackingId !== undefined) {
      writer.uint32(32).int64(message.googleAdsCrossAccountConversionTrackingId.toString());
    }
    if (message.crossAccountConversionTrackingId !== undefined) {
      writer.uint32(296).int64(message.crossAccountConversionTrackingId.toString());
    }
    if (message.acceptedCustomerDataTerms !== false) {
      writer.uint32(40).bool(message.acceptedCustomerDataTerms);
    }
    if (message.conversionTrackingStatus !== 0) {
      writer.uint32(48).int32(message.conversionTrackingStatus);
    }
    if (message.enhancedConversionsForLeadsEnabled !== false) {
      writer.uint32(56).bool(message.enhancedConversionsForLeadsEnabled);
    }
    if (message.googleAdsConversionCustomer !== "") {
      writer.uint32(66).string(message.googleAdsConversionCustomer);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConversionTrackingSetting {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConversionTrackingSetting();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 3:
          if (tag !== 24) {
            break;
          }

          message.conversionTrackingId = Long.fromString(reader.int64().toString());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.googleAdsCrossAccountConversionTrackingId = Long.fromString(reader.int64().toString());
          continue;
        case 37:
          if (tag !== 296) {
            break;
          }

          message.crossAccountConversionTrackingId = Long.fromString(reader.int64().toString());
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.acceptedCustomerDataTerms = reader.bool();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.conversionTrackingStatus = reader.int32() as any;
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.enhancedConversionsForLeadsEnabled = reader.bool();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.googleAdsConversionCustomer = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConversionTrackingSetting {
    return {
      conversionTrackingId: isSet(object.conversionTrackingId)
        ? Long.fromValue(object.conversionTrackingId)
        : undefined,
      googleAdsCrossAccountConversionTrackingId: isSet(object.googleAdsCrossAccountConversionTrackingId)
        ? Long.fromValue(object.googleAdsCrossAccountConversionTrackingId)
        : undefined,
      crossAccountConversionTrackingId: isSet(object.crossAccountConversionTrackingId)
        ? Long.fromValue(object.crossAccountConversionTrackingId)
        : undefined,
      acceptedCustomerDataTerms: isSet(object.acceptedCustomerDataTerms)
        ? globalThis.Boolean(object.acceptedCustomerDataTerms)
        : false,
      conversionTrackingStatus: isSet(object.conversionTrackingStatus)
        ? conversionTrackingStatusEnum_ConversionTrackingStatusFromJSON(object.conversionTrackingStatus)
        : 0,
      enhancedConversionsForLeadsEnabled: isSet(object.enhancedConversionsForLeadsEnabled)
        ? globalThis.Boolean(object.enhancedConversionsForLeadsEnabled)
        : false,
      googleAdsConversionCustomer: isSet(object.googleAdsConversionCustomer)
        ? globalThis.String(object.googleAdsConversionCustomer)
        : "",
    };
  },

  toJSON(message: ConversionTrackingSetting): unknown {
    const obj: any = {};
    if (message.conversionTrackingId !== undefined) {
      obj.conversionTrackingId = (message.conversionTrackingId || Long.ZERO).toString();
    }
    if (message.googleAdsCrossAccountConversionTrackingId !== undefined) {
      obj.googleAdsCrossAccountConversionTrackingId = (message.googleAdsCrossAccountConversionTrackingId || Long.ZERO)
        .toString();
    }
    if (message.crossAccountConversionTrackingId !== undefined) {
      obj.crossAccountConversionTrackingId = (message.crossAccountConversionTrackingId || Long.ZERO).toString();
    }
    if (message.acceptedCustomerDataTerms !== false) {
      obj.acceptedCustomerDataTerms = message.acceptedCustomerDataTerms;
    }
    if (message.conversionTrackingStatus !== 0) {
      obj.conversionTrackingStatus = conversionTrackingStatusEnum_ConversionTrackingStatusToJSON(
        message.conversionTrackingStatus,
      );
    }
    if (message.enhancedConversionsForLeadsEnabled !== false) {
      obj.enhancedConversionsForLeadsEnabled = message.enhancedConversionsForLeadsEnabled;
    }
    if (message.googleAdsConversionCustomer !== "") {
      obj.googleAdsConversionCustomer = message.googleAdsConversionCustomer;
    }
    return obj;
  },

  create(base?: DeepPartial<ConversionTrackingSetting>): ConversionTrackingSetting {
    return ConversionTrackingSetting.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ConversionTrackingSetting>): ConversionTrackingSetting {
    const message = createBaseConversionTrackingSetting();
    message.conversionTrackingId = (object.conversionTrackingId !== undefined && object.conversionTrackingId !== null)
      ? Long.fromValue(object.conversionTrackingId)
      : undefined;
    message.googleAdsCrossAccountConversionTrackingId =
      (object.googleAdsCrossAccountConversionTrackingId !== undefined &&
          object.googleAdsCrossAccountConversionTrackingId !== null)
        ? Long.fromValue(object.googleAdsCrossAccountConversionTrackingId)
        : undefined;
    message.crossAccountConversionTrackingId =
      (object.crossAccountConversionTrackingId !== undefined && object.crossAccountConversionTrackingId !== null)
        ? Long.fromValue(object.crossAccountConversionTrackingId)
        : undefined;
    message.acceptedCustomerDataTerms = object.acceptedCustomerDataTerms ?? false;
    message.conversionTrackingStatus = object.conversionTrackingStatus ?? 0;
    message.enhancedConversionsForLeadsEnabled = object.enhancedConversionsForLeadsEnabled ?? false;
    message.googleAdsConversionCustomer = object.googleAdsConversionCustomer ?? "";
    return message;
  },
};

function createBaseDoubleClickCampaignManagerSetting(): DoubleClickCampaignManagerSetting {
  return { advertiserId: Long.ZERO, networkId: Long.ZERO, timeZone: "" };
}

export const DoubleClickCampaignManagerSetting: MessageFns<DoubleClickCampaignManagerSetting> = {
  encode(message: DoubleClickCampaignManagerSetting, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.advertiserId.equals(Long.ZERO)) {
      writer.uint32(8).int64(message.advertiserId.toString());
    }
    if (!message.networkId.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.networkId.toString());
    }
    if (message.timeZone !== "") {
      writer.uint32(26).string(message.timeZone);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DoubleClickCampaignManagerSetting {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDoubleClickCampaignManagerSetting();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.advertiserId = Long.fromString(reader.int64().toString());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.networkId = Long.fromString(reader.int64().toString());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.timeZone = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DoubleClickCampaignManagerSetting {
    return {
      advertiserId: isSet(object.advertiserId) ? Long.fromValue(object.advertiserId) : Long.ZERO,
      networkId: isSet(object.networkId) ? Long.fromValue(object.networkId) : Long.ZERO,
      timeZone: isSet(object.timeZone) ? globalThis.String(object.timeZone) : "",
    };
  },

  toJSON(message: DoubleClickCampaignManagerSetting): unknown {
    const obj: any = {};
    if (!message.advertiserId.equals(Long.ZERO)) {
      obj.advertiserId = (message.advertiserId || Long.ZERO).toString();
    }
    if (!message.networkId.equals(Long.ZERO)) {
      obj.networkId = (message.networkId || Long.ZERO).toString();
    }
    if (message.timeZone !== "") {
      obj.timeZone = message.timeZone;
    }
    return obj;
  },

  create(base?: DeepPartial<DoubleClickCampaignManagerSetting>): DoubleClickCampaignManagerSetting {
    return DoubleClickCampaignManagerSetting.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DoubleClickCampaignManagerSetting>): DoubleClickCampaignManagerSetting {
    const message = createBaseDoubleClickCampaignManagerSetting();
    message.advertiserId = (object.advertiserId !== undefined && object.advertiserId !== null)
      ? Long.fromValue(object.advertiserId)
      : Long.ZERO;
    message.networkId = (object.networkId !== undefined && object.networkId !== null)
      ? Long.fromValue(object.networkId)
      : Long.ZERO;
    message.timeZone = object.timeZone ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
