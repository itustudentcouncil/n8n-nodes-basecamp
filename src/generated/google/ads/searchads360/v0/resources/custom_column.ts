// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/searchads360/v0/resources/custom_column.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import {
  CustomColumnRenderTypeEnum_CustomColumnRenderType,
  customColumnRenderTypeEnum_CustomColumnRenderTypeFromJSON,
  customColumnRenderTypeEnum_CustomColumnRenderTypeToJSON,
} from "../enums/custom_column_render_type.js";
import {
  CustomColumnValueTypeEnum_CustomColumnValueType,
  customColumnValueTypeEnum_CustomColumnValueTypeFromJSON,
  customColumnValueTypeEnum_CustomColumnValueTypeToJSON,
} from "../enums/custom_column_value_type.js";

export const protobufPackage = "google.ads.searchads360.v0.resources";

/**
 * A custom column.
 * See Search Ads 360 custom column at
 * https://support.google.com/sa360/answer/9633916
 */
export interface CustomColumn {
  /**
   * Immutable. The resource name of the custom column.
   * Custom column resource names have the form:
   *
   * `customers/{customer_id}/customColumns/{custom_column_id}`
   */
  resourceName: string;
  /** Output only. ID of the custom column. */
  id: Long;
  /** Output only. User-defined name of the custom column. */
  name: string;
  /** Output only. User-defined description of the custom column. */
  description: string;
  /** Output only. The type of the result value of the custom column. */
  valueType: CustomColumnValueTypeEnum_CustomColumnValueType;
  /**
   * Output only. True when the custom column is referring to one or more
   * attributes.
   */
  referencesAttributes: boolean;
  /**
   * Output only. True when the custom column is referring to one or more
   * metrics.
   */
  referencesMetrics: boolean;
  /**
   * Output only. True when the custom column is available to be used in the
   * query of SearchAds360Service.Search and SearchAds360Service.SearchStream.
   */
  queryable: boolean;
  /**
   * Output only. The list of the referenced system columns of this custom
   * column. For example, A custom column "sum of impressions and clicks" has
   * referenced system columns of {"metrics.clicks", "metrics.impressions"}.
   */
  referencedSystemColumns: string[];
  /**
   * Output only. How the result value of the custom column should be
   * interpreted.
   */
  renderType: CustomColumnRenderTypeEnum_CustomColumnRenderType;
}

function createBaseCustomColumn(): CustomColumn {
  return {
    resourceName: "",
    id: Long.ZERO,
    name: "",
    description: "",
    valueType: 0,
    referencesAttributes: false,
    referencesMetrics: false,
    queryable: false,
    referencedSystemColumns: [],
    renderType: 0,
  };
}

export const CustomColumn: MessageFns<CustomColumn> = {
  encode(message: CustomColumn, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(10).string(message.resourceName);
    }
    if (!message.id.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.id.toString());
    }
    if (message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(34).string(message.description);
    }
    if (message.valueType !== 0) {
      writer.uint32(40).int32(message.valueType);
    }
    if (message.referencesAttributes !== false) {
      writer.uint32(48).bool(message.referencesAttributes);
    }
    if (message.referencesMetrics !== false) {
      writer.uint32(56).bool(message.referencesMetrics);
    }
    if (message.queryable !== false) {
      writer.uint32(64).bool(message.queryable);
    }
    for (const v of message.referencedSystemColumns) {
      writer.uint32(74).string(v!);
    }
    if (message.renderType !== 0) {
      writer.uint32(80).int32(message.renderType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CustomColumn {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCustomColumn();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceName = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.id = Long.fromString(reader.int64().toString());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.description = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.valueType = reader.int32() as any;
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.referencesAttributes = reader.bool();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.referencesMetrics = reader.bool();
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.queryable = reader.bool();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.referencedSystemColumns.push(reader.string());
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.renderType = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CustomColumn {
    return {
      resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "",
      id: isSet(object.id) ? Long.fromValue(object.id) : Long.ZERO,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      valueType: isSet(object.valueType)
        ? customColumnValueTypeEnum_CustomColumnValueTypeFromJSON(object.valueType)
        : 0,
      referencesAttributes: isSet(object.referencesAttributes)
        ? globalThis.Boolean(object.referencesAttributes)
        : false,
      referencesMetrics: isSet(object.referencesMetrics) ? globalThis.Boolean(object.referencesMetrics) : false,
      queryable: isSet(object.queryable) ? globalThis.Boolean(object.queryable) : false,
      referencedSystemColumns: globalThis.Array.isArray(object?.referencedSystemColumns)
        ? object.referencedSystemColumns.map((e: any) => globalThis.String(e))
        : [],
      renderType: isSet(object.renderType)
        ? customColumnRenderTypeEnum_CustomColumnRenderTypeFromJSON(object.renderType)
        : 0,
    };
  },

  toJSON(message: CustomColumn): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    if (!message.id.equals(Long.ZERO)) {
      obj.id = (message.id || Long.ZERO).toString();
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.valueType !== 0) {
      obj.valueType = customColumnValueTypeEnum_CustomColumnValueTypeToJSON(message.valueType);
    }
    if (message.referencesAttributes !== false) {
      obj.referencesAttributes = message.referencesAttributes;
    }
    if (message.referencesMetrics !== false) {
      obj.referencesMetrics = message.referencesMetrics;
    }
    if (message.queryable !== false) {
      obj.queryable = message.queryable;
    }
    if (message.referencedSystemColumns?.length) {
      obj.referencedSystemColumns = message.referencedSystemColumns;
    }
    if (message.renderType !== 0) {
      obj.renderType = customColumnRenderTypeEnum_CustomColumnRenderTypeToJSON(message.renderType);
    }
    return obj;
  },

  create(base?: DeepPartial<CustomColumn>): CustomColumn {
    return CustomColumn.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CustomColumn>): CustomColumn {
    const message = createBaseCustomColumn();
    message.resourceName = object.resourceName ?? "";
    message.id = (object.id !== undefined && object.id !== null) ? Long.fromValue(object.id) : Long.ZERO;
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.valueType = object.valueType ?? 0;
    message.referencesAttributes = object.referencesAttributes ?? false;
    message.referencesMetrics = object.referencesMetrics ?? false;
    message.queryable = object.queryable ?? false;
    message.referencedSystemColumns = object.referencedSystemColumns?.map((e) => e) || [];
    message.renderType = object.renderType ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
