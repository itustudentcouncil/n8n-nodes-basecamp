// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/searchads360/v0/resources/asset.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import {
  CallToActionAsset,
  ImageAsset,
  MobileAppAsset,
  TextAsset,
  UnifiedCallAsset,
  UnifiedCalloutAsset,
  UnifiedLocationAsset,
  UnifiedPageFeedAsset,
  UnifiedSitelinkAsset,
  YoutubeVideoAsset,
} from "../common/asset_types.js";
import {
  AssetEngineStatusEnum_AssetEngineStatus,
  assetEngineStatusEnum_AssetEngineStatusFromJSON,
  assetEngineStatusEnum_AssetEngineStatusToJSON,
} from "../enums/asset_engine_status.js";
import {
  AssetStatusEnum_AssetStatus,
  assetStatusEnum_AssetStatusFromJSON,
  assetStatusEnum_AssetStatusToJSON,
} from "../enums/asset_status.js";
import {
  AssetTypeEnum_AssetType,
  assetTypeEnum_AssetTypeFromJSON,
  assetTypeEnum_AssetTypeToJSON,
} from "../enums/asset_type.js";

export const protobufPackage = "google.ads.searchads360.v0.resources";

/**
 * Asset is a part of an ad which can be shared across multiple ads.
 * It can be an image (ImageAsset), a video (YoutubeVideoAsset), etc.
 * Assets are immutable and cannot be removed. To stop an asset from serving,
 * remove the asset from the entity that is using it.
 */
export interface Asset {
  /**
   * Immutable. The resource name of the asset.
   * Asset resource names have the form:
   *
   * `customers/{customer_id}/assets/{asset_id}`
   */
  resourceName: string;
  /** Output only. The ID of the asset. */
  id?:
    | Long
    | undefined;
  /** Optional name of the asset. */
  name?:
    | string
    | undefined;
  /** Output only. Type of the asset. */
  type: AssetTypeEnum_AssetType;
  /** A list of possible final URLs after all cross domain redirects. */
  finalUrls: string[];
  /** URL template for constructing a tracking URL. */
  trackingUrlTemplate?:
    | string
    | undefined;
  /** Output only. The status of the asset. */
  status: AssetStatusEnum_AssetStatus;
  /**
   * Output only. The timestamp when this asset was created. The timestamp is in
   * the customer's time zone and in "yyyy-MM-dd HH:mm:ss" format.
   */
  creationTime: string;
  /**
   * Output only. The datetime when this asset was last modified. The datetime
   * is in the customer's time zone and in "yyyy-MM-dd HH:mm:ss.ssssss" format.
   */
  lastModifiedTime: string;
  /** Output only. The Engine Status for an asset. */
  engineStatus?:
    | AssetEngineStatusEnum_AssetEngineStatus
    | undefined;
  /** Immutable. A YouTube video asset. */
  youtubeVideoAsset?:
    | YoutubeVideoAsset
    | undefined;
  /** Output only. An image asset. */
  imageAsset?:
    | ImageAsset
    | undefined;
  /** Output only. A text asset. */
  textAsset?:
    | TextAsset
    | undefined;
  /** Output only. A unified callout asset. */
  calloutAsset?:
    | UnifiedCalloutAsset
    | undefined;
  /** Output only. A unified sitelink asset. */
  sitelinkAsset?:
    | UnifiedSitelinkAsset
    | undefined;
  /** Output only. A unified page feed asset. */
  pageFeedAsset?:
    | UnifiedPageFeedAsset
    | undefined;
  /** A mobile app asset. */
  mobileAppAsset?:
    | MobileAppAsset
    | undefined;
  /** Output only. A unified call asset. */
  callAsset?:
    | UnifiedCallAsset
    | undefined;
  /** Immutable. A call to action asset. */
  callToActionAsset?:
    | CallToActionAsset
    | undefined;
  /** Output only. A unified location asset. */
  locationAsset?: UnifiedLocationAsset | undefined;
}

function createBaseAsset(): Asset {
  return {
    resourceName: "",
    id: undefined,
    name: undefined,
    type: 0,
    finalUrls: [],
    trackingUrlTemplate: undefined,
    status: 0,
    creationTime: "",
    lastModifiedTime: "",
    engineStatus: undefined,
    youtubeVideoAsset: undefined,
    imageAsset: undefined,
    textAsset: undefined,
    calloutAsset: undefined,
    sitelinkAsset: undefined,
    pageFeedAsset: undefined,
    mobileAppAsset: undefined,
    callAsset: undefined,
    callToActionAsset: undefined,
    locationAsset: undefined,
  };
}

export const Asset: MessageFns<Asset> = {
  encode(message: Asset, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(10).string(message.resourceName);
    }
    if (message.id !== undefined) {
      writer.uint32(88).int64(message.id.toString());
    }
    if (message.name !== undefined) {
      writer.uint32(98).string(message.name);
    }
    if (message.type !== 0) {
      writer.uint32(32).int32(message.type);
    }
    for (const v of message.finalUrls) {
      writer.uint32(114).string(v!);
    }
    if (message.trackingUrlTemplate !== undefined) {
      writer.uint32(138).string(message.trackingUrlTemplate);
    }
    if (message.status !== 0) {
      writer.uint32(336).int32(message.status);
    }
    if (message.creationTime !== "") {
      writer.uint32(346).string(message.creationTime);
    }
    if (message.lastModifiedTime !== "") {
      writer.uint32(354).string(message.lastModifiedTime);
    }
    if (message.engineStatus !== undefined) {
      writer.uint32(488).int32(message.engineStatus);
    }
    if (message.youtubeVideoAsset !== undefined) {
      YoutubeVideoAsset.encode(message.youtubeVideoAsset, writer.uint32(42).fork()).join();
    }
    if (message.imageAsset !== undefined) {
      ImageAsset.encode(message.imageAsset, writer.uint32(58).fork()).join();
    }
    if (message.textAsset !== undefined) {
      TextAsset.encode(message.textAsset, writer.uint32(66).fork()).join();
    }
    if (message.calloutAsset !== undefined) {
      UnifiedCalloutAsset.encode(message.calloutAsset, writer.uint32(386).fork()).join();
    }
    if (message.sitelinkAsset !== undefined) {
      UnifiedSitelinkAsset.encode(message.sitelinkAsset, writer.uint32(362).fork()).join();
    }
    if (message.pageFeedAsset !== undefined) {
      UnifiedPageFeedAsset.encode(message.pageFeedAsset, writer.uint32(370).fork()).join();
    }
    if (message.mobileAppAsset !== undefined) {
      MobileAppAsset.encode(message.mobileAppAsset, writer.uint32(202).fork()).join();
    }
    if (message.callAsset !== undefined) {
      UnifiedCallAsset.encode(message.callAsset, writer.uint32(378).fork()).join();
    }
    if (message.callToActionAsset !== undefined) {
      CallToActionAsset.encode(message.callToActionAsset, writer.uint32(234).fork()).join();
    }
    if (message.locationAsset !== undefined) {
      UnifiedLocationAsset.encode(message.locationAsset, writer.uint32(394).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Asset {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAsset();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceName = reader.string();
          continue;
        case 11:
          if (tag !== 88) {
            break;
          }

          message.id = Long.fromString(reader.int64().toString());
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.name = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.finalUrls.push(reader.string());
          continue;
        case 17:
          if (tag !== 138) {
            break;
          }

          message.trackingUrlTemplate = reader.string();
          continue;
        case 42:
          if (tag !== 336) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        case 43:
          if (tag !== 346) {
            break;
          }

          message.creationTime = reader.string();
          continue;
        case 44:
          if (tag !== 354) {
            break;
          }

          message.lastModifiedTime = reader.string();
          continue;
        case 61:
          if (tag !== 488) {
            break;
          }

          message.engineStatus = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.youtubeVideoAsset = YoutubeVideoAsset.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.imageAsset = ImageAsset.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.textAsset = TextAsset.decode(reader, reader.uint32());
          continue;
        case 48:
          if (tag !== 386) {
            break;
          }

          message.calloutAsset = UnifiedCalloutAsset.decode(reader, reader.uint32());
          continue;
        case 45:
          if (tag !== 362) {
            break;
          }

          message.sitelinkAsset = UnifiedSitelinkAsset.decode(reader, reader.uint32());
          continue;
        case 46:
          if (tag !== 370) {
            break;
          }

          message.pageFeedAsset = UnifiedPageFeedAsset.decode(reader, reader.uint32());
          continue;
        case 25:
          if (tag !== 202) {
            break;
          }

          message.mobileAppAsset = MobileAppAsset.decode(reader, reader.uint32());
          continue;
        case 47:
          if (tag !== 378) {
            break;
          }

          message.callAsset = UnifiedCallAsset.decode(reader, reader.uint32());
          continue;
        case 29:
          if (tag !== 234) {
            break;
          }

          message.callToActionAsset = CallToActionAsset.decode(reader, reader.uint32());
          continue;
        case 49:
          if (tag !== 394) {
            break;
          }

          message.locationAsset = UnifiedLocationAsset.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Asset {
    return {
      resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "",
      id: isSet(object.id) ? Long.fromValue(object.id) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      type: isSet(object.type) ? assetTypeEnum_AssetTypeFromJSON(object.type) : 0,
      finalUrls: globalThis.Array.isArray(object?.finalUrls)
        ? object.finalUrls.map((e: any) => globalThis.String(e))
        : [],
      trackingUrlTemplate: isSet(object.trackingUrlTemplate)
        ? globalThis.String(object.trackingUrlTemplate)
        : undefined,
      status: isSet(object.status) ? assetStatusEnum_AssetStatusFromJSON(object.status) : 0,
      creationTime: isSet(object.creationTime) ? globalThis.String(object.creationTime) : "",
      lastModifiedTime: isSet(object.lastModifiedTime) ? globalThis.String(object.lastModifiedTime) : "",
      engineStatus: isSet(object.engineStatus)
        ? assetEngineStatusEnum_AssetEngineStatusFromJSON(object.engineStatus)
        : undefined,
      youtubeVideoAsset: isSet(object.youtubeVideoAsset)
        ? YoutubeVideoAsset.fromJSON(object.youtubeVideoAsset)
        : undefined,
      imageAsset: isSet(object.imageAsset) ? ImageAsset.fromJSON(object.imageAsset) : undefined,
      textAsset: isSet(object.textAsset) ? TextAsset.fromJSON(object.textAsset) : undefined,
      calloutAsset: isSet(object.calloutAsset) ? UnifiedCalloutAsset.fromJSON(object.calloutAsset) : undefined,
      sitelinkAsset: isSet(object.sitelinkAsset) ? UnifiedSitelinkAsset.fromJSON(object.sitelinkAsset) : undefined,
      pageFeedAsset: isSet(object.pageFeedAsset) ? UnifiedPageFeedAsset.fromJSON(object.pageFeedAsset) : undefined,
      mobileAppAsset: isSet(object.mobileAppAsset) ? MobileAppAsset.fromJSON(object.mobileAppAsset) : undefined,
      callAsset: isSet(object.callAsset) ? UnifiedCallAsset.fromJSON(object.callAsset) : undefined,
      callToActionAsset: isSet(object.callToActionAsset)
        ? CallToActionAsset.fromJSON(object.callToActionAsset)
        : undefined,
      locationAsset: isSet(object.locationAsset) ? UnifiedLocationAsset.fromJSON(object.locationAsset) : undefined,
    };
  },

  toJSON(message: Asset): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    if (message.id !== undefined) {
      obj.id = (message.id || Long.ZERO).toString();
    }
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.type !== 0) {
      obj.type = assetTypeEnum_AssetTypeToJSON(message.type);
    }
    if (message.finalUrls?.length) {
      obj.finalUrls = message.finalUrls;
    }
    if (message.trackingUrlTemplate !== undefined) {
      obj.trackingUrlTemplate = message.trackingUrlTemplate;
    }
    if (message.status !== 0) {
      obj.status = assetStatusEnum_AssetStatusToJSON(message.status);
    }
    if (message.creationTime !== "") {
      obj.creationTime = message.creationTime;
    }
    if (message.lastModifiedTime !== "") {
      obj.lastModifiedTime = message.lastModifiedTime;
    }
    if (message.engineStatus !== undefined) {
      obj.engineStatus = assetEngineStatusEnum_AssetEngineStatusToJSON(message.engineStatus);
    }
    if (message.youtubeVideoAsset !== undefined) {
      obj.youtubeVideoAsset = YoutubeVideoAsset.toJSON(message.youtubeVideoAsset);
    }
    if (message.imageAsset !== undefined) {
      obj.imageAsset = ImageAsset.toJSON(message.imageAsset);
    }
    if (message.textAsset !== undefined) {
      obj.textAsset = TextAsset.toJSON(message.textAsset);
    }
    if (message.calloutAsset !== undefined) {
      obj.calloutAsset = UnifiedCalloutAsset.toJSON(message.calloutAsset);
    }
    if (message.sitelinkAsset !== undefined) {
      obj.sitelinkAsset = UnifiedSitelinkAsset.toJSON(message.sitelinkAsset);
    }
    if (message.pageFeedAsset !== undefined) {
      obj.pageFeedAsset = UnifiedPageFeedAsset.toJSON(message.pageFeedAsset);
    }
    if (message.mobileAppAsset !== undefined) {
      obj.mobileAppAsset = MobileAppAsset.toJSON(message.mobileAppAsset);
    }
    if (message.callAsset !== undefined) {
      obj.callAsset = UnifiedCallAsset.toJSON(message.callAsset);
    }
    if (message.callToActionAsset !== undefined) {
      obj.callToActionAsset = CallToActionAsset.toJSON(message.callToActionAsset);
    }
    if (message.locationAsset !== undefined) {
      obj.locationAsset = UnifiedLocationAsset.toJSON(message.locationAsset);
    }
    return obj;
  },

  create(base?: DeepPartial<Asset>): Asset {
    return Asset.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Asset>): Asset {
    const message = createBaseAsset();
    message.resourceName = object.resourceName ?? "";
    message.id = (object.id !== undefined && object.id !== null) ? Long.fromValue(object.id) : undefined;
    message.name = object.name ?? undefined;
    message.type = object.type ?? 0;
    message.finalUrls = object.finalUrls?.map((e) => e) || [];
    message.trackingUrlTemplate = object.trackingUrlTemplate ?? undefined;
    message.status = object.status ?? 0;
    message.creationTime = object.creationTime ?? "";
    message.lastModifiedTime = object.lastModifiedTime ?? "";
    message.engineStatus = object.engineStatus ?? undefined;
    message.youtubeVideoAsset = (object.youtubeVideoAsset !== undefined && object.youtubeVideoAsset !== null)
      ? YoutubeVideoAsset.fromPartial(object.youtubeVideoAsset)
      : undefined;
    message.imageAsset = (object.imageAsset !== undefined && object.imageAsset !== null)
      ? ImageAsset.fromPartial(object.imageAsset)
      : undefined;
    message.textAsset = (object.textAsset !== undefined && object.textAsset !== null)
      ? TextAsset.fromPartial(object.textAsset)
      : undefined;
    message.calloutAsset = (object.calloutAsset !== undefined && object.calloutAsset !== null)
      ? UnifiedCalloutAsset.fromPartial(object.calloutAsset)
      : undefined;
    message.sitelinkAsset = (object.sitelinkAsset !== undefined && object.sitelinkAsset !== null)
      ? UnifiedSitelinkAsset.fromPartial(object.sitelinkAsset)
      : undefined;
    message.pageFeedAsset = (object.pageFeedAsset !== undefined && object.pageFeedAsset !== null)
      ? UnifiedPageFeedAsset.fromPartial(object.pageFeedAsset)
      : undefined;
    message.mobileAppAsset = (object.mobileAppAsset !== undefined && object.mobileAppAsset !== null)
      ? MobileAppAsset.fromPartial(object.mobileAppAsset)
      : undefined;
    message.callAsset = (object.callAsset !== undefined && object.callAsset !== null)
      ? UnifiedCallAsset.fromPartial(object.callAsset)
      : undefined;
    message.callToActionAsset = (object.callToActionAsset !== undefined && object.callToActionAsset !== null)
      ? CallToActionAsset.fromPartial(object.callToActionAsset)
      : undefined;
    message.locationAsset = (object.locationAsset !== undefined && object.locationAsset !== null)
      ? UnifiedLocationAsset.fromPartial(object.locationAsset)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
