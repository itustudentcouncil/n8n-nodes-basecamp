// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/searchads360/v0/resources/campaign.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import {
  ManualCpa,
  ManualCpc,
  ManualCpm,
  MaximizeConversions,
  MaximizeConversionValue,
  PercentCpc,
  TargetCpa,
  TargetCpm,
  TargetImpressionShare,
  TargetRoas,
  TargetSpend,
} from "../common/bidding.js";
import { CustomParameter } from "../common/custom_parameter.js";
import { FrequencyCapEntry } from "../common/frequency_cap.js";
import { RealTimeBiddingSetting } from "../common/real_time_bidding_setting.js";
import {
  AdServingOptimizationStatusEnum_AdServingOptimizationStatus,
  adServingOptimizationStatusEnum_AdServingOptimizationStatusFromJSON,
  adServingOptimizationStatusEnum_AdServingOptimizationStatusToJSON,
} from "../enums/ad_serving_optimization_status.js";
import {
  AdvertisingChannelSubTypeEnum_AdvertisingChannelSubType,
  advertisingChannelSubTypeEnum_AdvertisingChannelSubTypeFromJSON,
  advertisingChannelSubTypeEnum_AdvertisingChannelSubTypeToJSON,
} from "../enums/advertising_channel_sub_type.js";
import {
  AdvertisingChannelTypeEnum_AdvertisingChannelType,
  advertisingChannelTypeEnum_AdvertisingChannelTypeFromJSON,
  advertisingChannelTypeEnum_AdvertisingChannelTypeToJSON,
} from "../enums/advertising_channel_type.js";
import {
  AssetFieldTypeEnum_AssetFieldType,
  assetFieldTypeEnum_AssetFieldTypeFromJSON,
  assetFieldTypeEnum_AssetFieldTypeToJSON,
} from "../enums/asset_field_type.js";
import {
  BiddingStrategySystemStatusEnum_BiddingStrategySystemStatus,
  biddingStrategySystemStatusEnum_BiddingStrategySystemStatusFromJSON,
  biddingStrategySystemStatusEnum_BiddingStrategySystemStatusToJSON,
} from "../enums/bidding_strategy_system_status.js";
import {
  BiddingStrategyTypeEnum_BiddingStrategyType,
  biddingStrategyTypeEnum_BiddingStrategyTypeFromJSON,
  biddingStrategyTypeEnum_BiddingStrategyTypeToJSON,
} from "../enums/bidding_strategy_type.js";
import {
  CampaignServingStatusEnum_CampaignServingStatus,
  campaignServingStatusEnum_CampaignServingStatusFromJSON,
  campaignServingStatusEnum_CampaignServingStatusToJSON,
} from "../enums/campaign_serving_status.js";
import {
  CampaignStatusEnum_CampaignStatus,
  campaignStatusEnum_CampaignStatusFromJSON,
  campaignStatusEnum_CampaignStatusToJSON,
} from "../enums/campaign_status.js";
import {
  NegativeGeoTargetTypeEnum_NegativeGeoTargetType,
  negativeGeoTargetTypeEnum_NegativeGeoTargetTypeFromJSON,
  negativeGeoTargetTypeEnum_NegativeGeoTargetTypeToJSON,
} from "../enums/negative_geo_target_type.js";
import {
  OptimizationGoalTypeEnum_OptimizationGoalType,
  optimizationGoalTypeEnum_OptimizationGoalTypeFromJSON,
  optimizationGoalTypeEnum_OptimizationGoalTypeToJSON,
} from "../enums/optimization_goal_type.js";
import {
  PositiveGeoTargetTypeEnum_PositiveGeoTargetType,
  positiveGeoTargetTypeEnum_PositiveGeoTargetTypeFromJSON,
  positiveGeoTargetTypeEnum_PositiveGeoTargetTypeToJSON,
} from "../enums/positive_geo_target_type.js";

export const protobufPackage = "google.ads.searchads360.v0.resources";

/** A campaign. */
export interface Campaign {
  /**
   * Immutable. The resource name of the campaign.
   * Campaign resource names have the form:
   *
   * `customers/{customer_id}/campaigns/{campaign_id}`
   */
  resourceName: string;
  /** Output only. The ID of the campaign. */
  id?:
    | Long
    | undefined;
  /**
   * The name of the campaign.
   *
   * This field is required and should not be empty when creating new
   * campaigns.
   *
   * It must not contain any null (code point 0x0), NL line feed
   * (code point 0xA) or carriage return (code point 0xD) characters.
   */
  name?:
    | string
    | undefined;
  /**
   * The status of the campaign.
   *
   * When a new campaign is added, the status defaults to ENABLED.
   */
  status: CampaignStatusEnum_CampaignStatus;
  /** Output only. The ad serving status of the campaign. */
  servingStatus: CampaignServingStatusEnum_CampaignServingStatus;
  /** Output only. The system status of the campaign's bidding strategy. */
  biddingStrategySystemStatus: BiddingStrategySystemStatusEnum_BiddingStrategySystemStatus;
  /** The ad serving optimization status of the campaign. */
  adServingOptimizationStatus: AdServingOptimizationStatusEnum_AdServingOptimizationStatus;
  /**
   * Immutable. The primary serving target for ads within the campaign.
   * The targeting options can be refined in `network_settings`.
   *
   * This field is required and should not be empty when creating new
   * campaigns.
   *
   * Can be set only when creating campaigns.
   * After the campaign is created, the field can not be changed.
   */
  advertisingChannelType: AdvertisingChannelTypeEnum_AdvertisingChannelType;
  /**
   * Immutable. Optional refinement to `advertising_channel_type`.
   * Must be a valid sub-type of the parent channel type.
   *
   * Can be set only when creating campaigns.
   * After campaign is created, the field can not be changed.
   */
  advertisingChannelSubType: AdvertisingChannelSubTypeEnum_AdvertisingChannelSubType;
  /** The URL template for constructing a tracking URL. */
  trackingUrlTemplate?:
    | string
    | undefined;
  /**
   * The list of mappings used to substitute custom parameter tags in a
   * `tracking_url_template`, `final_urls`, or `mobile_final_urls`.
   */
  urlCustomParameters: CustomParameter[];
  /**
   * Settings for Real-Time Bidding, a feature only available for campaigns
   * targeting the Ad Exchange network.
   */
  realTimeBiddingSetting:
    | RealTimeBiddingSetting
    | undefined;
  /** The network settings for the campaign. */
  networkSettings:
    | Campaign_NetworkSettings
    | undefined;
  /** The setting for controlling Dynamic Search Ads (DSA). */
  dynamicSearchAdsSetting:
    | Campaign_DynamicSearchAdsSetting
    | undefined;
  /** The setting for controlling Shopping campaigns. */
  shoppingSetting:
    | Campaign_ShoppingSetting
    | undefined;
  /** The setting for ads geotargeting. */
  geoTargetTypeSetting:
    | Campaign_GeoTargetTypeSetting
    | undefined;
  /** Output only. The resource names of labels attached to this campaign. */
  labels: string[];
  /** The budget of the campaign. */
  campaignBudget?:
    | string
    | undefined;
  /**
   * Output only. The type of bidding strategy.
   *
   * A bidding strategy can be created by setting either the bidding scheme to
   * create a standard bidding strategy or the `bidding_strategy` field to
   * create a portfolio bidding strategy.
   *
   * This field is read-only.
   */
  biddingStrategyType: BiddingStrategyTypeEnum_BiddingStrategyType;
  /**
   * Output only. Resource name of AccessibleBiddingStrategy, a read-only view
   * of the unrestricted attributes of the attached portfolio bidding strategy
   * identified by 'bidding_strategy'. Empty, if the campaign does not use a
   * portfolio strategy. Unrestricted strategy attributes are available to all
   * customers with whom the strategy is shared and are read from the
   * AccessibleBiddingStrategy resource. In contrast, restricted attributes are
   * only available to the owner customer of the strategy and their managers.
   * Restricted attributes can only be read from the BiddingStrategy resource.
   */
  accessibleBiddingStrategy: string;
  /**
   * The date when campaign started in serving customer's timezone in YYYY-MM-DD
   * format.
   */
  startDate?:
    | string
    | undefined;
  /**
   * The last day of the campaign in serving customer's timezone in YYYY-MM-DD
   * format. On create, defaults to 2037-12-30, which means the campaign will
   * run indefinitely. To set an existing campaign to run indefinitely, set this
   * field to 2037-12-30.
   */
  endDate?:
    | string
    | undefined;
  /**
   * Suffix used to append query parameters to landing pages that are served
   * with parallel tracking.
   */
  finalUrlSuffix?:
    | string
    | undefined;
  /** A list that limits how often each user will see this campaign's ads. */
  frequencyCaps: FrequencyCapEntry[];
  /**
   * Selective optimization setting for this campaign, which includes a set of
   * conversion actions to optimize this campaign towards.
   * This feature only applies to app campaigns that use MULTI_CHANNEL as
   * AdvertisingChannelType and APP_CAMPAIGN or APP_CAMPAIGN_FOR_ENGAGEMENT as
   * AdvertisingChannelSubType.
   */
  selectiveOptimization:
    | Campaign_SelectiveOptimization
    | undefined;
  /**
   * Optimization goal setting for this campaign, which includes a set of
   * optimization goal types.
   */
  optimizationGoalSetting:
    | Campaign_OptimizationGoalSetting
    | undefined;
  /** Output only. Campaign-level settings for tracking information. */
  trackingSetting:
    | Campaign_TrackingSetting
    | undefined;
  /**
   * Output only. ID of the campaign in the external engine account. This field
   * is for non-Google Ads account only, for example, Yahoo Japan, Microsoft,
   * Baidu etc. For Google Ads entity, use "campaign.id" instead.
   */
  engineId: string;
  /**
   * The asset field types that should be excluded from this campaign. Asset
   * links with these field types will not be inherited by this campaign from
   * the upper level.
   */
  excludedParentAssetFieldTypes: AssetFieldTypeEnum_AssetFieldType[];
  /**
   * Output only. The timestamp when this campaign was created. The timestamp is
   * in the customer's time zone and in "yyyy-MM-dd HH:mm:ss" format.
   * create_time will be deprecated in v1. Use creation_time instead.
   */
  createTime: string;
  /**
   * Output only. The timestamp when this campaign was created. The timestamp is
   * in the customer's time zone and in "yyyy-MM-dd HH:mm:ss" format.
   */
  creationTime: string;
  /**
   * Output only. The datetime when this campaign was last modified. The
   * datetime is in the customer's time zone and in "yyyy-MM-dd HH:mm:ss.ssssss"
   * format.
   */
  lastModifiedTime: string;
  /**
   * Represents opting out of URL expansion to more targeted URLs. If opted out
   * (true), only the final URLs in the asset group or URLs specified in the
   * advertiser's Google Merchant Center or business data feeds are targeted.
   * If opted in (false), the entire domain will be targeted. This field can
   * only be set for Performance Max campaigns, where the default value is
   * false.
   */
  urlExpansionOptOut?:
    | boolean
    | undefined;
  /** Portfolio bidding strategy used by campaign. */
  biddingStrategy?:
    | string
    | undefined;
  /**
   * Standard Manual CPA bidding strategy.
   * Manual bidding strategy that allows advertiser to set the bid per
   * advertiser-specified action. Supported only for Local Services campaigns.
   */
  manualCpa?:
    | ManualCpa
    | undefined;
  /**
   * Standard Manual CPC bidding strategy.
   * Manual click-based bidding where user pays per click.
   */
  manualCpc?:
    | ManualCpc
    | undefined;
  /**
   * Standard Manual CPM bidding strategy.
   * Manual impression-based bidding where user pays per thousand
   * impressions.
   */
  manualCpm?:
    | ManualCpm
    | undefined;
  /**
   * Standard Maximize Conversions bidding strategy that automatically
   * maximizes number of conversions while spending your budget.
   */
  maximizeConversions?:
    | MaximizeConversions
    | undefined;
  /**
   * Standard Maximize Conversion Value bidding strategy that automatically
   * sets bids to maximize revenue while spending your budget.
   */
  maximizeConversionValue?:
    | MaximizeConversionValue
    | undefined;
  /**
   * Standard Target CPA bidding strategy that automatically sets bids to
   * help get as many conversions as possible at the target
   * cost-per-acquisition (CPA) you set.
   */
  targetCpa?:
    | TargetCpa
    | undefined;
  /**
   * Target Impression Share bidding strategy. An automated bidding strategy
   * that sets bids to achieve a chosen percentage of impressions.
   */
  targetImpressionShare?:
    | TargetImpressionShare
    | undefined;
  /**
   * Standard Target ROAS bidding strategy that automatically maximizes
   * revenue while averaging a specific target return on ad spend (ROAS).
   */
  targetRoas?:
    | TargetRoas
    | undefined;
  /**
   * Standard Target Spend bidding strategy that automatically sets your bids
   * to help get as many clicks as possible within your budget.
   */
  targetSpend?:
    | TargetSpend
    | undefined;
  /**
   * Standard Percent Cpc bidding strategy where bids are a fraction of the
   * advertised price for some good or service.
   */
  percentCpc?:
    | PercentCpc
    | undefined;
  /**
   * A bidding strategy that automatically optimizes cost per thousand
   * impressions.
   */
  targetCpm?: TargetCpm | undefined;
}

/** The network settings for the campaign. */
export interface Campaign_NetworkSettings {
  /** Whether ads will be served with google.com search results. */
  targetGoogleSearch?:
    | boolean
    | undefined;
  /**
   * Whether ads will be served on partner sites in the Google Search Network
   * (requires `target_google_search` to also be `true`).
   */
  targetSearchNetwork?:
    | boolean
    | undefined;
  /**
   * Whether ads will be served on specified placements in the Google Display
   * Network. Placements are specified using the Placement criterion.
   */
  targetContentNetwork?:
    | boolean
    | undefined;
  /**
   * Whether ads will be served on the Google Partner Network.
   * This is available only to some select Google partner accounts.
   */
  targetPartnerSearchNetwork?: boolean | undefined;
}

/** The setting for controlling Dynamic Search Ads (DSA). */
export interface Campaign_DynamicSearchAdsSetting {
  /**
   * Required. The Internet domain name that this setting represents, for
   * example, "google.com" or "www.google.com".
   */
  domainName: string;
  /**
   * Required. The language code specifying the language of the domain, for
   * example, "en".
   */
  languageCode: string;
  /** Whether the campaign uses advertiser supplied URLs exclusively. */
  useSuppliedUrlsOnly?: boolean | undefined;
}

/**
 * The setting for Shopping campaigns. Defines the universe of products that
 * can be advertised by the campaign, and how this campaign interacts with
 * other Shopping campaigns.
 */
export interface Campaign_ShoppingSetting {
  /**
   * Immutable. ID of the Merchant Center account.
   * This field is required for create operations. This field is immutable for
   * Shopping campaigns.
   */
  merchantId?:
    | Long
    | undefined;
  /** Sales country of products to include in the campaign. */
  salesCountry?:
    | string
    | undefined;
  /**
   * Feed label of products to include in the campaign.
   * Only one of feed_label or sales_country can be set.
   * If used instead of sales_country, the feed_label field accepts country
   * codes in the same format for example: 'XX'.
   * Otherwise can be any string used for feed label in Google Merchant
   * Center.
   */
  feedLabel: string;
  /**
   * Priority of the campaign. Campaigns with numerically higher priorities
   * take precedence over those with lower priorities.
   * This field is required for Shopping campaigns, with values between 0 and
   * 2, inclusive.
   * This field is optional for Smart Shopping campaigns, but must be equal to
   * 3 if set.
   */
  campaignPriority?:
    | number
    | undefined;
  /** Whether to include local products. */
  enableLocal?:
    | boolean
    | undefined;
  /** Immutable. Whether to target Vehicle Listing inventory. */
  useVehicleInventory: boolean;
}

/** Campaign-level settings for tracking information. */
export interface Campaign_TrackingSetting {
  /** Output only. The url used for dynamic tracking. */
  trackingUrl?: string | undefined;
}

/** Represents a collection of settings related to ads geotargeting. */
export interface Campaign_GeoTargetTypeSetting {
  /** The setting used for positive geotargeting in this particular campaign. */
  positiveGeoTargetType: PositiveGeoTargetTypeEnum_PositiveGeoTargetType;
  /** The setting used for negative geotargeting in this particular campaign. */
  negativeGeoTargetType: NegativeGeoTargetTypeEnum_NegativeGeoTargetType;
}

/**
 * Selective optimization setting for this campaign, which includes a set of
 * conversion actions to optimize this campaign towards.
 * This feature only applies to app campaigns that use MULTI_CHANNEL as
 * AdvertisingChannelType and APP_CAMPAIGN or APP_CAMPAIGN_FOR_ENGAGEMENT as
 * AdvertisingChannelSubType.
 */
export interface Campaign_SelectiveOptimization {
  /** The selected set of conversion actions for optimizing this campaign. */
  conversionActions: string[];
}

/**
 * Optimization goal setting for this campaign, which includes a set of
 * optimization goal types.
 */
export interface Campaign_OptimizationGoalSetting {
  /** The list of optimization goal types. */
  optimizationGoalTypes: OptimizationGoalTypeEnum_OptimizationGoalType[];
}

function createBaseCampaign(): Campaign {
  return {
    resourceName: "",
    id: undefined,
    name: undefined,
    status: 0,
    servingStatus: 0,
    biddingStrategySystemStatus: 0,
    adServingOptimizationStatus: 0,
    advertisingChannelType: 0,
    advertisingChannelSubType: 0,
    trackingUrlTemplate: undefined,
    urlCustomParameters: [],
    realTimeBiddingSetting: undefined,
    networkSettings: undefined,
    dynamicSearchAdsSetting: undefined,
    shoppingSetting: undefined,
    geoTargetTypeSetting: undefined,
    labels: [],
    campaignBudget: undefined,
    biddingStrategyType: 0,
    accessibleBiddingStrategy: "",
    startDate: undefined,
    endDate: undefined,
    finalUrlSuffix: undefined,
    frequencyCaps: [],
    selectiveOptimization: undefined,
    optimizationGoalSetting: undefined,
    trackingSetting: undefined,
    engineId: "",
    excludedParentAssetFieldTypes: [],
    createTime: "",
    creationTime: "",
    lastModifiedTime: "",
    urlExpansionOptOut: undefined,
    biddingStrategy: undefined,
    manualCpa: undefined,
    manualCpc: undefined,
    manualCpm: undefined,
    maximizeConversions: undefined,
    maximizeConversionValue: undefined,
    targetCpa: undefined,
    targetImpressionShare: undefined,
    targetRoas: undefined,
    targetSpend: undefined,
    percentCpc: undefined,
    targetCpm: undefined,
  };
}

export const Campaign: MessageFns<Campaign> = {
  encode(message: Campaign, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(10).string(message.resourceName);
    }
    if (message.id !== undefined) {
      writer.uint32(472).int64(message.id.toString());
    }
    if (message.name !== undefined) {
      writer.uint32(466).string(message.name);
    }
    if (message.status !== 0) {
      writer.uint32(40).int32(message.status);
    }
    if (message.servingStatus !== 0) {
      writer.uint32(168).int32(message.servingStatus);
    }
    if (message.biddingStrategySystemStatus !== 0) {
      writer.uint32(624).int32(message.biddingStrategySystemStatus);
    }
    if (message.adServingOptimizationStatus !== 0) {
      writer.uint32(64).int32(message.adServingOptimizationStatus);
    }
    if (message.advertisingChannelType !== 0) {
      writer.uint32(72).int32(message.advertisingChannelType);
    }
    if (message.advertisingChannelSubType !== 0) {
      writer.uint32(80).int32(message.advertisingChannelSubType);
    }
    if (message.trackingUrlTemplate !== undefined) {
      writer.uint32(482).string(message.trackingUrlTemplate);
    }
    for (const v of message.urlCustomParameters) {
      CustomParameter.encode(v!, writer.uint32(98).fork()).join();
    }
    if (message.realTimeBiddingSetting !== undefined) {
      RealTimeBiddingSetting.encode(message.realTimeBiddingSetting, writer.uint32(314).fork()).join();
    }
    if (message.networkSettings !== undefined) {
      Campaign_NetworkSettings.encode(message.networkSettings, writer.uint32(114).fork()).join();
    }
    if (message.dynamicSearchAdsSetting !== undefined) {
      Campaign_DynamicSearchAdsSetting.encode(message.dynamicSearchAdsSetting, writer.uint32(266).fork()).join();
    }
    if (message.shoppingSetting !== undefined) {
      Campaign_ShoppingSetting.encode(message.shoppingSetting, writer.uint32(290).fork()).join();
    }
    if (message.geoTargetTypeSetting !== undefined) {
      Campaign_GeoTargetTypeSetting.encode(message.geoTargetTypeSetting, writer.uint32(378).fork()).join();
    }
    for (const v of message.labels) {
      writer.uint32(490).string(v!);
    }
    if (message.campaignBudget !== undefined) {
      writer.uint32(498).string(message.campaignBudget);
    }
    if (message.biddingStrategyType !== 0) {
      writer.uint32(176).int32(message.biddingStrategyType);
    }
    if (message.accessibleBiddingStrategy !== "") {
      writer.uint32(570).string(message.accessibleBiddingStrategy);
    }
    if (message.startDate !== undefined) {
      writer.uint32(506).string(message.startDate);
    }
    if (message.endDate !== undefined) {
      writer.uint32(514).string(message.endDate);
    }
    if (message.finalUrlSuffix !== undefined) {
      writer.uint32(522).string(message.finalUrlSuffix);
    }
    for (const v of message.frequencyCaps) {
      FrequencyCapEntry.encode(v!, writer.uint32(322).fork()).join();
    }
    if (message.selectiveOptimization !== undefined) {
      Campaign_SelectiveOptimization.encode(message.selectiveOptimization, writer.uint32(362).fork()).join();
    }
    if (message.optimizationGoalSetting !== undefined) {
      Campaign_OptimizationGoalSetting.encode(message.optimizationGoalSetting, writer.uint32(434).fork()).join();
    }
    if (message.trackingSetting !== undefined) {
      Campaign_TrackingSetting.encode(message.trackingSetting, writer.uint32(370).fork()).join();
    }
    if (message.engineId !== "") {
      writer.uint32(546).string(message.engineId);
    }
    writer.uint32(554).fork();
    for (const v of message.excludedParentAssetFieldTypes) {
      writer.int32(v);
    }
    writer.join();
    if (message.createTime !== "") {
      writer.uint32(634).string(message.createTime);
    }
    if (message.creationTime !== "") {
      writer.uint32(674).string(message.creationTime);
    }
    if (message.lastModifiedTime !== "") {
      writer.uint32(562).string(message.lastModifiedTime);
    }
    if (message.urlExpansionOptOut !== undefined) {
      writer.uint32(576).bool(message.urlExpansionOptOut);
    }
    if (message.biddingStrategy !== undefined) {
      writer.uint32(538).string(message.biddingStrategy);
    }
    if (message.manualCpa !== undefined) {
      ManualCpa.encode(message.manualCpa, writer.uint32(594).fork()).join();
    }
    if (message.manualCpc !== undefined) {
      ManualCpc.encode(message.manualCpc, writer.uint32(194).fork()).join();
    }
    if (message.manualCpm !== undefined) {
      ManualCpm.encode(message.manualCpm, writer.uint32(202).fork()).join();
    }
    if (message.maximizeConversions !== undefined) {
      MaximizeConversions.encode(message.maximizeConversions, writer.uint32(242).fork()).join();
    }
    if (message.maximizeConversionValue !== undefined) {
      MaximizeConversionValue.encode(message.maximizeConversionValue, writer.uint32(250).fork()).join();
    }
    if (message.targetCpa !== undefined) {
      TargetCpa.encode(message.targetCpa, writer.uint32(210).fork()).join();
    }
    if (message.targetImpressionShare !== undefined) {
      TargetImpressionShare.encode(message.targetImpressionShare, writer.uint32(386).fork()).join();
    }
    if (message.targetRoas !== undefined) {
      TargetRoas.encode(message.targetRoas, writer.uint32(234).fork()).join();
    }
    if (message.targetSpend !== undefined) {
      TargetSpend.encode(message.targetSpend, writer.uint32(218).fork()).join();
    }
    if (message.percentCpc !== undefined) {
      PercentCpc.encode(message.percentCpc, writer.uint32(274).fork()).join();
    }
    if (message.targetCpm !== undefined) {
      TargetCpm.encode(message.targetCpm, writer.uint32(330).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Campaign {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCampaign();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceName = reader.string();
          continue;
        case 59:
          if (tag !== 472) {
            break;
          }

          message.id = Long.fromString(reader.int64().toString());
          continue;
        case 58:
          if (tag !== 466) {
            break;
          }

          message.name = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        case 21:
          if (tag !== 168) {
            break;
          }

          message.servingStatus = reader.int32() as any;
          continue;
        case 78:
          if (tag !== 624) {
            break;
          }

          message.biddingStrategySystemStatus = reader.int32() as any;
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.adServingOptimizationStatus = reader.int32() as any;
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.advertisingChannelType = reader.int32() as any;
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.advertisingChannelSubType = reader.int32() as any;
          continue;
        case 60:
          if (tag !== 482) {
            break;
          }

          message.trackingUrlTemplate = reader.string();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.urlCustomParameters.push(CustomParameter.decode(reader, reader.uint32()));
          continue;
        case 39:
          if (tag !== 314) {
            break;
          }

          message.realTimeBiddingSetting = RealTimeBiddingSetting.decode(reader, reader.uint32());
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.networkSettings = Campaign_NetworkSettings.decode(reader, reader.uint32());
          continue;
        case 33:
          if (tag !== 266) {
            break;
          }

          message.dynamicSearchAdsSetting = Campaign_DynamicSearchAdsSetting.decode(reader, reader.uint32());
          continue;
        case 36:
          if (tag !== 290) {
            break;
          }

          message.shoppingSetting = Campaign_ShoppingSetting.decode(reader, reader.uint32());
          continue;
        case 47:
          if (tag !== 378) {
            break;
          }

          message.geoTargetTypeSetting = Campaign_GeoTargetTypeSetting.decode(reader, reader.uint32());
          continue;
        case 61:
          if (tag !== 490) {
            break;
          }

          message.labels.push(reader.string());
          continue;
        case 62:
          if (tag !== 498) {
            break;
          }

          message.campaignBudget = reader.string();
          continue;
        case 22:
          if (tag !== 176) {
            break;
          }

          message.biddingStrategyType = reader.int32() as any;
          continue;
        case 71:
          if (tag !== 570) {
            break;
          }

          message.accessibleBiddingStrategy = reader.string();
          continue;
        case 63:
          if (tag !== 506) {
            break;
          }

          message.startDate = reader.string();
          continue;
        case 64:
          if (tag !== 514) {
            break;
          }

          message.endDate = reader.string();
          continue;
        case 65:
          if (tag !== 522) {
            break;
          }

          message.finalUrlSuffix = reader.string();
          continue;
        case 40:
          if (tag !== 322) {
            break;
          }

          message.frequencyCaps.push(FrequencyCapEntry.decode(reader, reader.uint32()));
          continue;
        case 45:
          if (tag !== 362) {
            break;
          }

          message.selectiveOptimization = Campaign_SelectiveOptimization.decode(reader, reader.uint32());
          continue;
        case 54:
          if (tag !== 434) {
            break;
          }

          message.optimizationGoalSetting = Campaign_OptimizationGoalSetting.decode(reader, reader.uint32());
          continue;
        case 46:
          if (tag !== 370) {
            break;
          }

          message.trackingSetting = Campaign_TrackingSetting.decode(reader, reader.uint32());
          continue;
        case 68:
          if (tag !== 546) {
            break;
          }

          message.engineId = reader.string();
          continue;
        case 69:
          if (tag === 552) {
            message.excludedParentAssetFieldTypes.push(reader.int32() as any);

            continue;
          }

          if (tag === 554) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.excludedParentAssetFieldTypes.push(reader.int32() as any);
            }

            continue;
          }

          break;
        case 79:
          if (tag !== 634) {
            break;
          }

          message.createTime = reader.string();
          continue;
        case 84:
          if (tag !== 674) {
            break;
          }

          message.creationTime = reader.string();
          continue;
        case 70:
          if (tag !== 562) {
            break;
          }

          message.lastModifiedTime = reader.string();
          continue;
        case 72:
          if (tag !== 576) {
            break;
          }

          message.urlExpansionOptOut = reader.bool();
          continue;
        case 67:
          if (tag !== 538) {
            break;
          }

          message.biddingStrategy = reader.string();
          continue;
        case 74:
          if (tag !== 594) {
            break;
          }

          message.manualCpa = ManualCpa.decode(reader, reader.uint32());
          continue;
        case 24:
          if (tag !== 194) {
            break;
          }

          message.manualCpc = ManualCpc.decode(reader, reader.uint32());
          continue;
        case 25:
          if (tag !== 202) {
            break;
          }

          message.manualCpm = ManualCpm.decode(reader, reader.uint32());
          continue;
        case 30:
          if (tag !== 242) {
            break;
          }

          message.maximizeConversions = MaximizeConversions.decode(reader, reader.uint32());
          continue;
        case 31:
          if (tag !== 250) {
            break;
          }

          message.maximizeConversionValue = MaximizeConversionValue.decode(reader, reader.uint32());
          continue;
        case 26:
          if (tag !== 210) {
            break;
          }

          message.targetCpa = TargetCpa.decode(reader, reader.uint32());
          continue;
        case 48:
          if (tag !== 386) {
            break;
          }

          message.targetImpressionShare = TargetImpressionShare.decode(reader, reader.uint32());
          continue;
        case 29:
          if (tag !== 234) {
            break;
          }

          message.targetRoas = TargetRoas.decode(reader, reader.uint32());
          continue;
        case 27:
          if (tag !== 218) {
            break;
          }

          message.targetSpend = TargetSpend.decode(reader, reader.uint32());
          continue;
        case 34:
          if (tag !== 274) {
            break;
          }

          message.percentCpc = PercentCpc.decode(reader, reader.uint32());
          continue;
        case 41:
          if (tag !== 330) {
            break;
          }

          message.targetCpm = TargetCpm.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Campaign {
    return {
      resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "",
      id: isSet(object.id) ? Long.fromValue(object.id) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      status: isSet(object.status) ? campaignStatusEnum_CampaignStatusFromJSON(object.status) : 0,
      servingStatus: isSet(object.servingStatus)
        ? campaignServingStatusEnum_CampaignServingStatusFromJSON(object.servingStatus)
        : 0,
      biddingStrategySystemStatus: isSet(object.biddingStrategySystemStatus)
        ? biddingStrategySystemStatusEnum_BiddingStrategySystemStatusFromJSON(object.biddingStrategySystemStatus)
        : 0,
      adServingOptimizationStatus: isSet(object.adServingOptimizationStatus)
        ? adServingOptimizationStatusEnum_AdServingOptimizationStatusFromJSON(object.adServingOptimizationStatus)
        : 0,
      advertisingChannelType: isSet(object.advertisingChannelType)
        ? advertisingChannelTypeEnum_AdvertisingChannelTypeFromJSON(object.advertisingChannelType)
        : 0,
      advertisingChannelSubType: isSet(object.advertisingChannelSubType)
        ? advertisingChannelSubTypeEnum_AdvertisingChannelSubTypeFromJSON(object.advertisingChannelSubType)
        : 0,
      trackingUrlTemplate: isSet(object.trackingUrlTemplate)
        ? globalThis.String(object.trackingUrlTemplate)
        : undefined,
      urlCustomParameters: globalThis.Array.isArray(object?.urlCustomParameters)
        ? object.urlCustomParameters.map((e: any) => CustomParameter.fromJSON(e))
        : [],
      realTimeBiddingSetting: isSet(object.realTimeBiddingSetting)
        ? RealTimeBiddingSetting.fromJSON(object.realTimeBiddingSetting)
        : undefined,
      networkSettings: isSet(object.networkSettings)
        ? Campaign_NetworkSettings.fromJSON(object.networkSettings)
        : undefined,
      dynamicSearchAdsSetting: isSet(object.dynamicSearchAdsSetting)
        ? Campaign_DynamicSearchAdsSetting.fromJSON(object.dynamicSearchAdsSetting)
        : undefined,
      shoppingSetting: isSet(object.shoppingSetting)
        ? Campaign_ShoppingSetting.fromJSON(object.shoppingSetting)
        : undefined,
      geoTargetTypeSetting: isSet(object.geoTargetTypeSetting)
        ? Campaign_GeoTargetTypeSetting.fromJSON(object.geoTargetTypeSetting)
        : undefined,
      labels: globalThis.Array.isArray(object?.labels)
        ? object.labels.map((e: any) => globalThis.String(e))
        : [],
      campaignBudget: isSet(object.campaignBudget) ? globalThis.String(object.campaignBudget) : undefined,
      biddingStrategyType: isSet(object.biddingStrategyType)
        ? biddingStrategyTypeEnum_BiddingStrategyTypeFromJSON(object.biddingStrategyType)
        : 0,
      accessibleBiddingStrategy: isSet(object.accessibleBiddingStrategy)
        ? globalThis.String(object.accessibleBiddingStrategy)
        : "",
      startDate: isSet(object.startDate) ? globalThis.String(object.startDate) : undefined,
      endDate: isSet(object.endDate) ? globalThis.String(object.endDate) : undefined,
      finalUrlSuffix: isSet(object.finalUrlSuffix) ? globalThis.String(object.finalUrlSuffix) : undefined,
      frequencyCaps: globalThis.Array.isArray(object?.frequencyCaps)
        ? object.frequencyCaps.map((e: any) => FrequencyCapEntry.fromJSON(e))
        : [],
      selectiveOptimization: isSet(object.selectiveOptimization)
        ? Campaign_SelectiveOptimization.fromJSON(object.selectiveOptimization)
        : undefined,
      optimizationGoalSetting: isSet(object.optimizationGoalSetting)
        ? Campaign_OptimizationGoalSetting.fromJSON(object.optimizationGoalSetting)
        : undefined,
      trackingSetting: isSet(object.trackingSetting)
        ? Campaign_TrackingSetting.fromJSON(object.trackingSetting)
        : undefined,
      engineId: isSet(object.engineId) ? globalThis.String(object.engineId) : "",
      excludedParentAssetFieldTypes: globalThis.Array.isArray(object?.excludedParentAssetFieldTypes)
        ? object.excludedParentAssetFieldTypes.map((e: any) => assetFieldTypeEnum_AssetFieldTypeFromJSON(e))
        : [],
      createTime: isSet(object.createTime) ? globalThis.String(object.createTime) : "",
      creationTime: isSet(object.creationTime) ? globalThis.String(object.creationTime) : "",
      lastModifiedTime: isSet(object.lastModifiedTime) ? globalThis.String(object.lastModifiedTime) : "",
      urlExpansionOptOut: isSet(object.urlExpansionOptOut) ? globalThis.Boolean(object.urlExpansionOptOut) : undefined,
      biddingStrategy: isSet(object.biddingStrategy) ? globalThis.String(object.biddingStrategy) : undefined,
      manualCpa: isSet(object.manualCpa) ? ManualCpa.fromJSON(object.manualCpa) : undefined,
      manualCpc: isSet(object.manualCpc) ? ManualCpc.fromJSON(object.manualCpc) : undefined,
      manualCpm: isSet(object.manualCpm) ? ManualCpm.fromJSON(object.manualCpm) : undefined,
      maximizeConversions: isSet(object.maximizeConversions)
        ? MaximizeConversions.fromJSON(object.maximizeConversions)
        : undefined,
      maximizeConversionValue: isSet(object.maximizeConversionValue)
        ? MaximizeConversionValue.fromJSON(object.maximizeConversionValue)
        : undefined,
      targetCpa: isSet(object.targetCpa) ? TargetCpa.fromJSON(object.targetCpa) : undefined,
      targetImpressionShare: isSet(object.targetImpressionShare)
        ? TargetImpressionShare.fromJSON(object.targetImpressionShare)
        : undefined,
      targetRoas: isSet(object.targetRoas) ? TargetRoas.fromJSON(object.targetRoas) : undefined,
      targetSpend: isSet(object.targetSpend) ? TargetSpend.fromJSON(object.targetSpend) : undefined,
      percentCpc: isSet(object.percentCpc) ? PercentCpc.fromJSON(object.percentCpc) : undefined,
      targetCpm: isSet(object.targetCpm) ? TargetCpm.fromJSON(object.targetCpm) : undefined,
    };
  },

  toJSON(message: Campaign): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    if (message.id !== undefined) {
      obj.id = (message.id || Long.ZERO).toString();
    }
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.status !== 0) {
      obj.status = campaignStatusEnum_CampaignStatusToJSON(message.status);
    }
    if (message.servingStatus !== 0) {
      obj.servingStatus = campaignServingStatusEnum_CampaignServingStatusToJSON(message.servingStatus);
    }
    if (message.biddingStrategySystemStatus !== 0) {
      obj.biddingStrategySystemStatus = biddingStrategySystemStatusEnum_BiddingStrategySystemStatusToJSON(
        message.biddingStrategySystemStatus,
      );
    }
    if (message.adServingOptimizationStatus !== 0) {
      obj.adServingOptimizationStatus = adServingOptimizationStatusEnum_AdServingOptimizationStatusToJSON(
        message.adServingOptimizationStatus,
      );
    }
    if (message.advertisingChannelType !== 0) {
      obj.advertisingChannelType = advertisingChannelTypeEnum_AdvertisingChannelTypeToJSON(
        message.advertisingChannelType,
      );
    }
    if (message.advertisingChannelSubType !== 0) {
      obj.advertisingChannelSubType = advertisingChannelSubTypeEnum_AdvertisingChannelSubTypeToJSON(
        message.advertisingChannelSubType,
      );
    }
    if (message.trackingUrlTemplate !== undefined) {
      obj.trackingUrlTemplate = message.trackingUrlTemplate;
    }
    if (message.urlCustomParameters?.length) {
      obj.urlCustomParameters = message.urlCustomParameters.map((e) => CustomParameter.toJSON(e));
    }
    if (message.realTimeBiddingSetting !== undefined) {
      obj.realTimeBiddingSetting = RealTimeBiddingSetting.toJSON(message.realTimeBiddingSetting);
    }
    if (message.networkSettings !== undefined) {
      obj.networkSettings = Campaign_NetworkSettings.toJSON(message.networkSettings);
    }
    if (message.dynamicSearchAdsSetting !== undefined) {
      obj.dynamicSearchAdsSetting = Campaign_DynamicSearchAdsSetting.toJSON(message.dynamicSearchAdsSetting);
    }
    if (message.shoppingSetting !== undefined) {
      obj.shoppingSetting = Campaign_ShoppingSetting.toJSON(message.shoppingSetting);
    }
    if (message.geoTargetTypeSetting !== undefined) {
      obj.geoTargetTypeSetting = Campaign_GeoTargetTypeSetting.toJSON(message.geoTargetTypeSetting);
    }
    if (message.labels?.length) {
      obj.labels = message.labels;
    }
    if (message.campaignBudget !== undefined) {
      obj.campaignBudget = message.campaignBudget;
    }
    if (message.biddingStrategyType !== 0) {
      obj.biddingStrategyType = biddingStrategyTypeEnum_BiddingStrategyTypeToJSON(message.biddingStrategyType);
    }
    if (message.accessibleBiddingStrategy !== "") {
      obj.accessibleBiddingStrategy = message.accessibleBiddingStrategy;
    }
    if (message.startDate !== undefined) {
      obj.startDate = message.startDate;
    }
    if (message.endDate !== undefined) {
      obj.endDate = message.endDate;
    }
    if (message.finalUrlSuffix !== undefined) {
      obj.finalUrlSuffix = message.finalUrlSuffix;
    }
    if (message.frequencyCaps?.length) {
      obj.frequencyCaps = message.frequencyCaps.map((e) => FrequencyCapEntry.toJSON(e));
    }
    if (message.selectiveOptimization !== undefined) {
      obj.selectiveOptimization = Campaign_SelectiveOptimization.toJSON(message.selectiveOptimization);
    }
    if (message.optimizationGoalSetting !== undefined) {
      obj.optimizationGoalSetting = Campaign_OptimizationGoalSetting.toJSON(message.optimizationGoalSetting);
    }
    if (message.trackingSetting !== undefined) {
      obj.trackingSetting = Campaign_TrackingSetting.toJSON(message.trackingSetting);
    }
    if (message.engineId !== "") {
      obj.engineId = message.engineId;
    }
    if (message.excludedParentAssetFieldTypes?.length) {
      obj.excludedParentAssetFieldTypes = message.excludedParentAssetFieldTypes.map((e) =>
        assetFieldTypeEnum_AssetFieldTypeToJSON(e)
      );
    }
    if (message.createTime !== "") {
      obj.createTime = message.createTime;
    }
    if (message.creationTime !== "") {
      obj.creationTime = message.creationTime;
    }
    if (message.lastModifiedTime !== "") {
      obj.lastModifiedTime = message.lastModifiedTime;
    }
    if (message.urlExpansionOptOut !== undefined) {
      obj.urlExpansionOptOut = message.urlExpansionOptOut;
    }
    if (message.biddingStrategy !== undefined) {
      obj.biddingStrategy = message.biddingStrategy;
    }
    if (message.manualCpa !== undefined) {
      obj.manualCpa = ManualCpa.toJSON(message.manualCpa);
    }
    if (message.manualCpc !== undefined) {
      obj.manualCpc = ManualCpc.toJSON(message.manualCpc);
    }
    if (message.manualCpm !== undefined) {
      obj.manualCpm = ManualCpm.toJSON(message.manualCpm);
    }
    if (message.maximizeConversions !== undefined) {
      obj.maximizeConversions = MaximizeConversions.toJSON(message.maximizeConversions);
    }
    if (message.maximizeConversionValue !== undefined) {
      obj.maximizeConversionValue = MaximizeConversionValue.toJSON(message.maximizeConversionValue);
    }
    if (message.targetCpa !== undefined) {
      obj.targetCpa = TargetCpa.toJSON(message.targetCpa);
    }
    if (message.targetImpressionShare !== undefined) {
      obj.targetImpressionShare = TargetImpressionShare.toJSON(message.targetImpressionShare);
    }
    if (message.targetRoas !== undefined) {
      obj.targetRoas = TargetRoas.toJSON(message.targetRoas);
    }
    if (message.targetSpend !== undefined) {
      obj.targetSpend = TargetSpend.toJSON(message.targetSpend);
    }
    if (message.percentCpc !== undefined) {
      obj.percentCpc = PercentCpc.toJSON(message.percentCpc);
    }
    if (message.targetCpm !== undefined) {
      obj.targetCpm = TargetCpm.toJSON(message.targetCpm);
    }
    return obj;
  },

  create(base?: DeepPartial<Campaign>): Campaign {
    return Campaign.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Campaign>): Campaign {
    const message = createBaseCampaign();
    message.resourceName = object.resourceName ?? "";
    message.id = (object.id !== undefined && object.id !== null) ? Long.fromValue(object.id) : undefined;
    message.name = object.name ?? undefined;
    message.status = object.status ?? 0;
    message.servingStatus = object.servingStatus ?? 0;
    message.biddingStrategySystemStatus = object.biddingStrategySystemStatus ?? 0;
    message.adServingOptimizationStatus = object.adServingOptimizationStatus ?? 0;
    message.advertisingChannelType = object.advertisingChannelType ?? 0;
    message.advertisingChannelSubType = object.advertisingChannelSubType ?? 0;
    message.trackingUrlTemplate = object.trackingUrlTemplate ?? undefined;
    message.urlCustomParameters = object.urlCustomParameters?.map((e) => CustomParameter.fromPartial(e)) || [];
    message.realTimeBiddingSetting =
      (object.realTimeBiddingSetting !== undefined && object.realTimeBiddingSetting !== null)
        ? RealTimeBiddingSetting.fromPartial(object.realTimeBiddingSetting)
        : undefined;
    message.networkSettings = (object.networkSettings !== undefined && object.networkSettings !== null)
      ? Campaign_NetworkSettings.fromPartial(object.networkSettings)
      : undefined;
    message.dynamicSearchAdsSetting =
      (object.dynamicSearchAdsSetting !== undefined && object.dynamicSearchAdsSetting !== null)
        ? Campaign_DynamicSearchAdsSetting.fromPartial(object.dynamicSearchAdsSetting)
        : undefined;
    message.shoppingSetting = (object.shoppingSetting !== undefined && object.shoppingSetting !== null)
      ? Campaign_ShoppingSetting.fromPartial(object.shoppingSetting)
      : undefined;
    message.geoTargetTypeSetting = (object.geoTargetTypeSetting !== undefined && object.geoTargetTypeSetting !== null)
      ? Campaign_GeoTargetTypeSetting.fromPartial(object.geoTargetTypeSetting)
      : undefined;
    message.labels = object.labels?.map((e) => e) || [];
    message.campaignBudget = object.campaignBudget ?? undefined;
    message.biddingStrategyType = object.biddingStrategyType ?? 0;
    message.accessibleBiddingStrategy = object.accessibleBiddingStrategy ?? "";
    message.startDate = object.startDate ?? undefined;
    message.endDate = object.endDate ?? undefined;
    message.finalUrlSuffix = object.finalUrlSuffix ?? undefined;
    message.frequencyCaps = object.frequencyCaps?.map((e) => FrequencyCapEntry.fromPartial(e)) || [];
    message.selectiveOptimization =
      (object.selectiveOptimization !== undefined && object.selectiveOptimization !== null)
        ? Campaign_SelectiveOptimization.fromPartial(object.selectiveOptimization)
        : undefined;
    message.optimizationGoalSetting =
      (object.optimizationGoalSetting !== undefined && object.optimizationGoalSetting !== null)
        ? Campaign_OptimizationGoalSetting.fromPartial(object.optimizationGoalSetting)
        : undefined;
    message.trackingSetting = (object.trackingSetting !== undefined && object.trackingSetting !== null)
      ? Campaign_TrackingSetting.fromPartial(object.trackingSetting)
      : undefined;
    message.engineId = object.engineId ?? "";
    message.excludedParentAssetFieldTypes = object.excludedParentAssetFieldTypes?.map((e) => e) || [];
    message.createTime = object.createTime ?? "";
    message.creationTime = object.creationTime ?? "";
    message.lastModifiedTime = object.lastModifiedTime ?? "";
    message.urlExpansionOptOut = object.urlExpansionOptOut ?? undefined;
    message.biddingStrategy = object.biddingStrategy ?? undefined;
    message.manualCpa = (object.manualCpa !== undefined && object.manualCpa !== null)
      ? ManualCpa.fromPartial(object.manualCpa)
      : undefined;
    message.manualCpc = (object.manualCpc !== undefined && object.manualCpc !== null)
      ? ManualCpc.fromPartial(object.manualCpc)
      : undefined;
    message.manualCpm = (object.manualCpm !== undefined && object.manualCpm !== null)
      ? ManualCpm.fromPartial(object.manualCpm)
      : undefined;
    message.maximizeConversions = (object.maximizeConversions !== undefined && object.maximizeConversions !== null)
      ? MaximizeConversions.fromPartial(object.maximizeConversions)
      : undefined;
    message.maximizeConversionValue =
      (object.maximizeConversionValue !== undefined && object.maximizeConversionValue !== null)
        ? MaximizeConversionValue.fromPartial(object.maximizeConversionValue)
        : undefined;
    message.targetCpa = (object.targetCpa !== undefined && object.targetCpa !== null)
      ? TargetCpa.fromPartial(object.targetCpa)
      : undefined;
    message.targetImpressionShare =
      (object.targetImpressionShare !== undefined && object.targetImpressionShare !== null)
        ? TargetImpressionShare.fromPartial(object.targetImpressionShare)
        : undefined;
    message.targetRoas = (object.targetRoas !== undefined && object.targetRoas !== null)
      ? TargetRoas.fromPartial(object.targetRoas)
      : undefined;
    message.targetSpend = (object.targetSpend !== undefined && object.targetSpend !== null)
      ? TargetSpend.fromPartial(object.targetSpend)
      : undefined;
    message.percentCpc = (object.percentCpc !== undefined && object.percentCpc !== null)
      ? PercentCpc.fromPartial(object.percentCpc)
      : undefined;
    message.targetCpm = (object.targetCpm !== undefined && object.targetCpm !== null)
      ? TargetCpm.fromPartial(object.targetCpm)
      : undefined;
    return message;
  },
};

function createBaseCampaign_NetworkSettings(): Campaign_NetworkSettings {
  return {
    targetGoogleSearch: undefined,
    targetSearchNetwork: undefined,
    targetContentNetwork: undefined,
    targetPartnerSearchNetwork: undefined,
  };
}

export const Campaign_NetworkSettings: MessageFns<Campaign_NetworkSettings> = {
  encode(message: Campaign_NetworkSettings, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.targetGoogleSearch !== undefined) {
      writer.uint32(40).bool(message.targetGoogleSearch);
    }
    if (message.targetSearchNetwork !== undefined) {
      writer.uint32(48).bool(message.targetSearchNetwork);
    }
    if (message.targetContentNetwork !== undefined) {
      writer.uint32(56).bool(message.targetContentNetwork);
    }
    if (message.targetPartnerSearchNetwork !== undefined) {
      writer.uint32(64).bool(message.targetPartnerSearchNetwork);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Campaign_NetworkSettings {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCampaign_NetworkSettings();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 5:
          if (tag !== 40) {
            break;
          }

          message.targetGoogleSearch = reader.bool();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.targetSearchNetwork = reader.bool();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.targetContentNetwork = reader.bool();
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.targetPartnerSearchNetwork = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Campaign_NetworkSettings {
    return {
      targetGoogleSearch: isSet(object.targetGoogleSearch) ? globalThis.Boolean(object.targetGoogleSearch) : undefined,
      targetSearchNetwork: isSet(object.targetSearchNetwork)
        ? globalThis.Boolean(object.targetSearchNetwork)
        : undefined,
      targetContentNetwork: isSet(object.targetContentNetwork)
        ? globalThis.Boolean(object.targetContentNetwork)
        : undefined,
      targetPartnerSearchNetwork: isSet(object.targetPartnerSearchNetwork)
        ? globalThis.Boolean(object.targetPartnerSearchNetwork)
        : undefined,
    };
  },

  toJSON(message: Campaign_NetworkSettings): unknown {
    const obj: any = {};
    if (message.targetGoogleSearch !== undefined) {
      obj.targetGoogleSearch = message.targetGoogleSearch;
    }
    if (message.targetSearchNetwork !== undefined) {
      obj.targetSearchNetwork = message.targetSearchNetwork;
    }
    if (message.targetContentNetwork !== undefined) {
      obj.targetContentNetwork = message.targetContentNetwork;
    }
    if (message.targetPartnerSearchNetwork !== undefined) {
      obj.targetPartnerSearchNetwork = message.targetPartnerSearchNetwork;
    }
    return obj;
  },

  create(base?: DeepPartial<Campaign_NetworkSettings>): Campaign_NetworkSettings {
    return Campaign_NetworkSettings.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Campaign_NetworkSettings>): Campaign_NetworkSettings {
    const message = createBaseCampaign_NetworkSettings();
    message.targetGoogleSearch = object.targetGoogleSearch ?? undefined;
    message.targetSearchNetwork = object.targetSearchNetwork ?? undefined;
    message.targetContentNetwork = object.targetContentNetwork ?? undefined;
    message.targetPartnerSearchNetwork = object.targetPartnerSearchNetwork ?? undefined;
    return message;
  },
};

function createBaseCampaign_DynamicSearchAdsSetting(): Campaign_DynamicSearchAdsSetting {
  return { domainName: "", languageCode: "", useSuppliedUrlsOnly: undefined };
}

export const Campaign_DynamicSearchAdsSetting: MessageFns<Campaign_DynamicSearchAdsSetting> = {
  encode(message: Campaign_DynamicSearchAdsSetting, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.domainName !== "") {
      writer.uint32(50).string(message.domainName);
    }
    if (message.languageCode !== "") {
      writer.uint32(58).string(message.languageCode);
    }
    if (message.useSuppliedUrlsOnly !== undefined) {
      writer.uint32(64).bool(message.useSuppliedUrlsOnly);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Campaign_DynamicSearchAdsSetting {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCampaign_DynamicSearchAdsSetting();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 6:
          if (tag !== 50) {
            break;
          }

          message.domainName = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.languageCode = reader.string();
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.useSuppliedUrlsOnly = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Campaign_DynamicSearchAdsSetting {
    return {
      domainName: isSet(object.domainName) ? globalThis.String(object.domainName) : "",
      languageCode: isSet(object.languageCode) ? globalThis.String(object.languageCode) : "",
      useSuppliedUrlsOnly: isSet(object.useSuppliedUrlsOnly)
        ? globalThis.Boolean(object.useSuppliedUrlsOnly)
        : undefined,
    };
  },

  toJSON(message: Campaign_DynamicSearchAdsSetting): unknown {
    const obj: any = {};
    if (message.domainName !== "") {
      obj.domainName = message.domainName;
    }
    if (message.languageCode !== "") {
      obj.languageCode = message.languageCode;
    }
    if (message.useSuppliedUrlsOnly !== undefined) {
      obj.useSuppliedUrlsOnly = message.useSuppliedUrlsOnly;
    }
    return obj;
  },

  create(base?: DeepPartial<Campaign_DynamicSearchAdsSetting>): Campaign_DynamicSearchAdsSetting {
    return Campaign_DynamicSearchAdsSetting.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Campaign_DynamicSearchAdsSetting>): Campaign_DynamicSearchAdsSetting {
    const message = createBaseCampaign_DynamicSearchAdsSetting();
    message.domainName = object.domainName ?? "";
    message.languageCode = object.languageCode ?? "";
    message.useSuppliedUrlsOnly = object.useSuppliedUrlsOnly ?? undefined;
    return message;
  },
};

function createBaseCampaign_ShoppingSetting(): Campaign_ShoppingSetting {
  return {
    merchantId: undefined,
    salesCountry: undefined,
    feedLabel: "",
    campaignPriority: undefined,
    enableLocal: undefined,
    useVehicleInventory: false,
  };
}

export const Campaign_ShoppingSetting: MessageFns<Campaign_ShoppingSetting> = {
  encode(message: Campaign_ShoppingSetting, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.merchantId !== undefined) {
      writer.uint32(40).int64(message.merchantId.toString());
    }
    if (message.salesCountry !== undefined) {
      writer.uint32(50).string(message.salesCountry);
    }
    if (message.feedLabel !== "") {
      writer.uint32(82).string(message.feedLabel);
    }
    if (message.campaignPriority !== undefined) {
      writer.uint32(56).int32(message.campaignPriority);
    }
    if (message.enableLocal !== undefined) {
      writer.uint32(64).bool(message.enableLocal);
    }
    if (message.useVehicleInventory !== false) {
      writer.uint32(72).bool(message.useVehicleInventory);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Campaign_ShoppingSetting {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCampaign_ShoppingSetting();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 5:
          if (tag !== 40) {
            break;
          }

          message.merchantId = Long.fromString(reader.int64().toString());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.salesCountry = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.feedLabel = reader.string();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.campaignPriority = reader.int32();
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.enableLocal = reader.bool();
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.useVehicleInventory = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Campaign_ShoppingSetting {
    return {
      merchantId: isSet(object.merchantId) ? Long.fromValue(object.merchantId) : undefined,
      salesCountry: isSet(object.salesCountry) ? globalThis.String(object.salesCountry) : undefined,
      feedLabel: isSet(object.feedLabel) ? globalThis.String(object.feedLabel) : "",
      campaignPriority: isSet(object.campaignPriority) ? globalThis.Number(object.campaignPriority) : undefined,
      enableLocal: isSet(object.enableLocal) ? globalThis.Boolean(object.enableLocal) : undefined,
      useVehicleInventory: isSet(object.useVehicleInventory) ? globalThis.Boolean(object.useVehicleInventory) : false,
    };
  },

  toJSON(message: Campaign_ShoppingSetting): unknown {
    const obj: any = {};
    if (message.merchantId !== undefined) {
      obj.merchantId = (message.merchantId || Long.ZERO).toString();
    }
    if (message.salesCountry !== undefined) {
      obj.salesCountry = message.salesCountry;
    }
    if (message.feedLabel !== "") {
      obj.feedLabel = message.feedLabel;
    }
    if (message.campaignPriority !== undefined) {
      obj.campaignPriority = Math.round(message.campaignPriority);
    }
    if (message.enableLocal !== undefined) {
      obj.enableLocal = message.enableLocal;
    }
    if (message.useVehicleInventory !== false) {
      obj.useVehicleInventory = message.useVehicleInventory;
    }
    return obj;
  },

  create(base?: DeepPartial<Campaign_ShoppingSetting>): Campaign_ShoppingSetting {
    return Campaign_ShoppingSetting.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Campaign_ShoppingSetting>): Campaign_ShoppingSetting {
    const message = createBaseCampaign_ShoppingSetting();
    message.merchantId = (object.merchantId !== undefined && object.merchantId !== null)
      ? Long.fromValue(object.merchantId)
      : undefined;
    message.salesCountry = object.salesCountry ?? undefined;
    message.feedLabel = object.feedLabel ?? "";
    message.campaignPriority = object.campaignPriority ?? undefined;
    message.enableLocal = object.enableLocal ?? undefined;
    message.useVehicleInventory = object.useVehicleInventory ?? false;
    return message;
  },
};

function createBaseCampaign_TrackingSetting(): Campaign_TrackingSetting {
  return { trackingUrl: undefined };
}

export const Campaign_TrackingSetting: MessageFns<Campaign_TrackingSetting> = {
  encode(message: Campaign_TrackingSetting, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.trackingUrl !== undefined) {
      writer.uint32(18).string(message.trackingUrl);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Campaign_TrackingSetting {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCampaign_TrackingSetting();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.trackingUrl = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Campaign_TrackingSetting {
    return { trackingUrl: isSet(object.trackingUrl) ? globalThis.String(object.trackingUrl) : undefined };
  },

  toJSON(message: Campaign_TrackingSetting): unknown {
    const obj: any = {};
    if (message.trackingUrl !== undefined) {
      obj.trackingUrl = message.trackingUrl;
    }
    return obj;
  },

  create(base?: DeepPartial<Campaign_TrackingSetting>): Campaign_TrackingSetting {
    return Campaign_TrackingSetting.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Campaign_TrackingSetting>): Campaign_TrackingSetting {
    const message = createBaseCampaign_TrackingSetting();
    message.trackingUrl = object.trackingUrl ?? undefined;
    return message;
  },
};

function createBaseCampaign_GeoTargetTypeSetting(): Campaign_GeoTargetTypeSetting {
  return { positiveGeoTargetType: 0, negativeGeoTargetType: 0 };
}

export const Campaign_GeoTargetTypeSetting: MessageFns<Campaign_GeoTargetTypeSetting> = {
  encode(message: Campaign_GeoTargetTypeSetting, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.positiveGeoTargetType !== 0) {
      writer.uint32(8).int32(message.positiveGeoTargetType);
    }
    if (message.negativeGeoTargetType !== 0) {
      writer.uint32(16).int32(message.negativeGeoTargetType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Campaign_GeoTargetTypeSetting {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCampaign_GeoTargetTypeSetting();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.positiveGeoTargetType = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.negativeGeoTargetType = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Campaign_GeoTargetTypeSetting {
    return {
      positiveGeoTargetType: isSet(object.positiveGeoTargetType)
        ? positiveGeoTargetTypeEnum_PositiveGeoTargetTypeFromJSON(object.positiveGeoTargetType)
        : 0,
      negativeGeoTargetType: isSet(object.negativeGeoTargetType)
        ? negativeGeoTargetTypeEnum_NegativeGeoTargetTypeFromJSON(object.negativeGeoTargetType)
        : 0,
    };
  },

  toJSON(message: Campaign_GeoTargetTypeSetting): unknown {
    const obj: any = {};
    if (message.positiveGeoTargetType !== 0) {
      obj.positiveGeoTargetType = positiveGeoTargetTypeEnum_PositiveGeoTargetTypeToJSON(message.positiveGeoTargetType);
    }
    if (message.negativeGeoTargetType !== 0) {
      obj.negativeGeoTargetType = negativeGeoTargetTypeEnum_NegativeGeoTargetTypeToJSON(message.negativeGeoTargetType);
    }
    return obj;
  },

  create(base?: DeepPartial<Campaign_GeoTargetTypeSetting>): Campaign_GeoTargetTypeSetting {
    return Campaign_GeoTargetTypeSetting.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Campaign_GeoTargetTypeSetting>): Campaign_GeoTargetTypeSetting {
    const message = createBaseCampaign_GeoTargetTypeSetting();
    message.positiveGeoTargetType = object.positiveGeoTargetType ?? 0;
    message.negativeGeoTargetType = object.negativeGeoTargetType ?? 0;
    return message;
  },
};

function createBaseCampaign_SelectiveOptimization(): Campaign_SelectiveOptimization {
  return { conversionActions: [] };
}

export const Campaign_SelectiveOptimization: MessageFns<Campaign_SelectiveOptimization> = {
  encode(message: Campaign_SelectiveOptimization, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.conversionActions) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Campaign_SelectiveOptimization {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCampaign_SelectiveOptimization();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.conversionActions.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Campaign_SelectiveOptimization {
    return {
      conversionActions: globalThis.Array.isArray(object?.conversionActions)
        ? object.conversionActions.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: Campaign_SelectiveOptimization): unknown {
    const obj: any = {};
    if (message.conversionActions?.length) {
      obj.conversionActions = message.conversionActions;
    }
    return obj;
  },

  create(base?: DeepPartial<Campaign_SelectiveOptimization>): Campaign_SelectiveOptimization {
    return Campaign_SelectiveOptimization.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Campaign_SelectiveOptimization>): Campaign_SelectiveOptimization {
    const message = createBaseCampaign_SelectiveOptimization();
    message.conversionActions = object.conversionActions?.map((e) => e) || [];
    return message;
  },
};

function createBaseCampaign_OptimizationGoalSetting(): Campaign_OptimizationGoalSetting {
  return { optimizationGoalTypes: [] };
}

export const Campaign_OptimizationGoalSetting: MessageFns<Campaign_OptimizationGoalSetting> = {
  encode(message: Campaign_OptimizationGoalSetting, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    writer.uint32(10).fork();
    for (const v of message.optimizationGoalTypes) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Campaign_OptimizationGoalSetting {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCampaign_OptimizationGoalSetting();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag === 8) {
            message.optimizationGoalTypes.push(reader.int32() as any);

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.optimizationGoalTypes.push(reader.int32() as any);
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Campaign_OptimizationGoalSetting {
    return {
      optimizationGoalTypes: globalThis.Array.isArray(object?.optimizationGoalTypes)
        ? object.optimizationGoalTypes.map((e: any) => optimizationGoalTypeEnum_OptimizationGoalTypeFromJSON(e))
        : [],
    };
  },

  toJSON(message: Campaign_OptimizationGoalSetting): unknown {
    const obj: any = {};
    if (message.optimizationGoalTypes?.length) {
      obj.optimizationGoalTypes = message.optimizationGoalTypes.map((e) =>
        optimizationGoalTypeEnum_OptimizationGoalTypeToJSON(e)
      );
    }
    return obj;
  },

  create(base?: DeepPartial<Campaign_OptimizationGoalSetting>): Campaign_OptimizationGoalSetting {
    return Campaign_OptimizationGoalSetting.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Campaign_OptimizationGoalSetting>): Campaign_OptimizationGoalSetting {
    const message = createBaseCampaign_OptimizationGoalSetting();
    message.optimizationGoalTypes = object.optimizationGoalTypes?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
