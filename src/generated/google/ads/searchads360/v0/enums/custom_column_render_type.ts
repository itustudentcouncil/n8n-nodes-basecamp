// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/searchads360/v0/enums/custom_column_render_type.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.searchads360.v0.enums";

/** The render type of custom columns. */
export interface CustomColumnRenderTypeEnum {
}

/** Enum containing the different ways a custom column can be interpreted. */
export enum CustomColumnRenderTypeEnum_CustomColumnRenderType {
  /** UNSPECIFIED - Not specified. */
  UNSPECIFIED = 0,
  /** UNKNOWN - Unknown. */
  UNKNOWN = 1,
  /**
   * NUMBER - The custom column is a raw numerical value. See value_type field to
   * determine if it is an integer or a double.
   */
  NUMBER = 2,
  /**
   * PERCENT - The custom column should be multiplied by 100 to retrieve the
   * percentage value.
   */
  PERCENT = 3,
  /** MONEY - The custom column value is a monetary value and is in micros. */
  MONEY = 4,
  /** STRING - The custom column value is a string. */
  STRING = 5,
  /** BOOLEAN - The custom column value is a boolean. */
  BOOLEAN = 6,
  /**
   * DATE - The custom column value is a date represented as an integer in YYYYMMDD
   * format.
   */
  DATE = 7,
  UNRECOGNIZED = -1,
}

export function customColumnRenderTypeEnum_CustomColumnRenderTypeFromJSON(
  object: any,
): CustomColumnRenderTypeEnum_CustomColumnRenderType {
  switch (object) {
    case 0:
    case "UNSPECIFIED":
      return CustomColumnRenderTypeEnum_CustomColumnRenderType.UNSPECIFIED;
    case 1:
    case "UNKNOWN":
      return CustomColumnRenderTypeEnum_CustomColumnRenderType.UNKNOWN;
    case 2:
    case "NUMBER":
      return CustomColumnRenderTypeEnum_CustomColumnRenderType.NUMBER;
    case 3:
    case "PERCENT":
      return CustomColumnRenderTypeEnum_CustomColumnRenderType.PERCENT;
    case 4:
    case "MONEY":
      return CustomColumnRenderTypeEnum_CustomColumnRenderType.MONEY;
    case 5:
    case "STRING":
      return CustomColumnRenderTypeEnum_CustomColumnRenderType.STRING;
    case 6:
    case "BOOLEAN":
      return CustomColumnRenderTypeEnum_CustomColumnRenderType.BOOLEAN;
    case 7:
    case "DATE":
      return CustomColumnRenderTypeEnum_CustomColumnRenderType.DATE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return CustomColumnRenderTypeEnum_CustomColumnRenderType.UNRECOGNIZED;
  }
}

export function customColumnRenderTypeEnum_CustomColumnRenderTypeToJSON(
  object: CustomColumnRenderTypeEnum_CustomColumnRenderType,
): string {
  switch (object) {
    case CustomColumnRenderTypeEnum_CustomColumnRenderType.UNSPECIFIED:
      return "UNSPECIFIED";
    case CustomColumnRenderTypeEnum_CustomColumnRenderType.UNKNOWN:
      return "UNKNOWN";
    case CustomColumnRenderTypeEnum_CustomColumnRenderType.NUMBER:
      return "NUMBER";
    case CustomColumnRenderTypeEnum_CustomColumnRenderType.PERCENT:
      return "PERCENT";
    case CustomColumnRenderTypeEnum_CustomColumnRenderType.MONEY:
      return "MONEY";
    case CustomColumnRenderTypeEnum_CustomColumnRenderType.STRING:
      return "STRING";
    case CustomColumnRenderTypeEnum_CustomColumnRenderType.BOOLEAN:
      return "BOOLEAN";
    case CustomColumnRenderTypeEnum_CustomColumnRenderType.DATE:
      return "DATE";
    case CustomColumnRenderTypeEnum_CustomColumnRenderType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseCustomColumnRenderTypeEnum(): CustomColumnRenderTypeEnum {
  return {};
}

export const CustomColumnRenderTypeEnum: MessageFns<CustomColumnRenderTypeEnum> = {
  encode(_: CustomColumnRenderTypeEnum, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CustomColumnRenderTypeEnum {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCustomColumnRenderTypeEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): CustomColumnRenderTypeEnum {
    return {};
  },

  toJSON(_: CustomColumnRenderTypeEnum): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<CustomColumnRenderTypeEnum>): CustomColumnRenderTypeEnum {
    return CustomColumnRenderTypeEnum.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<CustomColumnRenderTypeEnum>): CustomColumnRenderTypeEnum {
    const message = createBaseCustomColumnRenderTypeEnum();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
