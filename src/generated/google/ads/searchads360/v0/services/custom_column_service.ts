// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/searchads360/v0/services/custom_column_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { CustomColumn } from "../resources/custom_column.js";

export const protobufPackage = "google.ads.searchads360.v0.services";

/**
 * Request message for
 * [CustomColumnService.GetCustomColumn][google.ads.searchads360.v0.services.CustomColumnService.GetCustomColumn].
 */
export interface GetCustomColumnRequest {
  /** Required. The resource name of the custom column to fetch. */
  resourceName: string;
}

/**
 * Request message for
 * [CustomColumnService.ListCustomColumns][google.ads.searchads360.v0.services.CustomColumnService.ListCustomColumns]
 */
export interface ListCustomColumnsRequest {
  /**
   * Required. The ID of the customer to apply the CustomColumn list operation
   * to.
   */
  customerId: string;
}

/** Response message for fetching all custom columns associated with a customer. */
export interface ListCustomColumnsResponse {
  /** The CustomColumns owned by the provided customer. */
  customColumns: CustomColumn[];
}

function createBaseGetCustomColumnRequest(): GetCustomColumnRequest {
  return { resourceName: "" };
}

export const GetCustomColumnRequest: MessageFns<GetCustomColumnRequest> = {
  encode(message: GetCustomColumnRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(10).string(message.resourceName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCustomColumnRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCustomColumnRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCustomColumnRequest {
    return { resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "" };
  },

  toJSON(message: GetCustomColumnRequest): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    return obj;
  },

  create(base?: DeepPartial<GetCustomColumnRequest>): GetCustomColumnRequest {
    return GetCustomColumnRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetCustomColumnRequest>): GetCustomColumnRequest {
    const message = createBaseGetCustomColumnRequest();
    message.resourceName = object.resourceName ?? "";
    return message;
  },
};

function createBaseListCustomColumnsRequest(): ListCustomColumnsRequest {
  return { customerId: "" };
}

export const ListCustomColumnsRequest: MessageFns<ListCustomColumnsRequest> = {
  encode(message: ListCustomColumnsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.customerId !== "") {
      writer.uint32(10).string(message.customerId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListCustomColumnsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListCustomColumnsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customerId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListCustomColumnsRequest {
    return { customerId: isSet(object.customerId) ? globalThis.String(object.customerId) : "" };
  },

  toJSON(message: ListCustomColumnsRequest): unknown {
    const obj: any = {};
    if (message.customerId !== "") {
      obj.customerId = message.customerId;
    }
    return obj;
  },

  create(base?: DeepPartial<ListCustomColumnsRequest>): ListCustomColumnsRequest {
    return ListCustomColumnsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListCustomColumnsRequest>): ListCustomColumnsRequest {
    const message = createBaseListCustomColumnsRequest();
    message.customerId = object.customerId ?? "";
    return message;
  },
};

function createBaseListCustomColumnsResponse(): ListCustomColumnsResponse {
  return { customColumns: [] };
}

export const ListCustomColumnsResponse: MessageFns<ListCustomColumnsResponse> = {
  encode(message: ListCustomColumnsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.customColumns) {
      CustomColumn.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListCustomColumnsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListCustomColumnsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customColumns.push(CustomColumn.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListCustomColumnsResponse {
    return {
      customColumns: globalThis.Array.isArray(object?.customColumns)
        ? object.customColumns.map((e: any) => CustomColumn.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ListCustomColumnsResponse): unknown {
    const obj: any = {};
    if (message.customColumns?.length) {
      obj.customColumns = message.customColumns.map((e) => CustomColumn.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ListCustomColumnsResponse>): ListCustomColumnsResponse {
    return ListCustomColumnsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListCustomColumnsResponse>): ListCustomColumnsResponse {
    const message = createBaseListCustomColumnsResponse();
    message.customColumns = object.customColumns?.map((e) => CustomColumn.fromPartial(e)) || [];
    return message;
  },
};

/** Service to manage custom columns. */
export type CustomColumnServiceDefinition = typeof CustomColumnServiceDefinition;
export const CustomColumnServiceDefinition = {
  name: "CustomColumnService",
  fullName: "google.ads.searchads360.v0.services.CustomColumnService",
  methods: {
    /** Returns the requested custom column in full detail. */
    getCustomColumn: {
      name: "GetCustomColumn",
      requestType: GetCustomColumnRequest,
      requestStream: false,
      responseType: CustomColumn,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([13, 114, 101, 115, 111, 117, 114, 99, 101, 95, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              49,
              18,
              47,
              47,
              118,
              48,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              95,
              110,
              97,
              109,
              101,
              61,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              115,
              47,
              42,
              47,
              99,
              117,
              115,
              116,
              111,
              109,
              67,
              111,
              108,
              117,
              109,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Returns all the custom columns associated with the customer in full detail. */
    listCustomColumns: {
      name: "ListCustomColumns",
      requestType: ListCustomColumnsRequest,
      requestStream: false,
      responseType: ListCustomColumnsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([11, 99, 117, 115, 116, 111, 109, 101, 114, 95, 105, 100])],
          578365826: [
            Buffer.from([
              45,
              18,
              43,
              47,
              118,
              48,
              47,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              115,
              47,
              123,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              95,
              105,
              100,
              61,
              42,
              125,
              47,
              99,
              117,
              115,
              116,
              111,
              109,
              67,
              111,
              108,
              117,
              109,
              110,
              115,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface CustomColumnServiceImplementation<CallContextExt = {}> {
  /** Returns the requested custom column in full detail. */
  getCustomColumn(
    request: GetCustomColumnRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<CustomColumn>>;
  /** Returns all the custom columns associated with the customer in full detail. */
  listCustomColumns(
    request: ListCustomColumnsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListCustomColumnsResponse>>;
}

export interface CustomColumnServiceClient<CallOptionsExt = {}> {
  /** Returns the requested custom column in full detail. */
  getCustomColumn(
    request: DeepPartial<GetCustomColumnRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<CustomColumn>;
  /** Returns all the custom columns associated with the customer in full detail. */
  listCustomColumns(
    request: DeepPartial<ListCustomColumnsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListCustomColumnsResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
