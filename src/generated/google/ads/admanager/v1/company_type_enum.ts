// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/admanager/v1/company_type_enum.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.admanager.v1";

/**
 * Wrapper message for
 * [CompanyType][google.ads.admanager.v1.CompanyTypeEnum.CompanyType]
 */
export interface CompanyTypeEnum {
}

/** The type of a company. */
export enum CompanyTypeEnum_CompanyType {
  /** COMPANY_TYPE_UNSPECIFIED - No value specified */
  COMPANY_TYPE_UNSPECIFIED = 0,
  /** ADVERTISER - A business entity that purchases ad inventory. */
  ADVERTISER = 1,
  /** HOUSE_ADVERTISER - A company representing the publisher's own advertiser for house ads. */
  HOUSE_ADVERTISER = 2,
  /**
   * AGENCY - An organization that manages ad accounts and offers services, such as ad
   * creation, placement, and management to advertisers.
   */
  AGENCY = 3,
  /** HOUSE_AGENCY - A company representing the publisher's own agency. */
  HOUSE_AGENCY = 4,
  /** AD_NETWORK - A company representing multiple advertisers and agencies. */
  AD_NETWORK = 5,
  /** VIEWABILITY_PROVIDER - A third-party that measures creative viewability. */
  VIEWABILITY_PROVIDER = 6,
  UNRECOGNIZED = -1,
}

export function companyTypeEnum_CompanyTypeFromJSON(object: any): CompanyTypeEnum_CompanyType {
  switch (object) {
    case 0:
    case "COMPANY_TYPE_UNSPECIFIED":
      return CompanyTypeEnum_CompanyType.COMPANY_TYPE_UNSPECIFIED;
    case 1:
    case "ADVERTISER":
      return CompanyTypeEnum_CompanyType.ADVERTISER;
    case 2:
    case "HOUSE_ADVERTISER":
      return CompanyTypeEnum_CompanyType.HOUSE_ADVERTISER;
    case 3:
    case "AGENCY":
      return CompanyTypeEnum_CompanyType.AGENCY;
    case 4:
    case "HOUSE_AGENCY":
      return CompanyTypeEnum_CompanyType.HOUSE_AGENCY;
    case 5:
    case "AD_NETWORK":
      return CompanyTypeEnum_CompanyType.AD_NETWORK;
    case 6:
    case "VIEWABILITY_PROVIDER":
      return CompanyTypeEnum_CompanyType.VIEWABILITY_PROVIDER;
    case -1:
    case "UNRECOGNIZED":
    default:
      return CompanyTypeEnum_CompanyType.UNRECOGNIZED;
  }
}

export function companyTypeEnum_CompanyTypeToJSON(object: CompanyTypeEnum_CompanyType): string {
  switch (object) {
    case CompanyTypeEnum_CompanyType.COMPANY_TYPE_UNSPECIFIED:
      return "COMPANY_TYPE_UNSPECIFIED";
    case CompanyTypeEnum_CompanyType.ADVERTISER:
      return "ADVERTISER";
    case CompanyTypeEnum_CompanyType.HOUSE_ADVERTISER:
      return "HOUSE_ADVERTISER";
    case CompanyTypeEnum_CompanyType.AGENCY:
      return "AGENCY";
    case CompanyTypeEnum_CompanyType.HOUSE_AGENCY:
      return "HOUSE_AGENCY";
    case CompanyTypeEnum_CompanyType.AD_NETWORK:
      return "AD_NETWORK";
    case CompanyTypeEnum_CompanyType.VIEWABILITY_PROVIDER:
      return "VIEWABILITY_PROVIDER";
    case CompanyTypeEnum_CompanyType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseCompanyTypeEnum(): CompanyTypeEnum {
  return {};
}

export const CompanyTypeEnum: MessageFns<CompanyTypeEnum> = {
  encode(_: CompanyTypeEnum, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CompanyTypeEnum {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCompanyTypeEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): CompanyTypeEnum {
    return {};
  },

  toJSON(_: CompanyTypeEnum): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<CompanyTypeEnum>): CompanyTypeEnum {
    return CompanyTypeEnum.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<CompanyTypeEnum>): CompanyTypeEnum {
    const message = createBaseCompanyTypeEnum();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
