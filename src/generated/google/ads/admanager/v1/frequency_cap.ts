// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/admanager/v1/frequency_cap.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.admanager.v1";

/** Represents a Frequency Cap that can be applied to an entity. */
export interface FrequencyCap {
  /** The maximum number of impressions for this frequency cap. */
  maxImpressions?:
    | Long
    | undefined;
  /** The number of time units over which the frequency cap is effective. */
  timeAmount?:
    | Long
    | undefined;
  /** The units of time of this frequency cap. */
  timeUnit?: TimeUnitEnum_TimeUnit | undefined;
}

/** Wrapper message for TimeUnit. */
export interface TimeUnitEnum {
}

/** Unit of time for the frequency cap. */
export enum TimeUnitEnum_TimeUnit {
  /** TIME_UNIT_UNSPECIFIED - Default value. This value is unused. */
  TIME_UNIT_UNSPECIFIED = 0,
  /** MINUTE - Minute */
  MINUTE = 1,
  /** HOUR - Hour */
  HOUR = 2,
  /** DAY - Day */
  DAY = 3,
  /** WEEK - Week */
  WEEK = 4,
  /** MONTH - Month */
  MONTH = 5,
  /** LIFETIME - Lifetime */
  LIFETIME = 6,
  /**
   * POD - Per pod of ads in a video stream. Only valid for entities in a
   * VIDEO_PLAYER environment.
   */
  POD = 7,
  /** STREAM - Per video stream. Only valid for entities in a VIDEO_PLAYER environment. */
  STREAM = 8,
  UNRECOGNIZED = -1,
}

export function timeUnitEnum_TimeUnitFromJSON(object: any): TimeUnitEnum_TimeUnit {
  switch (object) {
    case 0:
    case "TIME_UNIT_UNSPECIFIED":
      return TimeUnitEnum_TimeUnit.TIME_UNIT_UNSPECIFIED;
    case 1:
    case "MINUTE":
      return TimeUnitEnum_TimeUnit.MINUTE;
    case 2:
    case "HOUR":
      return TimeUnitEnum_TimeUnit.HOUR;
    case 3:
    case "DAY":
      return TimeUnitEnum_TimeUnit.DAY;
    case 4:
    case "WEEK":
      return TimeUnitEnum_TimeUnit.WEEK;
    case 5:
    case "MONTH":
      return TimeUnitEnum_TimeUnit.MONTH;
    case 6:
    case "LIFETIME":
      return TimeUnitEnum_TimeUnit.LIFETIME;
    case 7:
    case "POD":
      return TimeUnitEnum_TimeUnit.POD;
    case 8:
    case "STREAM":
      return TimeUnitEnum_TimeUnit.STREAM;
    case -1:
    case "UNRECOGNIZED":
    default:
      return TimeUnitEnum_TimeUnit.UNRECOGNIZED;
  }
}

export function timeUnitEnum_TimeUnitToJSON(object: TimeUnitEnum_TimeUnit): string {
  switch (object) {
    case TimeUnitEnum_TimeUnit.TIME_UNIT_UNSPECIFIED:
      return "TIME_UNIT_UNSPECIFIED";
    case TimeUnitEnum_TimeUnit.MINUTE:
      return "MINUTE";
    case TimeUnitEnum_TimeUnit.HOUR:
      return "HOUR";
    case TimeUnitEnum_TimeUnit.DAY:
      return "DAY";
    case TimeUnitEnum_TimeUnit.WEEK:
      return "WEEK";
    case TimeUnitEnum_TimeUnit.MONTH:
      return "MONTH";
    case TimeUnitEnum_TimeUnit.LIFETIME:
      return "LIFETIME";
    case TimeUnitEnum_TimeUnit.POD:
      return "POD";
    case TimeUnitEnum_TimeUnit.STREAM:
      return "STREAM";
    case TimeUnitEnum_TimeUnit.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseFrequencyCap(): FrequencyCap {
  return { maxImpressions: undefined, timeAmount: undefined, timeUnit: undefined };
}

export const FrequencyCap: MessageFns<FrequencyCap> = {
  encode(message: FrequencyCap, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.maxImpressions !== undefined) {
      writer.uint32(8).int64(message.maxImpressions.toString());
    }
    if (message.timeAmount !== undefined) {
      writer.uint32(16).int64(message.timeAmount.toString());
    }
    if (message.timeUnit !== undefined) {
      writer.uint32(24).int32(message.timeUnit);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FrequencyCap {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFrequencyCap();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.maxImpressions = Long.fromString(reader.int64().toString());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.timeAmount = Long.fromString(reader.int64().toString());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.timeUnit = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FrequencyCap {
    return {
      maxImpressions: isSet(object.maxImpressions) ? Long.fromValue(object.maxImpressions) : undefined,
      timeAmount: isSet(object.timeAmount) ? Long.fromValue(object.timeAmount) : undefined,
      timeUnit: isSet(object.timeUnit) ? timeUnitEnum_TimeUnitFromJSON(object.timeUnit) : undefined,
    };
  },

  toJSON(message: FrequencyCap): unknown {
    const obj: any = {};
    if (message.maxImpressions !== undefined) {
      obj.maxImpressions = (message.maxImpressions || Long.ZERO).toString();
    }
    if (message.timeAmount !== undefined) {
      obj.timeAmount = (message.timeAmount || Long.ZERO).toString();
    }
    if (message.timeUnit !== undefined) {
      obj.timeUnit = timeUnitEnum_TimeUnitToJSON(message.timeUnit);
    }
    return obj;
  },

  create(base?: DeepPartial<FrequencyCap>): FrequencyCap {
    return FrequencyCap.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FrequencyCap>): FrequencyCap {
    const message = createBaseFrequencyCap();
    message.maxImpressions = (object.maxImpressions !== undefined && object.maxImpressions !== null)
      ? Long.fromValue(object.maxImpressions)
      : undefined;
    message.timeAmount = (object.timeAmount !== undefined && object.timeAmount !== null)
      ? Long.fromValue(object.timeAmount)
      : undefined;
    message.timeUnit = object.timeUnit ?? undefined;
    return message;
  },
};

function createBaseTimeUnitEnum(): TimeUnitEnum {
  return {};
}

export const TimeUnitEnum: MessageFns<TimeUnitEnum> = {
  encode(_: TimeUnitEnum, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TimeUnitEnum {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTimeUnitEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): TimeUnitEnum {
    return {};
  },

  toJSON(_: TimeUnitEnum): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<TimeUnitEnum>): TimeUnitEnum {
    return TimeUnitEnum.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<TimeUnitEnum>): TimeUnitEnum {
    const message = createBaseTimeUnitEnum();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
