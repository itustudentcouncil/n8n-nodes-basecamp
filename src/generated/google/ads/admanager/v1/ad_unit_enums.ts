// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/admanager/v1/ad_unit_enums.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.admanager.v1";

/**
 * Wrapper message for
 * [AppliedAdsenseEnabled][google.ads.admanager.v1.AppliedAdsenseEnabledEnum.AppliedAdsenseEnabled]
 */
export interface AppliedAdsenseEnabledEnum {
}

/** Specifies if serving ads from the AdSense content network is enabled. */
export enum AppliedAdsenseEnabledEnum_AppliedAdsenseEnabled {
  /**
   * APPLIED_ADSENSE_ENABLED_UNSPECIFIED - No adsense enabled setting applied directly; value will be inherited from
   * parent or system default.
   */
  APPLIED_ADSENSE_ENABLED_UNSPECIFIED = 0,
  /** TRUE - Serving ads from AdSense content network is enabled. */
  TRUE = 1,
  /** FALSE - Serving ads from AdSense content network is disabled. */
  FALSE = 2,
  UNRECOGNIZED = -1,
}

export function appliedAdsenseEnabledEnum_AppliedAdsenseEnabledFromJSON(
  object: any,
): AppliedAdsenseEnabledEnum_AppliedAdsenseEnabled {
  switch (object) {
    case 0:
    case "APPLIED_ADSENSE_ENABLED_UNSPECIFIED":
      return AppliedAdsenseEnabledEnum_AppliedAdsenseEnabled.APPLIED_ADSENSE_ENABLED_UNSPECIFIED;
    case 1:
    case "TRUE":
      return AppliedAdsenseEnabledEnum_AppliedAdsenseEnabled.TRUE;
    case 2:
    case "FALSE":
      return AppliedAdsenseEnabledEnum_AppliedAdsenseEnabled.FALSE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AppliedAdsenseEnabledEnum_AppliedAdsenseEnabled.UNRECOGNIZED;
  }
}

export function appliedAdsenseEnabledEnum_AppliedAdsenseEnabledToJSON(
  object: AppliedAdsenseEnabledEnum_AppliedAdsenseEnabled,
): string {
  switch (object) {
    case AppliedAdsenseEnabledEnum_AppliedAdsenseEnabled.APPLIED_ADSENSE_ENABLED_UNSPECIFIED:
      return "APPLIED_ADSENSE_ENABLED_UNSPECIFIED";
    case AppliedAdsenseEnabledEnum_AppliedAdsenseEnabled.TRUE:
      return "TRUE";
    case AppliedAdsenseEnabledEnum_AppliedAdsenseEnabled.FALSE:
      return "FALSE";
    case AppliedAdsenseEnabledEnum_AppliedAdsenseEnabled.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseAppliedAdsenseEnabledEnum(): AppliedAdsenseEnabledEnum {
  return {};
}

export const AppliedAdsenseEnabledEnum: MessageFns<AppliedAdsenseEnabledEnum> = {
  encode(_: AppliedAdsenseEnabledEnum, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AppliedAdsenseEnabledEnum {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAppliedAdsenseEnabledEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): AppliedAdsenseEnabledEnum {
    return {};
  },

  toJSON(_: AppliedAdsenseEnabledEnum): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<AppliedAdsenseEnabledEnum>): AppliedAdsenseEnabledEnum {
    return AppliedAdsenseEnabledEnum.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<AppliedAdsenseEnabledEnum>): AppliedAdsenseEnabledEnum {
    const message = createBaseAppliedAdsenseEnabledEnum();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
