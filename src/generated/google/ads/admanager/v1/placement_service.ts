// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/admanager/v1/placement_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Timestamp } from "../../../protobuf/timestamp.js";
import {
  PlacementStatusEnum_PlacementStatus,
  placementStatusEnum_PlacementStatusFromJSON,
  placementStatusEnum_PlacementStatusToJSON,
} from "./placement_enums.js";

export const protobufPackage = "google.ads.admanager.v1";

/** The `Placement` resource. */
export interface Placement {
  /**
   * Identifier. The resource name of the `Placement`.
   * Format: `networks/{network_code}/placements/{placement_id}`
   */
  name: string;
  /** Output only. `Placement` ID. */
  placementId: Long;
  /**
   * Required. The display name of the placement. Its maximum length is 255
   * characters.
   */
  displayName: string;
  /**
   * Optional. A description of the Placement. This value is optional and its
   * maximum length is 65,535 characters.
   */
  description: string;
  /**
   * Output only. A string used to uniquely identify the Placement for purposes
   * of serving the ad. This attribute is read-only and is assigned by Google
   * when a placement is created.
   */
  placementCode: string;
  /** Output only. The status of the Placement. This attribute is read-only. */
  status: PlacementStatusEnum_PlacementStatus;
  /**
   * Optional. The resource names of AdUnits that constitute the Placement.
   * Format: "networks/{network_code}/adUnits/{ad_unit_id}"
   */
  targetedAdUnits: string[];
  /** Output only. The instant this Placement was last modified. */
  updateTime: Date | undefined;
}

/** Request object for `GetPlacement` method. */
export interface GetPlacementRequest {
  /**
   * Required. The resource name of the Placement.
   * Format: `networks/{network_code}/placements/{placement_id}`
   */
  name: string;
}

/** Request object for `ListPlacements` method. */
export interface ListPlacementsRequest {
  /**
   * Required. The parent, which owns this collection of Placements.
   * Format: `networks/{network_code}`
   */
  parent: string;
  /**
   * Optional. The maximum number of `Placements` to return. The service may
   * return fewer than this value. If unspecified, at most 50 `Placements` will
   * be returned. The maximum value is 1000; values above 1000 will be coerced
   * to 1000.
   */
  pageSize: number;
  /**
   * Optional. A page token, received from a previous `ListPlacements` call.
   * Provide this to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to `ListPlacements` must
   * match the call that provided the page token.
   */
  pageToken: string;
  /**
   * Optional. Expression to filter the response.
   * See syntax details at
   * https://developers.google.com/ad-manager/api/beta/filters
   */
  filter: string;
  /**
   * Optional. Expression to specify sorting order.
   * See syntax details at
   * https://developers.google.com/ad-manager/api/beta/filters#order
   */
  orderBy: string;
  /** Optional. Number of individual resources to skip while paginating. */
  skip: number;
}

/**
 * Response object for `ListPlacementsRequest` containing matching `Placement`
 * objects.
 */
export interface ListPlacementsResponse {
  /** The `Placement` objects from the specified network. */
  placements: Placement[];
  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
  /**
   * Total number of `Placement` objects.
   * If a filter was included in the request, this reflects the total number
   * after the filtering is applied.
   *
   * `total_size` will not be calculated in the response unless it has been
   * included in a response field mask. The response field mask can be provided
   * to the method by using the URL parameter `$fields` or `fields`, or by using
   * the HTTP/gRPC header `X-Goog-FieldMask`.
   *
   * For more information, see
   * https://developers.google.com/ad-manager/api/beta/field-masks
   */
  totalSize: number;
}

function createBasePlacement(): Placement {
  return {
    name: "",
    placementId: Long.ZERO,
    displayName: "",
    description: "",
    placementCode: "",
    status: 0,
    targetedAdUnits: [],
    updateTime: undefined,
  };
}

export const Placement: MessageFns<Placement> = {
  encode(message: Placement, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (!message.placementId.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.placementId.toString());
    }
    if (message.displayName !== "") {
      writer.uint32(26).string(message.displayName);
    }
    if (message.description !== "") {
      writer.uint32(34).string(message.description);
    }
    if (message.placementCode !== "") {
      writer.uint32(42).string(message.placementCode);
    }
    if (message.status !== 0) {
      writer.uint32(48).int32(message.status);
    }
    for (const v of message.targetedAdUnits) {
      writer.uint32(58).string(v!);
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(74).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Placement {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlacement();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.placementId = Long.fromString(reader.int64().toString());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.description = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.placementCode = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.targetedAdUnits.push(reader.string());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Placement {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      placementId: isSet(object.placementId) ? Long.fromValue(object.placementId) : Long.ZERO,
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      placementCode: isSet(object.placementCode) ? globalThis.String(object.placementCode) : "",
      status: isSet(object.status) ? placementStatusEnum_PlacementStatusFromJSON(object.status) : 0,
      targetedAdUnits: globalThis.Array.isArray(object?.targetedAdUnits)
        ? object.targetedAdUnits.map((e: any) => globalThis.String(e))
        : [],
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
    };
  },

  toJSON(message: Placement): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (!message.placementId.equals(Long.ZERO)) {
      obj.placementId = (message.placementId || Long.ZERO).toString();
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.placementCode !== "") {
      obj.placementCode = message.placementCode;
    }
    if (message.status !== 0) {
      obj.status = placementStatusEnum_PlacementStatusToJSON(message.status);
    }
    if (message.targetedAdUnits?.length) {
      obj.targetedAdUnits = message.targetedAdUnits;
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<Placement>): Placement {
    return Placement.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Placement>): Placement {
    const message = createBasePlacement();
    message.name = object.name ?? "";
    message.placementId = (object.placementId !== undefined && object.placementId !== null)
      ? Long.fromValue(object.placementId)
      : Long.ZERO;
    message.displayName = object.displayName ?? "";
    message.description = object.description ?? "";
    message.placementCode = object.placementCode ?? "";
    message.status = object.status ?? 0;
    message.targetedAdUnits = object.targetedAdUnits?.map((e) => e) || [];
    message.updateTime = object.updateTime ?? undefined;
    return message;
  },
};

function createBaseGetPlacementRequest(): GetPlacementRequest {
  return { name: "" };
}

export const GetPlacementRequest: MessageFns<GetPlacementRequest> = {
  encode(message: GetPlacementRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetPlacementRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPlacementRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetPlacementRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetPlacementRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetPlacementRequest>): GetPlacementRequest {
    return GetPlacementRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetPlacementRequest>): GetPlacementRequest {
    const message = createBaseGetPlacementRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListPlacementsRequest(): ListPlacementsRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "", skip: 0 };
}

export const ListPlacementsRequest: MessageFns<ListPlacementsRequest> = {
  encode(message: ListPlacementsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    if (message.skip !== 0) {
      writer.uint32(48).int32(message.skip);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListPlacementsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListPlacementsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.skip = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListPlacementsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
      skip: isSet(object.skip) ? globalThis.Number(object.skip) : 0,
    };
  },

  toJSON(message: ListPlacementsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    if (message.skip !== 0) {
      obj.skip = Math.round(message.skip);
    }
    return obj;
  },

  create(base?: DeepPartial<ListPlacementsRequest>): ListPlacementsRequest {
    return ListPlacementsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListPlacementsRequest>): ListPlacementsRequest {
    const message = createBaseListPlacementsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    message.skip = object.skip ?? 0;
    return message;
  },
};

function createBaseListPlacementsResponse(): ListPlacementsResponse {
  return { placements: [], nextPageToken: "", totalSize: 0 };
}

export const ListPlacementsResponse: MessageFns<ListPlacementsResponse> = {
  encode(message: ListPlacementsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.placements) {
      Placement.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    if (message.totalSize !== 0) {
      writer.uint32(24).int32(message.totalSize);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListPlacementsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListPlacementsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.placements.push(Placement.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.totalSize = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListPlacementsResponse {
    return {
      placements: globalThis.Array.isArray(object?.placements)
        ? object.placements.map((e: any) => Placement.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      totalSize: isSet(object.totalSize) ? globalThis.Number(object.totalSize) : 0,
    };
  },

  toJSON(message: ListPlacementsResponse): unknown {
    const obj: any = {};
    if (message.placements?.length) {
      obj.placements = message.placements.map((e) => Placement.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.totalSize !== 0) {
      obj.totalSize = Math.round(message.totalSize);
    }
    return obj;
  },

  create(base?: DeepPartial<ListPlacementsResponse>): ListPlacementsResponse {
    return ListPlacementsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListPlacementsResponse>): ListPlacementsResponse {
    const message = createBaseListPlacementsResponse();
    message.placements = object.placements?.map((e) => Placement.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.totalSize = object.totalSize ?? 0;
    return message;
  },
};

/** Provides methods for handling `Placement` objects. */
export type PlacementServiceDefinition = typeof PlacementServiceDefinition;
export const PlacementServiceDefinition = {
  name: "PlacementService",
  fullName: "google.ads.admanager.v1.PlacementService",
  methods: {
    /** API to retrieve a `Placement` object. */
    getPlacement: {
      name: "GetPlacement",
      requestType: GetPlacementRequest,
      requestStream: false,
      responseType: Placement,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              36,
              18,
              34,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              110,
              101,
              116,
              119,
              111,
              114,
              107,
              115,
              47,
              42,
              47,
              112,
              108,
              97,
              99,
              101,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** API to retrieve a list of `Placement` objects. */
    listPlacements: {
      name: "ListPlacements",
      requestType: ListPlacementsRequest,
      requestStream: false,
      responseType: ListPlacementsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              36,
              18,
              34,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              110,
              101,
              116,
              119,
              111,
              114,
              107,
              115,
              47,
              42,
              125,
              47,
              112,
              108,
              97,
              99,
              101,
              109,
              101,
              110,
              116,
              115,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface PlacementServiceImplementation<CallContextExt = {}> {
  /** API to retrieve a `Placement` object. */
  getPlacement(request: GetPlacementRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Placement>>;
  /** API to retrieve a list of `Placement` objects. */
  listPlacements(
    request: ListPlacementsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListPlacementsResponse>>;
}

export interface PlacementServiceClient<CallOptionsExt = {}> {
  /** API to retrieve a `Placement` object. */
  getPlacement(request: DeepPartial<GetPlacementRequest>, options?: CallOptions & CallOptionsExt): Promise<Placement>;
  /** API to retrieve a list of `Placement` objects. */
  listPlacements(
    request: DeepPartial<ListPlacementsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListPlacementsResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
