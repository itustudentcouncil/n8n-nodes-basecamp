// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/admanager/v1/report_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../longrunning/operations.js";

export const protobufPackage = "google.ads.admanager.v1";

/** The Report resource. */
export interface Report {
  /**
   * Identifier. The resource name of the Report.
   * Report resource name have the form:
   * `networks/{network_code}/reports/{report_id}`
   */
  name: string;
}

/** Request proto for the configuration of a report run. */
export interface ExportSavedReportRequest {
  /**
   * The name of a particular saved report resource.
   *
   * A report will be run based on the specification of this saved report.
   * It must have the format of
   * "networks/{network_code}/reports/{report_id}"
   */
  report: string;
  /** Required. The export format requested. */
  format: ExportSavedReportRequest_Format;
  /**
   * Whether or not to include the report properties (e.g. network, user, date
   * generated...) in the generated report.
   */
  includeReportProperties: boolean;
  /**
   * Whether or not to include the IDs if there are any (e.g. advertiser ID,
   *  order ID...) present in the report.
   */
  includeIds: boolean;
  /** Whether or not to include a row containing metric totals. */
  includeTotalsRow: boolean;
  /**
   * The file name of report download. The file extension is determined by
   * export_format and gzip_compressed.
   *
   * Defaults to "DFP Report" if not specified.
   */
  fileName: string;
}

/** Supported file formats. */
export enum ExportSavedReportRequest_Format {
  /** FORMAT_UNSPECIFIED - Default value. This value is unused. */
  FORMAT_UNSPECIFIED = 0,
  /**
   * CSV_DUMP - Comma separated values meant to be used by automated machine
   * processing.
   *
   * Unlike other formats, the output is not localized and there is no
   * totals row by default.
   */
  CSV_DUMP = 2,
  /**
   * XLSX - The report file is generated as an Office Open XML spreadsheet designed
   * for Excel 2007+.
   */
  XLSX = 5,
  /** XML - The report is generated as XML. */
  XML = 6,
  UNRECOGNIZED = -1,
}

export function exportSavedReportRequest_FormatFromJSON(object: any): ExportSavedReportRequest_Format {
  switch (object) {
    case 0:
    case "FORMAT_UNSPECIFIED":
      return ExportSavedReportRequest_Format.FORMAT_UNSPECIFIED;
    case 2:
    case "CSV_DUMP":
      return ExportSavedReportRequest_Format.CSV_DUMP;
    case 5:
    case "XLSX":
      return ExportSavedReportRequest_Format.XLSX;
    case 6:
    case "XML":
      return ExportSavedReportRequest_Format.XML;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ExportSavedReportRequest_Format.UNRECOGNIZED;
  }
}

export function exportSavedReportRequest_FormatToJSON(object: ExportSavedReportRequest_Format): string {
  switch (object) {
    case ExportSavedReportRequest_Format.FORMAT_UNSPECIFIED:
      return "FORMAT_UNSPECIFIED";
    case ExportSavedReportRequest_Format.CSV_DUMP:
      return "CSV_DUMP";
    case ExportSavedReportRequest_Format.XLSX:
      return "XLSX";
    case ExportSavedReportRequest_Format.XML:
      return "XML";
    case ExportSavedReportRequest_Format.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * The message stored in the google.longrunning.Operation.metadata field.
 * Contains metadata regarding this execution.
 */
export interface ExportSavedReportMetadata {
  /** The result generated in this report run. */
  resultId: Long;
}

/**
 * Message included in the longrunning Operation result.response field when
 * the report completes successfully.
 */
export interface ExportSavedReportResponse {
  /** The link to the exported file. */
  downloadUrl: string;
}

function createBaseReport(): Report {
  return { name: "" };
}

export const Report: MessageFns<Report> = {
  encode(message: Report, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Report {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReport();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Report {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: Report): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<Report>): Report {
    return Report.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Report>): Report {
    const message = createBaseReport();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseExportSavedReportRequest(): ExportSavedReportRequest {
  return {
    report: "",
    format: 0,
    includeReportProperties: false,
    includeIds: false,
    includeTotalsRow: false,
    fileName: "",
  };
}

export const ExportSavedReportRequest: MessageFns<ExportSavedReportRequest> = {
  encode(message: ExportSavedReportRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.report !== "") {
      writer.uint32(10).string(message.report);
    }
    if (message.format !== 0) {
      writer.uint32(16).int32(message.format);
    }
    if (message.includeReportProperties !== false) {
      writer.uint32(24).bool(message.includeReportProperties);
    }
    if (message.includeIds !== false) {
      writer.uint32(32).bool(message.includeIds);
    }
    if (message.includeTotalsRow !== false) {
      writer.uint32(40).bool(message.includeTotalsRow);
    }
    if (message.fileName !== "") {
      writer.uint32(50).string(message.fileName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExportSavedReportRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExportSavedReportRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.report = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.format = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.includeReportProperties = reader.bool();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.includeIds = reader.bool();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.includeTotalsRow = reader.bool();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.fileName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExportSavedReportRequest {
    return {
      report: isSet(object.report) ? globalThis.String(object.report) : "",
      format: isSet(object.format) ? exportSavedReportRequest_FormatFromJSON(object.format) : 0,
      includeReportProperties: isSet(object.includeReportProperties)
        ? globalThis.Boolean(object.includeReportProperties)
        : false,
      includeIds: isSet(object.includeIds) ? globalThis.Boolean(object.includeIds) : false,
      includeTotalsRow: isSet(object.includeTotalsRow) ? globalThis.Boolean(object.includeTotalsRow) : false,
      fileName: isSet(object.fileName) ? globalThis.String(object.fileName) : "",
    };
  },

  toJSON(message: ExportSavedReportRequest): unknown {
    const obj: any = {};
    if (message.report !== "") {
      obj.report = message.report;
    }
    if (message.format !== 0) {
      obj.format = exportSavedReportRequest_FormatToJSON(message.format);
    }
    if (message.includeReportProperties !== false) {
      obj.includeReportProperties = message.includeReportProperties;
    }
    if (message.includeIds !== false) {
      obj.includeIds = message.includeIds;
    }
    if (message.includeTotalsRow !== false) {
      obj.includeTotalsRow = message.includeTotalsRow;
    }
    if (message.fileName !== "") {
      obj.fileName = message.fileName;
    }
    return obj;
  },

  create(base?: DeepPartial<ExportSavedReportRequest>): ExportSavedReportRequest {
    return ExportSavedReportRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExportSavedReportRequest>): ExportSavedReportRequest {
    const message = createBaseExportSavedReportRequest();
    message.report = object.report ?? "";
    message.format = object.format ?? 0;
    message.includeReportProperties = object.includeReportProperties ?? false;
    message.includeIds = object.includeIds ?? false;
    message.includeTotalsRow = object.includeTotalsRow ?? false;
    message.fileName = object.fileName ?? "";
    return message;
  },
};

function createBaseExportSavedReportMetadata(): ExportSavedReportMetadata {
  return { resultId: Long.ZERO };
}

export const ExportSavedReportMetadata: MessageFns<ExportSavedReportMetadata> = {
  encode(message: ExportSavedReportMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.resultId.equals(Long.ZERO)) {
      writer.uint32(8).int64(message.resultId.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExportSavedReportMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExportSavedReportMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.resultId = Long.fromString(reader.int64().toString());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExportSavedReportMetadata {
    return { resultId: isSet(object.resultId) ? Long.fromValue(object.resultId) : Long.ZERO };
  },

  toJSON(message: ExportSavedReportMetadata): unknown {
    const obj: any = {};
    if (!message.resultId.equals(Long.ZERO)) {
      obj.resultId = (message.resultId || Long.ZERO).toString();
    }
    return obj;
  },

  create(base?: DeepPartial<ExportSavedReportMetadata>): ExportSavedReportMetadata {
    return ExportSavedReportMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExportSavedReportMetadata>): ExportSavedReportMetadata {
    const message = createBaseExportSavedReportMetadata();
    message.resultId = (object.resultId !== undefined && object.resultId !== null)
      ? Long.fromValue(object.resultId)
      : Long.ZERO;
    return message;
  },
};

function createBaseExportSavedReportResponse(): ExportSavedReportResponse {
  return { downloadUrl: "" };
}

export const ExportSavedReportResponse: MessageFns<ExportSavedReportResponse> = {
  encode(message: ExportSavedReportResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.downloadUrl !== "") {
      writer.uint32(10).string(message.downloadUrl);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExportSavedReportResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExportSavedReportResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.downloadUrl = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExportSavedReportResponse {
    return { downloadUrl: isSet(object.downloadUrl) ? globalThis.String(object.downloadUrl) : "" };
  },

  toJSON(message: ExportSavedReportResponse): unknown {
    const obj: any = {};
    if (message.downloadUrl !== "") {
      obj.downloadUrl = message.downloadUrl;
    }
    return obj;
  },

  create(base?: DeepPartial<ExportSavedReportResponse>): ExportSavedReportResponse {
    return ExportSavedReportResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExportSavedReportResponse>): ExportSavedReportResponse {
    const message = createBaseExportSavedReportResponse();
    message.downloadUrl = object.downloadUrl ?? "";
    return message;
  },
};

/** Provides methods for interacting with Reports. */
export type ReportServiceDefinition = typeof ReportServiceDefinition;
export const ReportServiceDefinition = {
  name: "ReportService",
  fullName: "google.ads.admanager.v1.ReportService",
  methods: {
    /**
     * Initiates the execution and export of a report asynchronously. Users can
     * get the report by polling this operation via
     * OperationsService.GetOperation.
     * Intervals of at least 2 seconds are recommended, with an exponential
     * backoff. Once a report is complete, the operation will contain a
     * ExportSavedReportResponse in its response field.
     */
    exportSavedReport: {
      name: "ExportSavedReport",
      requestType: ExportSavedReportRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              54,
              10,
              25,
              69,
              120,
              112,
              111,
              114,
              116,
              83,
              97,
              118,
              101,
              100,
              82,
              101,
              112,
              111,
              114,
              116,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              18,
              25,
              69,
              120,
              112,
              111,
              114,
              116,
              83,
              97,
              118,
              101,
              100,
              82,
              101,
              112,
              111,
              114,
              116,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([6, 114, 101, 112, 111, 114, 116])],
          578365826: [
            Buffer.from([
              56,
              58,
              1,
              42,
              34,
              51,
              47,
              118,
              49,
              47,
              123,
              114,
              101,
              112,
              111,
              114,
              116,
              61,
              110,
              101,
              116,
              119,
              111,
              114,
              107,
              115,
              47,
              42,
              47,
              114,
              101,
              112,
              111,
              114,
              116,
              115,
              47,
              42,
              125,
              58,
              101,
              120,
              112,
              111,
              114,
              116,
              83,
              97,
              118,
              101,
              100,
              82,
              101,
              112,
              111,
              114,
              116,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface ReportServiceImplementation<CallContextExt = {}> {
  /**
   * Initiates the execution and export of a report asynchronously. Users can
   * get the report by polling this operation via
   * OperationsService.GetOperation.
   * Intervals of at least 2 seconds are recommended, with an exponential
   * backoff. Once a report is complete, the operation will contain a
   * ExportSavedReportResponse in its response field.
   */
  exportSavedReport(
    request: ExportSavedReportRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
}

export interface ReportServiceClient<CallOptionsExt = {}> {
  /**
   * Initiates the execution and export of a report asynchronously. Users can
   * get the report by polling this operation via
   * OperationsService.GetOperation.
   * Intervals of at least 2 seconds are recommended, with an exponential
   * backoff. Once a report is complete, the operation will contain a
   * ExportSavedReportResponse in its response field.
   */
  exportSavedReport(
    request: DeepPartial<ExportSavedReportRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
