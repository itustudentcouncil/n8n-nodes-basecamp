// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/admanager/v1/ad_partner_declaration.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.admanager.v1";

/**
 * Represents a set of declarations about what (if any) ad partners
 * are associated with a given creative. This can be set at the network level,
 * as a default for all creatives, or overridden for a particular creative.
 */
export interface AdPartnerDeclaration {
  /** They type of declaration. */
  type: DeclarationTypeEnum_DeclarationType;
  /**
   * The resource names of AdPartners being declared.
   * Format: "networks/{network_code}/adPartners/{ad_partner_id}"
   */
  adPartners: string[];
}

/**
 * Wrapper message for
 * [DeclarationTypeEnum][google.ads.admanager.v1.DeclarationTypeEnum].
 */
export interface DeclarationTypeEnum {
}

/** The declaration about third party data usage on the associated entity. */
export enum DeclarationTypeEnum_DeclarationType {
  /** DECLARATION_TYPE_UNSPECIFIED - Default value. This value is unused. */
  DECLARATION_TYPE_UNSPECIFIED = 0,
  /** NONE - No ad technology providers to declare. */
  NONE = 1,
  /** DECLARED - There are are ad technology providers to declare on this entity. */
  DECLARED = 2,
  UNRECOGNIZED = -1,
}

export function declarationTypeEnum_DeclarationTypeFromJSON(object: any): DeclarationTypeEnum_DeclarationType {
  switch (object) {
    case 0:
    case "DECLARATION_TYPE_UNSPECIFIED":
      return DeclarationTypeEnum_DeclarationType.DECLARATION_TYPE_UNSPECIFIED;
    case 1:
    case "NONE":
      return DeclarationTypeEnum_DeclarationType.NONE;
    case 2:
    case "DECLARED":
      return DeclarationTypeEnum_DeclarationType.DECLARED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return DeclarationTypeEnum_DeclarationType.UNRECOGNIZED;
  }
}

export function declarationTypeEnum_DeclarationTypeToJSON(object: DeclarationTypeEnum_DeclarationType): string {
  switch (object) {
    case DeclarationTypeEnum_DeclarationType.DECLARATION_TYPE_UNSPECIFIED:
      return "DECLARATION_TYPE_UNSPECIFIED";
    case DeclarationTypeEnum_DeclarationType.NONE:
      return "NONE";
    case DeclarationTypeEnum_DeclarationType.DECLARED:
      return "DECLARED";
    case DeclarationTypeEnum_DeclarationType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseAdPartnerDeclaration(): AdPartnerDeclaration {
  return { type: 0, adPartners: [] };
}

export const AdPartnerDeclaration: MessageFns<AdPartnerDeclaration> = {
  encode(message: AdPartnerDeclaration, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    for (const v of message.adPartners) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AdPartnerDeclaration {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAdPartnerDeclaration();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.adPartners.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AdPartnerDeclaration {
    return {
      type: isSet(object.type) ? declarationTypeEnum_DeclarationTypeFromJSON(object.type) : 0,
      adPartners: globalThis.Array.isArray(object?.adPartners)
        ? object.adPartners.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: AdPartnerDeclaration): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = declarationTypeEnum_DeclarationTypeToJSON(message.type);
    }
    if (message.adPartners?.length) {
      obj.adPartners = message.adPartners;
    }
    return obj;
  },

  create(base?: DeepPartial<AdPartnerDeclaration>): AdPartnerDeclaration {
    return AdPartnerDeclaration.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AdPartnerDeclaration>): AdPartnerDeclaration {
    const message = createBaseAdPartnerDeclaration();
    message.type = object.type ?? 0;
    message.adPartners = object.adPartners?.map((e) => e) || [];
    return message;
  },
};

function createBaseDeclarationTypeEnum(): DeclarationTypeEnum {
  return {};
}

export const DeclarationTypeEnum: MessageFns<DeclarationTypeEnum> = {
  encode(_: DeclarationTypeEnum, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeclarationTypeEnum {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeclarationTypeEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): DeclarationTypeEnum {
    return {};
  },

  toJSON(_: DeclarationTypeEnum): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<DeclarationTypeEnum>): DeclarationTypeEnum {
    return DeclarationTypeEnum.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<DeclarationTypeEnum>): DeclarationTypeEnum {
    const message = createBaseDeclarationTypeEnum();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
