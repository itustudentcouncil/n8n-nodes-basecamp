// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/admanager/v1/custom_field_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import {
  CustomFieldDataTypeEnum_CustomFieldDataType,
  customFieldDataTypeEnum_CustomFieldDataTypeFromJSON,
  customFieldDataTypeEnum_CustomFieldDataTypeToJSON,
  CustomFieldEntityTypeEnum_CustomFieldEntityType,
  customFieldEntityTypeEnum_CustomFieldEntityTypeFromJSON,
  customFieldEntityTypeEnum_CustomFieldEntityTypeToJSON,
  CustomFieldStatusEnum_CustomFieldStatus,
  customFieldStatusEnum_CustomFieldStatusFromJSON,
  customFieldStatusEnum_CustomFieldStatusToJSON,
  CustomFieldVisibilityEnum_CustomFieldVisibility,
  customFieldVisibilityEnum_CustomFieldVisibilityFromJSON,
  customFieldVisibilityEnum_CustomFieldVisibilityToJSON,
} from "./custom_field_enums.js";

export const protobufPackage = "google.ads.admanager.v1";

/** The `CustomField` resource. */
export interface CustomField {
  /**
   * Identifier. The resource name of the `CustomField`.
   * Format: `networks/{network_code}/customFields/{custom_field_id}`
   */
  name: string;
  /** Output only. `CustomField` ID. */
  customFieldId: Long;
  /**
   * Required. The display name of the `CustomField`.
   *
   * This value has a maximum length of 127 characters.
   */
  displayName: string;
  /**
   * Optional. The description of the `CustomField`.
   *
   * This value has a maximum length of 511 characters.
   */
  description: string;
  /** Output only. The status of the `CustomField`. */
  status: CustomFieldStatusEnum_CustomFieldStatus;
  /** Required. The type of entity the `CustomField` can be applied to. */
  entityType: CustomFieldEntityTypeEnum_CustomFieldEntityType;
  /** Required. The data type of the `CustomField`. */
  dataType: CustomFieldDataTypeEnum_CustomFieldDataType;
  /** Required. The visibility of the `CustomField`. */
  visibility: CustomFieldVisibilityEnum_CustomFieldVisibility;
  /**
   * Optional. The drop-down options for the `CustomField`.
   *
   * Only applicable for `CustomField` with the drop-down data type.
   */
  options: CustomFieldOption[];
}

/** An option for a drop-down `CustomField`. */
export interface CustomFieldOption {
  /** Output only. `CustomFieldOption` ID. */
  customFieldOptionId: Long;
  /**
   * Required. The display name of the `CustomFieldOption`.
   *
   * This value has a maximum length of 127 characters.
   */
  displayName: string;
}

/** Request object for `GetCustomField` method. */
export interface GetCustomFieldRequest {
  /**
   * Required. The resource name of the CustomField.
   * Format: `networks/{network_code}/customFields/{custom_field_id}`
   */
  name: string;
}

/** Request object for `ListCustomFields` method. */
export interface ListCustomFieldsRequest {
  /**
   * Required. The parent, which owns this collection of CustomFields.
   * Format: `networks/{network_code}`
   */
  parent: string;
  /**
   * Optional. The maximum number of `CustomFields` to return. The service may
   * return fewer than this value. If unspecified, at most 50 `CustomFields`
   * will be returned. The maximum value is 1000; values above 1000 will be
   * coerced to 1000.
   */
  pageSize: number;
  /**
   * Optional. A page token, received from a previous `ListCustomFields` call.
   * Provide this to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to `ListCustomFields` must
   * match the call that provided the page token.
   */
  pageToken: string;
  /**
   * Optional. Expression to filter the response.
   * See syntax details at https://google.aip.dev/160
   */
  filter: string;
  /**
   * Optional. Expression to specify sorting order.
   * See syntax details at https://google.aip.dev/132#ordering
   */
  orderBy: string;
  /** Optional. Number of individual resources to skip while paginating. */
  skip: number;
}

/**
 * Response object for `ListCustomFieldsRequest` containing matching
 * `CustomField` objects.
 */
export interface ListCustomFieldsResponse {
  /** The `CustomField` objects from the specified network. */
  customFields: CustomField[];
  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
  /**
   * Total number of `CustomField` objects.
   * If a filter was included in the request, this reflects the total number
   * after the filtering is applied.
   *
   * `total_size` will not be calculated in the response unless it has been
   * included in a response field mask. The response field mask can be provided
   * to the method by using the URL parameter `$fields` or `fields`, or by using
   * the HTTP/gRPC header `X-Goog-FieldMask`.
   *
   * For more information, see
   * [System Parameters](https://cloud.google.com/apis/docs/system-parameters).
   */
  totalSize: number;
}

function createBaseCustomField(): CustomField {
  return {
    name: "",
    customFieldId: Long.ZERO,
    displayName: "",
    description: "",
    status: 0,
    entityType: 0,
    dataType: 0,
    visibility: 0,
    options: [],
  };
}

export const CustomField: MessageFns<CustomField> = {
  encode(message: CustomField, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (!message.customFieldId.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.customFieldId.toString());
    }
    if (message.displayName !== "") {
      writer.uint32(26).string(message.displayName);
    }
    if (message.description !== "") {
      writer.uint32(34).string(message.description);
    }
    if (message.status !== 0) {
      writer.uint32(40).int32(message.status);
    }
    if (message.entityType !== 0) {
      writer.uint32(56).int32(message.entityType);
    }
    if (message.dataType !== 0) {
      writer.uint32(64).int32(message.dataType);
    }
    if (message.visibility !== 0) {
      writer.uint32(72).int32(message.visibility);
    }
    for (const v of message.options) {
      CustomFieldOption.encode(v!, writer.uint32(82).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CustomField {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCustomField();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.customFieldId = Long.fromString(reader.int64().toString());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.description = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.entityType = reader.int32() as any;
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.dataType = reader.int32() as any;
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.visibility = reader.int32() as any;
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.options.push(CustomFieldOption.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CustomField {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      customFieldId: isSet(object.customFieldId) ? Long.fromValue(object.customFieldId) : Long.ZERO,
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      status: isSet(object.status) ? customFieldStatusEnum_CustomFieldStatusFromJSON(object.status) : 0,
      entityType: isSet(object.entityType)
        ? customFieldEntityTypeEnum_CustomFieldEntityTypeFromJSON(object.entityType)
        : 0,
      dataType: isSet(object.dataType) ? customFieldDataTypeEnum_CustomFieldDataTypeFromJSON(object.dataType) : 0,
      visibility: isSet(object.visibility)
        ? customFieldVisibilityEnum_CustomFieldVisibilityFromJSON(object.visibility)
        : 0,
      options: globalThis.Array.isArray(object?.options)
        ? object.options.map((e: any) => CustomFieldOption.fromJSON(e))
        : [],
    };
  },

  toJSON(message: CustomField): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (!message.customFieldId.equals(Long.ZERO)) {
      obj.customFieldId = (message.customFieldId || Long.ZERO).toString();
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.status !== 0) {
      obj.status = customFieldStatusEnum_CustomFieldStatusToJSON(message.status);
    }
    if (message.entityType !== 0) {
      obj.entityType = customFieldEntityTypeEnum_CustomFieldEntityTypeToJSON(message.entityType);
    }
    if (message.dataType !== 0) {
      obj.dataType = customFieldDataTypeEnum_CustomFieldDataTypeToJSON(message.dataType);
    }
    if (message.visibility !== 0) {
      obj.visibility = customFieldVisibilityEnum_CustomFieldVisibilityToJSON(message.visibility);
    }
    if (message.options?.length) {
      obj.options = message.options.map((e) => CustomFieldOption.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<CustomField>): CustomField {
    return CustomField.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CustomField>): CustomField {
    const message = createBaseCustomField();
    message.name = object.name ?? "";
    message.customFieldId = (object.customFieldId !== undefined && object.customFieldId !== null)
      ? Long.fromValue(object.customFieldId)
      : Long.ZERO;
    message.displayName = object.displayName ?? "";
    message.description = object.description ?? "";
    message.status = object.status ?? 0;
    message.entityType = object.entityType ?? 0;
    message.dataType = object.dataType ?? 0;
    message.visibility = object.visibility ?? 0;
    message.options = object.options?.map((e) => CustomFieldOption.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCustomFieldOption(): CustomFieldOption {
  return { customFieldOptionId: Long.ZERO, displayName: "" };
}

export const CustomFieldOption: MessageFns<CustomFieldOption> = {
  encode(message: CustomFieldOption, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.customFieldOptionId.equals(Long.ZERO)) {
      writer.uint32(8).int64(message.customFieldOptionId.toString());
    }
    if (message.displayName !== "") {
      writer.uint32(18).string(message.displayName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CustomFieldOption {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCustomFieldOption();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.customFieldOptionId = Long.fromString(reader.int64().toString());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.displayName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CustomFieldOption {
    return {
      customFieldOptionId: isSet(object.customFieldOptionId) ? Long.fromValue(object.customFieldOptionId) : Long.ZERO,
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
    };
  },

  toJSON(message: CustomFieldOption): unknown {
    const obj: any = {};
    if (!message.customFieldOptionId.equals(Long.ZERO)) {
      obj.customFieldOptionId = (message.customFieldOptionId || Long.ZERO).toString();
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    return obj;
  },

  create(base?: DeepPartial<CustomFieldOption>): CustomFieldOption {
    return CustomFieldOption.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CustomFieldOption>): CustomFieldOption {
    const message = createBaseCustomFieldOption();
    message.customFieldOptionId = (object.customFieldOptionId !== undefined && object.customFieldOptionId !== null)
      ? Long.fromValue(object.customFieldOptionId)
      : Long.ZERO;
    message.displayName = object.displayName ?? "";
    return message;
  },
};

function createBaseGetCustomFieldRequest(): GetCustomFieldRequest {
  return { name: "" };
}

export const GetCustomFieldRequest: MessageFns<GetCustomFieldRequest> = {
  encode(message: GetCustomFieldRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCustomFieldRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCustomFieldRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCustomFieldRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetCustomFieldRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetCustomFieldRequest>): GetCustomFieldRequest {
    return GetCustomFieldRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetCustomFieldRequest>): GetCustomFieldRequest {
    const message = createBaseGetCustomFieldRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListCustomFieldsRequest(): ListCustomFieldsRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "", skip: 0 };
}

export const ListCustomFieldsRequest: MessageFns<ListCustomFieldsRequest> = {
  encode(message: ListCustomFieldsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    if (message.skip !== 0) {
      writer.uint32(48).int32(message.skip);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListCustomFieldsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListCustomFieldsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.skip = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListCustomFieldsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
      skip: isSet(object.skip) ? globalThis.Number(object.skip) : 0,
    };
  },

  toJSON(message: ListCustomFieldsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    if (message.skip !== 0) {
      obj.skip = Math.round(message.skip);
    }
    return obj;
  },

  create(base?: DeepPartial<ListCustomFieldsRequest>): ListCustomFieldsRequest {
    return ListCustomFieldsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListCustomFieldsRequest>): ListCustomFieldsRequest {
    const message = createBaseListCustomFieldsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    message.skip = object.skip ?? 0;
    return message;
  },
};

function createBaseListCustomFieldsResponse(): ListCustomFieldsResponse {
  return { customFields: [], nextPageToken: "", totalSize: 0 };
}

export const ListCustomFieldsResponse: MessageFns<ListCustomFieldsResponse> = {
  encode(message: ListCustomFieldsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.customFields) {
      CustomField.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    if (message.totalSize !== 0) {
      writer.uint32(24).int32(message.totalSize);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListCustomFieldsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListCustomFieldsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customFields.push(CustomField.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.totalSize = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListCustomFieldsResponse {
    return {
      customFields: globalThis.Array.isArray(object?.customFields)
        ? object.customFields.map((e: any) => CustomField.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      totalSize: isSet(object.totalSize) ? globalThis.Number(object.totalSize) : 0,
    };
  },

  toJSON(message: ListCustomFieldsResponse): unknown {
    const obj: any = {};
    if (message.customFields?.length) {
      obj.customFields = message.customFields.map((e) => CustomField.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.totalSize !== 0) {
      obj.totalSize = Math.round(message.totalSize);
    }
    return obj;
  },

  create(base?: DeepPartial<ListCustomFieldsResponse>): ListCustomFieldsResponse {
    return ListCustomFieldsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListCustomFieldsResponse>): ListCustomFieldsResponse {
    const message = createBaseListCustomFieldsResponse();
    message.customFields = object.customFields?.map((e) => CustomField.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.totalSize = object.totalSize ?? 0;
    return message;
  },
};

/** Provides methods for handling `CustomField` objects. */
export type CustomFieldServiceDefinition = typeof CustomFieldServiceDefinition;
export const CustomFieldServiceDefinition = {
  name: "CustomFieldService",
  fullName: "google.ads.admanager.v1.CustomFieldService",
  methods: {
    /** API to retrieve a `CustomField` object. */
    getCustomField: {
      name: "GetCustomField",
      requestType: GetCustomFieldRequest,
      requestStream: false,
      responseType: CustomField,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              38,
              18,
              36,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              110,
              101,
              116,
              119,
              111,
              114,
              107,
              115,
              47,
              42,
              47,
              99,
              117,
              115,
              116,
              111,
              109,
              70,
              105,
              101,
              108,
              100,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** API to retrieve a list of `CustomField` objects. */
    listCustomFields: {
      name: "ListCustomFields",
      requestType: ListCustomFieldsRequest,
      requestStream: false,
      responseType: ListCustomFieldsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              38,
              18,
              36,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              110,
              101,
              116,
              119,
              111,
              114,
              107,
              115,
              47,
              42,
              125,
              47,
              99,
              117,
              115,
              116,
              111,
              109,
              70,
              105,
              101,
              108,
              100,
              115,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface CustomFieldServiceImplementation<CallContextExt = {}> {
  /** API to retrieve a `CustomField` object. */
  getCustomField(
    request: GetCustomFieldRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<CustomField>>;
  /** API to retrieve a list of `CustomField` objects. */
  listCustomFields(
    request: ListCustomFieldsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListCustomFieldsResponse>>;
}

export interface CustomFieldServiceClient<CallOptionsExt = {}> {
  /** API to retrieve a `CustomField` object. */
  getCustomField(
    request: DeepPartial<GetCustomFieldRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<CustomField>;
  /** API to retrieve a list of `CustomField` objects. */
  listCustomFields(
    request: DeepPartial<ListCustomFieldsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListCustomFieldsResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
