// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v16/common/simulation.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.googleads.v16.common";

/** A container for simulation points for simulations of type CPC_BID. */
export interface CpcBidSimulationPointList {
  /** Projected metrics for a series of CPC bid amounts. */
  points: CpcBidSimulationPoint[];
}

/** A container for simulation points for simulations of type CPV_BID. */
export interface CpvBidSimulationPointList {
  /** Projected metrics for a series of CPV bid amounts. */
  points: CpvBidSimulationPoint[];
}

/** A container for simulation points for simulations of type TARGET_CPA. */
export interface TargetCpaSimulationPointList {
  /** Projected metrics for a series of target CPA amounts. */
  points: TargetCpaSimulationPoint[];
}

/** A container for simulation points for simulations of type TARGET_ROAS. */
export interface TargetRoasSimulationPointList {
  /** Projected metrics for a series of target ROAS amounts. */
  points: TargetRoasSimulationPoint[];
}

/** A container for simulation points for simulations of type PERCENT_CPC_BID. */
export interface PercentCpcBidSimulationPointList {
  /** Projected metrics for a series of percent CPC bid amounts. */
  points: PercentCpcBidSimulationPoint[];
}

/** A container for simulation points for simulations of type BUDGET. */
export interface BudgetSimulationPointList {
  /** Projected metrics for a series of budget amounts. */
  points: BudgetSimulationPoint[];
}

/**
 * A container for simulation points for simulations of type
 * TARGET_IMPRESSION_SHARE.
 */
export interface TargetImpressionShareSimulationPointList {
  /** Projected metrics for a specific target impression share value. */
  points: TargetImpressionShareSimulationPoint[];
}

/** Projected metrics for a specific CPC bid amount. */
export interface CpcBidSimulationPoint {
  /**
   * Projected required daily budget that the advertiser must set in order to
   * receive the estimated traffic, in micros of advertiser currency.
   */
  requiredBudgetAmountMicros: Long;
  /** Projected number of biddable conversions. */
  biddableConversions?:
    | number
    | undefined;
  /** Projected total value of biddable conversions. */
  biddableConversionsValue?:
    | number
    | undefined;
  /** Projected number of clicks. */
  clicks?:
    | Long
    | undefined;
  /** Projected cost in micros. */
  costMicros?:
    | Long
    | undefined;
  /** Projected number of impressions. */
  impressions?:
    | Long
    | undefined;
  /**
   * Projected number of top slot impressions.
   * Only search advertising channel type supports this field.
   */
  topSlotImpressions?:
    | Long
    | undefined;
  /** The simulated CPC bid upon which projected metrics are based. */
  cpcBidMicros?:
    | Long
    | undefined;
  /**
   * The simulated scaling modifier upon which projected metrics are based.
   * All CPC bids relevant to the simulated entity are scaled by this
   * modifier.
   */
  cpcBidScalingModifier?: number | undefined;
}

/** Projected metrics for a specific CPV bid amount. */
export interface CpvBidSimulationPoint {
  /** The simulated CPV bid upon which projected metrics are based. */
  cpvBidMicros?:
    | Long
    | undefined;
  /** Projected cost in micros. */
  costMicros?:
    | Long
    | undefined;
  /** Projected number of impressions. */
  impressions?:
    | Long
    | undefined;
  /** Projected number of views. */
  views?: Long | undefined;
}

/** Projected metrics for a specific target CPA amount. */
export interface TargetCpaSimulationPoint {
  /**
   * Projected required daily budget that the advertiser must set in order to
   * receive the estimated traffic, in micros of advertiser currency.
   */
  requiredBudgetAmountMicros: Long;
  /** Projected number of biddable conversions. */
  biddableConversions?:
    | number
    | undefined;
  /** Projected total value of biddable conversions. */
  biddableConversionsValue?:
    | number
    | undefined;
  /** Projected number of app installs. */
  appInstalls: number;
  /** Projected number of in-app actions. */
  inAppActions: number;
  /** Projected number of clicks. */
  clicks?:
    | Long
    | undefined;
  /** Projected cost in micros. */
  costMicros?:
    | Long
    | undefined;
  /** Projected number of impressions. */
  impressions?:
    | Long
    | undefined;
  /**
   * Projected number of top slot impressions.
   * Only search advertising channel type supports this field.
   */
  topSlotImpressions?:
    | Long
    | undefined;
  /**
   * Projected number of interactions.
   * Only discovery advertising channel type supports this field.
   */
  interactions?:
    | Long
    | undefined;
  /** The simulated target CPA upon which projected metrics are based. */
  targetCpaMicros?:
    | Long
    | undefined;
  /**
   * The simulated scaling modifier upon which projected metrics are based.
   * All CPA targets relevant to the simulated entity are scaled by this
   * modifier.
   */
  targetCpaScalingModifier?: number | undefined;
}

/** Projected metrics for a specific target ROAS amount. */
export interface TargetRoasSimulationPoint {
  /** The simulated target ROAS upon which projected metrics are based. */
  targetRoas?:
    | number
    | undefined;
  /**
   * Projected required daily budget that the advertiser must set in order to
   * receive the estimated traffic, in micros of advertiser currency.
   */
  requiredBudgetAmountMicros: Long;
  /** Projected number of biddable conversions. */
  biddableConversions?:
    | number
    | undefined;
  /** Projected total value of biddable conversions. */
  biddableConversionsValue?:
    | number
    | undefined;
  /** Projected number of clicks. */
  clicks?:
    | Long
    | undefined;
  /** Projected cost in micros. */
  costMicros?:
    | Long
    | undefined;
  /** Projected number of impressions. */
  impressions?:
    | Long
    | undefined;
  /**
   * Projected number of top slot impressions.
   * Only Search advertising channel type supports this field.
   */
  topSlotImpressions?: Long | undefined;
}

/**
 * Projected metrics for a specific percent CPC amount. Only Hotel advertising
 * channel type supports this field.
 */
export interface PercentCpcBidSimulationPoint {
  /**
   * The simulated percent CPC upon which projected metrics are based. Percent
   * CPC expressed as fraction of the advertised price for some good or service.
   * The value stored here is 1,000,000 * [fraction].
   */
  percentCpcBidMicros?:
    | Long
    | undefined;
  /** Projected number of biddable conversions. */
  biddableConversions?:
    | number
    | undefined;
  /** Projected total value of biddable conversions in local currency. */
  biddableConversionsValue?:
    | number
    | undefined;
  /** Projected number of clicks. */
  clicks?:
    | Long
    | undefined;
  /** Projected cost in micros. */
  costMicros?:
    | Long
    | undefined;
  /** Projected number of impressions. */
  impressions?:
    | Long
    | undefined;
  /** Projected number of top slot impressions. */
  topSlotImpressions?: Long | undefined;
}

/** Projected metrics for a specific budget amount. */
export interface BudgetSimulationPoint {
  /** The simulated budget upon which projected metrics are based. */
  budgetAmountMicros: Long;
  /**
   * Projected required daily cpc bid ceiling that the advertiser must set to
   * realize this simulation, in micros of the advertiser currency.
   * Only campaigns with the Target Spend bidding strategy support this field.
   */
  requiredCpcBidCeilingMicros: Long;
  /** Projected number of biddable conversions. */
  biddableConversions: number;
  /** Projected total value of biddable conversions. */
  biddableConversionsValue: number;
  /** Projected number of clicks. */
  clicks: Long;
  /** Projected cost in micros. */
  costMicros: Long;
  /** Projected number of impressions. */
  impressions: Long;
  /**
   * Projected number of top slot impressions.
   * Only search advertising channel type supports this field.
   */
  topSlotImpressions: Long;
  /**
   * Projected number of interactions.
   * Only discovery advertising channel type supports this field.
   */
  interactions: Long;
}

/** Projected metrics for a specific target impression share value. */
export interface TargetImpressionShareSimulationPoint {
  /**
   * The simulated target impression share value (in micros) upon which
   * projected metrics are based.
   * For example, 10% impression share, which is equal to 0.1, is stored as
   * 100_000. This value is validated and will not exceed 1M (100%).
   */
  targetImpressionShareMicros: Long;
  /**
   * Projected required daily cpc bid ceiling that the advertiser must set to
   * realize this simulation, in micros of the advertiser currency.
   */
  requiredCpcBidCeilingMicros: Long;
  /**
   * Projected required daily budget that the advertiser must set in order to
   * receive the estimated traffic, in micros of advertiser currency.
   */
  requiredBudgetAmountMicros: Long;
  /** Projected number of biddable conversions. */
  biddableConversions: number;
  /** Projected total value of biddable conversions. */
  biddableConversionsValue: number;
  /** Projected number of clicks. */
  clicks: Long;
  /** Projected cost in micros. */
  costMicros: Long;
  /** Projected number of impressions. */
  impressions: Long;
  /**
   * Projected number of top slot impressions.
   * Only search advertising channel type supports this field.
   */
  topSlotImpressions: Long;
  /**
   * Projected number of absolute top impressions.
   * Only search advertising channel type supports this field.
   */
  absoluteTopImpressions: Long;
}

function createBaseCpcBidSimulationPointList(): CpcBidSimulationPointList {
  return { points: [] };
}

export const CpcBidSimulationPointList: MessageFns<CpcBidSimulationPointList> = {
  encode(message: CpcBidSimulationPointList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.points) {
      CpcBidSimulationPoint.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CpcBidSimulationPointList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCpcBidSimulationPointList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.points.push(CpcBidSimulationPoint.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CpcBidSimulationPointList {
    return {
      points: globalThis.Array.isArray(object?.points)
        ? object.points.map((e: any) => CpcBidSimulationPoint.fromJSON(e))
        : [],
    };
  },

  toJSON(message: CpcBidSimulationPointList): unknown {
    const obj: any = {};
    if (message.points?.length) {
      obj.points = message.points.map((e) => CpcBidSimulationPoint.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<CpcBidSimulationPointList>): CpcBidSimulationPointList {
    return CpcBidSimulationPointList.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CpcBidSimulationPointList>): CpcBidSimulationPointList {
    const message = createBaseCpcBidSimulationPointList();
    message.points = object.points?.map((e) => CpcBidSimulationPoint.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCpvBidSimulationPointList(): CpvBidSimulationPointList {
  return { points: [] };
}

export const CpvBidSimulationPointList: MessageFns<CpvBidSimulationPointList> = {
  encode(message: CpvBidSimulationPointList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.points) {
      CpvBidSimulationPoint.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CpvBidSimulationPointList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCpvBidSimulationPointList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.points.push(CpvBidSimulationPoint.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CpvBidSimulationPointList {
    return {
      points: globalThis.Array.isArray(object?.points)
        ? object.points.map((e: any) => CpvBidSimulationPoint.fromJSON(e))
        : [],
    };
  },

  toJSON(message: CpvBidSimulationPointList): unknown {
    const obj: any = {};
    if (message.points?.length) {
      obj.points = message.points.map((e) => CpvBidSimulationPoint.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<CpvBidSimulationPointList>): CpvBidSimulationPointList {
    return CpvBidSimulationPointList.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CpvBidSimulationPointList>): CpvBidSimulationPointList {
    const message = createBaseCpvBidSimulationPointList();
    message.points = object.points?.map((e) => CpvBidSimulationPoint.fromPartial(e)) || [];
    return message;
  },
};

function createBaseTargetCpaSimulationPointList(): TargetCpaSimulationPointList {
  return { points: [] };
}

export const TargetCpaSimulationPointList: MessageFns<TargetCpaSimulationPointList> = {
  encode(message: TargetCpaSimulationPointList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.points) {
      TargetCpaSimulationPoint.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TargetCpaSimulationPointList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTargetCpaSimulationPointList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.points.push(TargetCpaSimulationPoint.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TargetCpaSimulationPointList {
    return {
      points: globalThis.Array.isArray(object?.points)
        ? object.points.map((e: any) => TargetCpaSimulationPoint.fromJSON(e))
        : [],
    };
  },

  toJSON(message: TargetCpaSimulationPointList): unknown {
    const obj: any = {};
    if (message.points?.length) {
      obj.points = message.points.map((e) => TargetCpaSimulationPoint.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<TargetCpaSimulationPointList>): TargetCpaSimulationPointList {
    return TargetCpaSimulationPointList.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TargetCpaSimulationPointList>): TargetCpaSimulationPointList {
    const message = createBaseTargetCpaSimulationPointList();
    message.points = object.points?.map((e) => TargetCpaSimulationPoint.fromPartial(e)) || [];
    return message;
  },
};

function createBaseTargetRoasSimulationPointList(): TargetRoasSimulationPointList {
  return { points: [] };
}

export const TargetRoasSimulationPointList: MessageFns<TargetRoasSimulationPointList> = {
  encode(message: TargetRoasSimulationPointList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.points) {
      TargetRoasSimulationPoint.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TargetRoasSimulationPointList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTargetRoasSimulationPointList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.points.push(TargetRoasSimulationPoint.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TargetRoasSimulationPointList {
    return {
      points: globalThis.Array.isArray(object?.points)
        ? object.points.map((e: any) => TargetRoasSimulationPoint.fromJSON(e))
        : [],
    };
  },

  toJSON(message: TargetRoasSimulationPointList): unknown {
    const obj: any = {};
    if (message.points?.length) {
      obj.points = message.points.map((e) => TargetRoasSimulationPoint.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<TargetRoasSimulationPointList>): TargetRoasSimulationPointList {
    return TargetRoasSimulationPointList.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TargetRoasSimulationPointList>): TargetRoasSimulationPointList {
    const message = createBaseTargetRoasSimulationPointList();
    message.points = object.points?.map((e) => TargetRoasSimulationPoint.fromPartial(e)) || [];
    return message;
  },
};

function createBasePercentCpcBidSimulationPointList(): PercentCpcBidSimulationPointList {
  return { points: [] };
}

export const PercentCpcBidSimulationPointList: MessageFns<PercentCpcBidSimulationPointList> = {
  encode(message: PercentCpcBidSimulationPointList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.points) {
      PercentCpcBidSimulationPoint.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PercentCpcBidSimulationPointList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePercentCpcBidSimulationPointList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.points.push(PercentCpcBidSimulationPoint.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PercentCpcBidSimulationPointList {
    return {
      points: globalThis.Array.isArray(object?.points)
        ? object.points.map((e: any) => PercentCpcBidSimulationPoint.fromJSON(e))
        : [],
    };
  },

  toJSON(message: PercentCpcBidSimulationPointList): unknown {
    const obj: any = {};
    if (message.points?.length) {
      obj.points = message.points.map((e) => PercentCpcBidSimulationPoint.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<PercentCpcBidSimulationPointList>): PercentCpcBidSimulationPointList {
    return PercentCpcBidSimulationPointList.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PercentCpcBidSimulationPointList>): PercentCpcBidSimulationPointList {
    const message = createBasePercentCpcBidSimulationPointList();
    message.points = object.points?.map((e) => PercentCpcBidSimulationPoint.fromPartial(e)) || [];
    return message;
  },
};

function createBaseBudgetSimulationPointList(): BudgetSimulationPointList {
  return { points: [] };
}

export const BudgetSimulationPointList: MessageFns<BudgetSimulationPointList> = {
  encode(message: BudgetSimulationPointList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.points) {
      BudgetSimulationPoint.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BudgetSimulationPointList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBudgetSimulationPointList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.points.push(BudgetSimulationPoint.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BudgetSimulationPointList {
    return {
      points: globalThis.Array.isArray(object?.points)
        ? object.points.map((e: any) => BudgetSimulationPoint.fromJSON(e))
        : [],
    };
  },

  toJSON(message: BudgetSimulationPointList): unknown {
    const obj: any = {};
    if (message.points?.length) {
      obj.points = message.points.map((e) => BudgetSimulationPoint.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<BudgetSimulationPointList>): BudgetSimulationPointList {
    return BudgetSimulationPointList.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BudgetSimulationPointList>): BudgetSimulationPointList {
    const message = createBaseBudgetSimulationPointList();
    message.points = object.points?.map((e) => BudgetSimulationPoint.fromPartial(e)) || [];
    return message;
  },
};

function createBaseTargetImpressionShareSimulationPointList(): TargetImpressionShareSimulationPointList {
  return { points: [] };
}

export const TargetImpressionShareSimulationPointList: MessageFns<TargetImpressionShareSimulationPointList> = {
  encode(message: TargetImpressionShareSimulationPointList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.points) {
      TargetImpressionShareSimulationPoint.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TargetImpressionShareSimulationPointList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTargetImpressionShareSimulationPointList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.points.push(TargetImpressionShareSimulationPoint.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TargetImpressionShareSimulationPointList {
    return {
      points: globalThis.Array.isArray(object?.points)
        ? object.points.map((e: any) => TargetImpressionShareSimulationPoint.fromJSON(e))
        : [],
    };
  },

  toJSON(message: TargetImpressionShareSimulationPointList): unknown {
    const obj: any = {};
    if (message.points?.length) {
      obj.points = message.points.map((e) => TargetImpressionShareSimulationPoint.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<TargetImpressionShareSimulationPointList>): TargetImpressionShareSimulationPointList {
    return TargetImpressionShareSimulationPointList.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TargetImpressionShareSimulationPointList>): TargetImpressionShareSimulationPointList {
    const message = createBaseTargetImpressionShareSimulationPointList();
    message.points = object.points?.map((e) => TargetImpressionShareSimulationPoint.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCpcBidSimulationPoint(): CpcBidSimulationPoint {
  return {
    requiredBudgetAmountMicros: Long.ZERO,
    biddableConversions: undefined,
    biddableConversionsValue: undefined,
    clicks: undefined,
    costMicros: undefined,
    impressions: undefined,
    topSlotImpressions: undefined,
    cpcBidMicros: undefined,
    cpcBidScalingModifier: undefined,
  };
}

export const CpcBidSimulationPoint: MessageFns<CpcBidSimulationPoint> = {
  encode(message: CpcBidSimulationPoint, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.requiredBudgetAmountMicros.equals(Long.ZERO)) {
      writer.uint32(136).int64(message.requiredBudgetAmountMicros.toString());
    }
    if (message.biddableConversions !== undefined) {
      writer.uint32(73).double(message.biddableConversions);
    }
    if (message.biddableConversionsValue !== undefined) {
      writer.uint32(81).double(message.biddableConversionsValue);
    }
    if (message.clicks !== undefined) {
      writer.uint32(88).int64(message.clicks.toString());
    }
    if (message.costMicros !== undefined) {
      writer.uint32(96).int64(message.costMicros.toString());
    }
    if (message.impressions !== undefined) {
      writer.uint32(104).int64(message.impressions.toString());
    }
    if (message.topSlotImpressions !== undefined) {
      writer.uint32(112).int64(message.topSlotImpressions.toString());
    }
    if (message.cpcBidMicros !== undefined) {
      writer.uint32(120).int64(message.cpcBidMicros.toString());
    }
    if (message.cpcBidScalingModifier !== undefined) {
      writer.uint32(129).double(message.cpcBidScalingModifier);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CpcBidSimulationPoint {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCpcBidSimulationPoint();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 17:
          if (tag !== 136) {
            break;
          }

          message.requiredBudgetAmountMicros = Long.fromString(reader.int64().toString());
          continue;
        case 9:
          if (tag !== 73) {
            break;
          }

          message.biddableConversions = reader.double();
          continue;
        case 10:
          if (tag !== 81) {
            break;
          }

          message.biddableConversionsValue = reader.double();
          continue;
        case 11:
          if (tag !== 88) {
            break;
          }

          message.clicks = Long.fromString(reader.int64().toString());
          continue;
        case 12:
          if (tag !== 96) {
            break;
          }

          message.costMicros = Long.fromString(reader.int64().toString());
          continue;
        case 13:
          if (tag !== 104) {
            break;
          }

          message.impressions = Long.fromString(reader.int64().toString());
          continue;
        case 14:
          if (tag !== 112) {
            break;
          }

          message.topSlotImpressions = Long.fromString(reader.int64().toString());
          continue;
        case 15:
          if (tag !== 120) {
            break;
          }

          message.cpcBidMicros = Long.fromString(reader.int64().toString());
          continue;
        case 16:
          if (tag !== 129) {
            break;
          }

          message.cpcBidScalingModifier = reader.double();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CpcBidSimulationPoint {
    return {
      requiredBudgetAmountMicros: isSet(object.requiredBudgetAmountMicros)
        ? Long.fromValue(object.requiredBudgetAmountMicros)
        : Long.ZERO,
      biddableConversions: isSet(object.biddableConversions)
        ? globalThis.Number(object.biddableConversions)
        : undefined,
      biddableConversionsValue: isSet(object.biddableConversionsValue)
        ? globalThis.Number(object.biddableConversionsValue)
        : undefined,
      clicks: isSet(object.clicks) ? Long.fromValue(object.clicks) : undefined,
      costMicros: isSet(object.costMicros) ? Long.fromValue(object.costMicros) : undefined,
      impressions: isSet(object.impressions) ? Long.fromValue(object.impressions) : undefined,
      topSlotImpressions: isSet(object.topSlotImpressions) ? Long.fromValue(object.topSlotImpressions) : undefined,
      cpcBidMicros: isSet(object.cpcBidMicros) ? Long.fromValue(object.cpcBidMicros) : undefined,
      cpcBidScalingModifier: isSet(object.cpcBidScalingModifier)
        ? globalThis.Number(object.cpcBidScalingModifier)
        : undefined,
    };
  },

  toJSON(message: CpcBidSimulationPoint): unknown {
    const obj: any = {};
    if (!message.requiredBudgetAmountMicros.equals(Long.ZERO)) {
      obj.requiredBudgetAmountMicros = (message.requiredBudgetAmountMicros || Long.ZERO).toString();
    }
    if (message.biddableConversions !== undefined) {
      obj.biddableConversions = message.biddableConversions;
    }
    if (message.biddableConversionsValue !== undefined) {
      obj.biddableConversionsValue = message.biddableConversionsValue;
    }
    if (message.clicks !== undefined) {
      obj.clicks = (message.clicks || Long.ZERO).toString();
    }
    if (message.costMicros !== undefined) {
      obj.costMicros = (message.costMicros || Long.ZERO).toString();
    }
    if (message.impressions !== undefined) {
      obj.impressions = (message.impressions || Long.ZERO).toString();
    }
    if (message.topSlotImpressions !== undefined) {
      obj.topSlotImpressions = (message.topSlotImpressions || Long.ZERO).toString();
    }
    if (message.cpcBidMicros !== undefined) {
      obj.cpcBidMicros = (message.cpcBidMicros || Long.ZERO).toString();
    }
    if (message.cpcBidScalingModifier !== undefined) {
      obj.cpcBidScalingModifier = message.cpcBidScalingModifier;
    }
    return obj;
  },

  create(base?: DeepPartial<CpcBidSimulationPoint>): CpcBidSimulationPoint {
    return CpcBidSimulationPoint.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CpcBidSimulationPoint>): CpcBidSimulationPoint {
    const message = createBaseCpcBidSimulationPoint();
    message.requiredBudgetAmountMicros =
      (object.requiredBudgetAmountMicros !== undefined && object.requiredBudgetAmountMicros !== null)
        ? Long.fromValue(object.requiredBudgetAmountMicros)
        : Long.ZERO;
    message.biddableConversions = object.biddableConversions ?? undefined;
    message.biddableConversionsValue = object.biddableConversionsValue ?? undefined;
    message.clicks = (object.clicks !== undefined && object.clicks !== null)
      ? Long.fromValue(object.clicks)
      : undefined;
    message.costMicros = (object.costMicros !== undefined && object.costMicros !== null)
      ? Long.fromValue(object.costMicros)
      : undefined;
    message.impressions = (object.impressions !== undefined && object.impressions !== null)
      ? Long.fromValue(object.impressions)
      : undefined;
    message.topSlotImpressions = (object.topSlotImpressions !== undefined && object.topSlotImpressions !== null)
      ? Long.fromValue(object.topSlotImpressions)
      : undefined;
    message.cpcBidMicros = (object.cpcBidMicros !== undefined && object.cpcBidMicros !== null)
      ? Long.fromValue(object.cpcBidMicros)
      : undefined;
    message.cpcBidScalingModifier = object.cpcBidScalingModifier ?? undefined;
    return message;
  },
};

function createBaseCpvBidSimulationPoint(): CpvBidSimulationPoint {
  return { cpvBidMicros: undefined, costMicros: undefined, impressions: undefined, views: undefined };
}

export const CpvBidSimulationPoint: MessageFns<CpvBidSimulationPoint> = {
  encode(message: CpvBidSimulationPoint, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.cpvBidMicros !== undefined) {
      writer.uint32(40).int64(message.cpvBidMicros.toString());
    }
    if (message.costMicros !== undefined) {
      writer.uint32(48).int64(message.costMicros.toString());
    }
    if (message.impressions !== undefined) {
      writer.uint32(56).int64(message.impressions.toString());
    }
    if (message.views !== undefined) {
      writer.uint32(64).int64(message.views.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CpvBidSimulationPoint {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCpvBidSimulationPoint();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 5:
          if (tag !== 40) {
            break;
          }

          message.cpvBidMicros = Long.fromString(reader.int64().toString());
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.costMicros = Long.fromString(reader.int64().toString());
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.impressions = Long.fromString(reader.int64().toString());
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.views = Long.fromString(reader.int64().toString());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CpvBidSimulationPoint {
    return {
      cpvBidMicros: isSet(object.cpvBidMicros) ? Long.fromValue(object.cpvBidMicros) : undefined,
      costMicros: isSet(object.costMicros) ? Long.fromValue(object.costMicros) : undefined,
      impressions: isSet(object.impressions) ? Long.fromValue(object.impressions) : undefined,
      views: isSet(object.views) ? Long.fromValue(object.views) : undefined,
    };
  },

  toJSON(message: CpvBidSimulationPoint): unknown {
    const obj: any = {};
    if (message.cpvBidMicros !== undefined) {
      obj.cpvBidMicros = (message.cpvBidMicros || Long.ZERO).toString();
    }
    if (message.costMicros !== undefined) {
      obj.costMicros = (message.costMicros || Long.ZERO).toString();
    }
    if (message.impressions !== undefined) {
      obj.impressions = (message.impressions || Long.ZERO).toString();
    }
    if (message.views !== undefined) {
      obj.views = (message.views || Long.ZERO).toString();
    }
    return obj;
  },

  create(base?: DeepPartial<CpvBidSimulationPoint>): CpvBidSimulationPoint {
    return CpvBidSimulationPoint.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CpvBidSimulationPoint>): CpvBidSimulationPoint {
    const message = createBaseCpvBidSimulationPoint();
    message.cpvBidMicros = (object.cpvBidMicros !== undefined && object.cpvBidMicros !== null)
      ? Long.fromValue(object.cpvBidMicros)
      : undefined;
    message.costMicros = (object.costMicros !== undefined && object.costMicros !== null)
      ? Long.fromValue(object.costMicros)
      : undefined;
    message.impressions = (object.impressions !== undefined && object.impressions !== null)
      ? Long.fromValue(object.impressions)
      : undefined;
    message.views = (object.views !== undefined && object.views !== null) ? Long.fromValue(object.views) : undefined;
    return message;
  },
};

function createBaseTargetCpaSimulationPoint(): TargetCpaSimulationPoint {
  return {
    requiredBudgetAmountMicros: Long.ZERO,
    biddableConversions: undefined,
    biddableConversionsValue: undefined,
    appInstalls: 0,
    inAppActions: 0,
    clicks: undefined,
    costMicros: undefined,
    impressions: undefined,
    topSlotImpressions: undefined,
    interactions: undefined,
    targetCpaMicros: undefined,
    targetCpaScalingModifier: undefined,
  };
}

export const TargetCpaSimulationPoint: MessageFns<TargetCpaSimulationPoint> = {
  encode(message: TargetCpaSimulationPoint, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.requiredBudgetAmountMicros.equals(Long.ZERO)) {
      writer.uint32(152).int64(message.requiredBudgetAmountMicros.toString());
    }
    if (message.biddableConversions !== undefined) {
      writer.uint32(73).double(message.biddableConversions);
    }
    if (message.biddableConversionsValue !== undefined) {
      writer.uint32(81).double(message.biddableConversionsValue);
    }
    if (message.appInstalls !== 0) {
      writer.uint32(121).double(message.appInstalls);
    }
    if (message.inAppActions !== 0) {
      writer.uint32(129).double(message.inAppActions);
    }
    if (message.clicks !== undefined) {
      writer.uint32(88).int64(message.clicks.toString());
    }
    if (message.costMicros !== undefined) {
      writer.uint32(96).int64(message.costMicros.toString());
    }
    if (message.impressions !== undefined) {
      writer.uint32(104).int64(message.impressions.toString());
    }
    if (message.topSlotImpressions !== undefined) {
      writer.uint32(112).int64(message.topSlotImpressions.toString());
    }
    if (message.interactions !== undefined) {
      writer.uint32(160).int64(message.interactions.toString());
    }
    if (message.targetCpaMicros !== undefined) {
      writer.uint32(136).int64(message.targetCpaMicros.toString());
    }
    if (message.targetCpaScalingModifier !== undefined) {
      writer.uint32(145).double(message.targetCpaScalingModifier);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TargetCpaSimulationPoint {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTargetCpaSimulationPoint();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 19:
          if (tag !== 152) {
            break;
          }

          message.requiredBudgetAmountMicros = Long.fromString(reader.int64().toString());
          continue;
        case 9:
          if (tag !== 73) {
            break;
          }

          message.biddableConversions = reader.double();
          continue;
        case 10:
          if (tag !== 81) {
            break;
          }

          message.biddableConversionsValue = reader.double();
          continue;
        case 15:
          if (tag !== 121) {
            break;
          }

          message.appInstalls = reader.double();
          continue;
        case 16:
          if (tag !== 129) {
            break;
          }

          message.inAppActions = reader.double();
          continue;
        case 11:
          if (tag !== 88) {
            break;
          }

          message.clicks = Long.fromString(reader.int64().toString());
          continue;
        case 12:
          if (tag !== 96) {
            break;
          }

          message.costMicros = Long.fromString(reader.int64().toString());
          continue;
        case 13:
          if (tag !== 104) {
            break;
          }

          message.impressions = Long.fromString(reader.int64().toString());
          continue;
        case 14:
          if (tag !== 112) {
            break;
          }

          message.topSlotImpressions = Long.fromString(reader.int64().toString());
          continue;
        case 20:
          if (tag !== 160) {
            break;
          }

          message.interactions = Long.fromString(reader.int64().toString());
          continue;
        case 17:
          if (tag !== 136) {
            break;
          }

          message.targetCpaMicros = Long.fromString(reader.int64().toString());
          continue;
        case 18:
          if (tag !== 145) {
            break;
          }

          message.targetCpaScalingModifier = reader.double();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TargetCpaSimulationPoint {
    return {
      requiredBudgetAmountMicros: isSet(object.requiredBudgetAmountMicros)
        ? Long.fromValue(object.requiredBudgetAmountMicros)
        : Long.ZERO,
      biddableConversions: isSet(object.biddableConversions)
        ? globalThis.Number(object.biddableConversions)
        : undefined,
      biddableConversionsValue: isSet(object.biddableConversionsValue)
        ? globalThis.Number(object.biddableConversionsValue)
        : undefined,
      appInstalls: isSet(object.appInstalls) ? globalThis.Number(object.appInstalls) : 0,
      inAppActions: isSet(object.inAppActions) ? globalThis.Number(object.inAppActions) : 0,
      clicks: isSet(object.clicks) ? Long.fromValue(object.clicks) : undefined,
      costMicros: isSet(object.costMicros) ? Long.fromValue(object.costMicros) : undefined,
      impressions: isSet(object.impressions) ? Long.fromValue(object.impressions) : undefined,
      topSlotImpressions: isSet(object.topSlotImpressions) ? Long.fromValue(object.topSlotImpressions) : undefined,
      interactions: isSet(object.interactions) ? Long.fromValue(object.interactions) : undefined,
      targetCpaMicros: isSet(object.targetCpaMicros) ? Long.fromValue(object.targetCpaMicros) : undefined,
      targetCpaScalingModifier: isSet(object.targetCpaScalingModifier)
        ? globalThis.Number(object.targetCpaScalingModifier)
        : undefined,
    };
  },

  toJSON(message: TargetCpaSimulationPoint): unknown {
    const obj: any = {};
    if (!message.requiredBudgetAmountMicros.equals(Long.ZERO)) {
      obj.requiredBudgetAmountMicros = (message.requiredBudgetAmountMicros || Long.ZERO).toString();
    }
    if (message.biddableConversions !== undefined) {
      obj.biddableConversions = message.biddableConversions;
    }
    if (message.biddableConversionsValue !== undefined) {
      obj.biddableConversionsValue = message.biddableConversionsValue;
    }
    if (message.appInstalls !== 0) {
      obj.appInstalls = message.appInstalls;
    }
    if (message.inAppActions !== 0) {
      obj.inAppActions = message.inAppActions;
    }
    if (message.clicks !== undefined) {
      obj.clicks = (message.clicks || Long.ZERO).toString();
    }
    if (message.costMicros !== undefined) {
      obj.costMicros = (message.costMicros || Long.ZERO).toString();
    }
    if (message.impressions !== undefined) {
      obj.impressions = (message.impressions || Long.ZERO).toString();
    }
    if (message.topSlotImpressions !== undefined) {
      obj.topSlotImpressions = (message.topSlotImpressions || Long.ZERO).toString();
    }
    if (message.interactions !== undefined) {
      obj.interactions = (message.interactions || Long.ZERO).toString();
    }
    if (message.targetCpaMicros !== undefined) {
      obj.targetCpaMicros = (message.targetCpaMicros || Long.ZERO).toString();
    }
    if (message.targetCpaScalingModifier !== undefined) {
      obj.targetCpaScalingModifier = message.targetCpaScalingModifier;
    }
    return obj;
  },

  create(base?: DeepPartial<TargetCpaSimulationPoint>): TargetCpaSimulationPoint {
    return TargetCpaSimulationPoint.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TargetCpaSimulationPoint>): TargetCpaSimulationPoint {
    const message = createBaseTargetCpaSimulationPoint();
    message.requiredBudgetAmountMicros =
      (object.requiredBudgetAmountMicros !== undefined && object.requiredBudgetAmountMicros !== null)
        ? Long.fromValue(object.requiredBudgetAmountMicros)
        : Long.ZERO;
    message.biddableConversions = object.biddableConversions ?? undefined;
    message.biddableConversionsValue = object.biddableConversionsValue ?? undefined;
    message.appInstalls = object.appInstalls ?? 0;
    message.inAppActions = object.inAppActions ?? 0;
    message.clicks = (object.clicks !== undefined && object.clicks !== null)
      ? Long.fromValue(object.clicks)
      : undefined;
    message.costMicros = (object.costMicros !== undefined && object.costMicros !== null)
      ? Long.fromValue(object.costMicros)
      : undefined;
    message.impressions = (object.impressions !== undefined && object.impressions !== null)
      ? Long.fromValue(object.impressions)
      : undefined;
    message.topSlotImpressions = (object.topSlotImpressions !== undefined && object.topSlotImpressions !== null)
      ? Long.fromValue(object.topSlotImpressions)
      : undefined;
    message.interactions = (object.interactions !== undefined && object.interactions !== null)
      ? Long.fromValue(object.interactions)
      : undefined;
    message.targetCpaMicros = (object.targetCpaMicros !== undefined && object.targetCpaMicros !== null)
      ? Long.fromValue(object.targetCpaMicros)
      : undefined;
    message.targetCpaScalingModifier = object.targetCpaScalingModifier ?? undefined;
    return message;
  },
};

function createBaseTargetRoasSimulationPoint(): TargetRoasSimulationPoint {
  return {
    targetRoas: undefined,
    requiredBudgetAmountMicros: Long.ZERO,
    biddableConversions: undefined,
    biddableConversionsValue: undefined,
    clicks: undefined,
    costMicros: undefined,
    impressions: undefined,
    topSlotImpressions: undefined,
  };
}

export const TargetRoasSimulationPoint: MessageFns<TargetRoasSimulationPoint> = {
  encode(message: TargetRoasSimulationPoint, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.targetRoas !== undefined) {
      writer.uint32(65).double(message.targetRoas);
    }
    if (!message.requiredBudgetAmountMicros.equals(Long.ZERO)) {
      writer.uint32(120).int64(message.requiredBudgetAmountMicros.toString());
    }
    if (message.biddableConversions !== undefined) {
      writer.uint32(73).double(message.biddableConversions);
    }
    if (message.biddableConversionsValue !== undefined) {
      writer.uint32(81).double(message.biddableConversionsValue);
    }
    if (message.clicks !== undefined) {
      writer.uint32(88).int64(message.clicks.toString());
    }
    if (message.costMicros !== undefined) {
      writer.uint32(96).int64(message.costMicros.toString());
    }
    if (message.impressions !== undefined) {
      writer.uint32(104).int64(message.impressions.toString());
    }
    if (message.topSlotImpressions !== undefined) {
      writer.uint32(112).int64(message.topSlotImpressions.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TargetRoasSimulationPoint {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTargetRoasSimulationPoint();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 8:
          if (tag !== 65) {
            break;
          }

          message.targetRoas = reader.double();
          continue;
        case 15:
          if (tag !== 120) {
            break;
          }

          message.requiredBudgetAmountMicros = Long.fromString(reader.int64().toString());
          continue;
        case 9:
          if (tag !== 73) {
            break;
          }

          message.biddableConversions = reader.double();
          continue;
        case 10:
          if (tag !== 81) {
            break;
          }

          message.biddableConversionsValue = reader.double();
          continue;
        case 11:
          if (tag !== 88) {
            break;
          }

          message.clicks = Long.fromString(reader.int64().toString());
          continue;
        case 12:
          if (tag !== 96) {
            break;
          }

          message.costMicros = Long.fromString(reader.int64().toString());
          continue;
        case 13:
          if (tag !== 104) {
            break;
          }

          message.impressions = Long.fromString(reader.int64().toString());
          continue;
        case 14:
          if (tag !== 112) {
            break;
          }

          message.topSlotImpressions = Long.fromString(reader.int64().toString());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TargetRoasSimulationPoint {
    return {
      targetRoas: isSet(object.targetRoas) ? globalThis.Number(object.targetRoas) : undefined,
      requiredBudgetAmountMicros: isSet(object.requiredBudgetAmountMicros)
        ? Long.fromValue(object.requiredBudgetAmountMicros)
        : Long.ZERO,
      biddableConversions: isSet(object.biddableConversions)
        ? globalThis.Number(object.biddableConversions)
        : undefined,
      biddableConversionsValue: isSet(object.biddableConversionsValue)
        ? globalThis.Number(object.biddableConversionsValue)
        : undefined,
      clicks: isSet(object.clicks) ? Long.fromValue(object.clicks) : undefined,
      costMicros: isSet(object.costMicros) ? Long.fromValue(object.costMicros) : undefined,
      impressions: isSet(object.impressions) ? Long.fromValue(object.impressions) : undefined,
      topSlotImpressions: isSet(object.topSlotImpressions) ? Long.fromValue(object.topSlotImpressions) : undefined,
    };
  },

  toJSON(message: TargetRoasSimulationPoint): unknown {
    const obj: any = {};
    if (message.targetRoas !== undefined) {
      obj.targetRoas = message.targetRoas;
    }
    if (!message.requiredBudgetAmountMicros.equals(Long.ZERO)) {
      obj.requiredBudgetAmountMicros = (message.requiredBudgetAmountMicros || Long.ZERO).toString();
    }
    if (message.biddableConversions !== undefined) {
      obj.biddableConversions = message.biddableConversions;
    }
    if (message.biddableConversionsValue !== undefined) {
      obj.biddableConversionsValue = message.biddableConversionsValue;
    }
    if (message.clicks !== undefined) {
      obj.clicks = (message.clicks || Long.ZERO).toString();
    }
    if (message.costMicros !== undefined) {
      obj.costMicros = (message.costMicros || Long.ZERO).toString();
    }
    if (message.impressions !== undefined) {
      obj.impressions = (message.impressions || Long.ZERO).toString();
    }
    if (message.topSlotImpressions !== undefined) {
      obj.topSlotImpressions = (message.topSlotImpressions || Long.ZERO).toString();
    }
    return obj;
  },

  create(base?: DeepPartial<TargetRoasSimulationPoint>): TargetRoasSimulationPoint {
    return TargetRoasSimulationPoint.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TargetRoasSimulationPoint>): TargetRoasSimulationPoint {
    const message = createBaseTargetRoasSimulationPoint();
    message.targetRoas = object.targetRoas ?? undefined;
    message.requiredBudgetAmountMicros =
      (object.requiredBudgetAmountMicros !== undefined && object.requiredBudgetAmountMicros !== null)
        ? Long.fromValue(object.requiredBudgetAmountMicros)
        : Long.ZERO;
    message.biddableConversions = object.biddableConversions ?? undefined;
    message.biddableConversionsValue = object.biddableConversionsValue ?? undefined;
    message.clicks = (object.clicks !== undefined && object.clicks !== null)
      ? Long.fromValue(object.clicks)
      : undefined;
    message.costMicros = (object.costMicros !== undefined && object.costMicros !== null)
      ? Long.fromValue(object.costMicros)
      : undefined;
    message.impressions = (object.impressions !== undefined && object.impressions !== null)
      ? Long.fromValue(object.impressions)
      : undefined;
    message.topSlotImpressions = (object.topSlotImpressions !== undefined && object.topSlotImpressions !== null)
      ? Long.fromValue(object.topSlotImpressions)
      : undefined;
    return message;
  },
};

function createBasePercentCpcBidSimulationPoint(): PercentCpcBidSimulationPoint {
  return {
    percentCpcBidMicros: undefined,
    biddableConversions: undefined,
    biddableConversionsValue: undefined,
    clicks: undefined,
    costMicros: undefined,
    impressions: undefined,
    topSlotImpressions: undefined,
  };
}

export const PercentCpcBidSimulationPoint: MessageFns<PercentCpcBidSimulationPoint> = {
  encode(message: PercentCpcBidSimulationPoint, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.percentCpcBidMicros !== undefined) {
      writer.uint32(8).int64(message.percentCpcBidMicros.toString());
    }
    if (message.biddableConversions !== undefined) {
      writer.uint32(17).double(message.biddableConversions);
    }
    if (message.biddableConversionsValue !== undefined) {
      writer.uint32(25).double(message.biddableConversionsValue);
    }
    if (message.clicks !== undefined) {
      writer.uint32(32).int64(message.clicks.toString());
    }
    if (message.costMicros !== undefined) {
      writer.uint32(40).int64(message.costMicros.toString());
    }
    if (message.impressions !== undefined) {
      writer.uint32(48).int64(message.impressions.toString());
    }
    if (message.topSlotImpressions !== undefined) {
      writer.uint32(56).int64(message.topSlotImpressions.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PercentCpcBidSimulationPoint {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePercentCpcBidSimulationPoint();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.percentCpcBidMicros = Long.fromString(reader.int64().toString());
          continue;
        case 2:
          if (tag !== 17) {
            break;
          }

          message.biddableConversions = reader.double();
          continue;
        case 3:
          if (tag !== 25) {
            break;
          }

          message.biddableConversionsValue = reader.double();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.clicks = Long.fromString(reader.int64().toString());
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.costMicros = Long.fromString(reader.int64().toString());
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.impressions = Long.fromString(reader.int64().toString());
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.topSlotImpressions = Long.fromString(reader.int64().toString());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PercentCpcBidSimulationPoint {
    return {
      percentCpcBidMicros: isSet(object.percentCpcBidMicros) ? Long.fromValue(object.percentCpcBidMicros) : undefined,
      biddableConversions: isSet(object.biddableConversions)
        ? globalThis.Number(object.biddableConversions)
        : undefined,
      biddableConversionsValue: isSet(object.biddableConversionsValue)
        ? globalThis.Number(object.biddableConversionsValue)
        : undefined,
      clicks: isSet(object.clicks) ? Long.fromValue(object.clicks) : undefined,
      costMicros: isSet(object.costMicros) ? Long.fromValue(object.costMicros) : undefined,
      impressions: isSet(object.impressions) ? Long.fromValue(object.impressions) : undefined,
      topSlotImpressions: isSet(object.topSlotImpressions) ? Long.fromValue(object.topSlotImpressions) : undefined,
    };
  },

  toJSON(message: PercentCpcBidSimulationPoint): unknown {
    const obj: any = {};
    if (message.percentCpcBidMicros !== undefined) {
      obj.percentCpcBidMicros = (message.percentCpcBidMicros || Long.ZERO).toString();
    }
    if (message.biddableConversions !== undefined) {
      obj.biddableConversions = message.biddableConversions;
    }
    if (message.biddableConversionsValue !== undefined) {
      obj.biddableConversionsValue = message.biddableConversionsValue;
    }
    if (message.clicks !== undefined) {
      obj.clicks = (message.clicks || Long.ZERO).toString();
    }
    if (message.costMicros !== undefined) {
      obj.costMicros = (message.costMicros || Long.ZERO).toString();
    }
    if (message.impressions !== undefined) {
      obj.impressions = (message.impressions || Long.ZERO).toString();
    }
    if (message.topSlotImpressions !== undefined) {
      obj.topSlotImpressions = (message.topSlotImpressions || Long.ZERO).toString();
    }
    return obj;
  },

  create(base?: DeepPartial<PercentCpcBidSimulationPoint>): PercentCpcBidSimulationPoint {
    return PercentCpcBidSimulationPoint.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PercentCpcBidSimulationPoint>): PercentCpcBidSimulationPoint {
    const message = createBasePercentCpcBidSimulationPoint();
    message.percentCpcBidMicros = (object.percentCpcBidMicros !== undefined && object.percentCpcBidMicros !== null)
      ? Long.fromValue(object.percentCpcBidMicros)
      : undefined;
    message.biddableConversions = object.biddableConversions ?? undefined;
    message.biddableConversionsValue = object.biddableConversionsValue ?? undefined;
    message.clicks = (object.clicks !== undefined && object.clicks !== null)
      ? Long.fromValue(object.clicks)
      : undefined;
    message.costMicros = (object.costMicros !== undefined && object.costMicros !== null)
      ? Long.fromValue(object.costMicros)
      : undefined;
    message.impressions = (object.impressions !== undefined && object.impressions !== null)
      ? Long.fromValue(object.impressions)
      : undefined;
    message.topSlotImpressions = (object.topSlotImpressions !== undefined && object.topSlotImpressions !== null)
      ? Long.fromValue(object.topSlotImpressions)
      : undefined;
    return message;
  },
};

function createBaseBudgetSimulationPoint(): BudgetSimulationPoint {
  return {
    budgetAmountMicros: Long.ZERO,
    requiredCpcBidCeilingMicros: Long.ZERO,
    biddableConversions: 0,
    biddableConversionsValue: 0,
    clicks: Long.ZERO,
    costMicros: Long.ZERO,
    impressions: Long.ZERO,
    topSlotImpressions: Long.ZERO,
    interactions: Long.ZERO,
  };
}

export const BudgetSimulationPoint: MessageFns<BudgetSimulationPoint> = {
  encode(message: BudgetSimulationPoint, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.budgetAmountMicros.equals(Long.ZERO)) {
      writer.uint32(8).int64(message.budgetAmountMicros.toString());
    }
    if (!message.requiredCpcBidCeilingMicros.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.requiredCpcBidCeilingMicros.toString());
    }
    if (message.biddableConversions !== 0) {
      writer.uint32(25).double(message.biddableConversions);
    }
    if (message.biddableConversionsValue !== 0) {
      writer.uint32(33).double(message.biddableConversionsValue);
    }
    if (!message.clicks.equals(Long.ZERO)) {
      writer.uint32(40).int64(message.clicks.toString());
    }
    if (!message.costMicros.equals(Long.ZERO)) {
      writer.uint32(48).int64(message.costMicros.toString());
    }
    if (!message.impressions.equals(Long.ZERO)) {
      writer.uint32(56).int64(message.impressions.toString());
    }
    if (!message.topSlotImpressions.equals(Long.ZERO)) {
      writer.uint32(64).int64(message.topSlotImpressions.toString());
    }
    if (!message.interactions.equals(Long.ZERO)) {
      writer.uint32(72).int64(message.interactions.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BudgetSimulationPoint {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBudgetSimulationPoint();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.budgetAmountMicros = Long.fromString(reader.int64().toString());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.requiredCpcBidCeilingMicros = Long.fromString(reader.int64().toString());
          continue;
        case 3:
          if (tag !== 25) {
            break;
          }

          message.biddableConversions = reader.double();
          continue;
        case 4:
          if (tag !== 33) {
            break;
          }

          message.biddableConversionsValue = reader.double();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.clicks = Long.fromString(reader.int64().toString());
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.costMicros = Long.fromString(reader.int64().toString());
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.impressions = Long.fromString(reader.int64().toString());
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.topSlotImpressions = Long.fromString(reader.int64().toString());
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.interactions = Long.fromString(reader.int64().toString());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BudgetSimulationPoint {
    return {
      budgetAmountMicros: isSet(object.budgetAmountMicros) ? Long.fromValue(object.budgetAmountMicros) : Long.ZERO,
      requiredCpcBidCeilingMicros: isSet(object.requiredCpcBidCeilingMicros)
        ? Long.fromValue(object.requiredCpcBidCeilingMicros)
        : Long.ZERO,
      biddableConversions: isSet(object.biddableConversions) ? globalThis.Number(object.biddableConversions) : 0,
      biddableConversionsValue: isSet(object.biddableConversionsValue)
        ? globalThis.Number(object.biddableConversionsValue)
        : 0,
      clicks: isSet(object.clicks) ? Long.fromValue(object.clicks) : Long.ZERO,
      costMicros: isSet(object.costMicros) ? Long.fromValue(object.costMicros) : Long.ZERO,
      impressions: isSet(object.impressions) ? Long.fromValue(object.impressions) : Long.ZERO,
      topSlotImpressions: isSet(object.topSlotImpressions) ? Long.fromValue(object.topSlotImpressions) : Long.ZERO,
      interactions: isSet(object.interactions) ? Long.fromValue(object.interactions) : Long.ZERO,
    };
  },

  toJSON(message: BudgetSimulationPoint): unknown {
    const obj: any = {};
    if (!message.budgetAmountMicros.equals(Long.ZERO)) {
      obj.budgetAmountMicros = (message.budgetAmountMicros || Long.ZERO).toString();
    }
    if (!message.requiredCpcBidCeilingMicros.equals(Long.ZERO)) {
      obj.requiredCpcBidCeilingMicros = (message.requiredCpcBidCeilingMicros || Long.ZERO).toString();
    }
    if (message.biddableConversions !== 0) {
      obj.biddableConversions = message.biddableConversions;
    }
    if (message.biddableConversionsValue !== 0) {
      obj.biddableConversionsValue = message.biddableConversionsValue;
    }
    if (!message.clicks.equals(Long.ZERO)) {
      obj.clicks = (message.clicks || Long.ZERO).toString();
    }
    if (!message.costMicros.equals(Long.ZERO)) {
      obj.costMicros = (message.costMicros || Long.ZERO).toString();
    }
    if (!message.impressions.equals(Long.ZERO)) {
      obj.impressions = (message.impressions || Long.ZERO).toString();
    }
    if (!message.topSlotImpressions.equals(Long.ZERO)) {
      obj.topSlotImpressions = (message.topSlotImpressions || Long.ZERO).toString();
    }
    if (!message.interactions.equals(Long.ZERO)) {
      obj.interactions = (message.interactions || Long.ZERO).toString();
    }
    return obj;
  },

  create(base?: DeepPartial<BudgetSimulationPoint>): BudgetSimulationPoint {
    return BudgetSimulationPoint.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BudgetSimulationPoint>): BudgetSimulationPoint {
    const message = createBaseBudgetSimulationPoint();
    message.budgetAmountMicros = (object.budgetAmountMicros !== undefined && object.budgetAmountMicros !== null)
      ? Long.fromValue(object.budgetAmountMicros)
      : Long.ZERO;
    message.requiredCpcBidCeilingMicros =
      (object.requiredCpcBidCeilingMicros !== undefined && object.requiredCpcBidCeilingMicros !== null)
        ? Long.fromValue(object.requiredCpcBidCeilingMicros)
        : Long.ZERO;
    message.biddableConversions = object.biddableConversions ?? 0;
    message.biddableConversionsValue = object.biddableConversionsValue ?? 0;
    message.clicks = (object.clicks !== undefined && object.clicks !== null)
      ? Long.fromValue(object.clicks)
      : Long.ZERO;
    message.costMicros = (object.costMicros !== undefined && object.costMicros !== null)
      ? Long.fromValue(object.costMicros)
      : Long.ZERO;
    message.impressions = (object.impressions !== undefined && object.impressions !== null)
      ? Long.fromValue(object.impressions)
      : Long.ZERO;
    message.topSlotImpressions = (object.topSlotImpressions !== undefined && object.topSlotImpressions !== null)
      ? Long.fromValue(object.topSlotImpressions)
      : Long.ZERO;
    message.interactions = (object.interactions !== undefined && object.interactions !== null)
      ? Long.fromValue(object.interactions)
      : Long.ZERO;
    return message;
  },
};

function createBaseTargetImpressionShareSimulationPoint(): TargetImpressionShareSimulationPoint {
  return {
    targetImpressionShareMicros: Long.ZERO,
    requiredCpcBidCeilingMicros: Long.ZERO,
    requiredBudgetAmountMicros: Long.ZERO,
    biddableConversions: 0,
    biddableConversionsValue: 0,
    clicks: Long.ZERO,
    costMicros: Long.ZERO,
    impressions: Long.ZERO,
    topSlotImpressions: Long.ZERO,
    absoluteTopImpressions: Long.ZERO,
  };
}

export const TargetImpressionShareSimulationPoint: MessageFns<TargetImpressionShareSimulationPoint> = {
  encode(message: TargetImpressionShareSimulationPoint, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.targetImpressionShareMicros.equals(Long.ZERO)) {
      writer.uint32(8).int64(message.targetImpressionShareMicros.toString());
    }
    if (!message.requiredCpcBidCeilingMicros.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.requiredCpcBidCeilingMicros.toString());
    }
    if (!message.requiredBudgetAmountMicros.equals(Long.ZERO)) {
      writer.uint32(24).int64(message.requiredBudgetAmountMicros.toString());
    }
    if (message.biddableConversions !== 0) {
      writer.uint32(33).double(message.biddableConversions);
    }
    if (message.biddableConversionsValue !== 0) {
      writer.uint32(41).double(message.biddableConversionsValue);
    }
    if (!message.clicks.equals(Long.ZERO)) {
      writer.uint32(48).int64(message.clicks.toString());
    }
    if (!message.costMicros.equals(Long.ZERO)) {
      writer.uint32(56).int64(message.costMicros.toString());
    }
    if (!message.impressions.equals(Long.ZERO)) {
      writer.uint32(64).int64(message.impressions.toString());
    }
    if (!message.topSlotImpressions.equals(Long.ZERO)) {
      writer.uint32(72).int64(message.topSlotImpressions.toString());
    }
    if (!message.absoluteTopImpressions.equals(Long.ZERO)) {
      writer.uint32(80).int64(message.absoluteTopImpressions.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TargetImpressionShareSimulationPoint {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTargetImpressionShareSimulationPoint();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.targetImpressionShareMicros = Long.fromString(reader.int64().toString());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.requiredCpcBidCeilingMicros = Long.fromString(reader.int64().toString());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.requiredBudgetAmountMicros = Long.fromString(reader.int64().toString());
          continue;
        case 4:
          if (tag !== 33) {
            break;
          }

          message.biddableConversions = reader.double();
          continue;
        case 5:
          if (tag !== 41) {
            break;
          }

          message.biddableConversionsValue = reader.double();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.clicks = Long.fromString(reader.int64().toString());
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.costMicros = Long.fromString(reader.int64().toString());
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.impressions = Long.fromString(reader.int64().toString());
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.topSlotImpressions = Long.fromString(reader.int64().toString());
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.absoluteTopImpressions = Long.fromString(reader.int64().toString());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TargetImpressionShareSimulationPoint {
    return {
      targetImpressionShareMicros: isSet(object.targetImpressionShareMicros)
        ? Long.fromValue(object.targetImpressionShareMicros)
        : Long.ZERO,
      requiredCpcBidCeilingMicros: isSet(object.requiredCpcBidCeilingMicros)
        ? Long.fromValue(object.requiredCpcBidCeilingMicros)
        : Long.ZERO,
      requiredBudgetAmountMicros: isSet(object.requiredBudgetAmountMicros)
        ? Long.fromValue(object.requiredBudgetAmountMicros)
        : Long.ZERO,
      biddableConversions: isSet(object.biddableConversions) ? globalThis.Number(object.biddableConversions) : 0,
      biddableConversionsValue: isSet(object.biddableConversionsValue)
        ? globalThis.Number(object.biddableConversionsValue)
        : 0,
      clicks: isSet(object.clicks) ? Long.fromValue(object.clicks) : Long.ZERO,
      costMicros: isSet(object.costMicros) ? Long.fromValue(object.costMicros) : Long.ZERO,
      impressions: isSet(object.impressions) ? Long.fromValue(object.impressions) : Long.ZERO,
      topSlotImpressions: isSet(object.topSlotImpressions) ? Long.fromValue(object.topSlotImpressions) : Long.ZERO,
      absoluteTopImpressions: isSet(object.absoluteTopImpressions)
        ? Long.fromValue(object.absoluteTopImpressions)
        : Long.ZERO,
    };
  },

  toJSON(message: TargetImpressionShareSimulationPoint): unknown {
    const obj: any = {};
    if (!message.targetImpressionShareMicros.equals(Long.ZERO)) {
      obj.targetImpressionShareMicros = (message.targetImpressionShareMicros || Long.ZERO).toString();
    }
    if (!message.requiredCpcBidCeilingMicros.equals(Long.ZERO)) {
      obj.requiredCpcBidCeilingMicros = (message.requiredCpcBidCeilingMicros || Long.ZERO).toString();
    }
    if (!message.requiredBudgetAmountMicros.equals(Long.ZERO)) {
      obj.requiredBudgetAmountMicros = (message.requiredBudgetAmountMicros || Long.ZERO).toString();
    }
    if (message.biddableConversions !== 0) {
      obj.biddableConversions = message.biddableConversions;
    }
    if (message.biddableConversionsValue !== 0) {
      obj.biddableConversionsValue = message.biddableConversionsValue;
    }
    if (!message.clicks.equals(Long.ZERO)) {
      obj.clicks = (message.clicks || Long.ZERO).toString();
    }
    if (!message.costMicros.equals(Long.ZERO)) {
      obj.costMicros = (message.costMicros || Long.ZERO).toString();
    }
    if (!message.impressions.equals(Long.ZERO)) {
      obj.impressions = (message.impressions || Long.ZERO).toString();
    }
    if (!message.topSlotImpressions.equals(Long.ZERO)) {
      obj.topSlotImpressions = (message.topSlotImpressions || Long.ZERO).toString();
    }
    if (!message.absoluteTopImpressions.equals(Long.ZERO)) {
      obj.absoluteTopImpressions = (message.absoluteTopImpressions || Long.ZERO).toString();
    }
    return obj;
  },

  create(base?: DeepPartial<TargetImpressionShareSimulationPoint>): TargetImpressionShareSimulationPoint {
    return TargetImpressionShareSimulationPoint.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TargetImpressionShareSimulationPoint>): TargetImpressionShareSimulationPoint {
    const message = createBaseTargetImpressionShareSimulationPoint();
    message.targetImpressionShareMicros =
      (object.targetImpressionShareMicros !== undefined && object.targetImpressionShareMicros !== null)
        ? Long.fromValue(object.targetImpressionShareMicros)
        : Long.ZERO;
    message.requiredCpcBidCeilingMicros =
      (object.requiredCpcBidCeilingMicros !== undefined && object.requiredCpcBidCeilingMicros !== null)
        ? Long.fromValue(object.requiredCpcBidCeilingMicros)
        : Long.ZERO;
    message.requiredBudgetAmountMicros =
      (object.requiredBudgetAmountMicros !== undefined && object.requiredBudgetAmountMicros !== null)
        ? Long.fromValue(object.requiredBudgetAmountMicros)
        : Long.ZERO;
    message.biddableConversions = object.biddableConversions ?? 0;
    message.biddableConversionsValue = object.biddableConversionsValue ?? 0;
    message.clicks = (object.clicks !== undefined && object.clicks !== null)
      ? Long.fromValue(object.clicks)
      : Long.ZERO;
    message.costMicros = (object.costMicros !== undefined && object.costMicros !== null)
      ? Long.fromValue(object.costMicros)
      : Long.ZERO;
    message.impressions = (object.impressions !== undefined && object.impressions !== null)
      ? Long.fromValue(object.impressions)
      : Long.ZERO;
    message.topSlotImpressions = (object.topSlotImpressions !== undefined && object.topSlotImpressions !== null)
      ? Long.fromValue(object.topSlotImpressions)
      : Long.ZERO;
    message.absoluteTopImpressions =
      (object.absoluteTopImpressions !== undefined && object.absoluteTopImpressions !== null)
        ? Long.fromValue(object.absoluteTopImpressions)
        : Long.ZERO;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
