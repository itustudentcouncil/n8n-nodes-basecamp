// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v16/common/policy_summary.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import {
  PolicyApprovalStatusEnum_PolicyApprovalStatus,
  policyApprovalStatusEnum_PolicyApprovalStatusFromJSON,
  policyApprovalStatusEnum_PolicyApprovalStatusToJSON,
} from "../enums/policy_approval_status.js";
import {
  PolicyReviewStatusEnum_PolicyReviewStatus,
  policyReviewStatusEnum_PolicyReviewStatusFromJSON,
  policyReviewStatusEnum_PolicyReviewStatusToJSON,
} from "../enums/policy_review_status.js";
import { PolicyTopicEntry } from "./policy.js";

export const protobufPackage = "google.ads.googleads.v16.common";

/** Contains policy summary information. */
export interface PolicySummary {
  /** The list of policy findings. */
  policyTopicEntries: PolicyTopicEntry[];
  /** Where in the review process the resource is. */
  reviewStatus: PolicyReviewStatusEnum_PolicyReviewStatus;
  /**
   * The overall approval status, which is calculated based on
   * the status of its individual policy topic entries.
   */
  approvalStatus: PolicyApprovalStatusEnum_PolicyApprovalStatus;
}

function createBasePolicySummary(): PolicySummary {
  return { policyTopicEntries: [], reviewStatus: 0, approvalStatus: 0 };
}

export const PolicySummary: MessageFns<PolicySummary> = {
  encode(message: PolicySummary, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.policyTopicEntries) {
      PolicyTopicEntry.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.reviewStatus !== 0) {
      writer.uint32(16).int32(message.reviewStatus);
    }
    if (message.approvalStatus !== 0) {
      writer.uint32(24).int32(message.approvalStatus);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PolicySummary {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePolicySummary();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.policyTopicEntries.push(PolicyTopicEntry.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.reviewStatus = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.approvalStatus = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PolicySummary {
    return {
      policyTopicEntries: globalThis.Array.isArray(object?.policyTopicEntries)
        ? object.policyTopicEntries.map((e: any) => PolicyTopicEntry.fromJSON(e))
        : [],
      reviewStatus: isSet(object.reviewStatus)
        ? policyReviewStatusEnum_PolicyReviewStatusFromJSON(object.reviewStatus)
        : 0,
      approvalStatus: isSet(object.approvalStatus)
        ? policyApprovalStatusEnum_PolicyApprovalStatusFromJSON(object.approvalStatus)
        : 0,
    };
  },

  toJSON(message: PolicySummary): unknown {
    const obj: any = {};
    if (message.policyTopicEntries?.length) {
      obj.policyTopicEntries = message.policyTopicEntries.map((e) => PolicyTopicEntry.toJSON(e));
    }
    if (message.reviewStatus !== 0) {
      obj.reviewStatus = policyReviewStatusEnum_PolicyReviewStatusToJSON(message.reviewStatus);
    }
    if (message.approvalStatus !== 0) {
      obj.approvalStatus = policyApprovalStatusEnum_PolicyApprovalStatusToJSON(message.approvalStatus);
    }
    return obj;
  },

  create(base?: DeepPartial<PolicySummary>): PolicySummary {
    return PolicySummary.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PolicySummary>): PolicySummary {
    const message = createBasePolicySummary();
    message.policyTopicEntries = object.policyTopicEntries?.map((e) => PolicyTopicEntry.fromPartial(e)) || [];
    message.reviewStatus = object.reviewStatus ?? 0;
    message.approvalStatus = object.approvalStatus ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
