// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v16/common/ad_asset.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import {
  AssetPerformanceLabelEnum_AssetPerformanceLabel,
  assetPerformanceLabelEnum_AssetPerformanceLabelFromJSON,
  assetPerformanceLabelEnum_AssetPerformanceLabelToJSON,
} from "../enums/asset_performance_label.js";
import {
  ServedAssetFieldTypeEnum_ServedAssetFieldType,
  servedAssetFieldTypeEnum_ServedAssetFieldTypeFromJSON,
  servedAssetFieldTypeEnum_ServedAssetFieldTypeToJSON,
} from "../enums/served_asset_field_type.js";
import { AdAssetPolicySummary } from "./asset_policy.js";

export const protobufPackage = "google.ads.googleads.v16.common";

/** A text asset used inside an ad. */
export interface AdTextAsset {
  /** Asset text. */
  text?:
    | string
    | undefined;
  /**
   * The pinned field of the asset. This restricts the asset to only serve
   * within this field. Multiple assets can be pinned to the same field. An
   * asset that is unpinned or pinned to a different field will not serve in a
   * field where some other asset has been pinned.
   */
  pinnedField: ServedAssetFieldTypeEnum_ServedAssetFieldType;
  /** The performance label of this text asset. */
  assetPerformanceLabel: AssetPerformanceLabelEnum_AssetPerformanceLabel;
  /** The policy summary of this text asset. */
  policySummaryInfo: AdAssetPolicySummary | undefined;
}

/** An image asset used inside an ad. */
export interface AdImageAsset {
  /** The Asset resource name of this image. */
  asset?: string | undefined;
}

/** A video asset used inside an ad. */
export interface AdVideoAsset {
  /** The Asset resource name of this video. */
  asset?: string | undefined;
}

/** A media bundle asset used inside an ad. */
export interface AdMediaBundleAsset {
  /** The Asset resource name of this media bundle. */
  asset?: string | undefined;
}

/** A discovery carousel card asset used inside an ad. */
export interface AdDiscoveryCarouselCardAsset {
  /** The Asset resource name of this discovery carousel card. */
  asset?: string | undefined;
}

/** A call to action asset used inside an ad. */
export interface AdCallToActionAsset {
  /** The Asset resource name of this call to action asset. */
  asset?: string | undefined;
}

function createBaseAdTextAsset(): AdTextAsset {
  return { text: undefined, pinnedField: 0, assetPerformanceLabel: 0, policySummaryInfo: undefined };
}

export const AdTextAsset: MessageFns<AdTextAsset> = {
  encode(message: AdTextAsset, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.text !== undefined) {
      writer.uint32(34).string(message.text);
    }
    if (message.pinnedField !== 0) {
      writer.uint32(16).int32(message.pinnedField);
    }
    if (message.assetPerformanceLabel !== 0) {
      writer.uint32(40).int32(message.assetPerformanceLabel);
    }
    if (message.policySummaryInfo !== undefined) {
      AdAssetPolicySummary.encode(message.policySummaryInfo, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AdTextAsset {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAdTextAsset();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 4:
          if (tag !== 34) {
            break;
          }

          message.text = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pinnedField = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.assetPerformanceLabel = reader.int32() as any;
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.policySummaryInfo = AdAssetPolicySummary.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AdTextAsset {
    return {
      text: isSet(object.text) ? globalThis.String(object.text) : undefined,
      pinnedField: isSet(object.pinnedField)
        ? servedAssetFieldTypeEnum_ServedAssetFieldTypeFromJSON(object.pinnedField)
        : 0,
      assetPerformanceLabel: isSet(object.assetPerformanceLabel)
        ? assetPerformanceLabelEnum_AssetPerformanceLabelFromJSON(object.assetPerformanceLabel)
        : 0,
      policySummaryInfo: isSet(object.policySummaryInfo)
        ? AdAssetPolicySummary.fromJSON(object.policySummaryInfo)
        : undefined,
    };
  },

  toJSON(message: AdTextAsset): unknown {
    const obj: any = {};
    if (message.text !== undefined) {
      obj.text = message.text;
    }
    if (message.pinnedField !== 0) {
      obj.pinnedField = servedAssetFieldTypeEnum_ServedAssetFieldTypeToJSON(message.pinnedField);
    }
    if (message.assetPerformanceLabel !== 0) {
      obj.assetPerformanceLabel = assetPerformanceLabelEnum_AssetPerformanceLabelToJSON(message.assetPerformanceLabel);
    }
    if (message.policySummaryInfo !== undefined) {
      obj.policySummaryInfo = AdAssetPolicySummary.toJSON(message.policySummaryInfo);
    }
    return obj;
  },

  create(base?: DeepPartial<AdTextAsset>): AdTextAsset {
    return AdTextAsset.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AdTextAsset>): AdTextAsset {
    const message = createBaseAdTextAsset();
    message.text = object.text ?? undefined;
    message.pinnedField = object.pinnedField ?? 0;
    message.assetPerformanceLabel = object.assetPerformanceLabel ?? 0;
    message.policySummaryInfo = (object.policySummaryInfo !== undefined && object.policySummaryInfo !== null)
      ? AdAssetPolicySummary.fromPartial(object.policySummaryInfo)
      : undefined;
    return message;
  },
};

function createBaseAdImageAsset(): AdImageAsset {
  return { asset: undefined };
}

export const AdImageAsset: MessageFns<AdImageAsset> = {
  encode(message: AdImageAsset, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.asset !== undefined) {
      writer.uint32(18).string(message.asset);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AdImageAsset {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAdImageAsset();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.asset = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AdImageAsset {
    return { asset: isSet(object.asset) ? globalThis.String(object.asset) : undefined };
  },

  toJSON(message: AdImageAsset): unknown {
    const obj: any = {};
    if (message.asset !== undefined) {
      obj.asset = message.asset;
    }
    return obj;
  },

  create(base?: DeepPartial<AdImageAsset>): AdImageAsset {
    return AdImageAsset.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AdImageAsset>): AdImageAsset {
    const message = createBaseAdImageAsset();
    message.asset = object.asset ?? undefined;
    return message;
  },
};

function createBaseAdVideoAsset(): AdVideoAsset {
  return { asset: undefined };
}

export const AdVideoAsset: MessageFns<AdVideoAsset> = {
  encode(message: AdVideoAsset, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.asset !== undefined) {
      writer.uint32(18).string(message.asset);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AdVideoAsset {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAdVideoAsset();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.asset = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AdVideoAsset {
    return { asset: isSet(object.asset) ? globalThis.String(object.asset) : undefined };
  },

  toJSON(message: AdVideoAsset): unknown {
    const obj: any = {};
    if (message.asset !== undefined) {
      obj.asset = message.asset;
    }
    return obj;
  },

  create(base?: DeepPartial<AdVideoAsset>): AdVideoAsset {
    return AdVideoAsset.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AdVideoAsset>): AdVideoAsset {
    const message = createBaseAdVideoAsset();
    message.asset = object.asset ?? undefined;
    return message;
  },
};

function createBaseAdMediaBundleAsset(): AdMediaBundleAsset {
  return { asset: undefined };
}

export const AdMediaBundleAsset: MessageFns<AdMediaBundleAsset> = {
  encode(message: AdMediaBundleAsset, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.asset !== undefined) {
      writer.uint32(18).string(message.asset);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AdMediaBundleAsset {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAdMediaBundleAsset();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.asset = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AdMediaBundleAsset {
    return { asset: isSet(object.asset) ? globalThis.String(object.asset) : undefined };
  },

  toJSON(message: AdMediaBundleAsset): unknown {
    const obj: any = {};
    if (message.asset !== undefined) {
      obj.asset = message.asset;
    }
    return obj;
  },

  create(base?: DeepPartial<AdMediaBundleAsset>): AdMediaBundleAsset {
    return AdMediaBundleAsset.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AdMediaBundleAsset>): AdMediaBundleAsset {
    const message = createBaseAdMediaBundleAsset();
    message.asset = object.asset ?? undefined;
    return message;
  },
};

function createBaseAdDiscoveryCarouselCardAsset(): AdDiscoveryCarouselCardAsset {
  return { asset: undefined };
}

export const AdDiscoveryCarouselCardAsset: MessageFns<AdDiscoveryCarouselCardAsset> = {
  encode(message: AdDiscoveryCarouselCardAsset, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.asset !== undefined) {
      writer.uint32(10).string(message.asset);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AdDiscoveryCarouselCardAsset {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAdDiscoveryCarouselCardAsset();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.asset = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AdDiscoveryCarouselCardAsset {
    return { asset: isSet(object.asset) ? globalThis.String(object.asset) : undefined };
  },

  toJSON(message: AdDiscoveryCarouselCardAsset): unknown {
    const obj: any = {};
    if (message.asset !== undefined) {
      obj.asset = message.asset;
    }
    return obj;
  },

  create(base?: DeepPartial<AdDiscoveryCarouselCardAsset>): AdDiscoveryCarouselCardAsset {
    return AdDiscoveryCarouselCardAsset.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AdDiscoveryCarouselCardAsset>): AdDiscoveryCarouselCardAsset {
    const message = createBaseAdDiscoveryCarouselCardAsset();
    message.asset = object.asset ?? undefined;
    return message;
  },
};

function createBaseAdCallToActionAsset(): AdCallToActionAsset {
  return { asset: undefined };
}

export const AdCallToActionAsset: MessageFns<AdCallToActionAsset> = {
  encode(message: AdCallToActionAsset, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.asset !== undefined) {
      writer.uint32(10).string(message.asset);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AdCallToActionAsset {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAdCallToActionAsset();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.asset = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AdCallToActionAsset {
    return { asset: isSet(object.asset) ? globalThis.String(object.asset) : undefined };
  },

  toJSON(message: AdCallToActionAsset): unknown {
    const obj: any = {};
    if (message.asset !== undefined) {
      obj.asset = message.asset;
    }
    return obj;
  },

  create(base?: DeepPartial<AdCallToActionAsset>): AdCallToActionAsset {
    return AdCallToActionAsset.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AdCallToActionAsset>): AdCallToActionAsset {
    const message = createBaseAdCallToActionAsset();
    message.asset = object.asset ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
