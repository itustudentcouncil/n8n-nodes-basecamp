// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v16/common/extensions.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import {
  AppStoreEnum_AppStore,
  appStoreEnum_AppStoreFromJSON,
  appStoreEnum_AppStoreToJSON,
} from "../enums/app_store.js";
import {
  CallConversionReportingStateEnum_CallConversionReportingState,
  callConversionReportingStateEnum_CallConversionReportingStateFromJSON,
  callConversionReportingStateEnum_CallConversionReportingStateToJSON,
} from "../enums/call_conversion_reporting_state.js";
import {
  PriceExtensionPriceQualifierEnum_PriceExtensionPriceQualifier,
  priceExtensionPriceQualifierEnum_PriceExtensionPriceQualifierFromJSON,
  priceExtensionPriceQualifierEnum_PriceExtensionPriceQualifierToJSON,
} from "../enums/price_extension_price_qualifier.js";
import {
  PriceExtensionPriceUnitEnum_PriceExtensionPriceUnit,
  priceExtensionPriceUnitEnum_PriceExtensionPriceUnitFromJSON,
  priceExtensionPriceUnitEnum_PriceExtensionPriceUnitToJSON,
} from "../enums/price_extension_price_unit.js";
import {
  PriceExtensionTypeEnum_PriceExtensionType,
  priceExtensionTypeEnum_PriceExtensionTypeFromJSON,
  priceExtensionTypeEnum_PriceExtensionTypeToJSON,
} from "../enums/price_extension_type.js";
import {
  PromotionExtensionDiscountModifierEnum_PromotionExtensionDiscountModifier,
  promotionExtensionDiscountModifierEnum_PromotionExtensionDiscountModifierFromJSON,
  promotionExtensionDiscountModifierEnum_PromotionExtensionDiscountModifierToJSON,
} from "../enums/promotion_extension_discount_modifier.js";
import {
  PromotionExtensionOccasionEnum_PromotionExtensionOccasion,
  promotionExtensionOccasionEnum_PromotionExtensionOccasionFromJSON,
  promotionExtensionOccasionEnum_PromotionExtensionOccasionToJSON,
} from "../enums/promotion_extension_occasion.js";
import { CustomParameter } from "./custom_parameter.js";
import { Money } from "./feed_common.js";

export const protobufPackage = "google.ads.googleads.v16.common";

/** Represents an App extension. */
export interface AppFeedItem {
  /**
   * The visible text displayed when the link is rendered in an ad.
   * This string must not be empty, and the length of this string should
   * be between 1 and 25, inclusive.
   */
  linkText?:
    | string
    | undefined;
  /**
   * The store-specific ID for the target application.
   * This string must not be empty.
   */
  appId?:
    | string
    | undefined;
  /**
   * The application store that the target application belongs to.
   * This field is required.
   */
  appStore: AppStoreEnum_AppStore;
  /**
   * A list of possible final URLs after all cross domain redirects.
   * This list must not be empty.
   */
  finalUrls: string[];
  /** A list of possible final mobile URLs after all cross domain redirects. */
  finalMobileUrls: string[];
  /** URL template for constructing a tracking URL. Default value is "{lpurl}". */
  trackingUrlTemplate?:
    | string
    | undefined;
  /**
   * A list of mappings to be used for substituting URL custom parameter tags in
   * the tracking_url_template, final_urls, and/or final_mobile_urls.
   */
  urlCustomParameters: CustomParameter[];
  /**
   * URL template for appending params to landing page URLs served with parallel
   * tracking.
   */
  finalUrlSuffix?: string | undefined;
}

/** Represents a Call extension. */
export interface CallFeedItem {
  /**
   * The advertiser's phone number to append to the ad.
   * This string must not be empty.
   */
  phoneNumber?:
    | string
    | undefined;
  /**
   * Uppercase two-letter country code of the advertiser's phone number.
   * This string must not be empty.
   */
  countryCode?:
    | string
    | undefined;
  /**
   * Indicates whether call tracking is enabled. By default, call tracking is
   * not enabled.
   */
  callTrackingEnabled?:
    | boolean
    | undefined;
  /**
   * The conversion action to attribute a call conversion to. If not set a
   * default conversion action is used. This field only has effect if
   * call_tracking_enabled is set to true. Otherwise this field is ignored.
   */
  callConversionAction?:
    | string
    | undefined;
  /**
   * If true, disable call conversion tracking. call_conversion_action should
   * not be set if this is true. Optional.
   */
  callConversionTrackingDisabled?:
    | boolean
    | undefined;
  /**
   * Enum value that indicates whether this call extension uses its own call
   * conversion setting (or just have call conversion disabled), or following
   * the account level setting.
   */
  callConversionReportingState: CallConversionReportingStateEnum_CallConversionReportingState;
}

/** Represents a callout extension. */
export interface CalloutFeedItem {
  /**
   * The callout text.
   * The length of this string should be between 1 and 25, inclusive.
   */
  calloutText?: string | undefined;
}

/** Represents a location extension. */
export interface LocationFeedItem {
  /** The name of the business. */
  businessName?:
    | string
    | undefined;
  /** Line 1 of the business address. */
  addressLine1?:
    | string
    | undefined;
  /** Line 2 of the business address. */
  addressLine2?:
    | string
    | undefined;
  /** City of the business address. */
  city?:
    | string
    | undefined;
  /** Province of the business address. */
  province?:
    | string
    | undefined;
  /** Postal code of the business address. */
  postalCode?:
    | string
    | undefined;
  /** Country code of the business address. */
  countryCode?:
    | string
    | undefined;
  /** Phone number of the business. */
  phoneNumber?: string | undefined;
}

/** Represents an affiliate location extension. */
export interface AffiliateLocationFeedItem {
  /** The name of the business. */
  businessName?:
    | string
    | undefined;
  /** Line 1 of the business address. */
  addressLine1?:
    | string
    | undefined;
  /** Line 2 of the business address. */
  addressLine2?:
    | string
    | undefined;
  /** City of the business address. */
  city?:
    | string
    | undefined;
  /** Province of the business address. */
  province?:
    | string
    | undefined;
  /** Postal code of the business address. */
  postalCode?:
    | string
    | undefined;
  /** Country code of the business address. */
  countryCode?:
    | string
    | undefined;
  /** Phone number of the business. */
  phoneNumber?:
    | string
    | undefined;
  /** Id of the retail chain that is advertised as a seller of your product. */
  chainId?:
    | Long
    | undefined;
  /** Name of chain. */
  chainName?: string | undefined;
}

/**
 * An extension that users can click on to send a text message to the
 * advertiser.
 */
export interface TextMessageFeedItem {
  /**
   * The business name to prepend to the message text.
   * This field is required.
   */
  businessName?:
    | string
    | undefined;
  /**
   * Uppercase two-letter country code of the advertiser's phone number.
   * This field is required.
   */
  countryCode?:
    | string
    | undefined;
  /** The advertiser's phone number the message will be sent to. Required. */
  phoneNumber?:
    | string
    | undefined;
  /**
   * The text to show in the ad.
   * This field is required.
   */
  text?:
    | string
    | undefined;
  /** The message extension_text populated in the messaging app. */
  extensionText?: string | undefined;
}

/** Represents a Price extension. */
export interface PriceFeedItem {
  /** Price extension type of this extension. */
  type: PriceExtensionTypeEnum_PriceExtensionType;
  /** Price qualifier for all offers of this price extension. */
  priceQualifier: PriceExtensionPriceQualifierEnum_PriceExtensionPriceQualifier;
  /** Tracking URL template for all offers of this price extension. */
  trackingUrlTemplate?:
    | string
    | undefined;
  /** The code of the language used for this price extension. */
  languageCode?:
    | string
    | undefined;
  /** The price offerings in this price extension. */
  priceOfferings: PriceOffer[];
  /** Tracking URL template for all offers of this price extension. */
  finalUrlSuffix?: string | undefined;
}

/** Represents one price offer in a price extension. */
export interface PriceOffer {
  /** Header text of this offer. */
  header?:
    | string
    | undefined;
  /** Description text of this offer. */
  description?:
    | string
    | undefined;
  /** Price value of this offer. */
  price:
    | Money
    | undefined;
  /** Price unit for this offer. */
  unit: PriceExtensionPriceUnitEnum_PriceExtensionPriceUnit;
  /** A list of possible final URLs after all cross domain redirects. */
  finalUrls: string[];
  /** A list of possible final mobile URLs after all cross domain redirects. */
  finalMobileUrls: string[];
}

/** Represents a Promotion extension. */
export interface PromotionFeedItem {
  /**
   * A freeform description of what the promotion is targeting.
   * This field is required.
   */
  promotionTarget?:
    | string
    | undefined;
  /** Enum that modifies the qualification of the discount. */
  discountModifier: PromotionExtensionDiscountModifierEnum_PromotionExtensionDiscountModifier;
  /** Start date of when the promotion is eligible to be redeemed. */
  promotionStartDate?:
    | string
    | undefined;
  /** Last date when the promotion is eligible to be redeemed. */
  promotionEndDate?:
    | string
    | undefined;
  /**
   * The occasion the promotion was intended for.
   * If an occasion is set, the redemption window will need to fall within
   * the date range associated with the occasion.
   */
  occasion: PromotionExtensionOccasionEnum_PromotionExtensionOccasion;
  /**
   * A list of possible final URLs after all cross domain redirects.
   * This field is required.
   */
  finalUrls: string[];
  /** A list of possible final mobile URLs after all cross domain redirects. */
  finalMobileUrls: string[];
  /** URL template for constructing a tracking URL. */
  trackingUrlTemplate?:
    | string
    | undefined;
  /**
   * A list of mappings to be used for substituting URL custom parameter tags in
   * the tracking_url_template, final_urls, and/or final_mobile_urls.
   */
  urlCustomParameters: CustomParameter[];
  /**
   * URL template for appending params to landing page URLs served with parallel
   * tracking.
   */
  finalUrlSuffix?:
    | string
    | undefined;
  /**
   * The language of the promotion.
   * Represented as BCP 47 language tag.
   */
  languageCode?:
    | string
    | undefined;
  /**
   * Percentage off discount in the promotion in micros.
   * One million is equivalent to one percent.
   * Either this or money_off_amount is required.
   */
  percentOff?:
    | Long
    | undefined;
  /**
   * Money amount off for discount in the promotion.
   * Either this or percent_off is required.
   */
  moneyAmountOff?:
    | Money
    | undefined;
  /** A code the user should use in order to be eligible for the promotion. */
  promotionCode?:
    | string
    | undefined;
  /**
   * The amount the total order needs to be for the user to be eligible for
   * the promotion.
   */
  ordersOverAmount?: Money | undefined;
}

/** Represents a structured snippet extension. */
export interface StructuredSnippetFeedItem {
  /**
   * The header of the snippet.
   * This string must not be empty.
   */
  header?:
    | string
    | undefined;
  /**
   * The values in the snippet.
   * The maximum size of this collection is 10.
   */
  values: string[];
}

/** Represents a sitelink. */
export interface SitelinkFeedItem {
  /**
   * URL display text for the sitelink.
   * The length of this string should be between 1 and 25, inclusive.
   */
  linkText?:
    | string
    | undefined;
  /**
   * First line of the description for the sitelink.
   * If this value is set, line2 must also be set.
   * The length of this string should be between 0 and 35, inclusive.
   */
  line1?:
    | string
    | undefined;
  /**
   * Second line of the description for the sitelink.
   * If this value is set, line1 must also be set.
   * The length of this string should be between 0 and 35, inclusive.
   */
  line2?:
    | string
    | undefined;
  /** A list of possible final URLs after all cross domain redirects. */
  finalUrls: string[];
  /** A list of possible final mobile URLs after all cross domain redirects. */
  finalMobileUrls: string[];
  /** URL template for constructing a tracking URL. */
  trackingUrlTemplate?:
    | string
    | undefined;
  /**
   * A list of mappings to be used for substituting URL custom parameter tags in
   * the tracking_url_template, final_urls, and/or final_mobile_urls.
   */
  urlCustomParameters: CustomParameter[];
  /**
   * Final URL suffix to be appended to landing page URLs served with
   * parallel tracking.
   */
  finalUrlSuffix?: string | undefined;
}

/** Represents a hotel callout extension. */
export interface HotelCalloutFeedItem {
  /**
   * The callout text.
   * The length of this string should be between 1 and 25, inclusive.
   */
  text?:
    | string
    | undefined;
  /**
   * The language of the hotel callout text.
   * IETF BCP 47 compliant language code.
   */
  languageCode?: string | undefined;
}

/** Represents an advertiser provided image extension. */
export interface ImageFeedItem {
  /** Required. Resource name of the image asset. */
  imageAsset: string;
}

function createBaseAppFeedItem(): AppFeedItem {
  return {
    linkText: undefined,
    appId: undefined,
    appStore: 0,
    finalUrls: [],
    finalMobileUrls: [],
    trackingUrlTemplate: undefined,
    urlCustomParameters: [],
    finalUrlSuffix: undefined,
  };
}

export const AppFeedItem: MessageFns<AppFeedItem> = {
  encode(message: AppFeedItem, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.linkText !== undefined) {
      writer.uint32(74).string(message.linkText);
    }
    if (message.appId !== undefined) {
      writer.uint32(82).string(message.appId);
    }
    if (message.appStore !== 0) {
      writer.uint32(24).int32(message.appStore);
    }
    for (const v of message.finalUrls) {
      writer.uint32(90).string(v!);
    }
    for (const v of message.finalMobileUrls) {
      writer.uint32(98).string(v!);
    }
    if (message.trackingUrlTemplate !== undefined) {
      writer.uint32(106).string(message.trackingUrlTemplate);
    }
    for (const v of message.urlCustomParameters) {
      CustomParameter.encode(v!, writer.uint32(58).fork()).join();
    }
    if (message.finalUrlSuffix !== undefined) {
      writer.uint32(114).string(message.finalUrlSuffix);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AppFeedItem {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAppFeedItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 9:
          if (tag !== 74) {
            break;
          }

          message.linkText = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.appId = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.appStore = reader.int32() as any;
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.finalUrls.push(reader.string());
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.finalMobileUrls.push(reader.string());
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.trackingUrlTemplate = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.urlCustomParameters.push(CustomParameter.decode(reader, reader.uint32()));
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.finalUrlSuffix = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AppFeedItem {
    return {
      linkText: isSet(object.linkText) ? globalThis.String(object.linkText) : undefined,
      appId: isSet(object.appId) ? globalThis.String(object.appId) : undefined,
      appStore: isSet(object.appStore) ? appStoreEnum_AppStoreFromJSON(object.appStore) : 0,
      finalUrls: globalThis.Array.isArray(object?.finalUrls)
        ? object.finalUrls.map((e: any) => globalThis.String(e))
        : [],
      finalMobileUrls: globalThis.Array.isArray(object?.finalMobileUrls)
        ? object.finalMobileUrls.map((e: any) => globalThis.String(e))
        : [],
      trackingUrlTemplate: isSet(object.trackingUrlTemplate)
        ? globalThis.String(object.trackingUrlTemplate)
        : undefined,
      urlCustomParameters: globalThis.Array.isArray(object?.urlCustomParameters)
        ? object.urlCustomParameters.map((e: any) => CustomParameter.fromJSON(e))
        : [],
      finalUrlSuffix: isSet(object.finalUrlSuffix) ? globalThis.String(object.finalUrlSuffix) : undefined,
    };
  },

  toJSON(message: AppFeedItem): unknown {
    const obj: any = {};
    if (message.linkText !== undefined) {
      obj.linkText = message.linkText;
    }
    if (message.appId !== undefined) {
      obj.appId = message.appId;
    }
    if (message.appStore !== 0) {
      obj.appStore = appStoreEnum_AppStoreToJSON(message.appStore);
    }
    if (message.finalUrls?.length) {
      obj.finalUrls = message.finalUrls;
    }
    if (message.finalMobileUrls?.length) {
      obj.finalMobileUrls = message.finalMobileUrls;
    }
    if (message.trackingUrlTemplate !== undefined) {
      obj.trackingUrlTemplate = message.trackingUrlTemplate;
    }
    if (message.urlCustomParameters?.length) {
      obj.urlCustomParameters = message.urlCustomParameters.map((e) => CustomParameter.toJSON(e));
    }
    if (message.finalUrlSuffix !== undefined) {
      obj.finalUrlSuffix = message.finalUrlSuffix;
    }
    return obj;
  },

  create(base?: DeepPartial<AppFeedItem>): AppFeedItem {
    return AppFeedItem.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AppFeedItem>): AppFeedItem {
    const message = createBaseAppFeedItem();
    message.linkText = object.linkText ?? undefined;
    message.appId = object.appId ?? undefined;
    message.appStore = object.appStore ?? 0;
    message.finalUrls = object.finalUrls?.map((e) => e) || [];
    message.finalMobileUrls = object.finalMobileUrls?.map((e) => e) || [];
    message.trackingUrlTemplate = object.trackingUrlTemplate ?? undefined;
    message.urlCustomParameters = object.urlCustomParameters?.map((e) => CustomParameter.fromPartial(e)) || [];
    message.finalUrlSuffix = object.finalUrlSuffix ?? undefined;
    return message;
  },
};

function createBaseCallFeedItem(): CallFeedItem {
  return {
    phoneNumber: undefined,
    countryCode: undefined,
    callTrackingEnabled: undefined,
    callConversionAction: undefined,
    callConversionTrackingDisabled: undefined,
    callConversionReportingState: 0,
  };
}

export const CallFeedItem: MessageFns<CallFeedItem> = {
  encode(message: CallFeedItem, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.phoneNumber !== undefined) {
      writer.uint32(58).string(message.phoneNumber);
    }
    if (message.countryCode !== undefined) {
      writer.uint32(66).string(message.countryCode);
    }
    if (message.callTrackingEnabled !== undefined) {
      writer.uint32(72).bool(message.callTrackingEnabled);
    }
    if (message.callConversionAction !== undefined) {
      writer.uint32(82).string(message.callConversionAction);
    }
    if (message.callConversionTrackingDisabled !== undefined) {
      writer.uint32(88).bool(message.callConversionTrackingDisabled);
    }
    if (message.callConversionReportingState !== 0) {
      writer.uint32(48).int32(message.callConversionReportingState);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CallFeedItem {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCallFeedItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 7:
          if (tag !== 58) {
            break;
          }

          message.phoneNumber = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.countryCode = reader.string();
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.callTrackingEnabled = reader.bool();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.callConversionAction = reader.string();
          continue;
        case 11:
          if (tag !== 88) {
            break;
          }

          message.callConversionTrackingDisabled = reader.bool();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.callConversionReportingState = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CallFeedItem {
    return {
      phoneNumber: isSet(object.phoneNumber) ? globalThis.String(object.phoneNumber) : undefined,
      countryCode: isSet(object.countryCode) ? globalThis.String(object.countryCode) : undefined,
      callTrackingEnabled: isSet(object.callTrackingEnabled)
        ? globalThis.Boolean(object.callTrackingEnabled)
        : undefined,
      callConversionAction: isSet(object.callConversionAction)
        ? globalThis.String(object.callConversionAction)
        : undefined,
      callConversionTrackingDisabled: isSet(object.callConversionTrackingDisabled)
        ? globalThis.Boolean(object.callConversionTrackingDisabled)
        : undefined,
      callConversionReportingState: isSet(object.callConversionReportingState)
        ? callConversionReportingStateEnum_CallConversionReportingStateFromJSON(object.callConversionReportingState)
        : 0,
    };
  },

  toJSON(message: CallFeedItem): unknown {
    const obj: any = {};
    if (message.phoneNumber !== undefined) {
      obj.phoneNumber = message.phoneNumber;
    }
    if (message.countryCode !== undefined) {
      obj.countryCode = message.countryCode;
    }
    if (message.callTrackingEnabled !== undefined) {
      obj.callTrackingEnabled = message.callTrackingEnabled;
    }
    if (message.callConversionAction !== undefined) {
      obj.callConversionAction = message.callConversionAction;
    }
    if (message.callConversionTrackingDisabled !== undefined) {
      obj.callConversionTrackingDisabled = message.callConversionTrackingDisabled;
    }
    if (message.callConversionReportingState !== 0) {
      obj.callConversionReportingState = callConversionReportingStateEnum_CallConversionReportingStateToJSON(
        message.callConversionReportingState,
      );
    }
    return obj;
  },

  create(base?: DeepPartial<CallFeedItem>): CallFeedItem {
    return CallFeedItem.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CallFeedItem>): CallFeedItem {
    const message = createBaseCallFeedItem();
    message.phoneNumber = object.phoneNumber ?? undefined;
    message.countryCode = object.countryCode ?? undefined;
    message.callTrackingEnabled = object.callTrackingEnabled ?? undefined;
    message.callConversionAction = object.callConversionAction ?? undefined;
    message.callConversionTrackingDisabled = object.callConversionTrackingDisabled ?? undefined;
    message.callConversionReportingState = object.callConversionReportingState ?? 0;
    return message;
  },
};

function createBaseCalloutFeedItem(): CalloutFeedItem {
  return { calloutText: undefined };
}

export const CalloutFeedItem: MessageFns<CalloutFeedItem> = {
  encode(message: CalloutFeedItem, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.calloutText !== undefined) {
      writer.uint32(18).string(message.calloutText);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CalloutFeedItem {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCalloutFeedItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.calloutText = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CalloutFeedItem {
    return { calloutText: isSet(object.calloutText) ? globalThis.String(object.calloutText) : undefined };
  },

  toJSON(message: CalloutFeedItem): unknown {
    const obj: any = {};
    if (message.calloutText !== undefined) {
      obj.calloutText = message.calloutText;
    }
    return obj;
  },

  create(base?: DeepPartial<CalloutFeedItem>): CalloutFeedItem {
    return CalloutFeedItem.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CalloutFeedItem>): CalloutFeedItem {
    const message = createBaseCalloutFeedItem();
    message.calloutText = object.calloutText ?? undefined;
    return message;
  },
};

function createBaseLocationFeedItem(): LocationFeedItem {
  return {
    businessName: undefined,
    addressLine1: undefined,
    addressLine2: undefined,
    city: undefined,
    province: undefined,
    postalCode: undefined,
    countryCode: undefined,
    phoneNumber: undefined,
  };
}

export const LocationFeedItem: MessageFns<LocationFeedItem> = {
  encode(message: LocationFeedItem, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.businessName !== undefined) {
      writer.uint32(74).string(message.businessName);
    }
    if (message.addressLine1 !== undefined) {
      writer.uint32(82).string(message.addressLine1);
    }
    if (message.addressLine2 !== undefined) {
      writer.uint32(90).string(message.addressLine2);
    }
    if (message.city !== undefined) {
      writer.uint32(98).string(message.city);
    }
    if (message.province !== undefined) {
      writer.uint32(106).string(message.province);
    }
    if (message.postalCode !== undefined) {
      writer.uint32(114).string(message.postalCode);
    }
    if (message.countryCode !== undefined) {
      writer.uint32(122).string(message.countryCode);
    }
    if (message.phoneNumber !== undefined) {
      writer.uint32(130).string(message.phoneNumber);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LocationFeedItem {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLocationFeedItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 9:
          if (tag !== 74) {
            break;
          }

          message.businessName = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.addressLine1 = reader.string();
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.addressLine2 = reader.string();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.city = reader.string();
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.province = reader.string();
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.postalCode = reader.string();
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.countryCode = reader.string();
          continue;
        case 16:
          if (tag !== 130) {
            break;
          }

          message.phoneNumber = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LocationFeedItem {
    return {
      businessName: isSet(object.businessName) ? globalThis.String(object.businessName) : undefined,
      addressLine1: isSet(object.addressLine1) ? globalThis.String(object.addressLine1) : undefined,
      addressLine2: isSet(object.addressLine2) ? globalThis.String(object.addressLine2) : undefined,
      city: isSet(object.city) ? globalThis.String(object.city) : undefined,
      province: isSet(object.province) ? globalThis.String(object.province) : undefined,
      postalCode: isSet(object.postalCode) ? globalThis.String(object.postalCode) : undefined,
      countryCode: isSet(object.countryCode) ? globalThis.String(object.countryCode) : undefined,
      phoneNumber: isSet(object.phoneNumber) ? globalThis.String(object.phoneNumber) : undefined,
    };
  },

  toJSON(message: LocationFeedItem): unknown {
    const obj: any = {};
    if (message.businessName !== undefined) {
      obj.businessName = message.businessName;
    }
    if (message.addressLine1 !== undefined) {
      obj.addressLine1 = message.addressLine1;
    }
    if (message.addressLine2 !== undefined) {
      obj.addressLine2 = message.addressLine2;
    }
    if (message.city !== undefined) {
      obj.city = message.city;
    }
    if (message.province !== undefined) {
      obj.province = message.province;
    }
    if (message.postalCode !== undefined) {
      obj.postalCode = message.postalCode;
    }
    if (message.countryCode !== undefined) {
      obj.countryCode = message.countryCode;
    }
    if (message.phoneNumber !== undefined) {
      obj.phoneNumber = message.phoneNumber;
    }
    return obj;
  },

  create(base?: DeepPartial<LocationFeedItem>): LocationFeedItem {
    return LocationFeedItem.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LocationFeedItem>): LocationFeedItem {
    const message = createBaseLocationFeedItem();
    message.businessName = object.businessName ?? undefined;
    message.addressLine1 = object.addressLine1 ?? undefined;
    message.addressLine2 = object.addressLine2 ?? undefined;
    message.city = object.city ?? undefined;
    message.province = object.province ?? undefined;
    message.postalCode = object.postalCode ?? undefined;
    message.countryCode = object.countryCode ?? undefined;
    message.phoneNumber = object.phoneNumber ?? undefined;
    return message;
  },
};

function createBaseAffiliateLocationFeedItem(): AffiliateLocationFeedItem {
  return {
    businessName: undefined,
    addressLine1: undefined,
    addressLine2: undefined,
    city: undefined,
    province: undefined,
    postalCode: undefined,
    countryCode: undefined,
    phoneNumber: undefined,
    chainId: undefined,
    chainName: undefined,
  };
}

export const AffiliateLocationFeedItem: MessageFns<AffiliateLocationFeedItem> = {
  encode(message: AffiliateLocationFeedItem, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.businessName !== undefined) {
      writer.uint32(90).string(message.businessName);
    }
    if (message.addressLine1 !== undefined) {
      writer.uint32(98).string(message.addressLine1);
    }
    if (message.addressLine2 !== undefined) {
      writer.uint32(106).string(message.addressLine2);
    }
    if (message.city !== undefined) {
      writer.uint32(114).string(message.city);
    }
    if (message.province !== undefined) {
      writer.uint32(122).string(message.province);
    }
    if (message.postalCode !== undefined) {
      writer.uint32(130).string(message.postalCode);
    }
    if (message.countryCode !== undefined) {
      writer.uint32(138).string(message.countryCode);
    }
    if (message.phoneNumber !== undefined) {
      writer.uint32(146).string(message.phoneNumber);
    }
    if (message.chainId !== undefined) {
      writer.uint32(152).int64(message.chainId.toString());
    }
    if (message.chainName !== undefined) {
      writer.uint32(162).string(message.chainName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AffiliateLocationFeedItem {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAffiliateLocationFeedItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 11:
          if (tag !== 90) {
            break;
          }

          message.businessName = reader.string();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.addressLine1 = reader.string();
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.addressLine2 = reader.string();
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.city = reader.string();
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.province = reader.string();
          continue;
        case 16:
          if (tag !== 130) {
            break;
          }

          message.postalCode = reader.string();
          continue;
        case 17:
          if (tag !== 138) {
            break;
          }

          message.countryCode = reader.string();
          continue;
        case 18:
          if (tag !== 146) {
            break;
          }

          message.phoneNumber = reader.string();
          continue;
        case 19:
          if (tag !== 152) {
            break;
          }

          message.chainId = Long.fromString(reader.int64().toString());
          continue;
        case 20:
          if (tag !== 162) {
            break;
          }

          message.chainName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AffiliateLocationFeedItem {
    return {
      businessName: isSet(object.businessName) ? globalThis.String(object.businessName) : undefined,
      addressLine1: isSet(object.addressLine1) ? globalThis.String(object.addressLine1) : undefined,
      addressLine2: isSet(object.addressLine2) ? globalThis.String(object.addressLine2) : undefined,
      city: isSet(object.city) ? globalThis.String(object.city) : undefined,
      province: isSet(object.province) ? globalThis.String(object.province) : undefined,
      postalCode: isSet(object.postalCode) ? globalThis.String(object.postalCode) : undefined,
      countryCode: isSet(object.countryCode) ? globalThis.String(object.countryCode) : undefined,
      phoneNumber: isSet(object.phoneNumber) ? globalThis.String(object.phoneNumber) : undefined,
      chainId: isSet(object.chainId) ? Long.fromValue(object.chainId) : undefined,
      chainName: isSet(object.chainName) ? globalThis.String(object.chainName) : undefined,
    };
  },

  toJSON(message: AffiliateLocationFeedItem): unknown {
    const obj: any = {};
    if (message.businessName !== undefined) {
      obj.businessName = message.businessName;
    }
    if (message.addressLine1 !== undefined) {
      obj.addressLine1 = message.addressLine1;
    }
    if (message.addressLine2 !== undefined) {
      obj.addressLine2 = message.addressLine2;
    }
    if (message.city !== undefined) {
      obj.city = message.city;
    }
    if (message.province !== undefined) {
      obj.province = message.province;
    }
    if (message.postalCode !== undefined) {
      obj.postalCode = message.postalCode;
    }
    if (message.countryCode !== undefined) {
      obj.countryCode = message.countryCode;
    }
    if (message.phoneNumber !== undefined) {
      obj.phoneNumber = message.phoneNumber;
    }
    if (message.chainId !== undefined) {
      obj.chainId = (message.chainId || Long.ZERO).toString();
    }
    if (message.chainName !== undefined) {
      obj.chainName = message.chainName;
    }
    return obj;
  },

  create(base?: DeepPartial<AffiliateLocationFeedItem>): AffiliateLocationFeedItem {
    return AffiliateLocationFeedItem.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AffiliateLocationFeedItem>): AffiliateLocationFeedItem {
    const message = createBaseAffiliateLocationFeedItem();
    message.businessName = object.businessName ?? undefined;
    message.addressLine1 = object.addressLine1 ?? undefined;
    message.addressLine2 = object.addressLine2 ?? undefined;
    message.city = object.city ?? undefined;
    message.province = object.province ?? undefined;
    message.postalCode = object.postalCode ?? undefined;
    message.countryCode = object.countryCode ?? undefined;
    message.phoneNumber = object.phoneNumber ?? undefined;
    message.chainId = (object.chainId !== undefined && object.chainId !== null)
      ? Long.fromValue(object.chainId)
      : undefined;
    message.chainName = object.chainName ?? undefined;
    return message;
  },
};

function createBaseTextMessageFeedItem(): TextMessageFeedItem {
  return {
    businessName: undefined,
    countryCode: undefined,
    phoneNumber: undefined,
    text: undefined,
    extensionText: undefined,
  };
}

export const TextMessageFeedItem: MessageFns<TextMessageFeedItem> = {
  encode(message: TextMessageFeedItem, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.businessName !== undefined) {
      writer.uint32(50).string(message.businessName);
    }
    if (message.countryCode !== undefined) {
      writer.uint32(58).string(message.countryCode);
    }
    if (message.phoneNumber !== undefined) {
      writer.uint32(66).string(message.phoneNumber);
    }
    if (message.text !== undefined) {
      writer.uint32(74).string(message.text);
    }
    if (message.extensionText !== undefined) {
      writer.uint32(82).string(message.extensionText);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TextMessageFeedItem {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTextMessageFeedItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 6:
          if (tag !== 50) {
            break;
          }

          message.businessName = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.countryCode = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.phoneNumber = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.text = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.extensionText = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TextMessageFeedItem {
    return {
      businessName: isSet(object.businessName) ? globalThis.String(object.businessName) : undefined,
      countryCode: isSet(object.countryCode) ? globalThis.String(object.countryCode) : undefined,
      phoneNumber: isSet(object.phoneNumber) ? globalThis.String(object.phoneNumber) : undefined,
      text: isSet(object.text) ? globalThis.String(object.text) : undefined,
      extensionText: isSet(object.extensionText) ? globalThis.String(object.extensionText) : undefined,
    };
  },

  toJSON(message: TextMessageFeedItem): unknown {
    const obj: any = {};
    if (message.businessName !== undefined) {
      obj.businessName = message.businessName;
    }
    if (message.countryCode !== undefined) {
      obj.countryCode = message.countryCode;
    }
    if (message.phoneNumber !== undefined) {
      obj.phoneNumber = message.phoneNumber;
    }
    if (message.text !== undefined) {
      obj.text = message.text;
    }
    if (message.extensionText !== undefined) {
      obj.extensionText = message.extensionText;
    }
    return obj;
  },

  create(base?: DeepPartial<TextMessageFeedItem>): TextMessageFeedItem {
    return TextMessageFeedItem.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TextMessageFeedItem>): TextMessageFeedItem {
    const message = createBaseTextMessageFeedItem();
    message.businessName = object.businessName ?? undefined;
    message.countryCode = object.countryCode ?? undefined;
    message.phoneNumber = object.phoneNumber ?? undefined;
    message.text = object.text ?? undefined;
    message.extensionText = object.extensionText ?? undefined;
    return message;
  },
};

function createBasePriceFeedItem(): PriceFeedItem {
  return {
    type: 0,
    priceQualifier: 0,
    trackingUrlTemplate: undefined,
    languageCode: undefined,
    priceOfferings: [],
    finalUrlSuffix: undefined,
  };
}

export const PriceFeedItem: MessageFns<PriceFeedItem> = {
  encode(message: PriceFeedItem, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    if (message.priceQualifier !== 0) {
      writer.uint32(16).int32(message.priceQualifier);
    }
    if (message.trackingUrlTemplate !== undefined) {
      writer.uint32(58).string(message.trackingUrlTemplate);
    }
    if (message.languageCode !== undefined) {
      writer.uint32(66).string(message.languageCode);
    }
    for (const v of message.priceOfferings) {
      PriceOffer.encode(v!, writer.uint32(42).fork()).join();
    }
    if (message.finalUrlSuffix !== undefined) {
      writer.uint32(74).string(message.finalUrlSuffix);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PriceFeedItem {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePriceFeedItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.priceQualifier = reader.int32() as any;
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.trackingUrlTemplate = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.languageCode = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.priceOfferings.push(PriceOffer.decode(reader, reader.uint32()));
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.finalUrlSuffix = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PriceFeedItem {
    return {
      type: isSet(object.type) ? priceExtensionTypeEnum_PriceExtensionTypeFromJSON(object.type) : 0,
      priceQualifier: isSet(object.priceQualifier)
        ? priceExtensionPriceQualifierEnum_PriceExtensionPriceQualifierFromJSON(object.priceQualifier)
        : 0,
      trackingUrlTemplate: isSet(object.trackingUrlTemplate)
        ? globalThis.String(object.trackingUrlTemplate)
        : undefined,
      languageCode: isSet(object.languageCode) ? globalThis.String(object.languageCode) : undefined,
      priceOfferings: globalThis.Array.isArray(object?.priceOfferings)
        ? object.priceOfferings.map((e: any) => PriceOffer.fromJSON(e))
        : [],
      finalUrlSuffix: isSet(object.finalUrlSuffix) ? globalThis.String(object.finalUrlSuffix) : undefined,
    };
  },

  toJSON(message: PriceFeedItem): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = priceExtensionTypeEnum_PriceExtensionTypeToJSON(message.type);
    }
    if (message.priceQualifier !== 0) {
      obj.priceQualifier = priceExtensionPriceQualifierEnum_PriceExtensionPriceQualifierToJSON(message.priceQualifier);
    }
    if (message.trackingUrlTemplate !== undefined) {
      obj.trackingUrlTemplate = message.trackingUrlTemplate;
    }
    if (message.languageCode !== undefined) {
      obj.languageCode = message.languageCode;
    }
    if (message.priceOfferings?.length) {
      obj.priceOfferings = message.priceOfferings.map((e) => PriceOffer.toJSON(e));
    }
    if (message.finalUrlSuffix !== undefined) {
      obj.finalUrlSuffix = message.finalUrlSuffix;
    }
    return obj;
  },

  create(base?: DeepPartial<PriceFeedItem>): PriceFeedItem {
    return PriceFeedItem.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PriceFeedItem>): PriceFeedItem {
    const message = createBasePriceFeedItem();
    message.type = object.type ?? 0;
    message.priceQualifier = object.priceQualifier ?? 0;
    message.trackingUrlTemplate = object.trackingUrlTemplate ?? undefined;
    message.languageCode = object.languageCode ?? undefined;
    message.priceOfferings = object.priceOfferings?.map((e) => PriceOffer.fromPartial(e)) || [];
    message.finalUrlSuffix = object.finalUrlSuffix ?? undefined;
    return message;
  },
};

function createBasePriceOffer(): PriceOffer {
  return { header: undefined, description: undefined, price: undefined, unit: 0, finalUrls: [], finalMobileUrls: [] };
}

export const PriceOffer: MessageFns<PriceOffer> = {
  encode(message: PriceOffer, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.header !== undefined) {
      writer.uint32(58).string(message.header);
    }
    if (message.description !== undefined) {
      writer.uint32(66).string(message.description);
    }
    if (message.price !== undefined) {
      Money.encode(message.price, writer.uint32(26).fork()).join();
    }
    if (message.unit !== 0) {
      writer.uint32(32).int32(message.unit);
    }
    for (const v of message.finalUrls) {
      writer.uint32(74).string(v!);
    }
    for (const v of message.finalMobileUrls) {
      writer.uint32(82).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PriceOffer {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePriceOffer();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 7:
          if (tag !== 58) {
            break;
          }

          message.header = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.description = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.price = Money.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.unit = reader.int32() as any;
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.finalUrls.push(reader.string());
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.finalMobileUrls.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PriceOffer {
    return {
      header: isSet(object.header) ? globalThis.String(object.header) : undefined,
      description: isSet(object.description) ? globalThis.String(object.description) : undefined,
      price: isSet(object.price) ? Money.fromJSON(object.price) : undefined,
      unit: isSet(object.unit) ? priceExtensionPriceUnitEnum_PriceExtensionPriceUnitFromJSON(object.unit) : 0,
      finalUrls: globalThis.Array.isArray(object?.finalUrls)
        ? object.finalUrls.map((e: any) => globalThis.String(e))
        : [],
      finalMobileUrls: globalThis.Array.isArray(object?.finalMobileUrls)
        ? object.finalMobileUrls.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: PriceOffer): unknown {
    const obj: any = {};
    if (message.header !== undefined) {
      obj.header = message.header;
    }
    if (message.description !== undefined) {
      obj.description = message.description;
    }
    if (message.price !== undefined) {
      obj.price = Money.toJSON(message.price);
    }
    if (message.unit !== 0) {
      obj.unit = priceExtensionPriceUnitEnum_PriceExtensionPriceUnitToJSON(message.unit);
    }
    if (message.finalUrls?.length) {
      obj.finalUrls = message.finalUrls;
    }
    if (message.finalMobileUrls?.length) {
      obj.finalMobileUrls = message.finalMobileUrls;
    }
    return obj;
  },

  create(base?: DeepPartial<PriceOffer>): PriceOffer {
    return PriceOffer.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PriceOffer>): PriceOffer {
    const message = createBasePriceOffer();
    message.header = object.header ?? undefined;
    message.description = object.description ?? undefined;
    message.price = (object.price !== undefined && object.price !== null) ? Money.fromPartial(object.price) : undefined;
    message.unit = object.unit ?? 0;
    message.finalUrls = object.finalUrls?.map((e) => e) || [];
    message.finalMobileUrls = object.finalMobileUrls?.map((e) => e) || [];
    return message;
  },
};

function createBasePromotionFeedItem(): PromotionFeedItem {
  return {
    promotionTarget: undefined,
    discountModifier: 0,
    promotionStartDate: undefined,
    promotionEndDate: undefined,
    occasion: 0,
    finalUrls: [],
    finalMobileUrls: [],
    trackingUrlTemplate: undefined,
    urlCustomParameters: [],
    finalUrlSuffix: undefined,
    languageCode: undefined,
    percentOff: undefined,
    moneyAmountOff: undefined,
    promotionCode: undefined,
    ordersOverAmount: undefined,
  };
}

export const PromotionFeedItem: MessageFns<PromotionFeedItem> = {
  encode(message: PromotionFeedItem, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.promotionTarget !== undefined) {
      writer.uint32(130).string(message.promotionTarget);
    }
    if (message.discountModifier !== 0) {
      writer.uint32(16).int32(message.discountModifier);
    }
    if (message.promotionStartDate !== undefined) {
      writer.uint32(154).string(message.promotionStartDate);
    }
    if (message.promotionEndDate !== undefined) {
      writer.uint32(162).string(message.promotionEndDate);
    }
    if (message.occasion !== 0) {
      writer.uint32(72).int32(message.occasion);
    }
    for (const v of message.finalUrls) {
      writer.uint32(170).string(v!);
    }
    for (const v of message.finalMobileUrls) {
      writer.uint32(178).string(v!);
    }
    if (message.trackingUrlTemplate !== undefined) {
      writer.uint32(186).string(message.trackingUrlTemplate);
    }
    for (const v of message.urlCustomParameters) {
      CustomParameter.encode(v!, writer.uint32(106).fork()).join();
    }
    if (message.finalUrlSuffix !== undefined) {
      writer.uint32(194).string(message.finalUrlSuffix);
    }
    if (message.languageCode !== undefined) {
      writer.uint32(202).string(message.languageCode);
    }
    if (message.percentOff !== undefined) {
      writer.uint32(136).int64(message.percentOff.toString());
    }
    if (message.moneyAmountOff !== undefined) {
      Money.encode(message.moneyAmountOff, writer.uint32(34).fork()).join();
    }
    if (message.promotionCode !== undefined) {
      writer.uint32(146).string(message.promotionCode);
    }
    if (message.ordersOverAmount !== undefined) {
      Money.encode(message.ordersOverAmount, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PromotionFeedItem {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePromotionFeedItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 16:
          if (tag !== 130) {
            break;
          }

          message.promotionTarget = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.discountModifier = reader.int32() as any;
          continue;
        case 19:
          if (tag !== 154) {
            break;
          }

          message.promotionStartDate = reader.string();
          continue;
        case 20:
          if (tag !== 162) {
            break;
          }

          message.promotionEndDate = reader.string();
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.occasion = reader.int32() as any;
          continue;
        case 21:
          if (tag !== 170) {
            break;
          }

          message.finalUrls.push(reader.string());
          continue;
        case 22:
          if (tag !== 178) {
            break;
          }

          message.finalMobileUrls.push(reader.string());
          continue;
        case 23:
          if (tag !== 186) {
            break;
          }

          message.trackingUrlTemplate = reader.string();
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.urlCustomParameters.push(CustomParameter.decode(reader, reader.uint32()));
          continue;
        case 24:
          if (tag !== 194) {
            break;
          }

          message.finalUrlSuffix = reader.string();
          continue;
        case 25:
          if (tag !== 202) {
            break;
          }

          message.languageCode = reader.string();
          continue;
        case 17:
          if (tag !== 136) {
            break;
          }

          message.percentOff = Long.fromString(reader.int64().toString());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.moneyAmountOff = Money.decode(reader, reader.uint32());
          continue;
        case 18:
          if (tag !== 146) {
            break;
          }

          message.promotionCode = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.ordersOverAmount = Money.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PromotionFeedItem {
    return {
      promotionTarget: isSet(object.promotionTarget) ? globalThis.String(object.promotionTarget) : undefined,
      discountModifier: isSet(object.discountModifier)
        ? promotionExtensionDiscountModifierEnum_PromotionExtensionDiscountModifierFromJSON(object.discountModifier)
        : 0,
      promotionStartDate: isSet(object.promotionStartDate) ? globalThis.String(object.promotionStartDate) : undefined,
      promotionEndDate: isSet(object.promotionEndDate) ? globalThis.String(object.promotionEndDate) : undefined,
      occasion: isSet(object.occasion)
        ? promotionExtensionOccasionEnum_PromotionExtensionOccasionFromJSON(object.occasion)
        : 0,
      finalUrls: globalThis.Array.isArray(object?.finalUrls)
        ? object.finalUrls.map((e: any) => globalThis.String(e))
        : [],
      finalMobileUrls: globalThis.Array.isArray(object?.finalMobileUrls)
        ? object.finalMobileUrls.map((e: any) => globalThis.String(e))
        : [],
      trackingUrlTemplate: isSet(object.trackingUrlTemplate)
        ? globalThis.String(object.trackingUrlTemplate)
        : undefined,
      urlCustomParameters: globalThis.Array.isArray(object?.urlCustomParameters)
        ? object.urlCustomParameters.map((e: any) => CustomParameter.fromJSON(e))
        : [],
      finalUrlSuffix: isSet(object.finalUrlSuffix) ? globalThis.String(object.finalUrlSuffix) : undefined,
      languageCode: isSet(object.languageCode) ? globalThis.String(object.languageCode) : undefined,
      percentOff: isSet(object.percentOff) ? Long.fromValue(object.percentOff) : undefined,
      moneyAmountOff: isSet(object.moneyAmountOff) ? Money.fromJSON(object.moneyAmountOff) : undefined,
      promotionCode: isSet(object.promotionCode) ? globalThis.String(object.promotionCode) : undefined,
      ordersOverAmount: isSet(object.ordersOverAmount) ? Money.fromJSON(object.ordersOverAmount) : undefined,
    };
  },

  toJSON(message: PromotionFeedItem): unknown {
    const obj: any = {};
    if (message.promotionTarget !== undefined) {
      obj.promotionTarget = message.promotionTarget;
    }
    if (message.discountModifier !== 0) {
      obj.discountModifier = promotionExtensionDiscountModifierEnum_PromotionExtensionDiscountModifierToJSON(
        message.discountModifier,
      );
    }
    if (message.promotionStartDate !== undefined) {
      obj.promotionStartDate = message.promotionStartDate;
    }
    if (message.promotionEndDate !== undefined) {
      obj.promotionEndDate = message.promotionEndDate;
    }
    if (message.occasion !== 0) {
      obj.occasion = promotionExtensionOccasionEnum_PromotionExtensionOccasionToJSON(message.occasion);
    }
    if (message.finalUrls?.length) {
      obj.finalUrls = message.finalUrls;
    }
    if (message.finalMobileUrls?.length) {
      obj.finalMobileUrls = message.finalMobileUrls;
    }
    if (message.trackingUrlTemplate !== undefined) {
      obj.trackingUrlTemplate = message.trackingUrlTemplate;
    }
    if (message.urlCustomParameters?.length) {
      obj.urlCustomParameters = message.urlCustomParameters.map((e) => CustomParameter.toJSON(e));
    }
    if (message.finalUrlSuffix !== undefined) {
      obj.finalUrlSuffix = message.finalUrlSuffix;
    }
    if (message.languageCode !== undefined) {
      obj.languageCode = message.languageCode;
    }
    if (message.percentOff !== undefined) {
      obj.percentOff = (message.percentOff || Long.ZERO).toString();
    }
    if (message.moneyAmountOff !== undefined) {
      obj.moneyAmountOff = Money.toJSON(message.moneyAmountOff);
    }
    if (message.promotionCode !== undefined) {
      obj.promotionCode = message.promotionCode;
    }
    if (message.ordersOverAmount !== undefined) {
      obj.ordersOverAmount = Money.toJSON(message.ordersOverAmount);
    }
    return obj;
  },

  create(base?: DeepPartial<PromotionFeedItem>): PromotionFeedItem {
    return PromotionFeedItem.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PromotionFeedItem>): PromotionFeedItem {
    const message = createBasePromotionFeedItem();
    message.promotionTarget = object.promotionTarget ?? undefined;
    message.discountModifier = object.discountModifier ?? 0;
    message.promotionStartDate = object.promotionStartDate ?? undefined;
    message.promotionEndDate = object.promotionEndDate ?? undefined;
    message.occasion = object.occasion ?? 0;
    message.finalUrls = object.finalUrls?.map((e) => e) || [];
    message.finalMobileUrls = object.finalMobileUrls?.map((e) => e) || [];
    message.trackingUrlTemplate = object.trackingUrlTemplate ?? undefined;
    message.urlCustomParameters = object.urlCustomParameters?.map((e) => CustomParameter.fromPartial(e)) || [];
    message.finalUrlSuffix = object.finalUrlSuffix ?? undefined;
    message.languageCode = object.languageCode ?? undefined;
    message.percentOff = (object.percentOff !== undefined && object.percentOff !== null)
      ? Long.fromValue(object.percentOff)
      : undefined;
    message.moneyAmountOff = (object.moneyAmountOff !== undefined && object.moneyAmountOff !== null)
      ? Money.fromPartial(object.moneyAmountOff)
      : undefined;
    message.promotionCode = object.promotionCode ?? undefined;
    message.ordersOverAmount = (object.ordersOverAmount !== undefined && object.ordersOverAmount !== null)
      ? Money.fromPartial(object.ordersOverAmount)
      : undefined;
    return message;
  },
};

function createBaseStructuredSnippetFeedItem(): StructuredSnippetFeedItem {
  return { header: undefined, values: [] };
}

export const StructuredSnippetFeedItem: MessageFns<StructuredSnippetFeedItem> = {
  encode(message: StructuredSnippetFeedItem, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.header !== undefined) {
      writer.uint32(26).string(message.header);
    }
    for (const v of message.values) {
      writer.uint32(34).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StructuredSnippetFeedItem {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStructuredSnippetFeedItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 3:
          if (tag !== 26) {
            break;
          }

          message.header = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.values.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StructuredSnippetFeedItem {
    return {
      header: isSet(object.header) ? globalThis.String(object.header) : undefined,
      values: globalThis.Array.isArray(object?.values) ? object.values.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: StructuredSnippetFeedItem): unknown {
    const obj: any = {};
    if (message.header !== undefined) {
      obj.header = message.header;
    }
    if (message.values?.length) {
      obj.values = message.values;
    }
    return obj;
  },

  create(base?: DeepPartial<StructuredSnippetFeedItem>): StructuredSnippetFeedItem {
    return StructuredSnippetFeedItem.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StructuredSnippetFeedItem>): StructuredSnippetFeedItem {
    const message = createBaseStructuredSnippetFeedItem();
    message.header = object.header ?? undefined;
    message.values = object.values?.map((e) => e) || [];
    return message;
  },
};

function createBaseSitelinkFeedItem(): SitelinkFeedItem {
  return {
    linkText: undefined,
    line1: undefined,
    line2: undefined,
    finalUrls: [],
    finalMobileUrls: [],
    trackingUrlTemplate: undefined,
    urlCustomParameters: [],
    finalUrlSuffix: undefined,
  };
}

export const SitelinkFeedItem: MessageFns<SitelinkFeedItem> = {
  encode(message: SitelinkFeedItem, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.linkText !== undefined) {
      writer.uint32(74).string(message.linkText);
    }
    if (message.line1 !== undefined) {
      writer.uint32(82).string(message.line1);
    }
    if (message.line2 !== undefined) {
      writer.uint32(90).string(message.line2);
    }
    for (const v of message.finalUrls) {
      writer.uint32(98).string(v!);
    }
    for (const v of message.finalMobileUrls) {
      writer.uint32(106).string(v!);
    }
    if (message.trackingUrlTemplate !== undefined) {
      writer.uint32(114).string(message.trackingUrlTemplate);
    }
    for (const v of message.urlCustomParameters) {
      CustomParameter.encode(v!, writer.uint32(58).fork()).join();
    }
    if (message.finalUrlSuffix !== undefined) {
      writer.uint32(122).string(message.finalUrlSuffix);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SitelinkFeedItem {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSitelinkFeedItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 9:
          if (tag !== 74) {
            break;
          }

          message.linkText = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.line1 = reader.string();
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.line2 = reader.string();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.finalUrls.push(reader.string());
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.finalMobileUrls.push(reader.string());
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.trackingUrlTemplate = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.urlCustomParameters.push(CustomParameter.decode(reader, reader.uint32()));
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.finalUrlSuffix = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SitelinkFeedItem {
    return {
      linkText: isSet(object.linkText) ? globalThis.String(object.linkText) : undefined,
      line1: isSet(object.line1) ? globalThis.String(object.line1) : undefined,
      line2: isSet(object.line2) ? globalThis.String(object.line2) : undefined,
      finalUrls: globalThis.Array.isArray(object?.finalUrls)
        ? object.finalUrls.map((e: any) => globalThis.String(e))
        : [],
      finalMobileUrls: globalThis.Array.isArray(object?.finalMobileUrls)
        ? object.finalMobileUrls.map((e: any) => globalThis.String(e))
        : [],
      trackingUrlTemplate: isSet(object.trackingUrlTemplate)
        ? globalThis.String(object.trackingUrlTemplate)
        : undefined,
      urlCustomParameters: globalThis.Array.isArray(object?.urlCustomParameters)
        ? object.urlCustomParameters.map((e: any) => CustomParameter.fromJSON(e))
        : [],
      finalUrlSuffix: isSet(object.finalUrlSuffix) ? globalThis.String(object.finalUrlSuffix) : undefined,
    };
  },

  toJSON(message: SitelinkFeedItem): unknown {
    const obj: any = {};
    if (message.linkText !== undefined) {
      obj.linkText = message.linkText;
    }
    if (message.line1 !== undefined) {
      obj.line1 = message.line1;
    }
    if (message.line2 !== undefined) {
      obj.line2 = message.line2;
    }
    if (message.finalUrls?.length) {
      obj.finalUrls = message.finalUrls;
    }
    if (message.finalMobileUrls?.length) {
      obj.finalMobileUrls = message.finalMobileUrls;
    }
    if (message.trackingUrlTemplate !== undefined) {
      obj.trackingUrlTemplate = message.trackingUrlTemplate;
    }
    if (message.urlCustomParameters?.length) {
      obj.urlCustomParameters = message.urlCustomParameters.map((e) => CustomParameter.toJSON(e));
    }
    if (message.finalUrlSuffix !== undefined) {
      obj.finalUrlSuffix = message.finalUrlSuffix;
    }
    return obj;
  },

  create(base?: DeepPartial<SitelinkFeedItem>): SitelinkFeedItem {
    return SitelinkFeedItem.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SitelinkFeedItem>): SitelinkFeedItem {
    const message = createBaseSitelinkFeedItem();
    message.linkText = object.linkText ?? undefined;
    message.line1 = object.line1 ?? undefined;
    message.line2 = object.line2 ?? undefined;
    message.finalUrls = object.finalUrls?.map((e) => e) || [];
    message.finalMobileUrls = object.finalMobileUrls?.map((e) => e) || [];
    message.trackingUrlTemplate = object.trackingUrlTemplate ?? undefined;
    message.urlCustomParameters = object.urlCustomParameters?.map((e) => CustomParameter.fromPartial(e)) || [];
    message.finalUrlSuffix = object.finalUrlSuffix ?? undefined;
    return message;
  },
};

function createBaseHotelCalloutFeedItem(): HotelCalloutFeedItem {
  return { text: undefined, languageCode: undefined };
}

export const HotelCalloutFeedItem: MessageFns<HotelCalloutFeedItem> = {
  encode(message: HotelCalloutFeedItem, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.text !== undefined) {
      writer.uint32(26).string(message.text);
    }
    if (message.languageCode !== undefined) {
      writer.uint32(34).string(message.languageCode);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HotelCalloutFeedItem {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHotelCalloutFeedItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 3:
          if (tag !== 26) {
            break;
          }

          message.text = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.languageCode = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HotelCalloutFeedItem {
    return {
      text: isSet(object.text) ? globalThis.String(object.text) : undefined,
      languageCode: isSet(object.languageCode) ? globalThis.String(object.languageCode) : undefined,
    };
  },

  toJSON(message: HotelCalloutFeedItem): unknown {
    const obj: any = {};
    if (message.text !== undefined) {
      obj.text = message.text;
    }
    if (message.languageCode !== undefined) {
      obj.languageCode = message.languageCode;
    }
    return obj;
  },

  create(base?: DeepPartial<HotelCalloutFeedItem>): HotelCalloutFeedItem {
    return HotelCalloutFeedItem.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<HotelCalloutFeedItem>): HotelCalloutFeedItem {
    const message = createBaseHotelCalloutFeedItem();
    message.text = object.text ?? undefined;
    message.languageCode = object.languageCode ?? undefined;
    return message;
  },
};

function createBaseImageFeedItem(): ImageFeedItem {
  return { imageAsset: "" };
}

export const ImageFeedItem: MessageFns<ImageFeedItem> = {
  encode(message: ImageFeedItem, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.imageAsset !== "") {
      writer.uint32(10).string(message.imageAsset);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ImageFeedItem {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImageFeedItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.imageAsset = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImageFeedItem {
    return { imageAsset: isSet(object.imageAsset) ? globalThis.String(object.imageAsset) : "" };
  },

  toJSON(message: ImageFeedItem): unknown {
    const obj: any = {};
    if (message.imageAsset !== "") {
      obj.imageAsset = message.imageAsset;
    }
    return obj;
  },

  create(base?: DeepPartial<ImageFeedItem>): ImageFeedItem {
    return ImageFeedItem.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ImageFeedItem>): ImageFeedItem {
    const message = createBaseImageFeedItem();
    message.imageAsset = object.imageAsset ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
