// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v16/common/feed_common.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.googleads.v16.common";

/** Represents a price in a particular currency. */
export interface Money {
  /** Three-character ISO 4217 currency code. */
  currencyCode?:
    | string
    | undefined;
  /** Amount in micros. One million is equivalent to one unit. */
  amountMicros?: Long | undefined;
}

function createBaseMoney(): Money {
  return { currencyCode: undefined, amountMicros: undefined };
}

export const Money: MessageFns<Money> = {
  encode(message: Money, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.currencyCode !== undefined) {
      writer.uint32(26).string(message.currencyCode);
    }
    if (message.amountMicros !== undefined) {
      writer.uint32(32).int64(message.amountMicros.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Money {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMoney();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 3:
          if (tag !== 26) {
            break;
          }

          message.currencyCode = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.amountMicros = Long.fromString(reader.int64().toString());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Money {
    return {
      currencyCode: isSet(object.currencyCode) ? globalThis.String(object.currencyCode) : undefined,
      amountMicros: isSet(object.amountMicros) ? Long.fromValue(object.amountMicros) : undefined,
    };
  },

  toJSON(message: Money): unknown {
    const obj: any = {};
    if (message.currencyCode !== undefined) {
      obj.currencyCode = message.currencyCode;
    }
    if (message.amountMicros !== undefined) {
      obj.amountMicros = (message.amountMicros || Long.ZERO).toString();
    }
    return obj;
  },

  create(base?: DeepPartial<Money>): Money {
    return Money.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Money>): Money {
    const message = createBaseMoney();
    message.currencyCode = object.currencyCode ?? undefined;
    message.amountMicros = (object.amountMicros !== undefined && object.amountMicros !== null)
      ? Long.fromValue(object.amountMicros)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
