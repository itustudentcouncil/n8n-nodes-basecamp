// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v16/common/lifecycle_goals.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.googleads.v16.common";

/** Lifecycle goal value settings. */
export interface LifecycleGoalValueSettings {
  /**
   * Value of the lifecycle goal. For example, for customer acquisition goal,
   * value is the incremental conversion value for new customers who are not of
   * high value.
   */
  value?:
    | number
    | undefined;
  /**
   * High lifetime value of the lifecycle goal. For example, for customer
   * acquisition goal, high lifetime value is the incremental conversion value
   * for new customers who are of high value. High lifetime value should be
   * greater than value, if set.
   * In current stage, high lifetime value feature is in beta and this field
   * is read-only.
   */
  highLifetimeValue?: number | undefined;
}

function createBaseLifecycleGoalValueSettings(): LifecycleGoalValueSettings {
  return { value: undefined, highLifetimeValue: undefined };
}

export const LifecycleGoalValueSettings: MessageFns<LifecycleGoalValueSettings> = {
  encode(message: LifecycleGoalValueSettings, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.value !== undefined) {
      writer.uint32(9).double(message.value);
    }
    if (message.highLifetimeValue !== undefined) {
      writer.uint32(17).double(message.highLifetimeValue);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LifecycleGoalValueSettings {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLifecycleGoalValueSettings();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 9) {
            break;
          }

          message.value = reader.double();
          continue;
        case 2:
          if (tag !== 17) {
            break;
          }

          message.highLifetimeValue = reader.double();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LifecycleGoalValueSettings {
    return {
      value: isSet(object.value) ? globalThis.Number(object.value) : undefined,
      highLifetimeValue: isSet(object.highLifetimeValue) ? globalThis.Number(object.highLifetimeValue) : undefined,
    };
  },

  toJSON(message: LifecycleGoalValueSettings): unknown {
    const obj: any = {};
    if (message.value !== undefined) {
      obj.value = message.value;
    }
    if (message.highLifetimeValue !== undefined) {
      obj.highLifetimeValue = message.highLifetimeValue;
    }
    return obj;
  },

  create(base?: DeepPartial<LifecycleGoalValueSettings>): LifecycleGoalValueSettings {
    return LifecycleGoalValueSettings.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LifecycleGoalValueSettings>): LifecycleGoalValueSettings {
    const message = createBaseLifecycleGoalValueSettings();
    message.value = object.value ?? undefined;
    message.highLifetimeValue = object.highLifetimeValue ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
