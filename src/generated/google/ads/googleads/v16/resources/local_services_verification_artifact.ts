// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v16/resources/local_services_verification_artifact.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { LocalServicesDocumentReadOnly } from "../common/local_services.js";
import {
  LocalServicesBusinessRegistrationCheckRejectionReasonEnum_LocalServicesBusinessRegistrationCheckRejectionReason,
  localServicesBusinessRegistrationCheckRejectionReasonEnum_LocalServicesBusinessRegistrationCheckRejectionReasonFromJSON,
  localServicesBusinessRegistrationCheckRejectionReasonEnum_LocalServicesBusinessRegistrationCheckRejectionReasonToJSON,
} from "../enums/local_services_business_registration_check_rejection_reason.js";
import {
  LocalServicesBusinessRegistrationTypeEnum_LocalServicesBusinessRegistrationType,
  localServicesBusinessRegistrationTypeEnum_LocalServicesBusinessRegistrationTypeFromJSON,
  localServicesBusinessRegistrationTypeEnum_LocalServicesBusinessRegistrationTypeToJSON,
} from "../enums/local_services_business_registration_type.js";
import {
  LocalServicesInsuranceRejectionReasonEnum_LocalServicesInsuranceRejectionReason,
  localServicesInsuranceRejectionReasonEnum_LocalServicesInsuranceRejectionReasonFromJSON,
  localServicesInsuranceRejectionReasonEnum_LocalServicesInsuranceRejectionReasonToJSON,
} from "../enums/local_services_insurance_rejection_reason.js";
import {
  LocalServicesLicenseRejectionReasonEnum_LocalServicesLicenseRejectionReason,
  localServicesLicenseRejectionReasonEnum_LocalServicesLicenseRejectionReasonFromJSON,
  localServicesLicenseRejectionReasonEnum_LocalServicesLicenseRejectionReasonToJSON,
} from "../enums/local_services_license_rejection_reason.js";
import {
  LocalServicesVerificationArtifactStatusEnum_LocalServicesVerificationArtifactStatus,
  localServicesVerificationArtifactStatusEnum_LocalServicesVerificationArtifactStatusFromJSON,
  localServicesVerificationArtifactStatusEnum_LocalServicesVerificationArtifactStatusToJSON,
} from "../enums/local_services_verification_artifact_status.js";
import {
  LocalServicesVerificationArtifactTypeEnum_LocalServicesVerificationArtifactType,
  localServicesVerificationArtifactTypeEnum_LocalServicesVerificationArtifactTypeFromJSON,
  localServicesVerificationArtifactTypeEnum_LocalServicesVerificationArtifactTypeToJSON,
} from "../enums/local_services_verification_artifact_type.js";

export const protobufPackage = "google.ads.googleads.v16.resources";

/** A local services verification resource. */
export interface LocalServicesVerificationArtifact {
  /**
   * Immutable. The resource name of the Local Services Verification.
   * Local Services Verification resource names have the form:
   *
   * `customers/{customer_id}/localServicesVerificationArtifacts/{verification_artifact_id}`
   */
  resourceName: string;
  /** Output only. The ID of the verification artifact. */
  id?:
    | Long
    | undefined;
  /**
   * Output only. The timestamp when this verification artifact was created.
   * The format is "YYYY-MM-DD HH:MM:SS" in the Google Ads account's timezone.
   * Examples: "2018-03-05 09:15:00" or "2018-02-01 14:34:30"
   */
  creationDateTime: string;
  /** Output only. The status of the verification artifact. */
  status: LocalServicesVerificationArtifactStatusEnum_LocalServicesVerificationArtifactStatus;
  /** Output only. The type of the verification artifact. */
  artifactType: LocalServicesVerificationArtifactTypeEnum_LocalServicesVerificationArtifactType;
  /** Output only. A background check verification artifact. */
  backgroundCheckVerificationArtifact?:
    | BackgroundCheckVerificationArtifact
    | undefined;
  /** Output only. An insurance verification artifact. */
  insuranceVerificationArtifact?:
    | InsuranceVerificationArtifact
    | undefined;
  /** Output only. A license verification artifact. */
  licenseVerificationArtifact?:
    | LicenseVerificationArtifact
    | undefined;
  /** Output only. A business registration check verification artifact. */
  businessRegistrationCheckVerificationArtifact?: BusinessRegistrationCheckVerificationArtifact | undefined;
}

/** A proto holding information specific to local services background check. */
export interface BackgroundCheckVerificationArtifact {
  /** Output only. URL to access background case. */
  caseUrl?:
    | string
    | undefined;
  /**
   * Output only. The timestamp when this background check case result was
   * adjudicated. The format is "YYYY-MM-DD HH:MM:SS" in the Google Ads
   * account's timezone. Examples: "2018-03-05 09:15:00" or "2018-02-01
   * 14:34:30"
   */
  finalAdjudicationDateTime?: string | undefined;
}

/** A proto holding information specific to a local services insurance. */
export interface InsuranceVerificationArtifact {
  /**
   * Output only. Insurance amount. This is measured in "micros" of the currency
   * mentioned in the insurance document.
   */
  amountMicros?:
    | Long
    | undefined;
  /** Output only. Insurance document's rejection reason. */
  rejectionReason?:
    | LocalServicesInsuranceRejectionReasonEnum_LocalServicesInsuranceRejectionReason
    | undefined;
  /**
   * Output only. The readonly field containing the information for an uploaded
   * insurance document.
   */
  insuranceDocumentReadonly?: LocalServicesDocumentReadOnly | undefined;
}

/** A proto holding information specific to a local services license. */
export interface LicenseVerificationArtifact {
  /** Output only. License type / name. */
  licenseType?:
    | string
    | undefined;
  /** Output only. License number. */
  licenseNumber?:
    | string
    | undefined;
  /** Output only. First name of the licensee. */
  licenseeFirstName?:
    | string
    | undefined;
  /** Output only. Last name of the licensee. */
  licenseeLastName?:
    | string
    | undefined;
  /** Output only. License rejection reason. */
  rejectionReason?:
    | LocalServicesLicenseRejectionReasonEnum_LocalServicesLicenseRejectionReason
    | undefined;
  /**
   * Output only. The readonly field containing the information for an uploaded
   * license document.
   */
  licenseDocumentReadonly?: LocalServicesDocumentReadOnly | undefined;
}

/**
 * A proto holding information specific to a local services business
 * registration check.
 */
export interface BusinessRegistrationCheckVerificationArtifact {
  /** Output only. The type of business registration check (number, document). */
  registrationType?:
    | LocalServicesBusinessRegistrationTypeEnum_LocalServicesBusinessRegistrationType
    | undefined;
  /**
   * Output only. The id of the check, such as vat_tax_id, representing "VAT Tax
   * ID" requirement.
   */
  checkId?:
    | string
    | undefined;
  /** Output only. Registration document rejection reason. */
  rejectionReason?:
    | LocalServicesBusinessRegistrationCheckRejectionReasonEnum_LocalServicesBusinessRegistrationCheckRejectionReason
    | undefined;
  /** Output only. Message storing government issued number for the business. */
  registrationNumber?:
    | BusinessRegistrationNumber
    | undefined;
  /** Output only. Message storing document info for the business. */
  registrationDocument?: BusinessRegistrationDocument | undefined;
}

/**
 * A proto holding information specific to a local services business
 * registration number.
 */
export interface BusinessRegistrationNumber {
  /** Output only. Government-issued number for the business. */
  number?: string | undefined;
}

/**
 * A proto holding information specific to a local services business
 * registration document.
 */
export interface BusinessRegistrationDocument {
  /**
   * Output only. The readonly field containing the information for an uploaded
   * business registration document.
   */
  documentReadonly?: LocalServicesDocumentReadOnly | undefined;
}

function createBaseLocalServicesVerificationArtifact(): LocalServicesVerificationArtifact {
  return {
    resourceName: "",
    id: undefined,
    creationDateTime: "",
    status: 0,
    artifactType: 0,
    backgroundCheckVerificationArtifact: undefined,
    insuranceVerificationArtifact: undefined,
    licenseVerificationArtifact: undefined,
    businessRegistrationCheckVerificationArtifact: undefined,
  };
}

export const LocalServicesVerificationArtifact: MessageFns<LocalServicesVerificationArtifact> = {
  encode(message: LocalServicesVerificationArtifact, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(10).string(message.resourceName);
    }
    if (message.id !== undefined) {
      writer.uint32(16).int64(message.id.toString());
    }
    if (message.creationDateTime !== "") {
      writer.uint32(26).string(message.creationDateTime);
    }
    if (message.status !== 0) {
      writer.uint32(32).int32(message.status);
    }
    if (message.artifactType !== 0) {
      writer.uint32(40).int32(message.artifactType);
    }
    if (message.backgroundCheckVerificationArtifact !== undefined) {
      BackgroundCheckVerificationArtifact.encode(message.backgroundCheckVerificationArtifact, writer.uint32(50).fork())
        .join();
    }
    if (message.insuranceVerificationArtifact !== undefined) {
      InsuranceVerificationArtifact.encode(message.insuranceVerificationArtifact, writer.uint32(58).fork()).join();
    }
    if (message.licenseVerificationArtifact !== undefined) {
      LicenseVerificationArtifact.encode(message.licenseVerificationArtifact, writer.uint32(66).fork()).join();
    }
    if (message.businessRegistrationCheckVerificationArtifact !== undefined) {
      BusinessRegistrationCheckVerificationArtifact.encode(
        message.businessRegistrationCheckVerificationArtifact,
        writer.uint32(74).fork(),
      ).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LocalServicesVerificationArtifact {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLocalServicesVerificationArtifact();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceName = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.id = Long.fromString(reader.int64().toString());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.creationDateTime = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.artifactType = reader.int32() as any;
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.backgroundCheckVerificationArtifact = BackgroundCheckVerificationArtifact.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.insuranceVerificationArtifact = InsuranceVerificationArtifact.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.licenseVerificationArtifact = LicenseVerificationArtifact.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.businessRegistrationCheckVerificationArtifact = BusinessRegistrationCheckVerificationArtifact.decode(
            reader,
            reader.uint32(),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LocalServicesVerificationArtifact {
    return {
      resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "",
      id: isSet(object.id) ? Long.fromValue(object.id) : undefined,
      creationDateTime: isSet(object.creationDateTime) ? globalThis.String(object.creationDateTime) : "",
      status: isSet(object.status)
        ? localServicesVerificationArtifactStatusEnum_LocalServicesVerificationArtifactStatusFromJSON(object.status)
        : 0,
      artifactType: isSet(object.artifactType)
        ? localServicesVerificationArtifactTypeEnum_LocalServicesVerificationArtifactTypeFromJSON(object.artifactType)
        : 0,
      backgroundCheckVerificationArtifact: isSet(object.backgroundCheckVerificationArtifact)
        ? BackgroundCheckVerificationArtifact.fromJSON(object.backgroundCheckVerificationArtifact)
        : undefined,
      insuranceVerificationArtifact: isSet(object.insuranceVerificationArtifact)
        ? InsuranceVerificationArtifact.fromJSON(object.insuranceVerificationArtifact)
        : undefined,
      licenseVerificationArtifact: isSet(object.licenseVerificationArtifact)
        ? LicenseVerificationArtifact.fromJSON(object.licenseVerificationArtifact)
        : undefined,
      businessRegistrationCheckVerificationArtifact: isSet(object.businessRegistrationCheckVerificationArtifact)
        ? BusinessRegistrationCheckVerificationArtifact.fromJSON(object.businessRegistrationCheckVerificationArtifact)
        : undefined,
    };
  },

  toJSON(message: LocalServicesVerificationArtifact): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    if (message.id !== undefined) {
      obj.id = (message.id || Long.ZERO).toString();
    }
    if (message.creationDateTime !== "") {
      obj.creationDateTime = message.creationDateTime;
    }
    if (message.status !== 0) {
      obj.status = localServicesVerificationArtifactStatusEnum_LocalServicesVerificationArtifactStatusToJSON(
        message.status,
      );
    }
    if (message.artifactType !== 0) {
      obj.artifactType = localServicesVerificationArtifactTypeEnum_LocalServicesVerificationArtifactTypeToJSON(
        message.artifactType,
      );
    }
    if (message.backgroundCheckVerificationArtifact !== undefined) {
      obj.backgroundCheckVerificationArtifact = BackgroundCheckVerificationArtifact.toJSON(
        message.backgroundCheckVerificationArtifact,
      );
    }
    if (message.insuranceVerificationArtifact !== undefined) {
      obj.insuranceVerificationArtifact = InsuranceVerificationArtifact.toJSON(message.insuranceVerificationArtifact);
    }
    if (message.licenseVerificationArtifact !== undefined) {
      obj.licenseVerificationArtifact = LicenseVerificationArtifact.toJSON(message.licenseVerificationArtifact);
    }
    if (message.businessRegistrationCheckVerificationArtifact !== undefined) {
      obj.businessRegistrationCheckVerificationArtifact = BusinessRegistrationCheckVerificationArtifact.toJSON(
        message.businessRegistrationCheckVerificationArtifact,
      );
    }
    return obj;
  },

  create(base?: DeepPartial<LocalServicesVerificationArtifact>): LocalServicesVerificationArtifact {
    return LocalServicesVerificationArtifact.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LocalServicesVerificationArtifact>): LocalServicesVerificationArtifact {
    const message = createBaseLocalServicesVerificationArtifact();
    message.resourceName = object.resourceName ?? "";
    message.id = (object.id !== undefined && object.id !== null) ? Long.fromValue(object.id) : undefined;
    message.creationDateTime = object.creationDateTime ?? "";
    message.status = object.status ?? 0;
    message.artifactType = object.artifactType ?? 0;
    message.backgroundCheckVerificationArtifact =
      (object.backgroundCheckVerificationArtifact !== undefined && object.backgroundCheckVerificationArtifact !== null)
        ? BackgroundCheckVerificationArtifact.fromPartial(object.backgroundCheckVerificationArtifact)
        : undefined;
    message.insuranceVerificationArtifact =
      (object.insuranceVerificationArtifact !== undefined && object.insuranceVerificationArtifact !== null)
        ? InsuranceVerificationArtifact.fromPartial(object.insuranceVerificationArtifact)
        : undefined;
    message.licenseVerificationArtifact =
      (object.licenseVerificationArtifact !== undefined && object.licenseVerificationArtifact !== null)
        ? LicenseVerificationArtifact.fromPartial(object.licenseVerificationArtifact)
        : undefined;
    message.businessRegistrationCheckVerificationArtifact =
      (object.businessRegistrationCheckVerificationArtifact !== undefined &&
          object.businessRegistrationCheckVerificationArtifact !== null)
        ? BusinessRegistrationCheckVerificationArtifact.fromPartial(
          object.businessRegistrationCheckVerificationArtifact,
        )
        : undefined;
    return message;
  },
};

function createBaseBackgroundCheckVerificationArtifact(): BackgroundCheckVerificationArtifact {
  return { caseUrl: undefined, finalAdjudicationDateTime: undefined };
}

export const BackgroundCheckVerificationArtifact: MessageFns<BackgroundCheckVerificationArtifact> = {
  encode(message: BackgroundCheckVerificationArtifact, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.caseUrl !== undefined) {
      writer.uint32(10).string(message.caseUrl);
    }
    if (message.finalAdjudicationDateTime !== undefined) {
      writer.uint32(18).string(message.finalAdjudicationDateTime);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BackgroundCheckVerificationArtifact {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBackgroundCheckVerificationArtifact();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.caseUrl = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.finalAdjudicationDateTime = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BackgroundCheckVerificationArtifact {
    return {
      caseUrl: isSet(object.caseUrl) ? globalThis.String(object.caseUrl) : undefined,
      finalAdjudicationDateTime: isSet(object.finalAdjudicationDateTime)
        ? globalThis.String(object.finalAdjudicationDateTime)
        : undefined,
    };
  },

  toJSON(message: BackgroundCheckVerificationArtifact): unknown {
    const obj: any = {};
    if (message.caseUrl !== undefined) {
      obj.caseUrl = message.caseUrl;
    }
    if (message.finalAdjudicationDateTime !== undefined) {
      obj.finalAdjudicationDateTime = message.finalAdjudicationDateTime;
    }
    return obj;
  },

  create(base?: DeepPartial<BackgroundCheckVerificationArtifact>): BackgroundCheckVerificationArtifact {
    return BackgroundCheckVerificationArtifact.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BackgroundCheckVerificationArtifact>): BackgroundCheckVerificationArtifact {
    const message = createBaseBackgroundCheckVerificationArtifact();
    message.caseUrl = object.caseUrl ?? undefined;
    message.finalAdjudicationDateTime = object.finalAdjudicationDateTime ?? undefined;
    return message;
  },
};

function createBaseInsuranceVerificationArtifact(): InsuranceVerificationArtifact {
  return { amountMicros: undefined, rejectionReason: undefined, insuranceDocumentReadonly: undefined };
}

export const InsuranceVerificationArtifact: MessageFns<InsuranceVerificationArtifact> = {
  encode(message: InsuranceVerificationArtifact, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.amountMicros !== undefined) {
      writer.uint32(8).int64(message.amountMicros.toString());
    }
    if (message.rejectionReason !== undefined) {
      writer.uint32(16).int32(message.rejectionReason);
    }
    if (message.insuranceDocumentReadonly !== undefined) {
      LocalServicesDocumentReadOnly.encode(message.insuranceDocumentReadonly, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InsuranceVerificationArtifact {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInsuranceVerificationArtifact();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.amountMicros = Long.fromString(reader.int64().toString());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.rejectionReason = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.insuranceDocumentReadonly = LocalServicesDocumentReadOnly.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InsuranceVerificationArtifact {
    return {
      amountMicros: isSet(object.amountMicros) ? Long.fromValue(object.amountMicros) : undefined,
      rejectionReason: isSet(object.rejectionReason)
        ? localServicesInsuranceRejectionReasonEnum_LocalServicesInsuranceRejectionReasonFromJSON(
          object.rejectionReason,
        )
        : undefined,
      insuranceDocumentReadonly: isSet(object.insuranceDocumentReadonly)
        ? LocalServicesDocumentReadOnly.fromJSON(object.insuranceDocumentReadonly)
        : undefined,
    };
  },

  toJSON(message: InsuranceVerificationArtifact): unknown {
    const obj: any = {};
    if (message.amountMicros !== undefined) {
      obj.amountMicros = (message.amountMicros || Long.ZERO).toString();
    }
    if (message.rejectionReason !== undefined) {
      obj.rejectionReason = localServicesInsuranceRejectionReasonEnum_LocalServicesInsuranceRejectionReasonToJSON(
        message.rejectionReason,
      );
    }
    if (message.insuranceDocumentReadonly !== undefined) {
      obj.insuranceDocumentReadonly = LocalServicesDocumentReadOnly.toJSON(message.insuranceDocumentReadonly);
    }
    return obj;
  },

  create(base?: DeepPartial<InsuranceVerificationArtifact>): InsuranceVerificationArtifact {
    return InsuranceVerificationArtifact.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<InsuranceVerificationArtifact>): InsuranceVerificationArtifact {
    const message = createBaseInsuranceVerificationArtifact();
    message.amountMicros = (object.amountMicros !== undefined && object.amountMicros !== null)
      ? Long.fromValue(object.amountMicros)
      : undefined;
    message.rejectionReason = object.rejectionReason ?? undefined;
    message.insuranceDocumentReadonly =
      (object.insuranceDocumentReadonly !== undefined && object.insuranceDocumentReadonly !== null)
        ? LocalServicesDocumentReadOnly.fromPartial(object.insuranceDocumentReadonly)
        : undefined;
    return message;
  },
};

function createBaseLicenseVerificationArtifact(): LicenseVerificationArtifact {
  return {
    licenseType: undefined,
    licenseNumber: undefined,
    licenseeFirstName: undefined,
    licenseeLastName: undefined,
    rejectionReason: undefined,
    licenseDocumentReadonly: undefined,
  };
}

export const LicenseVerificationArtifact: MessageFns<LicenseVerificationArtifact> = {
  encode(message: LicenseVerificationArtifact, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.licenseType !== undefined) {
      writer.uint32(10).string(message.licenseType);
    }
    if (message.licenseNumber !== undefined) {
      writer.uint32(18).string(message.licenseNumber);
    }
    if (message.licenseeFirstName !== undefined) {
      writer.uint32(26).string(message.licenseeFirstName);
    }
    if (message.licenseeLastName !== undefined) {
      writer.uint32(34).string(message.licenseeLastName);
    }
    if (message.rejectionReason !== undefined) {
      writer.uint32(40).int32(message.rejectionReason);
    }
    if (message.licenseDocumentReadonly !== undefined) {
      LocalServicesDocumentReadOnly.encode(message.licenseDocumentReadonly, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LicenseVerificationArtifact {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLicenseVerificationArtifact();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.licenseType = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.licenseNumber = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.licenseeFirstName = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.licenseeLastName = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.rejectionReason = reader.int32() as any;
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.licenseDocumentReadonly = LocalServicesDocumentReadOnly.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LicenseVerificationArtifact {
    return {
      licenseType: isSet(object.licenseType) ? globalThis.String(object.licenseType) : undefined,
      licenseNumber: isSet(object.licenseNumber) ? globalThis.String(object.licenseNumber) : undefined,
      licenseeFirstName: isSet(object.licenseeFirstName) ? globalThis.String(object.licenseeFirstName) : undefined,
      licenseeLastName: isSet(object.licenseeLastName) ? globalThis.String(object.licenseeLastName) : undefined,
      rejectionReason: isSet(object.rejectionReason)
        ? localServicesLicenseRejectionReasonEnum_LocalServicesLicenseRejectionReasonFromJSON(object.rejectionReason)
        : undefined,
      licenseDocumentReadonly: isSet(object.licenseDocumentReadonly)
        ? LocalServicesDocumentReadOnly.fromJSON(object.licenseDocumentReadonly)
        : undefined,
    };
  },

  toJSON(message: LicenseVerificationArtifact): unknown {
    const obj: any = {};
    if (message.licenseType !== undefined) {
      obj.licenseType = message.licenseType;
    }
    if (message.licenseNumber !== undefined) {
      obj.licenseNumber = message.licenseNumber;
    }
    if (message.licenseeFirstName !== undefined) {
      obj.licenseeFirstName = message.licenseeFirstName;
    }
    if (message.licenseeLastName !== undefined) {
      obj.licenseeLastName = message.licenseeLastName;
    }
    if (message.rejectionReason !== undefined) {
      obj.rejectionReason = localServicesLicenseRejectionReasonEnum_LocalServicesLicenseRejectionReasonToJSON(
        message.rejectionReason,
      );
    }
    if (message.licenseDocumentReadonly !== undefined) {
      obj.licenseDocumentReadonly = LocalServicesDocumentReadOnly.toJSON(message.licenseDocumentReadonly);
    }
    return obj;
  },

  create(base?: DeepPartial<LicenseVerificationArtifact>): LicenseVerificationArtifact {
    return LicenseVerificationArtifact.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LicenseVerificationArtifact>): LicenseVerificationArtifact {
    const message = createBaseLicenseVerificationArtifact();
    message.licenseType = object.licenseType ?? undefined;
    message.licenseNumber = object.licenseNumber ?? undefined;
    message.licenseeFirstName = object.licenseeFirstName ?? undefined;
    message.licenseeLastName = object.licenseeLastName ?? undefined;
    message.rejectionReason = object.rejectionReason ?? undefined;
    message.licenseDocumentReadonly =
      (object.licenseDocumentReadonly !== undefined && object.licenseDocumentReadonly !== null)
        ? LocalServicesDocumentReadOnly.fromPartial(object.licenseDocumentReadonly)
        : undefined;
    return message;
  },
};

function createBaseBusinessRegistrationCheckVerificationArtifact(): BusinessRegistrationCheckVerificationArtifact {
  return {
    registrationType: undefined,
    checkId: undefined,
    rejectionReason: undefined,
    registrationNumber: undefined,
    registrationDocument: undefined,
  };
}

export const BusinessRegistrationCheckVerificationArtifact: MessageFns<BusinessRegistrationCheckVerificationArtifact> =
  {
    encode(
      message: BusinessRegistrationCheckVerificationArtifact,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.registrationType !== undefined) {
        writer.uint32(24).int32(message.registrationType);
      }
      if (message.checkId !== undefined) {
        writer.uint32(34).string(message.checkId);
      }
      if (message.rejectionReason !== undefined) {
        writer.uint32(40).int32(message.rejectionReason);
      }
      if (message.registrationNumber !== undefined) {
        BusinessRegistrationNumber.encode(message.registrationNumber, writer.uint32(10).fork()).join();
      }
      if (message.registrationDocument !== undefined) {
        BusinessRegistrationDocument.encode(message.registrationDocument, writer.uint32(18).fork()).join();
      }
      return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): BusinessRegistrationCheckVerificationArtifact {
      const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseBusinessRegistrationCheckVerificationArtifact();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 3:
            if (tag !== 24) {
              break;
            }

            message.registrationType = reader.int32() as any;
            continue;
          case 4:
            if (tag !== 34) {
              break;
            }

            message.checkId = reader.string();
            continue;
          case 5:
            if (tag !== 40) {
              break;
            }

            message.rejectionReason = reader.int32() as any;
            continue;
          case 1:
            if (tag !== 10) {
              break;
            }

            message.registrationNumber = BusinessRegistrationNumber.decode(reader, reader.uint32());
            continue;
          case 2:
            if (tag !== 18) {
              break;
            }

            message.registrationDocument = BusinessRegistrationDocument.decode(reader, reader.uint32());
            continue;
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): BusinessRegistrationCheckVerificationArtifact {
      return {
        registrationType: isSet(object.registrationType)
          ? localServicesBusinessRegistrationTypeEnum_LocalServicesBusinessRegistrationTypeFromJSON(
            object.registrationType,
          )
          : undefined,
        checkId: isSet(object.checkId) ? globalThis.String(object.checkId) : undefined,
        rejectionReason: isSet(object.rejectionReason)
          ? localServicesBusinessRegistrationCheckRejectionReasonEnum_LocalServicesBusinessRegistrationCheckRejectionReasonFromJSON(
            object.rejectionReason,
          )
          : undefined,
        registrationNumber: isSet(object.registrationNumber)
          ? BusinessRegistrationNumber.fromJSON(object.registrationNumber)
          : undefined,
        registrationDocument: isSet(object.registrationDocument)
          ? BusinessRegistrationDocument.fromJSON(object.registrationDocument)
          : undefined,
      };
    },

    toJSON(message: BusinessRegistrationCheckVerificationArtifact): unknown {
      const obj: any = {};
      if (message.registrationType !== undefined) {
        obj.registrationType = localServicesBusinessRegistrationTypeEnum_LocalServicesBusinessRegistrationTypeToJSON(
          message.registrationType,
        );
      }
      if (message.checkId !== undefined) {
        obj.checkId = message.checkId;
      }
      if (message.rejectionReason !== undefined) {
        obj.rejectionReason =
          localServicesBusinessRegistrationCheckRejectionReasonEnum_LocalServicesBusinessRegistrationCheckRejectionReasonToJSON(
            message.rejectionReason,
          );
      }
      if (message.registrationNumber !== undefined) {
        obj.registrationNumber = BusinessRegistrationNumber.toJSON(message.registrationNumber);
      }
      if (message.registrationDocument !== undefined) {
        obj.registrationDocument = BusinessRegistrationDocument.toJSON(message.registrationDocument);
      }
      return obj;
    },

    create(
      base?: DeepPartial<BusinessRegistrationCheckVerificationArtifact>,
    ): BusinessRegistrationCheckVerificationArtifact {
      return BusinessRegistrationCheckVerificationArtifact.fromPartial(base ?? {});
    },
    fromPartial(
      object: DeepPartial<BusinessRegistrationCheckVerificationArtifact>,
    ): BusinessRegistrationCheckVerificationArtifact {
      const message = createBaseBusinessRegistrationCheckVerificationArtifact();
      message.registrationType = object.registrationType ?? undefined;
      message.checkId = object.checkId ?? undefined;
      message.rejectionReason = object.rejectionReason ?? undefined;
      message.registrationNumber = (object.registrationNumber !== undefined && object.registrationNumber !== null)
        ? BusinessRegistrationNumber.fromPartial(object.registrationNumber)
        : undefined;
      message.registrationDocument = (object.registrationDocument !== undefined && object.registrationDocument !== null)
        ? BusinessRegistrationDocument.fromPartial(object.registrationDocument)
        : undefined;
      return message;
    },
  };

function createBaseBusinessRegistrationNumber(): BusinessRegistrationNumber {
  return { number: undefined };
}

export const BusinessRegistrationNumber: MessageFns<BusinessRegistrationNumber> = {
  encode(message: BusinessRegistrationNumber, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.number !== undefined) {
      writer.uint32(10).string(message.number);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BusinessRegistrationNumber {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBusinessRegistrationNumber();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.number = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BusinessRegistrationNumber {
    return { number: isSet(object.number) ? globalThis.String(object.number) : undefined };
  },

  toJSON(message: BusinessRegistrationNumber): unknown {
    const obj: any = {};
    if (message.number !== undefined) {
      obj.number = message.number;
    }
    return obj;
  },

  create(base?: DeepPartial<BusinessRegistrationNumber>): BusinessRegistrationNumber {
    return BusinessRegistrationNumber.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BusinessRegistrationNumber>): BusinessRegistrationNumber {
    const message = createBaseBusinessRegistrationNumber();
    message.number = object.number ?? undefined;
    return message;
  },
};

function createBaseBusinessRegistrationDocument(): BusinessRegistrationDocument {
  return { documentReadonly: undefined };
}

export const BusinessRegistrationDocument: MessageFns<BusinessRegistrationDocument> = {
  encode(message: BusinessRegistrationDocument, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.documentReadonly !== undefined) {
      LocalServicesDocumentReadOnly.encode(message.documentReadonly, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BusinessRegistrationDocument {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBusinessRegistrationDocument();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.documentReadonly = LocalServicesDocumentReadOnly.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BusinessRegistrationDocument {
    return {
      documentReadonly: isSet(object.documentReadonly)
        ? LocalServicesDocumentReadOnly.fromJSON(object.documentReadonly)
        : undefined,
    };
  },

  toJSON(message: BusinessRegistrationDocument): unknown {
    const obj: any = {};
    if (message.documentReadonly !== undefined) {
      obj.documentReadonly = LocalServicesDocumentReadOnly.toJSON(message.documentReadonly);
    }
    return obj;
  },

  create(base?: DeepPartial<BusinessRegistrationDocument>): BusinessRegistrationDocument {
    return BusinessRegistrationDocument.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BusinessRegistrationDocument>): BusinessRegistrationDocument {
    const message = createBaseBusinessRegistrationDocument();
    message.documentReadonly = (object.documentReadonly !== undefined && object.documentReadonly !== null)
      ? LocalServicesDocumentReadOnly.fromPartial(object.documentReadonly)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
