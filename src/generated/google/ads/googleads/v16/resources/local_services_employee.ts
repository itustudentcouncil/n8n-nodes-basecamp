// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v16/resources/local_services_employee.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import {
  LocalServicesEmployeeStatusEnum_LocalServicesEmployeeStatus,
  localServicesEmployeeStatusEnum_LocalServicesEmployeeStatusFromJSON,
  localServicesEmployeeStatusEnum_LocalServicesEmployeeStatusToJSON,
} from "../enums/local_services_employee_status.js";
import {
  LocalServicesEmployeeTypeEnum_LocalServicesEmployeeType,
  localServicesEmployeeTypeEnum_LocalServicesEmployeeTypeFromJSON,
  localServicesEmployeeTypeEnum_LocalServicesEmployeeTypeToJSON,
} from "../enums/local_services_employee_type.js";

export const protobufPackage = "google.ads.googleads.v16.resources";

/** A local services employee resource. */
export interface LocalServicesEmployee {
  /**
   * Immutable. The resource name of the Local Services Verification.
   * Local Services Verification resource names have the form:
   *
   * `customers/{customer_id}/localServicesEmployees/{gls_employee_id}`
   */
  resourceName: string;
  /** Output only. The ID of the employee. */
  id?:
    | Long
    | undefined;
  /**
   * Output only. Timestamp of employee creation.
   * The format is "YYYY-MM-DD HH:MM:SS" in the Google Ads account's timezone.
   * Examples: "2018-03-05 09:15:00" or "2018-02-01 14:34:30"
   */
  creationDateTime: string;
  /** Output only. Employee status, such as DELETED or ENABLED. */
  status: LocalServicesEmployeeStatusEnum_LocalServicesEmployeeStatus;
  /** Output only. Employee type. */
  type: LocalServicesEmployeeTypeEnum_LocalServicesEmployeeType;
  /**
   * Output only. A list of degrees this employee has obtained, and wants to
   * feature.
   */
  universityDegrees: UniversityDegree[];
  /**
   * Output only. The institutions where the employee has completed their
   * residency.
   */
  residencies: Residency[];
  /**
   * Output only. The institutions where the employee has completed their
   * fellowship.
   */
  fellowships: Fellowship[];
  /**
   * Output only. Job title for this employee, such as "Senior partner" in legal
   * verticals.
   */
  jobTitle?:
    | string
    | undefined;
  /** Output only. The year that this employee started practicing in this field. */
  yearStartedPracticing?:
    | number
    | undefined;
  /**
   * Output only. Languages that the employee speaks, represented as language
   * tags from https://developers.google.com/admin-sdk/directory/v1/languages
   */
  languagesSpoken: string[];
  /**
   * Output only. Category of the employee. A list of Local Services category
   * IDs can be found at
   * https://developers.google.com/google-ads/api/data/codes-formats#local_services_ids.
   */
  categoryIds: string[];
  /** Output only. NPI id associated with the employee. */
  nationalProviderIdNumber?:
    | string
    | undefined;
  /** Output only. Email address of the employee. */
  emailAddress?:
    | string
    | undefined;
  /** Output only. First name of the employee. */
  firstName?:
    | string
    | undefined;
  /** Output only. Middle name of the employee. */
  middleName?:
    | string
    | undefined;
  /** Output only. Last name of the employee. */
  lastName?: string | undefined;
}

/** A list of degrees this employee has obtained, and wants to feature. */
export interface UniversityDegree {
  /** Output only. Name of the university at which the degree was obtained. */
  institutionName?:
    | string
    | undefined;
  /** Output only. Name of the degree obtained. */
  degree?:
    | string
    | undefined;
  /** Output only. Year of graduation. */
  graduationYear?: number | undefined;
}

/**
 * Details about the employee's medical residency.
 * Residency is a stage of graduate medical education in which a qualified
 * medical professional practices under the supervision of a senior clinician.
 */
export interface Residency {
  /** Output only. Name of the institution at which the residency was completed. */
  institutionName?:
    | string
    | undefined;
  /** Output only. Year of completion. */
  completionYear?: number | undefined;
}

/**
 * Details about the employee's medical Fellowship.
 * Fellowship is a period of medical training that the professional undertakes
 * after finishing their residency.
 */
export interface Fellowship {
  /** Output only. Name of the instutition at which the fellowship was completed. */
  institutionName?:
    | string
    | undefined;
  /** Output only. Year of completion. */
  completionYear?: number | undefined;
}

function createBaseLocalServicesEmployee(): LocalServicesEmployee {
  return {
    resourceName: "",
    id: undefined,
    creationDateTime: "",
    status: 0,
    type: 0,
    universityDegrees: [],
    residencies: [],
    fellowships: [],
    jobTitle: undefined,
    yearStartedPracticing: undefined,
    languagesSpoken: [],
    categoryIds: [],
    nationalProviderIdNumber: undefined,
    emailAddress: undefined,
    firstName: undefined,
    middleName: undefined,
    lastName: undefined,
  };
}

export const LocalServicesEmployee: MessageFns<LocalServicesEmployee> = {
  encode(message: LocalServicesEmployee, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(10).string(message.resourceName);
    }
    if (message.id !== undefined) {
      writer.uint32(16).int64(message.id.toString());
    }
    if (message.creationDateTime !== "") {
      writer.uint32(26).string(message.creationDateTime);
    }
    if (message.status !== 0) {
      writer.uint32(32).int32(message.status);
    }
    if (message.type !== 0) {
      writer.uint32(40).int32(message.type);
    }
    for (const v of message.universityDegrees) {
      UniversityDegree.encode(v!, writer.uint32(50).fork()).join();
    }
    for (const v of message.residencies) {
      Residency.encode(v!, writer.uint32(58).fork()).join();
    }
    for (const v of message.fellowships) {
      Fellowship.encode(v!, writer.uint32(66).fork()).join();
    }
    if (message.jobTitle !== undefined) {
      writer.uint32(74).string(message.jobTitle);
    }
    if (message.yearStartedPracticing !== undefined) {
      writer.uint32(80).int32(message.yearStartedPracticing);
    }
    for (const v of message.languagesSpoken) {
      writer.uint32(90).string(v!);
    }
    for (const v of message.categoryIds) {
      writer.uint32(98).string(v!);
    }
    if (message.nationalProviderIdNumber !== undefined) {
      writer.uint32(106).string(message.nationalProviderIdNumber);
    }
    if (message.emailAddress !== undefined) {
      writer.uint32(114).string(message.emailAddress);
    }
    if (message.firstName !== undefined) {
      writer.uint32(122).string(message.firstName);
    }
    if (message.middleName !== undefined) {
      writer.uint32(130).string(message.middleName);
    }
    if (message.lastName !== undefined) {
      writer.uint32(138).string(message.lastName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LocalServicesEmployee {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLocalServicesEmployee();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceName = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.id = Long.fromString(reader.int64().toString());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.creationDateTime = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.universityDegrees.push(UniversityDegree.decode(reader, reader.uint32()));
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.residencies.push(Residency.decode(reader, reader.uint32()));
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.fellowships.push(Fellowship.decode(reader, reader.uint32()));
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.jobTitle = reader.string();
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.yearStartedPracticing = reader.int32();
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.languagesSpoken.push(reader.string());
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.categoryIds.push(reader.string());
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.nationalProviderIdNumber = reader.string();
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.emailAddress = reader.string();
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.firstName = reader.string();
          continue;
        case 16:
          if (tag !== 130) {
            break;
          }

          message.middleName = reader.string();
          continue;
        case 17:
          if (tag !== 138) {
            break;
          }

          message.lastName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LocalServicesEmployee {
    return {
      resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "",
      id: isSet(object.id) ? Long.fromValue(object.id) : undefined,
      creationDateTime: isSet(object.creationDateTime) ? globalThis.String(object.creationDateTime) : "",
      status: isSet(object.status)
        ? localServicesEmployeeStatusEnum_LocalServicesEmployeeStatusFromJSON(object.status)
        : 0,
      type: isSet(object.type) ? localServicesEmployeeTypeEnum_LocalServicesEmployeeTypeFromJSON(object.type) : 0,
      universityDegrees: globalThis.Array.isArray(object?.universityDegrees)
        ? object.universityDegrees.map((e: any) => UniversityDegree.fromJSON(e))
        : [],
      residencies: globalThis.Array.isArray(object?.residencies)
        ? object.residencies.map((e: any) => Residency.fromJSON(e))
        : [],
      fellowships: globalThis.Array.isArray(object?.fellowships)
        ? object.fellowships.map((e: any) => Fellowship.fromJSON(e))
        : [],
      jobTitle: isSet(object.jobTitle) ? globalThis.String(object.jobTitle) : undefined,
      yearStartedPracticing: isSet(object.yearStartedPracticing)
        ? globalThis.Number(object.yearStartedPracticing)
        : undefined,
      languagesSpoken: globalThis.Array.isArray(object?.languagesSpoken)
        ? object.languagesSpoken.map((e: any) => globalThis.String(e))
        : [],
      categoryIds: globalThis.Array.isArray(object?.categoryIds)
        ? object.categoryIds.map((e: any) => globalThis.String(e))
        : [],
      nationalProviderIdNumber: isSet(object.nationalProviderIdNumber)
        ? globalThis.String(object.nationalProviderIdNumber)
        : undefined,
      emailAddress: isSet(object.emailAddress) ? globalThis.String(object.emailAddress) : undefined,
      firstName: isSet(object.firstName) ? globalThis.String(object.firstName) : undefined,
      middleName: isSet(object.middleName) ? globalThis.String(object.middleName) : undefined,
      lastName: isSet(object.lastName) ? globalThis.String(object.lastName) : undefined,
    };
  },

  toJSON(message: LocalServicesEmployee): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    if (message.id !== undefined) {
      obj.id = (message.id || Long.ZERO).toString();
    }
    if (message.creationDateTime !== "") {
      obj.creationDateTime = message.creationDateTime;
    }
    if (message.status !== 0) {
      obj.status = localServicesEmployeeStatusEnum_LocalServicesEmployeeStatusToJSON(message.status);
    }
    if (message.type !== 0) {
      obj.type = localServicesEmployeeTypeEnum_LocalServicesEmployeeTypeToJSON(message.type);
    }
    if (message.universityDegrees?.length) {
      obj.universityDegrees = message.universityDegrees.map((e) => UniversityDegree.toJSON(e));
    }
    if (message.residencies?.length) {
      obj.residencies = message.residencies.map((e) => Residency.toJSON(e));
    }
    if (message.fellowships?.length) {
      obj.fellowships = message.fellowships.map((e) => Fellowship.toJSON(e));
    }
    if (message.jobTitle !== undefined) {
      obj.jobTitle = message.jobTitle;
    }
    if (message.yearStartedPracticing !== undefined) {
      obj.yearStartedPracticing = Math.round(message.yearStartedPracticing);
    }
    if (message.languagesSpoken?.length) {
      obj.languagesSpoken = message.languagesSpoken;
    }
    if (message.categoryIds?.length) {
      obj.categoryIds = message.categoryIds;
    }
    if (message.nationalProviderIdNumber !== undefined) {
      obj.nationalProviderIdNumber = message.nationalProviderIdNumber;
    }
    if (message.emailAddress !== undefined) {
      obj.emailAddress = message.emailAddress;
    }
    if (message.firstName !== undefined) {
      obj.firstName = message.firstName;
    }
    if (message.middleName !== undefined) {
      obj.middleName = message.middleName;
    }
    if (message.lastName !== undefined) {
      obj.lastName = message.lastName;
    }
    return obj;
  },

  create(base?: DeepPartial<LocalServicesEmployee>): LocalServicesEmployee {
    return LocalServicesEmployee.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LocalServicesEmployee>): LocalServicesEmployee {
    const message = createBaseLocalServicesEmployee();
    message.resourceName = object.resourceName ?? "";
    message.id = (object.id !== undefined && object.id !== null) ? Long.fromValue(object.id) : undefined;
    message.creationDateTime = object.creationDateTime ?? "";
    message.status = object.status ?? 0;
    message.type = object.type ?? 0;
    message.universityDegrees = object.universityDegrees?.map((e) => UniversityDegree.fromPartial(e)) || [];
    message.residencies = object.residencies?.map((e) => Residency.fromPartial(e)) || [];
    message.fellowships = object.fellowships?.map((e) => Fellowship.fromPartial(e)) || [];
    message.jobTitle = object.jobTitle ?? undefined;
    message.yearStartedPracticing = object.yearStartedPracticing ?? undefined;
    message.languagesSpoken = object.languagesSpoken?.map((e) => e) || [];
    message.categoryIds = object.categoryIds?.map((e) => e) || [];
    message.nationalProviderIdNumber = object.nationalProviderIdNumber ?? undefined;
    message.emailAddress = object.emailAddress ?? undefined;
    message.firstName = object.firstName ?? undefined;
    message.middleName = object.middleName ?? undefined;
    message.lastName = object.lastName ?? undefined;
    return message;
  },
};

function createBaseUniversityDegree(): UniversityDegree {
  return { institutionName: undefined, degree: undefined, graduationYear: undefined };
}

export const UniversityDegree: MessageFns<UniversityDegree> = {
  encode(message: UniversityDegree, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.institutionName !== undefined) {
      writer.uint32(10).string(message.institutionName);
    }
    if (message.degree !== undefined) {
      writer.uint32(18).string(message.degree);
    }
    if (message.graduationYear !== undefined) {
      writer.uint32(24).int32(message.graduationYear);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UniversityDegree {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUniversityDegree();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.institutionName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.degree = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.graduationYear = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UniversityDegree {
    return {
      institutionName: isSet(object.institutionName) ? globalThis.String(object.institutionName) : undefined,
      degree: isSet(object.degree) ? globalThis.String(object.degree) : undefined,
      graduationYear: isSet(object.graduationYear) ? globalThis.Number(object.graduationYear) : undefined,
    };
  },

  toJSON(message: UniversityDegree): unknown {
    const obj: any = {};
    if (message.institutionName !== undefined) {
      obj.institutionName = message.institutionName;
    }
    if (message.degree !== undefined) {
      obj.degree = message.degree;
    }
    if (message.graduationYear !== undefined) {
      obj.graduationYear = Math.round(message.graduationYear);
    }
    return obj;
  },

  create(base?: DeepPartial<UniversityDegree>): UniversityDegree {
    return UniversityDegree.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UniversityDegree>): UniversityDegree {
    const message = createBaseUniversityDegree();
    message.institutionName = object.institutionName ?? undefined;
    message.degree = object.degree ?? undefined;
    message.graduationYear = object.graduationYear ?? undefined;
    return message;
  },
};

function createBaseResidency(): Residency {
  return { institutionName: undefined, completionYear: undefined };
}

export const Residency: MessageFns<Residency> = {
  encode(message: Residency, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.institutionName !== undefined) {
      writer.uint32(10).string(message.institutionName);
    }
    if (message.completionYear !== undefined) {
      writer.uint32(16).int32(message.completionYear);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Residency {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResidency();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.institutionName = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.completionYear = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Residency {
    return {
      institutionName: isSet(object.institutionName) ? globalThis.String(object.institutionName) : undefined,
      completionYear: isSet(object.completionYear) ? globalThis.Number(object.completionYear) : undefined,
    };
  },

  toJSON(message: Residency): unknown {
    const obj: any = {};
    if (message.institutionName !== undefined) {
      obj.institutionName = message.institutionName;
    }
    if (message.completionYear !== undefined) {
      obj.completionYear = Math.round(message.completionYear);
    }
    return obj;
  },

  create(base?: DeepPartial<Residency>): Residency {
    return Residency.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Residency>): Residency {
    const message = createBaseResidency();
    message.institutionName = object.institutionName ?? undefined;
    message.completionYear = object.completionYear ?? undefined;
    return message;
  },
};

function createBaseFellowship(): Fellowship {
  return { institutionName: undefined, completionYear: undefined };
}

export const Fellowship: MessageFns<Fellowship> = {
  encode(message: Fellowship, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.institutionName !== undefined) {
      writer.uint32(10).string(message.institutionName);
    }
    if (message.completionYear !== undefined) {
      writer.uint32(16).int32(message.completionYear);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Fellowship {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFellowship();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.institutionName = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.completionYear = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Fellowship {
    return {
      institutionName: isSet(object.institutionName) ? globalThis.String(object.institutionName) : undefined,
      completionYear: isSet(object.completionYear) ? globalThis.Number(object.completionYear) : undefined,
    };
  },

  toJSON(message: Fellowship): unknown {
    const obj: any = {};
    if (message.institutionName !== undefined) {
      obj.institutionName = message.institutionName;
    }
    if (message.completionYear !== undefined) {
      obj.completionYear = Math.round(message.completionYear);
    }
    return obj;
  },

  create(base?: DeepPartial<Fellowship>): Fellowship {
    return Fellowship.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Fellowship>): Fellowship {
    const message = createBaseFellowship();
    message.institutionName = object.institutionName ?? undefined;
    message.completionYear = object.completionYear ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
