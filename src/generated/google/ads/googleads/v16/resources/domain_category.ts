// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v16/resources/domain_category.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.googleads.v16.resources";

/**
 * A category generated automatically by crawling a domain. If a campaign uses
 * the DynamicSearchAdsSetting, then domain categories will be generated for
 * the domain. The categories can be targeted using WebpageConditionInfo.
 * See: https://support.google.com/google-ads/answer/2471185
 */
export interface DomainCategory {
  /**
   * Output only. The resource name of the domain category.
   * Domain category resource names have the form:
   *
   * `customers/{customer_id}/domainCategories/{campaign_id}~{category_base64}~{language_code}`
   */
  resourceName: string;
  /** Output only. The campaign this category is recommended for. */
  campaign?:
    | string
    | undefined;
  /**
   * Output only. Recommended category for the website domain, for example, if
   * you have a website about electronics, the categories could be "cameras",
   * "televisions", etc.
   */
  category?:
    | string
    | undefined;
  /**
   * Output only. The language code specifying the language of the website, for
   * example, "en" for English. The language can be specified in the
   * DynamicSearchAdsSetting required for dynamic search ads. This is the
   * language of the pages from your website that you want Google Ads to find,
   * create ads for, and match searches with.
   */
  languageCode?:
    | string
    | undefined;
  /**
   * Output only. The domain for the website. The domain can be specified in the
   * DynamicSearchAdsSetting required for dynamic search ads.
   */
  domain?:
    | string
    | undefined;
  /** Output only. Fraction of pages on your site that this category matches. */
  coverageFraction?:
    | number
    | undefined;
  /**
   * Output only. The position of this category in the set of categories. Lower
   * numbers indicate a better match for the domain. null indicates not
   * recommended.
   */
  categoryRank?:
    | Long
    | undefined;
  /** Output only. Indicates whether this category has sub-categories. */
  hasChildren?:
    | boolean
    | undefined;
  /** Output only. The recommended cost per click for the category. */
  recommendedCpcBidMicros?: Long | undefined;
}

function createBaseDomainCategory(): DomainCategory {
  return {
    resourceName: "",
    campaign: undefined,
    category: undefined,
    languageCode: undefined,
    domain: undefined,
    coverageFraction: undefined,
    categoryRank: undefined,
    hasChildren: undefined,
    recommendedCpcBidMicros: undefined,
  };
}

export const DomainCategory: MessageFns<DomainCategory> = {
  encode(message: DomainCategory, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(10).string(message.resourceName);
    }
    if (message.campaign !== undefined) {
      writer.uint32(82).string(message.campaign);
    }
    if (message.category !== undefined) {
      writer.uint32(90).string(message.category);
    }
    if (message.languageCode !== undefined) {
      writer.uint32(98).string(message.languageCode);
    }
    if (message.domain !== undefined) {
      writer.uint32(106).string(message.domain);
    }
    if (message.coverageFraction !== undefined) {
      writer.uint32(113).double(message.coverageFraction);
    }
    if (message.categoryRank !== undefined) {
      writer.uint32(120).int64(message.categoryRank.toString());
    }
    if (message.hasChildren !== undefined) {
      writer.uint32(128).bool(message.hasChildren);
    }
    if (message.recommendedCpcBidMicros !== undefined) {
      writer.uint32(136).int64(message.recommendedCpcBidMicros.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DomainCategory {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDomainCategory();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceName = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.campaign = reader.string();
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.category = reader.string();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.languageCode = reader.string();
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.domain = reader.string();
          continue;
        case 14:
          if (tag !== 113) {
            break;
          }

          message.coverageFraction = reader.double();
          continue;
        case 15:
          if (tag !== 120) {
            break;
          }

          message.categoryRank = Long.fromString(reader.int64().toString());
          continue;
        case 16:
          if (tag !== 128) {
            break;
          }

          message.hasChildren = reader.bool();
          continue;
        case 17:
          if (tag !== 136) {
            break;
          }

          message.recommendedCpcBidMicros = Long.fromString(reader.int64().toString());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DomainCategory {
    return {
      resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "",
      campaign: isSet(object.campaign) ? globalThis.String(object.campaign) : undefined,
      category: isSet(object.category) ? globalThis.String(object.category) : undefined,
      languageCode: isSet(object.languageCode) ? globalThis.String(object.languageCode) : undefined,
      domain: isSet(object.domain) ? globalThis.String(object.domain) : undefined,
      coverageFraction: isSet(object.coverageFraction) ? globalThis.Number(object.coverageFraction) : undefined,
      categoryRank: isSet(object.categoryRank) ? Long.fromValue(object.categoryRank) : undefined,
      hasChildren: isSet(object.hasChildren) ? globalThis.Boolean(object.hasChildren) : undefined,
      recommendedCpcBidMicros: isSet(object.recommendedCpcBidMicros)
        ? Long.fromValue(object.recommendedCpcBidMicros)
        : undefined,
    };
  },

  toJSON(message: DomainCategory): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    if (message.campaign !== undefined) {
      obj.campaign = message.campaign;
    }
    if (message.category !== undefined) {
      obj.category = message.category;
    }
    if (message.languageCode !== undefined) {
      obj.languageCode = message.languageCode;
    }
    if (message.domain !== undefined) {
      obj.domain = message.domain;
    }
    if (message.coverageFraction !== undefined) {
      obj.coverageFraction = message.coverageFraction;
    }
    if (message.categoryRank !== undefined) {
      obj.categoryRank = (message.categoryRank || Long.ZERO).toString();
    }
    if (message.hasChildren !== undefined) {
      obj.hasChildren = message.hasChildren;
    }
    if (message.recommendedCpcBidMicros !== undefined) {
      obj.recommendedCpcBidMicros = (message.recommendedCpcBidMicros || Long.ZERO).toString();
    }
    return obj;
  },

  create(base?: DeepPartial<DomainCategory>): DomainCategory {
    return DomainCategory.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DomainCategory>): DomainCategory {
    const message = createBaseDomainCategory();
    message.resourceName = object.resourceName ?? "";
    message.campaign = object.campaign ?? undefined;
    message.category = object.category ?? undefined;
    message.languageCode = object.languageCode ?? undefined;
    message.domain = object.domain ?? undefined;
    message.coverageFraction = object.coverageFraction ?? undefined;
    message.categoryRank = (object.categoryRank !== undefined && object.categoryRank !== null)
      ? Long.fromValue(object.categoryRank)
      : undefined;
    message.hasChildren = object.hasChildren ?? undefined;
    message.recommendedCpcBidMicros =
      (object.recommendedCpcBidMicros !== undefined && object.recommendedCpcBidMicros !== null)
        ? Long.fromValue(object.recommendedCpcBidMicros)
        : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
