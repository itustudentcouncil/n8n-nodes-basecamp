// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v16/resources/account_link.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import {
  AccountLinkStatusEnum_AccountLinkStatus,
  accountLinkStatusEnum_AccountLinkStatusFromJSON,
  accountLinkStatusEnum_AccountLinkStatusToJSON,
} from "../enums/account_link_status.js";
import {
  LinkedAccountTypeEnum_LinkedAccountType,
  linkedAccountTypeEnum_LinkedAccountTypeFromJSON,
  linkedAccountTypeEnum_LinkedAccountTypeToJSON,
} from "../enums/linked_account_type.js";
import {
  MobileAppVendorEnum_MobileAppVendor,
  mobileAppVendorEnum_MobileAppVendorFromJSON,
  mobileAppVendorEnum_MobileAppVendorToJSON,
} from "../enums/mobile_app_vendor.js";

export const protobufPackage = "google.ads.googleads.v16.resources";

/**
 * Represents the data sharing connection between a Google Ads account and
 * another account
 */
export interface AccountLink {
  /**
   * Immutable. Resource name of the account link.
   * AccountLink resource names have the form:
   * `customers/{customer_id}/accountLinks/{account_link_id}`
   */
  resourceName: string;
  /**
   * Output only. The ID of the link.
   * This field is read only.
   */
  accountLinkId?:
    | Long
    | undefined;
  /** The status of the link. */
  status: AccountLinkStatusEnum_AccountLinkStatus;
  /** Output only. The type of the linked account. */
  type: LinkedAccountTypeEnum_LinkedAccountType;
  /** Immutable. A third party app analytics link. */
  thirdPartyAppAnalytics?: ThirdPartyAppAnalyticsLinkIdentifier | undefined;
}

/** The identifiers of a Third Party App Analytics Link. */
export interface ThirdPartyAppAnalyticsLinkIdentifier {
  /**
   * Immutable. The ID of the app analytics provider.
   * This field should not be empty when creating a new third
   * party app analytics link. It is unable to be modified after the creation of
   * the link.
   */
  appAnalyticsProviderId?:
    | Long
    | undefined;
  /**
   * Immutable. A string that uniquely identifies a mobile application from
   * which the data was collected to the Google Ads API. For iOS, the ID string
   * is the 9 digit string that appears at the end of an App Store URL (for
   * example, "422689480" for "Gmail" whose App Store link is
   * https://apps.apple.com/us/app/gmail-email-by-google/id422689480). For
   * Android, the ID string is the application's package name (for example,
   * "com.google.android.gm" for "Gmail" given Google Play link
   * https://play.google.com/store/apps/details?id=com.google.android.gm)
   * This field should not be empty when creating a new third
   * party app analytics link. It is unable to be modified after the creation of
   * the link.
   */
  appId?:
    | string
    | undefined;
  /**
   * Immutable. The vendor of the app.
   * This field should not be empty when creating a new third
   * party app analytics link. It is unable to be modified after the creation of
   * the link.
   */
  appVendor: MobileAppVendorEnum_MobileAppVendor;
}

function createBaseAccountLink(): AccountLink {
  return { resourceName: "", accountLinkId: undefined, status: 0, type: 0, thirdPartyAppAnalytics: undefined };
}

export const AccountLink: MessageFns<AccountLink> = {
  encode(message: AccountLink, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(10).string(message.resourceName);
    }
    if (message.accountLinkId !== undefined) {
      writer.uint32(64).int64(message.accountLinkId.toString());
    }
    if (message.status !== 0) {
      writer.uint32(24).int32(message.status);
    }
    if (message.type !== 0) {
      writer.uint32(32).int32(message.type);
    }
    if (message.thirdPartyAppAnalytics !== undefined) {
      ThirdPartyAppAnalyticsLinkIdentifier.encode(message.thirdPartyAppAnalytics, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AccountLink {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAccountLink();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceName = reader.string();
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.accountLinkId = Long.fromString(reader.int64().toString());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.thirdPartyAppAnalytics = ThirdPartyAppAnalyticsLinkIdentifier.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AccountLink {
    return {
      resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "",
      accountLinkId: isSet(object.accountLinkId) ? Long.fromValue(object.accountLinkId) : undefined,
      status: isSet(object.status) ? accountLinkStatusEnum_AccountLinkStatusFromJSON(object.status) : 0,
      type: isSet(object.type) ? linkedAccountTypeEnum_LinkedAccountTypeFromJSON(object.type) : 0,
      thirdPartyAppAnalytics: isSet(object.thirdPartyAppAnalytics)
        ? ThirdPartyAppAnalyticsLinkIdentifier.fromJSON(object.thirdPartyAppAnalytics)
        : undefined,
    };
  },

  toJSON(message: AccountLink): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    if (message.accountLinkId !== undefined) {
      obj.accountLinkId = (message.accountLinkId || Long.ZERO).toString();
    }
    if (message.status !== 0) {
      obj.status = accountLinkStatusEnum_AccountLinkStatusToJSON(message.status);
    }
    if (message.type !== 0) {
      obj.type = linkedAccountTypeEnum_LinkedAccountTypeToJSON(message.type);
    }
    if (message.thirdPartyAppAnalytics !== undefined) {
      obj.thirdPartyAppAnalytics = ThirdPartyAppAnalyticsLinkIdentifier.toJSON(message.thirdPartyAppAnalytics);
    }
    return obj;
  },

  create(base?: DeepPartial<AccountLink>): AccountLink {
    return AccountLink.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AccountLink>): AccountLink {
    const message = createBaseAccountLink();
    message.resourceName = object.resourceName ?? "";
    message.accountLinkId = (object.accountLinkId !== undefined && object.accountLinkId !== null)
      ? Long.fromValue(object.accountLinkId)
      : undefined;
    message.status = object.status ?? 0;
    message.type = object.type ?? 0;
    message.thirdPartyAppAnalytics =
      (object.thirdPartyAppAnalytics !== undefined && object.thirdPartyAppAnalytics !== null)
        ? ThirdPartyAppAnalyticsLinkIdentifier.fromPartial(object.thirdPartyAppAnalytics)
        : undefined;
    return message;
  },
};

function createBaseThirdPartyAppAnalyticsLinkIdentifier(): ThirdPartyAppAnalyticsLinkIdentifier {
  return { appAnalyticsProviderId: undefined, appId: undefined, appVendor: 0 };
}

export const ThirdPartyAppAnalyticsLinkIdentifier: MessageFns<ThirdPartyAppAnalyticsLinkIdentifier> = {
  encode(message: ThirdPartyAppAnalyticsLinkIdentifier, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.appAnalyticsProviderId !== undefined) {
      writer.uint32(32).int64(message.appAnalyticsProviderId.toString());
    }
    if (message.appId !== undefined) {
      writer.uint32(42).string(message.appId);
    }
    if (message.appVendor !== 0) {
      writer.uint32(24).int32(message.appVendor);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ThirdPartyAppAnalyticsLinkIdentifier {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseThirdPartyAppAnalyticsLinkIdentifier();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 4:
          if (tag !== 32) {
            break;
          }

          message.appAnalyticsProviderId = Long.fromString(reader.int64().toString());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.appId = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.appVendor = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ThirdPartyAppAnalyticsLinkIdentifier {
    return {
      appAnalyticsProviderId: isSet(object.appAnalyticsProviderId)
        ? Long.fromValue(object.appAnalyticsProviderId)
        : undefined,
      appId: isSet(object.appId) ? globalThis.String(object.appId) : undefined,
      appVendor: isSet(object.appVendor) ? mobileAppVendorEnum_MobileAppVendorFromJSON(object.appVendor) : 0,
    };
  },

  toJSON(message: ThirdPartyAppAnalyticsLinkIdentifier): unknown {
    const obj: any = {};
    if (message.appAnalyticsProviderId !== undefined) {
      obj.appAnalyticsProviderId = (message.appAnalyticsProviderId || Long.ZERO).toString();
    }
    if (message.appId !== undefined) {
      obj.appId = message.appId;
    }
    if (message.appVendor !== 0) {
      obj.appVendor = mobileAppVendorEnum_MobileAppVendorToJSON(message.appVendor);
    }
    return obj;
  },

  create(base?: DeepPartial<ThirdPartyAppAnalyticsLinkIdentifier>): ThirdPartyAppAnalyticsLinkIdentifier {
    return ThirdPartyAppAnalyticsLinkIdentifier.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ThirdPartyAppAnalyticsLinkIdentifier>): ThirdPartyAppAnalyticsLinkIdentifier {
    const message = createBaseThirdPartyAppAnalyticsLinkIdentifier();
    message.appAnalyticsProviderId =
      (object.appAnalyticsProviderId !== undefined && object.appAnalyticsProviderId !== null)
        ? Long.fromValue(object.appAnalyticsProviderId)
        : undefined;
    message.appId = object.appId ?? undefined;
    message.appVendor = object.appVendor ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
