// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v16/resources/ad_group_ad.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { PolicyTopicEntry } from "../common/policy.js";
import {
  AdGroupAdPrimaryStatusEnum_AdGroupAdPrimaryStatus,
  adGroupAdPrimaryStatusEnum_AdGroupAdPrimaryStatusFromJSON,
  adGroupAdPrimaryStatusEnum_AdGroupAdPrimaryStatusToJSON,
} from "../enums/ad_group_ad_primary_status.js";
import {
  AdGroupAdPrimaryStatusReasonEnum_AdGroupAdPrimaryStatusReason,
  adGroupAdPrimaryStatusReasonEnum_AdGroupAdPrimaryStatusReasonFromJSON,
  adGroupAdPrimaryStatusReasonEnum_AdGroupAdPrimaryStatusReasonToJSON,
} from "../enums/ad_group_ad_primary_status_reason.js";
import {
  AdGroupAdStatusEnum_AdGroupAdStatus,
  adGroupAdStatusEnum_AdGroupAdStatusFromJSON,
  adGroupAdStatusEnum_AdGroupAdStatusToJSON,
} from "../enums/ad_group_ad_status.js";
import {
  AdStrengthEnum_AdStrength,
  adStrengthEnum_AdStrengthFromJSON,
  adStrengthEnum_AdStrengthToJSON,
} from "../enums/ad_strength.js";
import {
  PolicyApprovalStatusEnum_PolicyApprovalStatus,
  policyApprovalStatusEnum_PolicyApprovalStatusFromJSON,
  policyApprovalStatusEnum_PolicyApprovalStatusToJSON,
} from "../enums/policy_approval_status.js";
import {
  PolicyReviewStatusEnum_PolicyReviewStatus,
  policyReviewStatusEnum_PolicyReviewStatusFromJSON,
  policyReviewStatusEnum_PolicyReviewStatusToJSON,
} from "../enums/policy_review_status.js";
import { Ad } from "./ad.js";

export const protobufPackage = "google.ads.googleads.v16.resources";

/** An ad group ad. */
export interface AdGroupAd {
  /**
   * Immutable. The resource name of the ad.
   * Ad group ad resource names have the form:
   *
   * `customers/{customer_id}/adGroupAds/{ad_group_id}~{ad_id}`
   */
  resourceName: string;
  /** The status of the ad. */
  status: AdGroupAdStatusEnum_AdGroupAdStatus;
  /** Immutable. The ad group to which the ad belongs. */
  adGroup?:
    | string
    | undefined;
  /** Immutable. The ad. */
  ad:
    | Ad
    | undefined;
  /** Output only. Policy information for the ad. */
  policySummary:
    | AdGroupAdPolicySummary
    | undefined;
  /** Output only. Overall ad strength for this ad group ad. */
  adStrength: AdStrengthEnum_AdStrength;
  /**
   * Output only. A list of recommendations to improve the ad strength. For
   * example, a recommendation could be "Try adding a few more unique headlines
   * or unpinning some assets.".
   */
  actionItems: string[];
  /** Output only. The resource names of labels attached to this ad group ad. */
  labels: string[];
  /**
   * Output only. Provides aggregated view into why an ad group ad is not
   * serving or not serving optimally.
   */
  primaryStatus: AdGroupAdPrimaryStatusEnum_AdGroupAdPrimaryStatus;
  /**
   * Output only. Provides reasons for why an ad group ad is not serving or not
   * serving optimally.
   */
  primaryStatusReasons: AdGroupAdPrimaryStatusReasonEnum_AdGroupAdPrimaryStatusReason[];
}

/** Contains policy information for an ad. */
export interface AdGroupAdPolicySummary {
  /** Output only. The list of policy findings for this ad. */
  policyTopicEntries: PolicyTopicEntry[];
  /** Output only. Where in the review process this ad is. */
  reviewStatus: PolicyReviewStatusEnum_PolicyReviewStatus;
  /**
   * Output only. The overall approval status of this ad, calculated based on
   * the status of its individual policy topic entries.
   */
  approvalStatus: PolicyApprovalStatusEnum_PolicyApprovalStatus;
}

function createBaseAdGroupAd(): AdGroupAd {
  return {
    resourceName: "",
    status: 0,
    adGroup: undefined,
    ad: undefined,
    policySummary: undefined,
    adStrength: 0,
    actionItems: [],
    labels: [],
    primaryStatus: 0,
    primaryStatusReasons: [],
  };
}

export const AdGroupAd: MessageFns<AdGroupAd> = {
  encode(message: AdGroupAd, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(10).string(message.resourceName);
    }
    if (message.status !== 0) {
      writer.uint32(24).int32(message.status);
    }
    if (message.adGroup !== undefined) {
      writer.uint32(74).string(message.adGroup);
    }
    if (message.ad !== undefined) {
      Ad.encode(message.ad, writer.uint32(42).fork()).join();
    }
    if (message.policySummary !== undefined) {
      AdGroupAdPolicySummary.encode(message.policySummary, writer.uint32(50).fork()).join();
    }
    if (message.adStrength !== 0) {
      writer.uint32(56).int32(message.adStrength);
    }
    for (const v of message.actionItems) {
      writer.uint32(106).string(v!);
    }
    for (const v of message.labels) {
      writer.uint32(82).string(v!);
    }
    if (message.primaryStatus !== 0) {
      writer.uint32(128).int32(message.primaryStatus);
    }
    writer.uint32(138).fork();
    for (const v of message.primaryStatusReasons) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AdGroupAd {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAdGroupAd();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceName = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.adGroup = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.ad = Ad.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.policySummary = AdGroupAdPolicySummary.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.adStrength = reader.int32() as any;
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.actionItems.push(reader.string());
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.labels.push(reader.string());
          continue;
        case 16:
          if (tag !== 128) {
            break;
          }

          message.primaryStatus = reader.int32() as any;
          continue;
        case 17:
          if (tag === 136) {
            message.primaryStatusReasons.push(reader.int32() as any);

            continue;
          }

          if (tag === 138) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.primaryStatusReasons.push(reader.int32() as any);
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AdGroupAd {
    return {
      resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "",
      status: isSet(object.status) ? adGroupAdStatusEnum_AdGroupAdStatusFromJSON(object.status) : 0,
      adGroup: isSet(object.adGroup) ? globalThis.String(object.adGroup) : undefined,
      ad: isSet(object.ad) ? Ad.fromJSON(object.ad) : undefined,
      policySummary: isSet(object.policySummary) ? AdGroupAdPolicySummary.fromJSON(object.policySummary) : undefined,
      adStrength: isSet(object.adStrength) ? adStrengthEnum_AdStrengthFromJSON(object.adStrength) : 0,
      actionItems: globalThis.Array.isArray(object?.actionItems)
        ? object.actionItems.map((e: any) => globalThis.String(e))
        : [],
      labels: globalThis.Array.isArray(object?.labels) ? object.labels.map((e: any) => globalThis.String(e)) : [],
      primaryStatus: isSet(object.primaryStatus)
        ? adGroupAdPrimaryStatusEnum_AdGroupAdPrimaryStatusFromJSON(object.primaryStatus)
        : 0,
      primaryStatusReasons: globalThis.Array.isArray(object?.primaryStatusReasons)
        ? object.primaryStatusReasons.map((e: any) =>
          adGroupAdPrimaryStatusReasonEnum_AdGroupAdPrimaryStatusReasonFromJSON(e)
        )
        : [],
    };
  },

  toJSON(message: AdGroupAd): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    if (message.status !== 0) {
      obj.status = adGroupAdStatusEnum_AdGroupAdStatusToJSON(message.status);
    }
    if (message.adGroup !== undefined) {
      obj.adGroup = message.adGroup;
    }
    if (message.ad !== undefined) {
      obj.ad = Ad.toJSON(message.ad);
    }
    if (message.policySummary !== undefined) {
      obj.policySummary = AdGroupAdPolicySummary.toJSON(message.policySummary);
    }
    if (message.adStrength !== 0) {
      obj.adStrength = adStrengthEnum_AdStrengthToJSON(message.adStrength);
    }
    if (message.actionItems?.length) {
      obj.actionItems = message.actionItems;
    }
    if (message.labels?.length) {
      obj.labels = message.labels;
    }
    if (message.primaryStatus !== 0) {
      obj.primaryStatus = adGroupAdPrimaryStatusEnum_AdGroupAdPrimaryStatusToJSON(message.primaryStatus);
    }
    if (message.primaryStatusReasons?.length) {
      obj.primaryStatusReasons = message.primaryStatusReasons.map((e) =>
        adGroupAdPrimaryStatusReasonEnum_AdGroupAdPrimaryStatusReasonToJSON(e)
      );
    }
    return obj;
  },

  create(base?: DeepPartial<AdGroupAd>): AdGroupAd {
    return AdGroupAd.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AdGroupAd>): AdGroupAd {
    const message = createBaseAdGroupAd();
    message.resourceName = object.resourceName ?? "";
    message.status = object.status ?? 0;
    message.adGroup = object.adGroup ?? undefined;
    message.ad = (object.ad !== undefined && object.ad !== null) ? Ad.fromPartial(object.ad) : undefined;
    message.policySummary = (object.policySummary !== undefined && object.policySummary !== null)
      ? AdGroupAdPolicySummary.fromPartial(object.policySummary)
      : undefined;
    message.adStrength = object.adStrength ?? 0;
    message.actionItems = object.actionItems?.map((e) => e) || [];
    message.labels = object.labels?.map((e) => e) || [];
    message.primaryStatus = object.primaryStatus ?? 0;
    message.primaryStatusReasons = object.primaryStatusReasons?.map((e) => e) || [];
    return message;
  },
};

function createBaseAdGroupAdPolicySummary(): AdGroupAdPolicySummary {
  return { policyTopicEntries: [], reviewStatus: 0, approvalStatus: 0 };
}

export const AdGroupAdPolicySummary: MessageFns<AdGroupAdPolicySummary> = {
  encode(message: AdGroupAdPolicySummary, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.policyTopicEntries) {
      PolicyTopicEntry.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.reviewStatus !== 0) {
      writer.uint32(16).int32(message.reviewStatus);
    }
    if (message.approvalStatus !== 0) {
      writer.uint32(24).int32(message.approvalStatus);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AdGroupAdPolicySummary {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAdGroupAdPolicySummary();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.policyTopicEntries.push(PolicyTopicEntry.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.reviewStatus = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.approvalStatus = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AdGroupAdPolicySummary {
    return {
      policyTopicEntries: globalThis.Array.isArray(object?.policyTopicEntries)
        ? object.policyTopicEntries.map((e: any) => PolicyTopicEntry.fromJSON(e))
        : [],
      reviewStatus: isSet(object.reviewStatus)
        ? policyReviewStatusEnum_PolicyReviewStatusFromJSON(object.reviewStatus)
        : 0,
      approvalStatus: isSet(object.approvalStatus)
        ? policyApprovalStatusEnum_PolicyApprovalStatusFromJSON(object.approvalStatus)
        : 0,
    };
  },

  toJSON(message: AdGroupAdPolicySummary): unknown {
    const obj: any = {};
    if (message.policyTopicEntries?.length) {
      obj.policyTopicEntries = message.policyTopicEntries.map((e) => PolicyTopicEntry.toJSON(e));
    }
    if (message.reviewStatus !== 0) {
      obj.reviewStatus = policyReviewStatusEnum_PolicyReviewStatusToJSON(message.reviewStatus);
    }
    if (message.approvalStatus !== 0) {
      obj.approvalStatus = policyApprovalStatusEnum_PolicyApprovalStatusToJSON(message.approvalStatus);
    }
    return obj;
  },

  create(base?: DeepPartial<AdGroupAdPolicySummary>): AdGroupAdPolicySummary {
    return AdGroupAdPolicySummary.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AdGroupAdPolicySummary>): AdGroupAdPolicySummary {
    const message = createBaseAdGroupAdPolicySummary();
    message.policyTopicEntries = object.policyTopicEntries?.map((e) => PolicyTopicEntry.fromPartial(e)) || [];
    message.reviewStatus = object.reviewStatus ?? 0;
    message.approvalStatus = object.approvalStatus ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
