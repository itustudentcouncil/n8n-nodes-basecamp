// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v16/resources/ad_parameter.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.googleads.v16.resources";

/**
 * An ad parameter that is used to update numeric values (such as prices or
 * inventory levels) in any text line of an ad (including URLs). There can
 * be a maximum of two AdParameters per ad group criterion. (One with
 * parameter_index = 1 and one with parameter_index = 2.)
 * In the ad the parameters are referenced by a placeholder of the form
 * "{param#:value}". For example, "{param1:$17}"
 */
export interface AdParameter {
  /**
   * Immutable. The resource name of the ad parameter.
   * Ad parameter resource names have the form:
   *
   * `customers/{customer_id}/adParameters/{ad_group_id}~{criterion_id}~{parameter_index}`
   */
  resourceName: string;
  /** Immutable. The ad group criterion that this ad parameter belongs to. */
  adGroupCriterion?:
    | string
    | undefined;
  /** Immutable. The unique index of this ad parameter. Must be either 1 or 2. */
  parameterIndex?:
    | Long
    | undefined;
  /**
   * Numeric value to insert into the ad text. The following restrictions
   *  apply:
   *  - Can use comma or period as a separator, with an optional period or
   *    comma (respectively) for fractional values. For example, 1,000,000.00
   *    and 2.000.000,10 are valid.
   *  - Can be prepended or appended with a currency symbol. For example,
   *    $99.99 is valid.
   *  - Can be prepended or appended with a currency code. For example, 99.99USD
   *    and EUR200 are valid.
   *  - Can use '%'. For example, 1.0% and 1,0% are valid.
   *  - Can use plus or minus. For example, -10.99 and 25+ are valid.
   *  - Can use '/' between two numbers. For example 4/1 and 0.95/0.45 are
   *    valid.
   */
  insertionText?: string | undefined;
}

function createBaseAdParameter(): AdParameter {
  return { resourceName: "", adGroupCriterion: undefined, parameterIndex: undefined, insertionText: undefined };
}

export const AdParameter: MessageFns<AdParameter> = {
  encode(message: AdParameter, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(10).string(message.resourceName);
    }
    if (message.adGroupCriterion !== undefined) {
      writer.uint32(42).string(message.adGroupCriterion);
    }
    if (message.parameterIndex !== undefined) {
      writer.uint32(48).int64(message.parameterIndex.toString());
    }
    if (message.insertionText !== undefined) {
      writer.uint32(58).string(message.insertionText);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AdParameter {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAdParameter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceName = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.adGroupCriterion = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.parameterIndex = Long.fromString(reader.int64().toString());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.insertionText = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AdParameter {
    return {
      resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "",
      adGroupCriterion: isSet(object.adGroupCriterion) ? globalThis.String(object.adGroupCriterion) : undefined,
      parameterIndex: isSet(object.parameterIndex) ? Long.fromValue(object.parameterIndex) : undefined,
      insertionText: isSet(object.insertionText) ? globalThis.String(object.insertionText) : undefined,
    };
  },

  toJSON(message: AdParameter): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    if (message.adGroupCriterion !== undefined) {
      obj.adGroupCriterion = message.adGroupCriterion;
    }
    if (message.parameterIndex !== undefined) {
      obj.parameterIndex = (message.parameterIndex || Long.ZERO).toString();
    }
    if (message.insertionText !== undefined) {
      obj.insertionText = message.insertionText;
    }
    return obj;
  },

  create(base?: DeepPartial<AdParameter>): AdParameter {
    return AdParameter.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AdParameter>): AdParameter {
    const message = createBaseAdParameter();
    message.resourceName = object.resourceName ?? "";
    message.adGroupCriterion = object.adGroupCriterion ?? undefined;
    message.parameterIndex = (object.parameterIndex !== undefined && object.parameterIndex !== null)
      ? Long.fromValue(object.parameterIndex)
      : undefined;
    message.insertionText = object.insertionText ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
