// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v16/resources/experiment_arm.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.googleads.v16.resources";

/**
 * A Google ads experiment for users to experiment changes on multiple
 * campaigns, compare the performance, and apply the effective changes.
 */
export interface ExperimentArm {
  /**
   * Immutable. The resource name of the experiment arm.
   * Experiment arm resource names have the form:
   *
   * `customers/{customer_id}/experimentArms/{TrialArm.trial_id}~{TrialArm.trial_arm_id}`
   */
  resourceName: string;
  /** Immutable. The experiment to which the ExperimentArm belongs. */
  experiment: string;
  /**
   * Required. The name of the experiment arm. It must have a minimum length of
   * 1 and maximum length of 1024. It must be unique under an experiment.
   */
  name: string;
  /**
   * Whether this arm is a control arm. A control arm is the arm against
   * which the other arms are compared.
   */
  control: boolean;
  /**
   * Traffic split of the trial arm. The value should be between 1 and 100
   * and must total 100 between the two trial arms.
   */
  trafficSplit: Long;
  /** List of campaigns in the trial arm. The max length is one. */
  campaigns: string[];
  /** Output only. The in design campaigns in the treatment experiment arm. */
  inDesignCampaigns: string[];
}

function createBaseExperimentArm(): ExperimentArm {
  return {
    resourceName: "",
    experiment: "",
    name: "",
    control: false,
    trafficSplit: Long.ZERO,
    campaigns: [],
    inDesignCampaigns: [],
  };
}

export const ExperimentArm: MessageFns<ExperimentArm> = {
  encode(message: ExperimentArm, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(10).string(message.resourceName);
    }
    if (message.experiment !== "") {
      writer.uint32(66).string(message.experiment);
    }
    if (message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    if (message.control !== false) {
      writer.uint32(32).bool(message.control);
    }
    if (!message.trafficSplit.equals(Long.ZERO)) {
      writer.uint32(40).int64(message.trafficSplit.toString());
    }
    for (const v of message.campaigns) {
      writer.uint32(50).string(v!);
    }
    for (const v of message.inDesignCampaigns) {
      writer.uint32(58).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExperimentArm {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExperimentArm();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceName = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.experiment = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.control = reader.bool();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.trafficSplit = Long.fromString(reader.int64().toString());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.campaigns.push(reader.string());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.inDesignCampaigns.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExperimentArm {
    return {
      resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "",
      experiment: isSet(object.experiment) ? globalThis.String(object.experiment) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      control: isSet(object.control) ? globalThis.Boolean(object.control) : false,
      trafficSplit: isSet(object.trafficSplit) ? Long.fromValue(object.trafficSplit) : Long.ZERO,
      campaigns: globalThis.Array.isArray(object?.campaigns)
        ? object.campaigns.map((e: any) => globalThis.String(e))
        : [],
      inDesignCampaigns: globalThis.Array.isArray(object?.inDesignCampaigns)
        ? object.inDesignCampaigns.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ExperimentArm): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    if (message.experiment !== "") {
      obj.experiment = message.experiment;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.control !== false) {
      obj.control = message.control;
    }
    if (!message.trafficSplit.equals(Long.ZERO)) {
      obj.trafficSplit = (message.trafficSplit || Long.ZERO).toString();
    }
    if (message.campaigns?.length) {
      obj.campaigns = message.campaigns;
    }
    if (message.inDesignCampaigns?.length) {
      obj.inDesignCampaigns = message.inDesignCampaigns;
    }
    return obj;
  },

  create(base?: DeepPartial<ExperimentArm>): ExperimentArm {
    return ExperimentArm.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExperimentArm>): ExperimentArm {
    const message = createBaseExperimentArm();
    message.resourceName = object.resourceName ?? "";
    message.experiment = object.experiment ?? "";
    message.name = object.name ?? "";
    message.control = object.control ?? false;
    message.trafficSplit = (object.trafficSplit !== undefined && object.trafficSplit !== null)
      ? Long.fromValue(object.trafficSplit)
      : Long.ZERO;
    message.campaigns = object.campaigns?.map((e) => e) || [];
    message.inDesignCampaigns = object.inDesignCampaigns?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
