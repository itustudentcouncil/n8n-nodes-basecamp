// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v16/resources/shared_set.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import {
  SharedSetStatusEnum_SharedSetStatus,
  sharedSetStatusEnum_SharedSetStatusFromJSON,
  sharedSetStatusEnum_SharedSetStatusToJSON,
} from "../enums/shared_set_status.js";
import {
  SharedSetTypeEnum_SharedSetType,
  sharedSetTypeEnum_SharedSetTypeFromJSON,
  sharedSetTypeEnum_SharedSetTypeToJSON,
} from "../enums/shared_set_type.js";

export const protobufPackage = "google.ads.googleads.v16.resources";

/**
 * SharedSets are used for sharing criterion exclusions across multiple
 * campaigns.
 */
export interface SharedSet {
  /**
   * Immutable. The resource name of the shared set.
   * Shared set resource names have the form:
   *
   * `customers/{customer_id}/sharedSets/{shared_set_id}`
   */
  resourceName: string;
  /** Output only. The ID of this shared set. Read only. */
  id?:
    | Long
    | undefined;
  /**
   * Immutable. The type of this shared set: each shared set holds only a single
   * kind of resource. Required. Immutable.
   */
  type: SharedSetTypeEnum_SharedSetType;
  /**
   * The name of this shared set. Required.
   * Shared Sets must have names that are unique among active shared sets of
   * the same type.
   * The length of this string should be between 1 and 255 UTF-8 bytes,
   * inclusive.
   */
  name?:
    | string
    | undefined;
  /** Output only. The status of this shared set. Read only. */
  status: SharedSetStatusEnum_SharedSetStatus;
  /**
   * Output only. The number of shared criteria within this shared set. Read
   * only.
   */
  memberCount?:
    | Long
    | undefined;
  /**
   * Output only. The number of campaigns associated with this shared set. Read
   * only.
   */
  referenceCount?: Long | undefined;
}

function createBaseSharedSet(): SharedSet {
  return {
    resourceName: "",
    id: undefined,
    type: 0,
    name: undefined,
    status: 0,
    memberCount: undefined,
    referenceCount: undefined,
  };
}

export const SharedSet: MessageFns<SharedSet> = {
  encode(message: SharedSet, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(10).string(message.resourceName);
    }
    if (message.id !== undefined) {
      writer.uint32(64).int64(message.id.toString());
    }
    if (message.type !== 0) {
      writer.uint32(24).int32(message.type);
    }
    if (message.name !== undefined) {
      writer.uint32(74).string(message.name);
    }
    if (message.status !== 0) {
      writer.uint32(40).int32(message.status);
    }
    if (message.memberCount !== undefined) {
      writer.uint32(80).int64(message.memberCount.toString());
    }
    if (message.referenceCount !== undefined) {
      writer.uint32(88).int64(message.referenceCount.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SharedSet {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSharedSet();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceName = reader.string();
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.id = Long.fromString(reader.int64().toString());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.name = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.memberCount = Long.fromString(reader.int64().toString());
          continue;
        case 11:
          if (tag !== 88) {
            break;
          }

          message.referenceCount = Long.fromString(reader.int64().toString());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SharedSet {
    return {
      resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "",
      id: isSet(object.id) ? Long.fromValue(object.id) : undefined,
      type: isSet(object.type) ? sharedSetTypeEnum_SharedSetTypeFromJSON(object.type) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      status: isSet(object.status) ? sharedSetStatusEnum_SharedSetStatusFromJSON(object.status) : 0,
      memberCount: isSet(object.memberCount) ? Long.fromValue(object.memberCount) : undefined,
      referenceCount: isSet(object.referenceCount) ? Long.fromValue(object.referenceCount) : undefined,
    };
  },

  toJSON(message: SharedSet): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    if (message.id !== undefined) {
      obj.id = (message.id || Long.ZERO).toString();
    }
    if (message.type !== 0) {
      obj.type = sharedSetTypeEnum_SharedSetTypeToJSON(message.type);
    }
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.status !== 0) {
      obj.status = sharedSetStatusEnum_SharedSetStatusToJSON(message.status);
    }
    if (message.memberCount !== undefined) {
      obj.memberCount = (message.memberCount || Long.ZERO).toString();
    }
    if (message.referenceCount !== undefined) {
      obj.referenceCount = (message.referenceCount || Long.ZERO).toString();
    }
    return obj;
  },

  create(base?: DeepPartial<SharedSet>): SharedSet {
    return SharedSet.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SharedSet>): SharedSet {
    const message = createBaseSharedSet();
    message.resourceName = object.resourceName ?? "";
    message.id = (object.id !== undefined && object.id !== null) ? Long.fromValue(object.id) : undefined;
    message.type = object.type ?? 0;
    message.name = object.name ?? undefined;
    message.status = object.status ?? 0;
    message.memberCount = (object.memberCount !== undefined && object.memberCount !== null)
      ? Long.fromValue(object.memberCount)
      : undefined;
    message.referenceCount = (object.referenceCount !== undefined && object.referenceCount !== null)
      ? Long.fromValue(object.referenceCount)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
