// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v16/resources/customer_user_access.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import {
  AccessRoleEnum_AccessRole,
  accessRoleEnum_AccessRoleFromJSON,
  accessRoleEnum_AccessRoleToJSON,
} from "../enums/access_role.js";

export const protobufPackage = "google.ads.googleads.v16.resources";

/** Represents the permission of a single user onto a single customer. */
export interface CustomerUserAccess {
  /**
   * Immutable. Name of the resource.
   * Resource names have the form:
   * `customers/{customer_id}/customerUserAccesses/{user_id}`
   */
  resourceName: string;
  /**
   * Output only. User id of the user with the customer access.
   * Read only field
   */
  userId: Long;
  /**
   * Output only. Email address of the user.
   * Read only field
   */
  emailAddress?:
    | string
    | undefined;
  /** Access role of the user. */
  accessRole: AccessRoleEnum_AccessRole;
  /**
   * Output only. The customer user access creation time.
   * Read only field
   * The format is "YYYY-MM-DD HH:MM:SS".
   * Examples: "2018-03-05 09:15:00" or "2018-02-01 14:34:30"
   */
  accessCreationDateTime?:
    | string
    | undefined;
  /**
   * Output only. The email address of the inviter user.
   * Read only field
   */
  inviterUserEmailAddress?: string | undefined;
}

function createBaseCustomerUserAccess(): CustomerUserAccess {
  return {
    resourceName: "",
    userId: Long.ZERO,
    emailAddress: undefined,
    accessRole: 0,
    accessCreationDateTime: undefined,
    inviterUserEmailAddress: undefined,
  };
}

export const CustomerUserAccess: MessageFns<CustomerUserAccess> = {
  encode(message: CustomerUserAccess, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(10).string(message.resourceName);
    }
    if (!message.userId.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.userId.toString());
    }
    if (message.emailAddress !== undefined) {
      writer.uint32(26).string(message.emailAddress);
    }
    if (message.accessRole !== 0) {
      writer.uint32(32).int32(message.accessRole);
    }
    if (message.accessCreationDateTime !== undefined) {
      writer.uint32(50).string(message.accessCreationDateTime);
    }
    if (message.inviterUserEmailAddress !== undefined) {
      writer.uint32(58).string(message.inviterUserEmailAddress);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CustomerUserAccess {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCustomerUserAccess();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceName = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.userId = Long.fromString(reader.int64().toString());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.emailAddress = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.accessRole = reader.int32() as any;
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.accessCreationDateTime = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.inviterUserEmailAddress = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CustomerUserAccess {
    return {
      resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "",
      userId: isSet(object.userId) ? Long.fromValue(object.userId) : Long.ZERO,
      emailAddress: isSet(object.emailAddress) ? globalThis.String(object.emailAddress) : undefined,
      accessRole: isSet(object.accessRole) ? accessRoleEnum_AccessRoleFromJSON(object.accessRole) : 0,
      accessCreationDateTime: isSet(object.accessCreationDateTime)
        ? globalThis.String(object.accessCreationDateTime)
        : undefined,
      inviterUserEmailAddress: isSet(object.inviterUserEmailAddress)
        ? globalThis.String(object.inviterUserEmailAddress)
        : undefined,
    };
  },

  toJSON(message: CustomerUserAccess): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    if (!message.userId.equals(Long.ZERO)) {
      obj.userId = (message.userId || Long.ZERO).toString();
    }
    if (message.emailAddress !== undefined) {
      obj.emailAddress = message.emailAddress;
    }
    if (message.accessRole !== 0) {
      obj.accessRole = accessRoleEnum_AccessRoleToJSON(message.accessRole);
    }
    if (message.accessCreationDateTime !== undefined) {
      obj.accessCreationDateTime = message.accessCreationDateTime;
    }
    if (message.inviterUserEmailAddress !== undefined) {
      obj.inviterUserEmailAddress = message.inviterUserEmailAddress;
    }
    return obj;
  },

  create(base?: DeepPartial<CustomerUserAccess>): CustomerUserAccess {
    return CustomerUserAccess.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CustomerUserAccess>): CustomerUserAccess {
    const message = createBaseCustomerUserAccess();
    message.resourceName = object.resourceName ?? "";
    message.userId = (object.userId !== undefined && object.userId !== null)
      ? Long.fromValue(object.userId)
      : Long.ZERO;
    message.emailAddress = object.emailAddress ?? undefined;
    message.accessRole = object.accessRole ?? 0;
    message.accessCreationDateTime = object.accessCreationDateTime ?? undefined;
    message.inviterUserEmailAddress = object.inviterUserEmailAddress ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
