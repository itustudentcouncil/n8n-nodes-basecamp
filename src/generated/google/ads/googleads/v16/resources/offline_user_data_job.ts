// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v16/resources/offline_user_data_job.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { CustomerMatchUserListMetadata, StoreSalesMetadata } from "../common/offline_user_data.js";
import {
  OfflineUserDataJobFailureReasonEnum_OfflineUserDataJobFailureReason,
  offlineUserDataJobFailureReasonEnum_OfflineUserDataJobFailureReasonFromJSON,
  offlineUserDataJobFailureReasonEnum_OfflineUserDataJobFailureReasonToJSON,
} from "../enums/offline_user_data_job_failure_reason.js";
import {
  OfflineUserDataJobMatchRateRangeEnum_OfflineUserDataJobMatchRateRange,
  offlineUserDataJobMatchRateRangeEnum_OfflineUserDataJobMatchRateRangeFromJSON,
  offlineUserDataJobMatchRateRangeEnum_OfflineUserDataJobMatchRateRangeToJSON,
} from "../enums/offline_user_data_job_match_rate_range.js";
import {
  OfflineUserDataJobStatusEnum_OfflineUserDataJobStatus,
  offlineUserDataJobStatusEnum_OfflineUserDataJobStatusFromJSON,
  offlineUserDataJobStatusEnum_OfflineUserDataJobStatusToJSON,
} from "../enums/offline_user_data_job_status.js";
import {
  OfflineUserDataJobTypeEnum_OfflineUserDataJobType,
  offlineUserDataJobTypeEnum_OfflineUserDataJobTypeFromJSON,
  offlineUserDataJobTypeEnum_OfflineUserDataJobTypeToJSON,
} from "../enums/offline_user_data_job_type.js";

export const protobufPackage = "google.ads.googleads.v16.resources";

/**
 * A job containing offline user data of store visitors, or user list members
 * that will be processed asynchronously. The uploaded data isn't readable and
 * the processing results of the job can only be read using
 * GoogleAdsService.Search/SearchStream.
 */
export interface OfflineUserDataJob {
  /**
   * Immutable. The resource name of the offline user data job.
   * Offline user data job resource names have the form:
   *
   * `customers/{customer_id}/offlineUserDataJobs/{offline_user_data_job_id}`
   */
  resourceName: string;
  /** Output only. ID of this offline user data job. */
  id?:
    | Long
    | undefined;
  /** Immutable. User specified job ID. */
  externalId?:
    | Long
    | undefined;
  /** Immutable. Type of the job. */
  type: OfflineUserDataJobTypeEnum_OfflineUserDataJobType;
  /** Output only. Status of the job. */
  status: OfflineUserDataJobStatusEnum_OfflineUserDataJobStatus;
  /** Output only. Reason for the processing failure, if status is FAILED. */
  failureReason: OfflineUserDataJobFailureReasonEnum_OfflineUserDataJobFailureReason;
  /** Output only. Metadata of offline user data job depicting match rate range. */
  operationMetadata:
    | OfflineUserDataJobMetadata
    | undefined;
  /** Immutable. Metadata for data updates to a CRM-based user list. */
  customerMatchUserListMetadata?:
    | CustomerMatchUserListMetadata
    | undefined;
  /** Immutable. Metadata for store sales data update. */
  storeSalesMetadata?: StoreSalesMetadata | undefined;
}

/** Metadata of offline user data job. */
export interface OfflineUserDataJobMetadata {
  /**
   * Output only. Match rate of the Customer Match user list upload. Describes
   * the estimated match rate when the status of the job is "RUNNING" and final
   * match rate when the final match rate is available after the status of the
   * job is "SUCCESS/FAILED".
   */
  matchRateRange: OfflineUserDataJobMatchRateRangeEnum_OfflineUserDataJobMatchRateRange;
}

function createBaseOfflineUserDataJob(): OfflineUserDataJob {
  return {
    resourceName: "",
    id: undefined,
    externalId: undefined,
    type: 0,
    status: 0,
    failureReason: 0,
    operationMetadata: undefined,
    customerMatchUserListMetadata: undefined,
    storeSalesMetadata: undefined,
  };
}

export const OfflineUserDataJob: MessageFns<OfflineUserDataJob> = {
  encode(message: OfflineUserDataJob, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(10).string(message.resourceName);
    }
    if (message.id !== undefined) {
      writer.uint32(72).int64(message.id.toString());
    }
    if (message.externalId !== undefined) {
      writer.uint32(80).int64(message.externalId.toString());
    }
    if (message.type !== 0) {
      writer.uint32(32).int32(message.type);
    }
    if (message.status !== 0) {
      writer.uint32(40).int32(message.status);
    }
    if (message.failureReason !== 0) {
      writer.uint32(48).int32(message.failureReason);
    }
    if (message.operationMetadata !== undefined) {
      OfflineUserDataJobMetadata.encode(message.operationMetadata, writer.uint32(90).fork()).join();
    }
    if (message.customerMatchUserListMetadata !== undefined) {
      CustomerMatchUserListMetadata.encode(message.customerMatchUserListMetadata, writer.uint32(58).fork()).join();
    }
    if (message.storeSalesMetadata !== undefined) {
      StoreSalesMetadata.encode(message.storeSalesMetadata, writer.uint32(66).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OfflineUserDataJob {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOfflineUserDataJob();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceName = reader.string();
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.id = Long.fromString(reader.int64().toString());
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.externalId = Long.fromString(reader.int64().toString());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.failureReason = reader.int32() as any;
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.operationMetadata = OfflineUserDataJobMetadata.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.customerMatchUserListMetadata = CustomerMatchUserListMetadata.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.storeSalesMetadata = StoreSalesMetadata.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OfflineUserDataJob {
    return {
      resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "",
      id: isSet(object.id) ? Long.fromValue(object.id) : undefined,
      externalId: isSet(object.externalId) ? Long.fromValue(object.externalId) : undefined,
      type: isSet(object.type) ? offlineUserDataJobTypeEnum_OfflineUserDataJobTypeFromJSON(object.type) : 0,
      status: isSet(object.status) ? offlineUserDataJobStatusEnum_OfflineUserDataJobStatusFromJSON(object.status) : 0,
      failureReason: isSet(object.failureReason)
        ? offlineUserDataJobFailureReasonEnum_OfflineUserDataJobFailureReasonFromJSON(object.failureReason)
        : 0,
      operationMetadata: isSet(object.operationMetadata)
        ? OfflineUserDataJobMetadata.fromJSON(object.operationMetadata)
        : undefined,
      customerMatchUserListMetadata: isSet(object.customerMatchUserListMetadata)
        ? CustomerMatchUserListMetadata.fromJSON(object.customerMatchUserListMetadata)
        : undefined,
      storeSalesMetadata: isSet(object.storeSalesMetadata)
        ? StoreSalesMetadata.fromJSON(object.storeSalesMetadata)
        : undefined,
    };
  },

  toJSON(message: OfflineUserDataJob): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    if (message.id !== undefined) {
      obj.id = (message.id || Long.ZERO).toString();
    }
    if (message.externalId !== undefined) {
      obj.externalId = (message.externalId || Long.ZERO).toString();
    }
    if (message.type !== 0) {
      obj.type = offlineUserDataJobTypeEnum_OfflineUserDataJobTypeToJSON(message.type);
    }
    if (message.status !== 0) {
      obj.status = offlineUserDataJobStatusEnum_OfflineUserDataJobStatusToJSON(message.status);
    }
    if (message.failureReason !== 0) {
      obj.failureReason = offlineUserDataJobFailureReasonEnum_OfflineUserDataJobFailureReasonToJSON(
        message.failureReason,
      );
    }
    if (message.operationMetadata !== undefined) {
      obj.operationMetadata = OfflineUserDataJobMetadata.toJSON(message.operationMetadata);
    }
    if (message.customerMatchUserListMetadata !== undefined) {
      obj.customerMatchUserListMetadata = CustomerMatchUserListMetadata.toJSON(message.customerMatchUserListMetadata);
    }
    if (message.storeSalesMetadata !== undefined) {
      obj.storeSalesMetadata = StoreSalesMetadata.toJSON(message.storeSalesMetadata);
    }
    return obj;
  },

  create(base?: DeepPartial<OfflineUserDataJob>): OfflineUserDataJob {
    return OfflineUserDataJob.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<OfflineUserDataJob>): OfflineUserDataJob {
    const message = createBaseOfflineUserDataJob();
    message.resourceName = object.resourceName ?? "";
    message.id = (object.id !== undefined && object.id !== null) ? Long.fromValue(object.id) : undefined;
    message.externalId = (object.externalId !== undefined && object.externalId !== null)
      ? Long.fromValue(object.externalId)
      : undefined;
    message.type = object.type ?? 0;
    message.status = object.status ?? 0;
    message.failureReason = object.failureReason ?? 0;
    message.operationMetadata = (object.operationMetadata !== undefined && object.operationMetadata !== null)
      ? OfflineUserDataJobMetadata.fromPartial(object.operationMetadata)
      : undefined;
    message.customerMatchUserListMetadata =
      (object.customerMatchUserListMetadata !== undefined && object.customerMatchUserListMetadata !== null)
        ? CustomerMatchUserListMetadata.fromPartial(object.customerMatchUserListMetadata)
        : undefined;
    message.storeSalesMetadata = (object.storeSalesMetadata !== undefined && object.storeSalesMetadata !== null)
      ? StoreSalesMetadata.fromPartial(object.storeSalesMetadata)
      : undefined;
    return message;
  },
};

function createBaseOfflineUserDataJobMetadata(): OfflineUserDataJobMetadata {
  return { matchRateRange: 0 };
}

export const OfflineUserDataJobMetadata: MessageFns<OfflineUserDataJobMetadata> = {
  encode(message: OfflineUserDataJobMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.matchRateRange !== 0) {
      writer.uint32(8).int32(message.matchRateRange);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OfflineUserDataJobMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOfflineUserDataJobMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.matchRateRange = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OfflineUserDataJobMetadata {
    return {
      matchRateRange: isSet(object.matchRateRange)
        ? offlineUserDataJobMatchRateRangeEnum_OfflineUserDataJobMatchRateRangeFromJSON(object.matchRateRange)
        : 0,
    };
  },

  toJSON(message: OfflineUserDataJobMetadata): unknown {
    const obj: any = {};
    if (message.matchRateRange !== 0) {
      obj.matchRateRange = offlineUserDataJobMatchRateRangeEnum_OfflineUserDataJobMatchRateRangeToJSON(
        message.matchRateRange,
      );
    }
    return obj;
  },

  create(base?: DeepPartial<OfflineUserDataJobMetadata>): OfflineUserDataJobMetadata {
    return OfflineUserDataJobMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<OfflineUserDataJobMetadata>): OfflineUserDataJobMetadata {
    const message = createBaseOfflineUserDataJobMetadata();
    message.matchRateRange = object.matchRateRange ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
