// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v16/resources/keyword_plan.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { DateRange } from "../common/dates.js";
import {
  KeywordPlanForecastIntervalEnum_KeywordPlanForecastInterval,
  keywordPlanForecastIntervalEnum_KeywordPlanForecastIntervalFromJSON,
  keywordPlanForecastIntervalEnum_KeywordPlanForecastIntervalToJSON,
} from "../enums/keyword_plan_forecast_interval.js";

export const protobufPackage = "google.ads.googleads.v16.resources";

/**
 * A Keyword Planner plan.
 * Max number of saved keyword plans: 10000.
 * It's possible to remove plans if limit is reached.
 */
export interface KeywordPlan {
  /**
   * Immutable. The resource name of the Keyword Planner plan.
   * KeywordPlan resource names have the form:
   *
   * `customers/{customer_id}/keywordPlans/{kp_plan_id}`
   */
  resourceName: string;
  /** Output only. The ID of the keyword plan. */
  id?:
    | Long
    | undefined;
  /**
   * The name of the keyword plan.
   *
   * This field is required and should not be empty when creating new keyword
   * plans.
   */
  name?:
    | string
    | undefined;
  /** The date period used for forecasting the plan. */
  forecastPeriod: KeywordPlanForecastPeriod | undefined;
}

/** The forecasting period associated with the keyword plan. */
export interface KeywordPlanForecastPeriod {
  /** A future date range relative to the current date used for forecasting. */
  dateInterval?:
    | KeywordPlanForecastIntervalEnum_KeywordPlanForecastInterval
    | undefined;
  /**
   * The custom date range used for forecasting. It cannot be greater than
   * a year.
   * The start and end dates must be in the future. Otherwise, an error will
   * be returned when the forecasting action is performed.
   * The start and end dates are inclusive.
   */
  dateRange?: DateRange | undefined;
}

function createBaseKeywordPlan(): KeywordPlan {
  return { resourceName: "", id: undefined, name: undefined, forecastPeriod: undefined };
}

export const KeywordPlan: MessageFns<KeywordPlan> = {
  encode(message: KeywordPlan, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(10).string(message.resourceName);
    }
    if (message.id !== undefined) {
      writer.uint32(40).int64(message.id.toString());
    }
    if (message.name !== undefined) {
      writer.uint32(50).string(message.name);
    }
    if (message.forecastPeriod !== undefined) {
      KeywordPlanForecastPeriod.encode(message.forecastPeriod, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): KeywordPlan {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseKeywordPlan();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceName = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.id = Long.fromString(reader.int64().toString());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.name = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.forecastPeriod = KeywordPlanForecastPeriod.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): KeywordPlan {
    return {
      resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "",
      id: isSet(object.id) ? Long.fromValue(object.id) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      forecastPeriod: isSet(object.forecastPeriod)
        ? KeywordPlanForecastPeriod.fromJSON(object.forecastPeriod)
        : undefined,
    };
  },

  toJSON(message: KeywordPlan): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    if (message.id !== undefined) {
      obj.id = (message.id || Long.ZERO).toString();
    }
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.forecastPeriod !== undefined) {
      obj.forecastPeriod = KeywordPlanForecastPeriod.toJSON(message.forecastPeriod);
    }
    return obj;
  },

  create(base?: DeepPartial<KeywordPlan>): KeywordPlan {
    return KeywordPlan.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<KeywordPlan>): KeywordPlan {
    const message = createBaseKeywordPlan();
    message.resourceName = object.resourceName ?? "";
    message.id = (object.id !== undefined && object.id !== null) ? Long.fromValue(object.id) : undefined;
    message.name = object.name ?? undefined;
    message.forecastPeriod = (object.forecastPeriod !== undefined && object.forecastPeriod !== null)
      ? KeywordPlanForecastPeriod.fromPartial(object.forecastPeriod)
      : undefined;
    return message;
  },
};

function createBaseKeywordPlanForecastPeriod(): KeywordPlanForecastPeriod {
  return { dateInterval: undefined, dateRange: undefined };
}

export const KeywordPlanForecastPeriod: MessageFns<KeywordPlanForecastPeriod> = {
  encode(message: KeywordPlanForecastPeriod, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.dateInterval !== undefined) {
      writer.uint32(8).int32(message.dateInterval);
    }
    if (message.dateRange !== undefined) {
      DateRange.encode(message.dateRange, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): KeywordPlanForecastPeriod {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseKeywordPlanForecastPeriod();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.dateInterval = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.dateRange = DateRange.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): KeywordPlanForecastPeriod {
    return {
      dateInterval: isSet(object.dateInterval)
        ? keywordPlanForecastIntervalEnum_KeywordPlanForecastIntervalFromJSON(object.dateInterval)
        : undefined,
      dateRange: isSet(object.dateRange) ? DateRange.fromJSON(object.dateRange) : undefined,
    };
  },

  toJSON(message: KeywordPlanForecastPeriod): unknown {
    const obj: any = {};
    if (message.dateInterval !== undefined) {
      obj.dateInterval = keywordPlanForecastIntervalEnum_KeywordPlanForecastIntervalToJSON(message.dateInterval);
    }
    if (message.dateRange !== undefined) {
      obj.dateRange = DateRange.toJSON(message.dateRange);
    }
    return obj;
  },

  create(base?: DeepPartial<KeywordPlanForecastPeriod>): KeywordPlanForecastPeriod {
    return KeywordPlanForecastPeriod.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<KeywordPlanForecastPeriod>): KeywordPlanForecastPeriod {
    const message = createBaseKeywordPlanForecastPeriod();
    message.dateInterval = object.dateInterval ?? undefined;
    message.dateRange = (object.dateRange !== undefined && object.dateRange !== null)
      ? DateRange.fromPartial(object.dateRange)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
