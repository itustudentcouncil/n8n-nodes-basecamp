// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v16/resources/local_services_lead.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import {
  LocalServicesCreditStateEnum_CreditState,
  localServicesCreditStateEnum_CreditStateFromJSON,
  localServicesCreditStateEnum_CreditStateToJSON,
} from "../enums/local_services_lead_credit_state.js";
import {
  LocalServicesLeadStatusEnum_LeadStatus,
  localServicesLeadStatusEnum_LeadStatusFromJSON,
  localServicesLeadStatusEnum_LeadStatusToJSON,
} from "../enums/local_services_lead_status.js";
import {
  LocalServicesLeadTypeEnum_LeadType,
  localServicesLeadTypeEnum_LeadTypeFromJSON,
  localServicesLeadTypeEnum_LeadTypeToJSON,
} from "../enums/local_services_lead_type.js";

export const protobufPackage = "google.ads.googleads.v16.resources";

/**
 * Data from Local Services Lead.
 * Contains details of Lead which is generated when user calls, messages or
 * books service from advertiser.
 * More info: https://ads.google.com/local-services-ads
 */
export interface LocalServicesLead {
  /**
   * Output only. The resource name of the local services lead data.
   * Local Services Lead resource name have the form
   *
   * `customers/{customer_id}/localServicesLead/{local_services_lead_id}`
   */
  resourceName: string;
  /** Output only. ID of this Lead. */
  id: Long;
  /**
   * Output only. Service category of the lead. For example:
   * `xcat:service_area_business_hvac`,
   * `xcat:service_area_business_real_estate_agent`, etc.
   * For more details see:
   * https://developers.google.com/google-ads/api/data/codes-formats#local_services_ids
   */
  categoryId: string;
  /**
   * Output only. Service for the  category. For example: `buyer_agent`,
   * `seller_agent` for the category of
   * `xcat:service_area_business_real_estate_agent`.
   */
  serviceId: string;
  /** Output only. Lead's contact details. */
  contactDetails:
    | ContactDetails
    | undefined;
  /** Output only. Type of Local Services lead: phone, message, booking, etc. */
  leadType: LocalServicesLeadTypeEnum_LeadType;
  /** Output only. Current status of lead. */
  leadStatus: LocalServicesLeadStatusEnum_LeadStatus;
  /**
   * Output only. The date time at which lead was created by Local Services Ads.
   * The format is "YYYY-MM-DD HH:MM:SS" in the Google Ads account's timezone.
   * Examples: "2018-03-05 09:15:00" or "2018-02-01 14:34:30"
   */
  creationDateTime: string;
  /**
   * Output only. Language used by the Local Services provider linked to lead.
   * See https://developers.google.com/google-ads/api/data/codes-formats#locales
   */
  locale: string;
  /** Output only. Note added by advertiser for the lead. */
  note?:
    | Note
    | undefined;
  /** Output only. True if the advertiser was charged for the lead. */
  leadCharged: boolean;
  /** Output only. Credit details of the lead. */
  creditDetails?: CreditDetails | undefined;
}

/** Fields containing consumer contact details. */
export interface ContactDetails {
  /** Output only. Consumer phone number in E164 format. */
  phoneNumber: string;
  /** Output only. Consumer email address. */
  email: string;
  /**
   * Output only. Consumer name if consumer provided name from Message or
   * Booking form on google.com
   */
  consumerName: string;
}

/**
 * Represents a note added to a lead by the advertiser. Advertisers can edit
 * notes, which will reset edit time and change description.
 */
export interface Note {
  /**
   * Output only. The date time when lead note was edited. The format is
   * "YYYY-MM-DD HH:MM:SS" in the Google Ads account's timezone. Examples:
   * "2018-03-05 09:15:00" or "2018-02-01 14:34:30"
   */
  editDateTime: string;
  /** Output only. Content of lead note. */
  description: string;
}

/** Represents the credit details of a lead. */
export interface CreditDetails {
  /** Output only. Credit state of the lead. */
  creditState: LocalServicesCreditStateEnum_CreditState;
  /**
   * Output only. The date time when the credit state of the lead was last
   * updated. The format is "YYYY-MM-DD HH:MM:SS" in the Google Ads account's
   * timezone. Examples: "2018-03-05 09:15:00" or "2018-02-01 14:34:30"
   */
  creditStateLastUpdateDateTime: string;
}

function createBaseLocalServicesLead(): LocalServicesLead {
  return {
    resourceName: "",
    id: Long.ZERO,
    categoryId: "",
    serviceId: "",
    contactDetails: undefined,
    leadType: 0,
    leadStatus: 0,
    creationDateTime: "",
    locale: "",
    note: undefined,
    leadCharged: false,
    creditDetails: undefined,
  };
}

export const LocalServicesLead: MessageFns<LocalServicesLead> = {
  encode(message: LocalServicesLead, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(10).string(message.resourceName);
    }
    if (!message.id.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.id.toString());
    }
    if (message.categoryId !== "") {
      writer.uint32(26).string(message.categoryId);
    }
    if (message.serviceId !== "") {
      writer.uint32(34).string(message.serviceId);
    }
    if (message.contactDetails !== undefined) {
      ContactDetails.encode(message.contactDetails, writer.uint32(42).fork()).join();
    }
    if (message.leadType !== 0) {
      writer.uint32(48).int32(message.leadType);
    }
    if (message.leadStatus !== 0) {
      writer.uint32(56).int32(message.leadStatus);
    }
    if (message.creationDateTime !== "") {
      writer.uint32(66).string(message.creationDateTime);
    }
    if (message.locale !== "") {
      writer.uint32(74).string(message.locale);
    }
    if (message.note !== undefined) {
      Note.encode(message.note, writer.uint32(82).fork()).join();
    }
    if (message.leadCharged !== false) {
      writer.uint32(88).bool(message.leadCharged);
    }
    if (message.creditDetails !== undefined) {
      CreditDetails.encode(message.creditDetails, writer.uint32(98).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LocalServicesLead {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLocalServicesLead();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceName = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.id = Long.fromString(reader.int64().toString());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.categoryId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.serviceId = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.contactDetails = ContactDetails.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.leadType = reader.int32() as any;
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.leadStatus = reader.int32() as any;
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.creationDateTime = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.locale = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.note = Note.decode(reader, reader.uint32());
          continue;
        case 11:
          if (tag !== 88) {
            break;
          }

          message.leadCharged = reader.bool();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.creditDetails = CreditDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LocalServicesLead {
    return {
      resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "",
      id: isSet(object.id) ? Long.fromValue(object.id) : Long.ZERO,
      categoryId: isSet(object.categoryId) ? globalThis.String(object.categoryId) : "",
      serviceId: isSet(object.serviceId) ? globalThis.String(object.serviceId) : "",
      contactDetails: isSet(object.contactDetails) ? ContactDetails.fromJSON(object.contactDetails) : undefined,
      leadType: isSet(object.leadType) ? localServicesLeadTypeEnum_LeadTypeFromJSON(object.leadType) : 0,
      leadStatus: isSet(object.leadStatus) ? localServicesLeadStatusEnum_LeadStatusFromJSON(object.leadStatus) : 0,
      creationDateTime: isSet(object.creationDateTime) ? globalThis.String(object.creationDateTime) : "",
      locale: isSet(object.locale) ? globalThis.String(object.locale) : "",
      note: isSet(object.note) ? Note.fromJSON(object.note) : undefined,
      leadCharged: isSet(object.leadCharged) ? globalThis.Boolean(object.leadCharged) : false,
      creditDetails: isSet(object.creditDetails) ? CreditDetails.fromJSON(object.creditDetails) : undefined,
    };
  },

  toJSON(message: LocalServicesLead): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    if (!message.id.equals(Long.ZERO)) {
      obj.id = (message.id || Long.ZERO).toString();
    }
    if (message.categoryId !== "") {
      obj.categoryId = message.categoryId;
    }
    if (message.serviceId !== "") {
      obj.serviceId = message.serviceId;
    }
    if (message.contactDetails !== undefined) {
      obj.contactDetails = ContactDetails.toJSON(message.contactDetails);
    }
    if (message.leadType !== 0) {
      obj.leadType = localServicesLeadTypeEnum_LeadTypeToJSON(message.leadType);
    }
    if (message.leadStatus !== 0) {
      obj.leadStatus = localServicesLeadStatusEnum_LeadStatusToJSON(message.leadStatus);
    }
    if (message.creationDateTime !== "") {
      obj.creationDateTime = message.creationDateTime;
    }
    if (message.locale !== "") {
      obj.locale = message.locale;
    }
    if (message.note !== undefined) {
      obj.note = Note.toJSON(message.note);
    }
    if (message.leadCharged !== false) {
      obj.leadCharged = message.leadCharged;
    }
    if (message.creditDetails !== undefined) {
      obj.creditDetails = CreditDetails.toJSON(message.creditDetails);
    }
    return obj;
  },

  create(base?: DeepPartial<LocalServicesLead>): LocalServicesLead {
    return LocalServicesLead.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LocalServicesLead>): LocalServicesLead {
    const message = createBaseLocalServicesLead();
    message.resourceName = object.resourceName ?? "";
    message.id = (object.id !== undefined && object.id !== null) ? Long.fromValue(object.id) : Long.ZERO;
    message.categoryId = object.categoryId ?? "";
    message.serviceId = object.serviceId ?? "";
    message.contactDetails = (object.contactDetails !== undefined && object.contactDetails !== null)
      ? ContactDetails.fromPartial(object.contactDetails)
      : undefined;
    message.leadType = object.leadType ?? 0;
    message.leadStatus = object.leadStatus ?? 0;
    message.creationDateTime = object.creationDateTime ?? "";
    message.locale = object.locale ?? "";
    message.note = (object.note !== undefined && object.note !== null) ? Note.fromPartial(object.note) : undefined;
    message.leadCharged = object.leadCharged ?? false;
    message.creditDetails = (object.creditDetails !== undefined && object.creditDetails !== null)
      ? CreditDetails.fromPartial(object.creditDetails)
      : undefined;
    return message;
  },
};

function createBaseContactDetails(): ContactDetails {
  return { phoneNumber: "", email: "", consumerName: "" };
}

export const ContactDetails: MessageFns<ContactDetails> = {
  encode(message: ContactDetails, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.phoneNumber !== "") {
      writer.uint32(10).string(message.phoneNumber);
    }
    if (message.email !== "") {
      writer.uint32(18).string(message.email);
    }
    if (message.consumerName !== "") {
      writer.uint32(26).string(message.consumerName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ContactDetails {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseContactDetails();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.phoneNumber = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.email = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.consumerName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ContactDetails {
    return {
      phoneNumber: isSet(object.phoneNumber) ? globalThis.String(object.phoneNumber) : "",
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      consumerName: isSet(object.consumerName) ? globalThis.String(object.consumerName) : "",
    };
  },

  toJSON(message: ContactDetails): unknown {
    const obj: any = {};
    if (message.phoneNumber !== "") {
      obj.phoneNumber = message.phoneNumber;
    }
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.consumerName !== "") {
      obj.consumerName = message.consumerName;
    }
    return obj;
  },

  create(base?: DeepPartial<ContactDetails>): ContactDetails {
    return ContactDetails.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ContactDetails>): ContactDetails {
    const message = createBaseContactDetails();
    message.phoneNumber = object.phoneNumber ?? "";
    message.email = object.email ?? "";
    message.consumerName = object.consumerName ?? "";
    return message;
  },
};

function createBaseNote(): Note {
  return { editDateTime: "", description: "" };
}

export const Note: MessageFns<Note> = {
  encode(message: Note, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.editDateTime !== "") {
      writer.uint32(10).string(message.editDateTime);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Note {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNote();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.editDateTime = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Note {
    return {
      editDateTime: isSet(object.editDateTime) ? globalThis.String(object.editDateTime) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
    };
  },

  toJSON(message: Note): unknown {
    const obj: any = {};
    if (message.editDateTime !== "") {
      obj.editDateTime = message.editDateTime;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    return obj;
  },

  create(base?: DeepPartial<Note>): Note {
    return Note.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Note>): Note {
    const message = createBaseNote();
    message.editDateTime = object.editDateTime ?? "";
    message.description = object.description ?? "";
    return message;
  },
};

function createBaseCreditDetails(): CreditDetails {
  return { creditState: 0, creditStateLastUpdateDateTime: "" };
}

export const CreditDetails: MessageFns<CreditDetails> = {
  encode(message: CreditDetails, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creditState !== 0) {
      writer.uint32(8).int32(message.creditState);
    }
    if (message.creditStateLastUpdateDateTime !== "") {
      writer.uint32(18).string(message.creditStateLastUpdateDateTime);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreditDetails {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreditDetails();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.creditState = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.creditStateLastUpdateDateTime = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreditDetails {
    return {
      creditState: isSet(object.creditState) ? localServicesCreditStateEnum_CreditStateFromJSON(object.creditState) : 0,
      creditStateLastUpdateDateTime: isSet(object.creditStateLastUpdateDateTime)
        ? globalThis.String(object.creditStateLastUpdateDateTime)
        : "",
    };
  },

  toJSON(message: CreditDetails): unknown {
    const obj: any = {};
    if (message.creditState !== 0) {
      obj.creditState = localServicesCreditStateEnum_CreditStateToJSON(message.creditState);
    }
    if (message.creditStateLastUpdateDateTime !== "") {
      obj.creditStateLastUpdateDateTime = message.creditStateLastUpdateDateTime;
    }
    return obj;
  },

  create(base?: DeepPartial<CreditDetails>): CreditDetails {
    return CreditDetails.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreditDetails>): CreditDetails {
    const message = createBaseCreditDetails();
    message.creditState = object.creditState ?? 0;
    message.creditStateLastUpdateDateTime = object.creditStateLastUpdateDateTime ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
