// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v16/resources/product_link.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import {
  LinkedProductTypeEnum_LinkedProductType,
  linkedProductTypeEnum_LinkedProductTypeFromJSON,
  linkedProductTypeEnum_LinkedProductTypeToJSON,
} from "../enums/linked_product_type.js";

export const protobufPackage = "google.ads.googleads.v16.resources";

/**
 * Represents the data sharing connection between  a Google
 * Ads customer and another product.
 */
export interface ProductLink {
  /**
   * Immutable. Resource name of the product link.
   * ProductLink resource names have the form:
   *
   * `customers/{customer_id}/productLinks/{product_link_id} `
   */
  resourceName: string;
  /**
   * Output only. The ID of the link.
   * This field is read only.
   */
  productLinkId?:
    | Long
    | undefined;
  /** Output only. The type of the linked product. */
  type: LinkedProductTypeEnum_LinkedProductType;
  /** Immutable. Data partner link. */
  dataPartner?:
    | DataPartnerIdentifier
    | undefined;
  /** Immutable. Google Ads link. */
  googleAds?:
    | GoogleAdsIdentifier
    | undefined;
  /** Immutable. Google Merchant Center link. */
  merchantCenter?:
    | MerchantCenterIdentifier
    | undefined;
  /** Output only. Advertising Partner link. */
  advertisingPartner?: AdvertisingPartnerIdentifier | undefined;
}

/** The identifier for Data Partner account. */
export interface DataPartnerIdentifier {
  /**
   * Immutable. The customer ID of the Data partner account.
   * This field is required and should not be empty when creating a new
   * data partner link. It is unable to be modified after the creation of
   * the link.
   */
  dataPartnerId?: Long | undefined;
}

/** The identifier for Google Ads account. */
export interface GoogleAdsIdentifier {
  /**
   * Immutable. The resource name of the Google Ads account.
   * This field is required and should not be empty when creating a new
   * Google Ads link. It is unable to be modified after the creation of
   * the link.
   */
  customer?: string | undefined;
}

/** The identifier for Google Merchant Center account */
export interface MerchantCenterIdentifier {
  /**
   * Immutable. The customer ID of the Google Merchant Center account.
   * This field is required and should not be empty when creating a new
   * Merchant Center link. It is unable to be modified after the creation of
   * the link.
   */
  merchantCenterId?: Long | undefined;
}

/** The identifier for the Advertising Partner Google Ads account. */
export interface AdvertisingPartnerIdentifier {
  /**
   * Output only. The resource name of the advertising partner Google Ads
   * account. This field is required and should not be empty when creating a new
   * Advertising Partner link. It is unable to be modified after the creation of
   * the link.
   */
  customer?: string | undefined;
}

function createBaseProductLink(): ProductLink {
  return {
    resourceName: "",
    productLinkId: undefined,
    type: 0,
    dataPartner: undefined,
    googleAds: undefined,
    merchantCenter: undefined,
    advertisingPartner: undefined,
  };
}

export const ProductLink: MessageFns<ProductLink> = {
  encode(message: ProductLink, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(10).string(message.resourceName);
    }
    if (message.productLinkId !== undefined) {
      writer.uint32(16).int64(message.productLinkId.toString());
    }
    if (message.type !== 0) {
      writer.uint32(24).int32(message.type);
    }
    if (message.dataPartner !== undefined) {
      DataPartnerIdentifier.encode(message.dataPartner, writer.uint32(34).fork()).join();
    }
    if (message.googleAds !== undefined) {
      GoogleAdsIdentifier.encode(message.googleAds, writer.uint32(42).fork()).join();
    }
    if (message.merchantCenter !== undefined) {
      MerchantCenterIdentifier.encode(message.merchantCenter, writer.uint32(98).fork()).join();
    }
    if (message.advertisingPartner !== undefined) {
      AdvertisingPartnerIdentifier.encode(message.advertisingPartner, writer.uint32(106).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProductLink {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProductLink();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceName = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.productLinkId = Long.fromString(reader.int64().toString());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.dataPartner = DataPartnerIdentifier.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.googleAds = GoogleAdsIdentifier.decode(reader, reader.uint32());
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.merchantCenter = MerchantCenterIdentifier.decode(reader, reader.uint32());
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.advertisingPartner = AdvertisingPartnerIdentifier.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProductLink {
    return {
      resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "",
      productLinkId: isSet(object.productLinkId) ? Long.fromValue(object.productLinkId) : undefined,
      type: isSet(object.type) ? linkedProductTypeEnum_LinkedProductTypeFromJSON(object.type) : 0,
      dataPartner: isSet(object.dataPartner) ? DataPartnerIdentifier.fromJSON(object.dataPartner) : undefined,
      googleAds: isSet(object.googleAds) ? GoogleAdsIdentifier.fromJSON(object.googleAds) : undefined,
      merchantCenter: isSet(object.merchantCenter)
        ? MerchantCenterIdentifier.fromJSON(object.merchantCenter)
        : undefined,
      advertisingPartner: isSet(object.advertisingPartner)
        ? AdvertisingPartnerIdentifier.fromJSON(object.advertisingPartner)
        : undefined,
    };
  },

  toJSON(message: ProductLink): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    if (message.productLinkId !== undefined) {
      obj.productLinkId = (message.productLinkId || Long.ZERO).toString();
    }
    if (message.type !== 0) {
      obj.type = linkedProductTypeEnum_LinkedProductTypeToJSON(message.type);
    }
    if (message.dataPartner !== undefined) {
      obj.dataPartner = DataPartnerIdentifier.toJSON(message.dataPartner);
    }
    if (message.googleAds !== undefined) {
      obj.googleAds = GoogleAdsIdentifier.toJSON(message.googleAds);
    }
    if (message.merchantCenter !== undefined) {
      obj.merchantCenter = MerchantCenterIdentifier.toJSON(message.merchantCenter);
    }
    if (message.advertisingPartner !== undefined) {
      obj.advertisingPartner = AdvertisingPartnerIdentifier.toJSON(message.advertisingPartner);
    }
    return obj;
  },

  create(base?: DeepPartial<ProductLink>): ProductLink {
    return ProductLink.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ProductLink>): ProductLink {
    const message = createBaseProductLink();
    message.resourceName = object.resourceName ?? "";
    message.productLinkId = (object.productLinkId !== undefined && object.productLinkId !== null)
      ? Long.fromValue(object.productLinkId)
      : undefined;
    message.type = object.type ?? 0;
    message.dataPartner = (object.dataPartner !== undefined && object.dataPartner !== null)
      ? DataPartnerIdentifier.fromPartial(object.dataPartner)
      : undefined;
    message.googleAds = (object.googleAds !== undefined && object.googleAds !== null)
      ? GoogleAdsIdentifier.fromPartial(object.googleAds)
      : undefined;
    message.merchantCenter = (object.merchantCenter !== undefined && object.merchantCenter !== null)
      ? MerchantCenterIdentifier.fromPartial(object.merchantCenter)
      : undefined;
    message.advertisingPartner = (object.advertisingPartner !== undefined && object.advertisingPartner !== null)
      ? AdvertisingPartnerIdentifier.fromPartial(object.advertisingPartner)
      : undefined;
    return message;
  },
};

function createBaseDataPartnerIdentifier(): DataPartnerIdentifier {
  return { dataPartnerId: undefined };
}

export const DataPartnerIdentifier: MessageFns<DataPartnerIdentifier> = {
  encode(message: DataPartnerIdentifier, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.dataPartnerId !== undefined) {
      writer.uint32(8).int64(message.dataPartnerId.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DataPartnerIdentifier {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDataPartnerIdentifier();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.dataPartnerId = Long.fromString(reader.int64().toString());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DataPartnerIdentifier {
    return { dataPartnerId: isSet(object.dataPartnerId) ? Long.fromValue(object.dataPartnerId) : undefined };
  },

  toJSON(message: DataPartnerIdentifier): unknown {
    const obj: any = {};
    if (message.dataPartnerId !== undefined) {
      obj.dataPartnerId = (message.dataPartnerId || Long.ZERO).toString();
    }
    return obj;
  },

  create(base?: DeepPartial<DataPartnerIdentifier>): DataPartnerIdentifier {
    return DataPartnerIdentifier.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DataPartnerIdentifier>): DataPartnerIdentifier {
    const message = createBaseDataPartnerIdentifier();
    message.dataPartnerId = (object.dataPartnerId !== undefined && object.dataPartnerId !== null)
      ? Long.fromValue(object.dataPartnerId)
      : undefined;
    return message;
  },
};

function createBaseGoogleAdsIdentifier(): GoogleAdsIdentifier {
  return { customer: undefined };
}

export const GoogleAdsIdentifier: MessageFns<GoogleAdsIdentifier> = {
  encode(message: GoogleAdsIdentifier, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.customer !== undefined) {
      writer.uint32(10).string(message.customer);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GoogleAdsIdentifier {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGoogleAdsIdentifier();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customer = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GoogleAdsIdentifier {
    return { customer: isSet(object.customer) ? globalThis.String(object.customer) : undefined };
  },

  toJSON(message: GoogleAdsIdentifier): unknown {
    const obj: any = {};
    if (message.customer !== undefined) {
      obj.customer = message.customer;
    }
    return obj;
  },

  create(base?: DeepPartial<GoogleAdsIdentifier>): GoogleAdsIdentifier {
    return GoogleAdsIdentifier.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GoogleAdsIdentifier>): GoogleAdsIdentifier {
    const message = createBaseGoogleAdsIdentifier();
    message.customer = object.customer ?? undefined;
    return message;
  },
};

function createBaseMerchantCenterIdentifier(): MerchantCenterIdentifier {
  return { merchantCenterId: undefined };
}

export const MerchantCenterIdentifier: MessageFns<MerchantCenterIdentifier> = {
  encode(message: MerchantCenterIdentifier, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.merchantCenterId !== undefined) {
      writer.uint32(8).int64(message.merchantCenterId.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MerchantCenterIdentifier {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMerchantCenterIdentifier();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.merchantCenterId = Long.fromString(reader.int64().toString());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MerchantCenterIdentifier {
    return { merchantCenterId: isSet(object.merchantCenterId) ? Long.fromValue(object.merchantCenterId) : undefined };
  },

  toJSON(message: MerchantCenterIdentifier): unknown {
    const obj: any = {};
    if (message.merchantCenterId !== undefined) {
      obj.merchantCenterId = (message.merchantCenterId || Long.ZERO).toString();
    }
    return obj;
  },

  create(base?: DeepPartial<MerchantCenterIdentifier>): MerchantCenterIdentifier {
    return MerchantCenterIdentifier.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MerchantCenterIdentifier>): MerchantCenterIdentifier {
    const message = createBaseMerchantCenterIdentifier();
    message.merchantCenterId = (object.merchantCenterId !== undefined && object.merchantCenterId !== null)
      ? Long.fromValue(object.merchantCenterId)
      : undefined;
    return message;
  },
};

function createBaseAdvertisingPartnerIdentifier(): AdvertisingPartnerIdentifier {
  return { customer: undefined };
}

export const AdvertisingPartnerIdentifier: MessageFns<AdvertisingPartnerIdentifier> = {
  encode(message: AdvertisingPartnerIdentifier, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.customer !== undefined) {
      writer.uint32(10).string(message.customer);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AdvertisingPartnerIdentifier {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAdvertisingPartnerIdentifier();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customer = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AdvertisingPartnerIdentifier {
    return { customer: isSet(object.customer) ? globalThis.String(object.customer) : undefined };
  },

  toJSON(message: AdvertisingPartnerIdentifier): unknown {
    const obj: any = {};
    if (message.customer !== undefined) {
      obj.customer = message.customer;
    }
    return obj;
  },

  create(base?: DeepPartial<AdvertisingPartnerIdentifier>): AdvertisingPartnerIdentifier {
    return AdvertisingPartnerIdentifier.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AdvertisingPartnerIdentifier>): AdvertisingPartnerIdentifier {
    const message = createBaseAdvertisingPartnerIdentifier();
    message.customer = object.customer ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
