// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v16/resources/payments_account.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.googleads.v16.resources";

/** A payments account, which can be used to set up billing for an Ads customer. */
export interface PaymentsAccount {
  /**
   * Output only. The resource name of the payments account.
   * PaymentsAccount resource names have the form:
   *
   * `customers/{customer_id}/paymentsAccounts/{payments_account_id}`
   */
  resourceName: string;
  /** Output only. A 16 digit ID used to identify a payments account. */
  paymentsAccountId?:
    | string
    | undefined;
  /** Output only. The name of the payments account. */
  name?:
    | string
    | undefined;
  /**
   * Output only. The currency code of the payments account.
   * A subset of the currency codes derived from the ISO 4217 standard is
   * supported.
   */
  currencyCode?:
    | string
    | undefined;
  /**
   * Output only. A 12 digit ID used to identify the payments profile associated
   * with the payments account.
   */
  paymentsProfileId?:
    | string
    | undefined;
  /**
   * Output only. A secondary payments profile ID present in uncommon
   * situations, for example, when a sequential liability agreement has been
   * arranged.
   */
  secondaryPaymentsProfileId?:
    | string
    | undefined;
  /** Output only. Paying manager of this payment account. */
  payingManagerCustomer?: string | undefined;
}

function createBasePaymentsAccount(): PaymentsAccount {
  return {
    resourceName: "",
    paymentsAccountId: undefined,
    name: undefined,
    currencyCode: undefined,
    paymentsProfileId: undefined,
    secondaryPaymentsProfileId: undefined,
    payingManagerCustomer: undefined,
  };
}

export const PaymentsAccount: MessageFns<PaymentsAccount> = {
  encode(message: PaymentsAccount, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(10).string(message.resourceName);
    }
    if (message.paymentsAccountId !== undefined) {
      writer.uint32(66).string(message.paymentsAccountId);
    }
    if (message.name !== undefined) {
      writer.uint32(74).string(message.name);
    }
    if (message.currencyCode !== undefined) {
      writer.uint32(82).string(message.currencyCode);
    }
    if (message.paymentsProfileId !== undefined) {
      writer.uint32(90).string(message.paymentsProfileId);
    }
    if (message.secondaryPaymentsProfileId !== undefined) {
      writer.uint32(98).string(message.secondaryPaymentsProfileId);
    }
    if (message.payingManagerCustomer !== undefined) {
      writer.uint32(106).string(message.payingManagerCustomer);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PaymentsAccount {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePaymentsAccount();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceName = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.paymentsAccountId = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.name = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.currencyCode = reader.string();
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.paymentsProfileId = reader.string();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.secondaryPaymentsProfileId = reader.string();
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.payingManagerCustomer = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PaymentsAccount {
    return {
      resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "",
      paymentsAccountId: isSet(object.paymentsAccountId) ? globalThis.String(object.paymentsAccountId) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      currencyCode: isSet(object.currencyCode) ? globalThis.String(object.currencyCode) : undefined,
      paymentsProfileId: isSet(object.paymentsProfileId) ? globalThis.String(object.paymentsProfileId) : undefined,
      secondaryPaymentsProfileId: isSet(object.secondaryPaymentsProfileId)
        ? globalThis.String(object.secondaryPaymentsProfileId)
        : undefined,
      payingManagerCustomer: isSet(object.payingManagerCustomer)
        ? globalThis.String(object.payingManagerCustomer)
        : undefined,
    };
  },

  toJSON(message: PaymentsAccount): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    if (message.paymentsAccountId !== undefined) {
      obj.paymentsAccountId = message.paymentsAccountId;
    }
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.currencyCode !== undefined) {
      obj.currencyCode = message.currencyCode;
    }
    if (message.paymentsProfileId !== undefined) {
      obj.paymentsProfileId = message.paymentsProfileId;
    }
    if (message.secondaryPaymentsProfileId !== undefined) {
      obj.secondaryPaymentsProfileId = message.secondaryPaymentsProfileId;
    }
    if (message.payingManagerCustomer !== undefined) {
      obj.payingManagerCustomer = message.payingManagerCustomer;
    }
    return obj;
  },

  create(base?: DeepPartial<PaymentsAccount>): PaymentsAccount {
    return PaymentsAccount.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PaymentsAccount>): PaymentsAccount {
    const message = createBasePaymentsAccount();
    message.resourceName = object.resourceName ?? "";
    message.paymentsAccountId = object.paymentsAccountId ?? undefined;
    message.name = object.name ?? undefined;
    message.currencyCode = object.currencyCode ?? undefined;
    message.paymentsProfileId = object.paymentsProfileId ?? undefined;
    message.secondaryPaymentsProfileId = object.secondaryPaymentsProfileId ?? undefined;
    message.payingManagerCustomer = object.payingManagerCustomer ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
