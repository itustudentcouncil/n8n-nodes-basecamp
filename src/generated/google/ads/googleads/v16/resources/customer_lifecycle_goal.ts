// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v16/resources/customer_lifecycle_goal.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { LifecycleGoalValueSettings } from "../common/lifecycle_goals.js";

export const protobufPackage = "google.ads.googleads.v16.resources";

/** Account level customer lifecycle goal settings. */
export interface CustomerLifecycleGoal {
  /**
   * Immutable. The resource name of the customer lifecycle goal.
   * Customer lifecycle resource names have the form:
   *
   * `customers/{customer_id}/customerLifecycleGoal`
   */
  resourceName: string;
  /**
   * Output only. Common lifecycle goal settings shared among different types of
   * lifecycle goals.
   */
  lifecycleGoalCustomerDefinitionSettings:
    | CustomerLifecycleGoal_LifecycleGoalCustomerDefinitionSettings
    | undefined;
  /** Output only. Customer acquisition goal customer level value settings. */
  customerAcquisitionGoalValueSettings: LifecycleGoalValueSettings | undefined;
}

/**
 * Lifecycle goal common settings, including existing user lists and existing
 * high lifetime value user lists, shared among different types of lifecycle
 * goals.
 */
export interface CustomerLifecycleGoal_LifecycleGoalCustomerDefinitionSettings {
  /** Output only. User lists which represent existing customers. */
  existingUserLists: string[];
  /**
   * Output only. User lists which represent customers of high lifetime value.
   * In current stage, high lifetime value feature is in beta and this field
   * is read-only.
   */
  highLifetimeValueUserLists: string[];
}

function createBaseCustomerLifecycleGoal(): CustomerLifecycleGoal {
  return {
    resourceName: "",
    lifecycleGoalCustomerDefinitionSettings: undefined,
    customerAcquisitionGoalValueSettings: undefined,
  };
}

export const CustomerLifecycleGoal: MessageFns<CustomerLifecycleGoal> = {
  encode(message: CustomerLifecycleGoal, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(10).string(message.resourceName);
    }
    if (message.lifecycleGoalCustomerDefinitionSettings !== undefined) {
      CustomerLifecycleGoal_LifecycleGoalCustomerDefinitionSettings.encode(
        message.lifecycleGoalCustomerDefinitionSettings,
        writer.uint32(18).fork(),
      ).join();
    }
    if (message.customerAcquisitionGoalValueSettings !== undefined) {
      LifecycleGoalValueSettings.encode(message.customerAcquisitionGoalValueSettings, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CustomerLifecycleGoal {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCustomerLifecycleGoal();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.lifecycleGoalCustomerDefinitionSettings =
            CustomerLifecycleGoal_LifecycleGoalCustomerDefinitionSettings.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.customerAcquisitionGoalValueSettings = LifecycleGoalValueSettings.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CustomerLifecycleGoal {
    return {
      resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "",
      lifecycleGoalCustomerDefinitionSettings: isSet(object.lifecycleGoalCustomerDefinitionSettings)
        ? CustomerLifecycleGoal_LifecycleGoalCustomerDefinitionSettings.fromJSON(
          object.lifecycleGoalCustomerDefinitionSettings,
        )
        : undefined,
      customerAcquisitionGoalValueSettings: isSet(object.customerAcquisitionGoalValueSettings)
        ? LifecycleGoalValueSettings.fromJSON(object.customerAcquisitionGoalValueSettings)
        : undefined,
    };
  },

  toJSON(message: CustomerLifecycleGoal): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    if (message.lifecycleGoalCustomerDefinitionSettings !== undefined) {
      obj.lifecycleGoalCustomerDefinitionSettings = CustomerLifecycleGoal_LifecycleGoalCustomerDefinitionSettings
        .toJSON(message.lifecycleGoalCustomerDefinitionSettings);
    }
    if (message.customerAcquisitionGoalValueSettings !== undefined) {
      obj.customerAcquisitionGoalValueSettings = LifecycleGoalValueSettings.toJSON(
        message.customerAcquisitionGoalValueSettings,
      );
    }
    return obj;
  },

  create(base?: DeepPartial<CustomerLifecycleGoal>): CustomerLifecycleGoal {
    return CustomerLifecycleGoal.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CustomerLifecycleGoal>): CustomerLifecycleGoal {
    const message = createBaseCustomerLifecycleGoal();
    message.resourceName = object.resourceName ?? "";
    message.lifecycleGoalCustomerDefinitionSettings =
      (object.lifecycleGoalCustomerDefinitionSettings !== undefined &&
          object.lifecycleGoalCustomerDefinitionSettings !== null)
        ? CustomerLifecycleGoal_LifecycleGoalCustomerDefinitionSettings.fromPartial(
          object.lifecycleGoalCustomerDefinitionSettings,
        )
        : undefined;
    message.customerAcquisitionGoalValueSettings =
      (object.customerAcquisitionGoalValueSettings !== undefined &&
          object.customerAcquisitionGoalValueSettings !== null)
        ? LifecycleGoalValueSettings.fromPartial(object.customerAcquisitionGoalValueSettings)
        : undefined;
    return message;
  },
};

function createBaseCustomerLifecycleGoal_LifecycleGoalCustomerDefinitionSettings(): CustomerLifecycleGoal_LifecycleGoalCustomerDefinitionSettings {
  return { existingUserLists: [], highLifetimeValueUserLists: [] };
}

export const CustomerLifecycleGoal_LifecycleGoalCustomerDefinitionSettings: MessageFns<
  CustomerLifecycleGoal_LifecycleGoalCustomerDefinitionSettings
> = {
  encode(
    message: CustomerLifecycleGoal_LifecycleGoalCustomerDefinitionSettings,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    for (const v of message.existingUserLists) {
      writer.uint32(10).string(v!);
    }
    for (const v of message.highLifetimeValueUserLists) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): CustomerLifecycleGoal_LifecycleGoalCustomerDefinitionSettings {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCustomerLifecycleGoal_LifecycleGoalCustomerDefinitionSettings();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.existingUserLists.push(reader.string());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.highLifetimeValueUserLists.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CustomerLifecycleGoal_LifecycleGoalCustomerDefinitionSettings {
    return {
      existingUserLists: globalThis.Array.isArray(object?.existingUserLists)
        ? object.existingUserLists.map((e: any) => globalThis.String(e))
        : [],
      highLifetimeValueUserLists: globalThis.Array.isArray(object?.highLifetimeValueUserLists)
        ? object.highLifetimeValueUserLists.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: CustomerLifecycleGoal_LifecycleGoalCustomerDefinitionSettings): unknown {
    const obj: any = {};
    if (message.existingUserLists?.length) {
      obj.existingUserLists = message.existingUserLists;
    }
    if (message.highLifetimeValueUserLists?.length) {
      obj.highLifetimeValueUserLists = message.highLifetimeValueUserLists;
    }
    return obj;
  },

  create(
    base?: DeepPartial<CustomerLifecycleGoal_LifecycleGoalCustomerDefinitionSettings>,
  ): CustomerLifecycleGoal_LifecycleGoalCustomerDefinitionSettings {
    return CustomerLifecycleGoal_LifecycleGoalCustomerDefinitionSettings.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<CustomerLifecycleGoal_LifecycleGoalCustomerDefinitionSettings>,
  ): CustomerLifecycleGoal_LifecycleGoalCustomerDefinitionSettings {
    const message = createBaseCustomerLifecycleGoal_LifecycleGoalCustomerDefinitionSettings();
    message.existingUserLists = object.existingUserLists?.map((e) => e) || [];
    message.highLifetimeValueUserLists = object.highLifetimeValueUserLists?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
