// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v16/resources/detail_placement_view.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import {
  PlacementTypeEnum_PlacementType,
  placementTypeEnum_PlacementTypeFromJSON,
  placementTypeEnum_PlacementTypeToJSON,
} from "../enums/placement_type.js";

export const protobufPackage = "google.ads.googleads.v16.resources";

/** A view with metrics aggregated by ad group and URL or YouTube video. */
export interface DetailPlacementView {
  /**
   * Output only. The resource name of the detail placement view.
   * Detail placement view resource names have the form:
   *
   * `customers/{customer_id}/detailPlacementViews/{ad_group_id}~{base64_placement}`
   */
  resourceName: string;
  /**
   * Output only. The automatic placement string at detail level, e. g. website
   * URL, mobile application ID, or a YouTube video ID.
   */
  placement?:
    | string
    | undefined;
  /**
   * Output only. The display name is URL name for websites, YouTube video name
   * for YouTube videos, and translated mobile app name for mobile apps.
   */
  displayName?:
    | string
    | undefined;
  /**
   * Output only. URL of the group placement, for example, domain, link to the
   * mobile application in app store, or a YouTube channel URL.
   */
  groupPlacementTargetUrl?:
    | string
    | undefined;
  /**
   * Output only. URL of the placement, for example, website, link to the mobile
   * application in app store, or a YouTube video URL.
   */
  targetUrl?:
    | string
    | undefined;
  /**
   * Output only. Type of the placement, for example, Website, YouTube Video,
   * and Mobile Application.
   */
  placementType: PlacementTypeEnum_PlacementType;
}

function createBaseDetailPlacementView(): DetailPlacementView {
  return {
    resourceName: "",
    placement: undefined,
    displayName: undefined,
    groupPlacementTargetUrl: undefined,
    targetUrl: undefined,
    placementType: 0,
  };
}

export const DetailPlacementView: MessageFns<DetailPlacementView> = {
  encode(message: DetailPlacementView, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(10).string(message.resourceName);
    }
    if (message.placement !== undefined) {
      writer.uint32(58).string(message.placement);
    }
    if (message.displayName !== undefined) {
      writer.uint32(66).string(message.displayName);
    }
    if (message.groupPlacementTargetUrl !== undefined) {
      writer.uint32(74).string(message.groupPlacementTargetUrl);
    }
    if (message.targetUrl !== undefined) {
      writer.uint32(82).string(message.targetUrl);
    }
    if (message.placementType !== 0) {
      writer.uint32(48).int32(message.placementType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DetailPlacementView {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDetailPlacementView();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceName = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.placement = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.groupPlacementTargetUrl = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.targetUrl = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.placementType = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DetailPlacementView {
    return {
      resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "",
      placement: isSet(object.placement) ? globalThis.String(object.placement) : undefined,
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : undefined,
      groupPlacementTargetUrl: isSet(object.groupPlacementTargetUrl)
        ? globalThis.String(object.groupPlacementTargetUrl)
        : undefined,
      targetUrl: isSet(object.targetUrl) ? globalThis.String(object.targetUrl) : undefined,
      placementType: isSet(object.placementType) ? placementTypeEnum_PlacementTypeFromJSON(object.placementType) : 0,
    };
  },

  toJSON(message: DetailPlacementView): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    if (message.placement !== undefined) {
      obj.placement = message.placement;
    }
    if (message.displayName !== undefined) {
      obj.displayName = message.displayName;
    }
    if (message.groupPlacementTargetUrl !== undefined) {
      obj.groupPlacementTargetUrl = message.groupPlacementTargetUrl;
    }
    if (message.targetUrl !== undefined) {
      obj.targetUrl = message.targetUrl;
    }
    if (message.placementType !== 0) {
      obj.placementType = placementTypeEnum_PlacementTypeToJSON(message.placementType);
    }
    return obj;
  },

  create(base?: DeepPartial<DetailPlacementView>): DetailPlacementView {
    return DetailPlacementView.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DetailPlacementView>): DetailPlacementView {
    const message = createBaseDetailPlacementView();
    message.resourceName = object.resourceName ?? "";
    message.placement = object.placement ?? undefined;
    message.displayName = object.displayName ?? undefined;
    message.groupPlacementTargetUrl = object.groupPlacementTargetUrl ?? undefined;
    message.targetUrl = object.targetUrl ?? undefined;
    message.placementType = object.placementType ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
