// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v16/resources/campaign_budget.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import {
  BudgetDeliveryMethodEnum_BudgetDeliveryMethod,
  budgetDeliveryMethodEnum_BudgetDeliveryMethodFromJSON,
  budgetDeliveryMethodEnum_BudgetDeliveryMethodToJSON,
} from "../enums/budget_delivery_method.js";
import {
  BudgetPeriodEnum_BudgetPeriod,
  budgetPeriodEnum_BudgetPeriodFromJSON,
  budgetPeriodEnum_BudgetPeriodToJSON,
} from "../enums/budget_period.js";
import {
  BudgetStatusEnum_BudgetStatus,
  budgetStatusEnum_BudgetStatusFromJSON,
  budgetStatusEnum_BudgetStatusToJSON,
} from "../enums/budget_status.js";
import {
  BudgetTypeEnum_BudgetType,
  budgetTypeEnum_BudgetTypeFromJSON,
  budgetTypeEnum_BudgetTypeToJSON,
} from "../enums/budget_type.js";

export const protobufPackage = "google.ads.googleads.v16.resources";

/** A campaign budget. */
export interface CampaignBudget {
  /**
   * Immutable. The resource name of the campaign budget.
   * Campaign budget resource names have the form:
   *
   * `customers/{customer_id}/campaignBudgets/{campaign_budget_id}`
   */
  resourceName: string;
  /**
   * Output only. The ID of the campaign budget.
   *
   * A campaign budget is created using the CampaignBudgetService create
   * operation and is assigned a budget ID. A budget ID can be shared across
   * different campaigns; the system will then allocate the campaign budget
   * among different campaigns to get optimum results.
   */
  id?:
    | Long
    | undefined;
  /**
   * The name of the campaign budget.
   *
   * When creating a campaign budget through CampaignBudgetService, every
   * explicitly shared campaign budget must have a non-null, non-empty name.
   * Campaign budgets that are not explicitly shared derive their name from the
   * attached campaign's name.
   *
   * The length of this string must be between 1 and 255, inclusive,
   * in UTF-8 bytes, (trimmed).
   */
  name?:
    | string
    | undefined;
  /**
   * The amount of the budget, in the local currency for the account.
   * Amount is specified in micros, where one million is equivalent to one
   * currency unit. Monthly spend is capped at 30.4 times this amount.
   */
  amountMicros?:
    | Long
    | undefined;
  /**
   * The lifetime amount of the budget, in the local currency for the account.
   * Amount is specified in micros, where one million is equivalent to one
   * currency unit.
   */
  totalAmountMicros?:
    | Long
    | undefined;
  /** Output only. The status of this campaign budget. This field is read-only. */
  status: BudgetStatusEnum_BudgetStatus;
  /**
   * The delivery method that determines the rate at which the campaign budget
   * is spent.
   *
   * Defaults to STANDARD if unspecified in a create operation.
   */
  deliveryMethod: BudgetDeliveryMethodEnum_BudgetDeliveryMethod;
  /**
   * Specifies whether the budget is explicitly shared. Defaults to true if
   * unspecified in a create operation.
   *
   * If true, the budget was created with the purpose of sharing
   * across one or more campaigns.
   *
   * If false, the budget was created with the intention of only being used
   * with a single campaign. The budget's name and status will stay in sync
   * with the campaign's name and status. Attempting to share the budget with a
   * second campaign will result in an error.
   *
   * A non-shared budget can become an explicitly shared. The same operation
   * must also assign the budget a name.
   *
   * A shared campaign budget can never become non-shared.
   */
  explicitlyShared?:
    | boolean
    | undefined;
  /**
   * Output only. The number of campaigns actively using the budget.
   *
   * This field is read-only.
   */
  referenceCount?:
    | Long
    | undefined;
  /**
   * Output only. Indicates whether there is a recommended budget for this
   * campaign budget.
   *
   * This field is read-only.
   */
  hasRecommendedBudget?:
    | boolean
    | undefined;
  /**
   * Output only. The recommended budget amount. If no recommendation is
   * available, this will be set to the budget amount. Amount is specified in
   * micros, where one million is equivalent to one currency unit.
   *
   * This field is read-only.
   */
  recommendedBudgetAmountMicros?:
    | Long
    | undefined;
  /**
   * Immutable. Period over which to spend the budget. Defaults to DAILY if not
   * specified.
   */
  period: BudgetPeriodEnum_BudgetPeriod;
  /**
   * Output only. The estimated change in weekly clicks if the recommended
   * budget is applied.
   *
   * This field is read-only.
   */
  recommendedBudgetEstimatedChangeWeeklyClicks?:
    | Long
    | undefined;
  /**
   * Output only. The estimated change in weekly cost in micros if the
   * recommended budget is applied. One million is equivalent to one currency
   * unit.
   *
   * This field is read-only.
   */
  recommendedBudgetEstimatedChangeWeeklyCostMicros?:
    | Long
    | undefined;
  /**
   * Output only. The estimated change in weekly interactions if the recommended
   * budget is applied.
   *
   * This field is read-only.
   */
  recommendedBudgetEstimatedChangeWeeklyInteractions?:
    | Long
    | undefined;
  /**
   * Output only. The estimated change in weekly views if the recommended budget
   * is applied.
   *
   * This field is read-only.
   */
  recommendedBudgetEstimatedChangeWeeklyViews?:
    | Long
    | undefined;
  /** Immutable. The type of the campaign budget. */
  type: BudgetTypeEnum_BudgetType;
  /**
   * ID of the portfolio bidding strategy that this shared campaign budget
   * is aligned with. When a bidding strategy and a campaign budget are aligned,
   * they are attached to the same set of campaigns. After a campaign budget is
   * aligned with a bidding strategy, campaigns that are added to the campaign
   * budget must also use the aligned bidding strategy.
   */
  alignedBiddingStrategyId: Long;
}

function createBaseCampaignBudget(): CampaignBudget {
  return {
    resourceName: "",
    id: undefined,
    name: undefined,
    amountMicros: undefined,
    totalAmountMicros: undefined,
    status: 0,
    deliveryMethod: 0,
    explicitlyShared: undefined,
    referenceCount: undefined,
    hasRecommendedBudget: undefined,
    recommendedBudgetAmountMicros: undefined,
    period: 0,
    recommendedBudgetEstimatedChangeWeeklyClicks: undefined,
    recommendedBudgetEstimatedChangeWeeklyCostMicros: undefined,
    recommendedBudgetEstimatedChangeWeeklyInteractions: undefined,
    recommendedBudgetEstimatedChangeWeeklyViews: undefined,
    type: 0,
    alignedBiddingStrategyId: Long.ZERO,
  };
}

export const CampaignBudget: MessageFns<CampaignBudget> = {
  encode(message: CampaignBudget, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(10).string(message.resourceName);
    }
    if (message.id !== undefined) {
      writer.uint32(152).int64(message.id.toString());
    }
    if (message.name !== undefined) {
      writer.uint32(162).string(message.name);
    }
    if (message.amountMicros !== undefined) {
      writer.uint32(168).int64(message.amountMicros.toString());
    }
    if (message.totalAmountMicros !== undefined) {
      writer.uint32(176).int64(message.totalAmountMicros.toString());
    }
    if (message.status !== 0) {
      writer.uint32(48).int32(message.status);
    }
    if (message.deliveryMethod !== 0) {
      writer.uint32(56).int32(message.deliveryMethod);
    }
    if (message.explicitlyShared !== undefined) {
      writer.uint32(184).bool(message.explicitlyShared);
    }
    if (message.referenceCount !== undefined) {
      writer.uint32(192).int64(message.referenceCount.toString());
    }
    if (message.hasRecommendedBudget !== undefined) {
      writer.uint32(200).bool(message.hasRecommendedBudget);
    }
    if (message.recommendedBudgetAmountMicros !== undefined) {
      writer.uint32(208).int64(message.recommendedBudgetAmountMicros.toString());
    }
    if (message.period !== 0) {
      writer.uint32(104).int32(message.period);
    }
    if (message.recommendedBudgetEstimatedChangeWeeklyClicks !== undefined) {
      writer.uint32(216).int64(message.recommendedBudgetEstimatedChangeWeeklyClicks.toString());
    }
    if (message.recommendedBudgetEstimatedChangeWeeklyCostMicros !== undefined) {
      writer.uint32(224).int64(message.recommendedBudgetEstimatedChangeWeeklyCostMicros.toString());
    }
    if (message.recommendedBudgetEstimatedChangeWeeklyInteractions !== undefined) {
      writer.uint32(232).int64(message.recommendedBudgetEstimatedChangeWeeklyInteractions.toString());
    }
    if (message.recommendedBudgetEstimatedChangeWeeklyViews !== undefined) {
      writer.uint32(240).int64(message.recommendedBudgetEstimatedChangeWeeklyViews.toString());
    }
    if (message.type !== 0) {
      writer.uint32(144).int32(message.type);
    }
    if (!message.alignedBiddingStrategyId.equals(Long.ZERO)) {
      writer.uint32(248).int64(message.alignedBiddingStrategyId.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CampaignBudget {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCampaignBudget();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceName = reader.string();
          continue;
        case 19:
          if (tag !== 152) {
            break;
          }

          message.id = Long.fromString(reader.int64().toString());
          continue;
        case 20:
          if (tag !== 162) {
            break;
          }

          message.name = reader.string();
          continue;
        case 21:
          if (tag !== 168) {
            break;
          }

          message.amountMicros = Long.fromString(reader.int64().toString());
          continue;
        case 22:
          if (tag !== 176) {
            break;
          }

          message.totalAmountMicros = Long.fromString(reader.int64().toString());
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.deliveryMethod = reader.int32() as any;
          continue;
        case 23:
          if (tag !== 184) {
            break;
          }

          message.explicitlyShared = reader.bool();
          continue;
        case 24:
          if (tag !== 192) {
            break;
          }

          message.referenceCount = Long.fromString(reader.int64().toString());
          continue;
        case 25:
          if (tag !== 200) {
            break;
          }

          message.hasRecommendedBudget = reader.bool();
          continue;
        case 26:
          if (tag !== 208) {
            break;
          }

          message.recommendedBudgetAmountMicros = Long.fromString(reader.int64().toString());
          continue;
        case 13:
          if (tag !== 104) {
            break;
          }

          message.period = reader.int32() as any;
          continue;
        case 27:
          if (tag !== 216) {
            break;
          }

          message.recommendedBudgetEstimatedChangeWeeklyClicks = Long.fromString(reader.int64().toString());
          continue;
        case 28:
          if (tag !== 224) {
            break;
          }

          message.recommendedBudgetEstimatedChangeWeeklyCostMicros = Long.fromString(reader.int64().toString());
          continue;
        case 29:
          if (tag !== 232) {
            break;
          }

          message.recommendedBudgetEstimatedChangeWeeklyInteractions = Long.fromString(reader.int64().toString());
          continue;
        case 30:
          if (tag !== 240) {
            break;
          }

          message.recommendedBudgetEstimatedChangeWeeklyViews = Long.fromString(reader.int64().toString());
          continue;
        case 18:
          if (tag !== 144) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        case 31:
          if (tag !== 248) {
            break;
          }

          message.alignedBiddingStrategyId = Long.fromString(reader.int64().toString());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CampaignBudget {
    return {
      resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "",
      id: isSet(object.id) ? Long.fromValue(object.id) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      amountMicros: isSet(object.amountMicros) ? Long.fromValue(object.amountMicros) : undefined,
      totalAmountMicros: isSet(object.totalAmountMicros) ? Long.fromValue(object.totalAmountMicros) : undefined,
      status: isSet(object.status) ? budgetStatusEnum_BudgetStatusFromJSON(object.status) : 0,
      deliveryMethod: isSet(object.deliveryMethod)
        ? budgetDeliveryMethodEnum_BudgetDeliveryMethodFromJSON(object.deliveryMethod)
        : 0,
      explicitlyShared: isSet(object.explicitlyShared) ? globalThis.Boolean(object.explicitlyShared) : undefined,
      referenceCount: isSet(object.referenceCount) ? Long.fromValue(object.referenceCount) : undefined,
      hasRecommendedBudget: isSet(object.hasRecommendedBudget)
        ? globalThis.Boolean(object.hasRecommendedBudget)
        : undefined,
      recommendedBudgetAmountMicros: isSet(object.recommendedBudgetAmountMicros)
        ? Long.fromValue(object.recommendedBudgetAmountMicros)
        : undefined,
      period: isSet(object.period) ? budgetPeriodEnum_BudgetPeriodFromJSON(object.period) : 0,
      recommendedBudgetEstimatedChangeWeeklyClicks: isSet(object.recommendedBudgetEstimatedChangeWeeklyClicks)
        ? Long.fromValue(object.recommendedBudgetEstimatedChangeWeeklyClicks)
        : undefined,
      recommendedBudgetEstimatedChangeWeeklyCostMicros: isSet(object.recommendedBudgetEstimatedChangeWeeklyCostMicros)
        ? Long.fromValue(object.recommendedBudgetEstimatedChangeWeeklyCostMicros)
        : undefined,
      recommendedBudgetEstimatedChangeWeeklyInteractions:
        isSet(object.recommendedBudgetEstimatedChangeWeeklyInteractions)
          ? Long.fromValue(object.recommendedBudgetEstimatedChangeWeeklyInteractions)
          : undefined,
      recommendedBudgetEstimatedChangeWeeklyViews: isSet(object.recommendedBudgetEstimatedChangeWeeklyViews)
        ? Long.fromValue(object.recommendedBudgetEstimatedChangeWeeklyViews)
        : undefined,
      type: isSet(object.type) ? budgetTypeEnum_BudgetTypeFromJSON(object.type) : 0,
      alignedBiddingStrategyId: isSet(object.alignedBiddingStrategyId)
        ? Long.fromValue(object.alignedBiddingStrategyId)
        : Long.ZERO,
    };
  },

  toJSON(message: CampaignBudget): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    if (message.id !== undefined) {
      obj.id = (message.id || Long.ZERO).toString();
    }
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.amountMicros !== undefined) {
      obj.amountMicros = (message.amountMicros || Long.ZERO).toString();
    }
    if (message.totalAmountMicros !== undefined) {
      obj.totalAmountMicros = (message.totalAmountMicros || Long.ZERO).toString();
    }
    if (message.status !== 0) {
      obj.status = budgetStatusEnum_BudgetStatusToJSON(message.status);
    }
    if (message.deliveryMethod !== 0) {
      obj.deliveryMethod = budgetDeliveryMethodEnum_BudgetDeliveryMethodToJSON(message.deliveryMethod);
    }
    if (message.explicitlyShared !== undefined) {
      obj.explicitlyShared = message.explicitlyShared;
    }
    if (message.referenceCount !== undefined) {
      obj.referenceCount = (message.referenceCount || Long.ZERO).toString();
    }
    if (message.hasRecommendedBudget !== undefined) {
      obj.hasRecommendedBudget = message.hasRecommendedBudget;
    }
    if (message.recommendedBudgetAmountMicros !== undefined) {
      obj.recommendedBudgetAmountMicros = (message.recommendedBudgetAmountMicros || Long.ZERO).toString();
    }
    if (message.period !== 0) {
      obj.period = budgetPeriodEnum_BudgetPeriodToJSON(message.period);
    }
    if (message.recommendedBudgetEstimatedChangeWeeklyClicks !== undefined) {
      obj.recommendedBudgetEstimatedChangeWeeklyClicks =
        (message.recommendedBudgetEstimatedChangeWeeklyClicks || Long.ZERO).toString();
    }
    if (message.recommendedBudgetEstimatedChangeWeeklyCostMicros !== undefined) {
      obj.recommendedBudgetEstimatedChangeWeeklyCostMicros =
        (message.recommendedBudgetEstimatedChangeWeeklyCostMicros || Long.ZERO).toString();
    }
    if (message.recommendedBudgetEstimatedChangeWeeklyInteractions !== undefined) {
      obj.recommendedBudgetEstimatedChangeWeeklyInteractions =
        (message.recommendedBudgetEstimatedChangeWeeklyInteractions || Long.ZERO).toString();
    }
    if (message.recommendedBudgetEstimatedChangeWeeklyViews !== undefined) {
      obj.recommendedBudgetEstimatedChangeWeeklyViews =
        (message.recommendedBudgetEstimatedChangeWeeklyViews || Long.ZERO).toString();
    }
    if (message.type !== 0) {
      obj.type = budgetTypeEnum_BudgetTypeToJSON(message.type);
    }
    if (!message.alignedBiddingStrategyId.equals(Long.ZERO)) {
      obj.alignedBiddingStrategyId = (message.alignedBiddingStrategyId || Long.ZERO).toString();
    }
    return obj;
  },

  create(base?: DeepPartial<CampaignBudget>): CampaignBudget {
    return CampaignBudget.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CampaignBudget>): CampaignBudget {
    const message = createBaseCampaignBudget();
    message.resourceName = object.resourceName ?? "";
    message.id = (object.id !== undefined && object.id !== null) ? Long.fromValue(object.id) : undefined;
    message.name = object.name ?? undefined;
    message.amountMicros = (object.amountMicros !== undefined && object.amountMicros !== null)
      ? Long.fromValue(object.amountMicros)
      : undefined;
    message.totalAmountMicros = (object.totalAmountMicros !== undefined && object.totalAmountMicros !== null)
      ? Long.fromValue(object.totalAmountMicros)
      : undefined;
    message.status = object.status ?? 0;
    message.deliveryMethod = object.deliveryMethod ?? 0;
    message.explicitlyShared = object.explicitlyShared ?? undefined;
    message.referenceCount = (object.referenceCount !== undefined && object.referenceCount !== null)
      ? Long.fromValue(object.referenceCount)
      : undefined;
    message.hasRecommendedBudget = object.hasRecommendedBudget ?? undefined;
    message.recommendedBudgetAmountMicros =
      (object.recommendedBudgetAmountMicros !== undefined && object.recommendedBudgetAmountMicros !== null)
        ? Long.fromValue(object.recommendedBudgetAmountMicros)
        : undefined;
    message.period = object.period ?? 0;
    message.recommendedBudgetEstimatedChangeWeeklyClicks =
      (object.recommendedBudgetEstimatedChangeWeeklyClicks !== undefined &&
          object.recommendedBudgetEstimatedChangeWeeklyClicks !== null)
        ? Long.fromValue(object.recommendedBudgetEstimatedChangeWeeklyClicks)
        : undefined;
    message.recommendedBudgetEstimatedChangeWeeklyCostMicros =
      (object.recommendedBudgetEstimatedChangeWeeklyCostMicros !== undefined &&
          object.recommendedBudgetEstimatedChangeWeeklyCostMicros !== null)
        ? Long.fromValue(object.recommendedBudgetEstimatedChangeWeeklyCostMicros)
        : undefined;
    message.recommendedBudgetEstimatedChangeWeeklyInteractions =
      (object.recommendedBudgetEstimatedChangeWeeklyInteractions !== undefined &&
          object.recommendedBudgetEstimatedChangeWeeklyInteractions !== null)
        ? Long.fromValue(object.recommendedBudgetEstimatedChangeWeeklyInteractions)
        : undefined;
    message.recommendedBudgetEstimatedChangeWeeklyViews =
      (object.recommendedBudgetEstimatedChangeWeeklyViews !== undefined &&
          object.recommendedBudgetEstimatedChangeWeeklyViews !== null)
        ? Long.fromValue(object.recommendedBudgetEstimatedChangeWeeklyViews)
        : undefined;
    message.type = object.type ?? 0;
    message.alignedBiddingStrategyId =
      (object.alignedBiddingStrategyId !== undefined && object.alignedBiddingStrategyId !== null)
        ? Long.fromValue(object.alignedBiddingStrategyId)
        : Long.ZERO;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
