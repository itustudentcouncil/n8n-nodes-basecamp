// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v16/resources/custom_interest.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import {
  CustomInterestMemberTypeEnum_CustomInterestMemberType,
  customInterestMemberTypeEnum_CustomInterestMemberTypeFromJSON,
  customInterestMemberTypeEnum_CustomInterestMemberTypeToJSON,
} from "../enums/custom_interest_member_type.js";
import {
  CustomInterestStatusEnum_CustomInterestStatus,
  customInterestStatusEnum_CustomInterestStatusFromJSON,
  customInterestStatusEnum_CustomInterestStatusToJSON,
} from "../enums/custom_interest_status.js";
import {
  CustomInterestTypeEnum_CustomInterestType,
  customInterestTypeEnum_CustomInterestTypeFromJSON,
  customInterestTypeEnum_CustomInterestTypeToJSON,
} from "../enums/custom_interest_type.js";

export const protobufPackage = "google.ads.googleads.v16.resources";

/** A custom interest. This is a list of users by interest. */
export interface CustomInterest {
  /**
   * Immutable. The resource name of the custom interest.
   * Custom interest resource names have the form:
   *
   * `customers/{customer_id}/customInterests/{custom_interest_id}`
   */
  resourceName: string;
  /** Output only. Id of the custom interest. */
  id?:
    | Long
    | undefined;
  /**
   * Status of this custom interest. Indicates whether the custom interest is
   * enabled or removed.
   */
  status: CustomInterestStatusEnum_CustomInterestStatus;
  /**
   * Name of the custom interest. It should be unique across the same custom
   * affinity audience.
   * This field is required for create operations.
   */
  name?:
    | string
    | undefined;
  /**
   * Type of the custom interest, CUSTOM_AFFINITY or CUSTOM_INTENT.
   * By default the type is set to CUSTOM_AFFINITY.
   */
  type: CustomInterestTypeEnum_CustomInterestType;
  /** Description of this custom interest audience. */
  description?:
    | string
    | undefined;
  /**
   * List of custom interest members that this custom interest is composed of.
   * Members can be added during CustomInterest creation. If members are
   * presented in UPDATE operation, existing members will be overridden.
   */
  members: CustomInterestMember[];
}

/**
 * A member of custom interest audience. A member can be a keyword or url.
 * It is immutable, that is, it can only be created or removed but not changed.
 */
export interface CustomInterestMember {
  /** The type of custom interest member, KEYWORD or URL. */
  memberType: CustomInterestMemberTypeEnum_CustomInterestMemberType;
  /**
   * Keyword text when member_type is KEYWORD or URL string when
   * member_type is URL.
   */
  parameter?: string | undefined;
}

function createBaseCustomInterest(): CustomInterest {
  return { resourceName: "", id: undefined, status: 0, name: undefined, type: 0, description: undefined, members: [] };
}

export const CustomInterest: MessageFns<CustomInterest> = {
  encode(message: CustomInterest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(10).string(message.resourceName);
    }
    if (message.id !== undefined) {
      writer.uint32(64).int64(message.id.toString());
    }
    if (message.status !== 0) {
      writer.uint32(24).int32(message.status);
    }
    if (message.name !== undefined) {
      writer.uint32(74).string(message.name);
    }
    if (message.type !== 0) {
      writer.uint32(40).int32(message.type);
    }
    if (message.description !== undefined) {
      writer.uint32(82).string(message.description);
    }
    for (const v of message.members) {
      CustomInterestMember.encode(v!, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CustomInterest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCustomInterest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceName = reader.string();
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.id = Long.fromString(reader.int64().toString());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.name = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.description = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.members.push(CustomInterestMember.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CustomInterest {
    return {
      resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "",
      id: isSet(object.id) ? Long.fromValue(object.id) : undefined,
      status: isSet(object.status) ? customInterestStatusEnum_CustomInterestStatusFromJSON(object.status) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      type: isSet(object.type) ? customInterestTypeEnum_CustomInterestTypeFromJSON(object.type) : 0,
      description: isSet(object.description) ? globalThis.String(object.description) : undefined,
      members: globalThis.Array.isArray(object?.members)
        ? object.members.map((e: any) => CustomInterestMember.fromJSON(e))
        : [],
    };
  },

  toJSON(message: CustomInterest): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    if (message.id !== undefined) {
      obj.id = (message.id || Long.ZERO).toString();
    }
    if (message.status !== 0) {
      obj.status = customInterestStatusEnum_CustomInterestStatusToJSON(message.status);
    }
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.type !== 0) {
      obj.type = customInterestTypeEnum_CustomInterestTypeToJSON(message.type);
    }
    if (message.description !== undefined) {
      obj.description = message.description;
    }
    if (message.members?.length) {
      obj.members = message.members.map((e) => CustomInterestMember.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<CustomInterest>): CustomInterest {
    return CustomInterest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CustomInterest>): CustomInterest {
    const message = createBaseCustomInterest();
    message.resourceName = object.resourceName ?? "";
    message.id = (object.id !== undefined && object.id !== null) ? Long.fromValue(object.id) : undefined;
    message.status = object.status ?? 0;
    message.name = object.name ?? undefined;
    message.type = object.type ?? 0;
    message.description = object.description ?? undefined;
    message.members = object.members?.map((e) => CustomInterestMember.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCustomInterestMember(): CustomInterestMember {
  return { memberType: 0, parameter: undefined };
}

export const CustomInterestMember: MessageFns<CustomInterestMember> = {
  encode(message: CustomInterestMember, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.memberType !== 0) {
      writer.uint32(8).int32(message.memberType);
    }
    if (message.parameter !== undefined) {
      writer.uint32(26).string(message.parameter);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CustomInterestMember {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCustomInterestMember();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.memberType = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.parameter = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CustomInterestMember {
    return {
      memberType: isSet(object.memberType)
        ? customInterestMemberTypeEnum_CustomInterestMemberTypeFromJSON(object.memberType)
        : 0,
      parameter: isSet(object.parameter) ? globalThis.String(object.parameter) : undefined,
    };
  },

  toJSON(message: CustomInterestMember): unknown {
    const obj: any = {};
    if (message.memberType !== 0) {
      obj.memberType = customInterestMemberTypeEnum_CustomInterestMemberTypeToJSON(message.memberType);
    }
    if (message.parameter !== undefined) {
      obj.parameter = message.parameter;
    }
    return obj;
  },

  create(base?: DeepPartial<CustomInterestMember>): CustomInterestMember {
    return CustomInterestMember.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CustomInterestMember>): CustomInterestMember {
    const message = createBaseCustomInterestMember();
    message.memberType = object.memberType ?? 0;
    message.parameter = object.parameter ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
