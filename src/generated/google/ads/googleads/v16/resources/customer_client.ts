// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v16/resources/customer_client.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import {
  CustomerStatusEnum_CustomerStatus,
  customerStatusEnum_CustomerStatusFromJSON,
  customerStatusEnum_CustomerStatusToJSON,
} from "../enums/customer_status.js";

export const protobufPackage = "google.ads.googleads.v16.resources";

/**
 * A link between the given customer and a client customer. CustomerClients only
 * exist for manager customers. All direct and indirect client customers are
 * included, as well as the manager itself.
 */
export interface CustomerClient {
  /**
   * Output only. The resource name of the customer client.
   * CustomerClient resource names have the form:
   * `customers/{customer_id}/customerClients/{client_customer_id}`
   */
  resourceName: string;
  /**
   * Output only. The resource name of the client-customer which is linked to
   * the given customer. Read only.
   */
  clientCustomer?:
    | string
    | undefined;
  /**
   * Output only. Specifies whether this is a
   * [hidden account](https://support.google.com/google-ads/answer/7519830).
   * Read only.
   */
  hidden?:
    | boolean
    | undefined;
  /**
   * Output only. Distance between given customer and client. For self link, the
   * level value will be 0. Read only.
   */
  level?:
    | Long
    | undefined;
  /**
   * Output only. Common Locale Data Repository (CLDR) string representation of
   * the time zone of the client, for example, America/Los_Angeles. Read only.
   */
  timeZone?:
    | string
    | undefined;
  /** Output only. Identifies if the client is a test account. Read only. */
  testAccount?:
    | boolean
    | undefined;
  /** Output only. Identifies if the client is a manager. Read only. */
  manager?:
    | boolean
    | undefined;
  /** Output only. Descriptive name for the client. Read only. */
  descriptiveName?:
    | string
    | undefined;
  /**
   * Output only. Currency code (for example, 'USD', 'EUR') for the client. Read
   * only.
   */
  currencyCode?:
    | string
    | undefined;
  /** Output only. The ID of the client customer. Read only. */
  id?:
    | Long
    | undefined;
  /**
   * Output only. The resource names of the labels owned by the requesting
   * customer that are applied to the client customer. Label resource names have
   * the form:
   *
   * `customers/{customer_id}/labels/{label_id}`
   */
  appliedLabels: string[];
  /** Output only. The status of the client customer. Read only. */
  status: CustomerStatusEnum_CustomerStatus;
}

function createBaseCustomerClient(): CustomerClient {
  return {
    resourceName: "",
    clientCustomer: undefined,
    hidden: undefined,
    level: undefined,
    timeZone: undefined,
    testAccount: undefined,
    manager: undefined,
    descriptiveName: undefined,
    currencyCode: undefined,
    id: undefined,
    appliedLabels: [],
    status: 0,
  };
}

export const CustomerClient: MessageFns<CustomerClient> = {
  encode(message: CustomerClient, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(10).string(message.resourceName);
    }
    if (message.clientCustomer !== undefined) {
      writer.uint32(98).string(message.clientCustomer);
    }
    if (message.hidden !== undefined) {
      writer.uint32(104).bool(message.hidden);
    }
    if (message.level !== undefined) {
      writer.uint32(112).int64(message.level.toString());
    }
    if (message.timeZone !== undefined) {
      writer.uint32(122).string(message.timeZone);
    }
    if (message.testAccount !== undefined) {
      writer.uint32(128).bool(message.testAccount);
    }
    if (message.manager !== undefined) {
      writer.uint32(136).bool(message.manager);
    }
    if (message.descriptiveName !== undefined) {
      writer.uint32(146).string(message.descriptiveName);
    }
    if (message.currencyCode !== undefined) {
      writer.uint32(154).string(message.currencyCode);
    }
    if (message.id !== undefined) {
      writer.uint32(160).int64(message.id.toString());
    }
    for (const v of message.appliedLabels) {
      writer.uint32(170).string(v!);
    }
    if (message.status !== 0) {
      writer.uint32(176).int32(message.status);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CustomerClient {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCustomerClient();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceName = reader.string();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.clientCustomer = reader.string();
          continue;
        case 13:
          if (tag !== 104) {
            break;
          }

          message.hidden = reader.bool();
          continue;
        case 14:
          if (tag !== 112) {
            break;
          }

          message.level = Long.fromString(reader.int64().toString());
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.timeZone = reader.string();
          continue;
        case 16:
          if (tag !== 128) {
            break;
          }

          message.testAccount = reader.bool();
          continue;
        case 17:
          if (tag !== 136) {
            break;
          }

          message.manager = reader.bool();
          continue;
        case 18:
          if (tag !== 146) {
            break;
          }

          message.descriptiveName = reader.string();
          continue;
        case 19:
          if (tag !== 154) {
            break;
          }

          message.currencyCode = reader.string();
          continue;
        case 20:
          if (tag !== 160) {
            break;
          }

          message.id = Long.fromString(reader.int64().toString());
          continue;
        case 21:
          if (tag !== 170) {
            break;
          }

          message.appliedLabels.push(reader.string());
          continue;
        case 22:
          if (tag !== 176) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CustomerClient {
    return {
      resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "",
      clientCustomer: isSet(object.clientCustomer) ? globalThis.String(object.clientCustomer) : undefined,
      hidden: isSet(object.hidden) ? globalThis.Boolean(object.hidden) : undefined,
      level: isSet(object.level) ? Long.fromValue(object.level) : undefined,
      timeZone: isSet(object.timeZone) ? globalThis.String(object.timeZone) : undefined,
      testAccount: isSet(object.testAccount) ? globalThis.Boolean(object.testAccount) : undefined,
      manager: isSet(object.manager) ? globalThis.Boolean(object.manager) : undefined,
      descriptiveName: isSet(object.descriptiveName) ? globalThis.String(object.descriptiveName) : undefined,
      currencyCode: isSet(object.currencyCode) ? globalThis.String(object.currencyCode) : undefined,
      id: isSet(object.id) ? Long.fromValue(object.id) : undefined,
      appliedLabels: globalThis.Array.isArray(object?.appliedLabels)
        ? object.appliedLabels.map((e: any) => globalThis.String(e))
        : [],
      status: isSet(object.status) ? customerStatusEnum_CustomerStatusFromJSON(object.status) : 0,
    };
  },

  toJSON(message: CustomerClient): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    if (message.clientCustomer !== undefined) {
      obj.clientCustomer = message.clientCustomer;
    }
    if (message.hidden !== undefined) {
      obj.hidden = message.hidden;
    }
    if (message.level !== undefined) {
      obj.level = (message.level || Long.ZERO).toString();
    }
    if (message.timeZone !== undefined) {
      obj.timeZone = message.timeZone;
    }
    if (message.testAccount !== undefined) {
      obj.testAccount = message.testAccount;
    }
    if (message.manager !== undefined) {
      obj.manager = message.manager;
    }
    if (message.descriptiveName !== undefined) {
      obj.descriptiveName = message.descriptiveName;
    }
    if (message.currencyCode !== undefined) {
      obj.currencyCode = message.currencyCode;
    }
    if (message.id !== undefined) {
      obj.id = (message.id || Long.ZERO).toString();
    }
    if (message.appliedLabels?.length) {
      obj.appliedLabels = message.appliedLabels;
    }
    if (message.status !== 0) {
      obj.status = customerStatusEnum_CustomerStatusToJSON(message.status);
    }
    return obj;
  },

  create(base?: DeepPartial<CustomerClient>): CustomerClient {
    return CustomerClient.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CustomerClient>): CustomerClient {
    const message = createBaseCustomerClient();
    message.resourceName = object.resourceName ?? "";
    message.clientCustomer = object.clientCustomer ?? undefined;
    message.hidden = object.hidden ?? undefined;
    message.level = (object.level !== undefined && object.level !== null) ? Long.fromValue(object.level) : undefined;
    message.timeZone = object.timeZone ?? undefined;
    message.testAccount = object.testAccount ?? undefined;
    message.manager = object.manager ?? undefined;
    message.descriptiveName = object.descriptiveName ?? undefined;
    message.currencyCode = object.currencyCode ?? undefined;
    message.id = (object.id !== undefined && object.id !== null) ? Long.fromValue(object.id) : undefined;
    message.appliedLabels = object.appliedLabels?.map((e) => e) || [];
    message.status = object.status ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
