// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v16/services/smart_campaign_suggest_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { SmartCampaignAdInfo } from "../common/ad_type_infos.js";
import { AdScheduleInfo, KeywordThemeInfo, LocationInfo, ProximityInfo } from "../common/criteria.js";
import { KeywordThemeConstant } from "../resources/keyword_theme_constant.js";

export const protobufPackage = "google.ads.googleads.v16.services";

/**
 * Request message for
 * [SmartCampaignSuggestService.SuggestSmartCampaignBudgetOptions][google.ads.googleads.v16.services.SmartCampaignSuggestService.SuggestSmartCampaignBudgetOptions].
 */
export interface SuggestSmartCampaignBudgetOptionsRequest {
  /** Required. The ID of the customer whose budget options are to be suggested. */
  customerId: string;
  /** Required. The resource name of the campaign to get suggestion for. */
  campaign?:
    | string
    | undefined;
  /** Required. Information needed to get budget options */
  suggestionInfo?: SmartCampaignSuggestionInfo | undefined;
}

/**
 * Information needed to get suggestion for Smart Campaign. More information
 * provided will help the system to derive better suggestions.
 */
export interface SmartCampaignSuggestionInfo {
  /** Optional. Landing page URL of the campaign. */
  finalUrl: string;
  /**
   * Optional. The two letter advertising language for the Smart campaign to be
   * constructed, default to 'en' if not set.
   */
  languageCode: string;
  /** Optional. The business ad schedule. */
  adSchedules: AdScheduleInfo[];
  /**
   * Optional. Smart campaign keyword themes. This field may greatly improve
   * suggestion accuracy and we recommend always setting it if possible.
   */
  keywordThemes: KeywordThemeInfo[];
  /** Optional. Context describing the business to advertise. */
  businessContext?:
    | SmartCampaignSuggestionInfo_BusinessContext
    | undefined;
  /**
   * Optional. The resource name of a Business Profile location.
   * Business Profile location resource names can be fetched through the
   * Business Profile API and adhere to the following format:
   * `locations/{locationId}`.
   *
   * See the [Business Profile API]
   * (https://developers.google.com/my-business/reference/businessinformation/rest/v1/accounts.locations)
   * for additional details.
   */
  businessProfileLocation?:
    | string
    | undefined;
  /** Optional. The targeting geo location by locations. */
  locationList?:
    | SmartCampaignSuggestionInfo_LocationList
    | undefined;
  /** Optional. The targeting geo location by proximity. */
  proximity?: ProximityInfo | undefined;
}

/** A list of locations. */
export interface SmartCampaignSuggestionInfo_LocationList {
  /** Required. Locations. */
  locations: LocationInfo[];
}

/** A context that describes a business. */
export interface SmartCampaignSuggestionInfo_BusinessContext {
  /** Optional. The name of the business. */
  businessName: string;
}

/**
 * Response message for
 * [SmartCampaignSuggestService.SuggestSmartCampaignBudgetOptions][google.ads.googleads.v16.services.SmartCampaignSuggestService.SuggestSmartCampaignBudgetOptions].
 * Depending on whether the system could suggest the options, either all of the
 * options or none of them might be returned.
 */
export interface SuggestSmartCampaignBudgetOptionsResponse {
  /** Optional. The lowest budget option. */
  low?:
    | SuggestSmartCampaignBudgetOptionsResponse_BudgetOption
    | undefined;
  /** Optional. The recommended budget option. */
  recommended?:
    | SuggestSmartCampaignBudgetOptionsResponse_BudgetOption
    | undefined;
  /** Optional. The highest budget option. */
  high?: SuggestSmartCampaignBudgetOptionsResponse_BudgetOption | undefined;
}

/** Performance metrics for a given budget option. */
export interface SuggestSmartCampaignBudgetOptionsResponse_Metrics {
  /** The estimated min daily clicks. */
  minDailyClicks: Long;
  /** The estimated max daily clicks. */
  maxDailyClicks: Long;
}

/** Smart Campaign budget option. */
export interface SuggestSmartCampaignBudgetOptionsResponse_BudgetOption {
  /**
   * The amount of the budget, in the local currency for the account.
   * Amount is specified in micros, where one million is equivalent to one
   * currency unit.
   */
  dailyAmountMicros: Long;
  /**
   * Metrics pertaining to the suggested budget, could be empty if there is
   * not enough information to derive the estimates.
   */
  metrics: SuggestSmartCampaignBudgetOptionsResponse_Metrics | undefined;
}

/**
 * Request message for
 * [SmartCampaignSuggestService.SuggestSmartCampaignAd][google.ads.googleads.v16.services.SmartCampaignSuggestService.SuggestSmartCampaignAd].
 */
export interface SuggestSmartCampaignAdRequest {
  /** Required. The ID of the customer. */
  customerId: string;
  /**
   * Required. Inputs used to suggest a Smart campaign ad.
   * Required fields: final_url, language_code, keyword_themes.
   * Optional but recommended fields to improve the quality of the suggestion:
   * business_setting and geo_target.
   */
  suggestionInfo: SmartCampaignSuggestionInfo | undefined;
}

/**
 * Response message for
 * [SmartCampaignSuggestService.SuggestSmartCampaignAd][google.ads.googleads.v16.services.SmartCampaignSuggestService.SuggestSmartCampaignAd].
 */
export interface SuggestSmartCampaignAdResponse {
  /**
   * Optional. Ad info includes 3 creative headlines and 2 creative
   * descriptions.
   */
  adInfo: SmartCampaignAdInfo | undefined;
}

/**
 * Request message for
 * [SmartCampaignSuggestService.SuggestKeywordThemes][google.ads.googleads.v16.services.SmartCampaignSuggestService.SuggestKeywordThemes].
 */
export interface SuggestKeywordThemesRequest {
  /** Required. The ID of the customer. */
  customerId: string;
  /**
   * Required. Information to get keyword theme suggestions.
   * Required fields:
   *
   * * suggestion_info.final_url
   * * suggestion_info.language_code
   * * suggestion_info.geo_target
   *
   * Recommended fields:
   *
   * * suggestion_info.business_setting
   */
  suggestionInfo: SmartCampaignSuggestionInfo | undefined;
}

/**
 * Response message for
 * [SmartCampaignSuggestService.SuggestKeywordThemes][google.ads.googleads.v16.services.SmartCampaignSuggestService.SuggestKeywordThemes].
 */
export interface SuggestKeywordThemesResponse {
  /** Smart campaign keyword theme suggestions. */
  keywordThemes: SuggestKeywordThemesResponse_KeywordTheme[];
}

/** A Smart campaign keyword theme suggestion. */
export interface SuggestKeywordThemesResponse_KeywordTheme {
  /** A Smart campaign keyword theme constant. */
  keywordThemeConstant?:
    | KeywordThemeConstant
    | undefined;
  /** A free-form text keyword theme. */
  freeFormKeywordTheme?: string | undefined;
}

function createBaseSuggestSmartCampaignBudgetOptionsRequest(): SuggestSmartCampaignBudgetOptionsRequest {
  return { customerId: "", campaign: undefined, suggestionInfo: undefined };
}

export const SuggestSmartCampaignBudgetOptionsRequest: MessageFns<SuggestSmartCampaignBudgetOptionsRequest> = {
  encode(message: SuggestSmartCampaignBudgetOptionsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.customerId !== "") {
      writer.uint32(10).string(message.customerId);
    }
    if (message.campaign !== undefined) {
      writer.uint32(18).string(message.campaign);
    }
    if (message.suggestionInfo !== undefined) {
      SmartCampaignSuggestionInfo.encode(message.suggestionInfo, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SuggestSmartCampaignBudgetOptionsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSuggestSmartCampaignBudgetOptionsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customerId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.campaign = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.suggestionInfo = SmartCampaignSuggestionInfo.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SuggestSmartCampaignBudgetOptionsRequest {
    return {
      customerId: isSet(object.customerId) ? globalThis.String(object.customerId) : "",
      campaign: isSet(object.campaign) ? globalThis.String(object.campaign) : undefined,
      suggestionInfo: isSet(object.suggestionInfo)
        ? SmartCampaignSuggestionInfo.fromJSON(object.suggestionInfo)
        : undefined,
    };
  },

  toJSON(message: SuggestSmartCampaignBudgetOptionsRequest): unknown {
    const obj: any = {};
    if (message.customerId !== "") {
      obj.customerId = message.customerId;
    }
    if (message.campaign !== undefined) {
      obj.campaign = message.campaign;
    }
    if (message.suggestionInfo !== undefined) {
      obj.suggestionInfo = SmartCampaignSuggestionInfo.toJSON(message.suggestionInfo);
    }
    return obj;
  },

  create(base?: DeepPartial<SuggestSmartCampaignBudgetOptionsRequest>): SuggestSmartCampaignBudgetOptionsRequest {
    return SuggestSmartCampaignBudgetOptionsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SuggestSmartCampaignBudgetOptionsRequest>): SuggestSmartCampaignBudgetOptionsRequest {
    const message = createBaseSuggestSmartCampaignBudgetOptionsRequest();
    message.customerId = object.customerId ?? "";
    message.campaign = object.campaign ?? undefined;
    message.suggestionInfo = (object.suggestionInfo !== undefined && object.suggestionInfo !== null)
      ? SmartCampaignSuggestionInfo.fromPartial(object.suggestionInfo)
      : undefined;
    return message;
  },
};

function createBaseSmartCampaignSuggestionInfo(): SmartCampaignSuggestionInfo {
  return {
    finalUrl: "",
    languageCode: "",
    adSchedules: [],
    keywordThemes: [],
    businessContext: undefined,
    businessProfileLocation: undefined,
    locationList: undefined,
    proximity: undefined,
  };
}

export const SmartCampaignSuggestionInfo: MessageFns<SmartCampaignSuggestionInfo> = {
  encode(message: SmartCampaignSuggestionInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.finalUrl !== "") {
      writer.uint32(10).string(message.finalUrl);
    }
    if (message.languageCode !== "") {
      writer.uint32(26).string(message.languageCode);
    }
    for (const v of message.adSchedules) {
      AdScheduleInfo.encode(v!, writer.uint32(50).fork()).join();
    }
    for (const v of message.keywordThemes) {
      KeywordThemeInfo.encode(v!, writer.uint32(58).fork()).join();
    }
    if (message.businessContext !== undefined) {
      SmartCampaignSuggestionInfo_BusinessContext.encode(message.businessContext, writer.uint32(66).fork()).join();
    }
    if (message.businessProfileLocation !== undefined) {
      writer.uint32(74).string(message.businessProfileLocation);
    }
    if (message.locationList !== undefined) {
      SmartCampaignSuggestionInfo_LocationList.encode(message.locationList, writer.uint32(34).fork()).join();
    }
    if (message.proximity !== undefined) {
      ProximityInfo.encode(message.proximity, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SmartCampaignSuggestionInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSmartCampaignSuggestionInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.finalUrl = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.languageCode = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.adSchedules.push(AdScheduleInfo.decode(reader, reader.uint32()));
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.keywordThemes.push(KeywordThemeInfo.decode(reader, reader.uint32()));
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.businessContext = SmartCampaignSuggestionInfo_BusinessContext.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.businessProfileLocation = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.locationList = SmartCampaignSuggestionInfo_LocationList.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.proximity = ProximityInfo.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SmartCampaignSuggestionInfo {
    return {
      finalUrl: isSet(object.finalUrl) ? globalThis.String(object.finalUrl) : "",
      languageCode: isSet(object.languageCode) ? globalThis.String(object.languageCode) : "",
      adSchedules: globalThis.Array.isArray(object?.adSchedules)
        ? object.adSchedules.map((e: any) => AdScheduleInfo.fromJSON(e))
        : [],
      keywordThemes: globalThis.Array.isArray(object?.keywordThemes)
        ? object.keywordThemes.map((e: any) => KeywordThemeInfo.fromJSON(e))
        : [],
      businessContext: isSet(object.businessContext)
        ? SmartCampaignSuggestionInfo_BusinessContext.fromJSON(object.businessContext)
        : undefined,
      businessProfileLocation: isSet(object.businessProfileLocation)
        ? globalThis.String(object.businessProfileLocation)
        : undefined,
      locationList: isSet(object.locationList)
        ? SmartCampaignSuggestionInfo_LocationList.fromJSON(object.locationList)
        : undefined,
      proximity: isSet(object.proximity) ? ProximityInfo.fromJSON(object.proximity) : undefined,
    };
  },

  toJSON(message: SmartCampaignSuggestionInfo): unknown {
    const obj: any = {};
    if (message.finalUrl !== "") {
      obj.finalUrl = message.finalUrl;
    }
    if (message.languageCode !== "") {
      obj.languageCode = message.languageCode;
    }
    if (message.adSchedules?.length) {
      obj.adSchedules = message.adSchedules.map((e) => AdScheduleInfo.toJSON(e));
    }
    if (message.keywordThemes?.length) {
      obj.keywordThemes = message.keywordThemes.map((e) => KeywordThemeInfo.toJSON(e));
    }
    if (message.businessContext !== undefined) {
      obj.businessContext = SmartCampaignSuggestionInfo_BusinessContext.toJSON(message.businessContext);
    }
    if (message.businessProfileLocation !== undefined) {
      obj.businessProfileLocation = message.businessProfileLocation;
    }
    if (message.locationList !== undefined) {
      obj.locationList = SmartCampaignSuggestionInfo_LocationList.toJSON(message.locationList);
    }
    if (message.proximity !== undefined) {
      obj.proximity = ProximityInfo.toJSON(message.proximity);
    }
    return obj;
  },

  create(base?: DeepPartial<SmartCampaignSuggestionInfo>): SmartCampaignSuggestionInfo {
    return SmartCampaignSuggestionInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SmartCampaignSuggestionInfo>): SmartCampaignSuggestionInfo {
    const message = createBaseSmartCampaignSuggestionInfo();
    message.finalUrl = object.finalUrl ?? "";
    message.languageCode = object.languageCode ?? "";
    message.adSchedules = object.adSchedules?.map((e) => AdScheduleInfo.fromPartial(e)) || [];
    message.keywordThemes = object.keywordThemes?.map((e) => KeywordThemeInfo.fromPartial(e)) || [];
    message.businessContext = (object.businessContext !== undefined && object.businessContext !== null)
      ? SmartCampaignSuggestionInfo_BusinessContext.fromPartial(object.businessContext)
      : undefined;
    message.businessProfileLocation = object.businessProfileLocation ?? undefined;
    message.locationList = (object.locationList !== undefined && object.locationList !== null)
      ? SmartCampaignSuggestionInfo_LocationList.fromPartial(object.locationList)
      : undefined;
    message.proximity = (object.proximity !== undefined && object.proximity !== null)
      ? ProximityInfo.fromPartial(object.proximity)
      : undefined;
    return message;
  },
};

function createBaseSmartCampaignSuggestionInfo_LocationList(): SmartCampaignSuggestionInfo_LocationList {
  return { locations: [] };
}

export const SmartCampaignSuggestionInfo_LocationList: MessageFns<SmartCampaignSuggestionInfo_LocationList> = {
  encode(message: SmartCampaignSuggestionInfo_LocationList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.locations) {
      LocationInfo.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SmartCampaignSuggestionInfo_LocationList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSmartCampaignSuggestionInfo_LocationList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.locations.push(LocationInfo.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SmartCampaignSuggestionInfo_LocationList {
    return {
      locations: globalThis.Array.isArray(object?.locations)
        ? object.locations.map((e: any) => LocationInfo.fromJSON(e))
        : [],
    };
  },

  toJSON(message: SmartCampaignSuggestionInfo_LocationList): unknown {
    const obj: any = {};
    if (message.locations?.length) {
      obj.locations = message.locations.map((e) => LocationInfo.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<SmartCampaignSuggestionInfo_LocationList>): SmartCampaignSuggestionInfo_LocationList {
    return SmartCampaignSuggestionInfo_LocationList.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SmartCampaignSuggestionInfo_LocationList>): SmartCampaignSuggestionInfo_LocationList {
    const message = createBaseSmartCampaignSuggestionInfo_LocationList();
    message.locations = object.locations?.map((e) => LocationInfo.fromPartial(e)) || [];
    return message;
  },
};

function createBaseSmartCampaignSuggestionInfo_BusinessContext(): SmartCampaignSuggestionInfo_BusinessContext {
  return { businessName: "" };
}

export const SmartCampaignSuggestionInfo_BusinessContext: MessageFns<SmartCampaignSuggestionInfo_BusinessContext> = {
  encode(
    message: SmartCampaignSuggestionInfo_BusinessContext,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.businessName !== "") {
      writer.uint32(10).string(message.businessName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SmartCampaignSuggestionInfo_BusinessContext {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSmartCampaignSuggestionInfo_BusinessContext();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.businessName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SmartCampaignSuggestionInfo_BusinessContext {
    return { businessName: isSet(object.businessName) ? globalThis.String(object.businessName) : "" };
  },

  toJSON(message: SmartCampaignSuggestionInfo_BusinessContext): unknown {
    const obj: any = {};
    if (message.businessName !== "") {
      obj.businessName = message.businessName;
    }
    return obj;
  },

  create(base?: DeepPartial<SmartCampaignSuggestionInfo_BusinessContext>): SmartCampaignSuggestionInfo_BusinessContext {
    return SmartCampaignSuggestionInfo_BusinessContext.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<SmartCampaignSuggestionInfo_BusinessContext>,
  ): SmartCampaignSuggestionInfo_BusinessContext {
    const message = createBaseSmartCampaignSuggestionInfo_BusinessContext();
    message.businessName = object.businessName ?? "";
    return message;
  },
};

function createBaseSuggestSmartCampaignBudgetOptionsResponse(): SuggestSmartCampaignBudgetOptionsResponse {
  return { low: undefined, recommended: undefined, high: undefined };
}

export const SuggestSmartCampaignBudgetOptionsResponse: MessageFns<SuggestSmartCampaignBudgetOptionsResponse> = {
  encode(message: SuggestSmartCampaignBudgetOptionsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.low !== undefined) {
      SuggestSmartCampaignBudgetOptionsResponse_BudgetOption.encode(message.low, writer.uint32(10).fork()).join();
    }
    if (message.recommended !== undefined) {
      SuggestSmartCampaignBudgetOptionsResponse_BudgetOption.encode(message.recommended, writer.uint32(18).fork())
        .join();
    }
    if (message.high !== undefined) {
      SuggestSmartCampaignBudgetOptionsResponse_BudgetOption.encode(message.high, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SuggestSmartCampaignBudgetOptionsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSuggestSmartCampaignBudgetOptionsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.low = SuggestSmartCampaignBudgetOptionsResponse_BudgetOption.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.recommended = SuggestSmartCampaignBudgetOptionsResponse_BudgetOption.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.high = SuggestSmartCampaignBudgetOptionsResponse_BudgetOption.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SuggestSmartCampaignBudgetOptionsResponse {
    return {
      low: isSet(object.low) ? SuggestSmartCampaignBudgetOptionsResponse_BudgetOption.fromJSON(object.low) : undefined,
      recommended: isSet(object.recommended)
        ? SuggestSmartCampaignBudgetOptionsResponse_BudgetOption.fromJSON(object.recommended)
        : undefined,
      high: isSet(object.high)
        ? SuggestSmartCampaignBudgetOptionsResponse_BudgetOption.fromJSON(object.high)
        : undefined,
    };
  },

  toJSON(message: SuggestSmartCampaignBudgetOptionsResponse): unknown {
    const obj: any = {};
    if (message.low !== undefined) {
      obj.low = SuggestSmartCampaignBudgetOptionsResponse_BudgetOption.toJSON(message.low);
    }
    if (message.recommended !== undefined) {
      obj.recommended = SuggestSmartCampaignBudgetOptionsResponse_BudgetOption.toJSON(message.recommended);
    }
    if (message.high !== undefined) {
      obj.high = SuggestSmartCampaignBudgetOptionsResponse_BudgetOption.toJSON(message.high);
    }
    return obj;
  },

  create(base?: DeepPartial<SuggestSmartCampaignBudgetOptionsResponse>): SuggestSmartCampaignBudgetOptionsResponse {
    return SuggestSmartCampaignBudgetOptionsResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<SuggestSmartCampaignBudgetOptionsResponse>,
  ): SuggestSmartCampaignBudgetOptionsResponse {
    const message = createBaseSuggestSmartCampaignBudgetOptionsResponse();
    message.low = (object.low !== undefined && object.low !== null)
      ? SuggestSmartCampaignBudgetOptionsResponse_BudgetOption.fromPartial(object.low)
      : undefined;
    message.recommended = (object.recommended !== undefined && object.recommended !== null)
      ? SuggestSmartCampaignBudgetOptionsResponse_BudgetOption.fromPartial(object.recommended)
      : undefined;
    message.high = (object.high !== undefined && object.high !== null)
      ? SuggestSmartCampaignBudgetOptionsResponse_BudgetOption.fromPartial(object.high)
      : undefined;
    return message;
  },
};

function createBaseSuggestSmartCampaignBudgetOptionsResponse_Metrics(): SuggestSmartCampaignBudgetOptionsResponse_Metrics {
  return { minDailyClicks: Long.ZERO, maxDailyClicks: Long.ZERO };
}

export const SuggestSmartCampaignBudgetOptionsResponse_Metrics: MessageFns<
  SuggestSmartCampaignBudgetOptionsResponse_Metrics
> = {
  encode(
    message: SuggestSmartCampaignBudgetOptionsResponse_Metrics,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (!message.minDailyClicks.equals(Long.ZERO)) {
      writer.uint32(8).int64(message.minDailyClicks.toString());
    }
    if (!message.maxDailyClicks.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.maxDailyClicks.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SuggestSmartCampaignBudgetOptionsResponse_Metrics {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSuggestSmartCampaignBudgetOptionsResponse_Metrics();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.minDailyClicks = Long.fromString(reader.int64().toString());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.maxDailyClicks = Long.fromString(reader.int64().toString());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SuggestSmartCampaignBudgetOptionsResponse_Metrics {
    return {
      minDailyClicks: isSet(object.minDailyClicks) ? Long.fromValue(object.minDailyClicks) : Long.ZERO,
      maxDailyClicks: isSet(object.maxDailyClicks) ? Long.fromValue(object.maxDailyClicks) : Long.ZERO,
    };
  },

  toJSON(message: SuggestSmartCampaignBudgetOptionsResponse_Metrics): unknown {
    const obj: any = {};
    if (!message.minDailyClicks.equals(Long.ZERO)) {
      obj.minDailyClicks = (message.minDailyClicks || Long.ZERO).toString();
    }
    if (!message.maxDailyClicks.equals(Long.ZERO)) {
      obj.maxDailyClicks = (message.maxDailyClicks || Long.ZERO).toString();
    }
    return obj;
  },

  create(
    base?: DeepPartial<SuggestSmartCampaignBudgetOptionsResponse_Metrics>,
  ): SuggestSmartCampaignBudgetOptionsResponse_Metrics {
    return SuggestSmartCampaignBudgetOptionsResponse_Metrics.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<SuggestSmartCampaignBudgetOptionsResponse_Metrics>,
  ): SuggestSmartCampaignBudgetOptionsResponse_Metrics {
    const message = createBaseSuggestSmartCampaignBudgetOptionsResponse_Metrics();
    message.minDailyClicks = (object.minDailyClicks !== undefined && object.minDailyClicks !== null)
      ? Long.fromValue(object.minDailyClicks)
      : Long.ZERO;
    message.maxDailyClicks = (object.maxDailyClicks !== undefined && object.maxDailyClicks !== null)
      ? Long.fromValue(object.maxDailyClicks)
      : Long.ZERO;
    return message;
  },
};

function createBaseSuggestSmartCampaignBudgetOptionsResponse_BudgetOption(): SuggestSmartCampaignBudgetOptionsResponse_BudgetOption {
  return { dailyAmountMicros: Long.ZERO, metrics: undefined };
}

export const SuggestSmartCampaignBudgetOptionsResponse_BudgetOption: MessageFns<
  SuggestSmartCampaignBudgetOptionsResponse_BudgetOption
> = {
  encode(
    message: SuggestSmartCampaignBudgetOptionsResponse_BudgetOption,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (!message.dailyAmountMicros.equals(Long.ZERO)) {
      writer.uint32(8).int64(message.dailyAmountMicros.toString());
    }
    if (message.metrics !== undefined) {
      SuggestSmartCampaignBudgetOptionsResponse_Metrics.encode(message.metrics, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SuggestSmartCampaignBudgetOptionsResponse_BudgetOption {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSuggestSmartCampaignBudgetOptionsResponse_BudgetOption();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.dailyAmountMicros = Long.fromString(reader.int64().toString());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.metrics = SuggestSmartCampaignBudgetOptionsResponse_Metrics.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SuggestSmartCampaignBudgetOptionsResponse_BudgetOption {
    return {
      dailyAmountMicros: isSet(object.dailyAmountMicros) ? Long.fromValue(object.dailyAmountMicros) : Long.ZERO,
      metrics: isSet(object.metrics)
        ? SuggestSmartCampaignBudgetOptionsResponse_Metrics.fromJSON(object.metrics)
        : undefined,
    };
  },

  toJSON(message: SuggestSmartCampaignBudgetOptionsResponse_BudgetOption): unknown {
    const obj: any = {};
    if (!message.dailyAmountMicros.equals(Long.ZERO)) {
      obj.dailyAmountMicros = (message.dailyAmountMicros || Long.ZERO).toString();
    }
    if (message.metrics !== undefined) {
      obj.metrics = SuggestSmartCampaignBudgetOptionsResponse_Metrics.toJSON(message.metrics);
    }
    return obj;
  },

  create(
    base?: DeepPartial<SuggestSmartCampaignBudgetOptionsResponse_BudgetOption>,
  ): SuggestSmartCampaignBudgetOptionsResponse_BudgetOption {
    return SuggestSmartCampaignBudgetOptionsResponse_BudgetOption.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<SuggestSmartCampaignBudgetOptionsResponse_BudgetOption>,
  ): SuggestSmartCampaignBudgetOptionsResponse_BudgetOption {
    const message = createBaseSuggestSmartCampaignBudgetOptionsResponse_BudgetOption();
    message.dailyAmountMicros = (object.dailyAmountMicros !== undefined && object.dailyAmountMicros !== null)
      ? Long.fromValue(object.dailyAmountMicros)
      : Long.ZERO;
    message.metrics = (object.metrics !== undefined && object.metrics !== null)
      ? SuggestSmartCampaignBudgetOptionsResponse_Metrics.fromPartial(object.metrics)
      : undefined;
    return message;
  },
};

function createBaseSuggestSmartCampaignAdRequest(): SuggestSmartCampaignAdRequest {
  return { customerId: "", suggestionInfo: undefined };
}

export const SuggestSmartCampaignAdRequest: MessageFns<SuggestSmartCampaignAdRequest> = {
  encode(message: SuggestSmartCampaignAdRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.customerId !== "") {
      writer.uint32(10).string(message.customerId);
    }
    if (message.suggestionInfo !== undefined) {
      SmartCampaignSuggestionInfo.encode(message.suggestionInfo, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SuggestSmartCampaignAdRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSuggestSmartCampaignAdRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customerId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.suggestionInfo = SmartCampaignSuggestionInfo.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SuggestSmartCampaignAdRequest {
    return {
      customerId: isSet(object.customerId) ? globalThis.String(object.customerId) : "",
      suggestionInfo: isSet(object.suggestionInfo)
        ? SmartCampaignSuggestionInfo.fromJSON(object.suggestionInfo)
        : undefined,
    };
  },

  toJSON(message: SuggestSmartCampaignAdRequest): unknown {
    const obj: any = {};
    if (message.customerId !== "") {
      obj.customerId = message.customerId;
    }
    if (message.suggestionInfo !== undefined) {
      obj.suggestionInfo = SmartCampaignSuggestionInfo.toJSON(message.suggestionInfo);
    }
    return obj;
  },

  create(base?: DeepPartial<SuggestSmartCampaignAdRequest>): SuggestSmartCampaignAdRequest {
    return SuggestSmartCampaignAdRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SuggestSmartCampaignAdRequest>): SuggestSmartCampaignAdRequest {
    const message = createBaseSuggestSmartCampaignAdRequest();
    message.customerId = object.customerId ?? "";
    message.suggestionInfo = (object.suggestionInfo !== undefined && object.suggestionInfo !== null)
      ? SmartCampaignSuggestionInfo.fromPartial(object.suggestionInfo)
      : undefined;
    return message;
  },
};

function createBaseSuggestSmartCampaignAdResponse(): SuggestSmartCampaignAdResponse {
  return { adInfo: undefined };
}

export const SuggestSmartCampaignAdResponse: MessageFns<SuggestSmartCampaignAdResponse> = {
  encode(message: SuggestSmartCampaignAdResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.adInfo !== undefined) {
      SmartCampaignAdInfo.encode(message.adInfo, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SuggestSmartCampaignAdResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSuggestSmartCampaignAdResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.adInfo = SmartCampaignAdInfo.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SuggestSmartCampaignAdResponse {
    return { adInfo: isSet(object.adInfo) ? SmartCampaignAdInfo.fromJSON(object.adInfo) : undefined };
  },

  toJSON(message: SuggestSmartCampaignAdResponse): unknown {
    const obj: any = {};
    if (message.adInfo !== undefined) {
      obj.adInfo = SmartCampaignAdInfo.toJSON(message.adInfo);
    }
    return obj;
  },

  create(base?: DeepPartial<SuggestSmartCampaignAdResponse>): SuggestSmartCampaignAdResponse {
    return SuggestSmartCampaignAdResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SuggestSmartCampaignAdResponse>): SuggestSmartCampaignAdResponse {
    const message = createBaseSuggestSmartCampaignAdResponse();
    message.adInfo = (object.adInfo !== undefined && object.adInfo !== null)
      ? SmartCampaignAdInfo.fromPartial(object.adInfo)
      : undefined;
    return message;
  },
};

function createBaseSuggestKeywordThemesRequest(): SuggestKeywordThemesRequest {
  return { customerId: "", suggestionInfo: undefined };
}

export const SuggestKeywordThemesRequest: MessageFns<SuggestKeywordThemesRequest> = {
  encode(message: SuggestKeywordThemesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.customerId !== "") {
      writer.uint32(10).string(message.customerId);
    }
    if (message.suggestionInfo !== undefined) {
      SmartCampaignSuggestionInfo.encode(message.suggestionInfo, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SuggestKeywordThemesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSuggestKeywordThemesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customerId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.suggestionInfo = SmartCampaignSuggestionInfo.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SuggestKeywordThemesRequest {
    return {
      customerId: isSet(object.customerId) ? globalThis.String(object.customerId) : "",
      suggestionInfo: isSet(object.suggestionInfo)
        ? SmartCampaignSuggestionInfo.fromJSON(object.suggestionInfo)
        : undefined,
    };
  },

  toJSON(message: SuggestKeywordThemesRequest): unknown {
    const obj: any = {};
    if (message.customerId !== "") {
      obj.customerId = message.customerId;
    }
    if (message.suggestionInfo !== undefined) {
      obj.suggestionInfo = SmartCampaignSuggestionInfo.toJSON(message.suggestionInfo);
    }
    return obj;
  },

  create(base?: DeepPartial<SuggestKeywordThemesRequest>): SuggestKeywordThemesRequest {
    return SuggestKeywordThemesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SuggestKeywordThemesRequest>): SuggestKeywordThemesRequest {
    const message = createBaseSuggestKeywordThemesRequest();
    message.customerId = object.customerId ?? "";
    message.suggestionInfo = (object.suggestionInfo !== undefined && object.suggestionInfo !== null)
      ? SmartCampaignSuggestionInfo.fromPartial(object.suggestionInfo)
      : undefined;
    return message;
  },
};

function createBaseSuggestKeywordThemesResponse(): SuggestKeywordThemesResponse {
  return { keywordThemes: [] };
}

export const SuggestKeywordThemesResponse: MessageFns<SuggestKeywordThemesResponse> = {
  encode(message: SuggestKeywordThemesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.keywordThemes) {
      SuggestKeywordThemesResponse_KeywordTheme.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SuggestKeywordThemesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSuggestKeywordThemesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.keywordThemes.push(SuggestKeywordThemesResponse_KeywordTheme.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SuggestKeywordThemesResponse {
    return {
      keywordThemes: globalThis.Array.isArray(object?.keywordThemes)
        ? object.keywordThemes.map((e: any) => SuggestKeywordThemesResponse_KeywordTheme.fromJSON(e))
        : [],
    };
  },

  toJSON(message: SuggestKeywordThemesResponse): unknown {
    const obj: any = {};
    if (message.keywordThemes?.length) {
      obj.keywordThemes = message.keywordThemes.map((e) => SuggestKeywordThemesResponse_KeywordTheme.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<SuggestKeywordThemesResponse>): SuggestKeywordThemesResponse {
    return SuggestKeywordThemesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SuggestKeywordThemesResponse>): SuggestKeywordThemesResponse {
    const message = createBaseSuggestKeywordThemesResponse();
    message.keywordThemes =
      object.keywordThemes?.map((e) => SuggestKeywordThemesResponse_KeywordTheme.fromPartial(e)) || [];
    return message;
  },
};

function createBaseSuggestKeywordThemesResponse_KeywordTheme(): SuggestKeywordThemesResponse_KeywordTheme {
  return { keywordThemeConstant: undefined, freeFormKeywordTheme: undefined };
}

export const SuggestKeywordThemesResponse_KeywordTheme: MessageFns<SuggestKeywordThemesResponse_KeywordTheme> = {
  encode(message: SuggestKeywordThemesResponse_KeywordTheme, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.keywordThemeConstant !== undefined) {
      KeywordThemeConstant.encode(message.keywordThemeConstant, writer.uint32(10).fork()).join();
    }
    if (message.freeFormKeywordTheme !== undefined) {
      writer.uint32(18).string(message.freeFormKeywordTheme);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SuggestKeywordThemesResponse_KeywordTheme {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSuggestKeywordThemesResponse_KeywordTheme();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.keywordThemeConstant = KeywordThemeConstant.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.freeFormKeywordTheme = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SuggestKeywordThemesResponse_KeywordTheme {
    return {
      keywordThemeConstant: isSet(object.keywordThemeConstant)
        ? KeywordThemeConstant.fromJSON(object.keywordThemeConstant)
        : undefined,
      freeFormKeywordTheme: isSet(object.freeFormKeywordTheme)
        ? globalThis.String(object.freeFormKeywordTheme)
        : undefined,
    };
  },

  toJSON(message: SuggestKeywordThemesResponse_KeywordTheme): unknown {
    const obj: any = {};
    if (message.keywordThemeConstant !== undefined) {
      obj.keywordThemeConstant = KeywordThemeConstant.toJSON(message.keywordThemeConstant);
    }
    if (message.freeFormKeywordTheme !== undefined) {
      obj.freeFormKeywordTheme = message.freeFormKeywordTheme;
    }
    return obj;
  },

  create(base?: DeepPartial<SuggestKeywordThemesResponse_KeywordTheme>): SuggestKeywordThemesResponse_KeywordTheme {
    return SuggestKeywordThemesResponse_KeywordTheme.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<SuggestKeywordThemesResponse_KeywordTheme>,
  ): SuggestKeywordThemesResponse_KeywordTheme {
    const message = createBaseSuggestKeywordThemesResponse_KeywordTheme();
    message.keywordThemeConstant = (object.keywordThemeConstant !== undefined && object.keywordThemeConstant !== null)
      ? KeywordThemeConstant.fromPartial(object.keywordThemeConstant)
      : undefined;
    message.freeFormKeywordTheme = object.freeFormKeywordTheme ?? undefined;
    return message;
  },
};

/** Service to get suggestions for Smart Campaigns. */
export type SmartCampaignSuggestServiceDefinition = typeof SmartCampaignSuggestServiceDefinition;
export const SmartCampaignSuggestServiceDefinition = {
  name: "SmartCampaignSuggestService",
  fullName: "google.ads.googleads.v16.services.SmartCampaignSuggestService",
  methods: {
    /** Returns BudgetOption suggestions. */
    suggestSmartCampaignBudgetOptions: {
      name: "SuggestSmartCampaignBudgetOptions",
      requestType: SuggestSmartCampaignBudgetOptionsRequest,
      requestStream: false,
      responseType: SuggestSmartCampaignBudgetOptionsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              69,
              58,
              1,
              42,
              34,
              64,
              47,
              118,
              49,
              54,
              47,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              115,
              47,
              123,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              95,
              105,
              100,
              61,
              42,
              125,
              58,
              115,
              117,
              103,
              103,
              101,
              115,
              116,
              83,
              109,
              97,
              114,
              116,
              67,
              97,
              109,
              112,
              97,
              105,
              103,
              110,
              66,
              117,
              100,
              103,
              101,
              116,
              79,
              112,
              116,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Suggests a Smart campaign ad compatible with the Ad family of resources,
     * based on data points such as targeting and the business to advertise.
     */
    suggestSmartCampaignAd: {
      name: "SuggestSmartCampaignAd",
      requestType: SuggestSmartCampaignAdRequest,
      requestStream: false,
      responseType: SuggestSmartCampaignAdResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              58,
              58,
              1,
              42,
              34,
              53,
              47,
              118,
              49,
              54,
              47,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              115,
              47,
              123,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              95,
              105,
              100,
              61,
              42,
              125,
              58,
              115,
              117,
              103,
              103,
              101,
              115,
              116,
              83,
              109,
              97,
              114,
              116,
              67,
              97,
              109,
              112,
              97,
              105,
              103,
              110,
              65,
              100,
            ]),
          ],
        },
      },
    },
    /** Suggests keyword themes to advertise on. */
    suggestKeywordThemes: {
      name: "SuggestKeywordThemes",
      requestType: SuggestKeywordThemesRequest,
      requestStream: false,
      responseType: SuggestKeywordThemesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              56,
              58,
              1,
              42,
              34,
              51,
              47,
              118,
              49,
              54,
              47,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              115,
              47,
              123,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              95,
              105,
              100,
              61,
              42,
              125,
              58,
              115,
              117,
              103,
              103,
              101,
              115,
              116,
              75,
              101,
              121,
              119,
              111,
              114,
              100,
              84,
              104,
              101,
              109,
              101,
              115,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface SmartCampaignSuggestServiceImplementation<CallContextExt = {}> {
  /** Returns BudgetOption suggestions. */
  suggestSmartCampaignBudgetOptions(
    request: SuggestSmartCampaignBudgetOptionsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SuggestSmartCampaignBudgetOptionsResponse>>;
  /**
   * Suggests a Smart campaign ad compatible with the Ad family of resources,
   * based on data points such as targeting and the business to advertise.
   */
  suggestSmartCampaignAd(
    request: SuggestSmartCampaignAdRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SuggestSmartCampaignAdResponse>>;
  /** Suggests keyword themes to advertise on. */
  suggestKeywordThemes(
    request: SuggestKeywordThemesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SuggestKeywordThemesResponse>>;
}

export interface SmartCampaignSuggestServiceClient<CallOptionsExt = {}> {
  /** Returns BudgetOption suggestions. */
  suggestSmartCampaignBudgetOptions(
    request: DeepPartial<SuggestSmartCampaignBudgetOptionsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SuggestSmartCampaignBudgetOptionsResponse>;
  /**
   * Suggests a Smart campaign ad compatible with the Ad family of resources,
   * based on data points such as targeting and the business to advertise.
   */
  suggestSmartCampaignAd(
    request: DeepPartial<SuggestSmartCampaignAdRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SuggestSmartCampaignAdResponse>;
  /** Suggests keyword themes to advertise on. */
  suggestKeywordThemes(
    request: DeepPartial<SuggestKeywordThemesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SuggestKeywordThemesResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
