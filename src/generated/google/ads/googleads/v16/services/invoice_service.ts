// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v16/services/invoice_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import {
  MonthOfYearEnum_MonthOfYear,
  monthOfYearEnum_MonthOfYearFromJSON,
  monthOfYearEnum_MonthOfYearToJSON,
} from "../enums/month_of_year.js";
import { Invoice } from "../resources/invoice.js";

export const protobufPackage = "google.ads.googleads.v16.services";

/**
 * Request message for fetching the invoices of a given billing setup that were
 * issued during a given month.
 */
export interface ListInvoicesRequest {
  /** Required. The ID of the customer to fetch invoices for. */
  customerId: string;
  /**
   * Required. The billing setup resource name of the requested invoices.
   *
   * `customers/{customer_id}/billingSetups/{billing_setup_id}`
   */
  billingSetup: string;
  /**
   * Required. The issue year to retrieve invoices, in yyyy format. Only
   * invoices issued in 2019 or later can be retrieved.
   */
  issueYear: string;
  /** Required. The issue month to retrieve invoices. */
  issueMonth: MonthOfYearEnum_MonthOfYear;
}

/**
 * Response message for
 * [InvoiceService.ListInvoices][google.ads.googleads.v16.services.InvoiceService.ListInvoices].
 */
export interface ListInvoicesResponse {
  /** The list of invoices that match the billing setup and time period. */
  invoices: Invoice[];
}

function createBaseListInvoicesRequest(): ListInvoicesRequest {
  return { customerId: "", billingSetup: "", issueYear: "", issueMonth: 0 };
}

export const ListInvoicesRequest: MessageFns<ListInvoicesRequest> = {
  encode(message: ListInvoicesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.customerId !== "") {
      writer.uint32(10).string(message.customerId);
    }
    if (message.billingSetup !== "") {
      writer.uint32(18).string(message.billingSetup);
    }
    if (message.issueYear !== "") {
      writer.uint32(26).string(message.issueYear);
    }
    if (message.issueMonth !== 0) {
      writer.uint32(32).int32(message.issueMonth);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListInvoicesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListInvoicesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customerId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.billingSetup = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.issueYear = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.issueMonth = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListInvoicesRequest {
    return {
      customerId: isSet(object.customerId) ? globalThis.String(object.customerId) : "",
      billingSetup: isSet(object.billingSetup) ? globalThis.String(object.billingSetup) : "",
      issueYear: isSet(object.issueYear) ? globalThis.String(object.issueYear) : "",
      issueMonth: isSet(object.issueMonth) ? monthOfYearEnum_MonthOfYearFromJSON(object.issueMonth) : 0,
    };
  },

  toJSON(message: ListInvoicesRequest): unknown {
    const obj: any = {};
    if (message.customerId !== "") {
      obj.customerId = message.customerId;
    }
    if (message.billingSetup !== "") {
      obj.billingSetup = message.billingSetup;
    }
    if (message.issueYear !== "") {
      obj.issueYear = message.issueYear;
    }
    if (message.issueMonth !== 0) {
      obj.issueMonth = monthOfYearEnum_MonthOfYearToJSON(message.issueMonth);
    }
    return obj;
  },

  create(base?: DeepPartial<ListInvoicesRequest>): ListInvoicesRequest {
    return ListInvoicesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListInvoicesRequest>): ListInvoicesRequest {
    const message = createBaseListInvoicesRequest();
    message.customerId = object.customerId ?? "";
    message.billingSetup = object.billingSetup ?? "";
    message.issueYear = object.issueYear ?? "";
    message.issueMonth = object.issueMonth ?? 0;
    return message;
  },
};

function createBaseListInvoicesResponse(): ListInvoicesResponse {
  return { invoices: [] };
}

export const ListInvoicesResponse: MessageFns<ListInvoicesResponse> = {
  encode(message: ListInvoicesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.invoices) {
      Invoice.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListInvoicesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListInvoicesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.invoices.push(Invoice.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListInvoicesResponse {
    return {
      invoices: globalThis.Array.isArray(object?.invoices) ? object.invoices.map((e: any) => Invoice.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListInvoicesResponse): unknown {
    const obj: any = {};
    if (message.invoices?.length) {
      obj.invoices = message.invoices.map((e) => Invoice.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ListInvoicesResponse>): ListInvoicesResponse {
    return ListInvoicesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListInvoicesResponse>): ListInvoicesResponse {
    const message = createBaseListInvoicesResponse();
    message.invoices = object.invoices?.map((e) => Invoice.fromPartial(e)) || [];
    return message;
  },
};

/** A service to fetch invoices issued for a billing setup during a given month. */
export type InvoiceServiceDefinition = typeof InvoiceServiceDefinition;
export const InvoiceServiceDefinition = {
  name: "InvoiceService",
  fullName: "google.ads.googleads.v16.services.InvoiceService",
  methods: {
    /**
     * Returns all invoices associated with a billing setup, for a given month.
     *
     * List of thrown errors:
     *   [AuthenticationError]()
     *   [AuthorizationError]()
     *   [FieldError]()
     *   [HeaderError]()
     *   [InternalError]()
     *   [InvoiceError]()
     *   [QuotaError]()
     *   [RequestError]()
     */
    listInvoices: {
      name: "ListInvoices",
      requestType: ListInvoicesRequest,
      requestStream: false,
      responseType: ListInvoicesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              48,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              95,
              105,
              100,
              44,
              98,
              105,
              108,
              108,
              105,
              110,
              103,
              95,
              115,
              101,
              116,
              117,
              112,
              44,
              105,
              115,
              115,
              117,
              101,
              95,
              121,
              101,
              97,
              114,
              44,
              105,
              115,
              115,
              117,
              101,
              95,
              109,
              111,
              110,
              116,
              104,
            ]),
          ],
          578365826: [
            Buffer.from([
              41,
              18,
              39,
              47,
              118,
              49,
              54,
              47,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              115,
              47,
              123,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              95,
              105,
              100,
              61,
              42,
              125,
              47,
              105,
              110,
              118,
              111,
              105,
              99,
              101,
              115,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface InvoiceServiceImplementation<CallContextExt = {}> {
  /**
   * Returns all invoices associated with a billing setup, for a given month.
   *
   * List of thrown errors:
   *   [AuthenticationError]()
   *   [AuthorizationError]()
   *   [FieldError]()
   *   [HeaderError]()
   *   [InternalError]()
   *   [InvoiceError]()
   *   [QuotaError]()
   *   [RequestError]()
   */
  listInvoices(
    request: ListInvoicesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListInvoicesResponse>>;
}

export interface InvoiceServiceClient<CallOptionsExt = {}> {
  /**
   * Returns all invoices associated with a billing setup, for a given month.
   *
   * List of thrown errors:
   *   [AuthenticationError]()
   *   [AuthorizationError]()
   *   [FieldError]()
   *   [HeaderError]()
   *   [InternalError]()
   *   [InvoiceError]()
   *   [QuotaError]()
   *   [RequestError]()
   */
  listInvoices(
    request: DeepPartial<ListInvoicesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListInvoicesResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
