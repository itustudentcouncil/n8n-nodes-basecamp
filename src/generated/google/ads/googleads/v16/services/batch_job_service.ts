// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v16/services/batch_job_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../../longrunning/operations.js";
import { Status } from "../../../../rpc/status.js";
import {
  ResponseContentTypeEnum_ResponseContentType,
  responseContentTypeEnum_ResponseContentTypeFromJSON,
  responseContentTypeEnum_ResponseContentTypeToJSON,
} from "../enums/response_content_type.js";
import { BatchJob } from "../resources/batch_job.js";
import { MutateOperation, MutateOperationResponse } from "./google_ads_service.js";

export const protobufPackage = "google.ads.googleads.v16.services";

/**
 * Request message for
 * [BatchJobService.MutateBatchJob][google.ads.googleads.v16.services.BatchJobService.MutateBatchJob].
 */
export interface MutateBatchJobRequest {
  /** Required. The ID of the customer for which to create a batch job. */
  customerId: string;
  /** Required. The operation to perform on an individual batch job. */
  operation: BatchJobOperation | undefined;
}

/** A single operation on a batch job. */
export interface BatchJobOperation {
  /** Create operation: No resource name is expected for the new batch job. */
  create?:
    | BatchJob
    | undefined;
  /**
   * Remove operation: The batch job must not have been run. A resource name
   * for the removed batch job is expected, in this format:
   *
   * `customers/{customer_id}/batchJobs/{batch_job_id}`
   */
  remove?: string | undefined;
}

/**
 * Response message for
 * [BatchJobService.MutateBatchJob][google.ads.googleads.v16.services.BatchJobService.MutateBatchJob].
 */
export interface MutateBatchJobResponse {
  /** The result for the mutate. */
  result: MutateBatchJobResult | undefined;
}

/** The result for the batch job mutate. */
export interface MutateBatchJobResult {
  /** The resource name of the batch job. */
  resourceName: string;
}

/**
 * Request message for
 * [BatchJobService.RunBatchJob][google.ads.googleads.v16.services.BatchJobService.RunBatchJob].
 */
export interface RunBatchJobRequest {
  /** Required. The resource name of the BatchJob to run. */
  resourceName: string;
}

/**
 * Request message for
 * [BatchJobService.AddBatchJobOperations][google.ads.googleads.v16.services.BatchJobService.AddBatchJobOperations].
 */
export interface AddBatchJobOperationsRequest {
  /** Required. The resource name of the batch job. */
  resourceName: string;
  /**
   * A token used to enforce sequencing.
   *
   * The first AddBatchJobOperations request for a batch job should not set
   * sequence_token. Subsequent requests must set sequence_token to the value of
   * next_sequence_token received in the previous AddBatchJobOperations
   * response.
   */
  sequenceToken: string;
  /**
   * Required. The list of mutates being added.
   *
   * Operations can use negative integers as temp ids to signify dependencies
   * between entities created in this batch job. For example, a customer with
   * id = 1234 can create a campaign and an ad group in that same campaign by
   * creating a campaign in the first operation with the resource name
   * explicitly set to "customers/1234/campaigns/-1", and creating an ad group
   * in the second operation with the campaign field also set to
   * "customers/1234/campaigns/-1".
   */
  mutateOperations: MutateOperation[];
}

/**
 * Response message for
 * [BatchJobService.AddBatchJobOperations][google.ads.googleads.v16.services.BatchJobService.AddBatchJobOperations].
 */
export interface AddBatchJobOperationsResponse {
  /** The total number of operations added so far for this batch job. */
  totalOperations: Long;
  /**
   * The sequence token to be used when calling AddBatchJobOperations again if
   * more operations need to be added. The next AddBatchJobOperations request
   * must set the sequence_token field to the value of this field.
   */
  nextSequenceToken: string;
}

/**
 * Request message for
 * [BatchJobService.ListBatchJobResults][google.ads.googleads.v16.services.BatchJobService.ListBatchJobResults].
 */
export interface ListBatchJobResultsRequest {
  /**
   * Required. The resource name of the batch job whose results are being
   * listed.
   */
  resourceName: string;
  /**
   * Token of the page to retrieve. If not specified, the first
   * page of results will be returned. Use the value obtained from
   * `next_page_token` in the previous response in order to request
   * the next page of results.
   */
  pageToken: string;
  /**
   * Number of elements to retrieve in a single page.
   * When a page request is too large, the server may decide to
   * further limit the number of returned resources.
   */
  pageSize: number;
  /**
   * The response content type setting. Determines whether the mutable resource
   * or just the resource name should be returned.
   */
  responseContentType: ResponseContentTypeEnum_ResponseContentType;
}

/**
 * Response message for
 * [BatchJobService.ListBatchJobResults][google.ads.googleads.v16.services.BatchJobService.ListBatchJobResults].
 */
export interface ListBatchJobResultsResponse {
  /** The list of rows that matched the query. */
  results: BatchJobResult[];
  /**
   * Pagination token used to retrieve the next page of results.
   * Pass the content of this string as the `page_token` attribute of
   * the next request. `next_page_token` is not returned for the last
   * page.
   */
  nextPageToken: string;
}

/** An individual batch job result. */
export interface BatchJobResult {
  /** Index of the mutate operation. */
  operationIndex: Long;
  /**
   * Response for the mutate.
   * May be empty if errors occurred.
   */
  mutateOperationResponse:
    | MutateOperationResponse
    | undefined;
  /** Details of the errors when processing the operation. */
  status: Status | undefined;
}

function createBaseMutateBatchJobRequest(): MutateBatchJobRequest {
  return { customerId: "", operation: undefined };
}

export const MutateBatchJobRequest: MessageFns<MutateBatchJobRequest> = {
  encode(message: MutateBatchJobRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.customerId !== "") {
      writer.uint32(10).string(message.customerId);
    }
    if (message.operation !== undefined) {
      BatchJobOperation.encode(message.operation, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MutateBatchJobRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMutateBatchJobRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customerId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.operation = BatchJobOperation.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MutateBatchJobRequest {
    return {
      customerId: isSet(object.customerId) ? globalThis.String(object.customerId) : "",
      operation: isSet(object.operation) ? BatchJobOperation.fromJSON(object.operation) : undefined,
    };
  },

  toJSON(message: MutateBatchJobRequest): unknown {
    const obj: any = {};
    if (message.customerId !== "") {
      obj.customerId = message.customerId;
    }
    if (message.operation !== undefined) {
      obj.operation = BatchJobOperation.toJSON(message.operation);
    }
    return obj;
  },

  create(base?: DeepPartial<MutateBatchJobRequest>): MutateBatchJobRequest {
    return MutateBatchJobRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MutateBatchJobRequest>): MutateBatchJobRequest {
    const message = createBaseMutateBatchJobRequest();
    message.customerId = object.customerId ?? "";
    message.operation = (object.operation !== undefined && object.operation !== null)
      ? BatchJobOperation.fromPartial(object.operation)
      : undefined;
    return message;
  },
};

function createBaseBatchJobOperation(): BatchJobOperation {
  return { create: undefined, remove: undefined };
}

export const BatchJobOperation: MessageFns<BatchJobOperation> = {
  encode(message: BatchJobOperation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.create !== undefined) {
      BatchJob.encode(message.create, writer.uint32(10).fork()).join();
    }
    if (message.remove !== undefined) {
      writer.uint32(34).string(message.remove);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BatchJobOperation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBatchJobOperation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.create = BatchJob.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.remove = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BatchJobOperation {
    return {
      create: isSet(object.create) ? BatchJob.fromJSON(object.create) : undefined,
      remove: isSet(object.remove) ? globalThis.String(object.remove) : undefined,
    };
  },

  toJSON(message: BatchJobOperation): unknown {
    const obj: any = {};
    if (message.create !== undefined) {
      obj.create = BatchJob.toJSON(message.create);
    }
    if (message.remove !== undefined) {
      obj.remove = message.remove;
    }
    return obj;
  },

  create(base?: DeepPartial<BatchJobOperation>): BatchJobOperation {
    return BatchJobOperation.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BatchJobOperation>): BatchJobOperation {
    const message = createBaseBatchJobOperation();
    message.create = (object.create !== undefined && object.create !== null)
      ? BatchJob.fromPartial(object.create)
      : undefined;
    message.remove = object.remove ?? undefined;
    return message;
  },
};

function createBaseMutateBatchJobResponse(): MutateBatchJobResponse {
  return { result: undefined };
}

export const MutateBatchJobResponse: MessageFns<MutateBatchJobResponse> = {
  encode(message: MutateBatchJobResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.result !== undefined) {
      MutateBatchJobResult.encode(message.result, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MutateBatchJobResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMutateBatchJobResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.result = MutateBatchJobResult.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MutateBatchJobResponse {
    return { result: isSet(object.result) ? MutateBatchJobResult.fromJSON(object.result) : undefined };
  },

  toJSON(message: MutateBatchJobResponse): unknown {
    const obj: any = {};
    if (message.result !== undefined) {
      obj.result = MutateBatchJobResult.toJSON(message.result);
    }
    return obj;
  },

  create(base?: DeepPartial<MutateBatchJobResponse>): MutateBatchJobResponse {
    return MutateBatchJobResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MutateBatchJobResponse>): MutateBatchJobResponse {
    const message = createBaseMutateBatchJobResponse();
    message.result = (object.result !== undefined && object.result !== null)
      ? MutateBatchJobResult.fromPartial(object.result)
      : undefined;
    return message;
  },
};

function createBaseMutateBatchJobResult(): MutateBatchJobResult {
  return { resourceName: "" };
}

export const MutateBatchJobResult: MessageFns<MutateBatchJobResult> = {
  encode(message: MutateBatchJobResult, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(10).string(message.resourceName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MutateBatchJobResult {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMutateBatchJobResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MutateBatchJobResult {
    return { resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "" };
  },

  toJSON(message: MutateBatchJobResult): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    return obj;
  },

  create(base?: DeepPartial<MutateBatchJobResult>): MutateBatchJobResult {
    return MutateBatchJobResult.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MutateBatchJobResult>): MutateBatchJobResult {
    const message = createBaseMutateBatchJobResult();
    message.resourceName = object.resourceName ?? "";
    return message;
  },
};

function createBaseRunBatchJobRequest(): RunBatchJobRequest {
  return { resourceName: "" };
}

export const RunBatchJobRequest: MessageFns<RunBatchJobRequest> = {
  encode(message: RunBatchJobRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(10).string(message.resourceName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RunBatchJobRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRunBatchJobRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RunBatchJobRequest {
    return { resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "" };
  },

  toJSON(message: RunBatchJobRequest): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    return obj;
  },

  create(base?: DeepPartial<RunBatchJobRequest>): RunBatchJobRequest {
    return RunBatchJobRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RunBatchJobRequest>): RunBatchJobRequest {
    const message = createBaseRunBatchJobRequest();
    message.resourceName = object.resourceName ?? "";
    return message;
  },
};

function createBaseAddBatchJobOperationsRequest(): AddBatchJobOperationsRequest {
  return { resourceName: "", sequenceToken: "", mutateOperations: [] };
}

export const AddBatchJobOperationsRequest: MessageFns<AddBatchJobOperationsRequest> = {
  encode(message: AddBatchJobOperationsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(10).string(message.resourceName);
    }
    if (message.sequenceToken !== "") {
      writer.uint32(18).string(message.sequenceToken);
    }
    for (const v of message.mutateOperations) {
      MutateOperation.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddBatchJobOperationsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddBatchJobOperationsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.sequenceToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.mutateOperations.push(MutateOperation.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddBatchJobOperationsRequest {
    return {
      resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "",
      sequenceToken: isSet(object.sequenceToken) ? globalThis.String(object.sequenceToken) : "",
      mutateOperations: globalThis.Array.isArray(object?.mutateOperations)
        ? object.mutateOperations.map((e: any) => MutateOperation.fromJSON(e))
        : [],
    };
  },

  toJSON(message: AddBatchJobOperationsRequest): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    if (message.sequenceToken !== "") {
      obj.sequenceToken = message.sequenceToken;
    }
    if (message.mutateOperations?.length) {
      obj.mutateOperations = message.mutateOperations.map((e) => MutateOperation.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<AddBatchJobOperationsRequest>): AddBatchJobOperationsRequest {
    return AddBatchJobOperationsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddBatchJobOperationsRequest>): AddBatchJobOperationsRequest {
    const message = createBaseAddBatchJobOperationsRequest();
    message.resourceName = object.resourceName ?? "";
    message.sequenceToken = object.sequenceToken ?? "";
    message.mutateOperations = object.mutateOperations?.map((e) => MutateOperation.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAddBatchJobOperationsResponse(): AddBatchJobOperationsResponse {
  return { totalOperations: Long.ZERO, nextSequenceToken: "" };
}

export const AddBatchJobOperationsResponse: MessageFns<AddBatchJobOperationsResponse> = {
  encode(message: AddBatchJobOperationsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.totalOperations.equals(Long.ZERO)) {
      writer.uint32(8).int64(message.totalOperations.toString());
    }
    if (message.nextSequenceToken !== "") {
      writer.uint32(18).string(message.nextSequenceToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddBatchJobOperationsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddBatchJobOperationsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.totalOperations = Long.fromString(reader.int64().toString());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextSequenceToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddBatchJobOperationsResponse {
    return {
      totalOperations: isSet(object.totalOperations) ? Long.fromValue(object.totalOperations) : Long.ZERO,
      nextSequenceToken: isSet(object.nextSequenceToken) ? globalThis.String(object.nextSequenceToken) : "",
    };
  },

  toJSON(message: AddBatchJobOperationsResponse): unknown {
    const obj: any = {};
    if (!message.totalOperations.equals(Long.ZERO)) {
      obj.totalOperations = (message.totalOperations || Long.ZERO).toString();
    }
    if (message.nextSequenceToken !== "") {
      obj.nextSequenceToken = message.nextSequenceToken;
    }
    return obj;
  },

  create(base?: DeepPartial<AddBatchJobOperationsResponse>): AddBatchJobOperationsResponse {
    return AddBatchJobOperationsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddBatchJobOperationsResponse>): AddBatchJobOperationsResponse {
    const message = createBaseAddBatchJobOperationsResponse();
    message.totalOperations = (object.totalOperations !== undefined && object.totalOperations !== null)
      ? Long.fromValue(object.totalOperations)
      : Long.ZERO;
    message.nextSequenceToken = object.nextSequenceToken ?? "";
    return message;
  },
};

function createBaseListBatchJobResultsRequest(): ListBatchJobResultsRequest {
  return { resourceName: "", pageToken: "", pageSize: 0, responseContentType: 0 };
}

export const ListBatchJobResultsRequest: MessageFns<ListBatchJobResultsRequest> = {
  encode(message: ListBatchJobResultsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(10).string(message.resourceName);
    }
    if (message.pageToken !== "") {
      writer.uint32(18).string(message.pageToken);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    if (message.responseContentType !== 0) {
      writer.uint32(32).int32(message.responseContentType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListBatchJobResultsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListBatchJobResultsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.responseContentType = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListBatchJobResultsRequest {
    return {
      resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "",
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      responseContentType: isSet(object.responseContentType)
        ? responseContentTypeEnum_ResponseContentTypeFromJSON(object.responseContentType)
        : 0,
    };
  },

  toJSON(message: ListBatchJobResultsRequest): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.responseContentType !== 0) {
      obj.responseContentType = responseContentTypeEnum_ResponseContentTypeToJSON(message.responseContentType);
    }
    return obj;
  },

  create(base?: DeepPartial<ListBatchJobResultsRequest>): ListBatchJobResultsRequest {
    return ListBatchJobResultsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListBatchJobResultsRequest>): ListBatchJobResultsRequest {
    const message = createBaseListBatchJobResultsRequest();
    message.resourceName = object.resourceName ?? "";
    message.pageToken = object.pageToken ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.responseContentType = object.responseContentType ?? 0;
    return message;
  },
};

function createBaseListBatchJobResultsResponse(): ListBatchJobResultsResponse {
  return { results: [], nextPageToken: "" };
}

export const ListBatchJobResultsResponse: MessageFns<ListBatchJobResultsResponse> = {
  encode(message: ListBatchJobResultsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.results) {
      BatchJobResult.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListBatchJobResultsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListBatchJobResultsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.results.push(BatchJobResult.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListBatchJobResultsResponse {
    return {
      results: globalThis.Array.isArray(object?.results)
        ? object.results.map((e: any) => BatchJobResult.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListBatchJobResultsResponse): unknown {
    const obj: any = {};
    if (message.results?.length) {
      obj.results = message.results.map((e) => BatchJobResult.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListBatchJobResultsResponse>): ListBatchJobResultsResponse {
    return ListBatchJobResultsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListBatchJobResultsResponse>): ListBatchJobResultsResponse {
    const message = createBaseListBatchJobResultsResponse();
    message.results = object.results?.map((e) => BatchJobResult.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseBatchJobResult(): BatchJobResult {
  return { operationIndex: Long.ZERO, mutateOperationResponse: undefined, status: undefined };
}

export const BatchJobResult: MessageFns<BatchJobResult> = {
  encode(message: BatchJobResult, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.operationIndex.equals(Long.ZERO)) {
      writer.uint32(8).int64(message.operationIndex.toString());
    }
    if (message.mutateOperationResponse !== undefined) {
      MutateOperationResponse.encode(message.mutateOperationResponse, writer.uint32(18).fork()).join();
    }
    if (message.status !== undefined) {
      Status.encode(message.status, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BatchJobResult {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBatchJobResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.operationIndex = Long.fromString(reader.int64().toString());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.mutateOperationResponse = MutateOperationResponse.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.status = Status.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BatchJobResult {
    return {
      operationIndex: isSet(object.operationIndex) ? Long.fromValue(object.operationIndex) : Long.ZERO,
      mutateOperationResponse: isSet(object.mutateOperationResponse)
        ? MutateOperationResponse.fromJSON(object.mutateOperationResponse)
        : undefined,
      status: isSet(object.status) ? Status.fromJSON(object.status) : undefined,
    };
  },

  toJSON(message: BatchJobResult): unknown {
    const obj: any = {};
    if (!message.operationIndex.equals(Long.ZERO)) {
      obj.operationIndex = (message.operationIndex || Long.ZERO).toString();
    }
    if (message.mutateOperationResponse !== undefined) {
      obj.mutateOperationResponse = MutateOperationResponse.toJSON(message.mutateOperationResponse);
    }
    if (message.status !== undefined) {
      obj.status = Status.toJSON(message.status);
    }
    return obj;
  },

  create(base?: DeepPartial<BatchJobResult>): BatchJobResult {
    return BatchJobResult.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BatchJobResult>): BatchJobResult {
    const message = createBaseBatchJobResult();
    message.operationIndex = (object.operationIndex !== undefined && object.operationIndex !== null)
      ? Long.fromValue(object.operationIndex)
      : Long.ZERO;
    message.mutateOperationResponse =
      (object.mutateOperationResponse !== undefined && object.mutateOperationResponse !== null)
        ? MutateOperationResponse.fromPartial(object.mutateOperationResponse)
        : undefined;
    message.status = (object.status !== undefined && object.status !== null)
      ? Status.fromPartial(object.status)
      : undefined;
    return message;
  },
};

/** Service to manage batch jobs. */
export type BatchJobServiceDefinition = typeof BatchJobServiceDefinition;
export const BatchJobServiceDefinition = {
  name: "BatchJobService",
  fullName: "google.ads.googleads.v16.services.BatchJobService",
  methods: {
    /**
     * Mutates a batch job.
     *
     * List of thrown errors:
     *   [AuthenticationError]()
     *   [AuthorizationError]()
     *   [HeaderError]()
     *   [InternalError]()
     *   [QuotaError]()
     *   [RequestError]()
     *   [ResourceCountLimitExceededError]()
     */
    mutateBatchJob: {
      name: "MutateBatchJob",
      requestType: MutateBatchJobRequest,
      requestStream: false,
      responseType: MutateBatchJobResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              21,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              95,
              105,
              100,
              44,
              111,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
            ]),
          ],
          578365826: [
            Buffer.from([
              52,
              58,
              1,
              42,
              34,
              47,
              47,
              118,
              49,
              54,
              47,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              115,
              47,
              123,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              95,
              105,
              100,
              61,
              42,
              125,
              47,
              98,
              97,
              116,
              99,
              104,
              74,
              111,
              98,
              115,
              58,
              109,
              117,
              116,
              97,
              116,
              101,
            ]),
          ],
        },
      },
    },
    /**
     * Returns the results of the batch job. The job must be done.
     * Supports standard list paging.
     *
     * List of thrown errors:
     *   [AuthenticationError]()
     *   [AuthorizationError]()
     *   [BatchJobError]()
     *   [HeaderError]()
     *   [InternalError]()
     *   [QuotaError]()
     *   [RequestError]()
     */
    listBatchJobResults: {
      name: "ListBatchJobResults",
      requestType: ListBatchJobResultsRequest,
      requestStream: false,
      responseType: ListBatchJobResultsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([13, 114, 101, 115, 111, 117, 114, 99, 101, 95, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              58,
              18,
              56,
              47,
              118,
              49,
              54,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              95,
              110,
              97,
              109,
              101,
              61,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              115,
              47,
              42,
              47,
              98,
              97,
              116,
              99,
              104,
              74,
              111,
              98,
              115,
              47,
              42,
              125,
              58,
              108,
              105,
              115,
              116,
              82,
              101,
              115,
              117,
              108,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Runs the batch job.
     *
     * The Operation.metadata field type is BatchJobMetadata. When finished, the
     * long running operation will not contain errors or a response. Instead, use
     * ListBatchJobResults to get the results of the job.
     *
     * List of thrown errors:
     *   [AuthenticationError]()
     *   [AuthorizationError]()
     *   [BatchJobError]()
     *   [HeaderError]()
     *   [InternalError]()
     *   [QuotaError]()
     *   [RequestError]()
     */
    runBatchJob: {
      name: "RunBatchJob",
      requestType: RunBatchJobRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              85,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              60,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              97,
              100,
              115,
              46,
              103,
              111,
              111,
              103,
              108,
              101,
              97,
              100,
              115,
              46,
              118,
              49,
              54,
              46,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              115,
              46,
              66,
              97,
              116,
              99,
              104,
              74,
              111,
              98,
              46,
              66,
              97,
              116,
              99,
              104,
              74,
              111,
              98,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([13, 114, 101, 115, 111, 117, 114, 99, 101, 95, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              53,
              58,
              1,
              42,
              34,
              48,
              47,
              118,
              49,
              54,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              95,
              110,
              97,
              109,
              101,
              61,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              115,
              47,
              42,
              47,
              98,
              97,
              116,
              99,
              104,
              74,
              111,
              98,
              115,
              47,
              42,
              125,
              58,
              114,
              117,
              110,
            ]),
          ],
        },
      },
    },
    /**
     * Add operations to the batch job.
     *
     * List of thrown errors:
     *   [AuthenticationError]()
     *   [AuthorizationError]()
     *   [BatchJobError]()
     *   [HeaderError]()
     *   [InternalError]()
     *   [QuotaError]()
     *   [RequestError]()
     *   [ResourceCountLimitExceededError]()
     */
    addBatchJobOperations: {
      name: "AddBatchJobOperations",
      requestType: AddBatchJobOperationsRequest,
      requestStream: false,
      responseType: AddBatchJobOperationsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              46,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              95,
              110,
              97,
              109,
              101,
              44,
              115,
              101,
              113,
              117,
              101,
              110,
              99,
              101,
              95,
              116,
              111,
              107,
              101,
              110,
              44,
              109,
              117,
              116,
              97,
              116,
              101,
              95,
              111,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              115,
            ]),
            Buffer.from([
              31,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              95,
              110,
              97,
              109,
              101,
              44,
              109,
              117,
              116,
              97,
              116,
              101,
              95,
              111,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              115,
            ]),
          ],
          578365826: [
            Buffer.from([
              63,
              58,
              1,
              42,
              34,
              58,
              47,
              118,
              49,
              54,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              95,
              110,
              97,
              109,
              101,
              61,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              115,
              47,
              42,
              47,
              98,
              97,
              116,
              99,
              104,
              74,
              111,
              98,
              115,
              47,
              42,
              125,
              58,
              97,
              100,
              100,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface BatchJobServiceImplementation<CallContextExt = {}> {
  /**
   * Mutates a batch job.
   *
   * List of thrown errors:
   *   [AuthenticationError]()
   *   [AuthorizationError]()
   *   [HeaderError]()
   *   [InternalError]()
   *   [QuotaError]()
   *   [RequestError]()
   *   [ResourceCountLimitExceededError]()
   */
  mutateBatchJob(
    request: MutateBatchJobRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<MutateBatchJobResponse>>;
  /**
   * Returns the results of the batch job. The job must be done.
   * Supports standard list paging.
   *
   * List of thrown errors:
   *   [AuthenticationError]()
   *   [AuthorizationError]()
   *   [BatchJobError]()
   *   [HeaderError]()
   *   [InternalError]()
   *   [QuotaError]()
   *   [RequestError]()
   */
  listBatchJobResults(
    request: ListBatchJobResultsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListBatchJobResultsResponse>>;
  /**
   * Runs the batch job.
   *
   * The Operation.metadata field type is BatchJobMetadata. When finished, the
   * long running operation will not contain errors or a response. Instead, use
   * ListBatchJobResults to get the results of the job.
   *
   * List of thrown errors:
   *   [AuthenticationError]()
   *   [AuthorizationError]()
   *   [BatchJobError]()
   *   [HeaderError]()
   *   [InternalError]()
   *   [QuotaError]()
   *   [RequestError]()
   */
  runBatchJob(request: RunBatchJobRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /**
   * Add operations to the batch job.
   *
   * List of thrown errors:
   *   [AuthenticationError]()
   *   [AuthorizationError]()
   *   [BatchJobError]()
   *   [HeaderError]()
   *   [InternalError]()
   *   [QuotaError]()
   *   [RequestError]()
   *   [ResourceCountLimitExceededError]()
   */
  addBatchJobOperations(
    request: AddBatchJobOperationsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AddBatchJobOperationsResponse>>;
}

export interface BatchJobServiceClient<CallOptionsExt = {}> {
  /**
   * Mutates a batch job.
   *
   * List of thrown errors:
   *   [AuthenticationError]()
   *   [AuthorizationError]()
   *   [HeaderError]()
   *   [InternalError]()
   *   [QuotaError]()
   *   [RequestError]()
   *   [ResourceCountLimitExceededError]()
   */
  mutateBatchJob(
    request: DeepPartial<MutateBatchJobRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<MutateBatchJobResponse>;
  /**
   * Returns the results of the batch job. The job must be done.
   * Supports standard list paging.
   *
   * List of thrown errors:
   *   [AuthenticationError]()
   *   [AuthorizationError]()
   *   [BatchJobError]()
   *   [HeaderError]()
   *   [InternalError]()
   *   [QuotaError]()
   *   [RequestError]()
   */
  listBatchJobResults(
    request: DeepPartial<ListBatchJobResultsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListBatchJobResultsResponse>;
  /**
   * Runs the batch job.
   *
   * The Operation.metadata field type is BatchJobMetadata. When finished, the
   * long running operation will not contain errors or a response. Instead, use
   * ListBatchJobResults to get the results of the job.
   *
   * List of thrown errors:
   *   [AuthenticationError]()
   *   [AuthorizationError]()
   *   [BatchJobError]()
   *   [HeaderError]()
   *   [InternalError]()
   *   [QuotaError]()
   *   [RequestError]()
   */
  runBatchJob(request: DeepPartial<RunBatchJobRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /**
   * Add operations to the batch job.
   *
   * List of thrown errors:
   *   [AuthenticationError]()
   *   [AuthorizationError]()
   *   [BatchJobError]()
   *   [HeaderError]()
   *   [InternalError]()
   *   [QuotaError]()
   *   [RequestError]()
   *   [ResourceCountLimitExceededError]()
   */
  addBatchJobOperations(
    request: DeepPartial<AddBatchJobOperationsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AddBatchJobOperationsResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
