// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v16/services/customer_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { FieldMask } from "../../../../protobuf/field_mask.js";
import {
  AccessRoleEnum_AccessRole,
  accessRoleEnum_AccessRoleFromJSON,
  accessRoleEnum_AccessRoleToJSON,
} from "../enums/access_role.js";
import {
  ResponseContentTypeEnum_ResponseContentType,
  responseContentTypeEnum_ResponseContentTypeFromJSON,
  responseContentTypeEnum_ResponseContentTypeToJSON,
} from "../enums/response_content_type.js";
import { Customer } from "../resources/customer.js";

export const protobufPackage = "google.ads.googleads.v16.services";

/**
 * Request message for
 * [CustomerService.MutateCustomer][google.ads.googleads.v16.services.CustomerService.MutateCustomer].
 */
export interface MutateCustomerRequest {
  /** Required. The ID of the customer being modified. */
  customerId: string;
  /** Required. The operation to perform on the customer */
  operation:
    | CustomerOperation
    | undefined;
  /**
   * If true, the request is validated but not executed. Only errors are
   * returned, not results.
   */
  validateOnly: boolean;
  /**
   * The response content type setting. Determines whether the mutable resource
   * or just the resource name should be returned post mutation.
   */
  responseContentType: ResponseContentTypeEnum_ResponseContentType;
}

/**
 * Request message for
 * [CustomerService.CreateCustomerClient][google.ads.googleads.v16.services.CustomerService.CreateCustomerClient].
 */
export interface CreateCustomerClientRequest {
  /**
   * Required. The ID of the Manager under whom client customer is being
   * created.
   */
  customerId: string;
  /**
   * Required. The new client customer to create. The resource name on this
   * customer will be ignored.
   */
  customerClient:
    | Customer
    | undefined;
  /**
   * Email address of the user who should be invited on the created client
   * customer. Accessible only to customers on the allow-list.
   */
  emailAddress?:
    | string
    | undefined;
  /**
   * The proposed role of user on the created client customer.
   * Accessible only to customers on the allow-list.
   */
  accessRole: AccessRoleEnum_AccessRole;
  /**
   * If true, the request is validated but not executed. Only errors are
   * returned, not results.
   */
  validateOnly: boolean;
}

/** A single update on a customer. */
export interface CustomerOperation {
  /** Mutate operation. Only updates are supported for customer. */
  update:
    | Customer
    | undefined;
  /** FieldMask that determines which resource fields are modified in an update. */
  updateMask: string[] | undefined;
}

/** Response message for CreateCustomerClient mutate. */
export interface CreateCustomerClientResponse {
  /**
   * The resource name of the newly created customer. Customer resource names
   * have the form: `customers/{customer_id}`.
   */
  resourceName: string;
  /**
   * Link for inviting user to access the created customer. Accessible to
   * allowlisted customers only.
   */
  invitationLink: string;
}

/** Response message for customer mutate. */
export interface MutateCustomerResponse {
  /** Result for the mutate. */
  result: MutateCustomerResult | undefined;
}

/** The result for the customer mutate. */
export interface MutateCustomerResult {
  /** Returned for successful operations. */
  resourceName: string;
  /**
   * The mutated customer with only mutable fields after mutate. The fields will
   * only be returned when response_content_type is set to "MUTABLE_RESOURCE".
   */
  customer: Customer | undefined;
}

/**
 * Request message for
 * [CustomerService.ListAccessibleCustomers][google.ads.googleads.v16.services.CustomerService.ListAccessibleCustomers].
 */
export interface ListAccessibleCustomersRequest {
}

/**
 * Response message for
 * [CustomerService.ListAccessibleCustomers][google.ads.googleads.v16.services.CustomerService.ListAccessibleCustomers].
 */
export interface ListAccessibleCustomersResponse {
  /**
   * Resource name of customers directly accessible by the
   * user authenticating the call.
   */
  resourceNames: string[];
}

function createBaseMutateCustomerRequest(): MutateCustomerRequest {
  return { customerId: "", operation: undefined, validateOnly: false, responseContentType: 0 };
}

export const MutateCustomerRequest: MessageFns<MutateCustomerRequest> = {
  encode(message: MutateCustomerRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.customerId !== "") {
      writer.uint32(10).string(message.customerId);
    }
    if (message.operation !== undefined) {
      CustomerOperation.encode(message.operation, writer.uint32(34).fork()).join();
    }
    if (message.validateOnly !== false) {
      writer.uint32(40).bool(message.validateOnly);
    }
    if (message.responseContentType !== 0) {
      writer.uint32(48).int32(message.responseContentType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MutateCustomerRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMutateCustomerRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customerId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.operation = CustomerOperation.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.responseContentType = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MutateCustomerRequest {
    return {
      customerId: isSet(object.customerId) ? globalThis.String(object.customerId) : "",
      operation: isSet(object.operation) ? CustomerOperation.fromJSON(object.operation) : undefined,
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
      responseContentType: isSet(object.responseContentType)
        ? responseContentTypeEnum_ResponseContentTypeFromJSON(object.responseContentType)
        : 0,
    };
  },

  toJSON(message: MutateCustomerRequest): unknown {
    const obj: any = {};
    if (message.customerId !== "") {
      obj.customerId = message.customerId;
    }
    if (message.operation !== undefined) {
      obj.operation = CustomerOperation.toJSON(message.operation);
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    if (message.responseContentType !== 0) {
      obj.responseContentType = responseContentTypeEnum_ResponseContentTypeToJSON(message.responseContentType);
    }
    return obj;
  },

  create(base?: DeepPartial<MutateCustomerRequest>): MutateCustomerRequest {
    return MutateCustomerRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MutateCustomerRequest>): MutateCustomerRequest {
    const message = createBaseMutateCustomerRequest();
    message.customerId = object.customerId ?? "";
    message.operation = (object.operation !== undefined && object.operation !== null)
      ? CustomerOperation.fromPartial(object.operation)
      : undefined;
    message.validateOnly = object.validateOnly ?? false;
    message.responseContentType = object.responseContentType ?? 0;
    return message;
  },
};

function createBaseCreateCustomerClientRequest(): CreateCustomerClientRequest {
  return { customerId: "", customerClient: undefined, emailAddress: undefined, accessRole: 0, validateOnly: false };
}

export const CreateCustomerClientRequest: MessageFns<CreateCustomerClientRequest> = {
  encode(message: CreateCustomerClientRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.customerId !== "") {
      writer.uint32(10).string(message.customerId);
    }
    if (message.customerClient !== undefined) {
      Customer.encode(message.customerClient, writer.uint32(18).fork()).join();
    }
    if (message.emailAddress !== undefined) {
      writer.uint32(42).string(message.emailAddress);
    }
    if (message.accessRole !== 0) {
      writer.uint32(32).int32(message.accessRole);
    }
    if (message.validateOnly !== false) {
      writer.uint32(48).bool(message.validateOnly);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateCustomerClientRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateCustomerClientRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customerId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.customerClient = Customer.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.emailAddress = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.accessRole = reader.int32() as any;
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateCustomerClientRequest {
    return {
      customerId: isSet(object.customerId) ? globalThis.String(object.customerId) : "",
      customerClient: isSet(object.customerClient) ? Customer.fromJSON(object.customerClient) : undefined,
      emailAddress: isSet(object.emailAddress) ? globalThis.String(object.emailAddress) : undefined,
      accessRole: isSet(object.accessRole) ? accessRoleEnum_AccessRoleFromJSON(object.accessRole) : 0,
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
    };
  },

  toJSON(message: CreateCustomerClientRequest): unknown {
    const obj: any = {};
    if (message.customerId !== "") {
      obj.customerId = message.customerId;
    }
    if (message.customerClient !== undefined) {
      obj.customerClient = Customer.toJSON(message.customerClient);
    }
    if (message.emailAddress !== undefined) {
      obj.emailAddress = message.emailAddress;
    }
    if (message.accessRole !== 0) {
      obj.accessRole = accessRoleEnum_AccessRoleToJSON(message.accessRole);
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateCustomerClientRequest>): CreateCustomerClientRequest {
    return CreateCustomerClientRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateCustomerClientRequest>): CreateCustomerClientRequest {
    const message = createBaseCreateCustomerClientRequest();
    message.customerId = object.customerId ?? "";
    message.customerClient = (object.customerClient !== undefined && object.customerClient !== null)
      ? Customer.fromPartial(object.customerClient)
      : undefined;
    message.emailAddress = object.emailAddress ?? undefined;
    message.accessRole = object.accessRole ?? 0;
    message.validateOnly = object.validateOnly ?? false;
    return message;
  },
};

function createBaseCustomerOperation(): CustomerOperation {
  return { update: undefined, updateMask: undefined };
}

export const CustomerOperation: MessageFns<CustomerOperation> = {
  encode(message: CustomerOperation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.update !== undefined) {
      Customer.encode(message.update, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CustomerOperation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCustomerOperation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.update = Customer.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CustomerOperation {
    return {
      update: isSet(object.update) ? Customer.fromJSON(object.update) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: CustomerOperation): unknown {
    const obj: any = {};
    if (message.update !== undefined) {
      obj.update = Customer.toJSON(message.update);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<CustomerOperation>): CustomerOperation {
    return CustomerOperation.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CustomerOperation>): CustomerOperation {
    const message = createBaseCustomerOperation();
    message.update = (object.update !== undefined && object.update !== null)
      ? Customer.fromPartial(object.update)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseCreateCustomerClientResponse(): CreateCustomerClientResponse {
  return { resourceName: "", invitationLink: "" };
}

export const CreateCustomerClientResponse: MessageFns<CreateCustomerClientResponse> = {
  encode(message: CreateCustomerClientResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(18).string(message.resourceName);
    }
    if (message.invitationLink !== "") {
      writer.uint32(26).string(message.invitationLink);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateCustomerClientResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateCustomerClientResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.resourceName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.invitationLink = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateCustomerClientResponse {
    return {
      resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "",
      invitationLink: isSet(object.invitationLink) ? globalThis.String(object.invitationLink) : "",
    };
  },

  toJSON(message: CreateCustomerClientResponse): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    if (message.invitationLink !== "") {
      obj.invitationLink = message.invitationLink;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateCustomerClientResponse>): CreateCustomerClientResponse {
    return CreateCustomerClientResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateCustomerClientResponse>): CreateCustomerClientResponse {
    const message = createBaseCreateCustomerClientResponse();
    message.resourceName = object.resourceName ?? "";
    message.invitationLink = object.invitationLink ?? "";
    return message;
  },
};

function createBaseMutateCustomerResponse(): MutateCustomerResponse {
  return { result: undefined };
}

export const MutateCustomerResponse: MessageFns<MutateCustomerResponse> = {
  encode(message: MutateCustomerResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.result !== undefined) {
      MutateCustomerResult.encode(message.result, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MutateCustomerResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMutateCustomerResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.result = MutateCustomerResult.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MutateCustomerResponse {
    return { result: isSet(object.result) ? MutateCustomerResult.fromJSON(object.result) : undefined };
  },

  toJSON(message: MutateCustomerResponse): unknown {
    const obj: any = {};
    if (message.result !== undefined) {
      obj.result = MutateCustomerResult.toJSON(message.result);
    }
    return obj;
  },

  create(base?: DeepPartial<MutateCustomerResponse>): MutateCustomerResponse {
    return MutateCustomerResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MutateCustomerResponse>): MutateCustomerResponse {
    const message = createBaseMutateCustomerResponse();
    message.result = (object.result !== undefined && object.result !== null)
      ? MutateCustomerResult.fromPartial(object.result)
      : undefined;
    return message;
  },
};

function createBaseMutateCustomerResult(): MutateCustomerResult {
  return { resourceName: "", customer: undefined };
}

export const MutateCustomerResult: MessageFns<MutateCustomerResult> = {
  encode(message: MutateCustomerResult, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(10).string(message.resourceName);
    }
    if (message.customer !== undefined) {
      Customer.encode(message.customer, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MutateCustomerResult {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMutateCustomerResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.customer = Customer.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MutateCustomerResult {
    return {
      resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "",
      customer: isSet(object.customer) ? Customer.fromJSON(object.customer) : undefined,
    };
  },

  toJSON(message: MutateCustomerResult): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    if (message.customer !== undefined) {
      obj.customer = Customer.toJSON(message.customer);
    }
    return obj;
  },

  create(base?: DeepPartial<MutateCustomerResult>): MutateCustomerResult {
    return MutateCustomerResult.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MutateCustomerResult>): MutateCustomerResult {
    const message = createBaseMutateCustomerResult();
    message.resourceName = object.resourceName ?? "";
    message.customer = (object.customer !== undefined && object.customer !== null)
      ? Customer.fromPartial(object.customer)
      : undefined;
    return message;
  },
};

function createBaseListAccessibleCustomersRequest(): ListAccessibleCustomersRequest {
  return {};
}

export const ListAccessibleCustomersRequest: MessageFns<ListAccessibleCustomersRequest> = {
  encode(_: ListAccessibleCustomersRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAccessibleCustomersRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAccessibleCustomersRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ListAccessibleCustomersRequest {
    return {};
  },

  toJSON(_: ListAccessibleCustomersRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<ListAccessibleCustomersRequest>): ListAccessibleCustomersRequest {
    return ListAccessibleCustomersRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<ListAccessibleCustomersRequest>): ListAccessibleCustomersRequest {
    const message = createBaseListAccessibleCustomersRequest();
    return message;
  },
};

function createBaseListAccessibleCustomersResponse(): ListAccessibleCustomersResponse {
  return { resourceNames: [] };
}

export const ListAccessibleCustomersResponse: MessageFns<ListAccessibleCustomersResponse> = {
  encode(message: ListAccessibleCustomersResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.resourceNames) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAccessibleCustomersResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAccessibleCustomersResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceNames.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAccessibleCustomersResponse {
    return {
      resourceNames: globalThis.Array.isArray(object?.resourceNames)
        ? object.resourceNames.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListAccessibleCustomersResponse): unknown {
    const obj: any = {};
    if (message.resourceNames?.length) {
      obj.resourceNames = message.resourceNames;
    }
    return obj;
  },

  create(base?: DeepPartial<ListAccessibleCustomersResponse>): ListAccessibleCustomersResponse {
    return ListAccessibleCustomersResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAccessibleCustomersResponse>): ListAccessibleCustomersResponse {
    const message = createBaseListAccessibleCustomersResponse();
    message.resourceNames = object.resourceNames?.map((e) => e) || [];
    return message;
  },
};

/** Service to manage customers. */
export type CustomerServiceDefinition = typeof CustomerServiceDefinition;
export const CustomerServiceDefinition = {
  name: "CustomerService",
  fullName: "google.ads.googleads.v16.services.CustomerService",
  methods: {
    /**
     * Updates a customer. Operation statuses are returned.
     *
     * List of thrown errors:
     *   [AuthenticationError]()
     *   [AuthorizationError]()
     *   [DatabaseError]()
     *   [FieldMaskError]()
     *   [HeaderError]()
     *   [InternalError]()
     *   [QuotaError]()
     *   [RequestError]()
     *   [UrlFieldError]()
     */
    mutateCustomer: {
      name: "MutateCustomer",
      requestType: MutateCustomerRequest,
      requestStream: false,
      responseType: MutateCustomerResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              21,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              95,
              105,
              100,
              44,
              111,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
            ]),
          ],
          578365826: [
            Buffer.from([
              42,
              58,
              1,
              42,
              34,
              37,
              47,
              118,
              49,
              54,
              47,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              115,
              47,
              123,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              95,
              105,
              100,
              61,
              42,
              125,
              58,
              109,
              117,
              116,
              97,
              116,
              101,
            ]),
          ],
        },
      },
    },
    /**
     * Returns resource names of customers directly accessible by the
     * user authenticating the call.
     *
     * List of thrown errors:
     *   [AuthenticationError]()
     *   [AuthorizationError]()
     *   [HeaderError]()
     *   [InternalError]()
     *   [QuotaError]()
     *   [RequestError]()
     */
    listAccessibleCustomers: {
      name: "ListAccessibleCustomers",
      requestType: ListAccessibleCustomersRequest,
      requestStream: false,
      responseType: ListAccessibleCustomersResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              40,
              18,
              38,
              47,
              118,
              49,
              54,
              47,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              115,
              58,
              108,
              105,
              115,
              116,
              65,
              99,
              99,
              101,
              115,
              115,
              105,
              98,
              108,
              101,
              67,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Creates a new client under manager. The new client customer is returned.
     *
     * List of thrown errors:
     *   [AccessInvitationError]()
     *   [AuthenticationError]()
     *   [AuthorizationError]()
     *   [CurrencyCodeError]()
     *   [HeaderError]()
     *   [InternalError]()
     *   [ManagerLinkError]()
     *   [QuotaError]()
     *   [RequestError]()
     *   [StringLengthError]()
     *   [TimeZoneError]()
     */
    createCustomerClient: {
      name: "CreateCustomerClient",
      requestType: CreateCustomerClientRequest,
      requestStream: false,
      responseType: CreateCustomerClientResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              27,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              95,
              105,
              100,
              44,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              95,
              99,
              108,
              105,
              101,
              110,
              116,
            ]),
          ],
          578365826: [
            Buffer.from([
              56,
              58,
              1,
              42,
              34,
              51,
              47,
              118,
              49,
              54,
              47,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              115,
              47,
              123,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              95,
              105,
              100,
              61,
              42,
              125,
              58,
              99,
              114,
              101,
              97,
              116,
              101,
              67,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              67,
              108,
              105,
              101,
              110,
              116,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface CustomerServiceImplementation<CallContextExt = {}> {
  /**
   * Updates a customer. Operation statuses are returned.
   *
   * List of thrown errors:
   *   [AuthenticationError]()
   *   [AuthorizationError]()
   *   [DatabaseError]()
   *   [FieldMaskError]()
   *   [HeaderError]()
   *   [InternalError]()
   *   [QuotaError]()
   *   [RequestError]()
   *   [UrlFieldError]()
   */
  mutateCustomer(
    request: MutateCustomerRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<MutateCustomerResponse>>;
  /**
   * Returns resource names of customers directly accessible by the
   * user authenticating the call.
   *
   * List of thrown errors:
   *   [AuthenticationError]()
   *   [AuthorizationError]()
   *   [HeaderError]()
   *   [InternalError]()
   *   [QuotaError]()
   *   [RequestError]()
   */
  listAccessibleCustomers(
    request: ListAccessibleCustomersRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListAccessibleCustomersResponse>>;
  /**
   * Creates a new client under manager. The new client customer is returned.
   *
   * List of thrown errors:
   *   [AccessInvitationError]()
   *   [AuthenticationError]()
   *   [AuthorizationError]()
   *   [CurrencyCodeError]()
   *   [HeaderError]()
   *   [InternalError]()
   *   [ManagerLinkError]()
   *   [QuotaError]()
   *   [RequestError]()
   *   [StringLengthError]()
   *   [TimeZoneError]()
   */
  createCustomerClient(
    request: CreateCustomerClientRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<CreateCustomerClientResponse>>;
}

export interface CustomerServiceClient<CallOptionsExt = {}> {
  /**
   * Updates a customer. Operation statuses are returned.
   *
   * List of thrown errors:
   *   [AuthenticationError]()
   *   [AuthorizationError]()
   *   [DatabaseError]()
   *   [FieldMaskError]()
   *   [HeaderError]()
   *   [InternalError]()
   *   [QuotaError]()
   *   [RequestError]()
   *   [UrlFieldError]()
   */
  mutateCustomer(
    request: DeepPartial<MutateCustomerRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<MutateCustomerResponse>;
  /**
   * Returns resource names of customers directly accessible by the
   * user authenticating the call.
   *
   * List of thrown errors:
   *   [AuthenticationError]()
   *   [AuthorizationError]()
   *   [HeaderError]()
   *   [InternalError]()
   *   [QuotaError]()
   *   [RequestError]()
   */
  listAccessibleCustomers(
    request: DeepPartial<ListAccessibleCustomersRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListAccessibleCustomersResponse>;
  /**
   * Creates a new client under manager. The new client customer is returned.
   *
   * List of thrown errors:
   *   [AccessInvitationError]()
   *   [AuthenticationError]()
   *   [AuthorizationError]()
   *   [CurrencyCodeError]()
   *   [HeaderError]()
   *   [InternalError]()
   *   [ManagerLinkError]()
   *   [QuotaError]()
   *   [RequestError]()
   *   [StringLengthError]()
   *   [TimeZoneError]()
   */
  createCustomerClient(
    request: DeepPartial<CreateCustomerClientRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<CreateCustomerClientResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
