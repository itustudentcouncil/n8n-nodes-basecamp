// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v16/services/customer_manager_link_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { FieldMask } from "../../../../protobuf/field_mask.js";
import { CustomerManagerLink } from "../resources/customer_manager_link.js";

export const protobufPackage = "google.ads.googleads.v16.services";

/**
 * Request message for
 * [CustomerManagerLinkService.MutateCustomerManagerLink][google.ads.googleads.v16.services.CustomerManagerLinkService.MutateCustomerManagerLink].
 */
export interface MutateCustomerManagerLinkRequest {
  /**
   * Required. The ID of the customer whose customer manager links are being
   * modified.
   */
  customerId: string;
  /**
   * Required. The list of operations to perform on individual customer manager
   * links.
   */
  operations: CustomerManagerLinkOperation[];
  /**
   * If true, the request is validated but not executed. Only errors are
   * returned, not results.
   */
  validateOnly: boolean;
}

/**
 * Request message for
 * [CustomerManagerLinkService.MoveManagerLink][google.ads.googleads.v16.services.CustomerManagerLinkService.MoveManagerLink].
 */
export interface MoveManagerLinkRequest {
  /** Required. The ID of the client customer that is being moved. */
  customerId: string;
  /**
   * Required. The resource name of the previous CustomerManagerLink.
   * The resource name has the form:
   * `customers/{customer_id}/customerManagerLinks/{manager_customer_id}~{manager_link_id}`
   */
  previousCustomerManagerLink: string;
  /**
   * Required. The resource name of the new manager customer that the client
   * wants to move to. Customer resource names have the format:
   * "customers/{customer_id}"
   */
  newManager: string;
  /**
   * If true, the request is validated but not executed. Only errors are
   * returned, not results.
   */
  validateOnly: boolean;
}

/**
 * Updates the status of a CustomerManagerLink.
 * The following actions are possible:
 * 1. Update operation with status ACTIVE accepts a pending invitation.
 * 2. Update operation with status REFUSED declines a pending invitation.
 * 3. Update operation with status INACTIVE terminates link to manager.
 */
export interface CustomerManagerLinkOperation {
  /** FieldMask that determines which resource fields are modified in an update. */
  updateMask:
    | string[]
    | undefined;
  /** Update operation: The link is expected to have a valid resource name. */
  update?: CustomerManagerLink | undefined;
}

/** Response message for a CustomerManagerLink mutate. */
export interface MutateCustomerManagerLinkResponse {
  /** A result that identifies the resource affected by the mutate request. */
  results: MutateCustomerManagerLinkResult[];
}

/** Response message for a CustomerManagerLink moveManagerLink. */
export interface MoveManagerLinkResponse {
  /**
   * Returned for successful operations. Represents a CustomerManagerLink
   * resource of the newly created link between client customer and new manager
   * customer.
   */
  resourceName: string;
}

/** The result for the customer manager link mutate. */
export interface MutateCustomerManagerLinkResult {
  /** Returned for successful operations. */
  resourceName: string;
}

function createBaseMutateCustomerManagerLinkRequest(): MutateCustomerManagerLinkRequest {
  return { customerId: "", operations: [], validateOnly: false };
}

export const MutateCustomerManagerLinkRequest: MessageFns<MutateCustomerManagerLinkRequest> = {
  encode(message: MutateCustomerManagerLinkRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.customerId !== "") {
      writer.uint32(10).string(message.customerId);
    }
    for (const v of message.operations) {
      CustomerManagerLinkOperation.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.validateOnly !== false) {
      writer.uint32(24).bool(message.validateOnly);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MutateCustomerManagerLinkRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMutateCustomerManagerLinkRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customerId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.operations.push(CustomerManagerLinkOperation.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MutateCustomerManagerLinkRequest {
    return {
      customerId: isSet(object.customerId) ? globalThis.String(object.customerId) : "",
      operations: globalThis.Array.isArray(object?.operations)
        ? object.operations.map((e: any) => CustomerManagerLinkOperation.fromJSON(e))
        : [],
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
    };
  },

  toJSON(message: MutateCustomerManagerLinkRequest): unknown {
    const obj: any = {};
    if (message.customerId !== "") {
      obj.customerId = message.customerId;
    }
    if (message.operations?.length) {
      obj.operations = message.operations.map((e) => CustomerManagerLinkOperation.toJSON(e));
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    return obj;
  },

  create(base?: DeepPartial<MutateCustomerManagerLinkRequest>): MutateCustomerManagerLinkRequest {
    return MutateCustomerManagerLinkRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MutateCustomerManagerLinkRequest>): MutateCustomerManagerLinkRequest {
    const message = createBaseMutateCustomerManagerLinkRequest();
    message.customerId = object.customerId ?? "";
    message.operations = object.operations?.map((e) => CustomerManagerLinkOperation.fromPartial(e)) || [];
    message.validateOnly = object.validateOnly ?? false;
    return message;
  },
};

function createBaseMoveManagerLinkRequest(): MoveManagerLinkRequest {
  return { customerId: "", previousCustomerManagerLink: "", newManager: "", validateOnly: false };
}

export const MoveManagerLinkRequest: MessageFns<MoveManagerLinkRequest> = {
  encode(message: MoveManagerLinkRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.customerId !== "") {
      writer.uint32(10).string(message.customerId);
    }
    if (message.previousCustomerManagerLink !== "") {
      writer.uint32(18).string(message.previousCustomerManagerLink);
    }
    if (message.newManager !== "") {
      writer.uint32(26).string(message.newManager);
    }
    if (message.validateOnly !== false) {
      writer.uint32(32).bool(message.validateOnly);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MoveManagerLinkRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMoveManagerLinkRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customerId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.previousCustomerManagerLink = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.newManager = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MoveManagerLinkRequest {
    return {
      customerId: isSet(object.customerId) ? globalThis.String(object.customerId) : "",
      previousCustomerManagerLink: isSet(object.previousCustomerManagerLink)
        ? globalThis.String(object.previousCustomerManagerLink)
        : "",
      newManager: isSet(object.newManager) ? globalThis.String(object.newManager) : "",
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
    };
  },

  toJSON(message: MoveManagerLinkRequest): unknown {
    const obj: any = {};
    if (message.customerId !== "") {
      obj.customerId = message.customerId;
    }
    if (message.previousCustomerManagerLink !== "") {
      obj.previousCustomerManagerLink = message.previousCustomerManagerLink;
    }
    if (message.newManager !== "") {
      obj.newManager = message.newManager;
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    return obj;
  },

  create(base?: DeepPartial<MoveManagerLinkRequest>): MoveManagerLinkRequest {
    return MoveManagerLinkRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MoveManagerLinkRequest>): MoveManagerLinkRequest {
    const message = createBaseMoveManagerLinkRequest();
    message.customerId = object.customerId ?? "";
    message.previousCustomerManagerLink = object.previousCustomerManagerLink ?? "";
    message.newManager = object.newManager ?? "";
    message.validateOnly = object.validateOnly ?? false;
    return message;
  },
};

function createBaseCustomerManagerLinkOperation(): CustomerManagerLinkOperation {
  return { updateMask: undefined, update: undefined };
}

export const CustomerManagerLinkOperation: MessageFns<CustomerManagerLinkOperation> = {
  encode(message: CustomerManagerLinkOperation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(34).fork()).join();
    }
    if (message.update !== undefined) {
      CustomerManagerLink.encode(message.update, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CustomerManagerLinkOperation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCustomerManagerLinkOperation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 4:
          if (tag !== 34) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.update = CustomerManagerLink.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CustomerManagerLinkOperation {
    return {
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      update: isSet(object.update) ? CustomerManagerLink.fromJSON(object.update) : undefined,
    };
  },

  toJSON(message: CustomerManagerLinkOperation): unknown {
    const obj: any = {};
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.update !== undefined) {
      obj.update = CustomerManagerLink.toJSON(message.update);
    }
    return obj;
  },

  create(base?: DeepPartial<CustomerManagerLinkOperation>): CustomerManagerLinkOperation {
    return CustomerManagerLinkOperation.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CustomerManagerLinkOperation>): CustomerManagerLinkOperation {
    const message = createBaseCustomerManagerLinkOperation();
    message.updateMask = object.updateMask ?? undefined;
    message.update = (object.update !== undefined && object.update !== null)
      ? CustomerManagerLink.fromPartial(object.update)
      : undefined;
    return message;
  },
};

function createBaseMutateCustomerManagerLinkResponse(): MutateCustomerManagerLinkResponse {
  return { results: [] };
}

export const MutateCustomerManagerLinkResponse: MessageFns<MutateCustomerManagerLinkResponse> = {
  encode(message: MutateCustomerManagerLinkResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.results) {
      MutateCustomerManagerLinkResult.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MutateCustomerManagerLinkResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMutateCustomerManagerLinkResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.results.push(MutateCustomerManagerLinkResult.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MutateCustomerManagerLinkResponse {
    return {
      results: globalThis.Array.isArray(object?.results)
        ? object.results.map((e: any) => MutateCustomerManagerLinkResult.fromJSON(e))
        : [],
    };
  },

  toJSON(message: MutateCustomerManagerLinkResponse): unknown {
    const obj: any = {};
    if (message.results?.length) {
      obj.results = message.results.map((e) => MutateCustomerManagerLinkResult.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<MutateCustomerManagerLinkResponse>): MutateCustomerManagerLinkResponse {
    return MutateCustomerManagerLinkResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MutateCustomerManagerLinkResponse>): MutateCustomerManagerLinkResponse {
    const message = createBaseMutateCustomerManagerLinkResponse();
    message.results = object.results?.map((e) => MutateCustomerManagerLinkResult.fromPartial(e)) || [];
    return message;
  },
};

function createBaseMoveManagerLinkResponse(): MoveManagerLinkResponse {
  return { resourceName: "" };
}

export const MoveManagerLinkResponse: MessageFns<MoveManagerLinkResponse> = {
  encode(message: MoveManagerLinkResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(10).string(message.resourceName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MoveManagerLinkResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMoveManagerLinkResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MoveManagerLinkResponse {
    return { resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "" };
  },

  toJSON(message: MoveManagerLinkResponse): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    return obj;
  },

  create(base?: DeepPartial<MoveManagerLinkResponse>): MoveManagerLinkResponse {
    return MoveManagerLinkResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MoveManagerLinkResponse>): MoveManagerLinkResponse {
    const message = createBaseMoveManagerLinkResponse();
    message.resourceName = object.resourceName ?? "";
    return message;
  },
};

function createBaseMutateCustomerManagerLinkResult(): MutateCustomerManagerLinkResult {
  return { resourceName: "" };
}

export const MutateCustomerManagerLinkResult: MessageFns<MutateCustomerManagerLinkResult> = {
  encode(message: MutateCustomerManagerLinkResult, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(10).string(message.resourceName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MutateCustomerManagerLinkResult {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMutateCustomerManagerLinkResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MutateCustomerManagerLinkResult {
    return { resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "" };
  },

  toJSON(message: MutateCustomerManagerLinkResult): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    return obj;
  },

  create(base?: DeepPartial<MutateCustomerManagerLinkResult>): MutateCustomerManagerLinkResult {
    return MutateCustomerManagerLinkResult.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MutateCustomerManagerLinkResult>): MutateCustomerManagerLinkResult {
    const message = createBaseMutateCustomerManagerLinkResult();
    message.resourceName = object.resourceName ?? "";
    return message;
  },
};

/** Service to manage customer-manager links. */
export type CustomerManagerLinkServiceDefinition = typeof CustomerManagerLinkServiceDefinition;
export const CustomerManagerLinkServiceDefinition = {
  name: "CustomerManagerLinkService",
  fullName: "google.ads.googleads.v16.services.CustomerManagerLinkService",
  methods: {
    /**
     * Updates customer manager links. Operation statuses are returned.
     *
     * List of thrown errors:
     *   [AuthenticationError]()
     *   [AuthorizationError]()
     *   [DatabaseError]()
     *   [FieldError]()
     *   [FieldMaskError]()
     *   [HeaderError]()
     *   [InternalError]()
     *   [ManagerLinkError]()
     *   [MutateError]()
     *   [QuotaError]()
     *   [RequestError]()
     */
    mutateCustomerManagerLink: {
      name: "MutateCustomerManagerLink",
      requestType: MutateCustomerManagerLinkRequest,
      requestStream: false,
      responseType: MutateCustomerManagerLinkResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              22,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              95,
              105,
              100,
              44,
              111,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              115,
            ]),
          ],
          578365826: [
            Buffer.from([
              63,
              58,
              1,
              42,
              34,
              58,
              47,
              118,
              49,
              54,
              47,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              115,
              47,
              123,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              95,
              105,
              100,
              61,
              42,
              125,
              47,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              77,
              97,
              110,
              97,
              103,
              101,
              114,
              76,
              105,
              110,
              107,
              115,
              58,
              109,
              117,
              116,
              97,
              116,
              101,
            ]),
          ],
        },
      },
    },
    /**
     * Moves a client customer to a new manager customer.
     * This simplifies the complex request that requires two operations to move
     * a client customer to a new manager, for example:
     * 1. Update operation with Status INACTIVE (previous manager) and,
     * 2. Update operation with Status ACTIVE (new manager).
     *
     * List of thrown errors:
     *   [AuthenticationError]()
     *   [AuthorizationError]()
     *   [DatabaseError]()
     *   [FieldError]()
     *   [HeaderError]()
     *   [InternalError]()
     *   [MutateError]()
     *   [QuotaError]()
     *   [RequestError]()
     */
    moveManagerLink: {
      name: "MoveManagerLink",
      requestType: MoveManagerLinkRequest,
      requestStream: false,
      responseType: MoveManagerLinkResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              54,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              95,
              105,
              100,
              44,
              112,
              114,
              101,
              118,
              105,
              111,
              117,
              115,
              95,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              95,
              109,
              97,
              110,
              97,
              103,
              101,
              114,
              95,
              108,
              105,
              110,
              107,
              44,
              110,
              101,
              119,
              95,
              109,
              97,
              110,
              97,
              103,
              101,
              114,
            ]),
          ],
          578365826: [
            Buffer.from([
              72,
              58,
              1,
              42,
              34,
              67,
              47,
              118,
              49,
              54,
              47,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              115,
              47,
              123,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              95,
              105,
              100,
              61,
              42,
              125,
              47,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              77,
              97,
              110,
              97,
              103,
              101,
              114,
              76,
              105,
              110,
              107,
              115,
              58,
              109,
              111,
              118,
              101,
              77,
              97,
              110,
              97,
              103,
              101,
              114,
              76,
              105,
              110,
              107,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface CustomerManagerLinkServiceImplementation<CallContextExt = {}> {
  /**
   * Updates customer manager links. Operation statuses are returned.
   *
   * List of thrown errors:
   *   [AuthenticationError]()
   *   [AuthorizationError]()
   *   [DatabaseError]()
   *   [FieldError]()
   *   [FieldMaskError]()
   *   [HeaderError]()
   *   [InternalError]()
   *   [ManagerLinkError]()
   *   [MutateError]()
   *   [QuotaError]()
   *   [RequestError]()
   */
  mutateCustomerManagerLink(
    request: MutateCustomerManagerLinkRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<MutateCustomerManagerLinkResponse>>;
  /**
   * Moves a client customer to a new manager customer.
   * This simplifies the complex request that requires two operations to move
   * a client customer to a new manager, for example:
   * 1. Update operation with Status INACTIVE (previous manager) and,
   * 2. Update operation with Status ACTIVE (new manager).
   *
   * List of thrown errors:
   *   [AuthenticationError]()
   *   [AuthorizationError]()
   *   [DatabaseError]()
   *   [FieldError]()
   *   [HeaderError]()
   *   [InternalError]()
   *   [MutateError]()
   *   [QuotaError]()
   *   [RequestError]()
   */
  moveManagerLink(
    request: MoveManagerLinkRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<MoveManagerLinkResponse>>;
}

export interface CustomerManagerLinkServiceClient<CallOptionsExt = {}> {
  /**
   * Updates customer manager links. Operation statuses are returned.
   *
   * List of thrown errors:
   *   [AuthenticationError]()
   *   [AuthorizationError]()
   *   [DatabaseError]()
   *   [FieldError]()
   *   [FieldMaskError]()
   *   [HeaderError]()
   *   [InternalError]()
   *   [ManagerLinkError]()
   *   [MutateError]()
   *   [QuotaError]()
   *   [RequestError]()
   */
  mutateCustomerManagerLink(
    request: DeepPartial<MutateCustomerManagerLinkRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<MutateCustomerManagerLinkResponse>;
  /**
   * Moves a client customer to a new manager customer.
   * This simplifies the complex request that requires two operations to move
   * a client customer to a new manager, for example:
   * 1. Update operation with Status INACTIVE (previous manager) and,
   * 2. Update operation with Status ACTIVE (new manager).
   *
   * List of thrown errors:
   *   [AuthenticationError]()
   *   [AuthorizationError]()
   *   [DatabaseError]()
   *   [FieldError]()
   *   [HeaderError]()
   *   [InternalError]()
   *   [MutateError]()
   *   [QuotaError]()
   *   [RequestError]()
   */
  moveManagerLink(
    request: DeepPartial<MoveManagerLinkRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<MoveManagerLinkResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
