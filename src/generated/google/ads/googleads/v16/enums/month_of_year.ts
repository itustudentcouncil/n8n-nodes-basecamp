// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v16/enums/month_of_year.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.googleads.v16.enums";

/** Container for enumeration of months of the year, for example, "January". */
export interface MonthOfYearEnum {
}

/** Enumerates months of the year, for example, "January". */
export enum MonthOfYearEnum_MonthOfYear {
  /** UNSPECIFIED - Not specified. */
  UNSPECIFIED = 0,
  /** UNKNOWN - The value is unknown in this version. */
  UNKNOWN = 1,
  /** JANUARY - January. */
  JANUARY = 2,
  /** FEBRUARY - February. */
  FEBRUARY = 3,
  /** MARCH - March. */
  MARCH = 4,
  /** APRIL - April. */
  APRIL = 5,
  /** MAY - May. */
  MAY = 6,
  /** JUNE - June. */
  JUNE = 7,
  /** JULY - July. */
  JULY = 8,
  /** AUGUST - August. */
  AUGUST = 9,
  /** SEPTEMBER - September. */
  SEPTEMBER = 10,
  /** OCTOBER - October. */
  OCTOBER = 11,
  /** NOVEMBER - November. */
  NOVEMBER = 12,
  /** DECEMBER - December. */
  DECEMBER = 13,
  UNRECOGNIZED = -1,
}

export function monthOfYearEnum_MonthOfYearFromJSON(object: any): MonthOfYearEnum_MonthOfYear {
  switch (object) {
    case 0:
    case "UNSPECIFIED":
      return MonthOfYearEnum_MonthOfYear.UNSPECIFIED;
    case 1:
    case "UNKNOWN":
      return MonthOfYearEnum_MonthOfYear.UNKNOWN;
    case 2:
    case "JANUARY":
      return MonthOfYearEnum_MonthOfYear.JANUARY;
    case 3:
    case "FEBRUARY":
      return MonthOfYearEnum_MonthOfYear.FEBRUARY;
    case 4:
    case "MARCH":
      return MonthOfYearEnum_MonthOfYear.MARCH;
    case 5:
    case "APRIL":
      return MonthOfYearEnum_MonthOfYear.APRIL;
    case 6:
    case "MAY":
      return MonthOfYearEnum_MonthOfYear.MAY;
    case 7:
    case "JUNE":
      return MonthOfYearEnum_MonthOfYear.JUNE;
    case 8:
    case "JULY":
      return MonthOfYearEnum_MonthOfYear.JULY;
    case 9:
    case "AUGUST":
      return MonthOfYearEnum_MonthOfYear.AUGUST;
    case 10:
    case "SEPTEMBER":
      return MonthOfYearEnum_MonthOfYear.SEPTEMBER;
    case 11:
    case "OCTOBER":
      return MonthOfYearEnum_MonthOfYear.OCTOBER;
    case 12:
    case "NOVEMBER":
      return MonthOfYearEnum_MonthOfYear.NOVEMBER;
    case 13:
    case "DECEMBER":
      return MonthOfYearEnum_MonthOfYear.DECEMBER;
    case -1:
    case "UNRECOGNIZED":
    default:
      return MonthOfYearEnum_MonthOfYear.UNRECOGNIZED;
  }
}

export function monthOfYearEnum_MonthOfYearToJSON(object: MonthOfYearEnum_MonthOfYear): string {
  switch (object) {
    case MonthOfYearEnum_MonthOfYear.UNSPECIFIED:
      return "UNSPECIFIED";
    case MonthOfYearEnum_MonthOfYear.UNKNOWN:
      return "UNKNOWN";
    case MonthOfYearEnum_MonthOfYear.JANUARY:
      return "JANUARY";
    case MonthOfYearEnum_MonthOfYear.FEBRUARY:
      return "FEBRUARY";
    case MonthOfYearEnum_MonthOfYear.MARCH:
      return "MARCH";
    case MonthOfYearEnum_MonthOfYear.APRIL:
      return "APRIL";
    case MonthOfYearEnum_MonthOfYear.MAY:
      return "MAY";
    case MonthOfYearEnum_MonthOfYear.JUNE:
      return "JUNE";
    case MonthOfYearEnum_MonthOfYear.JULY:
      return "JULY";
    case MonthOfYearEnum_MonthOfYear.AUGUST:
      return "AUGUST";
    case MonthOfYearEnum_MonthOfYear.SEPTEMBER:
      return "SEPTEMBER";
    case MonthOfYearEnum_MonthOfYear.OCTOBER:
      return "OCTOBER";
    case MonthOfYearEnum_MonthOfYear.NOVEMBER:
      return "NOVEMBER";
    case MonthOfYearEnum_MonthOfYear.DECEMBER:
      return "DECEMBER";
    case MonthOfYearEnum_MonthOfYear.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseMonthOfYearEnum(): MonthOfYearEnum {
  return {};
}

export const MonthOfYearEnum: MessageFns<MonthOfYearEnum> = {
  encode(_: MonthOfYearEnum, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MonthOfYearEnum {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMonthOfYearEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MonthOfYearEnum {
    return {};
  },

  toJSON(_: MonthOfYearEnum): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<MonthOfYearEnum>): MonthOfYearEnum {
    return MonthOfYearEnum.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<MonthOfYearEnum>): MonthOfYearEnum {
    const message = createBaseMonthOfYearEnum();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
