// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v16/enums/media_type.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.googleads.v16.enums";

/** Container for enum describing the types of media. */
export interface MediaTypeEnum {
}

/** The type of media. */
export enum MediaTypeEnum_MediaType {
  /** UNSPECIFIED - The media type has not been specified. */
  UNSPECIFIED = 0,
  /**
   * UNKNOWN - The received value is not known in this version.
   *
   * This is a response-only value.
   */
  UNKNOWN = 1,
  /** IMAGE - Static image, used for image ad. */
  IMAGE = 2,
  /** ICON - Small image, used for map ad. */
  ICON = 3,
  /** MEDIA_BUNDLE - ZIP file, used in fields of template ads. */
  MEDIA_BUNDLE = 4,
  /** AUDIO - Audio file. */
  AUDIO = 5,
  /** VIDEO - Video file. */
  VIDEO = 6,
  /** DYNAMIC_IMAGE - Animated image, such as animated GIF. */
  DYNAMIC_IMAGE = 7,
  UNRECOGNIZED = -1,
}

export function mediaTypeEnum_MediaTypeFromJSON(object: any): MediaTypeEnum_MediaType {
  switch (object) {
    case 0:
    case "UNSPECIFIED":
      return MediaTypeEnum_MediaType.UNSPECIFIED;
    case 1:
    case "UNKNOWN":
      return MediaTypeEnum_MediaType.UNKNOWN;
    case 2:
    case "IMAGE":
      return MediaTypeEnum_MediaType.IMAGE;
    case 3:
    case "ICON":
      return MediaTypeEnum_MediaType.ICON;
    case 4:
    case "MEDIA_BUNDLE":
      return MediaTypeEnum_MediaType.MEDIA_BUNDLE;
    case 5:
    case "AUDIO":
      return MediaTypeEnum_MediaType.AUDIO;
    case 6:
    case "VIDEO":
      return MediaTypeEnum_MediaType.VIDEO;
    case 7:
    case "DYNAMIC_IMAGE":
      return MediaTypeEnum_MediaType.DYNAMIC_IMAGE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return MediaTypeEnum_MediaType.UNRECOGNIZED;
  }
}

export function mediaTypeEnum_MediaTypeToJSON(object: MediaTypeEnum_MediaType): string {
  switch (object) {
    case MediaTypeEnum_MediaType.UNSPECIFIED:
      return "UNSPECIFIED";
    case MediaTypeEnum_MediaType.UNKNOWN:
      return "UNKNOWN";
    case MediaTypeEnum_MediaType.IMAGE:
      return "IMAGE";
    case MediaTypeEnum_MediaType.ICON:
      return "ICON";
    case MediaTypeEnum_MediaType.MEDIA_BUNDLE:
      return "MEDIA_BUNDLE";
    case MediaTypeEnum_MediaType.AUDIO:
      return "AUDIO";
    case MediaTypeEnum_MediaType.VIDEO:
      return "VIDEO";
    case MediaTypeEnum_MediaType.DYNAMIC_IMAGE:
      return "DYNAMIC_IMAGE";
    case MediaTypeEnum_MediaType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseMediaTypeEnum(): MediaTypeEnum {
  return {};
}

export const MediaTypeEnum: MessageFns<MediaTypeEnum> = {
  encode(_: MediaTypeEnum, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MediaTypeEnum {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMediaTypeEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MediaTypeEnum {
    return {};
  },

  toJSON(_: MediaTypeEnum): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<MediaTypeEnum>): MediaTypeEnum {
    return MediaTypeEnum.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<MediaTypeEnum>): MediaTypeEnum {
    const message = createBaseMediaTypeEnum();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
