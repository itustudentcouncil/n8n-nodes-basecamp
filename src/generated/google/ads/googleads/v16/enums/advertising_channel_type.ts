// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v16/enums/advertising_channel_type.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.googleads.v16.enums";

/** The channel type a campaign may target to serve on. */
export interface AdvertisingChannelTypeEnum {
}

/** Enum describing the various advertising channel types. */
export enum AdvertisingChannelTypeEnum_AdvertisingChannelType {
  /** UNSPECIFIED - Not specified. */
  UNSPECIFIED = 0,
  /** UNKNOWN - Used for return value only. Represents value unknown in this version. */
  UNKNOWN = 1,
  /** SEARCH - Search Network. Includes display bundled, and Search+ campaigns. */
  SEARCH = 2,
  /** DISPLAY - Google Display Network only. */
  DISPLAY = 3,
  /**
   * SHOPPING - Shopping campaigns serve on the shopping property
   * and on google.com search results.
   */
  SHOPPING = 4,
  /** HOTEL - Hotel Ads campaigns. */
  HOTEL = 5,
  /** VIDEO - Video campaigns. */
  VIDEO = 6,
  /**
   * MULTI_CHANNEL - App Campaigns, and App Campaigns for Engagement, that run
   * across multiple channels.
   */
  MULTI_CHANNEL = 7,
  /** LOCAL - Local ads campaigns. */
  LOCAL = 8,
  /** SMART - Smart campaigns. */
  SMART = 9,
  /** PERFORMANCE_MAX - Performance Max campaigns. */
  PERFORMANCE_MAX = 10,
  /** LOCAL_SERVICES - Local services campaigns. */
  LOCAL_SERVICES = 11,
  /** DISCOVERY - Discovery campaigns. */
  DISCOVERY = 12,
  /** TRAVEL - Travel campaigns. */
  TRAVEL = 13,
  UNRECOGNIZED = -1,
}

export function advertisingChannelTypeEnum_AdvertisingChannelTypeFromJSON(
  object: any,
): AdvertisingChannelTypeEnum_AdvertisingChannelType {
  switch (object) {
    case 0:
    case "UNSPECIFIED":
      return AdvertisingChannelTypeEnum_AdvertisingChannelType.UNSPECIFIED;
    case 1:
    case "UNKNOWN":
      return AdvertisingChannelTypeEnum_AdvertisingChannelType.UNKNOWN;
    case 2:
    case "SEARCH":
      return AdvertisingChannelTypeEnum_AdvertisingChannelType.SEARCH;
    case 3:
    case "DISPLAY":
      return AdvertisingChannelTypeEnum_AdvertisingChannelType.DISPLAY;
    case 4:
    case "SHOPPING":
      return AdvertisingChannelTypeEnum_AdvertisingChannelType.SHOPPING;
    case 5:
    case "HOTEL":
      return AdvertisingChannelTypeEnum_AdvertisingChannelType.HOTEL;
    case 6:
    case "VIDEO":
      return AdvertisingChannelTypeEnum_AdvertisingChannelType.VIDEO;
    case 7:
    case "MULTI_CHANNEL":
      return AdvertisingChannelTypeEnum_AdvertisingChannelType.MULTI_CHANNEL;
    case 8:
    case "LOCAL":
      return AdvertisingChannelTypeEnum_AdvertisingChannelType.LOCAL;
    case 9:
    case "SMART":
      return AdvertisingChannelTypeEnum_AdvertisingChannelType.SMART;
    case 10:
    case "PERFORMANCE_MAX":
      return AdvertisingChannelTypeEnum_AdvertisingChannelType.PERFORMANCE_MAX;
    case 11:
    case "LOCAL_SERVICES":
      return AdvertisingChannelTypeEnum_AdvertisingChannelType.LOCAL_SERVICES;
    case 12:
    case "DISCOVERY":
      return AdvertisingChannelTypeEnum_AdvertisingChannelType.DISCOVERY;
    case 13:
    case "TRAVEL":
      return AdvertisingChannelTypeEnum_AdvertisingChannelType.TRAVEL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AdvertisingChannelTypeEnum_AdvertisingChannelType.UNRECOGNIZED;
  }
}

export function advertisingChannelTypeEnum_AdvertisingChannelTypeToJSON(
  object: AdvertisingChannelTypeEnum_AdvertisingChannelType,
): string {
  switch (object) {
    case AdvertisingChannelTypeEnum_AdvertisingChannelType.UNSPECIFIED:
      return "UNSPECIFIED";
    case AdvertisingChannelTypeEnum_AdvertisingChannelType.UNKNOWN:
      return "UNKNOWN";
    case AdvertisingChannelTypeEnum_AdvertisingChannelType.SEARCH:
      return "SEARCH";
    case AdvertisingChannelTypeEnum_AdvertisingChannelType.DISPLAY:
      return "DISPLAY";
    case AdvertisingChannelTypeEnum_AdvertisingChannelType.SHOPPING:
      return "SHOPPING";
    case AdvertisingChannelTypeEnum_AdvertisingChannelType.HOTEL:
      return "HOTEL";
    case AdvertisingChannelTypeEnum_AdvertisingChannelType.VIDEO:
      return "VIDEO";
    case AdvertisingChannelTypeEnum_AdvertisingChannelType.MULTI_CHANNEL:
      return "MULTI_CHANNEL";
    case AdvertisingChannelTypeEnum_AdvertisingChannelType.LOCAL:
      return "LOCAL";
    case AdvertisingChannelTypeEnum_AdvertisingChannelType.SMART:
      return "SMART";
    case AdvertisingChannelTypeEnum_AdvertisingChannelType.PERFORMANCE_MAX:
      return "PERFORMANCE_MAX";
    case AdvertisingChannelTypeEnum_AdvertisingChannelType.LOCAL_SERVICES:
      return "LOCAL_SERVICES";
    case AdvertisingChannelTypeEnum_AdvertisingChannelType.DISCOVERY:
      return "DISCOVERY";
    case AdvertisingChannelTypeEnum_AdvertisingChannelType.TRAVEL:
      return "TRAVEL";
    case AdvertisingChannelTypeEnum_AdvertisingChannelType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseAdvertisingChannelTypeEnum(): AdvertisingChannelTypeEnum {
  return {};
}

export const AdvertisingChannelTypeEnum: MessageFns<AdvertisingChannelTypeEnum> = {
  encode(_: AdvertisingChannelTypeEnum, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AdvertisingChannelTypeEnum {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAdvertisingChannelTypeEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): AdvertisingChannelTypeEnum {
    return {};
  },

  toJSON(_: AdvertisingChannelTypeEnum): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<AdvertisingChannelTypeEnum>): AdvertisingChannelTypeEnum {
    return AdvertisingChannelTypeEnum.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<AdvertisingChannelTypeEnum>): AdvertisingChannelTypeEnum {
    const message = createBaseAdvertisingChannelTypeEnum();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
