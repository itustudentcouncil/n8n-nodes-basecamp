// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v16/enums/criterion_category_channel_availability_mode.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.googleads.v16.enums";

/**
 * Describes channel availability mode for a criterion availability - whether
 * the availability is meant to include all advertising channels, or a
 * particular channel with all its channel subtypes, or a channel with a certain
 * subset of channel subtypes.
 */
export interface CriterionCategoryChannelAvailabilityModeEnum {
}

/** Enum containing the possible CriterionCategoryChannelAvailabilityMode. */
export enum CriterionCategoryChannelAvailabilityModeEnum_CriterionCategoryChannelAvailabilityMode {
  /** UNSPECIFIED - Not specified. */
  UNSPECIFIED = 0,
  /** UNKNOWN - Used for return value only. Represents value unknown in this version. */
  UNKNOWN = 1,
  /** ALL_CHANNELS - The category is available to campaigns of all channel types and subtypes. */
  ALL_CHANNELS = 2,
  /**
   * CHANNEL_TYPE_AND_ALL_SUBTYPES - The category is available to campaigns of a specific channel type,
   * including all subtypes under it.
   */
  CHANNEL_TYPE_AND_ALL_SUBTYPES = 3,
  /**
   * CHANNEL_TYPE_AND_SUBSET_SUBTYPES - The category is available to campaigns of a specific channel type and
   * subtype(s).
   */
  CHANNEL_TYPE_AND_SUBSET_SUBTYPES = 4,
  UNRECOGNIZED = -1,
}

export function criterionCategoryChannelAvailabilityModeEnum_CriterionCategoryChannelAvailabilityModeFromJSON(
  object: any,
): CriterionCategoryChannelAvailabilityModeEnum_CriterionCategoryChannelAvailabilityMode {
  switch (object) {
    case 0:
    case "UNSPECIFIED":
      return CriterionCategoryChannelAvailabilityModeEnum_CriterionCategoryChannelAvailabilityMode.UNSPECIFIED;
    case 1:
    case "UNKNOWN":
      return CriterionCategoryChannelAvailabilityModeEnum_CriterionCategoryChannelAvailabilityMode.UNKNOWN;
    case 2:
    case "ALL_CHANNELS":
      return CriterionCategoryChannelAvailabilityModeEnum_CriterionCategoryChannelAvailabilityMode.ALL_CHANNELS;
    case 3:
    case "CHANNEL_TYPE_AND_ALL_SUBTYPES":
      return CriterionCategoryChannelAvailabilityModeEnum_CriterionCategoryChannelAvailabilityMode
        .CHANNEL_TYPE_AND_ALL_SUBTYPES;
    case 4:
    case "CHANNEL_TYPE_AND_SUBSET_SUBTYPES":
      return CriterionCategoryChannelAvailabilityModeEnum_CriterionCategoryChannelAvailabilityMode
        .CHANNEL_TYPE_AND_SUBSET_SUBTYPES;
    case -1:
    case "UNRECOGNIZED":
    default:
      return CriterionCategoryChannelAvailabilityModeEnum_CriterionCategoryChannelAvailabilityMode.UNRECOGNIZED;
  }
}

export function criterionCategoryChannelAvailabilityModeEnum_CriterionCategoryChannelAvailabilityModeToJSON(
  object: CriterionCategoryChannelAvailabilityModeEnum_CriterionCategoryChannelAvailabilityMode,
): string {
  switch (object) {
    case CriterionCategoryChannelAvailabilityModeEnum_CriterionCategoryChannelAvailabilityMode.UNSPECIFIED:
      return "UNSPECIFIED";
    case CriterionCategoryChannelAvailabilityModeEnum_CriterionCategoryChannelAvailabilityMode.UNKNOWN:
      return "UNKNOWN";
    case CriterionCategoryChannelAvailabilityModeEnum_CriterionCategoryChannelAvailabilityMode.ALL_CHANNELS:
      return "ALL_CHANNELS";
    case CriterionCategoryChannelAvailabilityModeEnum_CriterionCategoryChannelAvailabilityMode
      .CHANNEL_TYPE_AND_ALL_SUBTYPES:
      return "CHANNEL_TYPE_AND_ALL_SUBTYPES";
    case CriterionCategoryChannelAvailabilityModeEnum_CriterionCategoryChannelAvailabilityMode
      .CHANNEL_TYPE_AND_SUBSET_SUBTYPES:
      return "CHANNEL_TYPE_AND_SUBSET_SUBTYPES";
    case CriterionCategoryChannelAvailabilityModeEnum_CriterionCategoryChannelAvailabilityMode.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseCriterionCategoryChannelAvailabilityModeEnum(): CriterionCategoryChannelAvailabilityModeEnum {
  return {};
}

export const CriterionCategoryChannelAvailabilityModeEnum: MessageFns<CriterionCategoryChannelAvailabilityModeEnum> = {
  encode(_: CriterionCategoryChannelAvailabilityModeEnum, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CriterionCategoryChannelAvailabilityModeEnum {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCriterionCategoryChannelAvailabilityModeEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): CriterionCategoryChannelAvailabilityModeEnum {
    return {};
  },

  toJSON(_: CriterionCategoryChannelAvailabilityModeEnum): unknown {
    const obj: any = {};
    return obj;
  },

  create(
    base?: DeepPartial<CriterionCategoryChannelAvailabilityModeEnum>,
  ): CriterionCategoryChannelAvailabilityModeEnum {
    return CriterionCategoryChannelAvailabilityModeEnum.fromPartial(base ?? {});
  },
  fromPartial(
    _: DeepPartial<CriterionCategoryChannelAvailabilityModeEnum>,
  ): CriterionCategoryChannelAvailabilityModeEnum {
    const message = createBaseCriterionCategoryChannelAvailabilityModeEnum();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
