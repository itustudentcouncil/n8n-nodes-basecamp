// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v16/enums/hotel_reconciliation_status.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.googleads.v16.enums";

/** Container for HotelReconciliationStatus. */
export interface HotelReconciliationStatusEnum {
}

/** Status of the hotel booking reconciliation. */
export enum HotelReconciliationStatusEnum_HotelReconciliationStatus {
  /** UNSPECIFIED - Not specified. */
  UNSPECIFIED = 0,
  /** UNKNOWN - The value is unknown in this version. */
  UNKNOWN = 1,
  /**
   * RESERVATION_ENABLED - Bookings are for a future date, or a stay is underway but the check-out
   * date hasn't passed. An active reservation can't be reconciled.
   */
  RESERVATION_ENABLED = 2,
  /**
   * RECONCILIATION_NEEDED - Check-out has already taken place, or the booked dates have passed
   * without cancellation. Bookings that are not reconciled within 45 days of
   * the check-out date are billed based on the original booking price.
   */
  RECONCILIATION_NEEDED = 3,
  /**
   * RECONCILED - These bookings have been reconciled. Reconciled bookings are billed 45
   * days after the check-out date.
   */
  RECONCILED = 4,
  /**
   * CANCELED - This booking was marked as canceled. Canceled stays with a value greater
   * than zero (due to minimum stay rules or cancellation fees) are billed 45
   * days after the check-out date.
   */
  CANCELED = 5,
  UNRECOGNIZED = -1,
}

export function hotelReconciliationStatusEnum_HotelReconciliationStatusFromJSON(
  object: any,
): HotelReconciliationStatusEnum_HotelReconciliationStatus {
  switch (object) {
    case 0:
    case "UNSPECIFIED":
      return HotelReconciliationStatusEnum_HotelReconciliationStatus.UNSPECIFIED;
    case 1:
    case "UNKNOWN":
      return HotelReconciliationStatusEnum_HotelReconciliationStatus.UNKNOWN;
    case 2:
    case "RESERVATION_ENABLED":
      return HotelReconciliationStatusEnum_HotelReconciliationStatus.RESERVATION_ENABLED;
    case 3:
    case "RECONCILIATION_NEEDED":
      return HotelReconciliationStatusEnum_HotelReconciliationStatus.RECONCILIATION_NEEDED;
    case 4:
    case "RECONCILED":
      return HotelReconciliationStatusEnum_HotelReconciliationStatus.RECONCILED;
    case 5:
    case "CANCELED":
      return HotelReconciliationStatusEnum_HotelReconciliationStatus.CANCELED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return HotelReconciliationStatusEnum_HotelReconciliationStatus.UNRECOGNIZED;
  }
}

export function hotelReconciliationStatusEnum_HotelReconciliationStatusToJSON(
  object: HotelReconciliationStatusEnum_HotelReconciliationStatus,
): string {
  switch (object) {
    case HotelReconciliationStatusEnum_HotelReconciliationStatus.UNSPECIFIED:
      return "UNSPECIFIED";
    case HotelReconciliationStatusEnum_HotelReconciliationStatus.UNKNOWN:
      return "UNKNOWN";
    case HotelReconciliationStatusEnum_HotelReconciliationStatus.RESERVATION_ENABLED:
      return "RESERVATION_ENABLED";
    case HotelReconciliationStatusEnum_HotelReconciliationStatus.RECONCILIATION_NEEDED:
      return "RECONCILIATION_NEEDED";
    case HotelReconciliationStatusEnum_HotelReconciliationStatus.RECONCILED:
      return "RECONCILED";
    case HotelReconciliationStatusEnum_HotelReconciliationStatus.CANCELED:
      return "CANCELED";
    case HotelReconciliationStatusEnum_HotelReconciliationStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseHotelReconciliationStatusEnum(): HotelReconciliationStatusEnum {
  return {};
}

export const HotelReconciliationStatusEnum: MessageFns<HotelReconciliationStatusEnum> = {
  encode(_: HotelReconciliationStatusEnum, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HotelReconciliationStatusEnum {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHotelReconciliationStatusEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): HotelReconciliationStatusEnum {
    return {};
  },

  toJSON(_: HotelReconciliationStatusEnum): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<HotelReconciliationStatusEnum>): HotelReconciliationStatusEnum {
    return HotelReconciliationStatusEnum.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<HotelReconciliationStatusEnum>): HotelReconciliationStatusEnum {
    const message = createBaseHotelReconciliationStatusEnum();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
