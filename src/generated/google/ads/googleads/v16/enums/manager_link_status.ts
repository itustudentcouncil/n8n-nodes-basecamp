// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v16/enums/manager_link_status.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.googleads.v16.enums";

/** Container for enum describing possible status of a manager and client link. */
export interface ManagerLinkStatusEnum {
}

/** Possible statuses of a link. */
export enum ManagerLinkStatusEnum_ManagerLinkStatus {
  /** UNSPECIFIED - Not specified. */
  UNSPECIFIED = 0,
  /** UNKNOWN - Used for return value only. Represents value unknown in this version. */
  UNKNOWN = 1,
  /** ACTIVE - Indicates current in-effect relationship */
  ACTIVE = 2,
  /** INACTIVE - Indicates terminated relationship */
  INACTIVE = 3,
  /**
   * PENDING - Indicates relationship has been requested by manager, but the client
   * hasn't accepted yet.
   */
  PENDING = 4,
  /** REFUSED - Relationship was requested by the manager, but the client has refused. */
  REFUSED = 5,
  /**
   * CANCELED - Indicates relationship has been requested by manager, but manager
   * canceled it.
   */
  CANCELED = 6,
  UNRECOGNIZED = -1,
}

export function managerLinkStatusEnum_ManagerLinkStatusFromJSON(object: any): ManagerLinkStatusEnum_ManagerLinkStatus {
  switch (object) {
    case 0:
    case "UNSPECIFIED":
      return ManagerLinkStatusEnum_ManagerLinkStatus.UNSPECIFIED;
    case 1:
    case "UNKNOWN":
      return ManagerLinkStatusEnum_ManagerLinkStatus.UNKNOWN;
    case 2:
    case "ACTIVE":
      return ManagerLinkStatusEnum_ManagerLinkStatus.ACTIVE;
    case 3:
    case "INACTIVE":
      return ManagerLinkStatusEnum_ManagerLinkStatus.INACTIVE;
    case 4:
    case "PENDING":
      return ManagerLinkStatusEnum_ManagerLinkStatus.PENDING;
    case 5:
    case "REFUSED":
      return ManagerLinkStatusEnum_ManagerLinkStatus.REFUSED;
    case 6:
    case "CANCELED":
      return ManagerLinkStatusEnum_ManagerLinkStatus.CANCELED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ManagerLinkStatusEnum_ManagerLinkStatus.UNRECOGNIZED;
  }
}

export function managerLinkStatusEnum_ManagerLinkStatusToJSON(object: ManagerLinkStatusEnum_ManagerLinkStatus): string {
  switch (object) {
    case ManagerLinkStatusEnum_ManagerLinkStatus.UNSPECIFIED:
      return "UNSPECIFIED";
    case ManagerLinkStatusEnum_ManagerLinkStatus.UNKNOWN:
      return "UNKNOWN";
    case ManagerLinkStatusEnum_ManagerLinkStatus.ACTIVE:
      return "ACTIVE";
    case ManagerLinkStatusEnum_ManagerLinkStatus.INACTIVE:
      return "INACTIVE";
    case ManagerLinkStatusEnum_ManagerLinkStatus.PENDING:
      return "PENDING";
    case ManagerLinkStatusEnum_ManagerLinkStatus.REFUSED:
      return "REFUSED";
    case ManagerLinkStatusEnum_ManagerLinkStatus.CANCELED:
      return "CANCELED";
    case ManagerLinkStatusEnum_ManagerLinkStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseManagerLinkStatusEnum(): ManagerLinkStatusEnum {
  return {};
}

export const ManagerLinkStatusEnum: MessageFns<ManagerLinkStatusEnum> = {
  encode(_: ManagerLinkStatusEnum, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ManagerLinkStatusEnum {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseManagerLinkStatusEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ManagerLinkStatusEnum {
    return {};
  },

  toJSON(_: ManagerLinkStatusEnum): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<ManagerLinkStatusEnum>): ManagerLinkStatusEnum {
    return ManagerLinkStatusEnum.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<ManagerLinkStatusEnum>): ManagerLinkStatusEnum {
    const message = createBaseManagerLinkStatusEnum();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
