// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v16/enums/offline_conversion_diagnostic_status_enum.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.googleads.v16.enums";

/** All possible statuses for oci diagnostics. */
export interface OfflineConversionDiagnosticStatusEnum {
}

/** Possible statuses of the offline ingestion setup. */
export enum OfflineConversionDiagnosticStatusEnum_OfflineConversionDiagnosticStatus {
  /** UNSPECIFIED - Not specified. */
  UNSPECIFIED = 0,
  /** UNKNOWN - Used for return value only. Represents value unknown in this version. */
  UNKNOWN = 1,
  /**
   * EXCELLENT - Your offline data ingestion setup is active and optimal for downstream
   * processing.
   */
  EXCELLENT = 2,
  /**
   * GOOD - Your offline ingestion setup is active, but there are further
   * improvements you could make. See alerts.
   */
  GOOD = 3,
  /**
   * NEEDS_ATTENTION - Your offline ingestion setup is active, but there are errors that require
   * your attention. See alerts.
   */
  NEEDS_ATTENTION = 4,
  /**
   * NO_RECENT_UPLOAD - Your offline ingestion setup has not received data in the last 28 days,
   * there may be something wrong.
   */
  NO_RECENT_UPLOAD = 6,
  UNRECOGNIZED = -1,
}

export function offlineConversionDiagnosticStatusEnum_OfflineConversionDiagnosticStatusFromJSON(
  object: any,
): OfflineConversionDiagnosticStatusEnum_OfflineConversionDiagnosticStatus {
  switch (object) {
    case 0:
    case "UNSPECIFIED":
      return OfflineConversionDiagnosticStatusEnum_OfflineConversionDiagnosticStatus.UNSPECIFIED;
    case 1:
    case "UNKNOWN":
      return OfflineConversionDiagnosticStatusEnum_OfflineConversionDiagnosticStatus.UNKNOWN;
    case 2:
    case "EXCELLENT":
      return OfflineConversionDiagnosticStatusEnum_OfflineConversionDiagnosticStatus.EXCELLENT;
    case 3:
    case "GOOD":
      return OfflineConversionDiagnosticStatusEnum_OfflineConversionDiagnosticStatus.GOOD;
    case 4:
    case "NEEDS_ATTENTION":
      return OfflineConversionDiagnosticStatusEnum_OfflineConversionDiagnosticStatus.NEEDS_ATTENTION;
    case 6:
    case "NO_RECENT_UPLOAD":
      return OfflineConversionDiagnosticStatusEnum_OfflineConversionDiagnosticStatus.NO_RECENT_UPLOAD;
    case -1:
    case "UNRECOGNIZED":
    default:
      return OfflineConversionDiagnosticStatusEnum_OfflineConversionDiagnosticStatus.UNRECOGNIZED;
  }
}

export function offlineConversionDiagnosticStatusEnum_OfflineConversionDiagnosticStatusToJSON(
  object: OfflineConversionDiagnosticStatusEnum_OfflineConversionDiagnosticStatus,
): string {
  switch (object) {
    case OfflineConversionDiagnosticStatusEnum_OfflineConversionDiagnosticStatus.UNSPECIFIED:
      return "UNSPECIFIED";
    case OfflineConversionDiagnosticStatusEnum_OfflineConversionDiagnosticStatus.UNKNOWN:
      return "UNKNOWN";
    case OfflineConversionDiagnosticStatusEnum_OfflineConversionDiagnosticStatus.EXCELLENT:
      return "EXCELLENT";
    case OfflineConversionDiagnosticStatusEnum_OfflineConversionDiagnosticStatus.GOOD:
      return "GOOD";
    case OfflineConversionDiagnosticStatusEnum_OfflineConversionDiagnosticStatus.NEEDS_ATTENTION:
      return "NEEDS_ATTENTION";
    case OfflineConversionDiagnosticStatusEnum_OfflineConversionDiagnosticStatus.NO_RECENT_UPLOAD:
      return "NO_RECENT_UPLOAD";
    case OfflineConversionDiagnosticStatusEnum_OfflineConversionDiagnosticStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseOfflineConversionDiagnosticStatusEnum(): OfflineConversionDiagnosticStatusEnum {
  return {};
}

export const OfflineConversionDiagnosticStatusEnum: MessageFns<OfflineConversionDiagnosticStatusEnum> = {
  encode(_: OfflineConversionDiagnosticStatusEnum, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OfflineConversionDiagnosticStatusEnum {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOfflineConversionDiagnosticStatusEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): OfflineConversionDiagnosticStatusEnum {
    return {};
  },

  toJSON(_: OfflineConversionDiagnosticStatusEnum): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<OfflineConversionDiagnosticStatusEnum>): OfflineConversionDiagnosticStatusEnum {
    return OfflineConversionDiagnosticStatusEnum.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<OfflineConversionDiagnosticStatusEnum>): OfflineConversionDiagnosticStatusEnum {
    const message = createBaseOfflineConversionDiagnosticStatusEnum();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
