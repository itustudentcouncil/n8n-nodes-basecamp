// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v16/enums/hotel_rate_type.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.googleads.v16.enums";

/** Container for enum describing possible hotel rate types. */
export interface HotelRateTypeEnum {
}

/** Enum describing possible hotel rate types. */
export enum HotelRateTypeEnum_HotelRateType {
  /** UNSPECIFIED - Not specified. */
  UNSPECIFIED = 0,
  /** UNKNOWN - The value is unknown in this version. */
  UNKNOWN = 1,
  /** UNAVAILABLE - Rate type information is unavailable. */
  UNAVAILABLE = 2,
  /** PUBLIC_RATE - Rates available to everyone. */
  PUBLIC_RATE = 3,
  /**
   * QUALIFIED_RATE - A membership program rate is available and satisfies basic requirements
   * like having a public rate available. UI treatment will strikethrough the
   * public rate and indicate that a discount is available to the user. For
   * more on Qualified Rates, visit
   * https://developers.google.com/hotels/hotel-ads/dev-guide/qualified-rates
   */
  QUALIFIED_RATE = 4,
  /**
   * PRIVATE_RATE - Rates available to users that satisfy some eligibility criteria, for
   * example, all signed-in users, 20% of mobile users, all mobile users in
   * Canada, etc.
   */
  PRIVATE_RATE = 5,
  UNRECOGNIZED = -1,
}

export function hotelRateTypeEnum_HotelRateTypeFromJSON(object: any): HotelRateTypeEnum_HotelRateType {
  switch (object) {
    case 0:
    case "UNSPECIFIED":
      return HotelRateTypeEnum_HotelRateType.UNSPECIFIED;
    case 1:
    case "UNKNOWN":
      return HotelRateTypeEnum_HotelRateType.UNKNOWN;
    case 2:
    case "UNAVAILABLE":
      return HotelRateTypeEnum_HotelRateType.UNAVAILABLE;
    case 3:
    case "PUBLIC_RATE":
      return HotelRateTypeEnum_HotelRateType.PUBLIC_RATE;
    case 4:
    case "QUALIFIED_RATE":
      return HotelRateTypeEnum_HotelRateType.QUALIFIED_RATE;
    case 5:
    case "PRIVATE_RATE":
      return HotelRateTypeEnum_HotelRateType.PRIVATE_RATE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return HotelRateTypeEnum_HotelRateType.UNRECOGNIZED;
  }
}

export function hotelRateTypeEnum_HotelRateTypeToJSON(object: HotelRateTypeEnum_HotelRateType): string {
  switch (object) {
    case HotelRateTypeEnum_HotelRateType.UNSPECIFIED:
      return "UNSPECIFIED";
    case HotelRateTypeEnum_HotelRateType.UNKNOWN:
      return "UNKNOWN";
    case HotelRateTypeEnum_HotelRateType.UNAVAILABLE:
      return "UNAVAILABLE";
    case HotelRateTypeEnum_HotelRateType.PUBLIC_RATE:
      return "PUBLIC_RATE";
    case HotelRateTypeEnum_HotelRateType.QUALIFIED_RATE:
      return "QUALIFIED_RATE";
    case HotelRateTypeEnum_HotelRateType.PRIVATE_RATE:
      return "PRIVATE_RATE";
    case HotelRateTypeEnum_HotelRateType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseHotelRateTypeEnum(): HotelRateTypeEnum {
  return {};
}

export const HotelRateTypeEnum: MessageFns<HotelRateTypeEnum> = {
  encode(_: HotelRateTypeEnum, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HotelRateTypeEnum {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHotelRateTypeEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): HotelRateTypeEnum {
    return {};
  },

  toJSON(_: HotelRateTypeEnum): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<HotelRateTypeEnum>): HotelRateTypeEnum {
    return HotelRateTypeEnum.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<HotelRateTypeEnum>): HotelRateTypeEnum {
    const message = createBaseHotelRateTypeEnum();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
