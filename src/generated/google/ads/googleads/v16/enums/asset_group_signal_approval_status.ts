// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v16/enums/asset_group_signal_approval_status.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.googleads.v16.enums";

/**
 * Container for enum describing possible AssetGroupSignal approval statuses.
 * Details see https://support.google.com/google-ads/answer/2453978.
 */
export interface AssetGroupSignalApprovalStatusEnum {
}

/**
 * Enumerates AssetGroupSignal approval statuses, which are only used for
 * Search Theme Signal.
 */
export enum AssetGroupSignalApprovalStatusEnum_AssetGroupSignalApprovalStatus {
  /** UNSPECIFIED - Not specified. */
  UNSPECIFIED = 0,
  /** UNKNOWN - The value is unknown in this version. */
  UNKNOWN = 1,
  /** APPROVED - Search Theme is eligible to show ads. */
  APPROVED = 2,
  /** LIMITED - Low search volume; Below first page bid estimate. */
  LIMITED = 3,
  /**
   * DISAPPROVED - Search Theme is inactive and isn't showing ads. A disapproved Search
   * Theme usually means there's an issue with one or more of our advertising
   * policies.
   */
  DISAPPROVED = 4,
  /**
   * UNDER_REVIEW - Search Theme is under review. It wonâ€™t be able to trigger ads until
   * it's been reviewed.
   */
  UNDER_REVIEW = 5,
  UNRECOGNIZED = -1,
}

export function assetGroupSignalApprovalStatusEnum_AssetGroupSignalApprovalStatusFromJSON(
  object: any,
): AssetGroupSignalApprovalStatusEnum_AssetGroupSignalApprovalStatus {
  switch (object) {
    case 0:
    case "UNSPECIFIED":
      return AssetGroupSignalApprovalStatusEnum_AssetGroupSignalApprovalStatus.UNSPECIFIED;
    case 1:
    case "UNKNOWN":
      return AssetGroupSignalApprovalStatusEnum_AssetGroupSignalApprovalStatus.UNKNOWN;
    case 2:
    case "APPROVED":
      return AssetGroupSignalApprovalStatusEnum_AssetGroupSignalApprovalStatus.APPROVED;
    case 3:
    case "LIMITED":
      return AssetGroupSignalApprovalStatusEnum_AssetGroupSignalApprovalStatus.LIMITED;
    case 4:
    case "DISAPPROVED":
      return AssetGroupSignalApprovalStatusEnum_AssetGroupSignalApprovalStatus.DISAPPROVED;
    case 5:
    case "UNDER_REVIEW":
      return AssetGroupSignalApprovalStatusEnum_AssetGroupSignalApprovalStatus.UNDER_REVIEW;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AssetGroupSignalApprovalStatusEnum_AssetGroupSignalApprovalStatus.UNRECOGNIZED;
  }
}

export function assetGroupSignalApprovalStatusEnum_AssetGroupSignalApprovalStatusToJSON(
  object: AssetGroupSignalApprovalStatusEnum_AssetGroupSignalApprovalStatus,
): string {
  switch (object) {
    case AssetGroupSignalApprovalStatusEnum_AssetGroupSignalApprovalStatus.UNSPECIFIED:
      return "UNSPECIFIED";
    case AssetGroupSignalApprovalStatusEnum_AssetGroupSignalApprovalStatus.UNKNOWN:
      return "UNKNOWN";
    case AssetGroupSignalApprovalStatusEnum_AssetGroupSignalApprovalStatus.APPROVED:
      return "APPROVED";
    case AssetGroupSignalApprovalStatusEnum_AssetGroupSignalApprovalStatus.LIMITED:
      return "LIMITED";
    case AssetGroupSignalApprovalStatusEnum_AssetGroupSignalApprovalStatus.DISAPPROVED:
      return "DISAPPROVED";
    case AssetGroupSignalApprovalStatusEnum_AssetGroupSignalApprovalStatus.UNDER_REVIEW:
      return "UNDER_REVIEW";
    case AssetGroupSignalApprovalStatusEnum_AssetGroupSignalApprovalStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseAssetGroupSignalApprovalStatusEnum(): AssetGroupSignalApprovalStatusEnum {
  return {};
}

export const AssetGroupSignalApprovalStatusEnum: MessageFns<AssetGroupSignalApprovalStatusEnum> = {
  encode(_: AssetGroupSignalApprovalStatusEnum, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AssetGroupSignalApprovalStatusEnum {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAssetGroupSignalApprovalStatusEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): AssetGroupSignalApprovalStatusEnum {
    return {};
  },

  toJSON(_: AssetGroupSignalApprovalStatusEnum): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<AssetGroupSignalApprovalStatusEnum>): AssetGroupSignalApprovalStatusEnum {
    return AssetGroupSignalApprovalStatusEnum.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<AssetGroupSignalApprovalStatusEnum>): AssetGroupSignalApprovalStatusEnum {
    const message = createBaseAssetGroupSignalApprovalStatusEnum();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
