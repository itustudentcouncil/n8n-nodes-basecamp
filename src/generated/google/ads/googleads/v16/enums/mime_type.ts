// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v16/enums/mime_type.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.googleads.v16.enums";

/** Container for enum describing the mime types. */
export interface MimeTypeEnum {
}

/** The mime type */
export enum MimeTypeEnum_MimeType {
  /** UNSPECIFIED - The mime type has not been specified. */
  UNSPECIFIED = 0,
  /**
   * UNKNOWN - The received value is not known in this version.
   *
   * This is a response-only value.
   */
  UNKNOWN = 1,
  /** IMAGE_JPEG - MIME type of image/jpeg. */
  IMAGE_JPEG = 2,
  /** IMAGE_GIF - MIME type of image/gif. */
  IMAGE_GIF = 3,
  /** IMAGE_PNG - MIME type of image/png. */
  IMAGE_PNG = 4,
  /** FLASH - MIME type of application/x-shockwave-flash. */
  FLASH = 5,
  /** TEXT_HTML - MIME type of text/html. */
  TEXT_HTML = 6,
  /** PDF - MIME type of application/pdf. */
  PDF = 7,
  /** MSWORD - MIME type of application/msword. */
  MSWORD = 8,
  /** MSEXCEL - MIME type of application/vnd.ms-excel. */
  MSEXCEL = 9,
  /** RTF - MIME type of application/rtf. */
  RTF = 10,
  /** AUDIO_WAV - MIME type of audio/wav. */
  AUDIO_WAV = 11,
  /** AUDIO_MP3 - MIME type of audio/mp3. */
  AUDIO_MP3 = 12,
  /** HTML5_AD_ZIP - MIME type of application/x-html5-ad-zip. */
  HTML5_AD_ZIP = 13,
  UNRECOGNIZED = -1,
}

export function mimeTypeEnum_MimeTypeFromJSON(object: any): MimeTypeEnum_MimeType {
  switch (object) {
    case 0:
    case "UNSPECIFIED":
      return MimeTypeEnum_MimeType.UNSPECIFIED;
    case 1:
    case "UNKNOWN":
      return MimeTypeEnum_MimeType.UNKNOWN;
    case 2:
    case "IMAGE_JPEG":
      return MimeTypeEnum_MimeType.IMAGE_JPEG;
    case 3:
    case "IMAGE_GIF":
      return MimeTypeEnum_MimeType.IMAGE_GIF;
    case 4:
    case "IMAGE_PNG":
      return MimeTypeEnum_MimeType.IMAGE_PNG;
    case 5:
    case "FLASH":
      return MimeTypeEnum_MimeType.FLASH;
    case 6:
    case "TEXT_HTML":
      return MimeTypeEnum_MimeType.TEXT_HTML;
    case 7:
    case "PDF":
      return MimeTypeEnum_MimeType.PDF;
    case 8:
    case "MSWORD":
      return MimeTypeEnum_MimeType.MSWORD;
    case 9:
    case "MSEXCEL":
      return MimeTypeEnum_MimeType.MSEXCEL;
    case 10:
    case "RTF":
      return MimeTypeEnum_MimeType.RTF;
    case 11:
    case "AUDIO_WAV":
      return MimeTypeEnum_MimeType.AUDIO_WAV;
    case 12:
    case "AUDIO_MP3":
      return MimeTypeEnum_MimeType.AUDIO_MP3;
    case 13:
    case "HTML5_AD_ZIP":
      return MimeTypeEnum_MimeType.HTML5_AD_ZIP;
    case -1:
    case "UNRECOGNIZED":
    default:
      return MimeTypeEnum_MimeType.UNRECOGNIZED;
  }
}

export function mimeTypeEnum_MimeTypeToJSON(object: MimeTypeEnum_MimeType): string {
  switch (object) {
    case MimeTypeEnum_MimeType.UNSPECIFIED:
      return "UNSPECIFIED";
    case MimeTypeEnum_MimeType.UNKNOWN:
      return "UNKNOWN";
    case MimeTypeEnum_MimeType.IMAGE_JPEG:
      return "IMAGE_JPEG";
    case MimeTypeEnum_MimeType.IMAGE_GIF:
      return "IMAGE_GIF";
    case MimeTypeEnum_MimeType.IMAGE_PNG:
      return "IMAGE_PNG";
    case MimeTypeEnum_MimeType.FLASH:
      return "FLASH";
    case MimeTypeEnum_MimeType.TEXT_HTML:
      return "TEXT_HTML";
    case MimeTypeEnum_MimeType.PDF:
      return "PDF";
    case MimeTypeEnum_MimeType.MSWORD:
      return "MSWORD";
    case MimeTypeEnum_MimeType.MSEXCEL:
      return "MSEXCEL";
    case MimeTypeEnum_MimeType.RTF:
      return "RTF";
    case MimeTypeEnum_MimeType.AUDIO_WAV:
      return "AUDIO_WAV";
    case MimeTypeEnum_MimeType.AUDIO_MP3:
      return "AUDIO_MP3";
    case MimeTypeEnum_MimeType.HTML5_AD_ZIP:
      return "HTML5_AD_ZIP";
    case MimeTypeEnum_MimeType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseMimeTypeEnum(): MimeTypeEnum {
  return {};
}

export const MimeTypeEnum: MessageFns<MimeTypeEnum> = {
  encode(_: MimeTypeEnum, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MimeTypeEnum {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMimeTypeEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MimeTypeEnum {
    return {};
  },

  toJSON(_: MimeTypeEnum): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<MimeTypeEnum>): MimeTypeEnum {
    return MimeTypeEnum.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<MimeTypeEnum>): MimeTypeEnum {
    const message = createBaseMimeTypeEnum();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
