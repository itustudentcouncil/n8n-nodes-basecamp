// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v16/errors/feed_item_error.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.googleads.v16.errors";

/** Container for enum describing possible feed item errors. */
export interface FeedItemErrorEnum {
}

/** Enum describing possible feed item errors. */
export enum FeedItemErrorEnum_FeedItemError {
  /** UNSPECIFIED - Enum unspecified. */
  UNSPECIFIED = 0,
  /** UNKNOWN - The received error code is not known in this version. */
  UNKNOWN = 1,
  /** CANNOT_CONVERT_ATTRIBUTE_VALUE_FROM_STRING - Cannot convert the feed attribute value from string to its real type. */
  CANNOT_CONVERT_ATTRIBUTE_VALUE_FROM_STRING = 2,
  /** CANNOT_OPERATE_ON_REMOVED_FEED_ITEM - Cannot operate on removed feed item. */
  CANNOT_OPERATE_ON_REMOVED_FEED_ITEM = 3,
  /** DATE_TIME_MUST_BE_IN_ACCOUNT_TIME_ZONE - Date time zone does not match the account's time zone. */
  DATE_TIME_MUST_BE_IN_ACCOUNT_TIME_ZONE = 4,
  /** KEY_ATTRIBUTES_NOT_FOUND - Feed item with the key attributes could not be found. */
  KEY_ATTRIBUTES_NOT_FOUND = 5,
  /** INVALID_URL - Url feed attribute value is not valid. */
  INVALID_URL = 6,
  /** MISSING_KEY_ATTRIBUTES - Some key attributes are missing. */
  MISSING_KEY_ATTRIBUTES = 7,
  /** KEY_ATTRIBUTES_NOT_UNIQUE - Feed item has same key attributes as another feed item. */
  KEY_ATTRIBUTES_NOT_UNIQUE = 8,
  /** CANNOT_MODIFY_KEY_ATTRIBUTE_VALUE - Cannot modify key attributes on an existing feed item. */
  CANNOT_MODIFY_KEY_ATTRIBUTE_VALUE = 9,
  /** SIZE_TOO_LARGE_FOR_MULTI_VALUE_ATTRIBUTE - The feed attribute value is too large. */
  SIZE_TOO_LARGE_FOR_MULTI_VALUE_ATTRIBUTE = 10,
  /** LEGACY_FEED_TYPE_READ_ONLY - Feed is read only. */
  LEGACY_FEED_TYPE_READ_ONLY = 11,
  UNRECOGNIZED = -1,
}

export function feedItemErrorEnum_FeedItemErrorFromJSON(object: any): FeedItemErrorEnum_FeedItemError {
  switch (object) {
    case 0:
    case "UNSPECIFIED":
      return FeedItemErrorEnum_FeedItemError.UNSPECIFIED;
    case 1:
    case "UNKNOWN":
      return FeedItemErrorEnum_FeedItemError.UNKNOWN;
    case 2:
    case "CANNOT_CONVERT_ATTRIBUTE_VALUE_FROM_STRING":
      return FeedItemErrorEnum_FeedItemError.CANNOT_CONVERT_ATTRIBUTE_VALUE_FROM_STRING;
    case 3:
    case "CANNOT_OPERATE_ON_REMOVED_FEED_ITEM":
      return FeedItemErrorEnum_FeedItemError.CANNOT_OPERATE_ON_REMOVED_FEED_ITEM;
    case 4:
    case "DATE_TIME_MUST_BE_IN_ACCOUNT_TIME_ZONE":
      return FeedItemErrorEnum_FeedItemError.DATE_TIME_MUST_BE_IN_ACCOUNT_TIME_ZONE;
    case 5:
    case "KEY_ATTRIBUTES_NOT_FOUND":
      return FeedItemErrorEnum_FeedItemError.KEY_ATTRIBUTES_NOT_FOUND;
    case 6:
    case "INVALID_URL":
      return FeedItemErrorEnum_FeedItemError.INVALID_URL;
    case 7:
    case "MISSING_KEY_ATTRIBUTES":
      return FeedItemErrorEnum_FeedItemError.MISSING_KEY_ATTRIBUTES;
    case 8:
    case "KEY_ATTRIBUTES_NOT_UNIQUE":
      return FeedItemErrorEnum_FeedItemError.KEY_ATTRIBUTES_NOT_UNIQUE;
    case 9:
    case "CANNOT_MODIFY_KEY_ATTRIBUTE_VALUE":
      return FeedItemErrorEnum_FeedItemError.CANNOT_MODIFY_KEY_ATTRIBUTE_VALUE;
    case 10:
    case "SIZE_TOO_LARGE_FOR_MULTI_VALUE_ATTRIBUTE":
      return FeedItemErrorEnum_FeedItemError.SIZE_TOO_LARGE_FOR_MULTI_VALUE_ATTRIBUTE;
    case 11:
    case "LEGACY_FEED_TYPE_READ_ONLY":
      return FeedItemErrorEnum_FeedItemError.LEGACY_FEED_TYPE_READ_ONLY;
    case -1:
    case "UNRECOGNIZED":
    default:
      return FeedItemErrorEnum_FeedItemError.UNRECOGNIZED;
  }
}

export function feedItemErrorEnum_FeedItemErrorToJSON(object: FeedItemErrorEnum_FeedItemError): string {
  switch (object) {
    case FeedItemErrorEnum_FeedItemError.UNSPECIFIED:
      return "UNSPECIFIED";
    case FeedItemErrorEnum_FeedItemError.UNKNOWN:
      return "UNKNOWN";
    case FeedItemErrorEnum_FeedItemError.CANNOT_CONVERT_ATTRIBUTE_VALUE_FROM_STRING:
      return "CANNOT_CONVERT_ATTRIBUTE_VALUE_FROM_STRING";
    case FeedItemErrorEnum_FeedItemError.CANNOT_OPERATE_ON_REMOVED_FEED_ITEM:
      return "CANNOT_OPERATE_ON_REMOVED_FEED_ITEM";
    case FeedItemErrorEnum_FeedItemError.DATE_TIME_MUST_BE_IN_ACCOUNT_TIME_ZONE:
      return "DATE_TIME_MUST_BE_IN_ACCOUNT_TIME_ZONE";
    case FeedItemErrorEnum_FeedItemError.KEY_ATTRIBUTES_NOT_FOUND:
      return "KEY_ATTRIBUTES_NOT_FOUND";
    case FeedItemErrorEnum_FeedItemError.INVALID_URL:
      return "INVALID_URL";
    case FeedItemErrorEnum_FeedItemError.MISSING_KEY_ATTRIBUTES:
      return "MISSING_KEY_ATTRIBUTES";
    case FeedItemErrorEnum_FeedItemError.KEY_ATTRIBUTES_NOT_UNIQUE:
      return "KEY_ATTRIBUTES_NOT_UNIQUE";
    case FeedItemErrorEnum_FeedItemError.CANNOT_MODIFY_KEY_ATTRIBUTE_VALUE:
      return "CANNOT_MODIFY_KEY_ATTRIBUTE_VALUE";
    case FeedItemErrorEnum_FeedItemError.SIZE_TOO_LARGE_FOR_MULTI_VALUE_ATTRIBUTE:
      return "SIZE_TOO_LARGE_FOR_MULTI_VALUE_ATTRIBUTE";
    case FeedItemErrorEnum_FeedItemError.LEGACY_FEED_TYPE_READ_ONLY:
      return "LEGACY_FEED_TYPE_READ_ONLY";
    case FeedItemErrorEnum_FeedItemError.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseFeedItemErrorEnum(): FeedItemErrorEnum {
  return {};
}

export const FeedItemErrorEnum: MessageFns<FeedItemErrorEnum> = {
  encode(_: FeedItemErrorEnum, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FeedItemErrorEnum {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFeedItemErrorEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): FeedItemErrorEnum {
    return {};
  },

  toJSON(_: FeedItemErrorEnum): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<FeedItemErrorEnum>): FeedItemErrorEnum {
    return FeedItemErrorEnum.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<FeedItemErrorEnum>): FeedItemErrorEnum {
    const message = createBaseFeedItemErrorEnum();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
