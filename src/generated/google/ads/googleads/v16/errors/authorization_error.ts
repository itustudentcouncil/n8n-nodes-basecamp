// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v16/errors/authorization_error.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.googleads.v16.errors";

/** Container for enum describing possible authorization errors. */
export interface AuthorizationErrorEnum {
}

/** Enum describing possible authorization errors. */
export enum AuthorizationErrorEnum_AuthorizationError {
  /** UNSPECIFIED - Enum unspecified. */
  UNSPECIFIED = 0,
  /** UNKNOWN - The received error code is not known in this version. */
  UNKNOWN = 1,
  /**
   * USER_PERMISSION_DENIED - User doesn't have permission to access customer. Note: If you're
   * accessing a client customer, the manager's customer ID must be set in the
   * `login-customer-id` header. Learn more at
   * https://developers.google.com/google-ads/api/docs/concepts/call-structure#cid
   */
  USER_PERMISSION_DENIED = 2,
  /** DEVELOPER_TOKEN_NOT_ON_ALLOWLIST - The developer token is not on the allow-list. */
  DEVELOPER_TOKEN_NOT_ON_ALLOWLIST = 13,
  /** DEVELOPER_TOKEN_PROHIBITED - The developer token is not allowed with the project sent in the request. */
  DEVELOPER_TOKEN_PROHIBITED = 4,
  /**
   * PROJECT_DISABLED - The Google Cloud project sent in the request does not have permission to
   * access the api.
   */
  PROJECT_DISABLED = 5,
  /** AUTHORIZATION_ERROR - Authorization of the client failed. */
  AUTHORIZATION_ERROR = 6,
  /**
   * ACTION_NOT_PERMITTED - The user does not have permission to perform this action
   * (for example, ADD, UPDATE, REMOVE) on the resource or call a method.
   */
  ACTION_NOT_PERMITTED = 7,
  /** INCOMPLETE_SIGNUP - Signup not complete. */
  INCOMPLETE_SIGNUP = 8,
  /**
   * CUSTOMER_NOT_ENABLED - The customer account can't be accessed because it is not yet enabled or
   * has been deactivated.
   */
  CUSTOMER_NOT_ENABLED = 24,
  /**
   * MISSING_TOS - The developer must sign the terms of service. They can be found here:
   * ads.google.com/aw/apicenter
   */
  MISSING_TOS = 9,
  /**
   * DEVELOPER_TOKEN_NOT_APPROVED - The developer token is only approved for use with test accounts. To
   * access non-test accounts, apply for Basic or Standard access.
   */
  DEVELOPER_TOKEN_NOT_APPROVED = 10,
  /**
   * INVALID_LOGIN_CUSTOMER_ID_SERVING_CUSTOMER_ID_COMBINATION - The login customer specified does not have access to the account
   * specified, so the request is invalid.
   */
  INVALID_LOGIN_CUSTOMER_ID_SERVING_CUSTOMER_ID_COMBINATION = 11,
  /** SERVICE_ACCESS_DENIED - The developer specified does not have access to the service. */
  SERVICE_ACCESS_DENIED = 12,
  /**
   * ACCESS_DENIED_FOR_ACCOUNT_TYPE - The customer (or login customer) isn't in Google Ads. It belongs to
   * another ads system.
   */
  ACCESS_DENIED_FOR_ACCOUNT_TYPE = 25,
  /** METRIC_ACCESS_DENIED - The developer does not have access to the metrics queried. */
  METRIC_ACCESS_DENIED = 26,
  /** CLOUD_PROJECT_NOT_UNDER_ORGANIZATION - The Google Cloud project is not under the required organization. */
  CLOUD_PROJECT_NOT_UNDER_ORGANIZATION = 27,
  /**
   * ACTION_NOT_PERMITTED_FOR_SUSPENDED_ACCOUNT - The user does not have permission to perform this action on the resource
   * or method because the Google Ads account is suspended.
   */
  ACTION_NOT_PERMITTED_FOR_SUSPENDED_ACCOUNT = 28,
  UNRECOGNIZED = -1,
}

export function authorizationErrorEnum_AuthorizationErrorFromJSON(
  object: any,
): AuthorizationErrorEnum_AuthorizationError {
  switch (object) {
    case 0:
    case "UNSPECIFIED":
      return AuthorizationErrorEnum_AuthorizationError.UNSPECIFIED;
    case 1:
    case "UNKNOWN":
      return AuthorizationErrorEnum_AuthorizationError.UNKNOWN;
    case 2:
    case "USER_PERMISSION_DENIED":
      return AuthorizationErrorEnum_AuthorizationError.USER_PERMISSION_DENIED;
    case 13:
    case "DEVELOPER_TOKEN_NOT_ON_ALLOWLIST":
      return AuthorizationErrorEnum_AuthorizationError.DEVELOPER_TOKEN_NOT_ON_ALLOWLIST;
    case 4:
    case "DEVELOPER_TOKEN_PROHIBITED":
      return AuthorizationErrorEnum_AuthorizationError.DEVELOPER_TOKEN_PROHIBITED;
    case 5:
    case "PROJECT_DISABLED":
      return AuthorizationErrorEnum_AuthorizationError.PROJECT_DISABLED;
    case 6:
    case "AUTHORIZATION_ERROR":
      return AuthorizationErrorEnum_AuthorizationError.AUTHORIZATION_ERROR;
    case 7:
    case "ACTION_NOT_PERMITTED":
      return AuthorizationErrorEnum_AuthorizationError.ACTION_NOT_PERMITTED;
    case 8:
    case "INCOMPLETE_SIGNUP":
      return AuthorizationErrorEnum_AuthorizationError.INCOMPLETE_SIGNUP;
    case 24:
    case "CUSTOMER_NOT_ENABLED":
      return AuthorizationErrorEnum_AuthorizationError.CUSTOMER_NOT_ENABLED;
    case 9:
    case "MISSING_TOS":
      return AuthorizationErrorEnum_AuthorizationError.MISSING_TOS;
    case 10:
    case "DEVELOPER_TOKEN_NOT_APPROVED":
      return AuthorizationErrorEnum_AuthorizationError.DEVELOPER_TOKEN_NOT_APPROVED;
    case 11:
    case "INVALID_LOGIN_CUSTOMER_ID_SERVING_CUSTOMER_ID_COMBINATION":
      return AuthorizationErrorEnum_AuthorizationError.INVALID_LOGIN_CUSTOMER_ID_SERVING_CUSTOMER_ID_COMBINATION;
    case 12:
    case "SERVICE_ACCESS_DENIED":
      return AuthorizationErrorEnum_AuthorizationError.SERVICE_ACCESS_DENIED;
    case 25:
    case "ACCESS_DENIED_FOR_ACCOUNT_TYPE":
      return AuthorizationErrorEnum_AuthorizationError.ACCESS_DENIED_FOR_ACCOUNT_TYPE;
    case 26:
    case "METRIC_ACCESS_DENIED":
      return AuthorizationErrorEnum_AuthorizationError.METRIC_ACCESS_DENIED;
    case 27:
    case "CLOUD_PROJECT_NOT_UNDER_ORGANIZATION":
      return AuthorizationErrorEnum_AuthorizationError.CLOUD_PROJECT_NOT_UNDER_ORGANIZATION;
    case 28:
    case "ACTION_NOT_PERMITTED_FOR_SUSPENDED_ACCOUNT":
      return AuthorizationErrorEnum_AuthorizationError.ACTION_NOT_PERMITTED_FOR_SUSPENDED_ACCOUNT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AuthorizationErrorEnum_AuthorizationError.UNRECOGNIZED;
  }
}

export function authorizationErrorEnum_AuthorizationErrorToJSON(
  object: AuthorizationErrorEnum_AuthorizationError,
): string {
  switch (object) {
    case AuthorizationErrorEnum_AuthorizationError.UNSPECIFIED:
      return "UNSPECIFIED";
    case AuthorizationErrorEnum_AuthorizationError.UNKNOWN:
      return "UNKNOWN";
    case AuthorizationErrorEnum_AuthorizationError.USER_PERMISSION_DENIED:
      return "USER_PERMISSION_DENIED";
    case AuthorizationErrorEnum_AuthorizationError.DEVELOPER_TOKEN_NOT_ON_ALLOWLIST:
      return "DEVELOPER_TOKEN_NOT_ON_ALLOWLIST";
    case AuthorizationErrorEnum_AuthorizationError.DEVELOPER_TOKEN_PROHIBITED:
      return "DEVELOPER_TOKEN_PROHIBITED";
    case AuthorizationErrorEnum_AuthorizationError.PROJECT_DISABLED:
      return "PROJECT_DISABLED";
    case AuthorizationErrorEnum_AuthorizationError.AUTHORIZATION_ERROR:
      return "AUTHORIZATION_ERROR";
    case AuthorizationErrorEnum_AuthorizationError.ACTION_NOT_PERMITTED:
      return "ACTION_NOT_PERMITTED";
    case AuthorizationErrorEnum_AuthorizationError.INCOMPLETE_SIGNUP:
      return "INCOMPLETE_SIGNUP";
    case AuthorizationErrorEnum_AuthorizationError.CUSTOMER_NOT_ENABLED:
      return "CUSTOMER_NOT_ENABLED";
    case AuthorizationErrorEnum_AuthorizationError.MISSING_TOS:
      return "MISSING_TOS";
    case AuthorizationErrorEnum_AuthorizationError.DEVELOPER_TOKEN_NOT_APPROVED:
      return "DEVELOPER_TOKEN_NOT_APPROVED";
    case AuthorizationErrorEnum_AuthorizationError.INVALID_LOGIN_CUSTOMER_ID_SERVING_CUSTOMER_ID_COMBINATION:
      return "INVALID_LOGIN_CUSTOMER_ID_SERVING_CUSTOMER_ID_COMBINATION";
    case AuthorizationErrorEnum_AuthorizationError.SERVICE_ACCESS_DENIED:
      return "SERVICE_ACCESS_DENIED";
    case AuthorizationErrorEnum_AuthorizationError.ACCESS_DENIED_FOR_ACCOUNT_TYPE:
      return "ACCESS_DENIED_FOR_ACCOUNT_TYPE";
    case AuthorizationErrorEnum_AuthorizationError.METRIC_ACCESS_DENIED:
      return "METRIC_ACCESS_DENIED";
    case AuthorizationErrorEnum_AuthorizationError.CLOUD_PROJECT_NOT_UNDER_ORGANIZATION:
      return "CLOUD_PROJECT_NOT_UNDER_ORGANIZATION";
    case AuthorizationErrorEnum_AuthorizationError.ACTION_NOT_PERMITTED_FOR_SUSPENDED_ACCOUNT:
      return "ACTION_NOT_PERMITTED_FOR_SUSPENDED_ACCOUNT";
    case AuthorizationErrorEnum_AuthorizationError.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseAuthorizationErrorEnum(): AuthorizationErrorEnum {
  return {};
}

export const AuthorizationErrorEnum: MessageFns<AuthorizationErrorEnum> = {
  encode(_: AuthorizationErrorEnum, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AuthorizationErrorEnum {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAuthorizationErrorEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): AuthorizationErrorEnum {
    return {};
  },

  toJSON(_: AuthorizationErrorEnum): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<AuthorizationErrorEnum>): AuthorizationErrorEnum {
    return AuthorizationErrorEnum.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<AuthorizationErrorEnum>): AuthorizationErrorEnum {
    const message = createBaseAuthorizationErrorEnum();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
