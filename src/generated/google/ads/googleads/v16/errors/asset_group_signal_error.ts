// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v16/errors/asset_group_signal_error.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.googleads.v16.errors";

/** Container for enum describing possible asset group signal errors. */
export interface AssetGroupSignalErrorEnum {
}

/** Enum describing possible asset group signal errors. */
export enum AssetGroupSignalErrorEnum_AssetGroupSignalError {
  /** UNSPECIFIED - Enum unspecified. */
  UNSPECIFIED = 0,
  /** UNKNOWN - The received error code is not known in this version. */
  UNKNOWN = 1,
  /**
   * TOO_MANY_WORDS - The number of words in the Search Theme signal exceed the allowed
   * maximum. You can add up to 10 words in a keyword. See
   * https://support.google.com/google-ads/answer/7476658 for details.
   */
  TOO_MANY_WORDS = 2,
  /**
   * SEARCH_THEME_POLICY_VIOLATION - The search theme requested to be added violates certain policy.
   * See https://support.google.com/adspolicy/answer/6008942.
   */
  SEARCH_THEME_POLICY_VIOLATION = 3,
  /**
   * AUDIENCE_WITH_WRONG_ASSET_GROUP_ID - The asset group referenced by the asset group signal does not match the
   * asset group referenced by the audience being used in the asset group
   * signal.
   */
  AUDIENCE_WITH_WRONG_ASSET_GROUP_ID = 4,
  UNRECOGNIZED = -1,
}

export function assetGroupSignalErrorEnum_AssetGroupSignalErrorFromJSON(
  object: any,
): AssetGroupSignalErrorEnum_AssetGroupSignalError {
  switch (object) {
    case 0:
    case "UNSPECIFIED":
      return AssetGroupSignalErrorEnum_AssetGroupSignalError.UNSPECIFIED;
    case 1:
    case "UNKNOWN":
      return AssetGroupSignalErrorEnum_AssetGroupSignalError.UNKNOWN;
    case 2:
    case "TOO_MANY_WORDS":
      return AssetGroupSignalErrorEnum_AssetGroupSignalError.TOO_MANY_WORDS;
    case 3:
    case "SEARCH_THEME_POLICY_VIOLATION":
      return AssetGroupSignalErrorEnum_AssetGroupSignalError.SEARCH_THEME_POLICY_VIOLATION;
    case 4:
    case "AUDIENCE_WITH_WRONG_ASSET_GROUP_ID":
      return AssetGroupSignalErrorEnum_AssetGroupSignalError.AUDIENCE_WITH_WRONG_ASSET_GROUP_ID;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AssetGroupSignalErrorEnum_AssetGroupSignalError.UNRECOGNIZED;
  }
}

export function assetGroupSignalErrorEnum_AssetGroupSignalErrorToJSON(
  object: AssetGroupSignalErrorEnum_AssetGroupSignalError,
): string {
  switch (object) {
    case AssetGroupSignalErrorEnum_AssetGroupSignalError.UNSPECIFIED:
      return "UNSPECIFIED";
    case AssetGroupSignalErrorEnum_AssetGroupSignalError.UNKNOWN:
      return "UNKNOWN";
    case AssetGroupSignalErrorEnum_AssetGroupSignalError.TOO_MANY_WORDS:
      return "TOO_MANY_WORDS";
    case AssetGroupSignalErrorEnum_AssetGroupSignalError.SEARCH_THEME_POLICY_VIOLATION:
      return "SEARCH_THEME_POLICY_VIOLATION";
    case AssetGroupSignalErrorEnum_AssetGroupSignalError.AUDIENCE_WITH_WRONG_ASSET_GROUP_ID:
      return "AUDIENCE_WITH_WRONG_ASSET_GROUP_ID";
    case AssetGroupSignalErrorEnum_AssetGroupSignalError.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseAssetGroupSignalErrorEnum(): AssetGroupSignalErrorEnum {
  return {};
}

export const AssetGroupSignalErrorEnum: MessageFns<AssetGroupSignalErrorEnum> = {
  encode(_: AssetGroupSignalErrorEnum, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AssetGroupSignalErrorEnum {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAssetGroupSignalErrorEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): AssetGroupSignalErrorEnum {
    return {};
  },

  toJSON(_: AssetGroupSignalErrorEnum): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<AssetGroupSignalErrorEnum>): AssetGroupSignalErrorEnum {
    return AssetGroupSignalErrorEnum.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<AssetGroupSignalErrorEnum>): AssetGroupSignalErrorEnum {
    const message = createBaseAssetGroupSignalErrorEnum();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
