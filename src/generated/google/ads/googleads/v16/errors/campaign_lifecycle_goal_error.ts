// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v16/errors/campaign_lifecycle_goal_error.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.googleads.v16.errors";

/** Container for enum describing possible campaign lifecycle goal errors. */
export interface CampaignLifecycleGoalErrorEnum {
}

/** Enum describing possible campaign lifecycle goal errors. */
export enum CampaignLifecycleGoalErrorEnum_CampaignLifecycleGoalError {
  /** UNSPECIFIED - Enum unspecified. */
  UNSPECIFIED = 0,
  /** UNKNOWN - The received error code is not known in this version. */
  UNKNOWN = 1,
  /** CAMPAIGN_MISSING - Campaign is not specified. */
  CAMPAIGN_MISSING = 2,
  /** INVALID_CAMPAIGN - Cannot find the specified campaign. */
  INVALID_CAMPAIGN = 3,
  /** CUSTOMER_ACQUISITION_INVALID_OPTIMIZATION_MODE - Optimization mode is unspecified or invalid. */
  CUSTOMER_ACQUISITION_INVALID_OPTIMIZATION_MODE = 4,
  /**
   * INCOMPATIBLE_BIDDING_STRATEGY - The configured lifecycle goal setting is not compatible with the bidding
   * strategy the campaign is using. Specifically, BID_HIGHER_FOR_NEW_CUSTOMER
   * requires conversion-value based bidding strategy type such as
   * MAXIMIZE_CONVERSION_VALUE.
   */
  INCOMPATIBLE_BIDDING_STRATEGY = 5,
  /**
   * MISSING_PURCHASE_GOAL - Lifecycle goals require the campaign to optimize towards purchase
   * conversion goal.
   */
  MISSING_PURCHASE_GOAL = 6,
  /**
   * CUSTOMER_ACQUISITION_INVALID_HIGH_LIFETIME_VALUE - CampaignLifecycleGoal.customer_acquisition_goal_settings.value_settings.high_lifetime_value
   * is invalid or not allowed, such as when the specified value is smaller
   * than 0.01, when the optimization mode is not BID_HIGHER_FOR_NEW_CUSTOMER,
   * or when
   * CampaignLifecycleGoal.customer_acquisition_goal_settings.value_settings.high_lifetime_value
   * is specified smaller than/without
   * CampaignLifecycleGoal.customer_acquisition_goal_settings.value_settings.value.
   */
  CUSTOMER_ACQUISITION_INVALID_HIGH_LIFETIME_VALUE = 7,
  /** CUSTOMER_ACQUISITION_UNSUPPORTED_CAMPAIGN_TYPE - Customer acquisition goal is not supported on this campaign type. */
  CUSTOMER_ACQUISITION_UNSUPPORTED_CAMPAIGN_TYPE = 8,
  /**
   * CUSTOMER_ACQUISITION_INVALID_VALUE - CampaignLifecycleGoal.customer_acquisition_goal_settings.value_settings.value
   * is invalid or not allowed, such as when the specified value is smaller
   * than 0.01, or when the optimization mode is not
   * BID_HIGHER_FOR_NEW_CUSTOMER.
   */
  CUSTOMER_ACQUISITION_INVALID_VALUE = 9,
  /**
   * CUSTOMER_ACQUISITION_VALUE_MISSING - To use BID_HIGHER_FOR_NEW_CUSTOMER mode, either
   * CampaignLifecycleGoal.customer_acquisition_goal_settings.value_settings.value
   * or CustomerLifecycleGoal.customer_acquisition_goal_value_settings.value
   * must have been specified. If a manager account is managing your account's
   * conversion tracking, then only the CustomerLifecycleGoal of that manager
   * account is used.
   */
  CUSTOMER_ACQUISITION_VALUE_MISSING = 10,
  /**
   * CUSTOMER_ACQUISITION_MISSING_EXISTING_CUSTOMER_DEFINITION - In order for a campaign to adopt the customer acquisition goal,
   * CustomerLifecycleGoal.lifecycle_goal_customer_definition_settings.existing_user_lists
   * must include active and accessible userlist with more than 1000 members
   * in the Search/Youtube network. If a manager account is managing your
   * account's conversion tracking, then only the CustomerLifecycleGoal of
   * that manager account is used. Also make sure that the manager account
   * shares audience segments with sub-accounts with continuous audience
   * sharing.
   */
  CUSTOMER_ACQUISITION_MISSING_EXISTING_CUSTOMER_DEFINITION = 11,
  /**
   * CUSTOMER_ACQUISITION_MISSING_HIGH_VALUE_CUSTOMER_DEFINITION - In order for a campaign to adopt the customer acquisition goal with high
   * lifetime value optimization,
   * CustomerLifecycleGoal.lifecycle_goal_customer_definition_settings.high_lifetime_value_user_lists
   * must include active and accessible userlist with more than 1000 members
   * in the Search/Youtube network. If a manager account is managing your
   * account's conversion tracking, then only the CustomerLifecycleGoal of
   * that manager account is used. Also make sure that the manager account
   * shares audience segments with sub-accounts using continuous audience
   * sharing.
   */
  CUSTOMER_ACQUISITION_MISSING_HIGH_VALUE_CUSTOMER_DEFINITION = 12,
  UNRECOGNIZED = -1,
}

export function campaignLifecycleGoalErrorEnum_CampaignLifecycleGoalErrorFromJSON(
  object: any,
): CampaignLifecycleGoalErrorEnum_CampaignLifecycleGoalError {
  switch (object) {
    case 0:
    case "UNSPECIFIED":
      return CampaignLifecycleGoalErrorEnum_CampaignLifecycleGoalError.UNSPECIFIED;
    case 1:
    case "UNKNOWN":
      return CampaignLifecycleGoalErrorEnum_CampaignLifecycleGoalError.UNKNOWN;
    case 2:
    case "CAMPAIGN_MISSING":
      return CampaignLifecycleGoalErrorEnum_CampaignLifecycleGoalError.CAMPAIGN_MISSING;
    case 3:
    case "INVALID_CAMPAIGN":
      return CampaignLifecycleGoalErrorEnum_CampaignLifecycleGoalError.INVALID_CAMPAIGN;
    case 4:
    case "CUSTOMER_ACQUISITION_INVALID_OPTIMIZATION_MODE":
      return CampaignLifecycleGoalErrorEnum_CampaignLifecycleGoalError.CUSTOMER_ACQUISITION_INVALID_OPTIMIZATION_MODE;
    case 5:
    case "INCOMPATIBLE_BIDDING_STRATEGY":
      return CampaignLifecycleGoalErrorEnum_CampaignLifecycleGoalError.INCOMPATIBLE_BIDDING_STRATEGY;
    case 6:
    case "MISSING_PURCHASE_GOAL":
      return CampaignLifecycleGoalErrorEnum_CampaignLifecycleGoalError.MISSING_PURCHASE_GOAL;
    case 7:
    case "CUSTOMER_ACQUISITION_INVALID_HIGH_LIFETIME_VALUE":
      return CampaignLifecycleGoalErrorEnum_CampaignLifecycleGoalError.CUSTOMER_ACQUISITION_INVALID_HIGH_LIFETIME_VALUE;
    case 8:
    case "CUSTOMER_ACQUISITION_UNSUPPORTED_CAMPAIGN_TYPE":
      return CampaignLifecycleGoalErrorEnum_CampaignLifecycleGoalError.CUSTOMER_ACQUISITION_UNSUPPORTED_CAMPAIGN_TYPE;
    case 9:
    case "CUSTOMER_ACQUISITION_INVALID_VALUE":
      return CampaignLifecycleGoalErrorEnum_CampaignLifecycleGoalError.CUSTOMER_ACQUISITION_INVALID_VALUE;
    case 10:
    case "CUSTOMER_ACQUISITION_VALUE_MISSING":
      return CampaignLifecycleGoalErrorEnum_CampaignLifecycleGoalError.CUSTOMER_ACQUISITION_VALUE_MISSING;
    case 11:
    case "CUSTOMER_ACQUISITION_MISSING_EXISTING_CUSTOMER_DEFINITION":
      return CampaignLifecycleGoalErrorEnum_CampaignLifecycleGoalError
        .CUSTOMER_ACQUISITION_MISSING_EXISTING_CUSTOMER_DEFINITION;
    case 12:
    case "CUSTOMER_ACQUISITION_MISSING_HIGH_VALUE_CUSTOMER_DEFINITION":
      return CampaignLifecycleGoalErrorEnum_CampaignLifecycleGoalError
        .CUSTOMER_ACQUISITION_MISSING_HIGH_VALUE_CUSTOMER_DEFINITION;
    case -1:
    case "UNRECOGNIZED":
    default:
      return CampaignLifecycleGoalErrorEnum_CampaignLifecycleGoalError.UNRECOGNIZED;
  }
}

export function campaignLifecycleGoalErrorEnum_CampaignLifecycleGoalErrorToJSON(
  object: CampaignLifecycleGoalErrorEnum_CampaignLifecycleGoalError,
): string {
  switch (object) {
    case CampaignLifecycleGoalErrorEnum_CampaignLifecycleGoalError.UNSPECIFIED:
      return "UNSPECIFIED";
    case CampaignLifecycleGoalErrorEnum_CampaignLifecycleGoalError.UNKNOWN:
      return "UNKNOWN";
    case CampaignLifecycleGoalErrorEnum_CampaignLifecycleGoalError.CAMPAIGN_MISSING:
      return "CAMPAIGN_MISSING";
    case CampaignLifecycleGoalErrorEnum_CampaignLifecycleGoalError.INVALID_CAMPAIGN:
      return "INVALID_CAMPAIGN";
    case CampaignLifecycleGoalErrorEnum_CampaignLifecycleGoalError.CUSTOMER_ACQUISITION_INVALID_OPTIMIZATION_MODE:
      return "CUSTOMER_ACQUISITION_INVALID_OPTIMIZATION_MODE";
    case CampaignLifecycleGoalErrorEnum_CampaignLifecycleGoalError.INCOMPATIBLE_BIDDING_STRATEGY:
      return "INCOMPATIBLE_BIDDING_STRATEGY";
    case CampaignLifecycleGoalErrorEnum_CampaignLifecycleGoalError.MISSING_PURCHASE_GOAL:
      return "MISSING_PURCHASE_GOAL";
    case CampaignLifecycleGoalErrorEnum_CampaignLifecycleGoalError.CUSTOMER_ACQUISITION_INVALID_HIGH_LIFETIME_VALUE:
      return "CUSTOMER_ACQUISITION_INVALID_HIGH_LIFETIME_VALUE";
    case CampaignLifecycleGoalErrorEnum_CampaignLifecycleGoalError.CUSTOMER_ACQUISITION_UNSUPPORTED_CAMPAIGN_TYPE:
      return "CUSTOMER_ACQUISITION_UNSUPPORTED_CAMPAIGN_TYPE";
    case CampaignLifecycleGoalErrorEnum_CampaignLifecycleGoalError.CUSTOMER_ACQUISITION_INVALID_VALUE:
      return "CUSTOMER_ACQUISITION_INVALID_VALUE";
    case CampaignLifecycleGoalErrorEnum_CampaignLifecycleGoalError.CUSTOMER_ACQUISITION_VALUE_MISSING:
      return "CUSTOMER_ACQUISITION_VALUE_MISSING";
    case CampaignLifecycleGoalErrorEnum_CampaignLifecycleGoalError
      .CUSTOMER_ACQUISITION_MISSING_EXISTING_CUSTOMER_DEFINITION:
      return "CUSTOMER_ACQUISITION_MISSING_EXISTING_CUSTOMER_DEFINITION";
    case CampaignLifecycleGoalErrorEnum_CampaignLifecycleGoalError
      .CUSTOMER_ACQUISITION_MISSING_HIGH_VALUE_CUSTOMER_DEFINITION:
      return "CUSTOMER_ACQUISITION_MISSING_HIGH_VALUE_CUSTOMER_DEFINITION";
    case CampaignLifecycleGoalErrorEnum_CampaignLifecycleGoalError.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseCampaignLifecycleGoalErrorEnum(): CampaignLifecycleGoalErrorEnum {
  return {};
}

export const CampaignLifecycleGoalErrorEnum: MessageFns<CampaignLifecycleGoalErrorEnum> = {
  encode(_: CampaignLifecycleGoalErrorEnum, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CampaignLifecycleGoalErrorEnum {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCampaignLifecycleGoalErrorEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): CampaignLifecycleGoalErrorEnum {
    return {};
  },

  toJSON(_: CampaignLifecycleGoalErrorEnum): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<CampaignLifecycleGoalErrorEnum>): CampaignLifecycleGoalErrorEnum {
    return CampaignLifecycleGoalErrorEnum.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<CampaignLifecycleGoalErrorEnum>): CampaignLifecycleGoalErrorEnum {
    const message = createBaseCampaignLifecycleGoalErrorEnum();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
