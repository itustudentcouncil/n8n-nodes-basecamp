// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v16/errors/customer_client_link_error.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.googleads.v16.errors";

/** Container for enum describing possible CustomeClientLink errors. */
export interface CustomerClientLinkErrorEnum {
}

/** Enum describing possible CustomerClientLink errors. */
export enum CustomerClientLinkErrorEnum_CustomerClientLinkError {
  /** UNSPECIFIED - Enum unspecified. */
  UNSPECIFIED = 0,
  /** UNKNOWN - The received error code is not known in this version. */
  UNKNOWN = 1,
  /** CLIENT_ALREADY_INVITED_BY_THIS_MANAGER - Trying to manage a client that already in being managed by customer. */
  CLIENT_ALREADY_INVITED_BY_THIS_MANAGER = 2,
  /** CLIENT_ALREADY_MANAGED_IN_HIERARCHY - Already managed by some other manager in the hierarchy. */
  CLIENT_ALREADY_MANAGED_IN_HIERARCHY = 3,
  /** CYCLIC_LINK_NOT_ALLOWED - Attempt to create a cycle in the hierarchy. */
  CYCLIC_LINK_NOT_ALLOWED = 4,
  /** CUSTOMER_HAS_TOO_MANY_ACCOUNTS - Managed accounts has the maximum number of linked accounts. */
  CUSTOMER_HAS_TOO_MANY_ACCOUNTS = 5,
  /** CLIENT_HAS_TOO_MANY_INVITATIONS - Invitor has the maximum pending invitations. */
  CLIENT_HAS_TOO_MANY_INVITATIONS = 6,
  /** CANNOT_HIDE_OR_UNHIDE_MANAGER_ACCOUNTS - Attempt to change hidden status of a link that is not active. */
  CANNOT_HIDE_OR_UNHIDE_MANAGER_ACCOUNTS = 7,
  /** CUSTOMER_HAS_TOO_MANY_ACCOUNTS_AT_MANAGER - Parent manager account has the maximum number of linked accounts. */
  CUSTOMER_HAS_TOO_MANY_ACCOUNTS_AT_MANAGER = 8,
  /** CLIENT_HAS_TOO_MANY_MANAGERS - Client has too many managers. */
  CLIENT_HAS_TOO_MANY_MANAGERS = 9,
  UNRECOGNIZED = -1,
}

export function customerClientLinkErrorEnum_CustomerClientLinkErrorFromJSON(
  object: any,
): CustomerClientLinkErrorEnum_CustomerClientLinkError {
  switch (object) {
    case 0:
    case "UNSPECIFIED":
      return CustomerClientLinkErrorEnum_CustomerClientLinkError.UNSPECIFIED;
    case 1:
    case "UNKNOWN":
      return CustomerClientLinkErrorEnum_CustomerClientLinkError.UNKNOWN;
    case 2:
    case "CLIENT_ALREADY_INVITED_BY_THIS_MANAGER":
      return CustomerClientLinkErrorEnum_CustomerClientLinkError.CLIENT_ALREADY_INVITED_BY_THIS_MANAGER;
    case 3:
    case "CLIENT_ALREADY_MANAGED_IN_HIERARCHY":
      return CustomerClientLinkErrorEnum_CustomerClientLinkError.CLIENT_ALREADY_MANAGED_IN_HIERARCHY;
    case 4:
    case "CYCLIC_LINK_NOT_ALLOWED":
      return CustomerClientLinkErrorEnum_CustomerClientLinkError.CYCLIC_LINK_NOT_ALLOWED;
    case 5:
    case "CUSTOMER_HAS_TOO_MANY_ACCOUNTS":
      return CustomerClientLinkErrorEnum_CustomerClientLinkError.CUSTOMER_HAS_TOO_MANY_ACCOUNTS;
    case 6:
    case "CLIENT_HAS_TOO_MANY_INVITATIONS":
      return CustomerClientLinkErrorEnum_CustomerClientLinkError.CLIENT_HAS_TOO_MANY_INVITATIONS;
    case 7:
    case "CANNOT_HIDE_OR_UNHIDE_MANAGER_ACCOUNTS":
      return CustomerClientLinkErrorEnum_CustomerClientLinkError.CANNOT_HIDE_OR_UNHIDE_MANAGER_ACCOUNTS;
    case 8:
    case "CUSTOMER_HAS_TOO_MANY_ACCOUNTS_AT_MANAGER":
      return CustomerClientLinkErrorEnum_CustomerClientLinkError.CUSTOMER_HAS_TOO_MANY_ACCOUNTS_AT_MANAGER;
    case 9:
    case "CLIENT_HAS_TOO_MANY_MANAGERS":
      return CustomerClientLinkErrorEnum_CustomerClientLinkError.CLIENT_HAS_TOO_MANY_MANAGERS;
    case -1:
    case "UNRECOGNIZED":
    default:
      return CustomerClientLinkErrorEnum_CustomerClientLinkError.UNRECOGNIZED;
  }
}

export function customerClientLinkErrorEnum_CustomerClientLinkErrorToJSON(
  object: CustomerClientLinkErrorEnum_CustomerClientLinkError,
): string {
  switch (object) {
    case CustomerClientLinkErrorEnum_CustomerClientLinkError.UNSPECIFIED:
      return "UNSPECIFIED";
    case CustomerClientLinkErrorEnum_CustomerClientLinkError.UNKNOWN:
      return "UNKNOWN";
    case CustomerClientLinkErrorEnum_CustomerClientLinkError.CLIENT_ALREADY_INVITED_BY_THIS_MANAGER:
      return "CLIENT_ALREADY_INVITED_BY_THIS_MANAGER";
    case CustomerClientLinkErrorEnum_CustomerClientLinkError.CLIENT_ALREADY_MANAGED_IN_HIERARCHY:
      return "CLIENT_ALREADY_MANAGED_IN_HIERARCHY";
    case CustomerClientLinkErrorEnum_CustomerClientLinkError.CYCLIC_LINK_NOT_ALLOWED:
      return "CYCLIC_LINK_NOT_ALLOWED";
    case CustomerClientLinkErrorEnum_CustomerClientLinkError.CUSTOMER_HAS_TOO_MANY_ACCOUNTS:
      return "CUSTOMER_HAS_TOO_MANY_ACCOUNTS";
    case CustomerClientLinkErrorEnum_CustomerClientLinkError.CLIENT_HAS_TOO_MANY_INVITATIONS:
      return "CLIENT_HAS_TOO_MANY_INVITATIONS";
    case CustomerClientLinkErrorEnum_CustomerClientLinkError.CANNOT_HIDE_OR_UNHIDE_MANAGER_ACCOUNTS:
      return "CANNOT_HIDE_OR_UNHIDE_MANAGER_ACCOUNTS";
    case CustomerClientLinkErrorEnum_CustomerClientLinkError.CUSTOMER_HAS_TOO_MANY_ACCOUNTS_AT_MANAGER:
      return "CUSTOMER_HAS_TOO_MANY_ACCOUNTS_AT_MANAGER";
    case CustomerClientLinkErrorEnum_CustomerClientLinkError.CLIENT_HAS_TOO_MANY_MANAGERS:
      return "CLIENT_HAS_TOO_MANY_MANAGERS";
    case CustomerClientLinkErrorEnum_CustomerClientLinkError.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseCustomerClientLinkErrorEnum(): CustomerClientLinkErrorEnum {
  return {};
}

export const CustomerClientLinkErrorEnum: MessageFns<CustomerClientLinkErrorEnum> = {
  encode(_: CustomerClientLinkErrorEnum, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CustomerClientLinkErrorEnum {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCustomerClientLinkErrorEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): CustomerClientLinkErrorEnum {
    return {};
  },

  toJSON(_: CustomerClientLinkErrorEnum): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<CustomerClientLinkErrorEnum>): CustomerClientLinkErrorEnum {
    return CustomerClientLinkErrorEnum.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<CustomerClientLinkErrorEnum>): CustomerClientLinkErrorEnum {
    const message = createBaseCustomerClientLinkErrorEnum();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
