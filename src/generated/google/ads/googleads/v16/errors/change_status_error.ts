// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v16/errors/change_status_error.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.googleads.v16.errors";

/** Container for enum describing possible change status errors. */
export interface ChangeStatusErrorEnum {
}

/** Enum describing possible change status errors. */
export enum ChangeStatusErrorEnum_ChangeStatusError {
  /** UNSPECIFIED - Enum unspecified. */
  UNSPECIFIED = 0,
  /** UNKNOWN - The received error code is not known in this version. */
  UNKNOWN = 1,
  /** START_DATE_TOO_OLD - The requested start date is too old. */
  START_DATE_TOO_OLD = 3,
  /**
   * CHANGE_DATE_RANGE_INFINITE - The change_status search request must specify a finite range filter
   * on last_change_date_time.
   */
  CHANGE_DATE_RANGE_INFINITE = 4,
  /**
   * CHANGE_DATE_RANGE_NEGATIVE - The change status search request has specified invalid date time filters
   * that can never logically produce any valid results (for example, start
   * time after end time).
   */
  CHANGE_DATE_RANGE_NEGATIVE = 5,
  /** LIMIT_NOT_SPECIFIED - The change_status search request must specify a LIMIT. */
  LIMIT_NOT_SPECIFIED = 6,
  /**
   * INVALID_LIMIT_CLAUSE - The LIMIT specified by change_status request should be less than or equal
   * to 10K.
   */
  INVALID_LIMIT_CLAUSE = 7,
  UNRECOGNIZED = -1,
}

export function changeStatusErrorEnum_ChangeStatusErrorFromJSON(object: any): ChangeStatusErrorEnum_ChangeStatusError {
  switch (object) {
    case 0:
    case "UNSPECIFIED":
      return ChangeStatusErrorEnum_ChangeStatusError.UNSPECIFIED;
    case 1:
    case "UNKNOWN":
      return ChangeStatusErrorEnum_ChangeStatusError.UNKNOWN;
    case 3:
    case "START_DATE_TOO_OLD":
      return ChangeStatusErrorEnum_ChangeStatusError.START_DATE_TOO_OLD;
    case 4:
    case "CHANGE_DATE_RANGE_INFINITE":
      return ChangeStatusErrorEnum_ChangeStatusError.CHANGE_DATE_RANGE_INFINITE;
    case 5:
    case "CHANGE_DATE_RANGE_NEGATIVE":
      return ChangeStatusErrorEnum_ChangeStatusError.CHANGE_DATE_RANGE_NEGATIVE;
    case 6:
    case "LIMIT_NOT_SPECIFIED":
      return ChangeStatusErrorEnum_ChangeStatusError.LIMIT_NOT_SPECIFIED;
    case 7:
    case "INVALID_LIMIT_CLAUSE":
      return ChangeStatusErrorEnum_ChangeStatusError.INVALID_LIMIT_CLAUSE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ChangeStatusErrorEnum_ChangeStatusError.UNRECOGNIZED;
  }
}

export function changeStatusErrorEnum_ChangeStatusErrorToJSON(object: ChangeStatusErrorEnum_ChangeStatusError): string {
  switch (object) {
    case ChangeStatusErrorEnum_ChangeStatusError.UNSPECIFIED:
      return "UNSPECIFIED";
    case ChangeStatusErrorEnum_ChangeStatusError.UNKNOWN:
      return "UNKNOWN";
    case ChangeStatusErrorEnum_ChangeStatusError.START_DATE_TOO_OLD:
      return "START_DATE_TOO_OLD";
    case ChangeStatusErrorEnum_ChangeStatusError.CHANGE_DATE_RANGE_INFINITE:
      return "CHANGE_DATE_RANGE_INFINITE";
    case ChangeStatusErrorEnum_ChangeStatusError.CHANGE_DATE_RANGE_NEGATIVE:
      return "CHANGE_DATE_RANGE_NEGATIVE";
    case ChangeStatusErrorEnum_ChangeStatusError.LIMIT_NOT_SPECIFIED:
      return "LIMIT_NOT_SPECIFIED";
    case ChangeStatusErrorEnum_ChangeStatusError.INVALID_LIMIT_CLAUSE:
      return "INVALID_LIMIT_CLAUSE";
    case ChangeStatusErrorEnum_ChangeStatusError.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseChangeStatusErrorEnum(): ChangeStatusErrorEnum {
  return {};
}

export const ChangeStatusErrorEnum: MessageFns<ChangeStatusErrorEnum> = {
  encode(_: ChangeStatusErrorEnum, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChangeStatusErrorEnum {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChangeStatusErrorEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ChangeStatusErrorEnum {
    return {};
  },

  toJSON(_: ChangeStatusErrorEnum): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<ChangeStatusErrorEnum>): ChangeStatusErrorEnum {
    return ChangeStatusErrorEnum.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<ChangeStatusErrorEnum>): ChangeStatusErrorEnum {
    const message = createBaseChangeStatusErrorEnum();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
