// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v16/errors/audience_error.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.googleads.v16.errors";

/** Container for enum describing possible audience errors. */
export interface AudienceErrorEnum {
}

/** Enum describing possible audience errors. */
export enum AudienceErrorEnum_AudienceError {
  /** UNSPECIFIED - Enum unspecified. */
  UNSPECIFIED = 0,
  /** UNKNOWN - The received error code is not known in this version. */
  UNKNOWN = 1,
  /** NAME_ALREADY_IN_USE - An audience with this name already exists. */
  NAME_ALREADY_IN_USE = 2,
  /** DIMENSION_INVALID - A dimension within the audience definition is not valid. */
  DIMENSION_INVALID = 3,
  /** AUDIENCE_SEGMENT_NOT_FOUND - One of the audience segment added is not found. */
  AUDIENCE_SEGMENT_NOT_FOUND = 4,
  /** AUDIENCE_SEGMENT_TYPE_NOT_SUPPORTED - One of the audience segment type is not supported. */
  AUDIENCE_SEGMENT_TYPE_NOT_SUPPORTED = 5,
  /** DUPLICATE_AUDIENCE_SEGMENT - The same segment already exists in this audience. */
  DUPLICATE_AUDIENCE_SEGMENT = 6,
  /** TOO_MANY_SEGMENTS - Audience can't have more than allowed number segments. */
  TOO_MANY_SEGMENTS = 7,
  /** TOO_MANY_DIMENSIONS_OF_SAME_TYPE - Audience can't have multiple dimensions of same type. */
  TOO_MANY_DIMENSIONS_OF_SAME_TYPE = 8,
  /**
   * IN_USE - The audience cannot be removed, because it is currently used in an
   * ad group criterion or asset group signal in an (enabled or paused)
   * ad group or campaign.
   */
  IN_USE = 9,
  /** MISSING_ASSET_GROUP_ID - Asset Group scoped audience requires an asset group ID. */
  MISSING_ASSET_GROUP_ID = 10,
  /** CANNOT_CHANGE_FROM_CUSTOMER_TO_ASSET_GROUP_SCOPE - Audience scope may not be changed from Customer to AssetGroup. */
  CANNOT_CHANGE_FROM_CUSTOMER_TO_ASSET_GROUP_SCOPE = 11,
  UNRECOGNIZED = -1,
}

export function audienceErrorEnum_AudienceErrorFromJSON(object: any): AudienceErrorEnum_AudienceError {
  switch (object) {
    case 0:
    case "UNSPECIFIED":
      return AudienceErrorEnum_AudienceError.UNSPECIFIED;
    case 1:
    case "UNKNOWN":
      return AudienceErrorEnum_AudienceError.UNKNOWN;
    case 2:
    case "NAME_ALREADY_IN_USE":
      return AudienceErrorEnum_AudienceError.NAME_ALREADY_IN_USE;
    case 3:
    case "DIMENSION_INVALID":
      return AudienceErrorEnum_AudienceError.DIMENSION_INVALID;
    case 4:
    case "AUDIENCE_SEGMENT_NOT_FOUND":
      return AudienceErrorEnum_AudienceError.AUDIENCE_SEGMENT_NOT_FOUND;
    case 5:
    case "AUDIENCE_SEGMENT_TYPE_NOT_SUPPORTED":
      return AudienceErrorEnum_AudienceError.AUDIENCE_SEGMENT_TYPE_NOT_SUPPORTED;
    case 6:
    case "DUPLICATE_AUDIENCE_SEGMENT":
      return AudienceErrorEnum_AudienceError.DUPLICATE_AUDIENCE_SEGMENT;
    case 7:
    case "TOO_MANY_SEGMENTS":
      return AudienceErrorEnum_AudienceError.TOO_MANY_SEGMENTS;
    case 8:
    case "TOO_MANY_DIMENSIONS_OF_SAME_TYPE":
      return AudienceErrorEnum_AudienceError.TOO_MANY_DIMENSIONS_OF_SAME_TYPE;
    case 9:
    case "IN_USE":
      return AudienceErrorEnum_AudienceError.IN_USE;
    case 10:
    case "MISSING_ASSET_GROUP_ID":
      return AudienceErrorEnum_AudienceError.MISSING_ASSET_GROUP_ID;
    case 11:
    case "CANNOT_CHANGE_FROM_CUSTOMER_TO_ASSET_GROUP_SCOPE":
      return AudienceErrorEnum_AudienceError.CANNOT_CHANGE_FROM_CUSTOMER_TO_ASSET_GROUP_SCOPE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AudienceErrorEnum_AudienceError.UNRECOGNIZED;
  }
}

export function audienceErrorEnum_AudienceErrorToJSON(object: AudienceErrorEnum_AudienceError): string {
  switch (object) {
    case AudienceErrorEnum_AudienceError.UNSPECIFIED:
      return "UNSPECIFIED";
    case AudienceErrorEnum_AudienceError.UNKNOWN:
      return "UNKNOWN";
    case AudienceErrorEnum_AudienceError.NAME_ALREADY_IN_USE:
      return "NAME_ALREADY_IN_USE";
    case AudienceErrorEnum_AudienceError.DIMENSION_INVALID:
      return "DIMENSION_INVALID";
    case AudienceErrorEnum_AudienceError.AUDIENCE_SEGMENT_NOT_FOUND:
      return "AUDIENCE_SEGMENT_NOT_FOUND";
    case AudienceErrorEnum_AudienceError.AUDIENCE_SEGMENT_TYPE_NOT_SUPPORTED:
      return "AUDIENCE_SEGMENT_TYPE_NOT_SUPPORTED";
    case AudienceErrorEnum_AudienceError.DUPLICATE_AUDIENCE_SEGMENT:
      return "DUPLICATE_AUDIENCE_SEGMENT";
    case AudienceErrorEnum_AudienceError.TOO_MANY_SEGMENTS:
      return "TOO_MANY_SEGMENTS";
    case AudienceErrorEnum_AudienceError.TOO_MANY_DIMENSIONS_OF_SAME_TYPE:
      return "TOO_MANY_DIMENSIONS_OF_SAME_TYPE";
    case AudienceErrorEnum_AudienceError.IN_USE:
      return "IN_USE";
    case AudienceErrorEnum_AudienceError.MISSING_ASSET_GROUP_ID:
      return "MISSING_ASSET_GROUP_ID";
    case AudienceErrorEnum_AudienceError.CANNOT_CHANGE_FROM_CUSTOMER_TO_ASSET_GROUP_SCOPE:
      return "CANNOT_CHANGE_FROM_CUSTOMER_TO_ASSET_GROUP_SCOPE";
    case AudienceErrorEnum_AudienceError.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseAudienceErrorEnum(): AudienceErrorEnum {
  return {};
}

export const AudienceErrorEnum: MessageFns<AudienceErrorEnum> = {
  encode(_: AudienceErrorEnum, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AudienceErrorEnum {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAudienceErrorEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): AudienceErrorEnum {
    return {};
  },

  toJSON(_: AudienceErrorEnum): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<AudienceErrorEnum>): AudienceErrorEnum {
    return AudienceErrorEnum.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<AudienceErrorEnum>): AudienceErrorEnum {
    const message = createBaseAudienceErrorEnum();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
