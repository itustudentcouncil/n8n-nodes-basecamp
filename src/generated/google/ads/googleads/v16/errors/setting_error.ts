// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v16/errors/setting_error.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.googleads.v16.errors";

/** Container for enum describing possible setting errors. */
export interface SettingErrorEnum {
}

/** Enum describing possible setting errors. */
export enum SettingErrorEnum_SettingError {
  /** UNSPECIFIED - Enum unspecified. */
  UNSPECIFIED = 0,
  /** UNKNOWN - The received error code is not known in this version. */
  UNKNOWN = 1,
  /** SETTING_TYPE_IS_NOT_AVAILABLE - The campaign setting is not available for this Google Ads account. */
  SETTING_TYPE_IS_NOT_AVAILABLE = 3,
  /** SETTING_TYPE_IS_NOT_COMPATIBLE_WITH_CAMPAIGN - The setting is not compatible with the campaign. */
  SETTING_TYPE_IS_NOT_COMPATIBLE_WITH_CAMPAIGN = 4,
  /**
   * TARGETING_SETTING_CONTAINS_INVALID_CRITERION_TYPE_GROUP - The supplied TargetingSetting contains an invalid CriterionTypeGroup. See
   * CriterionTypeGroup documentation for CriterionTypeGroups allowed
   * in Campaign or AdGroup TargetingSettings.
   */
  TARGETING_SETTING_CONTAINS_INVALID_CRITERION_TYPE_GROUP = 5,
  /**
   * TARGETING_SETTING_DEMOGRAPHIC_CRITERION_TYPE_GROUPS_MUST_BE_SET_TO_TARGET_ALL - TargetingSetting must not explicitly
   * set any of the Demographic CriterionTypeGroups (AGE_RANGE, GENDER,
   * PARENT, INCOME_RANGE) to false (it's okay to not set them at all, in
   * which case the system will set them to true automatically).
   */
  TARGETING_SETTING_DEMOGRAPHIC_CRITERION_TYPE_GROUPS_MUST_BE_SET_TO_TARGET_ALL = 6,
  /**
   * TARGETING_SETTING_CANNOT_CHANGE_TARGET_ALL_TO_FALSE_FOR_DEMOGRAPHIC_CRITERION_TYPE_GROUP - TargetingSetting cannot change any of
   * the Demographic CriterionTypeGroups (AGE_RANGE, GENDER, PARENT,
   * INCOME_RANGE) from true to false.
   */
  TARGETING_SETTING_CANNOT_CHANGE_TARGET_ALL_TO_FALSE_FOR_DEMOGRAPHIC_CRITERION_TYPE_GROUP = 7,
  /** DYNAMIC_SEARCH_ADS_SETTING_AT_LEAST_ONE_FEED_ID_MUST_BE_PRESENT - At least one feed id should be present. */
  DYNAMIC_SEARCH_ADS_SETTING_AT_LEAST_ONE_FEED_ID_MUST_BE_PRESENT = 8,
  /** DYNAMIC_SEARCH_ADS_SETTING_CONTAINS_INVALID_DOMAIN_NAME - The supplied DynamicSearchAdsSetting contains an invalid domain name. */
  DYNAMIC_SEARCH_ADS_SETTING_CONTAINS_INVALID_DOMAIN_NAME = 9,
  /** DYNAMIC_SEARCH_ADS_SETTING_CONTAINS_SUBDOMAIN_NAME - The supplied DynamicSearchAdsSetting contains a subdomain name. */
  DYNAMIC_SEARCH_ADS_SETTING_CONTAINS_SUBDOMAIN_NAME = 10,
  /** DYNAMIC_SEARCH_ADS_SETTING_CONTAINS_INVALID_LANGUAGE_CODE - The supplied DynamicSearchAdsSetting contains an invalid language code. */
  DYNAMIC_SEARCH_ADS_SETTING_CONTAINS_INVALID_LANGUAGE_CODE = 11,
  /**
   * TARGET_ALL_IS_NOT_ALLOWED_FOR_PLACEMENT_IN_SEARCH_CAMPAIGN - TargetingSettings in search campaigns should not have
   * CriterionTypeGroup.PLACEMENT set to targetAll.
   */
  TARGET_ALL_IS_NOT_ALLOWED_FOR_PLACEMENT_IN_SEARCH_CAMPAIGN = 12,
  /** SETTING_VALUE_NOT_COMPATIBLE_WITH_CAMPAIGN - The setting value is not compatible with the campaign type. */
  SETTING_VALUE_NOT_COMPATIBLE_WITH_CAMPAIGN = 20,
  /**
   * BID_ONLY_IS_NOT_ALLOWED_TO_BE_MODIFIED_WITH_CUSTOMER_MATCH_TARGETING - Switching from observation setting to targeting setting is not allowed
   * for Customer Match lists. See
   * https://support.google.com/google-ads/answer/6299717.
   */
  BID_ONLY_IS_NOT_ALLOWED_TO_BE_MODIFIED_WITH_CUSTOMER_MATCH_TARGETING = 21,
  UNRECOGNIZED = -1,
}

export function settingErrorEnum_SettingErrorFromJSON(object: any): SettingErrorEnum_SettingError {
  switch (object) {
    case 0:
    case "UNSPECIFIED":
      return SettingErrorEnum_SettingError.UNSPECIFIED;
    case 1:
    case "UNKNOWN":
      return SettingErrorEnum_SettingError.UNKNOWN;
    case 3:
    case "SETTING_TYPE_IS_NOT_AVAILABLE":
      return SettingErrorEnum_SettingError.SETTING_TYPE_IS_NOT_AVAILABLE;
    case 4:
    case "SETTING_TYPE_IS_NOT_COMPATIBLE_WITH_CAMPAIGN":
      return SettingErrorEnum_SettingError.SETTING_TYPE_IS_NOT_COMPATIBLE_WITH_CAMPAIGN;
    case 5:
    case "TARGETING_SETTING_CONTAINS_INVALID_CRITERION_TYPE_GROUP":
      return SettingErrorEnum_SettingError.TARGETING_SETTING_CONTAINS_INVALID_CRITERION_TYPE_GROUP;
    case 6:
    case "TARGETING_SETTING_DEMOGRAPHIC_CRITERION_TYPE_GROUPS_MUST_BE_SET_TO_TARGET_ALL":
      return SettingErrorEnum_SettingError
        .TARGETING_SETTING_DEMOGRAPHIC_CRITERION_TYPE_GROUPS_MUST_BE_SET_TO_TARGET_ALL;
    case 7:
    case "TARGETING_SETTING_CANNOT_CHANGE_TARGET_ALL_TO_FALSE_FOR_DEMOGRAPHIC_CRITERION_TYPE_GROUP":
      return SettingErrorEnum_SettingError
        .TARGETING_SETTING_CANNOT_CHANGE_TARGET_ALL_TO_FALSE_FOR_DEMOGRAPHIC_CRITERION_TYPE_GROUP;
    case 8:
    case "DYNAMIC_SEARCH_ADS_SETTING_AT_LEAST_ONE_FEED_ID_MUST_BE_PRESENT":
      return SettingErrorEnum_SettingError.DYNAMIC_SEARCH_ADS_SETTING_AT_LEAST_ONE_FEED_ID_MUST_BE_PRESENT;
    case 9:
    case "DYNAMIC_SEARCH_ADS_SETTING_CONTAINS_INVALID_DOMAIN_NAME":
      return SettingErrorEnum_SettingError.DYNAMIC_SEARCH_ADS_SETTING_CONTAINS_INVALID_DOMAIN_NAME;
    case 10:
    case "DYNAMIC_SEARCH_ADS_SETTING_CONTAINS_SUBDOMAIN_NAME":
      return SettingErrorEnum_SettingError.DYNAMIC_SEARCH_ADS_SETTING_CONTAINS_SUBDOMAIN_NAME;
    case 11:
    case "DYNAMIC_SEARCH_ADS_SETTING_CONTAINS_INVALID_LANGUAGE_CODE":
      return SettingErrorEnum_SettingError.DYNAMIC_SEARCH_ADS_SETTING_CONTAINS_INVALID_LANGUAGE_CODE;
    case 12:
    case "TARGET_ALL_IS_NOT_ALLOWED_FOR_PLACEMENT_IN_SEARCH_CAMPAIGN":
      return SettingErrorEnum_SettingError.TARGET_ALL_IS_NOT_ALLOWED_FOR_PLACEMENT_IN_SEARCH_CAMPAIGN;
    case 20:
    case "SETTING_VALUE_NOT_COMPATIBLE_WITH_CAMPAIGN":
      return SettingErrorEnum_SettingError.SETTING_VALUE_NOT_COMPATIBLE_WITH_CAMPAIGN;
    case 21:
    case "BID_ONLY_IS_NOT_ALLOWED_TO_BE_MODIFIED_WITH_CUSTOMER_MATCH_TARGETING":
      return SettingErrorEnum_SettingError.BID_ONLY_IS_NOT_ALLOWED_TO_BE_MODIFIED_WITH_CUSTOMER_MATCH_TARGETING;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SettingErrorEnum_SettingError.UNRECOGNIZED;
  }
}

export function settingErrorEnum_SettingErrorToJSON(object: SettingErrorEnum_SettingError): string {
  switch (object) {
    case SettingErrorEnum_SettingError.UNSPECIFIED:
      return "UNSPECIFIED";
    case SettingErrorEnum_SettingError.UNKNOWN:
      return "UNKNOWN";
    case SettingErrorEnum_SettingError.SETTING_TYPE_IS_NOT_AVAILABLE:
      return "SETTING_TYPE_IS_NOT_AVAILABLE";
    case SettingErrorEnum_SettingError.SETTING_TYPE_IS_NOT_COMPATIBLE_WITH_CAMPAIGN:
      return "SETTING_TYPE_IS_NOT_COMPATIBLE_WITH_CAMPAIGN";
    case SettingErrorEnum_SettingError.TARGETING_SETTING_CONTAINS_INVALID_CRITERION_TYPE_GROUP:
      return "TARGETING_SETTING_CONTAINS_INVALID_CRITERION_TYPE_GROUP";
    case SettingErrorEnum_SettingError.TARGETING_SETTING_DEMOGRAPHIC_CRITERION_TYPE_GROUPS_MUST_BE_SET_TO_TARGET_ALL:
      return "TARGETING_SETTING_DEMOGRAPHIC_CRITERION_TYPE_GROUPS_MUST_BE_SET_TO_TARGET_ALL";
    case SettingErrorEnum_SettingError
      .TARGETING_SETTING_CANNOT_CHANGE_TARGET_ALL_TO_FALSE_FOR_DEMOGRAPHIC_CRITERION_TYPE_GROUP:
      return "TARGETING_SETTING_CANNOT_CHANGE_TARGET_ALL_TO_FALSE_FOR_DEMOGRAPHIC_CRITERION_TYPE_GROUP";
    case SettingErrorEnum_SettingError.DYNAMIC_SEARCH_ADS_SETTING_AT_LEAST_ONE_FEED_ID_MUST_BE_PRESENT:
      return "DYNAMIC_SEARCH_ADS_SETTING_AT_LEAST_ONE_FEED_ID_MUST_BE_PRESENT";
    case SettingErrorEnum_SettingError.DYNAMIC_SEARCH_ADS_SETTING_CONTAINS_INVALID_DOMAIN_NAME:
      return "DYNAMIC_SEARCH_ADS_SETTING_CONTAINS_INVALID_DOMAIN_NAME";
    case SettingErrorEnum_SettingError.DYNAMIC_SEARCH_ADS_SETTING_CONTAINS_SUBDOMAIN_NAME:
      return "DYNAMIC_SEARCH_ADS_SETTING_CONTAINS_SUBDOMAIN_NAME";
    case SettingErrorEnum_SettingError.DYNAMIC_SEARCH_ADS_SETTING_CONTAINS_INVALID_LANGUAGE_CODE:
      return "DYNAMIC_SEARCH_ADS_SETTING_CONTAINS_INVALID_LANGUAGE_CODE";
    case SettingErrorEnum_SettingError.TARGET_ALL_IS_NOT_ALLOWED_FOR_PLACEMENT_IN_SEARCH_CAMPAIGN:
      return "TARGET_ALL_IS_NOT_ALLOWED_FOR_PLACEMENT_IN_SEARCH_CAMPAIGN";
    case SettingErrorEnum_SettingError.SETTING_VALUE_NOT_COMPATIBLE_WITH_CAMPAIGN:
      return "SETTING_VALUE_NOT_COMPATIBLE_WITH_CAMPAIGN";
    case SettingErrorEnum_SettingError.BID_ONLY_IS_NOT_ALLOWED_TO_BE_MODIFIED_WITH_CUSTOMER_MATCH_TARGETING:
      return "BID_ONLY_IS_NOT_ALLOWED_TO_BE_MODIFIED_WITH_CUSTOMER_MATCH_TARGETING";
    case SettingErrorEnum_SettingError.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseSettingErrorEnum(): SettingErrorEnum {
  return {};
}

export const SettingErrorEnum: MessageFns<SettingErrorEnum> = {
  encode(_: SettingErrorEnum, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SettingErrorEnum {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSettingErrorEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): SettingErrorEnum {
    return {};
  },

  toJSON(_: SettingErrorEnum): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<SettingErrorEnum>): SettingErrorEnum {
    return SettingErrorEnum.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<SettingErrorEnum>): SettingErrorEnum {
    const message = createBaseSettingErrorEnum();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
