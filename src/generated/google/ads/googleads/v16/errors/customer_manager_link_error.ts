// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v16/errors/customer_manager_link_error.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.googleads.v16.errors";

/** Container for enum describing possible CustomerManagerLink errors. */
export interface CustomerManagerLinkErrorEnum {
}

/** Enum describing possible CustomerManagerLink errors. */
export enum CustomerManagerLinkErrorEnum_CustomerManagerLinkError {
  /** UNSPECIFIED - Enum unspecified. */
  UNSPECIFIED = 0,
  /** UNKNOWN - The received error code is not known in this version. */
  UNKNOWN = 1,
  /** NO_PENDING_INVITE - No pending invitation. */
  NO_PENDING_INVITE = 2,
  /** SAME_CLIENT_MORE_THAN_ONCE_PER_CALL - Attempt to operate on the same client more than once in the same call. */
  SAME_CLIENT_MORE_THAN_ONCE_PER_CALL = 3,
  /** MANAGER_HAS_MAX_NUMBER_OF_LINKED_ACCOUNTS - Manager account has the maximum number of linked accounts. */
  MANAGER_HAS_MAX_NUMBER_OF_LINKED_ACCOUNTS = 4,
  /** CANNOT_UNLINK_ACCOUNT_WITHOUT_ACTIVE_USER - If no active user on account it cannot be unlinked from its manager. */
  CANNOT_UNLINK_ACCOUNT_WITHOUT_ACTIVE_USER = 5,
  /**
   * CANNOT_REMOVE_LAST_CLIENT_ACCOUNT_OWNER - Account should have at least one active owner on it before being
   * unlinked.
   */
  CANNOT_REMOVE_LAST_CLIENT_ACCOUNT_OWNER = 6,
  /** CANNOT_CHANGE_ROLE_BY_NON_ACCOUNT_OWNER - Only account owners may change their permission role. */
  CANNOT_CHANGE_ROLE_BY_NON_ACCOUNT_OWNER = 7,
  /**
   * CANNOT_CHANGE_ROLE_FOR_NON_ACTIVE_LINK_ACCOUNT - When a client's link to its manager is not active, the link role cannot
   * be changed.
   */
  CANNOT_CHANGE_ROLE_FOR_NON_ACTIVE_LINK_ACCOUNT = 8,
  /**
   * DUPLICATE_CHILD_FOUND - Attempt to link a child to a parent that contains or will contain
   * duplicate children.
   */
  DUPLICATE_CHILD_FOUND = 9,
  /**
   * TEST_ACCOUNT_LINKS_TOO_MANY_CHILD_ACCOUNTS - The authorized customer is a test account. It can add no more than the
   * allowed number of accounts
   */
  TEST_ACCOUNT_LINKS_TOO_MANY_CHILD_ACCOUNTS = 10,
  UNRECOGNIZED = -1,
}

export function customerManagerLinkErrorEnum_CustomerManagerLinkErrorFromJSON(
  object: any,
): CustomerManagerLinkErrorEnum_CustomerManagerLinkError {
  switch (object) {
    case 0:
    case "UNSPECIFIED":
      return CustomerManagerLinkErrorEnum_CustomerManagerLinkError.UNSPECIFIED;
    case 1:
    case "UNKNOWN":
      return CustomerManagerLinkErrorEnum_CustomerManagerLinkError.UNKNOWN;
    case 2:
    case "NO_PENDING_INVITE":
      return CustomerManagerLinkErrorEnum_CustomerManagerLinkError.NO_PENDING_INVITE;
    case 3:
    case "SAME_CLIENT_MORE_THAN_ONCE_PER_CALL":
      return CustomerManagerLinkErrorEnum_CustomerManagerLinkError.SAME_CLIENT_MORE_THAN_ONCE_PER_CALL;
    case 4:
    case "MANAGER_HAS_MAX_NUMBER_OF_LINKED_ACCOUNTS":
      return CustomerManagerLinkErrorEnum_CustomerManagerLinkError.MANAGER_HAS_MAX_NUMBER_OF_LINKED_ACCOUNTS;
    case 5:
    case "CANNOT_UNLINK_ACCOUNT_WITHOUT_ACTIVE_USER":
      return CustomerManagerLinkErrorEnum_CustomerManagerLinkError.CANNOT_UNLINK_ACCOUNT_WITHOUT_ACTIVE_USER;
    case 6:
    case "CANNOT_REMOVE_LAST_CLIENT_ACCOUNT_OWNER":
      return CustomerManagerLinkErrorEnum_CustomerManagerLinkError.CANNOT_REMOVE_LAST_CLIENT_ACCOUNT_OWNER;
    case 7:
    case "CANNOT_CHANGE_ROLE_BY_NON_ACCOUNT_OWNER":
      return CustomerManagerLinkErrorEnum_CustomerManagerLinkError.CANNOT_CHANGE_ROLE_BY_NON_ACCOUNT_OWNER;
    case 8:
    case "CANNOT_CHANGE_ROLE_FOR_NON_ACTIVE_LINK_ACCOUNT":
      return CustomerManagerLinkErrorEnum_CustomerManagerLinkError.CANNOT_CHANGE_ROLE_FOR_NON_ACTIVE_LINK_ACCOUNT;
    case 9:
    case "DUPLICATE_CHILD_FOUND":
      return CustomerManagerLinkErrorEnum_CustomerManagerLinkError.DUPLICATE_CHILD_FOUND;
    case 10:
    case "TEST_ACCOUNT_LINKS_TOO_MANY_CHILD_ACCOUNTS":
      return CustomerManagerLinkErrorEnum_CustomerManagerLinkError.TEST_ACCOUNT_LINKS_TOO_MANY_CHILD_ACCOUNTS;
    case -1:
    case "UNRECOGNIZED":
    default:
      return CustomerManagerLinkErrorEnum_CustomerManagerLinkError.UNRECOGNIZED;
  }
}

export function customerManagerLinkErrorEnum_CustomerManagerLinkErrorToJSON(
  object: CustomerManagerLinkErrorEnum_CustomerManagerLinkError,
): string {
  switch (object) {
    case CustomerManagerLinkErrorEnum_CustomerManagerLinkError.UNSPECIFIED:
      return "UNSPECIFIED";
    case CustomerManagerLinkErrorEnum_CustomerManagerLinkError.UNKNOWN:
      return "UNKNOWN";
    case CustomerManagerLinkErrorEnum_CustomerManagerLinkError.NO_PENDING_INVITE:
      return "NO_PENDING_INVITE";
    case CustomerManagerLinkErrorEnum_CustomerManagerLinkError.SAME_CLIENT_MORE_THAN_ONCE_PER_CALL:
      return "SAME_CLIENT_MORE_THAN_ONCE_PER_CALL";
    case CustomerManagerLinkErrorEnum_CustomerManagerLinkError.MANAGER_HAS_MAX_NUMBER_OF_LINKED_ACCOUNTS:
      return "MANAGER_HAS_MAX_NUMBER_OF_LINKED_ACCOUNTS";
    case CustomerManagerLinkErrorEnum_CustomerManagerLinkError.CANNOT_UNLINK_ACCOUNT_WITHOUT_ACTIVE_USER:
      return "CANNOT_UNLINK_ACCOUNT_WITHOUT_ACTIVE_USER";
    case CustomerManagerLinkErrorEnum_CustomerManagerLinkError.CANNOT_REMOVE_LAST_CLIENT_ACCOUNT_OWNER:
      return "CANNOT_REMOVE_LAST_CLIENT_ACCOUNT_OWNER";
    case CustomerManagerLinkErrorEnum_CustomerManagerLinkError.CANNOT_CHANGE_ROLE_BY_NON_ACCOUNT_OWNER:
      return "CANNOT_CHANGE_ROLE_BY_NON_ACCOUNT_OWNER";
    case CustomerManagerLinkErrorEnum_CustomerManagerLinkError.CANNOT_CHANGE_ROLE_FOR_NON_ACTIVE_LINK_ACCOUNT:
      return "CANNOT_CHANGE_ROLE_FOR_NON_ACTIVE_LINK_ACCOUNT";
    case CustomerManagerLinkErrorEnum_CustomerManagerLinkError.DUPLICATE_CHILD_FOUND:
      return "DUPLICATE_CHILD_FOUND";
    case CustomerManagerLinkErrorEnum_CustomerManagerLinkError.TEST_ACCOUNT_LINKS_TOO_MANY_CHILD_ACCOUNTS:
      return "TEST_ACCOUNT_LINKS_TOO_MANY_CHILD_ACCOUNTS";
    case CustomerManagerLinkErrorEnum_CustomerManagerLinkError.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseCustomerManagerLinkErrorEnum(): CustomerManagerLinkErrorEnum {
  return {};
}

export const CustomerManagerLinkErrorEnum: MessageFns<CustomerManagerLinkErrorEnum> = {
  encode(_: CustomerManagerLinkErrorEnum, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CustomerManagerLinkErrorEnum {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCustomerManagerLinkErrorEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): CustomerManagerLinkErrorEnum {
    return {};
  },

  toJSON(_: CustomerManagerLinkErrorEnum): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<CustomerManagerLinkErrorEnum>): CustomerManagerLinkErrorEnum {
    return CustomerManagerLinkErrorEnum.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<CustomerManagerLinkErrorEnum>): CustomerManagerLinkErrorEnum {
    const message = createBaseCustomerManagerLinkErrorEnum();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
