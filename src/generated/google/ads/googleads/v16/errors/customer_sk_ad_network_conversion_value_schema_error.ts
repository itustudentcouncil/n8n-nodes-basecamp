// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v16/errors/customer_sk_ad_network_conversion_value_schema_error.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.googleads.v16.errors";

/**
 * Container for enum describing possible
 * CustomerSkAdNetworkConversionValueSchema errors.
 */
export interface CustomerSkAdNetworkConversionValueSchemaErrorEnum {
}

/** Enum describing possible CustomerSkAdNetworkConversionValueSchema errors. */
export enum CustomerSkAdNetworkConversionValueSchemaErrorEnum_CustomerSkAdNetworkConversionValueSchemaError {
  /** UNSPECIFIED - Enum unspecified. */
  UNSPECIFIED = 0,
  /** UNKNOWN - The received error code is not known in this version. */
  UNKNOWN = 1,
  /** INVALID_LINK_ID - The customer link ID provided is invalid. */
  INVALID_LINK_ID = 2,
  /** INVALID_APP_ID - The app ID provided is invalid. */
  INVALID_APP_ID = 3,
  /** INVALID_SCHEMA - The conversion value schema provided is invalid. */
  INVALID_SCHEMA = 4,
  /** LINK_CODE_NOT_FOUND - The customer link id provided could not be found. */
  LINK_CODE_NOT_FOUND = 5,
  /** INVALID_EVENT_COUNTER - The SkAdNetwork event counter provided is invalid. */
  INVALID_EVENT_COUNTER = 7,
  /** INVALID_EVENT_NAME - The SkAdNetwork event name provided is invalid. */
  INVALID_EVENT_NAME = 8,
  UNRECOGNIZED = -1,
}

export function customerSkAdNetworkConversionValueSchemaErrorEnum_CustomerSkAdNetworkConversionValueSchemaErrorFromJSON(
  object: any,
): CustomerSkAdNetworkConversionValueSchemaErrorEnum_CustomerSkAdNetworkConversionValueSchemaError {
  switch (object) {
    case 0:
    case "UNSPECIFIED":
      return CustomerSkAdNetworkConversionValueSchemaErrorEnum_CustomerSkAdNetworkConversionValueSchemaError
        .UNSPECIFIED;
    case 1:
    case "UNKNOWN":
      return CustomerSkAdNetworkConversionValueSchemaErrorEnum_CustomerSkAdNetworkConversionValueSchemaError.UNKNOWN;
    case 2:
    case "INVALID_LINK_ID":
      return CustomerSkAdNetworkConversionValueSchemaErrorEnum_CustomerSkAdNetworkConversionValueSchemaError
        .INVALID_LINK_ID;
    case 3:
    case "INVALID_APP_ID":
      return CustomerSkAdNetworkConversionValueSchemaErrorEnum_CustomerSkAdNetworkConversionValueSchemaError
        .INVALID_APP_ID;
    case 4:
    case "INVALID_SCHEMA":
      return CustomerSkAdNetworkConversionValueSchemaErrorEnum_CustomerSkAdNetworkConversionValueSchemaError
        .INVALID_SCHEMA;
    case 5:
    case "LINK_CODE_NOT_FOUND":
      return CustomerSkAdNetworkConversionValueSchemaErrorEnum_CustomerSkAdNetworkConversionValueSchemaError
        .LINK_CODE_NOT_FOUND;
    case 7:
    case "INVALID_EVENT_COUNTER":
      return CustomerSkAdNetworkConversionValueSchemaErrorEnum_CustomerSkAdNetworkConversionValueSchemaError
        .INVALID_EVENT_COUNTER;
    case 8:
    case "INVALID_EVENT_NAME":
      return CustomerSkAdNetworkConversionValueSchemaErrorEnum_CustomerSkAdNetworkConversionValueSchemaError
        .INVALID_EVENT_NAME;
    case -1:
    case "UNRECOGNIZED":
    default:
      return CustomerSkAdNetworkConversionValueSchemaErrorEnum_CustomerSkAdNetworkConversionValueSchemaError
        .UNRECOGNIZED;
  }
}

export function customerSkAdNetworkConversionValueSchemaErrorEnum_CustomerSkAdNetworkConversionValueSchemaErrorToJSON(
  object: CustomerSkAdNetworkConversionValueSchemaErrorEnum_CustomerSkAdNetworkConversionValueSchemaError,
): string {
  switch (object) {
    case CustomerSkAdNetworkConversionValueSchemaErrorEnum_CustomerSkAdNetworkConversionValueSchemaError.UNSPECIFIED:
      return "UNSPECIFIED";
    case CustomerSkAdNetworkConversionValueSchemaErrorEnum_CustomerSkAdNetworkConversionValueSchemaError.UNKNOWN:
      return "UNKNOWN";
    case CustomerSkAdNetworkConversionValueSchemaErrorEnum_CustomerSkAdNetworkConversionValueSchemaError
      .INVALID_LINK_ID:
      return "INVALID_LINK_ID";
    case CustomerSkAdNetworkConversionValueSchemaErrorEnum_CustomerSkAdNetworkConversionValueSchemaError.INVALID_APP_ID:
      return "INVALID_APP_ID";
    case CustomerSkAdNetworkConversionValueSchemaErrorEnum_CustomerSkAdNetworkConversionValueSchemaError.INVALID_SCHEMA:
      return "INVALID_SCHEMA";
    case CustomerSkAdNetworkConversionValueSchemaErrorEnum_CustomerSkAdNetworkConversionValueSchemaError
      .LINK_CODE_NOT_FOUND:
      return "LINK_CODE_NOT_FOUND";
    case CustomerSkAdNetworkConversionValueSchemaErrorEnum_CustomerSkAdNetworkConversionValueSchemaError
      .INVALID_EVENT_COUNTER:
      return "INVALID_EVENT_COUNTER";
    case CustomerSkAdNetworkConversionValueSchemaErrorEnum_CustomerSkAdNetworkConversionValueSchemaError
      .INVALID_EVENT_NAME:
      return "INVALID_EVENT_NAME";
    case CustomerSkAdNetworkConversionValueSchemaErrorEnum_CustomerSkAdNetworkConversionValueSchemaError.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseCustomerSkAdNetworkConversionValueSchemaErrorEnum(): CustomerSkAdNetworkConversionValueSchemaErrorEnum {
  return {};
}

export const CustomerSkAdNetworkConversionValueSchemaErrorEnum: MessageFns<
  CustomerSkAdNetworkConversionValueSchemaErrorEnum
> = {
  encode(
    _: CustomerSkAdNetworkConversionValueSchemaErrorEnum,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CustomerSkAdNetworkConversionValueSchemaErrorEnum {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCustomerSkAdNetworkConversionValueSchemaErrorEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): CustomerSkAdNetworkConversionValueSchemaErrorEnum {
    return {};
  },

  toJSON(_: CustomerSkAdNetworkConversionValueSchemaErrorEnum): unknown {
    const obj: any = {};
    return obj;
  },

  create(
    base?: DeepPartial<CustomerSkAdNetworkConversionValueSchemaErrorEnum>,
  ): CustomerSkAdNetworkConversionValueSchemaErrorEnum {
    return CustomerSkAdNetworkConversionValueSchemaErrorEnum.fromPartial(base ?? {});
  },
  fromPartial(
    _: DeepPartial<CustomerSkAdNetworkConversionValueSchemaErrorEnum>,
  ): CustomerSkAdNetworkConversionValueSchemaErrorEnum {
    const message = createBaseCustomerSkAdNetworkConversionValueSchemaErrorEnum();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
