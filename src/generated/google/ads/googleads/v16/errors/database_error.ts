// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v16/errors/database_error.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.googleads.v16.errors";

/** Container for enum describing possible database errors. */
export interface DatabaseErrorEnum {
}

/** Enum describing possible database errors. */
export enum DatabaseErrorEnum_DatabaseError {
  /** UNSPECIFIED - Enum unspecified. */
  UNSPECIFIED = 0,
  /** UNKNOWN - The received error code is not known in this version. */
  UNKNOWN = 1,
  /**
   * CONCURRENT_MODIFICATION - Multiple requests were attempting to modify the same resource at once.
   * Retry the request.
   */
  CONCURRENT_MODIFICATION = 2,
  /**
   * DATA_CONSTRAINT_VIOLATION - The request conflicted with existing data. This error will usually be
   * replaced with a more specific error if the request is retried.
   */
  DATA_CONSTRAINT_VIOLATION = 3,
  /**
   * REQUEST_TOO_LARGE - The data written is too large. Split the request into smaller
   * requests.
   */
  REQUEST_TOO_LARGE = 4,
  UNRECOGNIZED = -1,
}

export function databaseErrorEnum_DatabaseErrorFromJSON(object: any): DatabaseErrorEnum_DatabaseError {
  switch (object) {
    case 0:
    case "UNSPECIFIED":
      return DatabaseErrorEnum_DatabaseError.UNSPECIFIED;
    case 1:
    case "UNKNOWN":
      return DatabaseErrorEnum_DatabaseError.UNKNOWN;
    case 2:
    case "CONCURRENT_MODIFICATION":
      return DatabaseErrorEnum_DatabaseError.CONCURRENT_MODIFICATION;
    case 3:
    case "DATA_CONSTRAINT_VIOLATION":
      return DatabaseErrorEnum_DatabaseError.DATA_CONSTRAINT_VIOLATION;
    case 4:
    case "REQUEST_TOO_LARGE":
      return DatabaseErrorEnum_DatabaseError.REQUEST_TOO_LARGE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return DatabaseErrorEnum_DatabaseError.UNRECOGNIZED;
  }
}

export function databaseErrorEnum_DatabaseErrorToJSON(object: DatabaseErrorEnum_DatabaseError): string {
  switch (object) {
    case DatabaseErrorEnum_DatabaseError.UNSPECIFIED:
      return "UNSPECIFIED";
    case DatabaseErrorEnum_DatabaseError.UNKNOWN:
      return "UNKNOWN";
    case DatabaseErrorEnum_DatabaseError.CONCURRENT_MODIFICATION:
      return "CONCURRENT_MODIFICATION";
    case DatabaseErrorEnum_DatabaseError.DATA_CONSTRAINT_VIOLATION:
      return "DATA_CONSTRAINT_VIOLATION";
    case DatabaseErrorEnum_DatabaseError.REQUEST_TOO_LARGE:
      return "REQUEST_TOO_LARGE";
    case DatabaseErrorEnum_DatabaseError.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseDatabaseErrorEnum(): DatabaseErrorEnum {
  return {};
}

export const DatabaseErrorEnum: MessageFns<DatabaseErrorEnum> = {
  encode(_: DatabaseErrorEnum, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DatabaseErrorEnum {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDatabaseErrorEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): DatabaseErrorEnum {
    return {};
  },

  toJSON(_: DatabaseErrorEnum): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<DatabaseErrorEnum>): DatabaseErrorEnum {
    return DatabaseErrorEnum.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<DatabaseErrorEnum>): DatabaseErrorEnum {
    const message = createBaseDatabaseErrorEnum();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
