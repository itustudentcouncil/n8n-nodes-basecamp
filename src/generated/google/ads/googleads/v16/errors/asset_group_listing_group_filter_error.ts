// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v16/errors/asset_group_listing_group_filter_error.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.googleads.v16.errors";

/**
 * Container for enum describing possible asset group listing group filter
 * errors.
 */
export interface AssetGroupListingGroupFilterErrorEnum {
}

/** Enum describing possible asset group listing group filter errors. */
export enum AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError {
  /** UNSPECIFIED - Enum unspecified. */
  UNSPECIFIED = 0,
  /** UNKNOWN - The received error code is not known in this version. */
  UNKNOWN = 1,
  /** TREE_TOO_DEEP - Listing group tree is too deep. */
  TREE_TOO_DEEP = 2,
  /** UNIT_CANNOT_HAVE_CHILDREN - Listing Group UNIT node cannot have children. */
  UNIT_CANNOT_HAVE_CHILDREN = 3,
  /** SUBDIVISION_MUST_HAVE_EVERYTHING_ELSE_CHILD - Listing Group SUBDIVISION node must have everything else child. */
  SUBDIVISION_MUST_HAVE_EVERYTHING_ELSE_CHILD = 4,
  /** DIFFERENT_DIMENSION_TYPE_BETWEEN_SIBLINGS - Dimension type of Listing Group must be the same as that of its siblings. */
  DIFFERENT_DIMENSION_TYPE_BETWEEN_SIBLINGS = 5,
  /** SAME_DIMENSION_VALUE_BETWEEN_SIBLINGS - The sibling Listing Groups target exactly the same dimension value. */
  SAME_DIMENSION_VALUE_BETWEEN_SIBLINGS = 6,
  /** SAME_DIMENSION_TYPE_BETWEEN_ANCESTORS - The dimension type is the same as one of the ancestor Listing Groups. */
  SAME_DIMENSION_TYPE_BETWEEN_ANCESTORS = 7,
  /** MULTIPLE_ROOTS - Each Listing Group tree must have a single root. */
  MULTIPLE_ROOTS = 8,
  /** INVALID_DIMENSION_VALUE - Invalid Listing Group dimension value. */
  INVALID_DIMENSION_VALUE = 9,
  /** MUST_REFINE_HIERARCHICAL_PARENT_TYPE - Hierarchical dimension must refine a dimension of the same type. */
  MUST_REFINE_HIERARCHICAL_PARENT_TYPE = 10,
  /** INVALID_PRODUCT_BIDDING_CATEGORY - Invalid Product Bidding Category. */
  INVALID_PRODUCT_BIDDING_CATEGORY = 11,
  /**
   * CHANGING_CASE_VALUE_WITH_CHILDREN - Modifying case value is allowed only while updating the entire subtree at
   * the same time.
   */
  CHANGING_CASE_VALUE_WITH_CHILDREN = 12,
  /** SUBDIVISION_HAS_CHILDREN - Subdivision node has children which must be removed first. */
  SUBDIVISION_HAS_CHILDREN = 13,
  /** CANNOT_REFINE_HIERARCHICAL_EVERYTHING_ELSE - Dimension can't subdivide everything-else node in its own hierarchy. */
  CANNOT_REFINE_HIERARCHICAL_EVERYTHING_ELSE = 14,
  /** DIMENSION_TYPE_NOT_ALLOWED - This dimension type is not allowed in this context. */
  DIMENSION_TYPE_NOT_ALLOWED = 15,
  /** DUPLICATE_WEBPAGE_FILTER_UNDER_ASSET_GROUP - All the webpage filters under an AssetGroup should be distinct. */
  DUPLICATE_WEBPAGE_FILTER_UNDER_ASSET_GROUP = 16,
  /** LISTING_SOURCE_NOT_ALLOWED - Filter of the listing source type is not allowed in the context. */
  LISTING_SOURCE_NOT_ALLOWED = 17,
  /** FILTER_EXCLUSION_NOT_ALLOWED - Exclusion filters are not allowed in the context. */
  FILTER_EXCLUSION_NOT_ALLOWED = 18,
  /** MULTIPLE_LISTING_SOURCES - All the filters under an AssetGroup should have the same listing source. */
  MULTIPLE_LISTING_SOURCES = 19,
  /** MULTIPLE_WEBPAGE_CONDITION_TYPES_NOT_ALLOWED - All the conditions in a webpage needs to be of same type. */
  MULTIPLE_WEBPAGE_CONDITION_TYPES_NOT_ALLOWED = 20,
  /**
   * MULTIPLE_WEBPAGE_TYPES_PER_ASSET_GROUP - All the webpage types of the filters under an AssetGroup should be of
   * same type. Example: All the webpage types can be of type custom_label or
   * url_contains but not both.
   */
  MULTIPLE_WEBPAGE_TYPES_PER_ASSET_GROUP = 21,
  /** PAGE_FEED_FILTER_HAS_PARENT - All page feed filter nodes are root nodes and they can't have a parent. */
  PAGE_FEED_FILTER_HAS_PARENT = 22,
  /**
   * MULTIPLE_OPERATIONS_ON_ONE_NODE - There cannot be more than one mutate operation per request that targets a
   * single asset group listing group filter.
   */
  MULTIPLE_OPERATIONS_ON_ONE_NODE = 23,
  UNRECOGNIZED = -1,
}

export function assetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterErrorFromJSON(
  object: any,
): AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError {
  switch (object) {
    case 0:
    case "UNSPECIFIED":
      return AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError.UNSPECIFIED;
    case 1:
    case "UNKNOWN":
      return AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError.UNKNOWN;
    case 2:
    case "TREE_TOO_DEEP":
      return AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError.TREE_TOO_DEEP;
    case 3:
    case "UNIT_CANNOT_HAVE_CHILDREN":
      return AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError.UNIT_CANNOT_HAVE_CHILDREN;
    case 4:
    case "SUBDIVISION_MUST_HAVE_EVERYTHING_ELSE_CHILD":
      return AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError
        .SUBDIVISION_MUST_HAVE_EVERYTHING_ELSE_CHILD;
    case 5:
    case "DIFFERENT_DIMENSION_TYPE_BETWEEN_SIBLINGS":
      return AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError
        .DIFFERENT_DIMENSION_TYPE_BETWEEN_SIBLINGS;
    case 6:
    case "SAME_DIMENSION_VALUE_BETWEEN_SIBLINGS":
      return AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError
        .SAME_DIMENSION_VALUE_BETWEEN_SIBLINGS;
    case 7:
    case "SAME_DIMENSION_TYPE_BETWEEN_ANCESTORS":
      return AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError
        .SAME_DIMENSION_TYPE_BETWEEN_ANCESTORS;
    case 8:
    case "MULTIPLE_ROOTS":
      return AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError.MULTIPLE_ROOTS;
    case 9:
    case "INVALID_DIMENSION_VALUE":
      return AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError.INVALID_DIMENSION_VALUE;
    case 10:
    case "MUST_REFINE_HIERARCHICAL_PARENT_TYPE":
      return AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError
        .MUST_REFINE_HIERARCHICAL_PARENT_TYPE;
    case 11:
    case "INVALID_PRODUCT_BIDDING_CATEGORY":
      return AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError.INVALID_PRODUCT_BIDDING_CATEGORY;
    case 12:
    case "CHANGING_CASE_VALUE_WITH_CHILDREN":
      return AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError.CHANGING_CASE_VALUE_WITH_CHILDREN;
    case 13:
    case "SUBDIVISION_HAS_CHILDREN":
      return AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError.SUBDIVISION_HAS_CHILDREN;
    case 14:
    case "CANNOT_REFINE_HIERARCHICAL_EVERYTHING_ELSE":
      return AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError
        .CANNOT_REFINE_HIERARCHICAL_EVERYTHING_ELSE;
    case 15:
    case "DIMENSION_TYPE_NOT_ALLOWED":
      return AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError.DIMENSION_TYPE_NOT_ALLOWED;
    case 16:
    case "DUPLICATE_WEBPAGE_FILTER_UNDER_ASSET_GROUP":
      return AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError
        .DUPLICATE_WEBPAGE_FILTER_UNDER_ASSET_GROUP;
    case 17:
    case "LISTING_SOURCE_NOT_ALLOWED":
      return AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError.LISTING_SOURCE_NOT_ALLOWED;
    case 18:
    case "FILTER_EXCLUSION_NOT_ALLOWED":
      return AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError.FILTER_EXCLUSION_NOT_ALLOWED;
    case 19:
    case "MULTIPLE_LISTING_SOURCES":
      return AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError.MULTIPLE_LISTING_SOURCES;
    case 20:
    case "MULTIPLE_WEBPAGE_CONDITION_TYPES_NOT_ALLOWED":
      return AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError
        .MULTIPLE_WEBPAGE_CONDITION_TYPES_NOT_ALLOWED;
    case 21:
    case "MULTIPLE_WEBPAGE_TYPES_PER_ASSET_GROUP":
      return AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError
        .MULTIPLE_WEBPAGE_TYPES_PER_ASSET_GROUP;
    case 22:
    case "PAGE_FEED_FILTER_HAS_PARENT":
      return AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError.PAGE_FEED_FILTER_HAS_PARENT;
    case 23:
    case "MULTIPLE_OPERATIONS_ON_ONE_NODE":
      return AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError.MULTIPLE_OPERATIONS_ON_ONE_NODE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError.UNRECOGNIZED;
  }
}

export function assetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterErrorToJSON(
  object: AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError,
): string {
  switch (object) {
    case AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError.UNSPECIFIED:
      return "UNSPECIFIED";
    case AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError.UNKNOWN:
      return "UNKNOWN";
    case AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError.TREE_TOO_DEEP:
      return "TREE_TOO_DEEP";
    case AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError.UNIT_CANNOT_HAVE_CHILDREN:
      return "UNIT_CANNOT_HAVE_CHILDREN";
    case AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError
      .SUBDIVISION_MUST_HAVE_EVERYTHING_ELSE_CHILD:
      return "SUBDIVISION_MUST_HAVE_EVERYTHING_ELSE_CHILD";
    case AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError
      .DIFFERENT_DIMENSION_TYPE_BETWEEN_SIBLINGS:
      return "DIFFERENT_DIMENSION_TYPE_BETWEEN_SIBLINGS";
    case AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError.SAME_DIMENSION_VALUE_BETWEEN_SIBLINGS:
      return "SAME_DIMENSION_VALUE_BETWEEN_SIBLINGS";
    case AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError.SAME_DIMENSION_TYPE_BETWEEN_ANCESTORS:
      return "SAME_DIMENSION_TYPE_BETWEEN_ANCESTORS";
    case AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError.MULTIPLE_ROOTS:
      return "MULTIPLE_ROOTS";
    case AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError.INVALID_DIMENSION_VALUE:
      return "INVALID_DIMENSION_VALUE";
    case AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError.MUST_REFINE_HIERARCHICAL_PARENT_TYPE:
      return "MUST_REFINE_HIERARCHICAL_PARENT_TYPE";
    case AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError.INVALID_PRODUCT_BIDDING_CATEGORY:
      return "INVALID_PRODUCT_BIDDING_CATEGORY";
    case AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError.CHANGING_CASE_VALUE_WITH_CHILDREN:
      return "CHANGING_CASE_VALUE_WITH_CHILDREN";
    case AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError.SUBDIVISION_HAS_CHILDREN:
      return "SUBDIVISION_HAS_CHILDREN";
    case AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError
      .CANNOT_REFINE_HIERARCHICAL_EVERYTHING_ELSE:
      return "CANNOT_REFINE_HIERARCHICAL_EVERYTHING_ELSE";
    case AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError.DIMENSION_TYPE_NOT_ALLOWED:
      return "DIMENSION_TYPE_NOT_ALLOWED";
    case AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError
      .DUPLICATE_WEBPAGE_FILTER_UNDER_ASSET_GROUP:
      return "DUPLICATE_WEBPAGE_FILTER_UNDER_ASSET_GROUP";
    case AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError.LISTING_SOURCE_NOT_ALLOWED:
      return "LISTING_SOURCE_NOT_ALLOWED";
    case AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError.FILTER_EXCLUSION_NOT_ALLOWED:
      return "FILTER_EXCLUSION_NOT_ALLOWED";
    case AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError.MULTIPLE_LISTING_SOURCES:
      return "MULTIPLE_LISTING_SOURCES";
    case AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError
      .MULTIPLE_WEBPAGE_CONDITION_TYPES_NOT_ALLOWED:
      return "MULTIPLE_WEBPAGE_CONDITION_TYPES_NOT_ALLOWED";
    case AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError.MULTIPLE_WEBPAGE_TYPES_PER_ASSET_GROUP:
      return "MULTIPLE_WEBPAGE_TYPES_PER_ASSET_GROUP";
    case AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError.PAGE_FEED_FILTER_HAS_PARENT:
      return "PAGE_FEED_FILTER_HAS_PARENT";
    case AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError.MULTIPLE_OPERATIONS_ON_ONE_NODE:
      return "MULTIPLE_OPERATIONS_ON_ONE_NODE";
    case AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseAssetGroupListingGroupFilterErrorEnum(): AssetGroupListingGroupFilterErrorEnum {
  return {};
}

export const AssetGroupListingGroupFilterErrorEnum: MessageFns<AssetGroupListingGroupFilterErrorEnum> = {
  encode(_: AssetGroupListingGroupFilterErrorEnum, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AssetGroupListingGroupFilterErrorEnum {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAssetGroupListingGroupFilterErrorEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): AssetGroupListingGroupFilterErrorEnum {
    return {};
  },

  toJSON(_: AssetGroupListingGroupFilterErrorEnum): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<AssetGroupListingGroupFilterErrorEnum>): AssetGroupListingGroupFilterErrorEnum {
    return AssetGroupListingGroupFilterErrorEnum.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<AssetGroupListingGroupFilterErrorEnum>): AssetGroupListingGroupFilterErrorEnum {
    const message = createBaseAssetGroupListingGroupFilterErrorEnum();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
