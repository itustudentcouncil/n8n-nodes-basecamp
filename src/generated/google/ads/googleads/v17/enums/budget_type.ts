// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v17/enums/budget_type.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.googleads.v17.enums";

/** Describes Budget types. */
export interface BudgetTypeEnum {
}

/** Possible Budget types. */
export enum BudgetTypeEnum_BudgetType {
  /** UNSPECIFIED - Not specified. */
  UNSPECIFIED = 0,
  /** UNKNOWN - Used for return value only. Represents value unknown in this version. */
  UNKNOWN = 1,
  /**
   * STANDARD - Budget type for standard Google Ads usage.
   * Caps daily spend at two times the specified budget amount.
   * Full details: https://support.google.com/google-ads/answer/6385083
   */
  STANDARD = 2,
  /**
   * FIXED_CPA - Budget type with a fixed cost-per-acquisition (conversion).
   * Full details: https://support.google.com/google-ads/answer/7528254
   *
   * This type is only supported by campaigns with
   * AdvertisingChannelType.DISPLAY (excluding
   * AdvertisingChannelSubType.DISPLAY_GMAIL),
   * BiddingStrategyType.TARGET_CPA and PaymentMode.CONVERSIONS.
   */
  FIXED_CPA = 4,
  /**
   * SMART_CAMPAIGN - Budget type for Smart Campaign.
   * Full details: https://support.google.com/google-ads/answer/7653509
   *
   * This type is only supported by campaigns with
   * AdvertisingChannelType.SMART and
   * AdvertisingChannelSubType.SMART_CAMPAIGN.
   */
  SMART_CAMPAIGN = 5,
  /**
   * LOCAL_SERVICES - Budget type for Local Services Campaign.
   * Full details: https://support.google.com/localservices/answer/7434558
   *
   * This type is only supported by campaigns with
   * AdvertisingChannelType.LOCAL_SERVICES.
   */
  LOCAL_SERVICES = 6,
  UNRECOGNIZED = -1,
}

export function budgetTypeEnum_BudgetTypeFromJSON(object: any): BudgetTypeEnum_BudgetType {
  switch (object) {
    case 0:
    case "UNSPECIFIED":
      return BudgetTypeEnum_BudgetType.UNSPECIFIED;
    case 1:
    case "UNKNOWN":
      return BudgetTypeEnum_BudgetType.UNKNOWN;
    case 2:
    case "STANDARD":
      return BudgetTypeEnum_BudgetType.STANDARD;
    case 4:
    case "FIXED_CPA":
      return BudgetTypeEnum_BudgetType.FIXED_CPA;
    case 5:
    case "SMART_CAMPAIGN":
      return BudgetTypeEnum_BudgetType.SMART_CAMPAIGN;
    case 6:
    case "LOCAL_SERVICES":
      return BudgetTypeEnum_BudgetType.LOCAL_SERVICES;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BudgetTypeEnum_BudgetType.UNRECOGNIZED;
  }
}

export function budgetTypeEnum_BudgetTypeToJSON(object: BudgetTypeEnum_BudgetType): string {
  switch (object) {
    case BudgetTypeEnum_BudgetType.UNSPECIFIED:
      return "UNSPECIFIED";
    case BudgetTypeEnum_BudgetType.UNKNOWN:
      return "UNKNOWN";
    case BudgetTypeEnum_BudgetType.STANDARD:
      return "STANDARD";
    case BudgetTypeEnum_BudgetType.FIXED_CPA:
      return "FIXED_CPA";
    case BudgetTypeEnum_BudgetType.SMART_CAMPAIGN:
      return "SMART_CAMPAIGN";
    case BudgetTypeEnum_BudgetType.LOCAL_SERVICES:
      return "LOCAL_SERVICES";
    case BudgetTypeEnum_BudgetType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseBudgetTypeEnum(): BudgetTypeEnum {
  return {};
}

export const BudgetTypeEnum: MessageFns<BudgetTypeEnum> = {
  encode(_: BudgetTypeEnum, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BudgetTypeEnum {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBudgetTypeEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): BudgetTypeEnum {
    return {};
  },

  toJSON(_: BudgetTypeEnum): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<BudgetTypeEnum>): BudgetTypeEnum {
    return BudgetTypeEnum.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<BudgetTypeEnum>): BudgetTypeEnum {
    const message = createBaseBudgetTypeEnum();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
