// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v17/enums/location_placeholder_field.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.googleads.v17.enums";

/** Values for Location placeholder fields. */
export interface LocationPlaceholderFieldEnum {
}

/** Possible values for Location placeholder fields. */
export enum LocationPlaceholderFieldEnum_LocationPlaceholderField {
  /** UNSPECIFIED - Not specified. */
  UNSPECIFIED = 0,
  /** UNKNOWN - Used for return value only. Represents value unknown in this version. */
  UNKNOWN = 1,
  /** BUSINESS_NAME - Data Type: STRING. The name of the business. */
  BUSINESS_NAME = 2,
  /** ADDRESS_LINE_1 - Data Type: STRING. Line 1 of the business address. */
  ADDRESS_LINE_1 = 3,
  /** ADDRESS_LINE_2 - Data Type: STRING. Line 2 of the business address. */
  ADDRESS_LINE_2 = 4,
  /** CITY - Data Type: STRING. City of the business address. */
  CITY = 5,
  /** PROVINCE - Data Type: STRING. Province of the business address. */
  PROVINCE = 6,
  /** POSTAL_CODE - Data Type: STRING. Postal code of the business address. */
  POSTAL_CODE = 7,
  /** COUNTRY_CODE - Data Type: STRING. Country code of the business address. */
  COUNTRY_CODE = 8,
  /** PHONE_NUMBER - Data Type: STRING. Phone number of the business. */
  PHONE_NUMBER = 9,
  UNRECOGNIZED = -1,
}

export function locationPlaceholderFieldEnum_LocationPlaceholderFieldFromJSON(
  object: any,
): LocationPlaceholderFieldEnum_LocationPlaceholderField {
  switch (object) {
    case 0:
    case "UNSPECIFIED":
      return LocationPlaceholderFieldEnum_LocationPlaceholderField.UNSPECIFIED;
    case 1:
    case "UNKNOWN":
      return LocationPlaceholderFieldEnum_LocationPlaceholderField.UNKNOWN;
    case 2:
    case "BUSINESS_NAME":
      return LocationPlaceholderFieldEnum_LocationPlaceholderField.BUSINESS_NAME;
    case 3:
    case "ADDRESS_LINE_1":
      return LocationPlaceholderFieldEnum_LocationPlaceholderField.ADDRESS_LINE_1;
    case 4:
    case "ADDRESS_LINE_2":
      return LocationPlaceholderFieldEnum_LocationPlaceholderField.ADDRESS_LINE_2;
    case 5:
    case "CITY":
      return LocationPlaceholderFieldEnum_LocationPlaceholderField.CITY;
    case 6:
    case "PROVINCE":
      return LocationPlaceholderFieldEnum_LocationPlaceholderField.PROVINCE;
    case 7:
    case "POSTAL_CODE":
      return LocationPlaceholderFieldEnum_LocationPlaceholderField.POSTAL_CODE;
    case 8:
    case "COUNTRY_CODE":
      return LocationPlaceholderFieldEnum_LocationPlaceholderField.COUNTRY_CODE;
    case 9:
    case "PHONE_NUMBER":
      return LocationPlaceholderFieldEnum_LocationPlaceholderField.PHONE_NUMBER;
    case -1:
    case "UNRECOGNIZED":
    default:
      return LocationPlaceholderFieldEnum_LocationPlaceholderField.UNRECOGNIZED;
  }
}

export function locationPlaceholderFieldEnum_LocationPlaceholderFieldToJSON(
  object: LocationPlaceholderFieldEnum_LocationPlaceholderField,
): string {
  switch (object) {
    case LocationPlaceholderFieldEnum_LocationPlaceholderField.UNSPECIFIED:
      return "UNSPECIFIED";
    case LocationPlaceholderFieldEnum_LocationPlaceholderField.UNKNOWN:
      return "UNKNOWN";
    case LocationPlaceholderFieldEnum_LocationPlaceholderField.BUSINESS_NAME:
      return "BUSINESS_NAME";
    case LocationPlaceholderFieldEnum_LocationPlaceholderField.ADDRESS_LINE_1:
      return "ADDRESS_LINE_1";
    case LocationPlaceholderFieldEnum_LocationPlaceholderField.ADDRESS_LINE_2:
      return "ADDRESS_LINE_2";
    case LocationPlaceholderFieldEnum_LocationPlaceholderField.CITY:
      return "CITY";
    case LocationPlaceholderFieldEnum_LocationPlaceholderField.PROVINCE:
      return "PROVINCE";
    case LocationPlaceholderFieldEnum_LocationPlaceholderField.POSTAL_CODE:
      return "POSTAL_CODE";
    case LocationPlaceholderFieldEnum_LocationPlaceholderField.COUNTRY_CODE:
      return "COUNTRY_CODE";
    case LocationPlaceholderFieldEnum_LocationPlaceholderField.PHONE_NUMBER:
      return "PHONE_NUMBER";
    case LocationPlaceholderFieldEnum_LocationPlaceholderField.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseLocationPlaceholderFieldEnum(): LocationPlaceholderFieldEnum {
  return {};
}

export const LocationPlaceholderFieldEnum: MessageFns<LocationPlaceholderFieldEnum> = {
  encode(_: LocationPlaceholderFieldEnum, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LocationPlaceholderFieldEnum {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLocationPlaceholderFieldEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): LocationPlaceholderFieldEnum {
    return {};
  },

  toJSON(_: LocationPlaceholderFieldEnum): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<LocationPlaceholderFieldEnum>): LocationPlaceholderFieldEnum {
    return LocationPlaceholderFieldEnum.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<LocationPlaceholderFieldEnum>): LocationPlaceholderFieldEnum {
    const message = createBaseLocationPlaceholderFieldEnum();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
