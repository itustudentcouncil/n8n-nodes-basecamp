// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v17/enums/interaction_event_type.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.googleads.v17.enums";

/** Container for enum describing types of payable and free interactions. */
export interface InteractionEventTypeEnum {
}

/** Enum describing possible types of payable and free interactions. */
export enum InteractionEventTypeEnum_InteractionEventType {
  /** UNSPECIFIED - Not specified. */
  UNSPECIFIED = 0,
  /** UNKNOWN - Used for return value only. Represents value unknown in this version. */
  UNKNOWN = 1,
  /**
   * CLICK - Click to site. In most cases, this interaction navigates to an external
   * location, usually the advertiser's landing page. This is also the default
   * InteractionEventType for click events.
   */
  CLICK = 2,
  /** ENGAGEMENT - The user's expressed intent to engage with the ad in-place. */
  ENGAGEMENT = 3,
  /** VIDEO_VIEW - User viewed a video ad. */
  VIDEO_VIEW = 4,
  /**
   * NONE - The default InteractionEventType for ad conversion events.
   * This is used when an ad conversion row does NOT indicate
   * that the free interactions (for example, the ad conversions)
   * should be 'promoted' and reported as part of the core metrics.
   * These are simply other (ad) conversions.
   */
  NONE = 5,
  UNRECOGNIZED = -1,
}

export function interactionEventTypeEnum_InteractionEventTypeFromJSON(
  object: any,
): InteractionEventTypeEnum_InteractionEventType {
  switch (object) {
    case 0:
    case "UNSPECIFIED":
      return InteractionEventTypeEnum_InteractionEventType.UNSPECIFIED;
    case 1:
    case "UNKNOWN":
      return InteractionEventTypeEnum_InteractionEventType.UNKNOWN;
    case 2:
    case "CLICK":
      return InteractionEventTypeEnum_InteractionEventType.CLICK;
    case 3:
    case "ENGAGEMENT":
      return InteractionEventTypeEnum_InteractionEventType.ENGAGEMENT;
    case 4:
    case "VIDEO_VIEW":
      return InteractionEventTypeEnum_InteractionEventType.VIDEO_VIEW;
    case 5:
    case "NONE":
      return InteractionEventTypeEnum_InteractionEventType.NONE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return InteractionEventTypeEnum_InteractionEventType.UNRECOGNIZED;
  }
}

export function interactionEventTypeEnum_InteractionEventTypeToJSON(
  object: InteractionEventTypeEnum_InteractionEventType,
): string {
  switch (object) {
    case InteractionEventTypeEnum_InteractionEventType.UNSPECIFIED:
      return "UNSPECIFIED";
    case InteractionEventTypeEnum_InteractionEventType.UNKNOWN:
      return "UNKNOWN";
    case InteractionEventTypeEnum_InteractionEventType.CLICK:
      return "CLICK";
    case InteractionEventTypeEnum_InteractionEventType.ENGAGEMENT:
      return "ENGAGEMENT";
    case InteractionEventTypeEnum_InteractionEventType.VIDEO_VIEW:
      return "VIDEO_VIEW";
    case InteractionEventTypeEnum_InteractionEventType.NONE:
      return "NONE";
    case InteractionEventTypeEnum_InteractionEventType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseInteractionEventTypeEnum(): InteractionEventTypeEnum {
  return {};
}

export const InteractionEventTypeEnum: MessageFns<InteractionEventTypeEnum> = {
  encode(_: InteractionEventTypeEnum, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InteractionEventTypeEnum {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInteractionEventTypeEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): InteractionEventTypeEnum {
    return {};
  },

  toJSON(_: InteractionEventTypeEnum): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<InteractionEventTypeEnum>): InteractionEventTypeEnum {
    return InteractionEventTypeEnum.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<InteractionEventTypeEnum>): InteractionEventTypeEnum {
    const message = createBaseInteractionEventTypeEnum();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
