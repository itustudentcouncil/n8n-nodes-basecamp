// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v17/enums/brand_safety_suitability.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.googleads.v17.enums";

/** Container for enum with 3-Tier brand safety suitability control. */
export interface BrandSafetySuitabilityEnum {
}

/** 3-Tier brand safety suitability control. */
export enum BrandSafetySuitabilityEnum_BrandSafetySuitability {
  /** UNSPECIFIED - Not specified. */
  UNSPECIFIED = 0,
  /** UNKNOWN - Used for return value only. Represents value unknown in this version. */
  UNKNOWN = 1,
  /**
   * EXPANDED_INVENTORY - This option lets you show ads across all inventory on YouTube and video
   * partners that meet our standards for monetization. This option may be an
   * appropriate choice for brands that want maximum access to the full
   * breadth of videos eligible for ads, including, for example, videos that
   * have strong profanity in the context of comedy or a documentary, or
   * excessive violence as featured in video games.
   */
  EXPANDED_INVENTORY = 2,
  /**
   * STANDARD_INVENTORY - This option lets you show ads across a wide range of content that's
   * appropriate for most brands, such as popular music videos, documentaries,
   * and movie trailers. The content you can show ads on is based on YouTube's
   * advertiser-friendly content guidelines that take into account, for
   * example, the strength or frequency of profanity, or the appropriateness
   * of subject matter like sensitive events. Ads won't show, for example, on
   * content with repeated strong profanity, strong sexual content, or graphic
   * violence.
   */
  STANDARD_INVENTORY = 3,
  /**
   * LIMITED_INVENTORY - This option lets you show ads on a reduced range of content that's
   * appropriate for brands with particularly strict guidelines around
   * inappropriate language and sexual suggestiveness; above and beyond what
   * YouTube's advertiser-friendly content guidelines address. The videos
   * accessible in this sensitive category meet heightened requirements,
   * especially for inappropriate language and sexual suggestiveness. For
   * example, your ads will be excluded from showing on some of YouTube's most
   * popular music videos and other pop culture content across YouTube and
   * Google video partners.
   */
  LIMITED_INVENTORY = 4,
  UNRECOGNIZED = -1,
}

export function brandSafetySuitabilityEnum_BrandSafetySuitabilityFromJSON(
  object: any,
): BrandSafetySuitabilityEnum_BrandSafetySuitability {
  switch (object) {
    case 0:
    case "UNSPECIFIED":
      return BrandSafetySuitabilityEnum_BrandSafetySuitability.UNSPECIFIED;
    case 1:
    case "UNKNOWN":
      return BrandSafetySuitabilityEnum_BrandSafetySuitability.UNKNOWN;
    case 2:
    case "EXPANDED_INVENTORY":
      return BrandSafetySuitabilityEnum_BrandSafetySuitability.EXPANDED_INVENTORY;
    case 3:
    case "STANDARD_INVENTORY":
      return BrandSafetySuitabilityEnum_BrandSafetySuitability.STANDARD_INVENTORY;
    case 4:
    case "LIMITED_INVENTORY":
      return BrandSafetySuitabilityEnum_BrandSafetySuitability.LIMITED_INVENTORY;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BrandSafetySuitabilityEnum_BrandSafetySuitability.UNRECOGNIZED;
  }
}

export function brandSafetySuitabilityEnum_BrandSafetySuitabilityToJSON(
  object: BrandSafetySuitabilityEnum_BrandSafetySuitability,
): string {
  switch (object) {
    case BrandSafetySuitabilityEnum_BrandSafetySuitability.UNSPECIFIED:
      return "UNSPECIFIED";
    case BrandSafetySuitabilityEnum_BrandSafetySuitability.UNKNOWN:
      return "UNKNOWN";
    case BrandSafetySuitabilityEnum_BrandSafetySuitability.EXPANDED_INVENTORY:
      return "EXPANDED_INVENTORY";
    case BrandSafetySuitabilityEnum_BrandSafetySuitability.STANDARD_INVENTORY:
      return "STANDARD_INVENTORY";
    case BrandSafetySuitabilityEnum_BrandSafetySuitability.LIMITED_INVENTORY:
      return "LIMITED_INVENTORY";
    case BrandSafetySuitabilityEnum_BrandSafetySuitability.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseBrandSafetySuitabilityEnum(): BrandSafetySuitabilityEnum {
  return {};
}

export const BrandSafetySuitabilityEnum: MessageFns<BrandSafetySuitabilityEnum> = {
  encode(_: BrandSafetySuitabilityEnum, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BrandSafetySuitabilityEnum {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBrandSafetySuitabilityEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): BrandSafetySuitabilityEnum {
    return {};
  },

  toJSON(_: BrandSafetySuitabilityEnum): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<BrandSafetySuitabilityEnum>): BrandSafetySuitabilityEnum {
    return BrandSafetySuitabilityEnum.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<BrandSafetySuitabilityEnum>): BrandSafetySuitabilityEnum {
    const message = createBaseBrandSafetySuitabilityEnum();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
