// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v17/enums/experiment_metric.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.googleads.v17.enums";

/** Container for enum describing the type of experiment metric. */
export interface ExperimentMetricEnum {
}

/** The type of experiment metric. */
export enum ExperimentMetricEnum_ExperimentMetric {
  /** UNSPECIFIED - Not specified. */
  UNSPECIFIED = 0,
  /** UNKNOWN - The value is unknown in this version. */
  UNKNOWN = 1,
  /** CLICKS - The goal of the experiment is clicks. */
  CLICKS = 2,
  /** IMPRESSIONS - The goal of the experiment is impressions. */
  IMPRESSIONS = 3,
  /** COST - The goal of the experiment is cost. */
  COST = 4,
  /** CONVERSIONS_PER_INTERACTION_RATE - The goal of the experiment is conversion rate. */
  CONVERSIONS_PER_INTERACTION_RATE = 5,
  /** COST_PER_CONVERSION - The goal of the experiment is cost per conversion. */
  COST_PER_CONVERSION = 6,
  /** CONVERSIONS_VALUE_PER_COST - The goal of the experiment is conversion value per cost. */
  CONVERSIONS_VALUE_PER_COST = 7,
  /** AVERAGE_CPC - The goal of the experiment is avg cpc. */
  AVERAGE_CPC = 8,
  /** CTR - The goal of the experiment is ctr. */
  CTR = 9,
  /** INCREMENTAL_CONVERSIONS - The goal of the experiment is incremental conversions. */
  INCREMENTAL_CONVERSIONS = 10,
  /** COMPLETED_VIDEO_VIEWS - The goal of the experiment is completed video views. */
  COMPLETED_VIDEO_VIEWS = 11,
  /** CUSTOM_ALGORITHMS - The goal of the experiment is custom algorithms. */
  CUSTOM_ALGORITHMS = 12,
  /** CONVERSIONS - The goal of the experiment is conversions. */
  CONVERSIONS = 13,
  /** CONVERSION_VALUE - The goal of the experiment is conversion value. */
  CONVERSION_VALUE = 14,
  UNRECOGNIZED = -1,
}

export function experimentMetricEnum_ExperimentMetricFromJSON(object: any): ExperimentMetricEnum_ExperimentMetric {
  switch (object) {
    case 0:
    case "UNSPECIFIED":
      return ExperimentMetricEnum_ExperimentMetric.UNSPECIFIED;
    case 1:
    case "UNKNOWN":
      return ExperimentMetricEnum_ExperimentMetric.UNKNOWN;
    case 2:
    case "CLICKS":
      return ExperimentMetricEnum_ExperimentMetric.CLICKS;
    case 3:
    case "IMPRESSIONS":
      return ExperimentMetricEnum_ExperimentMetric.IMPRESSIONS;
    case 4:
    case "COST":
      return ExperimentMetricEnum_ExperimentMetric.COST;
    case 5:
    case "CONVERSIONS_PER_INTERACTION_RATE":
      return ExperimentMetricEnum_ExperimentMetric.CONVERSIONS_PER_INTERACTION_RATE;
    case 6:
    case "COST_PER_CONVERSION":
      return ExperimentMetricEnum_ExperimentMetric.COST_PER_CONVERSION;
    case 7:
    case "CONVERSIONS_VALUE_PER_COST":
      return ExperimentMetricEnum_ExperimentMetric.CONVERSIONS_VALUE_PER_COST;
    case 8:
    case "AVERAGE_CPC":
      return ExperimentMetricEnum_ExperimentMetric.AVERAGE_CPC;
    case 9:
    case "CTR":
      return ExperimentMetricEnum_ExperimentMetric.CTR;
    case 10:
    case "INCREMENTAL_CONVERSIONS":
      return ExperimentMetricEnum_ExperimentMetric.INCREMENTAL_CONVERSIONS;
    case 11:
    case "COMPLETED_VIDEO_VIEWS":
      return ExperimentMetricEnum_ExperimentMetric.COMPLETED_VIDEO_VIEWS;
    case 12:
    case "CUSTOM_ALGORITHMS":
      return ExperimentMetricEnum_ExperimentMetric.CUSTOM_ALGORITHMS;
    case 13:
    case "CONVERSIONS":
      return ExperimentMetricEnum_ExperimentMetric.CONVERSIONS;
    case 14:
    case "CONVERSION_VALUE":
      return ExperimentMetricEnum_ExperimentMetric.CONVERSION_VALUE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ExperimentMetricEnum_ExperimentMetric.UNRECOGNIZED;
  }
}

export function experimentMetricEnum_ExperimentMetricToJSON(object: ExperimentMetricEnum_ExperimentMetric): string {
  switch (object) {
    case ExperimentMetricEnum_ExperimentMetric.UNSPECIFIED:
      return "UNSPECIFIED";
    case ExperimentMetricEnum_ExperimentMetric.UNKNOWN:
      return "UNKNOWN";
    case ExperimentMetricEnum_ExperimentMetric.CLICKS:
      return "CLICKS";
    case ExperimentMetricEnum_ExperimentMetric.IMPRESSIONS:
      return "IMPRESSIONS";
    case ExperimentMetricEnum_ExperimentMetric.COST:
      return "COST";
    case ExperimentMetricEnum_ExperimentMetric.CONVERSIONS_PER_INTERACTION_RATE:
      return "CONVERSIONS_PER_INTERACTION_RATE";
    case ExperimentMetricEnum_ExperimentMetric.COST_PER_CONVERSION:
      return "COST_PER_CONVERSION";
    case ExperimentMetricEnum_ExperimentMetric.CONVERSIONS_VALUE_PER_COST:
      return "CONVERSIONS_VALUE_PER_COST";
    case ExperimentMetricEnum_ExperimentMetric.AVERAGE_CPC:
      return "AVERAGE_CPC";
    case ExperimentMetricEnum_ExperimentMetric.CTR:
      return "CTR";
    case ExperimentMetricEnum_ExperimentMetric.INCREMENTAL_CONVERSIONS:
      return "INCREMENTAL_CONVERSIONS";
    case ExperimentMetricEnum_ExperimentMetric.COMPLETED_VIDEO_VIEWS:
      return "COMPLETED_VIDEO_VIEWS";
    case ExperimentMetricEnum_ExperimentMetric.CUSTOM_ALGORITHMS:
      return "CUSTOM_ALGORITHMS";
    case ExperimentMetricEnum_ExperimentMetric.CONVERSIONS:
      return "CONVERSIONS";
    case ExperimentMetricEnum_ExperimentMetric.CONVERSION_VALUE:
      return "CONVERSION_VALUE";
    case ExperimentMetricEnum_ExperimentMetric.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseExperimentMetricEnum(): ExperimentMetricEnum {
  return {};
}

export const ExperimentMetricEnum: MessageFns<ExperimentMetricEnum> = {
  encode(_: ExperimentMetricEnum, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExperimentMetricEnum {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExperimentMetricEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ExperimentMetricEnum {
    return {};
  },

  toJSON(_: ExperimentMetricEnum): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<ExperimentMetricEnum>): ExperimentMetricEnum {
    return ExperimentMetricEnum.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<ExperimentMetricEnum>): ExperimentMetricEnum {
    const message = createBaseExperimentMetricEnum();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
