// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v17/enums/slot.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.googleads.v17.enums";

/** Container for enumeration of possible positions of the Ad. */
export interface SlotEnum {
}

/** Enumerates possible positions of the Ad. */
export enum SlotEnum_Slot {
  /** UNSPECIFIED - Not specified. */
  UNSPECIFIED = 0,
  /** UNKNOWN - The value is unknown in this version. */
  UNKNOWN = 1,
  /** SEARCH_SIDE - Google search: Side. */
  SEARCH_SIDE = 2,
  /** SEARCH_TOP - Google search: Top. */
  SEARCH_TOP = 3,
  /** SEARCH_OTHER - Google search: Other. */
  SEARCH_OTHER = 4,
  /** CONTENT - Google Display Network. */
  CONTENT = 5,
  /** SEARCH_PARTNER_TOP - Search partners: Top. */
  SEARCH_PARTNER_TOP = 6,
  /** SEARCH_PARTNER_OTHER - Search partners: Other. */
  SEARCH_PARTNER_OTHER = 7,
  /** MIXED - Cross-network. */
  MIXED = 8,
  UNRECOGNIZED = -1,
}

export function slotEnum_SlotFromJSON(object: any): SlotEnum_Slot {
  switch (object) {
    case 0:
    case "UNSPECIFIED":
      return SlotEnum_Slot.UNSPECIFIED;
    case 1:
    case "UNKNOWN":
      return SlotEnum_Slot.UNKNOWN;
    case 2:
    case "SEARCH_SIDE":
      return SlotEnum_Slot.SEARCH_SIDE;
    case 3:
    case "SEARCH_TOP":
      return SlotEnum_Slot.SEARCH_TOP;
    case 4:
    case "SEARCH_OTHER":
      return SlotEnum_Slot.SEARCH_OTHER;
    case 5:
    case "CONTENT":
      return SlotEnum_Slot.CONTENT;
    case 6:
    case "SEARCH_PARTNER_TOP":
      return SlotEnum_Slot.SEARCH_PARTNER_TOP;
    case 7:
    case "SEARCH_PARTNER_OTHER":
      return SlotEnum_Slot.SEARCH_PARTNER_OTHER;
    case 8:
    case "MIXED":
      return SlotEnum_Slot.MIXED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SlotEnum_Slot.UNRECOGNIZED;
  }
}

export function slotEnum_SlotToJSON(object: SlotEnum_Slot): string {
  switch (object) {
    case SlotEnum_Slot.UNSPECIFIED:
      return "UNSPECIFIED";
    case SlotEnum_Slot.UNKNOWN:
      return "UNKNOWN";
    case SlotEnum_Slot.SEARCH_SIDE:
      return "SEARCH_SIDE";
    case SlotEnum_Slot.SEARCH_TOP:
      return "SEARCH_TOP";
    case SlotEnum_Slot.SEARCH_OTHER:
      return "SEARCH_OTHER";
    case SlotEnum_Slot.CONTENT:
      return "CONTENT";
    case SlotEnum_Slot.SEARCH_PARTNER_TOP:
      return "SEARCH_PARTNER_TOP";
    case SlotEnum_Slot.SEARCH_PARTNER_OTHER:
      return "SEARCH_PARTNER_OTHER";
    case SlotEnum_Slot.MIXED:
      return "MIXED";
    case SlotEnum_Slot.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseSlotEnum(): SlotEnum {
  return {};
}

export const SlotEnum: MessageFns<SlotEnum> = {
  encode(_: SlotEnum, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SlotEnum {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSlotEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): SlotEnum {
    return {};
  },

  toJSON(_: SlotEnum): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<SlotEnum>): SlotEnum {
    return SlotEnum.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<SlotEnum>): SlotEnum {
    const message = createBaseSlotEnum();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
