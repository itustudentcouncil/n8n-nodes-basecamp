// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v17/enums/price_extension_type.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.googleads.v17.enums";

/** Container for enum describing types for a price extension. */
export interface PriceExtensionTypeEnum {
}

/** Price extension type. */
export enum PriceExtensionTypeEnum_PriceExtensionType {
  /** UNSPECIFIED - Not specified. */
  UNSPECIFIED = 0,
  /** UNKNOWN - Used for return value only. Represents value unknown in this version. */
  UNKNOWN = 1,
  /** BRANDS - The type for showing a list of brands. */
  BRANDS = 2,
  /** EVENTS - The type for showing a list of events. */
  EVENTS = 3,
  /** LOCATIONS - The type for showing locations relevant to your business. */
  LOCATIONS = 4,
  /** NEIGHBORHOODS - The type for showing sub-regions or districts within a city or region. */
  NEIGHBORHOODS = 5,
  /** PRODUCT_CATEGORIES - The type for showing a collection of product categories. */
  PRODUCT_CATEGORIES = 6,
  /** PRODUCT_TIERS - The type for showing a collection of related product tiers. */
  PRODUCT_TIERS = 7,
  /** SERVICES - The type for showing a collection of services offered by your business. */
  SERVICES = 8,
  /** SERVICE_CATEGORIES - The type for showing a collection of service categories. */
  SERVICE_CATEGORIES = 9,
  /** SERVICE_TIERS - The type for showing a collection of related service tiers. */
  SERVICE_TIERS = 10,
  UNRECOGNIZED = -1,
}

export function priceExtensionTypeEnum_PriceExtensionTypeFromJSON(
  object: any,
): PriceExtensionTypeEnum_PriceExtensionType {
  switch (object) {
    case 0:
    case "UNSPECIFIED":
      return PriceExtensionTypeEnum_PriceExtensionType.UNSPECIFIED;
    case 1:
    case "UNKNOWN":
      return PriceExtensionTypeEnum_PriceExtensionType.UNKNOWN;
    case 2:
    case "BRANDS":
      return PriceExtensionTypeEnum_PriceExtensionType.BRANDS;
    case 3:
    case "EVENTS":
      return PriceExtensionTypeEnum_PriceExtensionType.EVENTS;
    case 4:
    case "LOCATIONS":
      return PriceExtensionTypeEnum_PriceExtensionType.LOCATIONS;
    case 5:
    case "NEIGHBORHOODS":
      return PriceExtensionTypeEnum_PriceExtensionType.NEIGHBORHOODS;
    case 6:
    case "PRODUCT_CATEGORIES":
      return PriceExtensionTypeEnum_PriceExtensionType.PRODUCT_CATEGORIES;
    case 7:
    case "PRODUCT_TIERS":
      return PriceExtensionTypeEnum_PriceExtensionType.PRODUCT_TIERS;
    case 8:
    case "SERVICES":
      return PriceExtensionTypeEnum_PriceExtensionType.SERVICES;
    case 9:
    case "SERVICE_CATEGORIES":
      return PriceExtensionTypeEnum_PriceExtensionType.SERVICE_CATEGORIES;
    case 10:
    case "SERVICE_TIERS":
      return PriceExtensionTypeEnum_PriceExtensionType.SERVICE_TIERS;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PriceExtensionTypeEnum_PriceExtensionType.UNRECOGNIZED;
  }
}

export function priceExtensionTypeEnum_PriceExtensionTypeToJSON(
  object: PriceExtensionTypeEnum_PriceExtensionType,
): string {
  switch (object) {
    case PriceExtensionTypeEnum_PriceExtensionType.UNSPECIFIED:
      return "UNSPECIFIED";
    case PriceExtensionTypeEnum_PriceExtensionType.UNKNOWN:
      return "UNKNOWN";
    case PriceExtensionTypeEnum_PriceExtensionType.BRANDS:
      return "BRANDS";
    case PriceExtensionTypeEnum_PriceExtensionType.EVENTS:
      return "EVENTS";
    case PriceExtensionTypeEnum_PriceExtensionType.LOCATIONS:
      return "LOCATIONS";
    case PriceExtensionTypeEnum_PriceExtensionType.NEIGHBORHOODS:
      return "NEIGHBORHOODS";
    case PriceExtensionTypeEnum_PriceExtensionType.PRODUCT_CATEGORIES:
      return "PRODUCT_CATEGORIES";
    case PriceExtensionTypeEnum_PriceExtensionType.PRODUCT_TIERS:
      return "PRODUCT_TIERS";
    case PriceExtensionTypeEnum_PriceExtensionType.SERVICES:
      return "SERVICES";
    case PriceExtensionTypeEnum_PriceExtensionType.SERVICE_CATEGORIES:
      return "SERVICE_CATEGORIES";
    case PriceExtensionTypeEnum_PriceExtensionType.SERVICE_TIERS:
      return "SERVICE_TIERS";
    case PriceExtensionTypeEnum_PriceExtensionType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBasePriceExtensionTypeEnum(): PriceExtensionTypeEnum {
  return {};
}

export const PriceExtensionTypeEnum: MessageFns<PriceExtensionTypeEnum> = {
  encode(_: PriceExtensionTypeEnum, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PriceExtensionTypeEnum {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePriceExtensionTypeEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): PriceExtensionTypeEnum {
    return {};
  },

  toJSON(_: PriceExtensionTypeEnum): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<PriceExtensionTypeEnum>): PriceExtensionTypeEnum {
    return PriceExtensionTypeEnum.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<PriceExtensionTypeEnum>): PriceExtensionTypeEnum {
    const message = createBasePriceExtensionTypeEnum();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
