// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v17/enums/placeholder_type.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.googleads.v17.enums";

/** Container for enum describing possible placeholder types for a feed mapping. */
export interface PlaceholderTypeEnum {
}

/** Possible placeholder types for a feed mapping. */
export enum PlaceholderTypeEnum_PlaceholderType {
  /** UNSPECIFIED - Not specified. */
  UNSPECIFIED = 0,
  /** UNKNOWN - Used for return value only. Represents value unknown in this version. */
  UNKNOWN = 1,
  /**
   * SITELINK - Lets you show links in your ad to pages from your website, including the
   * main landing page.
   */
  SITELINK = 2,
  /**
   * CALL - Lets you attach a phone number to an ad, allowing customers to call
   * directly from the ad.
   */
  CALL = 3,
  /**
   * APP - Lets you provide users with a link that points to a mobile app in
   * addition to a website.
   */
  APP = 4,
  /**
   * LOCATION - Lets you show locations of businesses from your Business Profile
   * in your ad. This helps people find your locations by showing your
   * ads with your address, a map to your location, or the distance to your
   * business. This extension type is useful to draw customers to your
   * brick-and-mortar location.
   */
  LOCATION = 5,
  /**
   * AFFILIATE_LOCATION - If you sell your product through retail chains, affiliate location
   * extensions let you show nearby stores that carry your products.
   */
  AFFILIATE_LOCATION = 6,
  /**
   * CALLOUT - Lets you include additional text with your search ads that provide
   * detailed information about your business, including products and services
   * you offer. Callouts appear in ads at the top and bottom of Google search
   * results.
   */
  CALLOUT = 7,
  /**
   * STRUCTURED_SNIPPET - Lets you add more info to your ad, specific to some predefined categories
   * such as types, brands, styles, etc. A minimum of 3 text (SNIPPETS) values
   * are required.
   */
  STRUCTURED_SNIPPET = 8,
  /**
   * MESSAGE - Allows users to see your ad, click an icon, and contact you directly by
   * text message. With one tap on your ad, people can contact you to book an
   * appointment, get a quote, ask for information, or request a service.
   */
  MESSAGE = 9,
  /**
   * PRICE - Lets you display prices for a list of items along with your ads. A price
   * feed is composed of three to eight price table rows.
   */
  PRICE = 10,
  /**
   * PROMOTION - Lets you highlight sales and other promotions that let users see how
   * they can save by buying now.
   */
  PROMOTION = 11,
  /**
   * AD_CUSTOMIZER - Lets you dynamically inject custom data into the title and description
   * of your ads.
   */
  AD_CUSTOMIZER = 12,
  /** DYNAMIC_EDUCATION - Indicates that this feed is for education dynamic remarketing. */
  DYNAMIC_EDUCATION = 13,
  /** DYNAMIC_FLIGHT - Indicates that this feed is for flight dynamic remarketing. */
  DYNAMIC_FLIGHT = 14,
  /**
   * DYNAMIC_CUSTOM - Indicates that this feed is for a custom dynamic remarketing type. Use
   * this only if the other business types don't apply to your products or
   * services.
   */
  DYNAMIC_CUSTOM = 15,
  /** DYNAMIC_HOTEL - Indicates that this feed is for hotels and rentals dynamic remarketing. */
  DYNAMIC_HOTEL = 16,
  /** DYNAMIC_REAL_ESTATE - Indicates that this feed is for real estate dynamic remarketing. */
  DYNAMIC_REAL_ESTATE = 17,
  /** DYNAMIC_TRAVEL - Indicates that this feed is for travel dynamic remarketing. */
  DYNAMIC_TRAVEL = 18,
  /** DYNAMIC_LOCAL - Indicates that this feed is for local deals dynamic remarketing. */
  DYNAMIC_LOCAL = 19,
  /** DYNAMIC_JOB - Indicates that this feed is for job dynamic remarketing. */
  DYNAMIC_JOB = 20,
  /** IMAGE - Lets you attach an image to an ad. */
  IMAGE = 21,
  UNRECOGNIZED = -1,
}

export function placeholderTypeEnum_PlaceholderTypeFromJSON(object: any): PlaceholderTypeEnum_PlaceholderType {
  switch (object) {
    case 0:
    case "UNSPECIFIED":
      return PlaceholderTypeEnum_PlaceholderType.UNSPECIFIED;
    case 1:
    case "UNKNOWN":
      return PlaceholderTypeEnum_PlaceholderType.UNKNOWN;
    case 2:
    case "SITELINK":
      return PlaceholderTypeEnum_PlaceholderType.SITELINK;
    case 3:
    case "CALL":
      return PlaceholderTypeEnum_PlaceholderType.CALL;
    case 4:
    case "APP":
      return PlaceholderTypeEnum_PlaceholderType.APP;
    case 5:
    case "LOCATION":
      return PlaceholderTypeEnum_PlaceholderType.LOCATION;
    case 6:
    case "AFFILIATE_LOCATION":
      return PlaceholderTypeEnum_PlaceholderType.AFFILIATE_LOCATION;
    case 7:
    case "CALLOUT":
      return PlaceholderTypeEnum_PlaceholderType.CALLOUT;
    case 8:
    case "STRUCTURED_SNIPPET":
      return PlaceholderTypeEnum_PlaceholderType.STRUCTURED_SNIPPET;
    case 9:
    case "MESSAGE":
      return PlaceholderTypeEnum_PlaceholderType.MESSAGE;
    case 10:
    case "PRICE":
      return PlaceholderTypeEnum_PlaceholderType.PRICE;
    case 11:
    case "PROMOTION":
      return PlaceholderTypeEnum_PlaceholderType.PROMOTION;
    case 12:
    case "AD_CUSTOMIZER":
      return PlaceholderTypeEnum_PlaceholderType.AD_CUSTOMIZER;
    case 13:
    case "DYNAMIC_EDUCATION":
      return PlaceholderTypeEnum_PlaceholderType.DYNAMIC_EDUCATION;
    case 14:
    case "DYNAMIC_FLIGHT":
      return PlaceholderTypeEnum_PlaceholderType.DYNAMIC_FLIGHT;
    case 15:
    case "DYNAMIC_CUSTOM":
      return PlaceholderTypeEnum_PlaceholderType.DYNAMIC_CUSTOM;
    case 16:
    case "DYNAMIC_HOTEL":
      return PlaceholderTypeEnum_PlaceholderType.DYNAMIC_HOTEL;
    case 17:
    case "DYNAMIC_REAL_ESTATE":
      return PlaceholderTypeEnum_PlaceholderType.DYNAMIC_REAL_ESTATE;
    case 18:
    case "DYNAMIC_TRAVEL":
      return PlaceholderTypeEnum_PlaceholderType.DYNAMIC_TRAVEL;
    case 19:
    case "DYNAMIC_LOCAL":
      return PlaceholderTypeEnum_PlaceholderType.DYNAMIC_LOCAL;
    case 20:
    case "DYNAMIC_JOB":
      return PlaceholderTypeEnum_PlaceholderType.DYNAMIC_JOB;
    case 21:
    case "IMAGE":
      return PlaceholderTypeEnum_PlaceholderType.IMAGE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PlaceholderTypeEnum_PlaceholderType.UNRECOGNIZED;
  }
}

export function placeholderTypeEnum_PlaceholderTypeToJSON(object: PlaceholderTypeEnum_PlaceholderType): string {
  switch (object) {
    case PlaceholderTypeEnum_PlaceholderType.UNSPECIFIED:
      return "UNSPECIFIED";
    case PlaceholderTypeEnum_PlaceholderType.UNKNOWN:
      return "UNKNOWN";
    case PlaceholderTypeEnum_PlaceholderType.SITELINK:
      return "SITELINK";
    case PlaceholderTypeEnum_PlaceholderType.CALL:
      return "CALL";
    case PlaceholderTypeEnum_PlaceholderType.APP:
      return "APP";
    case PlaceholderTypeEnum_PlaceholderType.LOCATION:
      return "LOCATION";
    case PlaceholderTypeEnum_PlaceholderType.AFFILIATE_LOCATION:
      return "AFFILIATE_LOCATION";
    case PlaceholderTypeEnum_PlaceholderType.CALLOUT:
      return "CALLOUT";
    case PlaceholderTypeEnum_PlaceholderType.STRUCTURED_SNIPPET:
      return "STRUCTURED_SNIPPET";
    case PlaceholderTypeEnum_PlaceholderType.MESSAGE:
      return "MESSAGE";
    case PlaceholderTypeEnum_PlaceholderType.PRICE:
      return "PRICE";
    case PlaceholderTypeEnum_PlaceholderType.PROMOTION:
      return "PROMOTION";
    case PlaceholderTypeEnum_PlaceholderType.AD_CUSTOMIZER:
      return "AD_CUSTOMIZER";
    case PlaceholderTypeEnum_PlaceholderType.DYNAMIC_EDUCATION:
      return "DYNAMIC_EDUCATION";
    case PlaceholderTypeEnum_PlaceholderType.DYNAMIC_FLIGHT:
      return "DYNAMIC_FLIGHT";
    case PlaceholderTypeEnum_PlaceholderType.DYNAMIC_CUSTOM:
      return "DYNAMIC_CUSTOM";
    case PlaceholderTypeEnum_PlaceholderType.DYNAMIC_HOTEL:
      return "DYNAMIC_HOTEL";
    case PlaceholderTypeEnum_PlaceholderType.DYNAMIC_REAL_ESTATE:
      return "DYNAMIC_REAL_ESTATE";
    case PlaceholderTypeEnum_PlaceholderType.DYNAMIC_TRAVEL:
      return "DYNAMIC_TRAVEL";
    case PlaceholderTypeEnum_PlaceholderType.DYNAMIC_LOCAL:
      return "DYNAMIC_LOCAL";
    case PlaceholderTypeEnum_PlaceholderType.DYNAMIC_JOB:
      return "DYNAMIC_JOB";
    case PlaceholderTypeEnum_PlaceholderType.IMAGE:
      return "IMAGE";
    case PlaceholderTypeEnum_PlaceholderType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBasePlaceholderTypeEnum(): PlaceholderTypeEnum {
  return {};
}

export const PlaceholderTypeEnum: MessageFns<PlaceholderTypeEnum> = {
  encode(_: PlaceholderTypeEnum, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PlaceholderTypeEnum {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlaceholderTypeEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): PlaceholderTypeEnum {
    return {};
  },

  toJSON(_: PlaceholderTypeEnum): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<PlaceholderTypeEnum>): PlaceholderTypeEnum {
    return PlaceholderTypeEnum.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<PlaceholderTypeEnum>): PlaceholderTypeEnum {
    const message = createBasePlaceholderTypeEnum();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
