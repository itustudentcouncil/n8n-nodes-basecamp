// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v17/common/final_app_url.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import {
  AppUrlOperatingSystemTypeEnum_AppUrlOperatingSystemType,
  appUrlOperatingSystemTypeEnum_AppUrlOperatingSystemTypeFromJSON,
  appUrlOperatingSystemTypeEnum_AppUrlOperatingSystemTypeToJSON,
} from "../enums/app_url_operating_system_type.js";

export const protobufPackage = "google.ads.googleads.v17.common";

/** A URL for deep linking into an app for the given operating system. */
export interface FinalAppUrl {
  /** The operating system targeted by this URL. Required. */
  osType: AppUrlOperatingSystemTypeEnum_AppUrlOperatingSystemType;
  /**
   * The app deep link URL. Deep links specify a location in an app that
   * corresponds to the content you'd like to show, and should be of the form
   * {scheme}://{host_path}
   * The scheme identifies which app to open. For your app, you can use a custom
   * scheme that starts with the app's name. The host and path specify the
   * unique location in the app where your content exists.
   * Example: "exampleapp://productid_1234". Required.
   */
  url?: string | undefined;
}

function createBaseFinalAppUrl(): FinalAppUrl {
  return { osType: 0, url: undefined };
}

export const FinalAppUrl: MessageFns<FinalAppUrl> = {
  encode(message: FinalAppUrl, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.osType !== 0) {
      writer.uint32(8).int32(message.osType);
    }
    if (message.url !== undefined) {
      writer.uint32(26).string(message.url);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FinalAppUrl {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFinalAppUrl();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.osType = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.url = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FinalAppUrl {
    return {
      osType: isSet(object.osType) ? appUrlOperatingSystemTypeEnum_AppUrlOperatingSystemTypeFromJSON(object.osType) : 0,
      url: isSet(object.url) ? globalThis.String(object.url) : undefined,
    };
  },

  toJSON(message: FinalAppUrl): unknown {
    const obj: any = {};
    if (message.osType !== 0) {
      obj.osType = appUrlOperatingSystemTypeEnum_AppUrlOperatingSystemTypeToJSON(message.osType);
    }
    if (message.url !== undefined) {
      obj.url = message.url;
    }
    return obj;
  },

  create(base?: DeepPartial<FinalAppUrl>): FinalAppUrl {
    return FinalAppUrl.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FinalAppUrl>): FinalAppUrl {
    const message = createBaseFinalAppUrl();
    message.osType = object.osType ?? 0;
    message.url = object.url ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
