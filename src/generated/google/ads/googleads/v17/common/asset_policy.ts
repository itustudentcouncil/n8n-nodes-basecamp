// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v17/common/asset_policy.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import {
  AssetLinkPrimaryStatusEnum_AssetLinkPrimaryStatus,
  assetLinkPrimaryStatusEnum_AssetLinkPrimaryStatusFromJSON,
  assetLinkPrimaryStatusEnum_AssetLinkPrimaryStatusToJSON,
} from "../enums/asset_link_primary_status.js";
import {
  AssetLinkPrimaryStatusReasonEnum_AssetLinkPrimaryStatusReason,
  assetLinkPrimaryStatusReasonEnum_AssetLinkPrimaryStatusReasonFromJSON,
  assetLinkPrimaryStatusReasonEnum_AssetLinkPrimaryStatusReasonToJSON,
} from "../enums/asset_link_primary_status_reason.js";
import {
  AssetOfflineEvaluationErrorReasonsEnum_AssetOfflineEvaluationErrorReasons,
  assetOfflineEvaluationErrorReasonsEnum_AssetOfflineEvaluationErrorReasonsFromJSON,
  assetOfflineEvaluationErrorReasonsEnum_AssetOfflineEvaluationErrorReasonsToJSON,
} from "../enums/asset_offline_evaluation_error_reasons.js";
import {
  PolicyApprovalStatusEnum_PolicyApprovalStatus,
  policyApprovalStatusEnum_PolicyApprovalStatusFromJSON,
  policyApprovalStatusEnum_PolicyApprovalStatusToJSON,
} from "../enums/policy_approval_status.js";
import {
  PolicyReviewStatusEnum_PolicyReviewStatus,
  policyReviewStatusEnum_PolicyReviewStatusFromJSON,
  policyReviewStatusEnum_PolicyReviewStatusToJSON,
} from "../enums/policy_review_status.js";
import { PolicyTopicEntry } from "./policy.js";

export const protobufPackage = "google.ads.googleads.v17.common";

/** Contains policy information for an asset inside an ad. */
export interface AdAssetPolicySummary {
  /** The list of policy findings for this asset. */
  policyTopicEntries: PolicyTopicEntry[];
  /** Where in the review process this asset. */
  reviewStatus: PolicyReviewStatusEnum_PolicyReviewStatus;
  /**
   * The overall approval status of this asset, which is calculated based on
   * the status of its individual policy topic entries.
   */
  approvalStatus: PolicyApprovalStatusEnum_PolicyApprovalStatus;
}

/**
 * Provides the detail of a PrimaryStatus.
 * Each asset link has a PrimaryStatus value (e.g. NOT_ELIGIBLE, meaning not
 * serving), and list of corroborating PrimaryStatusReasons (e.g.
 * [ASSET_DISAPPROVED]). Each reason may have some additional details
 * annotated with it.  For instance, when the reason is ASSET_DISAPPROVED, the
 * details field will contain additional information about the offline
 * evaluation errors which led to the asset being disapproved.
 */
export interface AssetLinkPrimaryStatusDetails {
  /** Provides the reason of this PrimaryStatus. */
  reason?:
    | AssetLinkPrimaryStatusReasonEnum_AssetLinkPrimaryStatusReason
    | undefined;
  /** Provides the PrimaryStatus of this status detail. */
  status?:
    | AssetLinkPrimaryStatusEnum_AssetLinkPrimaryStatus
    | undefined;
  /** Provides the details for AssetLinkPrimaryStatusReason.ASSET_DISAPPROVED */
  assetDisapproved?: AssetDisapproved | undefined;
}

/** Details related to AssetLinkPrimaryStatusReasonPB.ASSET_DISAPPROVED */
export interface AssetDisapproved {
  /** Provides the quality evaluation disapproval reason of an asset. */
  offlineEvaluationErrorReasons: AssetOfflineEvaluationErrorReasonsEnum_AssetOfflineEvaluationErrorReasons[];
}

function createBaseAdAssetPolicySummary(): AdAssetPolicySummary {
  return { policyTopicEntries: [], reviewStatus: 0, approvalStatus: 0 };
}

export const AdAssetPolicySummary: MessageFns<AdAssetPolicySummary> = {
  encode(message: AdAssetPolicySummary, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.policyTopicEntries) {
      PolicyTopicEntry.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.reviewStatus !== 0) {
      writer.uint32(16).int32(message.reviewStatus);
    }
    if (message.approvalStatus !== 0) {
      writer.uint32(24).int32(message.approvalStatus);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AdAssetPolicySummary {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAdAssetPolicySummary();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.policyTopicEntries.push(PolicyTopicEntry.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.reviewStatus = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.approvalStatus = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AdAssetPolicySummary {
    return {
      policyTopicEntries: globalThis.Array.isArray(object?.policyTopicEntries)
        ? object.policyTopicEntries.map((e: any) => PolicyTopicEntry.fromJSON(e))
        : [],
      reviewStatus: isSet(object.reviewStatus)
        ? policyReviewStatusEnum_PolicyReviewStatusFromJSON(object.reviewStatus)
        : 0,
      approvalStatus: isSet(object.approvalStatus)
        ? policyApprovalStatusEnum_PolicyApprovalStatusFromJSON(object.approvalStatus)
        : 0,
    };
  },

  toJSON(message: AdAssetPolicySummary): unknown {
    const obj: any = {};
    if (message.policyTopicEntries?.length) {
      obj.policyTopicEntries = message.policyTopicEntries.map((e) => PolicyTopicEntry.toJSON(e));
    }
    if (message.reviewStatus !== 0) {
      obj.reviewStatus = policyReviewStatusEnum_PolicyReviewStatusToJSON(message.reviewStatus);
    }
    if (message.approvalStatus !== 0) {
      obj.approvalStatus = policyApprovalStatusEnum_PolicyApprovalStatusToJSON(message.approvalStatus);
    }
    return obj;
  },

  create(base?: DeepPartial<AdAssetPolicySummary>): AdAssetPolicySummary {
    return AdAssetPolicySummary.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AdAssetPolicySummary>): AdAssetPolicySummary {
    const message = createBaseAdAssetPolicySummary();
    message.policyTopicEntries = object.policyTopicEntries?.map((e) => PolicyTopicEntry.fromPartial(e)) || [];
    message.reviewStatus = object.reviewStatus ?? 0;
    message.approvalStatus = object.approvalStatus ?? 0;
    return message;
  },
};

function createBaseAssetLinkPrimaryStatusDetails(): AssetLinkPrimaryStatusDetails {
  return { reason: undefined, status: undefined, assetDisapproved: undefined };
}

export const AssetLinkPrimaryStatusDetails: MessageFns<AssetLinkPrimaryStatusDetails> = {
  encode(message: AssetLinkPrimaryStatusDetails, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.reason !== undefined) {
      writer.uint32(8).int32(message.reason);
    }
    if (message.status !== undefined) {
      writer.uint32(16).int32(message.status);
    }
    if (message.assetDisapproved !== undefined) {
      AssetDisapproved.encode(message.assetDisapproved, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AssetLinkPrimaryStatusDetails {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAssetLinkPrimaryStatusDetails();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.reason = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.assetDisapproved = AssetDisapproved.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AssetLinkPrimaryStatusDetails {
    return {
      reason: isSet(object.reason)
        ? assetLinkPrimaryStatusReasonEnum_AssetLinkPrimaryStatusReasonFromJSON(object.reason)
        : undefined,
      status: isSet(object.status)
        ? assetLinkPrimaryStatusEnum_AssetLinkPrimaryStatusFromJSON(object.status)
        : undefined,
      assetDisapproved: isSet(object.assetDisapproved) ? AssetDisapproved.fromJSON(object.assetDisapproved) : undefined,
    };
  },

  toJSON(message: AssetLinkPrimaryStatusDetails): unknown {
    const obj: any = {};
    if (message.reason !== undefined) {
      obj.reason = assetLinkPrimaryStatusReasonEnum_AssetLinkPrimaryStatusReasonToJSON(message.reason);
    }
    if (message.status !== undefined) {
      obj.status = assetLinkPrimaryStatusEnum_AssetLinkPrimaryStatusToJSON(message.status);
    }
    if (message.assetDisapproved !== undefined) {
      obj.assetDisapproved = AssetDisapproved.toJSON(message.assetDisapproved);
    }
    return obj;
  },

  create(base?: DeepPartial<AssetLinkPrimaryStatusDetails>): AssetLinkPrimaryStatusDetails {
    return AssetLinkPrimaryStatusDetails.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AssetLinkPrimaryStatusDetails>): AssetLinkPrimaryStatusDetails {
    const message = createBaseAssetLinkPrimaryStatusDetails();
    message.reason = object.reason ?? undefined;
    message.status = object.status ?? undefined;
    message.assetDisapproved = (object.assetDisapproved !== undefined && object.assetDisapproved !== null)
      ? AssetDisapproved.fromPartial(object.assetDisapproved)
      : undefined;
    return message;
  },
};

function createBaseAssetDisapproved(): AssetDisapproved {
  return { offlineEvaluationErrorReasons: [] };
}

export const AssetDisapproved: MessageFns<AssetDisapproved> = {
  encode(message: AssetDisapproved, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    writer.uint32(10).fork();
    for (const v of message.offlineEvaluationErrorReasons) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AssetDisapproved {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAssetDisapproved();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag === 8) {
            message.offlineEvaluationErrorReasons.push(reader.int32() as any);

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.offlineEvaluationErrorReasons.push(reader.int32() as any);
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AssetDisapproved {
    return {
      offlineEvaluationErrorReasons: globalThis.Array.isArray(object?.offlineEvaluationErrorReasons)
        ? object.offlineEvaluationErrorReasons.map((e: any) =>
          assetOfflineEvaluationErrorReasonsEnum_AssetOfflineEvaluationErrorReasonsFromJSON(e)
        )
        : [],
    };
  },

  toJSON(message: AssetDisapproved): unknown {
    const obj: any = {};
    if (message.offlineEvaluationErrorReasons?.length) {
      obj.offlineEvaluationErrorReasons = message.offlineEvaluationErrorReasons.map((e) =>
        assetOfflineEvaluationErrorReasonsEnum_AssetOfflineEvaluationErrorReasonsToJSON(e)
      );
    }
    return obj;
  },

  create(base?: DeepPartial<AssetDisapproved>): AssetDisapproved {
    return AssetDisapproved.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AssetDisapproved>): AssetDisapproved {
    const message = createBaseAssetDisapproved();
    message.offlineEvaluationErrorReasons = object.offlineEvaluationErrorReasons?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
