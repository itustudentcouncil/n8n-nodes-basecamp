// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v17/common/criterion_category_availability.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import {
  AdvertisingChannelSubTypeEnum_AdvertisingChannelSubType,
  advertisingChannelSubTypeEnum_AdvertisingChannelSubTypeFromJSON,
  advertisingChannelSubTypeEnum_AdvertisingChannelSubTypeToJSON,
} from "../enums/advertising_channel_sub_type.js";
import {
  AdvertisingChannelTypeEnum_AdvertisingChannelType,
  advertisingChannelTypeEnum_AdvertisingChannelTypeFromJSON,
  advertisingChannelTypeEnum_AdvertisingChannelTypeToJSON,
} from "../enums/advertising_channel_type.js";
import {
  CriterionCategoryChannelAvailabilityModeEnum_CriterionCategoryChannelAvailabilityMode,
  criterionCategoryChannelAvailabilityModeEnum_CriterionCategoryChannelAvailabilityModeFromJSON,
  criterionCategoryChannelAvailabilityModeEnum_CriterionCategoryChannelAvailabilityModeToJSON,
} from "../enums/criterion_category_channel_availability_mode.js";
import {
  CriterionCategoryLocaleAvailabilityModeEnum_CriterionCategoryLocaleAvailabilityMode,
  criterionCategoryLocaleAvailabilityModeEnum_CriterionCategoryLocaleAvailabilityModeFromJSON,
  criterionCategoryLocaleAvailabilityModeEnum_CriterionCategoryLocaleAvailabilityModeToJSON,
} from "../enums/criterion_category_locale_availability_mode.js";

export const protobufPackage = "google.ads.googleads.v17.common";

/** Information of category availability, per advertising channel. */
export interface CriterionCategoryAvailability {
  /** Channel types and subtypes that are available to the category. */
  channel:
    | CriterionCategoryChannelAvailability
    | undefined;
  /** Locales that are available to the category for the channel. */
  locale: CriterionCategoryLocaleAvailability[];
}

/**
 * Information of advertising channel type and subtypes a category is available
 * in.
 */
export interface CriterionCategoryChannelAvailability {
  /**
   * Format of the channel availability. Can be ALL_CHANNELS (the rest of the
   * fields will not be set), CHANNEL_TYPE (only advertising_channel_type type
   * will be set, the category is available to all sub types under it) or
   * CHANNEL_TYPE_AND_SUBTYPES (advertising_channel_type,
   * advertising_channel_sub_type, and include_default_channel_sub_type will all
   * be set).
   */
  availabilityMode: CriterionCategoryChannelAvailabilityModeEnum_CriterionCategoryChannelAvailabilityMode;
  /** Channel type the category is available to. */
  advertisingChannelType: AdvertisingChannelTypeEnum_AdvertisingChannelType;
  /** Channel subtypes under the channel type the category is available to. */
  advertisingChannelSubType: AdvertisingChannelSubTypeEnum_AdvertisingChannelSubType[];
  /**
   * Whether default channel sub type is included. For example,
   * advertising_channel_type being DISPLAY and include_default_channel_sub_type
   * being false means that the default display campaign where channel sub type
   * is not set is not included in this availability configuration.
   */
  includeDefaultChannelSubType?: boolean | undefined;
}

/** Information about which locales a category is available in. */
export interface CriterionCategoryLocaleAvailability {
  /**
   * Format of the locale availability. Can be LAUNCHED_TO_ALL (both country and
   * language will be empty), COUNTRY (only country will be set), LANGUAGE (only
   * language wil be set), COUNTRY_AND_LANGUAGE (both country and language will
   * be set).
   */
  availabilityMode: CriterionCategoryLocaleAvailabilityModeEnum_CriterionCategoryLocaleAvailabilityMode;
  /** The ISO-3166-1 alpha-2 country code associated with the category. */
  countryCode?:
    | string
    | undefined;
  /** ISO 639-1 code of the language associated with the category. */
  languageCode?: string | undefined;
}

function createBaseCriterionCategoryAvailability(): CriterionCategoryAvailability {
  return { channel: undefined, locale: [] };
}

export const CriterionCategoryAvailability: MessageFns<CriterionCategoryAvailability> = {
  encode(message: CriterionCategoryAvailability, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.channel !== undefined) {
      CriterionCategoryChannelAvailability.encode(message.channel, writer.uint32(10).fork()).join();
    }
    for (const v of message.locale) {
      CriterionCategoryLocaleAvailability.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CriterionCategoryAvailability {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCriterionCategoryAvailability();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.channel = CriterionCategoryChannelAvailability.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.locale.push(CriterionCategoryLocaleAvailability.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CriterionCategoryAvailability {
    return {
      channel: isSet(object.channel) ? CriterionCategoryChannelAvailability.fromJSON(object.channel) : undefined,
      locale: globalThis.Array.isArray(object?.locale)
        ? object.locale.map((e: any) => CriterionCategoryLocaleAvailability.fromJSON(e))
        : [],
    };
  },

  toJSON(message: CriterionCategoryAvailability): unknown {
    const obj: any = {};
    if (message.channel !== undefined) {
      obj.channel = CriterionCategoryChannelAvailability.toJSON(message.channel);
    }
    if (message.locale?.length) {
      obj.locale = message.locale.map((e) => CriterionCategoryLocaleAvailability.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<CriterionCategoryAvailability>): CriterionCategoryAvailability {
    return CriterionCategoryAvailability.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CriterionCategoryAvailability>): CriterionCategoryAvailability {
    const message = createBaseCriterionCategoryAvailability();
    message.channel = (object.channel !== undefined && object.channel !== null)
      ? CriterionCategoryChannelAvailability.fromPartial(object.channel)
      : undefined;
    message.locale = object.locale?.map((e) => CriterionCategoryLocaleAvailability.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCriterionCategoryChannelAvailability(): CriterionCategoryChannelAvailability {
  return {
    availabilityMode: 0,
    advertisingChannelType: 0,
    advertisingChannelSubType: [],
    includeDefaultChannelSubType: undefined,
  };
}

export const CriterionCategoryChannelAvailability: MessageFns<CriterionCategoryChannelAvailability> = {
  encode(message: CriterionCategoryChannelAvailability, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.availabilityMode !== 0) {
      writer.uint32(8).int32(message.availabilityMode);
    }
    if (message.advertisingChannelType !== 0) {
      writer.uint32(16).int32(message.advertisingChannelType);
    }
    writer.uint32(26).fork();
    for (const v of message.advertisingChannelSubType) {
      writer.int32(v);
    }
    writer.join();
    if (message.includeDefaultChannelSubType !== undefined) {
      writer.uint32(40).bool(message.includeDefaultChannelSubType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CriterionCategoryChannelAvailability {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCriterionCategoryChannelAvailability();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.availabilityMode = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.advertisingChannelType = reader.int32() as any;
          continue;
        case 3:
          if (tag === 24) {
            message.advertisingChannelSubType.push(reader.int32() as any);

            continue;
          }

          if (tag === 26) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.advertisingChannelSubType.push(reader.int32() as any);
            }

            continue;
          }

          break;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.includeDefaultChannelSubType = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CriterionCategoryChannelAvailability {
    return {
      availabilityMode: isSet(object.availabilityMode)
        ? criterionCategoryChannelAvailabilityModeEnum_CriterionCategoryChannelAvailabilityModeFromJSON(
          object.availabilityMode,
        )
        : 0,
      advertisingChannelType: isSet(object.advertisingChannelType)
        ? advertisingChannelTypeEnum_AdvertisingChannelTypeFromJSON(object.advertisingChannelType)
        : 0,
      advertisingChannelSubType: globalThis.Array.isArray(object?.advertisingChannelSubType)
        ? object.advertisingChannelSubType.map((e: any) =>
          advertisingChannelSubTypeEnum_AdvertisingChannelSubTypeFromJSON(e)
        )
        : [],
      includeDefaultChannelSubType: isSet(object.includeDefaultChannelSubType)
        ? globalThis.Boolean(object.includeDefaultChannelSubType)
        : undefined,
    };
  },

  toJSON(message: CriterionCategoryChannelAvailability): unknown {
    const obj: any = {};
    if (message.availabilityMode !== 0) {
      obj.availabilityMode =
        criterionCategoryChannelAvailabilityModeEnum_CriterionCategoryChannelAvailabilityModeToJSON(
          message.availabilityMode,
        );
    }
    if (message.advertisingChannelType !== 0) {
      obj.advertisingChannelType = advertisingChannelTypeEnum_AdvertisingChannelTypeToJSON(
        message.advertisingChannelType,
      );
    }
    if (message.advertisingChannelSubType?.length) {
      obj.advertisingChannelSubType = message.advertisingChannelSubType.map((e) =>
        advertisingChannelSubTypeEnum_AdvertisingChannelSubTypeToJSON(e)
      );
    }
    if (message.includeDefaultChannelSubType !== undefined) {
      obj.includeDefaultChannelSubType = message.includeDefaultChannelSubType;
    }
    return obj;
  },

  create(base?: DeepPartial<CriterionCategoryChannelAvailability>): CriterionCategoryChannelAvailability {
    return CriterionCategoryChannelAvailability.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CriterionCategoryChannelAvailability>): CriterionCategoryChannelAvailability {
    const message = createBaseCriterionCategoryChannelAvailability();
    message.availabilityMode = object.availabilityMode ?? 0;
    message.advertisingChannelType = object.advertisingChannelType ?? 0;
    message.advertisingChannelSubType = object.advertisingChannelSubType?.map((e) => e) || [];
    message.includeDefaultChannelSubType = object.includeDefaultChannelSubType ?? undefined;
    return message;
  },
};

function createBaseCriterionCategoryLocaleAvailability(): CriterionCategoryLocaleAvailability {
  return { availabilityMode: 0, countryCode: undefined, languageCode: undefined };
}

export const CriterionCategoryLocaleAvailability: MessageFns<CriterionCategoryLocaleAvailability> = {
  encode(message: CriterionCategoryLocaleAvailability, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.availabilityMode !== 0) {
      writer.uint32(8).int32(message.availabilityMode);
    }
    if (message.countryCode !== undefined) {
      writer.uint32(34).string(message.countryCode);
    }
    if (message.languageCode !== undefined) {
      writer.uint32(42).string(message.languageCode);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CriterionCategoryLocaleAvailability {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCriterionCategoryLocaleAvailability();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.availabilityMode = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.countryCode = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.languageCode = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CriterionCategoryLocaleAvailability {
    return {
      availabilityMode: isSet(object.availabilityMode)
        ? criterionCategoryLocaleAvailabilityModeEnum_CriterionCategoryLocaleAvailabilityModeFromJSON(
          object.availabilityMode,
        )
        : 0,
      countryCode: isSet(object.countryCode) ? globalThis.String(object.countryCode) : undefined,
      languageCode: isSet(object.languageCode) ? globalThis.String(object.languageCode) : undefined,
    };
  },

  toJSON(message: CriterionCategoryLocaleAvailability): unknown {
    const obj: any = {};
    if (message.availabilityMode !== 0) {
      obj.availabilityMode = criterionCategoryLocaleAvailabilityModeEnum_CriterionCategoryLocaleAvailabilityModeToJSON(
        message.availabilityMode,
      );
    }
    if (message.countryCode !== undefined) {
      obj.countryCode = message.countryCode;
    }
    if (message.languageCode !== undefined) {
      obj.languageCode = message.languageCode;
    }
    return obj;
  },

  create(base?: DeepPartial<CriterionCategoryLocaleAvailability>): CriterionCategoryLocaleAvailability {
    return CriterionCategoryLocaleAvailability.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CriterionCategoryLocaleAvailability>): CriterionCategoryLocaleAvailability {
    const message = createBaseCriterionCategoryLocaleAvailability();
    message.availabilityMode = object.availabilityMode ?? 0;
    message.countryCode = object.countryCode ?? undefined;
    message.languageCode = object.languageCode ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
