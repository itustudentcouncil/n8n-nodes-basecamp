// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v17/common/ad_type_infos.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import {
  CallConversionReportingStateEnum_CallConversionReportingState,
  callConversionReportingStateEnum_CallConversionReportingStateFromJSON,
  callConversionReportingStateEnum_CallConversionReportingStateToJSON,
} from "../enums/call_conversion_reporting_state.js";
import {
  DisplayAdFormatSettingEnum_DisplayAdFormatSetting,
  displayAdFormatSettingEnum_DisplayAdFormatSettingFromJSON,
  displayAdFormatSettingEnum_DisplayAdFormatSettingToJSON,
} from "../enums/display_ad_format_setting.js";
import {
  DisplayUploadProductTypeEnum_DisplayUploadProductType,
  displayUploadProductTypeEnum_DisplayUploadProductTypeFromJSON,
  displayUploadProductTypeEnum_DisplayUploadProductTypeToJSON,
} from "../enums/display_upload_product_type.js";
import {
  LegacyAppInstallAdAppStoreEnum_LegacyAppInstallAdAppStore,
  legacyAppInstallAdAppStoreEnum_LegacyAppInstallAdAppStoreFromJSON,
  legacyAppInstallAdAppStoreEnum_LegacyAppInstallAdAppStoreToJSON,
} from "../enums/legacy_app_install_ad_app_store.js";
import {
  MimeTypeEnum_MimeType,
  mimeTypeEnum_MimeTypeFromJSON,
  mimeTypeEnum_MimeTypeToJSON,
} from "../enums/mime_type.js";
import {
  VideoThumbnailEnum_VideoThumbnail,
  videoThumbnailEnum_VideoThumbnailFromJSON,
  videoThumbnailEnum_VideoThumbnailToJSON,
} from "../enums/video_thumbnail.js";
import {
  AdCallToActionAsset,
  AdDemandGenCarouselCardAsset,
  AdImageAsset,
  AdMediaBundleAsset,
  AdTextAsset,
  AdVideoAsset,
} from "./ad_asset.js";

export const protobufPackage = "google.ads.googleads.v17.common";

/** A text ad. */
export interface TextAdInfo {
  /** The headline of the ad. */
  headline?:
    | string
    | undefined;
  /** The first line of the ad's description. */
  description1?:
    | string
    | undefined;
  /** The second line of the ad's description. */
  description2?: string | undefined;
}

/** An expanded text ad. */
export interface ExpandedTextAdInfo {
  /** The first part of the ad's headline. */
  headlinePart1?:
    | string
    | undefined;
  /** The second part of the ad's headline. */
  headlinePart2?:
    | string
    | undefined;
  /** The third part of the ad's headline. */
  headlinePart3?:
    | string
    | undefined;
  /** The description of the ad. */
  description?:
    | string
    | undefined;
  /** The second description of the ad. */
  description2?:
    | string
    | undefined;
  /** The text that can appear alongside the ad's displayed URL. */
  path1?:
    | string
    | undefined;
  /** Additional text that can appear alongside the ad's displayed URL. */
  path2?: string | undefined;
}

/** An expanded dynamic search ad. */
export interface ExpandedDynamicSearchAdInfo {
  /** The description of the ad. */
  description?:
    | string
    | undefined;
  /** The second description of the ad. */
  description2?: string | undefined;
}

/** A hotel ad. */
export interface HotelAdInfo {
}

/** A travel ad. */
export interface TravelAdInfo {
}

/** A Smart Shopping ad. */
export interface ShoppingSmartAdInfo {
}

/** A standard Shopping ad. */
export interface ShoppingProductAdInfo {
}

/** A Shopping Comparison Listing ad. */
export interface ShoppingComparisonListingAdInfo {
  /**
   * Headline of the ad. This field is required. Allowed length is between 25
   * and 45 characters.
   */
  headline?: string | undefined;
}

/** An image ad. */
export interface ImageAdInfo {
  /** Width in pixels of the full size image. */
  pixelWidth?:
    | Long
    | undefined;
  /** Height in pixels of the full size image. */
  pixelHeight?:
    | Long
    | undefined;
  /** URL of the full size image. */
  imageUrl?:
    | string
    | undefined;
  /** Width in pixels of the preview size image. */
  previewPixelWidth?:
    | Long
    | undefined;
  /** Height in pixels of the preview size image. */
  previewPixelHeight?:
    | Long
    | undefined;
  /** URL of the preview size image. */
  previewImageUrl?:
    | string
    | undefined;
  /** The mime type of the image. */
  mimeType: MimeTypeEnum_MimeType;
  /**
   * The name of the image. If the image was created from a MediaFile, this is
   * the MediaFile's name. If the image was created from bytes, this is empty.
   */
  name?:
    | string
    | undefined;
  /** The image assets used for the ad. */
  imageAsset?:
    | AdImageAsset
    | undefined;
  /** Raw image data as bytes. */
  data?:
    | Buffer
    | undefined;
  /** An ad ID to copy the image from. */
  adIdToCopyImageFrom?: Long | undefined;
}

/**
 * Representation of video bumper in-stream ad format (very short in-stream
 * non-skippable video ad).
 */
export interface VideoBumperInStreamAdInfo {
  /** The image assets of the companion banner used with the ad. */
  companionBanner:
    | AdImageAsset
    | undefined;
  /**
   * Label on the "Call To Action" button taking the user to the video ad's
   * final URL.
   */
  actionButtonLabel: string;
  /**
   * Additional text displayed with the CTA (call-to-action) button to give
   * context and encourage clicking on the button.
   */
  actionHeadline: string;
}

/**
 * Representation of video non-skippable in-stream ad format (15 second
 * in-stream non-skippable video ad).
 */
export interface VideoNonSkippableInStreamAdInfo {
  /** The image assets of the companion banner used with the ad. */
  companionBanner:
    | AdImageAsset
    | undefined;
  /**
   * Label on the "Call To Action" button taking the user to the video ad's
   * final URL.
   */
  actionButtonLabel: string;
  /**
   * Additional text displayed with the "Call To Action" button to give
   * context and encourage clicking on the button.
   */
  actionHeadline: string;
}

/**
 * Representation of video TrueView in-stream ad format (ad shown during video
 * playback, often at beginning, which displays a skip button a few seconds into
 * the video).
 */
export interface VideoTrueViewInStreamAdInfo {
  /**
   * Label on the CTA (call-to-action) button taking the user to the video ad's
   * final URL.
   * Required for TrueView for action campaigns, optional otherwise.
   */
  actionButtonLabel: string;
  /**
   * Additional text displayed with the CTA (call-to-action) button to give
   * context and encourage clicking on the button.
   */
  actionHeadline: string;
  /** The image assets of the companion banner used with the ad. */
  companionBanner: AdImageAsset | undefined;
}

/**
 * Representation of video out-stream ad format (ad shown alongside a feed
 * with automatic playback, without sound).
 */
export interface VideoOutstreamAdInfo {
  /** The headline of the ad. */
  headline: string;
  /** The description line. */
  description: string;
}

/** Representation of In-feed video ad format. */
export interface InFeedVideoAdInfo {
  /** The headline of the ad. */
  headline: string;
  /** First text line for the ad. */
  description1: string;
  /** Second text line for the ad. */
  description2: string;
  /** Video thumbnail image to use. */
  thumbnail: VideoThumbnailEnum_VideoThumbnail;
}

/** A video ad. */
export interface VideoAdInfo {
  /** The YouTube video assets used for the ad. */
  video:
    | AdVideoAsset
    | undefined;
  /** Video TrueView in-stream ad format. */
  inStream?:
    | VideoTrueViewInStreamAdInfo
    | undefined;
  /** Video bumper in-stream ad format. */
  bumper?:
    | VideoBumperInStreamAdInfo
    | undefined;
  /** Video out-stream ad format. */
  outStream?:
    | VideoOutstreamAdInfo
    | undefined;
  /** Video non-skippable in-stream ad format. */
  nonSkippable?:
    | VideoNonSkippableInStreamAdInfo
    | undefined;
  /** In-feed video ad format. */
  inFeed?: InFeedVideoAdInfo | undefined;
}

/** A video responsive ad. */
export interface VideoResponsiveAdInfo {
  /**
   * List of text assets used for the short headline. Currently, only a single
   * value for the short headline is supported.
   */
  headlines: AdTextAsset[];
  /**
   * List of text assets used for the long headline.
   * Currently, only a single value for the long headline is supported.
   */
  longHeadlines: AdTextAsset[];
  /**
   * List of text assets used for the description.
   * Currently, only a single value for the description is supported.
   */
  descriptions: AdTextAsset[];
  /**
   * List of text assets used for the button, for example, the "Call To Action"
   * button. Currently, only a single value for the button is supported.
   */
  callToActions: AdTextAsset[];
  /**
   * List of YouTube video assets used for the ad.
   * Currently, only a single value for the YouTube video asset is supported.
   */
  videos: AdVideoAsset[];
  /**
   * List of image assets used for the companion banner.
   * Currently, only a single value for the companion banner asset is supported.
   */
  companionBanners: AdImageAsset[];
  /** First part of text that appears in the ad with the displayed URL. */
  breadcrumb1: string;
  /** Second part of text that appears in the ad with the displayed URL. */
  breadcrumb2: string;
}

/**
 * A responsive search ad.
 *
 * Responsive search ads let you create an ad that adapts to show more text, and
 * more relevant messages, to your customers. Enter multiple headlines and
 * descriptions when creating a responsive search ad, and over time, Google Ads
 * will automatically test different combinations and learn which combinations
 * perform best. By adapting your ad's content to more closely match potential
 * customers' search terms, responsive search ads may improve your campaign's
 * performance.
 *
 * More information at https://support.google.com/google-ads/answer/7684791
 */
export interface ResponsiveSearchAdInfo {
  /**
   * List of text assets for headlines. When the ad serves the headlines will
   * be selected from this list.
   */
  headlines: AdTextAsset[];
  /**
   * List of text assets for descriptions. When the ad serves the descriptions
   * will be selected from this list.
   */
  descriptions: AdTextAsset[];
  /** First part of text that can be appended to the URL in the ad. */
  path1?:
    | string
    | undefined;
  /**
   * Second part of text that can be appended to the URL in the ad. This field
   * can only be set when `path1` is also set.
   */
  path2?: string | undefined;
}

/**
 * A legacy responsive display ad. Ads of this type are labeled 'Responsive ads'
 * in the Google Ads UI.
 */
export interface LegacyResponsiveDisplayAdInfo {
  /** The short version of the ad's headline. */
  shortHeadline?:
    | string
    | undefined;
  /** The long version of the ad's headline. */
  longHeadline?:
    | string
    | undefined;
  /** The description of the ad. */
  description?:
    | string
    | undefined;
  /** The business name in the ad. */
  businessName?:
    | string
    | undefined;
  /**
   * Advertiser's consent to allow flexible color. When true, the ad may be
   * served with different color if necessary. When false, the ad will be served
   * with the specified colors or a neutral color.
   * The default value is `true`.
   * Must be true if `main_color` and `accent_color` are not set.
   */
  allowFlexibleColor?:
    | boolean
    | undefined;
  /**
   * The accent color of the ad in hexadecimal, for example, #ffffff for white.
   * If one of `main_color` and `accent_color` is set, the other is required as
   * well.
   */
  accentColor?:
    | string
    | undefined;
  /**
   * The main color of the ad in hexadecimal, for example, #ffffff for white.
   * If one of `main_color` and `accent_color` is set, the other is required as
   * well.
   */
  mainColor?:
    | string
    | undefined;
  /** The call-to-action text for the ad. */
  callToActionText?:
    | string
    | undefined;
  /** The MediaFile resource name of the logo image used in the ad. */
  logoImage?:
    | string
    | undefined;
  /** The MediaFile resource name of the square logo image used in the ad. */
  squareLogoImage?:
    | string
    | undefined;
  /** The MediaFile resource name of the marketing image used in the ad. */
  marketingImage?:
    | string
    | undefined;
  /** The MediaFile resource name of the square marketing image used in the ad. */
  squareMarketingImage?:
    | string
    | undefined;
  /** Specifies which format the ad will be served in. Default is ALL_FORMATS. */
  formatSetting: DisplayAdFormatSettingEnum_DisplayAdFormatSetting;
  /** Prefix before price. For example, 'as low as'. */
  pricePrefix?:
    | string
    | undefined;
  /**
   * Promotion text used for dynamic formats of responsive ads. For example
   * 'Free two-day shipping'.
   */
  promoText?: string | undefined;
}

/** An app ad. */
export interface AppAdInfo {
  /** Mandatory ad text. */
  mandatoryAdText:
    | AdTextAsset
    | undefined;
  /**
   * List of text assets for headlines. When the ad serves the headlines will
   * be selected from this list.
   */
  headlines: AdTextAsset[];
  /**
   * List of text assets for descriptions. When the ad serves the descriptions
   * will be selected from this list.
   */
  descriptions: AdTextAsset[];
  /** List of image assets that may be displayed with the ad. */
  images: AdImageAsset[];
  /** List of YouTube video assets that may be displayed with the ad. */
  youtubeVideos: AdVideoAsset[];
  /** List of media bundle assets that may be used with the ad. */
  html5MediaBundles: AdMediaBundleAsset[];
}

/**
 * App engagement ads allow you to write text encouraging a specific action in
 * the app, like checking in, making a purchase, or booking a flight.
 * They allow you to send users to a specific part of your app where they can
 * find what they're looking for easier and faster.
 */
export interface AppEngagementAdInfo {
  /**
   * List of text assets for headlines. When the ad serves the headlines will
   * be selected from this list.
   */
  headlines: AdTextAsset[];
  /**
   * List of text assets for descriptions. When the ad serves the descriptions
   * will be selected from this list.
   */
  descriptions: AdTextAsset[];
  /** List of image assets that may be displayed with the ad. */
  images: AdImageAsset[];
  /** List of video assets that may be displayed with the ad. */
  videos: AdVideoAsset[];
}

/**
 * App pre-registration ads link to your app or game listing on Google Play, and
 * can run on Google Play, on YouTube (in-stream only), and within other apps
 * and mobile websites on the Display Network. It will help capture people's
 * interest in your app or game and generate an early install base for your app
 * or game before a launch.
 */
export interface AppPreRegistrationAdInfo {
  /**
   * List of text assets for headlines. When the ad serves the headlines will
   * be selected from this list.
   */
  headlines: AdTextAsset[];
  /**
   * List of text assets for descriptions. When the ad serves the descriptions
   * will be selected from this list.
   */
  descriptions: AdTextAsset[];
  /** List of image asset IDs whose images may be displayed with the ad. */
  images: AdImageAsset[];
  /** List of YouTube video asset IDs whose videos may be displayed with the ad. */
  youtubeVideos: AdVideoAsset[];
}

/** A legacy app install ad that only can be used by a few select customers. */
export interface LegacyAppInstallAdInfo {
  /** The ID of the mobile app. */
  appId?:
    | string
    | undefined;
  /** The app store the mobile app is available in. */
  appStore: LegacyAppInstallAdAppStoreEnum_LegacyAppInstallAdAppStore;
  /** The headline of the ad. */
  headline?:
    | string
    | undefined;
  /** The first description line of the ad. */
  description1?:
    | string
    | undefined;
  /** The second description line of the ad. */
  description2?: string | undefined;
}

/** A responsive display ad. */
export interface ResponsiveDisplayAdInfo {
  /**
   * Marketing images to be used in the ad. Valid image types are GIF,
   * JPEG, and PNG. The minimum size is 600x314 and the aspect ratio must
   * be 1.91:1 (+-1%). At least one `marketing_image` is required. Combined
   * with `square_marketing_images`, the maximum is 15.
   */
  marketingImages: AdImageAsset[];
  /**
   * Square marketing images to be used in the ad. Valid image types are GIF,
   * JPEG, and PNG. The minimum size is 300x300 and the aspect ratio must
   * be 1:1 (+-1%). At least one square `marketing_image` is required. Combined
   * with `marketing_images`, the maximum is 15.
   */
  squareMarketingImages: AdImageAsset[];
  /**
   * Logo images to be used in the ad. Valid image types are GIF,
   * JPEG, and PNG. The minimum size is 512x128 and the aspect ratio must
   * be 4:1 (+-1%). Combined with `square_logo_images`, the maximum is 5.
   */
  logoImages: AdImageAsset[];
  /**
   * Square logo images to be used in the ad. Valid image types are GIF,
   * JPEG, and PNG. The minimum size is 128x128 and the aspect ratio must
   * be 1:1 (+-1%). Combined with `logo_images`, the maximum is 5.
   */
  squareLogoImages: AdImageAsset[];
  /**
   * Short format headlines for the ad. The maximum length is 30 characters.
   * At least 1 and max 5 headlines can be specified.
   */
  headlines: AdTextAsset[];
  /** A required long format headline. The maximum length is 90 characters. */
  longHeadline:
    | AdTextAsset
    | undefined;
  /**
   * Descriptive texts for the ad. The maximum length is 90 characters. At
   * least 1 and max 5 headlines can be specified.
   */
  descriptions: AdTextAsset[];
  /** Optional YouTube videos for the ad. A maximum of 5 videos can be specified. */
  youtubeVideos: AdVideoAsset[];
  /** The advertiser/brand name. Maximum display width is 25. */
  businessName?:
    | string
    | undefined;
  /**
   * The main color of the ad in hexadecimal, for example, #ffffff for white.
   * If one of `main_color` and `accent_color` is set, the other is required as
   * well.
   */
  mainColor?:
    | string
    | undefined;
  /**
   * The accent color of the ad in hexadecimal, for example, #ffffff for white.
   * If one of `main_color` and `accent_color` is set, the other is required as
   * well.
   */
  accentColor?:
    | string
    | undefined;
  /**
   * Advertiser's consent to allow flexible color. When true, the ad may be
   * served with different color if necessary. When false, the ad will be served
   * with the specified colors or a neutral color.
   * The default value is `true`.
   * Must be true if `main_color` and `accent_color` are not set.
   */
  allowFlexibleColor?:
    | boolean
    | undefined;
  /** The call-to-action text for the ad. Maximum display width is 30. */
  callToActionText?:
    | string
    | undefined;
  /** Prefix before price. For example, 'as low as'. */
  pricePrefix?:
    | string
    | undefined;
  /**
   * Promotion text used for dynamic formats of responsive ads. For example
   * 'Free two-day shipping'.
   */
  promoText?:
    | string
    | undefined;
  /** Specifies which format the ad will be served in. Default is ALL_FORMATS. */
  formatSetting: DisplayAdFormatSettingEnum_DisplayAdFormatSetting;
  /** Specification for various creative controls. */
  controlSpec: ResponsiveDisplayAdControlSpec | undefined;
}

/** A local ad. */
export interface LocalAdInfo {
  /**
   * List of text assets for headlines. When the ad serves the headlines will
   * be selected from this list. At least 1 and at most 5 headlines must be
   * specified.
   */
  headlines: AdTextAsset[];
  /**
   * List of text assets for descriptions. When the ad serves the descriptions
   * will be selected from this list. At least 1 and at most 5 descriptions must
   * be specified.
   */
  descriptions: AdTextAsset[];
  /**
   * List of text assets for call-to-actions. When the ad serves the
   * call-to-actions will be selected from this list. At least 1 and at most
   * 5 call-to-actions must be specified.
   */
  callToActions: AdTextAsset[];
  /**
   * List of marketing image assets that may be displayed with the ad. The
   * images must be 314x600 pixels or 320x320 pixels. At least 1 and at most
   * 20 image assets must be specified.
   */
  marketingImages: AdImageAsset[];
  /**
   * List of logo image assets that may be displayed with the ad. The images
   * must be 128x128 pixels and not larger than 120KB. At least 1 and at most 5
   * image assets must be specified.
   */
  logoImages: AdImageAsset[];
  /**
   * List of YouTube video assets that may be displayed with the ad. At least 1
   * and at most 20 video assets must be specified.
   */
  videos: AdVideoAsset[];
  /** First part of optional text that can be appended to the URL in the ad. */
  path1?:
    | string
    | undefined;
  /**
   * Second part of optional text that can be appended to the URL in the ad.
   * This field can only be set when `path1` is also set.
   */
  path2?: string | undefined;
}

/**
 * A generic type of display ad. The exact ad format is controlled by the
 * `display_upload_product_type` field, which determines what kinds of data
 * need to be included with the ad.
 */
export interface DisplayUploadAdInfo {
  /** The product type of this ad. See comments on the enum for details. */
  displayUploadProductType: DisplayUploadProductTypeEnum_DisplayUploadProductType;
  /**
   * A media bundle asset to be used in the ad. For information about the
   * media bundle for HTML5_UPLOAD_AD, see
   * https://support.google.com/google-ads/answer/1722096
   * Media bundles that are part of dynamic product types use a special format
   * that needs to be created through the Google Web Designer. See
   * https://support.google.com/webdesigner/answer/7543898 for more
   * information.
   */
  mediaBundle?: AdMediaBundleAsset | undefined;
}

/** Specification for various creative controls for a responsive display ad. */
export interface ResponsiveDisplayAdControlSpec {
  /** Whether the advertiser has opted into the asset enhancements feature. */
  enableAssetEnhancements: boolean;
  /** Whether the advertiser has opted into auto-gen video feature. */
  enableAutogenVideo: boolean;
}

/** A Smart campaign ad. */
export interface SmartCampaignAdInfo {
  /**
   * List of text assets, each of which corresponds to a headline when the ad
   * serves. This list consists of a minimum of 3 and up to 15 text assets.
   */
  headlines: AdTextAsset[];
  /**
   * List of text assets, each of which corresponds to a description when the ad
   * serves. This list consists of a minimum of 2 and up to 4 text assets.
   */
  descriptions: AdTextAsset[];
}

/** A call ad. */
export interface CallAdInfo {
  /** The country code in the ad. */
  countryCode: string;
  /** The phone number in the ad. */
  phoneNumber: string;
  /** The business name in the ad. */
  businessName: string;
  /** First headline in the ad. */
  headline1: string;
  /** Second headline in the ad. */
  headline2: string;
  /** The first line of the ad's description. */
  description1: string;
  /** The second line of the ad's description. */
  description2: string;
  /**
   * Whether to enable call tracking for the creative. Enabling call
   * tracking also enables call conversions.
   */
  callTracked: boolean;
  /**
   * Whether to disable call conversion for the creative.
   * If set to `true`, disables call conversions even when `call_tracked` is
   * `true`.
   * If `call_tracked` is `false`, this field is ignored.
   */
  disableCallConversion: boolean;
  /** The URL to be used for phone number verification. */
  phoneNumberVerificationUrl: string;
  /**
   * The conversion action to attribute a call conversion to. If not set a
   * default conversion action is used. This field only has effect if
   * `call_tracked` is set to `true`. Otherwise this field is ignored.
   */
  conversionAction: string;
  /**
   * The call conversion behavior of this call ad. It can use its own call
   * conversion setting, inherit the account level setting, or be disabled.
   */
  conversionReportingState: CallConversionReportingStateEnum_CallConversionReportingState;
  /** First part of text that can be appended to the URL in the ad. Optional. */
  path1: string;
  /**
   * Second part of text that can be appended to the URL in the ad. This field
   * can only be set when `path1` is also set. Optional.
   */
  path2: string;
}

/** A Demand Gen multi asset ad. */
export interface DemandGenMultiAssetAdInfo {
  /**
   * Marketing image assets to be used in the ad. Valid image types are GIF,
   * JPEG, and PNG. The minimum size is 600x314 and the aspect ratio must
   * be 1.91:1 (+-1%). Required if square_marketing_images is
   * not present. Combined with `square_marketing_images` and
   * `portrait_marketing_images` the maximum is 20.
   */
  marketingImages: AdImageAsset[];
  /**
   * Square marketing image assets to be used in the ad. Valid image types are
   * GIF, JPEG, and PNG. The minimum size is 300x300 and the aspect ratio must
   * be 1:1 (+-1%). Required if marketing_images is not present.  Combined with
   * `marketing_images` and `portrait_marketing_images` the maximum is 20.
   */
  squareMarketingImages: AdImageAsset[];
  /**
   * Portrait marketing image assets to be used in the ad. Valid image types are
   * GIF, JPEG, and PNG. The minimum size is 480x600 and the aspect ratio must
   * be 4:5 (+-1%).  Combined with `marketing_images` and
   * `square_marketing_images` the maximum is 20.
   */
  portraitMarketingImages: AdImageAsset[];
  /**
   * Logo image assets to be used in the ad. Valid image types are GIF,
   * JPEG, and PNG. The minimum size is 128x128 and the aspect ratio must be
   * 1:1 (+-1%). At least 1 and max 5 logo images can be specified.
   */
  logoImages: AdImageAsset[];
  /**
   * Headline text asset of the ad. Maximum display width is 30. At least 1 and
   * max 5 headlines can be specified.
   */
  headlines: AdTextAsset[];
  /**
   * The descriptive text of the ad. Maximum display width is 90. At least 1 and
   * max 5 descriptions can be specified.
   */
  descriptions: AdTextAsset[];
  /** The Advertiser/brand name. Maximum display width is 25. Required. */
  businessName?:
    | string
    | undefined;
  /** Call to action text. */
  callToActionText?:
    | string
    | undefined;
  /** Boolean option that indicates if this ad must be served with lead form. */
  leadFormOnly?: boolean | undefined;
}

/** A Demand Gen carousel ad. */
export interface DemandGenCarouselAdInfo {
  /** Required. The Advertiser/brand name. */
  businessName: string;
  /**
   * Required. Logo image to be used in the ad.  The minimum size is 128x128 and
   * the aspect ratio must be 1:1 (+-1%).
   */
  logoImage:
    | AdImageAsset
    | undefined;
  /** Required. Headline of the ad. */
  headline:
    | AdTextAsset
    | undefined;
  /** Required. The descriptive text of the ad. */
  description:
    | AdTextAsset
    | undefined;
  /** Call to action text. */
  callToActionText: string;
  /** Required. Carousel cards that will display with the ad. Min 2 max 10. */
  carouselCards: AdDemandGenCarouselCardAsset[];
}

/** A Demand Gen video responsive ad. */
export interface DemandGenVideoResponsiveAdInfo {
  /** List of text assets used for the short headline. */
  headlines: AdTextAsset[];
  /** List of text assets used for the long headline. */
  longHeadlines: AdTextAsset[];
  /** List of text assets used for the description. */
  descriptions: AdTextAsset[];
  /** List of YouTube video assets used for the ad. */
  videos: AdVideoAsset[];
  /**
   * Logo image to be used in the ad. Valid image types are GIF, JPEG, and PNG.
   * The minimum size is 128x128 and the aspect ratio must be 1:1 (+-1%).
   */
  logoImages: AdImageAsset[];
  /** First part of text that appears in the ad with the displayed URL. */
  breadcrumb1: string;
  /** Second part of text that appears in the ad with the displayed URL. */
  breadcrumb2: string;
  /** Required. The advertiser/brand name. */
  businessName:
    | AdTextAsset
    | undefined;
  /** Assets of type CallToActionAsset used for the "Call To Action" button. */
  callToActions: AdCallToActionAsset[];
}

/** A Demand Gen product ad. */
export interface DemandGenProductAdInfo {
  /** Required. Text asset used for the short headline. */
  headline?:
    | AdTextAsset
    | undefined;
  /** Required. Text asset used for the description. */
  description?:
    | AdTextAsset
    | undefined;
  /**
   * Required. Logo image to be used in the ad. Valid image types are GIF, JPEG,
   * and PNG. The minimum size is 128x128 and the aspect ratio must be 1:1
   * (+-1%).
   */
  logoImage?:
    | AdImageAsset
    | undefined;
  /** First part of text that appears in the ad with the displayed URL. */
  breadcrumb1: string;
  /** Second part of text that appears in the ad with the displayed URL. */
  breadcrumb2: string;
  /** Required. The advertiser/brand name. */
  businessName:
    | AdTextAsset
    | undefined;
  /** Asset of type CallToActionAsset used for the "Call To Action" button. */
  callToAction?: AdCallToActionAsset | undefined;
}

function createBaseTextAdInfo(): TextAdInfo {
  return { headline: undefined, description1: undefined, description2: undefined };
}

export const TextAdInfo: MessageFns<TextAdInfo> = {
  encode(message: TextAdInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.headline !== undefined) {
      writer.uint32(34).string(message.headline);
    }
    if (message.description1 !== undefined) {
      writer.uint32(42).string(message.description1);
    }
    if (message.description2 !== undefined) {
      writer.uint32(50).string(message.description2);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TextAdInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTextAdInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 4:
          if (tag !== 34) {
            break;
          }

          message.headline = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.description1 = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.description2 = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TextAdInfo {
    return {
      headline: isSet(object.headline) ? globalThis.String(object.headline) : undefined,
      description1: isSet(object.description1) ? globalThis.String(object.description1) : undefined,
      description2: isSet(object.description2) ? globalThis.String(object.description2) : undefined,
    };
  },

  toJSON(message: TextAdInfo): unknown {
    const obj: any = {};
    if (message.headline !== undefined) {
      obj.headline = message.headline;
    }
    if (message.description1 !== undefined) {
      obj.description1 = message.description1;
    }
    if (message.description2 !== undefined) {
      obj.description2 = message.description2;
    }
    return obj;
  },

  create(base?: DeepPartial<TextAdInfo>): TextAdInfo {
    return TextAdInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TextAdInfo>): TextAdInfo {
    const message = createBaseTextAdInfo();
    message.headline = object.headline ?? undefined;
    message.description1 = object.description1 ?? undefined;
    message.description2 = object.description2 ?? undefined;
    return message;
  },
};

function createBaseExpandedTextAdInfo(): ExpandedTextAdInfo {
  return {
    headlinePart1: undefined,
    headlinePart2: undefined,
    headlinePart3: undefined,
    description: undefined,
    description2: undefined,
    path1: undefined,
    path2: undefined,
  };
}

export const ExpandedTextAdInfo: MessageFns<ExpandedTextAdInfo> = {
  encode(message: ExpandedTextAdInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.headlinePart1 !== undefined) {
      writer.uint32(66).string(message.headlinePart1);
    }
    if (message.headlinePart2 !== undefined) {
      writer.uint32(74).string(message.headlinePart2);
    }
    if (message.headlinePart3 !== undefined) {
      writer.uint32(82).string(message.headlinePart3);
    }
    if (message.description !== undefined) {
      writer.uint32(90).string(message.description);
    }
    if (message.description2 !== undefined) {
      writer.uint32(98).string(message.description2);
    }
    if (message.path1 !== undefined) {
      writer.uint32(106).string(message.path1);
    }
    if (message.path2 !== undefined) {
      writer.uint32(114).string(message.path2);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExpandedTextAdInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExpandedTextAdInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 8:
          if (tag !== 66) {
            break;
          }

          message.headlinePart1 = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.headlinePart2 = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.headlinePart3 = reader.string();
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.description = reader.string();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.description2 = reader.string();
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.path1 = reader.string();
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.path2 = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExpandedTextAdInfo {
    return {
      headlinePart1: isSet(object.headlinePart1) ? globalThis.String(object.headlinePart1) : undefined,
      headlinePart2: isSet(object.headlinePart2) ? globalThis.String(object.headlinePart2) : undefined,
      headlinePart3: isSet(object.headlinePart3) ? globalThis.String(object.headlinePart3) : undefined,
      description: isSet(object.description) ? globalThis.String(object.description) : undefined,
      description2: isSet(object.description2) ? globalThis.String(object.description2) : undefined,
      path1: isSet(object.path1) ? globalThis.String(object.path1) : undefined,
      path2: isSet(object.path2) ? globalThis.String(object.path2) : undefined,
    };
  },

  toJSON(message: ExpandedTextAdInfo): unknown {
    const obj: any = {};
    if (message.headlinePart1 !== undefined) {
      obj.headlinePart1 = message.headlinePart1;
    }
    if (message.headlinePart2 !== undefined) {
      obj.headlinePart2 = message.headlinePart2;
    }
    if (message.headlinePart3 !== undefined) {
      obj.headlinePart3 = message.headlinePart3;
    }
    if (message.description !== undefined) {
      obj.description = message.description;
    }
    if (message.description2 !== undefined) {
      obj.description2 = message.description2;
    }
    if (message.path1 !== undefined) {
      obj.path1 = message.path1;
    }
    if (message.path2 !== undefined) {
      obj.path2 = message.path2;
    }
    return obj;
  },

  create(base?: DeepPartial<ExpandedTextAdInfo>): ExpandedTextAdInfo {
    return ExpandedTextAdInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExpandedTextAdInfo>): ExpandedTextAdInfo {
    const message = createBaseExpandedTextAdInfo();
    message.headlinePart1 = object.headlinePart1 ?? undefined;
    message.headlinePart2 = object.headlinePart2 ?? undefined;
    message.headlinePart3 = object.headlinePart3 ?? undefined;
    message.description = object.description ?? undefined;
    message.description2 = object.description2 ?? undefined;
    message.path1 = object.path1 ?? undefined;
    message.path2 = object.path2 ?? undefined;
    return message;
  },
};

function createBaseExpandedDynamicSearchAdInfo(): ExpandedDynamicSearchAdInfo {
  return { description: undefined, description2: undefined };
}

export const ExpandedDynamicSearchAdInfo: MessageFns<ExpandedDynamicSearchAdInfo> = {
  encode(message: ExpandedDynamicSearchAdInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.description !== undefined) {
      writer.uint32(26).string(message.description);
    }
    if (message.description2 !== undefined) {
      writer.uint32(34).string(message.description2);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExpandedDynamicSearchAdInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExpandedDynamicSearchAdInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 3:
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.description2 = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExpandedDynamicSearchAdInfo {
    return {
      description: isSet(object.description) ? globalThis.String(object.description) : undefined,
      description2: isSet(object.description2) ? globalThis.String(object.description2) : undefined,
    };
  },

  toJSON(message: ExpandedDynamicSearchAdInfo): unknown {
    const obj: any = {};
    if (message.description !== undefined) {
      obj.description = message.description;
    }
    if (message.description2 !== undefined) {
      obj.description2 = message.description2;
    }
    return obj;
  },

  create(base?: DeepPartial<ExpandedDynamicSearchAdInfo>): ExpandedDynamicSearchAdInfo {
    return ExpandedDynamicSearchAdInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExpandedDynamicSearchAdInfo>): ExpandedDynamicSearchAdInfo {
    const message = createBaseExpandedDynamicSearchAdInfo();
    message.description = object.description ?? undefined;
    message.description2 = object.description2 ?? undefined;
    return message;
  },
};

function createBaseHotelAdInfo(): HotelAdInfo {
  return {};
}

export const HotelAdInfo: MessageFns<HotelAdInfo> = {
  encode(_: HotelAdInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HotelAdInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHotelAdInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): HotelAdInfo {
    return {};
  },

  toJSON(_: HotelAdInfo): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<HotelAdInfo>): HotelAdInfo {
    return HotelAdInfo.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<HotelAdInfo>): HotelAdInfo {
    const message = createBaseHotelAdInfo();
    return message;
  },
};

function createBaseTravelAdInfo(): TravelAdInfo {
  return {};
}

export const TravelAdInfo: MessageFns<TravelAdInfo> = {
  encode(_: TravelAdInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TravelAdInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTravelAdInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): TravelAdInfo {
    return {};
  },

  toJSON(_: TravelAdInfo): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<TravelAdInfo>): TravelAdInfo {
    return TravelAdInfo.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<TravelAdInfo>): TravelAdInfo {
    const message = createBaseTravelAdInfo();
    return message;
  },
};

function createBaseShoppingSmartAdInfo(): ShoppingSmartAdInfo {
  return {};
}

export const ShoppingSmartAdInfo: MessageFns<ShoppingSmartAdInfo> = {
  encode(_: ShoppingSmartAdInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ShoppingSmartAdInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseShoppingSmartAdInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ShoppingSmartAdInfo {
    return {};
  },

  toJSON(_: ShoppingSmartAdInfo): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<ShoppingSmartAdInfo>): ShoppingSmartAdInfo {
    return ShoppingSmartAdInfo.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<ShoppingSmartAdInfo>): ShoppingSmartAdInfo {
    const message = createBaseShoppingSmartAdInfo();
    return message;
  },
};

function createBaseShoppingProductAdInfo(): ShoppingProductAdInfo {
  return {};
}

export const ShoppingProductAdInfo: MessageFns<ShoppingProductAdInfo> = {
  encode(_: ShoppingProductAdInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ShoppingProductAdInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseShoppingProductAdInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ShoppingProductAdInfo {
    return {};
  },

  toJSON(_: ShoppingProductAdInfo): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<ShoppingProductAdInfo>): ShoppingProductAdInfo {
    return ShoppingProductAdInfo.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<ShoppingProductAdInfo>): ShoppingProductAdInfo {
    const message = createBaseShoppingProductAdInfo();
    return message;
  },
};

function createBaseShoppingComparisonListingAdInfo(): ShoppingComparisonListingAdInfo {
  return { headline: undefined };
}

export const ShoppingComparisonListingAdInfo: MessageFns<ShoppingComparisonListingAdInfo> = {
  encode(message: ShoppingComparisonListingAdInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.headline !== undefined) {
      writer.uint32(18).string(message.headline);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ShoppingComparisonListingAdInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseShoppingComparisonListingAdInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.headline = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ShoppingComparisonListingAdInfo {
    return { headline: isSet(object.headline) ? globalThis.String(object.headline) : undefined };
  },

  toJSON(message: ShoppingComparisonListingAdInfo): unknown {
    const obj: any = {};
    if (message.headline !== undefined) {
      obj.headline = message.headline;
    }
    return obj;
  },

  create(base?: DeepPartial<ShoppingComparisonListingAdInfo>): ShoppingComparisonListingAdInfo {
    return ShoppingComparisonListingAdInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ShoppingComparisonListingAdInfo>): ShoppingComparisonListingAdInfo {
    const message = createBaseShoppingComparisonListingAdInfo();
    message.headline = object.headline ?? undefined;
    return message;
  },
};

function createBaseImageAdInfo(): ImageAdInfo {
  return {
    pixelWidth: undefined,
    pixelHeight: undefined,
    imageUrl: undefined,
    previewPixelWidth: undefined,
    previewPixelHeight: undefined,
    previewImageUrl: undefined,
    mimeType: 0,
    name: undefined,
    imageAsset: undefined,
    data: undefined,
    adIdToCopyImageFrom: undefined,
  };
}

export const ImageAdInfo: MessageFns<ImageAdInfo> = {
  encode(message: ImageAdInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pixelWidth !== undefined) {
      writer.uint32(120).int64(message.pixelWidth.toString());
    }
    if (message.pixelHeight !== undefined) {
      writer.uint32(128).int64(message.pixelHeight.toString());
    }
    if (message.imageUrl !== undefined) {
      writer.uint32(138).string(message.imageUrl);
    }
    if (message.previewPixelWidth !== undefined) {
      writer.uint32(144).int64(message.previewPixelWidth.toString());
    }
    if (message.previewPixelHeight !== undefined) {
      writer.uint32(152).int64(message.previewPixelHeight.toString());
    }
    if (message.previewImageUrl !== undefined) {
      writer.uint32(162).string(message.previewImageUrl);
    }
    if (message.mimeType !== 0) {
      writer.uint32(80).int32(message.mimeType);
    }
    if (message.name !== undefined) {
      writer.uint32(170).string(message.name);
    }
    if (message.imageAsset !== undefined) {
      AdImageAsset.encode(message.imageAsset, writer.uint32(178).fork()).join();
    }
    if (message.data !== undefined) {
      writer.uint32(106).bytes(message.data);
    }
    if (message.adIdToCopyImageFrom !== undefined) {
      writer.uint32(112).int64(message.adIdToCopyImageFrom.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ImageAdInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImageAdInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 15:
          if (tag !== 120) {
            break;
          }

          message.pixelWidth = Long.fromString(reader.int64().toString());
          continue;
        case 16:
          if (tag !== 128) {
            break;
          }

          message.pixelHeight = Long.fromString(reader.int64().toString());
          continue;
        case 17:
          if (tag !== 138) {
            break;
          }

          message.imageUrl = reader.string();
          continue;
        case 18:
          if (tag !== 144) {
            break;
          }

          message.previewPixelWidth = Long.fromString(reader.int64().toString());
          continue;
        case 19:
          if (tag !== 152) {
            break;
          }

          message.previewPixelHeight = Long.fromString(reader.int64().toString());
          continue;
        case 20:
          if (tag !== 162) {
            break;
          }

          message.previewImageUrl = reader.string();
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.mimeType = reader.int32() as any;
          continue;
        case 21:
          if (tag !== 170) {
            break;
          }

          message.name = reader.string();
          continue;
        case 22:
          if (tag !== 178) {
            break;
          }

          message.imageAsset = AdImageAsset.decode(reader, reader.uint32());
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.data = Buffer.from(reader.bytes());
          continue;
        case 14:
          if (tag !== 112) {
            break;
          }

          message.adIdToCopyImageFrom = Long.fromString(reader.int64().toString());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImageAdInfo {
    return {
      pixelWidth: isSet(object.pixelWidth) ? Long.fromValue(object.pixelWidth) : undefined,
      pixelHeight: isSet(object.pixelHeight) ? Long.fromValue(object.pixelHeight) : undefined,
      imageUrl: isSet(object.imageUrl) ? globalThis.String(object.imageUrl) : undefined,
      previewPixelWidth: isSet(object.previewPixelWidth) ? Long.fromValue(object.previewPixelWidth) : undefined,
      previewPixelHeight: isSet(object.previewPixelHeight) ? Long.fromValue(object.previewPixelHeight) : undefined,
      previewImageUrl: isSet(object.previewImageUrl) ? globalThis.String(object.previewImageUrl) : undefined,
      mimeType: isSet(object.mimeType) ? mimeTypeEnum_MimeTypeFromJSON(object.mimeType) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      imageAsset: isSet(object.imageAsset) ? AdImageAsset.fromJSON(object.imageAsset) : undefined,
      data: isSet(object.data) ? Buffer.from(bytesFromBase64(object.data)) : undefined,
      adIdToCopyImageFrom: isSet(object.adIdToCopyImageFrom) ? Long.fromValue(object.adIdToCopyImageFrom) : undefined,
    };
  },

  toJSON(message: ImageAdInfo): unknown {
    const obj: any = {};
    if (message.pixelWidth !== undefined) {
      obj.pixelWidth = (message.pixelWidth || Long.ZERO).toString();
    }
    if (message.pixelHeight !== undefined) {
      obj.pixelHeight = (message.pixelHeight || Long.ZERO).toString();
    }
    if (message.imageUrl !== undefined) {
      obj.imageUrl = message.imageUrl;
    }
    if (message.previewPixelWidth !== undefined) {
      obj.previewPixelWidth = (message.previewPixelWidth || Long.ZERO).toString();
    }
    if (message.previewPixelHeight !== undefined) {
      obj.previewPixelHeight = (message.previewPixelHeight || Long.ZERO).toString();
    }
    if (message.previewImageUrl !== undefined) {
      obj.previewImageUrl = message.previewImageUrl;
    }
    if (message.mimeType !== 0) {
      obj.mimeType = mimeTypeEnum_MimeTypeToJSON(message.mimeType);
    }
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.imageAsset !== undefined) {
      obj.imageAsset = AdImageAsset.toJSON(message.imageAsset);
    }
    if (message.data !== undefined) {
      obj.data = base64FromBytes(message.data);
    }
    if (message.adIdToCopyImageFrom !== undefined) {
      obj.adIdToCopyImageFrom = (message.adIdToCopyImageFrom || Long.ZERO).toString();
    }
    return obj;
  },

  create(base?: DeepPartial<ImageAdInfo>): ImageAdInfo {
    return ImageAdInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ImageAdInfo>): ImageAdInfo {
    const message = createBaseImageAdInfo();
    message.pixelWidth = (object.pixelWidth !== undefined && object.pixelWidth !== null)
      ? Long.fromValue(object.pixelWidth)
      : undefined;
    message.pixelHeight = (object.pixelHeight !== undefined && object.pixelHeight !== null)
      ? Long.fromValue(object.pixelHeight)
      : undefined;
    message.imageUrl = object.imageUrl ?? undefined;
    message.previewPixelWidth = (object.previewPixelWidth !== undefined && object.previewPixelWidth !== null)
      ? Long.fromValue(object.previewPixelWidth)
      : undefined;
    message.previewPixelHeight = (object.previewPixelHeight !== undefined && object.previewPixelHeight !== null)
      ? Long.fromValue(object.previewPixelHeight)
      : undefined;
    message.previewImageUrl = object.previewImageUrl ?? undefined;
    message.mimeType = object.mimeType ?? 0;
    message.name = object.name ?? undefined;
    message.imageAsset = (object.imageAsset !== undefined && object.imageAsset !== null)
      ? AdImageAsset.fromPartial(object.imageAsset)
      : undefined;
    message.data = object.data ?? undefined;
    message.adIdToCopyImageFrom = (object.adIdToCopyImageFrom !== undefined && object.adIdToCopyImageFrom !== null)
      ? Long.fromValue(object.adIdToCopyImageFrom)
      : undefined;
    return message;
  },
};

function createBaseVideoBumperInStreamAdInfo(): VideoBumperInStreamAdInfo {
  return { companionBanner: undefined, actionButtonLabel: "", actionHeadline: "" };
}

export const VideoBumperInStreamAdInfo: MessageFns<VideoBumperInStreamAdInfo> = {
  encode(message: VideoBumperInStreamAdInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.companionBanner !== undefined) {
      AdImageAsset.encode(message.companionBanner, writer.uint32(26).fork()).join();
    }
    if (message.actionButtonLabel !== "") {
      writer.uint32(34).string(message.actionButtonLabel);
    }
    if (message.actionHeadline !== "") {
      writer.uint32(42).string(message.actionHeadline);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VideoBumperInStreamAdInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVideoBumperInStreamAdInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 3:
          if (tag !== 26) {
            break;
          }

          message.companionBanner = AdImageAsset.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.actionButtonLabel = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.actionHeadline = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VideoBumperInStreamAdInfo {
    return {
      companionBanner: isSet(object.companionBanner) ? AdImageAsset.fromJSON(object.companionBanner) : undefined,
      actionButtonLabel: isSet(object.actionButtonLabel) ? globalThis.String(object.actionButtonLabel) : "",
      actionHeadline: isSet(object.actionHeadline) ? globalThis.String(object.actionHeadline) : "",
    };
  },

  toJSON(message: VideoBumperInStreamAdInfo): unknown {
    const obj: any = {};
    if (message.companionBanner !== undefined) {
      obj.companionBanner = AdImageAsset.toJSON(message.companionBanner);
    }
    if (message.actionButtonLabel !== "") {
      obj.actionButtonLabel = message.actionButtonLabel;
    }
    if (message.actionHeadline !== "") {
      obj.actionHeadline = message.actionHeadline;
    }
    return obj;
  },

  create(base?: DeepPartial<VideoBumperInStreamAdInfo>): VideoBumperInStreamAdInfo {
    return VideoBumperInStreamAdInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<VideoBumperInStreamAdInfo>): VideoBumperInStreamAdInfo {
    const message = createBaseVideoBumperInStreamAdInfo();
    message.companionBanner = (object.companionBanner !== undefined && object.companionBanner !== null)
      ? AdImageAsset.fromPartial(object.companionBanner)
      : undefined;
    message.actionButtonLabel = object.actionButtonLabel ?? "";
    message.actionHeadline = object.actionHeadline ?? "";
    return message;
  },
};

function createBaseVideoNonSkippableInStreamAdInfo(): VideoNonSkippableInStreamAdInfo {
  return { companionBanner: undefined, actionButtonLabel: "", actionHeadline: "" };
}

export const VideoNonSkippableInStreamAdInfo: MessageFns<VideoNonSkippableInStreamAdInfo> = {
  encode(message: VideoNonSkippableInStreamAdInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.companionBanner !== undefined) {
      AdImageAsset.encode(message.companionBanner, writer.uint32(42).fork()).join();
    }
    if (message.actionButtonLabel !== "") {
      writer.uint32(26).string(message.actionButtonLabel);
    }
    if (message.actionHeadline !== "") {
      writer.uint32(34).string(message.actionHeadline);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VideoNonSkippableInStreamAdInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVideoNonSkippableInStreamAdInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 5:
          if (tag !== 42) {
            break;
          }

          message.companionBanner = AdImageAsset.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.actionButtonLabel = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.actionHeadline = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VideoNonSkippableInStreamAdInfo {
    return {
      companionBanner: isSet(object.companionBanner) ? AdImageAsset.fromJSON(object.companionBanner) : undefined,
      actionButtonLabel: isSet(object.actionButtonLabel) ? globalThis.String(object.actionButtonLabel) : "",
      actionHeadline: isSet(object.actionHeadline) ? globalThis.String(object.actionHeadline) : "",
    };
  },

  toJSON(message: VideoNonSkippableInStreamAdInfo): unknown {
    const obj: any = {};
    if (message.companionBanner !== undefined) {
      obj.companionBanner = AdImageAsset.toJSON(message.companionBanner);
    }
    if (message.actionButtonLabel !== "") {
      obj.actionButtonLabel = message.actionButtonLabel;
    }
    if (message.actionHeadline !== "") {
      obj.actionHeadline = message.actionHeadline;
    }
    return obj;
  },

  create(base?: DeepPartial<VideoNonSkippableInStreamAdInfo>): VideoNonSkippableInStreamAdInfo {
    return VideoNonSkippableInStreamAdInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<VideoNonSkippableInStreamAdInfo>): VideoNonSkippableInStreamAdInfo {
    const message = createBaseVideoNonSkippableInStreamAdInfo();
    message.companionBanner = (object.companionBanner !== undefined && object.companionBanner !== null)
      ? AdImageAsset.fromPartial(object.companionBanner)
      : undefined;
    message.actionButtonLabel = object.actionButtonLabel ?? "";
    message.actionHeadline = object.actionHeadline ?? "";
    return message;
  },
};

function createBaseVideoTrueViewInStreamAdInfo(): VideoTrueViewInStreamAdInfo {
  return { actionButtonLabel: "", actionHeadline: "", companionBanner: undefined };
}

export const VideoTrueViewInStreamAdInfo: MessageFns<VideoTrueViewInStreamAdInfo> = {
  encode(message: VideoTrueViewInStreamAdInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.actionButtonLabel !== "") {
      writer.uint32(34).string(message.actionButtonLabel);
    }
    if (message.actionHeadline !== "") {
      writer.uint32(42).string(message.actionHeadline);
    }
    if (message.companionBanner !== undefined) {
      AdImageAsset.encode(message.companionBanner, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VideoTrueViewInStreamAdInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVideoTrueViewInStreamAdInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 4:
          if (tag !== 34) {
            break;
          }

          message.actionButtonLabel = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.actionHeadline = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.companionBanner = AdImageAsset.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VideoTrueViewInStreamAdInfo {
    return {
      actionButtonLabel: isSet(object.actionButtonLabel) ? globalThis.String(object.actionButtonLabel) : "",
      actionHeadline: isSet(object.actionHeadline) ? globalThis.String(object.actionHeadline) : "",
      companionBanner: isSet(object.companionBanner) ? AdImageAsset.fromJSON(object.companionBanner) : undefined,
    };
  },

  toJSON(message: VideoTrueViewInStreamAdInfo): unknown {
    const obj: any = {};
    if (message.actionButtonLabel !== "") {
      obj.actionButtonLabel = message.actionButtonLabel;
    }
    if (message.actionHeadline !== "") {
      obj.actionHeadline = message.actionHeadline;
    }
    if (message.companionBanner !== undefined) {
      obj.companionBanner = AdImageAsset.toJSON(message.companionBanner);
    }
    return obj;
  },

  create(base?: DeepPartial<VideoTrueViewInStreamAdInfo>): VideoTrueViewInStreamAdInfo {
    return VideoTrueViewInStreamAdInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<VideoTrueViewInStreamAdInfo>): VideoTrueViewInStreamAdInfo {
    const message = createBaseVideoTrueViewInStreamAdInfo();
    message.actionButtonLabel = object.actionButtonLabel ?? "";
    message.actionHeadline = object.actionHeadline ?? "";
    message.companionBanner = (object.companionBanner !== undefined && object.companionBanner !== null)
      ? AdImageAsset.fromPartial(object.companionBanner)
      : undefined;
    return message;
  },
};

function createBaseVideoOutstreamAdInfo(): VideoOutstreamAdInfo {
  return { headline: "", description: "" };
}

export const VideoOutstreamAdInfo: MessageFns<VideoOutstreamAdInfo> = {
  encode(message: VideoOutstreamAdInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.headline !== "") {
      writer.uint32(26).string(message.headline);
    }
    if (message.description !== "") {
      writer.uint32(34).string(message.description);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VideoOutstreamAdInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVideoOutstreamAdInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 3:
          if (tag !== 26) {
            break;
          }

          message.headline = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.description = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VideoOutstreamAdInfo {
    return {
      headline: isSet(object.headline) ? globalThis.String(object.headline) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
    };
  },

  toJSON(message: VideoOutstreamAdInfo): unknown {
    const obj: any = {};
    if (message.headline !== "") {
      obj.headline = message.headline;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    return obj;
  },

  create(base?: DeepPartial<VideoOutstreamAdInfo>): VideoOutstreamAdInfo {
    return VideoOutstreamAdInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<VideoOutstreamAdInfo>): VideoOutstreamAdInfo {
    const message = createBaseVideoOutstreamAdInfo();
    message.headline = object.headline ?? "";
    message.description = object.description ?? "";
    return message;
  },
};

function createBaseInFeedVideoAdInfo(): InFeedVideoAdInfo {
  return { headline: "", description1: "", description2: "", thumbnail: 0 };
}

export const InFeedVideoAdInfo: MessageFns<InFeedVideoAdInfo> = {
  encode(message: InFeedVideoAdInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.headline !== "") {
      writer.uint32(10).string(message.headline);
    }
    if (message.description1 !== "") {
      writer.uint32(18).string(message.description1);
    }
    if (message.description2 !== "") {
      writer.uint32(26).string(message.description2);
    }
    if (message.thumbnail !== 0) {
      writer.uint32(32).int32(message.thumbnail);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InFeedVideoAdInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInFeedVideoAdInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.headline = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.description1 = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.description2 = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.thumbnail = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InFeedVideoAdInfo {
    return {
      headline: isSet(object.headline) ? globalThis.String(object.headline) : "",
      description1: isSet(object.description1) ? globalThis.String(object.description1) : "",
      description2: isSet(object.description2) ? globalThis.String(object.description2) : "",
      thumbnail: isSet(object.thumbnail) ? videoThumbnailEnum_VideoThumbnailFromJSON(object.thumbnail) : 0,
    };
  },

  toJSON(message: InFeedVideoAdInfo): unknown {
    const obj: any = {};
    if (message.headline !== "") {
      obj.headline = message.headline;
    }
    if (message.description1 !== "") {
      obj.description1 = message.description1;
    }
    if (message.description2 !== "") {
      obj.description2 = message.description2;
    }
    if (message.thumbnail !== 0) {
      obj.thumbnail = videoThumbnailEnum_VideoThumbnailToJSON(message.thumbnail);
    }
    return obj;
  },

  create(base?: DeepPartial<InFeedVideoAdInfo>): InFeedVideoAdInfo {
    return InFeedVideoAdInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<InFeedVideoAdInfo>): InFeedVideoAdInfo {
    const message = createBaseInFeedVideoAdInfo();
    message.headline = object.headline ?? "";
    message.description1 = object.description1 ?? "";
    message.description2 = object.description2 ?? "";
    message.thumbnail = object.thumbnail ?? 0;
    return message;
  },
};

function createBaseVideoAdInfo(): VideoAdInfo {
  return {
    video: undefined,
    inStream: undefined,
    bumper: undefined,
    outStream: undefined,
    nonSkippable: undefined,
    inFeed: undefined,
  };
}

export const VideoAdInfo: MessageFns<VideoAdInfo> = {
  encode(message: VideoAdInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.video !== undefined) {
      AdVideoAsset.encode(message.video, writer.uint32(66).fork()).join();
    }
    if (message.inStream !== undefined) {
      VideoTrueViewInStreamAdInfo.encode(message.inStream, writer.uint32(18).fork()).join();
    }
    if (message.bumper !== undefined) {
      VideoBumperInStreamAdInfo.encode(message.bumper, writer.uint32(26).fork()).join();
    }
    if (message.outStream !== undefined) {
      VideoOutstreamAdInfo.encode(message.outStream, writer.uint32(34).fork()).join();
    }
    if (message.nonSkippable !== undefined) {
      VideoNonSkippableInStreamAdInfo.encode(message.nonSkippable, writer.uint32(42).fork()).join();
    }
    if (message.inFeed !== undefined) {
      InFeedVideoAdInfo.encode(message.inFeed, writer.uint32(74).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VideoAdInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVideoAdInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 8:
          if (tag !== 66) {
            break;
          }

          message.video = AdVideoAsset.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.inStream = VideoTrueViewInStreamAdInfo.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.bumper = VideoBumperInStreamAdInfo.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.outStream = VideoOutstreamAdInfo.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.nonSkippable = VideoNonSkippableInStreamAdInfo.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.inFeed = InFeedVideoAdInfo.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VideoAdInfo {
    return {
      video: isSet(object.video) ? AdVideoAsset.fromJSON(object.video) : undefined,
      inStream: isSet(object.inStream) ? VideoTrueViewInStreamAdInfo.fromJSON(object.inStream) : undefined,
      bumper: isSet(object.bumper) ? VideoBumperInStreamAdInfo.fromJSON(object.bumper) : undefined,
      outStream: isSet(object.outStream) ? VideoOutstreamAdInfo.fromJSON(object.outStream) : undefined,
      nonSkippable: isSet(object.nonSkippable)
        ? VideoNonSkippableInStreamAdInfo.fromJSON(object.nonSkippable)
        : undefined,
      inFeed: isSet(object.inFeed) ? InFeedVideoAdInfo.fromJSON(object.inFeed) : undefined,
    };
  },

  toJSON(message: VideoAdInfo): unknown {
    const obj: any = {};
    if (message.video !== undefined) {
      obj.video = AdVideoAsset.toJSON(message.video);
    }
    if (message.inStream !== undefined) {
      obj.inStream = VideoTrueViewInStreamAdInfo.toJSON(message.inStream);
    }
    if (message.bumper !== undefined) {
      obj.bumper = VideoBumperInStreamAdInfo.toJSON(message.bumper);
    }
    if (message.outStream !== undefined) {
      obj.outStream = VideoOutstreamAdInfo.toJSON(message.outStream);
    }
    if (message.nonSkippable !== undefined) {
      obj.nonSkippable = VideoNonSkippableInStreamAdInfo.toJSON(message.nonSkippable);
    }
    if (message.inFeed !== undefined) {
      obj.inFeed = InFeedVideoAdInfo.toJSON(message.inFeed);
    }
    return obj;
  },

  create(base?: DeepPartial<VideoAdInfo>): VideoAdInfo {
    return VideoAdInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<VideoAdInfo>): VideoAdInfo {
    const message = createBaseVideoAdInfo();
    message.video = (object.video !== undefined && object.video !== null)
      ? AdVideoAsset.fromPartial(object.video)
      : undefined;
    message.inStream = (object.inStream !== undefined && object.inStream !== null)
      ? VideoTrueViewInStreamAdInfo.fromPartial(object.inStream)
      : undefined;
    message.bumper = (object.bumper !== undefined && object.bumper !== null)
      ? VideoBumperInStreamAdInfo.fromPartial(object.bumper)
      : undefined;
    message.outStream = (object.outStream !== undefined && object.outStream !== null)
      ? VideoOutstreamAdInfo.fromPartial(object.outStream)
      : undefined;
    message.nonSkippable = (object.nonSkippable !== undefined && object.nonSkippable !== null)
      ? VideoNonSkippableInStreamAdInfo.fromPartial(object.nonSkippable)
      : undefined;
    message.inFeed = (object.inFeed !== undefined && object.inFeed !== null)
      ? InFeedVideoAdInfo.fromPartial(object.inFeed)
      : undefined;
    return message;
  },
};

function createBaseVideoResponsiveAdInfo(): VideoResponsiveAdInfo {
  return {
    headlines: [],
    longHeadlines: [],
    descriptions: [],
    callToActions: [],
    videos: [],
    companionBanners: [],
    breadcrumb1: "",
    breadcrumb2: "",
  };
}

export const VideoResponsiveAdInfo: MessageFns<VideoResponsiveAdInfo> = {
  encode(message: VideoResponsiveAdInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.headlines) {
      AdTextAsset.encode(v!, writer.uint32(10).fork()).join();
    }
    for (const v of message.longHeadlines) {
      AdTextAsset.encode(v!, writer.uint32(18).fork()).join();
    }
    for (const v of message.descriptions) {
      AdTextAsset.encode(v!, writer.uint32(26).fork()).join();
    }
    for (const v of message.callToActions) {
      AdTextAsset.encode(v!, writer.uint32(34).fork()).join();
    }
    for (const v of message.videos) {
      AdVideoAsset.encode(v!, writer.uint32(42).fork()).join();
    }
    for (const v of message.companionBanners) {
      AdImageAsset.encode(v!, writer.uint32(50).fork()).join();
    }
    if (message.breadcrumb1 !== "") {
      writer.uint32(58).string(message.breadcrumb1);
    }
    if (message.breadcrumb2 !== "") {
      writer.uint32(66).string(message.breadcrumb2);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VideoResponsiveAdInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVideoResponsiveAdInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.headlines.push(AdTextAsset.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.longHeadlines.push(AdTextAsset.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.descriptions.push(AdTextAsset.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.callToActions.push(AdTextAsset.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.videos.push(AdVideoAsset.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.companionBanners.push(AdImageAsset.decode(reader, reader.uint32()));
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.breadcrumb1 = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.breadcrumb2 = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VideoResponsiveAdInfo {
    return {
      headlines: globalThis.Array.isArray(object?.headlines)
        ? object.headlines.map((e: any) => AdTextAsset.fromJSON(e))
        : [],
      longHeadlines: globalThis.Array.isArray(object?.longHeadlines)
        ? object.longHeadlines.map((e: any) => AdTextAsset.fromJSON(e))
        : [],
      descriptions: globalThis.Array.isArray(object?.descriptions)
        ? object.descriptions.map((e: any) => AdTextAsset.fromJSON(e))
        : [],
      callToActions: globalThis.Array.isArray(object?.callToActions)
        ? object.callToActions.map((e: any) => AdTextAsset.fromJSON(e))
        : [],
      videos: globalThis.Array.isArray(object?.videos)
        ? object.videos.map((e: any) => AdVideoAsset.fromJSON(e))
        : [],
      companionBanners: globalThis.Array.isArray(object?.companionBanners)
        ? object.companionBanners.map((e: any) => AdImageAsset.fromJSON(e))
        : [],
      breadcrumb1: isSet(object.breadcrumb1) ? globalThis.String(object.breadcrumb1) : "",
      breadcrumb2: isSet(object.breadcrumb2) ? globalThis.String(object.breadcrumb2) : "",
    };
  },

  toJSON(message: VideoResponsiveAdInfo): unknown {
    const obj: any = {};
    if (message.headlines?.length) {
      obj.headlines = message.headlines.map((e) => AdTextAsset.toJSON(e));
    }
    if (message.longHeadlines?.length) {
      obj.longHeadlines = message.longHeadlines.map((e) => AdTextAsset.toJSON(e));
    }
    if (message.descriptions?.length) {
      obj.descriptions = message.descriptions.map((e) => AdTextAsset.toJSON(e));
    }
    if (message.callToActions?.length) {
      obj.callToActions = message.callToActions.map((e) => AdTextAsset.toJSON(e));
    }
    if (message.videos?.length) {
      obj.videos = message.videos.map((e) => AdVideoAsset.toJSON(e));
    }
    if (message.companionBanners?.length) {
      obj.companionBanners = message.companionBanners.map((e) => AdImageAsset.toJSON(e));
    }
    if (message.breadcrumb1 !== "") {
      obj.breadcrumb1 = message.breadcrumb1;
    }
    if (message.breadcrumb2 !== "") {
      obj.breadcrumb2 = message.breadcrumb2;
    }
    return obj;
  },

  create(base?: DeepPartial<VideoResponsiveAdInfo>): VideoResponsiveAdInfo {
    return VideoResponsiveAdInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<VideoResponsiveAdInfo>): VideoResponsiveAdInfo {
    const message = createBaseVideoResponsiveAdInfo();
    message.headlines = object.headlines?.map((e) => AdTextAsset.fromPartial(e)) || [];
    message.longHeadlines = object.longHeadlines?.map((e) => AdTextAsset.fromPartial(e)) || [];
    message.descriptions = object.descriptions?.map((e) => AdTextAsset.fromPartial(e)) || [];
    message.callToActions = object.callToActions?.map((e) => AdTextAsset.fromPartial(e)) || [];
    message.videos = object.videos?.map((e) => AdVideoAsset.fromPartial(e)) || [];
    message.companionBanners = object.companionBanners?.map((e) => AdImageAsset.fromPartial(e)) || [];
    message.breadcrumb1 = object.breadcrumb1 ?? "";
    message.breadcrumb2 = object.breadcrumb2 ?? "";
    return message;
  },
};

function createBaseResponsiveSearchAdInfo(): ResponsiveSearchAdInfo {
  return { headlines: [], descriptions: [], path1: undefined, path2: undefined };
}

export const ResponsiveSearchAdInfo: MessageFns<ResponsiveSearchAdInfo> = {
  encode(message: ResponsiveSearchAdInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.headlines) {
      AdTextAsset.encode(v!, writer.uint32(10).fork()).join();
    }
    for (const v of message.descriptions) {
      AdTextAsset.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.path1 !== undefined) {
      writer.uint32(42).string(message.path1);
    }
    if (message.path2 !== undefined) {
      writer.uint32(50).string(message.path2);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResponsiveSearchAdInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResponsiveSearchAdInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.headlines.push(AdTextAsset.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.descriptions.push(AdTextAsset.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.path1 = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.path2 = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResponsiveSearchAdInfo {
    return {
      headlines: globalThis.Array.isArray(object?.headlines)
        ? object.headlines.map((e: any) => AdTextAsset.fromJSON(e))
        : [],
      descriptions: globalThis.Array.isArray(object?.descriptions)
        ? object.descriptions.map((e: any) => AdTextAsset.fromJSON(e))
        : [],
      path1: isSet(object.path1) ? globalThis.String(object.path1) : undefined,
      path2: isSet(object.path2) ? globalThis.String(object.path2) : undefined,
    };
  },

  toJSON(message: ResponsiveSearchAdInfo): unknown {
    const obj: any = {};
    if (message.headlines?.length) {
      obj.headlines = message.headlines.map((e) => AdTextAsset.toJSON(e));
    }
    if (message.descriptions?.length) {
      obj.descriptions = message.descriptions.map((e) => AdTextAsset.toJSON(e));
    }
    if (message.path1 !== undefined) {
      obj.path1 = message.path1;
    }
    if (message.path2 !== undefined) {
      obj.path2 = message.path2;
    }
    return obj;
  },

  create(base?: DeepPartial<ResponsiveSearchAdInfo>): ResponsiveSearchAdInfo {
    return ResponsiveSearchAdInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ResponsiveSearchAdInfo>): ResponsiveSearchAdInfo {
    const message = createBaseResponsiveSearchAdInfo();
    message.headlines = object.headlines?.map((e) => AdTextAsset.fromPartial(e)) || [];
    message.descriptions = object.descriptions?.map((e) => AdTextAsset.fromPartial(e)) || [];
    message.path1 = object.path1 ?? undefined;
    message.path2 = object.path2 ?? undefined;
    return message;
  },
};

function createBaseLegacyResponsiveDisplayAdInfo(): LegacyResponsiveDisplayAdInfo {
  return {
    shortHeadline: undefined,
    longHeadline: undefined,
    description: undefined,
    businessName: undefined,
    allowFlexibleColor: undefined,
    accentColor: undefined,
    mainColor: undefined,
    callToActionText: undefined,
    logoImage: undefined,
    squareLogoImage: undefined,
    marketingImage: undefined,
    squareMarketingImage: undefined,
    formatSetting: 0,
    pricePrefix: undefined,
    promoText: undefined,
  };
}

export const LegacyResponsiveDisplayAdInfo: MessageFns<LegacyResponsiveDisplayAdInfo> = {
  encode(message: LegacyResponsiveDisplayAdInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.shortHeadline !== undefined) {
      writer.uint32(130).string(message.shortHeadline);
    }
    if (message.longHeadline !== undefined) {
      writer.uint32(138).string(message.longHeadline);
    }
    if (message.description !== undefined) {
      writer.uint32(146).string(message.description);
    }
    if (message.businessName !== undefined) {
      writer.uint32(154).string(message.businessName);
    }
    if (message.allowFlexibleColor !== undefined) {
      writer.uint32(160).bool(message.allowFlexibleColor);
    }
    if (message.accentColor !== undefined) {
      writer.uint32(170).string(message.accentColor);
    }
    if (message.mainColor !== undefined) {
      writer.uint32(178).string(message.mainColor);
    }
    if (message.callToActionText !== undefined) {
      writer.uint32(186).string(message.callToActionText);
    }
    if (message.logoImage !== undefined) {
      writer.uint32(194).string(message.logoImage);
    }
    if (message.squareLogoImage !== undefined) {
      writer.uint32(202).string(message.squareLogoImage);
    }
    if (message.marketingImage !== undefined) {
      writer.uint32(210).string(message.marketingImage);
    }
    if (message.squareMarketingImage !== undefined) {
      writer.uint32(218).string(message.squareMarketingImage);
    }
    if (message.formatSetting !== 0) {
      writer.uint32(104).int32(message.formatSetting);
    }
    if (message.pricePrefix !== undefined) {
      writer.uint32(226).string(message.pricePrefix);
    }
    if (message.promoText !== undefined) {
      writer.uint32(234).string(message.promoText);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LegacyResponsiveDisplayAdInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLegacyResponsiveDisplayAdInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 16:
          if (tag !== 130) {
            break;
          }

          message.shortHeadline = reader.string();
          continue;
        case 17:
          if (tag !== 138) {
            break;
          }

          message.longHeadline = reader.string();
          continue;
        case 18:
          if (tag !== 146) {
            break;
          }

          message.description = reader.string();
          continue;
        case 19:
          if (tag !== 154) {
            break;
          }

          message.businessName = reader.string();
          continue;
        case 20:
          if (tag !== 160) {
            break;
          }

          message.allowFlexibleColor = reader.bool();
          continue;
        case 21:
          if (tag !== 170) {
            break;
          }

          message.accentColor = reader.string();
          continue;
        case 22:
          if (tag !== 178) {
            break;
          }

          message.mainColor = reader.string();
          continue;
        case 23:
          if (tag !== 186) {
            break;
          }

          message.callToActionText = reader.string();
          continue;
        case 24:
          if (tag !== 194) {
            break;
          }

          message.logoImage = reader.string();
          continue;
        case 25:
          if (tag !== 202) {
            break;
          }

          message.squareLogoImage = reader.string();
          continue;
        case 26:
          if (tag !== 210) {
            break;
          }

          message.marketingImage = reader.string();
          continue;
        case 27:
          if (tag !== 218) {
            break;
          }

          message.squareMarketingImage = reader.string();
          continue;
        case 13:
          if (tag !== 104) {
            break;
          }

          message.formatSetting = reader.int32() as any;
          continue;
        case 28:
          if (tag !== 226) {
            break;
          }

          message.pricePrefix = reader.string();
          continue;
        case 29:
          if (tag !== 234) {
            break;
          }

          message.promoText = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LegacyResponsiveDisplayAdInfo {
    return {
      shortHeadline: isSet(object.shortHeadline) ? globalThis.String(object.shortHeadline) : undefined,
      longHeadline: isSet(object.longHeadline) ? globalThis.String(object.longHeadline) : undefined,
      description: isSet(object.description) ? globalThis.String(object.description) : undefined,
      businessName: isSet(object.businessName) ? globalThis.String(object.businessName) : undefined,
      allowFlexibleColor: isSet(object.allowFlexibleColor) ? globalThis.Boolean(object.allowFlexibleColor) : undefined,
      accentColor: isSet(object.accentColor) ? globalThis.String(object.accentColor) : undefined,
      mainColor: isSet(object.mainColor) ? globalThis.String(object.mainColor) : undefined,
      callToActionText: isSet(object.callToActionText) ? globalThis.String(object.callToActionText) : undefined,
      logoImage: isSet(object.logoImage) ? globalThis.String(object.logoImage) : undefined,
      squareLogoImage: isSet(object.squareLogoImage) ? globalThis.String(object.squareLogoImage) : undefined,
      marketingImage: isSet(object.marketingImage) ? globalThis.String(object.marketingImage) : undefined,
      squareMarketingImage: isSet(object.squareMarketingImage)
        ? globalThis.String(object.squareMarketingImage)
        : undefined,
      formatSetting: isSet(object.formatSetting)
        ? displayAdFormatSettingEnum_DisplayAdFormatSettingFromJSON(object.formatSetting)
        : 0,
      pricePrefix: isSet(object.pricePrefix) ? globalThis.String(object.pricePrefix) : undefined,
      promoText: isSet(object.promoText) ? globalThis.String(object.promoText) : undefined,
    };
  },

  toJSON(message: LegacyResponsiveDisplayAdInfo): unknown {
    const obj: any = {};
    if (message.shortHeadline !== undefined) {
      obj.shortHeadline = message.shortHeadline;
    }
    if (message.longHeadline !== undefined) {
      obj.longHeadline = message.longHeadline;
    }
    if (message.description !== undefined) {
      obj.description = message.description;
    }
    if (message.businessName !== undefined) {
      obj.businessName = message.businessName;
    }
    if (message.allowFlexibleColor !== undefined) {
      obj.allowFlexibleColor = message.allowFlexibleColor;
    }
    if (message.accentColor !== undefined) {
      obj.accentColor = message.accentColor;
    }
    if (message.mainColor !== undefined) {
      obj.mainColor = message.mainColor;
    }
    if (message.callToActionText !== undefined) {
      obj.callToActionText = message.callToActionText;
    }
    if (message.logoImage !== undefined) {
      obj.logoImage = message.logoImage;
    }
    if (message.squareLogoImage !== undefined) {
      obj.squareLogoImage = message.squareLogoImage;
    }
    if (message.marketingImage !== undefined) {
      obj.marketingImage = message.marketingImage;
    }
    if (message.squareMarketingImage !== undefined) {
      obj.squareMarketingImage = message.squareMarketingImage;
    }
    if (message.formatSetting !== 0) {
      obj.formatSetting = displayAdFormatSettingEnum_DisplayAdFormatSettingToJSON(message.formatSetting);
    }
    if (message.pricePrefix !== undefined) {
      obj.pricePrefix = message.pricePrefix;
    }
    if (message.promoText !== undefined) {
      obj.promoText = message.promoText;
    }
    return obj;
  },

  create(base?: DeepPartial<LegacyResponsiveDisplayAdInfo>): LegacyResponsiveDisplayAdInfo {
    return LegacyResponsiveDisplayAdInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LegacyResponsiveDisplayAdInfo>): LegacyResponsiveDisplayAdInfo {
    const message = createBaseLegacyResponsiveDisplayAdInfo();
    message.shortHeadline = object.shortHeadline ?? undefined;
    message.longHeadline = object.longHeadline ?? undefined;
    message.description = object.description ?? undefined;
    message.businessName = object.businessName ?? undefined;
    message.allowFlexibleColor = object.allowFlexibleColor ?? undefined;
    message.accentColor = object.accentColor ?? undefined;
    message.mainColor = object.mainColor ?? undefined;
    message.callToActionText = object.callToActionText ?? undefined;
    message.logoImage = object.logoImage ?? undefined;
    message.squareLogoImage = object.squareLogoImage ?? undefined;
    message.marketingImage = object.marketingImage ?? undefined;
    message.squareMarketingImage = object.squareMarketingImage ?? undefined;
    message.formatSetting = object.formatSetting ?? 0;
    message.pricePrefix = object.pricePrefix ?? undefined;
    message.promoText = object.promoText ?? undefined;
    return message;
  },
};

function createBaseAppAdInfo(): AppAdInfo {
  return {
    mandatoryAdText: undefined,
    headlines: [],
    descriptions: [],
    images: [],
    youtubeVideos: [],
    html5MediaBundles: [],
  };
}

export const AppAdInfo: MessageFns<AppAdInfo> = {
  encode(message: AppAdInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.mandatoryAdText !== undefined) {
      AdTextAsset.encode(message.mandatoryAdText, writer.uint32(10).fork()).join();
    }
    for (const v of message.headlines) {
      AdTextAsset.encode(v!, writer.uint32(18).fork()).join();
    }
    for (const v of message.descriptions) {
      AdTextAsset.encode(v!, writer.uint32(26).fork()).join();
    }
    for (const v of message.images) {
      AdImageAsset.encode(v!, writer.uint32(34).fork()).join();
    }
    for (const v of message.youtubeVideos) {
      AdVideoAsset.encode(v!, writer.uint32(42).fork()).join();
    }
    for (const v of message.html5MediaBundles) {
      AdMediaBundleAsset.encode(v!, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AppAdInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAppAdInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.mandatoryAdText = AdTextAsset.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.headlines.push(AdTextAsset.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.descriptions.push(AdTextAsset.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.images.push(AdImageAsset.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.youtubeVideos.push(AdVideoAsset.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.html5MediaBundles.push(AdMediaBundleAsset.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AppAdInfo {
    return {
      mandatoryAdText: isSet(object.mandatoryAdText) ? AdTextAsset.fromJSON(object.mandatoryAdText) : undefined,
      headlines: globalThis.Array.isArray(object?.headlines)
        ? object.headlines.map((e: any) => AdTextAsset.fromJSON(e))
        : [],
      descriptions: globalThis.Array.isArray(object?.descriptions)
        ? object.descriptions.map((e: any) => AdTextAsset.fromJSON(e))
        : [],
      images: globalThis.Array.isArray(object?.images) ? object.images.map((e: any) => AdImageAsset.fromJSON(e)) : [],
      youtubeVideos: globalThis.Array.isArray(object?.youtubeVideos)
        ? object.youtubeVideos.map((e: any) => AdVideoAsset.fromJSON(e))
        : [],
      html5MediaBundles: globalThis.Array.isArray(object?.html5MediaBundles)
        ? object.html5MediaBundles.map((e: any) => AdMediaBundleAsset.fromJSON(e))
        : [],
    };
  },

  toJSON(message: AppAdInfo): unknown {
    const obj: any = {};
    if (message.mandatoryAdText !== undefined) {
      obj.mandatoryAdText = AdTextAsset.toJSON(message.mandatoryAdText);
    }
    if (message.headlines?.length) {
      obj.headlines = message.headlines.map((e) => AdTextAsset.toJSON(e));
    }
    if (message.descriptions?.length) {
      obj.descriptions = message.descriptions.map((e) => AdTextAsset.toJSON(e));
    }
    if (message.images?.length) {
      obj.images = message.images.map((e) => AdImageAsset.toJSON(e));
    }
    if (message.youtubeVideos?.length) {
      obj.youtubeVideos = message.youtubeVideos.map((e) => AdVideoAsset.toJSON(e));
    }
    if (message.html5MediaBundles?.length) {
      obj.html5MediaBundles = message.html5MediaBundles.map((e) => AdMediaBundleAsset.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<AppAdInfo>): AppAdInfo {
    return AppAdInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AppAdInfo>): AppAdInfo {
    const message = createBaseAppAdInfo();
    message.mandatoryAdText = (object.mandatoryAdText !== undefined && object.mandatoryAdText !== null)
      ? AdTextAsset.fromPartial(object.mandatoryAdText)
      : undefined;
    message.headlines = object.headlines?.map((e) => AdTextAsset.fromPartial(e)) || [];
    message.descriptions = object.descriptions?.map((e) => AdTextAsset.fromPartial(e)) || [];
    message.images = object.images?.map((e) => AdImageAsset.fromPartial(e)) || [];
    message.youtubeVideos = object.youtubeVideos?.map((e) => AdVideoAsset.fromPartial(e)) || [];
    message.html5MediaBundles = object.html5MediaBundles?.map((e) => AdMediaBundleAsset.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAppEngagementAdInfo(): AppEngagementAdInfo {
  return { headlines: [], descriptions: [], images: [], videos: [] };
}

export const AppEngagementAdInfo: MessageFns<AppEngagementAdInfo> = {
  encode(message: AppEngagementAdInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.headlines) {
      AdTextAsset.encode(v!, writer.uint32(10).fork()).join();
    }
    for (const v of message.descriptions) {
      AdTextAsset.encode(v!, writer.uint32(18).fork()).join();
    }
    for (const v of message.images) {
      AdImageAsset.encode(v!, writer.uint32(26).fork()).join();
    }
    for (const v of message.videos) {
      AdVideoAsset.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AppEngagementAdInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAppEngagementAdInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.headlines.push(AdTextAsset.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.descriptions.push(AdTextAsset.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.images.push(AdImageAsset.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.videos.push(AdVideoAsset.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AppEngagementAdInfo {
    return {
      headlines: globalThis.Array.isArray(object?.headlines)
        ? object.headlines.map((e: any) => AdTextAsset.fromJSON(e))
        : [],
      descriptions: globalThis.Array.isArray(object?.descriptions)
        ? object.descriptions.map((e: any) => AdTextAsset.fromJSON(e))
        : [],
      images: globalThis.Array.isArray(object?.images) ? object.images.map((e: any) => AdImageAsset.fromJSON(e)) : [],
      videos: globalThis.Array.isArray(object?.videos) ? object.videos.map((e: any) => AdVideoAsset.fromJSON(e)) : [],
    };
  },

  toJSON(message: AppEngagementAdInfo): unknown {
    const obj: any = {};
    if (message.headlines?.length) {
      obj.headlines = message.headlines.map((e) => AdTextAsset.toJSON(e));
    }
    if (message.descriptions?.length) {
      obj.descriptions = message.descriptions.map((e) => AdTextAsset.toJSON(e));
    }
    if (message.images?.length) {
      obj.images = message.images.map((e) => AdImageAsset.toJSON(e));
    }
    if (message.videos?.length) {
      obj.videos = message.videos.map((e) => AdVideoAsset.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<AppEngagementAdInfo>): AppEngagementAdInfo {
    return AppEngagementAdInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AppEngagementAdInfo>): AppEngagementAdInfo {
    const message = createBaseAppEngagementAdInfo();
    message.headlines = object.headlines?.map((e) => AdTextAsset.fromPartial(e)) || [];
    message.descriptions = object.descriptions?.map((e) => AdTextAsset.fromPartial(e)) || [];
    message.images = object.images?.map((e) => AdImageAsset.fromPartial(e)) || [];
    message.videos = object.videos?.map((e) => AdVideoAsset.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAppPreRegistrationAdInfo(): AppPreRegistrationAdInfo {
  return { headlines: [], descriptions: [], images: [], youtubeVideos: [] };
}

export const AppPreRegistrationAdInfo: MessageFns<AppPreRegistrationAdInfo> = {
  encode(message: AppPreRegistrationAdInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.headlines) {
      AdTextAsset.encode(v!, writer.uint32(10).fork()).join();
    }
    for (const v of message.descriptions) {
      AdTextAsset.encode(v!, writer.uint32(18).fork()).join();
    }
    for (const v of message.images) {
      AdImageAsset.encode(v!, writer.uint32(26).fork()).join();
    }
    for (const v of message.youtubeVideos) {
      AdVideoAsset.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AppPreRegistrationAdInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAppPreRegistrationAdInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.headlines.push(AdTextAsset.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.descriptions.push(AdTextAsset.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.images.push(AdImageAsset.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.youtubeVideos.push(AdVideoAsset.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AppPreRegistrationAdInfo {
    return {
      headlines: globalThis.Array.isArray(object?.headlines)
        ? object.headlines.map((e: any) => AdTextAsset.fromJSON(e))
        : [],
      descriptions: globalThis.Array.isArray(object?.descriptions)
        ? object.descriptions.map((e: any) => AdTextAsset.fromJSON(e))
        : [],
      images: globalThis.Array.isArray(object?.images) ? object.images.map((e: any) => AdImageAsset.fromJSON(e)) : [],
      youtubeVideos: globalThis.Array.isArray(object?.youtubeVideos)
        ? object.youtubeVideos.map((e: any) => AdVideoAsset.fromJSON(e))
        : [],
    };
  },

  toJSON(message: AppPreRegistrationAdInfo): unknown {
    const obj: any = {};
    if (message.headlines?.length) {
      obj.headlines = message.headlines.map((e) => AdTextAsset.toJSON(e));
    }
    if (message.descriptions?.length) {
      obj.descriptions = message.descriptions.map((e) => AdTextAsset.toJSON(e));
    }
    if (message.images?.length) {
      obj.images = message.images.map((e) => AdImageAsset.toJSON(e));
    }
    if (message.youtubeVideos?.length) {
      obj.youtubeVideos = message.youtubeVideos.map((e) => AdVideoAsset.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<AppPreRegistrationAdInfo>): AppPreRegistrationAdInfo {
    return AppPreRegistrationAdInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AppPreRegistrationAdInfo>): AppPreRegistrationAdInfo {
    const message = createBaseAppPreRegistrationAdInfo();
    message.headlines = object.headlines?.map((e) => AdTextAsset.fromPartial(e)) || [];
    message.descriptions = object.descriptions?.map((e) => AdTextAsset.fromPartial(e)) || [];
    message.images = object.images?.map((e) => AdImageAsset.fromPartial(e)) || [];
    message.youtubeVideos = object.youtubeVideos?.map((e) => AdVideoAsset.fromPartial(e)) || [];
    return message;
  },
};

function createBaseLegacyAppInstallAdInfo(): LegacyAppInstallAdInfo {
  return { appId: undefined, appStore: 0, headline: undefined, description1: undefined, description2: undefined };
}

export const LegacyAppInstallAdInfo: MessageFns<LegacyAppInstallAdInfo> = {
  encode(message: LegacyAppInstallAdInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.appId !== undefined) {
      writer.uint32(50).string(message.appId);
    }
    if (message.appStore !== 0) {
      writer.uint32(16).int32(message.appStore);
    }
    if (message.headline !== undefined) {
      writer.uint32(58).string(message.headline);
    }
    if (message.description1 !== undefined) {
      writer.uint32(66).string(message.description1);
    }
    if (message.description2 !== undefined) {
      writer.uint32(74).string(message.description2);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LegacyAppInstallAdInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLegacyAppInstallAdInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 6:
          if (tag !== 50) {
            break;
          }

          message.appId = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.appStore = reader.int32() as any;
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.headline = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.description1 = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.description2 = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LegacyAppInstallAdInfo {
    return {
      appId: isSet(object.appId) ? globalThis.String(object.appId) : undefined,
      appStore: isSet(object.appStore)
        ? legacyAppInstallAdAppStoreEnum_LegacyAppInstallAdAppStoreFromJSON(object.appStore)
        : 0,
      headline: isSet(object.headline) ? globalThis.String(object.headline) : undefined,
      description1: isSet(object.description1) ? globalThis.String(object.description1) : undefined,
      description2: isSet(object.description2) ? globalThis.String(object.description2) : undefined,
    };
  },

  toJSON(message: LegacyAppInstallAdInfo): unknown {
    const obj: any = {};
    if (message.appId !== undefined) {
      obj.appId = message.appId;
    }
    if (message.appStore !== 0) {
      obj.appStore = legacyAppInstallAdAppStoreEnum_LegacyAppInstallAdAppStoreToJSON(message.appStore);
    }
    if (message.headline !== undefined) {
      obj.headline = message.headline;
    }
    if (message.description1 !== undefined) {
      obj.description1 = message.description1;
    }
    if (message.description2 !== undefined) {
      obj.description2 = message.description2;
    }
    return obj;
  },

  create(base?: DeepPartial<LegacyAppInstallAdInfo>): LegacyAppInstallAdInfo {
    return LegacyAppInstallAdInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LegacyAppInstallAdInfo>): LegacyAppInstallAdInfo {
    const message = createBaseLegacyAppInstallAdInfo();
    message.appId = object.appId ?? undefined;
    message.appStore = object.appStore ?? 0;
    message.headline = object.headline ?? undefined;
    message.description1 = object.description1 ?? undefined;
    message.description2 = object.description2 ?? undefined;
    return message;
  },
};

function createBaseResponsiveDisplayAdInfo(): ResponsiveDisplayAdInfo {
  return {
    marketingImages: [],
    squareMarketingImages: [],
    logoImages: [],
    squareLogoImages: [],
    headlines: [],
    longHeadline: undefined,
    descriptions: [],
    youtubeVideos: [],
    businessName: undefined,
    mainColor: undefined,
    accentColor: undefined,
    allowFlexibleColor: undefined,
    callToActionText: undefined,
    pricePrefix: undefined,
    promoText: undefined,
    formatSetting: 0,
    controlSpec: undefined,
  };
}

export const ResponsiveDisplayAdInfo: MessageFns<ResponsiveDisplayAdInfo> = {
  encode(message: ResponsiveDisplayAdInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.marketingImages) {
      AdImageAsset.encode(v!, writer.uint32(10).fork()).join();
    }
    for (const v of message.squareMarketingImages) {
      AdImageAsset.encode(v!, writer.uint32(18).fork()).join();
    }
    for (const v of message.logoImages) {
      AdImageAsset.encode(v!, writer.uint32(26).fork()).join();
    }
    for (const v of message.squareLogoImages) {
      AdImageAsset.encode(v!, writer.uint32(34).fork()).join();
    }
    for (const v of message.headlines) {
      AdTextAsset.encode(v!, writer.uint32(42).fork()).join();
    }
    if (message.longHeadline !== undefined) {
      AdTextAsset.encode(message.longHeadline, writer.uint32(50).fork()).join();
    }
    for (const v of message.descriptions) {
      AdTextAsset.encode(v!, writer.uint32(58).fork()).join();
    }
    for (const v of message.youtubeVideos) {
      AdVideoAsset.encode(v!, writer.uint32(66).fork()).join();
    }
    if (message.businessName !== undefined) {
      writer.uint32(138).string(message.businessName);
    }
    if (message.mainColor !== undefined) {
      writer.uint32(146).string(message.mainColor);
    }
    if (message.accentColor !== undefined) {
      writer.uint32(154).string(message.accentColor);
    }
    if (message.allowFlexibleColor !== undefined) {
      writer.uint32(160).bool(message.allowFlexibleColor);
    }
    if (message.callToActionText !== undefined) {
      writer.uint32(170).string(message.callToActionText);
    }
    if (message.pricePrefix !== undefined) {
      writer.uint32(178).string(message.pricePrefix);
    }
    if (message.promoText !== undefined) {
      writer.uint32(186).string(message.promoText);
    }
    if (message.formatSetting !== 0) {
      writer.uint32(128).int32(message.formatSetting);
    }
    if (message.controlSpec !== undefined) {
      ResponsiveDisplayAdControlSpec.encode(message.controlSpec, writer.uint32(194).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResponsiveDisplayAdInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResponsiveDisplayAdInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.marketingImages.push(AdImageAsset.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.squareMarketingImages.push(AdImageAsset.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.logoImages.push(AdImageAsset.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.squareLogoImages.push(AdImageAsset.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.headlines.push(AdTextAsset.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.longHeadline = AdTextAsset.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.descriptions.push(AdTextAsset.decode(reader, reader.uint32()));
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.youtubeVideos.push(AdVideoAsset.decode(reader, reader.uint32()));
          continue;
        case 17:
          if (tag !== 138) {
            break;
          }

          message.businessName = reader.string();
          continue;
        case 18:
          if (tag !== 146) {
            break;
          }

          message.mainColor = reader.string();
          continue;
        case 19:
          if (tag !== 154) {
            break;
          }

          message.accentColor = reader.string();
          continue;
        case 20:
          if (tag !== 160) {
            break;
          }

          message.allowFlexibleColor = reader.bool();
          continue;
        case 21:
          if (tag !== 170) {
            break;
          }

          message.callToActionText = reader.string();
          continue;
        case 22:
          if (tag !== 178) {
            break;
          }

          message.pricePrefix = reader.string();
          continue;
        case 23:
          if (tag !== 186) {
            break;
          }

          message.promoText = reader.string();
          continue;
        case 16:
          if (tag !== 128) {
            break;
          }

          message.formatSetting = reader.int32() as any;
          continue;
        case 24:
          if (tag !== 194) {
            break;
          }

          message.controlSpec = ResponsiveDisplayAdControlSpec.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResponsiveDisplayAdInfo {
    return {
      marketingImages: globalThis.Array.isArray(object?.marketingImages)
        ? object.marketingImages.map((e: any) => AdImageAsset.fromJSON(e))
        : [],
      squareMarketingImages: globalThis.Array.isArray(object?.squareMarketingImages)
        ? object.squareMarketingImages.map((e: any) => AdImageAsset.fromJSON(e))
        : [],
      logoImages: globalThis.Array.isArray(object?.logoImages)
        ? object.logoImages.map((e: any) => AdImageAsset.fromJSON(e))
        : [],
      squareLogoImages: globalThis.Array.isArray(object?.squareLogoImages)
        ? object.squareLogoImages.map((e: any) => AdImageAsset.fromJSON(e))
        : [],
      headlines: globalThis.Array.isArray(object?.headlines)
        ? object.headlines.map((e: any) => AdTextAsset.fromJSON(e))
        : [],
      longHeadline: isSet(object.longHeadline) ? AdTextAsset.fromJSON(object.longHeadline) : undefined,
      descriptions: globalThis.Array.isArray(object?.descriptions)
        ? object.descriptions.map((e: any) => AdTextAsset.fromJSON(e))
        : [],
      youtubeVideos: globalThis.Array.isArray(object?.youtubeVideos)
        ? object.youtubeVideos.map((e: any) => AdVideoAsset.fromJSON(e))
        : [],
      businessName: isSet(object.businessName) ? globalThis.String(object.businessName) : undefined,
      mainColor: isSet(object.mainColor) ? globalThis.String(object.mainColor) : undefined,
      accentColor: isSet(object.accentColor) ? globalThis.String(object.accentColor) : undefined,
      allowFlexibleColor: isSet(object.allowFlexibleColor) ? globalThis.Boolean(object.allowFlexibleColor) : undefined,
      callToActionText: isSet(object.callToActionText) ? globalThis.String(object.callToActionText) : undefined,
      pricePrefix: isSet(object.pricePrefix) ? globalThis.String(object.pricePrefix) : undefined,
      promoText: isSet(object.promoText) ? globalThis.String(object.promoText) : undefined,
      formatSetting: isSet(object.formatSetting)
        ? displayAdFormatSettingEnum_DisplayAdFormatSettingFromJSON(object.formatSetting)
        : 0,
      controlSpec: isSet(object.controlSpec) ? ResponsiveDisplayAdControlSpec.fromJSON(object.controlSpec) : undefined,
    };
  },

  toJSON(message: ResponsiveDisplayAdInfo): unknown {
    const obj: any = {};
    if (message.marketingImages?.length) {
      obj.marketingImages = message.marketingImages.map((e) => AdImageAsset.toJSON(e));
    }
    if (message.squareMarketingImages?.length) {
      obj.squareMarketingImages = message.squareMarketingImages.map((e) => AdImageAsset.toJSON(e));
    }
    if (message.logoImages?.length) {
      obj.logoImages = message.logoImages.map((e) => AdImageAsset.toJSON(e));
    }
    if (message.squareLogoImages?.length) {
      obj.squareLogoImages = message.squareLogoImages.map((e) => AdImageAsset.toJSON(e));
    }
    if (message.headlines?.length) {
      obj.headlines = message.headlines.map((e) => AdTextAsset.toJSON(e));
    }
    if (message.longHeadline !== undefined) {
      obj.longHeadline = AdTextAsset.toJSON(message.longHeadline);
    }
    if (message.descriptions?.length) {
      obj.descriptions = message.descriptions.map((e) => AdTextAsset.toJSON(e));
    }
    if (message.youtubeVideos?.length) {
      obj.youtubeVideos = message.youtubeVideos.map((e) => AdVideoAsset.toJSON(e));
    }
    if (message.businessName !== undefined) {
      obj.businessName = message.businessName;
    }
    if (message.mainColor !== undefined) {
      obj.mainColor = message.mainColor;
    }
    if (message.accentColor !== undefined) {
      obj.accentColor = message.accentColor;
    }
    if (message.allowFlexibleColor !== undefined) {
      obj.allowFlexibleColor = message.allowFlexibleColor;
    }
    if (message.callToActionText !== undefined) {
      obj.callToActionText = message.callToActionText;
    }
    if (message.pricePrefix !== undefined) {
      obj.pricePrefix = message.pricePrefix;
    }
    if (message.promoText !== undefined) {
      obj.promoText = message.promoText;
    }
    if (message.formatSetting !== 0) {
      obj.formatSetting = displayAdFormatSettingEnum_DisplayAdFormatSettingToJSON(message.formatSetting);
    }
    if (message.controlSpec !== undefined) {
      obj.controlSpec = ResponsiveDisplayAdControlSpec.toJSON(message.controlSpec);
    }
    return obj;
  },

  create(base?: DeepPartial<ResponsiveDisplayAdInfo>): ResponsiveDisplayAdInfo {
    return ResponsiveDisplayAdInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ResponsiveDisplayAdInfo>): ResponsiveDisplayAdInfo {
    const message = createBaseResponsiveDisplayAdInfo();
    message.marketingImages = object.marketingImages?.map((e) => AdImageAsset.fromPartial(e)) || [];
    message.squareMarketingImages = object.squareMarketingImages?.map((e) => AdImageAsset.fromPartial(e)) || [];
    message.logoImages = object.logoImages?.map((e) => AdImageAsset.fromPartial(e)) || [];
    message.squareLogoImages = object.squareLogoImages?.map((e) => AdImageAsset.fromPartial(e)) || [];
    message.headlines = object.headlines?.map((e) => AdTextAsset.fromPartial(e)) || [];
    message.longHeadline = (object.longHeadline !== undefined && object.longHeadline !== null)
      ? AdTextAsset.fromPartial(object.longHeadline)
      : undefined;
    message.descriptions = object.descriptions?.map((e) => AdTextAsset.fromPartial(e)) || [];
    message.youtubeVideos = object.youtubeVideos?.map((e) => AdVideoAsset.fromPartial(e)) || [];
    message.businessName = object.businessName ?? undefined;
    message.mainColor = object.mainColor ?? undefined;
    message.accentColor = object.accentColor ?? undefined;
    message.allowFlexibleColor = object.allowFlexibleColor ?? undefined;
    message.callToActionText = object.callToActionText ?? undefined;
    message.pricePrefix = object.pricePrefix ?? undefined;
    message.promoText = object.promoText ?? undefined;
    message.formatSetting = object.formatSetting ?? 0;
    message.controlSpec = (object.controlSpec !== undefined && object.controlSpec !== null)
      ? ResponsiveDisplayAdControlSpec.fromPartial(object.controlSpec)
      : undefined;
    return message;
  },
};

function createBaseLocalAdInfo(): LocalAdInfo {
  return {
    headlines: [],
    descriptions: [],
    callToActions: [],
    marketingImages: [],
    logoImages: [],
    videos: [],
    path1: undefined,
    path2: undefined,
  };
}

export const LocalAdInfo: MessageFns<LocalAdInfo> = {
  encode(message: LocalAdInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.headlines) {
      AdTextAsset.encode(v!, writer.uint32(10).fork()).join();
    }
    for (const v of message.descriptions) {
      AdTextAsset.encode(v!, writer.uint32(18).fork()).join();
    }
    for (const v of message.callToActions) {
      AdTextAsset.encode(v!, writer.uint32(26).fork()).join();
    }
    for (const v of message.marketingImages) {
      AdImageAsset.encode(v!, writer.uint32(34).fork()).join();
    }
    for (const v of message.logoImages) {
      AdImageAsset.encode(v!, writer.uint32(42).fork()).join();
    }
    for (const v of message.videos) {
      AdVideoAsset.encode(v!, writer.uint32(50).fork()).join();
    }
    if (message.path1 !== undefined) {
      writer.uint32(74).string(message.path1);
    }
    if (message.path2 !== undefined) {
      writer.uint32(82).string(message.path2);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LocalAdInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLocalAdInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.headlines.push(AdTextAsset.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.descriptions.push(AdTextAsset.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.callToActions.push(AdTextAsset.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.marketingImages.push(AdImageAsset.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.logoImages.push(AdImageAsset.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.videos.push(AdVideoAsset.decode(reader, reader.uint32()));
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.path1 = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.path2 = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LocalAdInfo {
    return {
      headlines: globalThis.Array.isArray(object?.headlines)
        ? object.headlines.map((e: any) => AdTextAsset.fromJSON(e))
        : [],
      descriptions: globalThis.Array.isArray(object?.descriptions)
        ? object.descriptions.map((e: any) => AdTextAsset.fromJSON(e))
        : [],
      callToActions: globalThis.Array.isArray(object?.callToActions)
        ? object.callToActions.map((e: any) => AdTextAsset.fromJSON(e))
        : [],
      marketingImages: globalThis.Array.isArray(object?.marketingImages)
        ? object.marketingImages.map((e: any) => AdImageAsset.fromJSON(e))
        : [],
      logoImages: globalThis.Array.isArray(object?.logoImages)
        ? object.logoImages.map((e: any) => AdImageAsset.fromJSON(e))
        : [],
      videos: globalThis.Array.isArray(object?.videos) ? object.videos.map((e: any) => AdVideoAsset.fromJSON(e)) : [],
      path1: isSet(object.path1) ? globalThis.String(object.path1) : undefined,
      path2: isSet(object.path2) ? globalThis.String(object.path2) : undefined,
    };
  },

  toJSON(message: LocalAdInfo): unknown {
    const obj: any = {};
    if (message.headlines?.length) {
      obj.headlines = message.headlines.map((e) => AdTextAsset.toJSON(e));
    }
    if (message.descriptions?.length) {
      obj.descriptions = message.descriptions.map((e) => AdTextAsset.toJSON(e));
    }
    if (message.callToActions?.length) {
      obj.callToActions = message.callToActions.map((e) => AdTextAsset.toJSON(e));
    }
    if (message.marketingImages?.length) {
      obj.marketingImages = message.marketingImages.map((e) => AdImageAsset.toJSON(e));
    }
    if (message.logoImages?.length) {
      obj.logoImages = message.logoImages.map((e) => AdImageAsset.toJSON(e));
    }
    if (message.videos?.length) {
      obj.videos = message.videos.map((e) => AdVideoAsset.toJSON(e));
    }
    if (message.path1 !== undefined) {
      obj.path1 = message.path1;
    }
    if (message.path2 !== undefined) {
      obj.path2 = message.path2;
    }
    return obj;
  },

  create(base?: DeepPartial<LocalAdInfo>): LocalAdInfo {
    return LocalAdInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LocalAdInfo>): LocalAdInfo {
    const message = createBaseLocalAdInfo();
    message.headlines = object.headlines?.map((e) => AdTextAsset.fromPartial(e)) || [];
    message.descriptions = object.descriptions?.map((e) => AdTextAsset.fromPartial(e)) || [];
    message.callToActions = object.callToActions?.map((e) => AdTextAsset.fromPartial(e)) || [];
    message.marketingImages = object.marketingImages?.map((e) => AdImageAsset.fromPartial(e)) || [];
    message.logoImages = object.logoImages?.map((e) => AdImageAsset.fromPartial(e)) || [];
    message.videos = object.videos?.map((e) => AdVideoAsset.fromPartial(e)) || [];
    message.path1 = object.path1 ?? undefined;
    message.path2 = object.path2 ?? undefined;
    return message;
  },
};

function createBaseDisplayUploadAdInfo(): DisplayUploadAdInfo {
  return { displayUploadProductType: 0, mediaBundle: undefined };
}

export const DisplayUploadAdInfo: MessageFns<DisplayUploadAdInfo> = {
  encode(message: DisplayUploadAdInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.displayUploadProductType !== 0) {
      writer.uint32(8).int32(message.displayUploadProductType);
    }
    if (message.mediaBundle !== undefined) {
      AdMediaBundleAsset.encode(message.mediaBundle, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DisplayUploadAdInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDisplayUploadAdInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.displayUploadProductType = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.mediaBundle = AdMediaBundleAsset.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DisplayUploadAdInfo {
    return {
      displayUploadProductType: isSet(object.displayUploadProductType)
        ? displayUploadProductTypeEnum_DisplayUploadProductTypeFromJSON(object.displayUploadProductType)
        : 0,
      mediaBundle: isSet(object.mediaBundle) ? AdMediaBundleAsset.fromJSON(object.mediaBundle) : undefined,
    };
  },

  toJSON(message: DisplayUploadAdInfo): unknown {
    const obj: any = {};
    if (message.displayUploadProductType !== 0) {
      obj.displayUploadProductType = displayUploadProductTypeEnum_DisplayUploadProductTypeToJSON(
        message.displayUploadProductType,
      );
    }
    if (message.mediaBundle !== undefined) {
      obj.mediaBundle = AdMediaBundleAsset.toJSON(message.mediaBundle);
    }
    return obj;
  },

  create(base?: DeepPartial<DisplayUploadAdInfo>): DisplayUploadAdInfo {
    return DisplayUploadAdInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DisplayUploadAdInfo>): DisplayUploadAdInfo {
    const message = createBaseDisplayUploadAdInfo();
    message.displayUploadProductType = object.displayUploadProductType ?? 0;
    message.mediaBundle = (object.mediaBundle !== undefined && object.mediaBundle !== null)
      ? AdMediaBundleAsset.fromPartial(object.mediaBundle)
      : undefined;
    return message;
  },
};

function createBaseResponsiveDisplayAdControlSpec(): ResponsiveDisplayAdControlSpec {
  return { enableAssetEnhancements: false, enableAutogenVideo: false };
}

export const ResponsiveDisplayAdControlSpec: MessageFns<ResponsiveDisplayAdControlSpec> = {
  encode(message: ResponsiveDisplayAdControlSpec, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.enableAssetEnhancements !== false) {
      writer.uint32(8).bool(message.enableAssetEnhancements);
    }
    if (message.enableAutogenVideo !== false) {
      writer.uint32(16).bool(message.enableAutogenVideo);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResponsiveDisplayAdControlSpec {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResponsiveDisplayAdControlSpec();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.enableAssetEnhancements = reader.bool();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.enableAutogenVideo = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResponsiveDisplayAdControlSpec {
    return {
      enableAssetEnhancements: isSet(object.enableAssetEnhancements)
        ? globalThis.Boolean(object.enableAssetEnhancements)
        : false,
      enableAutogenVideo: isSet(object.enableAutogenVideo) ? globalThis.Boolean(object.enableAutogenVideo) : false,
    };
  },

  toJSON(message: ResponsiveDisplayAdControlSpec): unknown {
    const obj: any = {};
    if (message.enableAssetEnhancements !== false) {
      obj.enableAssetEnhancements = message.enableAssetEnhancements;
    }
    if (message.enableAutogenVideo !== false) {
      obj.enableAutogenVideo = message.enableAutogenVideo;
    }
    return obj;
  },

  create(base?: DeepPartial<ResponsiveDisplayAdControlSpec>): ResponsiveDisplayAdControlSpec {
    return ResponsiveDisplayAdControlSpec.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ResponsiveDisplayAdControlSpec>): ResponsiveDisplayAdControlSpec {
    const message = createBaseResponsiveDisplayAdControlSpec();
    message.enableAssetEnhancements = object.enableAssetEnhancements ?? false;
    message.enableAutogenVideo = object.enableAutogenVideo ?? false;
    return message;
  },
};

function createBaseSmartCampaignAdInfo(): SmartCampaignAdInfo {
  return { headlines: [], descriptions: [] };
}

export const SmartCampaignAdInfo: MessageFns<SmartCampaignAdInfo> = {
  encode(message: SmartCampaignAdInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.headlines) {
      AdTextAsset.encode(v!, writer.uint32(10).fork()).join();
    }
    for (const v of message.descriptions) {
      AdTextAsset.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SmartCampaignAdInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSmartCampaignAdInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.headlines.push(AdTextAsset.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.descriptions.push(AdTextAsset.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SmartCampaignAdInfo {
    return {
      headlines: globalThis.Array.isArray(object?.headlines)
        ? object.headlines.map((e: any) => AdTextAsset.fromJSON(e))
        : [],
      descriptions: globalThis.Array.isArray(object?.descriptions)
        ? object.descriptions.map((e: any) => AdTextAsset.fromJSON(e))
        : [],
    };
  },

  toJSON(message: SmartCampaignAdInfo): unknown {
    const obj: any = {};
    if (message.headlines?.length) {
      obj.headlines = message.headlines.map((e) => AdTextAsset.toJSON(e));
    }
    if (message.descriptions?.length) {
      obj.descriptions = message.descriptions.map((e) => AdTextAsset.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<SmartCampaignAdInfo>): SmartCampaignAdInfo {
    return SmartCampaignAdInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SmartCampaignAdInfo>): SmartCampaignAdInfo {
    const message = createBaseSmartCampaignAdInfo();
    message.headlines = object.headlines?.map((e) => AdTextAsset.fromPartial(e)) || [];
    message.descriptions = object.descriptions?.map((e) => AdTextAsset.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCallAdInfo(): CallAdInfo {
  return {
    countryCode: "",
    phoneNumber: "",
    businessName: "",
    headline1: "",
    headline2: "",
    description1: "",
    description2: "",
    callTracked: false,
    disableCallConversion: false,
    phoneNumberVerificationUrl: "",
    conversionAction: "",
    conversionReportingState: 0,
    path1: "",
    path2: "",
  };
}

export const CallAdInfo: MessageFns<CallAdInfo> = {
  encode(message: CallAdInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.countryCode !== "") {
      writer.uint32(10).string(message.countryCode);
    }
    if (message.phoneNumber !== "") {
      writer.uint32(18).string(message.phoneNumber);
    }
    if (message.businessName !== "") {
      writer.uint32(26).string(message.businessName);
    }
    if (message.headline1 !== "") {
      writer.uint32(90).string(message.headline1);
    }
    if (message.headline2 !== "") {
      writer.uint32(98).string(message.headline2);
    }
    if (message.description1 !== "") {
      writer.uint32(34).string(message.description1);
    }
    if (message.description2 !== "") {
      writer.uint32(42).string(message.description2);
    }
    if (message.callTracked !== false) {
      writer.uint32(48).bool(message.callTracked);
    }
    if (message.disableCallConversion !== false) {
      writer.uint32(56).bool(message.disableCallConversion);
    }
    if (message.phoneNumberVerificationUrl !== "") {
      writer.uint32(66).string(message.phoneNumberVerificationUrl);
    }
    if (message.conversionAction !== "") {
      writer.uint32(74).string(message.conversionAction);
    }
    if (message.conversionReportingState !== 0) {
      writer.uint32(80).int32(message.conversionReportingState);
    }
    if (message.path1 !== "") {
      writer.uint32(106).string(message.path1);
    }
    if (message.path2 !== "") {
      writer.uint32(114).string(message.path2);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CallAdInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCallAdInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.countryCode = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.phoneNumber = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.businessName = reader.string();
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.headline1 = reader.string();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.headline2 = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.description1 = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.description2 = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.callTracked = reader.bool();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.disableCallConversion = reader.bool();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.phoneNumberVerificationUrl = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.conversionAction = reader.string();
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.conversionReportingState = reader.int32() as any;
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.path1 = reader.string();
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.path2 = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CallAdInfo {
    return {
      countryCode: isSet(object.countryCode) ? globalThis.String(object.countryCode) : "",
      phoneNumber: isSet(object.phoneNumber) ? globalThis.String(object.phoneNumber) : "",
      businessName: isSet(object.businessName) ? globalThis.String(object.businessName) : "",
      headline1: isSet(object.headline1) ? globalThis.String(object.headline1) : "",
      headline2: isSet(object.headline2) ? globalThis.String(object.headline2) : "",
      description1: isSet(object.description1) ? globalThis.String(object.description1) : "",
      description2: isSet(object.description2) ? globalThis.String(object.description2) : "",
      callTracked: isSet(object.callTracked) ? globalThis.Boolean(object.callTracked) : false,
      disableCallConversion: isSet(object.disableCallConversion)
        ? globalThis.Boolean(object.disableCallConversion)
        : false,
      phoneNumberVerificationUrl: isSet(object.phoneNumberVerificationUrl)
        ? globalThis.String(object.phoneNumberVerificationUrl)
        : "",
      conversionAction: isSet(object.conversionAction) ? globalThis.String(object.conversionAction) : "",
      conversionReportingState: isSet(object.conversionReportingState)
        ? callConversionReportingStateEnum_CallConversionReportingStateFromJSON(object.conversionReportingState)
        : 0,
      path1: isSet(object.path1) ? globalThis.String(object.path1) : "",
      path2: isSet(object.path2) ? globalThis.String(object.path2) : "",
    };
  },

  toJSON(message: CallAdInfo): unknown {
    const obj: any = {};
    if (message.countryCode !== "") {
      obj.countryCode = message.countryCode;
    }
    if (message.phoneNumber !== "") {
      obj.phoneNumber = message.phoneNumber;
    }
    if (message.businessName !== "") {
      obj.businessName = message.businessName;
    }
    if (message.headline1 !== "") {
      obj.headline1 = message.headline1;
    }
    if (message.headline2 !== "") {
      obj.headline2 = message.headline2;
    }
    if (message.description1 !== "") {
      obj.description1 = message.description1;
    }
    if (message.description2 !== "") {
      obj.description2 = message.description2;
    }
    if (message.callTracked !== false) {
      obj.callTracked = message.callTracked;
    }
    if (message.disableCallConversion !== false) {
      obj.disableCallConversion = message.disableCallConversion;
    }
    if (message.phoneNumberVerificationUrl !== "") {
      obj.phoneNumberVerificationUrl = message.phoneNumberVerificationUrl;
    }
    if (message.conversionAction !== "") {
      obj.conversionAction = message.conversionAction;
    }
    if (message.conversionReportingState !== 0) {
      obj.conversionReportingState = callConversionReportingStateEnum_CallConversionReportingStateToJSON(
        message.conversionReportingState,
      );
    }
    if (message.path1 !== "") {
      obj.path1 = message.path1;
    }
    if (message.path2 !== "") {
      obj.path2 = message.path2;
    }
    return obj;
  },

  create(base?: DeepPartial<CallAdInfo>): CallAdInfo {
    return CallAdInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CallAdInfo>): CallAdInfo {
    const message = createBaseCallAdInfo();
    message.countryCode = object.countryCode ?? "";
    message.phoneNumber = object.phoneNumber ?? "";
    message.businessName = object.businessName ?? "";
    message.headline1 = object.headline1 ?? "";
    message.headline2 = object.headline2 ?? "";
    message.description1 = object.description1 ?? "";
    message.description2 = object.description2 ?? "";
    message.callTracked = object.callTracked ?? false;
    message.disableCallConversion = object.disableCallConversion ?? false;
    message.phoneNumberVerificationUrl = object.phoneNumberVerificationUrl ?? "";
    message.conversionAction = object.conversionAction ?? "";
    message.conversionReportingState = object.conversionReportingState ?? 0;
    message.path1 = object.path1 ?? "";
    message.path2 = object.path2 ?? "";
    return message;
  },
};

function createBaseDemandGenMultiAssetAdInfo(): DemandGenMultiAssetAdInfo {
  return {
    marketingImages: [],
    squareMarketingImages: [],
    portraitMarketingImages: [],
    logoImages: [],
    headlines: [],
    descriptions: [],
    businessName: undefined,
    callToActionText: undefined,
    leadFormOnly: undefined,
  };
}

export const DemandGenMultiAssetAdInfo: MessageFns<DemandGenMultiAssetAdInfo> = {
  encode(message: DemandGenMultiAssetAdInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.marketingImages) {
      AdImageAsset.encode(v!, writer.uint32(10).fork()).join();
    }
    for (const v of message.squareMarketingImages) {
      AdImageAsset.encode(v!, writer.uint32(18).fork()).join();
    }
    for (const v of message.portraitMarketingImages) {
      AdImageAsset.encode(v!, writer.uint32(26).fork()).join();
    }
    for (const v of message.logoImages) {
      AdImageAsset.encode(v!, writer.uint32(34).fork()).join();
    }
    for (const v of message.headlines) {
      AdTextAsset.encode(v!, writer.uint32(42).fork()).join();
    }
    for (const v of message.descriptions) {
      AdTextAsset.encode(v!, writer.uint32(50).fork()).join();
    }
    if (message.businessName !== undefined) {
      writer.uint32(58).string(message.businessName);
    }
    if (message.callToActionText !== undefined) {
      writer.uint32(66).string(message.callToActionText);
    }
    if (message.leadFormOnly !== undefined) {
      writer.uint32(72).bool(message.leadFormOnly);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DemandGenMultiAssetAdInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDemandGenMultiAssetAdInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.marketingImages.push(AdImageAsset.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.squareMarketingImages.push(AdImageAsset.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.portraitMarketingImages.push(AdImageAsset.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.logoImages.push(AdImageAsset.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.headlines.push(AdTextAsset.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.descriptions.push(AdTextAsset.decode(reader, reader.uint32()));
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.businessName = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.callToActionText = reader.string();
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.leadFormOnly = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DemandGenMultiAssetAdInfo {
    return {
      marketingImages: globalThis.Array.isArray(object?.marketingImages)
        ? object.marketingImages.map((e: any) => AdImageAsset.fromJSON(e))
        : [],
      squareMarketingImages: globalThis.Array.isArray(object?.squareMarketingImages)
        ? object.squareMarketingImages.map((e: any) => AdImageAsset.fromJSON(e))
        : [],
      portraitMarketingImages: globalThis.Array.isArray(object?.portraitMarketingImages)
        ? object.portraitMarketingImages.map((e: any) => AdImageAsset.fromJSON(e))
        : [],
      logoImages: globalThis.Array.isArray(object?.logoImages)
        ? object.logoImages.map((e: any) => AdImageAsset.fromJSON(e))
        : [],
      headlines: globalThis.Array.isArray(object?.headlines)
        ? object.headlines.map((e: any) => AdTextAsset.fromJSON(e))
        : [],
      descriptions: globalThis.Array.isArray(object?.descriptions)
        ? object.descriptions.map((e: any) => AdTextAsset.fromJSON(e))
        : [],
      businessName: isSet(object.businessName) ? globalThis.String(object.businessName) : undefined,
      callToActionText: isSet(object.callToActionText) ? globalThis.String(object.callToActionText) : undefined,
      leadFormOnly: isSet(object.leadFormOnly) ? globalThis.Boolean(object.leadFormOnly) : undefined,
    };
  },

  toJSON(message: DemandGenMultiAssetAdInfo): unknown {
    const obj: any = {};
    if (message.marketingImages?.length) {
      obj.marketingImages = message.marketingImages.map((e) => AdImageAsset.toJSON(e));
    }
    if (message.squareMarketingImages?.length) {
      obj.squareMarketingImages = message.squareMarketingImages.map((e) => AdImageAsset.toJSON(e));
    }
    if (message.portraitMarketingImages?.length) {
      obj.portraitMarketingImages = message.portraitMarketingImages.map((e) => AdImageAsset.toJSON(e));
    }
    if (message.logoImages?.length) {
      obj.logoImages = message.logoImages.map((e) => AdImageAsset.toJSON(e));
    }
    if (message.headlines?.length) {
      obj.headlines = message.headlines.map((e) => AdTextAsset.toJSON(e));
    }
    if (message.descriptions?.length) {
      obj.descriptions = message.descriptions.map((e) => AdTextAsset.toJSON(e));
    }
    if (message.businessName !== undefined) {
      obj.businessName = message.businessName;
    }
    if (message.callToActionText !== undefined) {
      obj.callToActionText = message.callToActionText;
    }
    if (message.leadFormOnly !== undefined) {
      obj.leadFormOnly = message.leadFormOnly;
    }
    return obj;
  },

  create(base?: DeepPartial<DemandGenMultiAssetAdInfo>): DemandGenMultiAssetAdInfo {
    return DemandGenMultiAssetAdInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DemandGenMultiAssetAdInfo>): DemandGenMultiAssetAdInfo {
    const message = createBaseDemandGenMultiAssetAdInfo();
    message.marketingImages = object.marketingImages?.map((e) => AdImageAsset.fromPartial(e)) || [];
    message.squareMarketingImages = object.squareMarketingImages?.map((e) => AdImageAsset.fromPartial(e)) || [];
    message.portraitMarketingImages = object.portraitMarketingImages?.map((e) => AdImageAsset.fromPartial(e)) || [];
    message.logoImages = object.logoImages?.map((e) => AdImageAsset.fromPartial(e)) || [];
    message.headlines = object.headlines?.map((e) => AdTextAsset.fromPartial(e)) || [];
    message.descriptions = object.descriptions?.map((e) => AdTextAsset.fromPartial(e)) || [];
    message.businessName = object.businessName ?? undefined;
    message.callToActionText = object.callToActionText ?? undefined;
    message.leadFormOnly = object.leadFormOnly ?? undefined;
    return message;
  },
};

function createBaseDemandGenCarouselAdInfo(): DemandGenCarouselAdInfo {
  return {
    businessName: "",
    logoImage: undefined,
    headline: undefined,
    description: undefined,
    callToActionText: "",
    carouselCards: [],
  };
}

export const DemandGenCarouselAdInfo: MessageFns<DemandGenCarouselAdInfo> = {
  encode(message: DemandGenCarouselAdInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.businessName !== "") {
      writer.uint32(10).string(message.businessName);
    }
    if (message.logoImage !== undefined) {
      AdImageAsset.encode(message.logoImage, writer.uint32(18).fork()).join();
    }
    if (message.headline !== undefined) {
      AdTextAsset.encode(message.headline, writer.uint32(26).fork()).join();
    }
    if (message.description !== undefined) {
      AdTextAsset.encode(message.description, writer.uint32(34).fork()).join();
    }
    if (message.callToActionText !== "") {
      writer.uint32(42).string(message.callToActionText);
    }
    for (const v of message.carouselCards) {
      AdDemandGenCarouselCardAsset.encode(v!, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DemandGenCarouselAdInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDemandGenCarouselAdInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.businessName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.logoImage = AdImageAsset.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.headline = AdTextAsset.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.description = AdTextAsset.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.callToActionText = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.carouselCards.push(AdDemandGenCarouselCardAsset.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DemandGenCarouselAdInfo {
    return {
      businessName: isSet(object.businessName) ? globalThis.String(object.businessName) : "",
      logoImage: isSet(object.logoImage) ? AdImageAsset.fromJSON(object.logoImage) : undefined,
      headline: isSet(object.headline) ? AdTextAsset.fromJSON(object.headline) : undefined,
      description: isSet(object.description) ? AdTextAsset.fromJSON(object.description) : undefined,
      callToActionText: isSet(object.callToActionText) ? globalThis.String(object.callToActionText) : "",
      carouselCards: globalThis.Array.isArray(object?.carouselCards)
        ? object.carouselCards.map((e: any) => AdDemandGenCarouselCardAsset.fromJSON(e))
        : [],
    };
  },

  toJSON(message: DemandGenCarouselAdInfo): unknown {
    const obj: any = {};
    if (message.businessName !== "") {
      obj.businessName = message.businessName;
    }
    if (message.logoImage !== undefined) {
      obj.logoImage = AdImageAsset.toJSON(message.logoImage);
    }
    if (message.headline !== undefined) {
      obj.headline = AdTextAsset.toJSON(message.headline);
    }
    if (message.description !== undefined) {
      obj.description = AdTextAsset.toJSON(message.description);
    }
    if (message.callToActionText !== "") {
      obj.callToActionText = message.callToActionText;
    }
    if (message.carouselCards?.length) {
      obj.carouselCards = message.carouselCards.map((e) => AdDemandGenCarouselCardAsset.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<DemandGenCarouselAdInfo>): DemandGenCarouselAdInfo {
    return DemandGenCarouselAdInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DemandGenCarouselAdInfo>): DemandGenCarouselAdInfo {
    const message = createBaseDemandGenCarouselAdInfo();
    message.businessName = object.businessName ?? "";
    message.logoImage = (object.logoImage !== undefined && object.logoImage !== null)
      ? AdImageAsset.fromPartial(object.logoImage)
      : undefined;
    message.headline = (object.headline !== undefined && object.headline !== null)
      ? AdTextAsset.fromPartial(object.headline)
      : undefined;
    message.description = (object.description !== undefined && object.description !== null)
      ? AdTextAsset.fromPartial(object.description)
      : undefined;
    message.callToActionText = object.callToActionText ?? "";
    message.carouselCards = object.carouselCards?.map((e) => AdDemandGenCarouselCardAsset.fromPartial(e)) || [];
    return message;
  },
};

function createBaseDemandGenVideoResponsiveAdInfo(): DemandGenVideoResponsiveAdInfo {
  return {
    headlines: [],
    longHeadlines: [],
    descriptions: [],
    videos: [],
    logoImages: [],
    breadcrumb1: "",
    breadcrumb2: "",
    businessName: undefined,
    callToActions: [],
  };
}

export const DemandGenVideoResponsiveAdInfo: MessageFns<DemandGenVideoResponsiveAdInfo> = {
  encode(message: DemandGenVideoResponsiveAdInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.headlines) {
      AdTextAsset.encode(v!, writer.uint32(10).fork()).join();
    }
    for (const v of message.longHeadlines) {
      AdTextAsset.encode(v!, writer.uint32(18).fork()).join();
    }
    for (const v of message.descriptions) {
      AdTextAsset.encode(v!, writer.uint32(26).fork()).join();
    }
    for (const v of message.videos) {
      AdVideoAsset.encode(v!, writer.uint32(34).fork()).join();
    }
    for (const v of message.logoImages) {
      AdImageAsset.encode(v!, writer.uint32(42).fork()).join();
    }
    if (message.breadcrumb1 !== "") {
      writer.uint32(50).string(message.breadcrumb1);
    }
    if (message.breadcrumb2 !== "") {
      writer.uint32(58).string(message.breadcrumb2);
    }
    if (message.businessName !== undefined) {
      AdTextAsset.encode(message.businessName, writer.uint32(66).fork()).join();
    }
    for (const v of message.callToActions) {
      AdCallToActionAsset.encode(v!, writer.uint32(74).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DemandGenVideoResponsiveAdInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDemandGenVideoResponsiveAdInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.headlines.push(AdTextAsset.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.longHeadlines.push(AdTextAsset.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.descriptions.push(AdTextAsset.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.videos.push(AdVideoAsset.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.logoImages.push(AdImageAsset.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.breadcrumb1 = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.breadcrumb2 = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.businessName = AdTextAsset.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.callToActions.push(AdCallToActionAsset.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DemandGenVideoResponsiveAdInfo {
    return {
      headlines: globalThis.Array.isArray(object?.headlines)
        ? object.headlines.map((e: any) => AdTextAsset.fromJSON(e))
        : [],
      longHeadlines: globalThis.Array.isArray(object?.longHeadlines)
        ? object.longHeadlines.map((e: any) => AdTextAsset.fromJSON(e))
        : [],
      descriptions: globalThis.Array.isArray(object?.descriptions)
        ? object.descriptions.map((e: any) => AdTextAsset.fromJSON(e))
        : [],
      videos: globalThis.Array.isArray(object?.videos) ? object.videos.map((e: any) => AdVideoAsset.fromJSON(e)) : [],
      logoImages: globalThis.Array.isArray(object?.logoImages)
        ? object.logoImages.map((e: any) => AdImageAsset.fromJSON(e))
        : [],
      breadcrumb1: isSet(object.breadcrumb1) ? globalThis.String(object.breadcrumb1) : "",
      breadcrumb2: isSet(object.breadcrumb2) ? globalThis.String(object.breadcrumb2) : "",
      businessName: isSet(object.businessName) ? AdTextAsset.fromJSON(object.businessName) : undefined,
      callToActions: globalThis.Array.isArray(object?.callToActions)
        ? object.callToActions.map((e: any) => AdCallToActionAsset.fromJSON(e))
        : [],
    };
  },

  toJSON(message: DemandGenVideoResponsiveAdInfo): unknown {
    const obj: any = {};
    if (message.headlines?.length) {
      obj.headlines = message.headlines.map((e) => AdTextAsset.toJSON(e));
    }
    if (message.longHeadlines?.length) {
      obj.longHeadlines = message.longHeadlines.map((e) => AdTextAsset.toJSON(e));
    }
    if (message.descriptions?.length) {
      obj.descriptions = message.descriptions.map((e) => AdTextAsset.toJSON(e));
    }
    if (message.videos?.length) {
      obj.videos = message.videos.map((e) => AdVideoAsset.toJSON(e));
    }
    if (message.logoImages?.length) {
      obj.logoImages = message.logoImages.map((e) => AdImageAsset.toJSON(e));
    }
    if (message.breadcrumb1 !== "") {
      obj.breadcrumb1 = message.breadcrumb1;
    }
    if (message.breadcrumb2 !== "") {
      obj.breadcrumb2 = message.breadcrumb2;
    }
    if (message.businessName !== undefined) {
      obj.businessName = AdTextAsset.toJSON(message.businessName);
    }
    if (message.callToActions?.length) {
      obj.callToActions = message.callToActions.map((e) => AdCallToActionAsset.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<DemandGenVideoResponsiveAdInfo>): DemandGenVideoResponsiveAdInfo {
    return DemandGenVideoResponsiveAdInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DemandGenVideoResponsiveAdInfo>): DemandGenVideoResponsiveAdInfo {
    const message = createBaseDemandGenVideoResponsiveAdInfo();
    message.headlines = object.headlines?.map((e) => AdTextAsset.fromPartial(e)) || [];
    message.longHeadlines = object.longHeadlines?.map((e) => AdTextAsset.fromPartial(e)) || [];
    message.descriptions = object.descriptions?.map((e) => AdTextAsset.fromPartial(e)) || [];
    message.videos = object.videos?.map((e) => AdVideoAsset.fromPartial(e)) || [];
    message.logoImages = object.logoImages?.map((e) => AdImageAsset.fromPartial(e)) || [];
    message.breadcrumb1 = object.breadcrumb1 ?? "";
    message.breadcrumb2 = object.breadcrumb2 ?? "";
    message.businessName = (object.businessName !== undefined && object.businessName !== null)
      ? AdTextAsset.fromPartial(object.businessName)
      : undefined;
    message.callToActions = object.callToActions?.map((e) => AdCallToActionAsset.fromPartial(e)) || [];
    return message;
  },
};

function createBaseDemandGenProductAdInfo(): DemandGenProductAdInfo {
  return {
    headline: undefined,
    description: undefined,
    logoImage: undefined,
    breadcrumb1: "",
    breadcrumb2: "",
    businessName: undefined,
    callToAction: undefined,
  };
}

export const DemandGenProductAdInfo: MessageFns<DemandGenProductAdInfo> = {
  encode(message: DemandGenProductAdInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.headline !== undefined) {
      AdTextAsset.encode(message.headline, writer.uint32(10).fork()).join();
    }
    if (message.description !== undefined) {
      AdTextAsset.encode(message.description, writer.uint32(18).fork()).join();
    }
    if (message.logoImage !== undefined) {
      AdImageAsset.encode(message.logoImage, writer.uint32(26).fork()).join();
    }
    if (message.breadcrumb1 !== "") {
      writer.uint32(34).string(message.breadcrumb1);
    }
    if (message.breadcrumb2 !== "") {
      writer.uint32(42).string(message.breadcrumb2);
    }
    if (message.businessName !== undefined) {
      AdTextAsset.encode(message.businessName, writer.uint32(50).fork()).join();
    }
    if (message.callToAction !== undefined) {
      AdCallToActionAsset.encode(message.callToAction, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DemandGenProductAdInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDemandGenProductAdInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.headline = AdTextAsset.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.description = AdTextAsset.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.logoImage = AdImageAsset.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.breadcrumb1 = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.breadcrumb2 = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.businessName = AdTextAsset.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.callToAction = AdCallToActionAsset.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DemandGenProductAdInfo {
    return {
      headline: isSet(object.headline) ? AdTextAsset.fromJSON(object.headline) : undefined,
      description: isSet(object.description) ? AdTextAsset.fromJSON(object.description) : undefined,
      logoImage: isSet(object.logoImage) ? AdImageAsset.fromJSON(object.logoImage) : undefined,
      breadcrumb1: isSet(object.breadcrumb1) ? globalThis.String(object.breadcrumb1) : "",
      breadcrumb2: isSet(object.breadcrumb2) ? globalThis.String(object.breadcrumb2) : "",
      businessName: isSet(object.businessName) ? AdTextAsset.fromJSON(object.businessName) : undefined,
      callToAction: isSet(object.callToAction) ? AdCallToActionAsset.fromJSON(object.callToAction) : undefined,
    };
  },

  toJSON(message: DemandGenProductAdInfo): unknown {
    const obj: any = {};
    if (message.headline !== undefined) {
      obj.headline = AdTextAsset.toJSON(message.headline);
    }
    if (message.description !== undefined) {
      obj.description = AdTextAsset.toJSON(message.description);
    }
    if (message.logoImage !== undefined) {
      obj.logoImage = AdImageAsset.toJSON(message.logoImage);
    }
    if (message.breadcrumb1 !== "") {
      obj.breadcrumb1 = message.breadcrumb1;
    }
    if (message.breadcrumb2 !== "") {
      obj.breadcrumb2 = message.breadcrumb2;
    }
    if (message.businessName !== undefined) {
      obj.businessName = AdTextAsset.toJSON(message.businessName);
    }
    if (message.callToAction !== undefined) {
      obj.callToAction = AdCallToActionAsset.toJSON(message.callToAction);
    }
    return obj;
  },

  create(base?: DeepPartial<DemandGenProductAdInfo>): DemandGenProductAdInfo {
    return DemandGenProductAdInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DemandGenProductAdInfo>): DemandGenProductAdInfo {
    const message = createBaseDemandGenProductAdInfo();
    message.headline = (object.headline !== undefined && object.headline !== null)
      ? AdTextAsset.fromPartial(object.headline)
      : undefined;
    message.description = (object.description !== undefined && object.description !== null)
      ? AdTextAsset.fromPartial(object.description)
      : undefined;
    message.logoImage = (object.logoImage !== undefined && object.logoImage !== null)
      ? AdImageAsset.fromPartial(object.logoImage)
      : undefined;
    message.breadcrumb1 = object.breadcrumb1 ?? "";
    message.breadcrumb2 = object.breadcrumb2 ?? "";
    message.businessName = (object.businessName !== undefined && object.businessName !== null)
      ? AdTextAsset.fromPartial(object.businessName)
      : undefined;
    message.callToAction = (object.callToAction !== undefined && object.callToAction !== null)
      ? AdCallToActionAsset.fromPartial(object.callToAction)
      : undefined;
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
}

function base64FromBytes(arr: Uint8Array): string {
  return globalThis.Buffer.from(arr).toString("base64");
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
