// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v17/common/click_location.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.googleads.v17.common";

/** Location criteria associated with a click. */
export interface ClickLocation {
  /** The city location criterion associated with the impression. */
  city?:
    | string
    | undefined;
  /** The country location criterion associated with the impression. */
  country?:
    | string
    | undefined;
  /** The metro location criterion associated with the impression. */
  metro?:
    | string
    | undefined;
  /** The most specific location criterion associated with the impression. */
  mostSpecific?:
    | string
    | undefined;
  /** The region location criterion associated with the impression. */
  region?: string | undefined;
}

function createBaseClickLocation(): ClickLocation {
  return { city: undefined, country: undefined, metro: undefined, mostSpecific: undefined, region: undefined };
}

export const ClickLocation: MessageFns<ClickLocation> = {
  encode(message: ClickLocation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.city !== undefined) {
      writer.uint32(50).string(message.city);
    }
    if (message.country !== undefined) {
      writer.uint32(58).string(message.country);
    }
    if (message.metro !== undefined) {
      writer.uint32(66).string(message.metro);
    }
    if (message.mostSpecific !== undefined) {
      writer.uint32(74).string(message.mostSpecific);
    }
    if (message.region !== undefined) {
      writer.uint32(82).string(message.region);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ClickLocation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClickLocation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 6:
          if (tag !== 50) {
            break;
          }

          message.city = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.country = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.metro = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.mostSpecific = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.region = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClickLocation {
    return {
      city: isSet(object.city) ? globalThis.String(object.city) : undefined,
      country: isSet(object.country) ? globalThis.String(object.country) : undefined,
      metro: isSet(object.metro) ? globalThis.String(object.metro) : undefined,
      mostSpecific: isSet(object.mostSpecific) ? globalThis.String(object.mostSpecific) : undefined,
      region: isSet(object.region) ? globalThis.String(object.region) : undefined,
    };
  },

  toJSON(message: ClickLocation): unknown {
    const obj: any = {};
    if (message.city !== undefined) {
      obj.city = message.city;
    }
    if (message.country !== undefined) {
      obj.country = message.country;
    }
    if (message.metro !== undefined) {
      obj.metro = message.metro;
    }
    if (message.mostSpecific !== undefined) {
      obj.mostSpecific = message.mostSpecific;
    }
    if (message.region !== undefined) {
      obj.region = message.region;
    }
    return obj;
  },

  create(base?: DeepPartial<ClickLocation>): ClickLocation {
    return ClickLocation.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ClickLocation>): ClickLocation {
    const message = createBaseClickLocation();
    message.city = object.city ?? undefined;
    message.country = object.country ?? undefined;
    message.metro = object.metro ?? undefined;
    message.mostSpecific = object.mostSpecific ?? undefined;
    message.region = object.region ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
