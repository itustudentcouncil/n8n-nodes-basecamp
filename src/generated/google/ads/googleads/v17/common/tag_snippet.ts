// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v17/common/tag_snippet.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import {
  TrackingCodePageFormatEnum_TrackingCodePageFormat,
  trackingCodePageFormatEnum_TrackingCodePageFormatFromJSON,
  trackingCodePageFormatEnum_TrackingCodePageFormatToJSON,
} from "../enums/tracking_code_page_format.js";
import {
  TrackingCodeTypeEnum_TrackingCodeType,
  trackingCodeTypeEnum_TrackingCodeTypeFromJSON,
  trackingCodeTypeEnum_TrackingCodeTypeToJSON,
} from "../enums/tracking_code_type.js";

export const protobufPackage = "google.ads.googleads.v17.common";

/** The site tag and event snippet pair for a TrackingCodeType. */
export interface TagSnippet {
  /** The type of the generated tag snippets for tracking conversions. */
  type: TrackingCodeTypeEnum_TrackingCodeType;
  /**
   * The format of the web page where the tracking tag and snippet will be
   * installed, for example, HTML.
   */
  pageFormat: TrackingCodePageFormatEnum_TrackingCodePageFormat;
  /**
   * The site tag that adds visitors to your basic remarketing lists and sets
   * new cookies on your domain.
   */
  globalSiteTag?:
    | string
    | undefined;
  /**
   * The event snippet that works with the site tag to track actions that
   * should be counted as conversions.
   */
  eventSnippet?: string | undefined;
}

function createBaseTagSnippet(): TagSnippet {
  return { type: 0, pageFormat: 0, globalSiteTag: undefined, eventSnippet: undefined };
}

export const TagSnippet: MessageFns<TagSnippet> = {
  encode(message: TagSnippet, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    if (message.pageFormat !== 0) {
      writer.uint32(16).int32(message.pageFormat);
    }
    if (message.globalSiteTag !== undefined) {
      writer.uint32(42).string(message.globalSiteTag);
    }
    if (message.eventSnippet !== undefined) {
      writer.uint32(50).string(message.eventSnippet);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TagSnippet {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTagSnippet();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageFormat = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.globalSiteTag = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.eventSnippet = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TagSnippet {
    return {
      type: isSet(object.type) ? trackingCodeTypeEnum_TrackingCodeTypeFromJSON(object.type) : 0,
      pageFormat: isSet(object.pageFormat)
        ? trackingCodePageFormatEnum_TrackingCodePageFormatFromJSON(object.pageFormat)
        : 0,
      globalSiteTag: isSet(object.globalSiteTag) ? globalThis.String(object.globalSiteTag) : undefined,
      eventSnippet: isSet(object.eventSnippet) ? globalThis.String(object.eventSnippet) : undefined,
    };
  },

  toJSON(message: TagSnippet): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = trackingCodeTypeEnum_TrackingCodeTypeToJSON(message.type);
    }
    if (message.pageFormat !== 0) {
      obj.pageFormat = trackingCodePageFormatEnum_TrackingCodePageFormatToJSON(message.pageFormat);
    }
    if (message.globalSiteTag !== undefined) {
      obj.globalSiteTag = message.globalSiteTag;
    }
    if (message.eventSnippet !== undefined) {
      obj.eventSnippet = message.eventSnippet;
    }
    return obj;
  },

  create(base?: DeepPartial<TagSnippet>): TagSnippet {
    return TagSnippet.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TagSnippet>): TagSnippet {
    const message = createBaseTagSnippet();
    message.type = object.type ?? 0;
    message.pageFormat = object.pageFormat ?? 0;
    message.globalSiteTag = object.globalSiteTag ?? undefined;
    message.eventSnippet = object.eventSnippet ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
