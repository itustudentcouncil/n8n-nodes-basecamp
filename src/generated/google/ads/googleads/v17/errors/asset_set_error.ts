// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v17/errors/asset_set_error.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.googleads.v17.errors";

/** Container for enum describing possible asset set errors. */
export interface AssetSetErrorEnum {
}

/** Enum describing possible asset set errors. */
export enum AssetSetErrorEnum_AssetSetError {
  /** UNSPECIFIED - Enum unspecified. */
  UNSPECIFIED = 0,
  /** UNKNOWN - The received error code is not known in this version. */
  UNKNOWN = 1,
  /** DUPLICATE_ASSET_SET_NAME - The asset set name matches that of another enabled asset set. */
  DUPLICATE_ASSET_SET_NAME = 2,
  /**
   * INVALID_PARENT_ASSET_SET_TYPE - The type of AssetSet.asset_set_source does not match the type of
   * AssetSet.location_set.source in its parent AssetSet.
   */
  INVALID_PARENT_ASSET_SET_TYPE = 3,
  /** ASSET_SET_SOURCE_INCOMPATIBLE_WITH_PARENT_ASSET_SET - The asset set source doesn't match its parent AssetSet's data. */
  ASSET_SET_SOURCE_INCOMPATIBLE_WITH_PARENT_ASSET_SET = 4,
  /** ASSET_SET_TYPE_CANNOT_BE_LINKED_TO_CUSTOMER - This AssetSet type cannot be linked to CustomerAssetSet. */
  ASSET_SET_TYPE_CANNOT_BE_LINKED_TO_CUSTOMER = 5,
  /** INVALID_CHAIN_IDS - The chain id(s) in ChainSet of a LOCATION_SYNC typed AssetSet is invalid. */
  INVALID_CHAIN_IDS = 6,
  /**
   * LOCATION_SYNC_ASSET_SET_DOES_NOT_SUPPORT_RELATIONSHIP_TYPE - The relationship type in ChainSet of a LOCATION_SYNC typed AssetSet is
   * not supported.
   */
  LOCATION_SYNC_ASSET_SET_DOES_NOT_SUPPORT_RELATIONSHIP_TYPE = 7,
  /**
   * NOT_UNIQUE_ENABLED_LOCATION_SYNC_TYPED_ASSET_SET - There is more than one enabled LocationSync typed AssetSet under one
   * customer.
   */
  NOT_UNIQUE_ENABLED_LOCATION_SYNC_TYPED_ASSET_SET = 8,
  /**
   * INVALID_PLACE_IDS - The place id(s) in a LocationSync typed AssetSet is invalid and can't be
   * decoded.
   */
  INVALID_PLACE_IDS = 9,
  /** OAUTH_INFO_INVALID - The Google Business Profile OAuth info is invalid. */
  OAUTH_INFO_INVALID = 11,
  /** OAUTH_INFO_MISSING - The Google Business Profile OAuth info is missing. */
  OAUTH_INFO_MISSING = 12,
  /**
   * CANNOT_DELETE_AS_ENABLED_LINKAGES_EXIST - Can't delete an AssetSet if it has any enabled linkages (e.g.
   * CustomerAssetSet), or AssetSet is a parent AssetSet and has enabled child
   * AssetSet associated.
   */
  CANNOT_DELETE_AS_ENABLED_LINKAGES_EXIST = 10,
  UNRECOGNIZED = -1,
}

export function assetSetErrorEnum_AssetSetErrorFromJSON(object: any): AssetSetErrorEnum_AssetSetError {
  switch (object) {
    case 0:
    case "UNSPECIFIED":
      return AssetSetErrorEnum_AssetSetError.UNSPECIFIED;
    case 1:
    case "UNKNOWN":
      return AssetSetErrorEnum_AssetSetError.UNKNOWN;
    case 2:
    case "DUPLICATE_ASSET_SET_NAME":
      return AssetSetErrorEnum_AssetSetError.DUPLICATE_ASSET_SET_NAME;
    case 3:
    case "INVALID_PARENT_ASSET_SET_TYPE":
      return AssetSetErrorEnum_AssetSetError.INVALID_PARENT_ASSET_SET_TYPE;
    case 4:
    case "ASSET_SET_SOURCE_INCOMPATIBLE_WITH_PARENT_ASSET_SET":
      return AssetSetErrorEnum_AssetSetError.ASSET_SET_SOURCE_INCOMPATIBLE_WITH_PARENT_ASSET_SET;
    case 5:
    case "ASSET_SET_TYPE_CANNOT_BE_LINKED_TO_CUSTOMER":
      return AssetSetErrorEnum_AssetSetError.ASSET_SET_TYPE_CANNOT_BE_LINKED_TO_CUSTOMER;
    case 6:
    case "INVALID_CHAIN_IDS":
      return AssetSetErrorEnum_AssetSetError.INVALID_CHAIN_IDS;
    case 7:
    case "LOCATION_SYNC_ASSET_SET_DOES_NOT_SUPPORT_RELATIONSHIP_TYPE":
      return AssetSetErrorEnum_AssetSetError.LOCATION_SYNC_ASSET_SET_DOES_NOT_SUPPORT_RELATIONSHIP_TYPE;
    case 8:
    case "NOT_UNIQUE_ENABLED_LOCATION_SYNC_TYPED_ASSET_SET":
      return AssetSetErrorEnum_AssetSetError.NOT_UNIQUE_ENABLED_LOCATION_SYNC_TYPED_ASSET_SET;
    case 9:
    case "INVALID_PLACE_IDS":
      return AssetSetErrorEnum_AssetSetError.INVALID_PLACE_IDS;
    case 11:
    case "OAUTH_INFO_INVALID":
      return AssetSetErrorEnum_AssetSetError.OAUTH_INFO_INVALID;
    case 12:
    case "OAUTH_INFO_MISSING":
      return AssetSetErrorEnum_AssetSetError.OAUTH_INFO_MISSING;
    case 10:
    case "CANNOT_DELETE_AS_ENABLED_LINKAGES_EXIST":
      return AssetSetErrorEnum_AssetSetError.CANNOT_DELETE_AS_ENABLED_LINKAGES_EXIST;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AssetSetErrorEnum_AssetSetError.UNRECOGNIZED;
  }
}

export function assetSetErrorEnum_AssetSetErrorToJSON(object: AssetSetErrorEnum_AssetSetError): string {
  switch (object) {
    case AssetSetErrorEnum_AssetSetError.UNSPECIFIED:
      return "UNSPECIFIED";
    case AssetSetErrorEnum_AssetSetError.UNKNOWN:
      return "UNKNOWN";
    case AssetSetErrorEnum_AssetSetError.DUPLICATE_ASSET_SET_NAME:
      return "DUPLICATE_ASSET_SET_NAME";
    case AssetSetErrorEnum_AssetSetError.INVALID_PARENT_ASSET_SET_TYPE:
      return "INVALID_PARENT_ASSET_SET_TYPE";
    case AssetSetErrorEnum_AssetSetError.ASSET_SET_SOURCE_INCOMPATIBLE_WITH_PARENT_ASSET_SET:
      return "ASSET_SET_SOURCE_INCOMPATIBLE_WITH_PARENT_ASSET_SET";
    case AssetSetErrorEnum_AssetSetError.ASSET_SET_TYPE_CANNOT_BE_LINKED_TO_CUSTOMER:
      return "ASSET_SET_TYPE_CANNOT_BE_LINKED_TO_CUSTOMER";
    case AssetSetErrorEnum_AssetSetError.INVALID_CHAIN_IDS:
      return "INVALID_CHAIN_IDS";
    case AssetSetErrorEnum_AssetSetError.LOCATION_SYNC_ASSET_SET_DOES_NOT_SUPPORT_RELATIONSHIP_TYPE:
      return "LOCATION_SYNC_ASSET_SET_DOES_NOT_SUPPORT_RELATIONSHIP_TYPE";
    case AssetSetErrorEnum_AssetSetError.NOT_UNIQUE_ENABLED_LOCATION_SYNC_TYPED_ASSET_SET:
      return "NOT_UNIQUE_ENABLED_LOCATION_SYNC_TYPED_ASSET_SET";
    case AssetSetErrorEnum_AssetSetError.INVALID_PLACE_IDS:
      return "INVALID_PLACE_IDS";
    case AssetSetErrorEnum_AssetSetError.OAUTH_INFO_INVALID:
      return "OAUTH_INFO_INVALID";
    case AssetSetErrorEnum_AssetSetError.OAUTH_INFO_MISSING:
      return "OAUTH_INFO_MISSING";
    case AssetSetErrorEnum_AssetSetError.CANNOT_DELETE_AS_ENABLED_LINKAGES_EXIST:
      return "CANNOT_DELETE_AS_ENABLED_LINKAGES_EXIST";
    case AssetSetErrorEnum_AssetSetError.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseAssetSetErrorEnum(): AssetSetErrorEnum {
  return {};
}

export const AssetSetErrorEnum: MessageFns<AssetSetErrorEnum> = {
  encode(_: AssetSetErrorEnum, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AssetSetErrorEnum {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAssetSetErrorEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): AssetSetErrorEnum {
    return {};
  },

  toJSON(_: AssetSetErrorEnum): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<AssetSetErrorEnum>): AssetSetErrorEnum {
    return AssetSetErrorEnum.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<AssetSetErrorEnum>): AssetSetErrorEnum {
    const message = createBaseAssetSetErrorEnum();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
