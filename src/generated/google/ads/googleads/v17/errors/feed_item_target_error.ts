// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v17/errors/feed_item_target_error.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.googleads.v17.errors";

/** Container for enum describing possible feed item target errors. */
export interface FeedItemTargetErrorEnum {
}

/** Enum describing possible feed item target errors. */
export enum FeedItemTargetErrorEnum_FeedItemTargetError {
  /** UNSPECIFIED - Enum unspecified. */
  UNSPECIFIED = 0,
  /** UNKNOWN - The received error code is not known in this version. */
  UNKNOWN = 1,
  /**
   * MUST_SET_TARGET_ONEOF_ON_CREATE - On CREATE, the FeedItemTarget must have a populated field in the oneof
   * target.
   */
  MUST_SET_TARGET_ONEOF_ON_CREATE = 2,
  /** FEED_ITEM_TARGET_ALREADY_EXISTS - The specified feed item target already exists, so it cannot be added. */
  FEED_ITEM_TARGET_ALREADY_EXISTS = 3,
  /** FEED_ITEM_SCHEDULES_CANNOT_OVERLAP - The schedules for a given feed item cannot overlap. */
  FEED_ITEM_SCHEDULES_CANNOT_OVERLAP = 4,
  /** TARGET_LIMIT_EXCEEDED_FOR_GIVEN_TYPE - Too many targets of a given type were added for a single feed item. */
  TARGET_LIMIT_EXCEEDED_FOR_GIVEN_TYPE = 5,
  /** TOO_MANY_SCHEDULES_PER_DAY - Too many AdSchedules are enabled for the feed item for the given day. */
  TOO_MANY_SCHEDULES_PER_DAY = 6,
  /**
   * CANNOT_HAVE_ENABLED_CAMPAIGN_AND_ENABLED_AD_GROUP_TARGETS - A feed item may either have an enabled campaign target or an enabled ad
   * group target.
   */
  CANNOT_HAVE_ENABLED_CAMPAIGN_AND_ENABLED_AD_GROUP_TARGETS = 7,
  /** DUPLICATE_AD_SCHEDULE - Duplicate ad schedules aren't allowed. */
  DUPLICATE_AD_SCHEDULE = 8,
  /** DUPLICATE_KEYWORD - Duplicate keywords aren't allowed. */
  DUPLICATE_KEYWORD = 9,
  UNRECOGNIZED = -1,
}

export function feedItemTargetErrorEnum_FeedItemTargetErrorFromJSON(
  object: any,
): FeedItemTargetErrorEnum_FeedItemTargetError {
  switch (object) {
    case 0:
    case "UNSPECIFIED":
      return FeedItemTargetErrorEnum_FeedItemTargetError.UNSPECIFIED;
    case 1:
    case "UNKNOWN":
      return FeedItemTargetErrorEnum_FeedItemTargetError.UNKNOWN;
    case 2:
    case "MUST_SET_TARGET_ONEOF_ON_CREATE":
      return FeedItemTargetErrorEnum_FeedItemTargetError.MUST_SET_TARGET_ONEOF_ON_CREATE;
    case 3:
    case "FEED_ITEM_TARGET_ALREADY_EXISTS":
      return FeedItemTargetErrorEnum_FeedItemTargetError.FEED_ITEM_TARGET_ALREADY_EXISTS;
    case 4:
    case "FEED_ITEM_SCHEDULES_CANNOT_OVERLAP":
      return FeedItemTargetErrorEnum_FeedItemTargetError.FEED_ITEM_SCHEDULES_CANNOT_OVERLAP;
    case 5:
    case "TARGET_LIMIT_EXCEEDED_FOR_GIVEN_TYPE":
      return FeedItemTargetErrorEnum_FeedItemTargetError.TARGET_LIMIT_EXCEEDED_FOR_GIVEN_TYPE;
    case 6:
    case "TOO_MANY_SCHEDULES_PER_DAY":
      return FeedItemTargetErrorEnum_FeedItemTargetError.TOO_MANY_SCHEDULES_PER_DAY;
    case 7:
    case "CANNOT_HAVE_ENABLED_CAMPAIGN_AND_ENABLED_AD_GROUP_TARGETS":
      return FeedItemTargetErrorEnum_FeedItemTargetError.CANNOT_HAVE_ENABLED_CAMPAIGN_AND_ENABLED_AD_GROUP_TARGETS;
    case 8:
    case "DUPLICATE_AD_SCHEDULE":
      return FeedItemTargetErrorEnum_FeedItemTargetError.DUPLICATE_AD_SCHEDULE;
    case 9:
    case "DUPLICATE_KEYWORD":
      return FeedItemTargetErrorEnum_FeedItemTargetError.DUPLICATE_KEYWORD;
    case -1:
    case "UNRECOGNIZED":
    default:
      return FeedItemTargetErrorEnum_FeedItemTargetError.UNRECOGNIZED;
  }
}

export function feedItemTargetErrorEnum_FeedItemTargetErrorToJSON(
  object: FeedItemTargetErrorEnum_FeedItemTargetError,
): string {
  switch (object) {
    case FeedItemTargetErrorEnum_FeedItemTargetError.UNSPECIFIED:
      return "UNSPECIFIED";
    case FeedItemTargetErrorEnum_FeedItemTargetError.UNKNOWN:
      return "UNKNOWN";
    case FeedItemTargetErrorEnum_FeedItemTargetError.MUST_SET_TARGET_ONEOF_ON_CREATE:
      return "MUST_SET_TARGET_ONEOF_ON_CREATE";
    case FeedItemTargetErrorEnum_FeedItemTargetError.FEED_ITEM_TARGET_ALREADY_EXISTS:
      return "FEED_ITEM_TARGET_ALREADY_EXISTS";
    case FeedItemTargetErrorEnum_FeedItemTargetError.FEED_ITEM_SCHEDULES_CANNOT_OVERLAP:
      return "FEED_ITEM_SCHEDULES_CANNOT_OVERLAP";
    case FeedItemTargetErrorEnum_FeedItemTargetError.TARGET_LIMIT_EXCEEDED_FOR_GIVEN_TYPE:
      return "TARGET_LIMIT_EXCEEDED_FOR_GIVEN_TYPE";
    case FeedItemTargetErrorEnum_FeedItemTargetError.TOO_MANY_SCHEDULES_PER_DAY:
      return "TOO_MANY_SCHEDULES_PER_DAY";
    case FeedItemTargetErrorEnum_FeedItemTargetError.CANNOT_HAVE_ENABLED_CAMPAIGN_AND_ENABLED_AD_GROUP_TARGETS:
      return "CANNOT_HAVE_ENABLED_CAMPAIGN_AND_ENABLED_AD_GROUP_TARGETS";
    case FeedItemTargetErrorEnum_FeedItemTargetError.DUPLICATE_AD_SCHEDULE:
      return "DUPLICATE_AD_SCHEDULE";
    case FeedItemTargetErrorEnum_FeedItemTargetError.DUPLICATE_KEYWORD:
      return "DUPLICATE_KEYWORD";
    case FeedItemTargetErrorEnum_FeedItemTargetError.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseFeedItemTargetErrorEnum(): FeedItemTargetErrorEnum {
  return {};
}

export const FeedItemTargetErrorEnum: MessageFns<FeedItemTargetErrorEnum> = {
  encode(_: FeedItemTargetErrorEnum, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FeedItemTargetErrorEnum {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFeedItemTargetErrorEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): FeedItemTargetErrorEnum {
    return {};
  },

  toJSON(_: FeedItemTargetErrorEnum): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<FeedItemTargetErrorEnum>): FeedItemTargetErrorEnum {
    return FeedItemTargetErrorEnum.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<FeedItemTargetErrorEnum>): FeedItemTargetErrorEnum {
    const message = createBaseFeedItemTargetErrorEnum();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
