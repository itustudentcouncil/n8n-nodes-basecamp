// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v17/errors/feed_item_set_error.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.googleads.v17.errors";

/** Container for enum describing possible feed item set errors. */
export interface FeedItemSetErrorEnum {
}

/** Enum describing possible feed item set errors. */
export enum FeedItemSetErrorEnum_FeedItemSetError {
  /** UNSPECIFIED - Enum unspecified. */
  UNSPECIFIED = 0,
  /** UNKNOWN - The received error code is not known in this version. */
  UNKNOWN = 1,
  /** FEED_ITEM_SET_REMOVED - The given ID refers to a removed FeedItemSet. */
  FEED_ITEM_SET_REMOVED = 2,
  /**
   * CANNOT_CLEAR_DYNAMIC_FILTER - The dynamic filter of a feed item set cannot be cleared on UPDATE if it
   * exists. A set is either static or dynamic once added, and that cannot
   * change.
   */
  CANNOT_CLEAR_DYNAMIC_FILTER = 3,
  /**
   * CANNOT_CREATE_DYNAMIC_FILTER - The dynamic filter of a feed item set cannot be created on UPDATE if it
   * does not exist. A set is either static or dynamic once added, and that
   * cannot change.
   */
  CANNOT_CREATE_DYNAMIC_FILTER = 4,
  /** INVALID_FEED_TYPE - FeedItemSets can only be made for location or affiliate location feeds. */
  INVALID_FEED_TYPE = 5,
  /** DUPLICATE_NAME - FeedItemSets duplicate name. Name should be unique within an account. */
  DUPLICATE_NAME = 6,
  /**
   * WRONG_DYNAMIC_FILTER_FOR_FEED_TYPE - The feed type of the parent Feed is not compatible with the type of
   * dynamic filter being set. For example, you can only set
   * dynamic_location_set_filter for LOCATION feed item sets.
   */
  WRONG_DYNAMIC_FILTER_FOR_FEED_TYPE = 7,
  /** DYNAMIC_FILTER_INVALID_CHAIN_IDS - Chain ID specified for AffiliateLocationFeedData is invalid. */
  DYNAMIC_FILTER_INVALID_CHAIN_IDS = 8,
  UNRECOGNIZED = -1,
}

export function feedItemSetErrorEnum_FeedItemSetErrorFromJSON(object: any): FeedItemSetErrorEnum_FeedItemSetError {
  switch (object) {
    case 0:
    case "UNSPECIFIED":
      return FeedItemSetErrorEnum_FeedItemSetError.UNSPECIFIED;
    case 1:
    case "UNKNOWN":
      return FeedItemSetErrorEnum_FeedItemSetError.UNKNOWN;
    case 2:
    case "FEED_ITEM_SET_REMOVED":
      return FeedItemSetErrorEnum_FeedItemSetError.FEED_ITEM_SET_REMOVED;
    case 3:
    case "CANNOT_CLEAR_DYNAMIC_FILTER":
      return FeedItemSetErrorEnum_FeedItemSetError.CANNOT_CLEAR_DYNAMIC_FILTER;
    case 4:
    case "CANNOT_CREATE_DYNAMIC_FILTER":
      return FeedItemSetErrorEnum_FeedItemSetError.CANNOT_CREATE_DYNAMIC_FILTER;
    case 5:
    case "INVALID_FEED_TYPE":
      return FeedItemSetErrorEnum_FeedItemSetError.INVALID_FEED_TYPE;
    case 6:
    case "DUPLICATE_NAME":
      return FeedItemSetErrorEnum_FeedItemSetError.DUPLICATE_NAME;
    case 7:
    case "WRONG_DYNAMIC_FILTER_FOR_FEED_TYPE":
      return FeedItemSetErrorEnum_FeedItemSetError.WRONG_DYNAMIC_FILTER_FOR_FEED_TYPE;
    case 8:
    case "DYNAMIC_FILTER_INVALID_CHAIN_IDS":
      return FeedItemSetErrorEnum_FeedItemSetError.DYNAMIC_FILTER_INVALID_CHAIN_IDS;
    case -1:
    case "UNRECOGNIZED":
    default:
      return FeedItemSetErrorEnum_FeedItemSetError.UNRECOGNIZED;
  }
}

export function feedItemSetErrorEnum_FeedItemSetErrorToJSON(object: FeedItemSetErrorEnum_FeedItemSetError): string {
  switch (object) {
    case FeedItemSetErrorEnum_FeedItemSetError.UNSPECIFIED:
      return "UNSPECIFIED";
    case FeedItemSetErrorEnum_FeedItemSetError.UNKNOWN:
      return "UNKNOWN";
    case FeedItemSetErrorEnum_FeedItemSetError.FEED_ITEM_SET_REMOVED:
      return "FEED_ITEM_SET_REMOVED";
    case FeedItemSetErrorEnum_FeedItemSetError.CANNOT_CLEAR_DYNAMIC_FILTER:
      return "CANNOT_CLEAR_DYNAMIC_FILTER";
    case FeedItemSetErrorEnum_FeedItemSetError.CANNOT_CREATE_DYNAMIC_FILTER:
      return "CANNOT_CREATE_DYNAMIC_FILTER";
    case FeedItemSetErrorEnum_FeedItemSetError.INVALID_FEED_TYPE:
      return "INVALID_FEED_TYPE";
    case FeedItemSetErrorEnum_FeedItemSetError.DUPLICATE_NAME:
      return "DUPLICATE_NAME";
    case FeedItemSetErrorEnum_FeedItemSetError.WRONG_DYNAMIC_FILTER_FOR_FEED_TYPE:
      return "WRONG_DYNAMIC_FILTER_FOR_FEED_TYPE";
    case FeedItemSetErrorEnum_FeedItemSetError.DYNAMIC_FILTER_INVALID_CHAIN_IDS:
      return "DYNAMIC_FILTER_INVALID_CHAIN_IDS";
    case FeedItemSetErrorEnum_FeedItemSetError.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseFeedItemSetErrorEnum(): FeedItemSetErrorEnum {
  return {};
}

export const FeedItemSetErrorEnum: MessageFns<FeedItemSetErrorEnum> = {
  encode(_: FeedItemSetErrorEnum, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FeedItemSetErrorEnum {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFeedItemSetErrorEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): FeedItemSetErrorEnum {
    return {};
  },

  toJSON(_: FeedItemSetErrorEnum): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<FeedItemSetErrorEnum>): FeedItemSetErrorEnum {
    return FeedItemSetErrorEnum.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<FeedItemSetErrorEnum>): FeedItemSetErrorEnum {
    const message = createBaseFeedItemSetErrorEnum();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
