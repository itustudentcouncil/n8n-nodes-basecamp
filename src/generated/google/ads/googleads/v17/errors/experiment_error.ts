// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v17/errors/experiment_error.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.googleads.v17.errors";

/** Container for enum describing possible experiment error. */
export interface ExperimentErrorEnum {
}

/** Enum describing possible experiment errors. */
export enum ExperimentErrorEnum_ExperimentError {
  /** UNSPECIFIED - Enum unspecified. */
  UNSPECIFIED = 0,
  /** UNKNOWN - The received error code is not known in this version. */
  UNKNOWN = 1,
  /**
   * CANNOT_SET_START_DATE_IN_PAST - The start date of an experiment cannot be set in the past.
   * Use a start date in the future.
   */
  CANNOT_SET_START_DATE_IN_PAST = 2,
  /**
   * END_DATE_BEFORE_START_DATE - The end date of an experiment is before its start date.
   * Use an end date after the start date.
   */
  END_DATE_BEFORE_START_DATE = 3,
  /**
   * START_DATE_TOO_FAR_IN_FUTURE - The start date of an experiment is too far in the future.
   * Use a start date no more than 1 year in the future.
   */
  START_DATE_TOO_FAR_IN_FUTURE = 4,
  /** DUPLICATE_EXPERIMENT_NAME - The experiment has the same name as an existing active experiment. */
  DUPLICATE_EXPERIMENT_NAME = 5,
  /** CANNOT_MODIFY_REMOVED_EXPERIMENT - Experiments can only be modified when they are ENABLED. */
  CANNOT_MODIFY_REMOVED_EXPERIMENT = 6,
  /**
   * START_DATE_ALREADY_PASSED - The start date of an experiment cannot be modified if the existing start
   * date has already passed.
   */
  START_DATE_ALREADY_PASSED = 7,
  /** CANNOT_SET_END_DATE_IN_PAST - The end date of an experiment cannot be set in the past. */
  CANNOT_SET_END_DATE_IN_PAST = 8,
  /** CANNOT_SET_STATUS_TO_REMOVED - The status of an experiment cannot be set to REMOVED. */
  CANNOT_SET_STATUS_TO_REMOVED = 9,
  /** CANNOT_MODIFY_PAST_END_DATE - The end date of an expired experiment cannot be modified. */
  CANNOT_MODIFY_PAST_END_DATE = 10,
  /** INVALID_STATUS - The status is invalid. */
  INVALID_STATUS = 11,
  /** INVALID_CAMPAIGN_CHANNEL_TYPE - Experiment arm contains campaigns with invalid advertising channel type. */
  INVALID_CAMPAIGN_CHANNEL_TYPE = 12,
  /** OVERLAPPING_MEMBERS_AND_DATE_RANGE - A pair of trials share members and have overlapping date ranges. */
  OVERLAPPING_MEMBERS_AND_DATE_RANGE = 13,
  /** INVALID_TRIAL_ARM_TRAFFIC_SPLIT - Experiment arm contains invalid traffic split. */
  INVALID_TRIAL_ARM_TRAFFIC_SPLIT = 14,
  /** TRAFFIC_SPLIT_OVERLAPPING - Experiment contains trial arms with overlapping traffic split. */
  TRAFFIC_SPLIT_OVERLAPPING = 15,
  /** SUM_TRIAL_ARM_TRAFFIC_UNEQUALS_TO_TRIAL_TRAFFIC_SPLIT_DENOMINATOR - The total traffic split of trial arms is not equal to 100. */
  SUM_TRIAL_ARM_TRAFFIC_UNEQUALS_TO_TRIAL_TRAFFIC_SPLIT_DENOMINATOR = 16,
  /**
   * CANNOT_MODIFY_TRAFFIC_SPLIT_AFTER_START - Traffic split related settings (like traffic share bounds) can't be
   * modified after the experiment has started.
   */
  CANNOT_MODIFY_TRAFFIC_SPLIT_AFTER_START = 17,
  /** EXPERIMENT_NOT_FOUND - The experiment could not be found. */
  EXPERIMENT_NOT_FOUND = 18,
  /** EXPERIMENT_NOT_YET_STARTED - Experiment has not begun. */
  EXPERIMENT_NOT_YET_STARTED = 19,
  /** CANNOT_HAVE_MULTIPLE_CONTROL_ARMS - The experiment cannot have more than one control arm. */
  CANNOT_HAVE_MULTIPLE_CONTROL_ARMS = 20,
  /** IN_DESIGN_CAMPAIGNS_NOT_SET - The experiment doesn't set in-design campaigns. */
  IN_DESIGN_CAMPAIGNS_NOT_SET = 21,
  /**
   * CANNOT_SET_STATUS_TO_GRADUATED - Clients must use the graduate action to graduate experiments and cannot
   * set the status to GRADUATED directly.
   */
  CANNOT_SET_STATUS_TO_GRADUATED = 22,
  /** CANNOT_CREATE_EXPERIMENT_CAMPAIGN_WITH_SHARED_BUDGET - Cannot use shared budget on base campaign when scheduling an experiment. */
  CANNOT_CREATE_EXPERIMENT_CAMPAIGN_WITH_SHARED_BUDGET = 23,
  /** CANNOT_CREATE_EXPERIMENT_CAMPAIGN_WITH_CUSTOM_BUDGET - Cannot use custom budget on base campaign when scheduling an experiment. */
  CANNOT_CREATE_EXPERIMENT_CAMPAIGN_WITH_CUSTOM_BUDGET = 24,
  /** STATUS_TRANSITION_INVALID - Invalid status transition. */
  STATUS_TRANSITION_INVALID = 25,
  /** DUPLICATE_EXPERIMENT_CAMPAIGN_NAME - The experiment campaign name conflicts with a pre-existing campaign. */
  DUPLICATE_EXPERIMENT_CAMPAIGN_NAME = 26,
  /** CANNOT_REMOVE_IN_CREATION_EXPERIMENT - Cannot remove in creation experiments. */
  CANNOT_REMOVE_IN_CREATION_EXPERIMENT = 27,
  /**
   * CANNOT_ADD_CAMPAIGN_WITH_DEPRECATED_AD_TYPES - Cannot add campaign with deprecated ad types. Deprecated ad types:
   * ENHANCED_DISPLAY, GALLERY, GMAIL, KEYWORDLESS, TEXT.
   */
  CANNOT_ADD_CAMPAIGN_WITH_DEPRECATED_AD_TYPES = 28,
  /**
   * CANNOT_ENABLE_SYNC_FOR_UNSUPPORTED_EXPERIMENT_TYPE - Sync can only be enabled for supported experiment types. Supported
   * experiment types: SEARCH_CUSTOM, DISPLAY_CUSTOM,
   * DISPLAY_AUTOMATED_BIDDING_STRATEGY, SEARCH_AUTOMATED_BIDDING_STRATEGY.
   */
  CANNOT_ENABLE_SYNC_FOR_UNSUPPORTED_EXPERIMENT_TYPE = 29,
  /** INVALID_DURATION_FOR_AN_EXPERIMENT - Experiment length cannot be longer than max length. */
  INVALID_DURATION_FOR_AN_EXPERIMENT = 30,
  UNRECOGNIZED = -1,
}

export function experimentErrorEnum_ExperimentErrorFromJSON(object: any): ExperimentErrorEnum_ExperimentError {
  switch (object) {
    case 0:
    case "UNSPECIFIED":
      return ExperimentErrorEnum_ExperimentError.UNSPECIFIED;
    case 1:
    case "UNKNOWN":
      return ExperimentErrorEnum_ExperimentError.UNKNOWN;
    case 2:
    case "CANNOT_SET_START_DATE_IN_PAST":
      return ExperimentErrorEnum_ExperimentError.CANNOT_SET_START_DATE_IN_PAST;
    case 3:
    case "END_DATE_BEFORE_START_DATE":
      return ExperimentErrorEnum_ExperimentError.END_DATE_BEFORE_START_DATE;
    case 4:
    case "START_DATE_TOO_FAR_IN_FUTURE":
      return ExperimentErrorEnum_ExperimentError.START_DATE_TOO_FAR_IN_FUTURE;
    case 5:
    case "DUPLICATE_EXPERIMENT_NAME":
      return ExperimentErrorEnum_ExperimentError.DUPLICATE_EXPERIMENT_NAME;
    case 6:
    case "CANNOT_MODIFY_REMOVED_EXPERIMENT":
      return ExperimentErrorEnum_ExperimentError.CANNOT_MODIFY_REMOVED_EXPERIMENT;
    case 7:
    case "START_DATE_ALREADY_PASSED":
      return ExperimentErrorEnum_ExperimentError.START_DATE_ALREADY_PASSED;
    case 8:
    case "CANNOT_SET_END_DATE_IN_PAST":
      return ExperimentErrorEnum_ExperimentError.CANNOT_SET_END_DATE_IN_PAST;
    case 9:
    case "CANNOT_SET_STATUS_TO_REMOVED":
      return ExperimentErrorEnum_ExperimentError.CANNOT_SET_STATUS_TO_REMOVED;
    case 10:
    case "CANNOT_MODIFY_PAST_END_DATE":
      return ExperimentErrorEnum_ExperimentError.CANNOT_MODIFY_PAST_END_DATE;
    case 11:
    case "INVALID_STATUS":
      return ExperimentErrorEnum_ExperimentError.INVALID_STATUS;
    case 12:
    case "INVALID_CAMPAIGN_CHANNEL_TYPE":
      return ExperimentErrorEnum_ExperimentError.INVALID_CAMPAIGN_CHANNEL_TYPE;
    case 13:
    case "OVERLAPPING_MEMBERS_AND_DATE_RANGE":
      return ExperimentErrorEnum_ExperimentError.OVERLAPPING_MEMBERS_AND_DATE_RANGE;
    case 14:
    case "INVALID_TRIAL_ARM_TRAFFIC_SPLIT":
      return ExperimentErrorEnum_ExperimentError.INVALID_TRIAL_ARM_TRAFFIC_SPLIT;
    case 15:
    case "TRAFFIC_SPLIT_OVERLAPPING":
      return ExperimentErrorEnum_ExperimentError.TRAFFIC_SPLIT_OVERLAPPING;
    case 16:
    case "SUM_TRIAL_ARM_TRAFFIC_UNEQUALS_TO_TRIAL_TRAFFIC_SPLIT_DENOMINATOR":
      return ExperimentErrorEnum_ExperimentError.SUM_TRIAL_ARM_TRAFFIC_UNEQUALS_TO_TRIAL_TRAFFIC_SPLIT_DENOMINATOR;
    case 17:
    case "CANNOT_MODIFY_TRAFFIC_SPLIT_AFTER_START":
      return ExperimentErrorEnum_ExperimentError.CANNOT_MODIFY_TRAFFIC_SPLIT_AFTER_START;
    case 18:
    case "EXPERIMENT_NOT_FOUND":
      return ExperimentErrorEnum_ExperimentError.EXPERIMENT_NOT_FOUND;
    case 19:
    case "EXPERIMENT_NOT_YET_STARTED":
      return ExperimentErrorEnum_ExperimentError.EXPERIMENT_NOT_YET_STARTED;
    case 20:
    case "CANNOT_HAVE_MULTIPLE_CONTROL_ARMS":
      return ExperimentErrorEnum_ExperimentError.CANNOT_HAVE_MULTIPLE_CONTROL_ARMS;
    case 21:
    case "IN_DESIGN_CAMPAIGNS_NOT_SET":
      return ExperimentErrorEnum_ExperimentError.IN_DESIGN_CAMPAIGNS_NOT_SET;
    case 22:
    case "CANNOT_SET_STATUS_TO_GRADUATED":
      return ExperimentErrorEnum_ExperimentError.CANNOT_SET_STATUS_TO_GRADUATED;
    case 23:
    case "CANNOT_CREATE_EXPERIMENT_CAMPAIGN_WITH_SHARED_BUDGET":
      return ExperimentErrorEnum_ExperimentError.CANNOT_CREATE_EXPERIMENT_CAMPAIGN_WITH_SHARED_BUDGET;
    case 24:
    case "CANNOT_CREATE_EXPERIMENT_CAMPAIGN_WITH_CUSTOM_BUDGET":
      return ExperimentErrorEnum_ExperimentError.CANNOT_CREATE_EXPERIMENT_CAMPAIGN_WITH_CUSTOM_BUDGET;
    case 25:
    case "STATUS_TRANSITION_INVALID":
      return ExperimentErrorEnum_ExperimentError.STATUS_TRANSITION_INVALID;
    case 26:
    case "DUPLICATE_EXPERIMENT_CAMPAIGN_NAME":
      return ExperimentErrorEnum_ExperimentError.DUPLICATE_EXPERIMENT_CAMPAIGN_NAME;
    case 27:
    case "CANNOT_REMOVE_IN_CREATION_EXPERIMENT":
      return ExperimentErrorEnum_ExperimentError.CANNOT_REMOVE_IN_CREATION_EXPERIMENT;
    case 28:
    case "CANNOT_ADD_CAMPAIGN_WITH_DEPRECATED_AD_TYPES":
      return ExperimentErrorEnum_ExperimentError.CANNOT_ADD_CAMPAIGN_WITH_DEPRECATED_AD_TYPES;
    case 29:
    case "CANNOT_ENABLE_SYNC_FOR_UNSUPPORTED_EXPERIMENT_TYPE":
      return ExperimentErrorEnum_ExperimentError.CANNOT_ENABLE_SYNC_FOR_UNSUPPORTED_EXPERIMENT_TYPE;
    case 30:
    case "INVALID_DURATION_FOR_AN_EXPERIMENT":
      return ExperimentErrorEnum_ExperimentError.INVALID_DURATION_FOR_AN_EXPERIMENT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ExperimentErrorEnum_ExperimentError.UNRECOGNIZED;
  }
}

export function experimentErrorEnum_ExperimentErrorToJSON(object: ExperimentErrorEnum_ExperimentError): string {
  switch (object) {
    case ExperimentErrorEnum_ExperimentError.UNSPECIFIED:
      return "UNSPECIFIED";
    case ExperimentErrorEnum_ExperimentError.UNKNOWN:
      return "UNKNOWN";
    case ExperimentErrorEnum_ExperimentError.CANNOT_SET_START_DATE_IN_PAST:
      return "CANNOT_SET_START_DATE_IN_PAST";
    case ExperimentErrorEnum_ExperimentError.END_DATE_BEFORE_START_DATE:
      return "END_DATE_BEFORE_START_DATE";
    case ExperimentErrorEnum_ExperimentError.START_DATE_TOO_FAR_IN_FUTURE:
      return "START_DATE_TOO_FAR_IN_FUTURE";
    case ExperimentErrorEnum_ExperimentError.DUPLICATE_EXPERIMENT_NAME:
      return "DUPLICATE_EXPERIMENT_NAME";
    case ExperimentErrorEnum_ExperimentError.CANNOT_MODIFY_REMOVED_EXPERIMENT:
      return "CANNOT_MODIFY_REMOVED_EXPERIMENT";
    case ExperimentErrorEnum_ExperimentError.START_DATE_ALREADY_PASSED:
      return "START_DATE_ALREADY_PASSED";
    case ExperimentErrorEnum_ExperimentError.CANNOT_SET_END_DATE_IN_PAST:
      return "CANNOT_SET_END_DATE_IN_PAST";
    case ExperimentErrorEnum_ExperimentError.CANNOT_SET_STATUS_TO_REMOVED:
      return "CANNOT_SET_STATUS_TO_REMOVED";
    case ExperimentErrorEnum_ExperimentError.CANNOT_MODIFY_PAST_END_DATE:
      return "CANNOT_MODIFY_PAST_END_DATE";
    case ExperimentErrorEnum_ExperimentError.INVALID_STATUS:
      return "INVALID_STATUS";
    case ExperimentErrorEnum_ExperimentError.INVALID_CAMPAIGN_CHANNEL_TYPE:
      return "INVALID_CAMPAIGN_CHANNEL_TYPE";
    case ExperimentErrorEnum_ExperimentError.OVERLAPPING_MEMBERS_AND_DATE_RANGE:
      return "OVERLAPPING_MEMBERS_AND_DATE_RANGE";
    case ExperimentErrorEnum_ExperimentError.INVALID_TRIAL_ARM_TRAFFIC_SPLIT:
      return "INVALID_TRIAL_ARM_TRAFFIC_SPLIT";
    case ExperimentErrorEnum_ExperimentError.TRAFFIC_SPLIT_OVERLAPPING:
      return "TRAFFIC_SPLIT_OVERLAPPING";
    case ExperimentErrorEnum_ExperimentError.SUM_TRIAL_ARM_TRAFFIC_UNEQUALS_TO_TRIAL_TRAFFIC_SPLIT_DENOMINATOR:
      return "SUM_TRIAL_ARM_TRAFFIC_UNEQUALS_TO_TRIAL_TRAFFIC_SPLIT_DENOMINATOR";
    case ExperimentErrorEnum_ExperimentError.CANNOT_MODIFY_TRAFFIC_SPLIT_AFTER_START:
      return "CANNOT_MODIFY_TRAFFIC_SPLIT_AFTER_START";
    case ExperimentErrorEnum_ExperimentError.EXPERIMENT_NOT_FOUND:
      return "EXPERIMENT_NOT_FOUND";
    case ExperimentErrorEnum_ExperimentError.EXPERIMENT_NOT_YET_STARTED:
      return "EXPERIMENT_NOT_YET_STARTED";
    case ExperimentErrorEnum_ExperimentError.CANNOT_HAVE_MULTIPLE_CONTROL_ARMS:
      return "CANNOT_HAVE_MULTIPLE_CONTROL_ARMS";
    case ExperimentErrorEnum_ExperimentError.IN_DESIGN_CAMPAIGNS_NOT_SET:
      return "IN_DESIGN_CAMPAIGNS_NOT_SET";
    case ExperimentErrorEnum_ExperimentError.CANNOT_SET_STATUS_TO_GRADUATED:
      return "CANNOT_SET_STATUS_TO_GRADUATED";
    case ExperimentErrorEnum_ExperimentError.CANNOT_CREATE_EXPERIMENT_CAMPAIGN_WITH_SHARED_BUDGET:
      return "CANNOT_CREATE_EXPERIMENT_CAMPAIGN_WITH_SHARED_BUDGET";
    case ExperimentErrorEnum_ExperimentError.CANNOT_CREATE_EXPERIMENT_CAMPAIGN_WITH_CUSTOM_BUDGET:
      return "CANNOT_CREATE_EXPERIMENT_CAMPAIGN_WITH_CUSTOM_BUDGET";
    case ExperimentErrorEnum_ExperimentError.STATUS_TRANSITION_INVALID:
      return "STATUS_TRANSITION_INVALID";
    case ExperimentErrorEnum_ExperimentError.DUPLICATE_EXPERIMENT_CAMPAIGN_NAME:
      return "DUPLICATE_EXPERIMENT_CAMPAIGN_NAME";
    case ExperimentErrorEnum_ExperimentError.CANNOT_REMOVE_IN_CREATION_EXPERIMENT:
      return "CANNOT_REMOVE_IN_CREATION_EXPERIMENT";
    case ExperimentErrorEnum_ExperimentError.CANNOT_ADD_CAMPAIGN_WITH_DEPRECATED_AD_TYPES:
      return "CANNOT_ADD_CAMPAIGN_WITH_DEPRECATED_AD_TYPES";
    case ExperimentErrorEnum_ExperimentError.CANNOT_ENABLE_SYNC_FOR_UNSUPPORTED_EXPERIMENT_TYPE:
      return "CANNOT_ENABLE_SYNC_FOR_UNSUPPORTED_EXPERIMENT_TYPE";
    case ExperimentErrorEnum_ExperimentError.INVALID_DURATION_FOR_AN_EXPERIMENT:
      return "INVALID_DURATION_FOR_AN_EXPERIMENT";
    case ExperimentErrorEnum_ExperimentError.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseExperimentErrorEnum(): ExperimentErrorEnum {
  return {};
}

export const ExperimentErrorEnum: MessageFns<ExperimentErrorEnum> = {
  encode(_: ExperimentErrorEnum, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExperimentErrorEnum {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExperimentErrorEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ExperimentErrorEnum {
    return {};
  },

  toJSON(_: ExperimentErrorEnum): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<ExperimentErrorEnum>): ExperimentErrorEnum {
    return ExperimentErrorEnum.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<ExperimentErrorEnum>): ExperimentErrorEnum {
    const message = createBaseExperimentErrorEnum();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
