// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v17/errors/asset_set_asset_error.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.googleads.v17.errors";

/** Container for enum describing possible asset set asset errors. */
export interface AssetSetAssetErrorEnum {
}

/** Enum describing possible asset set asset errors. */
export enum AssetSetAssetErrorEnum_AssetSetAssetError {
  /** UNSPECIFIED - Enum unspecified. */
  UNSPECIFIED = 0,
  /** UNKNOWN - The received error code is not known in this version. */
  UNKNOWN = 1,
  /**
   * INVALID_ASSET_TYPE - The asset type is not eligible to be linked to the specific type of asset
   * set.
   */
  INVALID_ASSET_TYPE = 2,
  /**
   * INVALID_ASSET_SET_TYPE - The asset set type is not eligible to contain the specified type of
   * assets.
   */
  INVALID_ASSET_SET_TYPE = 3,
  /**
   * DUPLICATE_EXTERNAL_KEY - The asset contains duplicate external key with another asset in the asset
   * set.
   */
  DUPLICATE_EXTERNAL_KEY = 4,
  /**
   * PARENT_LINKAGE_DOES_NOT_EXIST - When attaching a Location typed Asset to a LocationGroup typed AssetSet,
   * the AssetSetAsset linkage between the parent LocationSync AssetSet and
   * the Asset doesn't exist.
   */
  PARENT_LINKAGE_DOES_NOT_EXIST = 5,
  UNRECOGNIZED = -1,
}

export function assetSetAssetErrorEnum_AssetSetAssetErrorFromJSON(
  object: any,
): AssetSetAssetErrorEnum_AssetSetAssetError {
  switch (object) {
    case 0:
    case "UNSPECIFIED":
      return AssetSetAssetErrorEnum_AssetSetAssetError.UNSPECIFIED;
    case 1:
    case "UNKNOWN":
      return AssetSetAssetErrorEnum_AssetSetAssetError.UNKNOWN;
    case 2:
    case "INVALID_ASSET_TYPE":
      return AssetSetAssetErrorEnum_AssetSetAssetError.INVALID_ASSET_TYPE;
    case 3:
    case "INVALID_ASSET_SET_TYPE":
      return AssetSetAssetErrorEnum_AssetSetAssetError.INVALID_ASSET_SET_TYPE;
    case 4:
    case "DUPLICATE_EXTERNAL_KEY":
      return AssetSetAssetErrorEnum_AssetSetAssetError.DUPLICATE_EXTERNAL_KEY;
    case 5:
    case "PARENT_LINKAGE_DOES_NOT_EXIST":
      return AssetSetAssetErrorEnum_AssetSetAssetError.PARENT_LINKAGE_DOES_NOT_EXIST;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AssetSetAssetErrorEnum_AssetSetAssetError.UNRECOGNIZED;
  }
}

export function assetSetAssetErrorEnum_AssetSetAssetErrorToJSON(
  object: AssetSetAssetErrorEnum_AssetSetAssetError,
): string {
  switch (object) {
    case AssetSetAssetErrorEnum_AssetSetAssetError.UNSPECIFIED:
      return "UNSPECIFIED";
    case AssetSetAssetErrorEnum_AssetSetAssetError.UNKNOWN:
      return "UNKNOWN";
    case AssetSetAssetErrorEnum_AssetSetAssetError.INVALID_ASSET_TYPE:
      return "INVALID_ASSET_TYPE";
    case AssetSetAssetErrorEnum_AssetSetAssetError.INVALID_ASSET_SET_TYPE:
      return "INVALID_ASSET_SET_TYPE";
    case AssetSetAssetErrorEnum_AssetSetAssetError.DUPLICATE_EXTERNAL_KEY:
      return "DUPLICATE_EXTERNAL_KEY";
    case AssetSetAssetErrorEnum_AssetSetAssetError.PARENT_LINKAGE_DOES_NOT_EXIST:
      return "PARENT_LINKAGE_DOES_NOT_EXIST";
    case AssetSetAssetErrorEnum_AssetSetAssetError.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseAssetSetAssetErrorEnum(): AssetSetAssetErrorEnum {
  return {};
}

export const AssetSetAssetErrorEnum: MessageFns<AssetSetAssetErrorEnum> = {
  encode(_: AssetSetAssetErrorEnum, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AssetSetAssetErrorEnum {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAssetSetAssetErrorEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): AssetSetAssetErrorEnum {
    return {};
  },

  toJSON(_: AssetSetAssetErrorEnum): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<AssetSetAssetErrorEnum>): AssetSetAssetErrorEnum {
    return AssetSetAssetErrorEnum.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<AssetSetAssetErrorEnum>): AssetSetAssetErrorEnum {
    const message = createBaseAssetSetAssetErrorEnum();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
