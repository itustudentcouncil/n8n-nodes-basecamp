// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v17/errors/feed_error.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.googleads.v17.errors";

/** Container for enum describing possible feed errors. */
export interface FeedErrorEnum {
}

/** Enum describing possible feed errors. */
export enum FeedErrorEnum_FeedError {
  /** UNSPECIFIED - Enum unspecified. */
  UNSPECIFIED = 0,
  /** UNKNOWN - The received error code is not known in this version. */
  UNKNOWN = 1,
  /** ATTRIBUTE_NAMES_NOT_UNIQUE - The names of the FeedAttributes must be unique. */
  ATTRIBUTE_NAMES_NOT_UNIQUE = 2,
  /**
   * ATTRIBUTES_DO_NOT_MATCH_EXISTING_ATTRIBUTES - The attribute list must be an exact copy of the existing list if the
   * attribute ID's are present.
   */
  ATTRIBUTES_DO_NOT_MATCH_EXISTING_ATTRIBUTES = 3,
  /** CANNOT_SPECIFY_USER_ORIGIN_FOR_SYSTEM_FEED - Cannot specify USER origin for a system generated feed. */
  CANNOT_SPECIFY_USER_ORIGIN_FOR_SYSTEM_FEED = 4,
  /** CANNOT_SPECIFY_GOOGLE_ORIGIN_FOR_NON_SYSTEM_FEED - Cannot specify GOOGLE origin for a non-system generated feed. */
  CANNOT_SPECIFY_GOOGLE_ORIGIN_FOR_NON_SYSTEM_FEED = 5,
  /** CANNOT_SPECIFY_FEED_ATTRIBUTES_FOR_SYSTEM_FEED - Cannot specify feed attributes for system feed. */
  CANNOT_SPECIFY_FEED_ATTRIBUTES_FOR_SYSTEM_FEED = 6,
  /** CANNOT_UPDATE_FEED_ATTRIBUTES_WITH_ORIGIN_GOOGLE - Cannot update FeedAttributes on feed with origin GOOGLE. */
  CANNOT_UPDATE_FEED_ATTRIBUTES_WITH_ORIGIN_GOOGLE = 7,
  /** FEED_REMOVED - The given ID refers to a removed Feed. Removed Feeds are immutable. */
  FEED_REMOVED = 8,
  /** INVALID_ORIGIN_VALUE - The origin of the feed is not valid for the client. */
  INVALID_ORIGIN_VALUE = 9,
  /** FEED_ORIGIN_IS_NOT_USER - A user can only create and modify feeds with USER origin. */
  FEED_ORIGIN_IS_NOT_USER = 10,
  /** INVALID_AUTH_TOKEN_FOR_EMAIL - Invalid auth token for the given email. */
  INVALID_AUTH_TOKEN_FOR_EMAIL = 11,
  /** INVALID_EMAIL - Invalid email specified. */
  INVALID_EMAIL = 12,
  /** DUPLICATE_FEED_NAME - Feed name matches that of another active Feed. */
  DUPLICATE_FEED_NAME = 13,
  /** INVALID_FEED_NAME - Name of feed is not allowed. */
  INVALID_FEED_NAME = 14,
  /** MISSING_OAUTH_INFO - Missing OAuthInfo. */
  MISSING_OAUTH_INFO = 15,
  /** NEW_ATTRIBUTE_CANNOT_BE_PART_OF_UNIQUE_KEY - New FeedAttributes must not affect the unique key. */
  NEW_ATTRIBUTE_CANNOT_BE_PART_OF_UNIQUE_KEY = 16,
  /** TOO_MANY_ATTRIBUTES - Too many FeedAttributes for a Feed. */
  TOO_MANY_ATTRIBUTES = 17,
  /** INVALID_BUSINESS_ACCOUNT - The business account is not valid. */
  INVALID_BUSINESS_ACCOUNT = 18,
  /** BUSINESS_ACCOUNT_CANNOT_ACCESS_LOCATION_ACCOUNT - Business account cannot access Business Profile. */
  BUSINESS_ACCOUNT_CANNOT_ACCESS_LOCATION_ACCOUNT = 19,
  /** INVALID_AFFILIATE_CHAIN_ID - Invalid chain ID provided for affiliate location feed. */
  INVALID_AFFILIATE_CHAIN_ID = 20,
  /** DUPLICATE_SYSTEM_FEED - There is already a feed with the given system feed generation data. */
  DUPLICATE_SYSTEM_FEED = 21,
  /** GMB_ACCESS_ERROR - An error occurred accessing Business Profile. */
  GMB_ACCESS_ERROR = 22,
  /** CANNOT_HAVE_LOCATION_AND_AFFILIATE_LOCATION_FEEDS - A customer cannot have both LOCATION and AFFILIATE_LOCATION feeds. */
  CANNOT_HAVE_LOCATION_AND_AFFILIATE_LOCATION_FEEDS = 23,
  /** LEGACY_EXTENSION_TYPE_READ_ONLY - Feed-based extension is read-only for this extension type. */
  LEGACY_EXTENSION_TYPE_READ_ONLY = 24,
  UNRECOGNIZED = -1,
}

export function feedErrorEnum_FeedErrorFromJSON(object: any): FeedErrorEnum_FeedError {
  switch (object) {
    case 0:
    case "UNSPECIFIED":
      return FeedErrorEnum_FeedError.UNSPECIFIED;
    case 1:
    case "UNKNOWN":
      return FeedErrorEnum_FeedError.UNKNOWN;
    case 2:
    case "ATTRIBUTE_NAMES_NOT_UNIQUE":
      return FeedErrorEnum_FeedError.ATTRIBUTE_NAMES_NOT_UNIQUE;
    case 3:
    case "ATTRIBUTES_DO_NOT_MATCH_EXISTING_ATTRIBUTES":
      return FeedErrorEnum_FeedError.ATTRIBUTES_DO_NOT_MATCH_EXISTING_ATTRIBUTES;
    case 4:
    case "CANNOT_SPECIFY_USER_ORIGIN_FOR_SYSTEM_FEED":
      return FeedErrorEnum_FeedError.CANNOT_SPECIFY_USER_ORIGIN_FOR_SYSTEM_FEED;
    case 5:
    case "CANNOT_SPECIFY_GOOGLE_ORIGIN_FOR_NON_SYSTEM_FEED":
      return FeedErrorEnum_FeedError.CANNOT_SPECIFY_GOOGLE_ORIGIN_FOR_NON_SYSTEM_FEED;
    case 6:
    case "CANNOT_SPECIFY_FEED_ATTRIBUTES_FOR_SYSTEM_FEED":
      return FeedErrorEnum_FeedError.CANNOT_SPECIFY_FEED_ATTRIBUTES_FOR_SYSTEM_FEED;
    case 7:
    case "CANNOT_UPDATE_FEED_ATTRIBUTES_WITH_ORIGIN_GOOGLE":
      return FeedErrorEnum_FeedError.CANNOT_UPDATE_FEED_ATTRIBUTES_WITH_ORIGIN_GOOGLE;
    case 8:
    case "FEED_REMOVED":
      return FeedErrorEnum_FeedError.FEED_REMOVED;
    case 9:
    case "INVALID_ORIGIN_VALUE":
      return FeedErrorEnum_FeedError.INVALID_ORIGIN_VALUE;
    case 10:
    case "FEED_ORIGIN_IS_NOT_USER":
      return FeedErrorEnum_FeedError.FEED_ORIGIN_IS_NOT_USER;
    case 11:
    case "INVALID_AUTH_TOKEN_FOR_EMAIL":
      return FeedErrorEnum_FeedError.INVALID_AUTH_TOKEN_FOR_EMAIL;
    case 12:
    case "INVALID_EMAIL":
      return FeedErrorEnum_FeedError.INVALID_EMAIL;
    case 13:
    case "DUPLICATE_FEED_NAME":
      return FeedErrorEnum_FeedError.DUPLICATE_FEED_NAME;
    case 14:
    case "INVALID_FEED_NAME":
      return FeedErrorEnum_FeedError.INVALID_FEED_NAME;
    case 15:
    case "MISSING_OAUTH_INFO":
      return FeedErrorEnum_FeedError.MISSING_OAUTH_INFO;
    case 16:
    case "NEW_ATTRIBUTE_CANNOT_BE_PART_OF_UNIQUE_KEY":
      return FeedErrorEnum_FeedError.NEW_ATTRIBUTE_CANNOT_BE_PART_OF_UNIQUE_KEY;
    case 17:
    case "TOO_MANY_ATTRIBUTES":
      return FeedErrorEnum_FeedError.TOO_MANY_ATTRIBUTES;
    case 18:
    case "INVALID_BUSINESS_ACCOUNT":
      return FeedErrorEnum_FeedError.INVALID_BUSINESS_ACCOUNT;
    case 19:
    case "BUSINESS_ACCOUNT_CANNOT_ACCESS_LOCATION_ACCOUNT":
      return FeedErrorEnum_FeedError.BUSINESS_ACCOUNT_CANNOT_ACCESS_LOCATION_ACCOUNT;
    case 20:
    case "INVALID_AFFILIATE_CHAIN_ID":
      return FeedErrorEnum_FeedError.INVALID_AFFILIATE_CHAIN_ID;
    case 21:
    case "DUPLICATE_SYSTEM_FEED":
      return FeedErrorEnum_FeedError.DUPLICATE_SYSTEM_FEED;
    case 22:
    case "GMB_ACCESS_ERROR":
      return FeedErrorEnum_FeedError.GMB_ACCESS_ERROR;
    case 23:
    case "CANNOT_HAVE_LOCATION_AND_AFFILIATE_LOCATION_FEEDS":
      return FeedErrorEnum_FeedError.CANNOT_HAVE_LOCATION_AND_AFFILIATE_LOCATION_FEEDS;
    case 24:
    case "LEGACY_EXTENSION_TYPE_READ_ONLY":
      return FeedErrorEnum_FeedError.LEGACY_EXTENSION_TYPE_READ_ONLY;
    case -1:
    case "UNRECOGNIZED":
    default:
      return FeedErrorEnum_FeedError.UNRECOGNIZED;
  }
}

export function feedErrorEnum_FeedErrorToJSON(object: FeedErrorEnum_FeedError): string {
  switch (object) {
    case FeedErrorEnum_FeedError.UNSPECIFIED:
      return "UNSPECIFIED";
    case FeedErrorEnum_FeedError.UNKNOWN:
      return "UNKNOWN";
    case FeedErrorEnum_FeedError.ATTRIBUTE_NAMES_NOT_UNIQUE:
      return "ATTRIBUTE_NAMES_NOT_UNIQUE";
    case FeedErrorEnum_FeedError.ATTRIBUTES_DO_NOT_MATCH_EXISTING_ATTRIBUTES:
      return "ATTRIBUTES_DO_NOT_MATCH_EXISTING_ATTRIBUTES";
    case FeedErrorEnum_FeedError.CANNOT_SPECIFY_USER_ORIGIN_FOR_SYSTEM_FEED:
      return "CANNOT_SPECIFY_USER_ORIGIN_FOR_SYSTEM_FEED";
    case FeedErrorEnum_FeedError.CANNOT_SPECIFY_GOOGLE_ORIGIN_FOR_NON_SYSTEM_FEED:
      return "CANNOT_SPECIFY_GOOGLE_ORIGIN_FOR_NON_SYSTEM_FEED";
    case FeedErrorEnum_FeedError.CANNOT_SPECIFY_FEED_ATTRIBUTES_FOR_SYSTEM_FEED:
      return "CANNOT_SPECIFY_FEED_ATTRIBUTES_FOR_SYSTEM_FEED";
    case FeedErrorEnum_FeedError.CANNOT_UPDATE_FEED_ATTRIBUTES_WITH_ORIGIN_GOOGLE:
      return "CANNOT_UPDATE_FEED_ATTRIBUTES_WITH_ORIGIN_GOOGLE";
    case FeedErrorEnum_FeedError.FEED_REMOVED:
      return "FEED_REMOVED";
    case FeedErrorEnum_FeedError.INVALID_ORIGIN_VALUE:
      return "INVALID_ORIGIN_VALUE";
    case FeedErrorEnum_FeedError.FEED_ORIGIN_IS_NOT_USER:
      return "FEED_ORIGIN_IS_NOT_USER";
    case FeedErrorEnum_FeedError.INVALID_AUTH_TOKEN_FOR_EMAIL:
      return "INVALID_AUTH_TOKEN_FOR_EMAIL";
    case FeedErrorEnum_FeedError.INVALID_EMAIL:
      return "INVALID_EMAIL";
    case FeedErrorEnum_FeedError.DUPLICATE_FEED_NAME:
      return "DUPLICATE_FEED_NAME";
    case FeedErrorEnum_FeedError.INVALID_FEED_NAME:
      return "INVALID_FEED_NAME";
    case FeedErrorEnum_FeedError.MISSING_OAUTH_INFO:
      return "MISSING_OAUTH_INFO";
    case FeedErrorEnum_FeedError.NEW_ATTRIBUTE_CANNOT_BE_PART_OF_UNIQUE_KEY:
      return "NEW_ATTRIBUTE_CANNOT_BE_PART_OF_UNIQUE_KEY";
    case FeedErrorEnum_FeedError.TOO_MANY_ATTRIBUTES:
      return "TOO_MANY_ATTRIBUTES";
    case FeedErrorEnum_FeedError.INVALID_BUSINESS_ACCOUNT:
      return "INVALID_BUSINESS_ACCOUNT";
    case FeedErrorEnum_FeedError.BUSINESS_ACCOUNT_CANNOT_ACCESS_LOCATION_ACCOUNT:
      return "BUSINESS_ACCOUNT_CANNOT_ACCESS_LOCATION_ACCOUNT";
    case FeedErrorEnum_FeedError.INVALID_AFFILIATE_CHAIN_ID:
      return "INVALID_AFFILIATE_CHAIN_ID";
    case FeedErrorEnum_FeedError.DUPLICATE_SYSTEM_FEED:
      return "DUPLICATE_SYSTEM_FEED";
    case FeedErrorEnum_FeedError.GMB_ACCESS_ERROR:
      return "GMB_ACCESS_ERROR";
    case FeedErrorEnum_FeedError.CANNOT_HAVE_LOCATION_AND_AFFILIATE_LOCATION_FEEDS:
      return "CANNOT_HAVE_LOCATION_AND_AFFILIATE_LOCATION_FEEDS";
    case FeedErrorEnum_FeedError.LEGACY_EXTENSION_TYPE_READ_ONLY:
      return "LEGACY_EXTENSION_TYPE_READ_ONLY";
    case FeedErrorEnum_FeedError.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseFeedErrorEnum(): FeedErrorEnum {
  return {};
}

export const FeedErrorEnum: MessageFns<FeedErrorEnum> = {
  encode(_: FeedErrorEnum, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FeedErrorEnum {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFeedErrorEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): FeedErrorEnum {
    return {};
  },

  toJSON(_: FeedErrorEnum): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<FeedErrorEnum>): FeedErrorEnum {
    return FeedErrorEnum.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<FeedErrorEnum>): FeedErrorEnum {
    const message = createBaseFeedErrorEnum();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
