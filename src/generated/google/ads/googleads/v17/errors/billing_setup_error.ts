// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v17/errors/billing_setup_error.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.googleads.v17.errors";

/** Container for enum describing possible billing setup errors. */
export interface BillingSetupErrorEnum {
}

/** Enum describing possible billing setup errors. */
export enum BillingSetupErrorEnum_BillingSetupError {
  /** UNSPECIFIED - Enum unspecified. */
  UNSPECIFIED = 0,
  /** UNKNOWN - The received error code is not known in this version. */
  UNKNOWN = 1,
  /**
   * CANNOT_USE_EXISTING_AND_NEW_ACCOUNT - Cannot specify both an existing payments account and a new payments
   * account when setting up billing.
   */
  CANNOT_USE_EXISTING_AND_NEW_ACCOUNT = 2,
  /** CANNOT_REMOVE_STARTED_BILLING_SETUP - Cannot cancel an approved billing setup whose start time has passed. */
  CANNOT_REMOVE_STARTED_BILLING_SETUP = 3,
  /** CANNOT_CHANGE_BILLING_TO_SAME_PAYMENTS_ACCOUNT - Cannot perform a Change of Bill-To (CBT) to the same payments account. */
  CANNOT_CHANGE_BILLING_TO_SAME_PAYMENTS_ACCOUNT = 4,
  /**
   * BILLING_SETUP_NOT_PERMITTED_FOR_CUSTOMER_STATUS - Billing setups can only be used by customers with ENABLED or DRAFT
   * status.
   */
  BILLING_SETUP_NOT_PERMITTED_FOR_CUSTOMER_STATUS = 5,
  /**
   * INVALID_PAYMENTS_ACCOUNT - Billing setups must either include a correctly formatted existing
   * payments account id, or a non-empty new payments account name.
   */
  INVALID_PAYMENTS_ACCOUNT = 6,
  /** BILLING_SETUP_NOT_PERMITTED_FOR_CUSTOMER_CATEGORY - Only billable and third-party customers can create billing setups. */
  BILLING_SETUP_NOT_PERMITTED_FOR_CUSTOMER_CATEGORY = 7,
  /** INVALID_START_TIME_TYPE - Billing setup creations can only use NOW for start time type. */
  INVALID_START_TIME_TYPE = 8,
  /**
   * THIRD_PARTY_ALREADY_HAS_BILLING - Billing setups can only be created for a third-party customer if they do
   * not already have a setup.
   */
  THIRD_PARTY_ALREADY_HAS_BILLING = 9,
  /**
   * BILLING_SETUP_IN_PROGRESS - Billing setups cannot be created if there is already a pending billing in
   * progress.
   */
  BILLING_SETUP_IN_PROGRESS = 10,
  /**
   * NO_SIGNUP_PERMISSION - Billing setups can only be created by customers who have permission to
   * setup billings. Users can contact a representative for help setting up
   * permissions.
   */
  NO_SIGNUP_PERMISSION = 11,
  /**
   * CHANGE_OF_BILL_TO_IN_PROGRESS - Billing setups cannot be created if there is already a future-approved
   * billing.
   */
  CHANGE_OF_BILL_TO_IN_PROGRESS = 12,
  /** PAYMENTS_PROFILE_NOT_FOUND - Requested payments profile not found. */
  PAYMENTS_PROFILE_NOT_FOUND = 13,
  /** PAYMENTS_ACCOUNT_NOT_FOUND - Requested payments account not found. */
  PAYMENTS_ACCOUNT_NOT_FOUND = 14,
  /** PAYMENTS_PROFILE_INELIGIBLE - Billing setup creation failed because the payments profile is ineligible. */
  PAYMENTS_PROFILE_INELIGIBLE = 15,
  /** PAYMENTS_ACCOUNT_INELIGIBLE - Billing setup creation failed because the payments account is ineligible. */
  PAYMENTS_ACCOUNT_INELIGIBLE = 16,
  /**
   * CUSTOMER_NEEDS_INTERNAL_APPROVAL - Billing setup creation failed because the payments profile needs internal
   * approval.
   */
  CUSTOMER_NEEDS_INTERNAL_APPROVAL = 17,
  /**
   * PAYMENTS_PROFILE_NEEDS_SERVICE_AGREEMENT_ACCEPTANCE - Billing setup creation failed because the user needs to accept master
   * service agreement on the payments profile.
   */
  PAYMENTS_PROFILE_NEEDS_SERVICE_AGREEMENT_ACCEPTANCE = 18,
  /**
   * PAYMENTS_ACCOUNT_INELIGIBLE_CURRENCY_CODE_MISMATCH - Payments account has different currency code than the current customer
   * and hence cannot be used to setup billing.
   */
  PAYMENTS_ACCOUNT_INELIGIBLE_CURRENCY_CODE_MISMATCH = 19,
  /**
   * FUTURE_START_TIME_PROHIBITED - A start time in the future cannot be used because there is currently no
   * active billing setup for this customer.
   */
  FUTURE_START_TIME_PROHIBITED = 20,
  /** TOO_MANY_BILLING_SETUPS_FOR_PAYMENTS_ACCOUNT - The payments account has maximum number of billing setups. */
  TOO_MANY_BILLING_SETUPS_FOR_PAYMENTS_ACCOUNT = 21,
  UNRECOGNIZED = -1,
}

export function billingSetupErrorEnum_BillingSetupErrorFromJSON(object: any): BillingSetupErrorEnum_BillingSetupError {
  switch (object) {
    case 0:
    case "UNSPECIFIED":
      return BillingSetupErrorEnum_BillingSetupError.UNSPECIFIED;
    case 1:
    case "UNKNOWN":
      return BillingSetupErrorEnum_BillingSetupError.UNKNOWN;
    case 2:
    case "CANNOT_USE_EXISTING_AND_NEW_ACCOUNT":
      return BillingSetupErrorEnum_BillingSetupError.CANNOT_USE_EXISTING_AND_NEW_ACCOUNT;
    case 3:
    case "CANNOT_REMOVE_STARTED_BILLING_SETUP":
      return BillingSetupErrorEnum_BillingSetupError.CANNOT_REMOVE_STARTED_BILLING_SETUP;
    case 4:
    case "CANNOT_CHANGE_BILLING_TO_SAME_PAYMENTS_ACCOUNT":
      return BillingSetupErrorEnum_BillingSetupError.CANNOT_CHANGE_BILLING_TO_SAME_PAYMENTS_ACCOUNT;
    case 5:
    case "BILLING_SETUP_NOT_PERMITTED_FOR_CUSTOMER_STATUS":
      return BillingSetupErrorEnum_BillingSetupError.BILLING_SETUP_NOT_PERMITTED_FOR_CUSTOMER_STATUS;
    case 6:
    case "INVALID_PAYMENTS_ACCOUNT":
      return BillingSetupErrorEnum_BillingSetupError.INVALID_PAYMENTS_ACCOUNT;
    case 7:
    case "BILLING_SETUP_NOT_PERMITTED_FOR_CUSTOMER_CATEGORY":
      return BillingSetupErrorEnum_BillingSetupError.BILLING_SETUP_NOT_PERMITTED_FOR_CUSTOMER_CATEGORY;
    case 8:
    case "INVALID_START_TIME_TYPE":
      return BillingSetupErrorEnum_BillingSetupError.INVALID_START_TIME_TYPE;
    case 9:
    case "THIRD_PARTY_ALREADY_HAS_BILLING":
      return BillingSetupErrorEnum_BillingSetupError.THIRD_PARTY_ALREADY_HAS_BILLING;
    case 10:
    case "BILLING_SETUP_IN_PROGRESS":
      return BillingSetupErrorEnum_BillingSetupError.BILLING_SETUP_IN_PROGRESS;
    case 11:
    case "NO_SIGNUP_PERMISSION":
      return BillingSetupErrorEnum_BillingSetupError.NO_SIGNUP_PERMISSION;
    case 12:
    case "CHANGE_OF_BILL_TO_IN_PROGRESS":
      return BillingSetupErrorEnum_BillingSetupError.CHANGE_OF_BILL_TO_IN_PROGRESS;
    case 13:
    case "PAYMENTS_PROFILE_NOT_FOUND":
      return BillingSetupErrorEnum_BillingSetupError.PAYMENTS_PROFILE_NOT_FOUND;
    case 14:
    case "PAYMENTS_ACCOUNT_NOT_FOUND":
      return BillingSetupErrorEnum_BillingSetupError.PAYMENTS_ACCOUNT_NOT_FOUND;
    case 15:
    case "PAYMENTS_PROFILE_INELIGIBLE":
      return BillingSetupErrorEnum_BillingSetupError.PAYMENTS_PROFILE_INELIGIBLE;
    case 16:
    case "PAYMENTS_ACCOUNT_INELIGIBLE":
      return BillingSetupErrorEnum_BillingSetupError.PAYMENTS_ACCOUNT_INELIGIBLE;
    case 17:
    case "CUSTOMER_NEEDS_INTERNAL_APPROVAL":
      return BillingSetupErrorEnum_BillingSetupError.CUSTOMER_NEEDS_INTERNAL_APPROVAL;
    case 18:
    case "PAYMENTS_PROFILE_NEEDS_SERVICE_AGREEMENT_ACCEPTANCE":
      return BillingSetupErrorEnum_BillingSetupError.PAYMENTS_PROFILE_NEEDS_SERVICE_AGREEMENT_ACCEPTANCE;
    case 19:
    case "PAYMENTS_ACCOUNT_INELIGIBLE_CURRENCY_CODE_MISMATCH":
      return BillingSetupErrorEnum_BillingSetupError.PAYMENTS_ACCOUNT_INELIGIBLE_CURRENCY_CODE_MISMATCH;
    case 20:
    case "FUTURE_START_TIME_PROHIBITED":
      return BillingSetupErrorEnum_BillingSetupError.FUTURE_START_TIME_PROHIBITED;
    case 21:
    case "TOO_MANY_BILLING_SETUPS_FOR_PAYMENTS_ACCOUNT":
      return BillingSetupErrorEnum_BillingSetupError.TOO_MANY_BILLING_SETUPS_FOR_PAYMENTS_ACCOUNT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BillingSetupErrorEnum_BillingSetupError.UNRECOGNIZED;
  }
}

export function billingSetupErrorEnum_BillingSetupErrorToJSON(object: BillingSetupErrorEnum_BillingSetupError): string {
  switch (object) {
    case BillingSetupErrorEnum_BillingSetupError.UNSPECIFIED:
      return "UNSPECIFIED";
    case BillingSetupErrorEnum_BillingSetupError.UNKNOWN:
      return "UNKNOWN";
    case BillingSetupErrorEnum_BillingSetupError.CANNOT_USE_EXISTING_AND_NEW_ACCOUNT:
      return "CANNOT_USE_EXISTING_AND_NEW_ACCOUNT";
    case BillingSetupErrorEnum_BillingSetupError.CANNOT_REMOVE_STARTED_BILLING_SETUP:
      return "CANNOT_REMOVE_STARTED_BILLING_SETUP";
    case BillingSetupErrorEnum_BillingSetupError.CANNOT_CHANGE_BILLING_TO_SAME_PAYMENTS_ACCOUNT:
      return "CANNOT_CHANGE_BILLING_TO_SAME_PAYMENTS_ACCOUNT";
    case BillingSetupErrorEnum_BillingSetupError.BILLING_SETUP_NOT_PERMITTED_FOR_CUSTOMER_STATUS:
      return "BILLING_SETUP_NOT_PERMITTED_FOR_CUSTOMER_STATUS";
    case BillingSetupErrorEnum_BillingSetupError.INVALID_PAYMENTS_ACCOUNT:
      return "INVALID_PAYMENTS_ACCOUNT";
    case BillingSetupErrorEnum_BillingSetupError.BILLING_SETUP_NOT_PERMITTED_FOR_CUSTOMER_CATEGORY:
      return "BILLING_SETUP_NOT_PERMITTED_FOR_CUSTOMER_CATEGORY";
    case BillingSetupErrorEnum_BillingSetupError.INVALID_START_TIME_TYPE:
      return "INVALID_START_TIME_TYPE";
    case BillingSetupErrorEnum_BillingSetupError.THIRD_PARTY_ALREADY_HAS_BILLING:
      return "THIRD_PARTY_ALREADY_HAS_BILLING";
    case BillingSetupErrorEnum_BillingSetupError.BILLING_SETUP_IN_PROGRESS:
      return "BILLING_SETUP_IN_PROGRESS";
    case BillingSetupErrorEnum_BillingSetupError.NO_SIGNUP_PERMISSION:
      return "NO_SIGNUP_PERMISSION";
    case BillingSetupErrorEnum_BillingSetupError.CHANGE_OF_BILL_TO_IN_PROGRESS:
      return "CHANGE_OF_BILL_TO_IN_PROGRESS";
    case BillingSetupErrorEnum_BillingSetupError.PAYMENTS_PROFILE_NOT_FOUND:
      return "PAYMENTS_PROFILE_NOT_FOUND";
    case BillingSetupErrorEnum_BillingSetupError.PAYMENTS_ACCOUNT_NOT_FOUND:
      return "PAYMENTS_ACCOUNT_NOT_FOUND";
    case BillingSetupErrorEnum_BillingSetupError.PAYMENTS_PROFILE_INELIGIBLE:
      return "PAYMENTS_PROFILE_INELIGIBLE";
    case BillingSetupErrorEnum_BillingSetupError.PAYMENTS_ACCOUNT_INELIGIBLE:
      return "PAYMENTS_ACCOUNT_INELIGIBLE";
    case BillingSetupErrorEnum_BillingSetupError.CUSTOMER_NEEDS_INTERNAL_APPROVAL:
      return "CUSTOMER_NEEDS_INTERNAL_APPROVAL";
    case BillingSetupErrorEnum_BillingSetupError.PAYMENTS_PROFILE_NEEDS_SERVICE_AGREEMENT_ACCEPTANCE:
      return "PAYMENTS_PROFILE_NEEDS_SERVICE_AGREEMENT_ACCEPTANCE";
    case BillingSetupErrorEnum_BillingSetupError.PAYMENTS_ACCOUNT_INELIGIBLE_CURRENCY_CODE_MISMATCH:
      return "PAYMENTS_ACCOUNT_INELIGIBLE_CURRENCY_CODE_MISMATCH";
    case BillingSetupErrorEnum_BillingSetupError.FUTURE_START_TIME_PROHIBITED:
      return "FUTURE_START_TIME_PROHIBITED";
    case BillingSetupErrorEnum_BillingSetupError.TOO_MANY_BILLING_SETUPS_FOR_PAYMENTS_ACCOUNT:
      return "TOO_MANY_BILLING_SETUPS_FOR_PAYMENTS_ACCOUNT";
    case BillingSetupErrorEnum_BillingSetupError.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseBillingSetupErrorEnum(): BillingSetupErrorEnum {
  return {};
}

export const BillingSetupErrorEnum: MessageFns<BillingSetupErrorEnum> = {
  encode(_: BillingSetupErrorEnum, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BillingSetupErrorEnum {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBillingSetupErrorEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): BillingSetupErrorEnum {
    return {};
  },

  toJSON(_: BillingSetupErrorEnum): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<BillingSetupErrorEnum>): BillingSetupErrorEnum {
    return BillingSetupErrorEnum.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<BillingSetupErrorEnum>): BillingSetupErrorEnum {
    const message = createBaseBillingSetupErrorEnum();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
