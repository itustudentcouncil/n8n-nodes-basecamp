// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v17/errors/manager_link_error.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.googleads.v17.errors";

/** Container for enum describing possible ManagerLink errors. */
export interface ManagerLinkErrorEnum {
}

/** Enum describing possible ManagerLink errors. */
export enum ManagerLinkErrorEnum_ManagerLinkError {
  /** UNSPECIFIED - Enum unspecified. */
  UNSPECIFIED = 0,
  /** UNKNOWN - The received error code is not known in this version. */
  UNKNOWN = 1,
  /** ACCOUNTS_NOT_COMPATIBLE_FOR_LINKING - The manager and client have incompatible account types. */
  ACCOUNTS_NOT_COMPATIBLE_FOR_LINKING = 2,
  /** TOO_MANY_MANAGERS - Client is already linked to too many managers. */
  TOO_MANY_MANAGERS = 3,
  /** TOO_MANY_INVITES - Manager has too many pending invitations. */
  TOO_MANY_INVITES = 4,
  /** ALREADY_INVITED_BY_THIS_MANAGER - Client is already invited by this manager. */
  ALREADY_INVITED_BY_THIS_MANAGER = 5,
  /** ALREADY_MANAGED_BY_THIS_MANAGER - The client is already managed by this manager. */
  ALREADY_MANAGED_BY_THIS_MANAGER = 6,
  /** ALREADY_MANAGED_IN_HIERARCHY - Client is already managed in hierarchy. */
  ALREADY_MANAGED_IN_HIERARCHY = 7,
  /** DUPLICATE_CHILD_FOUND - Manager and sub-manager to be linked have duplicate client. */
  DUPLICATE_CHILD_FOUND = 8,
  /** CLIENT_HAS_NO_ADMIN_USER - Client has no active user that can access the client account. */
  CLIENT_HAS_NO_ADMIN_USER = 9,
  /** MAX_DEPTH_EXCEEDED - Adding this link would exceed the maximum hierarchy depth. */
  MAX_DEPTH_EXCEEDED = 10,
  /** CYCLE_NOT_ALLOWED - Adding this link will create a cycle. */
  CYCLE_NOT_ALLOWED = 11,
  /** TOO_MANY_ACCOUNTS - Manager account has the maximum number of linked clients. */
  TOO_MANY_ACCOUNTS = 12,
  /** TOO_MANY_ACCOUNTS_AT_MANAGER - Parent manager account has the maximum number of linked clients. */
  TOO_MANY_ACCOUNTS_AT_MANAGER = 13,
  /** NON_OWNER_USER_CANNOT_MODIFY_LINK - The account is not authorized owner. */
  NON_OWNER_USER_CANNOT_MODIFY_LINK = 14,
  /**
   * SUSPENDED_ACCOUNT_CANNOT_ADD_CLIENTS - Your manager account is suspended, and you are no longer allowed to link
   * to clients.
   */
  SUSPENDED_ACCOUNT_CANNOT_ADD_CLIENTS = 15,
  /**
   * CLIENT_OUTSIDE_TREE - You are not allowed to move a client to a manager that is not under your
   * current hierarchy.
   */
  CLIENT_OUTSIDE_TREE = 16,
  /** INVALID_STATUS_CHANGE - The changed status for mutate link is invalid. */
  INVALID_STATUS_CHANGE = 17,
  /** INVALID_CHANGE - The change for mutate link is invalid. */
  INVALID_CHANGE = 18,
  /** CUSTOMER_CANNOT_MANAGE_SELF - You are not allowed to link a manager account to itself. */
  CUSTOMER_CANNOT_MANAGE_SELF = 19,
  /** CREATING_ENABLED_LINK_NOT_ALLOWED - The link was created with status ACTIVE and not PENDING. */
  CREATING_ENABLED_LINK_NOT_ALLOWED = 20,
  UNRECOGNIZED = -1,
}

export function managerLinkErrorEnum_ManagerLinkErrorFromJSON(object: any): ManagerLinkErrorEnum_ManagerLinkError {
  switch (object) {
    case 0:
    case "UNSPECIFIED":
      return ManagerLinkErrorEnum_ManagerLinkError.UNSPECIFIED;
    case 1:
    case "UNKNOWN":
      return ManagerLinkErrorEnum_ManagerLinkError.UNKNOWN;
    case 2:
    case "ACCOUNTS_NOT_COMPATIBLE_FOR_LINKING":
      return ManagerLinkErrorEnum_ManagerLinkError.ACCOUNTS_NOT_COMPATIBLE_FOR_LINKING;
    case 3:
    case "TOO_MANY_MANAGERS":
      return ManagerLinkErrorEnum_ManagerLinkError.TOO_MANY_MANAGERS;
    case 4:
    case "TOO_MANY_INVITES":
      return ManagerLinkErrorEnum_ManagerLinkError.TOO_MANY_INVITES;
    case 5:
    case "ALREADY_INVITED_BY_THIS_MANAGER":
      return ManagerLinkErrorEnum_ManagerLinkError.ALREADY_INVITED_BY_THIS_MANAGER;
    case 6:
    case "ALREADY_MANAGED_BY_THIS_MANAGER":
      return ManagerLinkErrorEnum_ManagerLinkError.ALREADY_MANAGED_BY_THIS_MANAGER;
    case 7:
    case "ALREADY_MANAGED_IN_HIERARCHY":
      return ManagerLinkErrorEnum_ManagerLinkError.ALREADY_MANAGED_IN_HIERARCHY;
    case 8:
    case "DUPLICATE_CHILD_FOUND":
      return ManagerLinkErrorEnum_ManagerLinkError.DUPLICATE_CHILD_FOUND;
    case 9:
    case "CLIENT_HAS_NO_ADMIN_USER":
      return ManagerLinkErrorEnum_ManagerLinkError.CLIENT_HAS_NO_ADMIN_USER;
    case 10:
    case "MAX_DEPTH_EXCEEDED":
      return ManagerLinkErrorEnum_ManagerLinkError.MAX_DEPTH_EXCEEDED;
    case 11:
    case "CYCLE_NOT_ALLOWED":
      return ManagerLinkErrorEnum_ManagerLinkError.CYCLE_NOT_ALLOWED;
    case 12:
    case "TOO_MANY_ACCOUNTS":
      return ManagerLinkErrorEnum_ManagerLinkError.TOO_MANY_ACCOUNTS;
    case 13:
    case "TOO_MANY_ACCOUNTS_AT_MANAGER":
      return ManagerLinkErrorEnum_ManagerLinkError.TOO_MANY_ACCOUNTS_AT_MANAGER;
    case 14:
    case "NON_OWNER_USER_CANNOT_MODIFY_LINK":
      return ManagerLinkErrorEnum_ManagerLinkError.NON_OWNER_USER_CANNOT_MODIFY_LINK;
    case 15:
    case "SUSPENDED_ACCOUNT_CANNOT_ADD_CLIENTS":
      return ManagerLinkErrorEnum_ManagerLinkError.SUSPENDED_ACCOUNT_CANNOT_ADD_CLIENTS;
    case 16:
    case "CLIENT_OUTSIDE_TREE":
      return ManagerLinkErrorEnum_ManagerLinkError.CLIENT_OUTSIDE_TREE;
    case 17:
    case "INVALID_STATUS_CHANGE":
      return ManagerLinkErrorEnum_ManagerLinkError.INVALID_STATUS_CHANGE;
    case 18:
    case "INVALID_CHANGE":
      return ManagerLinkErrorEnum_ManagerLinkError.INVALID_CHANGE;
    case 19:
    case "CUSTOMER_CANNOT_MANAGE_SELF":
      return ManagerLinkErrorEnum_ManagerLinkError.CUSTOMER_CANNOT_MANAGE_SELF;
    case 20:
    case "CREATING_ENABLED_LINK_NOT_ALLOWED":
      return ManagerLinkErrorEnum_ManagerLinkError.CREATING_ENABLED_LINK_NOT_ALLOWED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ManagerLinkErrorEnum_ManagerLinkError.UNRECOGNIZED;
  }
}

export function managerLinkErrorEnum_ManagerLinkErrorToJSON(object: ManagerLinkErrorEnum_ManagerLinkError): string {
  switch (object) {
    case ManagerLinkErrorEnum_ManagerLinkError.UNSPECIFIED:
      return "UNSPECIFIED";
    case ManagerLinkErrorEnum_ManagerLinkError.UNKNOWN:
      return "UNKNOWN";
    case ManagerLinkErrorEnum_ManagerLinkError.ACCOUNTS_NOT_COMPATIBLE_FOR_LINKING:
      return "ACCOUNTS_NOT_COMPATIBLE_FOR_LINKING";
    case ManagerLinkErrorEnum_ManagerLinkError.TOO_MANY_MANAGERS:
      return "TOO_MANY_MANAGERS";
    case ManagerLinkErrorEnum_ManagerLinkError.TOO_MANY_INVITES:
      return "TOO_MANY_INVITES";
    case ManagerLinkErrorEnum_ManagerLinkError.ALREADY_INVITED_BY_THIS_MANAGER:
      return "ALREADY_INVITED_BY_THIS_MANAGER";
    case ManagerLinkErrorEnum_ManagerLinkError.ALREADY_MANAGED_BY_THIS_MANAGER:
      return "ALREADY_MANAGED_BY_THIS_MANAGER";
    case ManagerLinkErrorEnum_ManagerLinkError.ALREADY_MANAGED_IN_HIERARCHY:
      return "ALREADY_MANAGED_IN_HIERARCHY";
    case ManagerLinkErrorEnum_ManagerLinkError.DUPLICATE_CHILD_FOUND:
      return "DUPLICATE_CHILD_FOUND";
    case ManagerLinkErrorEnum_ManagerLinkError.CLIENT_HAS_NO_ADMIN_USER:
      return "CLIENT_HAS_NO_ADMIN_USER";
    case ManagerLinkErrorEnum_ManagerLinkError.MAX_DEPTH_EXCEEDED:
      return "MAX_DEPTH_EXCEEDED";
    case ManagerLinkErrorEnum_ManagerLinkError.CYCLE_NOT_ALLOWED:
      return "CYCLE_NOT_ALLOWED";
    case ManagerLinkErrorEnum_ManagerLinkError.TOO_MANY_ACCOUNTS:
      return "TOO_MANY_ACCOUNTS";
    case ManagerLinkErrorEnum_ManagerLinkError.TOO_MANY_ACCOUNTS_AT_MANAGER:
      return "TOO_MANY_ACCOUNTS_AT_MANAGER";
    case ManagerLinkErrorEnum_ManagerLinkError.NON_OWNER_USER_CANNOT_MODIFY_LINK:
      return "NON_OWNER_USER_CANNOT_MODIFY_LINK";
    case ManagerLinkErrorEnum_ManagerLinkError.SUSPENDED_ACCOUNT_CANNOT_ADD_CLIENTS:
      return "SUSPENDED_ACCOUNT_CANNOT_ADD_CLIENTS";
    case ManagerLinkErrorEnum_ManagerLinkError.CLIENT_OUTSIDE_TREE:
      return "CLIENT_OUTSIDE_TREE";
    case ManagerLinkErrorEnum_ManagerLinkError.INVALID_STATUS_CHANGE:
      return "INVALID_STATUS_CHANGE";
    case ManagerLinkErrorEnum_ManagerLinkError.INVALID_CHANGE:
      return "INVALID_CHANGE";
    case ManagerLinkErrorEnum_ManagerLinkError.CUSTOMER_CANNOT_MANAGE_SELF:
      return "CUSTOMER_CANNOT_MANAGE_SELF";
    case ManagerLinkErrorEnum_ManagerLinkError.CREATING_ENABLED_LINK_NOT_ALLOWED:
      return "CREATING_ENABLED_LINK_NOT_ALLOWED";
    case ManagerLinkErrorEnum_ManagerLinkError.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseManagerLinkErrorEnum(): ManagerLinkErrorEnum {
  return {};
}

export const ManagerLinkErrorEnum: MessageFns<ManagerLinkErrorEnum> = {
  encode(_: ManagerLinkErrorEnum, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ManagerLinkErrorEnum {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseManagerLinkErrorEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ManagerLinkErrorEnum {
    return {};
  },

  toJSON(_: ManagerLinkErrorEnum): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<ManagerLinkErrorEnum>): ManagerLinkErrorEnum {
    return ManagerLinkErrorEnum.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<ManagerLinkErrorEnum>): ManagerLinkErrorEnum {
    const message = createBaseManagerLinkErrorEnum();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
