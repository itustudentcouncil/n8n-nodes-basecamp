// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v17/errors/smart_campaign_error.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.googleads.v17.errors";

/** Container for enum describing possible Smart campaign errors. */
export interface SmartCampaignErrorEnum {
}

/** Enum describing possible Smart campaign errors. */
export enum SmartCampaignErrorEnum_SmartCampaignError {
  /** UNSPECIFIED - Enum unspecified. */
  UNSPECIFIED = 0,
  /** UNKNOWN - The received error code is not known in this version. */
  UNKNOWN = 1,
  /** INVALID_BUSINESS_LOCATION_ID - The business location id is invalid. */
  INVALID_BUSINESS_LOCATION_ID = 2,
  /**
   * INVALID_CAMPAIGN - The SmartCampaignSetting resource is only applicable for campaigns
   * with advertising channel type SMART.
   */
  INVALID_CAMPAIGN = 3,
  /** BUSINESS_NAME_OR_BUSINESS_LOCATION_ID_MISSING - The business name or business location id is required. */
  BUSINESS_NAME_OR_BUSINESS_LOCATION_ID_MISSING = 4,
  /** REQUIRED_SUGGESTION_FIELD_MISSING - A Smart campaign suggestion request field is required. */
  REQUIRED_SUGGESTION_FIELD_MISSING = 5,
  /** GEO_TARGETS_REQUIRED - A location list or proximity is required. */
  GEO_TARGETS_REQUIRED = 6,
  /** CANNOT_DETERMINE_SUGGESTION_LOCALE - The locale could not be determined. */
  CANNOT_DETERMINE_SUGGESTION_LOCALE = 7,
  /** FINAL_URL_NOT_CRAWLABLE - The final URL could not be crawled. */
  FINAL_URL_NOT_CRAWLABLE = 8,
  UNRECOGNIZED = -1,
}

export function smartCampaignErrorEnum_SmartCampaignErrorFromJSON(
  object: any,
): SmartCampaignErrorEnum_SmartCampaignError {
  switch (object) {
    case 0:
    case "UNSPECIFIED":
      return SmartCampaignErrorEnum_SmartCampaignError.UNSPECIFIED;
    case 1:
    case "UNKNOWN":
      return SmartCampaignErrorEnum_SmartCampaignError.UNKNOWN;
    case 2:
    case "INVALID_BUSINESS_LOCATION_ID":
      return SmartCampaignErrorEnum_SmartCampaignError.INVALID_BUSINESS_LOCATION_ID;
    case 3:
    case "INVALID_CAMPAIGN":
      return SmartCampaignErrorEnum_SmartCampaignError.INVALID_CAMPAIGN;
    case 4:
    case "BUSINESS_NAME_OR_BUSINESS_LOCATION_ID_MISSING":
      return SmartCampaignErrorEnum_SmartCampaignError.BUSINESS_NAME_OR_BUSINESS_LOCATION_ID_MISSING;
    case 5:
    case "REQUIRED_SUGGESTION_FIELD_MISSING":
      return SmartCampaignErrorEnum_SmartCampaignError.REQUIRED_SUGGESTION_FIELD_MISSING;
    case 6:
    case "GEO_TARGETS_REQUIRED":
      return SmartCampaignErrorEnum_SmartCampaignError.GEO_TARGETS_REQUIRED;
    case 7:
    case "CANNOT_DETERMINE_SUGGESTION_LOCALE":
      return SmartCampaignErrorEnum_SmartCampaignError.CANNOT_DETERMINE_SUGGESTION_LOCALE;
    case 8:
    case "FINAL_URL_NOT_CRAWLABLE":
      return SmartCampaignErrorEnum_SmartCampaignError.FINAL_URL_NOT_CRAWLABLE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SmartCampaignErrorEnum_SmartCampaignError.UNRECOGNIZED;
  }
}

export function smartCampaignErrorEnum_SmartCampaignErrorToJSON(
  object: SmartCampaignErrorEnum_SmartCampaignError,
): string {
  switch (object) {
    case SmartCampaignErrorEnum_SmartCampaignError.UNSPECIFIED:
      return "UNSPECIFIED";
    case SmartCampaignErrorEnum_SmartCampaignError.UNKNOWN:
      return "UNKNOWN";
    case SmartCampaignErrorEnum_SmartCampaignError.INVALID_BUSINESS_LOCATION_ID:
      return "INVALID_BUSINESS_LOCATION_ID";
    case SmartCampaignErrorEnum_SmartCampaignError.INVALID_CAMPAIGN:
      return "INVALID_CAMPAIGN";
    case SmartCampaignErrorEnum_SmartCampaignError.BUSINESS_NAME_OR_BUSINESS_LOCATION_ID_MISSING:
      return "BUSINESS_NAME_OR_BUSINESS_LOCATION_ID_MISSING";
    case SmartCampaignErrorEnum_SmartCampaignError.REQUIRED_SUGGESTION_FIELD_MISSING:
      return "REQUIRED_SUGGESTION_FIELD_MISSING";
    case SmartCampaignErrorEnum_SmartCampaignError.GEO_TARGETS_REQUIRED:
      return "GEO_TARGETS_REQUIRED";
    case SmartCampaignErrorEnum_SmartCampaignError.CANNOT_DETERMINE_SUGGESTION_LOCALE:
      return "CANNOT_DETERMINE_SUGGESTION_LOCALE";
    case SmartCampaignErrorEnum_SmartCampaignError.FINAL_URL_NOT_CRAWLABLE:
      return "FINAL_URL_NOT_CRAWLABLE";
    case SmartCampaignErrorEnum_SmartCampaignError.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseSmartCampaignErrorEnum(): SmartCampaignErrorEnum {
  return {};
}

export const SmartCampaignErrorEnum: MessageFns<SmartCampaignErrorEnum> = {
  encode(_: SmartCampaignErrorEnum, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SmartCampaignErrorEnum {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSmartCampaignErrorEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): SmartCampaignErrorEnum {
    return {};
  },

  toJSON(_: SmartCampaignErrorEnum): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<SmartCampaignErrorEnum>): SmartCampaignErrorEnum {
    return SmartCampaignErrorEnum.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<SmartCampaignErrorEnum>): SmartCampaignErrorEnum {
    const message = createBaseSmartCampaignErrorEnum();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
