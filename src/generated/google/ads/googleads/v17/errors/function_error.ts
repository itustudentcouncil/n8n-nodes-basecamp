// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v17/errors/function_error.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.googleads.v17.errors";

/** Container for enum describing possible function errors. */
export interface FunctionErrorEnum {
}

/** Enum describing possible function errors. */
export enum FunctionErrorEnum_FunctionError {
  /** UNSPECIFIED - Enum unspecified. */
  UNSPECIFIED = 0,
  /** UNKNOWN - The received error code is not known in this version. */
  UNKNOWN = 1,
  /**
   * INVALID_FUNCTION_FORMAT - The format of the function is not recognized as a supported function
   * format.
   */
  INVALID_FUNCTION_FORMAT = 2,
  /** DATA_TYPE_MISMATCH - Operand data types do not match. */
  DATA_TYPE_MISMATCH = 3,
  /** INVALID_CONJUNCTION_OPERANDS - The operands cannot be used together in a conjunction. */
  INVALID_CONJUNCTION_OPERANDS = 4,
  /** INVALID_NUMBER_OF_OPERANDS - Invalid numer of Operands. */
  INVALID_NUMBER_OF_OPERANDS = 5,
  /** INVALID_OPERAND_TYPE - Operand Type not supported. */
  INVALID_OPERAND_TYPE = 6,
  /** INVALID_OPERATOR - Operator not supported. */
  INVALID_OPERATOR = 7,
  /** INVALID_REQUEST_CONTEXT_TYPE - Request context type not supported. */
  INVALID_REQUEST_CONTEXT_TYPE = 8,
  /** INVALID_FUNCTION_FOR_CALL_PLACEHOLDER - The matching function is not allowed for call placeholders */
  INVALID_FUNCTION_FOR_CALL_PLACEHOLDER = 9,
  /** INVALID_FUNCTION_FOR_PLACEHOLDER - The matching function is not allowed for the specified placeholder */
  INVALID_FUNCTION_FOR_PLACEHOLDER = 10,
  /** INVALID_OPERAND - Invalid operand. */
  INVALID_OPERAND = 11,
  /** MISSING_CONSTANT_OPERAND_VALUE - Missing value for the constant operand. */
  MISSING_CONSTANT_OPERAND_VALUE = 12,
  /** INVALID_CONSTANT_OPERAND_VALUE - The value of the constant operand is invalid. */
  INVALID_CONSTANT_OPERAND_VALUE = 13,
  /** INVALID_NESTING - Invalid function nesting. */
  INVALID_NESTING = 14,
  /** MULTIPLE_FEED_IDS_NOT_SUPPORTED - The Feed ID was different from another Feed ID in the same function. */
  MULTIPLE_FEED_IDS_NOT_SUPPORTED = 15,
  /** INVALID_FUNCTION_FOR_FEED_WITH_FIXED_SCHEMA - The matching function is invalid for use with a feed with a fixed schema. */
  INVALID_FUNCTION_FOR_FEED_WITH_FIXED_SCHEMA = 16,
  /** INVALID_ATTRIBUTE_NAME - Invalid attribute name. */
  INVALID_ATTRIBUTE_NAME = 17,
  UNRECOGNIZED = -1,
}

export function functionErrorEnum_FunctionErrorFromJSON(object: any): FunctionErrorEnum_FunctionError {
  switch (object) {
    case 0:
    case "UNSPECIFIED":
      return FunctionErrorEnum_FunctionError.UNSPECIFIED;
    case 1:
    case "UNKNOWN":
      return FunctionErrorEnum_FunctionError.UNKNOWN;
    case 2:
    case "INVALID_FUNCTION_FORMAT":
      return FunctionErrorEnum_FunctionError.INVALID_FUNCTION_FORMAT;
    case 3:
    case "DATA_TYPE_MISMATCH":
      return FunctionErrorEnum_FunctionError.DATA_TYPE_MISMATCH;
    case 4:
    case "INVALID_CONJUNCTION_OPERANDS":
      return FunctionErrorEnum_FunctionError.INVALID_CONJUNCTION_OPERANDS;
    case 5:
    case "INVALID_NUMBER_OF_OPERANDS":
      return FunctionErrorEnum_FunctionError.INVALID_NUMBER_OF_OPERANDS;
    case 6:
    case "INVALID_OPERAND_TYPE":
      return FunctionErrorEnum_FunctionError.INVALID_OPERAND_TYPE;
    case 7:
    case "INVALID_OPERATOR":
      return FunctionErrorEnum_FunctionError.INVALID_OPERATOR;
    case 8:
    case "INVALID_REQUEST_CONTEXT_TYPE":
      return FunctionErrorEnum_FunctionError.INVALID_REQUEST_CONTEXT_TYPE;
    case 9:
    case "INVALID_FUNCTION_FOR_CALL_PLACEHOLDER":
      return FunctionErrorEnum_FunctionError.INVALID_FUNCTION_FOR_CALL_PLACEHOLDER;
    case 10:
    case "INVALID_FUNCTION_FOR_PLACEHOLDER":
      return FunctionErrorEnum_FunctionError.INVALID_FUNCTION_FOR_PLACEHOLDER;
    case 11:
    case "INVALID_OPERAND":
      return FunctionErrorEnum_FunctionError.INVALID_OPERAND;
    case 12:
    case "MISSING_CONSTANT_OPERAND_VALUE":
      return FunctionErrorEnum_FunctionError.MISSING_CONSTANT_OPERAND_VALUE;
    case 13:
    case "INVALID_CONSTANT_OPERAND_VALUE":
      return FunctionErrorEnum_FunctionError.INVALID_CONSTANT_OPERAND_VALUE;
    case 14:
    case "INVALID_NESTING":
      return FunctionErrorEnum_FunctionError.INVALID_NESTING;
    case 15:
    case "MULTIPLE_FEED_IDS_NOT_SUPPORTED":
      return FunctionErrorEnum_FunctionError.MULTIPLE_FEED_IDS_NOT_SUPPORTED;
    case 16:
    case "INVALID_FUNCTION_FOR_FEED_WITH_FIXED_SCHEMA":
      return FunctionErrorEnum_FunctionError.INVALID_FUNCTION_FOR_FEED_WITH_FIXED_SCHEMA;
    case 17:
    case "INVALID_ATTRIBUTE_NAME":
      return FunctionErrorEnum_FunctionError.INVALID_ATTRIBUTE_NAME;
    case -1:
    case "UNRECOGNIZED":
    default:
      return FunctionErrorEnum_FunctionError.UNRECOGNIZED;
  }
}

export function functionErrorEnum_FunctionErrorToJSON(object: FunctionErrorEnum_FunctionError): string {
  switch (object) {
    case FunctionErrorEnum_FunctionError.UNSPECIFIED:
      return "UNSPECIFIED";
    case FunctionErrorEnum_FunctionError.UNKNOWN:
      return "UNKNOWN";
    case FunctionErrorEnum_FunctionError.INVALID_FUNCTION_FORMAT:
      return "INVALID_FUNCTION_FORMAT";
    case FunctionErrorEnum_FunctionError.DATA_TYPE_MISMATCH:
      return "DATA_TYPE_MISMATCH";
    case FunctionErrorEnum_FunctionError.INVALID_CONJUNCTION_OPERANDS:
      return "INVALID_CONJUNCTION_OPERANDS";
    case FunctionErrorEnum_FunctionError.INVALID_NUMBER_OF_OPERANDS:
      return "INVALID_NUMBER_OF_OPERANDS";
    case FunctionErrorEnum_FunctionError.INVALID_OPERAND_TYPE:
      return "INVALID_OPERAND_TYPE";
    case FunctionErrorEnum_FunctionError.INVALID_OPERATOR:
      return "INVALID_OPERATOR";
    case FunctionErrorEnum_FunctionError.INVALID_REQUEST_CONTEXT_TYPE:
      return "INVALID_REQUEST_CONTEXT_TYPE";
    case FunctionErrorEnum_FunctionError.INVALID_FUNCTION_FOR_CALL_PLACEHOLDER:
      return "INVALID_FUNCTION_FOR_CALL_PLACEHOLDER";
    case FunctionErrorEnum_FunctionError.INVALID_FUNCTION_FOR_PLACEHOLDER:
      return "INVALID_FUNCTION_FOR_PLACEHOLDER";
    case FunctionErrorEnum_FunctionError.INVALID_OPERAND:
      return "INVALID_OPERAND";
    case FunctionErrorEnum_FunctionError.MISSING_CONSTANT_OPERAND_VALUE:
      return "MISSING_CONSTANT_OPERAND_VALUE";
    case FunctionErrorEnum_FunctionError.INVALID_CONSTANT_OPERAND_VALUE:
      return "INVALID_CONSTANT_OPERAND_VALUE";
    case FunctionErrorEnum_FunctionError.INVALID_NESTING:
      return "INVALID_NESTING";
    case FunctionErrorEnum_FunctionError.MULTIPLE_FEED_IDS_NOT_SUPPORTED:
      return "MULTIPLE_FEED_IDS_NOT_SUPPORTED";
    case FunctionErrorEnum_FunctionError.INVALID_FUNCTION_FOR_FEED_WITH_FIXED_SCHEMA:
      return "INVALID_FUNCTION_FOR_FEED_WITH_FIXED_SCHEMA";
    case FunctionErrorEnum_FunctionError.INVALID_ATTRIBUTE_NAME:
      return "INVALID_ATTRIBUTE_NAME";
    case FunctionErrorEnum_FunctionError.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseFunctionErrorEnum(): FunctionErrorEnum {
  return {};
}

export const FunctionErrorEnum: MessageFns<FunctionErrorEnum> = {
  encode(_: FunctionErrorEnum, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FunctionErrorEnum {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFunctionErrorEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): FunctionErrorEnum {
    return {};
  },

  toJSON(_: FunctionErrorEnum): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<FunctionErrorEnum>): FunctionErrorEnum {
    return FunctionErrorEnum.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<FunctionErrorEnum>): FunctionErrorEnum {
    const message = createBaseFunctionErrorEnum();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
