// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v17/errors/user_list_customer_type_error.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.googleads.v17.errors";

/** Container for enum describing possible user list customer type errors. */
export interface UserListCustomerTypeErrorEnum {
}

/** Enum describing possible user list customer type errors. */
export enum UserListCustomerTypeErrorEnum_UserListCustomerTypeError {
  /** UNSPECIFIED - Enum unspecified. */
  UNSPECIFIED = 0,
  /** UNKNOWN - The received error code is not known in this version. */
  UNKNOWN = 1,
  /**
   * CONFLICTING_CUSTOMER_TYPES - Cannot add the conflicting customer types to the same user list.
   * Conflicting labels:
   * 1. Purchasers - Converted Leads
   * 2. Purchasers - Qualified Leads
   * 3. Purchasers - Cart Abandoners
   * 4. Qualified Leads - Converted Leads
   * 5. Disengaged customers - Converted Leads
   * 6. Disengaged customers - Qualified Leads
   * 7. Disengaged customers- Cart Abandoners
   */
  CONFLICTING_CUSTOMER_TYPES = 2,
  /** NO_ACCESS_TO_USER_LIST - The account does not have access to the user list. */
  NO_ACCESS_TO_USER_LIST = 3,
  /**
   * USERLIST_NOT_ELIGIBLE - The given user list is not eligible for applying customer types.
   * The user list must belong to one of the following types: CRM_BASED,
   * RULE_BASED, ADVERTISER_DATA_MODEL_BASED, GCN.
   */
  USERLIST_NOT_ELIGIBLE = 4,
  /**
   * CONVERSION_TRACKING_NOT_ENABLED_OR_NOT_MCC_MANAGER_ACCOUNT - To edit the user list customer type, conversion tracking must be
   * enabled in your account. If cross-tracking is enabled, your account must
   * be a MCC manager account to modify user list customer types. More info at
   * https://support.google.com/google-ads/answer/3030657
   */
  CONVERSION_TRACKING_NOT_ENABLED_OR_NOT_MCC_MANAGER_ACCOUNT = 5,
  /** TOO_MANY_USER_LISTS_FOR_THE_CUSTOMER_TYPE - Too many user lists for the customer type. */
  TOO_MANY_USER_LISTS_FOR_THE_CUSTOMER_TYPE = 6,
  UNRECOGNIZED = -1,
}

export function userListCustomerTypeErrorEnum_UserListCustomerTypeErrorFromJSON(
  object: any,
): UserListCustomerTypeErrorEnum_UserListCustomerTypeError {
  switch (object) {
    case 0:
    case "UNSPECIFIED":
      return UserListCustomerTypeErrorEnum_UserListCustomerTypeError.UNSPECIFIED;
    case 1:
    case "UNKNOWN":
      return UserListCustomerTypeErrorEnum_UserListCustomerTypeError.UNKNOWN;
    case 2:
    case "CONFLICTING_CUSTOMER_TYPES":
      return UserListCustomerTypeErrorEnum_UserListCustomerTypeError.CONFLICTING_CUSTOMER_TYPES;
    case 3:
    case "NO_ACCESS_TO_USER_LIST":
      return UserListCustomerTypeErrorEnum_UserListCustomerTypeError.NO_ACCESS_TO_USER_LIST;
    case 4:
    case "USERLIST_NOT_ELIGIBLE":
      return UserListCustomerTypeErrorEnum_UserListCustomerTypeError.USERLIST_NOT_ELIGIBLE;
    case 5:
    case "CONVERSION_TRACKING_NOT_ENABLED_OR_NOT_MCC_MANAGER_ACCOUNT":
      return UserListCustomerTypeErrorEnum_UserListCustomerTypeError
        .CONVERSION_TRACKING_NOT_ENABLED_OR_NOT_MCC_MANAGER_ACCOUNT;
    case 6:
    case "TOO_MANY_USER_LISTS_FOR_THE_CUSTOMER_TYPE":
      return UserListCustomerTypeErrorEnum_UserListCustomerTypeError.TOO_MANY_USER_LISTS_FOR_THE_CUSTOMER_TYPE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return UserListCustomerTypeErrorEnum_UserListCustomerTypeError.UNRECOGNIZED;
  }
}

export function userListCustomerTypeErrorEnum_UserListCustomerTypeErrorToJSON(
  object: UserListCustomerTypeErrorEnum_UserListCustomerTypeError,
): string {
  switch (object) {
    case UserListCustomerTypeErrorEnum_UserListCustomerTypeError.UNSPECIFIED:
      return "UNSPECIFIED";
    case UserListCustomerTypeErrorEnum_UserListCustomerTypeError.UNKNOWN:
      return "UNKNOWN";
    case UserListCustomerTypeErrorEnum_UserListCustomerTypeError.CONFLICTING_CUSTOMER_TYPES:
      return "CONFLICTING_CUSTOMER_TYPES";
    case UserListCustomerTypeErrorEnum_UserListCustomerTypeError.NO_ACCESS_TO_USER_LIST:
      return "NO_ACCESS_TO_USER_LIST";
    case UserListCustomerTypeErrorEnum_UserListCustomerTypeError.USERLIST_NOT_ELIGIBLE:
      return "USERLIST_NOT_ELIGIBLE";
    case UserListCustomerTypeErrorEnum_UserListCustomerTypeError
      .CONVERSION_TRACKING_NOT_ENABLED_OR_NOT_MCC_MANAGER_ACCOUNT:
      return "CONVERSION_TRACKING_NOT_ENABLED_OR_NOT_MCC_MANAGER_ACCOUNT";
    case UserListCustomerTypeErrorEnum_UserListCustomerTypeError.TOO_MANY_USER_LISTS_FOR_THE_CUSTOMER_TYPE:
      return "TOO_MANY_USER_LISTS_FOR_THE_CUSTOMER_TYPE";
    case UserListCustomerTypeErrorEnum_UserListCustomerTypeError.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseUserListCustomerTypeErrorEnum(): UserListCustomerTypeErrorEnum {
  return {};
}

export const UserListCustomerTypeErrorEnum: MessageFns<UserListCustomerTypeErrorEnum> = {
  encode(_: UserListCustomerTypeErrorEnum, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserListCustomerTypeErrorEnum {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserListCustomerTypeErrorEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): UserListCustomerTypeErrorEnum {
    return {};
  },

  toJSON(_: UserListCustomerTypeErrorEnum): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<UserListCustomerTypeErrorEnum>): UserListCustomerTypeErrorEnum {
    return UserListCustomerTypeErrorEnum.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<UserListCustomerTypeErrorEnum>): UserListCustomerTypeErrorEnum {
    const message = createBaseUserListCustomerTypeErrorEnum();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
