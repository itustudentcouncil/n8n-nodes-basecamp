// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v17/errors/query_error.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.googleads.v17.errors";

/** Container for enum describing possible query errors. */
export interface QueryErrorEnum {
}

/** Enum describing possible query errors. */
export enum QueryErrorEnum_QueryError {
  /** UNSPECIFIED - Name unspecified. */
  UNSPECIFIED = 0,
  /** UNKNOWN - The received error code is not known in this version. */
  UNKNOWN = 1,
  /** QUERY_ERROR - Returned if all other query error reasons are not applicable. */
  QUERY_ERROR = 50,
  /** BAD_ENUM_CONSTANT - A condition used in the query references an invalid enum constant. */
  BAD_ENUM_CONSTANT = 18,
  /** BAD_ESCAPE_SEQUENCE - Query contains an invalid escape sequence. */
  BAD_ESCAPE_SEQUENCE = 7,
  /** BAD_FIELD_NAME - Field name is invalid. */
  BAD_FIELD_NAME = 12,
  /** BAD_LIMIT_VALUE - Limit value is invalid (for example, not a number) */
  BAD_LIMIT_VALUE = 15,
  /** BAD_NUMBER - Encountered number can not be parsed. */
  BAD_NUMBER = 5,
  /** BAD_OPERATOR - Invalid operator encountered. */
  BAD_OPERATOR = 3,
  /** BAD_PARAMETER_NAME - Parameter unknown or not supported. */
  BAD_PARAMETER_NAME = 61,
  /** BAD_PARAMETER_VALUE - Parameter have invalid value. */
  BAD_PARAMETER_VALUE = 62,
  /** BAD_RESOURCE_TYPE_IN_FROM_CLAUSE - Invalid resource type was specified in the FROM clause. */
  BAD_RESOURCE_TYPE_IN_FROM_CLAUSE = 45,
  /** BAD_SYMBOL - Non-ASCII symbol encountered outside of strings. */
  BAD_SYMBOL = 2,
  /** BAD_VALUE - Value is invalid. */
  BAD_VALUE = 4,
  /**
   * DATE_RANGE_TOO_WIDE - Date filters fail to restrict date to a range smaller than 31 days.
   * Applicable if the query is segmented by date.
   */
  DATE_RANGE_TOO_WIDE = 36,
  /**
   * DATE_RANGE_TOO_NARROW - Filters on date/week/month/quarter have a start date after
   * end date.
   */
  DATE_RANGE_TOO_NARROW = 60,
  /** EXPECTED_AND - Expected AND between values with BETWEEN operator. */
  EXPECTED_AND = 30,
  /** EXPECTED_BY - Expecting ORDER BY to have BY. */
  EXPECTED_BY = 14,
  /** EXPECTED_DIMENSION_FIELD_IN_SELECT_CLAUSE - There was no dimension field selected. */
  EXPECTED_DIMENSION_FIELD_IN_SELECT_CLAUSE = 37,
  /** EXPECTED_FILTERS_ON_DATE_RANGE - Missing filters on date related fields. */
  EXPECTED_FILTERS_ON_DATE_RANGE = 55,
  /** EXPECTED_FROM - Missing FROM clause. */
  EXPECTED_FROM = 44,
  /** EXPECTED_LIST - The operator used in the conditions requires the value to be a list. */
  EXPECTED_LIST = 41,
  /**
   * EXPECTED_REFERENCED_FIELD_IN_SELECT_CLAUSE - Fields used in WHERE or ORDER BY clauses are missing from the SELECT
   * clause.
   */
  EXPECTED_REFERENCED_FIELD_IN_SELECT_CLAUSE = 16,
  /** EXPECTED_SELECT - SELECT is missing at the beginning of query. */
  EXPECTED_SELECT = 13,
  /**
   * EXPECTED_SINGLE_VALUE - A list was passed as a value to a condition whose operator expects a
   * single value.
   */
  EXPECTED_SINGLE_VALUE = 42,
  /** EXPECTED_VALUE_WITH_BETWEEN_OPERATOR - Missing one or both values with BETWEEN operator. */
  EXPECTED_VALUE_WITH_BETWEEN_OPERATOR = 29,
  /** INVALID_DATE_FORMAT - Invalid date format. Expected 'YYYY-MM-DD'. */
  INVALID_DATE_FORMAT = 38,
  /**
   * MISALIGNED_DATE_FOR_FILTER - Misaligned date value for the filter. The date should be the start of a
   * week/month/quarter if the filtered field is
   * segments.week/segments.month/segments.quarter.
   */
  MISALIGNED_DATE_FOR_FILTER = 64,
  /**
   * INVALID_STRING_VALUE - Value passed was not a string when it should have been. For example, it
   * was a number or unquoted literal.
   */
  INVALID_STRING_VALUE = 57,
  /** INVALID_VALUE_WITH_BETWEEN_OPERATOR - A String value passed to the BETWEEN operator does not parse as a date. */
  INVALID_VALUE_WITH_BETWEEN_OPERATOR = 26,
  /** INVALID_VALUE_WITH_DURING_OPERATOR - The value passed to the DURING operator is not a Date range literal */
  INVALID_VALUE_WITH_DURING_OPERATOR = 22,
  /** INVALID_VALUE_WITH_LIKE_OPERATOR - An invalid value was passed to the LIKE operator. */
  INVALID_VALUE_WITH_LIKE_OPERATOR = 56,
  /**
   * OPERATOR_FIELD_MISMATCH - An operator was provided that is inapplicable to the field being
   * filtered.
   */
  OPERATOR_FIELD_MISMATCH = 35,
  /** PROHIBITED_EMPTY_LIST_IN_CONDITION - A Condition was found with an empty list. */
  PROHIBITED_EMPTY_LIST_IN_CONDITION = 28,
  /** PROHIBITED_ENUM_CONSTANT - A condition used in the query references an unsupported enum constant. */
  PROHIBITED_ENUM_CONSTANT = 54,
  /**
   * PROHIBITED_FIELD_COMBINATION_IN_SELECT_CLAUSE - Fields that are not allowed to be selected together were included in
   * the SELECT clause.
   */
  PROHIBITED_FIELD_COMBINATION_IN_SELECT_CLAUSE = 31,
  /** PROHIBITED_FIELD_IN_ORDER_BY_CLAUSE - A field that is not orderable was included in the ORDER BY clause. */
  PROHIBITED_FIELD_IN_ORDER_BY_CLAUSE = 40,
  /** PROHIBITED_FIELD_IN_SELECT_CLAUSE - A field that is not selectable was included in the SELECT clause. */
  PROHIBITED_FIELD_IN_SELECT_CLAUSE = 23,
  /** PROHIBITED_FIELD_IN_WHERE_CLAUSE - A field that is not filterable was included in the WHERE clause. */
  PROHIBITED_FIELD_IN_WHERE_CLAUSE = 24,
  /**
   * PROHIBITED_RESOURCE_TYPE_IN_FROM_CLAUSE - Resource type specified in the FROM clause is not supported by this
   * service.
   */
  PROHIBITED_RESOURCE_TYPE_IN_FROM_CLAUSE = 43,
  /**
   * PROHIBITED_RESOURCE_TYPE_IN_SELECT_CLAUSE - A field that comes from an incompatible resource was included in the
   * SELECT clause.
   */
  PROHIBITED_RESOURCE_TYPE_IN_SELECT_CLAUSE = 48,
  /**
   * PROHIBITED_RESOURCE_TYPE_IN_WHERE_CLAUSE - A field that comes from an incompatible resource was included in the
   * WHERE clause.
   */
  PROHIBITED_RESOURCE_TYPE_IN_WHERE_CLAUSE = 58,
  /**
   * PROHIBITED_METRIC_IN_SELECT_OR_WHERE_CLAUSE - A metric incompatible with the main resource or other selected
   * segmenting resources was included in the SELECT or WHERE clause.
   */
  PROHIBITED_METRIC_IN_SELECT_OR_WHERE_CLAUSE = 49,
  /**
   * PROHIBITED_SEGMENT_IN_SELECT_OR_WHERE_CLAUSE - A segment incompatible with the main resource or other selected
   * segmenting resources was included in the SELECT or WHERE clause.
   */
  PROHIBITED_SEGMENT_IN_SELECT_OR_WHERE_CLAUSE = 51,
  /**
   * PROHIBITED_SEGMENT_WITH_METRIC_IN_SELECT_OR_WHERE_CLAUSE - A segment in the SELECT clause is incompatible with a metric in the
   * SELECT or WHERE clause.
   */
  PROHIBITED_SEGMENT_WITH_METRIC_IN_SELECT_OR_WHERE_CLAUSE = 53,
  /** LIMIT_VALUE_TOO_LOW - The value passed to the limit clause is too low. */
  LIMIT_VALUE_TOO_LOW = 25,
  /** PROHIBITED_NEWLINE_IN_STRING - Query has a string containing a newline character. */
  PROHIBITED_NEWLINE_IN_STRING = 8,
  /** PROHIBITED_VALUE_COMBINATION_IN_LIST - List contains values of different types. */
  PROHIBITED_VALUE_COMBINATION_IN_LIST = 10,
  /** PROHIBITED_VALUE_COMBINATION_WITH_BETWEEN_OPERATOR - The values passed to the BETWEEN operator are not of the same type. */
  PROHIBITED_VALUE_COMBINATION_WITH_BETWEEN_OPERATOR = 21,
  /** STRING_NOT_TERMINATED - Query contains unterminated string. */
  STRING_NOT_TERMINATED = 6,
  /** TOO_MANY_SEGMENTS - Too many segments are specified in SELECT clause. */
  TOO_MANY_SEGMENTS = 34,
  /** UNEXPECTED_END_OF_QUERY - Query is incomplete and cannot be parsed. */
  UNEXPECTED_END_OF_QUERY = 9,
  /** UNEXPECTED_FROM_CLAUSE - FROM clause cannot be specified in this query. */
  UNEXPECTED_FROM_CLAUSE = 47,
  /** UNRECOGNIZED_FIELD - Query contains one or more unrecognized fields. */
  UNRECOGNIZED_FIELD = 32,
  /** UNEXPECTED_INPUT - Query has an unexpected extra part. */
  UNEXPECTED_INPUT = 11,
  /**
   * REQUESTED_METRICS_FOR_MANAGER - Metrics cannot be requested for a manager account. To retrieve metrics,
   * issue separate requests against each client account under the manager
   * account.
   */
  REQUESTED_METRICS_FOR_MANAGER = 59,
  /**
   * FILTER_HAS_TOO_MANY_VALUES - The number of values (right-hand-side operands) in a filter exceeds the
   * limit.
   */
  FILTER_HAS_TOO_MANY_VALUES = 63,
  UNRECOGNIZED = -1,
}

export function queryErrorEnum_QueryErrorFromJSON(object: any): QueryErrorEnum_QueryError {
  switch (object) {
    case 0:
    case "UNSPECIFIED":
      return QueryErrorEnum_QueryError.UNSPECIFIED;
    case 1:
    case "UNKNOWN":
      return QueryErrorEnum_QueryError.UNKNOWN;
    case 50:
    case "QUERY_ERROR":
      return QueryErrorEnum_QueryError.QUERY_ERROR;
    case 18:
    case "BAD_ENUM_CONSTANT":
      return QueryErrorEnum_QueryError.BAD_ENUM_CONSTANT;
    case 7:
    case "BAD_ESCAPE_SEQUENCE":
      return QueryErrorEnum_QueryError.BAD_ESCAPE_SEQUENCE;
    case 12:
    case "BAD_FIELD_NAME":
      return QueryErrorEnum_QueryError.BAD_FIELD_NAME;
    case 15:
    case "BAD_LIMIT_VALUE":
      return QueryErrorEnum_QueryError.BAD_LIMIT_VALUE;
    case 5:
    case "BAD_NUMBER":
      return QueryErrorEnum_QueryError.BAD_NUMBER;
    case 3:
    case "BAD_OPERATOR":
      return QueryErrorEnum_QueryError.BAD_OPERATOR;
    case 61:
    case "BAD_PARAMETER_NAME":
      return QueryErrorEnum_QueryError.BAD_PARAMETER_NAME;
    case 62:
    case "BAD_PARAMETER_VALUE":
      return QueryErrorEnum_QueryError.BAD_PARAMETER_VALUE;
    case 45:
    case "BAD_RESOURCE_TYPE_IN_FROM_CLAUSE":
      return QueryErrorEnum_QueryError.BAD_RESOURCE_TYPE_IN_FROM_CLAUSE;
    case 2:
    case "BAD_SYMBOL":
      return QueryErrorEnum_QueryError.BAD_SYMBOL;
    case 4:
    case "BAD_VALUE":
      return QueryErrorEnum_QueryError.BAD_VALUE;
    case 36:
    case "DATE_RANGE_TOO_WIDE":
      return QueryErrorEnum_QueryError.DATE_RANGE_TOO_WIDE;
    case 60:
    case "DATE_RANGE_TOO_NARROW":
      return QueryErrorEnum_QueryError.DATE_RANGE_TOO_NARROW;
    case 30:
    case "EXPECTED_AND":
      return QueryErrorEnum_QueryError.EXPECTED_AND;
    case 14:
    case "EXPECTED_BY":
      return QueryErrorEnum_QueryError.EXPECTED_BY;
    case 37:
    case "EXPECTED_DIMENSION_FIELD_IN_SELECT_CLAUSE":
      return QueryErrorEnum_QueryError.EXPECTED_DIMENSION_FIELD_IN_SELECT_CLAUSE;
    case 55:
    case "EXPECTED_FILTERS_ON_DATE_RANGE":
      return QueryErrorEnum_QueryError.EXPECTED_FILTERS_ON_DATE_RANGE;
    case 44:
    case "EXPECTED_FROM":
      return QueryErrorEnum_QueryError.EXPECTED_FROM;
    case 41:
    case "EXPECTED_LIST":
      return QueryErrorEnum_QueryError.EXPECTED_LIST;
    case 16:
    case "EXPECTED_REFERENCED_FIELD_IN_SELECT_CLAUSE":
      return QueryErrorEnum_QueryError.EXPECTED_REFERENCED_FIELD_IN_SELECT_CLAUSE;
    case 13:
    case "EXPECTED_SELECT":
      return QueryErrorEnum_QueryError.EXPECTED_SELECT;
    case 42:
    case "EXPECTED_SINGLE_VALUE":
      return QueryErrorEnum_QueryError.EXPECTED_SINGLE_VALUE;
    case 29:
    case "EXPECTED_VALUE_WITH_BETWEEN_OPERATOR":
      return QueryErrorEnum_QueryError.EXPECTED_VALUE_WITH_BETWEEN_OPERATOR;
    case 38:
    case "INVALID_DATE_FORMAT":
      return QueryErrorEnum_QueryError.INVALID_DATE_FORMAT;
    case 64:
    case "MISALIGNED_DATE_FOR_FILTER":
      return QueryErrorEnum_QueryError.MISALIGNED_DATE_FOR_FILTER;
    case 57:
    case "INVALID_STRING_VALUE":
      return QueryErrorEnum_QueryError.INVALID_STRING_VALUE;
    case 26:
    case "INVALID_VALUE_WITH_BETWEEN_OPERATOR":
      return QueryErrorEnum_QueryError.INVALID_VALUE_WITH_BETWEEN_OPERATOR;
    case 22:
    case "INVALID_VALUE_WITH_DURING_OPERATOR":
      return QueryErrorEnum_QueryError.INVALID_VALUE_WITH_DURING_OPERATOR;
    case 56:
    case "INVALID_VALUE_WITH_LIKE_OPERATOR":
      return QueryErrorEnum_QueryError.INVALID_VALUE_WITH_LIKE_OPERATOR;
    case 35:
    case "OPERATOR_FIELD_MISMATCH":
      return QueryErrorEnum_QueryError.OPERATOR_FIELD_MISMATCH;
    case 28:
    case "PROHIBITED_EMPTY_LIST_IN_CONDITION":
      return QueryErrorEnum_QueryError.PROHIBITED_EMPTY_LIST_IN_CONDITION;
    case 54:
    case "PROHIBITED_ENUM_CONSTANT":
      return QueryErrorEnum_QueryError.PROHIBITED_ENUM_CONSTANT;
    case 31:
    case "PROHIBITED_FIELD_COMBINATION_IN_SELECT_CLAUSE":
      return QueryErrorEnum_QueryError.PROHIBITED_FIELD_COMBINATION_IN_SELECT_CLAUSE;
    case 40:
    case "PROHIBITED_FIELD_IN_ORDER_BY_CLAUSE":
      return QueryErrorEnum_QueryError.PROHIBITED_FIELD_IN_ORDER_BY_CLAUSE;
    case 23:
    case "PROHIBITED_FIELD_IN_SELECT_CLAUSE":
      return QueryErrorEnum_QueryError.PROHIBITED_FIELD_IN_SELECT_CLAUSE;
    case 24:
    case "PROHIBITED_FIELD_IN_WHERE_CLAUSE":
      return QueryErrorEnum_QueryError.PROHIBITED_FIELD_IN_WHERE_CLAUSE;
    case 43:
    case "PROHIBITED_RESOURCE_TYPE_IN_FROM_CLAUSE":
      return QueryErrorEnum_QueryError.PROHIBITED_RESOURCE_TYPE_IN_FROM_CLAUSE;
    case 48:
    case "PROHIBITED_RESOURCE_TYPE_IN_SELECT_CLAUSE":
      return QueryErrorEnum_QueryError.PROHIBITED_RESOURCE_TYPE_IN_SELECT_CLAUSE;
    case 58:
    case "PROHIBITED_RESOURCE_TYPE_IN_WHERE_CLAUSE":
      return QueryErrorEnum_QueryError.PROHIBITED_RESOURCE_TYPE_IN_WHERE_CLAUSE;
    case 49:
    case "PROHIBITED_METRIC_IN_SELECT_OR_WHERE_CLAUSE":
      return QueryErrorEnum_QueryError.PROHIBITED_METRIC_IN_SELECT_OR_WHERE_CLAUSE;
    case 51:
    case "PROHIBITED_SEGMENT_IN_SELECT_OR_WHERE_CLAUSE":
      return QueryErrorEnum_QueryError.PROHIBITED_SEGMENT_IN_SELECT_OR_WHERE_CLAUSE;
    case 53:
    case "PROHIBITED_SEGMENT_WITH_METRIC_IN_SELECT_OR_WHERE_CLAUSE":
      return QueryErrorEnum_QueryError.PROHIBITED_SEGMENT_WITH_METRIC_IN_SELECT_OR_WHERE_CLAUSE;
    case 25:
    case "LIMIT_VALUE_TOO_LOW":
      return QueryErrorEnum_QueryError.LIMIT_VALUE_TOO_LOW;
    case 8:
    case "PROHIBITED_NEWLINE_IN_STRING":
      return QueryErrorEnum_QueryError.PROHIBITED_NEWLINE_IN_STRING;
    case 10:
    case "PROHIBITED_VALUE_COMBINATION_IN_LIST":
      return QueryErrorEnum_QueryError.PROHIBITED_VALUE_COMBINATION_IN_LIST;
    case 21:
    case "PROHIBITED_VALUE_COMBINATION_WITH_BETWEEN_OPERATOR":
      return QueryErrorEnum_QueryError.PROHIBITED_VALUE_COMBINATION_WITH_BETWEEN_OPERATOR;
    case 6:
    case "STRING_NOT_TERMINATED":
      return QueryErrorEnum_QueryError.STRING_NOT_TERMINATED;
    case 34:
    case "TOO_MANY_SEGMENTS":
      return QueryErrorEnum_QueryError.TOO_MANY_SEGMENTS;
    case 9:
    case "UNEXPECTED_END_OF_QUERY":
      return QueryErrorEnum_QueryError.UNEXPECTED_END_OF_QUERY;
    case 47:
    case "UNEXPECTED_FROM_CLAUSE":
      return QueryErrorEnum_QueryError.UNEXPECTED_FROM_CLAUSE;
    case 32:
    case "UNRECOGNIZED_FIELD":
      return QueryErrorEnum_QueryError.UNRECOGNIZED_FIELD;
    case 11:
    case "UNEXPECTED_INPUT":
      return QueryErrorEnum_QueryError.UNEXPECTED_INPUT;
    case 59:
    case "REQUESTED_METRICS_FOR_MANAGER":
      return QueryErrorEnum_QueryError.REQUESTED_METRICS_FOR_MANAGER;
    case 63:
    case "FILTER_HAS_TOO_MANY_VALUES":
      return QueryErrorEnum_QueryError.FILTER_HAS_TOO_MANY_VALUES;
    case -1:
    case "UNRECOGNIZED":
    default:
      return QueryErrorEnum_QueryError.UNRECOGNIZED;
  }
}

export function queryErrorEnum_QueryErrorToJSON(object: QueryErrorEnum_QueryError): string {
  switch (object) {
    case QueryErrorEnum_QueryError.UNSPECIFIED:
      return "UNSPECIFIED";
    case QueryErrorEnum_QueryError.UNKNOWN:
      return "UNKNOWN";
    case QueryErrorEnum_QueryError.QUERY_ERROR:
      return "QUERY_ERROR";
    case QueryErrorEnum_QueryError.BAD_ENUM_CONSTANT:
      return "BAD_ENUM_CONSTANT";
    case QueryErrorEnum_QueryError.BAD_ESCAPE_SEQUENCE:
      return "BAD_ESCAPE_SEQUENCE";
    case QueryErrorEnum_QueryError.BAD_FIELD_NAME:
      return "BAD_FIELD_NAME";
    case QueryErrorEnum_QueryError.BAD_LIMIT_VALUE:
      return "BAD_LIMIT_VALUE";
    case QueryErrorEnum_QueryError.BAD_NUMBER:
      return "BAD_NUMBER";
    case QueryErrorEnum_QueryError.BAD_OPERATOR:
      return "BAD_OPERATOR";
    case QueryErrorEnum_QueryError.BAD_PARAMETER_NAME:
      return "BAD_PARAMETER_NAME";
    case QueryErrorEnum_QueryError.BAD_PARAMETER_VALUE:
      return "BAD_PARAMETER_VALUE";
    case QueryErrorEnum_QueryError.BAD_RESOURCE_TYPE_IN_FROM_CLAUSE:
      return "BAD_RESOURCE_TYPE_IN_FROM_CLAUSE";
    case QueryErrorEnum_QueryError.BAD_SYMBOL:
      return "BAD_SYMBOL";
    case QueryErrorEnum_QueryError.BAD_VALUE:
      return "BAD_VALUE";
    case QueryErrorEnum_QueryError.DATE_RANGE_TOO_WIDE:
      return "DATE_RANGE_TOO_WIDE";
    case QueryErrorEnum_QueryError.DATE_RANGE_TOO_NARROW:
      return "DATE_RANGE_TOO_NARROW";
    case QueryErrorEnum_QueryError.EXPECTED_AND:
      return "EXPECTED_AND";
    case QueryErrorEnum_QueryError.EXPECTED_BY:
      return "EXPECTED_BY";
    case QueryErrorEnum_QueryError.EXPECTED_DIMENSION_FIELD_IN_SELECT_CLAUSE:
      return "EXPECTED_DIMENSION_FIELD_IN_SELECT_CLAUSE";
    case QueryErrorEnum_QueryError.EXPECTED_FILTERS_ON_DATE_RANGE:
      return "EXPECTED_FILTERS_ON_DATE_RANGE";
    case QueryErrorEnum_QueryError.EXPECTED_FROM:
      return "EXPECTED_FROM";
    case QueryErrorEnum_QueryError.EXPECTED_LIST:
      return "EXPECTED_LIST";
    case QueryErrorEnum_QueryError.EXPECTED_REFERENCED_FIELD_IN_SELECT_CLAUSE:
      return "EXPECTED_REFERENCED_FIELD_IN_SELECT_CLAUSE";
    case QueryErrorEnum_QueryError.EXPECTED_SELECT:
      return "EXPECTED_SELECT";
    case QueryErrorEnum_QueryError.EXPECTED_SINGLE_VALUE:
      return "EXPECTED_SINGLE_VALUE";
    case QueryErrorEnum_QueryError.EXPECTED_VALUE_WITH_BETWEEN_OPERATOR:
      return "EXPECTED_VALUE_WITH_BETWEEN_OPERATOR";
    case QueryErrorEnum_QueryError.INVALID_DATE_FORMAT:
      return "INVALID_DATE_FORMAT";
    case QueryErrorEnum_QueryError.MISALIGNED_DATE_FOR_FILTER:
      return "MISALIGNED_DATE_FOR_FILTER";
    case QueryErrorEnum_QueryError.INVALID_STRING_VALUE:
      return "INVALID_STRING_VALUE";
    case QueryErrorEnum_QueryError.INVALID_VALUE_WITH_BETWEEN_OPERATOR:
      return "INVALID_VALUE_WITH_BETWEEN_OPERATOR";
    case QueryErrorEnum_QueryError.INVALID_VALUE_WITH_DURING_OPERATOR:
      return "INVALID_VALUE_WITH_DURING_OPERATOR";
    case QueryErrorEnum_QueryError.INVALID_VALUE_WITH_LIKE_OPERATOR:
      return "INVALID_VALUE_WITH_LIKE_OPERATOR";
    case QueryErrorEnum_QueryError.OPERATOR_FIELD_MISMATCH:
      return "OPERATOR_FIELD_MISMATCH";
    case QueryErrorEnum_QueryError.PROHIBITED_EMPTY_LIST_IN_CONDITION:
      return "PROHIBITED_EMPTY_LIST_IN_CONDITION";
    case QueryErrorEnum_QueryError.PROHIBITED_ENUM_CONSTANT:
      return "PROHIBITED_ENUM_CONSTANT";
    case QueryErrorEnum_QueryError.PROHIBITED_FIELD_COMBINATION_IN_SELECT_CLAUSE:
      return "PROHIBITED_FIELD_COMBINATION_IN_SELECT_CLAUSE";
    case QueryErrorEnum_QueryError.PROHIBITED_FIELD_IN_ORDER_BY_CLAUSE:
      return "PROHIBITED_FIELD_IN_ORDER_BY_CLAUSE";
    case QueryErrorEnum_QueryError.PROHIBITED_FIELD_IN_SELECT_CLAUSE:
      return "PROHIBITED_FIELD_IN_SELECT_CLAUSE";
    case QueryErrorEnum_QueryError.PROHIBITED_FIELD_IN_WHERE_CLAUSE:
      return "PROHIBITED_FIELD_IN_WHERE_CLAUSE";
    case QueryErrorEnum_QueryError.PROHIBITED_RESOURCE_TYPE_IN_FROM_CLAUSE:
      return "PROHIBITED_RESOURCE_TYPE_IN_FROM_CLAUSE";
    case QueryErrorEnum_QueryError.PROHIBITED_RESOURCE_TYPE_IN_SELECT_CLAUSE:
      return "PROHIBITED_RESOURCE_TYPE_IN_SELECT_CLAUSE";
    case QueryErrorEnum_QueryError.PROHIBITED_RESOURCE_TYPE_IN_WHERE_CLAUSE:
      return "PROHIBITED_RESOURCE_TYPE_IN_WHERE_CLAUSE";
    case QueryErrorEnum_QueryError.PROHIBITED_METRIC_IN_SELECT_OR_WHERE_CLAUSE:
      return "PROHIBITED_METRIC_IN_SELECT_OR_WHERE_CLAUSE";
    case QueryErrorEnum_QueryError.PROHIBITED_SEGMENT_IN_SELECT_OR_WHERE_CLAUSE:
      return "PROHIBITED_SEGMENT_IN_SELECT_OR_WHERE_CLAUSE";
    case QueryErrorEnum_QueryError.PROHIBITED_SEGMENT_WITH_METRIC_IN_SELECT_OR_WHERE_CLAUSE:
      return "PROHIBITED_SEGMENT_WITH_METRIC_IN_SELECT_OR_WHERE_CLAUSE";
    case QueryErrorEnum_QueryError.LIMIT_VALUE_TOO_LOW:
      return "LIMIT_VALUE_TOO_LOW";
    case QueryErrorEnum_QueryError.PROHIBITED_NEWLINE_IN_STRING:
      return "PROHIBITED_NEWLINE_IN_STRING";
    case QueryErrorEnum_QueryError.PROHIBITED_VALUE_COMBINATION_IN_LIST:
      return "PROHIBITED_VALUE_COMBINATION_IN_LIST";
    case QueryErrorEnum_QueryError.PROHIBITED_VALUE_COMBINATION_WITH_BETWEEN_OPERATOR:
      return "PROHIBITED_VALUE_COMBINATION_WITH_BETWEEN_OPERATOR";
    case QueryErrorEnum_QueryError.STRING_NOT_TERMINATED:
      return "STRING_NOT_TERMINATED";
    case QueryErrorEnum_QueryError.TOO_MANY_SEGMENTS:
      return "TOO_MANY_SEGMENTS";
    case QueryErrorEnum_QueryError.UNEXPECTED_END_OF_QUERY:
      return "UNEXPECTED_END_OF_QUERY";
    case QueryErrorEnum_QueryError.UNEXPECTED_FROM_CLAUSE:
      return "UNEXPECTED_FROM_CLAUSE";
    case QueryErrorEnum_QueryError.UNRECOGNIZED_FIELD:
      return "UNRECOGNIZED_FIELD";
    case QueryErrorEnum_QueryError.UNEXPECTED_INPUT:
      return "UNEXPECTED_INPUT";
    case QueryErrorEnum_QueryError.REQUESTED_METRICS_FOR_MANAGER:
      return "REQUESTED_METRICS_FOR_MANAGER";
    case QueryErrorEnum_QueryError.FILTER_HAS_TOO_MANY_VALUES:
      return "FILTER_HAS_TOO_MANY_VALUES";
    case QueryErrorEnum_QueryError.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseQueryErrorEnum(): QueryErrorEnum {
  return {};
}

export const QueryErrorEnum: MessageFns<QueryErrorEnum> = {
  encode(_: QueryErrorEnum, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryErrorEnum {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryErrorEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryErrorEnum {
    return {};
  },

  toJSON(_: QueryErrorEnum): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<QueryErrorEnum>): QueryErrorEnum {
    return QueryErrorEnum.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<QueryErrorEnum>): QueryErrorEnum {
    const message = createBaseQueryErrorEnum();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
