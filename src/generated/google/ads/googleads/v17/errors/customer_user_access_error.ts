// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v17/errors/customer_user_access_error.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.googleads.v17.errors";

/** Container for enum describing possible CustomerUserAccess errors. */
export interface CustomerUserAccessErrorEnum {
}

/** Enum describing possible customer user access errors. */
export enum CustomerUserAccessErrorEnum_CustomerUserAccessError {
  /** UNSPECIFIED - Enum unspecified. */
  UNSPECIFIED = 0,
  /** UNKNOWN - The received error code is not known in this version. */
  UNKNOWN = 1,
  /** INVALID_USER_ID - There is no user associated with the user id specified. */
  INVALID_USER_ID = 2,
  /** REMOVAL_DISALLOWED - Unable to remove the access between the user and customer. */
  REMOVAL_DISALLOWED = 3,
  /** DISALLOWED_ACCESS_ROLE - Unable to add or update the access role as specified. */
  DISALLOWED_ACCESS_ROLE = 4,
  /**
   * LAST_ADMIN_USER_OF_SERVING_CUSTOMER - The user can't remove itself from an active serving customer if it's the
   * last admin user and the customer doesn't have any owner manager
   */
  LAST_ADMIN_USER_OF_SERVING_CUSTOMER = 5,
  /** LAST_ADMIN_USER_OF_MANAGER - Last admin user cannot be removed from a manager. */
  LAST_ADMIN_USER_OF_MANAGER = 6,
  UNRECOGNIZED = -1,
}

export function customerUserAccessErrorEnum_CustomerUserAccessErrorFromJSON(
  object: any,
): CustomerUserAccessErrorEnum_CustomerUserAccessError {
  switch (object) {
    case 0:
    case "UNSPECIFIED":
      return CustomerUserAccessErrorEnum_CustomerUserAccessError.UNSPECIFIED;
    case 1:
    case "UNKNOWN":
      return CustomerUserAccessErrorEnum_CustomerUserAccessError.UNKNOWN;
    case 2:
    case "INVALID_USER_ID":
      return CustomerUserAccessErrorEnum_CustomerUserAccessError.INVALID_USER_ID;
    case 3:
    case "REMOVAL_DISALLOWED":
      return CustomerUserAccessErrorEnum_CustomerUserAccessError.REMOVAL_DISALLOWED;
    case 4:
    case "DISALLOWED_ACCESS_ROLE":
      return CustomerUserAccessErrorEnum_CustomerUserAccessError.DISALLOWED_ACCESS_ROLE;
    case 5:
    case "LAST_ADMIN_USER_OF_SERVING_CUSTOMER":
      return CustomerUserAccessErrorEnum_CustomerUserAccessError.LAST_ADMIN_USER_OF_SERVING_CUSTOMER;
    case 6:
    case "LAST_ADMIN_USER_OF_MANAGER":
      return CustomerUserAccessErrorEnum_CustomerUserAccessError.LAST_ADMIN_USER_OF_MANAGER;
    case -1:
    case "UNRECOGNIZED":
    default:
      return CustomerUserAccessErrorEnum_CustomerUserAccessError.UNRECOGNIZED;
  }
}

export function customerUserAccessErrorEnum_CustomerUserAccessErrorToJSON(
  object: CustomerUserAccessErrorEnum_CustomerUserAccessError,
): string {
  switch (object) {
    case CustomerUserAccessErrorEnum_CustomerUserAccessError.UNSPECIFIED:
      return "UNSPECIFIED";
    case CustomerUserAccessErrorEnum_CustomerUserAccessError.UNKNOWN:
      return "UNKNOWN";
    case CustomerUserAccessErrorEnum_CustomerUserAccessError.INVALID_USER_ID:
      return "INVALID_USER_ID";
    case CustomerUserAccessErrorEnum_CustomerUserAccessError.REMOVAL_DISALLOWED:
      return "REMOVAL_DISALLOWED";
    case CustomerUserAccessErrorEnum_CustomerUserAccessError.DISALLOWED_ACCESS_ROLE:
      return "DISALLOWED_ACCESS_ROLE";
    case CustomerUserAccessErrorEnum_CustomerUserAccessError.LAST_ADMIN_USER_OF_SERVING_CUSTOMER:
      return "LAST_ADMIN_USER_OF_SERVING_CUSTOMER";
    case CustomerUserAccessErrorEnum_CustomerUserAccessError.LAST_ADMIN_USER_OF_MANAGER:
      return "LAST_ADMIN_USER_OF_MANAGER";
    case CustomerUserAccessErrorEnum_CustomerUserAccessError.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseCustomerUserAccessErrorEnum(): CustomerUserAccessErrorEnum {
  return {};
}

export const CustomerUserAccessErrorEnum: MessageFns<CustomerUserAccessErrorEnum> = {
  encode(_: CustomerUserAccessErrorEnum, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CustomerUserAccessErrorEnum {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCustomerUserAccessErrorEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): CustomerUserAccessErrorEnum {
    return {};
  },

  toJSON(_: CustomerUserAccessErrorEnum): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<CustomerUserAccessErrorEnum>): CustomerUserAccessErrorEnum {
    return CustomerUserAccessErrorEnum.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<CustomerUserAccessErrorEnum>): CustomerUserAccessErrorEnum {
    const message = createBaseCustomerUserAccessErrorEnum();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
