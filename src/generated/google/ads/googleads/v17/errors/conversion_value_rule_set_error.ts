// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v17/errors/conversion_value_rule_set_error.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.googleads.v17.errors";

/** Container for enum describing possible conversion value rule set errors. */
export interface ConversionValueRuleSetErrorEnum {
}

/** Enum describing possible conversion value rule set errors. */
export enum ConversionValueRuleSetErrorEnum_ConversionValueRuleSetError {
  /** UNSPECIFIED - Enum unspecified. */
  UNSPECIFIED = 0,
  /** UNKNOWN - The received error code is not known in this version. */
  UNKNOWN = 1,
  /** CONFLICTING_VALUE_RULE_CONDITIONS - Two value rules in this value rule set contain conflicting conditions. */
  CONFLICTING_VALUE_RULE_CONDITIONS = 2,
  /**
   * INVALID_VALUE_RULE - This value rule set includes a value rule that cannot be found, has been
   * permanently removed or belongs to a different customer.
   */
  INVALID_VALUE_RULE = 3,
  /**
   * DIMENSIONS_UPDATE_ONLY_ALLOW_APPEND - An error that's thrown when a mutate operation is trying to
   * replace/remove some existing elements in the dimensions field. In other
   * words, ADD op is always fine and UPDATE op is fine if it's only appending
   * new elements into dimensions list.
   */
  DIMENSIONS_UPDATE_ONLY_ALLOW_APPEND = 4,
  /**
   * CONDITION_TYPE_NOT_ALLOWED - An error that's thrown when a mutate is adding new value rule(s) into a
   * value rule set and the added value rule(s) include conditions that are
   * not specified in the dimensions of the value rule set.
   */
  CONDITION_TYPE_NOT_ALLOWED = 5,
  /** DUPLICATE_DIMENSIONS - The dimensions field contains duplicate elements. */
  DUPLICATE_DIMENSIONS = 6,
  /**
   * INVALID_CAMPAIGN_ID - This value rule set is attached to an invalid campaign id. Either a
   * campaign with this campaign id doesn't exist or it belongs to a different
   * customer.
   */
  INVALID_CAMPAIGN_ID = 7,
  /**
   * CANNOT_PAUSE_UNLESS_ALL_VALUE_RULES_ARE_PAUSED - When a mutate request tries to pause a value rule set, the enabled
   * value rules in this set must be paused in the same command, or this error
   * will be thrown.
   */
  CANNOT_PAUSE_UNLESS_ALL_VALUE_RULES_ARE_PAUSED = 8,
  /**
   * SHOULD_PAUSE_WHEN_ALL_VALUE_RULES_ARE_PAUSED - When a mutate request tries to pause all the value rules in a value rule
   * set, the value rule set must be paused, or this error will be thrown.
   */
  SHOULD_PAUSE_WHEN_ALL_VALUE_RULES_ARE_PAUSED = 9,
  /**
   * VALUE_RULES_NOT_SUPPORTED_FOR_CAMPAIGN_TYPE - This value rule set is attached to a campaign that does not support value
   * rules. Currently, campaign level value rule sets can only be created on
   * Search, or Display campaigns.
   */
  VALUE_RULES_NOT_SUPPORTED_FOR_CAMPAIGN_TYPE = 10,
  /**
   * INELIGIBLE_CONVERSION_ACTION_CATEGORIES - To add a value rule set that applies on Store Visits/Store Sales
   * conversion action categories, the customer must have valid Store Visits/
   * Store Sales conversion actions.
   */
  INELIGIBLE_CONVERSION_ACTION_CATEGORIES = 11,
  /**
   * DIMENSION_NO_CONDITION_USED_WITH_OTHER_DIMENSIONS - If NO_CONDITION is used as a dimension of a value rule set, it must be
   * the only dimension.
   */
  DIMENSION_NO_CONDITION_USED_WITH_OTHER_DIMENSIONS = 12,
  /**
   * DIMENSION_NO_CONDITION_NOT_ALLOWED - Dimension NO_CONDITION can only be used by Store Visits/Store Sales value
   * rule set.
   */
  DIMENSION_NO_CONDITION_NOT_ALLOWED = 13,
  /**
   * UNSUPPORTED_CONVERSION_ACTION_CATEGORIES - Value rule sets defined on the specified conversion action categories are
   * not supported. The list of conversion action categories must be an empty
   * list, only STORE_VISIT, or only STORE_SALE.
   */
  UNSUPPORTED_CONVERSION_ACTION_CATEGORIES = 14,
  UNRECOGNIZED = -1,
}

export function conversionValueRuleSetErrorEnum_ConversionValueRuleSetErrorFromJSON(
  object: any,
): ConversionValueRuleSetErrorEnum_ConversionValueRuleSetError {
  switch (object) {
    case 0:
    case "UNSPECIFIED":
      return ConversionValueRuleSetErrorEnum_ConversionValueRuleSetError.UNSPECIFIED;
    case 1:
    case "UNKNOWN":
      return ConversionValueRuleSetErrorEnum_ConversionValueRuleSetError.UNKNOWN;
    case 2:
    case "CONFLICTING_VALUE_RULE_CONDITIONS":
      return ConversionValueRuleSetErrorEnum_ConversionValueRuleSetError.CONFLICTING_VALUE_RULE_CONDITIONS;
    case 3:
    case "INVALID_VALUE_RULE":
      return ConversionValueRuleSetErrorEnum_ConversionValueRuleSetError.INVALID_VALUE_RULE;
    case 4:
    case "DIMENSIONS_UPDATE_ONLY_ALLOW_APPEND":
      return ConversionValueRuleSetErrorEnum_ConversionValueRuleSetError.DIMENSIONS_UPDATE_ONLY_ALLOW_APPEND;
    case 5:
    case "CONDITION_TYPE_NOT_ALLOWED":
      return ConversionValueRuleSetErrorEnum_ConversionValueRuleSetError.CONDITION_TYPE_NOT_ALLOWED;
    case 6:
    case "DUPLICATE_DIMENSIONS":
      return ConversionValueRuleSetErrorEnum_ConversionValueRuleSetError.DUPLICATE_DIMENSIONS;
    case 7:
    case "INVALID_CAMPAIGN_ID":
      return ConversionValueRuleSetErrorEnum_ConversionValueRuleSetError.INVALID_CAMPAIGN_ID;
    case 8:
    case "CANNOT_PAUSE_UNLESS_ALL_VALUE_RULES_ARE_PAUSED":
      return ConversionValueRuleSetErrorEnum_ConversionValueRuleSetError.CANNOT_PAUSE_UNLESS_ALL_VALUE_RULES_ARE_PAUSED;
    case 9:
    case "SHOULD_PAUSE_WHEN_ALL_VALUE_RULES_ARE_PAUSED":
      return ConversionValueRuleSetErrorEnum_ConversionValueRuleSetError.SHOULD_PAUSE_WHEN_ALL_VALUE_RULES_ARE_PAUSED;
    case 10:
    case "VALUE_RULES_NOT_SUPPORTED_FOR_CAMPAIGN_TYPE":
      return ConversionValueRuleSetErrorEnum_ConversionValueRuleSetError.VALUE_RULES_NOT_SUPPORTED_FOR_CAMPAIGN_TYPE;
    case 11:
    case "INELIGIBLE_CONVERSION_ACTION_CATEGORIES":
      return ConversionValueRuleSetErrorEnum_ConversionValueRuleSetError.INELIGIBLE_CONVERSION_ACTION_CATEGORIES;
    case 12:
    case "DIMENSION_NO_CONDITION_USED_WITH_OTHER_DIMENSIONS":
      return ConversionValueRuleSetErrorEnum_ConversionValueRuleSetError
        .DIMENSION_NO_CONDITION_USED_WITH_OTHER_DIMENSIONS;
    case 13:
    case "DIMENSION_NO_CONDITION_NOT_ALLOWED":
      return ConversionValueRuleSetErrorEnum_ConversionValueRuleSetError.DIMENSION_NO_CONDITION_NOT_ALLOWED;
    case 14:
    case "UNSUPPORTED_CONVERSION_ACTION_CATEGORIES":
      return ConversionValueRuleSetErrorEnum_ConversionValueRuleSetError.UNSUPPORTED_CONVERSION_ACTION_CATEGORIES;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ConversionValueRuleSetErrorEnum_ConversionValueRuleSetError.UNRECOGNIZED;
  }
}

export function conversionValueRuleSetErrorEnum_ConversionValueRuleSetErrorToJSON(
  object: ConversionValueRuleSetErrorEnum_ConversionValueRuleSetError,
): string {
  switch (object) {
    case ConversionValueRuleSetErrorEnum_ConversionValueRuleSetError.UNSPECIFIED:
      return "UNSPECIFIED";
    case ConversionValueRuleSetErrorEnum_ConversionValueRuleSetError.UNKNOWN:
      return "UNKNOWN";
    case ConversionValueRuleSetErrorEnum_ConversionValueRuleSetError.CONFLICTING_VALUE_RULE_CONDITIONS:
      return "CONFLICTING_VALUE_RULE_CONDITIONS";
    case ConversionValueRuleSetErrorEnum_ConversionValueRuleSetError.INVALID_VALUE_RULE:
      return "INVALID_VALUE_RULE";
    case ConversionValueRuleSetErrorEnum_ConversionValueRuleSetError.DIMENSIONS_UPDATE_ONLY_ALLOW_APPEND:
      return "DIMENSIONS_UPDATE_ONLY_ALLOW_APPEND";
    case ConversionValueRuleSetErrorEnum_ConversionValueRuleSetError.CONDITION_TYPE_NOT_ALLOWED:
      return "CONDITION_TYPE_NOT_ALLOWED";
    case ConversionValueRuleSetErrorEnum_ConversionValueRuleSetError.DUPLICATE_DIMENSIONS:
      return "DUPLICATE_DIMENSIONS";
    case ConversionValueRuleSetErrorEnum_ConversionValueRuleSetError.INVALID_CAMPAIGN_ID:
      return "INVALID_CAMPAIGN_ID";
    case ConversionValueRuleSetErrorEnum_ConversionValueRuleSetError.CANNOT_PAUSE_UNLESS_ALL_VALUE_RULES_ARE_PAUSED:
      return "CANNOT_PAUSE_UNLESS_ALL_VALUE_RULES_ARE_PAUSED";
    case ConversionValueRuleSetErrorEnum_ConversionValueRuleSetError.SHOULD_PAUSE_WHEN_ALL_VALUE_RULES_ARE_PAUSED:
      return "SHOULD_PAUSE_WHEN_ALL_VALUE_RULES_ARE_PAUSED";
    case ConversionValueRuleSetErrorEnum_ConversionValueRuleSetError.VALUE_RULES_NOT_SUPPORTED_FOR_CAMPAIGN_TYPE:
      return "VALUE_RULES_NOT_SUPPORTED_FOR_CAMPAIGN_TYPE";
    case ConversionValueRuleSetErrorEnum_ConversionValueRuleSetError.INELIGIBLE_CONVERSION_ACTION_CATEGORIES:
      return "INELIGIBLE_CONVERSION_ACTION_CATEGORIES";
    case ConversionValueRuleSetErrorEnum_ConversionValueRuleSetError.DIMENSION_NO_CONDITION_USED_WITH_OTHER_DIMENSIONS:
      return "DIMENSION_NO_CONDITION_USED_WITH_OTHER_DIMENSIONS";
    case ConversionValueRuleSetErrorEnum_ConversionValueRuleSetError.DIMENSION_NO_CONDITION_NOT_ALLOWED:
      return "DIMENSION_NO_CONDITION_NOT_ALLOWED";
    case ConversionValueRuleSetErrorEnum_ConversionValueRuleSetError.UNSUPPORTED_CONVERSION_ACTION_CATEGORIES:
      return "UNSUPPORTED_CONVERSION_ACTION_CATEGORIES";
    case ConversionValueRuleSetErrorEnum_ConversionValueRuleSetError.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseConversionValueRuleSetErrorEnum(): ConversionValueRuleSetErrorEnum {
  return {};
}

export const ConversionValueRuleSetErrorEnum: MessageFns<ConversionValueRuleSetErrorEnum> = {
  encode(_: ConversionValueRuleSetErrorEnum, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConversionValueRuleSetErrorEnum {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConversionValueRuleSetErrorEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ConversionValueRuleSetErrorEnum {
    return {};
  },

  toJSON(_: ConversionValueRuleSetErrorEnum): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<ConversionValueRuleSetErrorEnum>): ConversionValueRuleSetErrorEnum {
    return ConversionValueRuleSetErrorEnum.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<ConversionValueRuleSetErrorEnum>): ConversionValueRuleSetErrorEnum {
    const message = createBaseConversionValueRuleSetErrorEnum();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
