// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v17/resources/keyword_plan_ad_group.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.googleads.v17.resources";

/**
 * A Keyword Planner ad group.
 * Max number of keyword plan ad groups per plan: 200.
 */
export interface KeywordPlanAdGroup {
  /**
   * Immutable. The resource name of the Keyword Planner ad group.
   * KeywordPlanAdGroup resource names have the form:
   *
   * `customers/{customer_id}/keywordPlanAdGroups/{kp_ad_group_id}`
   */
  resourceName: string;
  /** The keyword plan campaign to which this ad group belongs. */
  keywordPlanCampaign?:
    | string
    | undefined;
  /** Output only. The ID of the keyword plan ad group. */
  id?:
    | Long
    | undefined;
  /**
   * The name of the keyword plan ad group.
   *
   * This field is required and should not be empty when creating keyword plan
   * ad group.
   */
  name?:
    | string
    | undefined;
  /**
   * A default ad group max cpc bid in micros in account currency for all
   * biddable keywords under the keyword plan ad group.
   * If not set, will inherit from parent campaign.
   */
  cpcBidMicros?: Long | undefined;
}

function createBaseKeywordPlanAdGroup(): KeywordPlanAdGroup {
  return { resourceName: "", keywordPlanCampaign: undefined, id: undefined, name: undefined, cpcBidMicros: undefined };
}

export const KeywordPlanAdGroup: MessageFns<KeywordPlanAdGroup> = {
  encode(message: KeywordPlanAdGroup, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(10).string(message.resourceName);
    }
    if (message.keywordPlanCampaign !== undefined) {
      writer.uint32(50).string(message.keywordPlanCampaign);
    }
    if (message.id !== undefined) {
      writer.uint32(56).int64(message.id.toString());
    }
    if (message.name !== undefined) {
      writer.uint32(66).string(message.name);
    }
    if (message.cpcBidMicros !== undefined) {
      writer.uint32(72).int64(message.cpcBidMicros.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): KeywordPlanAdGroup {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseKeywordPlanAdGroup();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceName = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.keywordPlanCampaign = reader.string();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.id = Long.fromString(reader.int64().toString());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.name = reader.string();
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.cpcBidMicros = Long.fromString(reader.int64().toString());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): KeywordPlanAdGroup {
    return {
      resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "",
      keywordPlanCampaign: isSet(object.keywordPlanCampaign)
        ? globalThis.String(object.keywordPlanCampaign)
        : undefined,
      id: isSet(object.id) ? Long.fromValue(object.id) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      cpcBidMicros: isSet(object.cpcBidMicros) ? Long.fromValue(object.cpcBidMicros) : undefined,
    };
  },

  toJSON(message: KeywordPlanAdGroup): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    if (message.keywordPlanCampaign !== undefined) {
      obj.keywordPlanCampaign = message.keywordPlanCampaign;
    }
    if (message.id !== undefined) {
      obj.id = (message.id || Long.ZERO).toString();
    }
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.cpcBidMicros !== undefined) {
      obj.cpcBidMicros = (message.cpcBidMicros || Long.ZERO).toString();
    }
    return obj;
  },

  create(base?: DeepPartial<KeywordPlanAdGroup>): KeywordPlanAdGroup {
    return KeywordPlanAdGroup.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<KeywordPlanAdGroup>): KeywordPlanAdGroup {
    const message = createBaseKeywordPlanAdGroup();
    message.resourceName = object.resourceName ?? "";
    message.keywordPlanCampaign = object.keywordPlanCampaign ?? undefined;
    message.id = (object.id !== undefined && object.id !== null) ? Long.fromValue(object.id) : undefined;
    message.name = object.name ?? undefined;
    message.cpcBidMicros = (object.cpcBidMicros !== undefined && object.cpcBidMicros !== null)
      ? Long.fromValue(object.cpcBidMicros)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
