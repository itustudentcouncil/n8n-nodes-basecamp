// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v17/resources/qualifying_question.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.googleads.v17.resources";

/** Qualifying Questions for Lead Form. */
export interface QualifyingQuestion {
  /**
   * Output only. The resource name of the qualifying question.
   *
   * 'qualifyingQuestions/{qualifyingQuestionId}'
   */
  resourceName: string;
  /** Output only. The id of the qualifying question. */
  qualifyingQuestionId: Long;
  /** Output only. The locale of the qualifying question. */
  locale: string;
  /** Output only. The qualifying question. */
  text: string;
}

function createBaseQualifyingQuestion(): QualifyingQuestion {
  return { resourceName: "", qualifyingQuestionId: Long.ZERO, locale: "", text: "" };
}

export const QualifyingQuestion: MessageFns<QualifyingQuestion> = {
  encode(message: QualifyingQuestion, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(10).string(message.resourceName);
    }
    if (!message.qualifyingQuestionId.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.qualifyingQuestionId.toString());
    }
    if (message.locale !== "") {
      writer.uint32(26).string(message.locale);
    }
    if (message.text !== "") {
      writer.uint32(34).string(message.text);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QualifyingQuestion {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQualifyingQuestion();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceName = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.qualifyingQuestionId = Long.fromString(reader.int64().toString());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.locale = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.text = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QualifyingQuestion {
    return {
      resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "",
      qualifyingQuestionId: isSet(object.qualifyingQuestionId)
        ? Long.fromValue(object.qualifyingQuestionId)
        : Long.ZERO,
      locale: isSet(object.locale) ? globalThis.String(object.locale) : "",
      text: isSet(object.text) ? globalThis.String(object.text) : "",
    };
  },

  toJSON(message: QualifyingQuestion): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    if (!message.qualifyingQuestionId.equals(Long.ZERO)) {
      obj.qualifyingQuestionId = (message.qualifyingQuestionId || Long.ZERO).toString();
    }
    if (message.locale !== "") {
      obj.locale = message.locale;
    }
    if (message.text !== "") {
      obj.text = message.text;
    }
    return obj;
  },

  create(base?: DeepPartial<QualifyingQuestion>): QualifyingQuestion {
    return QualifyingQuestion.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QualifyingQuestion>): QualifyingQuestion {
    const message = createBaseQualifyingQuestion();
    message.resourceName = object.resourceName ?? "";
    message.qualifyingQuestionId = (object.qualifyingQuestionId !== undefined && object.qualifyingQuestionId !== null)
      ? Long.fromValue(object.qualifyingQuestionId)
      : Long.ZERO;
    message.locale = object.locale ?? "";
    message.text = object.text ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
