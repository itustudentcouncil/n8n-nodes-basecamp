// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v17/resources/bidding_data_exclusion.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import {
  AdvertisingChannelTypeEnum_AdvertisingChannelType,
  advertisingChannelTypeEnum_AdvertisingChannelTypeFromJSON,
  advertisingChannelTypeEnum_AdvertisingChannelTypeToJSON,
} from "../enums/advertising_channel_type.js";
import { DeviceEnum_Device, deviceEnum_DeviceFromJSON, deviceEnum_DeviceToJSON } from "../enums/device.js";
import {
  SeasonalityEventScopeEnum_SeasonalityEventScope,
  seasonalityEventScopeEnum_SeasonalityEventScopeFromJSON,
  seasonalityEventScopeEnum_SeasonalityEventScopeToJSON,
} from "../enums/seasonality_event_scope.js";
import {
  SeasonalityEventStatusEnum_SeasonalityEventStatus,
  seasonalityEventStatusEnum_SeasonalityEventStatusFromJSON,
  seasonalityEventStatusEnum_SeasonalityEventStatusToJSON,
} from "../enums/seasonality_event_status.js";

export const protobufPackage = "google.ads.googleads.v17.resources";

/**
 * Represents a bidding data exclusion.
 *
 * See "About data exclusions" at
 * https://support.google.com/google-ads/answer/10370710.
 */
export interface BiddingDataExclusion {
  /**
   * Immutable. The resource name of the data exclusion.
   * Data exclusion resource names have the form:
   *
   * `customers/{customer_id}/biddingDataExclusions/{data_exclusion_id}`
   */
  resourceName: string;
  /** Output only. The ID of the data exclusion. */
  dataExclusionId: Long;
  /** The scope of the data exclusion. */
  scope: SeasonalityEventScopeEnum_SeasonalityEventScope;
  /** Output only. The status of the data exclusion. */
  status: SeasonalityEventStatusEnum_SeasonalityEventStatus;
  /**
   * Required. The inclusive start time of the data exclusion in yyyy-MM-dd
   * HH:mm:ss format.
   *
   * A data exclusion is backward looking and should be used for events that
   * start in the past and end either in the past or future.
   */
  startDateTime: string;
  /**
   * Required. The exclusive end time of the data exclusion in yyyy-MM-dd
   * HH:mm:ss format.
   *
   * The length of [start_date_time, end_date_time) interval must be
   * within (0, 14 days].
   */
  endDateTime: string;
  /**
   * The name of the data exclusion. The name can be at most 255
   * characters.
   */
  name: string;
  /**
   * The description of the data exclusion. The description can be at
   * most 2048 characters.
   */
  description: string;
  /**
   * If not specified, all devices will be included in this exclusion.
   * Otherwise, only the specified targeted devices will be included in this
   * exclusion.
   */
  devices: DeviceEnum_Device[];
  /**
   * The data exclusion will apply to the campaigns listed when the scope of
   * this exclusion is CAMPAIGN. The maximum number of campaigns per event is
   * 2000.
   * Note: a data exclusion with both advertising_channel_types and
   * campaign_ids is not supported.
   */
  campaigns: string[];
  /**
   * The data_exclusion will apply to all the campaigns under the listed
   * channels retroactively as well as going forward when the scope of this
   * exclusion is CHANNEL.
   * The supported advertising channel types are DISPLAY, SEARCH and SHOPPING.
   * Note: a data exclusion with both advertising_channel_types and
   * campaign_ids is not supported.
   */
  advertisingChannelTypes: AdvertisingChannelTypeEnum_AdvertisingChannelType[];
}

function createBaseBiddingDataExclusion(): BiddingDataExclusion {
  return {
    resourceName: "",
    dataExclusionId: Long.ZERO,
    scope: 0,
    status: 0,
    startDateTime: "",
    endDateTime: "",
    name: "",
    description: "",
    devices: [],
    campaigns: [],
    advertisingChannelTypes: [],
  };
}

export const BiddingDataExclusion: MessageFns<BiddingDataExclusion> = {
  encode(message: BiddingDataExclusion, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(10).string(message.resourceName);
    }
    if (!message.dataExclusionId.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.dataExclusionId.toString());
    }
    if (message.scope !== 0) {
      writer.uint32(24).int32(message.scope);
    }
    if (message.status !== 0) {
      writer.uint32(32).int32(message.status);
    }
    if (message.startDateTime !== "") {
      writer.uint32(42).string(message.startDateTime);
    }
    if (message.endDateTime !== "") {
      writer.uint32(50).string(message.endDateTime);
    }
    if (message.name !== "") {
      writer.uint32(58).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(66).string(message.description);
    }
    writer.uint32(74).fork();
    for (const v of message.devices) {
      writer.int32(v);
    }
    writer.join();
    for (const v of message.campaigns) {
      writer.uint32(82).string(v!);
    }
    writer.uint32(90).fork();
    for (const v of message.advertisingChannelTypes) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BiddingDataExclusion {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBiddingDataExclusion();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceName = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.dataExclusionId = Long.fromString(reader.int64().toString());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.scope = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.startDateTime = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.endDateTime = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.name = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.description = reader.string();
          continue;
        case 9:
          if (tag === 72) {
            message.devices.push(reader.int32() as any);

            continue;
          }

          if (tag === 74) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.devices.push(reader.int32() as any);
            }

            continue;
          }

          break;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.campaigns.push(reader.string());
          continue;
        case 11:
          if (tag === 88) {
            message.advertisingChannelTypes.push(reader.int32() as any);

            continue;
          }

          if (tag === 90) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.advertisingChannelTypes.push(reader.int32() as any);
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BiddingDataExclusion {
    return {
      resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "",
      dataExclusionId: isSet(object.dataExclusionId) ? Long.fromValue(object.dataExclusionId) : Long.ZERO,
      scope: isSet(object.scope) ? seasonalityEventScopeEnum_SeasonalityEventScopeFromJSON(object.scope) : 0,
      status: isSet(object.status) ? seasonalityEventStatusEnum_SeasonalityEventStatusFromJSON(object.status) : 0,
      startDateTime: isSet(object.startDateTime) ? globalThis.String(object.startDateTime) : "",
      endDateTime: isSet(object.endDateTime) ? globalThis.String(object.endDateTime) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      devices: globalThis.Array.isArray(object?.devices)
        ? object.devices.map((e: any) => deviceEnum_DeviceFromJSON(e))
        : [],
      campaigns: globalThis.Array.isArray(object?.campaigns)
        ? object.campaigns.map((e: any) => globalThis.String(e))
        : [],
      advertisingChannelTypes: globalThis.Array.isArray(object?.advertisingChannelTypes)
        ? object.advertisingChannelTypes.map((e: any) => advertisingChannelTypeEnum_AdvertisingChannelTypeFromJSON(e))
        : [],
    };
  },

  toJSON(message: BiddingDataExclusion): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    if (!message.dataExclusionId.equals(Long.ZERO)) {
      obj.dataExclusionId = (message.dataExclusionId || Long.ZERO).toString();
    }
    if (message.scope !== 0) {
      obj.scope = seasonalityEventScopeEnum_SeasonalityEventScopeToJSON(message.scope);
    }
    if (message.status !== 0) {
      obj.status = seasonalityEventStatusEnum_SeasonalityEventStatusToJSON(message.status);
    }
    if (message.startDateTime !== "") {
      obj.startDateTime = message.startDateTime;
    }
    if (message.endDateTime !== "") {
      obj.endDateTime = message.endDateTime;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.devices?.length) {
      obj.devices = message.devices.map((e) => deviceEnum_DeviceToJSON(e));
    }
    if (message.campaigns?.length) {
      obj.campaigns = message.campaigns;
    }
    if (message.advertisingChannelTypes?.length) {
      obj.advertisingChannelTypes = message.advertisingChannelTypes.map((e) =>
        advertisingChannelTypeEnum_AdvertisingChannelTypeToJSON(e)
      );
    }
    return obj;
  },

  create(base?: DeepPartial<BiddingDataExclusion>): BiddingDataExclusion {
    return BiddingDataExclusion.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BiddingDataExclusion>): BiddingDataExclusion {
    const message = createBaseBiddingDataExclusion();
    message.resourceName = object.resourceName ?? "";
    message.dataExclusionId = (object.dataExclusionId !== undefined && object.dataExclusionId !== null)
      ? Long.fromValue(object.dataExclusionId)
      : Long.ZERO;
    message.scope = object.scope ?? 0;
    message.status = object.status ?? 0;
    message.startDateTime = object.startDateTime ?? "";
    message.endDateTime = object.endDateTime ?? "";
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.devices = object.devices?.map((e) => e) || [];
    message.campaigns = object.campaigns?.map((e) => e) || [];
    message.advertisingChannelTypes = object.advertisingChannelTypes?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
