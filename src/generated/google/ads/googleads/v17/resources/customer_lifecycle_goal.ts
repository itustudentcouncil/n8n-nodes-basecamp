// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v17/resources/customer_lifecycle_goal.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { LifecycleGoalValueSettings } from "../common/lifecycle_goals.js";

export const protobufPackage = "google.ads.googleads.v17.resources";

/** Account level customer lifecycle goal settings. */
export interface CustomerLifecycleGoal {
  /**
   * Immutable. The resource name of the customer lifecycle goal.
   * Customer lifecycle resource names have the form:
   *
   * `customers/{customer_id}/customerLifecycleGoal`
   */
  resourceName: string;
  /** Output only. Customer acquisition goal customer level value settings. */
  customerAcquisitionGoalValueSettings: LifecycleGoalValueSettings | undefined;
}

function createBaseCustomerLifecycleGoal(): CustomerLifecycleGoal {
  return { resourceName: "", customerAcquisitionGoalValueSettings: undefined };
}

export const CustomerLifecycleGoal: MessageFns<CustomerLifecycleGoal> = {
  encode(message: CustomerLifecycleGoal, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(10).string(message.resourceName);
    }
    if (message.customerAcquisitionGoalValueSettings !== undefined) {
      LifecycleGoalValueSettings.encode(message.customerAcquisitionGoalValueSettings, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CustomerLifecycleGoal {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCustomerLifecycleGoal();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.customerAcquisitionGoalValueSettings = LifecycleGoalValueSettings.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CustomerLifecycleGoal {
    return {
      resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "",
      customerAcquisitionGoalValueSettings: isSet(object.customerAcquisitionGoalValueSettings)
        ? LifecycleGoalValueSettings.fromJSON(object.customerAcquisitionGoalValueSettings)
        : undefined,
    };
  },

  toJSON(message: CustomerLifecycleGoal): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    if (message.customerAcquisitionGoalValueSettings !== undefined) {
      obj.customerAcquisitionGoalValueSettings = LifecycleGoalValueSettings.toJSON(
        message.customerAcquisitionGoalValueSettings,
      );
    }
    return obj;
  },

  create(base?: DeepPartial<CustomerLifecycleGoal>): CustomerLifecycleGoal {
    return CustomerLifecycleGoal.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CustomerLifecycleGoal>): CustomerLifecycleGoal {
    const message = createBaseCustomerLifecycleGoal();
    message.resourceName = object.resourceName ?? "";
    message.customerAcquisitionGoalValueSettings =
      (object.customerAcquisitionGoalValueSettings !== undefined &&
          object.customerAcquisitionGoalValueSettings !== null)
        ? LifecycleGoalValueSettings.fromPartial(object.customerAcquisitionGoalValueSettings)
        : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
