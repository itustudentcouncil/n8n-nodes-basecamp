// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v17/resources/ad_group_criterion_simulation.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { CpcBidSimulationPointList, PercentCpcBidSimulationPointList } from "../common/simulation.js";
import {
  SimulationModificationMethodEnum_SimulationModificationMethod,
  simulationModificationMethodEnum_SimulationModificationMethodFromJSON,
  simulationModificationMethodEnum_SimulationModificationMethodToJSON,
} from "../enums/simulation_modification_method.js";
import {
  SimulationTypeEnum_SimulationType,
  simulationTypeEnum_SimulationTypeFromJSON,
  simulationTypeEnum_SimulationTypeToJSON,
} from "../enums/simulation_type.js";

export const protobufPackage = "google.ads.googleads.v17.resources";

/**
 * An ad group criterion simulation. Supported combinations of advertising
 * channel type, criterion type, simulation type, and simulation modification
 * method are detailed below respectively. Hotel AdGroupCriterion simulation
 * operations starting in V5.
 *
 * 1. DISPLAY - KEYWORD - CPC_BID - UNIFORM
 * 2. SEARCH - KEYWORD - CPC_BID - UNIFORM
 * 3. SHOPPING - LISTING_GROUP - CPC_BID - UNIFORM
 * 4. HOTEL - LISTING_GROUP - CPC_BID - UNIFORM
 * 5. HOTEL - LISTING_GROUP - PERCENT_CPC_BID - UNIFORM
 */
export interface AdGroupCriterionSimulation {
  /**
   * Output only. The resource name of the ad group criterion simulation.
   * Ad group criterion simulation resource names have the form:
   *
   * `customers/{customer_id}/adGroupCriterionSimulations/{ad_group_id}~{criterion_id}~{type}~{modification_method}~{start_date}~{end_date}`
   */
  resourceName: string;
  /** Output only. AdGroup ID of the simulation. */
  adGroupId?:
    | Long
    | undefined;
  /** Output only. Criterion ID of the simulation. */
  criterionId?:
    | Long
    | undefined;
  /** Output only. The field that the simulation modifies. */
  type: SimulationTypeEnum_SimulationType;
  /** Output only. How the simulation modifies the field. */
  modificationMethod: SimulationModificationMethodEnum_SimulationModificationMethod;
  /**
   * Output only. First day on which the simulation is based, in YYYY-MM-DD
   * format.
   */
  startDate?:
    | string
    | undefined;
  /**
   * Output only. Last day on which the simulation is based, in YYYY-MM-DD
   * format.
   */
  endDate?:
    | string
    | undefined;
  /** Output only. Simulation points if the simulation type is CPC_BID. */
  cpcBidPointList?:
    | CpcBidSimulationPointList
    | undefined;
  /** Output only. Simulation points if the simulation type is PERCENT_CPC_BID. */
  percentCpcBidPointList?: PercentCpcBidSimulationPointList | undefined;
}

function createBaseAdGroupCriterionSimulation(): AdGroupCriterionSimulation {
  return {
    resourceName: "",
    adGroupId: undefined,
    criterionId: undefined,
    type: 0,
    modificationMethod: 0,
    startDate: undefined,
    endDate: undefined,
    cpcBidPointList: undefined,
    percentCpcBidPointList: undefined,
  };
}

export const AdGroupCriterionSimulation: MessageFns<AdGroupCriterionSimulation> = {
  encode(message: AdGroupCriterionSimulation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(10).string(message.resourceName);
    }
    if (message.adGroupId !== undefined) {
      writer.uint32(72).int64(message.adGroupId.toString());
    }
    if (message.criterionId !== undefined) {
      writer.uint32(80).int64(message.criterionId.toString());
    }
    if (message.type !== 0) {
      writer.uint32(32).int32(message.type);
    }
    if (message.modificationMethod !== 0) {
      writer.uint32(40).int32(message.modificationMethod);
    }
    if (message.startDate !== undefined) {
      writer.uint32(90).string(message.startDate);
    }
    if (message.endDate !== undefined) {
      writer.uint32(98).string(message.endDate);
    }
    if (message.cpcBidPointList !== undefined) {
      CpcBidSimulationPointList.encode(message.cpcBidPointList, writer.uint32(66).fork()).join();
    }
    if (message.percentCpcBidPointList !== undefined) {
      PercentCpcBidSimulationPointList.encode(message.percentCpcBidPointList, writer.uint32(106).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AdGroupCriterionSimulation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAdGroupCriterionSimulation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceName = reader.string();
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.adGroupId = Long.fromString(reader.int64().toString());
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.criterionId = Long.fromString(reader.int64().toString());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.modificationMethod = reader.int32() as any;
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.startDate = reader.string();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.endDate = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.cpcBidPointList = CpcBidSimulationPointList.decode(reader, reader.uint32());
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.percentCpcBidPointList = PercentCpcBidSimulationPointList.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AdGroupCriterionSimulation {
    return {
      resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "",
      adGroupId: isSet(object.adGroupId) ? Long.fromValue(object.adGroupId) : undefined,
      criterionId: isSet(object.criterionId) ? Long.fromValue(object.criterionId) : undefined,
      type: isSet(object.type) ? simulationTypeEnum_SimulationTypeFromJSON(object.type) : 0,
      modificationMethod: isSet(object.modificationMethod)
        ? simulationModificationMethodEnum_SimulationModificationMethodFromJSON(object.modificationMethod)
        : 0,
      startDate: isSet(object.startDate) ? globalThis.String(object.startDate) : undefined,
      endDate: isSet(object.endDate) ? globalThis.String(object.endDate) : undefined,
      cpcBidPointList: isSet(object.cpcBidPointList)
        ? CpcBidSimulationPointList.fromJSON(object.cpcBidPointList)
        : undefined,
      percentCpcBidPointList: isSet(object.percentCpcBidPointList)
        ? PercentCpcBidSimulationPointList.fromJSON(object.percentCpcBidPointList)
        : undefined,
    };
  },

  toJSON(message: AdGroupCriterionSimulation): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    if (message.adGroupId !== undefined) {
      obj.adGroupId = (message.adGroupId || Long.ZERO).toString();
    }
    if (message.criterionId !== undefined) {
      obj.criterionId = (message.criterionId || Long.ZERO).toString();
    }
    if (message.type !== 0) {
      obj.type = simulationTypeEnum_SimulationTypeToJSON(message.type);
    }
    if (message.modificationMethod !== 0) {
      obj.modificationMethod = simulationModificationMethodEnum_SimulationModificationMethodToJSON(
        message.modificationMethod,
      );
    }
    if (message.startDate !== undefined) {
      obj.startDate = message.startDate;
    }
    if (message.endDate !== undefined) {
      obj.endDate = message.endDate;
    }
    if (message.cpcBidPointList !== undefined) {
      obj.cpcBidPointList = CpcBidSimulationPointList.toJSON(message.cpcBidPointList);
    }
    if (message.percentCpcBidPointList !== undefined) {
      obj.percentCpcBidPointList = PercentCpcBidSimulationPointList.toJSON(message.percentCpcBidPointList);
    }
    return obj;
  },

  create(base?: DeepPartial<AdGroupCriterionSimulation>): AdGroupCriterionSimulation {
    return AdGroupCriterionSimulation.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AdGroupCriterionSimulation>): AdGroupCriterionSimulation {
    const message = createBaseAdGroupCriterionSimulation();
    message.resourceName = object.resourceName ?? "";
    message.adGroupId = (object.adGroupId !== undefined && object.adGroupId !== null)
      ? Long.fromValue(object.adGroupId)
      : undefined;
    message.criterionId = (object.criterionId !== undefined && object.criterionId !== null)
      ? Long.fromValue(object.criterionId)
      : undefined;
    message.type = object.type ?? 0;
    message.modificationMethod = object.modificationMethod ?? 0;
    message.startDate = object.startDate ?? undefined;
    message.endDate = object.endDate ?? undefined;
    message.cpcBidPointList = (object.cpcBidPointList !== undefined && object.cpcBidPointList !== null)
      ? CpcBidSimulationPointList.fromPartial(object.cpcBidPointList)
      : undefined;
    message.percentCpcBidPointList =
      (object.percentCpcBidPointList !== undefined && object.percentCpcBidPointList !== null)
        ? PercentCpcBidSimulationPointList.fromPartial(object.percentCpcBidPointList)
        : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
