// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v17/resources/lead_form_submission_data.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import {
  LeadFormFieldUserInputTypeEnum_LeadFormFieldUserInputType,
  leadFormFieldUserInputTypeEnum_LeadFormFieldUserInputTypeFromJSON,
  leadFormFieldUserInputTypeEnum_LeadFormFieldUserInputTypeToJSON,
} from "../enums/lead_form_field_user_input_type.js";

export const protobufPackage = "google.ads.googleads.v17.resources";

/** Data from lead form submissions. */
export interface LeadFormSubmissionData {
  /**
   * Output only. The resource name of the lead form submission data.
   * Lead form submission data resource names have the form:
   *
   * `customers/{customer_id}/leadFormSubmissionData/{lead_form_submission_data_id}`
   */
  resourceName: string;
  /** Output only. ID of this lead form submission. */
  id: string;
  /** Output only. Asset associated with the submitted lead form. */
  asset: string;
  /** Output only. Campaign associated with the submitted lead form. */
  campaign: string;
  /** Output only. Submission data associated with a lead form. */
  leadFormSubmissionFields: LeadFormSubmissionField[];
  /** Output only. Submission data associated with a custom lead form. */
  customLeadFormSubmissionFields: CustomLeadFormSubmissionField[];
  /** Output only. AdGroup associated with the submitted lead form. */
  adGroup: string;
  /** Output only. AdGroupAd associated with the submitted lead form. */
  adGroupAd: string;
  /** Output only. Google Click Id associated with the submissed lead form. */
  gclid: string;
  /**
   * Output only. The date and time at which the lead form was submitted. The
   * format is "yyyy-mm-dd hh:mm:ss+|-hh:mm", for example, "2019-01-01
   * 12:32:45-08:00".
   */
  submissionDateTime: string;
}

/** Fields in the submitted lead form. */
export interface LeadFormSubmissionField {
  /** Output only. Field type for lead form fields. */
  fieldType: LeadFormFieldUserInputTypeEnum_LeadFormFieldUserInputType;
  /** Output only. Field value for lead form fields. */
  fieldValue: string;
}

/** Fields in the submitted custom question */
export interface CustomLeadFormSubmissionField {
  /**
   * Output only. Question text for custom question, maximum number of
   * characters is 300.
   */
  questionText: string;
  /**
   * Output only. Field value for custom question response, maximum number of
   * characters is 70.
   */
  fieldValue: string;
}

function createBaseLeadFormSubmissionData(): LeadFormSubmissionData {
  return {
    resourceName: "",
    id: "",
    asset: "",
    campaign: "",
    leadFormSubmissionFields: [],
    customLeadFormSubmissionFields: [],
    adGroup: "",
    adGroupAd: "",
    gclid: "",
    submissionDateTime: "",
  };
}

export const LeadFormSubmissionData: MessageFns<LeadFormSubmissionData> = {
  encode(message: LeadFormSubmissionData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(10).string(message.resourceName);
    }
    if (message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    if (message.asset !== "") {
      writer.uint32(26).string(message.asset);
    }
    if (message.campaign !== "") {
      writer.uint32(34).string(message.campaign);
    }
    for (const v of message.leadFormSubmissionFields) {
      LeadFormSubmissionField.encode(v!, writer.uint32(42).fork()).join();
    }
    for (const v of message.customLeadFormSubmissionFields) {
      CustomLeadFormSubmissionField.encode(v!, writer.uint32(82).fork()).join();
    }
    if (message.adGroup !== "") {
      writer.uint32(50).string(message.adGroup);
    }
    if (message.adGroupAd !== "") {
      writer.uint32(58).string(message.adGroupAd);
    }
    if (message.gclid !== "") {
      writer.uint32(66).string(message.gclid);
    }
    if (message.submissionDateTime !== "") {
      writer.uint32(74).string(message.submissionDateTime);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LeadFormSubmissionData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLeadFormSubmissionData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.asset = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.campaign = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.leadFormSubmissionFields.push(LeadFormSubmissionField.decode(reader, reader.uint32()));
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.customLeadFormSubmissionFields.push(CustomLeadFormSubmissionField.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.adGroup = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.adGroupAd = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.gclid = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.submissionDateTime = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LeadFormSubmissionData {
    return {
      resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "",
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      asset: isSet(object.asset) ? globalThis.String(object.asset) : "",
      campaign: isSet(object.campaign) ? globalThis.String(object.campaign) : "",
      leadFormSubmissionFields: globalThis.Array.isArray(object?.leadFormSubmissionFields)
        ? object.leadFormSubmissionFields.map((e: any) => LeadFormSubmissionField.fromJSON(e))
        : [],
      customLeadFormSubmissionFields: globalThis.Array.isArray(object?.customLeadFormSubmissionFields)
        ? object.customLeadFormSubmissionFields.map((e: any) => CustomLeadFormSubmissionField.fromJSON(e))
        : [],
      adGroup: isSet(object.adGroup) ? globalThis.String(object.adGroup) : "",
      adGroupAd: isSet(object.adGroupAd) ? globalThis.String(object.adGroupAd) : "",
      gclid: isSet(object.gclid) ? globalThis.String(object.gclid) : "",
      submissionDateTime: isSet(object.submissionDateTime) ? globalThis.String(object.submissionDateTime) : "",
    };
  },

  toJSON(message: LeadFormSubmissionData): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.asset !== "") {
      obj.asset = message.asset;
    }
    if (message.campaign !== "") {
      obj.campaign = message.campaign;
    }
    if (message.leadFormSubmissionFields?.length) {
      obj.leadFormSubmissionFields = message.leadFormSubmissionFields.map((e) => LeadFormSubmissionField.toJSON(e));
    }
    if (message.customLeadFormSubmissionFields?.length) {
      obj.customLeadFormSubmissionFields = message.customLeadFormSubmissionFields.map((e) =>
        CustomLeadFormSubmissionField.toJSON(e)
      );
    }
    if (message.adGroup !== "") {
      obj.adGroup = message.adGroup;
    }
    if (message.adGroupAd !== "") {
      obj.adGroupAd = message.adGroupAd;
    }
    if (message.gclid !== "") {
      obj.gclid = message.gclid;
    }
    if (message.submissionDateTime !== "") {
      obj.submissionDateTime = message.submissionDateTime;
    }
    return obj;
  },

  create(base?: DeepPartial<LeadFormSubmissionData>): LeadFormSubmissionData {
    return LeadFormSubmissionData.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LeadFormSubmissionData>): LeadFormSubmissionData {
    const message = createBaseLeadFormSubmissionData();
    message.resourceName = object.resourceName ?? "";
    message.id = object.id ?? "";
    message.asset = object.asset ?? "";
    message.campaign = object.campaign ?? "";
    message.leadFormSubmissionFields =
      object.leadFormSubmissionFields?.map((e) => LeadFormSubmissionField.fromPartial(e)) || [];
    message.customLeadFormSubmissionFields =
      object.customLeadFormSubmissionFields?.map((e) => CustomLeadFormSubmissionField.fromPartial(e)) || [];
    message.adGroup = object.adGroup ?? "";
    message.adGroupAd = object.adGroupAd ?? "";
    message.gclid = object.gclid ?? "";
    message.submissionDateTime = object.submissionDateTime ?? "";
    return message;
  },
};

function createBaseLeadFormSubmissionField(): LeadFormSubmissionField {
  return { fieldType: 0, fieldValue: "" };
}

export const LeadFormSubmissionField: MessageFns<LeadFormSubmissionField> = {
  encode(message: LeadFormSubmissionField, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.fieldType !== 0) {
      writer.uint32(8).int32(message.fieldType);
    }
    if (message.fieldValue !== "") {
      writer.uint32(18).string(message.fieldValue);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LeadFormSubmissionField {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLeadFormSubmissionField();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.fieldType = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.fieldValue = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LeadFormSubmissionField {
    return {
      fieldType: isSet(object.fieldType)
        ? leadFormFieldUserInputTypeEnum_LeadFormFieldUserInputTypeFromJSON(object.fieldType)
        : 0,
      fieldValue: isSet(object.fieldValue) ? globalThis.String(object.fieldValue) : "",
    };
  },

  toJSON(message: LeadFormSubmissionField): unknown {
    const obj: any = {};
    if (message.fieldType !== 0) {
      obj.fieldType = leadFormFieldUserInputTypeEnum_LeadFormFieldUserInputTypeToJSON(message.fieldType);
    }
    if (message.fieldValue !== "") {
      obj.fieldValue = message.fieldValue;
    }
    return obj;
  },

  create(base?: DeepPartial<LeadFormSubmissionField>): LeadFormSubmissionField {
    return LeadFormSubmissionField.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LeadFormSubmissionField>): LeadFormSubmissionField {
    const message = createBaseLeadFormSubmissionField();
    message.fieldType = object.fieldType ?? 0;
    message.fieldValue = object.fieldValue ?? "";
    return message;
  },
};

function createBaseCustomLeadFormSubmissionField(): CustomLeadFormSubmissionField {
  return { questionText: "", fieldValue: "" };
}

export const CustomLeadFormSubmissionField: MessageFns<CustomLeadFormSubmissionField> = {
  encode(message: CustomLeadFormSubmissionField, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.questionText !== "") {
      writer.uint32(10).string(message.questionText);
    }
    if (message.fieldValue !== "") {
      writer.uint32(18).string(message.fieldValue);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CustomLeadFormSubmissionField {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCustomLeadFormSubmissionField();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.questionText = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.fieldValue = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CustomLeadFormSubmissionField {
    return {
      questionText: isSet(object.questionText) ? globalThis.String(object.questionText) : "",
      fieldValue: isSet(object.fieldValue) ? globalThis.String(object.fieldValue) : "",
    };
  },

  toJSON(message: CustomLeadFormSubmissionField): unknown {
    const obj: any = {};
    if (message.questionText !== "") {
      obj.questionText = message.questionText;
    }
    if (message.fieldValue !== "") {
      obj.fieldValue = message.fieldValue;
    }
    return obj;
  },

  create(base?: DeepPartial<CustomLeadFormSubmissionField>): CustomLeadFormSubmissionField {
    return CustomLeadFormSubmissionField.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CustomLeadFormSubmissionField>): CustomLeadFormSubmissionField {
    const message = createBaseCustomLeadFormSubmissionField();
    message.questionText = object.questionText ?? "";
    message.fieldValue = object.fieldValue ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
