// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v17/resources/user_interest.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { CriterionCategoryAvailability } from "../common/criterion_category_availability.js";
import {
  UserInterestTaxonomyTypeEnum_UserInterestTaxonomyType,
  userInterestTaxonomyTypeEnum_UserInterestTaxonomyTypeFromJSON,
  userInterestTaxonomyTypeEnum_UserInterestTaxonomyTypeToJSON,
} from "../enums/user_interest_taxonomy_type.js";

export const protobufPackage = "google.ads.googleads.v17.resources";

/** A user interest: a particular interest-based vertical to be targeted. */
export interface UserInterest {
  /**
   * Output only. The resource name of the user interest.
   * User interest resource names have the form:
   *
   * `customers/{customer_id}/userInterests/{user_interest_id}`
   */
  resourceName: string;
  /** Output only. Taxonomy type of the user interest. */
  taxonomyType: UserInterestTaxonomyTypeEnum_UserInterestTaxonomyType;
  /** Output only. The ID of the user interest. */
  userInterestId?:
    | Long
    | undefined;
  /** Output only. The name of the user interest. */
  name?:
    | string
    | undefined;
  /** Output only. The parent of the user interest. */
  userInterestParent?:
    | string
    | undefined;
  /**
   * Output only. True if the user interest is launched to all channels and
   * locales.
   */
  launchedToAll?:
    | boolean
    | undefined;
  /** Output only. Availability information of the user interest. */
  availabilities: CriterionCategoryAvailability[];
}

function createBaseUserInterest(): UserInterest {
  return {
    resourceName: "",
    taxonomyType: 0,
    userInterestId: undefined,
    name: undefined,
    userInterestParent: undefined,
    launchedToAll: undefined,
    availabilities: [],
  };
}

export const UserInterest: MessageFns<UserInterest> = {
  encode(message: UserInterest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(10).string(message.resourceName);
    }
    if (message.taxonomyType !== 0) {
      writer.uint32(16).int32(message.taxonomyType);
    }
    if (message.userInterestId !== undefined) {
      writer.uint32(64).int64(message.userInterestId.toString());
    }
    if (message.name !== undefined) {
      writer.uint32(74).string(message.name);
    }
    if (message.userInterestParent !== undefined) {
      writer.uint32(82).string(message.userInterestParent);
    }
    if (message.launchedToAll !== undefined) {
      writer.uint32(88).bool(message.launchedToAll);
    }
    for (const v of message.availabilities) {
      CriterionCategoryAvailability.encode(v!, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserInterest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserInterest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceName = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.taxonomyType = reader.int32() as any;
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.userInterestId = Long.fromString(reader.int64().toString());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.name = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.userInterestParent = reader.string();
          continue;
        case 11:
          if (tag !== 88) {
            break;
          }

          message.launchedToAll = reader.bool();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.availabilities.push(CriterionCategoryAvailability.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserInterest {
    return {
      resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "",
      taxonomyType: isSet(object.taxonomyType)
        ? userInterestTaxonomyTypeEnum_UserInterestTaxonomyTypeFromJSON(object.taxonomyType)
        : 0,
      userInterestId: isSet(object.userInterestId) ? Long.fromValue(object.userInterestId) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      userInterestParent: isSet(object.userInterestParent) ? globalThis.String(object.userInterestParent) : undefined,
      launchedToAll: isSet(object.launchedToAll) ? globalThis.Boolean(object.launchedToAll) : undefined,
      availabilities: globalThis.Array.isArray(object?.availabilities)
        ? object.availabilities.map((e: any) => CriterionCategoryAvailability.fromJSON(e))
        : [],
    };
  },

  toJSON(message: UserInterest): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    if (message.taxonomyType !== 0) {
      obj.taxonomyType = userInterestTaxonomyTypeEnum_UserInterestTaxonomyTypeToJSON(message.taxonomyType);
    }
    if (message.userInterestId !== undefined) {
      obj.userInterestId = (message.userInterestId || Long.ZERO).toString();
    }
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.userInterestParent !== undefined) {
      obj.userInterestParent = message.userInterestParent;
    }
    if (message.launchedToAll !== undefined) {
      obj.launchedToAll = message.launchedToAll;
    }
    if (message.availabilities?.length) {
      obj.availabilities = message.availabilities.map((e) => CriterionCategoryAvailability.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<UserInterest>): UserInterest {
    return UserInterest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UserInterest>): UserInterest {
    const message = createBaseUserInterest();
    message.resourceName = object.resourceName ?? "";
    message.taxonomyType = object.taxonomyType ?? 0;
    message.userInterestId = (object.userInterestId !== undefined && object.userInterestId !== null)
      ? Long.fromValue(object.userInterestId)
      : undefined;
    message.name = object.name ?? undefined;
    message.userInterestParent = object.userInterestParent ?? undefined;
    message.launchedToAll = object.launchedToAll ?? undefined;
    message.availabilities = object.availabilities?.map((e) => CriterionCategoryAvailability.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
