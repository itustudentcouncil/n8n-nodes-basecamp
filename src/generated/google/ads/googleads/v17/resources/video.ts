// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v17/resources/video.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.googleads.v17.resources";

/** A video. */
export interface Video {
  /**
   * Output only. The resource name of the video.
   * Video resource names have the form:
   *
   * `customers/{customer_id}/videos/{video_id}`
   */
  resourceName: string;
  /** Output only. The ID of the video. */
  id?:
    | string
    | undefined;
  /** Output only. The owner channel id of the video. */
  channelId?:
    | string
    | undefined;
  /** Output only. The duration of the video in milliseconds. */
  durationMillis?:
    | Long
    | undefined;
  /** Output only. The title of the video. */
  title?: string | undefined;
}

function createBaseVideo(): Video {
  return { resourceName: "", id: undefined, channelId: undefined, durationMillis: undefined, title: undefined };
}

export const Video: MessageFns<Video> = {
  encode(message: Video, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(10).string(message.resourceName);
    }
    if (message.id !== undefined) {
      writer.uint32(50).string(message.id);
    }
    if (message.channelId !== undefined) {
      writer.uint32(58).string(message.channelId);
    }
    if (message.durationMillis !== undefined) {
      writer.uint32(64).int64(message.durationMillis.toString());
    }
    if (message.title !== undefined) {
      writer.uint32(74).string(message.title);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Video {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVideo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceName = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.id = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.channelId = reader.string();
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.durationMillis = Long.fromString(reader.int64().toString());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.title = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Video {
    return {
      resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "",
      id: isSet(object.id) ? globalThis.String(object.id) : undefined,
      channelId: isSet(object.channelId) ? globalThis.String(object.channelId) : undefined,
      durationMillis: isSet(object.durationMillis) ? Long.fromValue(object.durationMillis) : undefined,
      title: isSet(object.title) ? globalThis.String(object.title) : undefined,
    };
  },

  toJSON(message: Video): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    if (message.id !== undefined) {
      obj.id = message.id;
    }
    if (message.channelId !== undefined) {
      obj.channelId = message.channelId;
    }
    if (message.durationMillis !== undefined) {
      obj.durationMillis = (message.durationMillis || Long.ZERO).toString();
    }
    if (message.title !== undefined) {
      obj.title = message.title;
    }
    return obj;
  },

  create(base?: DeepPartial<Video>): Video {
    return Video.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Video>): Video {
    const message = createBaseVideo();
    message.resourceName = object.resourceName ?? "";
    message.id = object.id ?? undefined;
    message.channelId = object.channelId ?? undefined;
    message.durationMillis = (object.durationMillis !== undefined && object.durationMillis !== null)
      ? Long.fromValue(object.durationMillis)
      : undefined;
    message.title = object.title ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
