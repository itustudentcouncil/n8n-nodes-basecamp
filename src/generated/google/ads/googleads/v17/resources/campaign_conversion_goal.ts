// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v17/resources/campaign_conversion_goal.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import {
  ConversionActionCategoryEnum_ConversionActionCategory,
  conversionActionCategoryEnum_ConversionActionCategoryFromJSON,
  conversionActionCategoryEnum_ConversionActionCategoryToJSON,
} from "../enums/conversion_action_category.js";
import {
  ConversionOriginEnum_ConversionOrigin,
  conversionOriginEnum_ConversionOriginFromJSON,
  conversionOriginEnum_ConversionOriginToJSON,
} from "../enums/conversion_origin.js";

export const protobufPackage = "google.ads.googleads.v17.resources";

/**
 * The biddability setting for the specified campaign only for all
 * conversion actions with a matching category and origin.
 */
export interface CampaignConversionGoal {
  /**
   * Immutable. The resource name of the campaign conversion goal.
   * Campaign conversion goal resource names have the form:
   *
   * `customers/{customer_id}/campaignConversionGoals/{campaign_id}~{category}~{origin}`
   */
  resourceName: string;
  /**
   * Immutable. The campaign with which this campaign conversion goal is
   * associated.
   */
  campaign: string;
  /** The conversion category of this campaign conversion goal. */
  category: ConversionActionCategoryEnum_ConversionActionCategory;
  /** The conversion origin of this campaign conversion goal. */
  origin: ConversionOriginEnum_ConversionOrigin;
  /** The biddability of the campaign conversion goal. */
  biddable: boolean;
}

function createBaseCampaignConversionGoal(): CampaignConversionGoal {
  return { resourceName: "", campaign: "", category: 0, origin: 0, biddable: false };
}

export const CampaignConversionGoal: MessageFns<CampaignConversionGoal> = {
  encode(message: CampaignConversionGoal, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(10).string(message.resourceName);
    }
    if (message.campaign !== "") {
      writer.uint32(18).string(message.campaign);
    }
    if (message.category !== 0) {
      writer.uint32(24).int32(message.category);
    }
    if (message.origin !== 0) {
      writer.uint32(32).int32(message.origin);
    }
    if (message.biddable !== false) {
      writer.uint32(40).bool(message.biddable);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CampaignConversionGoal {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCampaignConversionGoal();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.campaign = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.category = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.origin = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.biddable = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CampaignConversionGoal {
    return {
      resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "",
      campaign: isSet(object.campaign) ? globalThis.String(object.campaign) : "",
      category: isSet(object.category)
        ? conversionActionCategoryEnum_ConversionActionCategoryFromJSON(object.category)
        : 0,
      origin: isSet(object.origin) ? conversionOriginEnum_ConversionOriginFromJSON(object.origin) : 0,
      biddable: isSet(object.biddable) ? globalThis.Boolean(object.biddable) : false,
    };
  },

  toJSON(message: CampaignConversionGoal): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    if (message.campaign !== "") {
      obj.campaign = message.campaign;
    }
    if (message.category !== 0) {
      obj.category = conversionActionCategoryEnum_ConversionActionCategoryToJSON(message.category);
    }
    if (message.origin !== 0) {
      obj.origin = conversionOriginEnum_ConversionOriginToJSON(message.origin);
    }
    if (message.biddable !== false) {
      obj.biddable = message.biddable;
    }
    return obj;
  },

  create(base?: DeepPartial<CampaignConversionGoal>): CampaignConversionGoal {
    return CampaignConversionGoal.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CampaignConversionGoal>): CampaignConversionGoal {
    const message = createBaseCampaignConversionGoal();
    message.resourceName = object.resourceName ?? "";
    message.campaign = object.campaign ?? "";
    message.category = object.category ?? 0;
    message.origin = object.origin ?? 0;
    message.biddable = object.biddable ?? false;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
