// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v17/resources/feed_item_target.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { AdScheduleInfo, KeywordInfo } from "../common/criteria.js";
import {
  FeedItemTargetDeviceEnum_FeedItemTargetDevice,
  feedItemTargetDeviceEnum_FeedItemTargetDeviceFromJSON,
  feedItemTargetDeviceEnum_FeedItemTargetDeviceToJSON,
} from "../enums/feed_item_target_device.js";
import {
  FeedItemTargetStatusEnum_FeedItemTargetStatus,
  feedItemTargetStatusEnum_FeedItemTargetStatusFromJSON,
  feedItemTargetStatusEnum_FeedItemTargetStatusToJSON,
} from "../enums/feed_item_target_status.js";
import {
  FeedItemTargetTypeEnum_FeedItemTargetType,
  feedItemTargetTypeEnum_FeedItemTargetTypeFromJSON,
  feedItemTargetTypeEnum_FeedItemTargetTypeToJSON,
} from "../enums/feed_item_target_type.js";

export const protobufPackage = "google.ads.googleads.v17.resources";

/** A feed item target. */
export interface FeedItemTarget {
  /**
   * Immutable. The resource name of the feed item target.
   * Feed item target resource names have the form:
   * `customers/{customer_id}/feedItemTargets/{feed_id}~{feed_item_id}~{feed_item_target_type}~{feed_item_target_id}`
   */
  resourceName: string;
  /** Immutable. The feed item to which this feed item target belongs. */
  feedItem?:
    | string
    | undefined;
  /**
   * Output only. The target type of this feed item target. This field is
   * read-only.
   */
  feedItemTargetType: FeedItemTargetTypeEnum_FeedItemTargetType;
  /** Output only. The ID of the targeted resource. This field is read-only. */
  feedItemTargetId?:
    | Long
    | undefined;
  /**
   * Output only. Status of the feed item target.
   * This field is read-only.
   */
  status: FeedItemTargetStatusEnum_FeedItemTargetStatus;
  /** Immutable. The targeted campaign. */
  campaign?:
    | string
    | undefined;
  /** Immutable. The targeted ad group. */
  adGroup?:
    | string
    | undefined;
  /** Immutable. The targeted keyword. */
  keyword?:
    | KeywordInfo
    | undefined;
  /** Immutable. The targeted geo target constant resource name. */
  geoTargetConstant?:
    | string
    | undefined;
  /** Immutable. The targeted device. */
  device?:
    | FeedItemTargetDeviceEnum_FeedItemTargetDevice
    | undefined;
  /** Immutable. The targeted schedule. */
  adSchedule?: AdScheduleInfo | undefined;
}

function createBaseFeedItemTarget(): FeedItemTarget {
  return {
    resourceName: "",
    feedItem: undefined,
    feedItemTargetType: 0,
    feedItemTargetId: undefined,
    status: 0,
    campaign: undefined,
    adGroup: undefined,
    keyword: undefined,
    geoTargetConstant: undefined,
    device: undefined,
    adSchedule: undefined,
  };
}

export const FeedItemTarget: MessageFns<FeedItemTarget> = {
  encode(message: FeedItemTarget, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(10).string(message.resourceName);
    }
    if (message.feedItem !== undefined) {
      writer.uint32(98).string(message.feedItem);
    }
    if (message.feedItemTargetType !== 0) {
      writer.uint32(24).int32(message.feedItemTargetType);
    }
    if (message.feedItemTargetId !== undefined) {
      writer.uint32(104).int64(message.feedItemTargetId.toString());
    }
    if (message.status !== 0) {
      writer.uint32(88).int32(message.status);
    }
    if (message.campaign !== undefined) {
      writer.uint32(114).string(message.campaign);
    }
    if (message.adGroup !== undefined) {
      writer.uint32(122).string(message.adGroup);
    }
    if (message.keyword !== undefined) {
      KeywordInfo.encode(message.keyword, writer.uint32(58).fork()).join();
    }
    if (message.geoTargetConstant !== undefined) {
      writer.uint32(130).string(message.geoTargetConstant);
    }
    if (message.device !== undefined) {
      writer.uint32(72).int32(message.device);
    }
    if (message.adSchedule !== undefined) {
      AdScheduleInfo.encode(message.adSchedule, writer.uint32(82).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FeedItemTarget {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFeedItemTarget();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceName = reader.string();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.feedItem = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.feedItemTargetType = reader.int32() as any;
          continue;
        case 13:
          if (tag !== 104) {
            break;
          }

          message.feedItemTargetId = Long.fromString(reader.int64().toString());
          continue;
        case 11:
          if (tag !== 88) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.campaign = reader.string();
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.adGroup = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.keyword = KeywordInfo.decode(reader, reader.uint32());
          continue;
        case 16:
          if (tag !== 130) {
            break;
          }

          message.geoTargetConstant = reader.string();
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.device = reader.int32() as any;
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.adSchedule = AdScheduleInfo.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FeedItemTarget {
    return {
      resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "",
      feedItem: isSet(object.feedItem) ? globalThis.String(object.feedItem) : undefined,
      feedItemTargetType: isSet(object.feedItemTargetType)
        ? feedItemTargetTypeEnum_FeedItemTargetTypeFromJSON(object.feedItemTargetType)
        : 0,
      feedItemTargetId: isSet(object.feedItemTargetId) ? Long.fromValue(object.feedItemTargetId) : undefined,
      status: isSet(object.status) ? feedItemTargetStatusEnum_FeedItemTargetStatusFromJSON(object.status) : 0,
      campaign: isSet(object.campaign) ? globalThis.String(object.campaign) : undefined,
      adGroup: isSet(object.adGroup) ? globalThis.String(object.adGroup) : undefined,
      keyword: isSet(object.keyword) ? KeywordInfo.fromJSON(object.keyword) : undefined,
      geoTargetConstant: isSet(object.geoTargetConstant) ? globalThis.String(object.geoTargetConstant) : undefined,
      device: isSet(object.device) ? feedItemTargetDeviceEnum_FeedItemTargetDeviceFromJSON(object.device) : undefined,
      adSchedule: isSet(object.adSchedule) ? AdScheduleInfo.fromJSON(object.adSchedule) : undefined,
    };
  },

  toJSON(message: FeedItemTarget): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    if (message.feedItem !== undefined) {
      obj.feedItem = message.feedItem;
    }
    if (message.feedItemTargetType !== 0) {
      obj.feedItemTargetType = feedItemTargetTypeEnum_FeedItemTargetTypeToJSON(message.feedItemTargetType);
    }
    if (message.feedItemTargetId !== undefined) {
      obj.feedItemTargetId = (message.feedItemTargetId || Long.ZERO).toString();
    }
    if (message.status !== 0) {
      obj.status = feedItemTargetStatusEnum_FeedItemTargetStatusToJSON(message.status);
    }
    if (message.campaign !== undefined) {
      obj.campaign = message.campaign;
    }
    if (message.adGroup !== undefined) {
      obj.adGroup = message.adGroup;
    }
    if (message.keyword !== undefined) {
      obj.keyword = KeywordInfo.toJSON(message.keyword);
    }
    if (message.geoTargetConstant !== undefined) {
      obj.geoTargetConstant = message.geoTargetConstant;
    }
    if (message.device !== undefined) {
      obj.device = feedItemTargetDeviceEnum_FeedItemTargetDeviceToJSON(message.device);
    }
    if (message.adSchedule !== undefined) {
      obj.adSchedule = AdScheduleInfo.toJSON(message.adSchedule);
    }
    return obj;
  },

  create(base?: DeepPartial<FeedItemTarget>): FeedItemTarget {
    return FeedItemTarget.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FeedItemTarget>): FeedItemTarget {
    const message = createBaseFeedItemTarget();
    message.resourceName = object.resourceName ?? "";
    message.feedItem = object.feedItem ?? undefined;
    message.feedItemTargetType = object.feedItemTargetType ?? 0;
    message.feedItemTargetId = (object.feedItemTargetId !== undefined && object.feedItemTargetId !== null)
      ? Long.fromValue(object.feedItemTargetId)
      : undefined;
    message.status = object.status ?? 0;
    message.campaign = object.campaign ?? undefined;
    message.adGroup = object.adGroup ?? undefined;
    message.keyword = (object.keyword !== undefined && object.keyword !== null)
      ? KeywordInfo.fromPartial(object.keyword)
      : undefined;
    message.geoTargetConstant = object.geoTargetConstant ?? undefined;
    message.device = object.device ?? undefined;
    message.adSchedule = (object.adSchedule !== undefined && object.adSchedule !== null)
      ? AdScheduleInfo.fromPartial(object.adSchedule)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
