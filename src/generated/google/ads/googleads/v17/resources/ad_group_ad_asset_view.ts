// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v17/resources/ad_group_ad_asset_view.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { PolicyTopicEntry } from "../common/policy.js";
import {
  AssetFieldTypeEnum_AssetFieldType,
  assetFieldTypeEnum_AssetFieldTypeFromJSON,
  assetFieldTypeEnum_AssetFieldTypeToJSON,
} from "../enums/asset_field_type.js";
import {
  AssetPerformanceLabelEnum_AssetPerformanceLabel,
  assetPerformanceLabelEnum_AssetPerformanceLabelFromJSON,
  assetPerformanceLabelEnum_AssetPerformanceLabelToJSON,
} from "../enums/asset_performance_label.js";
import {
  AssetSourceEnum_AssetSource,
  assetSourceEnum_AssetSourceFromJSON,
  assetSourceEnum_AssetSourceToJSON,
} from "../enums/asset_source.js";
import {
  PolicyApprovalStatusEnum_PolicyApprovalStatus,
  policyApprovalStatusEnum_PolicyApprovalStatusFromJSON,
  policyApprovalStatusEnum_PolicyApprovalStatusToJSON,
} from "../enums/policy_approval_status.js";
import {
  PolicyReviewStatusEnum_PolicyReviewStatus,
  policyReviewStatusEnum_PolicyReviewStatusFromJSON,
  policyReviewStatusEnum_PolicyReviewStatusToJSON,
} from "../enums/policy_review_status.js";
import {
  ServedAssetFieldTypeEnum_ServedAssetFieldType,
  servedAssetFieldTypeEnum_ServedAssetFieldTypeFromJSON,
  servedAssetFieldTypeEnum_ServedAssetFieldTypeToJSON,
} from "../enums/served_asset_field_type.js";

export const protobufPackage = "google.ads.googleads.v17.resources";

/**
 * A link between an AdGroupAd and an Asset.
 * Currently we only support AdGroupAdAssetView for AppAds and Responsive Search
 * Ads.
 */
export interface AdGroupAdAssetView {
  /**
   * Output only. The resource name of the ad group ad asset view.
   * Ad group ad asset view resource names have the form (Before V4):
   *
   * `customers/{customer_id}/adGroupAdAssets/{AdGroupAdAsset.ad_group_id}~{AdGroupAdAsset.ad.ad_id}~{AdGroupAdAsset.asset_id}~{AdGroupAdAsset.field_type}`
   *
   * Ad group ad asset view resource names have the form (Beginning from V4):
   *
   * `customers/{customer_id}/adGroupAdAssetViews/{AdGroupAdAsset.ad_group_id}~{AdGroupAdAsset.ad_id}~{AdGroupAdAsset.asset_id}~{AdGroupAdAsset.field_type}`
   */
  resourceName: string;
  /** Output only. The ad group ad to which the asset is linked. */
  adGroupAd?:
    | string
    | undefined;
  /** Output only. The asset which is linked to the ad group ad. */
  asset?:
    | string
    | undefined;
  /** Output only. Role that the asset takes in the ad. */
  fieldType: AssetFieldTypeEnum_AssetFieldType;
  /**
   * Output only. The status between the asset and the latest version of the ad.
   * If true, the asset is linked to the latest version of the ad. If false, it
   * means the link once existed but has been removed and is no longer present
   * in the latest version of the ad.
   */
  enabled?:
    | boolean
    | undefined;
  /** Output only. Policy information for the ad group ad asset. */
  policySummary:
    | AdGroupAdAssetPolicySummary
    | undefined;
  /** Output only. Performance of an asset linkage. */
  performanceLabel: AssetPerformanceLabelEnum_AssetPerformanceLabel;
  /** Output only. Pinned field. */
  pinnedField: ServedAssetFieldTypeEnum_ServedAssetFieldType;
  /** Output only. Source of the ad group ad asset. */
  source: AssetSourceEnum_AssetSource;
}

/** Contains policy information for an ad group ad asset. */
export interface AdGroupAdAssetPolicySummary {
  /** Output only. The list of policy findings for the ad group ad asset. */
  policyTopicEntries: PolicyTopicEntry[];
  /** Output only. Where in the review process this ad group ad asset is. */
  reviewStatus: PolicyReviewStatusEnum_PolicyReviewStatus;
  /**
   * Output only. The overall approval status of this ad group ad asset,
   * calculated based on the status of its individual policy topic entries.
   */
  approvalStatus: PolicyApprovalStatusEnum_PolicyApprovalStatus;
}

function createBaseAdGroupAdAssetView(): AdGroupAdAssetView {
  return {
    resourceName: "",
    adGroupAd: undefined,
    asset: undefined,
    fieldType: 0,
    enabled: undefined,
    policySummary: undefined,
    performanceLabel: 0,
    pinnedField: 0,
    source: 0,
  };
}

export const AdGroupAdAssetView: MessageFns<AdGroupAdAssetView> = {
  encode(message: AdGroupAdAssetView, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(10).string(message.resourceName);
    }
    if (message.adGroupAd !== undefined) {
      writer.uint32(74).string(message.adGroupAd);
    }
    if (message.asset !== undefined) {
      writer.uint32(82).string(message.asset);
    }
    if (message.fieldType !== 0) {
      writer.uint32(16).int32(message.fieldType);
    }
    if (message.enabled !== undefined) {
      writer.uint32(64).bool(message.enabled);
    }
    if (message.policySummary !== undefined) {
      AdGroupAdAssetPolicySummary.encode(message.policySummary, writer.uint32(26).fork()).join();
    }
    if (message.performanceLabel !== 0) {
      writer.uint32(32).int32(message.performanceLabel);
    }
    if (message.pinnedField !== 0) {
      writer.uint32(88).int32(message.pinnedField);
    }
    if (message.source !== 0) {
      writer.uint32(96).int32(message.source);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AdGroupAdAssetView {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAdGroupAdAssetView();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceName = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.adGroupAd = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.asset = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.fieldType = reader.int32() as any;
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.enabled = reader.bool();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.policySummary = AdGroupAdAssetPolicySummary.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.performanceLabel = reader.int32() as any;
          continue;
        case 11:
          if (tag !== 88) {
            break;
          }

          message.pinnedField = reader.int32() as any;
          continue;
        case 12:
          if (tag !== 96) {
            break;
          }

          message.source = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AdGroupAdAssetView {
    return {
      resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "",
      adGroupAd: isSet(object.adGroupAd) ? globalThis.String(object.adGroupAd) : undefined,
      asset: isSet(object.asset) ? globalThis.String(object.asset) : undefined,
      fieldType: isSet(object.fieldType) ? assetFieldTypeEnum_AssetFieldTypeFromJSON(object.fieldType) : 0,
      enabled: isSet(object.enabled) ? globalThis.Boolean(object.enabled) : undefined,
      policySummary: isSet(object.policySummary)
        ? AdGroupAdAssetPolicySummary.fromJSON(object.policySummary)
        : undefined,
      performanceLabel: isSet(object.performanceLabel)
        ? assetPerformanceLabelEnum_AssetPerformanceLabelFromJSON(object.performanceLabel)
        : 0,
      pinnedField: isSet(object.pinnedField)
        ? servedAssetFieldTypeEnum_ServedAssetFieldTypeFromJSON(object.pinnedField)
        : 0,
      source: isSet(object.source) ? assetSourceEnum_AssetSourceFromJSON(object.source) : 0,
    };
  },

  toJSON(message: AdGroupAdAssetView): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    if (message.adGroupAd !== undefined) {
      obj.adGroupAd = message.adGroupAd;
    }
    if (message.asset !== undefined) {
      obj.asset = message.asset;
    }
    if (message.fieldType !== 0) {
      obj.fieldType = assetFieldTypeEnum_AssetFieldTypeToJSON(message.fieldType);
    }
    if (message.enabled !== undefined) {
      obj.enabled = message.enabled;
    }
    if (message.policySummary !== undefined) {
      obj.policySummary = AdGroupAdAssetPolicySummary.toJSON(message.policySummary);
    }
    if (message.performanceLabel !== 0) {
      obj.performanceLabel = assetPerformanceLabelEnum_AssetPerformanceLabelToJSON(message.performanceLabel);
    }
    if (message.pinnedField !== 0) {
      obj.pinnedField = servedAssetFieldTypeEnum_ServedAssetFieldTypeToJSON(message.pinnedField);
    }
    if (message.source !== 0) {
      obj.source = assetSourceEnum_AssetSourceToJSON(message.source);
    }
    return obj;
  },

  create(base?: DeepPartial<AdGroupAdAssetView>): AdGroupAdAssetView {
    return AdGroupAdAssetView.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AdGroupAdAssetView>): AdGroupAdAssetView {
    const message = createBaseAdGroupAdAssetView();
    message.resourceName = object.resourceName ?? "";
    message.adGroupAd = object.adGroupAd ?? undefined;
    message.asset = object.asset ?? undefined;
    message.fieldType = object.fieldType ?? 0;
    message.enabled = object.enabled ?? undefined;
    message.policySummary = (object.policySummary !== undefined && object.policySummary !== null)
      ? AdGroupAdAssetPolicySummary.fromPartial(object.policySummary)
      : undefined;
    message.performanceLabel = object.performanceLabel ?? 0;
    message.pinnedField = object.pinnedField ?? 0;
    message.source = object.source ?? 0;
    return message;
  },
};

function createBaseAdGroupAdAssetPolicySummary(): AdGroupAdAssetPolicySummary {
  return { policyTopicEntries: [], reviewStatus: 0, approvalStatus: 0 };
}

export const AdGroupAdAssetPolicySummary: MessageFns<AdGroupAdAssetPolicySummary> = {
  encode(message: AdGroupAdAssetPolicySummary, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.policyTopicEntries) {
      PolicyTopicEntry.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.reviewStatus !== 0) {
      writer.uint32(16).int32(message.reviewStatus);
    }
    if (message.approvalStatus !== 0) {
      writer.uint32(24).int32(message.approvalStatus);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AdGroupAdAssetPolicySummary {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAdGroupAdAssetPolicySummary();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.policyTopicEntries.push(PolicyTopicEntry.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.reviewStatus = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.approvalStatus = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AdGroupAdAssetPolicySummary {
    return {
      policyTopicEntries: globalThis.Array.isArray(object?.policyTopicEntries)
        ? object.policyTopicEntries.map((e: any) => PolicyTopicEntry.fromJSON(e))
        : [],
      reviewStatus: isSet(object.reviewStatus)
        ? policyReviewStatusEnum_PolicyReviewStatusFromJSON(object.reviewStatus)
        : 0,
      approvalStatus: isSet(object.approvalStatus)
        ? policyApprovalStatusEnum_PolicyApprovalStatusFromJSON(object.approvalStatus)
        : 0,
    };
  },

  toJSON(message: AdGroupAdAssetPolicySummary): unknown {
    const obj: any = {};
    if (message.policyTopicEntries?.length) {
      obj.policyTopicEntries = message.policyTopicEntries.map((e) => PolicyTopicEntry.toJSON(e));
    }
    if (message.reviewStatus !== 0) {
      obj.reviewStatus = policyReviewStatusEnum_PolicyReviewStatusToJSON(message.reviewStatus);
    }
    if (message.approvalStatus !== 0) {
      obj.approvalStatus = policyApprovalStatusEnum_PolicyApprovalStatusToJSON(message.approvalStatus);
    }
    return obj;
  },

  create(base?: DeepPartial<AdGroupAdAssetPolicySummary>): AdGroupAdAssetPolicySummary {
    return AdGroupAdAssetPolicySummary.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AdGroupAdAssetPolicySummary>): AdGroupAdAssetPolicySummary {
    const message = createBaseAdGroupAdAssetPolicySummary();
    message.policyTopicEntries = object.policyTopicEntries?.map((e) => PolicyTopicEntry.fromPartial(e)) || [];
    message.reviewStatus = object.reviewStatus ?? 0;
    message.approvalStatus = object.approvalStatus ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
