// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v17/resources/shopping_product.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import {
  ProductAvailabilityEnum_ProductAvailability,
  productAvailabilityEnum_ProductAvailabilityFromJSON,
  productAvailabilityEnum_ProductAvailabilityToJSON,
} from "../enums/product_availability.js";
import {
  ProductChannelEnum_ProductChannel,
  productChannelEnum_ProductChannelFromJSON,
  productChannelEnum_ProductChannelToJSON,
} from "../enums/product_channel.js";
import {
  ProductChannelExclusivityEnum_ProductChannelExclusivity,
  productChannelExclusivityEnum_ProductChannelExclusivityFromJSON,
  productChannelExclusivityEnum_ProductChannelExclusivityToJSON,
} from "../enums/product_channel_exclusivity.js";
import {
  ProductConditionEnum_ProductCondition,
  productConditionEnum_ProductConditionFromJSON,
  productConditionEnum_ProductConditionToJSON,
} from "../enums/product_condition.js";
import {
  ProductIssueSeverityEnum_ProductIssueSeverity,
  productIssueSeverityEnum_ProductIssueSeverityFromJSON,
  productIssueSeverityEnum_ProductIssueSeverityToJSON,
} from "../enums/product_issue_severity.js";
import {
  ProductStatusEnum_ProductStatus,
  productStatusEnum_ProductStatusFromJSON,
  productStatusEnum_ProductStatusToJSON,
} from "../enums/product_status.js";

export const protobufPackage = "google.ads.googleads.v17.resources";

/**
 * A shopping product from Google Merchant Center that can be advertised by
 * campaigns.
 *
 * The resource returns currently existing products from Google Merchant Center
 * accounts linked with the customer. A campaign includes a product by
 * specifying its merchant id (or, if available, the Multi Client Account id of
 * the merchant) in the `ShoppingSetting`, and can limit the inclusion to
 * products having a specified feed label. Standard Shopping campaigns can also
 * limit the inclusion through a `campaign_criterion.listing_scope`.
 *
 * Queries to this resource specify a scope:
 * Account:
 *   - Filters on campaigns or ad groups are not specified.
 *   - All products from the linked Google Merchant Center accounts are
 *     returned.
 *   - Metrics and some fields (see the per-field documentation) are aggregated
 *     across all Shopping and Performance Max campaigns that include a product.
 * Campaign:
 *   - An equality filter on `campaign` is specified. Supported campaign types
 *     are Shopping, Performance Max, Demand Gen, Video.
 *   - Only products that are included by the specified campaign are returned.
 *   - Metrics and some fields (see the per-field documentation) are restricted
 *     to the specified campaign.
 * Ad group:
 *   - An equality filter on `ad group` and `campaign` is specified. Supported
 *     campaign types are Shopping, Demand Gen, Video.
 *   - Only products that are included by the specified campaign are returned.
 *   - Metrics and some fields (see the per-field documentation) are restricted
 *     to the specified ad group.
 * Note that segmentation by date segments is not permitted and will return
 * UNSUPPORTED_DATE_SEGMENTATION error. On the other hand, filtering on date
 * segments is allowed.
 */
export interface ShoppingProduct {
  /**
   * Output only. The resource name of the shopping product.
   * Shopping product resource names have the form:
   *
   * `customers/{customer_id}/shoppingProducts/{merchant_center_id}~{channel}~{language_code}~{feed_label}~{item_id}`
   */
  resourceName: string;
  /** Output only. The id of the merchant that owns the product. */
  merchantCenterId: Long;
  /** Output only. The product channel describing the locality of the product. */
  channel: ProductChannelEnum_ProductChannel;
  /**
   * Output only. The language code as provided by the merchant, in BCP 47
   * format.
   */
  languageCode: string;
  /** Output only. The product feed label as provided by the merchant. */
  feedLabel: string;
  /** Output only. The item id of the product as provided by the merchant. */
  itemId: string;
  /**
   * Output only. The id of the Multi Client Account of the merchant, if
   * present.
   */
  multiClientAccountId?:
    | Long
    | undefined;
  /** Output only. The title of the product as provided by the merchant. */
  title?:
    | string
    | undefined;
  /** Output only. The brand of the product as provided by the merchant. */
  brand?:
    | string
    | undefined;
  /**
   * Output only. The price of the product in micros as provided by the
   * merchant, in the currency specified in `currency_code` (e.g. $2.97 is
   * reported as 2970000).
   */
  priceMicros?:
    | Long
    | undefined;
  /**
   * Output only. The currency code as provided by the merchant, in ISO 4217
   * format.
   */
  currencyCode?:
    | string
    | undefined;
  /**
   * Output only. The channel exclusivity of the product as provided by the
   * merchant.
   */
  channelExclusivity?:
    | ProductChannelExclusivityEnum_ProductChannelExclusivity
    | undefined;
  /** Output only. The condition of the product as provided by the merchant. */
  condition?:
    | ProductConditionEnum_ProductCondition
    | undefined;
  /** Output only. The availability of the product as provided by the merchant. */
  availability?:
    | ProductAvailabilityEnum_ProductAvailability
    | undefined;
  /**
   * Output only. Upper-case two-letter ISO 3166-1 code of the regions where the
   * product is intended to be shown in ads.
   */
  targetCountries: string[];
  /**
   * Output only. The custom attribute 0 of the product as provided by the
   * merchant.
   */
  customAttribute0?:
    | string
    | undefined;
  /**
   * Output only. The custom attribute 1 of the product as provided by the
   * merchant.
   */
  customAttribute1?:
    | string
    | undefined;
  /**
   * Output only. The custom attribute 2 of the product as provided by the
   * merchant.
   */
  customAttribute2?:
    | string
    | undefined;
  /**
   * Output only. The custom attribute 3 of the product as provided by the
   * merchant.
   */
  customAttribute3?:
    | string
    | undefined;
  /**
   * Output only. The custom attribute 4 of the product as provided by the
   * merchant.
   */
  customAttribute4?:
    | string
    | undefined;
  /** Output only. The category level 1 of the product. */
  categoryLevel1?:
    | string
    | undefined;
  /** Output only. The category level 2 of the product. */
  categoryLevel2?:
    | string
    | undefined;
  /** Output only. The category level 3 of the product. */
  categoryLevel3?:
    | string
    | undefined;
  /** Output only. The category level 4 of the product. */
  categoryLevel4?:
    | string
    | undefined;
  /** Output only. The category level 5 of the product. */
  categoryLevel5?:
    | string
    | undefined;
  /** Output only. The product type level 1 as provided by the merchant. */
  productTypeLevel1?:
    | string
    | undefined;
  /** Output only. The product type level 2 as provided by the merchant. */
  productTypeLevel2?:
    | string
    | undefined;
  /** Output only. The product type level 3 as provided by the merchant. */
  productTypeLevel3?:
    | string
    | undefined;
  /** Output only. The product type level 4 as provided by the merchant. */
  productTypeLevel4?:
    | string
    | undefined;
  /** Output only. The product type level 5 as provided by the merchant. */
  productTypeLevel5?:
    | string
    | undefined;
  /**
   * Output only. The effective maximum cost-per-click (effective max. CPC) of
   * the product. This field is available only if the query specifies the
   * campaign or ad group scope, and if the campaign uses manual bidding. The
   * value is the highest bid set for the product in product groups across all
   * enabled ad groups. It represents the most you're willing to pay for a click
   * on the product. This field can take up to 24 hours to update.
   */
  effectiveMaxCpcMicros?:
    | Long
    | undefined;
  /**
   * Output only. The status that indicates whether the product can show in ads.
   * The value of this field is restricted to the scope specified in the query,
   * see the documentation of the resource.
   * This field can take up to 24 hours to update.
   */
  status: ProductStatusEnum_ProductStatus;
  /**
   * Output only. The list of issues affecting whether the product can show in
   * ads. The value of this field is restricted to the scope specified in the
   * query, see the documentation of the resource. This field can take up to 24
   * hours to update.
   */
  issues: ShoppingProduct_ProductIssue[];
  /**
   * Output only. A campaign that includes the product.
   * This field is selectable only in the campaign scope, which requires an
   * equality filter on `campaign`.
   */
  campaign?:
    | string
    | undefined;
  /**
   * Output only. An ad group of a campaign that includes the product.
   * This field is selectable only in the ad group scope, which requires an
   * equality filter on `campaign` and `ad_group`.
   */
  adGroup?: string | undefined;
}

/** An issue affecting whether a product can show in ads. */
export interface ShoppingProduct_ProductIssue {
  /** Output only. The error code that identifies the issue. */
  errorCode: string;
  /** Output only. The severity of the issue in Google Ads. */
  adsSeverity: ProductIssueSeverityEnum_ProductIssueSeverity;
  /**
   * Output only. The name of the product's attribute, if any, that triggered
   * the issue.
   */
  attributeName?:
    | string
    | undefined;
  /** Output only. The short description of the issue in English. */
  description: string;
  /** Output only. The detailed description of the issue in English. */
  detail: string;
  /** Output only. The URL of the Help Center article for the issue. */
  documentation: string;
  /**
   * Output only. List of upper-case two-letter ISO 3166-1 codes of the
   * regions affected by the issue. If empty, all regions are affected.
   */
  affectedRegions: string[];
}

function createBaseShoppingProduct(): ShoppingProduct {
  return {
    resourceName: "",
    merchantCenterId: Long.ZERO,
    channel: 0,
    languageCode: "",
    feedLabel: "",
    itemId: "",
    multiClientAccountId: undefined,
    title: undefined,
    brand: undefined,
    priceMicros: undefined,
    currencyCode: undefined,
    channelExclusivity: undefined,
    condition: undefined,
    availability: undefined,
    targetCountries: [],
    customAttribute0: undefined,
    customAttribute1: undefined,
    customAttribute2: undefined,
    customAttribute3: undefined,
    customAttribute4: undefined,
    categoryLevel1: undefined,
    categoryLevel2: undefined,
    categoryLevel3: undefined,
    categoryLevel4: undefined,
    categoryLevel5: undefined,
    productTypeLevel1: undefined,
    productTypeLevel2: undefined,
    productTypeLevel3: undefined,
    productTypeLevel4: undefined,
    productTypeLevel5: undefined,
    effectiveMaxCpcMicros: undefined,
    status: 0,
    issues: [],
    campaign: undefined,
    adGroup: undefined,
  };
}

export const ShoppingProduct: MessageFns<ShoppingProduct> = {
  encode(message: ShoppingProduct, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(10).string(message.resourceName);
    }
    if (!message.merchantCenterId.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.merchantCenterId.toString());
    }
    if (message.channel !== 0) {
      writer.uint32(24).int32(message.channel);
    }
    if (message.languageCode !== "") {
      writer.uint32(34).string(message.languageCode);
    }
    if (message.feedLabel !== "") {
      writer.uint32(42).string(message.feedLabel);
    }
    if (message.itemId !== "") {
      writer.uint32(50).string(message.itemId);
    }
    if (message.multiClientAccountId !== undefined) {
      writer.uint32(56).int64(message.multiClientAccountId.toString());
    }
    if (message.title !== undefined) {
      writer.uint32(66).string(message.title);
    }
    if (message.brand !== undefined) {
      writer.uint32(74).string(message.brand);
    }
    if (message.priceMicros !== undefined) {
      writer.uint32(80).int64(message.priceMicros.toString());
    }
    if (message.currencyCode !== undefined) {
      writer.uint32(90).string(message.currencyCode);
    }
    if (message.channelExclusivity !== undefined) {
      writer.uint32(96).int32(message.channelExclusivity);
    }
    if (message.condition !== undefined) {
      writer.uint32(104).int32(message.condition);
    }
    if (message.availability !== undefined) {
      writer.uint32(112).int32(message.availability);
    }
    for (const v of message.targetCountries) {
      writer.uint32(122).string(v!);
    }
    if (message.customAttribute0 !== undefined) {
      writer.uint32(130).string(message.customAttribute0);
    }
    if (message.customAttribute1 !== undefined) {
      writer.uint32(138).string(message.customAttribute1);
    }
    if (message.customAttribute2 !== undefined) {
      writer.uint32(146).string(message.customAttribute2);
    }
    if (message.customAttribute3 !== undefined) {
      writer.uint32(154).string(message.customAttribute3);
    }
    if (message.customAttribute4 !== undefined) {
      writer.uint32(162).string(message.customAttribute4);
    }
    if (message.categoryLevel1 !== undefined) {
      writer.uint32(170).string(message.categoryLevel1);
    }
    if (message.categoryLevel2 !== undefined) {
      writer.uint32(178).string(message.categoryLevel2);
    }
    if (message.categoryLevel3 !== undefined) {
      writer.uint32(186).string(message.categoryLevel3);
    }
    if (message.categoryLevel4 !== undefined) {
      writer.uint32(194).string(message.categoryLevel4);
    }
    if (message.categoryLevel5 !== undefined) {
      writer.uint32(202).string(message.categoryLevel5);
    }
    if (message.productTypeLevel1 !== undefined) {
      writer.uint32(210).string(message.productTypeLevel1);
    }
    if (message.productTypeLevel2 !== undefined) {
      writer.uint32(218).string(message.productTypeLevel2);
    }
    if (message.productTypeLevel3 !== undefined) {
      writer.uint32(226).string(message.productTypeLevel3);
    }
    if (message.productTypeLevel4 !== undefined) {
      writer.uint32(234).string(message.productTypeLevel4);
    }
    if (message.productTypeLevel5 !== undefined) {
      writer.uint32(242).string(message.productTypeLevel5);
    }
    if (message.effectiveMaxCpcMicros !== undefined) {
      writer.uint32(248).int64(message.effectiveMaxCpcMicros.toString());
    }
    if (message.status !== 0) {
      writer.uint32(256).int32(message.status);
    }
    for (const v of message.issues) {
      ShoppingProduct_ProductIssue.encode(v!, writer.uint32(266).fork()).join();
    }
    if (message.campaign !== undefined) {
      writer.uint32(274).string(message.campaign);
    }
    if (message.adGroup !== undefined) {
      writer.uint32(282).string(message.adGroup);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ShoppingProduct {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseShoppingProduct();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceName = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.merchantCenterId = Long.fromString(reader.int64().toString());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.channel = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.languageCode = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.feedLabel = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.itemId = reader.string();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.multiClientAccountId = Long.fromString(reader.int64().toString());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.title = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.brand = reader.string();
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.priceMicros = Long.fromString(reader.int64().toString());
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.currencyCode = reader.string();
          continue;
        case 12:
          if (tag !== 96) {
            break;
          }

          message.channelExclusivity = reader.int32() as any;
          continue;
        case 13:
          if (tag !== 104) {
            break;
          }

          message.condition = reader.int32() as any;
          continue;
        case 14:
          if (tag !== 112) {
            break;
          }

          message.availability = reader.int32() as any;
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.targetCountries.push(reader.string());
          continue;
        case 16:
          if (tag !== 130) {
            break;
          }

          message.customAttribute0 = reader.string();
          continue;
        case 17:
          if (tag !== 138) {
            break;
          }

          message.customAttribute1 = reader.string();
          continue;
        case 18:
          if (tag !== 146) {
            break;
          }

          message.customAttribute2 = reader.string();
          continue;
        case 19:
          if (tag !== 154) {
            break;
          }

          message.customAttribute3 = reader.string();
          continue;
        case 20:
          if (tag !== 162) {
            break;
          }

          message.customAttribute4 = reader.string();
          continue;
        case 21:
          if (tag !== 170) {
            break;
          }

          message.categoryLevel1 = reader.string();
          continue;
        case 22:
          if (tag !== 178) {
            break;
          }

          message.categoryLevel2 = reader.string();
          continue;
        case 23:
          if (tag !== 186) {
            break;
          }

          message.categoryLevel3 = reader.string();
          continue;
        case 24:
          if (tag !== 194) {
            break;
          }

          message.categoryLevel4 = reader.string();
          continue;
        case 25:
          if (tag !== 202) {
            break;
          }

          message.categoryLevel5 = reader.string();
          continue;
        case 26:
          if (tag !== 210) {
            break;
          }

          message.productTypeLevel1 = reader.string();
          continue;
        case 27:
          if (tag !== 218) {
            break;
          }

          message.productTypeLevel2 = reader.string();
          continue;
        case 28:
          if (tag !== 226) {
            break;
          }

          message.productTypeLevel3 = reader.string();
          continue;
        case 29:
          if (tag !== 234) {
            break;
          }

          message.productTypeLevel4 = reader.string();
          continue;
        case 30:
          if (tag !== 242) {
            break;
          }

          message.productTypeLevel5 = reader.string();
          continue;
        case 31:
          if (tag !== 248) {
            break;
          }

          message.effectiveMaxCpcMicros = Long.fromString(reader.int64().toString());
          continue;
        case 32:
          if (tag !== 256) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        case 33:
          if (tag !== 266) {
            break;
          }

          message.issues.push(ShoppingProduct_ProductIssue.decode(reader, reader.uint32()));
          continue;
        case 34:
          if (tag !== 274) {
            break;
          }

          message.campaign = reader.string();
          continue;
        case 35:
          if (tag !== 282) {
            break;
          }

          message.adGroup = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ShoppingProduct {
    return {
      resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "",
      merchantCenterId: isSet(object.merchantCenterId) ? Long.fromValue(object.merchantCenterId) : Long.ZERO,
      channel: isSet(object.channel) ? productChannelEnum_ProductChannelFromJSON(object.channel) : 0,
      languageCode: isSet(object.languageCode) ? globalThis.String(object.languageCode) : "",
      feedLabel: isSet(object.feedLabel) ? globalThis.String(object.feedLabel) : "",
      itemId: isSet(object.itemId) ? globalThis.String(object.itemId) : "",
      multiClientAccountId: isSet(object.multiClientAccountId)
        ? Long.fromValue(object.multiClientAccountId)
        : undefined,
      title: isSet(object.title) ? globalThis.String(object.title) : undefined,
      brand: isSet(object.brand) ? globalThis.String(object.brand) : undefined,
      priceMicros: isSet(object.priceMicros) ? Long.fromValue(object.priceMicros) : undefined,
      currencyCode: isSet(object.currencyCode) ? globalThis.String(object.currencyCode) : undefined,
      channelExclusivity: isSet(object.channelExclusivity)
        ? productChannelExclusivityEnum_ProductChannelExclusivityFromJSON(object.channelExclusivity)
        : undefined,
      condition: isSet(object.condition) ? productConditionEnum_ProductConditionFromJSON(object.condition) : undefined,
      availability: isSet(object.availability)
        ? productAvailabilityEnum_ProductAvailabilityFromJSON(object.availability)
        : undefined,
      targetCountries: globalThis.Array.isArray(object?.targetCountries)
        ? object.targetCountries.map((e: any) => globalThis.String(e))
        : [],
      customAttribute0: isSet(object.customAttribute0) ? globalThis.String(object.customAttribute0) : undefined,
      customAttribute1: isSet(object.customAttribute1) ? globalThis.String(object.customAttribute1) : undefined,
      customAttribute2: isSet(object.customAttribute2) ? globalThis.String(object.customAttribute2) : undefined,
      customAttribute3: isSet(object.customAttribute3) ? globalThis.String(object.customAttribute3) : undefined,
      customAttribute4: isSet(object.customAttribute4) ? globalThis.String(object.customAttribute4) : undefined,
      categoryLevel1: isSet(object.categoryLevel1) ? globalThis.String(object.categoryLevel1) : undefined,
      categoryLevel2: isSet(object.categoryLevel2) ? globalThis.String(object.categoryLevel2) : undefined,
      categoryLevel3: isSet(object.categoryLevel3) ? globalThis.String(object.categoryLevel3) : undefined,
      categoryLevel4: isSet(object.categoryLevel4) ? globalThis.String(object.categoryLevel4) : undefined,
      categoryLevel5: isSet(object.categoryLevel5) ? globalThis.String(object.categoryLevel5) : undefined,
      productTypeLevel1: isSet(object.productTypeLevel1) ? globalThis.String(object.productTypeLevel1) : undefined,
      productTypeLevel2: isSet(object.productTypeLevel2) ? globalThis.String(object.productTypeLevel2) : undefined,
      productTypeLevel3: isSet(object.productTypeLevel3) ? globalThis.String(object.productTypeLevel3) : undefined,
      productTypeLevel4: isSet(object.productTypeLevel4) ? globalThis.String(object.productTypeLevel4) : undefined,
      productTypeLevel5: isSet(object.productTypeLevel5) ? globalThis.String(object.productTypeLevel5) : undefined,
      effectiveMaxCpcMicros: isSet(object.effectiveMaxCpcMicros)
        ? Long.fromValue(object.effectiveMaxCpcMicros)
        : undefined,
      status: isSet(object.status) ? productStatusEnum_ProductStatusFromJSON(object.status) : 0,
      issues: globalThis.Array.isArray(object?.issues)
        ? object.issues.map((e: any) => ShoppingProduct_ProductIssue.fromJSON(e))
        : [],
      campaign: isSet(object.campaign) ? globalThis.String(object.campaign) : undefined,
      adGroup: isSet(object.adGroup) ? globalThis.String(object.adGroup) : undefined,
    };
  },

  toJSON(message: ShoppingProduct): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    if (!message.merchantCenterId.equals(Long.ZERO)) {
      obj.merchantCenterId = (message.merchantCenterId || Long.ZERO).toString();
    }
    if (message.channel !== 0) {
      obj.channel = productChannelEnum_ProductChannelToJSON(message.channel);
    }
    if (message.languageCode !== "") {
      obj.languageCode = message.languageCode;
    }
    if (message.feedLabel !== "") {
      obj.feedLabel = message.feedLabel;
    }
    if (message.itemId !== "") {
      obj.itemId = message.itemId;
    }
    if (message.multiClientAccountId !== undefined) {
      obj.multiClientAccountId = (message.multiClientAccountId || Long.ZERO).toString();
    }
    if (message.title !== undefined) {
      obj.title = message.title;
    }
    if (message.brand !== undefined) {
      obj.brand = message.brand;
    }
    if (message.priceMicros !== undefined) {
      obj.priceMicros = (message.priceMicros || Long.ZERO).toString();
    }
    if (message.currencyCode !== undefined) {
      obj.currencyCode = message.currencyCode;
    }
    if (message.channelExclusivity !== undefined) {
      obj.channelExclusivity = productChannelExclusivityEnum_ProductChannelExclusivityToJSON(
        message.channelExclusivity,
      );
    }
    if (message.condition !== undefined) {
      obj.condition = productConditionEnum_ProductConditionToJSON(message.condition);
    }
    if (message.availability !== undefined) {
      obj.availability = productAvailabilityEnum_ProductAvailabilityToJSON(message.availability);
    }
    if (message.targetCountries?.length) {
      obj.targetCountries = message.targetCountries;
    }
    if (message.customAttribute0 !== undefined) {
      obj.customAttribute0 = message.customAttribute0;
    }
    if (message.customAttribute1 !== undefined) {
      obj.customAttribute1 = message.customAttribute1;
    }
    if (message.customAttribute2 !== undefined) {
      obj.customAttribute2 = message.customAttribute2;
    }
    if (message.customAttribute3 !== undefined) {
      obj.customAttribute3 = message.customAttribute3;
    }
    if (message.customAttribute4 !== undefined) {
      obj.customAttribute4 = message.customAttribute4;
    }
    if (message.categoryLevel1 !== undefined) {
      obj.categoryLevel1 = message.categoryLevel1;
    }
    if (message.categoryLevel2 !== undefined) {
      obj.categoryLevel2 = message.categoryLevel2;
    }
    if (message.categoryLevel3 !== undefined) {
      obj.categoryLevel3 = message.categoryLevel3;
    }
    if (message.categoryLevel4 !== undefined) {
      obj.categoryLevel4 = message.categoryLevel4;
    }
    if (message.categoryLevel5 !== undefined) {
      obj.categoryLevel5 = message.categoryLevel5;
    }
    if (message.productTypeLevel1 !== undefined) {
      obj.productTypeLevel1 = message.productTypeLevel1;
    }
    if (message.productTypeLevel2 !== undefined) {
      obj.productTypeLevel2 = message.productTypeLevel2;
    }
    if (message.productTypeLevel3 !== undefined) {
      obj.productTypeLevel3 = message.productTypeLevel3;
    }
    if (message.productTypeLevel4 !== undefined) {
      obj.productTypeLevel4 = message.productTypeLevel4;
    }
    if (message.productTypeLevel5 !== undefined) {
      obj.productTypeLevel5 = message.productTypeLevel5;
    }
    if (message.effectiveMaxCpcMicros !== undefined) {
      obj.effectiveMaxCpcMicros = (message.effectiveMaxCpcMicros || Long.ZERO).toString();
    }
    if (message.status !== 0) {
      obj.status = productStatusEnum_ProductStatusToJSON(message.status);
    }
    if (message.issues?.length) {
      obj.issues = message.issues.map((e) => ShoppingProduct_ProductIssue.toJSON(e));
    }
    if (message.campaign !== undefined) {
      obj.campaign = message.campaign;
    }
    if (message.adGroup !== undefined) {
      obj.adGroup = message.adGroup;
    }
    return obj;
  },

  create(base?: DeepPartial<ShoppingProduct>): ShoppingProduct {
    return ShoppingProduct.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ShoppingProduct>): ShoppingProduct {
    const message = createBaseShoppingProduct();
    message.resourceName = object.resourceName ?? "";
    message.merchantCenterId = (object.merchantCenterId !== undefined && object.merchantCenterId !== null)
      ? Long.fromValue(object.merchantCenterId)
      : Long.ZERO;
    message.channel = object.channel ?? 0;
    message.languageCode = object.languageCode ?? "";
    message.feedLabel = object.feedLabel ?? "";
    message.itemId = object.itemId ?? "";
    message.multiClientAccountId = (object.multiClientAccountId !== undefined && object.multiClientAccountId !== null)
      ? Long.fromValue(object.multiClientAccountId)
      : undefined;
    message.title = object.title ?? undefined;
    message.brand = object.brand ?? undefined;
    message.priceMicros = (object.priceMicros !== undefined && object.priceMicros !== null)
      ? Long.fromValue(object.priceMicros)
      : undefined;
    message.currencyCode = object.currencyCode ?? undefined;
    message.channelExclusivity = object.channelExclusivity ?? undefined;
    message.condition = object.condition ?? undefined;
    message.availability = object.availability ?? undefined;
    message.targetCountries = object.targetCountries?.map((e) => e) || [];
    message.customAttribute0 = object.customAttribute0 ?? undefined;
    message.customAttribute1 = object.customAttribute1 ?? undefined;
    message.customAttribute2 = object.customAttribute2 ?? undefined;
    message.customAttribute3 = object.customAttribute3 ?? undefined;
    message.customAttribute4 = object.customAttribute4 ?? undefined;
    message.categoryLevel1 = object.categoryLevel1 ?? undefined;
    message.categoryLevel2 = object.categoryLevel2 ?? undefined;
    message.categoryLevel3 = object.categoryLevel3 ?? undefined;
    message.categoryLevel4 = object.categoryLevel4 ?? undefined;
    message.categoryLevel5 = object.categoryLevel5 ?? undefined;
    message.productTypeLevel1 = object.productTypeLevel1 ?? undefined;
    message.productTypeLevel2 = object.productTypeLevel2 ?? undefined;
    message.productTypeLevel3 = object.productTypeLevel3 ?? undefined;
    message.productTypeLevel4 = object.productTypeLevel4 ?? undefined;
    message.productTypeLevel5 = object.productTypeLevel5 ?? undefined;
    message.effectiveMaxCpcMicros =
      (object.effectiveMaxCpcMicros !== undefined && object.effectiveMaxCpcMicros !== null)
        ? Long.fromValue(object.effectiveMaxCpcMicros)
        : undefined;
    message.status = object.status ?? 0;
    message.issues = object.issues?.map((e) => ShoppingProduct_ProductIssue.fromPartial(e)) || [];
    message.campaign = object.campaign ?? undefined;
    message.adGroup = object.adGroup ?? undefined;
    return message;
  },
};

function createBaseShoppingProduct_ProductIssue(): ShoppingProduct_ProductIssue {
  return {
    errorCode: "",
    adsSeverity: 0,
    attributeName: undefined,
    description: "",
    detail: "",
    documentation: "",
    affectedRegions: [],
  };
}

export const ShoppingProduct_ProductIssue: MessageFns<ShoppingProduct_ProductIssue> = {
  encode(message: ShoppingProduct_ProductIssue, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.errorCode !== "") {
      writer.uint32(10).string(message.errorCode);
    }
    if (message.adsSeverity !== 0) {
      writer.uint32(16).int32(message.adsSeverity);
    }
    if (message.attributeName !== undefined) {
      writer.uint32(26).string(message.attributeName);
    }
    if (message.description !== "") {
      writer.uint32(34).string(message.description);
    }
    if (message.detail !== "") {
      writer.uint32(42).string(message.detail);
    }
    if (message.documentation !== "") {
      writer.uint32(50).string(message.documentation);
    }
    for (const v of message.affectedRegions) {
      writer.uint32(58).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ShoppingProduct_ProductIssue {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseShoppingProduct_ProductIssue();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.errorCode = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.adsSeverity = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.attributeName = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.description = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.detail = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.documentation = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.affectedRegions.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ShoppingProduct_ProductIssue {
    return {
      errorCode: isSet(object.errorCode) ? globalThis.String(object.errorCode) : "",
      adsSeverity: isSet(object.adsSeverity)
        ? productIssueSeverityEnum_ProductIssueSeverityFromJSON(object.adsSeverity)
        : 0,
      attributeName: isSet(object.attributeName) ? globalThis.String(object.attributeName) : undefined,
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      detail: isSet(object.detail) ? globalThis.String(object.detail) : "",
      documentation: isSet(object.documentation) ? globalThis.String(object.documentation) : "",
      affectedRegions: globalThis.Array.isArray(object?.affectedRegions)
        ? object.affectedRegions.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ShoppingProduct_ProductIssue): unknown {
    const obj: any = {};
    if (message.errorCode !== "") {
      obj.errorCode = message.errorCode;
    }
    if (message.adsSeverity !== 0) {
      obj.adsSeverity = productIssueSeverityEnum_ProductIssueSeverityToJSON(message.adsSeverity);
    }
    if (message.attributeName !== undefined) {
      obj.attributeName = message.attributeName;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.detail !== "") {
      obj.detail = message.detail;
    }
    if (message.documentation !== "") {
      obj.documentation = message.documentation;
    }
    if (message.affectedRegions?.length) {
      obj.affectedRegions = message.affectedRegions;
    }
    return obj;
  },

  create(base?: DeepPartial<ShoppingProduct_ProductIssue>): ShoppingProduct_ProductIssue {
    return ShoppingProduct_ProductIssue.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ShoppingProduct_ProductIssue>): ShoppingProduct_ProductIssue {
    const message = createBaseShoppingProduct_ProductIssue();
    message.errorCode = object.errorCode ?? "";
    message.adsSeverity = object.adsSeverity ?? 0;
    message.attributeName = object.attributeName ?? undefined;
    message.description = object.description ?? "";
    message.detail = object.detail ?? "";
    message.documentation = object.documentation ?? "";
    message.affectedRegions = object.affectedRegions?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
