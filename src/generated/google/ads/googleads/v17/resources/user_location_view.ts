// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v17/resources/user_location_view.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.googleads.v17.resources";

/**
 * A user location view.
 *
 * User Location View includes all metrics aggregated at the country level,
 * one row per country. It reports metrics at the actual physical location of
 * the user by targeted or not targeted location. If other segment fields are
 * used, you may get more than one row per country.
 */
export interface UserLocationView {
  /**
   * Output only. The resource name of the user location view.
   * UserLocation view resource names have the form:
   *
   * `customers/{customer_id}/userLocationViews/{country_criterion_id}~{targeting_location}`
   */
  resourceName: string;
  /** Output only. Criterion Id for the country. */
  countryCriterionId?:
    | Long
    | undefined;
  /** Output only. Indicates whether location was targeted or not. */
  targetingLocation?: boolean | undefined;
}

function createBaseUserLocationView(): UserLocationView {
  return { resourceName: "", countryCriterionId: undefined, targetingLocation: undefined };
}

export const UserLocationView: MessageFns<UserLocationView> = {
  encode(message: UserLocationView, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(10).string(message.resourceName);
    }
    if (message.countryCriterionId !== undefined) {
      writer.uint32(32).int64(message.countryCriterionId.toString());
    }
    if (message.targetingLocation !== undefined) {
      writer.uint32(40).bool(message.targetingLocation);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserLocationView {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserLocationView();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceName = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.countryCriterionId = Long.fromString(reader.int64().toString());
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.targetingLocation = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserLocationView {
    return {
      resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "",
      countryCriterionId: isSet(object.countryCriterionId) ? Long.fromValue(object.countryCriterionId) : undefined,
      targetingLocation: isSet(object.targetingLocation) ? globalThis.Boolean(object.targetingLocation) : undefined,
    };
  },

  toJSON(message: UserLocationView): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    if (message.countryCriterionId !== undefined) {
      obj.countryCriterionId = (message.countryCriterionId || Long.ZERO).toString();
    }
    if (message.targetingLocation !== undefined) {
      obj.targetingLocation = message.targetingLocation;
    }
    return obj;
  },

  create(base?: DeepPartial<UserLocationView>): UserLocationView {
    return UserLocationView.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UserLocationView>): UserLocationView {
    const message = createBaseUserLocationView();
    message.resourceName = object.resourceName ?? "";
    message.countryCriterionId = (object.countryCriterionId !== undefined && object.countryCriterionId !== null)
      ? Long.fromValue(object.countryCriterionId)
      : undefined;
    message.targetingLocation = object.targetingLocation ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
