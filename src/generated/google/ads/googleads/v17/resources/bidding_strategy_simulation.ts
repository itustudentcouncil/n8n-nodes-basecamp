// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v17/resources/bidding_strategy_simulation.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { TargetCpaSimulationPointList, TargetRoasSimulationPointList } from "../common/simulation.js";
import {
  SimulationModificationMethodEnum_SimulationModificationMethod,
  simulationModificationMethodEnum_SimulationModificationMethodFromJSON,
  simulationModificationMethodEnum_SimulationModificationMethodToJSON,
} from "../enums/simulation_modification_method.js";
import {
  SimulationTypeEnum_SimulationType,
  simulationTypeEnum_SimulationTypeFromJSON,
  simulationTypeEnum_SimulationTypeToJSON,
} from "../enums/simulation_type.js";

export const protobufPackage = "google.ads.googleads.v17.resources";

/**
 * A bidding strategy simulation. Supported combinations of simulation type
 * and simulation modification method are detailed below respectively.
 *
 * 1. TARGET_CPA - UNIFORM
 * 2. TARGET_ROAS - UNIFORM
 */
export interface BiddingStrategySimulation {
  /**
   * Output only. The resource name of the bidding strategy simulation.
   * Bidding strategy simulation resource names have the form:
   *
   * `customers/{customer_id}/biddingStrategySimulations/{bidding_strategy_id}~{type}~{modification_method}~{start_date}~{end_date}`
   */
  resourceName: string;
  /** Output only. Bidding strategy shared set id of the simulation. */
  biddingStrategyId: Long;
  /** Output only. The field that the simulation modifies. */
  type: SimulationTypeEnum_SimulationType;
  /** Output only. How the simulation modifies the field. */
  modificationMethod: SimulationModificationMethodEnum_SimulationModificationMethod;
  /**
   * Output only. First day on which the simulation is based, in YYYY-MM-DD
   * format.
   */
  startDate: string;
  /**
   * Output only. Last day on which the simulation is based, in YYYY-MM-DD
   * format
   */
  endDate: string;
  /** Output only. Simulation points if the simulation type is TARGET_CPA. */
  targetCpaPointList?:
    | TargetCpaSimulationPointList
    | undefined;
  /** Output only. Simulation points if the simulation type is TARGET_ROAS. */
  targetRoasPointList?: TargetRoasSimulationPointList | undefined;
}

function createBaseBiddingStrategySimulation(): BiddingStrategySimulation {
  return {
    resourceName: "",
    biddingStrategyId: Long.ZERO,
    type: 0,
    modificationMethod: 0,
    startDate: "",
    endDate: "",
    targetCpaPointList: undefined,
    targetRoasPointList: undefined,
  };
}

export const BiddingStrategySimulation: MessageFns<BiddingStrategySimulation> = {
  encode(message: BiddingStrategySimulation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(10).string(message.resourceName);
    }
    if (!message.biddingStrategyId.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.biddingStrategyId.toString());
    }
    if (message.type !== 0) {
      writer.uint32(24).int32(message.type);
    }
    if (message.modificationMethod !== 0) {
      writer.uint32(32).int32(message.modificationMethod);
    }
    if (message.startDate !== "") {
      writer.uint32(42).string(message.startDate);
    }
    if (message.endDate !== "") {
      writer.uint32(50).string(message.endDate);
    }
    if (message.targetCpaPointList !== undefined) {
      TargetCpaSimulationPointList.encode(message.targetCpaPointList, writer.uint32(58).fork()).join();
    }
    if (message.targetRoasPointList !== undefined) {
      TargetRoasSimulationPointList.encode(message.targetRoasPointList, writer.uint32(66).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BiddingStrategySimulation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBiddingStrategySimulation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceName = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.biddingStrategyId = Long.fromString(reader.int64().toString());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.modificationMethod = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.startDate = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.endDate = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.targetCpaPointList = TargetCpaSimulationPointList.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.targetRoasPointList = TargetRoasSimulationPointList.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BiddingStrategySimulation {
    return {
      resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "",
      biddingStrategyId: isSet(object.biddingStrategyId) ? Long.fromValue(object.biddingStrategyId) : Long.ZERO,
      type: isSet(object.type) ? simulationTypeEnum_SimulationTypeFromJSON(object.type) : 0,
      modificationMethod: isSet(object.modificationMethod)
        ? simulationModificationMethodEnum_SimulationModificationMethodFromJSON(object.modificationMethod)
        : 0,
      startDate: isSet(object.startDate) ? globalThis.String(object.startDate) : "",
      endDate: isSet(object.endDate) ? globalThis.String(object.endDate) : "",
      targetCpaPointList: isSet(object.targetCpaPointList)
        ? TargetCpaSimulationPointList.fromJSON(object.targetCpaPointList)
        : undefined,
      targetRoasPointList: isSet(object.targetRoasPointList)
        ? TargetRoasSimulationPointList.fromJSON(object.targetRoasPointList)
        : undefined,
    };
  },

  toJSON(message: BiddingStrategySimulation): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    if (!message.biddingStrategyId.equals(Long.ZERO)) {
      obj.biddingStrategyId = (message.biddingStrategyId || Long.ZERO).toString();
    }
    if (message.type !== 0) {
      obj.type = simulationTypeEnum_SimulationTypeToJSON(message.type);
    }
    if (message.modificationMethod !== 0) {
      obj.modificationMethod = simulationModificationMethodEnum_SimulationModificationMethodToJSON(
        message.modificationMethod,
      );
    }
    if (message.startDate !== "") {
      obj.startDate = message.startDate;
    }
    if (message.endDate !== "") {
      obj.endDate = message.endDate;
    }
    if (message.targetCpaPointList !== undefined) {
      obj.targetCpaPointList = TargetCpaSimulationPointList.toJSON(message.targetCpaPointList);
    }
    if (message.targetRoasPointList !== undefined) {
      obj.targetRoasPointList = TargetRoasSimulationPointList.toJSON(message.targetRoasPointList);
    }
    return obj;
  },

  create(base?: DeepPartial<BiddingStrategySimulation>): BiddingStrategySimulation {
    return BiddingStrategySimulation.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BiddingStrategySimulation>): BiddingStrategySimulation {
    const message = createBaseBiddingStrategySimulation();
    message.resourceName = object.resourceName ?? "";
    message.biddingStrategyId = (object.biddingStrategyId !== undefined && object.biddingStrategyId !== null)
      ? Long.fromValue(object.biddingStrategyId)
      : Long.ZERO;
    message.type = object.type ?? 0;
    message.modificationMethod = object.modificationMethod ?? 0;
    message.startDate = object.startDate ?? "";
    message.endDate = object.endDate ?? "";
    message.targetCpaPointList = (object.targetCpaPointList !== undefined && object.targetCpaPointList !== null)
      ? TargetCpaSimulationPointList.fromPartial(object.targetCpaPointList)
      : undefined;
    message.targetRoasPointList = (object.targetRoasPointList !== undefined && object.targetRoasPointList !== null)
      ? TargetRoasSimulationPointList.fromPartial(object.targetRoasPointList)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
