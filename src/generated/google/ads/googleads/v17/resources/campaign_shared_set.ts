// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v17/resources/campaign_shared_set.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import {
  CampaignSharedSetStatusEnum_CampaignSharedSetStatus,
  campaignSharedSetStatusEnum_CampaignSharedSetStatusFromJSON,
  campaignSharedSetStatusEnum_CampaignSharedSetStatusToJSON,
} from "../enums/campaign_shared_set_status.js";

export const protobufPackage = "google.ads.googleads.v17.resources";

/**
 * CampaignSharedSets are used for managing the shared sets associated with a
 * campaign.
 */
export interface CampaignSharedSet {
  /**
   * Immutable. The resource name of the campaign shared set.
   * Campaign shared set resource names have the form:
   *
   * `customers/{customer_id}/campaignSharedSets/{campaign_id}~{shared_set_id}`
   */
  resourceName: string;
  /** Immutable. The campaign to which the campaign shared set belongs. */
  campaign?:
    | string
    | undefined;
  /**
   * Immutable. The shared set associated with the campaign. This may be a
   * negative keyword shared set of another customer. This customer should be a
   * manager of the other customer, otherwise the campaign shared set will exist
   * but have no serving effect. Only negative keyword shared sets can be
   * associated with Shopping campaigns. Only negative placement shared sets can
   * be associated with Display mobile app campaigns.
   */
  sharedSet?:
    | string
    | undefined;
  /** Output only. The status of this campaign shared set. Read only. */
  status: CampaignSharedSetStatusEnum_CampaignSharedSetStatus;
}

function createBaseCampaignSharedSet(): CampaignSharedSet {
  return { resourceName: "", campaign: undefined, sharedSet: undefined, status: 0 };
}

export const CampaignSharedSet: MessageFns<CampaignSharedSet> = {
  encode(message: CampaignSharedSet, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(10).string(message.resourceName);
    }
    if (message.campaign !== undefined) {
      writer.uint32(42).string(message.campaign);
    }
    if (message.sharedSet !== undefined) {
      writer.uint32(50).string(message.sharedSet);
    }
    if (message.status !== 0) {
      writer.uint32(16).int32(message.status);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CampaignSharedSet {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCampaignSharedSet();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceName = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.campaign = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.sharedSet = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CampaignSharedSet {
    return {
      resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "",
      campaign: isSet(object.campaign) ? globalThis.String(object.campaign) : undefined,
      sharedSet: isSet(object.sharedSet) ? globalThis.String(object.sharedSet) : undefined,
      status: isSet(object.status) ? campaignSharedSetStatusEnum_CampaignSharedSetStatusFromJSON(object.status) : 0,
    };
  },

  toJSON(message: CampaignSharedSet): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    if (message.campaign !== undefined) {
      obj.campaign = message.campaign;
    }
    if (message.sharedSet !== undefined) {
      obj.sharedSet = message.sharedSet;
    }
    if (message.status !== 0) {
      obj.status = campaignSharedSetStatusEnum_CampaignSharedSetStatusToJSON(message.status);
    }
    return obj;
  },

  create(base?: DeepPartial<CampaignSharedSet>): CampaignSharedSet {
    return CampaignSharedSet.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CampaignSharedSet>): CampaignSharedSet {
    const message = createBaseCampaignSharedSet();
    message.resourceName = object.resourceName ?? "";
    message.campaign = object.campaign ?? undefined;
    message.sharedSet = object.sharedSet ?? undefined;
    message.status = object.status ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
