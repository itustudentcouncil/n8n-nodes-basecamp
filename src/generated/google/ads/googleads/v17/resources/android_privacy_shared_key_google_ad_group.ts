// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v17/resources/android_privacy_shared_key_google_ad_group.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import {
  AndroidPrivacyInteractionTypeEnum_AndroidPrivacyInteractionType,
  androidPrivacyInteractionTypeEnum_AndroidPrivacyInteractionTypeFromJSON,
  androidPrivacyInteractionTypeEnum_AndroidPrivacyInteractionTypeToJSON,
} from "../enums/android_privacy_interaction_type.js";
import {
  AndroidPrivacyNetworkTypeEnum_AndroidPrivacyNetworkType,
  androidPrivacyNetworkTypeEnum_AndroidPrivacyNetworkTypeFromJSON,
  androidPrivacyNetworkTypeEnum_AndroidPrivacyNetworkTypeToJSON,
} from "../enums/android_privacy_network_type.js";

export const protobufPackage = "google.ads.googleads.v17.resources";

/** An Android privacy shared key view for Google ad group key. */
export interface AndroidPrivacySharedKeyGoogleAdGroup {
  /**
   * Output only. The resource name of the Android privacy shared key.
   * Android privacy shared key resource names have the form:
   *
   * `customers/{customer_id}/androidPrivacySharedKeyGoogleAdGroups/{campaign_id}~{ad_group_id}~{android_privacy_interaction_type}~{android_privacy_network_type}~{android_privacy_interaction_date(yyyy-mm-dd)}`
   */
  resourceName: string;
  /** Output only. The campaign ID used in the share key encoding. */
  campaignId: Long;
  /** Output only. The interaction type enum used in the share key encoding. */
  androidPrivacyInteractionType: AndroidPrivacyInteractionTypeEnum_AndroidPrivacyInteractionType;
  /**
   * Output only. The interaction date used in the shared key encoding in the
   * format of "YYYY-MM-DD" in UTC timezone.
   */
  androidPrivacyInteractionDate: string;
  /** Output only. The network type enum used in the share key encoding. */
  androidPrivacyNetworkType: AndroidPrivacyNetworkTypeEnum_AndroidPrivacyNetworkType;
  /** Output only. The ad group ID used in the share key encoding. */
  adGroupId: Long;
  /**
   * Output only. 128 bit hex string of the encoded shared ad group key,
   * including a '0x' prefix. This key can be used to do a bitwise OR operator
   * with the aggregate conversion key to create a full aggregation key to
   * retrieve the Aggregate API Report in Android Privacy Sandbox.
   */
  sharedAdGroupKey: string;
}

function createBaseAndroidPrivacySharedKeyGoogleAdGroup(): AndroidPrivacySharedKeyGoogleAdGroup {
  return {
    resourceName: "",
    campaignId: Long.ZERO,
    androidPrivacyInteractionType: 0,
    androidPrivacyInteractionDate: "",
    androidPrivacyNetworkType: 0,
    adGroupId: Long.ZERO,
    sharedAdGroupKey: "",
  };
}

export const AndroidPrivacySharedKeyGoogleAdGroup: MessageFns<AndroidPrivacySharedKeyGoogleAdGroup> = {
  encode(message: AndroidPrivacySharedKeyGoogleAdGroup, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(10).string(message.resourceName);
    }
    if (!message.campaignId.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.campaignId.toString());
    }
    if (message.androidPrivacyInteractionType !== 0) {
      writer.uint32(24).int32(message.androidPrivacyInteractionType);
    }
    if (message.androidPrivacyInteractionDate !== "") {
      writer.uint32(34).string(message.androidPrivacyInteractionDate);
    }
    if (message.androidPrivacyNetworkType !== 0) {
      writer.uint32(40).int32(message.androidPrivacyNetworkType);
    }
    if (!message.adGroupId.equals(Long.ZERO)) {
      writer.uint32(48).int64(message.adGroupId.toString());
    }
    if (message.sharedAdGroupKey !== "") {
      writer.uint32(58).string(message.sharedAdGroupKey);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AndroidPrivacySharedKeyGoogleAdGroup {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAndroidPrivacySharedKeyGoogleAdGroup();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceName = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.campaignId = Long.fromString(reader.int64().toString());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.androidPrivacyInteractionType = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.androidPrivacyInteractionDate = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.androidPrivacyNetworkType = reader.int32() as any;
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.adGroupId = Long.fromString(reader.int64().toString());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.sharedAdGroupKey = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AndroidPrivacySharedKeyGoogleAdGroup {
    return {
      resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "",
      campaignId: isSet(object.campaignId) ? Long.fromValue(object.campaignId) : Long.ZERO,
      androidPrivacyInteractionType: isSet(object.androidPrivacyInteractionType)
        ? androidPrivacyInteractionTypeEnum_AndroidPrivacyInteractionTypeFromJSON(object.androidPrivacyInteractionType)
        : 0,
      androidPrivacyInteractionDate: isSet(object.androidPrivacyInteractionDate)
        ? globalThis.String(object.androidPrivacyInteractionDate)
        : "",
      androidPrivacyNetworkType: isSet(object.androidPrivacyNetworkType)
        ? androidPrivacyNetworkTypeEnum_AndroidPrivacyNetworkTypeFromJSON(object.androidPrivacyNetworkType)
        : 0,
      adGroupId: isSet(object.adGroupId) ? Long.fromValue(object.adGroupId) : Long.ZERO,
      sharedAdGroupKey: isSet(object.sharedAdGroupKey) ? globalThis.String(object.sharedAdGroupKey) : "",
    };
  },

  toJSON(message: AndroidPrivacySharedKeyGoogleAdGroup): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    if (!message.campaignId.equals(Long.ZERO)) {
      obj.campaignId = (message.campaignId || Long.ZERO).toString();
    }
    if (message.androidPrivacyInteractionType !== 0) {
      obj.androidPrivacyInteractionType = androidPrivacyInteractionTypeEnum_AndroidPrivacyInteractionTypeToJSON(
        message.androidPrivacyInteractionType,
      );
    }
    if (message.androidPrivacyInteractionDate !== "") {
      obj.androidPrivacyInteractionDate = message.androidPrivacyInteractionDate;
    }
    if (message.androidPrivacyNetworkType !== 0) {
      obj.androidPrivacyNetworkType = androidPrivacyNetworkTypeEnum_AndroidPrivacyNetworkTypeToJSON(
        message.androidPrivacyNetworkType,
      );
    }
    if (!message.adGroupId.equals(Long.ZERO)) {
      obj.adGroupId = (message.adGroupId || Long.ZERO).toString();
    }
    if (message.sharedAdGroupKey !== "") {
      obj.sharedAdGroupKey = message.sharedAdGroupKey;
    }
    return obj;
  },

  create(base?: DeepPartial<AndroidPrivacySharedKeyGoogleAdGroup>): AndroidPrivacySharedKeyGoogleAdGroup {
    return AndroidPrivacySharedKeyGoogleAdGroup.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AndroidPrivacySharedKeyGoogleAdGroup>): AndroidPrivacySharedKeyGoogleAdGroup {
    const message = createBaseAndroidPrivacySharedKeyGoogleAdGroup();
    message.resourceName = object.resourceName ?? "";
    message.campaignId = (object.campaignId !== undefined && object.campaignId !== null)
      ? Long.fromValue(object.campaignId)
      : Long.ZERO;
    message.androidPrivacyInteractionType = object.androidPrivacyInteractionType ?? 0;
    message.androidPrivacyInteractionDate = object.androidPrivacyInteractionDate ?? "";
    message.androidPrivacyNetworkType = object.androidPrivacyNetworkType ?? 0;
    message.adGroupId = (object.adGroupId !== undefined && object.adGroupId !== null)
      ? Long.fromValue(object.adGroupId)
      : Long.ZERO;
    message.sharedAdGroupKey = object.sharedAdGroupKey ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
