// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v17/resources/geographic_view.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import {
  GeoTargetingTypeEnum_GeoTargetingType,
  geoTargetingTypeEnum_GeoTargetingTypeFromJSON,
  geoTargetingTypeEnum_GeoTargetingTypeToJSON,
} from "../enums/geo_targeting_type.js";

export const protobufPackage = "google.ads.googleads.v17.resources";

/**
 * A geographic view.
 *
 * Geographic View includes all metrics aggregated at the country level,
 * one row per country. It reports metrics at either actual physical location of
 * the user or an area of interest. If other segment fields are used, you may
 * get more than one row per country.
 */
export interface GeographicView {
  /**
   * Output only. The resource name of the geographic view.
   * Geographic view resource names have the form:
   *
   * `customers/{customer_id}/geographicViews/{country_criterion_id}~{location_type}`
   */
  resourceName: string;
  /** Output only. Type of the geo targeting of the campaign. */
  locationType: GeoTargetingTypeEnum_GeoTargetingType;
  /** Output only. Criterion Id for the country. */
  countryCriterionId?: Long | undefined;
}

function createBaseGeographicView(): GeographicView {
  return { resourceName: "", locationType: 0, countryCriterionId: undefined };
}

export const GeographicView: MessageFns<GeographicView> = {
  encode(message: GeographicView, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(10).string(message.resourceName);
    }
    if (message.locationType !== 0) {
      writer.uint32(24).int32(message.locationType);
    }
    if (message.countryCriterionId !== undefined) {
      writer.uint32(40).int64(message.countryCriterionId.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GeographicView {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGeographicView();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceName = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.locationType = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.countryCriterionId = Long.fromString(reader.int64().toString());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GeographicView {
    return {
      resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "",
      locationType: isSet(object.locationType) ? geoTargetingTypeEnum_GeoTargetingTypeFromJSON(object.locationType) : 0,
      countryCriterionId: isSet(object.countryCriterionId) ? Long.fromValue(object.countryCriterionId) : undefined,
    };
  },

  toJSON(message: GeographicView): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    if (message.locationType !== 0) {
      obj.locationType = geoTargetingTypeEnum_GeoTargetingTypeToJSON(message.locationType);
    }
    if (message.countryCriterionId !== undefined) {
      obj.countryCriterionId = (message.countryCriterionId || Long.ZERO).toString();
    }
    return obj;
  },

  create(base?: DeepPartial<GeographicView>): GeographicView {
    return GeographicView.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GeographicView>): GeographicView {
    const message = createBaseGeographicView();
    message.resourceName = object.resourceName ?? "";
    message.locationType = object.locationType ?? 0;
    message.countryCriterionId = (object.countryCriterionId !== undefined && object.countryCriterionId !== null)
      ? Long.fromValue(object.countryCriterionId)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
