// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v17/resources/audience.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { AudienceDimension, AudienceExclusionDimension } from "../common/audiences.js";
import {
  AudienceScopeEnum_AudienceScope,
  audienceScopeEnum_AudienceScopeFromJSON,
  audienceScopeEnum_AudienceScopeToJSON,
} from "../enums/audience_scope.js";
import {
  AudienceStatusEnum_AudienceStatus,
  audienceStatusEnum_AudienceStatusFromJSON,
  audienceStatusEnum_AudienceStatusToJSON,
} from "../enums/audience_status.js";

export const protobufPackage = "google.ads.googleads.v17.resources";

/**
 * Audience is an effective targeting option that lets you
 * intersect different segment attributes, such as detailed demographics and
 * affinities, to create audiences that represent sections of your target
 * segments.
 */
export interface Audience {
  /**
   * Immutable. The resource name of the audience.
   * Audience names have the form:
   *
   * `customers/{customer_id}/audiences/{audience_id}`
   */
  resourceName: string;
  /** Output only. ID of the audience. */
  id: Long;
  /**
   * Output only. Status of this audience. Indicates whether the audience
   * is enabled or removed.
   */
  status: AudienceStatusEnum_AudienceStatus;
  /**
   * Name of the audience. It should be unique across all audiences within the
   * account. It must have a minimum length of 1 and maximum length of 255.
   * Required when scope is not set or is set to CUSTOMER. Cannot be set or
   * updated when scope is ASSET_GROUP.
   */
  name?:
    | string
    | undefined;
  /** Description of this audience. */
  description: string;
  /** Positive dimensions specifying the audience composition. */
  dimensions: AudienceDimension[];
  /** Negative dimension specifying the audience composition. */
  exclusionDimension:
    | AudienceExclusionDimension
    | undefined;
  /**
   * Defines the scope this audience can be used in. By default, the scope is
   * CUSTOMER. Audiences can be created with a scope of ASSET_GROUP for
   * exclusive use by a single asset_group. Scope may change from ASSET_GROUP to
   * CUSTOMER but not from CUSTOMER to ASSET_GROUP.
   */
  scope: AudienceScopeEnum_AudienceScope;
  /**
   * Immutable. The asset group that this audience is scoped under. Must be set
   * if and only if scope is ASSET_GROUP. Immutable after creation. If an
   * audience with ASSET_GROUP scope is upgraded to CUSTOMER scope, this field
   * will automatically be cleared.
   */
  assetGroup: string;
}

function createBaseAudience(): Audience {
  return {
    resourceName: "",
    id: Long.ZERO,
    status: 0,
    name: undefined,
    description: "",
    dimensions: [],
    exclusionDimension: undefined,
    scope: 0,
    assetGroup: "",
  };
}

export const Audience: MessageFns<Audience> = {
  encode(message: Audience, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(10).string(message.resourceName);
    }
    if (!message.id.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.id.toString());
    }
    if (message.status !== 0) {
      writer.uint32(24).int32(message.status);
    }
    if (message.name !== undefined) {
      writer.uint32(82).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(42).string(message.description);
    }
    for (const v of message.dimensions) {
      AudienceDimension.encode(v!, writer.uint32(50).fork()).join();
    }
    if (message.exclusionDimension !== undefined) {
      AudienceExclusionDimension.encode(message.exclusionDimension, writer.uint32(58).fork()).join();
    }
    if (message.scope !== 0) {
      writer.uint32(64).int32(message.scope);
    }
    if (message.assetGroup !== "") {
      writer.uint32(74).string(message.assetGroup);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Audience {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAudience();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceName = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.id = Long.fromString(reader.int64().toString());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.name = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.description = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.dimensions.push(AudienceDimension.decode(reader, reader.uint32()));
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.exclusionDimension = AudienceExclusionDimension.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.scope = reader.int32() as any;
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.assetGroup = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Audience {
    return {
      resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "",
      id: isSet(object.id) ? Long.fromValue(object.id) : Long.ZERO,
      status: isSet(object.status) ? audienceStatusEnum_AudienceStatusFromJSON(object.status) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      dimensions: globalThis.Array.isArray(object?.dimensions)
        ? object.dimensions.map((e: any) => AudienceDimension.fromJSON(e))
        : [],
      exclusionDimension: isSet(object.exclusionDimension)
        ? AudienceExclusionDimension.fromJSON(object.exclusionDimension)
        : undefined,
      scope: isSet(object.scope) ? audienceScopeEnum_AudienceScopeFromJSON(object.scope) : 0,
      assetGroup: isSet(object.assetGroup) ? globalThis.String(object.assetGroup) : "",
    };
  },

  toJSON(message: Audience): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    if (!message.id.equals(Long.ZERO)) {
      obj.id = (message.id || Long.ZERO).toString();
    }
    if (message.status !== 0) {
      obj.status = audienceStatusEnum_AudienceStatusToJSON(message.status);
    }
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.dimensions?.length) {
      obj.dimensions = message.dimensions.map((e) => AudienceDimension.toJSON(e));
    }
    if (message.exclusionDimension !== undefined) {
      obj.exclusionDimension = AudienceExclusionDimension.toJSON(message.exclusionDimension);
    }
    if (message.scope !== 0) {
      obj.scope = audienceScopeEnum_AudienceScopeToJSON(message.scope);
    }
    if (message.assetGroup !== "") {
      obj.assetGroup = message.assetGroup;
    }
    return obj;
  },

  create(base?: DeepPartial<Audience>): Audience {
    return Audience.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Audience>): Audience {
    const message = createBaseAudience();
    message.resourceName = object.resourceName ?? "";
    message.id = (object.id !== undefined && object.id !== null) ? Long.fromValue(object.id) : Long.ZERO;
    message.status = object.status ?? 0;
    message.name = object.name ?? undefined;
    message.description = object.description ?? "";
    message.dimensions = object.dimensions?.map((e) => AudienceDimension.fromPartial(e)) || [];
    message.exclusionDimension = (object.exclusionDimension !== undefined && object.exclusionDimension !== null)
      ? AudienceExclusionDimension.fromPartial(object.exclusionDimension)
      : undefined;
    message.scope = object.scope ?? 0;
    message.assetGroup = object.assetGroup ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
