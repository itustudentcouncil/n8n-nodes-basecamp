// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v17/resources/feed_item_set_link.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.googleads.v17.resources";

/** Represents a link between a FeedItem and a FeedItemSet. */
export interface FeedItemSetLink {
  /**
   * Immutable. The resource name of the feed item set link.
   * Feed item set link resource names have the form:
   * `customers/{customer_id}/feedItemSetLinks/{feed_id}~{feed_item_set_id}~{feed_item_id}`
   */
  resourceName: string;
  /** Immutable. The linked FeedItem. */
  feedItem: string;
  /** Immutable. The linked FeedItemSet. */
  feedItemSet: string;
}

function createBaseFeedItemSetLink(): FeedItemSetLink {
  return { resourceName: "", feedItem: "", feedItemSet: "" };
}

export const FeedItemSetLink: MessageFns<FeedItemSetLink> = {
  encode(message: FeedItemSetLink, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(10).string(message.resourceName);
    }
    if (message.feedItem !== "") {
      writer.uint32(18).string(message.feedItem);
    }
    if (message.feedItemSet !== "") {
      writer.uint32(26).string(message.feedItemSet);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FeedItemSetLink {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFeedItemSetLink();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.feedItem = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.feedItemSet = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FeedItemSetLink {
    return {
      resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "",
      feedItem: isSet(object.feedItem) ? globalThis.String(object.feedItem) : "",
      feedItemSet: isSet(object.feedItemSet) ? globalThis.String(object.feedItemSet) : "",
    };
  },

  toJSON(message: FeedItemSetLink): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    if (message.feedItem !== "") {
      obj.feedItem = message.feedItem;
    }
    if (message.feedItemSet !== "") {
      obj.feedItemSet = message.feedItemSet;
    }
    return obj;
  },

  create(base?: DeepPartial<FeedItemSetLink>): FeedItemSetLink {
    return FeedItemSetLink.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FeedItemSetLink>): FeedItemSetLink {
    const message = createBaseFeedItemSetLink();
    message.resourceName = object.resourceName ?? "";
    message.feedItem = object.feedItem ?? "";
    message.feedItemSet = object.feedItemSet ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
