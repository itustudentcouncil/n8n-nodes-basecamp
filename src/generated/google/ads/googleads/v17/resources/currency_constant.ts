// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v17/resources/currency_constant.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.ads.googleads.v17.resources";

/** A currency constant. */
export interface CurrencyConstant {
  /**
   * Output only. The resource name of the currency constant.
   * Currency constant resource names have the form:
   *
   * `currencyConstants/{code}`
   */
  resourceName: string;
  /** Output only. ISO 4217 three-letter currency code, for example, "USD" */
  code?:
    | string
    | undefined;
  /** Output only. Full English name of the currency. */
  name?:
    | string
    | undefined;
  /**
   * Output only. Standard symbol for describing this currency, for example, '$'
   * for US Dollars.
   */
  symbol?:
    | string
    | undefined;
  /**
   * Output only. The billable unit for this currency. Billed amounts should be
   * multiples of this value.
   */
  billableUnitMicros?: Long | undefined;
}

function createBaseCurrencyConstant(): CurrencyConstant {
  return { resourceName: "", code: undefined, name: undefined, symbol: undefined, billableUnitMicros: undefined };
}

export const CurrencyConstant: MessageFns<CurrencyConstant> = {
  encode(message: CurrencyConstant, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(10).string(message.resourceName);
    }
    if (message.code !== undefined) {
      writer.uint32(50).string(message.code);
    }
    if (message.name !== undefined) {
      writer.uint32(58).string(message.name);
    }
    if (message.symbol !== undefined) {
      writer.uint32(66).string(message.symbol);
    }
    if (message.billableUnitMicros !== undefined) {
      writer.uint32(72).int64(message.billableUnitMicros.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CurrencyConstant {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCurrencyConstant();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceName = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.code = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.name = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.symbol = reader.string();
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.billableUnitMicros = Long.fromString(reader.int64().toString());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CurrencyConstant {
    return {
      resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "",
      code: isSet(object.code) ? globalThis.String(object.code) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      symbol: isSet(object.symbol) ? globalThis.String(object.symbol) : undefined,
      billableUnitMicros: isSet(object.billableUnitMicros) ? Long.fromValue(object.billableUnitMicros) : undefined,
    };
  },

  toJSON(message: CurrencyConstant): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    if (message.code !== undefined) {
      obj.code = message.code;
    }
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.symbol !== undefined) {
      obj.symbol = message.symbol;
    }
    if (message.billableUnitMicros !== undefined) {
      obj.billableUnitMicros = (message.billableUnitMicros || Long.ZERO).toString();
    }
    return obj;
  },

  create(base?: DeepPartial<CurrencyConstant>): CurrencyConstant {
    return CurrencyConstant.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CurrencyConstant>): CurrencyConstant {
    const message = createBaseCurrencyConstant();
    message.resourceName = object.resourceName ?? "";
    message.code = object.code ?? undefined;
    message.name = object.name ?? undefined;
    message.symbol = object.symbol ?? undefined;
    message.billableUnitMicros = (object.billableUnitMicros !== undefined && object.billableUnitMicros !== null)
      ? Long.fromValue(object.billableUnitMicros)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
