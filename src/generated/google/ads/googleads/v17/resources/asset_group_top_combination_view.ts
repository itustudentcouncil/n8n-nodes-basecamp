// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v17/resources/asset_group_top_combination_view.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { AssetUsage } from "../common/asset_usage.js";

export const protobufPackage = "google.ads.googleads.v17.resources";

/** A view on the usage of ad group ad asset combination. */
export interface AssetGroupTopCombinationView {
  /**
   * Output only. The resource name of the asset group top combination view.
   * AssetGroup Top Combination view resource names have the form:
   * `"customers/{customer_id}/assetGroupTopCombinationViews/{asset_group_id}~{asset_combination_category}"
   */
  resourceName: string;
  /** Output only. The top combinations of assets that served together. */
  assetGroupTopCombinations: AssetGroupAssetCombinationData[];
}

/** Asset group asset combination data */
export interface AssetGroupAssetCombinationData {
  /** Output only. Served assets. */
  assetCombinationServedAssets: AssetUsage[];
}

function createBaseAssetGroupTopCombinationView(): AssetGroupTopCombinationView {
  return { resourceName: "", assetGroupTopCombinations: [] };
}

export const AssetGroupTopCombinationView: MessageFns<AssetGroupTopCombinationView> = {
  encode(message: AssetGroupTopCombinationView, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(10).string(message.resourceName);
    }
    for (const v of message.assetGroupTopCombinations) {
      AssetGroupAssetCombinationData.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AssetGroupTopCombinationView {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAssetGroupTopCombinationView();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.assetGroupTopCombinations.push(AssetGroupAssetCombinationData.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AssetGroupTopCombinationView {
    return {
      resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "",
      assetGroupTopCombinations: globalThis.Array.isArray(object?.assetGroupTopCombinations)
        ? object.assetGroupTopCombinations.map((e: any) => AssetGroupAssetCombinationData.fromJSON(e))
        : [],
    };
  },

  toJSON(message: AssetGroupTopCombinationView): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    if (message.assetGroupTopCombinations?.length) {
      obj.assetGroupTopCombinations = message.assetGroupTopCombinations.map((e) =>
        AssetGroupAssetCombinationData.toJSON(e)
      );
    }
    return obj;
  },

  create(base?: DeepPartial<AssetGroupTopCombinationView>): AssetGroupTopCombinationView {
    return AssetGroupTopCombinationView.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AssetGroupTopCombinationView>): AssetGroupTopCombinationView {
    const message = createBaseAssetGroupTopCombinationView();
    message.resourceName = object.resourceName ?? "";
    message.assetGroupTopCombinations =
      object.assetGroupTopCombinations?.map((e) => AssetGroupAssetCombinationData.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAssetGroupAssetCombinationData(): AssetGroupAssetCombinationData {
  return { assetCombinationServedAssets: [] };
}

export const AssetGroupAssetCombinationData: MessageFns<AssetGroupAssetCombinationData> = {
  encode(message: AssetGroupAssetCombinationData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.assetCombinationServedAssets) {
      AssetUsage.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AssetGroupAssetCombinationData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAssetGroupAssetCombinationData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.assetCombinationServedAssets.push(AssetUsage.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AssetGroupAssetCombinationData {
    return {
      assetCombinationServedAssets: globalThis.Array.isArray(object?.assetCombinationServedAssets)
        ? object.assetCombinationServedAssets.map((e: any) => AssetUsage.fromJSON(e))
        : [],
    };
  },

  toJSON(message: AssetGroupAssetCombinationData): unknown {
    const obj: any = {};
    if (message.assetCombinationServedAssets?.length) {
      obj.assetCombinationServedAssets = message.assetCombinationServedAssets.map((e) => AssetUsage.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<AssetGroupAssetCombinationData>): AssetGroupAssetCombinationData {
    return AssetGroupAssetCombinationData.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AssetGroupAssetCombinationData>): AssetGroupAssetCombinationData {
    const message = createBaseAssetGroupAssetCombinationData();
    message.assetCombinationServedAssets = object.assetCombinationServedAssets?.map((e) => AssetUsage.fromPartial(e)) ||
      [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
