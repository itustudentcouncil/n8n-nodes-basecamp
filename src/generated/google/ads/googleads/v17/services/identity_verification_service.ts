// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v17/services/identity_verification_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Empty } from "../../../../protobuf/empty.js";
import {
  IdentityVerificationProgramEnum_IdentityVerificationProgram,
  identityVerificationProgramEnum_IdentityVerificationProgramFromJSON,
  identityVerificationProgramEnum_IdentityVerificationProgramToJSON,
} from "../enums/identity_verification_program.js";
import {
  IdentityVerificationProgramStatusEnum_IdentityVerificationProgramStatus,
  identityVerificationProgramStatusEnum_IdentityVerificationProgramStatusFromJSON,
  identityVerificationProgramStatusEnum_IdentityVerificationProgramStatusToJSON,
} from "../enums/identity_verification_program_status.js";

export const protobufPackage = "google.ads.googleads.v17.services";

/**
 * Request message for
 *  [IdentityVerificationService.StartIdentityVerification].
 */
export interface StartIdentityVerificationRequest {
  /**
   * Required. The Id of the customer for whom we are creating this
   * verification.
   */
  customerId: string;
  /**
   * Required. The verification program type for which we want to start the
   * verification.
   */
  verificationProgram: IdentityVerificationProgramEnum_IdentityVerificationProgram;
}

/**
 * Request message for
 *  [IdentityVerificationService.GetIdentityVerification].
 */
export interface GetIdentityVerificationRequest {
  /**
   * Required.  The ID of the customer for whom we are requesting verification
   *  information.
   */
  customerId: string;
}

/**
 * Response message for
 *  [IdentityVerificationService.GetIdentityVerification].
 */
export interface GetIdentityVerificationResponse {
  /** List of identity verifications for the customer. */
  identityVerification: IdentityVerification[];
}

/** An identity verification for a customer. */
export interface IdentityVerification {
  /** The verification program type. */
  verificationProgram: IdentityVerificationProgramEnum_IdentityVerificationProgram;
  /**
   * The verification requirement for this verification program for this
   * customer.
   */
  identityVerificationRequirement?:
    | IdentityVerificationRequirement
    | undefined;
  /**
   * Information regarding progress for this verification program for this
   * customer.
   */
  verificationProgress?: IdentityVerificationProgress | undefined;
}

/**
 * Information regarding the verification progress for a verification program
 * type.
 */
export interface IdentityVerificationProgress {
  /** Current Status (PENDING_USER_ACTION, SUCCESS, FAILURE etc) */
  programStatus: IdentityVerificationProgramStatusEnum_IdentityVerificationProgramStatus;
  /**
   * The timestamp when the action url will expire in "yyyy-MM-dd HH:mm:ss"
   * format.
   */
  invitationLinkExpirationTime: string;
  /**
   * Action URL for user to complete verification for the given verification
   * program type.
   */
  actionUrl: string;
}

/**
 * Information regarding the verification requirement for a verification program
 * type.
 */
export interface IdentityVerificationRequirement {
  /** The deadline to start verification in "yyyy-MM-dd HH:mm:ss" format. */
  verificationStartDeadlineTime: string;
  /** The deadline to submit verification. */
  verificationCompletionDeadlineTime: string;
}

function createBaseStartIdentityVerificationRequest(): StartIdentityVerificationRequest {
  return { customerId: "", verificationProgram: 0 };
}

export const StartIdentityVerificationRequest: MessageFns<StartIdentityVerificationRequest> = {
  encode(message: StartIdentityVerificationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.customerId !== "") {
      writer.uint32(10).string(message.customerId);
    }
    if (message.verificationProgram !== 0) {
      writer.uint32(16).int32(message.verificationProgram);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StartIdentityVerificationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStartIdentityVerificationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customerId = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.verificationProgram = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StartIdentityVerificationRequest {
    return {
      customerId: isSet(object.customerId) ? globalThis.String(object.customerId) : "",
      verificationProgram: isSet(object.verificationProgram)
        ? identityVerificationProgramEnum_IdentityVerificationProgramFromJSON(object.verificationProgram)
        : 0,
    };
  },

  toJSON(message: StartIdentityVerificationRequest): unknown {
    const obj: any = {};
    if (message.customerId !== "") {
      obj.customerId = message.customerId;
    }
    if (message.verificationProgram !== 0) {
      obj.verificationProgram = identityVerificationProgramEnum_IdentityVerificationProgramToJSON(
        message.verificationProgram,
      );
    }
    return obj;
  },

  create(base?: DeepPartial<StartIdentityVerificationRequest>): StartIdentityVerificationRequest {
    return StartIdentityVerificationRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StartIdentityVerificationRequest>): StartIdentityVerificationRequest {
    const message = createBaseStartIdentityVerificationRequest();
    message.customerId = object.customerId ?? "";
    message.verificationProgram = object.verificationProgram ?? 0;
    return message;
  },
};

function createBaseGetIdentityVerificationRequest(): GetIdentityVerificationRequest {
  return { customerId: "" };
}

export const GetIdentityVerificationRequest: MessageFns<GetIdentityVerificationRequest> = {
  encode(message: GetIdentityVerificationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.customerId !== "") {
      writer.uint32(10).string(message.customerId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetIdentityVerificationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetIdentityVerificationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customerId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetIdentityVerificationRequest {
    return { customerId: isSet(object.customerId) ? globalThis.String(object.customerId) : "" };
  },

  toJSON(message: GetIdentityVerificationRequest): unknown {
    const obj: any = {};
    if (message.customerId !== "") {
      obj.customerId = message.customerId;
    }
    return obj;
  },

  create(base?: DeepPartial<GetIdentityVerificationRequest>): GetIdentityVerificationRequest {
    return GetIdentityVerificationRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetIdentityVerificationRequest>): GetIdentityVerificationRequest {
    const message = createBaseGetIdentityVerificationRequest();
    message.customerId = object.customerId ?? "";
    return message;
  },
};

function createBaseGetIdentityVerificationResponse(): GetIdentityVerificationResponse {
  return { identityVerification: [] };
}

export const GetIdentityVerificationResponse: MessageFns<GetIdentityVerificationResponse> = {
  encode(message: GetIdentityVerificationResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.identityVerification) {
      IdentityVerification.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetIdentityVerificationResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetIdentityVerificationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.identityVerification.push(IdentityVerification.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetIdentityVerificationResponse {
    return {
      identityVerification: globalThis.Array.isArray(object?.identityVerification)
        ? object.identityVerification.map((e: any) => IdentityVerification.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GetIdentityVerificationResponse): unknown {
    const obj: any = {};
    if (message.identityVerification?.length) {
      obj.identityVerification = message.identityVerification.map((e) => IdentityVerification.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<GetIdentityVerificationResponse>): GetIdentityVerificationResponse {
    return GetIdentityVerificationResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetIdentityVerificationResponse>): GetIdentityVerificationResponse {
    const message = createBaseGetIdentityVerificationResponse();
    message.identityVerification = object.identityVerification?.map((e) => IdentityVerification.fromPartial(e)) || [];
    return message;
  },
};

function createBaseIdentityVerification(): IdentityVerification {
  return { verificationProgram: 0, identityVerificationRequirement: undefined, verificationProgress: undefined };
}

export const IdentityVerification: MessageFns<IdentityVerification> = {
  encode(message: IdentityVerification, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.verificationProgram !== 0) {
      writer.uint32(8).int32(message.verificationProgram);
    }
    if (message.identityVerificationRequirement !== undefined) {
      IdentityVerificationRequirement.encode(message.identityVerificationRequirement, writer.uint32(18).fork()).join();
    }
    if (message.verificationProgress !== undefined) {
      IdentityVerificationProgress.encode(message.verificationProgress, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IdentityVerification {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIdentityVerification();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.verificationProgram = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.identityVerificationRequirement = IdentityVerificationRequirement.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.verificationProgress = IdentityVerificationProgress.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IdentityVerification {
    return {
      verificationProgram: isSet(object.verificationProgram)
        ? identityVerificationProgramEnum_IdentityVerificationProgramFromJSON(object.verificationProgram)
        : 0,
      identityVerificationRequirement: isSet(object.identityVerificationRequirement)
        ? IdentityVerificationRequirement.fromJSON(object.identityVerificationRequirement)
        : undefined,
      verificationProgress: isSet(object.verificationProgress)
        ? IdentityVerificationProgress.fromJSON(object.verificationProgress)
        : undefined,
    };
  },

  toJSON(message: IdentityVerification): unknown {
    const obj: any = {};
    if (message.verificationProgram !== 0) {
      obj.verificationProgram = identityVerificationProgramEnum_IdentityVerificationProgramToJSON(
        message.verificationProgram,
      );
    }
    if (message.identityVerificationRequirement !== undefined) {
      obj.identityVerificationRequirement = IdentityVerificationRequirement.toJSON(
        message.identityVerificationRequirement,
      );
    }
    if (message.verificationProgress !== undefined) {
      obj.verificationProgress = IdentityVerificationProgress.toJSON(message.verificationProgress);
    }
    return obj;
  },

  create(base?: DeepPartial<IdentityVerification>): IdentityVerification {
    return IdentityVerification.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<IdentityVerification>): IdentityVerification {
    const message = createBaseIdentityVerification();
    message.verificationProgram = object.verificationProgram ?? 0;
    message.identityVerificationRequirement =
      (object.identityVerificationRequirement !== undefined && object.identityVerificationRequirement !== null)
        ? IdentityVerificationRequirement.fromPartial(object.identityVerificationRequirement)
        : undefined;
    message.verificationProgress = (object.verificationProgress !== undefined && object.verificationProgress !== null)
      ? IdentityVerificationProgress.fromPartial(object.verificationProgress)
      : undefined;
    return message;
  },
};

function createBaseIdentityVerificationProgress(): IdentityVerificationProgress {
  return { programStatus: 0, invitationLinkExpirationTime: "", actionUrl: "" };
}

export const IdentityVerificationProgress: MessageFns<IdentityVerificationProgress> = {
  encode(message: IdentityVerificationProgress, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.programStatus !== 0) {
      writer.uint32(8).int32(message.programStatus);
    }
    if (message.invitationLinkExpirationTime !== "") {
      writer.uint32(18).string(message.invitationLinkExpirationTime);
    }
    if (message.actionUrl !== "") {
      writer.uint32(26).string(message.actionUrl);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IdentityVerificationProgress {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIdentityVerificationProgress();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.programStatus = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.invitationLinkExpirationTime = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.actionUrl = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IdentityVerificationProgress {
    return {
      programStatus: isSet(object.programStatus)
        ? identityVerificationProgramStatusEnum_IdentityVerificationProgramStatusFromJSON(object.programStatus)
        : 0,
      invitationLinkExpirationTime: isSet(object.invitationLinkExpirationTime)
        ? globalThis.String(object.invitationLinkExpirationTime)
        : "",
      actionUrl: isSet(object.actionUrl) ? globalThis.String(object.actionUrl) : "",
    };
  },

  toJSON(message: IdentityVerificationProgress): unknown {
    const obj: any = {};
    if (message.programStatus !== 0) {
      obj.programStatus = identityVerificationProgramStatusEnum_IdentityVerificationProgramStatusToJSON(
        message.programStatus,
      );
    }
    if (message.invitationLinkExpirationTime !== "") {
      obj.invitationLinkExpirationTime = message.invitationLinkExpirationTime;
    }
    if (message.actionUrl !== "") {
      obj.actionUrl = message.actionUrl;
    }
    return obj;
  },

  create(base?: DeepPartial<IdentityVerificationProgress>): IdentityVerificationProgress {
    return IdentityVerificationProgress.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<IdentityVerificationProgress>): IdentityVerificationProgress {
    const message = createBaseIdentityVerificationProgress();
    message.programStatus = object.programStatus ?? 0;
    message.invitationLinkExpirationTime = object.invitationLinkExpirationTime ?? "";
    message.actionUrl = object.actionUrl ?? "";
    return message;
  },
};

function createBaseIdentityVerificationRequirement(): IdentityVerificationRequirement {
  return { verificationStartDeadlineTime: "", verificationCompletionDeadlineTime: "" };
}

export const IdentityVerificationRequirement: MessageFns<IdentityVerificationRequirement> = {
  encode(message: IdentityVerificationRequirement, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.verificationStartDeadlineTime !== "") {
      writer.uint32(10).string(message.verificationStartDeadlineTime);
    }
    if (message.verificationCompletionDeadlineTime !== "") {
      writer.uint32(18).string(message.verificationCompletionDeadlineTime);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IdentityVerificationRequirement {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIdentityVerificationRequirement();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.verificationStartDeadlineTime = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.verificationCompletionDeadlineTime = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IdentityVerificationRequirement {
    return {
      verificationStartDeadlineTime: isSet(object.verificationStartDeadlineTime)
        ? globalThis.String(object.verificationStartDeadlineTime)
        : "",
      verificationCompletionDeadlineTime: isSet(object.verificationCompletionDeadlineTime)
        ? globalThis.String(object.verificationCompletionDeadlineTime)
        : "",
    };
  },

  toJSON(message: IdentityVerificationRequirement): unknown {
    const obj: any = {};
    if (message.verificationStartDeadlineTime !== "") {
      obj.verificationStartDeadlineTime = message.verificationStartDeadlineTime;
    }
    if (message.verificationCompletionDeadlineTime !== "") {
      obj.verificationCompletionDeadlineTime = message.verificationCompletionDeadlineTime;
    }
    return obj;
  },

  create(base?: DeepPartial<IdentityVerificationRequirement>): IdentityVerificationRequirement {
    return IdentityVerificationRequirement.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<IdentityVerificationRequirement>): IdentityVerificationRequirement {
    const message = createBaseIdentityVerificationRequirement();
    message.verificationStartDeadlineTime = object.verificationStartDeadlineTime ?? "";
    message.verificationCompletionDeadlineTime = object.verificationCompletionDeadlineTime ?? "";
    return message;
  },
};

/** A service for managing Identity Verification Service. */
export type IdentityVerificationServiceDefinition = typeof IdentityVerificationServiceDefinition;
export const IdentityVerificationServiceDefinition = {
  name: "IdentityVerificationService",
  fullName: "google.ads.googleads.v17.services.IdentityVerificationService",
  methods: {
    /**
     * Starts Identity Verification for a given verification program type.
     *  Statuses are returned.
     *
     * List of thrown errors:
     *   [AuthenticationError]()
     *   [AuthorizationError]()
     *   [HeaderError]()
     *   [InternalError]()
     *   [QuotaError]()
     *   [RequestError]()
     */
    startIdentityVerification: {
      name: "StartIdentityVerification",
      requestType: StartIdentityVerificationRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              95,
              105,
              100,
              44,
              118,
              101,
              114,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              95,
              112,
              114,
              111,
              103,
              114,
              97,
              109,
            ]),
          ],
          578365826: [
            Buffer.from([
              61,
              58,
              1,
              42,
              34,
              56,
              47,
              118,
              49,
              55,
              47,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              115,
              47,
              123,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              95,
              105,
              100,
              61,
              42,
              125,
              58,
              115,
              116,
              97,
              114,
              116,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              86,
              101,
              114,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
            ]),
          ],
        },
      },
    },
    /**
     * Returns Identity Verification information.
     *
     * List of thrown errors:
     *   [AuthenticationError]()
     *   [AuthorizationError]()
     *   [HeaderError]()
     *   [InternalError]()
     *   [QuotaError]()
     *   [RequestError]()
     */
    getIdentityVerification: {
      name: "GetIdentityVerification",
      requestType: GetIdentityVerificationRequest,
      requestStream: false,
      responseType: GetIdentityVerificationResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([11, 99, 117, 115, 116, 111, 109, 101, 114, 95, 105, 100])],
          578365826: [
            Buffer.from([
              56,
              18,
              54,
              47,
              118,
              49,
              55,
              47,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              115,
              47,
              123,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              95,
              105,
              100,
              61,
              42,
              125,
              47,
              103,
              101,
              116,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              86,
              101,
              114,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface IdentityVerificationServiceImplementation<CallContextExt = {}> {
  /**
   * Starts Identity Verification for a given verification program type.
   *  Statuses are returned.
   *
   * List of thrown errors:
   *   [AuthenticationError]()
   *   [AuthorizationError]()
   *   [HeaderError]()
   *   [InternalError]()
   *   [QuotaError]()
   *   [RequestError]()
   */
  startIdentityVerification(
    request: StartIdentityVerificationRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  /**
   * Returns Identity Verification information.
   *
   * List of thrown errors:
   *   [AuthenticationError]()
   *   [AuthorizationError]()
   *   [HeaderError]()
   *   [InternalError]()
   *   [QuotaError]()
   *   [RequestError]()
   */
  getIdentityVerification(
    request: GetIdentityVerificationRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetIdentityVerificationResponse>>;
}

export interface IdentityVerificationServiceClient<CallOptionsExt = {}> {
  /**
   * Starts Identity Verification for a given verification program type.
   *  Statuses are returned.
   *
   * List of thrown errors:
   *   [AuthenticationError]()
   *   [AuthorizationError]()
   *   [HeaderError]()
   *   [InternalError]()
   *   [QuotaError]()
   *   [RequestError]()
   */
  startIdentityVerification(
    request: DeepPartial<StartIdentityVerificationRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  /**
   * Returns Identity Verification information.
   *
   * List of thrown errors:
   *   [AuthenticationError]()
   *   [AuthorizationError]()
   *   [HeaderError]()
   *   [InternalError]()
   *   [QuotaError]()
   *   [RequestError]()
   */
  getIdentityVerification(
    request: DeepPartial<GetIdentityVerificationRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetIdentityVerificationResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
