// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v17/services/keyword_theme_constant_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { KeywordThemeConstant } from "../resources/keyword_theme_constant.js";

export const protobufPackage = "google.ads.googleads.v17.services";

/**
 * Request message for
 * [KeywordThemeConstantService.SuggestKeywordThemeConstants][google.ads.googleads.v17.services.KeywordThemeConstantService.SuggestKeywordThemeConstants].
 */
export interface SuggestKeywordThemeConstantsRequest {
  /**
   * The query text of a keyword theme that will be used to map to similar
   * keyword themes. For example, "plumber" or "roofer".
   */
  queryText: string;
  /**
   * Upper-case, two-letter country code as defined by ISO-3166. This for
   * refining the scope of the query, default to 'US' if not set.
   */
  countryCode: string;
  /**
   * The two letter language code for get corresponding keyword theme for
   * refining the scope of the query, default to 'en' if not set.
   */
  languageCode: string;
}

/**
 * Response message for
 * [KeywordThemeConstantService.SuggestKeywordThemeConstants][google.ads.googleads.v17.services.KeywordThemeConstantService.SuggestKeywordThemeConstants].
 */
export interface SuggestKeywordThemeConstantsResponse {
  /** Smart Campaign keyword theme suggestions. */
  keywordThemeConstants: KeywordThemeConstant[];
}

function createBaseSuggestKeywordThemeConstantsRequest(): SuggestKeywordThemeConstantsRequest {
  return { queryText: "", countryCode: "", languageCode: "" };
}

export const SuggestKeywordThemeConstantsRequest: MessageFns<SuggestKeywordThemeConstantsRequest> = {
  encode(message: SuggestKeywordThemeConstantsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.queryText !== "") {
      writer.uint32(10).string(message.queryText);
    }
    if (message.countryCode !== "") {
      writer.uint32(18).string(message.countryCode);
    }
    if (message.languageCode !== "") {
      writer.uint32(26).string(message.languageCode);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SuggestKeywordThemeConstantsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSuggestKeywordThemeConstantsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.queryText = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.countryCode = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.languageCode = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SuggestKeywordThemeConstantsRequest {
    return {
      queryText: isSet(object.queryText) ? globalThis.String(object.queryText) : "",
      countryCode: isSet(object.countryCode) ? globalThis.String(object.countryCode) : "",
      languageCode: isSet(object.languageCode) ? globalThis.String(object.languageCode) : "",
    };
  },

  toJSON(message: SuggestKeywordThemeConstantsRequest): unknown {
    const obj: any = {};
    if (message.queryText !== "") {
      obj.queryText = message.queryText;
    }
    if (message.countryCode !== "") {
      obj.countryCode = message.countryCode;
    }
    if (message.languageCode !== "") {
      obj.languageCode = message.languageCode;
    }
    return obj;
  },

  create(base?: DeepPartial<SuggestKeywordThemeConstantsRequest>): SuggestKeywordThemeConstantsRequest {
    return SuggestKeywordThemeConstantsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SuggestKeywordThemeConstantsRequest>): SuggestKeywordThemeConstantsRequest {
    const message = createBaseSuggestKeywordThemeConstantsRequest();
    message.queryText = object.queryText ?? "";
    message.countryCode = object.countryCode ?? "";
    message.languageCode = object.languageCode ?? "";
    return message;
  },
};

function createBaseSuggestKeywordThemeConstantsResponse(): SuggestKeywordThemeConstantsResponse {
  return { keywordThemeConstants: [] };
}

export const SuggestKeywordThemeConstantsResponse: MessageFns<SuggestKeywordThemeConstantsResponse> = {
  encode(message: SuggestKeywordThemeConstantsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.keywordThemeConstants) {
      KeywordThemeConstant.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SuggestKeywordThemeConstantsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSuggestKeywordThemeConstantsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.keywordThemeConstants.push(KeywordThemeConstant.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SuggestKeywordThemeConstantsResponse {
    return {
      keywordThemeConstants: globalThis.Array.isArray(object?.keywordThemeConstants)
        ? object.keywordThemeConstants.map((e: any) => KeywordThemeConstant.fromJSON(e))
        : [],
    };
  },

  toJSON(message: SuggestKeywordThemeConstantsResponse): unknown {
    const obj: any = {};
    if (message.keywordThemeConstants?.length) {
      obj.keywordThemeConstants = message.keywordThemeConstants.map((e) => KeywordThemeConstant.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<SuggestKeywordThemeConstantsResponse>): SuggestKeywordThemeConstantsResponse {
    return SuggestKeywordThemeConstantsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SuggestKeywordThemeConstantsResponse>): SuggestKeywordThemeConstantsResponse {
    const message = createBaseSuggestKeywordThemeConstantsResponse();
    message.keywordThemeConstants = object.keywordThemeConstants?.map((e) => KeywordThemeConstant.fromPartial(e)) || [];
    return message;
  },
};

/** Service to fetch Smart Campaign keyword themes. */
export type KeywordThemeConstantServiceDefinition = typeof KeywordThemeConstantServiceDefinition;
export const KeywordThemeConstantServiceDefinition = {
  name: "KeywordThemeConstantService",
  fullName: "google.ads.googleads.v17.services.KeywordThemeConstantService",
  methods: {
    /**
     * Returns KeywordThemeConstant suggestions by keyword themes.
     *
     * List of thrown errors:
     *   [AuthenticationError]()
     *   [AuthorizationError]()
     *   [HeaderError]()
     *   [InternalError]()
     *   [QuotaError]()
     *   [RequestError]()
     */
    suggestKeywordThemeConstants: {
      name: "SuggestKeywordThemeConstants",
      requestType: SuggestKeywordThemeConstantsRequest,
      requestStream: false,
      responseType: SuggestKeywordThemeConstantsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              39,
              58,
              1,
              42,
              34,
              34,
              47,
              118,
              49,
              55,
              47,
              107,
              101,
              121,
              119,
              111,
              114,
              100,
              84,
              104,
              101,
              109,
              101,
              67,
              111,
              110,
              115,
              116,
              97,
              110,
              116,
              115,
              58,
              115,
              117,
              103,
              103,
              101,
              115,
              116,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface KeywordThemeConstantServiceImplementation<CallContextExt = {}> {
  /**
   * Returns KeywordThemeConstant suggestions by keyword themes.
   *
   * List of thrown errors:
   *   [AuthenticationError]()
   *   [AuthorizationError]()
   *   [HeaderError]()
   *   [InternalError]()
   *   [QuotaError]()
   *   [RequestError]()
   */
  suggestKeywordThemeConstants(
    request: SuggestKeywordThemeConstantsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SuggestKeywordThemeConstantsResponse>>;
}

export interface KeywordThemeConstantServiceClient<CallOptionsExt = {}> {
  /**
   * Returns KeywordThemeConstant suggestions by keyword themes.
   *
   * List of thrown errors:
   *   [AuthenticationError]()
   *   [AuthorizationError]()
   *   [HeaderError]()
   *   [InternalError]()
   *   [QuotaError]()
   *   [RequestError]()
   */
  suggestKeywordThemeConstants(
    request: DeepPartial<SuggestKeywordThemeConstantsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SuggestKeywordThemeConstantsResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
