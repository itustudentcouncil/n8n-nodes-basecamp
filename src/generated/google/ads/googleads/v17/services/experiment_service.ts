// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v17/services/experiment_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../../longrunning/operations.js";
import { Empty } from "../../../../protobuf/empty.js";
import { FieldMask } from "../../../../protobuf/field_mask.js";
import { Status } from "../../../../rpc/status.js";
import { Experiment } from "../resources/experiment.js";

export const protobufPackage = "google.ads.googleads.v17.services";

/**
 * Request message for
 * [ExperimentService.MutateExperiments][google.ads.googleads.v17.services.ExperimentService.MutateExperiments].
 */
export interface MutateExperimentsRequest {
  /** Required. The ID of the customer whose experiments are being modified. */
  customerId: string;
  /** Required. The list of operations to perform on individual experiments. */
  operations: ExperimentOperation[];
  /**
   * If true, successful operations will be carried out and invalid
   * operations will return errors. If false, all operations will be carried
   * out in one transaction if and only if they are all valid.
   * Default is false.
   */
  partialFailure: boolean;
  /**
   * If true, the request is validated but not executed. Only errors are
   * returned, not results.
   */
  validateOnly: boolean;
}

/** A single operation on an experiment. */
export interface ExperimentOperation {
  /** FieldMask that determines which resource fields are modified in an update. */
  updateMask:
    | string[]
    | undefined;
  /** Create operation */
  create?:
    | Experiment
    | undefined;
  /**
   * Update operation: The experiment is expected to have a valid
   * resource name.
   */
  update?:
    | Experiment
    | undefined;
  /**
   * Remove operation: The experiment is expected to have a valid
   * resource name, in this format:
   *
   * `customers/{customer_id}/experiments/{campaign_experiment_id}`
   */
  remove?: string | undefined;
}

/** Response message for experiment mutate. */
export interface MutateExperimentsResponse {
  /**
   * Errors that pertain to operation failures in the partial failure mode.
   * Returned only when partial_failure = true and all errors occur inside the
   * operations. If any errors occur outside the operations (for example, auth
   * errors), we return an RPC level error.
   */
  partialFailureError:
    | Status
    | undefined;
  /** All results for the mutate. */
  results: MutateExperimentResult[];
}

/** The result for the campaign experiment mutate. */
export interface MutateExperimentResult {
  /** Returned for successful operations. */
  resourceName: string;
}

/**
 * Request message for
 * [ExperimentService.EndExperiment][google.ads.googleads.v17.services.ExperimentService.EndExperiment].
 */
export interface EndExperimentRequest {
  /** Required. The resource name of the campaign experiment to end. */
  experiment: string;
  /**
   * If true, the request is validated but not executed. Only errors are
   * returned, not results.
   */
  validateOnly: boolean;
}

/**
 * Request message for
 * [ExperimentService.ListExperimentAsyncErrors][google.ads.googleads.v17.services.ExperimentService.ListExperimentAsyncErrors].
 */
export interface ListExperimentAsyncErrorsRequest {
  /**
   * Required. The name of the experiment from which to retrieve the async
   * errors.
   */
  resourceName: string;
  /**
   * Token of the page to retrieve. If not specified, the first
   * page of results will be returned. Use the value obtained from
   * `next_page_token` in the previous response in order to request
   * the next page of results.
   */
  pageToken: string;
  /**
   * Number of elements to retrieve in a single page.
   * When a page request is too large, the server may decide to
   * further limit the number of returned resources.
   * The maximum page size is 1000.
   */
  pageSize: number;
}

/**
 * Response message for
 * [ExperimentService.ListExperimentAsyncErrors][google.ads.googleads.v17.services.ExperimentService.ListExperimentAsyncErrors].
 */
export interface ListExperimentAsyncErrorsResponse {
  /** details of the errors when performing the asynchronous operation. */
  errors: Status[];
  /**
   * Pagination token used to retrieve the next page of results.
   * Pass the content of this string as the `page_token` attribute of
   * the next request. `next_page_token` is not returned for the last
   * page.
   */
  nextPageToken: string;
}

/**
 * Request message for
 * [ExperimentService.GraduateExperiment][google.ads.googleads.v17.services.ExperimentService.GraduateExperiment].
 */
export interface GraduateExperimentRequest {
  /** Required. The experiment to be graduated. */
  experiment: string;
  /**
   * Required. List of campaign budget mappings for graduation. Each campaign
   * that appears here will graduate, and will be assigned a new budget that is
   * paired with it in the mapping. The maximum size is one.
   */
  campaignBudgetMappings: CampaignBudgetMapping[];
  /**
   * If true, the request is validated but not executed. Only errors are
   * returned, not results.
   */
  validateOnly: boolean;
}

/** The mapping of experiment campaign and budget to be graduated. */
export interface CampaignBudgetMapping {
  /** Required. The experiment campaign to graduate. */
  experimentCampaign: string;
  /**
   * Required. The budget that should be attached to the graduating experiment
   * campaign.
   */
  campaignBudget: string;
}

/**
 * Request message for
 * [ExperimentService.ScheduleExperiment][google.ads.googleads.v17.services.ExperimentService.ScheduleExperiment].
 */
export interface ScheduleExperimentRequest {
  /** Required. The scheduled experiment. */
  resourceName: string;
  /**
   * If true, the request is validated but not executed. Only errors are
   * returned, not results.
   */
  validateOnly: boolean;
}

/** The metadata of the scheduled experiment. */
export interface ScheduleExperimentMetadata {
  /** Required. The scheduled experiment. */
  experiment: string;
}

/**
 * Request message for
 * [ExperimentService.PromoteExperiment][google.ads.googleads.v17.services.ExperimentService.PromoteExperiment].
 */
export interface PromoteExperimentRequest {
  /** Required. The resource name of the experiment to promote. */
  resourceName: string;
  /**
   * If true, the request is validated but not executed. Only errors are
   * returned, not results.
   */
  validateOnly: boolean;
}

/** The metadata of the promoted experiment. */
export interface PromoteExperimentMetadata {
  /** Required. The promoted experiment. */
  experiment: string;
}

function createBaseMutateExperimentsRequest(): MutateExperimentsRequest {
  return { customerId: "", operations: [], partialFailure: false, validateOnly: false };
}

export const MutateExperimentsRequest: MessageFns<MutateExperimentsRequest> = {
  encode(message: MutateExperimentsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.customerId !== "") {
      writer.uint32(10).string(message.customerId);
    }
    for (const v of message.operations) {
      ExperimentOperation.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.partialFailure !== false) {
      writer.uint32(24).bool(message.partialFailure);
    }
    if (message.validateOnly !== false) {
      writer.uint32(32).bool(message.validateOnly);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MutateExperimentsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMutateExperimentsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customerId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.operations.push(ExperimentOperation.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.partialFailure = reader.bool();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MutateExperimentsRequest {
    return {
      customerId: isSet(object.customerId) ? globalThis.String(object.customerId) : "",
      operations: globalThis.Array.isArray(object?.operations)
        ? object.operations.map((e: any) => ExperimentOperation.fromJSON(e))
        : [],
      partialFailure: isSet(object.partialFailure) ? globalThis.Boolean(object.partialFailure) : false,
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
    };
  },

  toJSON(message: MutateExperimentsRequest): unknown {
    const obj: any = {};
    if (message.customerId !== "") {
      obj.customerId = message.customerId;
    }
    if (message.operations?.length) {
      obj.operations = message.operations.map((e) => ExperimentOperation.toJSON(e));
    }
    if (message.partialFailure !== false) {
      obj.partialFailure = message.partialFailure;
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    return obj;
  },

  create(base?: DeepPartial<MutateExperimentsRequest>): MutateExperimentsRequest {
    return MutateExperimentsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MutateExperimentsRequest>): MutateExperimentsRequest {
    const message = createBaseMutateExperimentsRequest();
    message.customerId = object.customerId ?? "";
    message.operations = object.operations?.map((e) => ExperimentOperation.fromPartial(e)) || [];
    message.partialFailure = object.partialFailure ?? false;
    message.validateOnly = object.validateOnly ?? false;
    return message;
  },
};

function createBaseExperimentOperation(): ExperimentOperation {
  return { updateMask: undefined, create: undefined, update: undefined, remove: undefined };
}

export const ExperimentOperation: MessageFns<ExperimentOperation> = {
  encode(message: ExperimentOperation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(34).fork()).join();
    }
    if (message.create !== undefined) {
      Experiment.encode(message.create, writer.uint32(10).fork()).join();
    }
    if (message.update !== undefined) {
      Experiment.encode(message.update, writer.uint32(18).fork()).join();
    }
    if (message.remove !== undefined) {
      writer.uint32(26).string(message.remove);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExperimentOperation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExperimentOperation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 4:
          if (tag !== 34) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 1:
          if (tag !== 10) {
            break;
          }

          message.create = Experiment.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.update = Experiment.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.remove = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExperimentOperation {
    return {
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      create: isSet(object.create) ? Experiment.fromJSON(object.create) : undefined,
      update: isSet(object.update) ? Experiment.fromJSON(object.update) : undefined,
      remove: isSet(object.remove) ? globalThis.String(object.remove) : undefined,
    };
  },

  toJSON(message: ExperimentOperation): unknown {
    const obj: any = {};
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.create !== undefined) {
      obj.create = Experiment.toJSON(message.create);
    }
    if (message.update !== undefined) {
      obj.update = Experiment.toJSON(message.update);
    }
    if (message.remove !== undefined) {
      obj.remove = message.remove;
    }
    return obj;
  },

  create(base?: DeepPartial<ExperimentOperation>): ExperimentOperation {
    return ExperimentOperation.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExperimentOperation>): ExperimentOperation {
    const message = createBaseExperimentOperation();
    message.updateMask = object.updateMask ?? undefined;
    message.create = (object.create !== undefined && object.create !== null)
      ? Experiment.fromPartial(object.create)
      : undefined;
    message.update = (object.update !== undefined && object.update !== null)
      ? Experiment.fromPartial(object.update)
      : undefined;
    message.remove = object.remove ?? undefined;
    return message;
  },
};

function createBaseMutateExperimentsResponse(): MutateExperimentsResponse {
  return { partialFailureError: undefined, results: [] };
}

export const MutateExperimentsResponse: MessageFns<MutateExperimentsResponse> = {
  encode(message: MutateExperimentsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.partialFailureError !== undefined) {
      Status.encode(message.partialFailureError, writer.uint32(10).fork()).join();
    }
    for (const v of message.results) {
      MutateExperimentResult.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MutateExperimentsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMutateExperimentsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.partialFailureError = Status.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.results.push(MutateExperimentResult.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MutateExperimentsResponse {
    return {
      partialFailureError: isSet(object.partialFailureError) ? Status.fromJSON(object.partialFailureError) : undefined,
      results: globalThis.Array.isArray(object?.results)
        ? object.results.map((e: any) => MutateExperimentResult.fromJSON(e))
        : [],
    };
  },

  toJSON(message: MutateExperimentsResponse): unknown {
    const obj: any = {};
    if (message.partialFailureError !== undefined) {
      obj.partialFailureError = Status.toJSON(message.partialFailureError);
    }
    if (message.results?.length) {
      obj.results = message.results.map((e) => MutateExperimentResult.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<MutateExperimentsResponse>): MutateExperimentsResponse {
    return MutateExperimentsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MutateExperimentsResponse>): MutateExperimentsResponse {
    const message = createBaseMutateExperimentsResponse();
    message.partialFailureError = (object.partialFailureError !== undefined && object.partialFailureError !== null)
      ? Status.fromPartial(object.partialFailureError)
      : undefined;
    message.results = object.results?.map((e) => MutateExperimentResult.fromPartial(e)) || [];
    return message;
  },
};

function createBaseMutateExperimentResult(): MutateExperimentResult {
  return { resourceName: "" };
}

export const MutateExperimentResult: MessageFns<MutateExperimentResult> = {
  encode(message: MutateExperimentResult, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(10).string(message.resourceName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MutateExperimentResult {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMutateExperimentResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MutateExperimentResult {
    return { resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "" };
  },

  toJSON(message: MutateExperimentResult): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    return obj;
  },

  create(base?: DeepPartial<MutateExperimentResult>): MutateExperimentResult {
    return MutateExperimentResult.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MutateExperimentResult>): MutateExperimentResult {
    const message = createBaseMutateExperimentResult();
    message.resourceName = object.resourceName ?? "";
    return message;
  },
};

function createBaseEndExperimentRequest(): EndExperimentRequest {
  return { experiment: "", validateOnly: false };
}

export const EndExperimentRequest: MessageFns<EndExperimentRequest> = {
  encode(message: EndExperimentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.experiment !== "") {
      writer.uint32(10).string(message.experiment);
    }
    if (message.validateOnly !== false) {
      writer.uint32(16).bool(message.validateOnly);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EndExperimentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEndExperimentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.experiment = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EndExperimentRequest {
    return {
      experiment: isSet(object.experiment) ? globalThis.String(object.experiment) : "",
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
    };
  },

  toJSON(message: EndExperimentRequest): unknown {
    const obj: any = {};
    if (message.experiment !== "") {
      obj.experiment = message.experiment;
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    return obj;
  },

  create(base?: DeepPartial<EndExperimentRequest>): EndExperimentRequest {
    return EndExperimentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EndExperimentRequest>): EndExperimentRequest {
    const message = createBaseEndExperimentRequest();
    message.experiment = object.experiment ?? "";
    message.validateOnly = object.validateOnly ?? false;
    return message;
  },
};

function createBaseListExperimentAsyncErrorsRequest(): ListExperimentAsyncErrorsRequest {
  return { resourceName: "", pageToken: "", pageSize: 0 };
}

export const ListExperimentAsyncErrorsRequest: MessageFns<ListExperimentAsyncErrorsRequest> = {
  encode(message: ListExperimentAsyncErrorsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(10).string(message.resourceName);
    }
    if (message.pageToken !== "") {
      writer.uint32(18).string(message.pageToken);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListExperimentAsyncErrorsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListExperimentAsyncErrorsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListExperimentAsyncErrorsRequest {
    return {
      resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "",
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
    };
  },

  toJSON(message: ListExperimentAsyncErrorsRequest): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    return obj;
  },

  create(base?: DeepPartial<ListExperimentAsyncErrorsRequest>): ListExperimentAsyncErrorsRequest {
    return ListExperimentAsyncErrorsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListExperimentAsyncErrorsRequest>): ListExperimentAsyncErrorsRequest {
    const message = createBaseListExperimentAsyncErrorsRequest();
    message.resourceName = object.resourceName ?? "";
    message.pageToken = object.pageToken ?? "";
    message.pageSize = object.pageSize ?? 0;
    return message;
  },
};

function createBaseListExperimentAsyncErrorsResponse(): ListExperimentAsyncErrorsResponse {
  return { errors: [], nextPageToken: "" };
}

export const ListExperimentAsyncErrorsResponse: MessageFns<ListExperimentAsyncErrorsResponse> = {
  encode(message: ListExperimentAsyncErrorsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.errors) {
      Status.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListExperimentAsyncErrorsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListExperimentAsyncErrorsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.errors.push(Status.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListExperimentAsyncErrorsResponse {
    return {
      errors: globalThis.Array.isArray(object?.errors) ? object.errors.map((e: any) => Status.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListExperimentAsyncErrorsResponse): unknown {
    const obj: any = {};
    if (message.errors?.length) {
      obj.errors = message.errors.map((e) => Status.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListExperimentAsyncErrorsResponse>): ListExperimentAsyncErrorsResponse {
    return ListExperimentAsyncErrorsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListExperimentAsyncErrorsResponse>): ListExperimentAsyncErrorsResponse {
    const message = createBaseListExperimentAsyncErrorsResponse();
    message.errors = object.errors?.map((e) => Status.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGraduateExperimentRequest(): GraduateExperimentRequest {
  return { experiment: "", campaignBudgetMappings: [], validateOnly: false };
}

export const GraduateExperimentRequest: MessageFns<GraduateExperimentRequest> = {
  encode(message: GraduateExperimentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.experiment !== "") {
      writer.uint32(10).string(message.experiment);
    }
    for (const v of message.campaignBudgetMappings) {
      CampaignBudgetMapping.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.validateOnly !== false) {
      writer.uint32(24).bool(message.validateOnly);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GraduateExperimentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGraduateExperimentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.experiment = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.campaignBudgetMappings.push(CampaignBudgetMapping.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GraduateExperimentRequest {
    return {
      experiment: isSet(object.experiment) ? globalThis.String(object.experiment) : "",
      campaignBudgetMappings: globalThis.Array.isArray(object?.campaignBudgetMappings)
        ? object.campaignBudgetMappings.map((e: any) => CampaignBudgetMapping.fromJSON(e))
        : [],
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
    };
  },

  toJSON(message: GraduateExperimentRequest): unknown {
    const obj: any = {};
    if (message.experiment !== "") {
      obj.experiment = message.experiment;
    }
    if (message.campaignBudgetMappings?.length) {
      obj.campaignBudgetMappings = message.campaignBudgetMappings.map((e) => CampaignBudgetMapping.toJSON(e));
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    return obj;
  },

  create(base?: DeepPartial<GraduateExperimentRequest>): GraduateExperimentRequest {
    return GraduateExperimentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GraduateExperimentRequest>): GraduateExperimentRequest {
    const message = createBaseGraduateExperimentRequest();
    message.experiment = object.experiment ?? "";
    message.campaignBudgetMappings = object.campaignBudgetMappings?.map((e) => CampaignBudgetMapping.fromPartial(e)) ||
      [];
    message.validateOnly = object.validateOnly ?? false;
    return message;
  },
};

function createBaseCampaignBudgetMapping(): CampaignBudgetMapping {
  return { experimentCampaign: "", campaignBudget: "" };
}

export const CampaignBudgetMapping: MessageFns<CampaignBudgetMapping> = {
  encode(message: CampaignBudgetMapping, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.experimentCampaign !== "") {
      writer.uint32(10).string(message.experimentCampaign);
    }
    if (message.campaignBudget !== "") {
      writer.uint32(18).string(message.campaignBudget);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CampaignBudgetMapping {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCampaignBudgetMapping();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.experimentCampaign = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.campaignBudget = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CampaignBudgetMapping {
    return {
      experimentCampaign: isSet(object.experimentCampaign) ? globalThis.String(object.experimentCampaign) : "",
      campaignBudget: isSet(object.campaignBudget) ? globalThis.String(object.campaignBudget) : "",
    };
  },

  toJSON(message: CampaignBudgetMapping): unknown {
    const obj: any = {};
    if (message.experimentCampaign !== "") {
      obj.experimentCampaign = message.experimentCampaign;
    }
    if (message.campaignBudget !== "") {
      obj.campaignBudget = message.campaignBudget;
    }
    return obj;
  },

  create(base?: DeepPartial<CampaignBudgetMapping>): CampaignBudgetMapping {
    return CampaignBudgetMapping.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CampaignBudgetMapping>): CampaignBudgetMapping {
    const message = createBaseCampaignBudgetMapping();
    message.experimentCampaign = object.experimentCampaign ?? "";
    message.campaignBudget = object.campaignBudget ?? "";
    return message;
  },
};

function createBaseScheduleExperimentRequest(): ScheduleExperimentRequest {
  return { resourceName: "", validateOnly: false };
}

export const ScheduleExperimentRequest: MessageFns<ScheduleExperimentRequest> = {
  encode(message: ScheduleExperimentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(10).string(message.resourceName);
    }
    if (message.validateOnly !== false) {
      writer.uint32(16).bool(message.validateOnly);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ScheduleExperimentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseScheduleExperimentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceName = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ScheduleExperimentRequest {
    return {
      resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "",
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
    };
  },

  toJSON(message: ScheduleExperimentRequest): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    return obj;
  },

  create(base?: DeepPartial<ScheduleExperimentRequest>): ScheduleExperimentRequest {
    return ScheduleExperimentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ScheduleExperimentRequest>): ScheduleExperimentRequest {
    const message = createBaseScheduleExperimentRequest();
    message.resourceName = object.resourceName ?? "";
    message.validateOnly = object.validateOnly ?? false;
    return message;
  },
};

function createBaseScheduleExperimentMetadata(): ScheduleExperimentMetadata {
  return { experiment: "" };
}

export const ScheduleExperimentMetadata: MessageFns<ScheduleExperimentMetadata> = {
  encode(message: ScheduleExperimentMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.experiment !== "") {
      writer.uint32(10).string(message.experiment);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ScheduleExperimentMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseScheduleExperimentMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.experiment = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ScheduleExperimentMetadata {
    return { experiment: isSet(object.experiment) ? globalThis.String(object.experiment) : "" };
  },

  toJSON(message: ScheduleExperimentMetadata): unknown {
    const obj: any = {};
    if (message.experiment !== "") {
      obj.experiment = message.experiment;
    }
    return obj;
  },

  create(base?: DeepPartial<ScheduleExperimentMetadata>): ScheduleExperimentMetadata {
    return ScheduleExperimentMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ScheduleExperimentMetadata>): ScheduleExperimentMetadata {
    const message = createBaseScheduleExperimentMetadata();
    message.experiment = object.experiment ?? "";
    return message;
  },
};

function createBasePromoteExperimentRequest(): PromoteExperimentRequest {
  return { resourceName: "", validateOnly: false };
}

export const PromoteExperimentRequest: MessageFns<PromoteExperimentRequest> = {
  encode(message: PromoteExperimentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(10).string(message.resourceName);
    }
    if (message.validateOnly !== false) {
      writer.uint32(16).bool(message.validateOnly);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PromoteExperimentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePromoteExperimentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceName = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PromoteExperimentRequest {
    return {
      resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "",
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
    };
  },

  toJSON(message: PromoteExperimentRequest): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    return obj;
  },

  create(base?: DeepPartial<PromoteExperimentRequest>): PromoteExperimentRequest {
    return PromoteExperimentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PromoteExperimentRequest>): PromoteExperimentRequest {
    const message = createBasePromoteExperimentRequest();
    message.resourceName = object.resourceName ?? "";
    message.validateOnly = object.validateOnly ?? false;
    return message;
  },
};

function createBasePromoteExperimentMetadata(): PromoteExperimentMetadata {
  return { experiment: "" };
}

export const PromoteExperimentMetadata: MessageFns<PromoteExperimentMetadata> = {
  encode(message: PromoteExperimentMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.experiment !== "") {
      writer.uint32(10).string(message.experiment);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PromoteExperimentMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePromoteExperimentMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.experiment = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PromoteExperimentMetadata {
    return { experiment: isSet(object.experiment) ? globalThis.String(object.experiment) : "" };
  },

  toJSON(message: PromoteExperimentMetadata): unknown {
    const obj: any = {};
    if (message.experiment !== "") {
      obj.experiment = message.experiment;
    }
    return obj;
  },

  create(base?: DeepPartial<PromoteExperimentMetadata>): PromoteExperimentMetadata {
    return PromoteExperimentMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PromoteExperimentMetadata>): PromoteExperimentMetadata {
    const message = createBasePromoteExperimentMetadata();
    message.experiment = object.experiment ?? "";
    return message;
  },
};

/** Service to manage experiments. */
export type ExperimentServiceDefinition = typeof ExperimentServiceDefinition;
export const ExperimentServiceDefinition = {
  name: "ExperimentService",
  fullName: "google.ads.googleads.v17.services.ExperimentService",
  methods: {
    /**
     * Creates, updates, or removes experiments. Operation statuses are returned.
     *
     * List of thrown errors:
     *   [AuthenticationError]()
     *   [AuthorizationError]()
     *   [ExperimentError]()
     *   [HeaderError]()
     *   [InternalError]()
     *   [QuotaError]()
     *   [RequestError]()
     */
    mutateExperiments: {
      name: "MutateExperiments",
      requestType: MutateExperimentsRequest,
      requestStream: false,
      responseType: MutateExperimentsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              22,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              95,
              105,
              100,
              44,
              111,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              115,
            ]),
          ],
          578365826: [
            Buffer.from([
              54,
              58,
              1,
              42,
              34,
              49,
              47,
              118,
              49,
              55,
              47,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              115,
              47,
              123,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              95,
              105,
              100,
              61,
              42,
              125,
              47,
              101,
              120,
              112,
              101,
              114,
              105,
              109,
              101,
              110,
              116,
              115,
              58,
              109,
              117,
              116,
              97,
              116,
              101,
            ]),
          ],
        },
      },
    },
    /**
     * Immediately ends an experiment, changing the experiment's scheduled
     * end date and without waiting for end of day. End date is updated to be the
     * time of the request.
     *
     * List of thrown errors:
     *   [AuthenticationError]()
     *   [AuthorizationError]()
     *   [ExperimentError]()
     *   [HeaderError]()
     *   [InternalError]()
     *   [QuotaError]()
     *   [RequestError]()
     */
    endExperiment: {
      name: "EndExperiment",
      requestType: EndExperimentRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([10, 101, 120, 112, 101, 114, 105, 109, 101, 110, 116])],
          578365826: [
            Buffer.from([
              62,
              58,
              1,
              42,
              34,
              57,
              47,
              118,
              49,
              55,
              47,
              123,
              101,
              120,
              112,
              101,
              114,
              105,
              109,
              101,
              110,
              116,
              61,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              115,
              47,
              42,
              47,
              101,
              120,
              112,
              101,
              114,
              105,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
              58,
              101,
              110,
              100,
              69,
              120,
              112,
              101,
              114,
              105,
              109,
              101,
              110,
              116,
            ]),
          ],
        },
      },
    },
    /**
     * Returns all errors that occurred during the last Experiment update (either
     * scheduling or promotion).
     * Supports standard list paging.
     *
     * List of thrown errors:
     *   [AuthenticationError]()
     *   [AuthorizationError]()
     *   [HeaderError]()
     *   [InternalError]()
     *   [QuotaError]()
     *   [RequestError]()
     */
    listExperimentAsyncErrors: {
      name: "ListExperimentAsyncErrors",
      requestType: ListExperimentAsyncErrorsRequest,
      requestStream: false,
      responseType: ListExperimentAsyncErrorsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([13, 114, 101, 115, 111, 117, 114, 99, 101, 95, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              74,
              18,
              72,
              47,
              118,
              49,
              55,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              95,
              110,
              97,
              109,
              101,
              61,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              115,
              47,
              42,
              47,
              101,
              120,
              112,
              101,
              114,
              105,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
              58,
              108,
              105,
              115,
              116,
              69,
              120,
              112,
              101,
              114,
              105,
              109,
              101,
              110,
              116,
              65,
              115,
              121,
              110,
              99,
              69,
              114,
              114,
              111,
              114,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Graduates an experiment to a full campaign.
     *
     * List of thrown errors:
     *   [AuthenticationError]()
     *   [AuthorizationError]()
     *   [ExperimentError]()
     *   [HeaderError]()
     *   [InternalError]()
     *   [MutateError]()
     *   [QuotaError]()
     *   [RequestError]()
     */
    graduateExperiment: {
      name: "GraduateExperiment",
      requestType: GraduateExperimentRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              35,
              101,
              120,
              112,
              101,
              114,
              105,
              109,
              101,
              110,
              116,
              44,
              99,
              97,
              109,
              112,
              97,
              105,
              103,
              110,
              95,
              98,
              117,
              100,
              103,
              101,
              116,
              95,
              109,
              97,
              112,
              112,
              105,
              110,
              103,
              115,
            ]),
          ],
          578365826: [
            Buffer.from([
              67,
              58,
              1,
              42,
              34,
              62,
              47,
              118,
              49,
              55,
              47,
              123,
              101,
              120,
              112,
              101,
              114,
              105,
              109,
              101,
              110,
              116,
              61,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              115,
              47,
              42,
              47,
              101,
              120,
              112,
              101,
              114,
              105,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
              58,
              103,
              114,
              97,
              100,
              117,
              97,
              116,
              101,
              69,
              120,
              112,
              101,
              114,
              105,
              109,
              101,
              110,
              116,
            ]),
          ],
        },
      },
    },
    /**
     * Schedule an experiment. The in design campaign
     * will be converted into a real campaign (called the experiment campaign)
     * that will begin serving ads if successfully created.
     *
     * The experiment is scheduled immediately with status INITIALIZING.
     * This method returns a long running operation that tracks the forking of the
     * in design campaign. If the forking fails, a list of errors can be retrieved
     * using the ListExperimentAsyncErrors method. The operation's
     * metadata will be a string containing the resource name of the created
     * experiment.
     *
     * List of thrown errors:
     *   [AuthenticationError]()
     *   [AuthorizationError]()
     *   [ExperimentError]()
     *   [DatabaseError]()
     *   [DateError]()
     *   [DateRangeError]()
     *   [FieldError]()
     *   [HeaderError]()
     *   [InternalError]()
     *   [QuotaError]()
     *   [RangeError]()
     *   [RequestError]()
     */
    scheduleExperiment: {
      name: "ScheduleExperiment",
      requestType: ScheduleExperimentRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              85,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              60,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              97,
              100,
              115,
              46,
              103,
              111,
              111,
              103,
              108,
              101,
              97,
              100,
              115,
              46,
              118,
              49,
              55,
              46,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
              46,
              83,
              99,
              104,
              101,
              100,
              117,
              108,
              101,
              69,
              120,
              112,
              101,
              114,
              105,
              109,
              101,
              110,
              116,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([13, 114, 101, 115, 111, 117, 114, 99, 101, 95, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              70,
              58,
              1,
              42,
              34,
              65,
              47,
              118,
              49,
              55,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              95,
              110,
              97,
              109,
              101,
              61,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              115,
              47,
              42,
              47,
              101,
              120,
              112,
              101,
              114,
              105,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
              58,
              115,
              99,
              104,
              101,
              100,
              117,
              108,
              101,
              69,
              120,
              112,
              101,
              114,
              105,
              109,
              101,
              110,
              116,
            ]),
          ],
        },
      },
    },
    /**
     * Promotes the trial campaign thus applying changes in the trial campaign
     * to the base campaign.
     * This method returns a long running operation that tracks the promotion of
     * the experiment campaign. If it fails, a list of errors can be retrieved
     * using the ListExperimentAsyncErrors method. The operation's
     * metadata will be a string containing the resource name of the created
     * experiment.
     *
     * List of thrown errors:
     *   [AuthenticationError]()
     *   [AuthorizationError]()
     *   [ExperimentError]()
     *   [HeaderError]()
     *   [InternalError]()
     *   [QuotaError]()
     *   [RequestError]()
     */
    promoteExperiment: {
      name: "PromoteExperiment",
      requestType: PromoteExperimentRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              84,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              59,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              97,
              100,
              115,
              46,
              103,
              111,
              111,
              103,
              108,
              101,
              97,
              100,
              115,
              46,
              118,
              49,
              55,
              46,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
              46,
              80,
              114,
              111,
              109,
              111,
              116,
              101,
              69,
              120,
              112,
              101,
              114,
              105,
              109,
              101,
              110,
              116,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([13, 114, 101, 115, 111, 117, 114, 99, 101, 95, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              69,
              58,
              1,
              42,
              34,
              64,
              47,
              118,
              49,
              55,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              95,
              110,
              97,
              109,
              101,
              61,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              115,
              47,
              42,
              47,
              101,
              120,
              112,
              101,
              114,
              105,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
              58,
              112,
              114,
              111,
              109,
              111,
              116,
              101,
              69,
              120,
              112,
              101,
              114,
              105,
              109,
              101,
              110,
              116,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface ExperimentServiceImplementation<CallContextExt = {}> {
  /**
   * Creates, updates, or removes experiments. Operation statuses are returned.
   *
   * List of thrown errors:
   *   [AuthenticationError]()
   *   [AuthorizationError]()
   *   [ExperimentError]()
   *   [HeaderError]()
   *   [InternalError]()
   *   [QuotaError]()
   *   [RequestError]()
   */
  mutateExperiments(
    request: MutateExperimentsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<MutateExperimentsResponse>>;
  /**
   * Immediately ends an experiment, changing the experiment's scheduled
   * end date and without waiting for end of day. End date is updated to be the
   * time of the request.
   *
   * List of thrown errors:
   *   [AuthenticationError]()
   *   [AuthorizationError]()
   *   [ExperimentError]()
   *   [HeaderError]()
   *   [InternalError]()
   *   [QuotaError]()
   *   [RequestError]()
   */
  endExperiment(request: EndExperimentRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
  /**
   * Returns all errors that occurred during the last Experiment update (either
   * scheduling or promotion).
   * Supports standard list paging.
   *
   * List of thrown errors:
   *   [AuthenticationError]()
   *   [AuthorizationError]()
   *   [HeaderError]()
   *   [InternalError]()
   *   [QuotaError]()
   *   [RequestError]()
   */
  listExperimentAsyncErrors(
    request: ListExperimentAsyncErrorsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListExperimentAsyncErrorsResponse>>;
  /**
   * Graduates an experiment to a full campaign.
   *
   * List of thrown errors:
   *   [AuthenticationError]()
   *   [AuthorizationError]()
   *   [ExperimentError]()
   *   [HeaderError]()
   *   [InternalError]()
   *   [MutateError]()
   *   [QuotaError]()
   *   [RequestError]()
   */
  graduateExperiment(
    request: GraduateExperimentRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  /**
   * Schedule an experiment. The in design campaign
   * will be converted into a real campaign (called the experiment campaign)
   * that will begin serving ads if successfully created.
   *
   * The experiment is scheduled immediately with status INITIALIZING.
   * This method returns a long running operation that tracks the forking of the
   * in design campaign. If the forking fails, a list of errors can be retrieved
   * using the ListExperimentAsyncErrors method. The operation's
   * metadata will be a string containing the resource name of the created
   * experiment.
   *
   * List of thrown errors:
   *   [AuthenticationError]()
   *   [AuthorizationError]()
   *   [ExperimentError]()
   *   [DatabaseError]()
   *   [DateError]()
   *   [DateRangeError]()
   *   [FieldError]()
   *   [HeaderError]()
   *   [InternalError]()
   *   [QuotaError]()
   *   [RangeError]()
   *   [RequestError]()
   */
  scheduleExperiment(
    request: ScheduleExperimentRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Promotes the trial campaign thus applying changes in the trial campaign
   * to the base campaign.
   * This method returns a long running operation that tracks the promotion of
   * the experiment campaign. If it fails, a list of errors can be retrieved
   * using the ListExperimentAsyncErrors method. The operation's
   * metadata will be a string containing the resource name of the created
   * experiment.
   *
   * List of thrown errors:
   *   [AuthenticationError]()
   *   [AuthorizationError]()
   *   [ExperimentError]()
   *   [HeaderError]()
   *   [InternalError]()
   *   [QuotaError]()
   *   [RequestError]()
   */
  promoteExperiment(
    request: PromoteExperimentRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
}

export interface ExperimentServiceClient<CallOptionsExt = {}> {
  /**
   * Creates, updates, or removes experiments. Operation statuses are returned.
   *
   * List of thrown errors:
   *   [AuthenticationError]()
   *   [AuthorizationError]()
   *   [ExperimentError]()
   *   [HeaderError]()
   *   [InternalError]()
   *   [QuotaError]()
   *   [RequestError]()
   */
  mutateExperiments(
    request: DeepPartial<MutateExperimentsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<MutateExperimentsResponse>;
  /**
   * Immediately ends an experiment, changing the experiment's scheduled
   * end date and without waiting for end of day. End date is updated to be the
   * time of the request.
   *
   * List of thrown errors:
   *   [AuthenticationError]()
   *   [AuthorizationError]()
   *   [ExperimentError]()
   *   [HeaderError]()
   *   [InternalError]()
   *   [QuotaError]()
   *   [RequestError]()
   */
  endExperiment(request: DeepPartial<EndExperimentRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
  /**
   * Returns all errors that occurred during the last Experiment update (either
   * scheduling or promotion).
   * Supports standard list paging.
   *
   * List of thrown errors:
   *   [AuthenticationError]()
   *   [AuthorizationError]()
   *   [HeaderError]()
   *   [InternalError]()
   *   [QuotaError]()
   *   [RequestError]()
   */
  listExperimentAsyncErrors(
    request: DeepPartial<ListExperimentAsyncErrorsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListExperimentAsyncErrorsResponse>;
  /**
   * Graduates an experiment to a full campaign.
   *
   * List of thrown errors:
   *   [AuthenticationError]()
   *   [AuthorizationError]()
   *   [ExperimentError]()
   *   [HeaderError]()
   *   [InternalError]()
   *   [MutateError]()
   *   [QuotaError]()
   *   [RequestError]()
   */
  graduateExperiment(
    request: DeepPartial<GraduateExperimentRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  /**
   * Schedule an experiment. The in design campaign
   * will be converted into a real campaign (called the experiment campaign)
   * that will begin serving ads if successfully created.
   *
   * The experiment is scheduled immediately with status INITIALIZING.
   * This method returns a long running operation that tracks the forking of the
   * in design campaign. If the forking fails, a list of errors can be retrieved
   * using the ListExperimentAsyncErrors method. The operation's
   * metadata will be a string containing the resource name of the created
   * experiment.
   *
   * List of thrown errors:
   *   [AuthenticationError]()
   *   [AuthorizationError]()
   *   [ExperimentError]()
   *   [DatabaseError]()
   *   [DateError]()
   *   [DateRangeError]()
   *   [FieldError]()
   *   [HeaderError]()
   *   [InternalError]()
   *   [QuotaError]()
   *   [RangeError]()
   *   [RequestError]()
   */
  scheduleExperiment(
    request: DeepPartial<ScheduleExperimentRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Promotes the trial campaign thus applying changes in the trial campaign
   * to the base campaign.
   * This method returns a long running operation that tracks the promotion of
   * the experiment campaign. If it fails, a list of errors can be retrieved
   * using the ListExperimentAsyncErrors method. The operation's
   * metadata will be a string containing the resource name of the created
   * experiment.
   *
   * List of thrown errors:
   *   [AuthenticationError]()
   *   [AuthorizationError]()
   *   [ExperimentError]()
   *   [HeaderError]()
   *   [InternalError]()
   *   [QuotaError]()
   *   [RequestError]()
   */
  promoteExperiment(
    request: DeepPartial<PromoteExperimentRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
