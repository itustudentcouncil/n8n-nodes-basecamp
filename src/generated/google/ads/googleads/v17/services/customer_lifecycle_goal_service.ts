// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/ads/googleads/v17/services/customer_lifecycle_goal_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { FieldMask } from "../../../../protobuf/field_mask.js";
import { CustomerLifecycleGoal } from "../resources/customer_lifecycle_goal.js";

export const protobufPackage = "google.ads.googleads.v17.services";

/**
 * Request message for
 * [CustomerLifecycleGoalService.configureCustomerLifecycleGoals][].
 */
export interface ConfigureCustomerLifecycleGoalsRequest {
  /** Required. The ID of the customer performing the upload. */
  customerId: string;
  /** Required. The operation to perform customer lifecycle goal update. */
  operation:
    | CustomerLifecycleGoalOperation
    | undefined;
  /**
   * Optional. If true, the request is validated but not executed. Only errors
   * are returned, not results.
   */
  validateOnly: boolean;
}

/** A single operation on a customer lifecycle goal. */
export interface CustomerLifecycleGoalOperation {
  /**
   * Optional. FieldMask that determines which resource fields are modified in
   * an update.
   */
  updateMask:
    | string[]
    | undefined;
  /** Create operation: Create a new customer lifecycle goal. */
  create?:
    | CustomerLifecycleGoal
    | undefined;
  /** Update operation: Update an existing customer lifecycle goal. */
  update?: CustomerLifecycleGoal | undefined;
}

/**
 * Response message for
 * [CustomerLifecycleGoalService.configureCustomerLifecycleGoals][].
 */
export interface ConfigureCustomerLifecycleGoalsResponse {
  /** result for the customer lifecycle goal configuration. */
  result: ConfigureCustomerLifecycleGoalsResult | undefined;
}

/** The result for the customer lifecycle goal configuration. */
export interface ConfigureCustomerLifecycleGoalsResult {
  /** Returned for the successful operation. */
  resourceName: string;
}

function createBaseConfigureCustomerLifecycleGoalsRequest(): ConfigureCustomerLifecycleGoalsRequest {
  return { customerId: "", operation: undefined, validateOnly: false };
}

export const ConfigureCustomerLifecycleGoalsRequest: MessageFns<ConfigureCustomerLifecycleGoalsRequest> = {
  encode(message: ConfigureCustomerLifecycleGoalsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.customerId !== "") {
      writer.uint32(10).string(message.customerId);
    }
    if (message.operation !== undefined) {
      CustomerLifecycleGoalOperation.encode(message.operation, writer.uint32(18).fork()).join();
    }
    if (message.validateOnly !== false) {
      writer.uint32(24).bool(message.validateOnly);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConfigureCustomerLifecycleGoalsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConfigureCustomerLifecycleGoalsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customerId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.operation = CustomerLifecycleGoalOperation.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConfigureCustomerLifecycleGoalsRequest {
    return {
      customerId: isSet(object.customerId) ? globalThis.String(object.customerId) : "",
      operation: isSet(object.operation) ? CustomerLifecycleGoalOperation.fromJSON(object.operation) : undefined,
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
    };
  },

  toJSON(message: ConfigureCustomerLifecycleGoalsRequest): unknown {
    const obj: any = {};
    if (message.customerId !== "") {
      obj.customerId = message.customerId;
    }
    if (message.operation !== undefined) {
      obj.operation = CustomerLifecycleGoalOperation.toJSON(message.operation);
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    return obj;
  },

  create(base?: DeepPartial<ConfigureCustomerLifecycleGoalsRequest>): ConfigureCustomerLifecycleGoalsRequest {
    return ConfigureCustomerLifecycleGoalsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ConfigureCustomerLifecycleGoalsRequest>): ConfigureCustomerLifecycleGoalsRequest {
    const message = createBaseConfigureCustomerLifecycleGoalsRequest();
    message.customerId = object.customerId ?? "";
    message.operation = (object.operation !== undefined && object.operation !== null)
      ? CustomerLifecycleGoalOperation.fromPartial(object.operation)
      : undefined;
    message.validateOnly = object.validateOnly ?? false;
    return message;
  },
};

function createBaseCustomerLifecycleGoalOperation(): CustomerLifecycleGoalOperation {
  return { updateMask: undefined, create: undefined, update: undefined };
}

export const CustomerLifecycleGoalOperation: MessageFns<CustomerLifecycleGoalOperation> = {
  encode(message: CustomerLifecycleGoalOperation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    if (message.create !== undefined) {
      CustomerLifecycleGoal.encode(message.create, writer.uint32(10).fork()).join();
    }
    if (message.update !== undefined) {
      CustomerLifecycleGoal.encode(message.update, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CustomerLifecycleGoalOperation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCustomerLifecycleGoalOperation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 1:
          if (tag !== 10) {
            break;
          }

          message.create = CustomerLifecycleGoal.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.update = CustomerLifecycleGoal.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CustomerLifecycleGoalOperation {
    return {
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      create: isSet(object.create) ? CustomerLifecycleGoal.fromJSON(object.create) : undefined,
      update: isSet(object.update) ? CustomerLifecycleGoal.fromJSON(object.update) : undefined,
    };
  },

  toJSON(message: CustomerLifecycleGoalOperation): unknown {
    const obj: any = {};
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.create !== undefined) {
      obj.create = CustomerLifecycleGoal.toJSON(message.create);
    }
    if (message.update !== undefined) {
      obj.update = CustomerLifecycleGoal.toJSON(message.update);
    }
    return obj;
  },

  create(base?: DeepPartial<CustomerLifecycleGoalOperation>): CustomerLifecycleGoalOperation {
    return CustomerLifecycleGoalOperation.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CustomerLifecycleGoalOperation>): CustomerLifecycleGoalOperation {
    const message = createBaseCustomerLifecycleGoalOperation();
    message.updateMask = object.updateMask ?? undefined;
    message.create = (object.create !== undefined && object.create !== null)
      ? CustomerLifecycleGoal.fromPartial(object.create)
      : undefined;
    message.update = (object.update !== undefined && object.update !== null)
      ? CustomerLifecycleGoal.fromPartial(object.update)
      : undefined;
    return message;
  },
};

function createBaseConfigureCustomerLifecycleGoalsResponse(): ConfigureCustomerLifecycleGoalsResponse {
  return { result: undefined };
}

export const ConfigureCustomerLifecycleGoalsResponse: MessageFns<ConfigureCustomerLifecycleGoalsResponse> = {
  encode(message: ConfigureCustomerLifecycleGoalsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.result !== undefined) {
      ConfigureCustomerLifecycleGoalsResult.encode(message.result, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConfigureCustomerLifecycleGoalsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConfigureCustomerLifecycleGoalsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.result = ConfigureCustomerLifecycleGoalsResult.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConfigureCustomerLifecycleGoalsResponse {
    return { result: isSet(object.result) ? ConfigureCustomerLifecycleGoalsResult.fromJSON(object.result) : undefined };
  },

  toJSON(message: ConfigureCustomerLifecycleGoalsResponse): unknown {
    const obj: any = {};
    if (message.result !== undefined) {
      obj.result = ConfigureCustomerLifecycleGoalsResult.toJSON(message.result);
    }
    return obj;
  },

  create(base?: DeepPartial<ConfigureCustomerLifecycleGoalsResponse>): ConfigureCustomerLifecycleGoalsResponse {
    return ConfigureCustomerLifecycleGoalsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ConfigureCustomerLifecycleGoalsResponse>): ConfigureCustomerLifecycleGoalsResponse {
    const message = createBaseConfigureCustomerLifecycleGoalsResponse();
    message.result = (object.result !== undefined && object.result !== null)
      ? ConfigureCustomerLifecycleGoalsResult.fromPartial(object.result)
      : undefined;
    return message;
  },
};

function createBaseConfigureCustomerLifecycleGoalsResult(): ConfigureCustomerLifecycleGoalsResult {
  return { resourceName: "" };
}

export const ConfigureCustomerLifecycleGoalsResult: MessageFns<ConfigureCustomerLifecycleGoalsResult> = {
  encode(message: ConfigureCustomerLifecycleGoalsResult, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(10).string(message.resourceName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConfigureCustomerLifecycleGoalsResult {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConfigureCustomerLifecycleGoalsResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConfigureCustomerLifecycleGoalsResult {
    return { resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "" };
  },

  toJSON(message: ConfigureCustomerLifecycleGoalsResult): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    return obj;
  },

  create(base?: DeepPartial<ConfigureCustomerLifecycleGoalsResult>): ConfigureCustomerLifecycleGoalsResult {
    return ConfigureCustomerLifecycleGoalsResult.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ConfigureCustomerLifecycleGoalsResult>): ConfigureCustomerLifecycleGoalsResult {
    const message = createBaseConfigureCustomerLifecycleGoalsResult();
    message.resourceName = object.resourceName ?? "";
    return message;
  },
};

/** Service to configure customer lifecycle goals. */
export type CustomerLifecycleGoalServiceDefinition = typeof CustomerLifecycleGoalServiceDefinition;
export const CustomerLifecycleGoalServiceDefinition = {
  name: "CustomerLifecycleGoalService",
  fullName: "google.ads.googleads.v17.services.CustomerLifecycleGoalService",
  methods: {
    /**
     * Process the given customer lifecycle configurations.
     *
     * List of thrown errors:
     *   [AuthenticationError]()
     *   [AuthorizationError]()
     *   [CustomerLifecycleGoalConfigError]()
     *   [HeaderError]()
     *   [InternalError]()
     *   [QuotaError]()
     *   [RequestError]()
     */
    configureCustomerLifecycleGoals: {
      name: "ConfigureCustomerLifecycleGoals",
      requestType: ConfigureCustomerLifecycleGoalsRequest,
      requestStream: false,
      responseType: ConfigureCustomerLifecycleGoalsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              21,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              95,
              105,
              100,
              44,
              111,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
            ]),
          ],
          578365826: [
            Buffer.from([
              89,
              58,
              1,
              42,
              34,
              84,
              47,
              118,
              49,
              55,
              47,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              115,
              47,
              123,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              95,
              105,
              100,
              61,
              42,
              125,
              47,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              76,
              105,
              102,
              101,
              99,
              121,
              99,
              108,
              101,
              71,
              111,
              97,
              108,
              58,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              67,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              76,
              105,
              102,
              101,
              99,
              121,
              99,
              108,
              101,
              71,
              111,
              97,
              108,
              115,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface CustomerLifecycleGoalServiceImplementation<CallContextExt = {}> {
  /**
   * Process the given customer lifecycle configurations.
   *
   * List of thrown errors:
   *   [AuthenticationError]()
   *   [AuthorizationError]()
   *   [CustomerLifecycleGoalConfigError]()
   *   [HeaderError]()
   *   [InternalError]()
   *   [QuotaError]()
   *   [RequestError]()
   */
  configureCustomerLifecycleGoals(
    request: ConfigureCustomerLifecycleGoalsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ConfigureCustomerLifecycleGoalsResponse>>;
}

export interface CustomerLifecycleGoalServiceClient<CallOptionsExt = {}> {
  /**
   * Process the given customer lifecycle configurations.
   *
   * List of thrown errors:
   *   [AuthenticationError]()
   *   [AuthorizationError]()
   *   [CustomerLifecycleGoalConfigError]()
   *   [HeaderError]()
   *   [InternalError]()
   *   [QuotaError]()
   *   [RequestError]()
   */
  configureCustomerLifecycleGoals(
    request: DeepPartial<ConfigureCustomerLifecycleGoalsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ConfigureCustomerLifecycleGoalsResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
