// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/chat/logging/v1/chat_app_log_entry.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Status } from "../../../rpc/status.js";

export const protobufPackage = "google.chat.logging.v1";

/**
 * JSON payload of error messages. If the Cloud Logging API is enabled, these
 * error messages are logged to
 * [Google Cloud Logging](https://cloud.google.com/logging/docs).
 */
export interface ChatAppLogEntry {
  /**
   * The deployment that caused the error. For Chat bots built in Apps Script,
   * this is the deployment ID defined by Apps Script.
   */
  deployment: string;
  /** The error code and message. */
  error:
    | Status
    | undefined;
  /**
   * The unencrypted `callback_method` name that was running when the error was
   * encountered.
   */
  deploymentFunction: string;
}

function createBaseChatAppLogEntry(): ChatAppLogEntry {
  return { deployment: "", error: undefined, deploymentFunction: "" };
}

export const ChatAppLogEntry: MessageFns<ChatAppLogEntry> = {
  encode(message: ChatAppLogEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.deployment !== "") {
      writer.uint32(10).string(message.deployment);
    }
    if (message.error !== undefined) {
      Status.encode(message.error, writer.uint32(18).fork()).join();
    }
    if (message.deploymentFunction !== "") {
      writer.uint32(26).string(message.deploymentFunction);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChatAppLogEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChatAppLogEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.deployment = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.error = Status.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.deploymentFunction = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChatAppLogEntry {
    return {
      deployment: isSet(object.deployment) ? globalThis.String(object.deployment) : "",
      error: isSet(object.error) ? Status.fromJSON(object.error) : undefined,
      deploymentFunction: isSet(object.deploymentFunction) ? globalThis.String(object.deploymentFunction) : "",
    };
  },

  toJSON(message: ChatAppLogEntry): unknown {
    const obj: any = {};
    if (message.deployment !== "") {
      obj.deployment = message.deployment;
    }
    if (message.error !== undefined) {
      obj.error = Status.toJSON(message.error);
    }
    if (message.deploymentFunction !== "") {
      obj.deploymentFunction = message.deploymentFunction;
    }
    return obj;
  },

  create(base?: DeepPartial<ChatAppLogEntry>): ChatAppLogEntry {
    return ChatAppLogEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ChatAppLogEntry>): ChatAppLogEntry {
    const message = createBaseChatAppLogEntry();
    message.deployment = object.deployment ?? "";
    message.error = (object.error !== undefined && object.error !== null)
      ? Status.fromPartial(object.error)
      : undefined;
    message.deploymentFunction = object.deploymentFunction ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
