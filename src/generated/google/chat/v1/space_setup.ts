// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/chat/v1/space_setup.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Membership } from "./membership.js";
import { Space } from "./space.js";

export const protobufPackage = "google.chat.v1";

/** Request to create a space and add specified users to it. */
export interface SetUpSpaceRequest {
  /**
   * Required. The `Space.spaceType` field is required.
   *
   * To create a space, set `Space.spaceType` to `SPACE` and set
   * `Space.displayName`. If you receive the error message `ALREADY_EXISTS` when
   * setting up a space, try a different `displayName`. An existing space
   * within the Google Workspace organization might already use this display
   * name.
   *
   * To create a group chat, set `Space.spaceType` to
   * `GROUP_CHAT`. Don't set `Space.displayName`.
   *
   * To create a 1:1 conversation between humans,
   * set `Space.spaceType` to `DIRECT_MESSAGE` and set
   * `Space.singleUserBotDm` to `false`. Don't set `Space.displayName` or
   * `Space.spaceDetails`.
   *
   * To create an 1:1 conversation between a human and the calling Chat app, set
   * `Space.spaceType` to `DIRECT_MESSAGE` and
   * `Space.singleUserBotDm` to `true`. Don't set `Space.displayName` or
   * `Space.spaceDetails`.
   *
   * If a `DIRECT_MESSAGE` space already exists, that space is returned instead
   * of creating a new space.
   */
  space:
    | Space
    | undefined;
  /**
   * Optional. A unique identifier for this request.
   * A random UUID is recommended.
   * Specifying an existing request ID returns the space created with that ID
   * instead of creating a new space.
   * Specifying an existing request ID from the same Chat app with a different
   * authenticated user returns an error.
   */
  requestId: string;
  /**
   * Optional. The Google Chat users or groups to invite to join the space. Omit
   * the calling user, as they are added automatically.
   *
   * The set currently allows up to 20 memberships (in addition to the caller).
   *
   * For human membership, the `Membership.member` field must contain a `user`
   * with `name` populated (format: `users/{user}`) and `type` set to
   * `User.Type.HUMAN`. You can only add human users when setting up a space
   * (adding Chat apps is only supported for direct message setup with the
   * calling app). You can also add members using the user's email as an alias
   * for {user}. For example, the `user.name` can be `users/example@gmail.com`.
   * To invite Gmail users or users from external Google Workspace domains,
   * user's email must be used for `{user}`.
   *
   * For Google group membership, the `Membership.group_member` field must
   * contain a `group` with `name` populated (format `groups/{group}`). You
   * can only add Google groups when setting `Space.spaceType` to `SPACE`.
   *
   * Optional when setting `Space.spaceType` to `SPACE`.
   *
   * Required when setting `Space.spaceType` to `GROUP_CHAT`, along with at
   * least two memberships.
   *
   * Required when setting `Space.spaceType` to `DIRECT_MESSAGE` with a human
   * user, along with exactly one membership.
   *
   * Must be empty when creating a 1:1 conversation between a human and the
   * calling Chat app (when setting `Space.spaceType` to
   * `DIRECT_MESSAGE` and `Space.singleUserBotDm` to `true`).
   */
  memberships: Membership[];
}

function createBaseSetUpSpaceRequest(): SetUpSpaceRequest {
  return { space: undefined, requestId: "", memberships: [] };
}

export const SetUpSpaceRequest: MessageFns<SetUpSpaceRequest> = {
  encode(message: SetUpSpaceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.space !== undefined) {
      Space.encode(message.space, writer.uint32(10).fork()).join();
    }
    if (message.requestId !== "") {
      writer.uint32(18).string(message.requestId);
    }
    for (const v of message.memberships) {
      Membership.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetUpSpaceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetUpSpaceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.space = Space.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.requestId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.memberships.push(Membership.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetUpSpaceRequest {
    return {
      space: isSet(object.space) ? Space.fromJSON(object.space) : undefined,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
      memberships: globalThis.Array.isArray(object?.memberships)
        ? object.memberships.map((e: any) => Membership.fromJSON(e))
        : [],
    };
  },

  toJSON(message: SetUpSpaceRequest): unknown {
    const obj: any = {};
    if (message.space !== undefined) {
      obj.space = Space.toJSON(message.space);
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    if (message.memberships?.length) {
      obj.memberships = message.memberships.map((e) => Membership.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<SetUpSpaceRequest>): SetUpSpaceRequest {
    return SetUpSpaceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SetUpSpaceRequest>): SetUpSpaceRequest {
    const message = createBaseSetUpSpaceRequest();
    message.space = (object.space !== undefined && object.space !== null) ? Space.fromPartial(object.space) : undefined;
    message.requestId = object.requestId ?? "";
    message.memberships = object.memberships?.map((e) => Membership.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
