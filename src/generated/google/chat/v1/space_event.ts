// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/chat/v1/space_event.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../protobuf/timestamp.js";
import {
  MembershipBatchCreatedEventData,
  MembershipBatchDeletedEventData,
  MembershipBatchUpdatedEventData,
  MembershipCreatedEventData,
  MembershipDeletedEventData,
  MembershipUpdatedEventData,
  MessageBatchCreatedEventData,
  MessageBatchDeletedEventData,
  MessageBatchUpdatedEventData,
  MessageCreatedEventData,
  MessageDeletedEventData,
  MessageUpdatedEventData,
  ReactionBatchCreatedEventData,
  ReactionBatchDeletedEventData,
  ReactionCreatedEventData,
  ReactionDeletedEventData,
  SpaceBatchUpdatedEventData,
  SpaceUpdatedEventData,
} from "./event_payload.js";

export const protobufPackage = "google.chat.v1";

/**
 * An event that represents a change or activity in a Google Chat space. To
 * learn more, see [Work with events from Google
 * Chat](https://developers.google.com/workspace/chat/events-overview).
 */
export interface SpaceEvent {
  /**
   * Resource name of the space event.
   *
   * Format: `spaces/{space}/spaceEvents/{spaceEvent}`
   */
  name: string;
  /** Time when the event occurred. */
  eventTime:
    | Date
    | undefined;
  /**
   * Type of space event. Each event type has a batch version, which
   * represents multiple instances of the event type that occur in a short
   * period of time. For `spaceEvents.list()` requests, omit batch event types
   * in your query filter. By default, the server returns both event type and
   * its batch version.
   *
   * Supported event types for
   * [messages](https://developers.google.com/workspace/chat/api/reference/rest/v1/spaces.messages):
   *
   *    * New message: `google.workspace.chat.message.v1.created`
   *    * Updated message: `google.workspace.chat.message.v1.updated`
   *    * Deleted message: `google.workspace.chat.message.v1.deleted`
   *    * Multiple new messages: `google.workspace.chat.message.v1.batchCreated`
   *    * Multiple updated messages:
   *    `google.workspace.chat.message.v1.batchUpdated`
   *    * Multiple deleted messages:
   *    `google.workspace.chat.message.v1.batchDeleted`
   *
   * Supported event types for
   * [memberships](https://developers.google.com/workspace/chat/api/reference/rest/v1/spaces.members):
   *
   *   * New membership: `google.workspace.chat.membership.v1.created`
   *   * Updated membership: `google.workspace.chat.membership.v1.updated`
   *   * Deleted membership: `google.workspace.chat.membership.v1.deleted`
   *   * Multiple new memberships:
   *   `google.workspace.chat.membership.v1.batchCreated`
   *   * Multiple updated memberships:
   *   `google.workspace.chat.membership.v1.batchUpdated`
   *   * Multiple deleted memberships:
   *   `google.workspace.chat.membership.v1.batchDeleted`
   *
   * Supported event types for
   * [reactions](https://developers.google.com/workspace/chat/api/reference/rest/v1/spaces.messages.reactions):
   *
   *   * New reaction: `google.workspace.chat.reaction.v1.created`
   *   * Deleted reaction: `google.workspace.chat.reaction.v1.deleted`
   *   * Multiple new reactions:
   *   `google.workspace.chat.reaction.v1.batchCreated`
   *   * Multiple deleted reactions:
   *   `google.workspace.chat.reaction.v1.batchDeleted`
   *
   * Supported event types about the
   * [space](https://developers.google.com/workspace/chat/api/reference/rest/v1/spaces):
   *
   *   * Updated space: `google.workspace.chat.space.v1.updated`
   *   * Multiple space updates: `google.workspace.chat.space.v1.batchUpdated`
   */
  eventType: string;
  /**
   * Event payload for a new message.
   *
   * Event type: `google.workspace.chat.message.v1.created`
   */
  messageCreatedEventData?:
    | MessageCreatedEventData
    | undefined;
  /**
   * Event payload for an updated message.
   *
   * Event type: `google.workspace.chat.message.v1.updated`
   */
  messageUpdatedEventData?:
    | MessageUpdatedEventData
    | undefined;
  /**
   * Event payload for a deleted message.
   *
   * Event type: `google.workspace.chat.message.v1.deleted`
   */
  messageDeletedEventData?:
    | MessageDeletedEventData
    | undefined;
  /**
   * Event payload for multiple new messages.
   *
   * Event type: `google.workspace.chat.message.v1.batchCreated`
   */
  messageBatchCreatedEventData?:
    | MessageBatchCreatedEventData
    | undefined;
  /**
   * Event payload for multiple updated messages.
   *
   * Event type: `google.workspace.chat.message.v1.batchUpdated`
   */
  messageBatchUpdatedEventData?:
    | MessageBatchUpdatedEventData
    | undefined;
  /**
   * Event payload for multiple deleted messages.
   *
   * Event type: `google.workspace.chat.message.v1.batchDeleted`
   */
  messageBatchDeletedEventData?:
    | MessageBatchDeletedEventData
    | undefined;
  /**
   * Event payload for a space update.
   *
   * Event type: `google.workspace.chat.space.v1.updated`
   */
  spaceUpdatedEventData?:
    | SpaceUpdatedEventData
    | undefined;
  /**
   * Event payload for multiple updates to a space.
   *
   * Event type: `google.workspace.chat.space.v1.batchUpdated`
   */
  spaceBatchUpdatedEventData?:
    | SpaceBatchUpdatedEventData
    | undefined;
  /**
   * Event payload for a new membership.
   *
   * Event type: `google.workspace.chat.membership.v1.created`
   */
  membershipCreatedEventData?:
    | MembershipCreatedEventData
    | undefined;
  /**
   * Event payload for an updated membership.
   *
   * Event type: `google.workspace.chat.membership.v1.updated`
   */
  membershipUpdatedEventData?:
    | MembershipUpdatedEventData
    | undefined;
  /**
   * Event payload for a deleted membership.
   *
   * Event type: `google.workspace.chat.membership.v1.deleted`
   */
  membershipDeletedEventData?:
    | MembershipDeletedEventData
    | undefined;
  /**
   * Event payload for multiple new memberships.
   *
   * Event type: `google.workspace.chat.membership.v1.batchCreated`
   */
  membershipBatchCreatedEventData?:
    | MembershipBatchCreatedEventData
    | undefined;
  /**
   * Event payload for multiple updated memberships.
   *
   * Event type: `google.workspace.chat.membership.v1.batchUpdated`
   */
  membershipBatchUpdatedEventData?:
    | MembershipBatchUpdatedEventData
    | undefined;
  /**
   * Event payload for multiple deleted memberships.
   *
   * Event type: `google.workspace.chat.membership.v1.batchDeleted`
   */
  membershipBatchDeletedEventData?:
    | MembershipBatchDeletedEventData
    | undefined;
  /**
   * Event payload for a new reaction.
   *
   * Event type: `google.workspace.chat.reaction.v1.created`
   */
  reactionCreatedEventData?:
    | ReactionCreatedEventData
    | undefined;
  /**
   * Event payload for a deleted reaction.
   *
   * Event type: `google.workspace.chat.reaction.v1.deleted`
   */
  reactionDeletedEventData?:
    | ReactionDeletedEventData
    | undefined;
  /**
   * Event payload for multiple new reactions.
   *
   * Event type: `google.workspace.chat.reaction.v1.batchCreated`
   */
  reactionBatchCreatedEventData?:
    | ReactionBatchCreatedEventData
    | undefined;
  /**
   * Event payload for multiple deleted reactions.
   *
   * Event type: `google.workspace.chat.reaction.v1.batchDeleted`
   */
  reactionBatchDeletedEventData?: ReactionBatchDeletedEventData | undefined;
}

/** Request message for getting a space event. */
export interface GetSpaceEventRequest {
  /**
   * Required. The resource name of the space event.
   *
   * Format: `spaces/{space}/spaceEvents/{spaceEvent}`
   */
  name: string;
}

/** Request message for listing space events. */
export interface ListSpaceEventsRequest {
  /**
   * Required. Resource name of the [Google Chat
   * space](https://developers.google.com/workspace/chat/api/reference/rest/v1/spaces)
   * where the events occurred.
   *
   * Format: `spaces/{space}`.
   */
  parent: string;
  /**
   * Optional. The maximum number of space events returned. The service might
   * return fewer than this value.
   *
   * Negative values return an `INVALID_ARGUMENT` error.
   */
  pageSize: number;
  /**
   * A page token, received from a previous list space events call. Provide this
   * to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to list space events must
   * match the call that provided the page token. Passing different values to
   * the other parameters might lead to unexpected results.
   */
  pageToken: string;
  /**
   * Required. A query filter.
   *
   * You must specify at least one event type (`event_type`)
   * using the has `:` operator. To filter by multiple event types, use the `OR`
   * operator. Omit batch event types in your filter. The request automatically
   * returns any related batch events. For example, if you filter by new
   * reactions
   * (`google.workspace.chat.reaction.v1.created`), the server also returns
   * batch new reactions events
   * (`google.workspace.chat.reaction.v1.batchCreated`). For a list of supported
   * event types, see the [`SpaceEvents` reference
   * documentation](https://developers.google.com/workspace/chat/api/reference/rest/v1/spaces.spaceEvents#SpaceEvent.FIELDS.event_type).
   *
   * Optionally, you can also filter by start time (`start_time`) and
   * end time (`end_time`):
   *
   * * `start_time`: Exclusive timestamp from which to start listing space
   * events.
   *  You can list events that occurred up to 28 days ago. If unspecified, lists
   *  space events from the past 28 days.
   * * `end_time`: Inclusive timestamp until which space events are listed.
   *  If unspecified, lists events up to the time of the request.
   *
   * To specify a start or end time, use the equals `=` operator and format in
   * [RFC-3339](https://www.rfc-editor.org/rfc/rfc3339). To filter by both
   * `start_time` and `end_time`, use the `AND` operator.
   *
   * For example, the following queries are valid:
   *
   * ```
   * start_time="2023-08-23T19:20:33+00:00" AND
   * end_time="2023-08-23T19:21:54+00:00"
   * ```
   * ```
   * start_time="2023-08-23T19:20:33+00:00" AND
   * (event_types:"google.workspace.chat.space.v1.updated" OR
   * event_types:"google.workspace.chat.message.v1.created")
   * ```
   *
   * The following queries are invalid:
   *
   * ```
   * start_time="2023-08-23T19:20:33+00:00" OR
   * end_time="2023-08-23T19:21:54+00:00"
   * ```
   * ```
   * event_types:"google.workspace.chat.space.v1.updated" AND
   * event_types:"google.workspace.chat.message.v1.created"
   * ```
   *
   * Invalid queries are rejected by the server with an `INVALID_ARGUMENT`
   * error.
   */
  filter: string;
}

/** Response message for listing space events. */
export interface ListSpaceEventsResponse {
  /** Results are returned in chronological order (oldest event first). */
  spaceEvents: SpaceEvent[];
  /**
   * Continuation token used to fetch more events.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

function createBaseSpaceEvent(): SpaceEvent {
  return {
    name: "",
    eventTime: undefined,
    eventType: "",
    messageCreatedEventData: undefined,
    messageUpdatedEventData: undefined,
    messageDeletedEventData: undefined,
    messageBatchCreatedEventData: undefined,
    messageBatchUpdatedEventData: undefined,
    messageBatchDeletedEventData: undefined,
    spaceUpdatedEventData: undefined,
    spaceBatchUpdatedEventData: undefined,
    membershipCreatedEventData: undefined,
    membershipUpdatedEventData: undefined,
    membershipDeletedEventData: undefined,
    membershipBatchCreatedEventData: undefined,
    membershipBatchUpdatedEventData: undefined,
    membershipBatchDeletedEventData: undefined,
    reactionCreatedEventData: undefined,
    reactionDeletedEventData: undefined,
    reactionBatchCreatedEventData: undefined,
    reactionBatchDeletedEventData: undefined,
  };
}

export const SpaceEvent: MessageFns<SpaceEvent> = {
  encode(message: SpaceEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.eventTime !== undefined) {
      Timestamp.encode(toTimestamp(message.eventTime), writer.uint32(26).fork()).join();
    }
    if (message.eventType !== "") {
      writer.uint32(50).string(message.eventType);
    }
    if (message.messageCreatedEventData !== undefined) {
      MessageCreatedEventData.encode(message.messageCreatedEventData, writer.uint32(98).fork()).join();
    }
    if (message.messageUpdatedEventData !== undefined) {
      MessageUpdatedEventData.encode(message.messageUpdatedEventData, writer.uint32(106).fork()).join();
    }
    if (message.messageDeletedEventData !== undefined) {
      MessageDeletedEventData.encode(message.messageDeletedEventData, writer.uint32(114).fork()).join();
    }
    if (message.messageBatchCreatedEventData !== undefined) {
      MessageBatchCreatedEventData.encode(message.messageBatchCreatedEventData, writer.uint32(210).fork()).join();
    }
    if (message.messageBatchUpdatedEventData !== undefined) {
      MessageBatchUpdatedEventData.encode(message.messageBatchUpdatedEventData, writer.uint32(218).fork()).join();
    }
    if (message.messageBatchDeletedEventData !== undefined) {
      MessageBatchDeletedEventData.encode(message.messageBatchDeletedEventData, writer.uint32(226).fork()).join();
    }
    if (message.spaceUpdatedEventData !== undefined) {
      SpaceUpdatedEventData.encode(message.spaceUpdatedEventData, writer.uint32(122).fork()).join();
    }
    if (message.spaceBatchUpdatedEventData !== undefined) {
      SpaceBatchUpdatedEventData.encode(message.spaceBatchUpdatedEventData, writer.uint32(234).fork()).join();
    }
    if (message.membershipCreatedEventData !== undefined) {
      MembershipCreatedEventData.encode(message.membershipCreatedEventData, writer.uint32(138).fork()).join();
    }
    if (message.membershipUpdatedEventData !== undefined) {
      MembershipUpdatedEventData.encode(message.membershipUpdatedEventData, writer.uint32(146).fork()).join();
    }
    if (message.membershipDeletedEventData !== undefined) {
      MembershipDeletedEventData.encode(message.membershipDeletedEventData, writer.uint32(1754).fork()).join();
    }
    if (message.membershipBatchCreatedEventData !== undefined) {
      MembershipBatchCreatedEventData.encode(message.membershipBatchCreatedEventData, writer.uint32(250).fork()).join();
    }
    if (message.membershipBatchUpdatedEventData !== undefined) {
      MembershipBatchUpdatedEventData.encode(message.membershipBatchUpdatedEventData, writer.uint32(258).fork()).join();
    }
    if (message.membershipBatchDeletedEventData !== undefined) {
      MembershipBatchDeletedEventData.encode(message.membershipBatchDeletedEventData, writer.uint32(266).fork()).join();
    }
    if (message.reactionCreatedEventData !== undefined) {
      ReactionCreatedEventData.encode(message.reactionCreatedEventData, writer.uint32(170).fork()).join();
    }
    if (message.reactionDeletedEventData !== undefined) {
      ReactionDeletedEventData.encode(message.reactionDeletedEventData, writer.uint32(178).fork()).join();
    }
    if (message.reactionBatchCreatedEventData !== undefined) {
      ReactionBatchCreatedEventData.encode(message.reactionBatchCreatedEventData, writer.uint32(274).fork()).join();
    }
    if (message.reactionBatchDeletedEventData !== undefined) {
      ReactionBatchDeletedEventData.encode(message.reactionBatchDeletedEventData, writer.uint32(282).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SpaceEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSpaceEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.eventTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.eventType = reader.string();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.messageCreatedEventData = MessageCreatedEventData.decode(reader, reader.uint32());
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.messageUpdatedEventData = MessageUpdatedEventData.decode(reader, reader.uint32());
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.messageDeletedEventData = MessageDeletedEventData.decode(reader, reader.uint32());
          continue;
        case 26:
          if (tag !== 210) {
            break;
          }

          message.messageBatchCreatedEventData = MessageBatchCreatedEventData.decode(reader, reader.uint32());
          continue;
        case 27:
          if (tag !== 218) {
            break;
          }

          message.messageBatchUpdatedEventData = MessageBatchUpdatedEventData.decode(reader, reader.uint32());
          continue;
        case 28:
          if (tag !== 226) {
            break;
          }

          message.messageBatchDeletedEventData = MessageBatchDeletedEventData.decode(reader, reader.uint32());
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.spaceUpdatedEventData = SpaceUpdatedEventData.decode(reader, reader.uint32());
          continue;
        case 29:
          if (tag !== 234) {
            break;
          }

          message.spaceBatchUpdatedEventData = SpaceBatchUpdatedEventData.decode(reader, reader.uint32());
          continue;
        case 17:
          if (tag !== 138) {
            break;
          }

          message.membershipCreatedEventData = MembershipCreatedEventData.decode(reader, reader.uint32());
          continue;
        case 18:
          if (tag !== 146) {
            break;
          }

          message.membershipUpdatedEventData = MembershipUpdatedEventData.decode(reader, reader.uint32());
          continue;
        case 219:
          if (tag !== 1754) {
            break;
          }

          message.membershipDeletedEventData = MembershipDeletedEventData.decode(reader, reader.uint32());
          continue;
        case 31:
          if (tag !== 250) {
            break;
          }

          message.membershipBatchCreatedEventData = MembershipBatchCreatedEventData.decode(reader, reader.uint32());
          continue;
        case 32:
          if (tag !== 258) {
            break;
          }

          message.membershipBatchUpdatedEventData = MembershipBatchUpdatedEventData.decode(reader, reader.uint32());
          continue;
        case 33:
          if (tag !== 266) {
            break;
          }

          message.membershipBatchDeletedEventData = MembershipBatchDeletedEventData.decode(reader, reader.uint32());
          continue;
        case 21:
          if (tag !== 170) {
            break;
          }

          message.reactionCreatedEventData = ReactionCreatedEventData.decode(reader, reader.uint32());
          continue;
        case 22:
          if (tag !== 178) {
            break;
          }

          message.reactionDeletedEventData = ReactionDeletedEventData.decode(reader, reader.uint32());
          continue;
        case 34:
          if (tag !== 274) {
            break;
          }

          message.reactionBatchCreatedEventData = ReactionBatchCreatedEventData.decode(reader, reader.uint32());
          continue;
        case 35:
          if (tag !== 282) {
            break;
          }

          message.reactionBatchDeletedEventData = ReactionBatchDeletedEventData.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SpaceEvent {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      eventTime: isSet(object.eventTime) ? fromJsonTimestamp(object.eventTime) : undefined,
      eventType: isSet(object.eventType) ? globalThis.String(object.eventType) : "",
      messageCreatedEventData: isSet(object.messageCreatedEventData)
        ? MessageCreatedEventData.fromJSON(object.messageCreatedEventData)
        : undefined,
      messageUpdatedEventData: isSet(object.messageUpdatedEventData)
        ? MessageUpdatedEventData.fromJSON(object.messageUpdatedEventData)
        : undefined,
      messageDeletedEventData: isSet(object.messageDeletedEventData)
        ? MessageDeletedEventData.fromJSON(object.messageDeletedEventData)
        : undefined,
      messageBatchCreatedEventData: isSet(object.messageBatchCreatedEventData)
        ? MessageBatchCreatedEventData.fromJSON(object.messageBatchCreatedEventData)
        : undefined,
      messageBatchUpdatedEventData: isSet(object.messageBatchUpdatedEventData)
        ? MessageBatchUpdatedEventData.fromJSON(object.messageBatchUpdatedEventData)
        : undefined,
      messageBatchDeletedEventData: isSet(object.messageBatchDeletedEventData)
        ? MessageBatchDeletedEventData.fromJSON(object.messageBatchDeletedEventData)
        : undefined,
      spaceUpdatedEventData: isSet(object.spaceUpdatedEventData)
        ? SpaceUpdatedEventData.fromJSON(object.spaceUpdatedEventData)
        : undefined,
      spaceBatchUpdatedEventData: isSet(object.spaceBatchUpdatedEventData)
        ? SpaceBatchUpdatedEventData.fromJSON(object.spaceBatchUpdatedEventData)
        : undefined,
      membershipCreatedEventData: isSet(object.membershipCreatedEventData)
        ? MembershipCreatedEventData.fromJSON(object.membershipCreatedEventData)
        : undefined,
      membershipUpdatedEventData: isSet(object.membershipUpdatedEventData)
        ? MembershipUpdatedEventData.fromJSON(object.membershipUpdatedEventData)
        : undefined,
      membershipDeletedEventData: isSet(object.membershipDeletedEventData)
        ? MembershipDeletedEventData.fromJSON(object.membershipDeletedEventData)
        : undefined,
      membershipBatchCreatedEventData: isSet(object.membershipBatchCreatedEventData)
        ? MembershipBatchCreatedEventData.fromJSON(object.membershipBatchCreatedEventData)
        : undefined,
      membershipBatchUpdatedEventData: isSet(object.membershipBatchUpdatedEventData)
        ? MembershipBatchUpdatedEventData.fromJSON(object.membershipBatchUpdatedEventData)
        : undefined,
      membershipBatchDeletedEventData: isSet(object.membershipBatchDeletedEventData)
        ? MembershipBatchDeletedEventData.fromJSON(object.membershipBatchDeletedEventData)
        : undefined,
      reactionCreatedEventData: isSet(object.reactionCreatedEventData)
        ? ReactionCreatedEventData.fromJSON(object.reactionCreatedEventData)
        : undefined,
      reactionDeletedEventData: isSet(object.reactionDeletedEventData)
        ? ReactionDeletedEventData.fromJSON(object.reactionDeletedEventData)
        : undefined,
      reactionBatchCreatedEventData: isSet(object.reactionBatchCreatedEventData)
        ? ReactionBatchCreatedEventData.fromJSON(object.reactionBatchCreatedEventData)
        : undefined,
      reactionBatchDeletedEventData: isSet(object.reactionBatchDeletedEventData)
        ? ReactionBatchDeletedEventData.fromJSON(object.reactionBatchDeletedEventData)
        : undefined,
    };
  },

  toJSON(message: SpaceEvent): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.eventTime !== undefined) {
      obj.eventTime = message.eventTime.toISOString();
    }
    if (message.eventType !== "") {
      obj.eventType = message.eventType;
    }
    if (message.messageCreatedEventData !== undefined) {
      obj.messageCreatedEventData = MessageCreatedEventData.toJSON(message.messageCreatedEventData);
    }
    if (message.messageUpdatedEventData !== undefined) {
      obj.messageUpdatedEventData = MessageUpdatedEventData.toJSON(message.messageUpdatedEventData);
    }
    if (message.messageDeletedEventData !== undefined) {
      obj.messageDeletedEventData = MessageDeletedEventData.toJSON(message.messageDeletedEventData);
    }
    if (message.messageBatchCreatedEventData !== undefined) {
      obj.messageBatchCreatedEventData = MessageBatchCreatedEventData.toJSON(message.messageBatchCreatedEventData);
    }
    if (message.messageBatchUpdatedEventData !== undefined) {
      obj.messageBatchUpdatedEventData = MessageBatchUpdatedEventData.toJSON(message.messageBatchUpdatedEventData);
    }
    if (message.messageBatchDeletedEventData !== undefined) {
      obj.messageBatchDeletedEventData = MessageBatchDeletedEventData.toJSON(message.messageBatchDeletedEventData);
    }
    if (message.spaceUpdatedEventData !== undefined) {
      obj.spaceUpdatedEventData = SpaceUpdatedEventData.toJSON(message.spaceUpdatedEventData);
    }
    if (message.spaceBatchUpdatedEventData !== undefined) {
      obj.spaceBatchUpdatedEventData = SpaceBatchUpdatedEventData.toJSON(message.spaceBatchUpdatedEventData);
    }
    if (message.membershipCreatedEventData !== undefined) {
      obj.membershipCreatedEventData = MembershipCreatedEventData.toJSON(message.membershipCreatedEventData);
    }
    if (message.membershipUpdatedEventData !== undefined) {
      obj.membershipUpdatedEventData = MembershipUpdatedEventData.toJSON(message.membershipUpdatedEventData);
    }
    if (message.membershipDeletedEventData !== undefined) {
      obj.membershipDeletedEventData = MembershipDeletedEventData.toJSON(message.membershipDeletedEventData);
    }
    if (message.membershipBatchCreatedEventData !== undefined) {
      obj.membershipBatchCreatedEventData = MembershipBatchCreatedEventData.toJSON(
        message.membershipBatchCreatedEventData,
      );
    }
    if (message.membershipBatchUpdatedEventData !== undefined) {
      obj.membershipBatchUpdatedEventData = MembershipBatchUpdatedEventData.toJSON(
        message.membershipBatchUpdatedEventData,
      );
    }
    if (message.membershipBatchDeletedEventData !== undefined) {
      obj.membershipBatchDeletedEventData = MembershipBatchDeletedEventData.toJSON(
        message.membershipBatchDeletedEventData,
      );
    }
    if (message.reactionCreatedEventData !== undefined) {
      obj.reactionCreatedEventData = ReactionCreatedEventData.toJSON(message.reactionCreatedEventData);
    }
    if (message.reactionDeletedEventData !== undefined) {
      obj.reactionDeletedEventData = ReactionDeletedEventData.toJSON(message.reactionDeletedEventData);
    }
    if (message.reactionBatchCreatedEventData !== undefined) {
      obj.reactionBatchCreatedEventData = ReactionBatchCreatedEventData.toJSON(message.reactionBatchCreatedEventData);
    }
    if (message.reactionBatchDeletedEventData !== undefined) {
      obj.reactionBatchDeletedEventData = ReactionBatchDeletedEventData.toJSON(message.reactionBatchDeletedEventData);
    }
    return obj;
  },

  create(base?: DeepPartial<SpaceEvent>): SpaceEvent {
    return SpaceEvent.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SpaceEvent>): SpaceEvent {
    const message = createBaseSpaceEvent();
    message.name = object.name ?? "";
    message.eventTime = object.eventTime ?? undefined;
    message.eventType = object.eventType ?? "";
    message.messageCreatedEventData =
      (object.messageCreatedEventData !== undefined && object.messageCreatedEventData !== null)
        ? MessageCreatedEventData.fromPartial(object.messageCreatedEventData)
        : undefined;
    message.messageUpdatedEventData =
      (object.messageUpdatedEventData !== undefined && object.messageUpdatedEventData !== null)
        ? MessageUpdatedEventData.fromPartial(object.messageUpdatedEventData)
        : undefined;
    message.messageDeletedEventData =
      (object.messageDeletedEventData !== undefined && object.messageDeletedEventData !== null)
        ? MessageDeletedEventData.fromPartial(object.messageDeletedEventData)
        : undefined;
    message.messageBatchCreatedEventData =
      (object.messageBatchCreatedEventData !== undefined && object.messageBatchCreatedEventData !== null)
        ? MessageBatchCreatedEventData.fromPartial(object.messageBatchCreatedEventData)
        : undefined;
    message.messageBatchUpdatedEventData =
      (object.messageBatchUpdatedEventData !== undefined && object.messageBatchUpdatedEventData !== null)
        ? MessageBatchUpdatedEventData.fromPartial(object.messageBatchUpdatedEventData)
        : undefined;
    message.messageBatchDeletedEventData =
      (object.messageBatchDeletedEventData !== undefined && object.messageBatchDeletedEventData !== null)
        ? MessageBatchDeletedEventData.fromPartial(object.messageBatchDeletedEventData)
        : undefined;
    message.spaceUpdatedEventData =
      (object.spaceUpdatedEventData !== undefined && object.spaceUpdatedEventData !== null)
        ? SpaceUpdatedEventData.fromPartial(object.spaceUpdatedEventData)
        : undefined;
    message.spaceBatchUpdatedEventData =
      (object.spaceBatchUpdatedEventData !== undefined && object.spaceBatchUpdatedEventData !== null)
        ? SpaceBatchUpdatedEventData.fromPartial(object.spaceBatchUpdatedEventData)
        : undefined;
    message.membershipCreatedEventData =
      (object.membershipCreatedEventData !== undefined && object.membershipCreatedEventData !== null)
        ? MembershipCreatedEventData.fromPartial(object.membershipCreatedEventData)
        : undefined;
    message.membershipUpdatedEventData =
      (object.membershipUpdatedEventData !== undefined && object.membershipUpdatedEventData !== null)
        ? MembershipUpdatedEventData.fromPartial(object.membershipUpdatedEventData)
        : undefined;
    message.membershipDeletedEventData =
      (object.membershipDeletedEventData !== undefined && object.membershipDeletedEventData !== null)
        ? MembershipDeletedEventData.fromPartial(object.membershipDeletedEventData)
        : undefined;
    message.membershipBatchCreatedEventData =
      (object.membershipBatchCreatedEventData !== undefined && object.membershipBatchCreatedEventData !== null)
        ? MembershipBatchCreatedEventData.fromPartial(object.membershipBatchCreatedEventData)
        : undefined;
    message.membershipBatchUpdatedEventData =
      (object.membershipBatchUpdatedEventData !== undefined && object.membershipBatchUpdatedEventData !== null)
        ? MembershipBatchUpdatedEventData.fromPartial(object.membershipBatchUpdatedEventData)
        : undefined;
    message.membershipBatchDeletedEventData =
      (object.membershipBatchDeletedEventData !== undefined && object.membershipBatchDeletedEventData !== null)
        ? MembershipBatchDeletedEventData.fromPartial(object.membershipBatchDeletedEventData)
        : undefined;
    message.reactionCreatedEventData =
      (object.reactionCreatedEventData !== undefined && object.reactionCreatedEventData !== null)
        ? ReactionCreatedEventData.fromPartial(object.reactionCreatedEventData)
        : undefined;
    message.reactionDeletedEventData =
      (object.reactionDeletedEventData !== undefined && object.reactionDeletedEventData !== null)
        ? ReactionDeletedEventData.fromPartial(object.reactionDeletedEventData)
        : undefined;
    message.reactionBatchCreatedEventData =
      (object.reactionBatchCreatedEventData !== undefined && object.reactionBatchCreatedEventData !== null)
        ? ReactionBatchCreatedEventData.fromPartial(object.reactionBatchCreatedEventData)
        : undefined;
    message.reactionBatchDeletedEventData =
      (object.reactionBatchDeletedEventData !== undefined && object.reactionBatchDeletedEventData !== null)
        ? ReactionBatchDeletedEventData.fromPartial(object.reactionBatchDeletedEventData)
        : undefined;
    return message;
  },
};

function createBaseGetSpaceEventRequest(): GetSpaceEventRequest {
  return { name: "" };
}

export const GetSpaceEventRequest: MessageFns<GetSpaceEventRequest> = {
  encode(message: GetSpaceEventRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetSpaceEventRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSpaceEventRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetSpaceEventRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetSpaceEventRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetSpaceEventRequest>): GetSpaceEventRequest {
    return GetSpaceEventRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetSpaceEventRequest>): GetSpaceEventRequest {
    const message = createBaseGetSpaceEventRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListSpaceEventsRequest(): ListSpaceEventsRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "" };
}

export const ListSpaceEventsRequest: MessageFns<ListSpaceEventsRequest> = {
  encode(message: ListSpaceEventsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(40).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(50).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(66).string(message.filter);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListSpaceEventsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSpaceEventsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.filter = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListSpaceEventsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
    };
  },

  toJSON(message: ListSpaceEventsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    return obj;
  },

  create(base?: DeepPartial<ListSpaceEventsRequest>): ListSpaceEventsRequest {
    return ListSpaceEventsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListSpaceEventsRequest>): ListSpaceEventsRequest {
    const message = createBaseListSpaceEventsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    return message;
  },
};

function createBaseListSpaceEventsResponse(): ListSpaceEventsResponse {
  return { spaceEvents: [], nextPageToken: "" };
}

export const ListSpaceEventsResponse: MessageFns<ListSpaceEventsResponse> = {
  encode(message: ListSpaceEventsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.spaceEvents) {
      SpaceEvent.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListSpaceEventsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSpaceEventsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.spaceEvents.push(SpaceEvent.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListSpaceEventsResponse {
    return {
      spaceEvents: globalThis.Array.isArray(object?.spaceEvents)
        ? object.spaceEvents.map((e: any) => SpaceEvent.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListSpaceEventsResponse): unknown {
    const obj: any = {};
    if (message.spaceEvents?.length) {
      obj.spaceEvents = message.spaceEvents.map((e) => SpaceEvent.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListSpaceEventsResponse>): ListSpaceEventsResponse {
    return ListSpaceEventsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListSpaceEventsResponse>): ListSpaceEventsResponse {
    const message = createBaseListSpaceEventsResponse();
    message.spaceEvents = object.spaceEvents?.map((e) => SpaceEvent.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
