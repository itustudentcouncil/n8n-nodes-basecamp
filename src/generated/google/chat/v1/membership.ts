// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/chat/v1/membership.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { FieldMask } from "../../protobuf/field_mask.js";
import { Timestamp } from "../../protobuf/timestamp.js";
import { Group } from "./group.js";
import { User } from "./user.js";

export const protobufPackage = "google.chat.v1";

/**
 * Represents a membership relation in Google Chat, such as whether a user or
 * Chat app is invited to, part of, or absent from a space.
 */
export interface Membership {
  /**
   * Resource name of the membership, assigned by the server.
   *
   * Format: `spaces/{space}/members/{member}`
   */
  name: string;
  /** Output only. State of the membership. */
  state: Membership_MembershipState;
  /**
   * Optional. User's role within a Chat space, which determines their permitted
   * actions in the space.
   *
   * This field can only be used as input in `UpdateMembership`.
   */
  role: Membership_MembershipRole;
  /**
   * The Google Chat user or app the membership corresponds to.
   * If your Chat app [authenticates as a
   * user](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user),
   * the output populates the
   * [user](https://developers.google.com/workspace/chat/api/reference/rest/v1/User)
   * `name` and `type`.
   */
  member?:
    | User
    | undefined;
  /** The Google Group the membership corresponds to. */
  groupMember?:
    | Group
    | undefined;
  /**
   * Optional. Immutable. The creation time of the membership, such as when a
   * member joined or was invited to join a space. This field is output only,
   * except when used to import historical memberships in import mode spaces.
   */
  createTime:
    | Date
    | undefined;
  /**
   * Optional. Immutable. The deletion time of the membership, such as when a
   * member left or was removed from a space. This field is output only, except
   * when used to import historical memberships in import mode spaces.
   */
  deleteTime: Date | undefined;
}

/**
 * Specifies the member's relationship with a space. Other membership states
 * might be supported in the future.
 */
export enum Membership_MembershipState {
  /** MEMBERSHIP_STATE_UNSPECIFIED - Default value. Don't use. */
  MEMBERSHIP_STATE_UNSPECIFIED = 0,
  /** JOINED - The user is added to the space, and can participate in the space. */
  JOINED = 1,
  /** INVITED - The user is invited to join the space, but hasn't joined it. */
  INVITED = 2,
  /**
   * NOT_A_MEMBER - The user doesn't belong to the space and doesn't have a pending
   * invitation to join the space.
   */
  NOT_A_MEMBER = 3,
  UNRECOGNIZED = -1,
}

export function membership_MembershipStateFromJSON(object: any): Membership_MembershipState {
  switch (object) {
    case 0:
    case "MEMBERSHIP_STATE_UNSPECIFIED":
      return Membership_MembershipState.MEMBERSHIP_STATE_UNSPECIFIED;
    case 1:
    case "JOINED":
      return Membership_MembershipState.JOINED;
    case 2:
    case "INVITED":
      return Membership_MembershipState.INVITED;
    case 3:
    case "NOT_A_MEMBER":
      return Membership_MembershipState.NOT_A_MEMBER;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Membership_MembershipState.UNRECOGNIZED;
  }
}

export function membership_MembershipStateToJSON(object: Membership_MembershipState): string {
  switch (object) {
    case Membership_MembershipState.MEMBERSHIP_STATE_UNSPECIFIED:
      return "MEMBERSHIP_STATE_UNSPECIFIED";
    case Membership_MembershipState.JOINED:
      return "JOINED";
    case Membership_MembershipState.INVITED:
      return "INVITED";
    case Membership_MembershipState.NOT_A_MEMBER:
      return "NOT_A_MEMBER";
    case Membership_MembershipState.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * Represents a user's permitted actions in a Chat space. More enum values
 * might be added in the future.
 */
export enum Membership_MembershipRole {
  /**
   * MEMBERSHIP_ROLE_UNSPECIFIED - Default value. For [users][google.chat.v1.Membership.member]: they
   * aren't a member of the space, but can be invited. For
   * [Google Groups][google.chat.v1.Membership.group_member]: they're always
   *  assigned this role (other enum values might be used in the future).
   */
  MEMBERSHIP_ROLE_UNSPECIFIED = 0,
  /**
   * ROLE_MEMBER - A member of the space. The user has basic permissions, like sending
   * messages to the space. In 1:1 and unnamed group conversations, everyone
   * has this role.
   */
  ROLE_MEMBER = 1,
  /**
   * ROLE_MANAGER - A space manager. The user has all basic permissions plus administrative
   * permissions that let them manage the space, like adding or removing
   * members. Only supported in
   * [SpaceType.SPACE][google.chat.v1.Space.SpaceType].
   */
  ROLE_MANAGER = 2,
  UNRECOGNIZED = -1,
}

export function membership_MembershipRoleFromJSON(object: any): Membership_MembershipRole {
  switch (object) {
    case 0:
    case "MEMBERSHIP_ROLE_UNSPECIFIED":
      return Membership_MembershipRole.MEMBERSHIP_ROLE_UNSPECIFIED;
    case 1:
    case "ROLE_MEMBER":
      return Membership_MembershipRole.ROLE_MEMBER;
    case 2:
    case "ROLE_MANAGER":
      return Membership_MembershipRole.ROLE_MANAGER;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Membership_MembershipRole.UNRECOGNIZED;
  }
}

export function membership_MembershipRoleToJSON(object: Membership_MembershipRole): string {
  switch (object) {
    case Membership_MembershipRole.MEMBERSHIP_ROLE_UNSPECIFIED:
      return "MEMBERSHIP_ROLE_UNSPECIFIED";
    case Membership_MembershipRole.ROLE_MEMBER:
      return "ROLE_MEMBER";
    case Membership_MembershipRole.ROLE_MANAGER:
      return "ROLE_MANAGER";
    case Membership_MembershipRole.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Request message for creating a membership. */
export interface CreateMembershipRequest {
  /**
   * Required. The resource name of the space for which to create the
   * membership.
   *
   * Format: spaces/{space}
   */
  parent: string;
  /**
   * Required. The membership relation to create.
   * The `memberType` field must contain a user with the `user.name` and
   * `user.type` fields populated. The server will assign a resource name
   * and overwrite anything specified.
   * When a Chat app creates a membership relation for a human user, it must use
   * the `chat.memberships` scope, set `user.type` to `HUMAN`, and set
   * `user.name` with format `users/{user}`, where `{user}` can be the email
   * address for the user. For users in the same Workspace organization `{user}`
   * can also be the `id` of the
   * [person](https://developers.google.com/people/api/rest/v1/people) from the
   * People API, or the `id` for the user in the Directory API. For example, if
   * the People API Person profile ID for `user@example.com` is `123456789`, you
   * can add the user to the space by setting the `membership.member.name` to
   * `users/user@example.com` or `users/123456789`. When a Chat app creates a
   * membership relation for itself, it must use the `chat.memberships.app`
   * scope, set `user.type` to `BOT`, and set `user.name` to `users/app`.
   */
  membership:
    | Membership
    | undefined;
  /**
   * When `true`, the method runs using the user's Google Workspace
   * administrator privileges.
   *
   * The calling user must be a Google Workspace administrator with the
   * [manage chat and spaces conversations
   * privilege](https://support.google.com/a/answer/13369245).
   *
   * Requires the `chat.admin.memberships` [OAuth 2.0
   * scope](https://developers.google.com/workspace/chat/authenticate-authorize#chat-api-scopes).
   *
   * Creating app memberships or creating memberships for users outside the
   * administrator's Google Workspace organization isn't supported using admin
   * access.
   */
  useAdminAccess: boolean;
}

/** Request message for updating a membership. */
export interface UpdateMembershipRequest {
  /**
   * Required. The membership to update. Only fields specified by `update_mask`
   * are updated.
   */
  membership:
    | Membership
    | undefined;
  /**
   * Required. The field paths to update. Separate multiple values with commas
   * or use `*` to update all field paths.
   *
   * Currently supported field paths:
   *
   * - `role`
   */
  updateMask:
    | string[]
    | undefined;
  /**
   * When `true`, the method runs using the user's Google Workspace
   * administrator privileges.
   *
   * The calling user must be a Google Workspace administrator with the
   * [manage chat and spaces conversations
   * privilege](https://support.google.com/a/answer/13369245).
   *
   * Requires the `chat.admin.memberships` [OAuth 2.0
   * scope](https://developers.google.com/workspace/chat/authenticate-authorize#chat-api-scopes).
   */
  useAdminAccess: boolean;
}

/** Request message for listing memberships. */
export interface ListMembershipsRequest {
  /**
   * Required. The resource name of the space for which to fetch a membership
   * list.
   *
   * Format: spaces/{space}
   */
  parent: string;
  /**
   * Optional. The maximum number of memberships to return. The service might
   * return fewer than this value.
   *
   * If unspecified, at most 100 memberships are returned.
   *
   * The maximum value is 1000. If you use a value more than 1000, it's
   * automatically changed to 1000.
   *
   * Negative values return an `INVALID_ARGUMENT` error.
   */
  pageSize: number;
  /**
   * Optional. A page token, received from a previous call to list memberships.
   * Provide this parameter to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided should match the call that
   * provided the page token. Passing different values to the other parameters
   * might lead to unexpected results.
   */
  pageToken: string;
  /**
   * Optional. A query filter.
   *
   * You can filter memberships by a member's role
   * ([`role`](https://developers.google.com/workspace/chat/api/reference/rest/v1/spaces.members#membershiprole))
   * and type
   * ([`member.type`](https://developers.google.com/workspace/chat/api/reference/rest/v1/User#type)).
   *
   * To filter by role, set `role` to `ROLE_MEMBER` or `ROLE_MANAGER`.
   *
   * To filter by type, set `member.type` to `HUMAN` or `BOT`. You can also
   * filter for `member.type` using the `!=` operator.
   *
   * To filter by both role and type, use the `AND` operator. To filter by
   * either role or type, use the `OR` operator.
   *
   * Either `member.type = "HUMAN"` or `member.type != "BOT"` is required
   * when `use_admin_access` is set to true. Other member type filters will be
   * rejected.
   *
   * For example, the following queries are valid:
   *
   * ```
   * role = "ROLE_MANAGER" OR role = "ROLE_MEMBER"
   * member.type = "HUMAN" AND role = "ROLE_MANAGER"
   *
   * member.type != "BOT"
   * ```
   *
   * The following queries are invalid:
   *
   * ```
   * member.type = "HUMAN" AND member.type = "BOT"
   * role = "ROLE_MANAGER" AND role = "ROLE_MEMBER"
   * ```
   *
   * Invalid queries are rejected by the server with an `INVALID_ARGUMENT`
   * error.
   */
  filter: string;
  /**
   * Optional. When `true`, also returns memberships associated with a
   * [Google Group][google.chat.v1.Membership.group_member], in
   * addition to other types of memberships. If a
   * [filter][google.chat.v1.ListMembershipsRequest.filter] is set,
   * [Google Group][google.chat.v1.Membership.group_member]
   * memberships that don't match the filter criteria aren't returned.
   */
  showGroups: boolean;
  /**
   * Optional. When `true`, also returns memberships associated with
   * [invited][google.chat.v1.Membership.MembershipState.INVITED] members, in
   * addition to other types of memberships. If a
   * filter is set,
   * [invited][google.chat.v1.Membership.MembershipState.INVITED] memberships
   * that don't match the filter criteria aren't returned.
   *
   * Currently requires [user
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
   */
  showInvited: boolean;
  /**
   * When `true`, the method runs using the user's Google Workspace
   * administrator privileges.
   *
   * The calling user must be a Google Workspace administrator with the
   * [manage chat and spaces conversations
   * privilege](https://support.google.com/a/answer/13369245).
   *
   * Requires either the `chat.admin.memberships.readonly` or
   * `chat.admin.memberships` [OAuth 2.0
   * scope](https://developers.google.com/workspace/chat/authenticate-authorize#chat-api-scopes).
   *
   * Listing app memberships in a space isn't supported when using admin access.
   */
  useAdminAccess: boolean;
}

/** Response to list memberships of the space. */
export interface ListMembershipsResponse {
  /** Unordered list. List of memberships in the requested (or first) page. */
  memberships: Membership[];
  /**
   * A token that you can send as `pageToken` to retrieve the next page of
   * results. If empty, there are no subsequent pages.
   */
  nextPageToken: string;
}

/** Request to get a membership of a space. */
export interface GetMembershipRequest {
  /**
   * Required. Resource name of the membership to retrieve.
   *
   * To get the app's own membership [by using user
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user),
   * you can optionally use `spaces/{space}/members/app`.
   *
   * Format: `spaces/{space}/members/{member}` or `spaces/{space}/members/app`
   *
   * When [authenticated as a
   * user](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user),
   * you can use the user's email as an alias for `{member}`. For example,
   * `spaces/{space}/members/example@gmail.com` where `example@gmail.com` is the
   * email of the Google Chat user.
   */
  name: string;
  /**
   * When `true`, the method runs using the user's Google Workspace
   * administrator privileges.
   *
   * The calling user must be a Google Workspace administrator with the
   * [manage chat and spaces conversations
   * privilege](https://support.google.com/a/answer/13369245).
   *
   * Requires the `chat.admin.memberships` or `chat.admin.memberships.readonly`
   * [OAuth 2.0
   * scopes](https://developers.google.com/workspace/chat/authenticate-authorize#chat-api-scopes).
   *
   * Getting app memberships in a space isn't supported when using admin access.
   */
  useAdminAccess: boolean;
}

/** Request to delete a membership in a space. */
export interface DeleteMembershipRequest {
  /**
   * Required. Resource name of the membership to delete. Chat apps can delete
   * human users' or their own memberships. Chat apps can't delete other apps'
   * memberships.
   *
   * When deleting a human membership, requires the `chat.memberships` scope and
   * `spaces/{space}/members/{member}` format. You can use the email as an
   * alias for `{member}`. For example,
   * `spaces/{space}/members/example@gmail.com` where `example@gmail.com` is the
   * email of the Google Chat user.
   *
   * When deleting an app membership, requires the `chat.memberships.app` scope
   * and `spaces/{space}/members/app` format.
   *
   * Format: `spaces/{space}/members/{member}` or `spaces/{space}/members/app`.
   */
  name: string;
  /**
   * When `true`, the method runs using the user's Google Workspace
   * administrator privileges.
   *
   * The calling user must be a Google Workspace administrator with the
   * [manage chat and spaces conversations
   * privilege](https://support.google.com/a/answer/13369245).
   *
   * Requires the `chat.admin.memberships` [OAuth 2.0
   * scope](https://developers.google.com/workspace/chat/authenticate-authorize#chat-api-scopes).
   *
   * Deleting app memberships in a space isn't supported using admin access.
   */
  useAdminAccess: boolean;
}

function createBaseMembership(): Membership {
  return {
    name: "",
    state: 0,
    role: 0,
    member: undefined,
    groupMember: undefined,
    createTime: undefined,
    deleteTime: undefined,
  };
}

export const Membership: MessageFns<Membership> = {
  encode(message: Membership, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.state !== 0) {
      writer.uint32(16).int32(message.state);
    }
    if (message.role !== 0) {
      writer.uint32(56).int32(message.role);
    }
    if (message.member !== undefined) {
      User.encode(message.member, writer.uint32(26).fork()).join();
    }
    if (message.groupMember !== undefined) {
      Group.encode(message.groupMember, writer.uint32(42).fork()).join();
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(34).fork()).join();
    }
    if (message.deleteTime !== undefined) {
      Timestamp.encode(toTimestamp(message.deleteTime), writer.uint32(66).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Membership {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMembership();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.role = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.member = User.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.groupMember = Group.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.deleteTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Membership {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      state: isSet(object.state) ? membership_MembershipStateFromJSON(object.state) : 0,
      role: isSet(object.role) ? membership_MembershipRoleFromJSON(object.role) : 0,
      member: isSet(object.member) ? User.fromJSON(object.member) : undefined,
      groupMember: isSet(object.groupMember) ? Group.fromJSON(object.groupMember) : undefined,
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      deleteTime: isSet(object.deleteTime) ? fromJsonTimestamp(object.deleteTime) : undefined,
    };
  },

  toJSON(message: Membership): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.state !== 0) {
      obj.state = membership_MembershipStateToJSON(message.state);
    }
    if (message.role !== 0) {
      obj.role = membership_MembershipRoleToJSON(message.role);
    }
    if (message.member !== undefined) {
      obj.member = User.toJSON(message.member);
    }
    if (message.groupMember !== undefined) {
      obj.groupMember = Group.toJSON(message.groupMember);
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.deleteTime !== undefined) {
      obj.deleteTime = message.deleteTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<Membership>): Membership {
    return Membership.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Membership>): Membership {
    const message = createBaseMembership();
    message.name = object.name ?? "";
    message.state = object.state ?? 0;
    message.role = object.role ?? 0;
    message.member = (object.member !== undefined && object.member !== null)
      ? User.fromPartial(object.member)
      : undefined;
    message.groupMember = (object.groupMember !== undefined && object.groupMember !== null)
      ? Group.fromPartial(object.groupMember)
      : undefined;
    message.createTime = object.createTime ?? undefined;
    message.deleteTime = object.deleteTime ?? undefined;
    return message;
  },
};

function createBaseCreateMembershipRequest(): CreateMembershipRequest {
  return { parent: "", membership: undefined, useAdminAccess: false };
}

export const CreateMembershipRequest: MessageFns<CreateMembershipRequest> = {
  encode(message: CreateMembershipRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.membership !== undefined) {
      Membership.encode(message.membership, writer.uint32(18).fork()).join();
    }
    if (message.useAdminAccess !== false) {
      writer.uint32(40).bool(message.useAdminAccess);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateMembershipRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateMembershipRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.membership = Membership.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.useAdminAccess = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateMembershipRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      membership: isSet(object.membership) ? Membership.fromJSON(object.membership) : undefined,
      useAdminAccess: isSet(object.useAdminAccess) ? globalThis.Boolean(object.useAdminAccess) : false,
    };
  },

  toJSON(message: CreateMembershipRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.membership !== undefined) {
      obj.membership = Membership.toJSON(message.membership);
    }
    if (message.useAdminAccess !== false) {
      obj.useAdminAccess = message.useAdminAccess;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateMembershipRequest>): CreateMembershipRequest {
    return CreateMembershipRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateMembershipRequest>): CreateMembershipRequest {
    const message = createBaseCreateMembershipRequest();
    message.parent = object.parent ?? "";
    message.membership = (object.membership !== undefined && object.membership !== null)
      ? Membership.fromPartial(object.membership)
      : undefined;
    message.useAdminAccess = object.useAdminAccess ?? false;
    return message;
  },
};

function createBaseUpdateMembershipRequest(): UpdateMembershipRequest {
  return { membership: undefined, updateMask: undefined, useAdminAccess: false };
}

export const UpdateMembershipRequest: MessageFns<UpdateMembershipRequest> = {
  encode(message: UpdateMembershipRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.membership !== undefined) {
      Membership.encode(message.membership, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    if (message.useAdminAccess !== false) {
      writer.uint32(24).bool(message.useAdminAccess);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateMembershipRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateMembershipRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.membership = Membership.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.useAdminAccess = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateMembershipRequest {
    return {
      membership: isSet(object.membership) ? Membership.fromJSON(object.membership) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      useAdminAccess: isSet(object.useAdminAccess) ? globalThis.Boolean(object.useAdminAccess) : false,
    };
  },

  toJSON(message: UpdateMembershipRequest): unknown {
    const obj: any = {};
    if (message.membership !== undefined) {
      obj.membership = Membership.toJSON(message.membership);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.useAdminAccess !== false) {
      obj.useAdminAccess = message.useAdminAccess;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateMembershipRequest>): UpdateMembershipRequest {
    return UpdateMembershipRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateMembershipRequest>): UpdateMembershipRequest {
    const message = createBaseUpdateMembershipRequest();
    message.membership = (object.membership !== undefined && object.membership !== null)
      ? Membership.fromPartial(object.membership)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    message.useAdminAccess = object.useAdminAccess ?? false;
    return message;
  },
};

function createBaseListMembershipsRequest(): ListMembershipsRequest {
  return {
    parent: "",
    pageSize: 0,
    pageToken: "",
    filter: "",
    showGroups: false,
    showInvited: false,
    useAdminAccess: false,
  };
}

export const ListMembershipsRequest: MessageFns<ListMembershipsRequest> = {
  encode(message: ListMembershipsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(42).string(message.filter);
    }
    if (message.showGroups !== false) {
      writer.uint32(48).bool(message.showGroups);
    }
    if (message.showInvited !== false) {
      writer.uint32(56).bool(message.showInvited);
    }
    if (message.useAdminAccess !== false) {
      writer.uint32(64).bool(message.useAdminAccess);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListMembershipsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListMembershipsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.showGroups = reader.bool();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.showInvited = reader.bool();
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.useAdminAccess = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListMembershipsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      showGroups: isSet(object.showGroups) ? globalThis.Boolean(object.showGroups) : false,
      showInvited: isSet(object.showInvited) ? globalThis.Boolean(object.showInvited) : false,
      useAdminAccess: isSet(object.useAdminAccess) ? globalThis.Boolean(object.useAdminAccess) : false,
    };
  },

  toJSON(message: ListMembershipsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.showGroups !== false) {
      obj.showGroups = message.showGroups;
    }
    if (message.showInvited !== false) {
      obj.showInvited = message.showInvited;
    }
    if (message.useAdminAccess !== false) {
      obj.useAdminAccess = message.useAdminAccess;
    }
    return obj;
  },

  create(base?: DeepPartial<ListMembershipsRequest>): ListMembershipsRequest {
    return ListMembershipsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListMembershipsRequest>): ListMembershipsRequest {
    const message = createBaseListMembershipsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.showGroups = object.showGroups ?? false;
    message.showInvited = object.showInvited ?? false;
    message.useAdminAccess = object.useAdminAccess ?? false;
    return message;
  },
};

function createBaseListMembershipsResponse(): ListMembershipsResponse {
  return { memberships: [], nextPageToken: "" };
}

export const ListMembershipsResponse: MessageFns<ListMembershipsResponse> = {
  encode(message: ListMembershipsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.memberships) {
      Membership.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListMembershipsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListMembershipsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.memberships.push(Membership.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListMembershipsResponse {
    return {
      memberships: globalThis.Array.isArray(object?.memberships)
        ? object.memberships.map((e: any) => Membership.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListMembershipsResponse): unknown {
    const obj: any = {};
    if (message.memberships?.length) {
      obj.memberships = message.memberships.map((e) => Membership.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListMembershipsResponse>): ListMembershipsResponse {
    return ListMembershipsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListMembershipsResponse>): ListMembershipsResponse {
    const message = createBaseListMembershipsResponse();
    message.memberships = object.memberships?.map((e) => Membership.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetMembershipRequest(): GetMembershipRequest {
  return { name: "", useAdminAccess: false };
}

export const GetMembershipRequest: MessageFns<GetMembershipRequest> = {
  encode(message: GetMembershipRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.useAdminAccess !== false) {
      writer.uint32(24).bool(message.useAdminAccess);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetMembershipRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetMembershipRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.useAdminAccess = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetMembershipRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      useAdminAccess: isSet(object.useAdminAccess) ? globalThis.Boolean(object.useAdminAccess) : false,
    };
  },

  toJSON(message: GetMembershipRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.useAdminAccess !== false) {
      obj.useAdminAccess = message.useAdminAccess;
    }
    return obj;
  },

  create(base?: DeepPartial<GetMembershipRequest>): GetMembershipRequest {
    return GetMembershipRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetMembershipRequest>): GetMembershipRequest {
    const message = createBaseGetMembershipRequest();
    message.name = object.name ?? "";
    message.useAdminAccess = object.useAdminAccess ?? false;
    return message;
  },
};

function createBaseDeleteMembershipRequest(): DeleteMembershipRequest {
  return { name: "", useAdminAccess: false };
}

export const DeleteMembershipRequest: MessageFns<DeleteMembershipRequest> = {
  encode(message: DeleteMembershipRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.useAdminAccess !== false) {
      writer.uint32(16).bool(message.useAdminAccess);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteMembershipRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteMembershipRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.useAdminAccess = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteMembershipRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      useAdminAccess: isSet(object.useAdminAccess) ? globalThis.Boolean(object.useAdminAccess) : false,
    };
  },

  toJSON(message: DeleteMembershipRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.useAdminAccess !== false) {
      obj.useAdminAccess = message.useAdminAccess;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteMembershipRequest>): DeleteMembershipRequest {
    return DeleteMembershipRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteMembershipRequest>): DeleteMembershipRequest {
    const message = createBaseDeleteMembershipRequest();
    message.name = object.name ?? "";
    message.useAdminAccess = object.useAdminAccess ?? false;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
