// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/firestore/admin/v1/schedule.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Duration } from "../../../protobuf/duration.js";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { DayOfWeek, dayOfWeekFromJSON, dayOfWeekToJSON } from "../../../type/dayofweek.js";

export const protobufPackage = "google.firestore.admin.v1";

/**
 * A backup schedule for a Cloud Firestore Database.
 *
 * This resource is owned by the database it is backing up, and is deleted along
 * with the database. The actual backups are not though.
 */
export interface BackupSchedule {
  /**
   * Output only. The unique backup schedule identifier across all locations and
   * databases for the given project.
   *
   * This will be auto-assigned.
   *
   * Format is
   * `projects/{project}/databases/{database}/backupSchedules/{backup_schedule}`
   */
  name: string;
  /**
   * Output only. The timestamp at which this backup schedule was created and
   * effective since.
   *
   * No backups will be created for this schedule before this time.
   */
  createTime:
    | Date
    | undefined;
  /**
   * Output only. The timestamp at which this backup schedule was most recently
   * updated. When a backup schedule is first created, this is the same as
   * create_time.
   */
  updateTime:
    | Date
    | undefined;
  /**
   * At what relative time in the future, compared to its creation time,
   * the backup should be deleted, e.g. keep backups for 7 days.
   *
   * The maximum supported retention period is 14 weeks.
   */
  retention:
    | Duration
    | undefined;
  /** For a schedule that runs daily. */
  dailyRecurrence?:
    | DailyRecurrence
    | undefined;
  /** For a schedule that runs weekly on a specific day. */
  weeklyRecurrence?: WeeklyRecurrence | undefined;
}

/**
 * Represents a recurring schedule that runs every day.
 *
 * The time zone is UTC.
 */
export interface DailyRecurrence {
}

/**
 * Represents a recurring schedule that runs on a specified day of the week.
 *
 * The time zone is UTC.
 */
export interface WeeklyRecurrence {
  /**
   * The day of week to run.
   *
   * DAY_OF_WEEK_UNSPECIFIED is not allowed.
   */
  day: DayOfWeek;
}

function createBaseBackupSchedule(): BackupSchedule {
  return {
    name: "",
    createTime: undefined,
    updateTime: undefined,
    retention: undefined,
    dailyRecurrence: undefined,
    weeklyRecurrence: undefined,
  };
}

export const BackupSchedule: MessageFns<BackupSchedule> = {
  encode(message: BackupSchedule, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(26).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(82).fork()).join();
    }
    if (message.retention !== undefined) {
      Duration.encode(message.retention, writer.uint32(50).fork()).join();
    }
    if (message.dailyRecurrence !== undefined) {
      DailyRecurrence.encode(message.dailyRecurrence, writer.uint32(58).fork()).join();
    }
    if (message.weeklyRecurrence !== undefined) {
      WeeklyRecurrence.encode(message.weeklyRecurrence, writer.uint32(66).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BackupSchedule {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBackupSchedule();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.retention = Duration.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.dailyRecurrence = DailyRecurrence.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.weeklyRecurrence = WeeklyRecurrence.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BackupSchedule {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      retention: isSet(object.retention) ? Duration.fromJSON(object.retention) : undefined,
      dailyRecurrence: isSet(object.dailyRecurrence) ? DailyRecurrence.fromJSON(object.dailyRecurrence) : undefined,
      weeklyRecurrence: isSet(object.weeklyRecurrence) ? WeeklyRecurrence.fromJSON(object.weeklyRecurrence) : undefined,
    };
  },

  toJSON(message: BackupSchedule): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.retention !== undefined) {
      obj.retention = Duration.toJSON(message.retention);
    }
    if (message.dailyRecurrence !== undefined) {
      obj.dailyRecurrence = DailyRecurrence.toJSON(message.dailyRecurrence);
    }
    if (message.weeklyRecurrence !== undefined) {
      obj.weeklyRecurrence = WeeklyRecurrence.toJSON(message.weeklyRecurrence);
    }
    return obj;
  },

  create(base?: DeepPartial<BackupSchedule>): BackupSchedule {
    return BackupSchedule.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BackupSchedule>): BackupSchedule {
    const message = createBaseBackupSchedule();
    message.name = object.name ?? "";
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.retention = (object.retention !== undefined && object.retention !== null)
      ? Duration.fromPartial(object.retention)
      : undefined;
    message.dailyRecurrence = (object.dailyRecurrence !== undefined && object.dailyRecurrence !== null)
      ? DailyRecurrence.fromPartial(object.dailyRecurrence)
      : undefined;
    message.weeklyRecurrence = (object.weeklyRecurrence !== undefined && object.weeklyRecurrence !== null)
      ? WeeklyRecurrence.fromPartial(object.weeklyRecurrence)
      : undefined;
    return message;
  },
};

function createBaseDailyRecurrence(): DailyRecurrence {
  return {};
}

export const DailyRecurrence: MessageFns<DailyRecurrence> = {
  encode(_: DailyRecurrence, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DailyRecurrence {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDailyRecurrence();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): DailyRecurrence {
    return {};
  },

  toJSON(_: DailyRecurrence): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<DailyRecurrence>): DailyRecurrence {
    return DailyRecurrence.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<DailyRecurrence>): DailyRecurrence {
    const message = createBaseDailyRecurrence();
    return message;
  },
};

function createBaseWeeklyRecurrence(): WeeklyRecurrence {
  return { day: 0 };
}

export const WeeklyRecurrence: MessageFns<WeeklyRecurrence> = {
  encode(message: WeeklyRecurrence, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.day !== 0) {
      writer.uint32(16).int32(message.day);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WeeklyRecurrence {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWeeklyRecurrence();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 16) {
            break;
          }

          message.day = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WeeklyRecurrence {
    return { day: isSet(object.day) ? dayOfWeekFromJSON(object.day) : 0 };
  },

  toJSON(message: WeeklyRecurrence): unknown {
    const obj: any = {};
    if (message.day !== 0) {
      obj.day = dayOfWeekToJSON(message.day);
    }
    return obj;
  },

  create(base?: DeepPartial<WeeklyRecurrence>): WeeklyRecurrence {
    return WeeklyRecurrence.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<WeeklyRecurrence>): WeeklyRecurrence {
    const message = createBaseWeeklyRecurrence();
    message.day = object.day ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
