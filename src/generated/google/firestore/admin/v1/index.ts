// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/firestore/admin/v1/index.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.firestore.admin.v1";

/**
 * Cloud Firestore indexes enable simple and complex queries against
 * documents in a database.
 */
export interface Index {
  /**
   * Output only. A server defined name for this index.
   * The form of this name for composite indexes will be:
   * `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/indexes/{composite_index_id}`
   * For single field indexes, this field will be empty.
   */
  name: string;
  /**
   * Indexes with a collection query scope specified allow queries
   * against a collection that is the child of a specific document, specified at
   * query time, and that has the same collection ID.
   *
   * Indexes with a collection group query scope specified allow queries against
   * all collections descended from a specific document, specified at query
   * time, and that have the same collection ID as this index.
   */
  queryScope: Index_QueryScope;
  /** The API scope supported by this index. */
  apiScope: Index_ApiScope;
  /**
   * The fields supported by this index.
   *
   * For composite indexes, this requires a minimum of 2 and a maximum of 100
   * fields. The last field entry is always for the field path `__name__`. If,
   * on creation, `__name__` was not specified as the last field, it will be
   * added automatically with the same direction as that of the last field
   * defined. If the final field in a composite index is not directional, the
   * `__name__` will be ordered ASCENDING (unless explicitly specified).
   *
   * For single field indexes, this will always be exactly one entry with a
   * field path equal to the field path of the associated field.
   */
  fields: Index_IndexField[];
  /** Output only. The serving state of the index. */
  state: Index_State;
}

/**
 * Query Scope defines the scope at which a query is run. This is specified on
 * a StructuredQuery's `from` field.
 */
export enum Index_QueryScope {
  /** QUERY_SCOPE_UNSPECIFIED - The query scope is unspecified. Not a valid option. */
  QUERY_SCOPE_UNSPECIFIED = 0,
  /**
   * COLLECTION - Indexes with a collection query scope specified allow queries
   * against a collection that is the child of a specific document, specified
   * at query time, and that has the collection ID specified by the index.
   */
  COLLECTION = 1,
  /**
   * COLLECTION_GROUP - Indexes with a collection group query scope specified allow queries
   * against all collections that has the collection ID specified by the
   * index.
   */
  COLLECTION_GROUP = 2,
  /**
   * COLLECTION_RECURSIVE - Include all the collections's ancestor in the index. Only available for
   * Datastore Mode databases.
   */
  COLLECTION_RECURSIVE = 3,
  UNRECOGNIZED = -1,
}

export function index_QueryScopeFromJSON(object: any): Index_QueryScope {
  switch (object) {
    case 0:
    case "QUERY_SCOPE_UNSPECIFIED":
      return Index_QueryScope.QUERY_SCOPE_UNSPECIFIED;
    case 1:
    case "COLLECTION":
      return Index_QueryScope.COLLECTION;
    case 2:
    case "COLLECTION_GROUP":
      return Index_QueryScope.COLLECTION_GROUP;
    case 3:
    case "COLLECTION_RECURSIVE":
      return Index_QueryScope.COLLECTION_RECURSIVE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Index_QueryScope.UNRECOGNIZED;
  }
}

export function index_QueryScopeToJSON(object: Index_QueryScope): string {
  switch (object) {
    case Index_QueryScope.QUERY_SCOPE_UNSPECIFIED:
      return "QUERY_SCOPE_UNSPECIFIED";
    case Index_QueryScope.COLLECTION:
      return "COLLECTION";
    case Index_QueryScope.COLLECTION_GROUP:
      return "COLLECTION_GROUP";
    case Index_QueryScope.COLLECTION_RECURSIVE:
      return "COLLECTION_RECURSIVE";
    case Index_QueryScope.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * API Scope defines the APIs (Firestore Native, or Firestore in
 * Datastore Mode) that are supported for queries.
 */
export enum Index_ApiScope {
  /**
   * ANY_API - The index can only be used by the Firestore Native query API.
   * This is the default.
   */
  ANY_API = 0,
  /** DATASTORE_MODE_API - The index can only be used by the Firestore in Datastore Mode query API. */
  DATASTORE_MODE_API = 1,
  UNRECOGNIZED = -1,
}

export function index_ApiScopeFromJSON(object: any): Index_ApiScope {
  switch (object) {
    case 0:
    case "ANY_API":
      return Index_ApiScope.ANY_API;
    case 1:
    case "DATASTORE_MODE_API":
      return Index_ApiScope.DATASTORE_MODE_API;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Index_ApiScope.UNRECOGNIZED;
  }
}

export function index_ApiScopeToJSON(object: Index_ApiScope): string {
  switch (object) {
    case Index_ApiScope.ANY_API:
      return "ANY_API";
    case Index_ApiScope.DATASTORE_MODE_API:
      return "DATASTORE_MODE_API";
    case Index_ApiScope.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * The state of an index. During index creation, an index will be in the
 * `CREATING` state. If the index is created successfully, it will transition
 * to the `READY` state. If the index creation encounters a problem, the index
 * will transition to the `NEEDS_REPAIR` state.
 */
export enum Index_State {
  /** STATE_UNSPECIFIED - The state is unspecified. */
  STATE_UNSPECIFIED = 0,
  /**
   * CREATING - The index is being created.
   * There is an active long-running operation for the index.
   * The index is updated when writing a document.
   * Some index data may exist.
   */
  CREATING = 1,
  /**
   * READY - The index is ready to be used.
   * The index is updated when writing a document.
   * The index is fully populated from all stored documents it applies to.
   */
  READY = 2,
  /**
   * NEEDS_REPAIR - The index was being created, but something went wrong.
   * There is no active long-running operation for the index,
   * and the most recently finished long-running operation failed.
   * The index is not updated when writing a document.
   * Some index data may exist.
   * Use the google.longrunning.Operations API to determine why the operation
   * that last attempted to create this index failed, then re-create the
   * index.
   */
  NEEDS_REPAIR = 3,
  UNRECOGNIZED = -1,
}

export function index_StateFromJSON(object: any): Index_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return Index_State.STATE_UNSPECIFIED;
    case 1:
    case "CREATING":
      return Index_State.CREATING;
    case 2:
    case "READY":
      return Index_State.READY;
    case 3:
    case "NEEDS_REPAIR":
      return Index_State.NEEDS_REPAIR;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Index_State.UNRECOGNIZED;
  }
}

export function index_StateToJSON(object: Index_State): string {
  switch (object) {
    case Index_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case Index_State.CREATING:
      return "CREATING";
    case Index_State.READY:
      return "READY";
    case Index_State.NEEDS_REPAIR:
      return "NEEDS_REPAIR";
    case Index_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * A field in an index.
 * The field_path describes which field is indexed, the value_mode describes
 * how the field value is indexed.
 */
export interface Index_IndexField {
  /**
   * Can be __name__.
   * For single field indexes, this must match the name of the field or may
   * be omitted.
   */
  fieldPath: string;
  /**
   * Indicates that this field supports ordering by the specified order or
   * comparing using =, !=, <, <=, >, >=.
   */
  order?:
    | Index_IndexField_Order
    | undefined;
  /** Indicates that this field supports operations on `array_value`s. */
  arrayConfig?:
    | Index_IndexField_ArrayConfig
    | undefined;
  /**
   * Indicates that this field supports nearest neighbor and distance
   * operations on vector.
   */
  vectorConfig?: Index_IndexField_VectorConfig | undefined;
}

/** The supported orderings. */
export enum Index_IndexField_Order {
  /** ORDER_UNSPECIFIED - The ordering is unspecified. Not a valid option. */
  ORDER_UNSPECIFIED = 0,
  /** ASCENDING - The field is ordered by ascending field value. */
  ASCENDING = 1,
  /** DESCENDING - The field is ordered by descending field value. */
  DESCENDING = 2,
  UNRECOGNIZED = -1,
}

export function index_IndexField_OrderFromJSON(object: any): Index_IndexField_Order {
  switch (object) {
    case 0:
    case "ORDER_UNSPECIFIED":
      return Index_IndexField_Order.ORDER_UNSPECIFIED;
    case 1:
    case "ASCENDING":
      return Index_IndexField_Order.ASCENDING;
    case 2:
    case "DESCENDING":
      return Index_IndexField_Order.DESCENDING;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Index_IndexField_Order.UNRECOGNIZED;
  }
}

export function index_IndexField_OrderToJSON(object: Index_IndexField_Order): string {
  switch (object) {
    case Index_IndexField_Order.ORDER_UNSPECIFIED:
      return "ORDER_UNSPECIFIED";
    case Index_IndexField_Order.ASCENDING:
      return "ASCENDING";
    case Index_IndexField_Order.DESCENDING:
      return "DESCENDING";
    case Index_IndexField_Order.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** The supported array value configurations. */
export enum Index_IndexField_ArrayConfig {
  /** ARRAY_CONFIG_UNSPECIFIED - The index does not support additional array queries. */
  ARRAY_CONFIG_UNSPECIFIED = 0,
  /** CONTAINS - The index supports array containment queries. */
  CONTAINS = 1,
  UNRECOGNIZED = -1,
}

export function index_IndexField_ArrayConfigFromJSON(object: any): Index_IndexField_ArrayConfig {
  switch (object) {
    case 0:
    case "ARRAY_CONFIG_UNSPECIFIED":
      return Index_IndexField_ArrayConfig.ARRAY_CONFIG_UNSPECIFIED;
    case 1:
    case "CONTAINS":
      return Index_IndexField_ArrayConfig.CONTAINS;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Index_IndexField_ArrayConfig.UNRECOGNIZED;
  }
}

export function index_IndexField_ArrayConfigToJSON(object: Index_IndexField_ArrayConfig): string {
  switch (object) {
    case Index_IndexField_ArrayConfig.ARRAY_CONFIG_UNSPECIFIED:
      return "ARRAY_CONFIG_UNSPECIFIED";
    case Index_IndexField_ArrayConfig.CONTAINS:
      return "CONTAINS";
    case Index_IndexField_ArrayConfig.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** The index configuration to support vector search operations */
export interface Index_IndexField_VectorConfig {
  /**
   * Required. The vector dimension this configuration applies to.
   *
   * The resulting index will only include vectors of this dimension, and
   * can be used for vector search with the same dimension.
   */
  dimension: number;
  /** Indicates the vector index is a flat index. */
  flat?: Index_IndexField_VectorConfig_FlatIndex | undefined;
}

/**
 * An index that stores vectors in a flat data structure, and supports
 * exhaustive search.
 */
export interface Index_IndexField_VectorConfig_FlatIndex {
}

function createBaseIndex(): Index {
  return { name: "", queryScope: 0, apiScope: 0, fields: [], state: 0 };
}

export const Index: MessageFns<Index> = {
  encode(message: Index, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.queryScope !== 0) {
      writer.uint32(16).int32(message.queryScope);
    }
    if (message.apiScope !== 0) {
      writer.uint32(40).int32(message.apiScope);
    }
    for (const v of message.fields) {
      Index_IndexField.encode(v!, writer.uint32(26).fork()).join();
    }
    if (message.state !== 0) {
      writer.uint32(32).int32(message.state);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Index {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIndex();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.queryScope = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.apiScope = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.fields.push(Index_IndexField.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Index {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      queryScope: isSet(object.queryScope) ? index_QueryScopeFromJSON(object.queryScope) : 0,
      apiScope: isSet(object.apiScope) ? index_ApiScopeFromJSON(object.apiScope) : 0,
      fields: globalThis.Array.isArray(object?.fields)
        ? object.fields.map((e: any) => Index_IndexField.fromJSON(e))
        : [],
      state: isSet(object.state) ? index_StateFromJSON(object.state) : 0,
    };
  },

  toJSON(message: Index): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.queryScope !== 0) {
      obj.queryScope = index_QueryScopeToJSON(message.queryScope);
    }
    if (message.apiScope !== 0) {
      obj.apiScope = index_ApiScopeToJSON(message.apiScope);
    }
    if (message.fields?.length) {
      obj.fields = message.fields.map((e) => Index_IndexField.toJSON(e));
    }
    if (message.state !== 0) {
      obj.state = index_StateToJSON(message.state);
    }
    return obj;
  },

  create(base?: DeepPartial<Index>): Index {
    return Index.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Index>): Index {
    const message = createBaseIndex();
    message.name = object.name ?? "";
    message.queryScope = object.queryScope ?? 0;
    message.apiScope = object.apiScope ?? 0;
    message.fields = object.fields?.map((e) => Index_IndexField.fromPartial(e)) || [];
    message.state = object.state ?? 0;
    return message;
  },
};

function createBaseIndex_IndexField(): Index_IndexField {
  return { fieldPath: "", order: undefined, arrayConfig: undefined, vectorConfig: undefined };
}

export const Index_IndexField: MessageFns<Index_IndexField> = {
  encode(message: Index_IndexField, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.fieldPath !== "") {
      writer.uint32(10).string(message.fieldPath);
    }
    if (message.order !== undefined) {
      writer.uint32(16).int32(message.order);
    }
    if (message.arrayConfig !== undefined) {
      writer.uint32(24).int32(message.arrayConfig);
    }
    if (message.vectorConfig !== undefined) {
      Index_IndexField_VectorConfig.encode(message.vectorConfig, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Index_IndexField {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIndex_IndexField();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.fieldPath = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.order = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.arrayConfig = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.vectorConfig = Index_IndexField_VectorConfig.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Index_IndexField {
    return {
      fieldPath: isSet(object.fieldPath) ? globalThis.String(object.fieldPath) : "",
      order: isSet(object.order) ? index_IndexField_OrderFromJSON(object.order) : undefined,
      arrayConfig: isSet(object.arrayConfig) ? index_IndexField_ArrayConfigFromJSON(object.arrayConfig) : undefined,
      vectorConfig: isSet(object.vectorConfig)
        ? Index_IndexField_VectorConfig.fromJSON(object.vectorConfig)
        : undefined,
    };
  },

  toJSON(message: Index_IndexField): unknown {
    const obj: any = {};
    if (message.fieldPath !== "") {
      obj.fieldPath = message.fieldPath;
    }
    if (message.order !== undefined) {
      obj.order = index_IndexField_OrderToJSON(message.order);
    }
    if (message.arrayConfig !== undefined) {
      obj.arrayConfig = index_IndexField_ArrayConfigToJSON(message.arrayConfig);
    }
    if (message.vectorConfig !== undefined) {
      obj.vectorConfig = Index_IndexField_VectorConfig.toJSON(message.vectorConfig);
    }
    return obj;
  },

  create(base?: DeepPartial<Index_IndexField>): Index_IndexField {
    return Index_IndexField.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Index_IndexField>): Index_IndexField {
    const message = createBaseIndex_IndexField();
    message.fieldPath = object.fieldPath ?? "";
    message.order = object.order ?? undefined;
    message.arrayConfig = object.arrayConfig ?? undefined;
    message.vectorConfig = (object.vectorConfig !== undefined && object.vectorConfig !== null)
      ? Index_IndexField_VectorConfig.fromPartial(object.vectorConfig)
      : undefined;
    return message;
  },
};

function createBaseIndex_IndexField_VectorConfig(): Index_IndexField_VectorConfig {
  return { dimension: 0, flat: undefined };
}

export const Index_IndexField_VectorConfig: MessageFns<Index_IndexField_VectorConfig> = {
  encode(message: Index_IndexField_VectorConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.dimension !== 0) {
      writer.uint32(8).int32(message.dimension);
    }
    if (message.flat !== undefined) {
      Index_IndexField_VectorConfig_FlatIndex.encode(message.flat, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Index_IndexField_VectorConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIndex_IndexField_VectorConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.dimension = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.flat = Index_IndexField_VectorConfig_FlatIndex.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Index_IndexField_VectorConfig {
    return {
      dimension: isSet(object.dimension) ? globalThis.Number(object.dimension) : 0,
      flat: isSet(object.flat) ? Index_IndexField_VectorConfig_FlatIndex.fromJSON(object.flat) : undefined,
    };
  },

  toJSON(message: Index_IndexField_VectorConfig): unknown {
    const obj: any = {};
    if (message.dimension !== 0) {
      obj.dimension = Math.round(message.dimension);
    }
    if (message.flat !== undefined) {
      obj.flat = Index_IndexField_VectorConfig_FlatIndex.toJSON(message.flat);
    }
    return obj;
  },

  create(base?: DeepPartial<Index_IndexField_VectorConfig>): Index_IndexField_VectorConfig {
    return Index_IndexField_VectorConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Index_IndexField_VectorConfig>): Index_IndexField_VectorConfig {
    const message = createBaseIndex_IndexField_VectorConfig();
    message.dimension = object.dimension ?? 0;
    message.flat = (object.flat !== undefined && object.flat !== null)
      ? Index_IndexField_VectorConfig_FlatIndex.fromPartial(object.flat)
      : undefined;
    return message;
  },
};

function createBaseIndex_IndexField_VectorConfig_FlatIndex(): Index_IndexField_VectorConfig_FlatIndex {
  return {};
}

export const Index_IndexField_VectorConfig_FlatIndex: MessageFns<Index_IndexField_VectorConfig_FlatIndex> = {
  encode(_: Index_IndexField_VectorConfig_FlatIndex, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Index_IndexField_VectorConfig_FlatIndex {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIndex_IndexField_VectorConfig_FlatIndex();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Index_IndexField_VectorConfig_FlatIndex {
    return {};
  },

  toJSON(_: Index_IndexField_VectorConfig_FlatIndex): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<Index_IndexField_VectorConfig_FlatIndex>): Index_IndexField_VectorConfig_FlatIndex {
    return Index_IndexField_VectorConfig_FlatIndex.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<Index_IndexField_VectorConfig_FlatIndex>): Index_IndexField_VectorConfig_FlatIndex {
    const message = createBaseIndex_IndexField_VectorConfig_FlatIndex();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
