// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/firestore/v1/aggregation_result.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Value } from "./document.js";

export const protobufPackage = "google.firestore.v1";

/**
 * The result of a single bucket from a Firestore aggregation query.
 *
 * The keys of `aggregate_fields` are the same for all results in an aggregation
 * query, unlike document queries which can have different fields present for
 * each result.
 */
export interface AggregationResult {
  /**
   * The result of the aggregation functions, ex: `COUNT(*) AS total_docs`.
   *
   * The key is the
   * [alias][google.firestore.v1.StructuredAggregationQuery.Aggregation.alias]
   * assigned to the aggregation function on input and the size of this map
   * equals the number of aggregation functions in the query.
   */
  aggregateFields: { [key: string]: Value };
}

export interface AggregationResult_AggregateFieldsEntry {
  key: string;
  value: Value | undefined;
}

function createBaseAggregationResult(): AggregationResult {
  return { aggregateFields: {} };
}

export const AggregationResult: MessageFns<AggregationResult> = {
  encode(message: AggregationResult, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    Object.entries(message.aggregateFields).forEach(([key, value]) => {
      AggregationResult_AggregateFieldsEntry.encode({ key: key as any, value }, writer.uint32(18).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AggregationResult {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAggregationResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          const entry2 = AggregationResult_AggregateFieldsEntry.decode(reader, reader.uint32());
          if (entry2.value !== undefined) {
            message.aggregateFields[entry2.key] = entry2.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AggregationResult {
    return {
      aggregateFields: isObject(object.aggregateFields)
        ? Object.entries(object.aggregateFields).reduce<{ [key: string]: Value }>((acc, [key, value]) => {
          acc[key] = Value.fromJSON(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: AggregationResult): unknown {
    const obj: any = {};
    if (message.aggregateFields) {
      const entries = Object.entries(message.aggregateFields);
      if (entries.length > 0) {
        obj.aggregateFields = {};
        entries.forEach(([k, v]) => {
          obj.aggregateFields[k] = Value.toJSON(v);
        });
      }
    }
    return obj;
  },

  create(base?: DeepPartial<AggregationResult>): AggregationResult {
    return AggregationResult.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AggregationResult>): AggregationResult {
    const message = createBaseAggregationResult();
    message.aggregateFields = Object.entries(object.aggregateFields ?? {}).reduce<{ [key: string]: Value }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = Value.fromPartial(value);
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBaseAggregationResult_AggregateFieldsEntry(): AggregationResult_AggregateFieldsEntry {
  return { key: "", value: undefined };
}

export const AggregationResult_AggregateFieldsEntry: MessageFns<AggregationResult_AggregateFieldsEntry> = {
  encode(message: AggregationResult_AggregateFieldsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      Value.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AggregationResult_AggregateFieldsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAggregationResult_AggregateFieldsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = Value.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AggregationResult_AggregateFieldsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? Value.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: AggregationResult_AggregateFieldsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = Value.toJSON(message.value);
    }
    return obj;
  },

  create(base?: DeepPartial<AggregationResult_AggregateFieldsEntry>): AggregationResult_AggregateFieldsEntry {
    return AggregationResult_AggregateFieldsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AggregationResult_AggregateFieldsEntry>): AggregationResult_AggregateFieldsEntry {
    const message = createBaseAggregationResult_AggregateFieldsEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null) ? Value.fromPartial(object.value) : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
