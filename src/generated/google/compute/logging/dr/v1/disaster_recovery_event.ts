// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/compute/logging/dr/v1/disaster_recovery_event.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.compute.logging.dr.v1";

/**
 * An event signifying a Compute Engine resource is impacted by the disaster
 * recovery.
 */
export interface DisasterRecoveryEvent {
  /** The severity level. */
  severity?:
    | DisasterRecoveryEvent_Severity
    | undefined;
  /**
   * Details about the impact on the Compute Engine resource, e.g. "the resource
   * is deleted during the disaster recovery".
   */
  details?: string | undefined;
}

/** The severity of the disaster recovery event. */
export enum DisasterRecoveryEvent_Severity {
  /** SEVERITY_UNSPECIFIED - Unspecified. */
  SEVERITY_UNSPECIFIED = 0,
  /** ACTION_REQUIRED - The Compute Engine resource is broken. A person must take an action. */
  ACTION_REQUIRED = 1,
  /**
   * ACTION_SUGGESTED - The Compute Engine resource is functioning. A change was applied to the
   * resource during disaster recovery. Please take action to review
   * the change to avoid unexpected problems.
   */
  ACTION_SUGGESTED = 2,
  /**
   * NOTICE - Normal maintenance opeartions during disaster recovery, such as start up,
   * shut down.
   */
  NOTICE = 3,
  UNRECOGNIZED = -1,
}

export function disasterRecoveryEvent_SeverityFromJSON(object: any): DisasterRecoveryEvent_Severity {
  switch (object) {
    case 0:
    case "SEVERITY_UNSPECIFIED":
      return DisasterRecoveryEvent_Severity.SEVERITY_UNSPECIFIED;
    case 1:
    case "ACTION_REQUIRED":
      return DisasterRecoveryEvent_Severity.ACTION_REQUIRED;
    case 2:
    case "ACTION_SUGGESTED":
      return DisasterRecoveryEvent_Severity.ACTION_SUGGESTED;
    case 3:
    case "NOTICE":
      return DisasterRecoveryEvent_Severity.NOTICE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return DisasterRecoveryEvent_Severity.UNRECOGNIZED;
  }
}

export function disasterRecoveryEvent_SeverityToJSON(object: DisasterRecoveryEvent_Severity): string {
  switch (object) {
    case DisasterRecoveryEvent_Severity.SEVERITY_UNSPECIFIED:
      return "SEVERITY_UNSPECIFIED";
    case DisasterRecoveryEvent_Severity.ACTION_REQUIRED:
      return "ACTION_REQUIRED";
    case DisasterRecoveryEvent_Severity.ACTION_SUGGESTED:
      return "ACTION_SUGGESTED";
    case DisasterRecoveryEvent_Severity.NOTICE:
      return "NOTICE";
    case DisasterRecoveryEvent_Severity.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseDisasterRecoveryEvent(): DisasterRecoveryEvent {
  return { severity: undefined, details: undefined };
}

export const DisasterRecoveryEvent: MessageFns<DisasterRecoveryEvent> = {
  encode(message: DisasterRecoveryEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.severity !== undefined) {
      writer.uint32(8).int32(message.severity);
    }
    if (message.details !== undefined) {
      writer.uint32(18).string(message.details);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DisasterRecoveryEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDisasterRecoveryEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.severity = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.details = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DisasterRecoveryEvent {
    return {
      severity: isSet(object.severity) ? disasterRecoveryEvent_SeverityFromJSON(object.severity) : undefined,
      details: isSet(object.details) ? globalThis.String(object.details) : undefined,
    };
  },

  toJSON(message: DisasterRecoveryEvent): unknown {
    const obj: any = {};
    if (message.severity !== undefined) {
      obj.severity = disasterRecoveryEvent_SeverityToJSON(message.severity);
    }
    if (message.details !== undefined) {
      obj.details = message.details;
    }
    return obj;
  },

  create(base?: DeepPartial<DisasterRecoveryEvent>): DisasterRecoveryEvent {
    return DisasterRecoveryEvent.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DisasterRecoveryEvent>): DisasterRecoveryEvent {
    const message = createBaseDisasterRecoveryEvent();
    message.severity = object.severity ?? undefined;
    message.details = object.details ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
