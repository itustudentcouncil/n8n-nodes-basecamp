// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/datastore/admin/v1/index.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.datastore.admin.v1";

/** Datastore composite index definition. */
export interface Index {
  /** Output only. Project ID. */
  projectId: string;
  /** Output only. The resource ID of the index. */
  indexId: string;
  /** Required. The entity kind to which this index applies. */
  kind: string;
  /**
   * Required. The index's ancestor mode.  Must not be
   * ANCESTOR_MODE_UNSPECIFIED.
   */
  ancestor: Index_AncestorMode;
  /**
   * Required. An ordered sequence of property names and their index attributes.
   *
   * Requires:
   *
   * * A maximum of 100 properties.
   */
  properties: Index_IndexedProperty[];
  /** Output only. The state of the index. */
  state: Index_State;
}

/**
 * For an ordered index, specifies whether each of the entity's ancestors
 * will be included.
 */
export enum Index_AncestorMode {
  /** ANCESTOR_MODE_UNSPECIFIED - The ancestor mode is unspecified. */
  ANCESTOR_MODE_UNSPECIFIED = 0,
  /** NONE - Do not include the entity's ancestors in the index. */
  NONE = 1,
  /** ALL_ANCESTORS - Include all the entity's ancestors in the index. */
  ALL_ANCESTORS = 2,
  UNRECOGNIZED = -1,
}

export function index_AncestorModeFromJSON(object: any): Index_AncestorMode {
  switch (object) {
    case 0:
    case "ANCESTOR_MODE_UNSPECIFIED":
      return Index_AncestorMode.ANCESTOR_MODE_UNSPECIFIED;
    case 1:
    case "NONE":
      return Index_AncestorMode.NONE;
    case 2:
    case "ALL_ANCESTORS":
      return Index_AncestorMode.ALL_ANCESTORS;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Index_AncestorMode.UNRECOGNIZED;
  }
}

export function index_AncestorModeToJSON(object: Index_AncestorMode): string {
  switch (object) {
    case Index_AncestorMode.ANCESTOR_MODE_UNSPECIFIED:
      return "ANCESTOR_MODE_UNSPECIFIED";
    case Index_AncestorMode.NONE:
      return "NONE";
    case Index_AncestorMode.ALL_ANCESTORS:
      return "ALL_ANCESTORS";
    case Index_AncestorMode.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** The direction determines how a property is indexed. */
export enum Index_Direction {
  /** DIRECTION_UNSPECIFIED - The direction is unspecified. */
  DIRECTION_UNSPECIFIED = 0,
  /**
   * ASCENDING - The property's values are indexed so as to support sequencing in
   * ascending order and also query by <, >, <=, >=, and =.
   */
  ASCENDING = 1,
  /**
   * DESCENDING - The property's values are indexed so as to support sequencing in
   * descending order and also query by <, >, <=, >=, and =.
   */
  DESCENDING = 2,
  UNRECOGNIZED = -1,
}

export function index_DirectionFromJSON(object: any): Index_Direction {
  switch (object) {
    case 0:
    case "DIRECTION_UNSPECIFIED":
      return Index_Direction.DIRECTION_UNSPECIFIED;
    case 1:
    case "ASCENDING":
      return Index_Direction.ASCENDING;
    case 2:
    case "DESCENDING":
      return Index_Direction.DESCENDING;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Index_Direction.UNRECOGNIZED;
  }
}

export function index_DirectionToJSON(object: Index_Direction): string {
  switch (object) {
    case Index_Direction.DIRECTION_UNSPECIFIED:
      return "DIRECTION_UNSPECIFIED";
    case Index_Direction.ASCENDING:
      return "ASCENDING";
    case Index_Direction.DESCENDING:
      return "DESCENDING";
    case Index_Direction.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** The possible set of states of an index. */
export enum Index_State {
  /** STATE_UNSPECIFIED - The state is unspecified. */
  STATE_UNSPECIFIED = 0,
  /**
   * CREATING - The index is being created, and cannot be used by queries.
   * There is an active long-running operation for the index.
   * The index is updated when writing an entity.
   * Some index data may exist.
   */
  CREATING = 1,
  /**
   * READY - The index is ready to be used.
   * The index is updated when writing an entity.
   * The index is fully populated from all stored entities it applies to.
   */
  READY = 2,
  /**
   * DELETING - The index is being deleted, and cannot be used by queries.
   * There is an active long-running operation for the index.
   * The index is not updated when writing an entity.
   * Some index data may exist.
   */
  DELETING = 3,
  /**
   * ERROR - The index was being created or deleted, but something went wrong.
   * The index cannot by used by queries.
   * There is no active long-running operation for the index,
   * and the most recently finished long-running operation failed.
   * The index is not updated when writing an entity.
   * Some index data may exist.
   */
  ERROR = 4,
  UNRECOGNIZED = -1,
}

export function index_StateFromJSON(object: any): Index_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return Index_State.STATE_UNSPECIFIED;
    case 1:
    case "CREATING":
      return Index_State.CREATING;
    case 2:
    case "READY":
      return Index_State.READY;
    case 3:
    case "DELETING":
      return Index_State.DELETING;
    case 4:
    case "ERROR":
      return Index_State.ERROR;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Index_State.UNRECOGNIZED;
  }
}

export function index_StateToJSON(object: Index_State): string {
  switch (object) {
    case Index_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case Index_State.CREATING:
      return "CREATING";
    case Index_State.READY:
      return "READY";
    case Index_State.DELETING:
      return "DELETING";
    case Index_State.ERROR:
      return "ERROR";
    case Index_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** A property of an index. */
export interface Index_IndexedProperty {
  /** Required. The property name to index. */
  name: string;
  /**
   * Required. The indexed property's direction.  Must not be
   * DIRECTION_UNSPECIFIED.
   */
  direction: Index_Direction;
}

function createBaseIndex(): Index {
  return { projectId: "", indexId: "", kind: "", ancestor: 0, properties: [], state: 0 };
}

export const Index: MessageFns<Index> = {
  encode(message: Index, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.indexId !== "") {
      writer.uint32(26).string(message.indexId);
    }
    if (message.kind !== "") {
      writer.uint32(34).string(message.kind);
    }
    if (message.ancestor !== 0) {
      writer.uint32(40).int32(message.ancestor);
    }
    for (const v of message.properties) {
      Index_IndexedProperty.encode(v!, writer.uint32(50).fork()).join();
    }
    if (message.state !== 0) {
      writer.uint32(56).int32(message.state);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Index {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIndex();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.indexId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.kind = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.ancestor = reader.int32() as any;
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.properties.push(Index_IndexedProperty.decode(reader, reader.uint32()));
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Index {
    return {
      projectId: isSet(object.projectId) ? globalThis.String(object.projectId) : "",
      indexId: isSet(object.indexId) ? globalThis.String(object.indexId) : "",
      kind: isSet(object.kind) ? globalThis.String(object.kind) : "",
      ancestor: isSet(object.ancestor) ? index_AncestorModeFromJSON(object.ancestor) : 0,
      properties: globalThis.Array.isArray(object?.properties)
        ? object.properties.map((e: any) => Index_IndexedProperty.fromJSON(e))
        : [],
      state: isSet(object.state) ? index_StateFromJSON(object.state) : 0,
    };
  },

  toJSON(message: Index): unknown {
    const obj: any = {};
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.indexId !== "") {
      obj.indexId = message.indexId;
    }
    if (message.kind !== "") {
      obj.kind = message.kind;
    }
    if (message.ancestor !== 0) {
      obj.ancestor = index_AncestorModeToJSON(message.ancestor);
    }
    if (message.properties?.length) {
      obj.properties = message.properties.map((e) => Index_IndexedProperty.toJSON(e));
    }
    if (message.state !== 0) {
      obj.state = index_StateToJSON(message.state);
    }
    return obj;
  },

  create(base?: DeepPartial<Index>): Index {
    return Index.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Index>): Index {
    const message = createBaseIndex();
    message.projectId = object.projectId ?? "";
    message.indexId = object.indexId ?? "";
    message.kind = object.kind ?? "";
    message.ancestor = object.ancestor ?? 0;
    message.properties = object.properties?.map((e) => Index_IndexedProperty.fromPartial(e)) || [];
    message.state = object.state ?? 0;
    return message;
  },
};

function createBaseIndex_IndexedProperty(): Index_IndexedProperty {
  return { name: "", direction: 0 };
}

export const Index_IndexedProperty: MessageFns<Index_IndexedProperty> = {
  encode(message: Index_IndexedProperty, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.direction !== 0) {
      writer.uint32(16).int32(message.direction);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Index_IndexedProperty {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIndex_IndexedProperty();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.direction = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Index_IndexedProperty {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      direction: isSet(object.direction) ? index_DirectionFromJSON(object.direction) : 0,
    };
  },

  toJSON(message: Index_IndexedProperty): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.direction !== 0) {
      obj.direction = index_DirectionToJSON(message.direction);
    }
    return obj;
  },

  create(base?: DeepPartial<Index_IndexedProperty>): Index_IndexedProperty {
    return Index_IndexedProperty.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Index_IndexedProperty>): Index_IndexedProperty {
    const message = createBaseIndex_IndexedProperty();
    message.name = object.name ?? "";
    message.direction = object.direction ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
