// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/spanner/v1/query_plan.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Struct } from "../../protobuf/struct.js";

export const protobufPackage = "google.spanner.v1";

/** Node information for nodes appearing in a [QueryPlan.plan_nodes][google.spanner.v1.QueryPlan.plan_nodes]. */
export interface PlanNode {
  /** The `PlanNode`'s index in [node list][google.spanner.v1.QueryPlan.plan_nodes]. */
  index: number;
  /**
   * Used to determine the type of node. May be needed for visualizing
   * different kinds of nodes differently. For example, If the node is a
   * [SCALAR][google.spanner.v1.PlanNode.Kind.SCALAR] node, it will have a condensed representation
   * which can be used to directly embed a description of the node in its
   * parent.
   */
  kind: PlanNode_Kind;
  /** The display name for the node. */
  displayName: string;
  /** List of child node `index`es and their relationship to this parent. */
  childLinks: PlanNode_ChildLink[];
  /** Condensed representation for [SCALAR][google.spanner.v1.PlanNode.Kind.SCALAR] nodes. */
  shortRepresentation:
    | PlanNode_ShortRepresentation
    | undefined;
  /**
   * Attributes relevant to the node contained in a group of key-value pairs.
   * For example, a Parameter Reference node could have the following
   * information in its metadata:
   *
   *     {
   *       "parameter_reference": "param1",
   *       "parameter_type": "array"
   *     }
   */
  metadata:
    | { [key: string]: any }
    | undefined;
  /**
   * The execution statistics associated with the node, contained in a group of
   * key-value pairs. Only present if the plan was returned as a result of a
   * profile query. For example, number of executions, number of rows/time per
   * execution etc.
   */
  executionStats: { [key: string]: any } | undefined;
}

/**
 * The kind of [PlanNode][google.spanner.v1.PlanNode]. Distinguishes between the two different kinds of
 * nodes that can appear in a query plan.
 */
export enum PlanNode_Kind {
  /** KIND_UNSPECIFIED - Not specified. */
  KIND_UNSPECIFIED = 0,
  /**
   * RELATIONAL - Denotes a Relational operator node in the expression tree. Relational
   * operators represent iterative processing of rows during query execution.
   * For example, a `TableScan` operation that reads rows from a table.
   */
  RELATIONAL = 1,
  /**
   * SCALAR - Denotes a Scalar node in the expression tree. Scalar nodes represent
   * non-iterable entities in the query plan. For example, constants or
   * arithmetic operators appearing inside predicate expressions or references
   * to column names.
   */
  SCALAR = 2,
  UNRECOGNIZED = -1,
}

export function planNode_KindFromJSON(object: any): PlanNode_Kind {
  switch (object) {
    case 0:
    case "KIND_UNSPECIFIED":
      return PlanNode_Kind.KIND_UNSPECIFIED;
    case 1:
    case "RELATIONAL":
      return PlanNode_Kind.RELATIONAL;
    case 2:
    case "SCALAR":
      return PlanNode_Kind.SCALAR;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PlanNode_Kind.UNRECOGNIZED;
  }
}

export function planNode_KindToJSON(object: PlanNode_Kind): string {
  switch (object) {
    case PlanNode_Kind.KIND_UNSPECIFIED:
      return "KIND_UNSPECIFIED";
    case PlanNode_Kind.RELATIONAL:
      return "RELATIONAL";
    case PlanNode_Kind.SCALAR:
      return "SCALAR";
    case PlanNode_Kind.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * Metadata associated with a parent-child relationship appearing in a
 * [PlanNode][google.spanner.v1.PlanNode].
 */
export interface PlanNode_ChildLink {
  /** The node to which the link points. */
  childIndex: number;
  /**
   * The type of the link. For example, in Hash Joins this could be used to
   * distinguish between the build child and the probe child, or in the case
   * of the child being an output variable, to represent the tag associated
   * with the output variable.
   */
  type: string;
  /**
   * Only present if the child node is [SCALAR][google.spanner.v1.PlanNode.Kind.SCALAR] and corresponds
   * to an output variable of the parent node. The field carries the name of
   * the output variable.
   * For example, a `TableScan` operator that reads rows from a table will
   * have child links to the `SCALAR` nodes representing the output variables
   * created for each column that is read by the operator. The corresponding
   * `variable` fields will be set to the variable names assigned to the
   * columns.
   */
  variable: string;
}

/**
 * Condensed representation of a node and its subtree. Only present for
 * `SCALAR` [PlanNode(s)][google.spanner.v1.PlanNode].
 */
export interface PlanNode_ShortRepresentation {
  /** A string representation of the expression subtree rooted at this node. */
  description: string;
  /**
   * A mapping of (subquery variable name) -> (subquery node id) for cases
   * where the `description` string of this node references a `SCALAR`
   * subquery contained in the expression subtree rooted at this node. The
   * referenced `SCALAR` subquery may not necessarily be a direct child of
   * this node.
   */
  subqueries: { [key: string]: number };
}

export interface PlanNode_ShortRepresentation_SubqueriesEntry {
  key: string;
  value: number;
}

/** Contains an ordered list of nodes appearing in the query plan. */
export interface QueryPlan {
  /**
   * The nodes in the query plan. Plan nodes are returned in pre-order starting
   * with the plan root. Each [PlanNode][google.spanner.v1.PlanNode]'s `id` corresponds to its index in
   * `plan_nodes`.
   */
  planNodes: PlanNode[];
}

function createBasePlanNode(): PlanNode {
  return {
    index: 0,
    kind: 0,
    displayName: "",
    childLinks: [],
    shortRepresentation: undefined,
    metadata: undefined,
    executionStats: undefined,
  };
}

export const PlanNode: MessageFns<PlanNode> = {
  encode(message: PlanNode, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.index !== 0) {
      writer.uint32(8).int32(message.index);
    }
    if (message.kind !== 0) {
      writer.uint32(16).int32(message.kind);
    }
    if (message.displayName !== "") {
      writer.uint32(26).string(message.displayName);
    }
    for (const v of message.childLinks) {
      PlanNode_ChildLink.encode(v!, writer.uint32(34).fork()).join();
    }
    if (message.shortRepresentation !== undefined) {
      PlanNode_ShortRepresentation.encode(message.shortRepresentation, writer.uint32(42).fork()).join();
    }
    if (message.metadata !== undefined) {
      Struct.encode(Struct.wrap(message.metadata), writer.uint32(50).fork()).join();
    }
    if (message.executionStats !== undefined) {
      Struct.encode(Struct.wrap(message.executionStats), writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PlanNode {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlanNode();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.index = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.kind = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.childLinks.push(PlanNode_ChildLink.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.shortRepresentation = PlanNode_ShortRepresentation.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.metadata = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.executionStats = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlanNode {
    return {
      index: isSet(object.index) ? globalThis.Number(object.index) : 0,
      kind: isSet(object.kind) ? planNode_KindFromJSON(object.kind) : 0,
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      childLinks: globalThis.Array.isArray(object?.childLinks)
        ? object.childLinks.map((e: any) => PlanNode_ChildLink.fromJSON(e))
        : [],
      shortRepresentation: isSet(object.shortRepresentation)
        ? PlanNode_ShortRepresentation.fromJSON(object.shortRepresentation)
        : undefined,
      metadata: isObject(object.metadata) ? object.metadata : undefined,
      executionStats: isObject(object.executionStats) ? object.executionStats : undefined,
    };
  },

  toJSON(message: PlanNode): unknown {
    const obj: any = {};
    if (message.index !== 0) {
      obj.index = Math.round(message.index);
    }
    if (message.kind !== 0) {
      obj.kind = planNode_KindToJSON(message.kind);
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.childLinks?.length) {
      obj.childLinks = message.childLinks.map((e) => PlanNode_ChildLink.toJSON(e));
    }
    if (message.shortRepresentation !== undefined) {
      obj.shortRepresentation = PlanNode_ShortRepresentation.toJSON(message.shortRepresentation);
    }
    if (message.metadata !== undefined) {
      obj.metadata = message.metadata;
    }
    if (message.executionStats !== undefined) {
      obj.executionStats = message.executionStats;
    }
    return obj;
  },

  create(base?: DeepPartial<PlanNode>): PlanNode {
    return PlanNode.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PlanNode>): PlanNode {
    const message = createBasePlanNode();
    message.index = object.index ?? 0;
    message.kind = object.kind ?? 0;
    message.displayName = object.displayName ?? "";
    message.childLinks = object.childLinks?.map((e) => PlanNode_ChildLink.fromPartial(e)) || [];
    message.shortRepresentation = (object.shortRepresentation !== undefined && object.shortRepresentation !== null)
      ? PlanNode_ShortRepresentation.fromPartial(object.shortRepresentation)
      : undefined;
    message.metadata = object.metadata ?? undefined;
    message.executionStats = object.executionStats ?? undefined;
    return message;
  },
};

function createBasePlanNode_ChildLink(): PlanNode_ChildLink {
  return { childIndex: 0, type: "", variable: "" };
}

export const PlanNode_ChildLink: MessageFns<PlanNode_ChildLink> = {
  encode(message: PlanNode_ChildLink, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.childIndex !== 0) {
      writer.uint32(8).int32(message.childIndex);
    }
    if (message.type !== "") {
      writer.uint32(18).string(message.type);
    }
    if (message.variable !== "") {
      writer.uint32(26).string(message.variable);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PlanNode_ChildLink {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlanNode_ChildLink();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.childIndex = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.type = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.variable = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlanNode_ChildLink {
    return {
      childIndex: isSet(object.childIndex) ? globalThis.Number(object.childIndex) : 0,
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      variable: isSet(object.variable) ? globalThis.String(object.variable) : "",
    };
  },

  toJSON(message: PlanNode_ChildLink): unknown {
    const obj: any = {};
    if (message.childIndex !== 0) {
      obj.childIndex = Math.round(message.childIndex);
    }
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.variable !== "") {
      obj.variable = message.variable;
    }
    return obj;
  },

  create(base?: DeepPartial<PlanNode_ChildLink>): PlanNode_ChildLink {
    return PlanNode_ChildLink.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PlanNode_ChildLink>): PlanNode_ChildLink {
    const message = createBasePlanNode_ChildLink();
    message.childIndex = object.childIndex ?? 0;
    message.type = object.type ?? "";
    message.variable = object.variable ?? "";
    return message;
  },
};

function createBasePlanNode_ShortRepresentation(): PlanNode_ShortRepresentation {
  return { description: "", subqueries: {} };
}

export const PlanNode_ShortRepresentation: MessageFns<PlanNode_ShortRepresentation> = {
  encode(message: PlanNode_ShortRepresentation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.description !== "") {
      writer.uint32(10).string(message.description);
    }
    Object.entries(message.subqueries).forEach(([key, value]) => {
      PlanNode_ShortRepresentation_SubqueriesEntry.encode({ key: key as any, value }, writer.uint32(18).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PlanNode_ShortRepresentation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlanNode_ShortRepresentation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.description = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          const entry2 = PlanNode_ShortRepresentation_SubqueriesEntry.decode(reader, reader.uint32());
          if (entry2.value !== undefined) {
            message.subqueries[entry2.key] = entry2.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlanNode_ShortRepresentation {
    return {
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      subqueries: isObject(object.subqueries)
        ? Object.entries(object.subqueries).reduce<{ [key: string]: number }>((acc, [key, value]) => {
          acc[key] = Number(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: PlanNode_ShortRepresentation): unknown {
    const obj: any = {};
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.subqueries) {
      const entries = Object.entries(message.subqueries);
      if (entries.length > 0) {
        obj.subqueries = {};
        entries.forEach(([k, v]) => {
          obj.subqueries[k] = Math.round(v);
        });
      }
    }
    return obj;
  },

  create(base?: DeepPartial<PlanNode_ShortRepresentation>): PlanNode_ShortRepresentation {
    return PlanNode_ShortRepresentation.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PlanNode_ShortRepresentation>): PlanNode_ShortRepresentation {
    const message = createBasePlanNode_ShortRepresentation();
    message.description = object.description ?? "";
    message.subqueries = Object.entries(object.subqueries ?? {}).reduce<{ [key: string]: number }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.Number(value);
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBasePlanNode_ShortRepresentation_SubqueriesEntry(): PlanNode_ShortRepresentation_SubqueriesEntry {
  return { key: "", value: 0 };
}

export const PlanNode_ShortRepresentation_SubqueriesEntry: MessageFns<PlanNode_ShortRepresentation_SubqueriesEntry> = {
  encode(
    message: PlanNode_ShortRepresentation_SubqueriesEntry,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== 0) {
      writer.uint32(16).int32(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PlanNode_ShortRepresentation_SubqueriesEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlanNode_ShortRepresentation_SubqueriesEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.value = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlanNode_ShortRepresentation_SubqueriesEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.Number(object.value) : 0,
    };
  },

  toJSON(message: PlanNode_ShortRepresentation_SubqueriesEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== 0) {
      obj.value = Math.round(message.value);
    }
    return obj;
  },

  create(
    base?: DeepPartial<PlanNode_ShortRepresentation_SubqueriesEntry>,
  ): PlanNode_ShortRepresentation_SubqueriesEntry {
    return PlanNode_ShortRepresentation_SubqueriesEntry.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<PlanNode_ShortRepresentation_SubqueriesEntry>,
  ): PlanNode_ShortRepresentation_SubqueriesEntry {
    const message = createBasePlanNode_ShortRepresentation_SubqueriesEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? 0;
    return message;
  },
};

function createBaseQueryPlan(): QueryPlan {
  return { planNodes: [] };
}

export const QueryPlan: MessageFns<QueryPlan> = {
  encode(message: QueryPlan, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.planNodes) {
      PlanNode.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryPlan {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryPlan();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.planNodes.push(PlanNode.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryPlan {
    return {
      planNodes: globalThis.Array.isArray(object?.planNodes)
        ? object.planNodes.map((e: any) => PlanNode.fromJSON(e))
        : [],
    };
  },

  toJSON(message: QueryPlan): unknown {
    const obj: any = {};
    if (message.planNodes?.length) {
      obj.planNodes = message.planNodes.map((e) => PlanNode.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<QueryPlan>): QueryPlan {
    return QueryPlan.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryPlan>): QueryPlan {
    const message = createBaseQueryPlan();
    message.planNodes = object.planNodes?.map((e) => PlanNode.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
