// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/support/v2/case_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { Case, CaseClassification } from "./case.js";
import { Escalation } from "./escalation.js";

export const protobufPackage = "google.cloud.support.v2";

/** The request message for the GetCase endpoint. */
export interface GetCaseRequest {
  /** Required. The fully qualified name of a case to be retrieved. */
  name: string;
}

/** The request message for the CreateCase endpoint. */
export interface CreateCaseRequest {
  /**
   * Required. The name of the Google Cloud Resource under which the case should
   * be created.
   */
  parent: string;
  /** Required. The case to be created. */
  case: Case | undefined;
}

/** The request message for the ListCases endpoint. */
export interface ListCasesRequest {
  /** Required. The fully qualified name of parent resource to list cases under. */
  parent: string;
  /**
   * An expression written in filter language. If non-empty, the query returns
   * the cases that match the filter. Else, the query doesn't filter the cases.
   *
   * Filter expressions use the following fields with the operators equals (`=`)
   * and `AND`:
   *
   * - `state`: The accepted values are `OPEN` or `CLOSED`.
   * - `priority`: The accepted values are `P0`, `P1`, `P2`, `P3`, or `P4`. You
   * can specify multiple values for priority using the `OR` operator. For
   * example, `priority=P1 OR priority=P2`.
   * - `creator.email`: The email address of the case creator.
   *
   * Examples:
   *
   * - `state=CLOSED`
   * - `state=OPEN AND creator.email="tester@example.com"`
   * - `state=OPEN AND (priority=P0 OR priority=P1)`
   */
  filter: string;
  /** The maximum number of cases fetched with each request. Defaults to 10. */
  pageSize: number;
  /**
   * A token identifying the page of results to return. If unspecified, the
   * first page is retrieved.
   */
  pageToken: string;
}

/** The response message for the ListCases endpoint. */
export interface ListCasesResponse {
  /**
   * The list of cases associated with the Google Cloud Resource, after any
   * filters have been applied.
   */
  cases: Case[];
  /**
   * A token to retrieve the next page of results. This should be set in the
   * `page_token` field of the subsequent `ListCasesRequest` message that is
   * issued. If unspecified, there are no more results to retrieve.
   */
  nextPageToken: string;
}

/** The request message for the SearchCases endpoint. */
export interface SearchCasesRequest {
  /** The fully qualified name of parent resource to search cases under. */
  parent: string;
  /**
   * An expression written in filter language.
   *
   * A query uses the following fields with the operators equals (`=`) and
   * `AND`:
   *
   * - `organization`: An organization name in the form
   * `organizations/<organization_id>`.
   * - `project`: A project name in the form `projects/<project_id>`.
   * - `state`: The accepted values are `OPEN` or `CLOSED`.
   * - `priority`: The accepted values are `P0`, `P1`, `P2`, `P3`, or `P4`. You
   * can specify multiple values for priority using the `OR` operator. For
   * example, `priority=P1 OR priority=P2`.
   * - `creator.email`: The email address of the case creator.
   * - `billingAccount`: A billing account in the form
   * `billingAccounts/<billing_account_id>`
   *
   * You must specify either `organization` or `project`.
   *
   * To search across `displayName`, `description`, and comments, use a global
   * restriction with no keyword or operator. For example, `"my search"`.
   *
   * To search only cases updated after a certain date, use `update_time`
   * restricted with that particular date, time, and timezone in ISO datetime
   * format. For example, `update_time>"2020-01-01T00:00:00-05:00"`.
   * `update_time` only supports the greater than operator (`>`).
   *
   * Examples:
   *
   * - `organization="organizations/123456789"`
   * - `project="projects/my-project-id"`
   * - `project="projects/123456789"`
   * - `billing_account="billingAccounts/123456-A0B0C0-CUZ789"`
   * - `organization="organizations/123456789" AND state=CLOSED`
   * - `project="projects/my-project-id" AND creator.email="tester@example.com"`
   * - `project="projects/my-project-id" AND (priority=P0 OR priority=P1)`
   */
  query: string;
  /**
   * The maximum number of cases fetched with each request. The default page
   * size is 10.
   */
  pageSize: number;
  /**
   * A token identifying the page of results to return. If unspecified, the
   * first page is retrieved.
   */
  pageToken: string;
}

/** The response message for the SearchCases endpoint. */
export interface SearchCasesResponse {
  /**
   * The list of cases associated with the Google Cloud Resource, after any
   * filters have been applied.
   */
  cases: Case[];
  /**
   * A token to retrieve the next page of results. This should be set in the
   * `page_token` field of subsequent `SearchCaseRequest` message that is
   * issued. If unspecified, there are no more results to retrieve.
   */
  nextPageToken: string;
}

/** The request message for the EscalateCase endpoint. */
export interface EscalateCaseRequest {
  /** Required. The fully qualified name of the Case resource to be escalated. */
  name: string;
  /** The escalation object to be sent with the escalation request. */
  escalation: Escalation | undefined;
}

/** The request message for the UpdateCase endpoint */
export interface UpdateCaseRequest {
  /** Required. The case object to update. */
  case:
    | Case
    | undefined;
  /**
   * A list of attributes of the case object that should be updated
   * as part of this request. Supported values are `priority`, `display_name`,
   * and `subscriber_email_addresses`. If no fields are specified, all supported
   * fields are updated.
   *
   * WARNING: If you do not provide a field mask, then you might accidentally
   * clear some fields. For example, if you leave the field mask empty and do
   * not provide a value for `subscriber_email_addresses`, then
   * `subscriber_email_addresses` is updated to empty.
   */
  updateMask: string[] | undefined;
}

/** The request message for the CloseCase endpoint. */
export interface CloseCaseRequest {
  /** Required. The fully qualified name of the case resource to be closed. */
  name: string;
}

/** The request message for SearchCaseClassifications endpoint. */
export interface SearchCaseClassificationsRequest {
  /**
   * An expression written in the Google Cloud filter language. If non-empty,
   * then only cases whose fields match the filter are returned. If empty, then
   * no messages are filtered out.
   */
  query: string;
  /** The maximum number of cases fetched with each request. */
  pageSize: number;
  /**
   * A token identifying the page of results to return. If unspecified, the
   * first page is retrieved.
   */
  pageToken: string;
}

/** The response message for SearchCaseClassifications endpoint. */
export interface SearchCaseClassificationsResponse {
  /** The classifications retrieved. */
  caseClassifications: CaseClassification[];
  /**
   * A token to retrieve the next page of results. This should be set in the
   * `page_token` field of subsequent `SearchCaseClassificationsRequest` message
   * that is issued. If unspecified, there are no more results to retrieve.
   */
  nextPageToken: string;
}

function createBaseGetCaseRequest(): GetCaseRequest {
  return { name: "" };
}

export const GetCaseRequest: MessageFns<GetCaseRequest> = {
  encode(message: GetCaseRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCaseRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCaseRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCaseRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetCaseRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetCaseRequest>): GetCaseRequest {
    return GetCaseRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetCaseRequest>): GetCaseRequest {
    const message = createBaseGetCaseRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateCaseRequest(): CreateCaseRequest {
  return { parent: "", case: undefined };
}

export const CreateCaseRequest: MessageFns<CreateCaseRequest> = {
  encode(message: CreateCaseRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.case !== undefined) {
      Case.encode(message.case, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateCaseRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateCaseRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.case = Case.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateCaseRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      case: isSet(object.case) ? Case.fromJSON(object.case) : undefined,
    };
  },

  toJSON(message: CreateCaseRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.case !== undefined) {
      obj.case = Case.toJSON(message.case);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateCaseRequest>): CreateCaseRequest {
    return CreateCaseRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateCaseRequest>): CreateCaseRequest {
    const message = createBaseCreateCaseRequest();
    message.parent = object.parent ?? "";
    message.case = (object.case !== undefined && object.case !== null) ? Case.fromPartial(object.case) : undefined;
    return message;
  },
};

function createBaseListCasesRequest(): ListCasesRequest {
  return { parent: "", filter: "", pageSize: 0, pageToken: "" };
}

export const ListCasesRequest: MessageFns<ListCasesRequest> = {
  encode(message: ListCasesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.filter !== "") {
      writer.uint32(18).string(message.filter);
    }
    if (message.pageSize !== 0) {
      writer.uint32(32).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(42).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListCasesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListCasesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListCasesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListCasesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListCasesRequest>): ListCasesRequest {
    return ListCasesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListCasesRequest>): ListCasesRequest {
    const message = createBaseListCasesRequest();
    message.parent = object.parent ?? "";
    message.filter = object.filter ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListCasesResponse(): ListCasesResponse {
  return { cases: [], nextPageToken: "" };
}

export const ListCasesResponse: MessageFns<ListCasesResponse> = {
  encode(message: ListCasesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.cases) {
      Case.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListCasesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListCasesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.cases.push(Case.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListCasesResponse {
    return {
      cases: globalThis.Array.isArray(object?.cases) ? object.cases.map((e: any) => Case.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListCasesResponse): unknown {
    const obj: any = {};
    if (message.cases?.length) {
      obj.cases = message.cases.map((e) => Case.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListCasesResponse>): ListCasesResponse {
    return ListCasesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListCasesResponse>): ListCasesResponse {
    const message = createBaseListCasesResponse();
    message.cases = object.cases?.map((e) => Case.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseSearchCasesRequest(): SearchCasesRequest {
  return { parent: "", query: "", pageSize: 0, pageToken: "" };
}

export const SearchCasesRequest: MessageFns<SearchCasesRequest> = {
  encode(message: SearchCasesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(34).string(message.parent);
    }
    if (message.query !== "") {
      writer.uint32(10).string(message.query);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchCasesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchCasesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 4:
          if (tag !== 34) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 1:
          if (tag !== 10) {
            break;
          }

          message.query = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchCasesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      query: isSet(object.query) ? globalThis.String(object.query) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: SearchCasesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.query !== "") {
      obj.query = message.query;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<SearchCasesRequest>): SearchCasesRequest {
    return SearchCasesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SearchCasesRequest>): SearchCasesRequest {
    const message = createBaseSearchCasesRequest();
    message.parent = object.parent ?? "";
    message.query = object.query ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseSearchCasesResponse(): SearchCasesResponse {
  return { cases: [], nextPageToken: "" };
}

export const SearchCasesResponse: MessageFns<SearchCasesResponse> = {
  encode(message: SearchCasesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.cases) {
      Case.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchCasesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchCasesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.cases.push(Case.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchCasesResponse {
    return {
      cases: globalThis.Array.isArray(object?.cases) ? object.cases.map((e: any) => Case.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: SearchCasesResponse): unknown {
    const obj: any = {};
    if (message.cases?.length) {
      obj.cases = message.cases.map((e) => Case.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<SearchCasesResponse>): SearchCasesResponse {
    return SearchCasesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SearchCasesResponse>): SearchCasesResponse {
    const message = createBaseSearchCasesResponse();
    message.cases = object.cases?.map((e) => Case.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseEscalateCaseRequest(): EscalateCaseRequest {
  return { name: "", escalation: undefined };
}

export const EscalateCaseRequest: MessageFns<EscalateCaseRequest> = {
  encode(message: EscalateCaseRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.escalation !== undefined) {
      Escalation.encode(message.escalation, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EscalateCaseRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEscalateCaseRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.escalation = Escalation.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EscalateCaseRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      escalation: isSet(object.escalation) ? Escalation.fromJSON(object.escalation) : undefined,
    };
  },

  toJSON(message: EscalateCaseRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.escalation !== undefined) {
      obj.escalation = Escalation.toJSON(message.escalation);
    }
    return obj;
  },

  create(base?: DeepPartial<EscalateCaseRequest>): EscalateCaseRequest {
    return EscalateCaseRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EscalateCaseRequest>): EscalateCaseRequest {
    const message = createBaseEscalateCaseRequest();
    message.name = object.name ?? "";
    message.escalation = (object.escalation !== undefined && object.escalation !== null)
      ? Escalation.fromPartial(object.escalation)
      : undefined;
    return message;
  },
};

function createBaseUpdateCaseRequest(): UpdateCaseRequest {
  return { case: undefined, updateMask: undefined };
}

export const UpdateCaseRequest: MessageFns<UpdateCaseRequest> = {
  encode(message: UpdateCaseRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.case !== undefined) {
      Case.encode(message.case, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateCaseRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateCaseRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.case = Case.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateCaseRequest {
    return {
      case: isSet(object.case) ? Case.fromJSON(object.case) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateCaseRequest): unknown {
    const obj: any = {};
    if (message.case !== undefined) {
      obj.case = Case.toJSON(message.case);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateCaseRequest>): UpdateCaseRequest {
    return UpdateCaseRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateCaseRequest>): UpdateCaseRequest {
    const message = createBaseUpdateCaseRequest();
    message.case = (object.case !== undefined && object.case !== null) ? Case.fromPartial(object.case) : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseCloseCaseRequest(): CloseCaseRequest {
  return { name: "" };
}

export const CloseCaseRequest: MessageFns<CloseCaseRequest> = {
  encode(message: CloseCaseRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CloseCaseRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCloseCaseRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CloseCaseRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: CloseCaseRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<CloseCaseRequest>): CloseCaseRequest {
    return CloseCaseRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CloseCaseRequest>): CloseCaseRequest {
    const message = createBaseCloseCaseRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseSearchCaseClassificationsRequest(): SearchCaseClassificationsRequest {
  return { query: "", pageSize: 0, pageToken: "" };
}

export const SearchCaseClassificationsRequest: MessageFns<SearchCaseClassificationsRequest> = {
  encode(message: SearchCaseClassificationsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.query !== "") {
      writer.uint32(10).string(message.query);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchCaseClassificationsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchCaseClassificationsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.query = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchCaseClassificationsRequest {
    return {
      query: isSet(object.query) ? globalThis.String(object.query) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: SearchCaseClassificationsRequest): unknown {
    const obj: any = {};
    if (message.query !== "") {
      obj.query = message.query;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<SearchCaseClassificationsRequest>): SearchCaseClassificationsRequest {
    return SearchCaseClassificationsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SearchCaseClassificationsRequest>): SearchCaseClassificationsRequest {
    const message = createBaseSearchCaseClassificationsRequest();
    message.query = object.query ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseSearchCaseClassificationsResponse(): SearchCaseClassificationsResponse {
  return { caseClassifications: [], nextPageToken: "" };
}

export const SearchCaseClassificationsResponse: MessageFns<SearchCaseClassificationsResponse> = {
  encode(message: SearchCaseClassificationsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.caseClassifications) {
      CaseClassification.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchCaseClassificationsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchCaseClassificationsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.caseClassifications.push(CaseClassification.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchCaseClassificationsResponse {
    return {
      caseClassifications: globalThis.Array.isArray(object?.caseClassifications)
        ? object.caseClassifications.map((e: any) => CaseClassification.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: SearchCaseClassificationsResponse): unknown {
    const obj: any = {};
    if (message.caseClassifications?.length) {
      obj.caseClassifications = message.caseClassifications.map((e) => CaseClassification.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<SearchCaseClassificationsResponse>): SearchCaseClassificationsResponse {
    return SearchCaseClassificationsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SearchCaseClassificationsResponse>): SearchCaseClassificationsResponse {
    const message = createBaseSearchCaseClassificationsResponse();
    message.caseClassifications = object.caseClassifications?.map((e) => CaseClassification.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

/** A service to manage Google Cloud support cases. */
export type CaseServiceDefinition = typeof CaseServiceDefinition;
export const CaseServiceDefinition = {
  name: "CaseService",
  fullName: "google.cloud.support.v2.CaseService",
  methods: {
    /** Retrieve the specified case. */
    getCase: {
      name: "GetCase",
      requestType: GetCaseRequest,
      requestStream: false,
      responseType: Case,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              69,
              90,
              36,
              18,
              34,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              97,
              115,
              101,
              115,
              47,
              42,
              125,
              18,
              29,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              99,
              97,
              115,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Retrieve all cases under the specified parent.
     *
     * Note: Listing cases under an Organization returns only the cases directly
     * parented by that organization. To retrieve all cases under an organization,
     * including cases parented by projects under that organization, use
     * `cases.search`.
     */
    listCases: {
      name: "ListCases",
      requestType: ListCasesRequest,
      requestStream: false,
      responseType: ListCasesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              69,
              90,
              36,
              18,
              34,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              99,
              97,
              115,
              101,
              115,
              18,
              29,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              47,
              99,
              97,
              115,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Search cases using the specified query. */
    searchCases: {
      name: "SearchCases",
      requestType: SearchCasesRequest,
      requestStream: false,
      responseType: SearchCasesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              83,
              90,
              43,
              18,
              41,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              99,
              97,
              115,
              101,
              115,
              58,
              115,
              101,
              97,
              114,
              99,
              104,
              18,
              36,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              47,
              99,
              97,
              115,
              101,
              115,
              58,
              115,
              101,
              97,
              114,
              99,
              104,
            ]),
          ],
        },
      },
    },
    /**
     * Create a new case and associate it with the given Google Cloud Resource.
     * The case object must have the following fields set: `display_name`,
     * `description`, `classification`, and `priority`.
     */
    createCase: {
      name: "CreateCase",
      requestType: CreateCaseRequest,
      requestStream: false,
      responseType: Case,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([11, 112, 97, 114, 101, 110, 116, 44, 99, 97, 115, 101])],
          578365826: [
            Buffer.from([
              81,
              58,
              4,
              99,
              97,
              115,
              101,
              90,
              42,
              58,
              4,
              99,
              97,
              115,
              101,
              34,
              34,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              99,
              97,
              115,
              101,
              115,
              34,
              29,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              47,
              99,
              97,
              115,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Update the specified case. Only a subset of fields can be updated. */
    updateCase: {
      name: "UpdateCase",
      requestType: UpdateCaseRequest,
      requestStream: false,
      responseType: Case,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([16, 99, 97, 115, 101, 44, 117, 112, 100, 97, 116, 101, 95, 109, 97, 115, 107])],
          578365826: [
            Buffer.from([
              91,
              58,
              4,
              99,
              97,
              115,
              101,
              90,
              47,
              58,
              4,
              99,
              97,
              115,
              101,
              50,
              39,
              47,
              118,
              50,
              47,
              123,
              99,
              97,
              115,
              101,
              46,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              97,
              115,
              101,
              115,
              47,
              42,
              125,
              50,
              34,
              47,
              118,
              50,
              47,
              123,
              99,
              97,
              115,
              101,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              99,
              97,
              115,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Escalate a case. Escalating a case will initiate the Google Cloud Support
     * escalation management process.
     *
     * This operation is only available to certain Customer Care tiers. Go to
     * https://cloud.google.com/support and look for 'Technical support
     * escalations' in the feature list to find out which tiers are able to
     * perform escalations.
     */
    escalateCase: {
      name: "EscalateCase",
      requestType: EscalateCaseRequest,
      requestStream: false,
      responseType: Case,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              93,
              58,
              1,
              42,
              90,
              48,
              58,
              1,
              42,
              34,
              43,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              97,
              115,
              101,
              115,
              47,
              42,
              125,
              58,
              101,
              115,
              99,
              97,
              108,
              97,
              116,
              101,
              34,
              38,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              99,
              97,
              115,
              101,
              115,
              47,
              42,
              125,
              58,
              101,
              115,
              99,
              97,
              108,
              97,
              116,
              101,
            ]),
          ],
        },
      },
    },
    /** Close the specified case. */
    closeCase: {
      name: "CloseCase",
      requestType: CloseCaseRequest,
      requestStream: false,
      responseType: Case,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              87,
              58,
              1,
              42,
              90,
              45,
              58,
              1,
              42,
              34,
              40,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              97,
              115,
              101,
              115,
              47,
              42,
              125,
              58,
              99,
              108,
              111,
              115,
              101,
              34,
              35,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              99,
              97,
              115,
              101,
              115,
              47,
              42,
              125,
              58,
              99,
              108,
              111,
              115,
              101,
            ]),
          ],
        },
      },
    },
    /**
     * Retrieve valid classifications to be used when creating a support case.
     * The classications are hierarchical, with each classification containing
     * all levels of the hierarchy, separated by " > ". For example "Technical
     * Issue > Compute > Compute Engine".
     */
    searchCaseClassifications: {
      name: "SearchCaseClassifications",
      requestType: SearchCaseClassificationsRequest,
      requestStream: false,
      responseType: SearchCaseClassificationsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              32,
              18,
              30,
              47,
              118,
              50,
              47,
              99,
              97,
              115,
              101,
              67,
              108,
              97,
              115,
              115,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              58,
              115,
              101,
              97,
              114,
              99,
              104,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface CaseServiceImplementation<CallContextExt = {}> {
  /** Retrieve the specified case. */
  getCase(request: GetCaseRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Case>>;
  /**
   * Retrieve all cases under the specified parent.
   *
   * Note: Listing cases under an Organization returns only the cases directly
   * parented by that organization. To retrieve all cases under an organization,
   * including cases parented by projects under that organization, use
   * `cases.search`.
   */
  listCases(request: ListCasesRequest, context: CallContext & CallContextExt): Promise<DeepPartial<ListCasesResponse>>;
  /** Search cases using the specified query. */
  searchCases(
    request: SearchCasesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SearchCasesResponse>>;
  /**
   * Create a new case and associate it with the given Google Cloud Resource.
   * The case object must have the following fields set: `display_name`,
   * `description`, `classification`, and `priority`.
   */
  createCase(request: CreateCaseRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Case>>;
  /** Update the specified case. Only a subset of fields can be updated. */
  updateCase(request: UpdateCaseRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Case>>;
  /**
   * Escalate a case. Escalating a case will initiate the Google Cloud Support
   * escalation management process.
   *
   * This operation is only available to certain Customer Care tiers. Go to
   * https://cloud.google.com/support and look for 'Technical support
   * escalations' in the feature list to find out which tiers are able to
   * perform escalations.
   */
  escalateCase(request: EscalateCaseRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Case>>;
  /** Close the specified case. */
  closeCase(request: CloseCaseRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Case>>;
  /**
   * Retrieve valid classifications to be used when creating a support case.
   * The classications are hierarchical, with each classification containing
   * all levels of the hierarchy, separated by " > ". For example "Technical
   * Issue > Compute > Compute Engine".
   */
  searchCaseClassifications(
    request: SearchCaseClassificationsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SearchCaseClassificationsResponse>>;
}

export interface CaseServiceClient<CallOptionsExt = {}> {
  /** Retrieve the specified case. */
  getCase(request: DeepPartial<GetCaseRequest>, options?: CallOptions & CallOptionsExt): Promise<Case>;
  /**
   * Retrieve all cases under the specified parent.
   *
   * Note: Listing cases under an Organization returns only the cases directly
   * parented by that organization. To retrieve all cases under an organization,
   * including cases parented by projects under that organization, use
   * `cases.search`.
   */
  listCases(request: DeepPartial<ListCasesRequest>, options?: CallOptions & CallOptionsExt): Promise<ListCasesResponse>;
  /** Search cases using the specified query. */
  searchCases(
    request: DeepPartial<SearchCasesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SearchCasesResponse>;
  /**
   * Create a new case and associate it with the given Google Cloud Resource.
   * The case object must have the following fields set: `display_name`,
   * `description`, `classification`, and `priority`.
   */
  createCase(request: DeepPartial<CreateCaseRequest>, options?: CallOptions & CallOptionsExt): Promise<Case>;
  /** Update the specified case. Only a subset of fields can be updated. */
  updateCase(request: DeepPartial<UpdateCaseRequest>, options?: CallOptions & CallOptionsExt): Promise<Case>;
  /**
   * Escalate a case. Escalating a case will initiate the Google Cloud Support
   * escalation management process.
   *
   * This operation is only available to certain Customer Care tiers. Go to
   * https://cloud.google.com/support and look for 'Technical support
   * escalations' in the feature list to find out which tiers are able to
   * perform escalations.
   */
  escalateCase(request: DeepPartial<EscalateCaseRequest>, options?: CallOptions & CallOptionsExt): Promise<Case>;
  /** Close the specified case. */
  closeCase(request: DeepPartial<CloseCaseRequest>, options?: CallOptions & CallOptionsExt): Promise<Case>;
  /**
   * Retrieve valid classifications to be used when creating a support case.
   * The classications are hierarchical, with each classification containing
   * all levels of the hierarchy, separated by " > ". For example "Technical
   * Issue > Compute > Compute Engine".
   */
  searchCaseClassifications(
    request: DeepPartial<SearchCaseClassificationsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SearchCaseClassificationsResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
