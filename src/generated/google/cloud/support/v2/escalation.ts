// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/support/v2/escalation.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.cloud.support.v2";

/** An escalation of a support case. */
export interface Escalation {
  /** Required. The reason why the Case is being escalated. */
  reason: Escalation_Reason;
  /**
   * Required. A free text description to accompany the `reason` field above.
   * Provides additional context on why the case is being escalated.
   */
  justification: string;
}

/** An enum detailing the possible reasons a case may be escalated. */
export enum Escalation_Reason {
  /** REASON_UNSPECIFIED - The escalation reason is in an unknown state or has not been specified. */
  REASON_UNSPECIFIED = 0,
  /** RESOLUTION_TIME - The case is taking too long to resolve. */
  RESOLUTION_TIME = 1,
  /**
   * TECHNICAL_EXPERTISE - The support agent does not have the expertise required to successfully
   * resolve the issue.
   */
  TECHNICAL_EXPERTISE = 2,
  /** BUSINESS_IMPACT - The issue is having a significant business impact. */
  BUSINESS_IMPACT = 3,
  UNRECOGNIZED = -1,
}

export function escalation_ReasonFromJSON(object: any): Escalation_Reason {
  switch (object) {
    case 0:
    case "REASON_UNSPECIFIED":
      return Escalation_Reason.REASON_UNSPECIFIED;
    case 1:
    case "RESOLUTION_TIME":
      return Escalation_Reason.RESOLUTION_TIME;
    case 2:
    case "TECHNICAL_EXPERTISE":
      return Escalation_Reason.TECHNICAL_EXPERTISE;
    case 3:
    case "BUSINESS_IMPACT":
      return Escalation_Reason.BUSINESS_IMPACT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Escalation_Reason.UNRECOGNIZED;
  }
}

export function escalation_ReasonToJSON(object: Escalation_Reason): string {
  switch (object) {
    case Escalation_Reason.REASON_UNSPECIFIED:
      return "REASON_UNSPECIFIED";
    case Escalation_Reason.RESOLUTION_TIME:
      return "RESOLUTION_TIME";
    case Escalation_Reason.TECHNICAL_EXPERTISE:
      return "TECHNICAL_EXPERTISE";
    case Escalation_Reason.BUSINESS_IMPACT:
      return "BUSINESS_IMPACT";
    case Escalation_Reason.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseEscalation(): Escalation {
  return { reason: 0, justification: "" };
}

export const Escalation: MessageFns<Escalation> = {
  encode(message: Escalation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.reason !== 0) {
      writer.uint32(32).int32(message.reason);
    }
    if (message.justification !== "") {
      writer.uint32(42).string(message.justification);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Escalation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEscalation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 4:
          if (tag !== 32) {
            break;
          }

          message.reason = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.justification = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Escalation {
    return {
      reason: isSet(object.reason) ? escalation_ReasonFromJSON(object.reason) : 0,
      justification: isSet(object.justification) ? globalThis.String(object.justification) : "",
    };
  },

  toJSON(message: Escalation): unknown {
    const obj: any = {};
    if (message.reason !== 0) {
      obj.reason = escalation_ReasonToJSON(message.reason);
    }
    if (message.justification !== "") {
      obj.justification = message.justification;
    }
    return obj;
  },

  create(base?: DeepPartial<Escalation>): Escalation {
    return Escalation.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Escalation>): Escalation {
    const message = createBaseEscalation();
    message.reason = object.reason ?? 0;
    message.justification = object.justification ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
