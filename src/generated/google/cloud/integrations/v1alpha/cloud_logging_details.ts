// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/integrations/v1alpha/cloud_logging_details.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.cloud.integrations.v1alpha";

/** Cloud Logging details for execution info */
export interface CloudLoggingDetails {
  /**
   * Optional. Severity selected by the customer for the logs to be sent to
   * Cloud Logging, for the integration version getting executed.
   */
  cloudLoggingSeverity?:
    | CloudLoggingDetails_CloudLoggingSeverity
    | undefined;
  /**
   * Optional. Status of whether Cloud Logging is enabled or not for the
   * integration version getting executed.
   */
  enableCloudLogging?: boolean | undefined;
}

/** The severity will be mapped to the Integration Execution State. */
export enum CloudLoggingDetails_CloudLoggingSeverity {
  /** CLOUD_LOGGING_SEVERITY_UNSPECIFIED - Unspecified */
  CLOUD_LOGGING_SEVERITY_UNSPECIFIED = 0,
  /**
   * INFO - If Severity selected is `INFO`, then all the Integration Execution States
   * (`IN_PROCESS`, `ON_HOLD`, `SUCCEEDED`, `SUSPENDED`, `ERROR`, `CANCELLED`)
   * will be sent to Cloud Logging.
   */
  INFO = 2,
  /**
   * ERROR - If Severity selected is `ERROR`, then only the following Integration
   * Execution States (`ERROR`, `CANCELLED`) will be sent to Cloud Logging.
   */
  ERROR = 3,
  /**
   * WARNING - If Severity selected is `WARNING`, then only the following Integration
   * Execution States (`ERROR`, `CANCELLED`) will be sent to Cloud Logging.
   */
  WARNING = 4,
  UNRECOGNIZED = -1,
}

export function cloudLoggingDetails_CloudLoggingSeverityFromJSON(
  object: any,
): CloudLoggingDetails_CloudLoggingSeverity {
  switch (object) {
    case 0:
    case "CLOUD_LOGGING_SEVERITY_UNSPECIFIED":
      return CloudLoggingDetails_CloudLoggingSeverity.CLOUD_LOGGING_SEVERITY_UNSPECIFIED;
    case 2:
    case "INFO":
      return CloudLoggingDetails_CloudLoggingSeverity.INFO;
    case 3:
    case "ERROR":
      return CloudLoggingDetails_CloudLoggingSeverity.ERROR;
    case 4:
    case "WARNING":
      return CloudLoggingDetails_CloudLoggingSeverity.WARNING;
    case -1:
    case "UNRECOGNIZED":
    default:
      return CloudLoggingDetails_CloudLoggingSeverity.UNRECOGNIZED;
  }
}

export function cloudLoggingDetails_CloudLoggingSeverityToJSON(
  object: CloudLoggingDetails_CloudLoggingSeverity,
): string {
  switch (object) {
    case CloudLoggingDetails_CloudLoggingSeverity.CLOUD_LOGGING_SEVERITY_UNSPECIFIED:
      return "CLOUD_LOGGING_SEVERITY_UNSPECIFIED";
    case CloudLoggingDetails_CloudLoggingSeverity.INFO:
      return "INFO";
    case CloudLoggingDetails_CloudLoggingSeverity.ERROR:
      return "ERROR";
    case CloudLoggingDetails_CloudLoggingSeverity.WARNING:
      return "WARNING";
    case CloudLoggingDetails_CloudLoggingSeverity.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseCloudLoggingDetails(): CloudLoggingDetails {
  return { cloudLoggingSeverity: undefined, enableCloudLogging: undefined };
}

export const CloudLoggingDetails: MessageFns<CloudLoggingDetails> = {
  encode(message: CloudLoggingDetails, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.cloudLoggingSeverity !== undefined) {
      writer.uint32(8).int32(message.cloudLoggingSeverity);
    }
    if (message.enableCloudLogging !== undefined) {
      writer.uint32(16).bool(message.enableCloudLogging);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CloudLoggingDetails {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCloudLoggingDetails();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.cloudLoggingSeverity = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.enableCloudLogging = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CloudLoggingDetails {
    return {
      cloudLoggingSeverity: isSet(object.cloudLoggingSeverity)
        ? cloudLoggingDetails_CloudLoggingSeverityFromJSON(object.cloudLoggingSeverity)
        : undefined,
      enableCloudLogging: isSet(object.enableCloudLogging) ? globalThis.Boolean(object.enableCloudLogging) : undefined,
    };
  },

  toJSON(message: CloudLoggingDetails): unknown {
    const obj: any = {};
    if (message.cloudLoggingSeverity !== undefined) {
      obj.cloudLoggingSeverity = cloudLoggingDetails_CloudLoggingSeverityToJSON(message.cloudLoggingSeverity);
    }
    if (message.enableCloudLogging !== undefined) {
      obj.enableCloudLogging = message.enableCloudLogging;
    }
    return obj;
  },

  create(base?: DeepPartial<CloudLoggingDetails>): CloudLoggingDetails {
    return CloudLoggingDetails.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CloudLoggingDetails>): CloudLoggingDetails {
    const message = createBaseCloudLoggingDetails();
    message.cloudLoggingSeverity = object.cloudLoggingSeverity ?? undefined;
    message.enableCloudLogging = object.enableCloudLogging ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
