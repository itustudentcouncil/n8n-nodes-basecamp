// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/dataqna/v1alpha/annotated_string.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.cloud.dataqna.v1alpha";

/**
 * Describes string annotation from both semantic and formatting perspectives.
 * Example:
 *
 * User Query:
 *
 *   top countries by population in Africa
 *
 *   0   4         14 17         28 31    37
 *
 * Table Data:
 *
 * + "country" - dimension
 * + "population" - metric
 * + "Africa" - value in the "continent" column
 *
 * text_formatted = `"top countries by population in Africa"`
 *
 * html_formatted =
 *   `"top <b>countries</b> by <b>population</b> in <i>Africa</i>"`
 *
 * ```
 * markups = [
 *   {DIMENSION, 4, 12}, // 'countries'
 *   {METRIC, 17, 26}, // 'population'
 *   {FILTER, 31, 36}  // 'Africa'
 * ]
 * ```
 *
 * Note that html formattings for 'DIMENSION' and 'METRIC' are the same, while
 * semantic markups are different.
 */
export interface AnnotatedString {
  /** Text version of the string. */
  textFormatted: string;
  /** HTML version of the string annotation. */
  htmlFormatted: string;
  /** Semantic version of the string annotation. */
  markups: AnnotatedString_SemanticMarkup[];
}

/** Semantic markup types. */
export enum AnnotatedString_SemanticMarkupType {
  /** MARKUP_TYPE_UNSPECIFIED - No markup type was specified. */
  MARKUP_TYPE_UNSPECIFIED = 0,
  /** METRIC - Markup for a substring denoting a metric. */
  METRIC = 1,
  /** DIMENSION - Markup for a substring denoting a dimension. */
  DIMENSION = 2,
  /** FILTER - Markup for a substring denoting a filter. */
  FILTER = 3,
  /** UNUSED - Markup for an unused substring. */
  UNUSED = 4,
  /** BLOCKED - Markup for a substring containing blocked phrases. */
  BLOCKED = 5,
  /** ROW - Markup for a substring that contains terms for row. */
  ROW = 6,
  UNRECOGNIZED = -1,
}

export function annotatedString_SemanticMarkupTypeFromJSON(object: any): AnnotatedString_SemanticMarkupType {
  switch (object) {
    case 0:
    case "MARKUP_TYPE_UNSPECIFIED":
      return AnnotatedString_SemanticMarkupType.MARKUP_TYPE_UNSPECIFIED;
    case 1:
    case "METRIC":
      return AnnotatedString_SemanticMarkupType.METRIC;
    case 2:
    case "DIMENSION":
      return AnnotatedString_SemanticMarkupType.DIMENSION;
    case 3:
    case "FILTER":
      return AnnotatedString_SemanticMarkupType.FILTER;
    case 4:
    case "UNUSED":
      return AnnotatedString_SemanticMarkupType.UNUSED;
    case 5:
    case "BLOCKED":
      return AnnotatedString_SemanticMarkupType.BLOCKED;
    case 6:
    case "ROW":
      return AnnotatedString_SemanticMarkupType.ROW;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AnnotatedString_SemanticMarkupType.UNRECOGNIZED;
  }
}

export function annotatedString_SemanticMarkupTypeToJSON(object: AnnotatedString_SemanticMarkupType): string {
  switch (object) {
    case AnnotatedString_SemanticMarkupType.MARKUP_TYPE_UNSPECIFIED:
      return "MARKUP_TYPE_UNSPECIFIED";
    case AnnotatedString_SemanticMarkupType.METRIC:
      return "METRIC";
    case AnnotatedString_SemanticMarkupType.DIMENSION:
      return "DIMENSION";
    case AnnotatedString_SemanticMarkupType.FILTER:
      return "FILTER";
    case AnnotatedString_SemanticMarkupType.UNUSED:
      return "UNUSED";
    case AnnotatedString_SemanticMarkupType.BLOCKED:
      return "BLOCKED";
    case AnnotatedString_SemanticMarkupType.ROW:
      return "ROW";
    case AnnotatedString_SemanticMarkupType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * Semantic markup denotes a substring (by index and length) with markup
 * information.
 */
export interface AnnotatedString_SemanticMarkup {
  /** The semantic type of the markup substring. */
  type: AnnotatedString_SemanticMarkupType;
  /** Unicode character index of the query. */
  startCharIndex: number;
  /** The length (number of unicode characters) of the markup substring. */
  length: number;
}

function createBaseAnnotatedString(): AnnotatedString {
  return { textFormatted: "", htmlFormatted: "", markups: [] };
}

export const AnnotatedString: MessageFns<AnnotatedString> = {
  encode(message: AnnotatedString, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.textFormatted !== "") {
      writer.uint32(10).string(message.textFormatted);
    }
    if (message.htmlFormatted !== "") {
      writer.uint32(18).string(message.htmlFormatted);
    }
    for (const v of message.markups) {
      AnnotatedString_SemanticMarkup.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AnnotatedString {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAnnotatedString();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.textFormatted = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.htmlFormatted = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.markups.push(AnnotatedString_SemanticMarkup.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AnnotatedString {
    return {
      textFormatted: isSet(object.textFormatted) ? globalThis.String(object.textFormatted) : "",
      htmlFormatted: isSet(object.htmlFormatted) ? globalThis.String(object.htmlFormatted) : "",
      markups: globalThis.Array.isArray(object?.markups)
        ? object.markups.map((e: any) => AnnotatedString_SemanticMarkup.fromJSON(e))
        : [],
    };
  },

  toJSON(message: AnnotatedString): unknown {
    const obj: any = {};
    if (message.textFormatted !== "") {
      obj.textFormatted = message.textFormatted;
    }
    if (message.htmlFormatted !== "") {
      obj.htmlFormatted = message.htmlFormatted;
    }
    if (message.markups?.length) {
      obj.markups = message.markups.map((e) => AnnotatedString_SemanticMarkup.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<AnnotatedString>): AnnotatedString {
    return AnnotatedString.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AnnotatedString>): AnnotatedString {
    const message = createBaseAnnotatedString();
    message.textFormatted = object.textFormatted ?? "";
    message.htmlFormatted = object.htmlFormatted ?? "";
    message.markups = object.markups?.map((e) => AnnotatedString_SemanticMarkup.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAnnotatedString_SemanticMarkup(): AnnotatedString_SemanticMarkup {
  return { type: 0, startCharIndex: 0, length: 0 };
}

export const AnnotatedString_SemanticMarkup: MessageFns<AnnotatedString_SemanticMarkup> = {
  encode(message: AnnotatedString_SemanticMarkup, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    if (message.startCharIndex !== 0) {
      writer.uint32(16).int32(message.startCharIndex);
    }
    if (message.length !== 0) {
      writer.uint32(24).int32(message.length);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AnnotatedString_SemanticMarkup {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAnnotatedString_SemanticMarkup();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.startCharIndex = reader.int32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.length = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AnnotatedString_SemanticMarkup {
    return {
      type: isSet(object.type) ? annotatedString_SemanticMarkupTypeFromJSON(object.type) : 0,
      startCharIndex: isSet(object.startCharIndex) ? globalThis.Number(object.startCharIndex) : 0,
      length: isSet(object.length) ? globalThis.Number(object.length) : 0,
    };
  },

  toJSON(message: AnnotatedString_SemanticMarkup): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = annotatedString_SemanticMarkupTypeToJSON(message.type);
    }
    if (message.startCharIndex !== 0) {
      obj.startCharIndex = Math.round(message.startCharIndex);
    }
    if (message.length !== 0) {
      obj.length = Math.round(message.length);
    }
    return obj;
  },

  create(base?: DeepPartial<AnnotatedString_SemanticMarkup>): AnnotatedString_SemanticMarkup {
    return AnnotatedString_SemanticMarkup.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AnnotatedString_SemanticMarkup>): AnnotatedString_SemanticMarkup {
    const message = createBaseAnnotatedString_SemanticMarkup();
    message.type = object.type ?? 0;
    message.startCharIndex = object.startCharIndex ?? 0;
    message.length = object.length ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
