// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/oslogin/v1beta/oslogin.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Empty } from "../../../protobuf/empty.js";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { PosixAccount, SshPublicKey } from "../common/common.js";

export const protobufPackage = "google.cloud.oslogin.v1beta";

/** The login profile view limits the user content retrieved. */
export enum LoginProfileView {
  /** LOGIN_PROFILE_VIEW_UNSPECIFIED - The default login profile view. The API defaults to the BASIC view. */
  LOGIN_PROFILE_VIEW_UNSPECIFIED = 0,
  /** BASIC - Includes POSIX and SSH key information. */
  BASIC = 1,
  /** SECURITY_KEY - Include security key information for the user. */
  SECURITY_KEY = 2,
  UNRECOGNIZED = -1,
}

export function loginProfileViewFromJSON(object: any): LoginProfileView {
  switch (object) {
    case 0:
    case "LOGIN_PROFILE_VIEW_UNSPECIFIED":
      return LoginProfileView.LOGIN_PROFILE_VIEW_UNSPECIFIED;
    case 1:
    case "BASIC":
      return LoginProfileView.BASIC;
    case 2:
    case "SECURITY_KEY":
      return LoginProfileView.SECURITY_KEY;
    case -1:
    case "UNRECOGNIZED":
    default:
      return LoginProfileView.UNRECOGNIZED;
  }
}

export function loginProfileViewToJSON(object: LoginProfileView): string {
  switch (object) {
    case LoginProfileView.LOGIN_PROFILE_VIEW_UNSPECIFIED:
      return "LOGIN_PROFILE_VIEW_UNSPECIFIED";
    case LoginProfileView.BASIC:
      return "BASIC";
    case LoginProfileView.SECURITY_KEY:
      return "SECURITY_KEY";
    case LoginProfileView.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * The user profile information used for logging in to a virtual machine on
 * Google Compute Engine.
 */
export interface LoginProfile {
  /** Required. A unique user ID. */
  name: string;
  /** The list of POSIX accounts associated with the user. */
  posixAccounts: PosixAccount[];
  /** A map from SSH public key fingerprint to the associated key object. */
  sshPublicKeys: { [key: string]: SshPublicKey };
  /** The registered security key credentials for a user. */
  securityKeys: SecurityKey[];
}

export interface LoginProfile_SshPublicKeysEntry {
  key: string;
  value: SshPublicKey | undefined;
}

/** A request message for creating an SSH public key. */
export interface CreateSshPublicKeyRequest {
  /** Required. The unique ID for the user in format `users/{user}`. */
  parent: string;
  /** Required. The SSH public key and expiration time. */
  sshPublicKey: SshPublicKey | undefined;
}

/** A request message for deleting a POSIX account entry. */
export interface DeletePosixAccountRequest {
  /**
   * Required. A reference to the POSIX account to update. POSIX accounts are
   * identified by the project ID they are associated with. A reference to the
   * POSIX account is in format `users/{user}/projects/{project}`.
   */
  name: string;
}

/** A request message for deleting an SSH public key. */
export interface DeleteSshPublicKeyRequest {
  /**
   * Required. The fingerprint of the public key to update. Public keys are
   * identified by their SHA-256 fingerprint. The fingerprint of the public key
   * is in format `users/{user}/sshPublicKeys/{fingerprint}`.
   */
  name: string;
}

/** A request message for retrieving the login profile information for a user. */
export interface GetLoginProfileRequest {
  /** Required. The unique ID for the user in format `users/{user}`. */
  name: string;
  /** The project ID of the Google Cloud Platform project. */
  projectId: string;
  /** A system ID for filtering the results of the request. */
  systemId: string;
  /** The view configures whether to retrieve security keys information. */
  view: LoginProfileView;
}

/** A request message for retrieving an SSH public key. */
export interface GetSshPublicKeyRequest {
  /**
   * Required. The fingerprint of the public key to retrieve. Public keys are
   * identified by their SHA-256 fingerprint. The fingerprint of the public key
   * is in format `users/{user}/sshPublicKeys/{fingerprint}`.
   */
  name: string;
}

/** A request message for importing an SSH public key. */
export interface ImportSshPublicKeyRequest {
  /** The unique ID for the user in format `users/{user}`. */
  parent: string;
  /** Required. The SSH public key and expiration time. */
  sshPublicKey:
    | SshPublicKey
    | undefined;
  /** The project ID of the Google Cloud Platform project. */
  projectId: string;
  /** The view configures whether to retrieve security keys information. */
  view: LoginProfileView;
  /**
   * Optional. The regions to which to assert that the key was written.
   * If unspecified, defaults to all regions.
   * Regions are listed at https://cloud.google.com/about/locations#region.
   */
  regions: string[];
}

/** A response message for importing an SSH public key. */
export interface ImportSshPublicKeyResponse {
  /** The login profile information for the user. */
  loginProfile:
    | LoginProfile
    | undefined;
  /** Detailed information about import results. */
  details: string;
}

/** A request message for updating an SSH public key. */
export interface UpdateSshPublicKeyRequest {
  /**
   * Required. The fingerprint of the public key to update. Public keys are
   * identified by their SHA-256 fingerprint. The fingerprint of the public key
   * is in format `users/{user}/sshPublicKeys/{fingerprint}`.
   */
  name: string;
  /** Required. The SSH public key and expiration time. */
  sshPublicKey:
    | SshPublicKey
    | undefined;
  /** Mask to control which fields get updated. Updates all if not present. */
  updateMask: string[] | undefined;
}

/** The credential information for a Google registered security key. */
export interface SecurityKey {
  /**
   * Public key text in SSH format, defined by
   * [RFC4253]("https://www.ietf.org/rfc/rfc4253.txt") section 6.6.
   */
  publicKey: string;
  /** Hardware-backed private key text in SSH format. */
  privateKey: string;
  /** The U2F protocol type. */
  universalTwoFactor?:
    | UniversalTwoFactor
    | undefined;
  /** The Web Authentication protocol type. */
  webAuthn?:
    | WebAuthn
    | undefined;
  /** The security key nickname explicitly set by the user. */
  deviceNickname?: string | undefined;
}

/** Security key information specific to the U2F protocol. */
export interface UniversalTwoFactor {
  /** Application ID for the U2F protocol. */
  appId: string;
}

/** Security key information specific to the Web Authentication protocol. */
export interface WebAuthn {
  /** Relying party ID for Web Authentication. */
  rpId: string;
}

export interface SignSshPublicKeyRequest {
  /** The SSH public key to sign. */
  sshPublicKey: string;
  /** The parent project and region for the signing request. */
  parent: string;
}

export interface SignSshPublicKeyResponse {
  /** The signed SSH public key to use in the SSH handshake. */
  signedSshPublicKey: string;
}

function createBaseLoginProfile(): LoginProfile {
  return { name: "", posixAccounts: [], sshPublicKeys: {}, securityKeys: [] };
}

export const LoginProfile: MessageFns<LoginProfile> = {
  encode(message: LoginProfile, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    for (const v of message.posixAccounts) {
      PosixAccount.encode(v!, writer.uint32(18).fork()).join();
    }
    Object.entries(message.sshPublicKeys).forEach(([key, value]) => {
      LoginProfile_SshPublicKeysEntry.encode({ key: key as any, value }, writer.uint32(26).fork()).join();
    });
    for (const v of message.securityKeys) {
      SecurityKey.encode(v!, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LoginProfile {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLoginProfile();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.posixAccounts.push(PosixAccount.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          const entry3 = LoginProfile_SshPublicKeysEntry.decode(reader, reader.uint32());
          if (entry3.value !== undefined) {
            message.sshPublicKeys[entry3.key] = entry3.value;
          }
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.securityKeys.push(SecurityKey.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LoginProfile {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      posixAccounts: globalThis.Array.isArray(object?.posixAccounts)
        ? object.posixAccounts.map((e: any) => PosixAccount.fromJSON(e))
        : [],
      sshPublicKeys: isObject(object.sshPublicKeys)
        ? Object.entries(object.sshPublicKeys).reduce<{ [key: string]: SshPublicKey }>((acc, [key, value]) => {
          acc[key] = SshPublicKey.fromJSON(value);
          return acc;
        }, {})
        : {},
      securityKeys: globalThis.Array.isArray(object?.securityKeys)
        ? object.securityKeys.map((e: any) => SecurityKey.fromJSON(e))
        : [],
    };
  },

  toJSON(message: LoginProfile): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.posixAccounts?.length) {
      obj.posixAccounts = message.posixAccounts.map((e) => PosixAccount.toJSON(e));
    }
    if (message.sshPublicKeys) {
      const entries = Object.entries(message.sshPublicKeys);
      if (entries.length > 0) {
        obj.sshPublicKeys = {};
        entries.forEach(([k, v]) => {
          obj.sshPublicKeys[k] = SshPublicKey.toJSON(v);
        });
      }
    }
    if (message.securityKeys?.length) {
      obj.securityKeys = message.securityKeys.map((e) => SecurityKey.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<LoginProfile>): LoginProfile {
    return LoginProfile.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LoginProfile>): LoginProfile {
    const message = createBaseLoginProfile();
    message.name = object.name ?? "";
    message.posixAccounts = object.posixAccounts?.map((e) => PosixAccount.fromPartial(e)) || [];
    message.sshPublicKeys = Object.entries(object.sshPublicKeys ?? {}).reduce<{ [key: string]: SshPublicKey }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = SshPublicKey.fromPartial(value);
        }
        return acc;
      },
      {},
    );
    message.securityKeys = object.securityKeys?.map((e) => SecurityKey.fromPartial(e)) || [];
    return message;
  },
};

function createBaseLoginProfile_SshPublicKeysEntry(): LoginProfile_SshPublicKeysEntry {
  return { key: "", value: undefined };
}

export const LoginProfile_SshPublicKeysEntry: MessageFns<LoginProfile_SshPublicKeysEntry> = {
  encode(message: LoginProfile_SshPublicKeysEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      SshPublicKey.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LoginProfile_SshPublicKeysEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLoginProfile_SshPublicKeysEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = SshPublicKey.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LoginProfile_SshPublicKeysEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? SshPublicKey.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: LoginProfile_SshPublicKeysEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = SshPublicKey.toJSON(message.value);
    }
    return obj;
  },

  create(base?: DeepPartial<LoginProfile_SshPublicKeysEntry>): LoginProfile_SshPublicKeysEntry {
    return LoginProfile_SshPublicKeysEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LoginProfile_SshPublicKeysEntry>): LoginProfile_SshPublicKeysEntry {
    const message = createBaseLoginProfile_SshPublicKeysEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? SshPublicKey.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseCreateSshPublicKeyRequest(): CreateSshPublicKeyRequest {
  return { parent: "", sshPublicKey: undefined };
}

export const CreateSshPublicKeyRequest: MessageFns<CreateSshPublicKeyRequest> = {
  encode(message: CreateSshPublicKeyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.sshPublicKey !== undefined) {
      SshPublicKey.encode(message.sshPublicKey, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateSshPublicKeyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateSshPublicKeyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.sshPublicKey = SshPublicKey.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateSshPublicKeyRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      sshPublicKey: isSet(object.sshPublicKey) ? SshPublicKey.fromJSON(object.sshPublicKey) : undefined,
    };
  },

  toJSON(message: CreateSshPublicKeyRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.sshPublicKey !== undefined) {
      obj.sshPublicKey = SshPublicKey.toJSON(message.sshPublicKey);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateSshPublicKeyRequest>): CreateSshPublicKeyRequest {
    return CreateSshPublicKeyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateSshPublicKeyRequest>): CreateSshPublicKeyRequest {
    const message = createBaseCreateSshPublicKeyRequest();
    message.parent = object.parent ?? "";
    message.sshPublicKey = (object.sshPublicKey !== undefined && object.sshPublicKey !== null)
      ? SshPublicKey.fromPartial(object.sshPublicKey)
      : undefined;
    return message;
  },
};

function createBaseDeletePosixAccountRequest(): DeletePosixAccountRequest {
  return { name: "" };
}

export const DeletePosixAccountRequest: MessageFns<DeletePosixAccountRequest> = {
  encode(message: DeletePosixAccountRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeletePosixAccountRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeletePosixAccountRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeletePosixAccountRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeletePosixAccountRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeletePosixAccountRequest>): DeletePosixAccountRequest {
    return DeletePosixAccountRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeletePosixAccountRequest>): DeletePosixAccountRequest {
    const message = createBaseDeletePosixAccountRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseDeleteSshPublicKeyRequest(): DeleteSshPublicKeyRequest {
  return { name: "" };
}

export const DeleteSshPublicKeyRequest: MessageFns<DeleteSshPublicKeyRequest> = {
  encode(message: DeleteSshPublicKeyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteSshPublicKeyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteSshPublicKeyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteSshPublicKeyRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteSshPublicKeyRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteSshPublicKeyRequest>): DeleteSshPublicKeyRequest {
    return DeleteSshPublicKeyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteSshPublicKeyRequest>): DeleteSshPublicKeyRequest {
    const message = createBaseDeleteSshPublicKeyRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseGetLoginProfileRequest(): GetLoginProfileRequest {
  return { name: "", projectId: "", systemId: "", view: 0 };
}

export const GetLoginProfileRequest: MessageFns<GetLoginProfileRequest> = {
  encode(message: GetLoginProfileRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.projectId !== "") {
      writer.uint32(18).string(message.projectId);
    }
    if (message.systemId !== "") {
      writer.uint32(26).string(message.systemId);
    }
    if (message.view !== 0) {
      writer.uint32(32).int32(message.view);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetLoginProfileRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetLoginProfileRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.systemId = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.view = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetLoginProfileRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      projectId: isSet(object.projectId) ? globalThis.String(object.projectId) : "",
      systemId: isSet(object.systemId) ? globalThis.String(object.systemId) : "",
      view: isSet(object.view) ? loginProfileViewFromJSON(object.view) : 0,
    };
  },

  toJSON(message: GetLoginProfileRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.systemId !== "") {
      obj.systemId = message.systemId;
    }
    if (message.view !== 0) {
      obj.view = loginProfileViewToJSON(message.view);
    }
    return obj;
  },

  create(base?: DeepPartial<GetLoginProfileRequest>): GetLoginProfileRequest {
    return GetLoginProfileRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetLoginProfileRequest>): GetLoginProfileRequest {
    const message = createBaseGetLoginProfileRequest();
    message.name = object.name ?? "";
    message.projectId = object.projectId ?? "";
    message.systemId = object.systemId ?? "";
    message.view = object.view ?? 0;
    return message;
  },
};

function createBaseGetSshPublicKeyRequest(): GetSshPublicKeyRequest {
  return { name: "" };
}

export const GetSshPublicKeyRequest: MessageFns<GetSshPublicKeyRequest> = {
  encode(message: GetSshPublicKeyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetSshPublicKeyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSshPublicKeyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetSshPublicKeyRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetSshPublicKeyRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetSshPublicKeyRequest>): GetSshPublicKeyRequest {
    return GetSshPublicKeyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetSshPublicKeyRequest>): GetSshPublicKeyRequest {
    const message = createBaseGetSshPublicKeyRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseImportSshPublicKeyRequest(): ImportSshPublicKeyRequest {
  return { parent: "", sshPublicKey: undefined, projectId: "", view: 0, regions: [] };
}

export const ImportSshPublicKeyRequest: MessageFns<ImportSshPublicKeyRequest> = {
  encode(message: ImportSshPublicKeyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.sshPublicKey !== undefined) {
      SshPublicKey.encode(message.sshPublicKey, writer.uint32(18).fork()).join();
    }
    if (message.projectId !== "") {
      writer.uint32(26).string(message.projectId);
    }
    if (message.view !== 0) {
      writer.uint32(32).int32(message.view);
    }
    for (const v of message.regions) {
      writer.uint32(42).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ImportSshPublicKeyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImportSshPublicKeyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.sshPublicKey = SshPublicKey.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.view = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.regions.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImportSshPublicKeyRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      sshPublicKey: isSet(object.sshPublicKey) ? SshPublicKey.fromJSON(object.sshPublicKey) : undefined,
      projectId: isSet(object.projectId) ? globalThis.String(object.projectId) : "",
      view: isSet(object.view) ? loginProfileViewFromJSON(object.view) : 0,
      regions: globalThis.Array.isArray(object?.regions) ? object.regions.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: ImportSshPublicKeyRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.sshPublicKey !== undefined) {
      obj.sshPublicKey = SshPublicKey.toJSON(message.sshPublicKey);
    }
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.view !== 0) {
      obj.view = loginProfileViewToJSON(message.view);
    }
    if (message.regions?.length) {
      obj.regions = message.regions;
    }
    return obj;
  },

  create(base?: DeepPartial<ImportSshPublicKeyRequest>): ImportSshPublicKeyRequest {
    return ImportSshPublicKeyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ImportSshPublicKeyRequest>): ImportSshPublicKeyRequest {
    const message = createBaseImportSshPublicKeyRequest();
    message.parent = object.parent ?? "";
    message.sshPublicKey = (object.sshPublicKey !== undefined && object.sshPublicKey !== null)
      ? SshPublicKey.fromPartial(object.sshPublicKey)
      : undefined;
    message.projectId = object.projectId ?? "";
    message.view = object.view ?? 0;
    message.regions = object.regions?.map((e) => e) || [];
    return message;
  },
};

function createBaseImportSshPublicKeyResponse(): ImportSshPublicKeyResponse {
  return { loginProfile: undefined, details: "" };
}

export const ImportSshPublicKeyResponse: MessageFns<ImportSshPublicKeyResponse> = {
  encode(message: ImportSshPublicKeyResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.loginProfile !== undefined) {
      LoginProfile.encode(message.loginProfile, writer.uint32(10).fork()).join();
    }
    if (message.details !== "") {
      writer.uint32(18).string(message.details);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ImportSshPublicKeyResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImportSshPublicKeyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.loginProfile = LoginProfile.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.details = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImportSshPublicKeyResponse {
    return {
      loginProfile: isSet(object.loginProfile) ? LoginProfile.fromJSON(object.loginProfile) : undefined,
      details: isSet(object.details) ? globalThis.String(object.details) : "",
    };
  },

  toJSON(message: ImportSshPublicKeyResponse): unknown {
    const obj: any = {};
    if (message.loginProfile !== undefined) {
      obj.loginProfile = LoginProfile.toJSON(message.loginProfile);
    }
    if (message.details !== "") {
      obj.details = message.details;
    }
    return obj;
  },

  create(base?: DeepPartial<ImportSshPublicKeyResponse>): ImportSshPublicKeyResponse {
    return ImportSshPublicKeyResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ImportSshPublicKeyResponse>): ImportSshPublicKeyResponse {
    const message = createBaseImportSshPublicKeyResponse();
    message.loginProfile = (object.loginProfile !== undefined && object.loginProfile !== null)
      ? LoginProfile.fromPartial(object.loginProfile)
      : undefined;
    message.details = object.details ?? "";
    return message;
  },
};

function createBaseUpdateSshPublicKeyRequest(): UpdateSshPublicKeyRequest {
  return { name: "", sshPublicKey: undefined, updateMask: undefined };
}

export const UpdateSshPublicKeyRequest: MessageFns<UpdateSshPublicKeyRequest> = {
  encode(message: UpdateSshPublicKeyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.sshPublicKey !== undefined) {
      SshPublicKey.encode(message.sshPublicKey, writer.uint32(18).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateSshPublicKeyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateSshPublicKeyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.sshPublicKey = SshPublicKey.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateSshPublicKeyRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      sshPublicKey: isSet(object.sshPublicKey) ? SshPublicKey.fromJSON(object.sshPublicKey) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateSshPublicKeyRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.sshPublicKey !== undefined) {
      obj.sshPublicKey = SshPublicKey.toJSON(message.sshPublicKey);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateSshPublicKeyRequest>): UpdateSshPublicKeyRequest {
    return UpdateSshPublicKeyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateSshPublicKeyRequest>): UpdateSshPublicKeyRequest {
    const message = createBaseUpdateSshPublicKeyRequest();
    message.name = object.name ?? "";
    message.sshPublicKey = (object.sshPublicKey !== undefined && object.sshPublicKey !== null)
      ? SshPublicKey.fromPartial(object.sshPublicKey)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseSecurityKey(): SecurityKey {
  return {
    publicKey: "",
    privateKey: "",
    universalTwoFactor: undefined,
    webAuthn: undefined,
    deviceNickname: undefined,
  };
}

export const SecurityKey: MessageFns<SecurityKey> = {
  encode(message: SecurityKey, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.publicKey !== "") {
      writer.uint32(10).string(message.publicKey);
    }
    if (message.privateKey !== "") {
      writer.uint32(18).string(message.privateKey);
    }
    if (message.universalTwoFactor !== undefined) {
      UniversalTwoFactor.encode(message.universalTwoFactor, writer.uint32(26).fork()).join();
    }
    if (message.webAuthn !== undefined) {
      WebAuthn.encode(message.webAuthn, writer.uint32(34).fork()).join();
    }
    if (message.deviceNickname !== undefined) {
      writer.uint32(42).string(message.deviceNickname);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SecurityKey {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSecurityKey();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.publicKey = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.privateKey = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.universalTwoFactor = UniversalTwoFactor.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.webAuthn = WebAuthn.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.deviceNickname = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SecurityKey {
    return {
      publicKey: isSet(object.publicKey) ? globalThis.String(object.publicKey) : "",
      privateKey: isSet(object.privateKey) ? globalThis.String(object.privateKey) : "",
      universalTwoFactor: isSet(object.universalTwoFactor)
        ? UniversalTwoFactor.fromJSON(object.universalTwoFactor)
        : undefined,
      webAuthn: isSet(object.webAuthn) ? WebAuthn.fromJSON(object.webAuthn) : undefined,
      deviceNickname: isSet(object.deviceNickname) ? globalThis.String(object.deviceNickname) : undefined,
    };
  },

  toJSON(message: SecurityKey): unknown {
    const obj: any = {};
    if (message.publicKey !== "") {
      obj.publicKey = message.publicKey;
    }
    if (message.privateKey !== "") {
      obj.privateKey = message.privateKey;
    }
    if (message.universalTwoFactor !== undefined) {
      obj.universalTwoFactor = UniversalTwoFactor.toJSON(message.universalTwoFactor);
    }
    if (message.webAuthn !== undefined) {
      obj.webAuthn = WebAuthn.toJSON(message.webAuthn);
    }
    if (message.deviceNickname !== undefined) {
      obj.deviceNickname = message.deviceNickname;
    }
    return obj;
  },

  create(base?: DeepPartial<SecurityKey>): SecurityKey {
    return SecurityKey.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SecurityKey>): SecurityKey {
    const message = createBaseSecurityKey();
    message.publicKey = object.publicKey ?? "";
    message.privateKey = object.privateKey ?? "";
    message.universalTwoFactor = (object.universalTwoFactor !== undefined && object.universalTwoFactor !== null)
      ? UniversalTwoFactor.fromPartial(object.universalTwoFactor)
      : undefined;
    message.webAuthn = (object.webAuthn !== undefined && object.webAuthn !== null)
      ? WebAuthn.fromPartial(object.webAuthn)
      : undefined;
    message.deviceNickname = object.deviceNickname ?? undefined;
    return message;
  },
};

function createBaseUniversalTwoFactor(): UniversalTwoFactor {
  return { appId: "" };
}

export const UniversalTwoFactor: MessageFns<UniversalTwoFactor> = {
  encode(message: UniversalTwoFactor, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.appId !== "") {
      writer.uint32(10).string(message.appId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UniversalTwoFactor {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUniversalTwoFactor();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.appId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UniversalTwoFactor {
    return { appId: isSet(object.appId) ? globalThis.String(object.appId) : "" };
  },

  toJSON(message: UniversalTwoFactor): unknown {
    const obj: any = {};
    if (message.appId !== "") {
      obj.appId = message.appId;
    }
    return obj;
  },

  create(base?: DeepPartial<UniversalTwoFactor>): UniversalTwoFactor {
    return UniversalTwoFactor.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UniversalTwoFactor>): UniversalTwoFactor {
    const message = createBaseUniversalTwoFactor();
    message.appId = object.appId ?? "";
    return message;
  },
};

function createBaseWebAuthn(): WebAuthn {
  return { rpId: "" };
}

export const WebAuthn: MessageFns<WebAuthn> = {
  encode(message: WebAuthn, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.rpId !== "") {
      writer.uint32(10).string(message.rpId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebAuthn {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebAuthn();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.rpId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebAuthn {
    return { rpId: isSet(object.rpId) ? globalThis.String(object.rpId) : "" };
  },

  toJSON(message: WebAuthn): unknown {
    const obj: any = {};
    if (message.rpId !== "") {
      obj.rpId = message.rpId;
    }
    return obj;
  },

  create(base?: DeepPartial<WebAuthn>): WebAuthn {
    return WebAuthn.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<WebAuthn>): WebAuthn {
    const message = createBaseWebAuthn();
    message.rpId = object.rpId ?? "";
    return message;
  },
};

function createBaseSignSshPublicKeyRequest(): SignSshPublicKeyRequest {
  return { sshPublicKey: "", parent: "" };
}

export const SignSshPublicKeyRequest: MessageFns<SignSshPublicKeyRequest> = {
  encode(message: SignSshPublicKeyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sshPublicKey !== "") {
      writer.uint32(10).string(message.sshPublicKey);
    }
    if (message.parent !== "") {
      writer.uint32(18).string(message.parent);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SignSshPublicKeyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSignSshPublicKeyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.sshPublicKey = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.parent = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SignSshPublicKeyRequest {
    return {
      sshPublicKey: isSet(object.sshPublicKey) ? globalThis.String(object.sshPublicKey) : "",
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
    };
  },

  toJSON(message: SignSshPublicKeyRequest): unknown {
    const obj: any = {};
    if (message.sshPublicKey !== "") {
      obj.sshPublicKey = message.sshPublicKey;
    }
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    return obj;
  },

  create(base?: DeepPartial<SignSshPublicKeyRequest>): SignSshPublicKeyRequest {
    return SignSshPublicKeyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SignSshPublicKeyRequest>): SignSshPublicKeyRequest {
    const message = createBaseSignSshPublicKeyRequest();
    message.sshPublicKey = object.sshPublicKey ?? "";
    message.parent = object.parent ?? "";
    return message;
  },
};

function createBaseSignSshPublicKeyResponse(): SignSshPublicKeyResponse {
  return { signedSshPublicKey: "" };
}

export const SignSshPublicKeyResponse: MessageFns<SignSshPublicKeyResponse> = {
  encode(message: SignSshPublicKeyResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.signedSshPublicKey !== "") {
      writer.uint32(10).string(message.signedSshPublicKey);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SignSshPublicKeyResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSignSshPublicKeyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.signedSshPublicKey = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SignSshPublicKeyResponse {
    return { signedSshPublicKey: isSet(object.signedSshPublicKey) ? globalThis.String(object.signedSshPublicKey) : "" };
  },

  toJSON(message: SignSshPublicKeyResponse): unknown {
    const obj: any = {};
    if (message.signedSshPublicKey !== "") {
      obj.signedSshPublicKey = message.signedSshPublicKey;
    }
    return obj;
  },

  create(base?: DeepPartial<SignSshPublicKeyResponse>): SignSshPublicKeyResponse {
    return SignSshPublicKeyResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SignSshPublicKeyResponse>): SignSshPublicKeyResponse {
    const message = createBaseSignSshPublicKeyResponse();
    message.signedSshPublicKey = object.signedSshPublicKey ?? "";
    return message;
  },
};

/**
 * Cloud OS Login API
 *
 * The Cloud OS Login API allows you to manage users and their associated SSH
 * public keys for logging into virtual machines on Google Cloud Platform.
 */
export type OsLoginServiceDefinition = typeof OsLoginServiceDefinition;
export const OsLoginServiceDefinition = {
  name: "OsLoginService",
  fullName: "google.cloud.oslogin.v1beta.OsLoginService",
  methods: {
    /** Create an SSH public key */
    createSshPublicKey: {
      name: "CreateSshPublicKey",
      requestType: CreateSshPublicKeyRequest,
      requestStream: false,
      responseType: SshPublicKey,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              21,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              115,
              115,
              104,
              95,
              112,
              117,
              98,
              108,
              105,
              99,
              95,
              107,
              101,
              121,
            ]),
          ],
          578365826: [
            Buffer.from([
              56,
              58,
              14,
              115,
              115,
              104,
              95,
              112,
              117,
              98,
              108,
              105,
              99,
              95,
              107,
              101,
              121,
              34,
              38,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              117,
              115,
              101,
              114,
              115,
              47,
              42,
              125,
              47,
              115,
              115,
              104,
              80,
              117,
              98,
              108,
              105,
              99,
              75,
              101,
              121,
              115,
            ]),
          ],
        },
      },
    },
    /** Deletes a POSIX account. */
    deletePosixAccount: {
      name: "DeletePosixAccount",
      requestType: DeletePosixAccountRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              35,
              42,
              33,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              117,
              115,
              101,
              114,
              115,
              47,
              42,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes an SSH public key. */
    deleteSshPublicKey: {
      name: "DeleteSshPublicKey",
      requestType: DeleteSshPublicKeyRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              40,
              42,
              38,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              117,
              115,
              101,
              114,
              115,
              47,
              42,
              47,
              115,
              115,
              104,
              80,
              117,
              98,
              108,
              105,
              99,
              75,
              101,
              121,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Retrieves the profile information used for logging in to a virtual machine
     * on Google Compute Engine.
     */
    getLoginProfile: {
      name: "GetLoginProfile",
      requestType: GetLoginProfileRequest,
      requestStream: false,
      responseType: LoginProfile,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              37,
              18,
              35,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              117,
              115,
              101,
              114,
              115,
              47,
              42,
              125,
              47,
              108,
              111,
              103,
              105,
              110,
              80,
              114,
              111,
              102,
              105,
              108,
              101,
            ]),
          ],
        },
      },
    },
    /** Retrieves an SSH public key. */
    getSshPublicKey: {
      name: "GetSshPublicKey",
      requestType: GetSshPublicKeyRequest,
      requestStream: false,
      responseType: SshPublicKey,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              40,
              18,
              38,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              117,
              115,
              101,
              114,
              115,
              47,
              42,
              47,
              115,
              115,
              104,
              80,
              117,
              98,
              108,
              105,
              99,
              75,
              101,
              121,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Adds an SSH public key and returns the profile information. Default POSIX
     * account information is set when no username and UID exist as part of the
     * login profile.
     */
    importSshPublicKey: {
      name: "ImportSshPublicKey",
      requestType: ImportSshPublicKeyRequest,
      requestStream: false,
      responseType: ImportSshPublicKeyResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              21,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              115,
              115,
              104,
              95,
              112,
              117,
              98,
              108,
              105,
              99,
              95,
              107,
              101,
              121,
            ]),
            Buffer.from([
              32,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              115,
              115,
              104,
              95,
              112,
              117,
              98,
              108,
              105,
              99,
              95,
              107,
              101,
              121,
              44,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              61,
              58,
              14,
              115,
              115,
              104,
              95,
              112,
              117,
              98,
              108,
              105,
              99,
              95,
              107,
              101,
              121,
              34,
              43,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              117,
              115,
              101,
              114,
              115,
              47,
              42,
              125,
              58,
              105,
              109,
              112,
              111,
              114,
              116,
              83,
              115,
              104,
              80,
              117,
              98,
              108,
              105,
              99,
              75,
              101,
              121,
            ]),
          ],
        },
      },
    },
    /**
     * Updates an SSH public key and returns the profile information. This method
     * supports patch semantics.
     */
    updateSshPublicKey: {
      name: "UpdateSshPublicKey",
      requestType: UpdateSshPublicKeyRequest,
      requestStream: false,
      responseType: SshPublicKey,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([19, 110, 97, 109, 101, 44, 115, 115, 104, 95, 112, 117, 98, 108, 105, 99, 95, 107, 101, 121]),
            Buffer.from([
              31,
              110,
              97,
              109,
              101,
              44,
              115,
              115,
              104,
              95,
              112,
              117,
              98,
              108,
              105,
              99,
              95,
              107,
              101,
              121,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              56,
              58,
              14,
              115,
              115,
              104,
              95,
              112,
              117,
              98,
              108,
              105,
              99,
              95,
              107,
              101,
              121,
              50,
              38,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              117,
              115,
              101,
              114,
              115,
              47,
              42,
              47,
              115,
              115,
              104,
              80,
              117,
              98,
              108,
              105,
              99,
              75,
              101,
              121,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Signs an SSH public key for a user to authenticate to an instance. */
    signSshPublicKey: {
      name: "SignSshPublicKey",
      requestType: SignSshPublicKeyRequest,
      requestStream: false,
      responseType: SignSshPublicKeyResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              21,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              115,
              115,
              104,
              95,
              112,
              117,
              98,
              108,
              105,
              99,
              95,
              107,
              101,
              121,
            ]),
          ],
          578365826: [
            Buffer.from([
              136,
              1,
              58,
              1,
              42,
              90,
              69,
              58,
              1,
              42,
              34,
              64,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              117,
              115,
              101,
              114,
              115,
              47,
              42,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              58,
              115,
              105,
              103,
              110,
              83,
              115,
              104,
              80,
              117,
              98,
              108,
              105,
              99,
              75,
              101,
              121,
              34,
              60,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              117,
              115,
              101,
              114,
              115,
              47,
              42,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              122,
              111,
              110,
              101,
              115,
              47,
              42,
              125,
              58,
              115,
              105,
              103,
              110,
              83,
              115,
              104,
              80,
              117,
              98,
              108,
              105,
              99,
              75,
              101,
              121,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface OsLoginServiceImplementation<CallContextExt = {}> {
  /** Create an SSH public key */
  createSshPublicKey(
    request: CreateSshPublicKeyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SshPublicKey>>;
  /** Deletes a POSIX account. */
  deletePosixAccount(
    request: DeletePosixAccountRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  /** Deletes an SSH public key. */
  deleteSshPublicKey(
    request: DeleteSshPublicKeyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  /**
   * Retrieves the profile information used for logging in to a virtual machine
   * on Google Compute Engine.
   */
  getLoginProfile(
    request: GetLoginProfileRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<LoginProfile>>;
  /** Retrieves an SSH public key. */
  getSshPublicKey(
    request: GetSshPublicKeyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SshPublicKey>>;
  /**
   * Adds an SSH public key and returns the profile information. Default POSIX
   * account information is set when no username and UID exist as part of the
   * login profile.
   */
  importSshPublicKey(
    request: ImportSshPublicKeyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ImportSshPublicKeyResponse>>;
  /**
   * Updates an SSH public key and returns the profile information. This method
   * supports patch semantics.
   */
  updateSshPublicKey(
    request: UpdateSshPublicKeyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SshPublicKey>>;
  /** Signs an SSH public key for a user to authenticate to an instance. */
  signSshPublicKey(
    request: SignSshPublicKeyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SignSshPublicKeyResponse>>;
}

export interface OsLoginServiceClient<CallOptionsExt = {}> {
  /** Create an SSH public key */
  createSshPublicKey(
    request: DeepPartial<CreateSshPublicKeyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SshPublicKey>;
  /** Deletes a POSIX account. */
  deletePosixAccount(
    request: DeepPartial<DeletePosixAccountRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  /** Deletes an SSH public key. */
  deleteSshPublicKey(
    request: DeepPartial<DeleteSshPublicKeyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  /**
   * Retrieves the profile information used for logging in to a virtual machine
   * on Google Compute Engine.
   */
  getLoginProfile(
    request: DeepPartial<GetLoginProfileRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<LoginProfile>;
  /** Retrieves an SSH public key. */
  getSshPublicKey(
    request: DeepPartial<GetSshPublicKeyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SshPublicKey>;
  /**
   * Adds an SSH public key and returns the profile information. Default POSIX
   * account information is set when no username and UID exist as part of the
   * login profile.
   */
  importSshPublicKey(
    request: DeepPartial<ImportSshPublicKeyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ImportSshPublicKeyResponse>;
  /**
   * Updates an SSH public key and returns the profile information. This method
   * supports patch semantics.
   */
  updateSshPublicKey(
    request: DeepPartial<UpdateSshPublicKeyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SshPublicKey>;
  /** Signs an SSH public key for a user to authenticate to an instance. */
  signSshPublicKey(
    request: DeepPartial<SignSshPublicKeyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SignSshPublicKeyResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
