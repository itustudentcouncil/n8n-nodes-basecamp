// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/cloudcontrolspartner/v1/partners.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../protobuf/timestamp.js";

export const protobufPackage = "google.cloud.cloudcontrolspartner.v1";

/** Message describing Partner resource */
export interface Partner {
  /**
   * Identifier. The resource name of the partner.
   * Format: `organizations/{organization}/locations/{location}/partner`
   * Example: "organizations/123456/locations/us-central1/partner"
   */
  name: string;
  /** List of SKUs the partner is offering */
  skus: Sku[];
  /** List of Google Cloud supported EKM partners supported by the partner */
  ekmSolutions: EkmMetadata[];
  /**
   * List of Google Cloud regions that the partner sells services to customers.
   * Valid Google Cloud regions found here:
   * https://cloud.google.com/compute/docs/regions-zones
   */
  operatedCloudRegions: string[];
  /**
   * Google Cloud project ID in the partner's Google Cloud organization for
   * receiving enhanced Logs for Partners.
   */
  partnerProjectId: string;
  /** Output only. Time the resource was created */
  createTime:
    | Date
    | undefined;
  /** Output only. The last time the resource was updated */
  updateTime: Date | undefined;
}

/** Message for getting a Partner */
export interface GetPartnerRequest {
  /**
   * Required. Format:
   * `organizations/{organization}/locations/{location}/partner`
   */
  name: string;
}

/** Represents the SKU a partner owns inside Google Cloud to sell to customers. */
export interface Sku {
  /**
   * Argentum product SKU, that is associated with the partner offerings to
   * customers used by Syntro for billing purposes. SKUs can represent resold
   * Google products or support services.
   */
  id: string;
  /**
   * Display name of the product identified by the SKU. A partner may want to
   * show partner branded names for their offerings such as local sovereign
   * cloud solutions.
   */
  displayName: string;
}

/** Holds information needed by Mudbray to use partner EKMs for workloads. */
export interface EkmMetadata {
  /** The Cloud EKM partner. */
  ekmSolution: EkmMetadata_EkmSolution;
  /**
   * Endpoint for sending requests to the EKM for key provisioning during
   * Assured Workload creation.
   */
  ekmEndpointUri: string;
}

/**
 * Represents Google Cloud supported external key management partners
 * [Google Cloud EKM partners
 * docs](https://cloud.google.com/kms/docs/ekm#supported_partners).
 */
export enum EkmMetadata_EkmSolution {
  /** EKM_SOLUTION_UNSPECIFIED - Unspecified EKM solution */
  EKM_SOLUTION_UNSPECIFIED = 0,
  /** FORTANIX - EKM Partner Fortanix */
  FORTANIX = 1,
  /** FUTUREX - EKM Partner FutureX */
  FUTUREX = 2,
  /** THALES - EKM Partner Thales */
  THALES = 3,
  /** VIRTRU - EKM Partner Virtu */
  VIRTRU = 4,
  UNRECOGNIZED = -1,
}

export function ekmMetadata_EkmSolutionFromJSON(object: any): EkmMetadata_EkmSolution {
  switch (object) {
    case 0:
    case "EKM_SOLUTION_UNSPECIFIED":
      return EkmMetadata_EkmSolution.EKM_SOLUTION_UNSPECIFIED;
    case 1:
    case "FORTANIX":
      return EkmMetadata_EkmSolution.FORTANIX;
    case 2:
    case "FUTUREX":
      return EkmMetadata_EkmSolution.FUTUREX;
    case 3:
    case "THALES":
      return EkmMetadata_EkmSolution.THALES;
    case 4:
    case "VIRTRU":
      return EkmMetadata_EkmSolution.VIRTRU;
    case -1:
    case "UNRECOGNIZED":
    default:
      return EkmMetadata_EkmSolution.UNRECOGNIZED;
  }
}

export function ekmMetadata_EkmSolutionToJSON(object: EkmMetadata_EkmSolution): string {
  switch (object) {
    case EkmMetadata_EkmSolution.EKM_SOLUTION_UNSPECIFIED:
      return "EKM_SOLUTION_UNSPECIFIED";
    case EkmMetadata_EkmSolution.FORTANIX:
      return "FORTANIX";
    case EkmMetadata_EkmSolution.FUTUREX:
      return "FUTUREX";
    case EkmMetadata_EkmSolution.THALES:
      return "THALES";
    case EkmMetadata_EkmSolution.VIRTRU:
      return "VIRTRU";
    case EkmMetadata_EkmSolution.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBasePartner(): Partner {
  return {
    name: "",
    skus: [],
    ekmSolutions: [],
    operatedCloudRegions: [],
    partnerProjectId: "",
    createTime: undefined,
    updateTime: undefined,
  };
}

export const Partner: MessageFns<Partner> = {
  encode(message: Partner, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    for (const v of message.skus) {
      Sku.encode(v!, writer.uint32(26).fork()).join();
    }
    for (const v of message.ekmSolutions) {
      EkmMetadata.encode(v!, writer.uint32(34).fork()).join();
    }
    for (const v of message.operatedCloudRegions) {
      writer.uint32(42).string(v!);
    }
    if (message.partnerProjectId !== "") {
      writer.uint32(58).string(message.partnerProjectId);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(74).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(82).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Partner {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePartner();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.skus.push(Sku.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.ekmSolutions.push(EkmMetadata.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.operatedCloudRegions.push(reader.string());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.partnerProjectId = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Partner {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      skus: globalThis.Array.isArray(object?.skus) ? object.skus.map((e: any) => Sku.fromJSON(e)) : [],
      ekmSolutions: globalThis.Array.isArray(object?.ekmSolutions)
        ? object.ekmSolutions.map((e: any) => EkmMetadata.fromJSON(e))
        : [],
      operatedCloudRegions: globalThis.Array.isArray(object?.operatedCloudRegions)
        ? object.operatedCloudRegions.map((e: any) => globalThis.String(e))
        : [],
      partnerProjectId: isSet(object.partnerProjectId) ? globalThis.String(object.partnerProjectId) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
    };
  },

  toJSON(message: Partner): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.skus?.length) {
      obj.skus = message.skus.map((e) => Sku.toJSON(e));
    }
    if (message.ekmSolutions?.length) {
      obj.ekmSolutions = message.ekmSolutions.map((e) => EkmMetadata.toJSON(e));
    }
    if (message.operatedCloudRegions?.length) {
      obj.operatedCloudRegions = message.operatedCloudRegions;
    }
    if (message.partnerProjectId !== "") {
      obj.partnerProjectId = message.partnerProjectId;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<Partner>): Partner {
    return Partner.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Partner>): Partner {
    const message = createBasePartner();
    message.name = object.name ?? "";
    message.skus = object.skus?.map((e) => Sku.fromPartial(e)) || [];
    message.ekmSolutions = object.ekmSolutions?.map((e) => EkmMetadata.fromPartial(e)) || [];
    message.operatedCloudRegions = object.operatedCloudRegions?.map((e) => e) || [];
    message.partnerProjectId = object.partnerProjectId ?? "";
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    return message;
  },
};

function createBaseGetPartnerRequest(): GetPartnerRequest {
  return { name: "" };
}

export const GetPartnerRequest: MessageFns<GetPartnerRequest> = {
  encode(message: GetPartnerRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetPartnerRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPartnerRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetPartnerRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetPartnerRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetPartnerRequest>): GetPartnerRequest {
    return GetPartnerRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetPartnerRequest>): GetPartnerRequest {
    const message = createBaseGetPartnerRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseSku(): Sku {
  return { id: "", displayName: "" };
}

export const Sku: MessageFns<Sku> = {
  encode(message: Sku, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.displayName !== "") {
      writer.uint32(18).string(message.displayName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Sku {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSku();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.displayName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Sku {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
    };
  },

  toJSON(message: Sku): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    return obj;
  },

  create(base?: DeepPartial<Sku>): Sku {
    return Sku.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Sku>): Sku {
    const message = createBaseSku();
    message.id = object.id ?? "";
    message.displayName = object.displayName ?? "";
    return message;
  },
};

function createBaseEkmMetadata(): EkmMetadata {
  return { ekmSolution: 0, ekmEndpointUri: "" };
}

export const EkmMetadata: MessageFns<EkmMetadata> = {
  encode(message: EkmMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.ekmSolution !== 0) {
      writer.uint32(8).int32(message.ekmSolution);
    }
    if (message.ekmEndpointUri !== "") {
      writer.uint32(18).string(message.ekmEndpointUri);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EkmMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEkmMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.ekmSolution = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.ekmEndpointUri = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EkmMetadata {
    return {
      ekmSolution: isSet(object.ekmSolution) ? ekmMetadata_EkmSolutionFromJSON(object.ekmSolution) : 0,
      ekmEndpointUri: isSet(object.ekmEndpointUri) ? globalThis.String(object.ekmEndpointUri) : "",
    };
  },

  toJSON(message: EkmMetadata): unknown {
    const obj: any = {};
    if (message.ekmSolution !== 0) {
      obj.ekmSolution = ekmMetadata_EkmSolutionToJSON(message.ekmSolution);
    }
    if (message.ekmEndpointUri !== "") {
      obj.ekmEndpointUri = message.ekmEndpointUri;
    }
    return obj;
  },

  create(base?: DeepPartial<EkmMetadata>): EkmMetadata {
    return EkmMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EkmMetadata>): EkmMetadata {
    const message = createBaseEkmMetadata();
    message.ekmSolution = object.ekmSolution ?? 0;
    message.ekmEndpointUri = object.ekmEndpointUri ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
