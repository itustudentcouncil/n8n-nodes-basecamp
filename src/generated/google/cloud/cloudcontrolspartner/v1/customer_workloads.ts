// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/cloudcontrolspartner/v1/customer_workloads.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { CompletionState, completionStateFromJSON, completionStateToJSON } from "./completion_state.js";

export const protobufPackage = "google.cloud.cloudcontrolspartner.v1";

/**
 * Contains metadata around the [Workload
 * resource](https://cloud.google.com/assured-workloads/docs/reference/rest/Shared.Types/Workload)
 * in the Assured Workloads API.
 */
export interface Workload {
  /**
   * Identifier. Format:
   * `organizations/{organization}/locations/{location}/customers/{customer}/workloads/{workload}`
   */
  name: string;
  /** Output only. Folder id this workload is associated with */
  folderId: Long;
  /** Output only. Time the resource was created. */
  createTime:
    | Date
    | undefined;
  /** Output only. The name of container folder of the assured workload */
  folder: string;
  /** Container for workload onboarding steps. */
  workloadOnboardingState:
    | WorkloadOnboardingState
    | undefined;
  /** Indicates whether a workload is fully onboarded. */
  isOnboarded: boolean;
  /** The project id of the key management project for the workload */
  keyManagementProjectId: string;
  /** The Google Cloud location of the workload */
  location: string;
  /** Partner associated with this workload. */
  partner: Workload_Partner;
}

/** Supported Assured Workloads Partners. */
export enum Workload_Partner {
  /** PARTNER_UNSPECIFIED - Unknown Partner. */
  PARTNER_UNSPECIFIED = 0,
  /** PARTNER_LOCAL_CONTROLS_BY_S3NS - Enum representing S3NS (Thales) partner. */
  PARTNER_LOCAL_CONTROLS_BY_S3NS = 1,
  /** PARTNER_SOVEREIGN_CONTROLS_BY_T_SYSTEMS - Enum representing T_SYSTEM (TSI) partner. */
  PARTNER_SOVEREIGN_CONTROLS_BY_T_SYSTEMS = 2,
  /** PARTNER_SOVEREIGN_CONTROLS_BY_SIA_MINSAIT - Enum representing SIA_MINSAIT (Indra) partner. */
  PARTNER_SOVEREIGN_CONTROLS_BY_SIA_MINSAIT = 3,
  /** PARTNER_SOVEREIGN_CONTROLS_BY_PSN - Enum representing PSN (TIM) partner. */
  PARTNER_SOVEREIGN_CONTROLS_BY_PSN = 4,
  /** PARTNER_SOVEREIGN_CONTROLS_BY_CNTXT - Enum representing CNTXT (Kingdom of Saudi Arabia) partner. */
  PARTNER_SOVEREIGN_CONTROLS_BY_CNTXT = 6,
  /**
   * PARTNER_SOVEREIGN_CONTROLS_BY_CNTXT_NO_EKM - Enum representing CNXT (Kingdom of Saudi Arabia) partner offering without
   * EKM provisioning.
   */
  PARTNER_SOVEREIGN_CONTROLS_BY_CNTXT_NO_EKM = 7,
  UNRECOGNIZED = -1,
}

export function workload_PartnerFromJSON(object: any): Workload_Partner {
  switch (object) {
    case 0:
    case "PARTNER_UNSPECIFIED":
      return Workload_Partner.PARTNER_UNSPECIFIED;
    case 1:
    case "PARTNER_LOCAL_CONTROLS_BY_S3NS":
      return Workload_Partner.PARTNER_LOCAL_CONTROLS_BY_S3NS;
    case 2:
    case "PARTNER_SOVEREIGN_CONTROLS_BY_T_SYSTEMS":
      return Workload_Partner.PARTNER_SOVEREIGN_CONTROLS_BY_T_SYSTEMS;
    case 3:
    case "PARTNER_SOVEREIGN_CONTROLS_BY_SIA_MINSAIT":
      return Workload_Partner.PARTNER_SOVEREIGN_CONTROLS_BY_SIA_MINSAIT;
    case 4:
    case "PARTNER_SOVEREIGN_CONTROLS_BY_PSN":
      return Workload_Partner.PARTNER_SOVEREIGN_CONTROLS_BY_PSN;
    case 6:
    case "PARTNER_SOVEREIGN_CONTROLS_BY_CNTXT":
      return Workload_Partner.PARTNER_SOVEREIGN_CONTROLS_BY_CNTXT;
    case 7:
    case "PARTNER_SOVEREIGN_CONTROLS_BY_CNTXT_NO_EKM":
      return Workload_Partner.PARTNER_SOVEREIGN_CONTROLS_BY_CNTXT_NO_EKM;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Workload_Partner.UNRECOGNIZED;
  }
}

export function workload_PartnerToJSON(object: Workload_Partner): string {
  switch (object) {
    case Workload_Partner.PARTNER_UNSPECIFIED:
      return "PARTNER_UNSPECIFIED";
    case Workload_Partner.PARTNER_LOCAL_CONTROLS_BY_S3NS:
      return "PARTNER_LOCAL_CONTROLS_BY_S3NS";
    case Workload_Partner.PARTNER_SOVEREIGN_CONTROLS_BY_T_SYSTEMS:
      return "PARTNER_SOVEREIGN_CONTROLS_BY_T_SYSTEMS";
    case Workload_Partner.PARTNER_SOVEREIGN_CONTROLS_BY_SIA_MINSAIT:
      return "PARTNER_SOVEREIGN_CONTROLS_BY_SIA_MINSAIT";
    case Workload_Partner.PARTNER_SOVEREIGN_CONTROLS_BY_PSN:
      return "PARTNER_SOVEREIGN_CONTROLS_BY_PSN";
    case Workload_Partner.PARTNER_SOVEREIGN_CONTROLS_BY_CNTXT:
      return "PARTNER_SOVEREIGN_CONTROLS_BY_CNTXT";
    case Workload_Partner.PARTNER_SOVEREIGN_CONTROLS_BY_CNTXT_NO_EKM:
      return "PARTNER_SOVEREIGN_CONTROLS_BY_CNTXT_NO_EKM";
    case Workload_Partner.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Request to list customer workloads. */
export interface ListWorkloadsRequest {
  /**
   * Required. Parent resource
   * Format:
   * `organizations/{organization}/locations/{location}/customers/{customer}`
   */
  parent: string;
  /**
   * The maximum number of workloads to return. The service may return fewer
   * than this value. If unspecified, at most 500 workloads will be returned.
   */
  pageSize: number;
  /**
   * A page token, received from a previous `ListWorkloads` call.
   * Provide this to retrieve the subsequent page.
   */
  pageToken: string;
  /** Optional. Filtering results. */
  filter: string;
  /** Optional. Hint for how to order the results. */
  orderBy: string;
}

/** Response message for list customer workloads requests. */
export interface ListWorkloadsResponse {
  /** List of customer workloads */
  workloads: Workload[];
  /**
   * A token that can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
  /** Locations that could not be reached. */
  unreachable: string[];
}

/** Message for getting a customer workload. */
export interface GetWorkloadRequest {
  /**
   * Required. Format:
   * `organizations/{organization}/locations/{location}/customers/{customer}/workloads/{workload}`
   */
  name: string;
}

/** Container for workload onboarding steps. */
export interface WorkloadOnboardingState {
  /** List of workload onboarding steps. */
  onboardingSteps: WorkloadOnboardingStep[];
}

/** Container for workload onboarding information. */
export interface WorkloadOnboardingStep {
  /** The onboarding step. */
  step: WorkloadOnboardingStep_Step;
  /** The starting time of the onboarding step. */
  startTime:
    | Date
    | undefined;
  /** The completion time of the onboarding step. */
  completionTime:
    | Date
    | undefined;
  /** Output only. The completion state of the onboarding step. */
  completionState: CompletionState;
}

/** Enum for possible onboarding steps. */
export enum WorkloadOnboardingStep_Step {
  /** STEP_UNSPECIFIED - Unspecified step. */
  STEP_UNSPECIFIED = 0,
  /** EKM_PROVISIONED - EKM Provisioned step. */
  EKM_PROVISIONED = 1,
  /** SIGNED_ACCESS_APPROVAL_CONFIGURED - Signed Access Approval step. */
  SIGNED_ACCESS_APPROVAL_CONFIGURED = 2,
  UNRECOGNIZED = -1,
}

export function workloadOnboardingStep_StepFromJSON(object: any): WorkloadOnboardingStep_Step {
  switch (object) {
    case 0:
    case "STEP_UNSPECIFIED":
      return WorkloadOnboardingStep_Step.STEP_UNSPECIFIED;
    case 1:
    case "EKM_PROVISIONED":
      return WorkloadOnboardingStep_Step.EKM_PROVISIONED;
    case 2:
    case "SIGNED_ACCESS_APPROVAL_CONFIGURED":
      return WorkloadOnboardingStep_Step.SIGNED_ACCESS_APPROVAL_CONFIGURED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return WorkloadOnboardingStep_Step.UNRECOGNIZED;
  }
}

export function workloadOnboardingStep_StepToJSON(object: WorkloadOnboardingStep_Step): string {
  switch (object) {
    case WorkloadOnboardingStep_Step.STEP_UNSPECIFIED:
      return "STEP_UNSPECIFIED";
    case WorkloadOnboardingStep_Step.EKM_PROVISIONED:
      return "EKM_PROVISIONED";
    case WorkloadOnboardingStep_Step.SIGNED_ACCESS_APPROVAL_CONFIGURED:
      return "SIGNED_ACCESS_APPROVAL_CONFIGURED";
    case WorkloadOnboardingStep_Step.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseWorkload(): Workload {
  return {
    name: "",
    folderId: Long.ZERO,
    createTime: undefined,
    folder: "",
    workloadOnboardingState: undefined,
    isOnboarded: false,
    keyManagementProjectId: "",
    location: "",
    partner: 0,
  };
}

export const Workload: MessageFns<Workload> = {
  encode(message: Workload, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (!message.folderId.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.folderId.toString());
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(26).fork()).join();
    }
    if (message.folder !== "") {
      writer.uint32(34).string(message.folder);
    }
    if (message.workloadOnboardingState !== undefined) {
      WorkloadOnboardingState.encode(message.workloadOnboardingState, writer.uint32(42).fork()).join();
    }
    if (message.isOnboarded !== false) {
      writer.uint32(48).bool(message.isOnboarded);
    }
    if (message.keyManagementProjectId !== "") {
      writer.uint32(58).string(message.keyManagementProjectId);
    }
    if (message.location !== "") {
      writer.uint32(66).string(message.location);
    }
    if (message.partner !== 0) {
      writer.uint32(72).int32(message.partner);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Workload {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWorkload();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.folderId = Long.fromString(reader.int64().toString());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.folder = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.workloadOnboardingState = WorkloadOnboardingState.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.isOnboarded = reader.bool();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.keyManagementProjectId = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.location = reader.string();
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.partner = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Workload {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      folderId: isSet(object.folderId) ? Long.fromValue(object.folderId) : Long.ZERO,
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      folder: isSet(object.folder) ? globalThis.String(object.folder) : "",
      workloadOnboardingState: isSet(object.workloadOnboardingState)
        ? WorkloadOnboardingState.fromJSON(object.workloadOnboardingState)
        : undefined,
      isOnboarded: isSet(object.isOnboarded) ? globalThis.Boolean(object.isOnboarded) : false,
      keyManagementProjectId: isSet(object.keyManagementProjectId)
        ? globalThis.String(object.keyManagementProjectId)
        : "",
      location: isSet(object.location) ? globalThis.String(object.location) : "",
      partner: isSet(object.partner) ? workload_PartnerFromJSON(object.partner) : 0,
    };
  },

  toJSON(message: Workload): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (!message.folderId.equals(Long.ZERO)) {
      obj.folderId = (message.folderId || Long.ZERO).toString();
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.folder !== "") {
      obj.folder = message.folder;
    }
    if (message.workloadOnboardingState !== undefined) {
      obj.workloadOnboardingState = WorkloadOnboardingState.toJSON(message.workloadOnboardingState);
    }
    if (message.isOnboarded !== false) {
      obj.isOnboarded = message.isOnboarded;
    }
    if (message.keyManagementProjectId !== "") {
      obj.keyManagementProjectId = message.keyManagementProjectId;
    }
    if (message.location !== "") {
      obj.location = message.location;
    }
    if (message.partner !== 0) {
      obj.partner = workload_PartnerToJSON(message.partner);
    }
    return obj;
  },

  create(base?: DeepPartial<Workload>): Workload {
    return Workload.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Workload>): Workload {
    const message = createBaseWorkload();
    message.name = object.name ?? "";
    message.folderId = (object.folderId !== undefined && object.folderId !== null)
      ? Long.fromValue(object.folderId)
      : Long.ZERO;
    message.createTime = object.createTime ?? undefined;
    message.folder = object.folder ?? "";
    message.workloadOnboardingState =
      (object.workloadOnboardingState !== undefined && object.workloadOnboardingState !== null)
        ? WorkloadOnboardingState.fromPartial(object.workloadOnboardingState)
        : undefined;
    message.isOnboarded = object.isOnboarded ?? false;
    message.keyManagementProjectId = object.keyManagementProjectId ?? "";
    message.location = object.location ?? "";
    message.partner = object.partner ?? 0;
    return message;
  },
};

function createBaseListWorkloadsRequest(): ListWorkloadsRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListWorkloadsRequest: MessageFns<ListWorkloadsRequest> = {
  encode(message: ListWorkloadsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListWorkloadsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListWorkloadsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListWorkloadsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListWorkloadsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListWorkloadsRequest>): ListWorkloadsRequest {
    return ListWorkloadsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListWorkloadsRequest>): ListWorkloadsRequest {
    const message = createBaseListWorkloadsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListWorkloadsResponse(): ListWorkloadsResponse {
  return { workloads: [], nextPageToken: "", unreachable: [] };
}

export const ListWorkloadsResponse: MessageFns<ListWorkloadsResponse> = {
  encode(message: ListWorkloadsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.workloads) {
      Workload.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListWorkloadsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListWorkloadsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.workloads.push(Workload.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListWorkloadsResponse {
    return {
      workloads: globalThis.Array.isArray(object?.workloads)
        ? object.workloads.map((e: any) => Workload.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListWorkloadsResponse): unknown {
    const obj: any = {};
    if (message.workloads?.length) {
      obj.workloads = message.workloads.map((e) => Workload.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListWorkloadsResponse>): ListWorkloadsResponse {
    return ListWorkloadsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListWorkloadsResponse>): ListWorkloadsResponse {
    const message = createBaseListWorkloadsResponse();
    message.workloads = object.workloads?.map((e) => Workload.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetWorkloadRequest(): GetWorkloadRequest {
  return { name: "" };
}

export const GetWorkloadRequest: MessageFns<GetWorkloadRequest> = {
  encode(message: GetWorkloadRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetWorkloadRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetWorkloadRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetWorkloadRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetWorkloadRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetWorkloadRequest>): GetWorkloadRequest {
    return GetWorkloadRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetWorkloadRequest>): GetWorkloadRequest {
    const message = createBaseGetWorkloadRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseWorkloadOnboardingState(): WorkloadOnboardingState {
  return { onboardingSteps: [] };
}

export const WorkloadOnboardingState: MessageFns<WorkloadOnboardingState> = {
  encode(message: WorkloadOnboardingState, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.onboardingSteps) {
      WorkloadOnboardingStep.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WorkloadOnboardingState {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWorkloadOnboardingState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.onboardingSteps.push(WorkloadOnboardingStep.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WorkloadOnboardingState {
    return {
      onboardingSteps: globalThis.Array.isArray(object?.onboardingSteps)
        ? object.onboardingSteps.map((e: any) => WorkloadOnboardingStep.fromJSON(e))
        : [],
    };
  },

  toJSON(message: WorkloadOnboardingState): unknown {
    const obj: any = {};
    if (message.onboardingSteps?.length) {
      obj.onboardingSteps = message.onboardingSteps.map((e) => WorkloadOnboardingStep.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<WorkloadOnboardingState>): WorkloadOnboardingState {
    return WorkloadOnboardingState.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<WorkloadOnboardingState>): WorkloadOnboardingState {
    const message = createBaseWorkloadOnboardingState();
    message.onboardingSteps = object.onboardingSteps?.map((e) => WorkloadOnboardingStep.fromPartial(e)) || [];
    return message;
  },
};

function createBaseWorkloadOnboardingStep(): WorkloadOnboardingStep {
  return { step: 0, startTime: undefined, completionTime: undefined, completionState: 0 };
}

export const WorkloadOnboardingStep: MessageFns<WorkloadOnboardingStep> = {
  encode(message: WorkloadOnboardingStep, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.step !== 0) {
      writer.uint32(8).int32(message.step);
    }
    if (message.startTime !== undefined) {
      Timestamp.encode(toTimestamp(message.startTime), writer.uint32(18).fork()).join();
    }
    if (message.completionTime !== undefined) {
      Timestamp.encode(toTimestamp(message.completionTime), writer.uint32(26).fork()).join();
    }
    if (message.completionState !== 0) {
      writer.uint32(32).int32(message.completionState);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WorkloadOnboardingStep {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWorkloadOnboardingStep();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.step = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.startTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.completionTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.completionState = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WorkloadOnboardingStep {
    return {
      step: isSet(object.step) ? workloadOnboardingStep_StepFromJSON(object.step) : 0,
      startTime: isSet(object.startTime) ? fromJsonTimestamp(object.startTime) : undefined,
      completionTime: isSet(object.completionTime) ? fromJsonTimestamp(object.completionTime) : undefined,
      completionState: isSet(object.completionState) ? completionStateFromJSON(object.completionState) : 0,
    };
  },

  toJSON(message: WorkloadOnboardingStep): unknown {
    const obj: any = {};
    if (message.step !== 0) {
      obj.step = workloadOnboardingStep_StepToJSON(message.step);
    }
    if (message.startTime !== undefined) {
      obj.startTime = message.startTime.toISOString();
    }
    if (message.completionTime !== undefined) {
      obj.completionTime = message.completionTime.toISOString();
    }
    if (message.completionState !== 0) {
      obj.completionState = completionStateToJSON(message.completionState);
    }
    return obj;
  },

  create(base?: DeepPartial<WorkloadOnboardingStep>): WorkloadOnboardingStep {
    return WorkloadOnboardingStep.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<WorkloadOnboardingStep>): WorkloadOnboardingStep {
    const message = createBaseWorkloadOnboardingStep();
    message.step = object.step ?? 0;
    message.startTime = object.startTime ?? undefined;
    message.completionTime = object.completionTime ?? undefined;
    message.completionState = object.completionState ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
