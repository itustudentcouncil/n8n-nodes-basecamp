// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/cloudcontrolspartner/v1beta/monitoring.proto

/* eslint-disable */
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { GetViolationRequest, ListViolationsRequest, ListViolationsResponse, Violation } from "./violations.js";

export const protobufPackage = "google.cloud.cloudcontrolspartner.v1beta";

/** Service describing handlers for resources */
export type CloudControlsPartnerMonitoringDefinition = typeof CloudControlsPartnerMonitoringDefinition;
export const CloudControlsPartnerMonitoringDefinition = {
  name: "CloudControlsPartnerMonitoring",
  fullName: "google.cloud.cloudcontrolspartner.v1beta.CloudControlsPartnerMonitoring",
  methods: {
    /**
     * Lists Violations for a workload
     * Callers may also choose to read across multiple Customers or for a single
     * customer as per
     * [AIP-159](https://google.aip.dev/159) by using '-' (the hyphen or dash
     * character) as a wildcard character instead of {customer} & {workload}.
     * Format:
     * `organizations/{organization}/locations/{location}/customers/{customer}/workloads/{workload}`
     */
    listViolations: {
      name: "ListViolations",
      requestType: ListViolationsRequest,
      requestStream: false,
      responseType: ListViolationsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              81,
              18,
              79,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              115,
              47,
              42,
              47,
              119,
              111,
              114,
              107,
              108,
              111,
              97,
              100,
              115,
              47,
              42,
              125,
              47,
              118,
              105,
              111,
              108,
              97,
              116,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets details of a single Violation. */
    getViolation: {
      name: "GetViolation",
      requestType: GetViolationRequest,
      requestStream: false,
      responseType: Violation,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              81,
              18,
              79,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              115,
              47,
              42,
              47,
              119,
              111,
              114,
              107,
              108,
              111,
              97,
              100,
              115,
              47,
              42,
              47,
              118,
              105,
              111,
              108,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface CloudControlsPartnerMonitoringServiceImplementation<CallContextExt = {}> {
  /**
   * Lists Violations for a workload
   * Callers may also choose to read across multiple Customers or for a single
   * customer as per
   * [AIP-159](https://google.aip.dev/159) by using '-' (the hyphen or dash
   * character) as a wildcard character instead of {customer} & {workload}.
   * Format:
   * `organizations/{organization}/locations/{location}/customers/{customer}/workloads/{workload}`
   */
  listViolations(
    request: ListViolationsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListViolationsResponse>>;
  /** Gets details of a single Violation. */
  getViolation(request: GetViolationRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Violation>>;
}

export interface CloudControlsPartnerMonitoringClient<CallOptionsExt = {}> {
  /**
   * Lists Violations for a workload
   * Callers may also choose to read across multiple Customers or for a single
   * customer as per
   * [AIP-159](https://google.aip.dev/159) by using '-' (the hyphen or dash
   * character) as a wildcard character instead of {customer} & {workload}.
   * Format:
   * `organizations/{organization}/locations/{location}/customers/{customer}/workloads/{workload}`
   */
  listViolations(
    request: DeepPartial<ListViolationsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListViolationsResponse>;
  /** Gets details of a single Violation. */
  getViolation(request: DeepPartial<GetViolationRequest>, options?: CallOptions & CallOptionsExt): Promise<Violation>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;
