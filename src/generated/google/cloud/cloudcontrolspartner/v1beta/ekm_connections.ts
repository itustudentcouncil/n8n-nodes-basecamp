// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/cloudcontrolspartner/v1beta/ekm_connections.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.cloud.cloudcontrolspartner.v1beta";

/** The EKM connections associated with a workload */
export interface EkmConnections {
  /**
   * Identifier. Format:
   * `organizations/{organization}/locations/{location}/customers/{customer}/workloads/{workload}/ekmConnections`
   */
  name: string;
  /** The EKM connections associated with the workload */
  ekmConnections: EkmConnection[];
}

/** Request for getting the EKM connections associated with a workload */
export interface GetEkmConnectionsRequest {
  /**
   * Required. Format:
   * `organizations/{organization}/locations/{location}/customers/{customer}/workloads/{workload}/ekmConnections`
   */
  name: string;
}

/** Details about the EKM connection */
export interface EkmConnection {
  /**
   * Resource name of the EKM connection in the format:
   * projects/{project}/locations/{location}/ekmConnections/{ekm_connection}
   */
  connectionName: string;
  /** Output only. The connection state */
  connectionState: EkmConnection_ConnectionState;
  /** The connection error that occurred if any */
  connectionError: EkmConnection_ConnectionError | undefined;
}

/** The EKM connection state. */
export enum EkmConnection_ConnectionState {
  /** CONNECTION_STATE_UNSPECIFIED - Unspecified EKM connection state */
  CONNECTION_STATE_UNSPECIFIED = 0,
  /** AVAILABLE - Available EKM connection state */
  AVAILABLE = 1,
  /** NOT_AVAILABLE - Not available EKM connection state */
  NOT_AVAILABLE = 2,
  /** ERROR - Error EKM connection state */
  ERROR = 3,
  /** PERMISSION_DENIED - Permission denied EKM connection state */
  PERMISSION_DENIED = 4,
  UNRECOGNIZED = -1,
}

export function ekmConnection_ConnectionStateFromJSON(object: any): EkmConnection_ConnectionState {
  switch (object) {
    case 0:
    case "CONNECTION_STATE_UNSPECIFIED":
      return EkmConnection_ConnectionState.CONNECTION_STATE_UNSPECIFIED;
    case 1:
    case "AVAILABLE":
      return EkmConnection_ConnectionState.AVAILABLE;
    case 2:
    case "NOT_AVAILABLE":
      return EkmConnection_ConnectionState.NOT_AVAILABLE;
    case 3:
    case "ERROR":
      return EkmConnection_ConnectionState.ERROR;
    case 4:
    case "PERMISSION_DENIED":
      return EkmConnection_ConnectionState.PERMISSION_DENIED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return EkmConnection_ConnectionState.UNRECOGNIZED;
  }
}

export function ekmConnection_ConnectionStateToJSON(object: EkmConnection_ConnectionState): string {
  switch (object) {
    case EkmConnection_ConnectionState.CONNECTION_STATE_UNSPECIFIED:
      return "CONNECTION_STATE_UNSPECIFIED";
    case EkmConnection_ConnectionState.AVAILABLE:
      return "AVAILABLE";
    case EkmConnection_ConnectionState.NOT_AVAILABLE:
      return "NOT_AVAILABLE";
    case EkmConnection_ConnectionState.ERROR:
      return "ERROR";
    case EkmConnection_ConnectionState.PERMISSION_DENIED:
      return "PERMISSION_DENIED";
    case EkmConnection_ConnectionState.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * Information around the error that occurred if the connection state is
 * anything other than available or unspecified
 */
export interface EkmConnection_ConnectionError {
  /** The error domain for the error */
  errorDomain: string;
  /** The error message for the error */
  errorMessage: string;
}

function createBaseEkmConnections(): EkmConnections {
  return { name: "", ekmConnections: [] };
}

export const EkmConnections: MessageFns<EkmConnections> = {
  encode(message: EkmConnections, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    for (const v of message.ekmConnections) {
      EkmConnection.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EkmConnections {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEkmConnections();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.ekmConnections.push(EkmConnection.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EkmConnections {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      ekmConnections: globalThis.Array.isArray(object?.ekmConnections)
        ? object.ekmConnections.map((e: any) => EkmConnection.fromJSON(e))
        : [],
    };
  },

  toJSON(message: EkmConnections): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.ekmConnections?.length) {
      obj.ekmConnections = message.ekmConnections.map((e) => EkmConnection.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<EkmConnections>): EkmConnections {
    return EkmConnections.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EkmConnections>): EkmConnections {
    const message = createBaseEkmConnections();
    message.name = object.name ?? "";
    message.ekmConnections = object.ekmConnections?.map((e) => EkmConnection.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetEkmConnectionsRequest(): GetEkmConnectionsRequest {
  return { name: "" };
}

export const GetEkmConnectionsRequest: MessageFns<GetEkmConnectionsRequest> = {
  encode(message: GetEkmConnectionsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetEkmConnectionsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetEkmConnectionsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetEkmConnectionsRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetEkmConnectionsRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetEkmConnectionsRequest>): GetEkmConnectionsRequest {
    return GetEkmConnectionsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetEkmConnectionsRequest>): GetEkmConnectionsRequest {
    const message = createBaseGetEkmConnectionsRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseEkmConnection(): EkmConnection {
  return { connectionName: "", connectionState: 0, connectionError: undefined };
}

export const EkmConnection: MessageFns<EkmConnection> = {
  encode(message: EkmConnection, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.connectionName !== "") {
      writer.uint32(10).string(message.connectionName);
    }
    if (message.connectionState !== 0) {
      writer.uint32(16).int32(message.connectionState);
    }
    if (message.connectionError !== undefined) {
      EkmConnection_ConnectionError.encode(message.connectionError, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EkmConnection {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEkmConnection();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.connectionName = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.connectionState = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.connectionError = EkmConnection_ConnectionError.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EkmConnection {
    return {
      connectionName: isSet(object.connectionName) ? globalThis.String(object.connectionName) : "",
      connectionState: isSet(object.connectionState)
        ? ekmConnection_ConnectionStateFromJSON(object.connectionState)
        : 0,
      connectionError: isSet(object.connectionError)
        ? EkmConnection_ConnectionError.fromJSON(object.connectionError)
        : undefined,
    };
  },

  toJSON(message: EkmConnection): unknown {
    const obj: any = {};
    if (message.connectionName !== "") {
      obj.connectionName = message.connectionName;
    }
    if (message.connectionState !== 0) {
      obj.connectionState = ekmConnection_ConnectionStateToJSON(message.connectionState);
    }
    if (message.connectionError !== undefined) {
      obj.connectionError = EkmConnection_ConnectionError.toJSON(message.connectionError);
    }
    return obj;
  },

  create(base?: DeepPartial<EkmConnection>): EkmConnection {
    return EkmConnection.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EkmConnection>): EkmConnection {
    const message = createBaseEkmConnection();
    message.connectionName = object.connectionName ?? "";
    message.connectionState = object.connectionState ?? 0;
    message.connectionError = (object.connectionError !== undefined && object.connectionError !== null)
      ? EkmConnection_ConnectionError.fromPartial(object.connectionError)
      : undefined;
    return message;
  },
};

function createBaseEkmConnection_ConnectionError(): EkmConnection_ConnectionError {
  return { errorDomain: "", errorMessage: "" };
}

export const EkmConnection_ConnectionError: MessageFns<EkmConnection_ConnectionError> = {
  encode(message: EkmConnection_ConnectionError, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.errorDomain !== "") {
      writer.uint32(10).string(message.errorDomain);
    }
    if (message.errorMessage !== "") {
      writer.uint32(18).string(message.errorMessage);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EkmConnection_ConnectionError {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEkmConnection_ConnectionError();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.errorDomain = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EkmConnection_ConnectionError {
    return {
      errorDomain: isSet(object.errorDomain) ? globalThis.String(object.errorDomain) : "",
      errorMessage: isSet(object.errorMessage) ? globalThis.String(object.errorMessage) : "",
    };
  },

  toJSON(message: EkmConnection_ConnectionError): unknown {
    const obj: any = {};
    if (message.errorDomain !== "") {
      obj.errorDomain = message.errorDomain;
    }
    if (message.errorMessage !== "") {
      obj.errorMessage = message.errorMessage;
    }
    return obj;
  },

  create(base?: DeepPartial<EkmConnection_ConnectionError>): EkmConnection_ConnectionError {
    return EkmConnection_ConnectionError.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EkmConnection_ConnectionError>): EkmConnection_ConnectionError {
    const message = createBaseEkmConnection_ConnectionError();
    message.errorDomain = object.errorDomain ?? "";
    message.errorMessage = object.errorMessage ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
