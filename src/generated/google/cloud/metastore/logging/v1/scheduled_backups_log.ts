// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/metastore/logging/v1/scheduled_backups_log.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../../protobuf/timestamp.js";

export const protobufPackage = "google.cloud.metastore.logging.v1";

/** Cloud Logging log schema for scheduled backup events. */
export interface ScheduledBackupLogEntry {
  /** The ID of the backup. */
  backupId: string;
  /**
   * The relative resource name of a Metastore service in the form of
   * `projects/{project_id}/locations/{location_id}/services/{service_id}`
   */
  service: string;
  /** Timestamp when the backup was started. */
  startTime:
    | Date
    | undefined;
  /** Timestamp when the backup was completed. */
  endTime:
    | Date
    | undefined;
  /** Output only. The current state of the backup. */
  state: ScheduledBackupLogEntry_State;
  /** Size of the backup data in bytes. */
  backupSizeBytes: Long;
  /**
   * A Cloud Storage URI of a folder, in the format
   * `gs://<bucket_name>/<path_inside_bucket>`.
   */
  backupLocation: string;
  /** Message that provides (optional) details about the backup. */
  message: string;
}

/** The current state of the backup. */
export enum ScheduledBackupLogEntry_State {
  /** STATE_UNSPECIFIED - The state of the backup is unknown. */
  STATE_UNSPECIFIED = 0,
  /** IN_PROGRESS - The backup is in progress. */
  IN_PROGRESS = 1,
  /** SUCCEEDED - The backup completed. */
  SUCCEEDED = 2,
  /** FAILED - The backup failed. */
  FAILED = 3,
  UNRECOGNIZED = -1,
}

export function scheduledBackupLogEntry_StateFromJSON(object: any): ScheduledBackupLogEntry_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return ScheduledBackupLogEntry_State.STATE_UNSPECIFIED;
    case 1:
    case "IN_PROGRESS":
      return ScheduledBackupLogEntry_State.IN_PROGRESS;
    case 2:
    case "SUCCEEDED":
      return ScheduledBackupLogEntry_State.SUCCEEDED;
    case 3:
    case "FAILED":
      return ScheduledBackupLogEntry_State.FAILED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ScheduledBackupLogEntry_State.UNRECOGNIZED;
  }
}

export function scheduledBackupLogEntry_StateToJSON(object: ScheduledBackupLogEntry_State): string {
  switch (object) {
    case ScheduledBackupLogEntry_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case ScheduledBackupLogEntry_State.IN_PROGRESS:
      return "IN_PROGRESS";
    case ScheduledBackupLogEntry_State.SUCCEEDED:
      return "SUCCEEDED";
    case ScheduledBackupLogEntry_State.FAILED:
      return "FAILED";
    case ScheduledBackupLogEntry_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseScheduledBackupLogEntry(): ScheduledBackupLogEntry {
  return {
    backupId: "",
    service: "",
    startTime: undefined,
    endTime: undefined,
    state: 0,
    backupSizeBytes: Long.ZERO,
    backupLocation: "",
    message: "",
  };
}

export const ScheduledBackupLogEntry: MessageFns<ScheduledBackupLogEntry> = {
  encode(message: ScheduledBackupLogEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.backupId !== "") {
      writer.uint32(10).string(message.backupId);
    }
    if (message.service !== "") {
      writer.uint32(18).string(message.service);
    }
    if (message.startTime !== undefined) {
      Timestamp.encode(toTimestamp(message.startTime), writer.uint32(26).fork()).join();
    }
    if (message.endTime !== undefined) {
      Timestamp.encode(toTimestamp(message.endTime), writer.uint32(34).fork()).join();
    }
    if (message.state !== 0) {
      writer.uint32(40).int32(message.state);
    }
    if (!message.backupSizeBytes.equals(Long.ZERO)) {
      writer.uint32(48).int64(message.backupSizeBytes.toString());
    }
    if (message.backupLocation !== "") {
      writer.uint32(58).string(message.backupLocation);
    }
    if (message.message !== "") {
      writer.uint32(66).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ScheduledBackupLogEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseScheduledBackupLogEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.backupId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.service = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.startTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.endTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.backupSizeBytes = Long.fromString(reader.int64().toString());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.backupLocation = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.message = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ScheduledBackupLogEntry {
    return {
      backupId: isSet(object.backupId) ? globalThis.String(object.backupId) : "",
      service: isSet(object.service) ? globalThis.String(object.service) : "",
      startTime: isSet(object.startTime) ? fromJsonTimestamp(object.startTime) : undefined,
      endTime: isSet(object.endTime) ? fromJsonTimestamp(object.endTime) : undefined,
      state: isSet(object.state) ? scheduledBackupLogEntry_StateFromJSON(object.state) : 0,
      backupSizeBytes: isSet(object.backupSizeBytes) ? Long.fromValue(object.backupSizeBytes) : Long.ZERO,
      backupLocation: isSet(object.backupLocation) ? globalThis.String(object.backupLocation) : "",
      message: isSet(object.message) ? globalThis.String(object.message) : "",
    };
  },

  toJSON(message: ScheduledBackupLogEntry): unknown {
    const obj: any = {};
    if (message.backupId !== "") {
      obj.backupId = message.backupId;
    }
    if (message.service !== "") {
      obj.service = message.service;
    }
    if (message.startTime !== undefined) {
      obj.startTime = message.startTime.toISOString();
    }
    if (message.endTime !== undefined) {
      obj.endTime = message.endTime.toISOString();
    }
    if (message.state !== 0) {
      obj.state = scheduledBackupLogEntry_StateToJSON(message.state);
    }
    if (!message.backupSizeBytes.equals(Long.ZERO)) {
      obj.backupSizeBytes = (message.backupSizeBytes || Long.ZERO).toString();
    }
    if (message.backupLocation !== "") {
      obj.backupLocation = message.backupLocation;
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create(base?: DeepPartial<ScheduledBackupLogEntry>): ScheduledBackupLogEntry {
    return ScheduledBackupLogEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ScheduledBackupLogEntry>): ScheduledBackupLogEntry {
    const message = createBaseScheduledBackupLogEntry();
    message.backupId = object.backupId ?? "";
    message.service = object.service ?? "";
    message.startTime = object.startTime ?? undefined;
    message.endTime = object.endTime ?? undefined;
    message.state = object.state ?? 0;
    message.backupSizeBytes = (object.backupSizeBytes !== undefined && object.backupSizeBytes !== null)
      ? Long.fromValue(object.backupSizeBytes)
      : Long.ZERO;
    message.backupLocation = object.backupLocation ?? "";
    message.message = object.message ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
