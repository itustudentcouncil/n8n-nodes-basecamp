// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/retail/v2beta/model_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../longrunning/operations.js";
import { Empty } from "../../../protobuf/empty.js";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { Model } from "./model.js";

export const protobufPackage = "google.cloud.retail.v2beta";

/** Request for creating a model. */
export interface CreateModelRequest {
  /**
   * Required. The parent resource under which to create the model. Format:
   * `projects/{project_number}/locations/{location_id}/catalogs/{catalog_id}`
   */
  parent: string;
  /**
   * Required. The payload of the [Model][google.cloud.retail.v2beta.Model]  to
   * create.
   */
  model:
    | Model
    | undefined;
  /**
   * Optional. Whether to run a dry run to validate the request (without
   * actually creating the model).
   */
  dryRun: boolean;
}

/** Request for updating an existing model. */
export interface UpdateModelRequest {
  /**
   * Required. The body of the updated
   * [Model][google.cloud.retail.v2beta.Model].
   */
  model:
    | Model
    | undefined;
  /**
   * Optional. Indicates which fields in the provided 'model' to
   * update. If not set, by default updates all fields.
   */
  updateMask: string[] | undefined;
}

/** Request for getting a model. */
export interface GetModelRequest {
  /**
   * Required. The resource name of the
   * [Model][google.cloud.retail.v2beta.Model] to get. Format:
   * `projects/{project_number}/locations/{location_id}/catalogs/{catalog}/models/{model_id}`
   */
  name: string;
}

/** Request for pausing training of a model. */
export interface PauseModelRequest {
  /**
   * Required. The name of the model to pause.
   * Format:
   * `projects/{project_number}/locations/{location_id}/catalogs/{catalog_id}/models/{model_id}`
   */
  name: string;
}

/** Request for resuming training of a model. */
export interface ResumeModelRequest {
  /**
   * Required. The name of the model to resume.
   * Format:
   * `projects/{project_number}/locations/{location_id}/catalogs/{catalog_id}/models/{model_id}`
   */
  name: string;
}

/** Request for listing models associated with a resource. */
export interface ListModelsRequest {
  /**
   * Required. The parent for which to list models.
   * Format:
   * `projects/{project_number}/locations/{location_id}/catalogs/{catalog_id}`
   */
  parent: string;
  /**
   * Optional. Maximum number of results to return. If unspecified, defaults
   * to 50. Max allowed value is 1000.
   */
  pageSize: number;
  /**
   * Optional. A page token, received from a previous `ListModels`
   * call. Provide this to retrieve the subsequent page.
   */
  pageToken: string;
}

/** Request for deleting a model. */
export interface DeleteModelRequest {
  /**
   * Required. The resource name of the
   * [Model][google.cloud.retail.v2beta.Model] to delete. Format:
   * `projects/{project_number}/locations/{location_id}/catalogs/{catalog_id}/models/{model_id}`
   */
  name: string;
}

/** Response to a ListModelRequest. */
export interface ListModelsResponse {
  /** List of Models. */
  models: Model[];
  /** Pagination token, if not returned indicates the last page. */
  nextPageToken: string;
}

/**
 * Request to manually start a tuning process now (instead of waiting for
 * the periodically scheduled tuning to happen).
 */
export interface TuneModelRequest {
  /**
   * Required. The resource name of the model to tune.
   * Format:
   * `projects/{project_number}/locations/{location_id}/catalogs/{catalog_id}/models/{model_id}`
   */
  name: string;
}

/** Metadata associated with a create operation. */
export interface CreateModelMetadata {
  /**
   * The resource name of the model that this create applies to.
   * Format:
   * `projects/{project_number}/locations/{location_id}/catalogs/{catalog_id}/models/{model_id}`
   */
  model: string;
}

/** Metadata associated with a tune operation. */
export interface TuneModelMetadata {
  /**
   * The resource name of the model that this tune applies to.
   * Format:
   * `projects/{project_number}/locations/{location_id}/catalogs/{catalog_id}/models/{model_id}`
   */
  model: string;
}

/** Response associated with a tune operation. */
export interface TuneModelResponse {
}

function createBaseCreateModelRequest(): CreateModelRequest {
  return { parent: "", model: undefined, dryRun: false };
}

export const CreateModelRequest: MessageFns<CreateModelRequest> = {
  encode(message: CreateModelRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.model !== undefined) {
      Model.encode(message.model, writer.uint32(18).fork()).join();
    }
    if (message.dryRun !== false) {
      writer.uint32(24).bool(message.dryRun);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateModelRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateModelRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.model = Model.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.dryRun = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateModelRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      model: isSet(object.model) ? Model.fromJSON(object.model) : undefined,
      dryRun: isSet(object.dryRun) ? globalThis.Boolean(object.dryRun) : false,
    };
  },

  toJSON(message: CreateModelRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.model !== undefined) {
      obj.model = Model.toJSON(message.model);
    }
    if (message.dryRun !== false) {
      obj.dryRun = message.dryRun;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateModelRequest>): CreateModelRequest {
    return CreateModelRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateModelRequest>): CreateModelRequest {
    const message = createBaseCreateModelRequest();
    message.parent = object.parent ?? "";
    message.model = (object.model !== undefined && object.model !== null) ? Model.fromPartial(object.model) : undefined;
    message.dryRun = object.dryRun ?? false;
    return message;
  },
};

function createBaseUpdateModelRequest(): UpdateModelRequest {
  return { model: undefined, updateMask: undefined };
}

export const UpdateModelRequest: MessageFns<UpdateModelRequest> = {
  encode(message: UpdateModelRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.model !== undefined) {
      Model.encode(message.model, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateModelRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateModelRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.model = Model.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateModelRequest {
    return {
      model: isSet(object.model) ? Model.fromJSON(object.model) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateModelRequest): unknown {
    const obj: any = {};
    if (message.model !== undefined) {
      obj.model = Model.toJSON(message.model);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateModelRequest>): UpdateModelRequest {
    return UpdateModelRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateModelRequest>): UpdateModelRequest {
    const message = createBaseUpdateModelRequest();
    message.model = (object.model !== undefined && object.model !== null) ? Model.fromPartial(object.model) : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseGetModelRequest(): GetModelRequest {
  return { name: "" };
}

export const GetModelRequest: MessageFns<GetModelRequest> = {
  encode(message: GetModelRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetModelRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetModelRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetModelRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetModelRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetModelRequest>): GetModelRequest {
    return GetModelRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetModelRequest>): GetModelRequest {
    const message = createBaseGetModelRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBasePauseModelRequest(): PauseModelRequest {
  return { name: "" };
}

export const PauseModelRequest: MessageFns<PauseModelRequest> = {
  encode(message: PauseModelRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PauseModelRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePauseModelRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PauseModelRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: PauseModelRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<PauseModelRequest>): PauseModelRequest {
    return PauseModelRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PauseModelRequest>): PauseModelRequest {
    const message = createBasePauseModelRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseResumeModelRequest(): ResumeModelRequest {
  return { name: "" };
}

export const ResumeModelRequest: MessageFns<ResumeModelRequest> = {
  encode(message: ResumeModelRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResumeModelRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResumeModelRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResumeModelRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: ResumeModelRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<ResumeModelRequest>): ResumeModelRequest {
    return ResumeModelRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ResumeModelRequest>): ResumeModelRequest {
    const message = createBaseResumeModelRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListModelsRequest(): ListModelsRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListModelsRequest: MessageFns<ListModelsRequest> = {
  encode(message: ListModelsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListModelsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListModelsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListModelsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListModelsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListModelsRequest>): ListModelsRequest {
    return ListModelsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListModelsRequest>): ListModelsRequest {
    const message = createBaseListModelsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseDeleteModelRequest(): DeleteModelRequest {
  return { name: "" };
}

export const DeleteModelRequest: MessageFns<DeleteModelRequest> = {
  encode(message: DeleteModelRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteModelRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteModelRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteModelRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteModelRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteModelRequest>): DeleteModelRequest {
    return DeleteModelRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteModelRequest>): DeleteModelRequest {
    const message = createBaseDeleteModelRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListModelsResponse(): ListModelsResponse {
  return { models: [], nextPageToken: "" };
}

export const ListModelsResponse: MessageFns<ListModelsResponse> = {
  encode(message: ListModelsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.models) {
      Model.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListModelsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListModelsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.models.push(Model.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListModelsResponse {
    return {
      models: globalThis.Array.isArray(object?.models) ? object.models.map((e: any) => Model.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListModelsResponse): unknown {
    const obj: any = {};
    if (message.models?.length) {
      obj.models = message.models.map((e) => Model.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListModelsResponse>): ListModelsResponse {
    return ListModelsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListModelsResponse>): ListModelsResponse {
    const message = createBaseListModelsResponse();
    message.models = object.models?.map((e) => Model.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseTuneModelRequest(): TuneModelRequest {
  return { name: "" };
}

export const TuneModelRequest: MessageFns<TuneModelRequest> = {
  encode(message: TuneModelRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TuneModelRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTuneModelRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TuneModelRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: TuneModelRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<TuneModelRequest>): TuneModelRequest {
    return TuneModelRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TuneModelRequest>): TuneModelRequest {
    const message = createBaseTuneModelRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateModelMetadata(): CreateModelMetadata {
  return { model: "" };
}

export const CreateModelMetadata: MessageFns<CreateModelMetadata> = {
  encode(message: CreateModelMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.model !== "") {
      writer.uint32(10).string(message.model);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateModelMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateModelMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.model = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateModelMetadata {
    return { model: isSet(object.model) ? globalThis.String(object.model) : "" };
  },

  toJSON(message: CreateModelMetadata): unknown {
    const obj: any = {};
    if (message.model !== "") {
      obj.model = message.model;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateModelMetadata>): CreateModelMetadata {
    return CreateModelMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateModelMetadata>): CreateModelMetadata {
    const message = createBaseCreateModelMetadata();
    message.model = object.model ?? "";
    return message;
  },
};

function createBaseTuneModelMetadata(): TuneModelMetadata {
  return { model: "" };
}

export const TuneModelMetadata: MessageFns<TuneModelMetadata> = {
  encode(message: TuneModelMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.model !== "") {
      writer.uint32(10).string(message.model);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TuneModelMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTuneModelMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.model = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TuneModelMetadata {
    return { model: isSet(object.model) ? globalThis.String(object.model) : "" };
  },

  toJSON(message: TuneModelMetadata): unknown {
    const obj: any = {};
    if (message.model !== "") {
      obj.model = message.model;
    }
    return obj;
  },

  create(base?: DeepPartial<TuneModelMetadata>): TuneModelMetadata {
    return TuneModelMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TuneModelMetadata>): TuneModelMetadata {
    const message = createBaseTuneModelMetadata();
    message.model = object.model ?? "";
    return message;
  },
};

function createBaseTuneModelResponse(): TuneModelResponse {
  return {};
}

export const TuneModelResponse: MessageFns<TuneModelResponse> = {
  encode(_: TuneModelResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TuneModelResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTuneModelResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): TuneModelResponse {
    return {};
  },

  toJSON(_: TuneModelResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<TuneModelResponse>): TuneModelResponse {
    return TuneModelResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<TuneModelResponse>): TuneModelResponse {
    const message = createBaseTuneModelResponse();
    return message;
  },
};

/**
 * Service for performing CRUD operations on models.
 * Recommendation models contain all the metadata necessary to generate a set of
 * models for the `Predict()` API. A model is queried
 * indirectly via a ServingConfig, which associates a model with a
 * given Placement (e.g. Frequently Bought Together on Home Page).
 *
 * This service allows you to do the following:
 *
 * * Initiate training of a model.
 * * Pause training of an existing model.
 * * List all the available models along with their metadata.
 * * Control their tuning schedule.
 */
export type ModelServiceDefinition = typeof ModelServiceDefinition;
export const ModelServiceDefinition = {
  name: "ModelService",
  fullName: "google.cloud.retail.v2beta.ModelService",
  methods: {
    /** Creates a new model. */
    createModel: {
      name: "CreateModel",
      requestType: CreateModelRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              82,
              10,
              32,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              114,
              101,
              116,
              97,
              105,
              108,
              46,
              118,
              50,
              98,
              101,
              116,
              97,
              46,
              77,
              111,
              100,
              101,
              108,
              18,
              46,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              114,
              101,
              116,
              97,
              105,
              108,
              46,
              118,
              50,
              98,
              101,
              116,
              97,
              46,
              67,
              114,
              101,
              97,
              116,
              101,
              77,
              111,
              100,
              101,
              108,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([12, 112, 97, 114, 101, 110, 116, 44, 109, 111, 100, 101, 108])],
          578365826: [
            Buffer.from([
              66,
              58,
              5,
              109,
              111,
              100,
              101,
              108,
              34,
              57,
              47,
              118,
              50,
              98,
              101,
              116,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              115,
              47,
              42,
              125,
              47,
              109,
              111,
              100,
              101,
              108,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets a model. */
    getModel: {
      name: "GetModel",
      requestType: GetModelRequest,
      requestStream: false,
      responseType: Model,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              59,
              18,
              57,
              47,
              118,
              50,
              98,
              101,
              116,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              115,
              47,
              42,
              47,
              109,
              111,
              100,
              101,
              108,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Pauses the training of an existing model. */
    pauseModel: {
      name: "PauseModel",
      requestType: PauseModelRequest,
      requestStream: false,
      responseType: Model,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              68,
              58,
              1,
              42,
              34,
              63,
              47,
              118,
              50,
              98,
              101,
              116,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              115,
              47,
              42,
              47,
              109,
              111,
              100,
              101,
              108,
              115,
              47,
              42,
              125,
              58,
              112,
              97,
              117,
              115,
              101,
            ]),
          ],
        },
      },
    },
    /** Resumes the training of an existing model. */
    resumeModel: {
      name: "ResumeModel",
      requestType: ResumeModelRequest,
      requestStream: false,
      responseType: Model,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              69,
              58,
              1,
              42,
              34,
              64,
              47,
              118,
              50,
              98,
              101,
              116,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              115,
              47,
              42,
              47,
              109,
              111,
              100,
              101,
              108,
              115,
              47,
              42,
              125,
              58,
              114,
              101,
              115,
              117,
              109,
              101,
            ]),
          ],
        },
      },
    },
    /** Deletes an existing model. */
    deleteModel: {
      name: "DeleteModel",
      requestType: DeleteModelRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              59,
              42,
              57,
              47,
              118,
              50,
              98,
              101,
              116,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              115,
              47,
              42,
              47,
              109,
              111,
              100,
              101,
              108,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists all the models linked to this event store. */
    listModels: {
      name: "ListModels",
      requestType: ListModelsRequest,
      requestStream: false,
      responseType: ListModelsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              59,
              18,
              57,
              47,
              118,
              50,
              98,
              101,
              116,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              115,
              47,
              42,
              125,
              47,
              109,
              111,
              100,
              101,
              108,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Update of model metadata. Only fields that
     * currently can be updated are: `filtering_option` and
     * `periodic_tuning_state`.
     * If other values are provided, this API method ignores them.
     */
    updateModel: {
      name: "UpdateModel",
      requestType: UpdateModelRequest,
      requestStream: false,
      responseType: Model,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([17, 109, 111, 100, 101, 108, 44, 117, 112, 100, 97, 116, 101, 95, 109, 97, 115, 107])],
          578365826: [
            Buffer.from([
              72,
              58,
              5,
              109,
              111,
              100,
              101,
              108,
              50,
              63,
              47,
              118,
              50,
              98,
              101,
              116,
              97,
              47,
              123,
              109,
              111,
              100,
              101,
              108,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              115,
              47,
              42,
              47,
              109,
              111,
              100,
              101,
              108,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Tunes an existing model. */
    tuneModel: {
      name: "TuneModel",
      requestType: TuneModelRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              92,
              10,
              44,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              114,
              101,
              116,
              97,
              105,
              108,
              46,
              118,
              50,
              98,
              101,
              116,
              97,
              46,
              84,
              117,
              110,
              101,
              77,
              111,
              100,
              101,
              108,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              18,
              44,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              114,
              101,
              116,
              97,
              105,
              108,
              46,
              118,
              50,
              98,
              101,
              116,
              97,
              46,
              84,
              117,
              110,
              101,
              77,
              111,
              100,
              101,
              108,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              67,
              58,
              1,
              42,
              34,
              62,
              47,
              118,
              50,
              98,
              101,
              116,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              115,
              47,
              42,
              47,
              109,
              111,
              100,
              101,
              108,
              115,
              47,
              42,
              125,
              58,
              116,
              117,
              110,
              101,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface ModelServiceImplementation<CallContextExt = {}> {
  /** Creates a new model. */
  createModel(request: CreateModelRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /** Gets a model. */
  getModel(request: GetModelRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Model>>;
  /** Pauses the training of an existing model. */
  pauseModel(request: PauseModelRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Model>>;
  /** Resumes the training of an existing model. */
  resumeModel(request: ResumeModelRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Model>>;
  /** Deletes an existing model. */
  deleteModel(request: DeleteModelRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
  /** Lists all the models linked to this event store. */
  listModels(
    request: ListModelsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListModelsResponse>>;
  /**
   * Update of model metadata. Only fields that
   * currently can be updated are: `filtering_option` and
   * `periodic_tuning_state`.
   * If other values are provided, this API method ignores them.
   */
  updateModel(request: UpdateModelRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Model>>;
  /** Tunes an existing model. */
  tuneModel(request: TuneModelRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
}

export interface ModelServiceClient<CallOptionsExt = {}> {
  /** Creates a new model. */
  createModel(request: DeepPartial<CreateModelRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /** Gets a model. */
  getModel(request: DeepPartial<GetModelRequest>, options?: CallOptions & CallOptionsExt): Promise<Model>;
  /** Pauses the training of an existing model. */
  pauseModel(request: DeepPartial<PauseModelRequest>, options?: CallOptions & CallOptionsExt): Promise<Model>;
  /** Resumes the training of an existing model. */
  resumeModel(request: DeepPartial<ResumeModelRequest>, options?: CallOptions & CallOptionsExt): Promise<Model>;
  /** Deletes an existing model. */
  deleteModel(request: DeepPartial<DeleteModelRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
  /** Lists all the models linked to this event store. */
  listModels(
    request: DeepPartial<ListModelsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListModelsResponse>;
  /**
   * Update of model metadata. Only fields that
   * currently can be updated are: `filtering_option` and
   * `periodic_tuning_state`.
   * If other values are provided, this API method ignores them.
   */
  updateModel(request: DeepPartial<UpdateModelRequest>, options?: CallOptions & CallOptionsExt): Promise<Model>;
  /** Tunes an existing model. */
  tuneModel(request: DeepPartial<TuneModelRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
