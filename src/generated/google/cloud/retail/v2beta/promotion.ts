// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/retail/v2beta/promotion.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.cloud.retail.v2beta";

/** Promotion information. */
export interface Promotion {
  /**
   * ID of the promotion. For example, "free gift".
   *
   * The value must be a UTF-8 encoded string with a length limit of 128
   * characters, and match the pattern: `[a-zA-Z][a-zA-Z0-9_]*`. For example,
   * id0LikeThis or ID_1_LIKE_THIS. Otherwise, an INVALID_ARGUMENT error is
   * returned.
   *
   * Corresponds to Google Merchant Center property
   * [promotion_id](https://support.google.com/merchants/answer/7050148).
   */
  promotionId: string;
}

function createBasePromotion(): Promotion {
  return { promotionId: "" };
}

export const Promotion: MessageFns<Promotion> = {
  encode(message: Promotion, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.promotionId !== "") {
      writer.uint32(10).string(message.promotionId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Promotion {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePromotion();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.promotionId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Promotion {
    return { promotionId: isSet(object.promotionId) ? globalThis.String(object.promotionId) : "" };
  },

  toJSON(message: Promotion): unknown {
    const obj: any = {};
    if (message.promotionId !== "") {
      obj.promotionId = message.promotionId;
    }
    return obj;
  },

  create(base?: DeepPartial<Promotion>): Promotion {
    return Promotion.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Promotion>): Promotion {
    const message = createBasePromotion();
    message.promotionId = object.promotionId ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
