// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/retail/v2alpha/user_event_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { HttpBody } from "../../../api/httpbody.js";
import { Operation } from "../../../longrunning/operations.js";
import { ImportUserEventsRequest } from "./import_config.js";
import { PurgeUserEventsRequest } from "./purge_config.js";
import { UserEvent } from "./user_event.js";

export const protobufPackage = "google.cloud.retail.v2alpha";

/** Request message for WriteUserEvent method. */
export interface WriteUserEventRequest {
  /**
   * Required. The parent catalog resource name, such as
   * `projects/1234/locations/global/catalogs/default_catalog`.
   */
  parent: string;
  /** Required. User event to write. */
  userEvent:
    | UserEvent
    | undefined;
  /**
   * If set to true, the user event will be written asynchronously after
   * validation, and the API will respond without waiting for the write.
   * Therefore, silent failures can occur even if the API returns success. In
   * case of silent failures, error messages can be found in Stackdriver logs.
   */
  writeAsync: boolean;
}

/** Request message for CollectUserEvent method. */
export interface CollectUserEventRequest {
  /**
   * The prebuilt rule name that can convert a specific type of raw_json.
   * For example: "ga4_bq" rule for the GA4 user event schema.
   */
  prebuiltRule?:
    | string
    | undefined;
  /**
   * Required. The parent catalog name, such as
   * `projects/1234/locations/global/catalogs/default_catalog`.
   */
  parent: string;
  /**
   * Required. URL encoded UserEvent proto with a length limit of 2,000,000
   * characters.
   */
  userEvent: string;
  /**
   * The URL including cgi-parameters but excluding the hash fragment with a
   * length limit of 5,000 characters. This is often more useful than the
   * referer URL, because many browsers only send the domain for 3rd party
   * requests.
   */
  uri: string;
  /**
   * The event timestamp in milliseconds. This prevents browser caching of
   * otherwise identical get requests. The name is abbreviated to reduce the
   * payload bytes.
   */
  ets: Long;
  /**
   * An arbitrary serialized JSON string that contains necessary information
   * that can comprise a user event. When this field is specified, the
   * user_event field will be ignored. Note: line-delimited JSON is not
   * supported, a single JSON only.
   */
  rawJson: string;
}

/** Request message for RejoinUserEvents method. */
export interface RejoinUserEventsRequest {
  /**
   * Required. The parent catalog resource name, such as
   * `projects/1234/locations/global/catalogs/default_catalog`.
   */
  parent: string;
  /**
   * The type of the user event rejoin to define the scope and range of the user
   * events to be rejoined with the latest product catalog. Defaults to
   * `USER_EVENT_REJOIN_SCOPE_UNSPECIFIED` if this field is not set, or set to
   * an invalid integer value.
   */
  userEventRejoinScope: RejoinUserEventsRequest_UserEventRejoinScope;
}

/**
 * The scope of user events to be rejoined with the latest product catalog.
 * If the rejoining aims at reducing number of unjoined events, set
 * `UserEventRejoinScope` to `UNJOINED_EVENTS`.
 * If the rejoining aims at correcting product catalog information in joined
 * events, set `UserEventRejoinScope` to `JOINED_EVENTS`.
 * If all events needs to be rejoined, set `UserEventRejoinScope` to
 * `USER_EVENT_REJOIN_SCOPE_UNSPECIFIED`.
 */
export enum RejoinUserEventsRequest_UserEventRejoinScope {
  /**
   * USER_EVENT_REJOIN_SCOPE_UNSPECIFIED - Rejoin all events with the latest product catalog, including both joined
   * events and unjoined events.
   */
  USER_EVENT_REJOIN_SCOPE_UNSPECIFIED = 0,
  /** JOINED_EVENTS - Only rejoin joined events with the latest product catalog. */
  JOINED_EVENTS = 1,
  /** UNJOINED_EVENTS - Only rejoin unjoined events with the latest product catalog. */
  UNJOINED_EVENTS = 2,
  UNRECOGNIZED = -1,
}

export function rejoinUserEventsRequest_UserEventRejoinScopeFromJSON(
  object: any,
): RejoinUserEventsRequest_UserEventRejoinScope {
  switch (object) {
    case 0:
    case "USER_EVENT_REJOIN_SCOPE_UNSPECIFIED":
      return RejoinUserEventsRequest_UserEventRejoinScope.USER_EVENT_REJOIN_SCOPE_UNSPECIFIED;
    case 1:
    case "JOINED_EVENTS":
      return RejoinUserEventsRequest_UserEventRejoinScope.JOINED_EVENTS;
    case 2:
    case "UNJOINED_EVENTS":
      return RejoinUserEventsRequest_UserEventRejoinScope.UNJOINED_EVENTS;
    case -1:
    case "UNRECOGNIZED":
    default:
      return RejoinUserEventsRequest_UserEventRejoinScope.UNRECOGNIZED;
  }
}

export function rejoinUserEventsRequest_UserEventRejoinScopeToJSON(
  object: RejoinUserEventsRequest_UserEventRejoinScope,
): string {
  switch (object) {
    case RejoinUserEventsRequest_UserEventRejoinScope.USER_EVENT_REJOIN_SCOPE_UNSPECIFIED:
      return "USER_EVENT_REJOIN_SCOPE_UNSPECIFIED";
    case RejoinUserEventsRequest_UserEventRejoinScope.JOINED_EVENTS:
      return "JOINED_EVENTS";
    case RejoinUserEventsRequest_UserEventRejoinScope.UNJOINED_EVENTS:
      return "UNJOINED_EVENTS";
    case RejoinUserEventsRequest_UserEventRejoinScope.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Response message for `RejoinUserEvents` method. */
export interface RejoinUserEventsResponse {
  /** Number of user events that were joined with latest product catalog. */
  rejoinedUserEventsCount: Long;
}

/** Metadata for `RejoinUserEvents` method. */
export interface RejoinUserEventsMetadata {
}

function createBaseWriteUserEventRequest(): WriteUserEventRequest {
  return { parent: "", userEvent: undefined, writeAsync: false };
}

export const WriteUserEventRequest: MessageFns<WriteUserEventRequest> = {
  encode(message: WriteUserEventRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.userEvent !== undefined) {
      UserEvent.encode(message.userEvent, writer.uint32(18).fork()).join();
    }
    if (message.writeAsync !== false) {
      writer.uint32(24).bool(message.writeAsync);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WriteUserEventRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWriteUserEventRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.userEvent = UserEvent.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.writeAsync = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WriteUserEventRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      userEvent: isSet(object.userEvent) ? UserEvent.fromJSON(object.userEvent) : undefined,
      writeAsync: isSet(object.writeAsync) ? globalThis.Boolean(object.writeAsync) : false,
    };
  },

  toJSON(message: WriteUserEventRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.userEvent !== undefined) {
      obj.userEvent = UserEvent.toJSON(message.userEvent);
    }
    if (message.writeAsync !== false) {
      obj.writeAsync = message.writeAsync;
    }
    return obj;
  },

  create(base?: DeepPartial<WriteUserEventRequest>): WriteUserEventRequest {
    return WriteUserEventRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<WriteUserEventRequest>): WriteUserEventRequest {
    const message = createBaseWriteUserEventRequest();
    message.parent = object.parent ?? "";
    message.userEvent = (object.userEvent !== undefined && object.userEvent !== null)
      ? UserEvent.fromPartial(object.userEvent)
      : undefined;
    message.writeAsync = object.writeAsync ?? false;
    return message;
  },
};

function createBaseCollectUserEventRequest(): CollectUserEventRequest {
  return { prebuiltRule: undefined, parent: "", userEvent: "", uri: "", ets: Long.ZERO, rawJson: "" };
}

export const CollectUserEventRequest: MessageFns<CollectUserEventRequest> = {
  encode(message: CollectUserEventRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.prebuiltRule !== undefined) {
      writer.uint32(50).string(message.prebuiltRule);
    }
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.userEvent !== "") {
      writer.uint32(18).string(message.userEvent);
    }
    if (message.uri !== "") {
      writer.uint32(26).string(message.uri);
    }
    if (!message.ets.equals(Long.ZERO)) {
      writer.uint32(32).int64(message.ets.toString());
    }
    if (message.rawJson !== "") {
      writer.uint32(42).string(message.rawJson);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CollectUserEventRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCollectUserEventRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 6:
          if (tag !== 50) {
            break;
          }

          message.prebuiltRule = reader.string();
          continue;
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.userEvent = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.uri = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.ets = Long.fromString(reader.int64().toString());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.rawJson = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CollectUserEventRequest {
    return {
      prebuiltRule: isSet(object.prebuiltRule) ? globalThis.String(object.prebuiltRule) : undefined,
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      userEvent: isSet(object.userEvent) ? globalThis.String(object.userEvent) : "",
      uri: isSet(object.uri) ? globalThis.String(object.uri) : "",
      ets: isSet(object.ets) ? Long.fromValue(object.ets) : Long.ZERO,
      rawJson: isSet(object.rawJson) ? globalThis.String(object.rawJson) : "",
    };
  },

  toJSON(message: CollectUserEventRequest): unknown {
    const obj: any = {};
    if (message.prebuiltRule !== undefined) {
      obj.prebuiltRule = message.prebuiltRule;
    }
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.userEvent !== "") {
      obj.userEvent = message.userEvent;
    }
    if (message.uri !== "") {
      obj.uri = message.uri;
    }
    if (!message.ets.equals(Long.ZERO)) {
      obj.ets = (message.ets || Long.ZERO).toString();
    }
    if (message.rawJson !== "") {
      obj.rawJson = message.rawJson;
    }
    return obj;
  },

  create(base?: DeepPartial<CollectUserEventRequest>): CollectUserEventRequest {
    return CollectUserEventRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CollectUserEventRequest>): CollectUserEventRequest {
    const message = createBaseCollectUserEventRequest();
    message.prebuiltRule = object.prebuiltRule ?? undefined;
    message.parent = object.parent ?? "";
    message.userEvent = object.userEvent ?? "";
    message.uri = object.uri ?? "";
    message.ets = (object.ets !== undefined && object.ets !== null) ? Long.fromValue(object.ets) : Long.ZERO;
    message.rawJson = object.rawJson ?? "";
    return message;
  },
};

function createBaseRejoinUserEventsRequest(): RejoinUserEventsRequest {
  return { parent: "", userEventRejoinScope: 0 };
}

export const RejoinUserEventsRequest: MessageFns<RejoinUserEventsRequest> = {
  encode(message: RejoinUserEventsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.userEventRejoinScope !== 0) {
      writer.uint32(16).int32(message.userEventRejoinScope);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RejoinUserEventsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRejoinUserEventsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.userEventRejoinScope = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RejoinUserEventsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      userEventRejoinScope: isSet(object.userEventRejoinScope)
        ? rejoinUserEventsRequest_UserEventRejoinScopeFromJSON(object.userEventRejoinScope)
        : 0,
    };
  },

  toJSON(message: RejoinUserEventsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.userEventRejoinScope !== 0) {
      obj.userEventRejoinScope = rejoinUserEventsRequest_UserEventRejoinScopeToJSON(message.userEventRejoinScope);
    }
    return obj;
  },

  create(base?: DeepPartial<RejoinUserEventsRequest>): RejoinUserEventsRequest {
    return RejoinUserEventsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RejoinUserEventsRequest>): RejoinUserEventsRequest {
    const message = createBaseRejoinUserEventsRequest();
    message.parent = object.parent ?? "";
    message.userEventRejoinScope = object.userEventRejoinScope ?? 0;
    return message;
  },
};

function createBaseRejoinUserEventsResponse(): RejoinUserEventsResponse {
  return { rejoinedUserEventsCount: Long.ZERO };
}

export const RejoinUserEventsResponse: MessageFns<RejoinUserEventsResponse> = {
  encode(message: RejoinUserEventsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.rejoinedUserEventsCount.equals(Long.ZERO)) {
      writer.uint32(8).int64(message.rejoinedUserEventsCount.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RejoinUserEventsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRejoinUserEventsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.rejoinedUserEventsCount = Long.fromString(reader.int64().toString());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RejoinUserEventsResponse {
    return {
      rejoinedUserEventsCount: isSet(object.rejoinedUserEventsCount)
        ? Long.fromValue(object.rejoinedUserEventsCount)
        : Long.ZERO,
    };
  },

  toJSON(message: RejoinUserEventsResponse): unknown {
    const obj: any = {};
    if (!message.rejoinedUserEventsCount.equals(Long.ZERO)) {
      obj.rejoinedUserEventsCount = (message.rejoinedUserEventsCount || Long.ZERO).toString();
    }
    return obj;
  },

  create(base?: DeepPartial<RejoinUserEventsResponse>): RejoinUserEventsResponse {
    return RejoinUserEventsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RejoinUserEventsResponse>): RejoinUserEventsResponse {
    const message = createBaseRejoinUserEventsResponse();
    message.rejoinedUserEventsCount =
      (object.rejoinedUserEventsCount !== undefined && object.rejoinedUserEventsCount !== null)
        ? Long.fromValue(object.rejoinedUserEventsCount)
        : Long.ZERO;
    return message;
  },
};

function createBaseRejoinUserEventsMetadata(): RejoinUserEventsMetadata {
  return {};
}

export const RejoinUserEventsMetadata: MessageFns<RejoinUserEventsMetadata> = {
  encode(_: RejoinUserEventsMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RejoinUserEventsMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRejoinUserEventsMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RejoinUserEventsMetadata {
    return {};
  },

  toJSON(_: RejoinUserEventsMetadata): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<RejoinUserEventsMetadata>): RejoinUserEventsMetadata {
    return RejoinUserEventsMetadata.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<RejoinUserEventsMetadata>): RejoinUserEventsMetadata {
    const message = createBaseRejoinUserEventsMetadata();
    return message;
  },
};

/** Service for ingesting end user actions on the customer website. */
export type UserEventServiceDefinition = typeof UserEventServiceDefinition;
export const UserEventServiceDefinition = {
  name: "UserEventService",
  fullName: "google.cloud.retail.v2alpha.UserEventService",
  methods: {
    /** Writes a single user event. */
    writeUserEvent: {
      name: "WriteUserEvent",
      requestType: WriteUserEventRequest,
      requestStream: false,
      responseType: UserEvent,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              82,
              58,
              10,
              117,
              115,
              101,
              114,
              95,
              101,
              118,
              101,
              110,
              116,
              34,
              68,
              47,
              118,
              50,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              115,
              47,
              42,
              125,
              47,
              117,
              115,
              101,
              114,
              69,
              118,
              101,
              110,
              116,
              115,
              58,
              119,
              114,
              105,
              116,
              101,
            ]),
          ],
        },
      },
    },
    /**
     * Writes a single user event from the browser. This uses a GET request to
     * due to browser restriction of POST-ing to a 3rd party domain.
     *
     * This method is used only by the Retail API JavaScript pixel and Google Tag
     * Manager. Users should not call this method directly.
     */
    collectUserEvent: {
      name: "CollectUserEvent",
      requestType: CollectUserEventRequest,
      requestStream: false,
      responseType: HttpBody,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              72,
              18,
              70,
              47,
              118,
              50,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              115,
              47,
              42,
              125,
              47,
              117,
              115,
              101,
              114,
              69,
              118,
              101,
              110,
              116,
              115,
              58,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
            ]),
          ],
        },
      },
    },
    /**
     * Deletes permanently all user events specified by the filter provided.
     * Depending on the number of events specified by the filter, this operation
     * could take hours or days to complete. To test a filter, use the list
     * command first.
     */
    purgeUserEvents: {
      name: "PurgeUserEvents",
      requestType: PurgeUserEventsRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              96,
              10,
              51,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              114,
              101,
              116,
              97,
              105,
              108,
              46,
              118,
              50,
              97,
              108,
              112,
              104,
              97,
              46,
              80,
              117,
              114,
              103,
              101,
              85,
              115,
              101,
              114,
              69,
              118,
              101,
              110,
              116,
              115,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              18,
              41,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              114,
              101,
              116,
              97,
              105,
              108,
              46,
              118,
              50,
              97,
              108,
              112,
              104,
              97,
              46,
              80,
              117,
              114,
              103,
              101,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          578365826: [
            Buffer.from([
              73,
              58,
              1,
              42,
              34,
              68,
              47,
              118,
              50,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              115,
              47,
              42,
              125,
              47,
              117,
              115,
              101,
              114,
              69,
              118,
              101,
              110,
              116,
              115,
              58,
              112,
              117,
              114,
              103,
              101,
            ]),
          ],
        },
      },
    },
    /**
     * Bulk import of User events. Request processing might be
     * synchronous. Events that already exist are skipped.
     * Use this method for backfilling historical user events.
     *
     * `Operation.response` is of type `ImportResponse`. Note that it is
     * possible for a subset of the items to be successfully inserted.
     * `Operation.metadata` is of type `ImportMetadata`.
     */
    importUserEvents: {
      name: "ImportUserEvents",
      requestType: ImportUserEventsRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              98,
              10,
              52,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              114,
              101,
              116,
              97,
              105,
              108,
              46,
              118,
              50,
              97,
              108,
              112,
              104,
              97,
              46,
              73,
              109,
              112,
              111,
              114,
              116,
              85,
              115,
              101,
              114,
              69,
              118,
              101,
              110,
              116,
              115,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              18,
              42,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              114,
              101,
              116,
              97,
              105,
              108,
              46,
              118,
              50,
              97,
              108,
              112,
              104,
              97,
              46,
              73,
              109,
              112,
              111,
              114,
              116,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          578365826: [
            Buffer.from([
              74,
              58,
              1,
              42,
              34,
              69,
              47,
              118,
              50,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              115,
              47,
              42,
              125,
              47,
              117,
              115,
              101,
              114,
              69,
              118,
              101,
              110,
              116,
              115,
              58,
              105,
              109,
              112,
              111,
              114,
              116,
            ]),
          ],
        },
      },
    },
    /**
     * Starts a user-event rejoin operation with latest product catalog. Events
     * are not annotated with detailed product information for products that are
     * missing from the catalog when the user event is ingested. These
     * events are stored as unjoined events with limited usage on training and
     * serving. You can use this method to start a join operation on specified
     * events with the latest version of product catalog. You can also use this
     * method to correct events joined with the wrong product catalog. A rejoin
     * operation can take hours or days to complete.
     */
    rejoinUserEvents: {
      name: "RejoinUserEvents",
      requestType: RejoinUserEventsRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              52,
              10,
              24,
              82,
              101,
              106,
              111,
              105,
              110,
              85,
              115,
              101,
              114,
              69,
              118,
              101,
              110,
              116,
              115,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              18,
              24,
              82,
              101,
              106,
              111,
              105,
              110,
              85,
              115,
              101,
              114,
              69,
              118,
              101,
              110,
              116,
              115,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          578365826: [
            Buffer.from([
              74,
              58,
              1,
              42,
              34,
              69,
              47,
              118,
              50,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              115,
              47,
              42,
              125,
              47,
              117,
              115,
              101,
              114,
              69,
              118,
              101,
              110,
              116,
              115,
              58,
              114,
              101,
              106,
              111,
              105,
              110,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface UserEventServiceImplementation<CallContextExt = {}> {
  /** Writes a single user event. */
  writeUserEvent(
    request: WriteUserEventRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UserEvent>>;
  /**
   * Writes a single user event from the browser. This uses a GET request to
   * due to browser restriction of POST-ing to a 3rd party domain.
   *
   * This method is used only by the Retail API JavaScript pixel and Google Tag
   * Manager. Users should not call this method directly.
   */
  collectUserEvent(
    request: CollectUserEventRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<HttpBody>>;
  /**
   * Deletes permanently all user events specified by the filter provided.
   * Depending on the number of events specified by the filter, this operation
   * could take hours or days to complete. To test a filter, use the list
   * command first.
   */
  purgeUserEvents(
    request: PurgeUserEventsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Bulk import of User events. Request processing might be
   * synchronous. Events that already exist are skipped.
   * Use this method for backfilling historical user events.
   *
   * `Operation.response` is of type `ImportResponse`. Note that it is
   * possible for a subset of the items to be successfully inserted.
   * `Operation.metadata` is of type `ImportMetadata`.
   */
  importUserEvents(
    request: ImportUserEventsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Starts a user-event rejoin operation with latest product catalog. Events
   * are not annotated with detailed product information for products that are
   * missing from the catalog when the user event is ingested. These
   * events are stored as unjoined events with limited usage on training and
   * serving. You can use this method to start a join operation on specified
   * events with the latest version of product catalog. You can also use this
   * method to correct events joined with the wrong product catalog. A rejoin
   * operation can take hours or days to complete.
   */
  rejoinUserEvents(
    request: RejoinUserEventsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
}

export interface UserEventServiceClient<CallOptionsExt = {}> {
  /** Writes a single user event. */
  writeUserEvent(
    request: DeepPartial<WriteUserEventRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UserEvent>;
  /**
   * Writes a single user event from the browser. This uses a GET request to
   * due to browser restriction of POST-ing to a 3rd party domain.
   *
   * This method is used only by the Retail API JavaScript pixel and Google Tag
   * Manager. Users should not call this method directly.
   */
  collectUserEvent(
    request: DeepPartial<CollectUserEventRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<HttpBody>;
  /**
   * Deletes permanently all user events specified by the filter provided.
   * Depending on the number of events specified by the filter, this operation
   * could take hours or days to complete. To test a filter, use the list
   * command first.
   */
  purgeUserEvents(
    request: DeepPartial<PurgeUserEventsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Bulk import of User events. Request processing might be
   * synchronous. Events that already exist are skipped.
   * Use this method for backfilling historical user events.
   *
   * `Operation.response` is of type `ImportResponse`. Note that it is
   * possible for a subset of the items to be successfully inserted.
   * `Operation.metadata` is of type `ImportMetadata`.
   */
  importUserEvents(
    request: DeepPartial<ImportUserEventsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Starts a user-event rejoin operation with latest product catalog. Events
   * are not annotated with detailed product information for products that are
   * missing from the catalog when the user event is ingested. These
   * events are stored as unjoined events with limited usage on training and
   * serving. You can use this method to start a join operation on specified
   * events with the latest version of product catalog. You can also use this
   * method to correct events joined with the wrong product catalog. A rejoin
   * operation can take hours or days to complete.
   */
  rejoinUserEvents(
    request: DeepPartial<RejoinUserEventsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
