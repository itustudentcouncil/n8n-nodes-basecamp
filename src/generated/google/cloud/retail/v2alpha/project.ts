// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/retail/v2alpha/project.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { SolutionType, solutionTypeFromJSON, solutionTypeToJSON } from "./common.js";

export const protobufPackage = "google.cloud.retail.v2alpha";

/**
 * Project level logging config to control what level of log will be generated
 * and written to Cloud Logging.
 */
export interface LoggingConfig {
  /**
   * Required. Immutable. The name of the LoggingConfig singleton resource.
   * Format: projects/* /loggingConfig
   */
  name: string;
  /**
   * The log generation rule that applies by default to all services
   * supporting log generation. It can be overridden by
   * [ServiceLogGenerationRule][google.cloud.retail.v2alpha.LoggingConfig.ServiceLogGenerationRule]
   * for service level control.
   */
  defaultLogGenerationRule:
    | LoggingConfig_LogGenerationRule
    | undefined;
  /**
   * Controls logging configurations more granularly for each supported
   * service.
   *
   * This overrides the
   * [default_log_generation_rule][google.cloud.retail.v2alpha.LoggingConfig.default_log_generation_rule]
   * for the services specified. For those not mentioned, they will fallback to
   * the default log generation rule.
   */
  serviceLogGenerationRules: LoggingConfig_ServiceLogGenerationRule[];
}

/** The setting to control log generation. */
export enum LoggingConfig_LoggingLevel {
  /** LOGGING_LEVEL_UNSPECIFIED - Default value. Defaults to `LOG_FOR_WARNINGS_AND_ABOVE` if unset. */
  LOGGING_LEVEL_UNSPECIFIED = 0,
  /** LOGGING_DISABLED - No log will be generated and sent to Cloud Logging. */
  LOGGING_DISABLED = 1,
  /** LOG_ERRORS_AND_ABOVE - Log for operations resulted in fatal error. */
  LOG_ERRORS_AND_ABOVE = 2,
  /**
   * LOG_WARNINGS_AND_ABOVE - In addition to `LOG_ERRORS_AND_ABOVE`, also log for operations that have
   * soft errors, quality suggestions.
   */
  LOG_WARNINGS_AND_ABOVE = 3,
  /** LOG_ALL - Log all operations, including successful ones. */
  LOG_ALL = 4,
  UNRECOGNIZED = -1,
}

export function loggingConfig_LoggingLevelFromJSON(object: any): LoggingConfig_LoggingLevel {
  switch (object) {
    case 0:
    case "LOGGING_LEVEL_UNSPECIFIED":
      return LoggingConfig_LoggingLevel.LOGGING_LEVEL_UNSPECIFIED;
    case 1:
    case "LOGGING_DISABLED":
      return LoggingConfig_LoggingLevel.LOGGING_DISABLED;
    case 2:
    case "LOG_ERRORS_AND_ABOVE":
      return LoggingConfig_LoggingLevel.LOG_ERRORS_AND_ABOVE;
    case 3:
    case "LOG_WARNINGS_AND_ABOVE":
      return LoggingConfig_LoggingLevel.LOG_WARNINGS_AND_ABOVE;
    case 4:
    case "LOG_ALL":
      return LoggingConfig_LoggingLevel.LOG_ALL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return LoggingConfig_LoggingLevel.UNRECOGNIZED;
  }
}

export function loggingConfig_LoggingLevelToJSON(object: LoggingConfig_LoggingLevel): string {
  switch (object) {
    case LoggingConfig_LoggingLevel.LOGGING_LEVEL_UNSPECIFIED:
      return "LOGGING_LEVEL_UNSPECIFIED";
    case LoggingConfig_LoggingLevel.LOGGING_DISABLED:
      return "LOGGING_DISABLED";
    case LoggingConfig_LoggingLevel.LOG_ERRORS_AND_ABOVE:
      return "LOG_ERRORS_AND_ABOVE";
    case LoggingConfig_LoggingLevel.LOG_WARNINGS_AND_ABOVE:
      return "LOG_WARNINGS_AND_ABOVE";
    case LoggingConfig_LoggingLevel.LOG_ALL:
      return "LOG_ALL";
    case LoggingConfig_LoggingLevel.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** The logging configurations for services supporting log generation. */
export interface LoggingConfig_LogGenerationRule {
  /**
   * The logging level.
   *
   * By default it is set to `LOG_WARNINGS_AND_ABOVE`.
   */
  loggingLevel: LoggingConfig_LoggingLevel;
  /**
   * The log sample rate for INFO level log entries. You can use this to
   * reduce the number of entries generated for INFO level logs.
   *
   * DO NOT set this field if the
   * [logging_level][google.cloud.retail.v2alpha.LoggingConfig.LogGenerationRule.logging_level]
   * is not
   * [LoggingLevel.LOG_ALL][google.cloud.retail.v2alpha.LoggingConfig.LoggingLevel.LOG_ALL].
   * Otherwise, an INVALID_ARGUMENT error is returned.
   *
   * Sample rate for INFO logs defaults to 1 when unset (generate and send all
   * INFO logs to Cloud Logging). Its value must be greater than 0 and less
   * than or equal to 1.
   */
  infoLogSampleRate?: number | undefined;
}

/** The granular logging configurations for supported services. */
export interface LoggingConfig_ServiceLogGenerationRule {
  /**
   * Required. Supported service names:
   * "CatalogService",
   * "CompletionService",
   * "ControlService",
   * "MerchantCenterStreaming",
   * "ModelService",
   * "PredictionService",
   * "ProductService",
   * "ServingConfigService",
   * "UserEventService",
   */
  serviceName: string;
  /** The log generation rule that applies to this service. */
  logGenerationRule: LoggingConfig_LogGenerationRule | undefined;
}

/** Metadata that describes a Cloud Retail Project. */
export interface Project {
  /**
   * Output only. Full resource name of the retail project, such as
   * `projects/{project_id_or_number}/retailProject`.
   */
  name: string;
  /** Output only. Retail API solutions that the project has enrolled. */
  enrolledSolutions: SolutionType[];
}

/** Project level alert config. */
export interface AlertConfig {
  /**
   * Required. Immutable. The name of the AlertConfig singleton resource.
   * Format: projects/* /alertConfig
   */
  name: string;
  /**
   * Alert policies for a customer.
   * They must be unique by [AlertPolicy.alert_group]
   */
  alertPolicies: AlertConfig_AlertPolicy[];
}

/** Alert policy for a customer. */
export interface AlertConfig_AlertPolicy {
  /**
   * The feature that provides alerting capability. Supported value is
   * only `search-data-quality` for now.
   */
  alertGroup: string;
  /** The enrollment status of a customer. */
  enrollStatus: AlertConfig_AlertPolicy_EnrollStatus;
  /**
   * Recipients for the alert policy.
   * One alert policy should not exceed 20 recipients.
   */
  recipients: AlertConfig_AlertPolicy_Recipient[];
}

/** The enrollment status enum for alert policy. */
export enum AlertConfig_AlertPolicy_EnrollStatus {
  /**
   * ENROLL_STATUS_UNSPECIFIED - Default value. Used for customers who have not responded to the
   * alert policy.
   */
  ENROLL_STATUS_UNSPECIFIED = 0,
  /** ENROLLED - Customer is enrolled in this policy. */
  ENROLLED = 1,
  /** DECLINED - Customer declined this policy. */
  DECLINED = 2,
  UNRECOGNIZED = -1,
}

export function alertConfig_AlertPolicy_EnrollStatusFromJSON(object: any): AlertConfig_AlertPolicy_EnrollStatus {
  switch (object) {
    case 0:
    case "ENROLL_STATUS_UNSPECIFIED":
      return AlertConfig_AlertPolicy_EnrollStatus.ENROLL_STATUS_UNSPECIFIED;
    case 1:
    case "ENROLLED":
      return AlertConfig_AlertPolicy_EnrollStatus.ENROLLED;
    case 2:
    case "DECLINED":
      return AlertConfig_AlertPolicy_EnrollStatus.DECLINED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AlertConfig_AlertPolicy_EnrollStatus.UNRECOGNIZED;
  }
}

export function alertConfig_AlertPolicy_EnrollStatusToJSON(object: AlertConfig_AlertPolicy_EnrollStatus): string {
  switch (object) {
    case AlertConfig_AlertPolicy_EnrollStatus.ENROLL_STATUS_UNSPECIFIED:
      return "ENROLL_STATUS_UNSPECIFIED";
    case AlertConfig_AlertPolicy_EnrollStatus.ENROLLED:
      return "ENROLLED";
    case AlertConfig_AlertPolicy_EnrollStatus.DECLINED:
      return "DECLINED";
    case AlertConfig_AlertPolicy_EnrollStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Recipient contact information. */
export interface AlertConfig_AlertPolicy_Recipient {
  /** Email address of the recipient. */
  emailAddress: string;
}

function createBaseLoggingConfig(): LoggingConfig {
  return { name: "", defaultLogGenerationRule: undefined, serviceLogGenerationRules: [] };
}

export const LoggingConfig: MessageFns<LoggingConfig> = {
  encode(message: LoggingConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.defaultLogGenerationRule !== undefined) {
      LoggingConfig_LogGenerationRule.encode(message.defaultLogGenerationRule, writer.uint32(18).fork()).join();
    }
    for (const v of message.serviceLogGenerationRules) {
      LoggingConfig_ServiceLogGenerationRule.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LoggingConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLoggingConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.defaultLogGenerationRule = LoggingConfig_LogGenerationRule.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.serviceLogGenerationRules.push(
            LoggingConfig_ServiceLogGenerationRule.decode(reader, reader.uint32()),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LoggingConfig {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      defaultLogGenerationRule: isSet(object.defaultLogGenerationRule)
        ? LoggingConfig_LogGenerationRule.fromJSON(object.defaultLogGenerationRule)
        : undefined,
      serviceLogGenerationRules: globalThis.Array.isArray(object?.serviceLogGenerationRules)
        ? object.serviceLogGenerationRules.map((e: any) => LoggingConfig_ServiceLogGenerationRule.fromJSON(e))
        : [],
    };
  },

  toJSON(message: LoggingConfig): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.defaultLogGenerationRule !== undefined) {
      obj.defaultLogGenerationRule = LoggingConfig_LogGenerationRule.toJSON(message.defaultLogGenerationRule);
    }
    if (message.serviceLogGenerationRules?.length) {
      obj.serviceLogGenerationRules = message.serviceLogGenerationRules.map((e) =>
        LoggingConfig_ServiceLogGenerationRule.toJSON(e)
      );
    }
    return obj;
  },

  create(base?: DeepPartial<LoggingConfig>): LoggingConfig {
    return LoggingConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LoggingConfig>): LoggingConfig {
    const message = createBaseLoggingConfig();
    message.name = object.name ?? "";
    message.defaultLogGenerationRule =
      (object.defaultLogGenerationRule !== undefined && object.defaultLogGenerationRule !== null)
        ? LoggingConfig_LogGenerationRule.fromPartial(object.defaultLogGenerationRule)
        : undefined;
    message.serviceLogGenerationRules =
      object.serviceLogGenerationRules?.map((e) => LoggingConfig_ServiceLogGenerationRule.fromPartial(e)) || [];
    return message;
  },
};

function createBaseLoggingConfig_LogGenerationRule(): LoggingConfig_LogGenerationRule {
  return { loggingLevel: 0, infoLogSampleRate: undefined };
}

export const LoggingConfig_LogGenerationRule: MessageFns<LoggingConfig_LogGenerationRule> = {
  encode(message: LoggingConfig_LogGenerationRule, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.loggingLevel !== 0) {
      writer.uint32(8).int32(message.loggingLevel);
    }
    if (message.infoLogSampleRate !== undefined) {
      writer.uint32(21).float(message.infoLogSampleRate);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LoggingConfig_LogGenerationRule {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLoggingConfig_LogGenerationRule();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.loggingLevel = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 21) {
            break;
          }

          message.infoLogSampleRate = reader.float();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LoggingConfig_LogGenerationRule {
    return {
      loggingLevel: isSet(object.loggingLevel) ? loggingConfig_LoggingLevelFromJSON(object.loggingLevel) : 0,
      infoLogSampleRate: isSet(object.infoLogSampleRate) ? globalThis.Number(object.infoLogSampleRate) : undefined,
    };
  },

  toJSON(message: LoggingConfig_LogGenerationRule): unknown {
    const obj: any = {};
    if (message.loggingLevel !== 0) {
      obj.loggingLevel = loggingConfig_LoggingLevelToJSON(message.loggingLevel);
    }
    if (message.infoLogSampleRate !== undefined) {
      obj.infoLogSampleRate = message.infoLogSampleRate;
    }
    return obj;
  },

  create(base?: DeepPartial<LoggingConfig_LogGenerationRule>): LoggingConfig_LogGenerationRule {
    return LoggingConfig_LogGenerationRule.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LoggingConfig_LogGenerationRule>): LoggingConfig_LogGenerationRule {
    const message = createBaseLoggingConfig_LogGenerationRule();
    message.loggingLevel = object.loggingLevel ?? 0;
    message.infoLogSampleRate = object.infoLogSampleRate ?? undefined;
    return message;
  },
};

function createBaseLoggingConfig_ServiceLogGenerationRule(): LoggingConfig_ServiceLogGenerationRule {
  return { serviceName: "", logGenerationRule: undefined };
}

export const LoggingConfig_ServiceLogGenerationRule: MessageFns<LoggingConfig_ServiceLogGenerationRule> = {
  encode(message: LoggingConfig_ServiceLogGenerationRule, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.serviceName !== "") {
      writer.uint32(10).string(message.serviceName);
    }
    if (message.logGenerationRule !== undefined) {
      LoggingConfig_LogGenerationRule.encode(message.logGenerationRule, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LoggingConfig_ServiceLogGenerationRule {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLoggingConfig_ServiceLogGenerationRule();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.serviceName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.logGenerationRule = LoggingConfig_LogGenerationRule.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LoggingConfig_ServiceLogGenerationRule {
    return {
      serviceName: isSet(object.serviceName) ? globalThis.String(object.serviceName) : "",
      logGenerationRule: isSet(object.logGenerationRule)
        ? LoggingConfig_LogGenerationRule.fromJSON(object.logGenerationRule)
        : undefined,
    };
  },

  toJSON(message: LoggingConfig_ServiceLogGenerationRule): unknown {
    const obj: any = {};
    if (message.serviceName !== "") {
      obj.serviceName = message.serviceName;
    }
    if (message.logGenerationRule !== undefined) {
      obj.logGenerationRule = LoggingConfig_LogGenerationRule.toJSON(message.logGenerationRule);
    }
    return obj;
  },

  create(base?: DeepPartial<LoggingConfig_ServiceLogGenerationRule>): LoggingConfig_ServiceLogGenerationRule {
    return LoggingConfig_ServiceLogGenerationRule.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LoggingConfig_ServiceLogGenerationRule>): LoggingConfig_ServiceLogGenerationRule {
    const message = createBaseLoggingConfig_ServiceLogGenerationRule();
    message.serviceName = object.serviceName ?? "";
    message.logGenerationRule = (object.logGenerationRule !== undefined && object.logGenerationRule !== null)
      ? LoggingConfig_LogGenerationRule.fromPartial(object.logGenerationRule)
      : undefined;
    return message;
  },
};

function createBaseProject(): Project {
  return { name: "", enrolledSolutions: [] };
}

export const Project: MessageFns<Project> = {
  encode(message: Project, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    writer.uint32(18).fork();
    for (const v of message.enrolledSolutions) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Project {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProject();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag === 16) {
            message.enrolledSolutions.push(reader.int32() as any);

            continue;
          }

          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.enrolledSolutions.push(reader.int32() as any);
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Project {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      enrolledSolutions: globalThis.Array.isArray(object?.enrolledSolutions)
        ? object.enrolledSolutions.map((e: any) => solutionTypeFromJSON(e))
        : [],
    };
  },

  toJSON(message: Project): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.enrolledSolutions?.length) {
      obj.enrolledSolutions = message.enrolledSolutions.map((e) => solutionTypeToJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<Project>): Project {
    return Project.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Project>): Project {
    const message = createBaseProject();
    message.name = object.name ?? "";
    message.enrolledSolutions = object.enrolledSolutions?.map((e) => e) || [];
    return message;
  },
};

function createBaseAlertConfig(): AlertConfig {
  return { name: "", alertPolicies: [] };
}

export const AlertConfig: MessageFns<AlertConfig> = {
  encode(message: AlertConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    for (const v of message.alertPolicies) {
      AlertConfig_AlertPolicy.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AlertConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAlertConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.alertPolicies.push(AlertConfig_AlertPolicy.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AlertConfig {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      alertPolicies: globalThis.Array.isArray(object?.alertPolicies)
        ? object.alertPolicies.map((e: any) => AlertConfig_AlertPolicy.fromJSON(e))
        : [],
    };
  },

  toJSON(message: AlertConfig): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.alertPolicies?.length) {
      obj.alertPolicies = message.alertPolicies.map((e) => AlertConfig_AlertPolicy.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<AlertConfig>): AlertConfig {
    return AlertConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AlertConfig>): AlertConfig {
    const message = createBaseAlertConfig();
    message.name = object.name ?? "";
    message.alertPolicies = object.alertPolicies?.map((e) => AlertConfig_AlertPolicy.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAlertConfig_AlertPolicy(): AlertConfig_AlertPolicy {
  return { alertGroup: "", enrollStatus: 0, recipients: [] };
}

export const AlertConfig_AlertPolicy: MessageFns<AlertConfig_AlertPolicy> = {
  encode(message: AlertConfig_AlertPolicy, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.alertGroup !== "") {
      writer.uint32(10).string(message.alertGroup);
    }
    if (message.enrollStatus !== 0) {
      writer.uint32(16).int32(message.enrollStatus);
    }
    for (const v of message.recipients) {
      AlertConfig_AlertPolicy_Recipient.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AlertConfig_AlertPolicy {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAlertConfig_AlertPolicy();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.alertGroup = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.enrollStatus = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.recipients.push(AlertConfig_AlertPolicy_Recipient.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AlertConfig_AlertPolicy {
    return {
      alertGroup: isSet(object.alertGroup) ? globalThis.String(object.alertGroup) : "",
      enrollStatus: isSet(object.enrollStatus) ? alertConfig_AlertPolicy_EnrollStatusFromJSON(object.enrollStatus) : 0,
      recipients: globalThis.Array.isArray(object?.recipients)
        ? object.recipients.map((e: any) => AlertConfig_AlertPolicy_Recipient.fromJSON(e))
        : [],
    };
  },

  toJSON(message: AlertConfig_AlertPolicy): unknown {
    const obj: any = {};
    if (message.alertGroup !== "") {
      obj.alertGroup = message.alertGroup;
    }
    if (message.enrollStatus !== 0) {
      obj.enrollStatus = alertConfig_AlertPolicy_EnrollStatusToJSON(message.enrollStatus);
    }
    if (message.recipients?.length) {
      obj.recipients = message.recipients.map((e) => AlertConfig_AlertPolicy_Recipient.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<AlertConfig_AlertPolicy>): AlertConfig_AlertPolicy {
    return AlertConfig_AlertPolicy.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AlertConfig_AlertPolicy>): AlertConfig_AlertPolicy {
    const message = createBaseAlertConfig_AlertPolicy();
    message.alertGroup = object.alertGroup ?? "";
    message.enrollStatus = object.enrollStatus ?? 0;
    message.recipients = object.recipients?.map((e) => AlertConfig_AlertPolicy_Recipient.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAlertConfig_AlertPolicy_Recipient(): AlertConfig_AlertPolicy_Recipient {
  return { emailAddress: "" };
}

export const AlertConfig_AlertPolicy_Recipient: MessageFns<AlertConfig_AlertPolicy_Recipient> = {
  encode(message: AlertConfig_AlertPolicy_Recipient, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.emailAddress !== "") {
      writer.uint32(10).string(message.emailAddress);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AlertConfig_AlertPolicy_Recipient {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAlertConfig_AlertPolicy_Recipient();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.emailAddress = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AlertConfig_AlertPolicy_Recipient {
    return { emailAddress: isSet(object.emailAddress) ? globalThis.String(object.emailAddress) : "" };
  },

  toJSON(message: AlertConfig_AlertPolicy_Recipient): unknown {
    const obj: any = {};
    if (message.emailAddress !== "") {
      obj.emailAddress = message.emailAddress;
    }
    return obj;
  },

  create(base?: DeepPartial<AlertConfig_AlertPolicy_Recipient>): AlertConfig_AlertPolicy_Recipient {
    return AlertConfig_AlertPolicy_Recipient.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AlertConfig_AlertPolicy_Recipient>): AlertConfig_AlertPolicy_Recipient {
    const message = createBaseAlertConfig_AlertPolicy_Recipient();
    message.emailAddress = object.emailAddress ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
