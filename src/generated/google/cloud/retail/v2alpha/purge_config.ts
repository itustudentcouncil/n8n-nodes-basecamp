// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/retail/v2alpha/purge_config.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../protobuf/timestamp.js";

export const protobufPackage = "google.cloud.retail.v2alpha";

/**
 * Metadata related to the progress of the Purge operation.
 * This will be returned by the google.longrunning.Operation.metadata field.
 */
export interface PurgeMetadata {
}

/**
 * Metadata related to the progress of the PurgeProducts operation.
 * This will be returned by the google.longrunning.Operation.metadata field.
 */
export interface PurgeProductsMetadata {
  /** Operation create time. */
  createTime:
    | Date
    | undefined;
  /**
   * Operation last update time. If the operation is done, this is also the
   * finish time.
   */
  updateTime:
    | Date
    | undefined;
  /** Count of entries that were deleted successfully. */
  successCount: Long;
  /** Count of entries that encountered errors while processing. */
  failureCount: Long;
}

/** Request message for PurgeProducts method. */
export interface PurgeProductsRequest {
  /**
   * Required. The resource name of the branch under which the products are
   * created. The format is
   * `projects/${projectId}/locations/global/catalogs/${catalogId}/branches/${branchId}`
   */
  parent: string;
  /**
   * Required. The filter string to specify the products to be deleted with a
   * length limit of 5,000 characters.
   *
   * Empty string filter is not allowed. "*" implies delete all items in a
   * branch.
   *
   * The eligible fields for filtering are:
   *
   * * `availability`: Double quoted
   * [Product.availability][google.cloud.retail.v2alpha.Product.availability]
   * string.
   * * `create_time` : in ISO 8601 "zulu" format.
   *
   * Supported syntax:
   *
   * * Comparators (">", "<", ">=", "<=", "=").
   *   Examples:
   *   * create_time <= "2015-02-13T17:05:46Z"
   *   * availability = "IN_STOCK"
   *
   * * Conjunctions ("AND")
   *   Examples:
   *   * create_time <= "2015-02-13T17:05:46Z" AND availability = "PREORDER"
   *
   * * Disjunctions ("OR")
   *   Examples:
   *   * create_time <= "2015-02-13T17:05:46Z" OR availability = "IN_STOCK"
   *
   * * Can support nested queries.
   *   Examples:
   *   * (create_time <= "2015-02-13T17:05:46Z" AND availability = "PREORDER")
   *   OR (create_time >= "2015-02-14T13:03:32Z" AND availability = "IN_STOCK")
   *
   * * Filter Limits:
   *   * Filter should not contain more than 6 conditions.
   *   * Max nesting depth should not exceed 2 levels.
   *
   * Examples queries:
   * * Delete back order products created before a timestamp.
   *   create_time <= "2015-02-13T17:05:46Z" OR availability = "BACKORDER"
   */
  filter: string;
  /**
   * Actually perform the purge.
   * If `force` is set to false, the method will return the expected purge count
   * without deleting any products.
   */
  force: boolean;
}

/**
 * Response of the PurgeProductsRequest. If the long running operation is
 * successfully done, then this message is returned by the
 * google.longrunning.Operations.response field.
 */
export interface PurgeProductsResponse {
  /** The total count of products purged as a result of the operation. */
  purgeCount: Long;
  /**
   * A sample of the product names that will be deleted.
   * Only populated if `force` is set to false. A max of 100 names will be
   * returned and the names are chosen at random.
   */
  purgeSample: string[];
}

/** Request message for PurgeUserEvents method. */
export interface PurgeUserEventsRequest {
  /**
   * Required. The resource name of the catalog under which the events are
   * created. The format is
   * `projects/${projectId}/locations/global/catalogs/${catalogId}`
   */
  parent: string;
  /**
   * Required. The filter string to specify the events to be deleted with a
   * length limit of 5,000 characters. Empty string filter is not allowed. The
   * eligible fields for filtering are:
   *
   * * `eventType`: Double quoted
   * [UserEvent.event_type][google.cloud.retail.v2alpha.UserEvent.event_type]
   * string.
   * * `eventTime`: in ISO 8601 "zulu" format.
   * * `visitorId`: Double quoted string. Specifying this will delete all
   *   events associated with a visitor.
   * * `userId`: Double quoted string. Specifying this will delete all events
   *   associated with a user.
   *
   * Examples:
   *
   * * Deleting all events in a time range:
   *   `eventTime > "2012-04-23T18:25:43.511Z"
   *   eventTime < "2012-04-23T18:30:43.511Z"`
   * * Deleting specific eventType in time range:
   *   `eventTime > "2012-04-23T18:25:43.511Z" eventType = "detail-page-view"`
   * * Deleting all events for a specific visitor:
   *   `visitorId = "visitor1024"`
   *
   * The filtering fields are assumed to have an implicit AND.
   */
  filter: string;
  /**
   * Actually perform the purge.
   * If `force` is set to false, the method will return the expected purge count
   * without deleting any user events.
   */
  force: boolean;
}

/**
 * Response of the PurgeUserEventsRequest. If the long running operation is
 * successfully done, then this message is returned by the
 * google.longrunning.Operations.response field.
 */
export interface PurgeUserEventsResponse {
  /** The total count of events purged as a result of the operation. */
  purgedEventsCount: Long;
}

function createBasePurgeMetadata(): PurgeMetadata {
  return {};
}

export const PurgeMetadata: MessageFns<PurgeMetadata> = {
  encode(_: PurgeMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PurgeMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePurgeMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): PurgeMetadata {
    return {};
  },

  toJSON(_: PurgeMetadata): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<PurgeMetadata>): PurgeMetadata {
    return PurgeMetadata.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<PurgeMetadata>): PurgeMetadata {
    const message = createBasePurgeMetadata();
    return message;
  },
};

function createBasePurgeProductsMetadata(): PurgeProductsMetadata {
  return { createTime: undefined, updateTime: undefined, successCount: Long.ZERO, failureCount: Long.ZERO };
}

export const PurgeProductsMetadata: MessageFns<PurgeProductsMetadata> = {
  encode(message: PurgeProductsMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(10).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(18).fork()).join();
    }
    if (!message.successCount.equals(Long.ZERO)) {
      writer.uint32(24).int64(message.successCount.toString());
    }
    if (!message.failureCount.equals(Long.ZERO)) {
      writer.uint32(32).int64(message.failureCount.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PurgeProductsMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePurgeProductsMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.successCount = Long.fromString(reader.int64().toString());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.failureCount = Long.fromString(reader.int64().toString());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PurgeProductsMetadata {
    return {
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      successCount: isSet(object.successCount) ? Long.fromValue(object.successCount) : Long.ZERO,
      failureCount: isSet(object.failureCount) ? Long.fromValue(object.failureCount) : Long.ZERO,
    };
  },

  toJSON(message: PurgeProductsMetadata): unknown {
    const obj: any = {};
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (!message.successCount.equals(Long.ZERO)) {
      obj.successCount = (message.successCount || Long.ZERO).toString();
    }
    if (!message.failureCount.equals(Long.ZERO)) {
      obj.failureCount = (message.failureCount || Long.ZERO).toString();
    }
    return obj;
  },

  create(base?: DeepPartial<PurgeProductsMetadata>): PurgeProductsMetadata {
    return PurgeProductsMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PurgeProductsMetadata>): PurgeProductsMetadata {
    const message = createBasePurgeProductsMetadata();
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.successCount = (object.successCount !== undefined && object.successCount !== null)
      ? Long.fromValue(object.successCount)
      : Long.ZERO;
    message.failureCount = (object.failureCount !== undefined && object.failureCount !== null)
      ? Long.fromValue(object.failureCount)
      : Long.ZERO;
    return message;
  },
};

function createBasePurgeProductsRequest(): PurgeProductsRequest {
  return { parent: "", filter: "", force: false };
}

export const PurgeProductsRequest: MessageFns<PurgeProductsRequest> = {
  encode(message: PurgeProductsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.filter !== "") {
      writer.uint32(18).string(message.filter);
    }
    if (message.force !== false) {
      writer.uint32(24).bool(message.force);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PurgeProductsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePurgeProductsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.force = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PurgeProductsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      force: isSet(object.force) ? globalThis.Boolean(object.force) : false,
    };
  },

  toJSON(message: PurgeProductsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.force !== false) {
      obj.force = message.force;
    }
    return obj;
  },

  create(base?: DeepPartial<PurgeProductsRequest>): PurgeProductsRequest {
    return PurgeProductsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PurgeProductsRequest>): PurgeProductsRequest {
    const message = createBasePurgeProductsRequest();
    message.parent = object.parent ?? "";
    message.filter = object.filter ?? "";
    message.force = object.force ?? false;
    return message;
  },
};

function createBasePurgeProductsResponse(): PurgeProductsResponse {
  return { purgeCount: Long.ZERO, purgeSample: [] };
}

export const PurgeProductsResponse: MessageFns<PurgeProductsResponse> = {
  encode(message: PurgeProductsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.purgeCount.equals(Long.ZERO)) {
      writer.uint32(8).int64(message.purgeCount.toString());
    }
    for (const v of message.purgeSample) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PurgeProductsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePurgeProductsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.purgeCount = Long.fromString(reader.int64().toString());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.purgeSample.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PurgeProductsResponse {
    return {
      purgeCount: isSet(object.purgeCount) ? Long.fromValue(object.purgeCount) : Long.ZERO,
      purgeSample: globalThis.Array.isArray(object?.purgeSample)
        ? object.purgeSample.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: PurgeProductsResponse): unknown {
    const obj: any = {};
    if (!message.purgeCount.equals(Long.ZERO)) {
      obj.purgeCount = (message.purgeCount || Long.ZERO).toString();
    }
    if (message.purgeSample?.length) {
      obj.purgeSample = message.purgeSample;
    }
    return obj;
  },

  create(base?: DeepPartial<PurgeProductsResponse>): PurgeProductsResponse {
    return PurgeProductsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PurgeProductsResponse>): PurgeProductsResponse {
    const message = createBasePurgeProductsResponse();
    message.purgeCount = (object.purgeCount !== undefined && object.purgeCount !== null)
      ? Long.fromValue(object.purgeCount)
      : Long.ZERO;
    message.purgeSample = object.purgeSample?.map((e) => e) || [];
    return message;
  },
};

function createBasePurgeUserEventsRequest(): PurgeUserEventsRequest {
  return { parent: "", filter: "", force: false };
}

export const PurgeUserEventsRequest: MessageFns<PurgeUserEventsRequest> = {
  encode(message: PurgeUserEventsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.filter !== "") {
      writer.uint32(18).string(message.filter);
    }
    if (message.force !== false) {
      writer.uint32(24).bool(message.force);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PurgeUserEventsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePurgeUserEventsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.force = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PurgeUserEventsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      force: isSet(object.force) ? globalThis.Boolean(object.force) : false,
    };
  },

  toJSON(message: PurgeUserEventsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.force !== false) {
      obj.force = message.force;
    }
    return obj;
  },

  create(base?: DeepPartial<PurgeUserEventsRequest>): PurgeUserEventsRequest {
    return PurgeUserEventsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PurgeUserEventsRequest>): PurgeUserEventsRequest {
    const message = createBasePurgeUserEventsRequest();
    message.parent = object.parent ?? "";
    message.filter = object.filter ?? "";
    message.force = object.force ?? false;
    return message;
  },
};

function createBasePurgeUserEventsResponse(): PurgeUserEventsResponse {
  return { purgedEventsCount: Long.ZERO };
}

export const PurgeUserEventsResponse: MessageFns<PurgeUserEventsResponse> = {
  encode(message: PurgeUserEventsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.purgedEventsCount.equals(Long.ZERO)) {
      writer.uint32(8).int64(message.purgedEventsCount.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PurgeUserEventsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePurgeUserEventsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.purgedEventsCount = Long.fromString(reader.int64().toString());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PurgeUserEventsResponse {
    return {
      purgedEventsCount: isSet(object.purgedEventsCount) ? Long.fromValue(object.purgedEventsCount) : Long.ZERO,
    };
  },

  toJSON(message: PurgeUserEventsResponse): unknown {
    const obj: any = {};
    if (!message.purgedEventsCount.equals(Long.ZERO)) {
      obj.purgedEventsCount = (message.purgedEventsCount || Long.ZERO).toString();
    }
    return obj;
  },

  create(base?: DeepPartial<PurgeUserEventsResponse>): PurgeUserEventsResponse {
    return PurgeUserEventsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PurgeUserEventsResponse>): PurgeUserEventsResponse {
    const message = createBasePurgeUserEventsResponse();
    message.purgedEventsCount = (object.purgedEventsCount !== undefined && object.purgedEventsCount !== null)
      ? Long.fromValue(object.purgedEventsCount)
      : Long.ZERO;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
