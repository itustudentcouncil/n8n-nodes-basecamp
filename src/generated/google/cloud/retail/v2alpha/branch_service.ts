// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/retail/v2alpha/branch_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Branch, BranchView, branchViewFromJSON, branchViewToJSON } from "./branch.js";

export const protobufPackage = "google.cloud.retail.v2alpha";

/**
 * Request for
 * [BranchService.ListBranches][google.cloud.retail.v2alpha.BranchService.ListBranches]
 * method.
 */
export interface ListBranchesRequest {
  /** Required. The parent catalog resource name. */
  parent: string;
  /**
   * The view to apply to the returned
   * [Branch][google.cloud.retail.v2alpha.Branch]. Defaults to
   * [Branch.BranchView.BASIC] if unspecified.
   * See documentation of fields of [Branch][google.cloud.retail.v2alpha.Branch]
   * to find what fields are excluded from BASIC view.
   */
  view: BranchView;
}

/**
 * Response for
 * [BranchService.ListBranches][google.cloud.retail.v2alpha.BranchService.ListBranches]
 * method.
 */
export interface ListBranchesResponse {
  /** The Branches. */
  branches: Branch[];
}

/**
 * Request for
 * [BranchService.GetBranch][google.cloud.retail.v2alpha.BranchService.GetBranch]
 * method.
 */
export interface GetBranchRequest {
  /**
   * Required. The name of the branch to retrieve.
   * Format:
   * `projects/* /locations/global/catalogs/default_catalog/branches/some_branch_id`.
   *
   * "default_branch" can be used as a special branch_id, it returns the
   * default branch that has been set for the catalog.
   */
  name: string;
  /**
   * The view to apply to the returned
   * [Branch][google.cloud.retail.v2alpha.Branch]. Defaults to
   * [Branch.BranchView.BASIC] if unspecified.
   * See documentation of fields of [Branch][google.cloud.retail.v2alpha.Branch]
   * to find what fields are excluded from BASIC view.
   */
  view: BranchView;
}

function createBaseListBranchesRequest(): ListBranchesRequest {
  return { parent: "", view: 0 };
}

export const ListBranchesRequest: MessageFns<ListBranchesRequest> = {
  encode(message: ListBranchesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.view !== 0) {
      writer.uint32(16).int32(message.view);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListBranchesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListBranchesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.view = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListBranchesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      view: isSet(object.view) ? branchViewFromJSON(object.view) : 0,
    };
  },

  toJSON(message: ListBranchesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.view !== 0) {
      obj.view = branchViewToJSON(message.view);
    }
    return obj;
  },

  create(base?: DeepPartial<ListBranchesRequest>): ListBranchesRequest {
    return ListBranchesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListBranchesRequest>): ListBranchesRequest {
    const message = createBaseListBranchesRequest();
    message.parent = object.parent ?? "";
    message.view = object.view ?? 0;
    return message;
  },
};

function createBaseListBranchesResponse(): ListBranchesResponse {
  return { branches: [] };
}

export const ListBranchesResponse: MessageFns<ListBranchesResponse> = {
  encode(message: ListBranchesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.branches) {
      Branch.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListBranchesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListBranchesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.branches.push(Branch.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListBranchesResponse {
    return {
      branches: globalThis.Array.isArray(object?.branches) ? object.branches.map((e: any) => Branch.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListBranchesResponse): unknown {
    const obj: any = {};
    if (message.branches?.length) {
      obj.branches = message.branches.map((e) => Branch.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ListBranchesResponse>): ListBranchesResponse {
    return ListBranchesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListBranchesResponse>): ListBranchesResponse {
    const message = createBaseListBranchesResponse();
    message.branches = object.branches?.map((e) => Branch.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetBranchRequest(): GetBranchRequest {
  return { name: "", view: 0 };
}

export const GetBranchRequest: MessageFns<GetBranchRequest> = {
  encode(message: GetBranchRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.view !== 0) {
      writer.uint32(16).int32(message.view);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetBranchRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetBranchRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.view = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetBranchRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      view: isSet(object.view) ? branchViewFromJSON(object.view) : 0,
    };
  },

  toJSON(message: GetBranchRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.view !== 0) {
      obj.view = branchViewToJSON(message.view);
    }
    return obj;
  },

  create(base?: DeepPartial<GetBranchRequest>): GetBranchRequest {
    return GetBranchRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetBranchRequest>): GetBranchRequest {
    const message = createBaseGetBranchRequest();
    message.name = object.name ?? "";
    message.view = object.view ?? 0;
    return message;
  },
};

/**
 * Service for [Branch][google.cloud.retail.v2alpha.Branch] Management
 *
 * [Branch][google.cloud.retail.v2alpha.Branch]es are automatically created when
 * a [Catalog][google.cloud.retail.v2alpha.Catalog] is created. There are fixed
 * three branches in each catalog, and may use
 * [ListBranches][google.cloud.retail.v2alpha.BranchService.ListBranches] method
 * to get the details of all branches.
 */
export type BranchServiceDefinition = typeof BranchServiceDefinition;
export const BranchServiceDefinition = {
  name: "BranchService",
  fullName: "google.cloud.retail.v2alpha.BranchService",
  methods: {
    /**
     * Lists all [Branch][google.cloud.retail.v2alpha.Branch]s under the specified
     * parent [Catalog][google.cloud.retail.v2alpha.Catalog].
     */
    listBranches: {
      name: "ListBranches",
      requestType: ListBranchesRequest,
      requestStream: false,
      responseType: ListBranchesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              62,
              18,
              60,
              47,
              118,
              50,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              115,
              47,
              42,
              125,
              47,
              98,
              114,
              97,
              110,
              99,
              104,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Retrieves a [Branch][google.cloud.retail.v2alpha.Branch]. */
    getBranch: {
      name: "GetBranch",
      requestType: GetBranchRequest,
      requestStream: false,
      responseType: Branch,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              62,
              18,
              60,
              47,
              118,
              50,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              115,
              47,
              42,
              47,
              98,
              114,
              97,
              110,
              99,
              104,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface BranchServiceImplementation<CallContextExt = {}> {
  /**
   * Lists all [Branch][google.cloud.retail.v2alpha.Branch]s under the specified
   * parent [Catalog][google.cloud.retail.v2alpha.Catalog].
   */
  listBranches(
    request: ListBranchesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListBranchesResponse>>;
  /** Retrieves a [Branch][google.cloud.retail.v2alpha.Branch]. */
  getBranch(request: GetBranchRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Branch>>;
}

export interface BranchServiceClient<CallOptionsExt = {}> {
  /**
   * Lists all [Branch][google.cloud.retail.v2alpha.Branch]s under the specified
   * parent [Catalog][google.cloud.retail.v2alpha.Catalog].
   */
  listBranches(
    request: DeepPartial<ListBranchesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListBranchesResponse>;
  /** Retrieves a [Branch][google.cloud.retail.v2alpha.Branch]. */
  getBranch(request: DeepPartial<GetBranchRequest>, options?: CallOptions & CallOptionsExt): Promise<Branch>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
