// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/retail/v2alpha/catalog_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Empty } from "../../../protobuf/empty.js";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { AttributesConfig, Catalog, CatalogAttribute, CompletionConfig } from "./catalog.js";

export const protobufPackage = "google.cloud.retail.v2alpha";

/**
 * Request for
 * [CatalogService.ListCatalogs][google.cloud.retail.v2alpha.CatalogService.ListCatalogs]
 * method.
 */
export interface ListCatalogsRequest {
  /**
   * Required. The account resource name with an associated location.
   *
   * If the caller does not have permission to list
   * [Catalog][google.cloud.retail.v2alpha.Catalog]s under this location,
   * regardless of whether or not this location exists, a PERMISSION_DENIED
   * error is returned.
   */
  parent: string;
  /**
   * Maximum number of [Catalog][google.cloud.retail.v2alpha.Catalog]s to
   * return. If unspecified, defaults to 50. The maximum allowed value is 1000.
   * Values above 1000 will be coerced to 1000.
   *
   * If this field is negative, an INVALID_ARGUMENT is returned.
   */
  pageSize: number;
  /**
   * A page token
   * [ListCatalogsResponse.next_page_token][google.cloud.retail.v2alpha.ListCatalogsResponse.next_page_token],
   * received from a previous
   * [CatalogService.ListCatalogs][google.cloud.retail.v2alpha.CatalogService.ListCatalogs]
   * call. Provide this to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to
   * [CatalogService.ListCatalogs][google.cloud.retail.v2alpha.CatalogService.ListCatalogs]
   * must match the call that provided the page token. Otherwise, an
   * INVALID_ARGUMENT error is returned.
   */
  pageToken: string;
}

/**
 * Response for
 * [CatalogService.ListCatalogs][google.cloud.retail.v2alpha.CatalogService.ListCatalogs]
 * method.
 */
export interface ListCatalogsResponse {
  /** All the customer's [Catalog][google.cloud.retail.v2alpha.Catalog]s. */
  catalogs: Catalog[];
  /**
   * A token that can be sent as
   * [ListCatalogsRequest.page_token][google.cloud.retail.v2alpha.ListCatalogsRequest.page_token]
   * to retrieve the next page. If this field is omitted, there are no
   * subsequent pages.
   */
  nextPageToken: string;
}

/**
 * Request for
 * [CatalogService.UpdateCatalog][google.cloud.retail.v2alpha.CatalogService.UpdateCatalog]
 * method.
 */
export interface UpdateCatalogRequest {
  /**
   * Required. The [Catalog][google.cloud.retail.v2alpha.Catalog] to update.
   *
   * If the caller does not have permission to update the
   * [Catalog][google.cloud.retail.v2alpha.Catalog], regardless of whether or
   * not it exists, a PERMISSION_DENIED error is returned.
   *
   * If the [Catalog][google.cloud.retail.v2alpha.Catalog] to update does not
   * exist, a NOT_FOUND error is returned.
   */
  catalog:
    | Catalog
    | undefined;
  /**
   * Indicates which fields in the provided
   * [Catalog][google.cloud.retail.v2alpha.Catalog] to update.
   *
   * If an unsupported or unknown field is provided, an INVALID_ARGUMENT error
   * is returned.
   */
  updateMask: string[] | undefined;
}

/** Request message to set a specified branch as new default_branch. */
export interface SetDefaultBranchRequest {
  /**
   * Full resource name of the catalog, such as
   * `projects/* /locations/global/catalogs/default_catalog`.
   */
  catalog: string;
  /**
   * The final component of the resource name of a branch.
   *
   * This field must be one of "0", "1" or "2". Otherwise, an INVALID_ARGUMENT
   * error is returned.
   *
   * If there are no sufficient active products in the targeted branch and
   * [force][google.cloud.retail.v2alpha.SetDefaultBranchRequest.force] is not
   * set, a FAILED_PRECONDITION error is returned.
   */
  branchId: string;
  /**
   * Some note on this request, this can be retrieved by
   * [CatalogService.GetDefaultBranch][google.cloud.retail.v2alpha.CatalogService.GetDefaultBranch]
   * before next valid default branch set occurs.
   *
   * This field must be a UTF-8 encoded string with a length limit of 1,000
   * characters. Otherwise, an INVALID_ARGUMENT error is returned.
   */
  note: string;
  /**
   * If set to true, it permits switching to a branch with
   * [branch_id][google.cloud.retail.v2alpha.SetDefaultBranchRequest.branch_id]
   * even if it has no sufficient active products.
   */
  force: boolean;
}

/** Request message to show which branch is currently the default branch. */
export interface GetDefaultBranchRequest {
  /**
   * The parent catalog resource name, such as
   * `projects/* /locations/global/catalogs/default_catalog`.
   */
  catalog: string;
}

/**
 * Response message of
 * [CatalogService.GetDefaultBranch][google.cloud.retail.v2alpha.CatalogService.GetDefaultBranch].
 */
export interface GetDefaultBranchResponse {
  /** Full resource name of the branch id currently set as default branch. */
  branch: string;
  /** The time when this branch is set to default. */
  setTime:
    | Date
    | undefined;
  /**
   * This corresponds to
   * [SetDefaultBranchRequest.note][google.cloud.retail.v2alpha.SetDefaultBranchRequest.note]
   * field, when this branch was set as default.
   */
  note: string;
}

/**
 * Request for
 * [CatalogService.GetCompletionConfig][google.cloud.retail.v2alpha.CatalogService.GetCompletionConfig]
 * method.
 */
export interface GetCompletionConfigRequest {
  /**
   * Required. Full CompletionConfig resource name. Format:
   * `projects/{project_number}/locations/{location_id}/catalogs/{catalog_id}/completionConfig`
   */
  name: string;
}

/**
 * Request for
 * [CatalogService.UpdateCompletionConfig][google.cloud.retail.v2alpha.CatalogService.UpdateCompletionConfig]
 * method.
 */
export interface UpdateCompletionConfigRequest {
  /**
   * Required. The
   * [CompletionConfig][google.cloud.retail.v2alpha.CompletionConfig] to update.
   *
   * If the caller does not have permission to update the
   * [CompletionConfig][google.cloud.retail.v2alpha.CompletionConfig], then a
   * PERMISSION_DENIED error is returned.
   *
   * If the [CompletionConfig][google.cloud.retail.v2alpha.CompletionConfig] to
   * update does not exist, a NOT_FOUND error is returned.
   */
  completionConfig:
    | CompletionConfig
    | undefined;
  /**
   * Indicates which fields in the provided
   * [CompletionConfig][google.cloud.retail.v2alpha.CompletionConfig] to update.
   * The following are the only supported fields:
   *
   * * [CompletionConfig.matching_order][google.cloud.retail.v2alpha.CompletionConfig.matching_order]
   * * [CompletionConfig.max_suggestions][google.cloud.retail.v2alpha.CompletionConfig.max_suggestions]
   * * [CompletionConfig.min_prefix_length][google.cloud.retail.v2alpha.CompletionConfig.min_prefix_length]
   * * [CompletionConfig.auto_learning][google.cloud.retail.v2alpha.CompletionConfig.auto_learning]
   *
   * If not set, all supported fields are updated.
   */
  updateMask: string[] | undefined;
}

/**
 * Request for
 * [CatalogService.GetAttributesConfig][google.cloud.retail.v2alpha.CatalogService.GetAttributesConfig]
 * method.
 */
export interface GetAttributesConfigRequest {
  /**
   * Required. Full AttributesConfig resource name. Format:
   * `projects/{project_number}/locations/{location_id}/catalogs/{catalog_id}/attributesConfig`
   */
  name: string;
}

/**
 * Request for
 * [CatalogService.UpdateAttributesConfig][google.cloud.retail.v2alpha.CatalogService.UpdateAttributesConfig]
 * method.
 */
export interface UpdateAttributesConfigRequest {
  /**
   * Required. The
   * [AttributesConfig][google.cloud.retail.v2alpha.AttributesConfig] to update.
   */
  attributesConfig:
    | AttributesConfig
    | undefined;
  /**
   * Indicates which fields in the provided
   * [AttributesConfig][google.cloud.retail.v2alpha.AttributesConfig] to update.
   * The following is the only supported field:
   *
   * * [AttributesConfig.catalog_attributes][google.cloud.retail.v2alpha.AttributesConfig.catalog_attributes]
   *
   * If not set, all supported fields are updated.
   */
  updateMask: string[] | undefined;
}

/**
 * Request for
 * [CatalogService.AddCatalogAttribute][google.cloud.retail.v2alpha.CatalogService.AddCatalogAttribute]
 * method.
 */
export interface AddCatalogAttributeRequest {
  /**
   * Required. Full AttributesConfig resource name. Format:
   * `projects/{project_number}/locations/{location_id}/catalogs/{catalog_id}/attributesConfig`
   */
  attributesConfig: string;
  /**
   * Required. The
   * [CatalogAttribute][google.cloud.retail.v2alpha.CatalogAttribute] to add.
   */
  catalogAttribute: CatalogAttribute | undefined;
}

/**
 * Request for
 * [CatalogService.RemoveCatalogAttribute][google.cloud.retail.v2alpha.CatalogService.RemoveCatalogAttribute]
 * method.
 */
export interface RemoveCatalogAttributeRequest {
  /**
   * Required. Full AttributesConfig resource name. Format:
   * `projects/{project_number}/locations/{location_id}/catalogs/{catalog_id}/attributesConfig`
   */
  attributesConfig: string;
  /**
   * Required. The attribute name key of the
   * [CatalogAttribute][google.cloud.retail.v2alpha.CatalogAttribute] to remove.
   */
  key: string;
}

/**
 * Request for
 * [CatalogService.BatchRemoveCatalogAttributes][google.cloud.retail.v2alpha.CatalogService.BatchRemoveCatalogAttributes]
 * method.
 */
export interface BatchRemoveCatalogAttributesRequest {
  /**
   * Required. The attributes config resource shared by all catalog attributes
   * being deleted. Format:
   * `projects/{project_number}/locations/{location_id}/catalogs/{catalog_id}/attributesConfig`
   */
  attributesConfig: string;
  /**
   * Required. The attribute name keys of the
   * [CatalogAttribute][google.cloud.retail.v2alpha.CatalogAttribute]s to
   * delete. A maximum of 1000 catalog attributes can be deleted in a batch.
   */
  attributeKeys: string[];
}

/**
 * Response of the
 * [CatalogService.BatchRemoveCatalogAttributes][google.cloud.retail.v2alpha.CatalogService.BatchRemoveCatalogAttributes].
 */
export interface BatchRemoveCatalogAttributesResponse {
  /**
   * Catalog attributes that were deleted. Only pre-loaded [catalog
   * attributes][google.cloud.retail.v2alpha.CatalogAttribute] that are
   * neither [in
   * use][google.cloud.retail.v2alpha.CatalogAttribute.in_use] by
   * products nor predefined can be deleted.
   */
  deletedCatalogAttributes: string[];
  /**
   * Catalog attributes that were reset. [Catalog
   * attributes][google.cloud.retail.v2alpha.CatalogAttribute] that are either
   * [in use][google.cloud.retail.v2alpha.CatalogAttribute.in_use] by products
   * or are predefined attributes cannot be deleted; however, their
   * configuration properties will reset to default values upon removal request.
   */
  resetCatalogAttributes: string[];
}

/**
 * Request for
 * [CatalogService.ReplaceCatalogAttribute][google.cloud.retail.v2alpha.CatalogService.ReplaceCatalogAttribute]
 * method.
 */
export interface ReplaceCatalogAttributeRequest {
  /**
   * Required. Full AttributesConfig resource name. Format:
   * `projects/{project_number}/locations/{location_id}/catalogs/{catalog_id}/attributesConfig`
   */
  attributesConfig: string;
  /**
   * Required. The updated
   * [CatalogAttribute][google.cloud.retail.v2alpha.CatalogAttribute].
   */
  catalogAttribute:
    | CatalogAttribute
    | undefined;
  /**
   * Indicates which fields in the provided
   * [CatalogAttribute][google.cloud.retail.v2alpha.CatalogAttribute] to update.
   * The following are NOT supported:
   *
   * * [CatalogAttribute.key][google.cloud.retail.v2alpha.CatalogAttribute.key]
   *
   * If not set, all supported fields are updated.
   */
  updateMask: string[] | undefined;
}

function createBaseListCatalogsRequest(): ListCatalogsRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListCatalogsRequest: MessageFns<ListCatalogsRequest> = {
  encode(message: ListCatalogsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListCatalogsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListCatalogsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListCatalogsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListCatalogsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListCatalogsRequest>): ListCatalogsRequest {
    return ListCatalogsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListCatalogsRequest>): ListCatalogsRequest {
    const message = createBaseListCatalogsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListCatalogsResponse(): ListCatalogsResponse {
  return { catalogs: [], nextPageToken: "" };
}

export const ListCatalogsResponse: MessageFns<ListCatalogsResponse> = {
  encode(message: ListCatalogsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.catalogs) {
      Catalog.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListCatalogsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListCatalogsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.catalogs.push(Catalog.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListCatalogsResponse {
    return {
      catalogs: globalThis.Array.isArray(object?.catalogs) ? object.catalogs.map((e: any) => Catalog.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListCatalogsResponse): unknown {
    const obj: any = {};
    if (message.catalogs?.length) {
      obj.catalogs = message.catalogs.map((e) => Catalog.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListCatalogsResponse>): ListCatalogsResponse {
    return ListCatalogsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListCatalogsResponse>): ListCatalogsResponse {
    const message = createBaseListCatalogsResponse();
    message.catalogs = object.catalogs?.map((e) => Catalog.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseUpdateCatalogRequest(): UpdateCatalogRequest {
  return { catalog: undefined, updateMask: undefined };
}

export const UpdateCatalogRequest: MessageFns<UpdateCatalogRequest> = {
  encode(message: UpdateCatalogRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.catalog !== undefined) {
      Catalog.encode(message.catalog, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateCatalogRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateCatalogRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.catalog = Catalog.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateCatalogRequest {
    return {
      catalog: isSet(object.catalog) ? Catalog.fromJSON(object.catalog) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateCatalogRequest): unknown {
    const obj: any = {};
    if (message.catalog !== undefined) {
      obj.catalog = Catalog.toJSON(message.catalog);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateCatalogRequest>): UpdateCatalogRequest {
    return UpdateCatalogRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateCatalogRequest>): UpdateCatalogRequest {
    const message = createBaseUpdateCatalogRequest();
    message.catalog = (object.catalog !== undefined && object.catalog !== null)
      ? Catalog.fromPartial(object.catalog)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseSetDefaultBranchRequest(): SetDefaultBranchRequest {
  return { catalog: "", branchId: "", note: "", force: false };
}

export const SetDefaultBranchRequest: MessageFns<SetDefaultBranchRequest> = {
  encode(message: SetDefaultBranchRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.catalog !== "") {
      writer.uint32(10).string(message.catalog);
    }
    if (message.branchId !== "") {
      writer.uint32(18).string(message.branchId);
    }
    if (message.note !== "") {
      writer.uint32(26).string(message.note);
    }
    if (message.force !== false) {
      writer.uint32(32).bool(message.force);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetDefaultBranchRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetDefaultBranchRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.catalog = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.branchId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.note = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.force = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetDefaultBranchRequest {
    return {
      catalog: isSet(object.catalog) ? globalThis.String(object.catalog) : "",
      branchId: isSet(object.branchId) ? globalThis.String(object.branchId) : "",
      note: isSet(object.note) ? globalThis.String(object.note) : "",
      force: isSet(object.force) ? globalThis.Boolean(object.force) : false,
    };
  },

  toJSON(message: SetDefaultBranchRequest): unknown {
    const obj: any = {};
    if (message.catalog !== "") {
      obj.catalog = message.catalog;
    }
    if (message.branchId !== "") {
      obj.branchId = message.branchId;
    }
    if (message.note !== "") {
      obj.note = message.note;
    }
    if (message.force !== false) {
      obj.force = message.force;
    }
    return obj;
  },

  create(base?: DeepPartial<SetDefaultBranchRequest>): SetDefaultBranchRequest {
    return SetDefaultBranchRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SetDefaultBranchRequest>): SetDefaultBranchRequest {
    const message = createBaseSetDefaultBranchRequest();
    message.catalog = object.catalog ?? "";
    message.branchId = object.branchId ?? "";
    message.note = object.note ?? "";
    message.force = object.force ?? false;
    return message;
  },
};

function createBaseGetDefaultBranchRequest(): GetDefaultBranchRequest {
  return { catalog: "" };
}

export const GetDefaultBranchRequest: MessageFns<GetDefaultBranchRequest> = {
  encode(message: GetDefaultBranchRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.catalog !== "") {
      writer.uint32(10).string(message.catalog);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetDefaultBranchRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultBranchRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.catalog = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDefaultBranchRequest {
    return { catalog: isSet(object.catalog) ? globalThis.String(object.catalog) : "" };
  },

  toJSON(message: GetDefaultBranchRequest): unknown {
    const obj: any = {};
    if (message.catalog !== "") {
      obj.catalog = message.catalog;
    }
    return obj;
  },

  create(base?: DeepPartial<GetDefaultBranchRequest>): GetDefaultBranchRequest {
    return GetDefaultBranchRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetDefaultBranchRequest>): GetDefaultBranchRequest {
    const message = createBaseGetDefaultBranchRequest();
    message.catalog = object.catalog ?? "";
    return message;
  },
};

function createBaseGetDefaultBranchResponse(): GetDefaultBranchResponse {
  return { branch: "", setTime: undefined, note: "" };
}

export const GetDefaultBranchResponse: MessageFns<GetDefaultBranchResponse> = {
  encode(message: GetDefaultBranchResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.branch !== "") {
      writer.uint32(10).string(message.branch);
    }
    if (message.setTime !== undefined) {
      Timestamp.encode(toTimestamp(message.setTime), writer.uint32(18).fork()).join();
    }
    if (message.note !== "") {
      writer.uint32(26).string(message.note);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetDefaultBranchResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultBranchResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.branch = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.setTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.note = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDefaultBranchResponse {
    return {
      branch: isSet(object.branch) ? globalThis.String(object.branch) : "",
      setTime: isSet(object.setTime) ? fromJsonTimestamp(object.setTime) : undefined,
      note: isSet(object.note) ? globalThis.String(object.note) : "",
    };
  },

  toJSON(message: GetDefaultBranchResponse): unknown {
    const obj: any = {};
    if (message.branch !== "") {
      obj.branch = message.branch;
    }
    if (message.setTime !== undefined) {
      obj.setTime = message.setTime.toISOString();
    }
    if (message.note !== "") {
      obj.note = message.note;
    }
    return obj;
  },

  create(base?: DeepPartial<GetDefaultBranchResponse>): GetDefaultBranchResponse {
    return GetDefaultBranchResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetDefaultBranchResponse>): GetDefaultBranchResponse {
    const message = createBaseGetDefaultBranchResponse();
    message.branch = object.branch ?? "";
    message.setTime = object.setTime ?? undefined;
    message.note = object.note ?? "";
    return message;
  },
};

function createBaseGetCompletionConfigRequest(): GetCompletionConfigRequest {
  return { name: "" };
}

export const GetCompletionConfigRequest: MessageFns<GetCompletionConfigRequest> = {
  encode(message: GetCompletionConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCompletionConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCompletionConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCompletionConfigRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetCompletionConfigRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetCompletionConfigRequest>): GetCompletionConfigRequest {
    return GetCompletionConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetCompletionConfigRequest>): GetCompletionConfigRequest {
    const message = createBaseGetCompletionConfigRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpdateCompletionConfigRequest(): UpdateCompletionConfigRequest {
  return { completionConfig: undefined, updateMask: undefined };
}

export const UpdateCompletionConfigRequest: MessageFns<UpdateCompletionConfigRequest> = {
  encode(message: UpdateCompletionConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.completionConfig !== undefined) {
      CompletionConfig.encode(message.completionConfig, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateCompletionConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateCompletionConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.completionConfig = CompletionConfig.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateCompletionConfigRequest {
    return {
      completionConfig: isSet(object.completionConfig) ? CompletionConfig.fromJSON(object.completionConfig) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateCompletionConfigRequest): unknown {
    const obj: any = {};
    if (message.completionConfig !== undefined) {
      obj.completionConfig = CompletionConfig.toJSON(message.completionConfig);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateCompletionConfigRequest>): UpdateCompletionConfigRequest {
    return UpdateCompletionConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateCompletionConfigRequest>): UpdateCompletionConfigRequest {
    const message = createBaseUpdateCompletionConfigRequest();
    message.completionConfig = (object.completionConfig !== undefined && object.completionConfig !== null)
      ? CompletionConfig.fromPartial(object.completionConfig)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseGetAttributesConfigRequest(): GetAttributesConfigRequest {
  return { name: "" };
}

export const GetAttributesConfigRequest: MessageFns<GetAttributesConfigRequest> = {
  encode(message: GetAttributesConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAttributesConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAttributesConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAttributesConfigRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetAttributesConfigRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetAttributesConfigRequest>): GetAttributesConfigRequest {
    return GetAttributesConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetAttributesConfigRequest>): GetAttributesConfigRequest {
    const message = createBaseGetAttributesConfigRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpdateAttributesConfigRequest(): UpdateAttributesConfigRequest {
  return { attributesConfig: undefined, updateMask: undefined };
}

export const UpdateAttributesConfigRequest: MessageFns<UpdateAttributesConfigRequest> = {
  encode(message: UpdateAttributesConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.attributesConfig !== undefined) {
      AttributesConfig.encode(message.attributesConfig, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateAttributesConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateAttributesConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.attributesConfig = AttributesConfig.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateAttributesConfigRequest {
    return {
      attributesConfig: isSet(object.attributesConfig) ? AttributesConfig.fromJSON(object.attributesConfig) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateAttributesConfigRequest): unknown {
    const obj: any = {};
    if (message.attributesConfig !== undefined) {
      obj.attributesConfig = AttributesConfig.toJSON(message.attributesConfig);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateAttributesConfigRequest>): UpdateAttributesConfigRequest {
    return UpdateAttributesConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateAttributesConfigRequest>): UpdateAttributesConfigRequest {
    const message = createBaseUpdateAttributesConfigRequest();
    message.attributesConfig = (object.attributesConfig !== undefined && object.attributesConfig !== null)
      ? AttributesConfig.fromPartial(object.attributesConfig)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseAddCatalogAttributeRequest(): AddCatalogAttributeRequest {
  return { attributesConfig: "", catalogAttribute: undefined };
}

export const AddCatalogAttributeRequest: MessageFns<AddCatalogAttributeRequest> = {
  encode(message: AddCatalogAttributeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.attributesConfig !== "") {
      writer.uint32(10).string(message.attributesConfig);
    }
    if (message.catalogAttribute !== undefined) {
      CatalogAttribute.encode(message.catalogAttribute, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddCatalogAttributeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddCatalogAttributeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.attributesConfig = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.catalogAttribute = CatalogAttribute.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddCatalogAttributeRequest {
    return {
      attributesConfig: isSet(object.attributesConfig) ? globalThis.String(object.attributesConfig) : "",
      catalogAttribute: isSet(object.catalogAttribute) ? CatalogAttribute.fromJSON(object.catalogAttribute) : undefined,
    };
  },

  toJSON(message: AddCatalogAttributeRequest): unknown {
    const obj: any = {};
    if (message.attributesConfig !== "") {
      obj.attributesConfig = message.attributesConfig;
    }
    if (message.catalogAttribute !== undefined) {
      obj.catalogAttribute = CatalogAttribute.toJSON(message.catalogAttribute);
    }
    return obj;
  },

  create(base?: DeepPartial<AddCatalogAttributeRequest>): AddCatalogAttributeRequest {
    return AddCatalogAttributeRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddCatalogAttributeRequest>): AddCatalogAttributeRequest {
    const message = createBaseAddCatalogAttributeRequest();
    message.attributesConfig = object.attributesConfig ?? "";
    message.catalogAttribute = (object.catalogAttribute !== undefined && object.catalogAttribute !== null)
      ? CatalogAttribute.fromPartial(object.catalogAttribute)
      : undefined;
    return message;
  },
};

function createBaseRemoveCatalogAttributeRequest(): RemoveCatalogAttributeRequest {
  return { attributesConfig: "", key: "" };
}

export const RemoveCatalogAttributeRequest: MessageFns<RemoveCatalogAttributeRequest> = {
  encode(message: RemoveCatalogAttributeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.attributesConfig !== "") {
      writer.uint32(10).string(message.attributesConfig);
    }
    if (message.key !== "") {
      writer.uint32(18).string(message.key);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveCatalogAttributeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveCatalogAttributeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.attributesConfig = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.key = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveCatalogAttributeRequest {
    return {
      attributesConfig: isSet(object.attributesConfig) ? globalThis.String(object.attributesConfig) : "",
      key: isSet(object.key) ? globalThis.String(object.key) : "",
    };
  },

  toJSON(message: RemoveCatalogAttributeRequest): unknown {
    const obj: any = {};
    if (message.attributesConfig !== "") {
      obj.attributesConfig = message.attributesConfig;
    }
    if (message.key !== "") {
      obj.key = message.key;
    }
    return obj;
  },

  create(base?: DeepPartial<RemoveCatalogAttributeRequest>): RemoveCatalogAttributeRequest {
    return RemoveCatalogAttributeRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveCatalogAttributeRequest>): RemoveCatalogAttributeRequest {
    const message = createBaseRemoveCatalogAttributeRequest();
    message.attributesConfig = object.attributesConfig ?? "";
    message.key = object.key ?? "";
    return message;
  },
};

function createBaseBatchRemoveCatalogAttributesRequest(): BatchRemoveCatalogAttributesRequest {
  return { attributesConfig: "", attributeKeys: [] };
}

export const BatchRemoveCatalogAttributesRequest: MessageFns<BatchRemoveCatalogAttributesRequest> = {
  encode(message: BatchRemoveCatalogAttributesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.attributesConfig !== "") {
      writer.uint32(10).string(message.attributesConfig);
    }
    for (const v of message.attributeKeys) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BatchRemoveCatalogAttributesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBatchRemoveCatalogAttributesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.attributesConfig = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.attributeKeys.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BatchRemoveCatalogAttributesRequest {
    return {
      attributesConfig: isSet(object.attributesConfig) ? globalThis.String(object.attributesConfig) : "",
      attributeKeys: globalThis.Array.isArray(object?.attributeKeys)
        ? object.attributeKeys.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: BatchRemoveCatalogAttributesRequest): unknown {
    const obj: any = {};
    if (message.attributesConfig !== "") {
      obj.attributesConfig = message.attributesConfig;
    }
    if (message.attributeKeys?.length) {
      obj.attributeKeys = message.attributeKeys;
    }
    return obj;
  },

  create(base?: DeepPartial<BatchRemoveCatalogAttributesRequest>): BatchRemoveCatalogAttributesRequest {
    return BatchRemoveCatalogAttributesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BatchRemoveCatalogAttributesRequest>): BatchRemoveCatalogAttributesRequest {
    const message = createBaseBatchRemoveCatalogAttributesRequest();
    message.attributesConfig = object.attributesConfig ?? "";
    message.attributeKeys = object.attributeKeys?.map((e) => e) || [];
    return message;
  },
};

function createBaseBatchRemoveCatalogAttributesResponse(): BatchRemoveCatalogAttributesResponse {
  return { deletedCatalogAttributes: [], resetCatalogAttributes: [] };
}

export const BatchRemoveCatalogAttributesResponse: MessageFns<BatchRemoveCatalogAttributesResponse> = {
  encode(message: BatchRemoveCatalogAttributesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.deletedCatalogAttributes) {
      writer.uint32(10).string(v!);
    }
    for (const v of message.resetCatalogAttributes) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BatchRemoveCatalogAttributesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBatchRemoveCatalogAttributesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.deletedCatalogAttributes.push(reader.string());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.resetCatalogAttributes.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BatchRemoveCatalogAttributesResponse {
    return {
      deletedCatalogAttributes: globalThis.Array.isArray(object?.deletedCatalogAttributes)
        ? object.deletedCatalogAttributes.map((e: any) => globalThis.String(e))
        : [],
      resetCatalogAttributes: globalThis.Array.isArray(object?.resetCatalogAttributes)
        ? object.resetCatalogAttributes.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: BatchRemoveCatalogAttributesResponse): unknown {
    const obj: any = {};
    if (message.deletedCatalogAttributes?.length) {
      obj.deletedCatalogAttributes = message.deletedCatalogAttributes;
    }
    if (message.resetCatalogAttributes?.length) {
      obj.resetCatalogAttributes = message.resetCatalogAttributes;
    }
    return obj;
  },

  create(base?: DeepPartial<BatchRemoveCatalogAttributesResponse>): BatchRemoveCatalogAttributesResponse {
    return BatchRemoveCatalogAttributesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BatchRemoveCatalogAttributesResponse>): BatchRemoveCatalogAttributesResponse {
    const message = createBaseBatchRemoveCatalogAttributesResponse();
    message.deletedCatalogAttributes = object.deletedCatalogAttributes?.map((e) => e) || [];
    message.resetCatalogAttributes = object.resetCatalogAttributes?.map((e) => e) || [];
    return message;
  },
};

function createBaseReplaceCatalogAttributeRequest(): ReplaceCatalogAttributeRequest {
  return { attributesConfig: "", catalogAttribute: undefined, updateMask: undefined };
}

export const ReplaceCatalogAttributeRequest: MessageFns<ReplaceCatalogAttributeRequest> = {
  encode(message: ReplaceCatalogAttributeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.attributesConfig !== "") {
      writer.uint32(10).string(message.attributesConfig);
    }
    if (message.catalogAttribute !== undefined) {
      CatalogAttribute.encode(message.catalogAttribute, writer.uint32(18).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReplaceCatalogAttributeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReplaceCatalogAttributeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.attributesConfig = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.catalogAttribute = CatalogAttribute.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReplaceCatalogAttributeRequest {
    return {
      attributesConfig: isSet(object.attributesConfig) ? globalThis.String(object.attributesConfig) : "",
      catalogAttribute: isSet(object.catalogAttribute) ? CatalogAttribute.fromJSON(object.catalogAttribute) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: ReplaceCatalogAttributeRequest): unknown {
    const obj: any = {};
    if (message.attributesConfig !== "") {
      obj.attributesConfig = message.attributesConfig;
    }
    if (message.catalogAttribute !== undefined) {
      obj.catalogAttribute = CatalogAttribute.toJSON(message.catalogAttribute);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<ReplaceCatalogAttributeRequest>): ReplaceCatalogAttributeRequest {
    return ReplaceCatalogAttributeRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ReplaceCatalogAttributeRequest>): ReplaceCatalogAttributeRequest {
    const message = createBaseReplaceCatalogAttributeRequest();
    message.attributesConfig = object.attributesConfig ?? "";
    message.catalogAttribute = (object.catalogAttribute !== undefined && object.catalogAttribute !== null)
      ? CatalogAttribute.fromPartial(object.catalogAttribute)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

/** Service for managing catalog configuration. */
export type CatalogServiceDefinition = typeof CatalogServiceDefinition;
export const CatalogServiceDefinition = {
  name: "CatalogService",
  fullName: "google.cloud.retail.v2alpha.CatalogService",
  methods: {
    /**
     * Lists all the [Catalog][google.cloud.retail.v2alpha.Catalog]s associated
     * with the project.
     */
    listCatalogs: {
      name: "ListCatalogs",
      requestType: ListCatalogsRequest,
      requestStream: false,
      responseType: ListCatalogsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              51,
              18,
              49,
              47,
              118,
              50,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              115,
            ]),
          ],
        },
      },
    },
    /** Updates the [Catalog][google.cloud.retail.v2alpha.Catalog]s. */
    updateCatalog: {
      name: "UpdateCatalog",
      requestType: UpdateCatalogRequest,
      requestStream: false,
      responseType: Catalog,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([19, 99, 97, 116, 97, 108, 111, 103, 44, 117, 112, 100, 97, 116, 101, 95, 109, 97, 115, 107]),
          ],
          578365826: [
            Buffer.from([
              68,
              58,
              7,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              50,
              57,
              47,
              118,
              50,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Set a specified branch id as default branch. API methods such as
     * [SearchService.Search][google.cloud.retail.v2alpha.SearchService.Search],
     * [ProductService.GetProduct][google.cloud.retail.v2alpha.ProductService.GetProduct],
     * [ProductService.ListProducts][google.cloud.retail.v2alpha.ProductService.ListProducts]
     * will treat requests using "default_branch" to the actual branch id set as
     * default.
     *
     * For example, if `projects/* /locations/* /catalogs/* /branches/1` is set as
     * default, setting
     * [SearchRequest.branch][google.cloud.retail.v2alpha.SearchRequest.branch] to
     * `projects/* /locations/* /catalogs/* /branches/default_branch` is equivalent
     * to setting
     * [SearchRequest.branch][google.cloud.retail.v2alpha.SearchRequest.branch] to
     * `projects/* /locations/* /catalogs/* /branches/1`.
     *
     * Using multiple branches can be useful when developers would like
     * to have a staging branch to test and verify for future usage. When it
     * becomes ready, developers switch on the staging branch using this API while
     * keeping using `projects/* /locations/* /catalogs/* /branches/default_branch`
     * as [SearchRequest.branch][google.cloud.retail.v2alpha.SearchRequest.branch]
     * to route the traffic to this staging branch.
     *
     * CAUTION: If you have live predict/search traffic, switching the default
     * branch could potentially cause outages if the ID space of the new branch is
     * very different from the old one.
     *
     * More specifically:
     *
     * * PredictionService will only return product IDs from branch {newBranch}.
     * * SearchService will only return product IDs from branch {newBranch}
     *   (if branch is not explicitly set).
     * * UserEventService will only join events with products from branch
     *   {newBranch}.
     */
    setDefaultBranch: {
      name: "SetDefaultBranch",
      requestType: SetDefaultBranchRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([7, 99, 97, 116, 97, 108, 111, 103])],
          578365826: [
            Buffer.from([
              74,
              58,
              1,
              42,
              34,
              69,
              47,
              118,
              50,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              115,
              47,
              42,
              125,
              58,
              115,
              101,
              116,
              68,
              101,
              102,
              97,
              117,
              108,
              116,
              66,
              114,
              97,
              110,
              99,
              104,
            ]),
          ],
        },
      },
    },
    /**
     * Get which branch is currently default branch set by
     * [CatalogService.SetDefaultBranch][google.cloud.retail.v2alpha.CatalogService.SetDefaultBranch]
     * method under a specified parent catalog.
     */
    getDefaultBranch: {
      name: "GetDefaultBranch",
      requestType: GetDefaultBranchRequest,
      requestStream: false,
      responseType: GetDefaultBranchResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([7, 99, 97, 116, 97, 108, 111, 103])],
          578365826: [
            Buffer.from([
              71,
              18,
              69,
              47,
              118,
              50,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              115,
              47,
              42,
              125,
              58,
              103,
              101,
              116,
              68,
              101,
              102,
              97,
              117,
              108,
              116,
              66,
              114,
              97,
              110,
              99,
              104,
            ]),
          ],
        },
      },
    },
    /** Gets a [CompletionConfig][google.cloud.retail.v2alpha.CompletionConfig]. */
    getCompletionConfig: {
      name: "GetCompletionConfig",
      requestType: GetCompletionConfigRequest,
      requestStream: false,
      responseType: CompletionConfig,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              68,
              18,
              66,
              47,
              118,
              50,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              115,
              47,
              42,
              47,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              105,
              111,
              110,
              67,
              111,
              110,
              102,
              105,
              103,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Updates the
     * [CompletionConfig][google.cloud.retail.v2alpha.CompletionConfig]s.
     */
    updateCompletionConfig: {
      name: "UpdateCompletionConfig",
      requestType: UpdateCompletionConfigRequest,
      requestStream: false,
      responseType: CompletionConfig,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              29,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              105,
              111,
              110,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              105,
              58,
              17,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              105,
              111,
              110,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              50,
              84,
              47,
              118,
              50,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              105,
              111,
              110,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              115,
              47,
              42,
              47,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              105,
              111,
              110,
              67,
              111,
              110,
              102,
              105,
              103,
              125,
            ]),
          ],
        },
      },
    },
    /** Gets an [AttributesConfig][google.cloud.retail.v2alpha.AttributesConfig]. */
    getAttributesConfig: {
      name: "GetAttributesConfig",
      requestType: GetAttributesConfigRequest,
      requestStream: false,
      responseType: AttributesConfig,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              68,
              18,
              66,
              47,
              118,
              50,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              115,
              47,
              42,
              47,
              97,
              116,
              116,
              114,
              105,
              98,
              117,
              116,
              101,
              115,
              67,
              111,
              110,
              102,
              105,
              103,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Updates the
     * [AttributesConfig][google.cloud.retail.v2alpha.AttributesConfig].
     *
     * The catalog attributes in the request will be updated in the catalog, or
     * inserted if they do not exist. Existing catalog attributes not included in
     * the request will remain unchanged. Attributes that are assigned to
     * products, but do not exist at the catalog level, are always included in the
     * response. The product attribute is assigned default values for missing
     * catalog attribute fields, e.g., searchable and dynamic facetable options.
     */
    updateAttributesConfig: {
      name: "UpdateAttributesConfig",
      requestType: UpdateAttributesConfigRequest,
      requestStream: false,
      responseType: AttributesConfig,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              29,
              97,
              116,
              116,
              114,
              105,
              98,
              117,
              116,
              101,
              115,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              105,
              58,
              17,
              97,
              116,
              116,
              114,
              105,
              98,
              117,
              116,
              101,
              115,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              50,
              84,
              47,
              118,
              50,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              97,
              116,
              116,
              114,
              105,
              98,
              117,
              116,
              101,
              115,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              115,
              47,
              42,
              47,
              97,
              116,
              116,
              114,
              105,
              98,
              117,
              116,
              101,
              115,
              67,
              111,
              110,
              102,
              105,
              103,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Adds the specified
     * [CatalogAttribute][google.cloud.retail.v2alpha.CatalogAttribute] to the
     * [AttributesConfig][google.cloud.retail.v2alpha.AttributesConfig].
     *
     * If the [CatalogAttribute][google.cloud.retail.v2alpha.CatalogAttribute] to
     * add already exists, an ALREADY_EXISTS error is returned.
     */
    addCatalogAttribute: {
      name: "AddCatalogAttribute",
      requestType: AddCatalogAttributeRequest,
      requestStream: false,
      responseType: AttributesConfig,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              104,
              58,
              1,
              42,
              34,
              99,
              47,
              118,
              50,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              97,
              116,
              116,
              114,
              105,
              98,
              117,
              116,
              101,
              115,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              115,
              47,
              42,
              47,
              97,
              116,
              116,
              114,
              105,
              98,
              117,
              116,
              101,
              115,
              67,
              111,
              110,
              102,
              105,
              103,
              125,
              58,
              97,
              100,
              100,
              67,
              97,
              116,
              97,
              108,
              111,
              103,
              65,
              116,
              116,
              114,
              105,
              98,
              117,
              116,
              101,
            ]),
          ],
        },
      },
    },
    /**
     * Removes the specified
     * [CatalogAttribute][google.cloud.retail.v2alpha.CatalogAttribute] from the
     * [AttributesConfig][google.cloud.retail.v2alpha.AttributesConfig].
     *
     * If the [CatalogAttribute][google.cloud.retail.v2alpha.CatalogAttribute] to
     * remove does not exist, a NOT_FOUND error is returned.
     */
    removeCatalogAttribute: {
      name: "RemoveCatalogAttribute",
      requestType: RemoveCatalogAttributeRequest,
      requestStream: false,
      responseType: AttributesConfig,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              107,
              58,
              1,
              42,
              34,
              102,
              47,
              118,
              50,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              97,
              116,
              116,
              114,
              105,
              98,
              117,
              116,
              101,
              115,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              115,
              47,
              42,
              47,
              97,
              116,
              116,
              114,
              105,
              98,
              117,
              116,
              101,
              115,
              67,
              111,
              110,
              102,
              105,
              103,
              125,
              58,
              114,
              101,
              109,
              111,
              118,
              101,
              67,
              97,
              116,
              97,
              108,
              111,
              103,
              65,
              116,
              116,
              114,
              105,
              98,
              117,
              116,
              101,
            ]),
          ],
        },
      },
    },
    /**
     * Removes all specified
     * [CatalogAttribute][google.cloud.retail.v2alpha.CatalogAttribute]s from the
     * [AttributesConfig][google.cloud.retail.v2alpha.AttributesConfig].
     */
    batchRemoveCatalogAttributes: {
      name: "BatchRemoveCatalogAttributes",
      requestType: BatchRemoveCatalogAttributesRequest,
      requestStream: false,
      responseType: BatchRemoveCatalogAttributesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              113,
              58,
              1,
              42,
              34,
              108,
              47,
              118,
              50,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              97,
              116,
              116,
              114,
              105,
              98,
              117,
              116,
              101,
              115,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              115,
              47,
              42,
              47,
              97,
              116,
              116,
              114,
              105,
              98,
              117,
              116,
              101,
              115,
              67,
              111,
              110,
              102,
              105,
              103,
              125,
              58,
              98,
              97,
              116,
              99,
              104,
              82,
              101,
              109,
              111,
              118,
              101,
              67,
              97,
              116,
              97,
              108,
              111,
              103,
              65,
              116,
              116,
              114,
              105,
              98,
              117,
              116,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Replaces the specified
     * [CatalogAttribute][google.cloud.retail.v2alpha.CatalogAttribute] in the
     * [AttributesConfig][google.cloud.retail.v2alpha.AttributesConfig] by
     * updating the catalog attribute with the same
     * [CatalogAttribute.key][google.cloud.retail.v2alpha.CatalogAttribute.key].
     *
     * If the [CatalogAttribute][google.cloud.retail.v2alpha.CatalogAttribute] to
     * replace does not exist, a NOT_FOUND error is returned.
     */
    replaceCatalogAttribute: {
      name: "ReplaceCatalogAttribute",
      requestType: ReplaceCatalogAttributeRequest,
      requestStream: false,
      responseType: AttributesConfig,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              108,
              58,
              1,
              42,
              34,
              103,
              47,
              118,
              50,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              97,
              116,
              116,
              114,
              105,
              98,
              117,
              116,
              101,
              115,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              115,
              47,
              42,
              47,
              97,
              116,
              116,
              114,
              105,
              98,
              117,
              116,
              101,
              115,
              67,
              111,
              110,
              102,
              105,
              103,
              125,
              58,
              114,
              101,
              112,
              108,
              97,
              99,
              101,
              67,
              97,
              116,
              97,
              108,
              111,
              103,
              65,
              116,
              116,
              114,
              105,
              98,
              117,
              116,
              101,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface CatalogServiceImplementation<CallContextExt = {}> {
  /**
   * Lists all the [Catalog][google.cloud.retail.v2alpha.Catalog]s associated
   * with the project.
   */
  listCatalogs(
    request: ListCatalogsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListCatalogsResponse>>;
  /** Updates the [Catalog][google.cloud.retail.v2alpha.Catalog]s. */
  updateCatalog(request: UpdateCatalogRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Catalog>>;
  /**
   * Set a specified branch id as default branch. API methods such as
   * [SearchService.Search][google.cloud.retail.v2alpha.SearchService.Search],
   * [ProductService.GetProduct][google.cloud.retail.v2alpha.ProductService.GetProduct],
   * [ProductService.ListProducts][google.cloud.retail.v2alpha.ProductService.ListProducts]
   * will treat requests using "default_branch" to the actual branch id set as
   * default.
   *
   * For example, if `projects/* /locations/* /catalogs/* /branches/1` is set as
   * default, setting
   * [SearchRequest.branch][google.cloud.retail.v2alpha.SearchRequest.branch] to
   * `projects/* /locations/* /catalogs/* /branches/default_branch` is equivalent
   * to setting
   * [SearchRequest.branch][google.cloud.retail.v2alpha.SearchRequest.branch] to
   * `projects/* /locations/* /catalogs/* /branches/1`.
   *
   * Using multiple branches can be useful when developers would like
   * to have a staging branch to test and verify for future usage. When it
   * becomes ready, developers switch on the staging branch using this API while
   * keeping using `projects/* /locations/* /catalogs/* /branches/default_branch`
   * as [SearchRequest.branch][google.cloud.retail.v2alpha.SearchRequest.branch]
   * to route the traffic to this staging branch.
   *
   * CAUTION: If you have live predict/search traffic, switching the default
   * branch could potentially cause outages if the ID space of the new branch is
   * very different from the old one.
   *
   * More specifically:
   *
   * * PredictionService will only return product IDs from branch {newBranch}.
   * * SearchService will only return product IDs from branch {newBranch}
   *   (if branch is not explicitly set).
   * * UserEventService will only join events with products from branch
   *   {newBranch}.
   */
  setDefaultBranch(
    request: SetDefaultBranchRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  /**
   * Get which branch is currently default branch set by
   * [CatalogService.SetDefaultBranch][google.cloud.retail.v2alpha.CatalogService.SetDefaultBranch]
   * method under a specified parent catalog.
   */
  getDefaultBranch(
    request: GetDefaultBranchRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetDefaultBranchResponse>>;
  /** Gets a [CompletionConfig][google.cloud.retail.v2alpha.CompletionConfig]. */
  getCompletionConfig(
    request: GetCompletionConfigRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<CompletionConfig>>;
  /**
   * Updates the
   * [CompletionConfig][google.cloud.retail.v2alpha.CompletionConfig]s.
   */
  updateCompletionConfig(
    request: UpdateCompletionConfigRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<CompletionConfig>>;
  /** Gets an [AttributesConfig][google.cloud.retail.v2alpha.AttributesConfig]. */
  getAttributesConfig(
    request: GetAttributesConfigRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AttributesConfig>>;
  /**
   * Updates the
   * [AttributesConfig][google.cloud.retail.v2alpha.AttributesConfig].
   *
   * The catalog attributes in the request will be updated in the catalog, or
   * inserted if they do not exist. Existing catalog attributes not included in
   * the request will remain unchanged. Attributes that are assigned to
   * products, but do not exist at the catalog level, are always included in the
   * response. The product attribute is assigned default values for missing
   * catalog attribute fields, e.g., searchable and dynamic facetable options.
   */
  updateAttributesConfig(
    request: UpdateAttributesConfigRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AttributesConfig>>;
  /**
   * Adds the specified
   * [CatalogAttribute][google.cloud.retail.v2alpha.CatalogAttribute] to the
   * [AttributesConfig][google.cloud.retail.v2alpha.AttributesConfig].
   *
   * If the [CatalogAttribute][google.cloud.retail.v2alpha.CatalogAttribute] to
   * add already exists, an ALREADY_EXISTS error is returned.
   */
  addCatalogAttribute(
    request: AddCatalogAttributeRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AttributesConfig>>;
  /**
   * Removes the specified
   * [CatalogAttribute][google.cloud.retail.v2alpha.CatalogAttribute] from the
   * [AttributesConfig][google.cloud.retail.v2alpha.AttributesConfig].
   *
   * If the [CatalogAttribute][google.cloud.retail.v2alpha.CatalogAttribute] to
   * remove does not exist, a NOT_FOUND error is returned.
   */
  removeCatalogAttribute(
    request: RemoveCatalogAttributeRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AttributesConfig>>;
  /**
   * Removes all specified
   * [CatalogAttribute][google.cloud.retail.v2alpha.CatalogAttribute]s from the
   * [AttributesConfig][google.cloud.retail.v2alpha.AttributesConfig].
   */
  batchRemoveCatalogAttributes(
    request: BatchRemoveCatalogAttributesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<BatchRemoveCatalogAttributesResponse>>;
  /**
   * Replaces the specified
   * [CatalogAttribute][google.cloud.retail.v2alpha.CatalogAttribute] in the
   * [AttributesConfig][google.cloud.retail.v2alpha.AttributesConfig] by
   * updating the catalog attribute with the same
   * [CatalogAttribute.key][google.cloud.retail.v2alpha.CatalogAttribute.key].
   *
   * If the [CatalogAttribute][google.cloud.retail.v2alpha.CatalogAttribute] to
   * replace does not exist, a NOT_FOUND error is returned.
   */
  replaceCatalogAttribute(
    request: ReplaceCatalogAttributeRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AttributesConfig>>;
}

export interface CatalogServiceClient<CallOptionsExt = {}> {
  /**
   * Lists all the [Catalog][google.cloud.retail.v2alpha.Catalog]s associated
   * with the project.
   */
  listCatalogs(
    request: DeepPartial<ListCatalogsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListCatalogsResponse>;
  /** Updates the [Catalog][google.cloud.retail.v2alpha.Catalog]s. */
  updateCatalog(request: DeepPartial<UpdateCatalogRequest>, options?: CallOptions & CallOptionsExt): Promise<Catalog>;
  /**
   * Set a specified branch id as default branch. API methods such as
   * [SearchService.Search][google.cloud.retail.v2alpha.SearchService.Search],
   * [ProductService.GetProduct][google.cloud.retail.v2alpha.ProductService.GetProduct],
   * [ProductService.ListProducts][google.cloud.retail.v2alpha.ProductService.ListProducts]
   * will treat requests using "default_branch" to the actual branch id set as
   * default.
   *
   * For example, if `projects/* /locations/* /catalogs/* /branches/1` is set as
   * default, setting
   * [SearchRequest.branch][google.cloud.retail.v2alpha.SearchRequest.branch] to
   * `projects/* /locations/* /catalogs/* /branches/default_branch` is equivalent
   * to setting
   * [SearchRequest.branch][google.cloud.retail.v2alpha.SearchRequest.branch] to
   * `projects/* /locations/* /catalogs/* /branches/1`.
   *
   * Using multiple branches can be useful when developers would like
   * to have a staging branch to test and verify for future usage. When it
   * becomes ready, developers switch on the staging branch using this API while
   * keeping using `projects/* /locations/* /catalogs/* /branches/default_branch`
   * as [SearchRequest.branch][google.cloud.retail.v2alpha.SearchRequest.branch]
   * to route the traffic to this staging branch.
   *
   * CAUTION: If you have live predict/search traffic, switching the default
   * branch could potentially cause outages if the ID space of the new branch is
   * very different from the old one.
   *
   * More specifically:
   *
   * * PredictionService will only return product IDs from branch {newBranch}.
   * * SearchService will only return product IDs from branch {newBranch}
   *   (if branch is not explicitly set).
   * * UserEventService will only join events with products from branch
   *   {newBranch}.
   */
  setDefaultBranch(
    request: DeepPartial<SetDefaultBranchRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  /**
   * Get which branch is currently default branch set by
   * [CatalogService.SetDefaultBranch][google.cloud.retail.v2alpha.CatalogService.SetDefaultBranch]
   * method under a specified parent catalog.
   */
  getDefaultBranch(
    request: DeepPartial<GetDefaultBranchRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetDefaultBranchResponse>;
  /** Gets a [CompletionConfig][google.cloud.retail.v2alpha.CompletionConfig]. */
  getCompletionConfig(
    request: DeepPartial<GetCompletionConfigRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<CompletionConfig>;
  /**
   * Updates the
   * [CompletionConfig][google.cloud.retail.v2alpha.CompletionConfig]s.
   */
  updateCompletionConfig(
    request: DeepPartial<UpdateCompletionConfigRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<CompletionConfig>;
  /** Gets an [AttributesConfig][google.cloud.retail.v2alpha.AttributesConfig]. */
  getAttributesConfig(
    request: DeepPartial<GetAttributesConfigRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AttributesConfig>;
  /**
   * Updates the
   * [AttributesConfig][google.cloud.retail.v2alpha.AttributesConfig].
   *
   * The catalog attributes in the request will be updated in the catalog, or
   * inserted if they do not exist. Existing catalog attributes not included in
   * the request will remain unchanged. Attributes that are assigned to
   * products, but do not exist at the catalog level, are always included in the
   * response. The product attribute is assigned default values for missing
   * catalog attribute fields, e.g., searchable and dynamic facetable options.
   */
  updateAttributesConfig(
    request: DeepPartial<UpdateAttributesConfigRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AttributesConfig>;
  /**
   * Adds the specified
   * [CatalogAttribute][google.cloud.retail.v2alpha.CatalogAttribute] to the
   * [AttributesConfig][google.cloud.retail.v2alpha.AttributesConfig].
   *
   * If the [CatalogAttribute][google.cloud.retail.v2alpha.CatalogAttribute] to
   * add already exists, an ALREADY_EXISTS error is returned.
   */
  addCatalogAttribute(
    request: DeepPartial<AddCatalogAttributeRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AttributesConfig>;
  /**
   * Removes the specified
   * [CatalogAttribute][google.cloud.retail.v2alpha.CatalogAttribute] from the
   * [AttributesConfig][google.cloud.retail.v2alpha.AttributesConfig].
   *
   * If the [CatalogAttribute][google.cloud.retail.v2alpha.CatalogAttribute] to
   * remove does not exist, a NOT_FOUND error is returned.
   */
  removeCatalogAttribute(
    request: DeepPartial<RemoveCatalogAttributeRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AttributesConfig>;
  /**
   * Removes all specified
   * [CatalogAttribute][google.cloud.retail.v2alpha.CatalogAttribute]s from the
   * [AttributesConfig][google.cloud.retail.v2alpha.AttributesConfig].
   */
  batchRemoveCatalogAttributes(
    request: DeepPartial<BatchRemoveCatalogAttributesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<BatchRemoveCatalogAttributesResponse>;
  /**
   * Replaces the specified
   * [CatalogAttribute][google.cloud.retail.v2alpha.CatalogAttribute] in the
   * [AttributesConfig][google.cloud.retail.v2alpha.AttributesConfig] by
   * updating the catalog attribute with the same
   * [CatalogAttribute.key][google.cloud.retail.v2alpha.CatalogAttribute.key].
   *
   * If the [CatalogAttribute][google.cloud.retail.v2alpha.CatalogAttribute] to
   * replace does not exist, a NOT_FOUND error is returned.
   */
  replaceCatalogAttribute(
    request: DeepPartial<ReplaceCatalogAttributeRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AttributesConfig>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
