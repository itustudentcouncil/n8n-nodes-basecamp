// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/run/v2/service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { LaunchStage, launchStageFromJSON, launchStageToJSON } from "../../../api/launch_stage.js";
import {
  GetIamPolicyRequest,
  SetIamPolicyRequest,
  TestIamPermissionsRequest,
  TestIamPermissionsResponse,
} from "../../../iam/v1/iam_policy.js";
import { Policy } from "../../../iam/v1/policy.js";
import { Operation } from "../../../longrunning/operations.js";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { Condition } from "./condition.js";
import { RevisionTemplate } from "./revision_template.js";
import { TrafficTarget, TrafficTargetStatus } from "./traffic_target.js";
import {
  BinaryAuthorization,
  IngressTraffic,
  ingressTrafficFromJSON,
  ingressTrafficToJSON,
  ServiceScaling,
} from "./vendor_settings.js";

export const protobufPackage = "google.cloud.run.v2";

/** Request message for creating a Service. */
export interface CreateServiceRequest {
  /**
   * Required. The location and project in which this service should be created.
   * Format: projects/{project}/locations/{location}, where {project} can be
   * project id or number. Only lowercase characters, digits, and hyphens.
   */
  parent: string;
  /** Required. The Service instance to create. */
  service:
    | Service
    | undefined;
  /**
   * Required. The unique identifier for the Service. It must begin with letter,
   * and cannot end with hyphen; must contain fewer than 50 characters.
   * The name of the service becomes {parent}/services/{service_id}.
   */
  serviceId: string;
  /**
   * Indicates that the request should be validated and default values
   * populated, without persisting the request or creating any resources.
   */
  validateOnly: boolean;
}

/** Request message for updating a service. */
export interface UpdateServiceRequest {
  /** Optional. The list of fields to be updated. */
  updateMask:
    | string[]
    | undefined;
  /** Required. The Service to be updated. */
  service:
    | Service
    | undefined;
  /**
   * Indicates that the request should be validated and default values
   * populated, without persisting the request or updating any resources.
   */
  validateOnly: boolean;
  /**
   * Optional. If set to true, and if the Service does not exist, it will create
   * a new one. The caller must have 'run.services.create' permissions if this
   * is set to true and the Service does not exist.
   */
  allowMissing: boolean;
}

/** Request message for retrieving a list of Services. */
export interface ListServicesRequest {
  /**
   * Required. The location and project to list resources on.
   * Location must be a valid Google Cloud region, and cannot be the "-"
   * wildcard. Format: projects/{project}/locations/{location}, where {project}
   * can be project id or number.
   */
  parent: string;
  /** Maximum number of Services to return in this call. */
  pageSize: number;
  /**
   * A page token received from a previous call to ListServices.
   * All other parameters must match.
   */
  pageToken: string;
  /** If true, returns deleted (but unexpired) resources along with active ones. */
  showDeleted: boolean;
}

/** Response message containing a list of Services. */
export interface ListServicesResponse {
  /** The resulting list of Services. */
  services: Service[];
  /**
   * A token indicating there are more items than page_size. Use it in the next
   * ListServices request to continue.
   */
  nextPageToken: string;
}

/** Request message for obtaining a Service by its full name. */
export interface GetServiceRequest {
  /**
   * Required. The full name of the Service.
   * Format: projects/{project}/locations/{location}/services/{service}, where
   * {project} can be project id or number.
   */
  name: string;
}

/** Request message to delete a Service by its full name. */
export interface DeleteServiceRequest {
  /**
   * Required. The full name of the Service.
   * Format: projects/{project}/locations/{location}/services/{service}, where
   * {project} can be project id or number.
   */
  name: string;
  /**
   * Indicates that the request should be validated without actually
   * deleting any resources.
   */
  validateOnly: boolean;
  /**
   * A system-generated fingerprint for this version of the
   * resource. May be used to detect modification conflict during updates.
   */
  etag: string;
}

/**
 * Service acts as a top-level container that manages a set of
 * configurations and revision templates which implement a network service.
 * Service exists to provide a singular abstraction which can be access
 * controlled, reasoned about, and which encapsulates software lifecycle
 * decisions such as rollout policy and team resource ownership.
 */
export interface Service {
  /**
   * The fully qualified name of this Service. In CreateServiceRequest, this
   * field is ignored, and instead composed from CreateServiceRequest.parent and
   * CreateServiceRequest.service_id.
   *
   * Format:
   * projects/{project}/locations/{location}/services/{service_id}
   */
  name: string;
  /**
   * User-provided description of the Service. This field currently has a
   * 512-character limit.
   */
  description: string;
  /**
   * Output only. Server assigned unique identifier for the trigger. The value
   * is a UUID4 string and guaranteed to remain unchanged until the resource is
   * deleted.
   */
  uid: string;
  /**
   * Output only. A number that monotonically increases every time the user
   * modifies the desired state.
   * Please note that unlike v1, this is an int64 value. As with most Google
   * APIs, its JSON representation will be a `string` instead of an `integer`.
   */
  generation: Long;
  /**
   * Optional. Unstructured key value map that can be used to organize and
   * categorize objects. User-provided labels are shared with Google's billing
   * system, so they can be used to filter, or break down billing charges by
   * team, component, environment, state, etc. For more information, visit
   * https://cloud.google.com/resource-manager/docs/creating-managing-labels or
   * https://cloud.google.com/run/docs/configuring/labels.
   *
   * <p>Cloud Run API v2 does not support labels with  `run.googleapis.com`,
   * `cloud.googleapis.com`, `serving.knative.dev`, or `autoscaling.knative.dev`
   * namespaces, and they will be rejected. All system labels in v1 now have a
   * corresponding field in v2 Service.
   */
  labels: { [key: string]: string };
  /**
   * Optional. Unstructured key value map that may be set by external tools to
   * store and arbitrary metadata. They are not queryable and should be
   * preserved when modifying objects.
   *
   * <p>Cloud Run API v2 does not support annotations with `run.googleapis.com`,
   * `cloud.googleapis.com`, `serving.knative.dev`, or `autoscaling.knative.dev`
   * namespaces, and they will be rejected in new resources. All system
   * annotations in v1 now have a corresponding field in v2 Service.
   *
   * <p>This field follows Kubernetes
   * annotations' namespacing, limits, and rules.
   */
  annotations: { [key: string]: string };
  /** Output only. The creation time. */
  createTime:
    | Date
    | undefined;
  /** Output only. The last-modified time. */
  updateTime:
    | Date
    | undefined;
  /**
   * Output only. The deletion time. It is only populated as a response to a
   * Delete request.
   */
  deleteTime:
    | Date
    | undefined;
  /**
   * Output only. For a deleted resource, the time after which it will be
   * permamently deleted.
   */
  expireTime:
    | Date
    | undefined;
  /** Output only. Email address of the authenticated creator. */
  creator: string;
  /** Output only. Email address of the last authenticated modifier. */
  lastModifier: string;
  /** Arbitrary identifier for the API client. */
  client: string;
  /** Arbitrary version identifier for the API client. */
  clientVersion: string;
  /**
   * Optional. Provides the ingress settings for this Service. On output,
   * returns the currently observed ingress settings, or
   * INGRESS_TRAFFIC_UNSPECIFIED if no revision is active.
   */
  ingress: IngressTraffic;
  /**
   * Optional. The launch stage as defined by [Google Cloud Platform
   * Launch Stages](https://cloud.google.com/terms/launch-stages).
   * Cloud Run supports `ALPHA`, `BETA`, and `GA`. If no value is specified, GA
   * is assumed.
   * Set the launch stage to a preview stage on input to allow use of preview
   * features in that stage. On read (or output), describes whether the resource
   * uses preview features.
   * <p>
   * For example, if ALPHA is provided as input, but only BETA and GA-level
   * features are used, this field will be BETA on output.
   */
  launchStage: LaunchStage;
  /** Optional. Settings for the Binary Authorization feature. */
  binaryAuthorization:
    | BinaryAuthorization
    | undefined;
  /** Required. The template used to create revisions for this Service. */
  template:
    | RevisionTemplate
    | undefined;
  /**
   * Optional. Specifies how to distribute traffic over a collection of
   * Revisions belonging to the Service. If traffic is empty or not provided,
   * defaults to 100% traffic to the latest `Ready` Revision.
   */
  traffic: TrafficTarget[];
  /** Optional. Specifies service-level scaling settings */
  scaling:
    | ServiceScaling
    | undefined;
  /** Optional. Disables public resolution of the default URI of this service. */
  defaultUriDisabled: boolean;
  /**
   * Output only. The generation of this Service currently serving traffic. See
   * comments in `reconciling` for additional information on reconciliation
   * process in Cloud Run. Please note that unlike v1, this is an int64 value.
   * As with most Google APIs, its JSON representation will be a `string`
   * instead of an `integer`.
   */
  observedGeneration: Long;
  /**
   * Output only. The Condition of this Service, containing its readiness
   * status, and detailed error information in case it did not reach a serving
   * state. See comments in `reconciling` for additional information on
   * reconciliation process in Cloud Run.
   */
  terminalCondition:
    | Condition
    | undefined;
  /**
   * Output only. The Conditions of all other associated sub-resources. They
   * contain additional diagnostics information in case the Service does not
   * reach its Serving state. See comments in `reconciling` for additional
   * information on reconciliation process in Cloud Run.
   */
  conditions: Condition[];
  /**
   * Output only. Name of the latest revision that is serving traffic. See
   * comments in `reconciling` for additional information on reconciliation
   * process in Cloud Run.
   */
  latestReadyRevision: string;
  /**
   * Output only. Name of the last created revision. See comments in
   * `reconciling` for additional information on reconciliation process in Cloud
   * Run.
   */
  latestCreatedRevision: string;
  /**
   * Output only. Detailed status information for corresponding traffic targets.
   * See comments in `reconciling` for additional information on reconciliation
   * process in Cloud Run.
   */
  trafficStatuses: TrafficTargetStatus[];
  /** Output only. The main URI in which this Service is serving traffic. */
  uri: string;
  /**
   * One or more custom audiences that you want this service to support. Specify
   * each custom audience as the full URL in a string. The custom audiences are
   * encoded in the token and used to authenticate requests. For more
   * information, see
   * https://cloud.google.com/run/docs/configuring/custom-audiences.
   */
  customAudiences: string[];
  /** Output only. Reserved for future use. */
  satisfiesPzs: boolean;
  /**
   * Output only. Returns true if the Service is currently being acted upon by
   * the system to bring it into the desired state.
   *
   * When a new Service is created, or an existing one is updated, Cloud Run
   * will asynchronously perform all necessary steps to bring the Service to the
   * desired serving state. This process is called reconciliation.
   * While reconciliation is in process, `observed_generation`,
   * `latest_ready_revison`, `traffic_statuses`, and `uri` will have transient
   * values that might mismatch the intended state: Once reconciliation is over
   * (and this field is false), there are two possible outcomes: reconciliation
   * succeeded and the serving state matches the Service, or there was an error,
   * and reconciliation failed. This state can be found in
   * `terminal_condition.state`.
   *
   * If reconciliation succeeded, the following fields will match: `traffic` and
   * `traffic_statuses`, `observed_generation` and `generation`,
   * `latest_ready_revision` and `latest_created_revision`.
   *
   * If reconciliation failed, `traffic_statuses`, `observed_generation`, and
   * `latest_ready_revision` will have the state of the last serving revision,
   * or empty for newly created Services. Additional information on the failure
   * can be found in `terminal_condition` and `conditions`.
   */
  reconciling: boolean;
  /**
   * Output only. A system-generated fingerprint for this version of the
   * resource. May be used to detect modification conflict during updates.
   */
  etag: string;
}

export interface Service_LabelsEntry {
  key: string;
  value: string;
}

export interface Service_AnnotationsEntry {
  key: string;
  value: string;
}

function createBaseCreateServiceRequest(): CreateServiceRequest {
  return { parent: "", service: undefined, serviceId: "", validateOnly: false };
}

export const CreateServiceRequest: MessageFns<CreateServiceRequest> = {
  encode(message: CreateServiceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.service !== undefined) {
      Service.encode(message.service, writer.uint32(18).fork()).join();
    }
    if (message.serviceId !== "") {
      writer.uint32(26).string(message.serviceId);
    }
    if (message.validateOnly !== false) {
      writer.uint32(32).bool(message.validateOnly);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateServiceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateServiceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.service = Service.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.serviceId = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateServiceRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      service: isSet(object.service) ? Service.fromJSON(object.service) : undefined,
      serviceId: isSet(object.serviceId) ? globalThis.String(object.serviceId) : "",
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
    };
  },

  toJSON(message: CreateServiceRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.service !== undefined) {
      obj.service = Service.toJSON(message.service);
    }
    if (message.serviceId !== "") {
      obj.serviceId = message.serviceId;
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateServiceRequest>): CreateServiceRequest {
    return CreateServiceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateServiceRequest>): CreateServiceRequest {
    const message = createBaseCreateServiceRequest();
    message.parent = object.parent ?? "";
    message.service = (object.service !== undefined && object.service !== null)
      ? Service.fromPartial(object.service)
      : undefined;
    message.serviceId = object.serviceId ?? "";
    message.validateOnly = object.validateOnly ?? false;
    return message;
  },
};

function createBaseUpdateServiceRequest(): UpdateServiceRequest {
  return { updateMask: undefined, service: undefined, validateOnly: false, allowMissing: false };
}

export const UpdateServiceRequest: MessageFns<UpdateServiceRequest> = {
  encode(message: UpdateServiceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    if (message.service !== undefined) {
      Service.encode(message.service, writer.uint32(10).fork()).join();
    }
    if (message.validateOnly !== false) {
      writer.uint32(24).bool(message.validateOnly);
    }
    if (message.allowMissing !== false) {
      writer.uint32(32).bool(message.allowMissing);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateServiceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateServiceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 1:
          if (tag !== 10) {
            break;
          }

          message.service = Service.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.allowMissing = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateServiceRequest {
    return {
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      service: isSet(object.service) ? Service.fromJSON(object.service) : undefined,
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
      allowMissing: isSet(object.allowMissing) ? globalThis.Boolean(object.allowMissing) : false,
    };
  },

  toJSON(message: UpdateServiceRequest): unknown {
    const obj: any = {};
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.service !== undefined) {
      obj.service = Service.toJSON(message.service);
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    if (message.allowMissing !== false) {
      obj.allowMissing = message.allowMissing;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateServiceRequest>): UpdateServiceRequest {
    return UpdateServiceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateServiceRequest>): UpdateServiceRequest {
    const message = createBaseUpdateServiceRequest();
    message.updateMask = object.updateMask ?? undefined;
    message.service = (object.service !== undefined && object.service !== null)
      ? Service.fromPartial(object.service)
      : undefined;
    message.validateOnly = object.validateOnly ?? false;
    message.allowMissing = object.allowMissing ?? false;
    return message;
  },
};

function createBaseListServicesRequest(): ListServicesRequest {
  return { parent: "", pageSize: 0, pageToken: "", showDeleted: false };
}

export const ListServicesRequest: MessageFns<ListServicesRequest> = {
  encode(message: ListServicesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.showDeleted !== false) {
      writer.uint32(32).bool(message.showDeleted);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListServicesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListServicesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.showDeleted = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListServicesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      showDeleted: isSet(object.showDeleted) ? globalThis.Boolean(object.showDeleted) : false,
    };
  },

  toJSON(message: ListServicesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.showDeleted !== false) {
      obj.showDeleted = message.showDeleted;
    }
    return obj;
  },

  create(base?: DeepPartial<ListServicesRequest>): ListServicesRequest {
    return ListServicesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListServicesRequest>): ListServicesRequest {
    const message = createBaseListServicesRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.showDeleted = object.showDeleted ?? false;
    return message;
  },
};

function createBaseListServicesResponse(): ListServicesResponse {
  return { services: [], nextPageToken: "" };
}

export const ListServicesResponse: MessageFns<ListServicesResponse> = {
  encode(message: ListServicesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.services) {
      Service.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListServicesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListServicesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.services.push(Service.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListServicesResponse {
    return {
      services: globalThis.Array.isArray(object?.services) ? object.services.map((e: any) => Service.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListServicesResponse): unknown {
    const obj: any = {};
    if (message.services?.length) {
      obj.services = message.services.map((e) => Service.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListServicesResponse>): ListServicesResponse {
    return ListServicesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListServicesResponse>): ListServicesResponse {
    const message = createBaseListServicesResponse();
    message.services = object.services?.map((e) => Service.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetServiceRequest(): GetServiceRequest {
  return { name: "" };
}

export const GetServiceRequest: MessageFns<GetServiceRequest> = {
  encode(message: GetServiceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetServiceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetServiceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetServiceRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetServiceRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetServiceRequest>): GetServiceRequest {
    return GetServiceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetServiceRequest>): GetServiceRequest {
    const message = createBaseGetServiceRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseDeleteServiceRequest(): DeleteServiceRequest {
  return { name: "", validateOnly: false, etag: "" };
}

export const DeleteServiceRequest: MessageFns<DeleteServiceRequest> = {
  encode(message: DeleteServiceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.validateOnly !== false) {
      writer.uint32(16).bool(message.validateOnly);
    }
    if (message.etag !== "") {
      writer.uint32(26).string(message.etag);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteServiceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteServiceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.etag = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteServiceRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
      etag: isSet(object.etag) ? globalThis.String(object.etag) : "",
    };
  },

  toJSON(message: DeleteServiceRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    if (message.etag !== "") {
      obj.etag = message.etag;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteServiceRequest>): DeleteServiceRequest {
    return DeleteServiceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteServiceRequest>): DeleteServiceRequest {
    const message = createBaseDeleteServiceRequest();
    message.name = object.name ?? "";
    message.validateOnly = object.validateOnly ?? false;
    message.etag = object.etag ?? "";
    return message;
  },
};

function createBaseService(): Service {
  return {
    name: "",
    description: "",
    uid: "",
    generation: Long.ZERO,
    labels: {},
    annotations: {},
    createTime: undefined,
    updateTime: undefined,
    deleteTime: undefined,
    expireTime: undefined,
    creator: "",
    lastModifier: "",
    client: "",
    clientVersion: "",
    ingress: 0,
    launchStage: 0,
    binaryAuthorization: undefined,
    template: undefined,
    traffic: [],
    scaling: undefined,
    defaultUriDisabled: false,
    observedGeneration: Long.ZERO,
    terminalCondition: undefined,
    conditions: [],
    latestReadyRevision: "",
    latestCreatedRevision: "",
    trafficStatuses: [],
    uri: "",
    customAudiences: [],
    satisfiesPzs: false,
    reconciling: false,
    etag: "",
  };
}

export const Service: MessageFns<Service> = {
  encode(message: Service, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.uid !== "") {
      writer.uint32(26).string(message.uid);
    }
    if (!message.generation.equals(Long.ZERO)) {
      writer.uint32(32).int64(message.generation.toString());
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      Service_LabelsEntry.encode({ key: key as any, value }, writer.uint32(42).fork()).join();
    });
    Object.entries(message.annotations).forEach(([key, value]) => {
      Service_AnnotationsEntry.encode({ key: key as any, value }, writer.uint32(50).fork()).join();
    });
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(58).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(66).fork()).join();
    }
    if (message.deleteTime !== undefined) {
      Timestamp.encode(toTimestamp(message.deleteTime), writer.uint32(74).fork()).join();
    }
    if (message.expireTime !== undefined) {
      Timestamp.encode(toTimestamp(message.expireTime), writer.uint32(82).fork()).join();
    }
    if (message.creator !== "") {
      writer.uint32(90).string(message.creator);
    }
    if (message.lastModifier !== "") {
      writer.uint32(98).string(message.lastModifier);
    }
    if (message.client !== "") {
      writer.uint32(106).string(message.client);
    }
    if (message.clientVersion !== "") {
      writer.uint32(114).string(message.clientVersion);
    }
    if (message.ingress !== 0) {
      writer.uint32(120).int32(message.ingress);
    }
    if (message.launchStage !== 0) {
      writer.uint32(128).int32(message.launchStage);
    }
    if (message.binaryAuthorization !== undefined) {
      BinaryAuthorization.encode(message.binaryAuthorization, writer.uint32(138).fork()).join();
    }
    if (message.template !== undefined) {
      RevisionTemplate.encode(message.template, writer.uint32(146).fork()).join();
    }
    for (const v of message.traffic) {
      TrafficTarget.encode(v!, writer.uint32(154).fork()).join();
    }
    if (message.scaling !== undefined) {
      ServiceScaling.encode(message.scaling, writer.uint32(162).fork()).join();
    }
    if (message.defaultUriDisabled !== false) {
      writer.uint32(176).bool(message.defaultUriDisabled);
    }
    if (!message.observedGeneration.equals(Long.ZERO)) {
      writer.uint32(240).int64(message.observedGeneration.toString());
    }
    if (message.terminalCondition !== undefined) {
      Condition.encode(message.terminalCondition, writer.uint32(250).fork()).join();
    }
    for (const v of message.conditions) {
      Condition.encode(v!, writer.uint32(258).fork()).join();
    }
    if (message.latestReadyRevision !== "") {
      writer.uint32(266).string(message.latestReadyRevision);
    }
    if (message.latestCreatedRevision !== "") {
      writer.uint32(274).string(message.latestCreatedRevision);
    }
    for (const v of message.trafficStatuses) {
      TrafficTargetStatus.encode(v!, writer.uint32(282).fork()).join();
    }
    if (message.uri !== "") {
      writer.uint32(290).string(message.uri);
    }
    for (const v of message.customAudiences) {
      writer.uint32(298).string(v!);
    }
    if (message.satisfiesPzs !== false) {
      writer.uint32(304).bool(message.satisfiesPzs);
    }
    if (message.reconciling !== false) {
      writer.uint32(784).bool(message.reconciling);
    }
    if (message.etag !== "") {
      writer.uint32(794).string(message.etag);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Service {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseService();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.uid = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.generation = Long.fromString(reader.int64().toString());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          const entry5 = Service_LabelsEntry.decode(reader, reader.uint32());
          if (entry5.value !== undefined) {
            message.labels[entry5.key] = entry5.value;
          }
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          const entry6 = Service_AnnotationsEntry.decode(reader, reader.uint32());
          if (entry6.value !== undefined) {
            message.annotations[entry6.key] = entry6.value;
          }
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.deleteTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.expireTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.creator = reader.string();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.lastModifier = reader.string();
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.client = reader.string();
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.clientVersion = reader.string();
          continue;
        case 15:
          if (tag !== 120) {
            break;
          }

          message.ingress = reader.int32() as any;
          continue;
        case 16:
          if (tag !== 128) {
            break;
          }

          message.launchStage = reader.int32() as any;
          continue;
        case 17:
          if (tag !== 138) {
            break;
          }

          message.binaryAuthorization = BinaryAuthorization.decode(reader, reader.uint32());
          continue;
        case 18:
          if (tag !== 146) {
            break;
          }

          message.template = RevisionTemplate.decode(reader, reader.uint32());
          continue;
        case 19:
          if (tag !== 154) {
            break;
          }

          message.traffic.push(TrafficTarget.decode(reader, reader.uint32()));
          continue;
        case 20:
          if (tag !== 162) {
            break;
          }

          message.scaling = ServiceScaling.decode(reader, reader.uint32());
          continue;
        case 22:
          if (tag !== 176) {
            break;
          }

          message.defaultUriDisabled = reader.bool();
          continue;
        case 30:
          if (tag !== 240) {
            break;
          }

          message.observedGeneration = Long.fromString(reader.int64().toString());
          continue;
        case 31:
          if (tag !== 250) {
            break;
          }

          message.terminalCondition = Condition.decode(reader, reader.uint32());
          continue;
        case 32:
          if (tag !== 258) {
            break;
          }

          message.conditions.push(Condition.decode(reader, reader.uint32()));
          continue;
        case 33:
          if (tag !== 266) {
            break;
          }

          message.latestReadyRevision = reader.string();
          continue;
        case 34:
          if (tag !== 274) {
            break;
          }

          message.latestCreatedRevision = reader.string();
          continue;
        case 35:
          if (tag !== 282) {
            break;
          }

          message.trafficStatuses.push(TrafficTargetStatus.decode(reader, reader.uint32()));
          continue;
        case 36:
          if (tag !== 290) {
            break;
          }

          message.uri = reader.string();
          continue;
        case 37:
          if (tag !== 298) {
            break;
          }

          message.customAudiences.push(reader.string());
          continue;
        case 38:
          if (tag !== 304) {
            break;
          }

          message.satisfiesPzs = reader.bool();
          continue;
        case 98:
          if (tag !== 784) {
            break;
          }

          message.reconciling = reader.bool();
          continue;
        case 99:
          if (tag !== 794) {
            break;
          }

          message.etag = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Service {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      uid: isSet(object.uid) ? globalThis.String(object.uid) : "",
      generation: isSet(object.generation) ? Long.fromValue(object.generation) : Long.ZERO,
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      annotations: isObject(object.annotations)
        ? Object.entries(object.annotations).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      deleteTime: isSet(object.deleteTime) ? fromJsonTimestamp(object.deleteTime) : undefined,
      expireTime: isSet(object.expireTime) ? fromJsonTimestamp(object.expireTime) : undefined,
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      lastModifier: isSet(object.lastModifier) ? globalThis.String(object.lastModifier) : "",
      client: isSet(object.client) ? globalThis.String(object.client) : "",
      clientVersion: isSet(object.clientVersion) ? globalThis.String(object.clientVersion) : "",
      ingress: isSet(object.ingress) ? ingressTrafficFromJSON(object.ingress) : 0,
      launchStage: isSet(object.launchStage) ? launchStageFromJSON(object.launchStage) : 0,
      binaryAuthorization: isSet(object.binaryAuthorization)
        ? BinaryAuthorization.fromJSON(object.binaryAuthorization)
        : undefined,
      template: isSet(object.template) ? RevisionTemplate.fromJSON(object.template) : undefined,
      traffic: globalThis.Array.isArray(object?.traffic)
        ? object.traffic.map((e: any) => TrafficTarget.fromJSON(e))
        : [],
      scaling: isSet(object.scaling) ? ServiceScaling.fromJSON(object.scaling) : undefined,
      defaultUriDisabled: isSet(object.defaultUriDisabled) ? globalThis.Boolean(object.defaultUriDisabled) : false,
      observedGeneration: isSet(object.observedGeneration) ? Long.fromValue(object.observedGeneration) : Long.ZERO,
      terminalCondition: isSet(object.terminalCondition) ? Condition.fromJSON(object.terminalCondition) : undefined,
      conditions: globalThis.Array.isArray(object?.conditions)
        ? object.conditions.map((e: any) => Condition.fromJSON(e))
        : [],
      latestReadyRevision: isSet(object.latestReadyRevision) ? globalThis.String(object.latestReadyRevision) : "",
      latestCreatedRevision: isSet(object.latestCreatedRevision) ? globalThis.String(object.latestCreatedRevision) : "",
      trafficStatuses: globalThis.Array.isArray(object?.trafficStatuses)
        ? object.trafficStatuses.map((e: any) => TrafficTargetStatus.fromJSON(e))
        : [],
      uri: isSet(object.uri) ? globalThis.String(object.uri) : "",
      customAudiences: globalThis.Array.isArray(object?.customAudiences)
        ? object.customAudiences.map((e: any) => globalThis.String(e))
        : [],
      satisfiesPzs: isSet(object.satisfiesPzs) ? globalThis.Boolean(object.satisfiesPzs) : false,
      reconciling: isSet(object.reconciling) ? globalThis.Boolean(object.reconciling) : false,
      etag: isSet(object.etag) ? globalThis.String(object.etag) : "",
    };
  },

  toJSON(message: Service): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.uid !== "") {
      obj.uid = message.uid;
    }
    if (!message.generation.equals(Long.ZERO)) {
      obj.generation = (message.generation || Long.ZERO).toString();
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    if (message.annotations) {
      const entries = Object.entries(message.annotations);
      if (entries.length > 0) {
        obj.annotations = {};
        entries.forEach(([k, v]) => {
          obj.annotations[k] = v;
        });
      }
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.deleteTime !== undefined) {
      obj.deleteTime = message.deleteTime.toISOString();
    }
    if (message.expireTime !== undefined) {
      obj.expireTime = message.expireTime.toISOString();
    }
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.lastModifier !== "") {
      obj.lastModifier = message.lastModifier;
    }
    if (message.client !== "") {
      obj.client = message.client;
    }
    if (message.clientVersion !== "") {
      obj.clientVersion = message.clientVersion;
    }
    if (message.ingress !== 0) {
      obj.ingress = ingressTrafficToJSON(message.ingress);
    }
    if (message.launchStage !== 0) {
      obj.launchStage = launchStageToJSON(message.launchStage);
    }
    if (message.binaryAuthorization !== undefined) {
      obj.binaryAuthorization = BinaryAuthorization.toJSON(message.binaryAuthorization);
    }
    if (message.template !== undefined) {
      obj.template = RevisionTemplate.toJSON(message.template);
    }
    if (message.traffic?.length) {
      obj.traffic = message.traffic.map((e) => TrafficTarget.toJSON(e));
    }
    if (message.scaling !== undefined) {
      obj.scaling = ServiceScaling.toJSON(message.scaling);
    }
    if (message.defaultUriDisabled !== false) {
      obj.defaultUriDisabled = message.defaultUriDisabled;
    }
    if (!message.observedGeneration.equals(Long.ZERO)) {
      obj.observedGeneration = (message.observedGeneration || Long.ZERO).toString();
    }
    if (message.terminalCondition !== undefined) {
      obj.terminalCondition = Condition.toJSON(message.terminalCondition);
    }
    if (message.conditions?.length) {
      obj.conditions = message.conditions.map((e) => Condition.toJSON(e));
    }
    if (message.latestReadyRevision !== "") {
      obj.latestReadyRevision = message.latestReadyRevision;
    }
    if (message.latestCreatedRevision !== "") {
      obj.latestCreatedRevision = message.latestCreatedRevision;
    }
    if (message.trafficStatuses?.length) {
      obj.trafficStatuses = message.trafficStatuses.map((e) => TrafficTargetStatus.toJSON(e));
    }
    if (message.uri !== "") {
      obj.uri = message.uri;
    }
    if (message.customAudiences?.length) {
      obj.customAudiences = message.customAudiences;
    }
    if (message.satisfiesPzs !== false) {
      obj.satisfiesPzs = message.satisfiesPzs;
    }
    if (message.reconciling !== false) {
      obj.reconciling = message.reconciling;
    }
    if (message.etag !== "") {
      obj.etag = message.etag;
    }
    return obj;
  },

  create(base?: DeepPartial<Service>): Service {
    return Service.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Service>): Service {
    const message = createBaseService();
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.uid = object.uid ?? "";
    message.generation = (object.generation !== undefined && object.generation !== null)
      ? Long.fromValue(object.generation)
      : Long.ZERO;
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.annotations = Object.entries(object.annotations ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.deleteTime = object.deleteTime ?? undefined;
    message.expireTime = object.expireTime ?? undefined;
    message.creator = object.creator ?? "";
    message.lastModifier = object.lastModifier ?? "";
    message.client = object.client ?? "";
    message.clientVersion = object.clientVersion ?? "";
    message.ingress = object.ingress ?? 0;
    message.launchStage = object.launchStage ?? 0;
    message.binaryAuthorization = (object.binaryAuthorization !== undefined && object.binaryAuthorization !== null)
      ? BinaryAuthorization.fromPartial(object.binaryAuthorization)
      : undefined;
    message.template = (object.template !== undefined && object.template !== null)
      ? RevisionTemplate.fromPartial(object.template)
      : undefined;
    message.traffic = object.traffic?.map((e) => TrafficTarget.fromPartial(e)) || [];
    message.scaling = (object.scaling !== undefined && object.scaling !== null)
      ? ServiceScaling.fromPartial(object.scaling)
      : undefined;
    message.defaultUriDisabled = object.defaultUriDisabled ?? false;
    message.observedGeneration = (object.observedGeneration !== undefined && object.observedGeneration !== null)
      ? Long.fromValue(object.observedGeneration)
      : Long.ZERO;
    message.terminalCondition = (object.terminalCondition !== undefined && object.terminalCondition !== null)
      ? Condition.fromPartial(object.terminalCondition)
      : undefined;
    message.conditions = object.conditions?.map((e) => Condition.fromPartial(e)) || [];
    message.latestReadyRevision = object.latestReadyRevision ?? "";
    message.latestCreatedRevision = object.latestCreatedRevision ?? "";
    message.trafficStatuses = object.trafficStatuses?.map((e) => TrafficTargetStatus.fromPartial(e)) || [];
    message.uri = object.uri ?? "";
    message.customAudiences = object.customAudiences?.map((e) => e) || [];
    message.satisfiesPzs = object.satisfiesPzs ?? false;
    message.reconciling = object.reconciling ?? false;
    message.etag = object.etag ?? "";
    return message;
  },
};

function createBaseService_LabelsEntry(): Service_LabelsEntry {
  return { key: "", value: "" };
}

export const Service_LabelsEntry: MessageFns<Service_LabelsEntry> = {
  encode(message: Service_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Service_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseService_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Service_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: Service_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<Service_LabelsEntry>): Service_LabelsEntry {
    return Service_LabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Service_LabelsEntry>): Service_LabelsEntry {
    const message = createBaseService_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseService_AnnotationsEntry(): Service_AnnotationsEntry {
  return { key: "", value: "" };
}

export const Service_AnnotationsEntry: MessageFns<Service_AnnotationsEntry> = {
  encode(message: Service_AnnotationsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Service_AnnotationsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseService_AnnotationsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Service_AnnotationsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: Service_AnnotationsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<Service_AnnotationsEntry>): Service_AnnotationsEntry {
    return Service_AnnotationsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Service_AnnotationsEntry>): Service_AnnotationsEntry {
    const message = createBaseService_AnnotationsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

/** Cloud Run Service Control Plane API */
export type ServicesDefinition = typeof ServicesDefinition;
export const ServicesDefinition = {
  name: "Services",
  fullName: "google.cloud.run.v2.Services",
  methods: {
    /** Creates a new Service in a given project and location. */
    createService: {
      name: "CreateService",
      requestType: CreateServiceRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [Buffer.from([18, 10, 7, 83, 101, 114, 118, 105, 99, 101, 18, 7, 83, 101, 114, 118, 105, 99, 101])],
          8410: [
            Buffer.from([
              25,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              44,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              55,
              58,
              7,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              34,
              44,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
            ]),
          ],
          578365834: [
            Buffer.from([
              45,
              18,
              43,
              10,
              6,
              112,
              97,
              114,
              101,
              110,
              116,
              18,
              33,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              123,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              61,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Gets information about a Service. */
    getService: {
      name: "GetService",
      requestType: GetServiceRequest,
      requestStream: false,
      responseType: Service,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              46,
              18,
              44,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
          578365834: [
            Buffer.from([
              46,
              18,
              44,
              10,
              4,
              110,
              97,
              109,
              101,
              18,
              36,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              123,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              61,
              42,
              125,
              47,
              42,
              42,
            ]),
          ],
        },
      },
    },
    /** Lists Services. Results are sorted by creation time, descending. */
    listServices: {
      name: "ListServices",
      requestType: ListServicesRequest,
      requestStream: false,
      responseType: ListServicesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              46,
              18,
              44,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
            ]),
          ],
          578365834: [
            Buffer.from([
              45,
              18,
              43,
              10,
              6,
              112,
              97,
              114,
              101,
              110,
              116,
              18,
              33,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              123,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              61,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Updates a Service. */
    updateService: {
      name: "UpdateService",
      requestType: UpdateServiceRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [Buffer.from([18, 10, 7, 83, 101, 114, 118, 105, 99, 101, 18, 7, 83, 101, 114, 118, 105, 99, 101])],
          8410: [
            Buffer.from([7, 115, 101, 114, 118, 105, 99, 101]),
            Buffer.from([19, 115, 101, 114, 118, 105, 99, 101, 44, 117, 112, 100, 97, 116, 101, 95, 109, 97, 115, 107]),
          ],
          578365826: [
            Buffer.from([
              63,
              58,
              7,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              50,
              52,
              47,
              118,
              50,
              47,
              123,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
          578365834: [
            Buffer.from([
              54,
              18,
              52,
              10,
              12,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              46,
              110,
              97,
              109,
              101,
              18,
              36,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              123,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              61,
              42,
              125,
              47,
              42,
              42,
            ]),
          ],
        },
      },
    },
    /**
     * Deletes a Service.
     * This will cause the Service to stop serving traffic and will delete all
     * revisions.
     */
    deleteService: {
      name: "DeleteService",
      requestType: DeleteServiceRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [Buffer.from([18, 10, 7, 83, 101, 114, 118, 105, 99, 101, 18, 7, 83, 101, 114, 118, 105, 99, 101])],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              46,
              42,
              44,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
          578365834: [
            Buffer.from([
              46,
              18,
              44,
              10,
              4,
              110,
              97,
              109,
              101,
              18,
              36,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              123,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              61,
              42,
              125,
              47,
              42,
              42,
            ]),
          ],
        },
      },
    },
    /**
     * Gets the IAM Access Control policy currently in effect for the given
     * Cloud Run Service. This result does not include any inherited policies.
     */
    getIamPolicy: {
      name: "GetIamPolicy",
      requestType: GetIamPolicyRequest,
      requestStream: false,
      responseType: Policy,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              63,
              18,
              61,
              47,
              118,
              50,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
              47,
              42,
              125,
              58,
              103,
              101,
              116,
              73,
              97,
              109,
              80,
              111,
              108,
              105,
              99,
              121,
            ]),
          ],
        },
      },
    },
    /**
     * Sets the IAM Access control policy for the specified Service. Overwrites
     * any existing policy.
     */
    setIamPolicy: {
      name: "SetIamPolicy",
      requestType: SetIamPolicyRequest,
      requestStream: false,
      responseType: Policy,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              66,
              58,
              1,
              42,
              34,
              61,
              47,
              118,
              50,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
              47,
              42,
              125,
              58,
              115,
              101,
              116,
              73,
              97,
              109,
              80,
              111,
              108,
              105,
              99,
              121,
            ]),
          ],
        },
      },
    },
    /**
     * Returns permissions that a caller has on the specified Project.
     *
     * There are no permissions required for making this API call.
     */
    testIamPermissions: {
      name: "TestIamPermissions",
      requestType: TestIamPermissionsRequest,
      requestStream: false,
      responseType: TestIamPermissionsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              72,
              58,
              1,
              42,
              34,
              67,
              47,
              118,
              50,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
              47,
              42,
              125,
              58,
              116,
              101,
              115,
              116,
              73,
              97,
              109,
              80,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface ServicesServiceImplementation<CallContextExt = {}> {
  /** Creates a new Service in a given project and location. */
  createService(request: CreateServiceRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /** Gets information about a Service. */
  getService(request: GetServiceRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Service>>;
  /** Lists Services. Results are sorted by creation time, descending. */
  listServices(
    request: ListServicesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListServicesResponse>>;
  /** Updates a Service. */
  updateService(request: UpdateServiceRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /**
   * Deletes a Service.
   * This will cause the Service to stop serving traffic and will delete all
   * revisions.
   */
  deleteService(request: DeleteServiceRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /**
   * Gets the IAM Access Control policy currently in effect for the given
   * Cloud Run Service. This result does not include any inherited policies.
   */
  getIamPolicy(request: GetIamPolicyRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Policy>>;
  /**
   * Sets the IAM Access control policy for the specified Service. Overwrites
   * any existing policy.
   */
  setIamPolicy(request: SetIamPolicyRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Policy>>;
  /**
   * Returns permissions that a caller has on the specified Project.
   *
   * There are no permissions required for making this API call.
   */
  testIamPermissions(
    request: TestIamPermissionsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<TestIamPermissionsResponse>>;
}

export interface ServicesClient<CallOptionsExt = {}> {
  /** Creates a new Service in a given project and location. */
  createService(request: DeepPartial<CreateServiceRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /** Gets information about a Service. */
  getService(request: DeepPartial<GetServiceRequest>, options?: CallOptions & CallOptionsExt): Promise<Service>;
  /** Lists Services. Results are sorted by creation time, descending. */
  listServices(
    request: DeepPartial<ListServicesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListServicesResponse>;
  /** Updates a Service. */
  updateService(request: DeepPartial<UpdateServiceRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /**
   * Deletes a Service.
   * This will cause the Service to stop serving traffic and will delete all
   * revisions.
   */
  deleteService(request: DeepPartial<DeleteServiceRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /**
   * Gets the IAM Access Control policy currently in effect for the given
   * Cloud Run Service. This result does not include any inherited policies.
   */
  getIamPolicy(request: DeepPartial<GetIamPolicyRequest>, options?: CallOptions & CallOptionsExt): Promise<Policy>;
  /**
   * Sets the IAM Access control policy for the specified Service. Overwrites
   * any existing policy.
   */
  setIamPolicy(request: DeepPartial<SetIamPolicyRequest>, options?: CallOptions & CallOptionsExt): Promise<Policy>;
  /**
   * Returns permissions that a caller has on the specified Project.
   *
   * There are no permissions required for making this API call.
   */
  testIamPermissions(
    request: DeepPartial<TestIamPermissionsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<TestIamPermissionsResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
