// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/run/v2/task_template.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Duration } from "../../../protobuf/duration.js";
import { Container, Volume } from "./k8s.min.js";
import {
  ExecutionEnvironment,
  executionEnvironmentFromJSON,
  executionEnvironmentToJSON,
  VpcAccess,
} from "./vendor_settings.js";

export const protobufPackage = "google.cloud.run.v2";

/**
 * TaskTemplate describes the data a task should have when created
 * from a template.
 */
export interface TaskTemplate {
  /**
   * Holds the single container that defines the unit of execution for this
   * task.
   */
  containers: Container[];
  /** Optional. A list of Volumes to make available to containers. */
  volumes: Volume[];
  /**
   * Number of retries allowed per Task, before marking this Task failed.
   * Defaults to 3.
   */
  maxRetries?:
    | number
    | undefined;
  /**
   * Optional. Max allowed time duration the Task may be active before the
   * system will actively try to mark it failed and kill associated containers.
   * This applies per attempt of a task, meaning each retry can run for the full
   * timeout. Defaults to 600 seconds.
   */
  timeout:
    | Duration
    | undefined;
  /**
   * Optional. Email address of the IAM service account associated with the Task
   * of a Job. The service account represents the identity of the running task,
   * and determines what permissions the task has. If not provided, the task
   * will use the project's default service account.
   */
  serviceAccount: string;
  /** Optional. The execution environment being used to host this Task. */
  executionEnvironment: ExecutionEnvironment;
  /**
   * A reference to a customer managed encryption key (CMEK) to use to encrypt
   * this container image. For more information, go to
   * https://cloud.google.com/run/docs/securing/using-cmek
   */
  encryptionKey: string;
  /**
   * Optional. VPC Access configuration to use for this Task. For more
   * information, visit
   * https://cloud.google.com/run/docs/configuring/connecting-vpc.
   */
  vpcAccess: VpcAccess | undefined;
}

function createBaseTaskTemplate(): TaskTemplate {
  return {
    containers: [],
    volumes: [],
    maxRetries: undefined,
    timeout: undefined,
    serviceAccount: "",
    executionEnvironment: 0,
    encryptionKey: "",
    vpcAccess: undefined,
  };
}

export const TaskTemplate: MessageFns<TaskTemplate> = {
  encode(message: TaskTemplate, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.containers) {
      Container.encode(v!, writer.uint32(10).fork()).join();
    }
    for (const v of message.volumes) {
      Volume.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.maxRetries !== undefined) {
      writer.uint32(24).int32(message.maxRetries);
    }
    if (message.timeout !== undefined) {
      Duration.encode(message.timeout, writer.uint32(34).fork()).join();
    }
    if (message.serviceAccount !== "") {
      writer.uint32(42).string(message.serviceAccount);
    }
    if (message.executionEnvironment !== 0) {
      writer.uint32(48).int32(message.executionEnvironment);
    }
    if (message.encryptionKey !== "") {
      writer.uint32(58).string(message.encryptionKey);
    }
    if (message.vpcAccess !== undefined) {
      VpcAccess.encode(message.vpcAccess, writer.uint32(66).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TaskTemplate {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTaskTemplate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.containers.push(Container.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.volumes.push(Volume.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.maxRetries = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.timeout = Duration.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.serviceAccount = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.executionEnvironment = reader.int32() as any;
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.encryptionKey = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.vpcAccess = VpcAccess.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TaskTemplate {
    return {
      containers: globalThis.Array.isArray(object?.containers)
        ? object.containers.map((e: any) => Container.fromJSON(e))
        : [],
      volumes: globalThis.Array.isArray(object?.volumes) ? object.volumes.map((e: any) => Volume.fromJSON(e)) : [],
      maxRetries: isSet(object.maxRetries) ? globalThis.Number(object.maxRetries) : undefined,
      timeout: isSet(object.timeout) ? Duration.fromJSON(object.timeout) : undefined,
      serviceAccount: isSet(object.serviceAccount) ? globalThis.String(object.serviceAccount) : "",
      executionEnvironment: isSet(object.executionEnvironment)
        ? executionEnvironmentFromJSON(object.executionEnvironment)
        : 0,
      encryptionKey: isSet(object.encryptionKey) ? globalThis.String(object.encryptionKey) : "",
      vpcAccess: isSet(object.vpcAccess) ? VpcAccess.fromJSON(object.vpcAccess) : undefined,
    };
  },

  toJSON(message: TaskTemplate): unknown {
    const obj: any = {};
    if (message.containers?.length) {
      obj.containers = message.containers.map((e) => Container.toJSON(e));
    }
    if (message.volumes?.length) {
      obj.volumes = message.volumes.map((e) => Volume.toJSON(e));
    }
    if (message.maxRetries !== undefined) {
      obj.maxRetries = Math.round(message.maxRetries);
    }
    if (message.timeout !== undefined) {
      obj.timeout = Duration.toJSON(message.timeout);
    }
    if (message.serviceAccount !== "") {
      obj.serviceAccount = message.serviceAccount;
    }
    if (message.executionEnvironment !== 0) {
      obj.executionEnvironment = executionEnvironmentToJSON(message.executionEnvironment);
    }
    if (message.encryptionKey !== "") {
      obj.encryptionKey = message.encryptionKey;
    }
    if (message.vpcAccess !== undefined) {
      obj.vpcAccess = VpcAccess.toJSON(message.vpcAccess);
    }
    return obj;
  },

  create(base?: DeepPartial<TaskTemplate>): TaskTemplate {
    return TaskTemplate.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TaskTemplate>): TaskTemplate {
    const message = createBaseTaskTemplate();
    message.containers = object.containers?.map((e) => Container.fromPartial(e)) || [];
    message.volumes = object.volumes?.map((e) => Volume.fromPartial(e)) || [];
    message.maxRetries = object.maxRetries ?? undefined;
    message.timeout = (object.timeout !== undefined && object.timeout !== null)
      ? Duration.fromPartial(object.timeout)
      : undefined;
    message.serviceAccount = object.serviceAccount ?? "";
    message.executionEnvironment = object.executionEnvironment ?? 0;
    message.encryptionKey = object.encryptionKey ?? "";
    message.vpcAccess = (object.vpcAccess !== undefined && object.vpcAccess !== null)
      ? VpcAccess.fromPartial(object.vpcAccess)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
