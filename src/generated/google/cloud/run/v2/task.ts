// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/run/v2/task.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Duration } from "../../../protobuf/duration.js";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { Status } from "../../../rpc/status.js";
import { Condition } from "./condition.js";
import { Container, Volume } from "./k8s.min.js";
import {
  ExecutionEnvironment,
  executionEnvironmentFromJSON,
  executionEnvironmentToJSON,
  VpcAccess,
} from "./vendor_settings.js";

export const protobufPackage = "google.cloud.run.v2";

/** Request message for obtaining a Task by its full name. */
export interface GetTaskRequest {
  /**
   * Required. The full name of the Task.
   * Format:
   * projects/{project}/locations/{location}/jobs/{job}/executions/{execution}/tasks/{task}
   */
  name: string;
}

/** Request message for retrieving a list of Tasks. */
export interface ListTasksRequest {
  /**
   * Required. The Execution from which the Tasks should be listed.
   * To list all Tasks across Executions of a Job, use "-" instead of Execution
   * name. To list all Tasks across Jobs, use "-" instead of Job name. Format:
   * projects/{project}/locations/{location}/jobs/{job}/executions/{execution}
   */
  parent: string;
  /** Maximum number of Tasks to return in this call. */
  pageSize: number;
  /**
   * A page token received from a previous call to ListTasks.
   * All other parameters must match.
   */
  pageToken: string;
  /** If true, returns deleted (but unexpired) resources along with active ones. */
  showDeleted: boolean;
}

/** Response message containing a list of Tasks. */
export interface ListTasksResponse {
  /** The resulting list of Tasks. */
  tasks: Task[];
  /**
   * A token indicating there are more items than page_size. Use it in the next
   * ListTasks request to continue.
   */
  nextPageToken: string;
}

/** Task represents a single run of a container to completion. */
export interface Task {
  /** Output only. The unique name of this Task. */
  name: string;
  /**
   * Output only. Server assigned unique identifier for the Task. The value is a
   * UUID4 string and guaranteed to remain unchanged until the resource is
   * deleted.
   */
  uid: string;
  /**
   * Output only. A number that monotonically increases every time the user
   * modifies the desired state.
   */
  generation: Long;
  /**
   * Output only. Unstructured key value map that can be used to organize and
   * categorize objects. User-provided labels are shared with Google's billing
   * system, so they can be used to filter, or break down billing charges by
   * team, component, environment, state, etc. For more information, visit
   * https://cloud.google.com/resource-manager/docs/creating-managing-labels or
   * https://cloud.google.com/run/docs/configuring/labels
   */
  labels: { [key: string]: string };
  /**
   * Output only. Unstructured key value map that may
   * be set by external tools to store and arbitrary metadata.
   * They are not queryable and should be preserved
   * when modifying objects.
   */
  annotations: { [key: string]: string };
  /**
   * Output only. Represents time when the task was created by the system.
   * It is not guaranteed to be set in happens-before order across separate
   * operations.
   */
  createTime:
    | Date
    | undefined;
  /**
   * Output only. Represents time when the task was scheduled to run by the
   * system. It is not guaranteed to be set in happens-before order across
   * separate operations.
   */
  scheduledTime:
    | Date
    | undefined;
  /**
   * Output only. Represents time when the task started to run.
   * It is not guaranteed to be set in happens-before order across separate
   * operations.
   */
  startTime:
    | Date
    | undefined;
  /**
   * Output only. Represents time when the Task was completed. It is not
   * guaranteed to be set in happens-before order across separate operations.
   */
  completionTime:
    | Date
    | undefined;
  /** Output only. The last-modified time. */
  updateTime:
    | Date
    | undefined;
  /**
   * Output only. For a deleted resource, the deletion time. It is only
   * populated as a response to a Delete request.
   */
  deleteTime:
    | Date
    | undefined;
  /**
   * Output only. For a deleted resource, the time after which it will be
   * permamently deleted. It is only populated as a response to a Delete
   * request.
   */
  expireTime:
    | Date
    | undefined;
  /** Output only. The name of the parent Job. */
  job: string;
  /** Output only. The name of the parent Execution. */
  execution: string;
  /**
   * Holds the single container that defines the unit of execution for this
   * task.
   */
  containers: Container[];
  /** A list of Volumes to make available to containers. */
  volumes: Volume[];
  /** Number of retries allowed per Task, before marking this Task failed. */
  maxRetries: number;
  /**
   * Max allowed time duration the Task may be active before the system will
   * actively try to mark it failed and kill associated containers. This applies
   * per attempt of a task, meaning each retry can run for the full timeout.
   */
  timeout:
    | Duration
    | undefined;
  /**
   * Email address of the IAM service account associated with the Task of a
   * Job. The service account represents the identity of the
   * running task, and determines what permissions the task has. If
   * not provided, the task will use the project's default service account.
   */
  serviceAccount: string;
  /** The execution environment being used to host this Task. */
  executionEnvironment: ExecutionEnvironment;
  /**
   * Output only. Indicates whether the resource's reconciliation is still in
   * progress. See comments in `Job.reconciling` for additional information on
   * reconciliation process in Cloud Run.
   */
  reconciling: boolean;
  /**
   * Output only. The Condition of this Task, containing its readiness status,
   * and detailed error information in case it did not reach the desired state.
   */
  conditions: Condition[];
  /**
   * Output only. The generation of this Task. See comments in `Job.reconciling`
   * for additional information on reconciliation process in Cloud Run.
   */
  observedGeneration: Long;
  /** Output only. Index of the Task, unique per execution, and beginning at 0. */
  index: number;
  /**
   * Output only. The number of times this Task was retried.
   * Tasks are retried when they fail up to the maxRetries limit.
   */
  retried: number;
  /** Output only. Result of the last attempt of this Task. */
  lastAttemptResult:
    | TaskAttemptResult
    | undefined;
  /**
   * Output only. A reference to a customer managed encryption key (CMEK) to use
   * to encrypt this container image. For more information, go to
   * https://cloud.google.com/run/docs/securing/using-cmek
   */
  encryptionKey: string;
  /**
   * Output only. VPC Access configuration to use for this Task. For more
   * information, visit
   * https://cloud.google.com/run/docs/configuring/connecting-vpc.
   */
  vpcAccess:
    | VpcAccess
    | undefined;
  /**
   * Output only. URI where logs for this execution can be found in Cloud
   * Console.
   */
  logUri: string;
  /** Output only. Reserved for future use. */
  satisfiesPzs: boolean;
  /**
   * Output only. A system-generated fingerprint for this version of the
   * resource. May be used to detect modification conflict during updates.
   */
  etag: string;
}

export interface Task_LabelsEntry {
  key: string;
  value: string;
}

export interface Task_AnnotationsEntry {
  key: string;
  value: string;
}

/** Result of a task attempt. */
export interface TaskAttemptResult {
  /**
   * Output only. The status of this attempt.
   * If the status code is OK, then the attempt succeeded.
   */
  status:
    | Status
    | undefined;
  /**
   * Output only. The exit code of this attempt.
   * This may be unset if the container was unable to exit cleanly with a code
   * due to some other failure.
   * See status field for possible failure details.
   */
  exitCode: number;
}

function createBaseGetTaskRequest(): GetTaskRequest {
  return { name: "" };
}

export const GetTaskRequest: MessageFns<GetTaskRequest> = {
  encode(message: GetTaskRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetTaskRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetTaskRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetTaskRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetTaskRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetTaskRequest>): GetTaskRequest {
    return GetTaskRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetTaskRequest>): GetTaskRequest {
    const message = createBaseGetTaskRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListTasksRequest(): ListTasksRequest {
  return { parent: "", pageSize: 0, pageToken: "", showDeleted: false };
}

export const ListTasksRequest: MessageFns<ListTasksRequest> = {
  encode(message: ListTasksRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.showDeleted !== false) {
      writer.uint32(32).bool(message.showDeleted);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListTasksRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListTasksRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.showDeleted = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListTasksRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      showDeleted: isSet(object.showDeleted) ? globalThis.Boolean(object.showDeleted) : false,
    };
  },

  toJSON(message: ListTasksRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.showDeleted !== false) {
      obj.showDeleted = message.showDeleted;
    }
    return obj;
  },

  create(base?: DeepPartial<ListTasksRequest>): ListTasksRequest {
    return ListTasksRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListTasksRequest>): ListTasksRequest {
    const message = createBaseListTasksRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.showDeleted = object.showDeleted ?? false;
    return message;
  },
};

function createBaseListTasksResponse(): ListTasksResponse {
  return { tasks: [], nextPageToken: "" };
}

export const ListTasksResponse: MessageFns<ListTasksResponse> = {
  encode(message: ListTasksResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.tasks) {
      Task.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListTasksResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListTasksResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.tasks.push(Task.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListTasksResponse {
    return {
      tasks: globalThis.Array.isArray(object?.tasks) ? object.tasks.map((e: any) => Task.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListTasksResponse): unknown {
    const obj: any = {};
    if (message.tasks?.length) {
      obj.tasks = message.tasks.map((e) => Task.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListTasksResponse>): ListTasksResponse {
    return ListTasksResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListTasksResponse>): ListTasksResponse {
    const message = createBaseListTasksResponse();
    message.tasks = object.tasks?.map((e) => Task.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseTask(): Task {
  return {
    name: "",
    uid: "",
    generation: Long.ZERO,
    labels: {},
    annotations: {},
    createTime: undefined,
    scheduledTime: undefined,
    startTime: undefined,
    completionTime: undefined,
    updateTime: undefined,
    deleteTime: undefined,
    expireTime: undefined,
    job: "",
    execution: "",
    containers: [],
    volumes: [],
    maxRetries: 0,
    timeout: undefined,
    serviceAccount: "",
    executionEnvironment: 0,
    reconciling: false,
    conditions: [],
    observedGeneration: Long.ZERO,
    index: 0,
    retried: 0,
    lastAttemptResult: undefined,
    encryptionKey: "",
    vpcAccess: undefined,
    logUri: "",
    satisfiesPzs: false,
    etag: "",
  };
}

export const Task: MessageFns<Task> = {
  encode(message: Task, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.uid !== "") {
      writer.uint32(18).string(message.uid);
    }
    if (!message.generation.equals(Long.ZERO)) {
      writer.uint32(24).int64(message.generation.toString());
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      Task_LabelsEntry.encode({ key: key as any, value }, writer.uint32(34).fork()).join();
    });
    Object.entries(message.annotations).forEach(([key, value]) => {
      Task_AnnotationsEntry.encode({ key: key as any, value }, writer.uint32(42).fork()).join();
    });
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(50).fork()).join();
    }
    if (message.scheduledTime !== undefined) {
      Timestamp.encode(toTimestamp(message.scheduledTime), writer.uint32(274).fork()).join();
    }
    if (message.startTime !== undefined) {
      Timestamp.encode(toTimestamp(message.startTime), writer.uint32(218).fork()).join();
    }
    if (message.completionTime !== undefined) {
      Timestamp.encode(toTimestamp(message.completionTime), writer.uint32(58).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(66).fork()).join();
    }
    if (message.deleteTime !== undefined) {
      Timestamp.encode(toTimestamp(message.deleteTime), writer.uint32(74).fork()).join();
    }
    if (message.expireTime !== undefined) {
      Timestamp.encode(toTimestamp(message.expireTime), writer.uint32(82).fork()).join();
    }
    if (message.job !== "") {
      writer.uint32(98).string(message.job);
    }
    if (message.execution !== "") {
      writer.uint32(106).string(message.execution);
    }
    for (const v of message.containers) {
      Container.encode(v!, writer.uint32(114).fork()).join();
    }
    for (const v of message.volumes) {
      Volume.encode(v!, writer.uint32(122).fork()).join();
    }
    if (message.maxRetries !== 0) {
      writer.uint32(128).int32(message.maxRetries);
    }
    if (message.timeout !== undefined) {
      Duration.encode(message.timeout, writer.uint32(138).fork()).join();
    }
    if (message.serviceAccount !== "") {
      writer.uint32(146).string(message.serviceAccount);
    }
    if (message.executionEnvironment !== 0) {
      writer.uint32(160).int32(message.executionEnvironment);
    }
    if (message.reconciling !== false) {
      writer.uint32(168).bool(message.reconciling);
    }
    for (const v of message.conditions) {
      Condition.encode(v!, writer.uint32(178).fork()).join();
    }
    if (!message.observedGeneration.equals(Long.ZERO)) {
      writer.uint32(184).int64(message.observedGeneration.toString());
    }
    if (message.index !== 0) {
      writer.uint32(192).int32(message.index);
    }
    if (message.retried !== 0) {
      writer.uint32(200).int32(message.retried);
    }
    if (message.lastAttemptResult !== undefined) {
      TaskAttemptResult.encode(message.lastAttemptResult, writer.uint32(210).fork()).join();
    }
    if (message.encryptionKey !== "") {
      writer.uint32(226).string(message.encryptionKey);
    }
    if (message.vpcAccess !== undefined) {
      VpcAccess.encode(message.vpcAccess, writer.uint32(234).fork()).join();
    }
    if (message.logUri !== "") {
      writer.uint32(258).string(message.logUri);
    }
    if (message.satisfiesPzs !== false) {
      writer.uint32(264).bool(message.satisfiesPzs);
    }
    if (message.etag !== "") {
      writer.uint32(794).string(message.etag);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Task {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTask();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.uid = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.generation = Long.fromString(reader.int64().toString());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          const entry4 = Task_LabelsEntry.decode(reader, reader.uint32());
          if (entry4.value !== undefined) {
            message.labels[entry4.key] = entry4.value;
          }
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          const entry5 = Task_AnnotationsEntry.decode(reader, reader.uint32());
          if (entry5.value !== undefined) {
            message.annotations[entry5.key] = entry5.value;
          }
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 34:
          if (tag !== 274) {
            break;
          }

          message.scheduledTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 27:
          if (tag !== 218) {
            break;
          }

          message.startTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.completionTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.deleteTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.expireTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.job = reader.string();
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.execution = reader.string();
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.containers.push(Container.decode(reader, reader.uint32()));
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.volumes.push(Volume.decode(reader, reader.uint32()));
          continue;
        case 16:
          if (tag !== 128) {
            break;
          }

          message.maxRetries = reader.int32();
          continue;
        case 17:
          if (tag !== 138) {
            break;
          }

          message.timeout = Duration.decode(reader, reader.uint32());
          continue;
        case 18:
          if (tag !== 146) {
            break;
          }

          message.serviceAccount = reader.string();
          continue;
        case 20:
          if (tag !== 160) {
            break;
          }

          message.executionEnvironment = reader.int32() as any;
          continue;
        case 21:
          if (tag !== 168) {
            break;
          }

          message.reconciling = reader.bool();
          continue;
        case 22:
          if (tag !== 178) {
            break;
          }

          message.conditions.push(Condition.decode(reader, reader.uint32()));
          continue;
        case 23:
          if (tag !== 184) {
            break;
          }

          message.observedGeneration = Long.fromString(reader.int64().toString());
          continue;
        case 24:
          if (tag !== 192) {
            break;
          }

          message.index = reader.int32();
          continue;
        case 25:
          if (tag !== 200) {
            break;
          }

          message.retried = reader.int32();
          continue;
        case 26:
          if (tag !== 210) {
            break;
          }

          message.lastAttemptResult = TaskAttemptResult.decode(reader, reader.uint32());
          continue;
        case 28:
          if (tag !== 226) {
            break;
          }

          message.encryptionKey = reader.string();
          continue;
        case 29:
          if (tag !== 234) {
            break;
          }

          message.vpcAccess = VpcAccess.decode(reader, reader.uint32());
          continue;
        case 32:
          if (tag !== 258) {
            break;
          }

          message.logUri = reader.string();
          continue;
        case 33:
          if (tag !== 264) {
            break;
          }

          message.satisfiesPzs = reader.bool();
          continue;
        case 99:
          if (tag !== 794) {
            break;
          }

          message.etag = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Task {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      uid: isSet(object.uid) ? globalThis.String(object.uid) : "",
      generation: isSet(object.generation) ? Long.fromValue(object.generation) : Long.ZERO,
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      annotations: isObject(object.annotations)
        ? Object.entries(object.annotations).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      scheduledTime: isSet(object.scheduledTime) ? fromJsonTimestamp(object.scheduledTime) : undefined,
      startTime: isSet(object.startTime) ? fromJsonTimestamp(object.startTime) : undefined,
      completionTime: isSet(object.completionTime) ? fromJsonTimestamp(object.completionTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      deleteTime: isSet(object.deleteTime) ? fromJsonTimestamp(object.deleteTime) : undefined,
      expireTime: isSet(object.expireTime) ? fromJsonTimestamp(object.expireTime) : undefined,
      job: isSet(object.job) ? globalThis.String(object.job) : "",
      execution: isSet(object.execution) ? globalThis.String(object.execution) : "",
      containers: globalThis.Array.isArray(object?.containers)
        ? object.containers.map((e: any) => Container.fromJSON(e))
        : [],
      volumes: globalThis.Array.isArray(object?.volumes) ? object.volumes.map((e: any) => Volume.fromJSON(e)) : [],
      maxRetries: isSet(object.maxRetries) ? globalThis.Number(object.maxRetries) : 0,
      timeout: isSet(object.timeout) ? Duration.fromJSON(object.timeout) : undefined,
      serviceAccount: isSet(object.serviceAccount) ? globalThis.String(object.serviceAccount) : "",
      executionEnvironment: isSet(object.executionEnvironment)
        ? executionEnvironmentFromJSON(object.executionEnvironment)
        : 0,
      reconciling: isSet(object.reconciling) ? globalThis.Boolean(object.reconciling) : false,
      conditions: globalThis.Array.isArray(object?.conditions)
        ? object.conditions.map((e: any) => Condition.fromJSON(e))
        : [],
      observedGeneration: isSet(object.observedGeneration) ? Long.fromValue(object.observedGeneration) : Long.ZERO,
      index: isSet(object.index) ? globalThis.Number(object.index) : 0,
      retried: isSet(object.retried) ? globalThis.Number(object.retried) : 0,
      lastAttemptResult: isSet(object.lastAttemptResult)
        ? TaskAttemptResult.fromJSON(object.lastAttemptResult)
        : undefined,
      encryptionKey: isSet(object.encryptionKey) ? globalThis.String(object.encryptionKey) : "",
      vpcAccess: isSet(object.vpcAccess) ? VpcAccess.fromJSON(object.vpcAccess) : undefined,
      logUri: isSet(object.logUri) ? globalThis.String(object.logUri) : "",
      satisfiesPzs: isSet(object.satisfiesPzs) ? globalThis.Boolean(object.satisfiesPzs) : false,
      etag: isSet(object.etag) ? globalThis.String(object.etag) : "",
    };
  },

  toJSON(message: Task): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.uid !== "") {
      obj.uid = message.uid;
    }
    if (!message.generation.equals(Long.ZERO)) {
      obj.generation = (message.generation || Long.ZERO).toString();
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    if (message.annotations) {
      const entries = Object.entries(message.annotations);
      if (entries.length > 0) {
        obj.annotations = {};
        entries.forEach(([k, v]) => {
          obj.annotations[k] = v;
        });
      }
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.scheduledTime !== undefined) {
      obj.scheduledTime = message.scheduledTime.toISOString();
    }
    if (message.startTime !== undefined) {
      obj.startTime = message.startTime.toISOString();
    }
    if (message.completionTime !== undefined) {
      obj.completionTime = message.completionTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.deleteTime !== undefined) {
      obj.deleteTime = message.deleteTime.toISOString();
    }
    if (message.expireTime !== undefined) {
      obj.expireTime = message.expireTime.toISOString();
    }
    if (message.job !== "") {
      obj.job = message.job;
    }
    if (message.execution !== "") {
      obj.execution = message.execution;
    }
    if (message.containers?.length) {
      obj.containers = message.containers.map((e) => Container.toJSON(e));
    }
    if (message.volumes?.length) {
      obj.volumes = message.volumes.map((e) => Volume.toJSON(e));
    }
    if (message.maxRetries !== 0) {
      obj.maxRetries = Math.round(message.maxRetries);
    }
    if (message.timeout !== undefined) {
      obj.timeout = Duration.toJSON(message.timeout);
    }
    if (message.serviceAccount !== "") {
      obj.serviceAccount = message.serviceAccount;
    }
    if (message.executionEnvironment !== 0) {
      obj.executionEnvironment = executionEnvironmentToJSON(message.executionEnvironment);
    }
    if (message.reconciling !== false) {
      obj.reconciling = message.reconciling;
    }
    if (message.conditions?.length) {
      obj.conditions = message.conditions.map((e) => Condition.toJSON(e));
    }
    if (!message.observedGeneration.equals(Long.ZERO)) {
      obj.observedGeneration = (message.observedGeneration || Long.ZERO).toString();
    }
    if (message.index !== 0) {
      obj.index = Math.round(message.index);
    }
    if (message.retried !== 0) {
      obj.retried = Math.round(message.retried);
    }
    if (message.lastAttemptResult !== undefined) {
      obj.lastAttemptResult = TaskAttemptResult.toJSON(message.lastAttemptResult);
    }
    if (message.encryptionKey !== "") {
      obj.encryptionKey = message.encryptionKey;
    }
    if (message.vpcAccess !== undefined) {
      obj.vpcAccess = VpcAccess.toJSON(message.vpcAccess);
    }
    if (message.logUri !== "") {
      obj.logUri = message.logUri;
    }
    if (message.satisfiesPzs !== false) {
      obj.satisfiesPzs = message.satisfiesPzs;
    }
    if (message.etag !== "") {
      obj.etag = message.etag;
    }
    return obj;
  },

  create(base?: DeepPartial<Task>): Task {
    return Task.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Task>): Task {
    const message = createBaseTask();
    message.name = object.name ?? "";
    message.uid = object.uid ?? "";
    message.generation = (object.generation !== undefined && object.generation !== null)
      ? Long.fromValue(object.generation)
      : Long.ZERO;
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.annotations = Object.entries(object.annotations ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    message.createTime = object.createTime ?? undefined;
    message.scheduledTime = object.scheduledTime ?? undefined;
    message.startTime = object.startTime ?? undefined;
    message.completionTime = object.completionTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.deleteTime = object.deleteTime ?? undefined;
    message.expireTime = object.expireTime ?? undefined;
    message.job = object.job ?? "";
    message.execution = object.execution ?? "";
    message.containers = object.containers?.map((e) => Container.fromPartial(e)) || [];
    message.volumes = object.volumes?.map((e) => Volume.fromPartial(e)) || [];
    message.maxRetries = object.maxRetries ?? 0;
    message.timeout = (object.timeout !== undefined && object.timeout !== null)
      ? Duration.fromPartial(object.timeout)
      : undefined;
    message.serviceAccount = object.serviceAccount ?? "";
    message.executionEnvironment = object.executionEnvironment ?? 0;
    message.reconciling = object.reconciling ?? false;
    message.conditions = object.conditions?.map((e) => Condition.fromPartial(e)) || [];
    message.observedGeneration = (object.observedGeneration !== undefined && object.observedGeneration !== null)
      ? Long.fromValue(object.observedGeneration)
      : Long.ZERO;
    message.index = object.index ?? 0;
    message.retried = object.retried ?? 0;
    message.lastAttemptResult = (object.lastAttemptResult !== undefined && object.lastAttemptResult !== null)
      ? TaskAttemptResult.fromPartial(object.lastAttemptResult)
      : undefined;
    message.encryptionKey = object.encryptionKey ?? "";
    message.vpcAccess = (object.vpcAccess !== undefined && object.vpcAccess !== null)
      ? VpcAccess.fromPartial(object.vpcAccess)
      : undefined;
    message.logUri = object.logUri ?? "";
    message.satisfiesPzs = object.satisfiesPzs ?? false;
    message.etag = object.etag ?? "";
    return message;
  },
};

function createBaseTask_LabelsEntry(): Task_LabelsEntry {
  return { key: "", value: "" };
}

export const Task_LabelsEntry: MessageFns<Task_LabelsEntry> = {
  encode(message: Task_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Task_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTask_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Task_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: Task_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<Task_LabelsEntry>): Task_LabelsEntry {
    return Task_LabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Task_LabelsEntry>): Task_LabelsEntry {
    const message = createBaseTask_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseTask_AnnotationsEntry(): Task_AnnotationsEntry {
  return { key: "", value: "" };
}

export const Task_AnnotationsEntry: MessageFns<Task_AnnotationsEntry> = {
  encode(message: Task_AnnotationsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Task_AnnotationsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTask_AnnotationsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Task_AnnotationsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: Task_AnnotationsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<Task_AnnotationsEntry>): Task_AnnotationsEntry {
    return Task_AnnotationsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Task_AnnotationsEntry>): Task_AnnotationsEntry {
    const message = createBaseTask_AnnotationsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseTaskAttemptResult(): TaskAttemptResult {
  return { status: undefined, exitCode: 0 };
}

export const TaskAttemptResult: MessageFns<TaskAttemptResult> = {
  encode(message: TaskAttemptResult, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.status !== undefined) {
      Status.encode(message.status, writer.uint32(10).fork()).join();
    }
    if (message.exitCode !== 0) {
      writer.uint32(16).int32(message.exitCode);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TaskAttemptResult {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTaskAttemptResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.status = Status.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.exitCode = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TaskAttemptResult {
    return {
      status: isSet(object.status) ? Status.fromJSON(object.status) : undefined,
      exitCode: isSet(object.exitCode) ? globalThis.Number(object.exitCode) : 0,
    };
  },

  toJSON(message: TaskAttemptResult): unknown {
    const obj: any = {};
    if (message.status !== undefined) {
      obj.status = Status.toJSON(message.status);
    }
    if (message.exitCode !== 0) {
      obj.exitCode = Math.round(message.exitCode);
    }
    return obj;
  },

  create(base?: DeepPartial<TaskAttemptResult>): TaskAttemptResult {
    return TaskAttemptResult.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TaskAttemptResult>): TaskAttemptResult {
    const message = createBaseTaskAttemptResult();
    message.status = (object.status !== undefined && object.status !== null)
      ? Status.fromPartial(object.status)
      : undefined;
    message.exitCode = object.exitCode ?? 0;
    return message;
  },
};

/** Cloud Run Task Control Plane API. */
export type TasksDefinition = typeof TasksDefinition;
export const TasksDefinition = {
  name: "Tasks",
  fullName: "google.cloud.run.v2.Tasks",
  methods: {
    /** Gets information about a Task. */
    getTask: {
      name: "GetTask",
      requestType: GetTaskRequest,
      requestStream: false,
      responseType: Task,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              63,
              18,
              61,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              106,
              111,
              98,
              115,
              47,
              42,
              47,
              101,
              120,
              101,
              99,
              117,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              116,
              97,
              115,
              107,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists Tasks from an Execution of a Job. */
    listTasks: {
      name: "ListTasks",
      requestType: ListTasksRequest,
      requestStream: false,
      responseType: ListTasksResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              63,
              18,
              61,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              106,
              111,
              98,
              115,
              47,
              42,
              47,
              101,
              120,
              101,
              99,
              117,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              116,
              97,
              115,
              107,
              115,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface TasksServiceImplementation<CallContextExt = {}> {
  /** Gets information about a Task. */
  getTask(request: GetTaskRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Task>>;
  /** Lists Tasks from an Execution of a Job. */
  listTasks(request: ListTasksRequest, context: CallContext & CallContextExt): Promise<DeepPartial<ListTasksResponse>>;
}

export interface TasksClient<CallOptionsExt = {}> {
  /** Gets information about a Task. */
  getTask(request: DeepPartial<GetTaskRequest>, options?: CallOptions & CallOptionsExt): Promise<Task>;
  /** Lists Tasks from an Execution of a Job. */
  listTasks(request: DeepPartial<ListTasksRequest>, options?: CallOptions & CallOptionsExt): Promise<ListTasksResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
