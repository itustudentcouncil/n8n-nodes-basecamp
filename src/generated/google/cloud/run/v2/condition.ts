// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/run/v2/condition.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../protobuf/timestamp.js";

export const protobufPackage = "google.cloud.run.v2";

/** Defines a status condition for a resource. */
export interface Condition {
  /**
   * type is used to communicate the status of the reconciliation process.
   * See also:
   * https://github.com/knative/serving/blob/main/docs/spec/errors.md#error-conditions-and-reporting
   * Types common to all resources include:
   * * "Ready": True when the Resource is ready.
   */
  type: string;
  /** State of the condition. */
  state: Condition_State;
  /** Human readable message indicating details about the current status. */
  message: string;
  /** Last time the condition transitioned from one status to another. */
  lastTransitionTime:
    | Date
    | undefined;
  /** How to interpret failures of this condition, one of Error, Warning, Info */
  severity: Condition_Severity;
  /** Output only. A common (service-level) reason for this condition. */
  reason?:
    | Condition_CommonReason
    | undefined;
  /** Output only. A reason for the revision condition. */
  revisionReason?:
    | Condition_RevisionReason
    | undefined;
  /** Output only. A reason for the execution condition. */
  executionReason?: Condition_ExecutionReason | undefined;
}

/** Represents the possible Condition states. */
export enum Condition_State {
  /** STATE_UNSPECIFIED - The default value. This value is used if the state is omitted. */
  STATE_UNSPECIFIED = 0,
  /** CONDITION_PENDING - Transient state: Reconciliation has not started yet. */
  CONDITION_PENDING = 1,
  /** CONDITION_RECONCILING - Transient state: reconciliation is still in progress. */
  CONDITION_RECONCILING = 2,
  /** CONDITION_FAILED - Terminal state: Reconciliation did not succeed. */
  CONDITION_FAILED = 3,
  /** CONDITION_SUCCEEDED - Terminal state: Reconciliation completed successfully. */
  CONDITION_SUCCEEDED = 4,
  UNRECOGNIZED = -1,
}

export function condition_StateFromJSON(object: any): Condition_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return Condition_State.STATE_UNSPECIFIED;
    case 1:
    case "CONDITION_PENDING":
      return Condition_State.CONDITION_PENDING;
    case 2:
    case "CONDITION_RECONCILING":
      return Condition_State.CONDITION_RECONCILING;
    case 3:
    case "CONDITION_FAILED":
      return Condition_State.CONDITION_FAILED;
    case 4:
    case "CONDITION_SUCCEEDED":
      return Condition_State.CONDITION_SUCCEEDED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Condition_State.UNRECOGNIZED;
  }
}

export function condition_StateToJSON(object: Condition_State): string {
  switch (object) {
    case Condition_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case Condition_State.CONDITION_PENDING:
      return "CONDITION_PENDING";
    case Condition_State.CONDITION_RECONCILING:
      return "CONDITION_RECONCILING";
    case Condition_State.CONDITION_FAILED:
      return "CONDITION_FAILED";
    case Condition_State.CONDITION_SUCCEEDED:
      return "CONDITION_SUCCEEDED";
    case Condition_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Represents the severity of the condition failures. */
export enum Condition_Severity {
  /** SEVERITY_UNSPECIFIED - Unspecified severity */
  SEVERITY_UNSPECIFIED = 0,
  /** ERROR - Error severity. */
  ERROR = 1,
  /** WARNING - Warning severity. */
  WARNING = 2,
  /** INFO - Info severity. */
  INFO = 3,
  UNRECOGNIZED = -1,
}

export function condition_SeverityFromJSON(object: any): Condition_Severity {
  switch (object) {
    case 0:
    case "SEVERITY_UNSPECIFIED":
      return Condition_Severity.SEVERITY_UNSPECIFIED;
    case 1:
    case "ERROR":
      return Condition_Severity.ERROR;
    case 2:
    case "WARNING":
      return Condition_Severity.WARNING;
    case 3:
    case "INFO":
      return Condition_Severity.INFO;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Condition_Severity.UNRECOGNIZED;
  }
}

export function condition_SeverityToJSON(object: Condition_Severity): string {
  switch (object) {
    case Condition_Severity.SEVERITY_UNSPECIFIED:
      return "SEVERITY_UNSPECIFIED";
    case Condition_Severity.ERROR:
      return "ERROR";
    case Condition_Severity.WARNING:
      return "WARNING";
    case Condition_Severity.INFO:
      return "INFO";
    case Condition_Severity.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Reasons common to all types of conditions. */
export enum Condition_CommonReason {
  /** COMMON_REASON_UNDEFINED - Default value. */
  COMMON_REASON_UNDEFINED = 0,
  /** UNKNOWN - Reason unknown. Further details will be in message. */
  UNKNOWN = 1,
  /** REVISION_FAILED - Revision creation process failed. */
  REVISION_FAILED = 3,
  /** PROGRESS_DEADLINE_EXCEEDED - Timed out waiting for completion. */
  PROGRESS_DEADLINE_EXCEEDED = 4,
  /** CONTAINER_MISSING - The container image path is incorrect. */
  CONTAINER_MISSING = 6,
  /** CONTAINER_PERMISSION_DENIED - Insufficient permissions on the container image. */
  CONTAINER_PERMISSION_DENIED = 7,
  /** CONTAINER_IMAGE_UNAUTHORIZED - Container image is not authorized by policy. */
  CONTAINER_IMAGE_UNAUTHORIZED = 8,
  /** CONTAINER_IMAGE_AUTHORIZATION_CHECK_FAILED - Container image policy authorization check failed. */
  CONTAINER_IMAGE_AUTHORIZATION_CHECK_FAILED = 9,
  /** ENCRYPTION_KEY_PERMISSION_DENIED - Insufficient permissions on encryption key. */
  ENCRYPTION_KEY_PERMISSION_DENIED = 10,
  /** ENCRYPTION_KEY_CHECK_FAILED - Permission check on encryption key failed. */
  ENCRYPTION_KEY_CHECK_FAILED = 11,
  /** SECRETS_ACCESS_CHECK_FAILED - At least one Access check on secrets failed. */
  SECRETS_ACCESS_CHECK_FAILED = 12,
  /** WAITING_FOR_OPERATION - Waiting for operation to complete. */
  WAITING_FOR_OPERATION = 13,
  /** IMMEDIATE_RETRY - System will retry immediately. */
  IMMEDIATE_RETRY = 14,
  /** POSTPONED_RETRY - System will retry later; current attempt failed. */
  POSTPONED_RETRY = 15,
  /** INTERNAL - An internal error occurred. Further information may be in the message. */
  INTERNAL = 16,
  UNRECOGNIZED = -1,
}

export function condition_CommonReasonFromJSON(object: any): Condition_CommonReason {
  switch (object) {
    case 0:
    case "COMMON_REASON_UNDEFINED":
      return Condition_CommonReason.COMMON_REASON_UNDEFINED;
    case 1:
    case "UNKNOWN":
      return Condition_CommonReason.UNKNOWN;
    case 3:
    case "REVISION_FAILED":
      return Condition_CommonReason.REVISION_FAILED;
    case 4:
    case "PROGRESS_DEADLINE_EXCEEDED":
      return Condition_CommonReason.PROGRESS_DEADLINE_EXCEEDED;
    case 6:
    case "CONTAINER_MISSING":
      return Condition_CommonReason.CONTAINER_MISSING;
    case 7:
    case "CONTAINER_PERMISSION_DENIED":
      return Condition_CommonReason.CONTAINER_PERMISSION_DENIED;
    case 8:
    case "CONTAINER_IMAGE_UNAUTHORIZED":
      return Condition_CommonReason.CONTAINER_IMAGE_UNAUTHORIZED;
    case 9:
    case "CONTAINER_IMAGE_AUTHORIZATION_CHECK_FAILED":
      return Condition_CommonReason.CONTAINER_IMAGE_AUTHORIZATION_CHECK_FAILED;
    case 10:
    case "ENCRYPTION_KEY_PERMISSION_DENIED":
      return Condition_CommonReason.ENCRYPTION_KEY_PERMISSION_DENIED;
    case 11:
    case "ENCRYPTION_KEY_CHECK_FAILED":
      return Condition_CommonReason.ENCRYPTION_KEY_CHECK_FAILED;
    case 12:
    case "SECRETS_ACCESS_CHECK_FAILED":
      return Condition_CommonReason.SECRETS_ACCESS_CHECK_FAILED;
    case 13:
    case "WAITING_FOR_OPERATION":
      return Condition_CommonReason.WAITING_FOR_OPERATION;
    case 14:
    case "IMMEDIATE_RETRY":
      return Condition_CommonReason.IMMEDIATE_RETRY;
    case 15:
    case "POSTPONED_RETRY":
      return Condition_CommonReason.POSTPONED_RETRY;
    case 16:
    case "INTERNAL":
      return Condition_CommonReason.INTERNAL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Condition_CommonReason.UNRECOGNIZED;
  }
}

export function condition_CommonReasonToJSON(object: Condition_CommonReason): string {
  switch (object) {
    case Condition_CommonReason.COMMON_REASON_UNDEFINED:
      return "COMMON_REASON_UNDEFINED";
    case Condition_CommonReason.UNKNOWN:
      return "UNKNOWN";
    case Condition_CommonReason.REVISION_FAILED:
      return "REVISION_FAILED";
    case Condition_CommonReason.PROGRESS_DEADLINE_EXCEEDED:
      return "PROGRESS_DEADLINE_EXCEEDED";
    case Condition_CommonReason.CONTAINER_MISSING:
      return "CONTAINER_MISSING";
    case Condition_CommonReason.CONTAINER_PERMISSION_DENIED:
      return "CONTAINER_PERMISSION_DENIED";
    case Condition_CommonReason.CONTAINER_IMAGE_UNAUTHORIZED:
      return "CONTAINER_IMAGE_UNAUTHORIZED";
    case Condition_CommonReason.CONTAINER_IMAGE_AUTHORIZATION_CHECK_FAILED:
      return "CONTAINER_IMAGE_AUTHORIZATION_CHECK_FAILED";
    case Condition_CommonReason.ENCRYPTION_KEY_PERMISSION_DENIED:
      return "ENCRYPTION_KEY_PERMISSION_DENIED";
    case Condition_CommonReason.ENCRYPTION_KEY_CHECK_FAILED:
      return "ENCRYPTION_KEY_CHECK_FAILED";
    case Condition_CommonReason.SECRETS_ACCESS_CHECK_FAILED:
      return "SECRETS_ACCESS_CHECK_FAILED";
    case Condition_CommonReason.WAITING_FOR_OPERATION:
      return "WAITING_FOR_OPERATION";
    case Condition_CommonReason.IMMEDIATE_RETRY:
      return "IMMEDIATE_RETRY";
    case Condition_CommonReason.POSTPONED_RETRY:
      return "POSTPONED_RETRY";
    case Condition_CommonReason.INTERNAL:
      return "INTERNAL";
    case Condition_CommonReason.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Reasons specific to Revision resource. */
export enum Condition_RevisionReason {
  /** REVISION_REASON_UNDEFINED - Default value. */
  REVISION_REASON_UNDEFINED = 0,
  /** PENDING - Revision in Pending state. */
  PENDING = 1,
  /** RESERVE - Revision is in Reserve state. */
  RESERVE = 2,
  /** RETIRED - Revision is Retired. */
  RETIRED = 3,
  /** RETIRING - Revision is being retired. */
  RETIRING = 4,
  /** RECREATING - Revision is being recreated. */
  RECREATING = 5,
  /** HEALTH_CHECK_CONTAINER_ERROR - There was a health check error. */
  HEALTH_CHECK_CONTAINER_ERROR = 6,
  /**
   * CUSTOMIZED_PATH_RESPONSE_PENDING - Health check failed due to user error from customized path of the
   * container. System will retry.
   */
  CUSTOMIZED_PATH_RESPONSE_PENDING = 7,
  /**
   * MIN_INSTANCES_NOT_PROVISIONED - A revision with min_instance_count > 0 was created and is reserved, but
   * it was not configured to serve traffic, so it's not live. This can also
   * happen momentarily during traffic migration.
   */
  MIN_INSTANCES_NOT_PROVISIONED = 8,
  /** ACTIVE_REVISION_LIMIT_REACHED - The maximum allowed number of active revisions has been reached. */
  ACTIVE_REVISION_LIMIT_REACHED = 9,
  /**
   * NO_DEPLOYMENT - There was no deployment defined.
   * This value is no longer used, but Services created in older versions of
   * the API might contain this value.
   */
  NO_DEPLOYMENT = 10,
  /**
   * HEALTH_CHECK_SKIPPED - A revision's container has no port specified since the revision is of a
   * manually scaled service with 0 instance count
   */
  HEALTH_CHECK_SKIPPED = 11,
  /**
   * MIN_INSTANCES_WARMING - A revision with min_instance_count > 0 was created and is waiting for
   * enough instances to begin a traffic migration.
   */
  MIN_INSTANCES_WARMING = 12,
  UNRECOGNIZED = -1,
}

export function condition_RevisionReasonFromJSON(object: any): Condition_RevisionReason {
  switch (object) {
    case 0:
    case "REVISION_REASON_UNDEFINED":
      return Condition_RevisionReason.REVISION_REASON_UNDEFINED;
    case 1:
    case "PENDING":
      return Condition_RevisionReason.PENDING;
    case 2:
    case "RESERVE":
      return Condition_RevisionReason.RESERVE;
    case 3:
    case "RETIRED":
      return Condition_RevisionReason.RETIRED;
    case 4:
    case "RETIRING":
      return Condition_RevisionReason.RETIRING;
    case 5:
    case "RECREATING":
      return Condition_RevisionReason.RECREATING;
    case 6:
    case "HEALTH_CHECK_CONTAINER_ERROR":
      return Condition_RevisionReason.HEALTH_CHECK_CONTAINER_ERROR;
    case 7:
    case "CUSTOMIZED_PATH_RESPONSE_PENDING":
      return Condition_RevisionReason.CUSTOMIZED_PATH_RESPONSE_PENDING;
    case 8:
    case "MIN_INSTANCES_NOT_PROVISIONED":
      return Condition_RevisionReason.MIN_INSTANCES_NOT_PROVISIONED;
    case 9:
    case "ACTIVE_REVISION_LIMIT_REACHED":
      return Condition_RevisionReason.ACTIVE_REVISION_LIMIT_REACHED;
    case 10:
    case "NO_DEPLOYMENT":
      return Condition_RevisionReason.NO_DEPLOYMENT;
    case 11:
    case "HEALTH_CHECK_SKIPPED":
      return Condition_RevisionReason.HEALTH_CHECK_SKIPPED;
    case 12:
    case "MIN_INSTANCES_WARMING":
      return Condition_RevisionReason.MIN_INSTANCES_WARMING;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Condition_RevisionReason.UNRECOGNIZED;
  }
}

export function condition_RevisionReasonToJSON(object: Condition_RevisionReason): string {
  switch (object) {
    case Condition_RevisionReason.REVISION_REASON_UNDEFINED:
      return "REVISION_REASON_UNDEFINED";
    case Condition_RevisionReason.PENDING:
      return "PENDING";
    case Condition_RevisionReason.RESERVE:
      return "RESERVE";
    case Condition_RevisionReason.RETIRED:
      return "RETIRED";
    case Condition_RevisionReason.RETIRING:
      return "RETIRING";
    case Condition_RevisionReason.RECREATING:
      return "RECREATING";
    case Condition_RevisionReason.HEALTH_CHECK_CONTAINER_ERROR:
      return "HEALTH_CHECK_CONTAINER_ERROR";
    case Condition_RevisionReason.CUSTOMIZED_PATH_RESPONSE_PENDING:
      return "CUSTOMIZED_PATH_RESPONSE_PENDING";
    case Condition_RevisionReason.MIN_INSTANCES_NOT_PROVISIONED:
      return "MIN_INSTANCES_NOT_PROVISIONED";
    case Condition_RevisionReason.ACTIVE_REVISION_LIMIT_REACHED:
      return "ACTIVE_REVISION_LIMIT_REACHED";
    case Condition_RevisionReason.NO_DEPLOYMENT:
      return "NO_DEPLOYMENT";
    case Condition_RevisionReason.HEALTH_CHECK_SKIPPED:
      return "HEALTH_CHECK_SKIPPED";
    case Condition_RevisionReason.MIN_INSTANCES_WARMING:
      return "MIN_INSTANCES_WARMING";
    case Condition_RevisionReason.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Reasons specific to Execution resource. */
export enum Condition_ExecutionReason {
  /** EXECUTION_REASON_UNDEFINED - Default value. */
  EXECUTION_REASON_UNDEFINED = 0,
  /** JOB_STATUS_SERVICE_POLLING_ERROR - Internal system error getting execution status. System will retry. */
  JOB_STATUS_SERVICE_POLLING_ERROR = 1,
  /**
   * NON_ZERO_EXIT_CODE - A task reached its retry limit and the last attempt failed due to the
   * user container exiting with a non-zero exit code.
   */
  NON_ZERO_EXIT_CODE = 2,
  /** CANCELLED - The execution was cancelled by users. */
  CANCELLED = 3,
  /** CANCELLING - The execution is in the process of being cancelled. */
  CANCELLING = 4,
  /** DELETED - The execution was deleted. */
  DELETED = 5,
  UNRECOGNIZED = -1,
}

export function condition_ExecutionReasonFromJSON(object: any): Condition_ExecutionReason {
  switch (object) {
    case 0:
    case "EXECUTION_REASON_UNDEFINED":
      return Condition_ExecutionReason.EXECUTION_REASON_UNDEFINED;
    case 1:
    case "JOB_STATUS_SERVICE_POLLING_ERROR":
      return Condition_ExecutionReason.JOB_STATUS_SERVICE_POLLING_ERROR;
    case 2:
    case "NON_ZERO_EXIT_CODE":
      return Condition_ExecutionReason.NON_ZERO_EXIT_CODE;
    case 3:
    case "CANCELLED":
      return Condition_ExecutionReason.CANCELLED;
    case 4:
    case "CANCELLING":
      return Condition_ExecutionReason.CANCELLING;
    case 5:
    case "DELETED":
      return Condition_ExecutionReason.DELETED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Condition_ExecutionReason.UNRECOGNIZED;
  }
}

export function condition_ExecutionReasonToJSON(object: Condition_ExecutionReason): string {
  switch (object) {
    case Condition_ExecutionReason.EXECUTION_REASON_UNDEFINED:
      return "EXECUTION_REASON_UNDEFINED";
    case Condition_ExecutionReason.JOB_STATUS_SERVICE_POLLING_ERROR:
      return "JOB_STATUS_SERVICE_POLLING_ERROR";
    case Condition_ExecutionReason.NON_ZERO_EXIT_CODE:
      return "NON_ZERO_EXIT_CODE";
    case Condition_ExecutionReason.CANCELLED:
      return "CANCELLED";
    case Condition_ExecutionReason.CANCELLING:
      return "CANCELLING";
    case Condition_ExecutionReason.DELETED:
      return "DELETED";
    case Condition_ExecutionReason.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseCondition(): Condition {
  return {
    type: "",
    state: 0,
    message: "",
    lastTransitionTime: undefined,
    severity: 0,
    reason: undefined,
    revisionReason: undefined,
    executionReason: undefined,
  };
}

export const Condition: MessageFns<Condition> = {
  encode(message: Condition, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== "") {
      writer.uint32(10).string(message.type);
    }
    if (message.state !== 0) {
      writer.uint32(16).int32(message.state);
    }
    if (message.message !== "") {
      writer.uint32(26).string(message.message);
    }
    if (message.lastTransitionTime !== undefined) {
      Timestamp.encode(toTimestamp(message.lastTransitionTime), writer.uint32(34).fork()).join();
    }
    if (message.severity !== 0) {
      writer.uint32(40).int32(message.severity);
    }
    if (message.reason !== undefined) {
      writer.uint32(48).int32(message.reason);
    }
    if (message.revisionReason !== undefined) {
      writer.uint32(72).int32(message.revisionReason);
    }
    if (message.executionReason !== undefined) {
      writer.uint32(88).int32(message.executionReason);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Condition {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCondition();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.type = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.message = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.lastTransitionTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.severity = reader.int32() as any;
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.reason = reader.int32() as any;
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.revisionReason = reader.int32() as any;
          continue;
        case 11:
          if (tag !== 88) {
            break;
          }

          message.executionReason = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Condition {
    return {
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      state: isSet(object.state) ? condition_StateFromJSON(object.state) : 0,
      message: isSet(object.message) ? globalThis.String(object.message) : "",
      lastTransitionTime: isSet(object.lastTransitionTime) ? fromJsonTimestamp(object.lastTransitionTime) : undefined,
      severity: isSet(object.severity) ? condition_SeverityFromJSON(object.severity) : 0,
      reason: isSet(object.reason) ? condition_CommonReasonFromJSON(object.reason) : undefined,
      revisionReason: isSet(object.revisionReason)
        ? condition_RevisionReasonFromJSON(object.revisionReason)
        : undefined,
      executionReason: isSet(object.executionReason)
        ? condition_ExecutionReasonFromJSON(object.executionReason)
        : undefined,
    };
  },

  toJSON(message: Condition): unknown {
    const obj: any = {};
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.state !== 0) {
      obj.state = condition_StateToJSON(message.state);
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    if (message.lastTransitionTime !== undefined) {
      obj.lastTransitionTime = message.lastTransitionTime.toISOString();
    }
    if (message.severity !== 0) {
      obj.severity = condition_SeverityToJSON(message.severity);
    }
    if (message.reason !== undefined) {
      obj.reason = condition_CommonReasonToJSON(message.reason);
    }
    if (message.revisionReason !== undefined) {
      obj.revisionReason = condition_RevisionReasonToJSON(message.revisionReason);
    }
    if (message.executionReason !== undefined) {
      obj.executionReason = condition_ExecutionReasonToJSON(message.executionReason);
    }
    return obj;
  },

  create(base?: DeepPartial<Condition>): Condition {
    return Condition.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Condition>): Condition {
    const message = createBaseCondition();
    message.type = object.type ?? "";
    message.state = object.state ?? 0;
    message.message = object.message ?? "";
    message.lastTransitionTime = object.lastTransitionTime ?? undefined;
    message.severity = object.severity ?? 0;
    message.reason = object.reason ?? undefined;
    message.revisionReason = object.revisionReason ?? undefined;
    message.executionReason = object.executionReason ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
