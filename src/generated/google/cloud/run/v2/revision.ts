// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/run/v2/revision.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { LaunchStage, launchStageFromJSON, launchStageToJSON } from "../../../api/launch_stage.js";
import { Operation } from "../../../longrunning/operations.js";
import { Duration } from "../../../protobuf/duration.js";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { Condition } from "./condition.js";
import { Container, Volume } from "./k8s.min.js";
import { RevisionScalingStatus } from "./status.js";
import {
  EncryptionKeyRevocationAction,
  encryptionKeyRevocationActionFromJSON,
  encryptionKeyRevocationActionToJSON,
  ExecutionEnvironment,
  executionEnvironmentFromJSON,
  executionEnvironmentToJSON,
  RevisionScaling,
  VpcAccess,
} from "./vendor_settings.js";

export const protobufPackage = "google.cloud.run.v2";

/** Request message for obtaining a Revision by its full name. */
export interface GetRevisionRequest {
  /**
   * Required. The full name of the Revision.
   * Format:
   * projects/{project}/locations/{location}/services/{service}/revisions/{revision}
   */
  name: string;
}

/** Request message for retrieving a list of Revisions. */
export interface ListRevisionsRequest {
  /**
   * Required. The Service from which the Revisions should be listed.
   * To list all Revisions across Services, use "-" instead of Service name.
   * Format:
   * projects/{project}/locations/{location}/services/{service}
   */
  parent: string;
  /** Maximum number of revisions to return in this call. */
  pageSize: number;
  /**
   * A page token received from a previous call to ListRevisions.
   * All other parameters must match.
   */
  pageToken: string;
  /** If true, returns deleted (but unexpired) resources along with active ones. */
  showDeleted: boolean;
}

/** Response message containing a list of Revisions. */
export interface ListRevisionsResponse {
  /** The resulting list of Revisions. */
  revisions: Revision[];
  /**
   * A token indicating there are more items than page_size. Use it in the next
   * ListRevisions request to continue.
   */
  nextPageToken: string;
}

/**
 * Request message for deleting a retired Revision.
 * Revision lifecycle is usually managed by making changes to the parent
 * Service. Only retired revisions can be deleted with this API.
 */
export interface DeleteRevisionRequest {
  /**
   * Required. The name of the Revision to delete.
   * Format:
   * projects/{project}/locations/{location}/services/{service}/revisions/{revision}
   */
  name: string;
  /**
   * Indicates that the request should be validated without actually
   * deleting any resources.
   */
  validateOnly: boolean;
  /**
   * A system-generated fingerprint for this version of the
   * resource. This may be used to detect modification conflict during updates.
   */
  etag: string;
}

/**
 * A Revision is an immutable snapshot of code and configuration.  A Revision
 * references a container image. Revisions are only created by updates to its
 * parent Service.
 */
export interface Revision {
  /** Output only. The unique name of this Revision. */
  name: string;
  /**
   * Output only. Server assigned unique identifier for the Revision. The value
   * is a UUID4 string and guaranteed to remain unchanged until the resource is
   * deleted.
   */
  uid: string;
  /**
   * Output only. A number that monotonically increases every time the user
   * modifies the desired state.
   */
  generation: Long;
  /**
   * Output only. Unstructured key value map that can be used to organize and
   * categorize objects. User-provided labels are shared with Google's billing
   * system, so they can be used to filter, or break down billing charges by
   * team, component, environment, state, etc. For more information, visit
   * https://cloud.google.com/resource-manager/docs/creating-managing-labels or
   * https://cloud.google.com/run/docs/configuring/labels.
   */
  labels: { [key: string]: string };
  /**
   * Output only. Unstructured key value map that may
   * be set by external tools to store and arbitrary metadata.
   * They are not queryable and should be preserved
   * when modifying objects.
   */
  annotations: { [key: string]: string };
  /** Output only. The creation time. */
  createTime:
    | Date
    | undefined;
  /** Output only. The last-modified time. */
  updateTime:
    | Date
    | undefined;
  /**
   * Output only. For a deleted resource, the deletion time. It is only
   * populated as a response to a Delete request.
   */
  deleteTime:
    | Date
    | undefined;
  /**
   * Output only. For a deleted resource, the time after which it will be
   * permamently deleted. It is only populated as a response to a Delete
   * request.
   */
  expireTime:
    | Date
    | undefined;
  /**
   * The least stable launch stage needed to create this resource, as defined by
   * [Google Cloud Platform Launch
   * Stages](https://cloud.google.com/terms/launch-stages). Cloud Run supports
   * `ALPHA`, `BETA`, and `GA`.
   * <p>Note that this value might not be what was used
   * as input. For example, if ALPHA was provided as input in the parent
   * resource, but only BETA and GA-level features are were, this field will be
   * BETA.
   */
  launchStage: LaunchStage;
  /** Output only. The name of the parent service. */
  service: string;
  /** Scaling settings for this revision. */
  scaling:
    | RevisionScaling
    | undefined;
  /**
   * VPC Access configuration for this Revision. For more information, visit
   * https://cloud.google.com/run/docs/configuring/connecting-vpc.
   */
  vpcAccess:
    | VpcAccess
    | undefined;
  /** Sets the maximum number of requests that each serving instance can receive. */
  maxInstanceRequestConcurrency: number;
  /** Max allowed time for an instance to respond to a request. */
  timeout:
    | Duration
    | undefined;
  /**
   * Email address of the IAM service account associated with the revision of
   * the service. The service account represents the identity of the running
   * revision, and determines what permissions the revision has.
   */
  serviceAccount: string;
  /**
   * Holds the single container that defines the unit of execution for this
   * Revision.
   */
  containers: Container[];
  /** A list of Volumes to make available to containers. */
  volumes: Volume[];
  /** The execution environment being used to host this Revision. */
  executionEnvironment: ExecutionEnvironment;
  /**
   * A reference to a customer managed encryption key (CMEK) to use to encrypt
   * this container image. For more information, go to
   * https://cloud.google.com/run/docs/securing/using-cmek
   */
  encryptionKey: string;
  /** The action to take if the encryption key is revoked. */
  encryptionKeyRevocationAction: EncryptionKeyRevocationAction;
  /**
   * If encryption_key_revocation_action is SHUTDOWN, the duration before
   * shutting down all instances. The minimum increment is 1 hour.
   */
  encryptionKeyShutdownDuration:
    | Duration
    | undefined;
  /**
   * Output only. Indicates whether the resource's reconciliation is still in
   * progress. See comments in `Service.reconciling` for additional information
   * on reconciliation process in Cloud Run.
   */
  reconciling: boolean;
  /**
   * Output only. The Condition of this Revision, containing its readiness
   * status, and detailed error information in case it did not reach a serving
   * state.
   */
  conditions: Condition[];
  /**
   * Output only. The generation of this Revision currently serving traffic. See
   * comments in `reconciling` for additional information on reconciliation
   * process in Cloud Run.
   */
  observedGeneration: Long;
  /** Output only. The Google Console URI to obtain logs for the Revision. */
  logUri: string;
  /** Output only. Reserved for future use. */
  satisfiesPzs: boolean;
  /** Enable session affinity. */
  sessionAffinity: boolean;
  /** Output only. The current effective scaling settings for the revision. */
  scalingStatus:
    | RevisionScalingStatus
    | undefined;
  /**
   * Output only. A system-generated fingerprint for this version of the
   * resource. May be used to detect modification conflict during updates.
   */
  etag: string;
}

export interface Revision_LabelsEntry {
  key: string;
  value: string;
}

export interface Revision_AnnotationsEntry {
  key: string;
  value: string;
}

function createBaseGetRevisionRequest(): GetRevisionRequest {
  return { name: "" };
}

export const GetRevisionRequest: MessageFns<GetRevisionRequest> = {
  encode(message: GetRevisionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetRevisionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetRevisionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetRevisionRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetRevisionRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetRevisionRequest>): GetRevisionRequest {
    return GetRevisionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetRevisionRequest>): GetRevisionRequest {
    const message = createBaseGetRevisionRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListRevisionsRequest(): ListRevisionsRequest {
  return { parent: "", pageSize: 0, pageToken: "", showDeleted: false };
}

export const ListRevisionsRequest: MessageFns<ListRevisionsRequest> = {
  encode(message: ListRevisionsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.showDeleted !== false) {
      writer.uint32(32).bool(message.showDeleted);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListRevisionsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListRevisionsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.showDeleted = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListRevisionsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      showDeleted: isSet(object.showDeleted) ? globalThis.Boolean(object.showDeleted) : false,
    };
  },

  toJSON(message: ListRevisionsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.showDeleted !== false) {
      obj.showDeleted = message.showDeleted;
    }
    return obj;
  },

  create(base?: DeepPartial<ListRevisionsRequest>): ListRevisionsRequest {
    return ListRevisionsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListRevisionsRequest>): ListRevisionsRequest {
    const message = createBaseListRevisionsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.showDeleted = object.showDeleted ?? false;
    return message;
  },
};

function createBaseListRevisionsResponse(): ListRevisionsResponse {
  return { revisions: [], nextPageToken: "" };
}

export const ListRevisionsResponse: MessageFns<ListRevisionsResponse> = {
  encode(message: ListRevisionsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.revisions) {
      Revision.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListRevisionsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListRevisionsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.revisions.push(Revision.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListRevisionsResponse {
    return {
      revisions: globalThis.Array.isArray(object?.revisions)
        ? object.revisions.map((e: any) => Revision.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListRevisionsResponse): unknown {
    const obj: any = {};
    if (message.revisions?.length) {
      obj.revisions = message.revisions.map((e) => Revision.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListRevisionsResponse>): ListRevisionsResponse {
    return ListRevisionsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListRevisionsResponse>): ListRevisionsResponse {
    const message = createBaseListRevisionsResponse();
    message.revisions = object.revisions?.map((e) => Revision.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseDeleteRevisionRequest(): DeleteRevisionRequest {
  return { name: "", validateOnly: false, etag: "" };
}

export const DeleteRevisionRequest: MessageFns<DeleteRevisionRequest> = {
  encode(message: DeleteRevisionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.validateOnly !== false) {
      writer.uint32(16).bool(message.validateOnly);
    }
    if (message.etag !== "") {
      writer.uint32(26).string(message.etag);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteRevisionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteRevisionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.etag = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteRevisionRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
      etag: isSet(object.etag) ? globalThis.String(object.etag) : "",
    };
  },

  toJSON(message: DeleteRevisionRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    if (message.etag !== "") {
      obj.etag = message.etag;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteRevisionRequest>): DeleteRevisionRequest {
    return DeleteRevisionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteRevisionRequest>): DeleteRevisionRequest {
    const message = createBaseDeleteRevisionRequest();
    message.name = object.name ?? "";
    message.validateOnly = object.validateOnly ?? false;
    message.etag = object.etag ?? "";
    return message;
  },
};

function createBaseRevision(): Revision {
  return {
    name: "",
    uid: "",
    generation: Long.ZERO,
    labels: {},
    annotations: {},
    createTime: undefined,
    updateTime: undefined,
    deleteTime: undefined,
    expireTime: undefined,
    launchStage: 0,
    service: "",
    scaling: undefined,
    vpcAccess: undefined,
    maxInstanceRequestConcurrency: 0,
    timeout: undefined,
    serviceAccount: "",
    containers: [],
    volumes: [],
    executionEnvironment: 0,
    encryptionKey: "",
    encryptionKeyRevocationAction: 0,
    encryptionKeyShutdownDuration: undefined,
    reconciling: false,
    conditions: [],
    observedGeneration: Long.ZERO,
    logUri: "",
    satisfiesPzs: false,
    sessionAffinity: false,
    scalingStatus: undefined,
    etag: "",
  };
}

export const Revision: MessageFns<Revision> = {
  encode(message: Revision, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.uid !== "") {
      writer.uint32(18).string(message.uid);
    }
    if (!message.generation.equals(Long.ZERO)) {
      writer.uint32(24).int64(message.generation.toString());
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      Revision_LabelsEntry.encode({ key: key as any, value }, writer.uint32(34).fork()).join();
    });
    Object.entries(message.annotations).forEach(([key, value]) => {
      Revision_AnnotationsEntry.encode({ key: key as any, value }, writer.uint32(42).fork()).join();
    });
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(50).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(58).fork()).join();
    }
    if (message.deleteTime !== undefined) {
      Timestamp.encode(toTimestamp(message.deleteTime), writer.uint32(66).fork()).join();
    }
    if (message.expireTime !== undefined) {
      Timestamp.encode(toTimestamp(message.expireTime), writer.uint32(74).fork()).join();
    }
    if (message.launchStage !== 0) {
      writer.uint32(80).int32(message.launchStage);
    }
    if (message.service !== "") {
      writer.uint32(90).string(message.service);
    }
    if (message.scaling !== undefined) {
      RevisionScaling.encode(message.scaling, writer.uint32(98).fork()).join();
    }
    if (message.vpcAccess !== undefined) {
      VpcAccess.encode(message.vpcAccess, writer.uint32(106).fork()).join();
    }
    if (message.maxInstanceRequestConcurrency !== 0) {
      writer.uint32(272).int32(message.maxInstanceRequestConcurrency);
    }
    if (message.timeout !== undefined) {
      Duration.encode(message.timeout, writer.uint32(122).fork()).join();
    }
    if (message.serviceAccount !== "") {
      writer.uint32(130).string(message.serviceAccount);
    }
    for (const v of message.containers) {
      Container.encode(v!, writer.uint32(138).fork()).join();
    }
    for (const v of message.volumes) {
      Volume.encode(v!, writer.uint32(146).fork()).join();
    }
    if (message.executionEnvironment !== 0) {
      writer.uint32(160).int32(message.executionEnvironment);
    }
    if (message.encryptionKey !== "") {
      writer.uint32(170).string(message.encryptionKey);
    }
    if (message.encryptionKeyRevocationAction !== 0) {
      writer.uint32(184).int32(message.encryptionKeyRevocationAction);
    }
    if (message.encryptionKeyShutdownDuration !== undefined) {
      Duration.encode(message.encryptionKeyShutdownDuration, writer.uint32(194).fork()).join();
    }
    if (message.reconciling !== false) {
      writer.uint32(240).bool(message.reconciling);
    }
    for (const v of message.conditions) {
      Condition.encode(v!, writer.uint32(250).fork()).join();
    }
    if (!message.observedGeneration.equals(Long.ZERO)) {
      writer.uint32(256).int64(message.observedGeneration.toString());
    }
    if (message.logUri !== "") {
      writer.uint32(266).string(message.logUri);
    }
    if (message.satisfiesPzs !== false) {
      writer.uint32(296).bool(message.satisfiesPzs);
    }
    if (message.sessionAffinity !== false) {
      writer.uint32(304).bool(message.sessionAffinity);
    }
    if (message.scalingStatus !== undefined) {
      RevisionScalingStatus.encode(message.scalingStatus, writer.uint32(314).fork()).join();
    }
    if (message.etag !== "") {
      writer.uint32(794).string(message.etag);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Revision {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRevision();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.uid = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.generation = Long.fromString(reader.int64().toString());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          const entry4 = Revision_LabelsEntry.decode(reader, reader.uint32());
          if (entry4.value !== undefined) {
            message.labels[entry4.key] = entry4.value;
          }
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          const entry5 = Revision_AnnotationsEntry.decode(reader, reader.uint32());
          if (entry5.value !== undefined) {
            message.annotations[entry5.key] = entry5.value;
          }
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.deleteTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.expireTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.launchStage = reader.int32() as any;
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.service = reader.string();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.scaling = RevisionScaling.decode(reader, reader.uint32());
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.vpcAccess = VpcAccess.decode(reader, reader.uint32());
          continue;
        case 34:
          if (tag !== 272) {
            break;
          }

          message.maxInstanceRequestConcurrency = reader.int32();
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.timeout = Duration.decode(reader, reader.uint32());
          continue;
        case 16:
          if (tag !== 130) {
            break;
          }

          message.serviceAccount = reader.string();
          continue;
        case 17:
          if (tag !== 138) {
            break;
          }

          message.containers.push(Container.decode(reader, reader.uint32()));
          continue;
        case 18:
          if (tag !== 146) {
            break;
          }

          message.volumes.push(Volume.decode(reader, reader.uint32()));
          continue;
        case 20:
          if (tag !== 160) {
            break;
          }

          message.executionEnvironment = reader.int32() as any;
          continue;
        case 21:
          if (tag !== 170) {
            break;
          }

          message.encryptionKey = reader.string();
          continue;
        case 23:
          if (tag !== 184) {
            break;
          }

          message.encryptionKeyRevocationAction = reader.int32() as any;
          continue;
        case 24:
          if (tag !== 194) {
            break;
          }

          message.encryptionKeyShutdownDuration = Duration.decode(reader, reader.uint32());
          continue;
        case 30:
          if (tag !== 240) {
            break;
          }

          message.reconciling = reader.bool();
          continue;
        case 31:
          if (tag !== 250) {
            break;
          }

          message.conditions.push(Condition.decode(reader, reader.uint32()));
          continue;
        case 32:
          if (tag !== 256) {
            break;
          }

          message.observedGeneration = Long.fromString(reader.int64().toString());
          continue;
        case 33:
          if (tag !== 266) {
            break;
          }

          message.logUri = reader.string();
          continue;
        case 37:
          if (tag !== 296) {
            break;
          }

          message.satisfiesPzs = reader.bool();
          continue;
        case 38:
          if (tag !== 304) {
            break;
          }

          message.sessionAffinity = reader.bool();
          continue;
        case 39:
          if (tag !== 314) {
            break;
          }

          message.scalingStatus = RevisionScalingStatus.decode(reader, reader.uint32());
          continue;
        case 99:
          if (tag !== 794) {
            break;
          }

          message.etag = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Revision {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      uid: isSet(object.uid) ? globalThis.String(object.uid) : "",
      generation: isSet(object.generation) ? Long.fromValue(object.generation) : Long.ZERO,
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      annotations: isObject(object.annotations)
        ? Object.entries(object.annotations).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      deleteTime: isSet(object.deleteTime) ? fromJsonTimestamp(object.deleteTime) : undefined,
      expireTime: isSet(object.expireTime) ? fromJsonTimestamp(object.expireTime) : undefined,
      launchStage: isSet(object.launchStage) ? launchStageFromJSON(object.launchStage) : 0,
      service: isSet(object.service) ? globalThis.String(object.service) : "",
      scaling: isSet(object.scaling) ? RevisionScaling.fromJSON(object.scaling) : undefined,
      vpcAccess: isSet(object.vpcAccess) ? VpcAccess.fromJSON(object.vpcAccess) : undefined,
      maxInstanceRequestConcurrency: isSet(object.maxInstanceRequestConcurrency)
        ? globalThis.Number(object.maxInstanceRequestConcurrency)
        : 0,
      timeout: isSet(object.timeout) ? Duration.fromJSON(object.timeout) : undefined,
      serviceAccount: isSet(object.serviceAccount) ? globalThis.String(object.serviceAccount) : "",
      containers: globalThis.Array.isArray(object?.containers)
        ? object.containers.map((e: any) => Container.fromJSON(e))
        : [],
      volumes: globalThis.Array.isArray(object?.volumes)
        ? object.volumes.map((e: any) => Volume.fromJSON(e))
        : [],
      executionEnvironment: isSet(object.executionEnvironment)
        ? executionEnvironmentFromJSON(object.executionEnvironment)
        : 0,
      encryptionKey: isSet(object.encryptionKey) ? globalThis.String(object.encryptionKey) : "",
      encryptionKeyRevocationAction: isSet(object.encryptionKeyRevocationAction)
        ? encryptionKeyRevocationActionFromJSON(object.encryptionKeyRevocationAction)
        : 0,
      encryptionKeyShutdownDuration: isSet(object.encryptionKeyShutdownDuration)
        ? Duration.fromJSON(object.encryptionKeyShutdownDuration)
        : undefined,
      reconciling: isSet(object.reconciling) ? globalThis.Boolean(object.reconciling) : false,
      conditions: globalThis.Array.isArray(object?.conditions)
        ? object.conditions.map((e: any) => Condition.fromJSON(e))
        : [],
      observedGeneration: isSet(object.observedGeneration) ? Long.fromValue(object.observedGeneration) : Long.ZERO,
      logUri: isSet(object.logUri) ? globalThis.String(object.logUri) : "",
      satisfiesPzs: isSet(object.satisfiesPzs) ? globalThis.Boolean(object.satisfiesPzs) : false,
      sessionAffinity: isSet(object.sessionAffinity) ? globalThis.Boolean(object.sessionAffinity) : false,
      scalingStatus: isSet(object.scalingStatus) ? RevisionScalingStatus.fromJSON(object.scalingStatus) : undefined,
      etag: isSet(object.etag) ? globalThis.String(object.etag) : "",
    };
  },

  toJSON(message: Revision): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.uid !== "") {
      obj.uid = message.uid;
    }
    if (!message.generation.equals(Long.ZERO)) {
      obj.generation = (message.generation || Long.ZERO).toString();
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    if (message.annotations) {
      const entries = Object.entries(message.annotations);
      if (entries.length > 0) {
        obj.annotations = {};
        entries.forEach(([k, v]) => {
          obj.annotations[k] = v;
        });
      }
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.deleteTime !== undefined) {
      obj.deleteTime = message.deleteTime.toISOString();
    }
    if (message.expireTime !== undefined) {
      obj.expireTime = message.expireTime.toISOString();
    }
    if (message.launchStage !== 0) {
      obj.launchStage = launchStageToJSON(message.launchStage);
    }
    if (message.service !== "") {
      obj.service = message.service;
    }
    if (message.scaling !== undefined) {
      obj.scaling = RevisionScaling.toJSON(message.scaling);
    }
    if (message.vpcAccess !== undefined) {
      obj.vpcAccess = VpcAccess.toJSON(message.vpcAccess);
    }
    if (message.maxInstanceRequestConcurrency !== 0) {
      obj.maxInstanceRequestConcurrency = Math.round(message.maxInstanceRequestConcurrency);
    }
    if (message.timeout !== undefined) {
      obj.timeout = Duration.toJSON(message.timeout);
    }
    if (message.serviceAccount !== "") {
      obj.serviceAccount = message.serviceAccount;
    }
    if (message.containers?.length) {
      obj.containers = message.containers.map((e) => Container.toJSON(e));
    }
    if (message.volumes?.length) {
      obj.volumes = message.volumes.map((e) => Volume.toJSON(e));
    }
    if (message.executionEnvironment !== 0) {
      obj.executionEnvironment = executionEnvironmentToJSON(message.executionEnvironment);
    }
    if (message.encryptionKey !== "") {
      obj.encryptionKey = message.encryptionKey;
    }
    if (message.encryptionKeyRevocationAction !== 0) {
      obj.encryptionKeyRevocationAction = encryptionKeyRevocationActionToJSON(message.encryptionKeyRevocationAction);
    }
    if (message.encryptionKeyShutdownDuration !== undefined) {
      obj.encryptionKeyShutdownDuration = Duration.toJSON(message.encryptionKeyShutdownDuration);
    }
    if (message.reconciling !== false) {
      obj.reconciling = message.reconciling;
    }
    if (message.conditions?.length) {
      obj.conditions = message.conditions.map((e) => Condition.toJSON(e));
    }
    if (!message.observedGeneration.equals(Long.ZERO)) {
      obj.observedGeneration = (message.observedGeneration || Long.ZERO).toString();
    }
    if (message.logUri !== "") {
      obj.logUri = message.logUri;
    }
    if (message.satisfiesPzs !== false) {
      obj.satisfiesPzs = message.satisfiesPzs;
    }
    if (message.sessionAffinity !== false) {
      obj.sessionAffinity = message.sessionAffinity;
    }
    if (message.scalingStatus !== undefined) {
      obj.scalingStatus = RevisionScalingStatus.toJSON(message.scalingStatus);
    }
    if (message.etag !== "") {
      obj.etag = message.etag;
    }
    return obj;
  },

  create(base?: DeepPartial<Revision>): Revision {
    return Revision.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Revision>): Revision {
    const message = createBaseRevision();
    message.name = object.name ?? "";
    message.uid = object.uid ?? "";
    message.generation = (object.generation !== undefined && object.generation !== null)
      ? Long.fromValue(object.generation)
      : Long.ZERO;
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.annotations = Object.entries(object.annotations ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.deleteTime = object.deleteTime ?? undefined;
    message.expireTime = object.expireTime ?? undefined;
    message.launchStage = object.launchStage ?? 0;
    message.service = object.service ?? "";
    message.scaling = (object.scaling !== undefined && object.scaling !== null)
      ? RevisionScaling.fromPartial(object.scaling)
      : undefined;
    message.vpcAccess = (object.vpcAccess !== undefined && object.vpcAccess !== null)
      ? VpcAccess.fromPartial(object.vpcAccess)
      : undefined;
    message.maxInstanceRequestConcurrency = object.maxInstanceRequestConcurrency ?? 0;
    message.timeout = (object.timeout !== undefined && object.timeout !== null)
      ? Duration.fromPartial(object.timeout)
      : undefined;
    message.serviceAccount = object.serviceAccount ?? "";
    message.containers = object.containers?.map((e) => Container.fromPartial(e)) || [];
    message.volumes = object.volumes?.map((e) => Volume.fromPartial(e)) || [];
    message.executionEnvironment = object.executionEnvironment ?? 0;
    message.encryptionKey = object.encryptionKey ?? "";
    message.encryptionKeyRevocationAction = object.encryptionKeyRevocationAction ?? 0;
    message.encryptionKeyShutdownDuration =
      (object.encryptionKeyShutdownDuration !== undefined && object.encryptionKeyShutdownDuration !== null)
        ? Duration.fromPartial(object.encryptionKeyShutdownDuration)
        : undefined;
    message.reconciling = object.reconciling ?? false;
    message.conditions = object.conditions?.map((e) => Condition.fromPartial(e)) || [];
    message.observedGeneration = (object.observedGeneration !== undefined && object.observedGeneration !== null)
      ? Long.fromValue(object.observedGeneration)
      : Long.ZERO;
    message.logUri = object.logUri ?? "";
    message.satisfiesPzs = object.satisfiesPzs ?? false;
    message.sessionAffinity = object.sessionAffinity ?? false;
    message.scalingStatus = (object.scalingStatus !== undefined && object.scalingStatus !== null)
      ? RevisionScalingStatus.fromPartial(object.scalingStatus)
      : undefined;
    message.etag = object.etag ?? "";
    return message;
  },
};

function createBaseRevision_LabelsEntry(): Revision_LabelsEntry {
  return { key: "", value: "" };
}

export const Revision_LabelsEntry: MessageFns<Revision_LabelsEntry> = {
  encode(message: Revision_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Revision_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRevision_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Revision_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: Revision_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<Revision_LabelsEntry>): Revision_LabelsEntry {
    return Revision_LabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Revision_LabelsEntry>): Revision_LabelsEntry {
    const message = createBaseRevision_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseRevision_AnnotationsEntry(): Revision_AnnotationsEntry {
  return { key: "", value: "" };
}

export const Revision_AnnotationsEntry: MessageFns<Revision_AnnotationsEntry> = {
  encode(message: Revision_AnnotationsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Revision_AnnotationsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRevision_AnnotationsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Revision_AnnotationsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: Revision_AnnotationsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<Revision_AnnotationsEntry>): Revision_AnnotationsEntry {
    return Revision_AnnotationsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Revision_AnnotationsEntry>): Revision_AnnotationsEntry {
    const message = createBaseRevision_AnnotationsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

/** Cloud Run Revision Control Plane API. */
export type RevisionsDefinition = typeof RevisionsDefinition;
export const RevisionsDefinition = {
  name: "Revisions",
  fullName: "google.cloud.run.v2.Revisions",
  methods: {
    /** Gets information about a Revision. */
    getRevision: {
      name: "GetRevision",
      requestType: GetRevisionRequest,
      requestStream: false,
      responseType: Revision,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              58,
              18,
              56,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
              47,
              42,
              47,
              114,
              101,
              118,
              105,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
          578365834: [
            Buffer.from([
              46,
              18,
              44,
              10,
              4,
              110,
              97,
              109,
              101,
              18,
              36,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              123,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              61,
              42,
              125,
              47,
              42,
              42,
            ]),
          ],
        },
      },
    },
    /**
     * Lists Revisions from a given Service, or from a given location.  Results
     * are sorted by creation time, descending.
     */
    listRevisions: {
      name: "ListRevisions",
      requestType: ListRevisionsRequest,
      requestStream: false,
      responseType: ListRevisionsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              58,
              18,
              56,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
              47,
              42,
              125,
              47,
              114,
              101,
              118,
              105,
              115,
              105,
              111,
              110,
              115,
            ]),
          ],
          578365834: [
            Buffer.from([
              48,
              18,
              46,
              10,
              6,
              112,
              97,
              114,
              101,
              110,
              116,
              18,
              36,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              123,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              61,
              42,
              125,
              47,
              42,
              42,
            ]),
          ],
        },
      },
    },
    /** Deletes a Revision. */
    deleteRevision: {
      name: "DeleteRevision",
      requestType: DeleteRevisionRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              20,
              10,
              8,
              82,
              101,
              118,
              105,
              115,
              105,
              111,
              110,
              18,
              8,
              82,
              101,
              118,
              105,
              115,
              105,
              111,
              110,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              58,
              42,
              56,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
              47,
              42,
              47,
              114,
              101,
              118,
              105,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
          578365834: [
            Buffer.from([
              46,
              18,
              44,
              10,
              4,
              110,
              97,
              109,
              101,
              18,
              36,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              123,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              61,
              42,
              125,
              47,
              42,
              42,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface RevisionsServiceImplementation<CallContextExt = {}> {
  /** Gets information about a Revision. */
  getRevision(request: GetRevisionRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Revision>>;
  /**
   * Lists Revisions from a given Service, or from a given location.  Results
   * are sorted by creation time, descending.
   */
  listRevisions(
    request: ListRevisionsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListRevisionsResponse>>;
  /** Deletes a Revision. */
  deleteRevision(
    request: DeleteRevisionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
}

export interface RevisionsClient<CallOptionsExt = {}> {
  /** Gets information about a Revision. */
  getRevision(request: DeepPartial<GetRevisionRequest>, options?: CallOptions & CallOptionsExt): Promise<Revision>;
  /**
   * Lists Revisions from a given Service, or from a given location.  Results
   * are sorted by creation time, descending.
   */
  listRevisions(
    request: DeepPartial<ListRevisionsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListRevisionsResponse>;
  /** Deletes a Revision. */
  deleteRevision(
    request: DeepPartial<DeleteRevisionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
