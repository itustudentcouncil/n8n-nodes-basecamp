// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/run/v2/job.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { LaunchStage, launchStageFromJSON, launchStageToJSON } from "../../../api/launch_stage.js";
import {
  GetIamPolicyRequest,
  SetIamPolicyRequest,
  TestIamPermissionsRequest,
  TestIamPermissionsResponse,
} from "../../../iam/v1/iam_policy.js";
import { Policy } from "../../../iam/v1/policy.js";
import { Operation } from "../../../longrunning/operations.js";
import { Duration } from "../../../protobuf/duration.js";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { Condition } from "./condition.js";
import { ExecutionTemplate } from "./execution_template.js";
import { EnvVar } from "./k8s.min.js";
import { BinaryAuthorization } from "./vendor_settings.js";

export const protobufPackage = "google.cloud.run.v2";

/** Request message for creating a Job. */
export interface CreateJobRequest {
  /**
   * Required. The location and project in which this Job should be created.
   * Format: projects/{project}/locations/{location}, where {project} can be
   * project id or number.
   */
  parent: string;
  /** Required. The Job instance to create. */
  job:
    | Job
    | undefined;
  /**
   * Required. The unique identifier for the Job. The name of the job becomes
   * {parent}/jobs/{job_id}.
   */
  jobId: string;
  /**
   * Indicates that the request should be validated and default values
   * populated, without persisting the request or creating any resources.
   */
  validateOnly: boolean;
}

/** Request message for obtaining a Job by its full name. */
export interface GetJobRequest {
  /**
   * Required. The full name of the Job.
   * Format: projects/{project}/locations/{location}/jobs/{job}, where {project}
   * can be project id or number.
   */
  name: string;
}

/** Request message for updating a Job. */
export interface UpdateJobRequest {
  /** Required. The Job to be updated. */
  job:
    | Job
    | undefined;
  /**
   * Indicates that the request should be validated and default values
   * populated, without persisting the request or updating any resources.
   */
  validateOnly: boolean;
  /**
   * Optional. If set to true, and if the Job does not exist, it will create a
   * new one. Caller must have both create and update permissions for this call
   * if this is set to true.
   */
  allowMissing: boolean;
}

/** Request message for retrieving a list of Jobs. */
export interface ListJobsRequest {
  /**
   * Required. The location and project to list resources on.
   * Format: projects/{project}/locations/{location}, where {project} can be
   * project id or number.
   */
  parent: string;
  /** Maximum number of Jobs to return in this call. */
  pageSize: number;
  /**
   * A page token received from a previous call to ListJobs.
   * All other parameters must match.
   */
  pageToken: string;
  /** If true, returns deleted (but unexpired) resources along with active ones. */
  showDeleted: boolean;
}

/** Response message containing a list of Jobs. */
export interface ListJobsResponse {
  /** The resulting list of Jobs. */
  jobs: Job[];
  /**
   * A token indicating there are more items than page_size. Use it in the next
   * ListJobs request to continue.
   */
  nextPageToken: string;
}

/** Request message to delete a Job by its full name. */
export interface DeleteJobRequest {
  /**
   * Required. The full name of the Job.
   * Format: projects/{project}/locations/{location}/jobs/{job}, where {project}
   * can be project id or number.
   */
  name: string;
  /**
   * Indicates that the request should be validated without actually
   * deleting any resources.
   */
  validateOnly: boolean;
  /**
   * A system-generated fingerprint for this version of the
   * resource. May be used to detect modification conflict during updates.
   */
  etag: string;
}

/** Request message to create a new Execution of a Job. */
export interface RunJobRequest {
  /**
   * Required. The full name of the Job.
   * Format: projects/{project}/locations/{location}/jobs/{job}, where {project}
   * can be project id or number.
   */
  name: string;
  /**
   * Indicates that the request should be validated without actually
   * deleting any resources.
   */
  validateOnly: boolean;
  /**
   * A system-generated fingerprint for this version of the
   * resource. May be used to detect modification conflict during updates.
   */
  etag: string;
  /**
   * Overrides specification for a given execution of a job. If provided,
   * overrides will be applied to update the execution or task spec.
   */
  overrides: RunJobRequest_Overrides | undefined;
}

/** RunJob Overrides that contains Execution fields to be overridden. */
export interface RunJobRequest_Overrides {
  /** Per container override specification. */
  containerOverrides: RunJobRequest_Overrides_ContainerOverride[];
  /**
   * Optional. The desired number of tasks the execution should run. Will
   * replace existing task_count value.
   */
  taskCount: number;
  /**
   * Duration in seconds the task may be active before the system will
   * actively try to mark it failed and kill associated containers. Will
   * replace existing timeout_seconds value.
   */
  timeout: Duration | undefined;
}

/** Per-container override specification. */
export interface RunJobRequest_Overrides_ContainerOverride {
  /** The name of the container specified as a DNS_LABEL. */
  name: string;
  /**
   * Optional. Arguments to the entrypoint. Will replace existing args for
   * override.
   */
  args: string[];
  /**
   * List of environment variables to set in the container. Will be merged
   * with existing env for override.
   */
  env: EnvVar[];
  /** Optional. True if the intention is to clear out existing args list. */
  clearArgs: boolean;
}

/**
 * Job represents the configuration of a single job, which references a
 * container image that is run to completion.
 */
export interface Job {
  /**
   * The fully qualified name of this Job.
   *
   * Format:
   * projects/{project}/locations/{location}/jobs/{job}
   */
  name: string;
  /**
   * Output only. Server assigned unique identifier for the Execution. The value
   * is a UUID4 string and guaranteed to remain unchanged until the resource is
   * deleted.
   */
  uid: string;
  /**
   * Output only. A number that monotonically increases every time the user
   * modifies the desired state.
   */
  generation: Long;
  /**
   * Unstructured key value map that can be used to organize and categorize
   * objects.
   * User-provided labels are shared with Google's billing system, so they can
   * be used to filter, or break down billing charges by team, component,
   * environment, state, etc. For more information, visit
   * https://cloud.google.com/resource-manager/docs/creating-managing-labels or
   * https://cloud.google.com/run/docs/configuring/labels.
   *
   * <p>Cloud Run API v2 does not support labels with `run.googleapis.com`,
   * `cloud.googleapis.com`, `serving.knative.dev`, or `autoscaling.knative.dev`
   * namespaces, and they will be rejected. All system labels in v1 now have a
   * corresponding field in v2 Job.
   */
  labels: { [key: string]: string };
  /**
   * Unstructured key value map that may
   * be set by external tools to store and arbitrary metadata.
   * They are not queryable and should be preserved
   * when modifying objects.
   *
   * <p>Cloud Run API v2 does not support annotations with `run.googleapis.com`,
   * `cloud.googleapis.com`, `serving.knative.dev`, or `autoscaling.knative.dev`
   * namespaces, and they will be rejected on new resources. All system
   * annotations in v1 now have a corresponding field in v2 Job.
   *
   * <p>This field follows Kubernetes annotations' namespacing, limits, and
   * rules.
   */
  annotations: { [key: string]: string };
  /** Output only. The creation time. */
  createTime:
    | Date
    | undefined;
  /** Output only. The last-modified time. */
  updateTime:
    | Date
    | undefined;
  /**
   * Output only. The deletion time. It is only populated as a response to a
   * Delete request.
   */
  deleteTime:
    | Date
    | undefined;
  /**
   * Output only. For a deleted resource, the time after which it will be
   * permamently deleted.
   */
  expireTime:
    | Date
    | undefined;
  /** Output only. Email address of the authenticated creator. */
  creator: string;
  /** Output only. Email address of the last authenticated modifier. */
  lastModifier: string;
  /** Arbitrary identifier for the API client. */
  client: string;
  /** Arbitrary version identifier for the API client. */
  clientVersion: string;
  /**
   * The launch stage as defined by [Google Cloud Platform
   * Launch Stages](https://cloud.google.com/terms/launch-stages).
   * Cloud Run supports `ALPHA`, `BETA`, and `GA`. If no value is specified, GA
   * is assumed.
   * Set the launch stage to a preview stage on input to allow use of preview
   * features in that stage. On read (or output), describes whether the resource
   * uses preview features.
   * <p>
   * For example, if ALPHA is provided as input, but only BETA and GA-level
   * features are used, this field will be BETA on output.
   */
  launchStage: LaunchStage;
  /** Settings for the Binary Authorization feature. */
  binaryAuthorization:
    | BinaryAuthorization
    | undefined;
  /** Required. The template used to create executions for this Job. */
  template:
    | ExecutionTemplate
    | undefined;
  /**
   * Output only. The generation of this Job. See comments in `reconciling` for
   * additional information on reconciliation process in Cloud Run.
   */
  observedGeneration: Long;
  /**
   * Output only. The Condition of this Job, containing its readiness status,
   * and detailed error information in case it did not reach the desired state.
   */
  terminalCondition:
    | Condition
    | undefined;
  /**
   * Output only. The Conditions of all other associated sub-resources. They
   * contain additional diagnostics information in case the Job does not reach
   * its desired state. See comments in `reconciling` for additional information
   * on reconciliation process in Cloud Run.
   */
  conditions: Condition[];
  /** Output only. Number of executions created for this job. */
  executionCount: number;
  /** Output only. Name of the last created execution. */
  latestCreatedExecution:
    | ExecutionReference
    | undefined;
  /**
   * Output only. Returns true if the Job is currently being acted upon by the
   * system to bring it into the desired state.
   *
   * When a new Job is created, or an existing one is updated, Cloud Run
   * will asynchronously perform all necessary steps to bring the Job to the
   * desired state. This process is called reconciliation.
   * While reconciliation is in process, `observed_generation` and
   * `latest_succeeded_execution`, will have transient values that might
   * mismatch the intended state: Once reconciliation is over (and this field is
   * false), there are two possible outcomes: reconciliation succeeded and the
   * state matches the Job, or there was an error,  and reconciliation failed.
   * This state can be found in `terminal_condition.state`.
   *
   * If reconciliation succeeded, the following fields will match:
   * `observed_generation` and `generation`, `latest_succeeded_execution` and
   * `latest_created_execution`.
   *
   * If reconciliation failed, `observed_generation` and
   * `latest_succeeded_execution` will have the state of the last succeeded
   * execution or empty for newly created Job. Additional information on the
   * failure can be found in `terminal_condition` and `conditions`.
   */
  reconciling: boolean;
  /** Output only. Reserved for future use. */
  satisfiesPzs: boolean;
  /**
   * A unique string used as a suffix creating a new execution. The Job will
   * become ready when the execution is successfully started.
   * The sum of job name and token length must be fewer than 63 characters.
   */
  startExecutionToken?:
    | string
    | undefined;
  /**
   * A unique string used as a suffix for creating a new execution. The Job
   * will become ready when the execution is successfully completed.
   * The sum of job name and token length must be fewer than 63 characters.
   */
  runExecutionToken?:
    | string
    | undefined;
  /**
   * Output only. A system-generated fingerprint for this version of the
   * resource. May be used to detect modification conflict during updates.
   */
  etag: string;
}

export interface Job_LabelsEntry {
  key: string;
  value: string;
}

export interface Job_AnnotationsEntry {
  key: string;
  value: string;
}

/**
 * Reference to an Execution. Use /Executions.GetExecution with the given name
 * to get full execution including the latest status.
 */
export interface ExecutionReference {
  /** Name of the execution. */
  name: string;
  /** Creation timestamp of the execution. */
  createTime:
    | Date
    | undefined;
  /** Creation timestamp of the execution. */
  completionTime:
    | Date
    | undefined;
  /**
   * The deletion time of the execution. It is only
   * populated as a response to a Delete request.
   */
  deleteTime:
    | Date
    | undefined;
  /** Status for the execution completion. */
  completionStatus: ExecutionReference_CompletionStatus;
}

/** Possible execution completion status. */
export enum ExecutionReference_CompletionStatus {
  /** COMPLETION_STATUS_UNSPECIFIED - The default value. This value is used if the state is omitted. */
  COMPLETION_STATUS_UNSPECIFIED = 0,
  /** EXECUTION_SUCCEEDED - Job execution has succeeded. */
  EXECUTION_SUCCEEDED = 1,
  /** EXECUTION_FAILED - Job execution has failed. */
  EXECUTION_FAILED = 2,
  /** EXECUTION_RUNNING - Job execution is running normally. */
  EXECUTION_RUNNING = 3,
  /** EXECUTION_PENDING - Waiting for backing resources to be provisioned. */
  EXECUTION_PENDING = 4,
  /** EXECUTION_CANCELLED - Job execution has been cancelled by the user. */
  EXECUTION_CANCELLED = 5,
  UNRECOGNIZED = -1,
}

export function executionReference_CompletionStatusFromJSON(object: any): ExecutionReference_CompletionStatus {
  switch (object) {
    case 0:
    case "COMPLETION_STATUS_UNSPECIFIED":
      return ExecutionReference_CompletionStatus.COMPLETION_STATUS_UNSPECIFIED;
    case 1:
    case "EXECUTION_SUCCEEDED":
      return ExecutionReference_CompletionStatus.EXECUTION_SUCCEEDED;
    case 2:
    case "EXECUTION_FAILED":
      return ExecutionReference_CompletionStatus.EXECUTION_FAILED;
    case 3:
    case "EXECUTION_RUNNING":
      return ExecutionReference_CompletionStatus.EXECUTION_RUNNING;
    case 4:
    case "EXECUTION_PENDING":
      return ExecutionReference_CompletionStatus.EXECUTION_PENDING;
    case 5:
    case "EXECUTION_CANCELLED":
      return ExecutionReference_CompletionStatus.EXECUTION_CANCELLED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ExecutionReference_CompletionStatus.UNRECOGNIZED;
  }
}

export function executionReference_CompletionStatusToJSON(object: ExecutionReference_CompletionStatus): string {
  switch (object) {
    case ExecutionReference_CompletionStatus.COMPLETION_STATUS_UNSPECIFIED:
      return "COMPLETION_STATUS_UNSPECIFIED";
    case ExecutionReference_CompletionStatus.EXECUTION_SUCCEEDED:
      return "EXECUTION_SUCCEEDED";
    case ExecutionReference_CompletionStatus.EXECUTION_FAILED:
      return "EXECUTION_FAILED";
    case ExecutionReference_CompletionStatus.EXECUTION_RUNNING:
      return "EXECUTION_RUNNING";
    case ExecutionReference_CompletionStatus.EXECUTION_PENDING:
      return "EXECUTION_PENDING";
    case ExecutionReference_CompletionStatus.EXECUTION_CANCELLED:
      return "EXECUTION_CANCELLED";
    case ExecutionReference_CompletionStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseCreateJobRequest(): CreateJobRequest {
  return { parent: "", job: undefined, jobId: "", validateOnly: false };
}

export const CreateJobRequest: MessageFns<CreateJobRequest> = {
  encode(message: CreateJobRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.job !== undefined) {
      Job.encode(message.job, writer.uint32(18).fork()).join();
    }
    if (message.jobId !== "") {
      writer.uint32(26).string(message.jobId);
    }
    if (message.validateOnly !== false) {
      writer.uint32(32).bool(message.validateOnly);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateJobRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateJobRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.job = Job.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.jobId = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateJobRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      job: isSet(object.job) ? Job.fromJSON(object.job) : undefined,
      jobId: isSet(object.jobId) ? globalThis.String(object.jobId) : "",
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
    };
  },

  toJSON(message: CreateJobRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.job !== undefined) {
      obj.job = Job.toJSON(message.job);
    }
    if (message.jobId !== "") {
      obj.jobId = message.jobId;
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateJobRequest>): CreateJobRequest {
    return CreateJobRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateJobRequest>): CreateJobRequest {
    const message = createBaseCreateJobRequest();
    message.parent = object.parent ?? "";
    message.job = (object.job !== undefined && object.job !== null) ? Job.fromPartial(object.job) : undefined;
    message.jobId = object.jobId ?? "";
    message.validateOnly = object.validateOnly ?? false;
    return message;
  },
};

function createBaseGetJobRequest(): GetJobRequest {
  return { name: "" };
}

export const GetJobRequest: MessageFns<GetJobRequest> = {
  encode(message: GetJobRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetJobRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetJobRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetJobRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetJobRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetJobRequest>): GetJobRequest {
    return GetJobRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetJobRequest>): GetJobRequest {
    const message = createBaseGetJobRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpdateJobRequest(): UpdateJobRequest {
  return { job: undefined, validateOnly: false, allowMissing: false };
}

export const UpdateJobRequest: MessageFns<UpdateJobRequest> = {
  encode(message: UpdateJobRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.job !== undefined) {
      Job.encode(message.job, writer.uint32(10).fork()).join();
    }
    if (message.validateOnly !== false) {
      writer.uint32(24).bool(message.validateOnly);
    }
    if (message.allowMissing !== false) {
      writer.uint32(32).bool(message.allowMissing);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateJobRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateJobRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.job = Job.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.allowMissing = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateJobRequest {
    return {
      job: isSet(object.job) ? Job.fromJSON(object.job) : undefined,
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
      allowMissing: isSet(object.allowMissing) ? globalThis.Boolean(object.allowMissing) : false,
    };
  },

  toJSON(message: UpdateJobRequest): unknown {
    const obj: any = {};
    if (message.job !== undefined) {
      obj.job = Job.toJSON(message.job);
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    if (message.allowMissing !== false) {
      obj.allowMissing = message.allowMissing;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateJobRequest>): UpdateJobRequest {
    return UpdateJobRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateJobRequest>): UpdateJobRequest {
    const message = createBaseUpdateJobRequest();
    message.job = (object.job !== undefined && object.job !== null) ? Job.fromPartial(object.job) : undefined;
    message.validateOnly = object.validateOnly ?? false;
    message.allowMissing = object.allowMissing ?? false;
    return message;
  },
};

function createBaseListJobsRequest(): ListJobsRequest {
  return { parent: "", pageSize: 0, pageToken: "", showDeleted: false };
}

export const ListJobsRequest: MessageFns<ListJobsRequest> = {
  encode(message: ListJobsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.showDeleted !== false) {
      writer.uint32(32).bool(message.showDeleted);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListJobsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListJobsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.showDeleted = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListJobsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      showDeleted: isSet(object.showDeleted) ? globalThis.Boolean(object.showDeleted) : false,
    };
  },

  toJSON(message: ListJobsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.showDeleted !== false) {
      obj.showDeleted = message.showDeleted;
    }
    return obj;
  },

  create(base?: DeepPartial<ListJobsRequest>): ListJobsRequest {
    return ListJobsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListJobsRequest>): ListJobsRequest {
    const message = createBaseListJobsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.showDeleted = object.showDeleted ?? false;
    return message;
  },
};

function createBaseListJobsResponse(): ListJobsResponse {
  return { jobs: [], nextPageToken: "" };
}

export const ListJobsResponse: MessageFns<ListJobsResponse> = {
  encode(message: ListJobsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.jobs) {
      Job.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListJobsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListJobsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.jobs.push(Job.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListJobsResponse {
    return {
      jobs: globalThis.Array.isArray(object?.jobs) ? object.jobs.map((e: any) => Job.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListJobsResponse): unknown {
    const obj: any = {};
    if (message.jobs?.length) {
      obj.jobs = message.jobs.map((e) => Job.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListJobsResponse>): ListJobsResponse {
    return ListJobsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListJobsResponse>): ListJobsResponse {
    const message = createBaseListJobsResponse();
    message.jobs = object.jobs?.map((e) => Job.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseDeleteJobRequest(): DeleteJobRequest {
  return { name: "", validateOnly: false, etag: "" };
}

export const DeleteJobRequest: MessageFns<DeleteJobRequest> = {
  encode(message: DeleteJobRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.validateOnly !== false) {
      writer.uint32(24).bool(message.validateOnly);
    }
    if (message.etag !== "") {
      writer.uint32(34).string(message.etag);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteJobRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteJobRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.etag = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteJobRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
      etag: isSet(object.etag) ? globalThis.String(object.etag) : "",
    };
  },

  toJSON(message: DeleteJobRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    if (message.etag !== "") {
      obj.etag = message.etag;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteJobRequest>): DeleteJobRequest {
    return DeleteJobRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteJobRequest>): DeleteJobRequest {
    const message = createBaseDeleteJobRequest();
    message.name = object.name ?? "";
    message.validateOnly = object.validateOnly ?? false;
    message.etag = object.etag ?? "";
    return message;
  },
};

function createBaseRunJobRequest(): RunJobRequest {
  return { name: "", validateOnly: false, etag: "", overrides: undefined };
}

export const RunJobRequest: MessageFns<RunJobRequest> = {
  encode(message: RunJobRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.validateOnly !== false) {
      writer.uint32(16).bool(message.validateOnly);
    }
    if (message.etag !== "") {
      writer.uint32(26).string(message.etag);
    }
    if (message.overrides !== undefined) {
      RunJobRequest_Overrides.encode(message.overrides, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RunJobRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRunJobRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.etag = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.overrides = RunJobRequest_Overrides.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RunJobRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
      etag: isSet(object.etag) ? globalThis.String(object.etag) : "",
      overrides: isSet(object.overrides) ? RunJobRequest_Overrides.fromJSON(object.overrides) : undefined,
    };
  },

  toJSON(message: RunJobRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    if (message.etag !== "") {
      obj.etag = message.etag;
    }
    if (message.overrides !== undefined) {
      obj.overrides = RunJobRequest_Overrides.toJSON(message.overrides);
    }
    return obj;
  },

  create(base?: DeepPartial<RunJobRequest>): RunJobRequest {
    return RunJobRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RunJobRequest>): RunJobRequest {
    const message = createBaseRunJobRequest();
    message.name = object.name ?? "";
    message.validateOnly = object.validateOnly ?? false;
    message.etag = object.etag ?? "";
    message.overrides = (object.overrides !== undefined && object.overrides !== null)
      ? RunJobRequest_Overrides.fromPartial(object.overrides)
      : undefined;
    return message;
  },
};

function createBaseRunJobRequest_Overrides(): RunJobRequest_Overrides {
  return { containerOverrides: [], taskCount: 0, timeout: undefined };
}

export const RunJobRequest_Overrides: MessageFns<RunJobRequest_Overrides> = {
  encode(message: RunJobRequest_Overrides, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.containerOverrides) {
      RunJobRequest_Overrides_ContainerOverride.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.taskCount !== 0) {
      writer.uint32(16).int32(message.taskCount);
    }
    if (message.timeout !== undefined) {
      Duration.encode(message.timeout, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RunJobRequest_Overrides {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRunJobRequest_Overrides();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.containerOverrides.push(RunJobRequest_Overrides_ContainerOverride.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.taskCount = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.timeout = Duration.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RunJobRequest_Overrides {
    return {
      containerOverrides: globalThis.Array.isArray(object?.containerOverrides)
        ? object.containerOverrides.map((e: any) => RunJobRequest_Overrides_ContainerOverride.fromJSON(e))
        : [],
      taskCount: isSet(object.taskCount) ? globalThis.Number(object.taskCount) : 0,
      timeout: isSet(object.timeout) ? Duration.fromJSON(object.timeout) : undefined,
    };
  },

  toJSON(message: RunJobRequest_Overrides): unknown {
    const obj: any = {};
    if (message.containerOverrides?.length) {
      obj.containerOverrides = message.containerOverrides.map((e) =>
        RunJobRequest_Overrides_ContainerOverride.toJSON(e)
      );
    }
    if (message.taskCount !== 0) {
      obj.taskCount = Math.round(message.taskCount);
    }
    if (message.timeout !== undefined) {
      obj.timeout = Duration.toJSON(message.timeout);
    }
    return obj;
  },

  create(base?: DeepPartial<RunJobRequest_Overrides>): RunJobRequest_Overrides {
    return RunJobRequest_Overrides.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RunJobRequest_Overrides>): RunJobRequest_Overrides {
    const message = createBaseRunJobRequest_Overrides();
    message.containerOverrides =
      object.containerOverrides?.map((e) => RunJobRequest_Overrides_ContainerOverride.fromPartial(e)) || [];
    message.taskCount = object.taskCount ?? 0;
    message.timeout = (object.timeout !== undefined && object.timeout !== null)
      ? Duration.fromPartial(object.timeout)
      : undefined;
    return message;
  },
};

function createBaseRunJobRequest_Overrides_ContainerOverride(): RunJobRequest_Overrides_ContainerOverride {
  return { name: "", args: [], env: [], clearArgs: false };
}

export const RunJobRequest_Overrides_ContainerOverride: MessageFns<RunJobRequest_Overrides_ContainerOverride> = {
  encode(message: RunJobRequest_Overrides_ContainerOverride, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    for (const v of message.args) {
      writer.uint32(18).string(v!);
    }
    for (const v of message.env) {
      EnvVar.encode(v!, writer.uint32(26).fork()).join();
    }
    if (message.clearArgs !== false) {
      writer.uint32(32).bool(message.clearArgs);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RunJobRequest_Overrides_ContainerOverride {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRunJobRequest_Overrides_ContainerOverride();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.args.push(reader.string());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.env.push(EnvVar.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.clearArgs = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RunJobRequest_Overrides_ContainerOverride {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      args: globalThis.Array.isArray(object?.args) ? object.args.map((e: any) => globalThis.String(e)) : [],
      env: globalThis.Array.isArray(object?.env) ? object.env.map((e: any) => EnvVar.fromJSON(e)) : [],
      clearArgs: isSet(object.clearArgs) ? globalThis.Boolean(object.clearArgs) : false,
    };
  },

  toJSON(message: RunJobRequest_Overrides_ContainerOverride): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.args?.length) {
      obj.args = message.args;
    }
    if (message.env?.length) {
      obj.env = message.env.map((e) => EnvVar.toJSON(e));
    }
    if (message.clearArgs !== false) {
      obj.clearArgs = message.clearArgs;
    }
    return obj;
  },

  create(base?: DeepPartial<RunJobRequest_Overrides_ContainerOverride>): RunJobRequest_Overrides_ContainerOverride {
    return RunJobRequest_Overrides_ContainerOverride.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<RunJobRequest_Overrides_ContainerOverride>,
  ): RunJobRequest_Overrides_ContainerOverride {
    const message = createBaseRunJobRequest_Overrides_ContainerOverride();
    message.name = object.name ?? "";
    message.args = object.args?.map((e) => e) || [];
    message.env = object.env?.map((e) => EnvVar.fromPartial(e)) || [];
    message.clearArgs = object.clearArgs ?? false;
    return message;
  },
};

function createBaseJob(): Job {
  return {
    name: "",
    uid: "",
    generation: Long.ZERO,
    labels: {},
    annotations: {},
    createTime: undefined,
    updateTime: undefined,
    deleteTime: undefined,
    expireTime: undefined,
    creator: "",
    lastModifier: "",
    client: "",
    clientVersion: "",
    launchStage: 0,
    binaryAuthorization: undefined,
    template: undefined,
    observedGeneration: Long.ZERO,
    terminalCondition: undefined,
    conditions: [],
    executionCount: 0,
    latestCreatedExecution: undefined,
    reconciling: false,
    satisfiesPzs: false,
    startExecutionToken: undefined,
    runExecutionToken: undefined,
    etag: "",
  };
}

export const Job: MessageFns<Job> = {
  encode(message: Job, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.uid !== "") {
      writer.uint32(18).string(message.uid);
    }
    if (!message.generation.equals(Long.ZERO)) {
      writer.uint32(24).int64(message.generation.toString());
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      Job_LabelsEntry.encode({ key: key as any, value }, writer.uint32(34).fork()).join();
    });
    Object.entries(message.annotations).forEach(([key, value]) => {
      Job_AnnotationsEntry.encode({ key: key as any, value }, writer.uint32(42).fork()).join();
    });
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(50).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(58).fork()).join();
    }
    if (message.deleteTime !== undefined) {
      Timestamp.encode(toTimestamp(message.deleteTime), writer.uint32(66).fork()).join();
    }
    if (message.expireTime !== undefined) {
      Timestamp.encode(toTimestamp(message.expireTime), writer.uint32(74).fork()).join();
    }
    if (message.creator !== "") {
      writer.uint32(82).string(message.creator);
    }
    if (message.lastModifier !== "") {
      writer.uint32(90).string(message.lastModifier);
    }
    if (message.client !== "") {
      writer.uint32(98).string(message.client);
    }
    if (message.clientVersion !== "") {
      writer.uint32(106).string(message.clientVersion);
    }
    if (message.launchStage !== 0) {
      writer.uint32(112).int32(message.launchStage);
    }
    if (message.binaryAuthorization !== undefined) {
      BinaryAuthorization.encode(message.binaryAuthorization, writer.uint32(122).fork()).join();
    }
    if (message.template !== undefined) {
      ExecutionTemplate.encode(message.template, writer.uint32(130).fork()).join();
    }
    if (!message.observedGeneration.equals(Long.ZERO)) {
      writer.uint32(136).int64(message.observedGeneration.toString());
    }
    if (message.terminalCondition !== undefined) {
      Condition.encode(message.terminalCondition, writer.uint32(146).fork()).join();
    }
    for (const v of message.conditions) {
      Condition.encode(v!, writer.uint32(154).fork()).join();
    }
    if (message.executionCount !== 0) {
      writer.uint32(160).int32(message.executionCount);
    }
    if (message.latestCreatedExecution !== undefined) {
      ExecutionReference.encode(message.latestCreatedExecution, writer.uint32(178).fork()).join();
    }
    if (message.reconciling !== false) {
      writer.uint32(184).bool(message.reconciling);
    }
    if (message.satisfiesPzs !== false) {
      writer.uint32(200).bool(message.satisfiesPzs);
    }
    if (message.startExecutionToken !== undefined) {
      writer.uint32(210).string(message.startExecutionToken);
    }
    if (message.runExecutionToken !== undefined) {
      writer.uint32(218).string(message.runExecutionToken);
    }
    if (message.etag !== "") {
      writer.uint32(794).string(message.etag);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Job {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseJob();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.uid = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.generation = Long.fromString(reader.int64().toString());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          const entry4 = Job_LabelsEntry.decode(reader, reader.uint32());
          if (entry4.value !== undefined) {
            message.labels[entry4.key] = entry4.value;
          }
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          const entry5 = Job_AnnotationsEntry.decode(reader, reader.uint32());
          if (entry5.value !== undefined) {
            message.annotations[entry5.key] = entry5.value;
          }
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.deleteTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.expireTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.creator = reader.string();
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.lastModifier = reader.string();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.client = reader.string();
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.clientVersion = reader.string();
          continue;
        case 14:
          if (tag !== 112) {
            break;
          }

          message.launchStage = reader.int32() as any;
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.binaryAuthorization = BinaryAuthorization.decode(reader, reader.uint32());
          continue;
        case 16:
          if (tag !== 130) {
            break;
          }

          message.template = ExecutionTemplate.decode(reader, reader.uint32());
          continue;
        case 17:
          if (tag !== 136) {
            break;
          }

          message.observedGeneration = Long.fromString(reader.int64().toString());
          continue;
        case 18:
          if (tag !== 146) {
            break;
          }

          message.terminalCondition = Condition.decode(reader, reader.uint32());
          continue;
        case 19:
          if (tag !== 154) {
            break;
          }

          message.conditions.push(Condition.decode(reader, reader.uint32()));
          continue;
        case 20:
          if (tag !== 160) {
            break;
          }

          message.executionCount = reader.int32();
          continue;
        case 22:
          if (tag !== 178) {
            break;
          }

          message.latestCreatedExecution = ExecutionReference.decode(reader, reader.uint32());
          continue;
        case 23:
          if (tag !== 184) {
            break;
          }

          message.reconciling = reader.bool();
          continue;
        case 25:
          if (tag !== 200) {
            break;
          }

          message.satisfiesPzs = reader.bool();
          continue;
        case 26:
          if (tag !== 210) {
            break;
          }

          message.startExecutionToken = reader.string();
          continue;
        case 27:
          if (tag !== 218) {
            break;
          }

          message.runExecutionToken = reader.string();
          continue;
        case 99:
          if (tag !== 794) {
            break;
          }

          message.etag = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Job {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      uid: isSet(object.uid) ? globalThis.String(object.uid) : "",
      generation: isSet(object.generation) ? Long.fromValue(object.generation) : Long.ZERO,
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      annotations: isObject(object.annotations)
        ? Object.entries(object.annotations).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      deleteTime: isSet(object.deleteTime) ? fromJsonTimestamp(object.deleteTime) : undefined,
      expireTime: isSet(object.expireTime) ? fromJsonTimestamp(object.expireTime) : undefined,
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      lastModifier: isSet(object.lastModifier) ? globalThis.String(object.lastModifier) : "",
      client: isSet(object.client) ? globalThis.String(object.client) : "",
      clientVersion: isSet(object.clientVersion) ? globalThis.String(object.clientVersion) : "",
      launchStage: isSet(object.launchStage) ? launchStageFromJSON(object.launchStage) : 0,
      binaryAuthorization: isSet(object.binaryAuthorization)
        ? BinaryAuthorization.fromJSON(object.binaryAuthorization)
        : undefined,
      template: isSet(object.template) ? ExecutionTemplate.fromJSON(object.template) : undefined,
      observedGeneration: isSet(object.observedGeneration) ? Long.fromValue(object.observedGeneration) : Long.ZERO,
      terminalCondition: isSet(object.terminalCondition) ? Condition.fromJSON(object.terminalCondition) : undefined,
      conditions: globalThis.Array.isArray(object?.conditions)
        ? object.conditions.map((e: any) => Condition.fromJSON(e))
        : [],
      executionCount: isSet(object.executionCount) ? globalThis.Number(object.executionCount) : 0,
      latestCreatedExecution: isSet(object.latestCreatedExecution)
        ? ExecutionReference.fromJSON(object.latestCreatedExecution)
        : undefined,
      reconciling: isSet(object.reconciling) ? globalThis.Boolean(object.reconciling) : false,
      satisfiesPzs: isSet(object.satisfiesPzs) ? globalThis.Boolean(object.satisfiesPzs) : false,
      startExecutionToken: isSet(object.startExecutionToken)
        ? globalThis.String(object.startExecutionToken)
        : undefined,
      runExecutionToken: isSet(object.runExecutionToken) ? globalThis.String(object.runExecutionToken) : undefined,
      etag: isSet(object.etag) ? globalThis.String(object.etag) : "",
    };
  },

  toJSON(message: Job): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.uid !== "") {
      obj.uid = message.uid;
    }
    if (!message.generation.equals(Long.ZERO)) {
      obj.generation = (message.generation || Long.ZERO).toString();
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    if (message.annotations) {
      const entries = Object.entries(message.annotations);
      if (entries.length > 0) {
        obj.annotations = {};
        entries.forEach(([k, v]) => {
          obj.annotations[k] = v;
        });
      }
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.deleteTime !== undefined) {
      obj.deleteTime = message.deleteTime.toISOString();
    }
    if (message.expireTime !== undefined) {
      obj.expireTime = message.expireTime.toISOString();
    }
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.lastModifier !== "") {
      obj.lastModifier = message.lastModifier;
    }
    if (message.client !== "") {
      obj.client = message.client;
    }
    if (message.clientVersion !== "") {
      obj.clientVersion = message.clientVersion;
    }
    if (message.launchStage !== 0) {
      obj.launchStage = launchStageToJSON(message.launchStage);
    }
    if (message.binaryAuthorization !== undefined) {
      obj.binaryAuthorization = BinaryAuthorization.toJSON(message.binaryAuthorization);
    }
    if (message.template !== undefined) {
      obj.template = ExecutionTemplate.toJSON(message.template);
    }
    if (!message.observedGeneration.equals(Long.ZERO)) {
      obj.observedGeneration = (message.observedGeneration || Long.ZERO).toString();
    }
    if (message.terminalCondition !== undefined) {
      obj.terminalCondition = Condition.toJSON(message.terminalCondition);
    }
    if (message.conditions?.length) {
      obj.conditions = message.conditions.map((e) => Condition.toJSON(e));
    }
    if (message.executionCount !== 0) {
      obj.executionCount = Math.round(message.executionCount);
    }
    if (message.latestCreatedExecution !== undefined) {
      obj.latestCreatedExecution = ExecutionReference.toJSON(message.latestCreatedExecution);
    }
    if (message.reconciling !== false) {
      obj.reconciling = message.reconciling;
    }
    if (message.satisfiesPzs !== false) {
      obj.satisfiesPzs = message.satisfiesPzs;
    }
    if (message.startExecutionToken !== undefined) {
      obj.startExecutionToken = message.startExecutionToken;
    }
    if (message.runExecutionToken !== undefined) {
      obj.runExecutionToken = message.runExecutionToken;
    }
    if (message.etag !== "") {
      obj.etag = message.etag;
    }
    return obj;
  },

  create(base?: DeepPartial<Job>): Job {
    return Job.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Job>): Job {
    const message = createBaseJob();
    message.name = object.name ?? "";
    message.uid = object.uid ?? "";
    message.generation = (object.generation !== undefined && object.generation !== null)
      ? Long.fromValue(object.generation)
      : Long.ZERO;
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.annotations = Object.entries(object.annotations ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.deleteTime = object.deleteTime ?? undefined;
    message.expireTime = object.expireTime ?? undefined;
    message.creator = object.creator ?? "";
    message.lastModifier = object.lastModifier ?? "";
    message.client = object.client ?? "";
    message.clientVersion = object.clientVersion ?? "";
    message.launchStage = object.launchStage ?? 0;
    message.binaryAuthorization = (object.binaryAuthorization !== undefined && object.binaryAuthorization !== null)
      ? BinaryAuthorization.fromPartial(object.binaryAuthorization)
      : undefined;
    message.template = (object.template !== undefined && object.template !== null)
      ? ExecutionTemplate.fromPartial(object.template)
      : undefined;
    message.observedGeneration = (object.observedGeneration !== undefined && object.observedGeneration !== null)
      ? Long.fromValue(object.observedGeneration)
      : Long.ZERO;
    message.terminalCondition = (object.terminalCondition !== undefined && object.terminalCondition !== null)
      ? Condition.fromPartial(object.terminalCondition)
      : undefined;
    message.conditions = object.conditions?.map((e) => Condition.fromPartial(e)) || [];
    message.executionCount = object.executionCount ?? 0;
    message.latestCreatedExecution =
      (object.latestCreatedExecution !== undefined && object.latestCreatedExecution !== null)
        ? ExecutionReference.fromPartial(object.latestCreatedExecution)
        : undefined;
    message.reconciling = object.reconciling ?? false;
    message.satisfiesPzs = object.satisfiesPzs ?? false;
    message.startExecutionToken = object.startExecutionToken ?? undefined;
    message.runExecutionToken = object.runExecutionToken ?? undefined;
    message.etag = object.etag ?? "";
    return message;
  },
};

function createBaseJob_LabelsEntry(): Job_LabelsEntry {
  return { key: "", value: "" };
}

export const Job_LabelsEntry: MessageFns<Job_LabelsEntry> = {
  encode(message: Job_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Job_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseJob_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Job_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: Job_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<Job_LabelsEntry>): Job_LabelsEntry {
    return Job_LabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Job_LabelsEntry>): Job_LabelsEntry {
    const message = createBaseJob_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseJob_AnnotationsEntry(): Job_AnnotationsEntry {
  return { key: "", value: "" };
}

export const Job_AnnotationsEntry: MessageFns<Job_AnnotationsEntry> = {
  encode(message: Job_AnnotationsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Job_AnnotationsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseJob_AnnotationsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Job_AnnotationsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: Job_AnnotationsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<Job_AnnotationsEntry>): Job_AnnotationsEntry {
    return Job_AnnotationsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Job_AnnotationsEntry>): Job_AnnotationsEntry {
    const message = createBaseJob_AnnotationsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseExecutionReference(): ExecutionReference {
  return { name: "", createTime: undefined, completionTime: undefined, deleteTime: undefined, completionStatus: 0 };
}

export const ExecutionReference: MessageFns<ExecutionReference> = {
  encode(message: ExecutionReference, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(18).fork()).join();
    }
    if (message.completionTime !== undefined) {
      Timestamp.encode(toTimestamp(message.completionTime), writer.uint32(26).fork()).join();
    }
    if (message.deleteTime !== undefined) {
      Timestamp.encode(toTimestamp(message.deleteTime), writer.uint32(42).fork()).join();
    }
    if (message.completionStatus !== 0) {
      writer.uint32(32).int32(message.completionStatus);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExecutionReference {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExecutionReference();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.completionTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.deleteTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.completionStatus = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExecutionReference {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      completionTime: isSet(object.completionTime) ? fromJsonTimestamp(object.completionTime) : undefined,
      deleteTime: isSet(object.deleteTime) ? fromJsonTimestamp(object.deleteTime) : undefined,
      completionStatus: isSet(object.completionStatus)
        ? executionReference_CompletionStatusFromJSON(object.completionStatus)
        : 0,
    };
  },

  toJSON(message: ExecutionReference): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.completionTime !== undefined) {
      obj.completionTime = message.completionTime.toISOString();
    }
    if (message.deleteTime !== undefined) {
      obj.deleteTime = message.deleteTime.toISOString();
    }
    if (message.completionStatus !== 0) {
      obj.completionStatus = executionReference_CompletionStatusToJSON(message.completionStatus);
    }
    return obj;
  },

  create(base?: DeepPartial<ExecutionReference>): ExecutionReference {
    return ExecutionReference.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExecutionReference>): ExecutionReference {
    const message = createBaseExecutionReference();
    message.name = object.name ?? "";
    message.createTime = object.createTime ?? undefined;
    message.completionTime = object.completionTime ?? undefined;
    message.deleteTime = object.deleteTime ?? undefined;
    message.completionStatus = object.completionStatus ?? 0;
    return message;
  },
};

/** Cloud Run Job Control Plane API. */
export type JobsDefinition = typeof JobsDefinition;
export const JobsDefinition = {
  name: "Jobs",
  fullName: "google.cloud.run.v2.Jobs",
  methods: {
    /** Creates a Job. */
    createJob: {
      name: "CreateJob",
      requestType: CreateJobRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [Buffer.from([10, 10, 3, 74, 111, 98, 18, 3, 74, 111, 98])],
          8410: [Buffer.from([17, 112, 97, 114, 101, 110, 116, 44, 106, 111, 98, 44, 106, 111, 98, 95, 105, 100])],
          578365826: [
            Buffer.from([
              47,
              58,
              3,
              106,
              111,
              98,
              34,
              40,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              106,
              111,
              98,
              115,
            ]),
          ],
          578365834: [
            Buffer.from([
              45,
              18,
              43,
              10,
              6,
              112,
              97,
              114,
              101,
              110,
              116,
              18,
              33,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              123,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              61,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Gets information about a Job. */
    getJob: {
      name: "GetJob",
      requestType: GetJobRequest,
      requestStream: false,
      responseType: Job,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              42,
              18,
              40,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              106,
              111,
              98,
              115,
              47,
              42,
              125,
            ]),
          ],
          578365834: [
            Buffer.from([
              46,
              18,
              44,
              10,
              4,
              110,
              97,
              109,
              101,
              18,
              36,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              123,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              61,
              42,
              125,
              47,
              42,
              42,
            ]),
          ],
        },
      },
    },
    /** Lists Jobs. Results are sorted by creation time, descending. */
    listJobs: {
      name: "ListJobs",
      requestType: ListJobsRequest,
      requestStream: false,
      responseType: ListJobsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              42,
              18,
              40,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              106,
              111,
              98,
              115,
            ]),
          ],
          578365834: [
            Buffer.from([
              45,
              18,
              43,
              10,
              6,
              112,
              97,
              114,
              101,
              110,
              116,
              18,
              33,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              123,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              61,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Updates a Job. */
    updateJob: {
      name: "UpdateJob",
      requestType: UpdateJobRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [Buffer.from([10, 10, 3, 74, 111, 98, 18, 3, 74, 111, 98])],
          8410: [Buffer.from([3, 106, 111, 98])],
          578365826: [
            Buffer.from([
              51,
              58,
              3,
              106,
              111,
              98,
              50,
              44,
              47,
              118,
              50,
              47,
              123,
              106,
              111,
              98,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              106,
              111,
              98,
              115,
              47,
              42,
              125,
            ]),
          ],
          578365834: [
            Buffer.from([
              50,
              18,
              48,
              10,
              8,
              106,
              111,
              98,
              46,
              110,
              97,
              109,
              101,
              18,
              36,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              123,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              61,
              42,
              125,
              47,
              42,
              42,
            ]),
          ],
        },
      },
    },
    /** Deletes a Job. */
    deleteJob: {
      name: "DeleteJob",
      requestType: DeleteJobRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [Buffer.from([10, 10, 3, 74, 111, 98, 18, 3, 74, 111, 98])],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              42,
              42,
              40,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              106,
              111,
              98,
              115,
              47,
              42,
              125,
            ]),
          ],
          578365834: [
            Buffer.from([
              46,
              18,
              44,
              10,
              4,
              110,
              97,
              109,
              101,
              18,
              36,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              123,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              61,
              42,
              125,
              47,
              42,
              42,
            ]),
          ],
        },
      },
    },
    /** Triggers creation of a new Execution of this Job. */
    runJob: {
      name: "RunJob",
      requestType: RunJobRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              22,
              10,
              9,
              69,
              120,
              101,
              99,
              117,
              116,
              105,
              111,
              110,
              18,
              9,
              69,
              120,
              101,
              99,
              117,
              116,
              105,
              111,
              110,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              49,
              58,
              1,
              42,
              34,
              44,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              106,
              111,
              98,
              115,
              47,
              42,
              125,
              58,
              114,
              117,
              110,
            ]),
          ],
          578365834: [
            Buffer.from([
              46,
              18,
              44,
              10,
              4,
              110,
              97,
              109,
              101,
              18,
              36,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              123,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              61,
              42,
              125,
              47,
              42,
              42,
            ]),
          ],
        },
      },
    },
    /**
     * Gets the IAM Access Control policy currently in effect for the given Job.
     * This result does not include any inherited policies.
     */
    getIamPolicy: {
      name: "GetIamPolicy",
      requestType: GetIamPolicyRequest,
      requestStream: false,
      responseType: Policy,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              59,
              18,
              57,
              47,
              118,
              50,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              106,
              111,
              98,
              115,
              47,
              42,
              125,
              58,
              103,
              101,
              116,
              73,
              97,
              109,
              80,
              111,
              108,
              105,
              99,
              121,
            ]),
          ],
        },
      },
    },
    /**
     * Sets the IAM Access control policy for the specified Job. Overwrites
     * any existing policy.
     */
    setIamPolicy: {
      name: "SetIamPolicy",
      requestType: SetIamPolicyRequest,
      requestStream: false,
      responseType: Policy,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              62,
              58,
              1,
              42,
              34,
              57,
              47,
              118,
              50,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              106,
              111,
              98,
              115,
              47,
              42,
              125,
              58,
              115,
              101,
              116,
              73,
              97,
              109,
              80,
              111,
              108,
              105,
              99,
              121,
            ]),
          ],
        },
      },
    },
    /**
     * Returns permissions that a caller has on the specified Project.
     *
     * There are no permissions required for making this API call.
     */
    testIamPermissions: {
      name: "TestIamPermissions",
      requestType: TestIamPermissionsRequest,
      requestStream: false,
      responseType: TestIamPermissionsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              68,
              58,
              1,
              42,
              34,
              63,
              47,
              118,
              50,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              106,
              111,
              98,
              115,
              47,
              42,
              125,
              58,
              116,
              101,
              115,
              116,
              73,
              97,
              109,
              80,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface JobsServiceImplementation<CallContextExt = {}> {
  /** Creates a Job. */
  createJob(request: CreateJobRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /** Gets information about a Job. */
  getJob(request: GetJobRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Job>>;
  /** Lists Jobs. Results are sorted by creation time, descending. */
  listJobs(request: ListJobsRequest, context: CallContext & CallContextExt): Promise<DeepPartial<ListJobsResponse>>;
  /** Updates a Job. */
  updateJob(request: UpdateJobRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /** Deletes a Job. */
  deleteJob(request: DeleteJobRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /** Triggers creation of a new Execution of this Job. */
  runJob(request: RunJobRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /**
   * Gets the IAM Access Control policy currently in effect for the given Job.
   * This result does not include any inherited policies.
   */
  getIamPolicy(request: GetIamPolicyRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Policy>>;
  /**
   * Sets the IAM Access control policy for the specified Job. Overwrites
   * any existing policy.
   */
  setIamPolicy(request: SetIamPolicyRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Policy>>;
  /**
   * Returns permissions that a caller has on the specified Project.
   *
   * There are no permissions required for making this API call.
   */
  testIamPermissions(
    request: TestIamPermissionsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<TestIamPermissionsResponse>>;
}

export interface JobsClient<CallOptionsExt = {}> {
  /** Creates a Job. */
  createJob(request: DeepPartial<CreateJobRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /** Gets information about a Job. */
  getJob(request: DeepPartial<GetJobRequest>, options?: CallOptions & CallOptionsExt): Promise<Job>;
  /** Lists Jobs. Results are sorted by creation time, descending. */
  listJobs(request: DeepPartial<ListJobsRequest>, options?: CallOptions & CallOptionsExt): Promise<ListJobsResponse>;
  /** Updates a Job. */
  updateJob(request: DeepPartial<UpdateJobRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /** Deletes a Job. */
  deleteJob(request: DeepPartial<DeleteJobRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /** Triggers creation of a new Execution of this Job. */
  runJob(request: DeepPartial<RunJobRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /**
   * Gets the IAM Access Control policy currently in effect for the given Job.
   * This result does not include any inherited policies.
   */
  getIamPolicy(request: DeepPartial<GetIamPolicyRequest>, options?: CallOptions & CallOptionsExt): Promise<Policy>;
  /**
   * Sets the IAM Access control policy for the specified Job. Overwrites
   * any existing policy.
   */
  setIamPolicy(request: DeepPartial<SetIamPolicyRequest>, options?: CallOptions & CallOptionsExt): Promise<Policy>;
  /**
   * Returns permissions that a caller has on the specified Project.
   *
   * There are no permissions required for making this API call.
   */
  testIamPermissions(
    request: DeepPartial<TestIamPermissionsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<TestIamPermissionsResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
