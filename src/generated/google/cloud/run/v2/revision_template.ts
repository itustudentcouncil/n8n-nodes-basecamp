// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/run/v2/revision_template.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Duration } from "../../../protobuf/duration.js";
import { Container, Volume } from "./k8s.min.js";
import {
  ExecutionEnvironment,
  executionEnvironmentFromJSON,
  executionEnvironmentToJSON,
  RevisionScaling,
  VpcAccess,
} from "./vendor_settings.js";

export const protobufPackage = "google.cloud.run.v2";

/**
 * RevisionTemplate describes the data a revision should have when created from
 * a template.
 */
export interface RevisionTemplate {
  /**
   * Optional. The unique name for the revision. If this field is omitted, it
   * will be automatically generated based on the Service name.
   */
  revision: string;
  /**
   * Optional. Unstructured key value map that can be used to organize and
   * categorize objects. User-provided labels are shared with Google's billing
   * system, so they can be used to filter, or break down billing charges by
   * team, component, environment, state, etc. For more information, visit
   * https://cloud.google.com/resource-manager/docs/creating-managing-labels or
   * https://cloud.google.com/run/docs/configuring/labels.
   *
   * <p>Cloud Run API v2 does not support labels with `run.googleapis.com`,
   * `cloud.googleapis.com`, `serving.knative.dev`, or `autoscaling.knative.dev`
   * namespaces, and they will be rejected. All system labels in v1 now have a
   * corresponding field in v2 RevisionTemplate.
   */
  labels: { [key: string]: string };
  /**
   * Optional. Unstructured key value map that may be set by external tools to
   * store and arbitrary metadata. They are not queryable and should be
   * preserved when modifying objects.
   *
   * <p>Cloud Run API v2 does not support annotations with `run.googleapis.com`,
   * `cloud.googleapis.com`, `serving.knative.dev`, or `autoscaling.knative.dev`
   * namespaces, and they will be rejected. All system annotations in v1 now
   * have a corresponding field in v2 RevisionTemplate.
   *
   * <p>This field follows Kubernetes annotations' namespacing, limits, and
   * rules.
   */
  annotations: { [key: string]: string };
  /** Optional. Scaling settings for this Revision. */
  scaling:
    | RevisionScaling
    | undefined;
  /**
   * Optional. VPC Access configuration to use for this Revision. For more
   * information, visit
   * https://cloud.google.com/run/docs/configuring/connecting-vpc.
   */
  vpcAccess:
    | VpcAccess
    | undefined;
  /** Optional. Max allowed time for an instance to respond to a request. */
  timeout:
    | Duration
    | undefined;
  /**
   * Optional. Email address of the IAM service account associated with the
   * revision of the service. The service account represents the identity of the
   * running revision, and determines what permissions the revision has. If not
   * provided, the revision will use the project's default service account.
   */
  serviceAccount: string;
  /**
   * Holds the single container that defines the unit of execution for this
   * Revision.
   */
  containers: Container[];
  /** Optional. A list of Volumes to make available to containers. */
  volumes: Volume[];
  /** Optional. The sandbox environment to host this Revision. */
  executionEnvironment: ExecutionEnvironment;
  /**
   * A reference to a customer managed encryption key (CMEK) to use to encrypt
   * this container image. For more information, go to
   * https://cloud.google.com/run/docs/securing/using-cmek
   */
  encryptionKey: string;
  /**
   * Optional. Sets the maximum number of requests that each serving instance
   * can receive.
   */
  maxInstanceRequestConcurrency: number;
  /** Optional. Enable session affinity. */
  sessionAffinity: boolean;
  /** Optional. Disables health checking containers during deployment. */
  healthCheckDisabled: boolean;
}

export interface RevisionTemplate_LabelsEntry {
  key: string;
  value: string;
}

export interface RevisionTemplate_AnnotationsEntry {
  key: string;
  value: string;
}

function createBaseRevisionTemplate(): RevisionTemplate {
  return {
    revision: "",
    labels: {},
    annotations: {},
    scaling: undefined,
    vpcAccess: undefined,
    timeout: undefined,
    serviceAccount: "",
    containers: [],
    volumes: [],
    executionEnvironment: 0,
    encryptionKey: "",
    maxInstanceRequestConcurrency: 0,
    sessionAffinity: false,
    healthCheckDisabled: false,
  };
}

export const RevisionTemplate: MessageFns<RevisionTemplate> = {
  encode(message: RevisionTemplate, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.revision !== "") {
      writer.uint32(10).string(message.revision);
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      RevisionTemplate_LabelsEntry.encode({ key: key as any, value }, writer.uint32(18).fork()).join();
    });
    Object.entries(message.annotations).forEach(([key, value]) => {
      RevisionTemplate_AnnotationsEntry.encode({ key: key as any, value }, writer.uint32(26).fork()).join();
    });
    if (message.scaling !== undefined) {
      RevisionScaling.encode(message.scaling, writer.uint32(34).fork()).join();
    }
    if (message.vpcAccess !== undefined) {
      VpcAccess.encode(message.vpcAccess, writer.uint32(50).fork()).join();
    }
    if (message.timeout !== undefined) {
      Duration.encode(message.timeout, writer.uint32(66).fork()).join();
    }
    if (message.serviceAccount !== "") {
      writer.uint32(74).string(message.serviceAccount);
    }
    for (const v of message.containers) {
      Container.encode(v!, writer.uint32(82).fork()).join();
    }
    for (const v of message.volumes) {
      Volume.encode(v!, writer.uint32(90).fork()).join();
    }
    if (message.executionEnvironment !== 0) {
      writer.uint32(104).int32(message.executionEnvironment);
    }
    if (message.encryptionKey !== "") {
      writer.uint32(114).string(message.encryptionKey);
    }
    if (message.maxInstanceRequestConcurrency !== 0) {
      writer.uint32(120).int32(message.maxInstanceRequestConcurrency);
    }
    if (message.sessionAffinity !== false) {
      writer.uint32(152).bool(message.sessionAffinity);
    }
    if (message.healthCheckDisabled !== false) {
      writer.uint32(160).bool(message.healthCheckDisabled);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RevisionTemplate {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRevisionTemplate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.revision = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          const entry2 = RevisionTemplate_LabelsEntry.decode(reader, reader.uint32());
          if (entry2.value !== undefined) {
            message.labels[entry2.key] = entry2.value;
          }
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          const entry3 = RevisionTemplate_AnnotationsEntry.decode(reader, reader.uint32());
          if (entry3.value !== undefined) {
            message.annotations[entry3.key] = entry3.value;
          }
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.scaling = RevisionScaling.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.vpcAccess = VpcAccess.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.timeout = Duration.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.serviceAccount = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.containers.push(Container.decode(reader, reader.uint32()));
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.volumes.push(Volume.decode(reader, reader.uint32()));
          continue;
        case 13:
          if (tag !== 104) {
            break;
          }

          message.executionEnvironment = reader.int32() as any;
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.encryptionKey = reader.string();
          continue;
        case 15:
          if (tag !== 120) {
            break;
          }

          message.maxInstanceRequestConcurrency = reader.int32();
          continue;
        case 19:
          if (tag !== 152) {
            break;
          }

          message.sessionAffinity = reader.bool();
          continue;
        case 20:
          if (tag !== 160) {
            break;
          }

          message.healthCheckDisabled = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RevisionTemplate {
    return {
      revision: isSet(object.revision) ? globalThis.String(object.revision) : "",
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      annotations: isObject(object.annotations)
        ? Object.entries(object.annotations).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      scaling: isSet(object.scaling) ? RevisionScaling.fromJSON(object.scaling) : undefined,
      vpcAccess: isSet(object.vpcAccess) ? VpcAccess.fromJSON(object.vpcAccess) : undefined,
      timeout: isSet(object.timeout) ? Duration.fromJSON(object.timeout) : undefined,
      serviceAccount: isSet(object.serviceAccount) ? globalThis.String(object.serviceAccount) : "",
      containers: globalThis.Array.isArray(object?.containers)
        ? object.containers.map((e: any) => Container.fromJSON(e))
        : [],
      volumes: globalThis.Array.isArray(object?.volumes)
        ? object.volumes.map((e: any) => Volume.fromJSON(e))
        : [],
      executionEnvironment: isSet(object.executionEnvironment)
        ? executionEnvironmentFromJSON(object.executionEnvironment)
        : 0,
      encryptionKey: isSet(object.encryptionKey) ? globalThis.String(object.encryptionKey) : "",
      maxInstanceRequestConcurrency: isSet(object.maxInstanceRequestConcurrency)
        ? globalThis.Number(object.maxInstanceRequestConcurrency)
        : 0,
      sessionAffinity: isSet(object.sessionAffinity) ? globalThis.Boolean(object.sessionAffinity) : false,
      healthCheckDisabled: isSet(object.healthCheckDisabled) ? globalThis.Boolean(object.healthCheckDisabled) : false,
    };
  },

  toJSON(message: RevisionTemplate): unknown {
    const obj: any = {};
    if (message.revision !== "") {
      obj.revision = message.revision;
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    if (message.annotations) {
      const entries = Object.entries(message.annotations);
      if (entries.length > 0) {
        obj.annotations = {};
        entries.forEach(([k, v]) => {
          obj.annotations[k] = v;
        });
      }
    }
    if (message.scaling !== undefined) {
      obj.scaling = RevisionScaling.toJSON(message.scaling);
    }
    if (message.vpcAccess !== undefined) {
      obj.vpcAccess = VpcAccess.toJSON(message.vpcAccess);
    }
    if (message.timeout !== undefined) {
      obj.timeout = Duration.toJSON(message.timeout);
    }
    if (message.serviceAccount !== "") {
      obj.serviceAccount = message.serviceAccount;
    }
    if (message.containers?.length) {
      obj.containers = message.containers.map((e) => Container.toJSON(e));
    }
    if (message.volumes?.length) {
      obj.volumes = message.volumes.map((e) => Volume.toJSON(e));
    }
    if (message.executionEnvironment !== 0) {
      obj.executionEnvironment = executionEnvironmentToJSON(message.executionEnvironment);
    }
    if (message.encryptionKey !== "") {
      obj.encryptionKey = message.encryptionKey;
    }
    if (message.maxInstanceRequestConcurrency !== 0) {
      obj.maxInstanceRequestConcurrency = Math.round(message.maxInstanceRequestConcurrency);
    }
    if (message.sessionAffinity !== false) {
      obj.sessionAffinity = message.sessionAffinity;
    }
    if (message.healthCheckDisabled !== false) {
      obj.healthCheckDisabled = message.healthCheckDisabled;
    }
    return obj;
  },

  create(base?: DeepPartial<RevisionTemplate>): RevisionTemplate {
    return RevisionTemplate.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RevisionTemplate>): RevisionTemplate {
    const message = createBaseRevisionTemplate();
    message.revision = object.revision ?? "";
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.annotations = Object.entries(object.annotations ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    message.scaling = (object.scaling !== undefined && object.scaling !== null)
      ? RevisionScaling.fromPartial(object.scaling)
      : undefined;
    message.vpcAccess = (object.vpcAccess !== undefined && object.vpcAccess !== null)
      ? VpcAccess.fromPartial(object.vpcAccess)
      : undefined;
    message.timeout = (object.timeout !== undefined && object.timeout !== null)
      ? Duration.fromPartial(object.timeout)
      : undefined;
    message.serviceAccount = object.serviceAccount ?? "";
    message.containers = object.containers?.map((e) => Container.fromPartial(e)) || [];
    message.volumes = object.volumes?.map((e) => Volume.fromPartial(e)) || [];
    message.executionEnvironment = object.executionEnvironment ?? 0;
    message.encryptionKey = object.encryptionKey ?? "";
    message.maxInstanceRequestConcurrency = object.maxInstanceRequestConcurrency ?? 0;
    message.sessionAffinity = object.sessionAffinity ?? false;
    message.healthCheckDisabled = object.healthCheckDisabled ?? false;
    return message;
  },
};

function createBaseRevisionTemplate_LabelsEntry(): RevisionTemplate_LabelsEntry {
  return { key: "", value: "" };
}

export const RevisionTemplate_LabelsEntry: MessageFns<RevisionTemplate_LabelsEntry> = {
  encode(message: RevisionTemplate_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RevisionTemplate_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRevisionTemplate_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RevisionTemplate_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: RevisionTemplate_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<RevisionTemplate_LabelsEntry>): RevisionTemplate_LabelsEntry {
    return RevisionTemplate_LabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RevisionTemplate_LabelsEntry>): RevisionTemplate_LabelsEntry {
    const message = createBaseRevisionTemplate_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseRevisionTemplate_AnnotationsEntry(): RevisionTemplate_AnnotationsEntry {
  return { key: "", value: "" };
}

export const RevisionTemplate_AnnotationsEntry: MessageFns<RevisionTemplate_AnnotationsEntry> = {
  encode(message: RevisionTemplate_AnnotationsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RevisionTemplate_AnnotationsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRevisionTemplate_AnnotationsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RevisionTemplate_AnnotationsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: RevisionTemplate_AnnotationsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<RevisionTemplate_AnnotationsEntry>): RevisionTemplate_AnnotationsEntry {
    return RevisionTemplate_AnnotationsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RevisionTemplate_AnnotationsEntry>): RevisionTemplate_AnnotationsEntry {
    const message = createBaseRevisionTemplate_AnnotationsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
