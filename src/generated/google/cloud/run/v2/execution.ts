// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/run/v2/execution.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { LaunchStage, launchStageFromJSON, launchStageToJSON } from "../../../api/launch_stage.js";
import { Operation } from "../../../longrunning/operations.js";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { Condition } from "./condition.js";
import { TaskTemplate } from "./task_template.js";

export const protobufPackage = "google.cloud.run.v2";

/** Request message for obtaining a Execution by its full name. */
export interface GetExecutionRequest {
  /**
   * Required. The full name of the Execution.
   * Format:
   * `projects/{project}/locations/{location}/jobs/{job}/executions/{execution}`,
   * where `{project}` can be project id or number.
   */
  name: string;
}

/** Request message for retrieving a list of Executions. */
export interface ListExecutionsRequest {
  /**
   * Required. The Execution from which the Executions should be listed.
   * To list all Executions across Jobs, use "-" instead of Job name.
   * Format: `projects/{project}/locations/{location}/jobs/{job}`, where
   * `{project}` can be project id or number.
   */
  parent: string;
  /** Maximum number of Executions to return in this call. */
  pageSize: number;
  /**
   * A page token received from a previous call to ListExecutions.
   * All other parameters must match.
   */
  pageToken: string;
  /** If true, returns deleted (but unexpired) resources along with active ones. */
  showDeleted: boolean;
}

/** Response message containing a list of Executions. */
export interface ListExecutionsResponse {
  /** The resulting list of Executions. */
  executions: Execution[];
  /**
   * A token indicating there are more items than page_size. Use it in the next
   * ListExecutions request to continue.
   */
  nextPageToken: string;
}

/** Request message for deleting an Execution. */
export interface DeleteExecutionRequest {
  /**
   * Required. The name of the Execution to delete.
   * Format:
   * `projects/{project}/locations/{location}/jobs/{job}/executions/{execution}`,
   * where `{project}` can be project id or number.
   */
  name: string;
  /**
   * Indicates that the request should be validated without actually
   * deleting any resources.
   */
  validateOnly: boolean;
  /**
   * A system-generated fingerprint for this version of the resource.
   * This may be used to detect modification conflict during updates.
   */
  etag: string;
}

/** Request message for deleting an Execution. */
export interface CancelExecutionRequest {
  /**
   * Required. The name of the Execution to cancel.
   * Format:
   * `projects/{project}/locations/{location}/jobs/{job}/executions/{execution}`,
   * where `{project}` can be project id or number.
   */
  name: string;
  /**
   * Indicates that the request should be validated without actually
   * cancelling any resources.
   */
  validateOnly: boolean;
  /**
   * A system-generated fingerprint for this version of the resource.
   * This may be used to detect modification conflict during updates.
   */
  etag: string;
}

/**
 * Execution represents the configuration of a single execution. A execution an
 * immutable resource that references a container image which is run to
 * completion.
 */
export interface Execution {
  /** Output only. The unique name of this Execution. */
  name: string;
  /**
   * Output only. Server assigned unique identifier for the Execution. The value
   * is a UUID4 string and guaranteed to remain unchanged until the resource is
   * deleted.
   */
  uid: string;
  /**
   * Output only. A number that monotonically increases every time the user
   * modifies the desired state.
   */
  generation: Long;
  /**
   * Output only. Unstructured key value map that can be used to organize and
   * categorize objects. User-provided labels are shared with Google's billing
   * system, so they can be used to filter, or break down billing charges by
   * team, component, environment, state, etc. For more information, visit
   * https://cloud.google.com/resource-manager/docs/creating-managing-labels or
   * https://cloud.google.com/run/docs/configuring/labels
   */
  labels: { [key: string]: string };
  /**
   * Output only. Unstructured key value map that may
   * be set by external tools to store and arbitrary metadata.
   * They are not queryable and should be preserved
   * when modifying objects.
   */
  annotations: { [key: string]: string };
  /**
   * Output only. Represents time when the execution was acknowledged by the
   * execution controller. It is not guaranteed to be set in happens-before
   * order across separate operations.
   */
  createTime:
    | Date
    | undefined;
  /**
   * Output only. Represents time when the execution started to run.
   * It is not guaranteed to be set in happens-before order across separate
   * operations.
   */
  startTime:
    | Date
    | undefined;
  /**
   * Output only. Represents time when the execution was completed. It is not
   * guaranteed to be set in happens-before order across separate operations.
   */
  completionTime:
    | Date
    | undefined;
  /** Output only. The last-modified time. */
  updateTime:
    | Date
    | undefined;
  /**
   * Output only. For a deleted resource, the deletion time. It is only
   * populated as a response to a Delete request.
   */
  deleteTime:
    | Date
    | undefined;
  /**
   * Output only. For a deleted resource, the time after which it will be
   * permamently deleted. It is only populated as a response to a Delete
   * request.
   */
  expireTime:
    | Date
    | undefined;
  /**
   * The least stable launch stage needed to create this resource, as defined by
   * [Google Cloud Platform Launch
   * Stages](https://cloud.google.com/terms/launch-stages). Cloud Run supports
   * `ALPHA`, `BETA`, and `GA`.
   * <p>Note that this value might not be what was used
   * as input. For example, if ALPHA was provided as input in the parent
   * resource, but only BETA and GA-level features are were, this field will be
   * BETA.
   */
  launchStage: LaunchStage;
  /** Output only. The name of the parent Job. */
  job: string;
  /**
   * Output only. Specifies the maximum desired number of tasks the execution
   * should run at any given time. Must be <= task_count. The actual number of
   * tasks running in steady state will be less than this number when
   * ((.spec.task_count - .status.successful) < .spec.parallelism), i.e. when
   * the work left to do is less than max parallelism.
   */
  parallelism: number;
  /**
   * Output only. Specifies the desired number of tasks the execution should
   * run. Setting to 1 means that parallelism is limited to 1 and the success of
   * that task signals the success of the execution.
   */
  taskCount: number;
  /** Output only. The template used to create tasks for this execution. */
  template:
    | TaskTemplate
    | undefined;
  /**
   * Output only. Indicates whether the resource's reconciliation is still in
   * progress. See comments in `Job.reconciling` for additional information on
   * reconciliation process in Cloud Run.
   */
  reconciling: boolean;
  /**
   * Output only. The Condition of this Execution, containing its readiness
   * status, and detailed error information in case it did not reach the desired
   * state.
   */
  conditions: Condition[];
  /**
   * Output only. The generation of this Execution. See comments in
   * `reconciling` for additional information on reconciliation process in Cloud
   * Run.
   */
  observedGeneration: Long;
  /** Output only. The number of actively running tasks. */
  runningCount: number;
  /** Output only. The number of tasks which reached phase Succeeded. */
  succeededCount: number;
  /** Output only. The number of tasks which reached phase Failed. */
  failedCount: number;
  /** Output only. The number of tasks which reached phase Cancelled. */
  cancelledCount: number;
  /** Output only. The number of tasks which have retried at least once. */
  retriedCount: number;
  /**
   * Output only. URI where logs for this execution can be found in Cloud
   * Console.
   */
  logUri: string;
  /** Output only. Reserved for future use. */
  satisfiesPzs: boolean;
  /**
   * Output only. A system-generated fingerprint for this version of the
   * resource. May be used to detect modification conflict during updates.
   */
  etag: string;
}

export interface Execution_LabelsEntry {
  key: string;
  value: string;
}

export interface Execution_AnnotationsEntry {
  key: string;
  value: string;
}

function createBaseGetExecutionRequest(): GetExecutionRequest {
  return { name: "" };
}

export const GetExecutionRequest: MessageFns<GetExecutionRequest> = {
  encode(message: GetExecutionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetExecutionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetExecutionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetExecutionRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetExecutionRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetExecutionRequest>): GetExecutionRequest {
    return GetExecutionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetExecutionRequest>): GetExecutionRequest {
    const message = createBaseGetExecutionRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListExecutionsRequest(): ListExecutionsRequest {
  return { parent: "", pageSize: 0, pageToken: "", showDeleted: false };
}

export const ListExecutionsRequest: MessageFns<ListExecutionsRequest> = {
  encode(message: ListExecutionsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.showDeleted !== false) {
      writer.uint32(32).bool(message.showDeleted);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListExecutionsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListExecutionsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.showDeleted = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListExecutionsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      showDeleted: isSet(object.showDeleted) ? globalThis.Boolean(object.showDeleted) : false,
    };
  },

  toJSON(message: ListExecutionsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.showDeleted !== false) {
      obj.showDeleted = message.showDeleted;
    }
    return obj;
  },

  create(base?: DeepPartial<ListExecutionsRequest>): ListExecutionsRequest {
    return ListExecutionsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListExecutionsRequest>): ListExecutionsRequest {
    const message = createBaseListExecutionsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.showDeleted = object.showDeleted ?? false;
    return message;
  },
};

function createBaseListExecutionsResponse(): ListExecutionsResponse {
  return { executions: [], nextPageToken: "" };
}

export const ListExecutionsResponse: MessageFns<ListExecutionsResponse> = {
  encode(message: ListExecutionsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.executions) {
      Execution.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListExecutionsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListExecutionsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.executions.push(Execution.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListExecutionsResponse {
    return {
      executions: globalThis.Array.isArray(object?.executions)
        ? object.executions.map((e: any) => Execution.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListExecutionsResponse): unknown {
    const obj: any = {};
    if (message.executions?.length) {
      obj.executions = message.executions.map((e) => Execution.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListExecutionsResponse>): ListExecutionsResponse {
    return ListExecutionsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListExecutionsResponse>): ListExecutionsResponse {
    const message = createBaseListExecutionsResponse();
    message.executions = object.executions?.map((e) => Execution.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseDeleteExecutionRequest(): DeleteExecutionRequest {
  return { name: "", validateOnly: false, etag: "" };
}

export const DeleteExecutionRequest: MessageFns<DeleteExecutionRequest> = {
  encode(message: DeleteExecutionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.validateOnly !== false) {
      writer.uint32(16).bool(message.validateOnly);
    }
    if (message.etag !== "") {
      writer.uint32(26).string(message.etag);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteExecutionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteExecutionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.etag = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteExecutionRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
      etag: isSet(object.etag) ? globalThis.String(object.etag) : "",
    };
  },

  toJSON(message: DeleteExecutionRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    if (message.etag !== "") {
      obj.etag = message.etag;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteExecutionRequest>): DeleteExecutionRequest {
    return DeleteExecutionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteExecutionRequest>): DeleteExecutionRequest {
    const message = createBaseDeleteExecutionRequest();
    message.name = object.name ?? "";
    message.validateOnly = object.validateOnly ?? false;
    message.etag = object.etag ?? "";
    return message;
  },
};

function createBaseCancelExecutionRequest(): CancelExecutionRequest {
  return { name: "", validateOnly: false, etag: "" };
}

export const CancelExecutionRequest: MessageFns<CancelExecutionRequest> = {
  encode(message: CancelExecutionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.validateOnly !== false) {
      writer.uint32(16).bool(message.validateOnly);
    }
    if (message.etag !== "") {
      writer.uint32(26).string(message.etag);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CancelExecutionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCancelExecutionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.etag = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CancelExecutionRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
      etag: isSet(object.etag) ? globalThis.String(object.etag) : "",
    };
  },

  toJSON(message: CancelExecutionRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    if (message.etag !== "") {
      obj.etag = message.etag;
    }
    return obj;
  },

  create(base?: DeepPartial<CancelExecutionRequest>): CancelExecutionRequest {
    return CancelExecutionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CancelExecutionRequest>): CancelExecutionRequest {
    const message = createBaseCancelExecutionRequest();
    message.name = object.name ?? "";
    message.validateOnly = object.validateOnly ?? false;
    message.etag = object.etag ?? "";
    return message;
  },
};

function createBaseExecution(): Execution {
  return {
    name: "",
    uid: "",
    generation: Long.ZERO,
    labels: {},
    annotations: {},
    createTime: undefined,
    startTime: undefined,
    completionTime: undefined,
    updateTime: undefined,
    deleteTime: undefined,
    expireTime: undefined,
    launchStage: 0,
    job: "",
    parallelism: 0,
    taskCount: 0,
    template: undefined,
    reconciling: false,
    conditions: [],
    observedGeneration: Long.ZERO,
    runningCount: 0,
    succeededCount: 0,
    failedCount: 0,
    cancelledCount: 0,
    retriedCount: 0,
    logUri: "",
    satisfiesPzs: false,
    etag: "",
  };
}

export const Execution: MessageFns<Execution> = {
  encode(message: Execution, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.uid !== "") {
      writer.uint32(18).string(message.uid);
    }
    if (!message.generation.equals(Long.ZERO)) {
      writer.uint32(24).int64(message.generation.toString());
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      Execution_LabelsEntry.encode({ key: key as any, value }, writer.uint32(34).fork()).join();
    });
    Object.entries(message.annotations).forEach(([key, value]) => {
      Execution_AnnotationsEntry.encode({ key: key as any, value }, writer.uint32(42).fork()).join();
    });
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(50).fork()).join();
    }
    if (message.startTime !== undefined) {
      Timestamp.encode(toTimestamp(message.startTime), writer.uint32(178).fork()).join();
    }
    if (message.completionTime !== undefined) {
      Timestamp.encode(toTimestamp(message.completionTime), writer.uint32(58).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(66).fork()).join();
    }
    if (message.deleteTime !== undefined) {
      Timestamp.encode(toTimestamp(message.deleteTime), writer.uint32(74).fork()).join();
    }
    if (message.expireTime !== undefined) {
      Timestamp.encode(toTimestamp(message.expireTime), writer.uint32(82).fork()).join();
    }
    if (message.launchStage !== 0) {
      writer.uint32(88).int32(message.launchStage);
    }
    if (message.job !== "") {
      writer.uint32(98).string(message.job);
    }
    if (message.parallelism !== 0) {
      writer.uint32(104).int32(message.parallelism);
    }
    if (message.taskCount !== 0) {
      writer.uint32(112).int32(message.taskCount);
    }
    if (message.template !== undefined) {
      TaskTemplate.encode(message.template, writer.uint32(122).fork()).join();
    }
    if (message.reconciling !== false) {
      writer.uint32(128).bool(message.reconciling);
    }
    for (const v of message.conditions) {
      Condition.encode(v!, writer.uint32(138).fork()).join();
    }
    if (!message.observedGeneration.equals(Long.ZERO)) {
      writer.uint32(144).int64(message.observedGeneration.toString());
    }
    if (message.runningCount !== 0) {
      writer.uint32(152).int32(message.runningCount);
    }
    if (message.succeededCount !== 0) {
      writer.uint32(160).int32(message.succeededCount);
    }
    if (message.failedCount !== 0) {
      writer.uint32(168).int32(message.failedCount);
    }
    if (message.cancelledCount !== 0) {
      writer.uint32(192).int32(message.cancelledCount);
    }
    if (message.retriedCount !== 0) {
      writer.uint32(200).int32(message.retriedCount);
    }
    if (message.logUri !== "") {
      writer.uint32(210).string(message.logUri);
    }
    if (message.satisfiesPzs !== false) {
      writer.uint32(216).bool(message.satisfiesPzs);
    }
    if (message.etag !== "") {
      writer.uint32(794).string(message.etag);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Execution {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExecution();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.uid = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.generation = Long.fromString(reader.int64().toString());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          const entry4 = Execution_LabelsEntry.decode(reader, reader.uint32());
          if (entry4.value !== undefined) {
            message.labels[entry4.key] = entry4.value;
          }
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          const entry5 = Execution_AnnotationsEntry.decode(reader, reader.uint32());
          if (entry5.value !== undefined) {
            message.annotations[entry5.key] = entry5.value;
          }
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 22:
          if (tag !== 178) {
            break;
          }

          message.startTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.completionTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.deleteTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.expireTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 11:
          if (tag !== 88) {
            break;
          }

          message.launchStage = reader.int32() as any;
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.job = reader.string();
          continue;
        case 13:
          if (tag !== 104) {
            break;
          }

          message.parallelism = reader.int32();
          continue;
        case 14:
          if (tag !== 112) {
            break;
          }

          message.taskCount = reader.int32();
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.template = TaskTemplate.decode(reader, reader.uint32());
          continue;
        case 16:
          if (tag !== 128) {
            break;
          }

          message.reconciling = reader.bool();
          continue;
        case 17:
          if (tag !== 138) {
            break;
          }

          message.conditions.push(Condition.decode(reader, reader.uint32()));
          continue;
        case 18:
          if (tag !== 144) {
            break;
          }

          message.observedGeneration = Long.fromString(reader.int64().toString());
          continue;
        case 19:
          if (tag !== 152) {
            break;
          }

          message.runningCount = reader.int32();
          continue;
        case 20:
          if (tag !== 160) {
            break;
          }

          message.succeededCount = reader.int32();
          continue;
        case 21:
          if (tag !== 168) {
            break;
          }

          message.failedCount = reader.int32();
          continue;
        case 24:
          if (tag !== 192) {
            break;
          }

          message.cancelledCount = reader.int32();
          continue;
        case 25:
          if (tag !== 200) {
            break;
          }

          message.retriedCount = reader.int32();
          continue;
        case 26:
          if (tag !== 210) {
            break;
          }

          message.logUri = reader.string();
          continue;
        case 27:
          if (tag !== 216) {
            break;
          }

          message.satisfiesPzs = reader.bool();
          continue;
        case 99:
          if (tag !== 794) {
            break;
          }

          message.etag = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Execution {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      uid: isSet(object.uid) ? globalThis.String(object.uid) : "",
      generation: isSet(object.generation) ? Long.fromValue(object.generation) : Long.ZERO,
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      annotations: isObject(object.annotations)
        ? Object.entries(object.annotations).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      startTime: isSet(object.startTime) ? fromJsonTimestamp(object.startTime) : undefined,
      completionTime: isSet(object.completionTime) ? fromJsonTimestamp(object.completionTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      deleteTime: isSet(object.deleteTime) ? fromJsonTimestamp(object.deleteTime) : undefined,
      expireTime: isSet(object.expireTime) ? fromJsonTimestamp(object.expireTime) : undefined,
      launchStage: isSet(object.launchStage) ? launchStageFromJSON(object.launchStage) : 0,
      job: isSet(object.job) ? globalThis.String(object.job) : "",
      parallelism: isSet(object.parallelism) ? globalThis.Number(object.parallelism) : 0,
      taskCount: isSet(object.taskCount) ? globalThis.Number(object.taskCount) : 0,
      template: isSet(object.template) ? TaskTemplate.fromJSON(object.template) : undefined,
      reconciling: isSet(object.reconciling) ? globalThis.Boolean(object.reconciling) : false,
      conditions: globalThis.Array.isArray(object?.conditions)
        ? object.conditions.map((e: any) => Condition.fromJSON(e))
        : [],
      observedGeneration: isSet(object.observedGeneration) ? Long.fromValue(object.observedGeneration) : Long.ZERO,
      runningCount: isSet(object.runningCount) ? globalThis.Number(object.runningCount) : 0,
      succeededCount: isSet(object.succeededCount) ? globalThis.Number(object.succeededCount) : 0,
      failedCount: isSet(object.failedCount) ? globalThis.Number(object.failedCount) : 0,
      cancelledCount: isSet(object.cancelledCount) ? globalThis.Number(object.cancelledCount) : 0,
      retriedCount: isSet(object.retriedCount) ? globalThis.Number(object.retriedCount) : 0,
      logUri: isSet(object.logUri) ? globalThis.String(object.logUri) : "",
      satisfiesPzs: isSet(object.satisfiesPzs) ? globalThis.Boolean(object.satisfiesPzs) : false,
      etag: isSet(object.etag) ? globalThis.String(object.etag) : "",
    };
  },

  toJSON(message: Execution): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.uid !== "") {
      obj.uid = message.uid;
    }
    if (!message.generation.equals(Long.ZERO)) {
      obj.generation = (message.generation || Long.ZERO).toString();
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    if (message.annotations) {
      const entries = Object.entries(message.annotations);
      if (entries.length > 0) {
        obj.annotations = {};
        entries.forEach(([k, v]) => {
          obj.annotations[k] = v;
        });
      }
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.startTime !== undefined) {
      obj.startTime = message.startTime.toISOString();
    }
    if (message.completionTime !== undefined) {
      obj.completionTime = message.completionTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.deleteTime !== undefined) {
      obj.deleteTime = message.deleteTime.toISOString();
    }
    if (message.expireTime !== undefined) {
      obj.expireTime = message.expireTime.toISOString();
    }
    if (message.launchStage !== 0) {
      obj.launchStage = launchStageToJSON(message.launchStage);
    }
    if (message.job !== "") {
      obj.job = message.job;
    }
    if (message.parallelism !== 0) {
      obj.parallelism = Math.round(message.parallelism);
    }
    if (message.taskCount !== 0) {
      obj.taskCount = Math.round(message.taskCount);
    }
    if (message.template !== undefined) {
      obj.template = TaskTemplate.toJSON(message.template);
    }
    if (message.reconciling !== false) {
      obj.reconciling = message.reconciling;
    }
    if (message.conditions?.length) {
      obj.conditions = message.conditions.map((e) => Condition.toJSON(e));
    }
    if (!message.observedGeneration.equals(Long.ZERO)) {
      obj.observedGeneration = (message.observedGeneration || Long.ZERO).toString();
    }
    if (message.runningCount !== 0) {
      obj.runningCount = Math.round(message.runningCount);
    }
    if (message.succeededCount !== 0) {
      obj.succeededCount = Math.round(message.succeededCount);
    }
    if (message.failedCount !== 0) {
      obj.failedCount = Math.round(message.failedCount);
    }
    if (message.cancelledCount !== 0) {
      obj.cancelledCount = Math.round(message.cancelledCount);
    }
    if (message.retriedCount !== 0) {
      obj.retriedCount = Math.round(message.retriedCount);
    }
    if (message.logUri !== "") {
      obj.logUri = message.logUri;
    }
    if (message.satisfiesPzs !== false) {
      obj.satisfiesPzs = message.satisfiesPzs;
    }
    if (message.etag !== "") {
      obj.etag = message.etag;
    }
    return obj;
  },

  create(base?: DeepPartial<Execution>): Execution {
    return Execution.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Execution>): Execution {
    const message = createBaseExecution();
    message.name = object.name ?? "";
    message.uid = object.uid ?? "";
    message.generation = (object.generation !== undefined && object.generation !== null)
      ? Long.fromValue(object.generation)
      : Long.ZERO;
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.annotations = Object.entries(object.annotations ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    message.createTime = object.createTime ?? undefined;
    message.startTime = object.startTime ?? undefined;
    message.completionTime = object.completionTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.deleteTime = object.deleteTime ?? undefined;
    message.expireTime = object.expireTime ?? undefined;
    message.launchStage = object.launchStage ?? 0;
    message.job = object.job ?? "";
    message.parallelism = object.parallelism ?? 0;
    message.taskCount = object.taskCount ?? 0;
    message.template = (object.template !== undefined && object.template !== null)
      ? TaskTemplate.fromPartial(object.template)
      : undefined;
    message.reconciling = object.reconciling ?? false;
    message.conditions = object.conditions?.map((e) => Condition.fromPartial(e)) || [];
    message.observedGeneration = (object.observedGeneration !== undefined && object.observedGeneration !== null)
      ? Long.fromValue(object.observedGeneration)
      : Long.ZERO;
    message.runningCount = object.runningCount ?? 0;
    message.succeededCount = object.succeededCount ?? 0;
    message.failedCount = object.failedCount ?? 0;
    message.cancelledCount = object.cancelledCount ?? 0;
    message.retriedCount = object.retriedCount ?? 0;
    message.logUri = object.logUri ?? "";
    message.satisfiesPzs = object.satisfiesPzs ?? false;
    message.etag = object.etag ?? "";
    return message;
  },
};

function createBaseExecution_LabelsEntry(): Execution_LabelsEntry {
  return { key: "", value: "" };
}

export const Execution_LabelsEntry: MessageFns<Execution_LabelsEntry> = {
  encode(message: Execution_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Execution_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExecution_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Execution_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: Execution_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<Execution_LabelsEntry>): Execution_LabelsEntry {
    return Execution_LabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Execution_LabelsEntry>): Execution_LabelsEntry {
    const message = createBaseExecution_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseExecution_AnnotationsEntry(): Execution_AnnotationsEntry {
  return { key: "", value: "" };
}

export const Execution_AnnotationsEntry: MessageFns<Execution_AnnotationsEntry> = {
  encode(message: Execution_AnnotationsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Execution_AnnotationsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExecution_AnnotationsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Execution_AnnotationsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: Execution_AnnotationsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<Execution_AnnotationsEntry>): Execution_AnnotationsEntry {
    return Execution_AnnotationsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Execution_AnnotationsEntry>): Execution_AnnotationsEntry {
    const message = createBaseExecution_AnnotationsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

/** Cloud Run Execution Control Plane API. */
export type ExecutionsDefinition = typeof ExecutionsDefinition;
export const ExecutionsDefinition = {
  name: "Executions",
  fullName: "google.cloud.run.v2.Executions",
  methods: {
    /** Gets information about an Execution. */
    getExecution: {
      name: "GetExecution",
      requestType: GetExecutionRequest,
      requestStream: false,
      responseType: Execution,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              55,
              18,
              53,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              106,
              111,
              98,
              115,
              47,
              42,
              47,
              101,
              120,
              101,
              99,
              117,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Lists Executions from a Job. Results are sorted by creation time,
     * descending.
     */
    listExecutions: {
      name: "ListExecutions",
      requestType: ListExecutionsRequest,
      requestStream: false,
      responseType: ListExecutionsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              55,
              18,
              53,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              106,
              111,
              98,
              115,
              47,
              42,
              125,
              47,
              101,
              120,
              101,
              99,
              117,
              116,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /** Deletes an Execution. */
    deleteExecution: {
      name: "DeleteExecution",
      requestType: DeleteExecutionRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              22,
              10,
              9,
              69,
              120,
              101,
              99,
              117,
              116,
              105,
              111,
              110,
              18,
              9,
              69,
              120,
              101,
              99,
              117,
              116,
              105,
              111,
              110,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              55,
              42,
              53,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              106,
              111,
              98,
              115,
              47,
              42,
              47,
              101,
              120,
              101,
              99,
              117,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Cancels an Execution. */
    cancelExecution: {
      name: "CancelExecution",
      requestType: CancelExecutionRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              22,
              10,
              9,
              69,
              120,
              101,
              99,
              117,
              116,
              105,
              111,
              110,
              18,
              9,
              69,
              120,
              101,
              99,
              117,
              116,
              105,
              111,
              110,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              65,
              58,
              1,
              42,
              34,
              60,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              106,
              111,
              98,
              115,
              47,
              42,
              47,
              101,
              120,
              101,
              99,
              117,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              58,
              99,
              97,
              110,
              99,
              101,
              108,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface ExecutionsServiceImplementation<CallContextExt = {}> {
  /** Gets information about an Execution. */
  getExecution(request: GetExecutionRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Execution>>;
  /**
   * Lists Executions from a Job. Results are sorted by creation time,
   * descending.
   */
  listExecutions(
    request: ListExecutionsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListExecutionsResponse>>;
  /** Deletes an Execution. */
  deleteExecution(
    request: DeleteExecutionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Cancels an Execution. */
  cancelExecution(
    request: CancelExecutionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
}

export interface ExecutionsClient<CallOptionsExt = {}> {
  /** Gets information about an Execution. */
  getExecution(request: DeepPartial<GetExecutionRequest>, options?: CallOptions & CallOptionsExt): Promise<Execution>;
  /**
   * Lists Executions from a Job. Results are sorted by creation time,
   * descending.
   */
  listExecutions(
    request: DeepPartial<ListExecutionsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListExecutionsResponse>;
  /** Deletes an Execution. */
  deleteExecution(
    request: DeepPartial<DeleteExecutionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Cancels an Execution. */
  cancelExecution(
    request: DeepPartial<CancelExecutionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
