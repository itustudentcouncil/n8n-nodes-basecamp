// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/automl/v1beta1/text_sentiment.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { ClassificationEvaluationMetrics_ConfusionMatrix } from "./classification.js";

export const protobufPackage = "google.cloud.automl.v1beta1";

/** Contains annotation details specific to text sentiment. */
export interface TextSentimentAnnotation {
  /**
   * Output only. The sentiment with the semantic, as given to the
   * [AutoMl.ImportData][google.cloud.automl.v1beta1.AutoMl.ImportData] when populating the dataset from which the model used
   * for the prediction had been trained.
   * The sentiment values are between 0 and
   * Dataset.text_sentiment_dataset_metadata.sentiment_max (inclusive),
   * with higher value meaning more positive sentiment. They are completely
   * relative, i.e. 0 means least positive sentiment and sentiment_max means
   * the most positive from the sentiments present in the train data. Therefore
   *  e.g. if train data had only negative sentiment, then sentiment_max, would
   * be still negative (although least negative).
   * The sentiment shouldn't be confused with "score" or "magnitude"
   * from the previous Natural Language Sentiment Analysis API.
   */
  sentiment: number;
}

/** Model evaluation metrics for text sentiment problems. */
export interface TextSentimentEvaluationMetrics {
  /** Output only. Precision. */
  precision: number;
  /** Output only. Recall. */
  recall: number;
  /** Output only. The harmonic mean of recall and precision. */
  f1Score: number;
  /**
   * Output only. Mean absolute error. Only set for the overall model
   * evaluation, not for evaluation of a single annotation spec.
   */
  meanAbsoluteError: number;
  /**
   * Output only. Mean squared error. Only set for the overall model
   * evaluation, not for evaluation of a single annotation spec.
   */
  meanSquaredError: number;
  /**
   * Output only. Linear weighted kappa. Only set for the overall model
   * evaluation, not for evaluation of a single annotation spec.
   */
  linearKappa: number;
  /**
   * Output only. Quadratic weighted kappa. Only set for the overall model
   * evaluation, not for evaluation of a single annotation spec.
   */
  quadraticKappa: number;
  /**
   * Output only. Confusion matrix of the evaluation.
   * Only set for the overall model evaluation, not for evaluation of a single
   * annotation spec.
   */
  confusionMatrix:
    | ClassificationEvaluationMetrics_ConfusionMatrix
    | undefined;
  /**
   * Output only. The annotation spec ids used for this evaluation.
   * Deprecated .
   *
   * @deprecated
   */
  annotationSpecId: string[];
}

function createBaseTextSentimentAnnotation(): TextSentimentAnnotation {
  return { sentiment: 0 };
}

export const TextSentimentAnnotation: MessageFns<TextSentimentAnnotation> = {
  encode(message: TextSentimentAnnotation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sentiment !== 0) {
      writer.uint32(8).int32(message.sentiment);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TextSentimentAnnotation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTextSentimentAnnotation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.sentiment = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TextSentimentAnnotation {
    return { sentiment: isSet(object.sentiment) ? globalThis.Number(object.sentiment) : 0 };
  },

  toJSON(message: TextSentimentAnnotation): unknown {
    const obj: any = {};
    if (message.sentiment !== 0) {
      obj.sentiment = Math.round(message.sentiment);
    }
    return obj;
  },

  create(base?: DeepPartial<TextSentimentAnnotation>): TextSentimentAnnotation {
    return TextSentimentAnnotation.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TextSentimentAnnotation>): TextSentimentAnnotation {
    const message = createBaseTextSentimentAnnotation();
    message.sentiment = object.sentiment ?? 0;
    return message;
  },
};

function createBaseTextSentimentEvaluationMetrics(): TextSentimentEvaluationMetrics {
  return {
    precision: 0,
    recall: 0,
    f1Score: 0,
    meanAbsoluteError: 0,
    meanSquaredError: 0,
    linearKappa: 0,
    quadraticKappa: 0,
    confusionMatrix: undefined,
    annotationSpecId: [],
  };
}

export const TextSentimentEvaluationMetrics: MessageFns<TextSentimentEvaluationMetrics> = {
  encode(message: TextSentimentEvaluationMetrics, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.precision !== 0) {
      writer.uint32(13).float(message.precision);
    }
    if (message.recall !== 0) {
      writer.uint32(21).float(message.recall);
    }
    if (message.f1Score !== 0) {
      writer.uint32(29).float(message.f1Score);
    }
    if (message.meanAbsoluteError !== 0) {
      writer.uint32(37).float(message.meanAbsoluteError);
    }
    if (message.meanSquaredError !== 0) {
      writer.uint32(45).float(message.meanSquaredError);
    }
    if (message.linearKappa !== 0) {
      writer.uint32(53).float(message.linearKappa);
    }
    if (message.quadraticKappa !== 0) {
      writer.uint32(61).float(message.quadraticKappa);
    }
    if (message.confusionMatrix !== undefined) {
      ClassificationEvaluationMetrics_ConfusionMatrix.encode(message.confusionMatrix, writer.uint32(66).fork()).join();
    }
    for (const v of message.annotationSpecId) {
      writer.uint32(74).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TextSentimentEvaluationMetrics {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTextSentimentEvaluationMetrics();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 13) {
            break;
          }

          message.precision = reader.float();
          continue;
        case 2:
          if (tag !== 21) {
            break;
          }

          message.recall = reader.float();
          continue;
        case 3:
          if (tag !== 29) {
            break;
          }

          message.f1Score = reader.float();
          continue;
        case 4:
          if (tag !== 37) {
            break;
          }

          message.meanAbsoluteError = reader.float();
          continue;
        case 5:
          if (tag !== 45) {
            break;
          }

          message.meanSquaredError = reader.float();
          continue;
        case 6:
          if (tag !== 53) {
            break;
          }

          message.linearKappa = reader.float();
          continue;
        case 7:
          if (tag !== 61) {
            break;
          }

          message.quadraticKappa = reader.float();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.confusionMatrix = ClassificationEvaluationMetrics_ConfusionMatrix.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.annotationSpecId.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TextSentimentEvaluationMetrics {
    return {
      precision: isSet(object.precision) ? globalThis.Number(object.precision) : 0,
      recall: isSet(object.recall) ? globalThis.Number(object.recall) : 0,
      f1Score: isSet(object.f1Score) ? globalThis.Number(object.f1Score) : 0,
      meanAbsoluteError: isSet(object.meanAbsoluteError) ? globalThis.Number(object.meanAbsoluteError) : 0,
      meanSquaredError: isSet(object.meanSquaredError) ? globalThis.Number(object.meanSquaredError) : 0,
      linearKappa: isSet(object.linearKappa) ? globalThis.Number(object.linearKappa) : 0,
      quadraticKappa: isSet(object.quadraticKappa) ? globalThis.Number(object.quadraticKappa) : 0,
      confusionMatrix: isSet(object.confusionMatrix)
        ? ClassificationEvaluationMetrics_ConfusionMatrix.fromJSON(object.confusionMatrix)
        : undefined,
      annotationSpecId: globalThis.Array.isArray(object?.annotationSpecId)
        ? object.annotationSpecId.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: TextSentimentEvaluationMetrics): unknown {
    const obj: any = {};
    if (message.precision !== 0) {
      obj.precision = message.precision;
    }
    if (message.recall !== 0) {
      obj.recall = message.recall;
    }
    if (message.f1Score !== 0) {
      obj.f1Score = message.f1Score;
    }
    if (message.meanAbsoluteError !== 0) {
      obj.meanAbsoluteError = message.meanAbsoluteError;
    }
    if (message.meanSquaredError !== 0) {
      obj.meanSquaredError = message.meanSquaredError;
    }
    if (message.linearKappa !== 0) {
      obj.linearKappa = message.linearKappa;
    }
    if (message.quadraticKappa !== 0) {
      obj.quadraticKappa = message.quadraticKappa;
    }
    if (message.confusionMatrix !== undefined) {
      obj.confusionMatrix = ClassificationEvaluationMetrics_ConfusionMatrix.toJSON(message.confusionMatrix);
    }
    if (message.annotationSpecId?.length) {
      obj.annotationSpecId = message.annotationSpecId;
    }
    return obj;
  },

  create(base?: DeepPartial<TextSentimentEvaluationMetrics>): TextSentimentEvaluationMetrics {
    return TextSentimentEvaluationMetrics.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TextSentimentEvaluationMetrics>): TextSentimentEvaluationMetrics {
    const message = createBaseTextSentimentEvaluationMetrics();
    message.precision = object.precision ?? 0;
    message.recall = object.recall ?? 0;
    message.f1Score = object.f1Score ?? 0;
    message.meanAbsoluteError = object.meanAbsoluteError ?? 0;
    message.meanSquaredError = object.meanSquaredError ?? 0;
    message.linearKappa = object.linearKappa ?? 0;
    message.quadraticKappa = object.quadraticKappa ?? 0;
    message.confusionMatrix = (object.confusionMatrix !== undefined && object.confusionMatrix !== null)
      ? ClassificationEvaluationMetrics_ConfusionMatrix.fromPartial(object.confusionMatrix)
      : undefined;
    message.annotationSpecId = object.annotationSpecId?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
