// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/automl/v1/operations.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { Status } from "../../../rpc/status.js";
import { BatchPredictInputConfig } from "./io.js";

export const protobufPackage = "google.cloud.automl.v1";

/** Metadata used across all long running operations returned by AutoML API. */
export interface OperationMetadata {
  /** Details of a Delete operation. */
  deleteDetails?:
    | DeleteOperationMetadata
    | undefined;
  /** Details of a DeployModel operation. */
  deployModelDetails?:
    | DeployModelOperationMetadata
    | undefined;
  /** Details of an UndeployModel operation. */
  undeployModelDetails?:
    | UndeployModelOperationMetadata
    | undefined;
  /** Details of CreateModel operation. */
  createModelDetails?:
    | CreateModelOperationMetadata
    | undefined;
  /** Details of CreateDataset operation. */
  createDatasetDetails?:
    | CreateDatasetOperationMetadata
    | undefined;
  /** Details of ImportData operation. */
  importDataDetails?:
    | ImportDataOperationMetadata
    | undefined;
  /** Details of BatchPredict operation. */
  batchPredictDetails?:
    | BatchPredictOperationMetadata
    | undefined;
  /** Details of ExportData operation. */
  exportDataDetails?:
    | ExportDataOperationMetadata
    | undefined;
  /** Details of ExportModel operation. */
  exportModelDetails?:
    | ExportModelOperationMetadata
    | undefined;
  /**
   * Output only. Progress of operation. Range: [0, 100].
   * Not used currently.
   */
  progressPercent: number;
  /**
   * Output only. Partial failures encountered.
   * E.g. single files that couldn't be read.
   * This field should never exceed 20 entries.
   * Status details field will contain standard GCP error details.
   */
  partialFailures: Status[];
  /** Output only. Time when the operation was created. */
  createTime:
    | Date
    | undefined;
  /** Output only. Time when the operation was updated for the last time. */
  updateTime: Date | undefined;
}

/** Details of operations that perform deletes of any entities. */
export interface DeleteOperationMetadata {
}

/** Details of DeployModel operation. */
export interface DeployModelOperationMetadata {
}

/** Details of UndeployModel operation. */
export interface UndeployModelOperationMetadata {
}

/** Details of CreateDataset operation. */
export interface CreateDatasetOperationMetadata {
}

/** Details of CreateModel operation. */
export interface CreateModelOperationMetadata {
}

/** Details of ImportData operation. */
export interface ImportDataOperationMetadata {
}

/** Details of ExportData operation. */
export interface ExportDataOperationMetadata {
  /** Output only. Information further describing this export data's output. */
  outputInfo: ExportDataOperationMetadata_ExportDataOutputInfo | undefined;
}

/**
 * Further describes this export data's output.
 * Supplements
 * [OutputConfig][google.cloud.automl.v1.OutputConfig].
 */
export interface ExportDataOperationMetadata_ExportDataOutputInfo {
  /**
   * The full path of the Google Cloud Storage directory created, into which
   * the exported data is written.
   */
  gcsOutputDirectory?: string | undefined;
}

/** Details of BatchPredict operation. */
export interface BatchPredictOperationMetadata {
  /**
   * Output only. The input config that was given upon starting this
   * batch predict operation.
   */
  inputConfig:
    | BatchPredictInputConfig
    | undefined;
  /** Output only. Information further describing this batch predict's output. */
  outputInfo: BatchPredictOperationMetadata_BatchPredictOutputInfo | undefined;
}

/**
 * Further describes this batch predict's output.
 * Supplements
 * [BatchPredictOutputConfig][google.cloud.automl.v1.BatchPredictOutputConfig].
 */
export interface BatchPredictOperationMetadata_BatchPredictOutputInfo {
  /**
   * The full path of the Google Cloud Storage directory created, into which
   * the prediction output is written.
   */
  gcsOutputDirectory?: string | undefined;
}

/** Details of ExportModel operation. */
export interface ExportModelOperationMetadata {
  /**
   * Output only. Information further describing the output of this model
   * export.
   */
  outputInfo: ExportModelOperationMetadata_ExportModelOutputInfo | undefined;
}

/**
 * Further describes the output of model export.
 * Supplements
 * [ModelExportOutputConfig][google.cloud.automl.v1.ModelExportOutputConfig].
 */
export interface ExportModelOperationMetadata_ExportModelOutputInfo {
  /**
   * The full path of the Google Cloud Storage directory created, into which
   * the model will be exported.
   */
  gcsOutputDirectory: string;
}

function createBaseOperationMetadata(): OperationMetadata {
  return {
    deleteDetails: undefined,
    deployModelDetails: undefined,
    undeployModelDetails: undefined,
    createModelDetails: undefined,
    createDatasetDetails: undefined,
    importDataDetails: undefined,
    batchPredictDetails: undefined,
    exportDataDetails: undefined,
    exportModelDetails: undefined,
    progressPercent: 0,
    partialFailures: [],
    createTime: undefined,
    updateTime: undefined,
  };
}

export const OperationMetadata: MessageFns<OperationMetadata> = {
  encode(message: OperationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.deleteDetails !== undefined) {
      DeleteOperationMetadata.encode(message.deleteDetails, writer.uint32(66).fork()).join();
    }
    if (message.deployModelDetails !== undefined) {
      DeployModelOperationMetadata.encode(message.deployModelDetails, writer.uint32(194).fork()).join();
    }
    if (message.undeployModelDetails !== undefined) {
      UndeployModelOperationMetadata.encode(message.undeployModelDetails, writer.uint32(202).fork()).join();
    }
    if (message.createModelDetails !== undefined) {
      CreateModelOperationMetadata.encode(message.createModelDetails, writer.uint32(82).fork()).join();
    }
    if (message.createDatasetDetails !== undefined) {
      CreateDatasetOperationMetadata.encode(message.createDatasetDetails, writer.uint32(242).fork()).join();
    }
    if (message.importDataDetails !== undefined) {
      ImportDataOperationMetadata.encode(message.importDataDetails, writer.uint32(122).fork()).join();
    }
    if (message.batchPredictDetails !== undefined) {
      BatchPredictOperationMetadata.encode(message.batchPredictDetails, writer.uint32(130).fork()).join();
    }
    if (message.exportDataDetails !== undefined) {
      ExportDataOperationMetadata.encode(message.exportDataDetails, writer.uint32(170).fork()).join();
    }
    if (message.exportModelDetails !== undefined) {
      ExportModelOperationMetadata.encode(message.exportModelDetails, writer.uint32(178).fork()).join();
    }
    if (message.progressPercent !== 0) {
      writer.uint32(104).int32(message.progressPercent);
    }
    for (const v of message.partialFailures) {
      Status.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(26).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OperationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOperationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 8:
          if (tag !== 66) {
            break;
          }

          message.deleteDetails = DeleteOperationMetadata.decode(reader, reader.uint32());
          continue;
        case 24:
          if (tag !== 194) {
            break;
          }

          message.deployModelDetails = DeployModelOperationMetadata.decode(reader, reader.uint32());
          continue;
        case 25:
          if (tag !== 202) {
            break;
          }

          message.undeployModelDetails = UndeployModelOperationMetadata.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.createModelDetails = CreateModelOperationMetadata.decode(reader, reader.uint32());
          continue;
        case 30:
          if (tag !== 242) {
            break;
          }

          message.createDatasetDetails = CreateDatasetOperationMetadata.decode(reader, reader.uint32());
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.importDataDetails = ImportDataOperationMetadata.decode(reader, reader.uint32());
          continue;
        case 16:
          if (tag !== 130) {
            break;
          }

          message.batchPredictDetails = BatchPredictOperationMetadata.decode(reader, reader.uint32());
          continue;
        case 21:
          if (tag !== 170) {
            break;
          }

          message.exportDataDetails = ExportDataOperationMetadata.decode(reader, reader.uint32());
          continue;
        case 22:
          if (tag !== 178) {
            break;
          }

          message.exportModelDetails = ExportModelOperationMetadata.decode(reader, reader.uint32());
          continue;
        case 13:
          if (tag !== 104) {
            break;
          }

          message.progressPercent = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.partialFailures.push(Status.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OperationMetadata {
    return {
      deleteDetails: isSet(object.deleteDetails) ? DeleteOperationMetadata.fromJSON(object.deleteDetails) : undefined,
      deployModelDetails: isSet(object.deployModelDetails)
        ? DeployModelOperationMetadata.fromJSON(object.deployModelDetails)
        : undefined,
      undeployModelDetails: isSet(object.undeployModelDetails)
        ? UndeployModelOperationMetadata.fromJSON(object.undeployModelDetails)
        : undefined,
      createModelDetails: isSet(object.createModelDetails)
        ? CreateModelOperationMetadata.fromJSON(object.createModelDetails)
        : undefined,
      createDatasetDetails: isSet(object.createDatasetDetails)
        ? CreateDatasetOperationMetadata.fromJSON(object.createDatasetDetails)
        : undefined,
      importDataDetails: isSet(object.importDataDetails)
        ? ImportDataOperationMetadata.fromJSON(object.importDataDetails)
        : undefined,
      batchPredictDetails: isSet(object.batchPredictDetails)
        ? BatchPredictOperationMetadata.fromJSON(object.batchPredictDetails)
        : undefined,
      exportDataDetails: isSet(object.exportDataDetails)
        ? ExportDataOperationMetadata.fromJSON(object.exportDataDetails)
        : undefined,
      exportModelDetails: isSet(object.exportModelDetails)
        ? ExportModelOperationMetadata.fromJSON(object.exportModelDetails)
        : undefined,
      progressPercent: isSet(object.progressPercent) ? globalThis.Number(object.progressPercent) : 0,
      partialFailures: globalThis.Array.isArray(object?.partialFailures)
        ? object.partialFailures.map((e: any) => Status.fromJSON(e))
        : [],
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
    };
  },

  toJSON(message: OperationMetadata): unknown {
    const obj: any = {};
    if (message.deleteDetails !== undefined) {
      obj.deleteDetails = DeleteOperationMetadata.toJSON(message.deleteDetails);
    }
    if (message.deployModelDetails !== undefined) {
      obj.deployModelDetails = DeployModelOperationMetadata.toJSON(message.deployModelDetails);
    }
    if (message.undeployModelDetails !== undefined) {
      obj.undeployModelDetails = UndeployModelOperationMetadata.toJSON(message.undeployModelDetails);
    }
    if (message.createModelDetails !== undefined) {
      obj.createModelDetails = CreateModelOperationMetadata.toJSON(message.createModelDetails);
    }
    if (message.createDatasetDetails !== undefined) {
      obj.createDatasetDetails = CreateDatasetOperationMetadata.toJSON(message.createDatasetDetails);
    }
    if (message.importDataDetails !== undefined) {
      obj.importDataDetails = ImportDataOperationMetadata.toJSON(message.importDataDetails);
    }
    if (message.batchPredictDetails !== undefined) {
      obj.batchPredictDetails = BatchPredictOperationMetadata.toJSON(message.batchPredictDetails);
    }
    if (message.exportDataDetails !== undefined) {
      obj.exportDataDetails = ExportDataOperationMetadata.toJSON(message.exportDataDetails);
    }
    if (message.exportModelDetails !== undefined) {
      obj.exportModelDetails = ExportModelOperationMetadata.toJSON(message.exportModelDetails);
    }
    if (message.progressPercent !== 0) {
      obj.progressPercent = Math.round(message.progressPercent);
    }
    if (message.partialFailures?.length) {
      obj.partialFailures = message.partialFailures.map((e) => Status.toJSON(e));
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<OperationMetadata>): OperationMetadata {
    return OperationMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<OperationMetadata>): OperationMetadata {
    const message = createBaseOperationMetadata();
    message.deleteDetails = (object.deleteDetails !== undefined && object.deleteDetails !== null)
      ? DeleteOperationMetadata.fromPartial(object.deleteDetails)
      : undefined;
    message.deployModelDetails = (object.deployModelDetails !== undefined && object.deployModelDetails !== null)
      ? DeployModelOperationMetadata.fromPartial(object.deployModelDetails)
      : undefined;
    message.undeployModelDetails = (object.undeployModelDetails !== undefined && object.undeployModelDetails !== null)
      ? UndeployModelOperationMetadata.fromPartial(object.undeployModelDetails)
      : undefined;
    message.createModelDetails = (object.createModelDetails !== undefined && object.createModelDetails !== null)
      ? CreateModelOperationMetadata.fromPartial(object.createModelDetails)
      : undefined;
    message.createDatasetDetails = (object.createDatasetDetails !== undefined && object.createDatasetDetails !== null)
      ? CreateDatasetOperationMetadata.fromPartial(object.createDatasetDetails)
      : undefined;
    message.importDataDetails = (object.importDataDetails !== undefined && object.importDataDetails !== null)
      ? ImportDataOperationMetadata.fromPartial(object.importDataDetails)
      : undefined;
    message.batchPredictDetails = (object.batchPredictDetails !== undefined && object.batchPredictDetails !== null)
      ? BatchPredictOperationMetadata.fromPartial(object.batchPredictDetails)
      : undefined;
    message.exportDataDetails = (object.exportDataDetails !== undefined && object.exportDataDetails !== null)
      ? ExportDataOperationMetadata.fromPartial(object.exportDataDetails)
      : undefined;
    message.exportModelDetails = (object.exportModelDetails !== undefined && object.exportModelDetails !== null)
      ? ExportModelOperationMetadata.fromPartial(object.exportModelDetails)
      : undefined;
    message.progressPercent = object.progressPercent ?? 0;
    message.partialFailures = object.partialFailures?.map((e) => Status.fromPartial(e)) || [];
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    return message;
  },
};

function createBaseDeleteOperationMetadata(): DeleteOperationMetadata {
  return {};
}

export const DeleteOperationMetadata: MessageFns<DeleteOperationMetadata> = {
  encode(_: DeleteOperationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteOperationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteOperationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): DeleteOperationMetadata {
    return {};
  },

  toJSON(_: DeleteOperationMetadata): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<DeleteOperationMetadata>): DeleteOperationMetadata {
    return DeleteOperationMetadata.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<DeleteOperationMetadata>): DeleteOperationMetadata {
    const message = createBaseDeleteOperationMetadata();
    return message;
  },
};

function createBaseDeployModelOperationMetadata(): DeployModelOperationMetadata {
  return {};
}

export const DeployModelOperationMetadata: MessageFns<DeployModelOperationMetadata> = {
  encode(_: DeployModelOperationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeployModelOperationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeployModelOperationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): DeployModelOperationMetadata {
    return {};
  },

  toJSON(_: DeployModelOperationMetadata): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<DeployModelOperationMetadata>): DeployModelOperationMetadata {
    return DeployModelOperationMetadata.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<DeployModelOperationMetadata>): DeployModelOperationMetadata {
    const message = createBaseDeployModelOperationMetadata();
    return message;
  },
};

function createBaseUndeployModelOperationMetadata(): UndeployModelOperationMetadata {
  return {};
}

export const UndeployModelOperationMetadata: MessageFns<UndeployModelOperationMetadata> = {
  encode(_: UndeployModelOperationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UndeployModelOperationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUndeployModelOperationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): UndeployModelOperationMetadata {
    return {};
  },

  toJSON(_: UndeployModelOperationMetadata): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<UndeployModelOperationMetadata>): UndeployModelOperationMetadata {
    return UndeployModelOperationMetadata.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<UndeployModelOperationMetadata>): UndeployModelOperationMetadata {
    const message = createBaseUndeployModelOperationMetadata();
    return message;
  },
};

function createBaseCreateDatasetOperationMetadata(): CreateDatasetOperationMetadata {
  return {};
}

export const CreateDatasetOperationMetadata: MessageFns<CreateDatasetOperationMetadata> = {
  encode(_: CreateDatasetOperationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateDatasetOperationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateDatasetOperationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): CreateDatasetOperationMetadata {
    return {};
  },

  toJSON(_: CreateDatasetOperationMetadata): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<CreateDatasetOperationMetadata>): CreateDatasetOperationMetadata {
    return CreateDatasetOperationMetadata.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<CreateDatasetOperationMetadata>): CreateDatasetOperationMetadata {
    const message = createBaseCreateDatasetOperationMetadata();
    return message;
  },
};

function createBaseCreateModelOperationMetadata(): CreateModelOperationMetadata {
  return {};
}

export const CreateModelOperationMetadata: MessageFns<CreateModelOperationMetadata> = {
  encode(_: CreateModelOperationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateModelOperationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateModelOperationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): CreateModelOperationMetadata {
    return {};
  },

  toJSON(_: CreateModelOperationMetadata): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<CreateModelOperationMetadata>): CreateModelOperationMetadata {
    return CreateModelOperationMetadata.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<CreateModelOperationMetadata>): CreateModelOperationMetadata {
    const message = createBaseCreateModelOperationMetadata();
    return message;
  },
};

function createBaseImportDataOperationMetadata(): ImportDataOperationMetadata {
  return {};
}

export const ImportDataOperationMetadata: MessageFns<ImportDataOperationMetadata> = {
  encode(_: ImportDataOperationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ImportDataOperationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImportDataOperationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ImportDataOperationMetadata {
    return {};
  },

  toJSON(_: ImportDataOperationMetadata): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<ImportDataOperationMetadata>): ImportDataOperationMetadata {
    return ImportDataOperationMetadata.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<ImportDataOperationMetadata>): ImportDataOperationMetadata {
    const message = createBaseImportDataOperationMetadata();
    return message;
  },
};

function createBaseExportDataOperationMetadata(): ExportDataOperationMetadata {
  return { outputInfo: undefined };
}

export const ExportDataOperationMetadata: MessageFns<ExportDataOperationMetadata> = {
  encode(message: ExportDataOperationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.outputInfo !== undefined) {
      ExportDataOperationMetadata_ExportDataOutputInfo.encode(message.outputInfo, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExportDataOperationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExportDataOperationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.outputInfo = ExportDataOperationMetadata_ExportDataOutputInfo.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExportDataOperationMetadata {
    return {
      outputInfo: isSet(object.outputInfo)
        ? ExportDataOperationMetadata_ExportDataOutputInfo.fromJSON(object.outputInfo)
        : undefined,
    };
  },

  toJSON(message: ExportDataOperationMetadata): unknown {
    const obj: any = {};
    if (message.outputInfo !== undefined) {
      obj.outputInfo = ExportDataOperationMetadata_ExportDataOutputInfo.toJSON(message.outputInfo);
    }
    return obj;
  },

  create(base?: DeepPartial<ExportDataOperationMetadata>): ExportDataOperationMetadata {
    return ExportDataOperationMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExportDataOperationMetadata>): ExportDataOperationMetadata {
    const message = createBaseExportDataOperationMetadata();
    message.outputInfo = (object.outputInfo !== undefined && object.outputInfo !== null)
      ? ExportDataOperationMetadata_ExportDataOutputInfo.fromPartial(object.outputInfo)
      : undefined;
    return message;
  },
};

function createBaseExportDataOperationMetadata_ExportDataOutputInfo(): ExportDataOperationMetadata_ExportDataOutputInfo {
  return { gcsOutputDirectory: undefined };
}

export const ExportDataOperationMetadata_ExportDataOutputInfo: MessageFns<
  ExportDataOperationMetadata_ExportDataOutputInfo
> = {
  encode(
    message: ExportDataOperationMetadata_ExportDataOutputInfo,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.gcsOutputDirectory !== undefined) {
      writer.uint32(10).string(message.gcsOutputDirectory);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExportDataOperationMetadata_ExportDataOutputInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExportDataOperationMetadata_ExportDataOutputInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.gcsOutputDirectory = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExportDataOperationMetadata_ExportDataOutputInfo {
    return {
      gcsOutputDirectory: isSet(object.gcsOutputDirectory) ? globalThis.String(object.gcsOutputDirectory) : undefined,
    };
  },

  toJSON(message: ExportDataOperationMetadata_ExportDataOutputInfo): unknown {
    const obj: any = {};
    if (message.gcsOutputDirectory !== undefined) {
      obj.gcsOutputDirectory = message.gcsOutputDirectory;
    }
    return obj;
  },

  create(
    base?: DeepPartial<ExportDataOperationMetadata_ExportDataOutputInfo>,
  ): ExportDataOperationMetadata_ExportDataOutputInfo {
    return ExportDataOperationMetadata_ExportDataOutputInfo.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ExportDataOperationMetadata_ExportDataOutputInfo>,
  ): ExportDataOperationMetadata_ExportDataOutputInfo {
    const message = createBaseExportDataOperationMetadata_ExportDataOutputInfo();
    message.gcsOutputDirectory = object.gcsOutputDirectory ?? undefined;
    return message;
  },
};

function createBaseBatchPredictOperationMetadata(): BatchPredictOperationMetadata {
  return { inputConfig: undefined, outputInfo: undefined };
}

export const BatchPredictOperationMetadata: MessageFns<BatchPredictOperationMetadata> = {
  encode(message: BatchPredictOperationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.inputConfig !== undefined) {
      BatchPredictInputConfig.encode(message.inputConfig, writer.uint32(10).fork()).join();
    }
    if (message.outputInfo !== undefined) {
      BatchPredictOperationMetadata_BatchPredictOutputInfo.encode(message.outputInfo, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BatchPredictOperationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBatchPredictOperationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.inputConfig = BatchPredictInputConfig.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.outputInfo = BatchPredictOperationMetadata_BatchPredictOutputInfo.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BatchPredictOperationMetadata {
    return {
      inputConfig: isSet(object.inputConfig) ? BatchPredictInputConfig.fromJSON(object.inputConfig) : undefined,
      outputInfo: isSet(object.outputInfo)
        ? BatchPredictOperationMetadata_BatchPredictOutputInfo.fromJSON(object.outputInfo)
        : undefined,
    };
  },

  toJSON(message: BatchPredictOperationMetadata): unknown {
    const obj: any = {};
    if (message.inputConfig !== undefined) {
      obj.inputConfig = BatchPredictInputConfig.toJSON(message.inputConfig);
    }
    if (message.outputInfo !== undefined) {
      obj.outputInfo = BatchPredictOperationMetadata_BatchPredictOutputInfo.toJSON(message.outputInfo);
    }
    return obj;
  },

  create(base?: DeepPartial<BatchPredictOperationMetadata>): BatchPredictOperationMetadata {
    return BatchPredictOperationMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BatchPredictOperationMetadata>): BatchPredictOperationMetadata {
    const message = createBaseBatchPredictOperationMetadata();
    message.inputConfig = (object.inputConfig !== undefined && object.inputConfig !== null)
      ? BatchPredictInputConfig.fromPartial(object.inputConfig)
      : undefined;
    message.outputInfo = (object.outputInfo !== undefined && object.outputInfo !== null)
      ? BatchPredictOperationMetadata_BatchPredictOutputInfo.fromPartial(object.outputInfo)
      : undefined;
    return message;
  },
};

function createBaseBatchPredictOperationMetadata_BatchPredictOutputInfo(): BatchPredictOperationMetadata_BatchPredictOutputInfo {
  return { gcsOutputDirectory: undefined };
}

export const BatchPredictOperationMetadata_BatchPredictOutputInfo: MessageFns<
  BatchPredictOperationMetadata_BatchPredictOutputInfo
> = {
  encode(
    message: BatchPredictOperationMetadata_BatchPredictOutputInfo,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.gcsOutputDirectory !== undefined) {
      writer.uint32(10).string(message.gcsOutputDirectory);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BatchPredictOperationMetadata_BatchPredictOutputInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBatchPredictOperationMetadata_BatchPredictOutputInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.gcsOutputDirectory = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BatchPredictOperationMetadata_BatchPredictOutputInfo {
    return {
      gcsOutputDirectory: isSet(object.gcsOutputDirectory) ? globalThis.String(object.gcsOutputDirectory) : undefined,
    };
  },

  toJSON(message: BatchPredictOperationMetadata_BatchPredictOutputInfo): unknown {
    const obj: any = {};
    if (message.gcsOutputDirectory !== undefined) {
      obj.gcsOutputDirectory = message.gcsOutputDirectory;
    }
    return obj;
  },

  create(
    base?: DeepPartial<BatchPredictOperationMetadata_BatchPredictOutputInfo>,
  ): BatchPredictOperationMetadata_BatchPredictOutputInfo {
    return BatchPredictOperationMetadata_BatchPredictOutputInfo.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<BatchPredictOperationMetadata_BatchPredictOutputInfo>,
  ): BatchPredictOperationMetadata_BatchPredictOutputInfo {
    const message = createBaseBatchPredictOperationMetadata_BatchPredictOutputInfo();
    message.gcsOutputDirectory = object.gcsOutputDirectory ?? undefined;
    return message;
  },
};

function createBaseExportModelOperationMetadata(): ExportModelOperationMetadata {
  return { outputInfo: undefined };
}

export const ExportModelOperationMetadata: MessageFns<ExportModelOperationMetadata> = {
  encode(message: ExportModelOperationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.outputInfo !== undefined) {
      ExportModelOperationMetadata_ExportModelOutputInfo.encode(message.outputInfo, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExportModelOperationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExportModelOperationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.outputInfo = ExportModelOperationMetadata_ExportModelOutputInfo.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExportModelOperationMetadata {
    return {
      outputInfo: isSet(object.outputInfo)
        ? ExportModelOperationMetadata_ExportModelOutputInfo.fromJSON(object.outputInfo)
        : undefined,
    };
  },

  toJSON(message: ExportModelOperationMetadata): unknown {
    const obj: any = {};
    if (message.outputInfo !== undefined) {
      obj.outputInfo = ExportModelOperationMetadata_ExportModelOutputInfo.toJSON(message.outputInfo);
    }
    return obj;
  },

  create(base?: DeepPartial<ExportModelOperationMetadata>): ExportModelOperationMetadata {
    return ExportModelOperationMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExportModelOperationMetadata>): ExportModelOperationMetadata {
    const message = createBaseExportModelOperationMetadata();
    message.outputInfo = (object.outputInfo !== undefined && object.outputInfo !== null)
      ? ExportModelOperationMetadata_ExportModelOutputInfo.fromPartial(object.outputInfo)
      : undefined;
    return message;
  },
};

function createBaseExportModelOperationMetadata_ExportModelOutputInfo(): ExportModelOperationMetadata_ExportModelOutputInfo {
  return { gcsOutputDirectory: "" };
}

export const ExportModelOperationMetadata_ExportModelOutputInfo: MessageFns<
  ExportModelOperationMetadata_ExportModelOutputInfo
> = {
  encode(
    message: ExportModelOperationMetadata_ExportModelOutputInfo,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.gcsOutputDirectory !== "") {
      writer.uint32(10).string(message.gcsOutputDirectory);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExportModelOperationMetadata_ExportModelOutputInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExportModelOperationMetadata_ExportModelOutputInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.gcsOutputDirectory = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExportModelOperationMetadata_ExportModelOutputInfo {
    return { gcsOutputDirectory: isSet(object.gcsOutputDirectory) ? globalThis.String(object.gcsOutputDirectory) : "" };
  },

  toJSON(message: ExportModelOperationMetadata_ExportModelOutputInfo): unknown {
    const obj: any = {};
    if (message.gcsOutputDirectory !== "") {
      obj.gcsOutputDirectory = message.gcsOutputDirectory;
    }
    return obj;
  },

  create(
    base?: DeepPartial<ExportModelOperationMetadata_ExportModelOutputInfo>,
  ): ExportModelOperationMetadata_ExportModelOutputInfo {
    return ExportModelOperationMetadata_ExportModelOutputInfo.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ExportModelOperationMetadata_ExportModelOutputInfo>,
  ): ExportModelOperationMetadata_ExportModelOutputInfo {
    const message = createBaseExportModelOperationMetadata_ExportModelOutputInfo();
    message.gcsOutputDirectory = object.gcsOutputDirectory ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
