// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/automl/v1/model_evaluation.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { ClassificationEvaluationMetrics } from "./classification.js";
import { ImageObjectDetectionEvaluationMetrics } from "./detection.js";
import { TextExtractionEvaluationMetrics } from "./text_extraction.js";
import { TextSentimentEvaluationMetrics } from "./text_sentiment.js";
import { TranslationEvaluationMetrics } from "./translation.js";

export const protobufPackage = "google.cloud.automl.v1";

/** Evaluation results of a model. */
export interface ModelEvaluation {
  /**
   * Model evaluation metrics for image, text, video and tables
   * classification.
   * Tables problem is considered a classification when the target column
   * is CATEGORY DataType.
   */
  classificationEvaluationMetrics?:
    | ClassificationEvaluationMetrics
    | undefined;
  /** Model evaluation metrics for translation. */
  translationEvaluationMetrics?:
    | TranslationEvaluationMetrics
    | undefined;
  /** Model evaluation metrics for image object detection. */
  imageObjectDetectionEvaluationMetrics?:
    | ImageObjectDetectionEvaluationMetrics
    | undefined;
  /** Evaluation metrics for text sentiment models. */
  textSentimentEvaluationMetrics?:
    | TextSentimentEvaluationMetrics
    | undefined;
  /** Evaluation metrics for text extraction models. */
  textExtractionEvaluationMetrics?:
    | TextExtractionEvaluationMetrics
    | undefined;
  /**
   * Output only. Resource name of the model evaluation.
   * Format:
   * `projects/{project_id}/locations/{location_id}/models/{model_id}/modelEvaluations/{model_evaluation_id}`
   */
  name: string;
  /**
   * Output only. The ID of the annotation spec that the model evaluation applies to. The
   * The ID is empty for the overall model evaluation.
   * For Tables annotation specs in the dataset do not exist and this ID is
   * always not set, but for CLASSIFICATION
   * [prediction_type-s][google.cloud.automl.v1.TablesModelMetadata.prediction_type]
   * the
   * [display_name][google.cloud.automl.v1.ModelEvaluation.display_name]
   * field is used.
   */
  annotationSpecId: string;
  /**
   * Output only. The value of
   * [display_name][google.cloud.automl.v1.AnnotationSpec.display_name]
   * at the moment when the model was trained. Because this field returns a
   * value at model training time, for different models trained from the same
   * dataset, the values may differ, since display names could had been changed
   * between the two model's trainings. For Tables CLASSIFICATION
   * [prediction_type-s][google.cloud.automl.v1.TablesModelMetadata.prediction_type]
   * distinct values of the target column at the moment of the model evaluation
   * are populated here.
   * The display_name is empty for the overall model evaluation.
   */
  displayName: string;
  /** Output only. Timestamp when this model evaluation was created. */
  createTime:
    | Date
    | undefined;
  /**
   * Output only. The number of examples used for model evaluation, i.e. for
   * which ground truth from time of model creation is compared against the
   * predicted annotations created by the model.
   * For overall ModelEvaluation (i.e. with annotation_spec_id not set) this is
   * the total number of all examples used for evaluation.
   * Otherwise, this is the count of examples that according to the ground
   * truth were annotated by the
   * [annotation_spec_id][google.cloud.automl.v1.ModelEvaluation.annotation_spec_id].
   */
  evaluatedExampleCount: number;
}

function createBaseModelEvaluation(): ModelEvaluation {
  return {
    classificationEvaluationMetrics: undefined,
    translationEvaluationMetrics: undefined,
    imageObjectDetectionEvaluationMetrics: undefined,
    textSentimentEvaluationMetrics: undefined,
    textExtractionEvaluationMetrics: undefined,
    name: "",
    annotationSpecId: "",
    displayName: "",
    createTime: undefined,
    evaluatedExampleCount: 0,
  };
}

export const ModelEvaluation: MessageFns<ModelEvaluation> = {
  encode(message: ModelEvaluation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.classificationEvaluationMetrics !== undefined) {
      ClassificationEvaluationMetrics.encode(message.classificationEvaluationMetrics, writer.uint32(66).fork()).join();
    }
    if (message.translationEvaluationMetrics !== undefined) {
      TranslationEvaluationMetrics.encode(message.translationEvaluationMetrics, writer.uint32(74).fork()).join();
    }
    if (message.imageObjectDetectionEvaluationMetrics !== undefined) {
      ImageObjectDetectionEvaluationMetrics.encode(
        message.imageObjectDetectionEvaluationMetrics,
        writer.uint32(98).fork(),
      ).join();
    }
    if (message.textSentimentEvaluationMetrics !== undefined) {
      TextSentimentEvaluationMetrics.encode(message.textSentimentEvaluationMetrics, writer.uint32(90).fork()).join();
    }
    if (message.textExtractionEvaluationMetrics !== undefined) {
      TextExtractionEvaluationMetrics.encode(message.textExtractionEvaluationMetrics, writer.uint32(106).fork()).join();
    }
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.annotationSpecId !== "") {
      writer.uint32(18).string(message.annotationSpecId);
    }
    if (message.displayName !== "") {
      writer.uint32(122).string(message.displayName);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(42).fork()).join();
    }
    if (message.evaluatedExampleCount !== 0) {
      writer.uint32(48).int32(message.evaluatedExampleCount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ModelEvaluation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseModelEvaluation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 8:
          if (tag !== 66) {
            break;
          }

          message.classificationEvaluationMetrics = ClassificationEvaluationMetrics.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.translationEvaluationMetrics = TranslationEvaluationMetrics.decode(reader, reader.uint32());
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.imageObjectDetectionEvaluationMetrics = ImageObjectDetectionEvaluationMetrics.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.textSentimentEvaluationMetrics = TextSentimentEvaluationMetrics.decode(reader, reader.uint32());
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.textExtractionEvaluationMetrics = TextExtractionEvaluationMetrics.decode(reader, reader.uint32());
          continue;
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.annotationSpecId = reader.string();
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.evaluatedExampleCount = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ModelEvaluation {
    return {
      classificationEvaluationMetrics: isSet(object.classificationEvaluationMetrics)
        ? ClassificationEvaluationMetrics.fromJSON(object.classificationEvaluationMetrics)
        : undefined,
      translationEvaluationMetrics: isSet(object.translationEvaluationMetrics)
        ? TranslationEvaluationMetrics.fromJSON(object.translationEvaluationMetrics)
        : undefined,
      imageObjectDetectionEvaluationMetrics: isSet(object.imageObjectDetectionEvaluationMetrics)
        ? ImageObjectDetectionEvaluationMetrics.fromJSON(object.imageObjectDetectionEvaluationMetrics)
        : undefined,
      textSentimentEvaluationMetrics: isSet(object.textSentimentEvaluationMetrics)
        ? TextSentimentEvaluationMetrics.fromJSON(object.textSentimentEvaluationMetrics)
        : undefined,
      textExtractionEvaluationMetrics: isSet(object.textExtractionEvaluationMetrics)
        ? TextExtractionEvaluationMetrics.fromJSON(object.textExtractionEvaluationMetrics)
        : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      annotationSpecId: isSet(object.annotationSpecId) ? globalThis.String(object.annotationSpecId) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      evaluatedExampleCount: isSet(object.evaluatedExampleCount) ? globalThis.Number(object.evaluatedExampleCount) : 0,
    };
  },

  toJSON(message: ModelEvaluation): unknown {
    const obj: any = {};
    if (message.classificationEvaluationMetrics !== undefined) {
      obj.classificationEvaluationMetrics = ClassificationEvaluationMetrics.toJSON(
        message.classificationEvaluationMetrics,
      );
    }
    if (message.translationEvaluationMetrics !== undefined) {
      obj.translationEvaluationMetrics = TranslationEvaluationMetrics.toJSON(message.translationEvaluationMetrics);
    }
    if (message.imageObjectDetectionEvaluationMetrics !== undefined) {
      obj.imageObjectDetectionEvaluationMetrics = ImageObjectDetectionEvaluationMetrics.toJSON(
        message.imageObjectDetectionEvaluationMetrics,
      );
    }
    if (message.textSentimentEvaluationMetrics !== undefined) {
      obj.textSentimentEvaluationMetrics = TextSentimentEvaluationMetrics.toJSON(
        message.textSentimentEvaluationMetrics,
      );
    }
    if (message.textExtractionEvaluationMetrics !== undefined) {
      obj.textExtractionEvaluationMetrics = TextExtractionEvaluationMetrics.toJSON(
        message.textExtractionEvaluationMetrics,
      );
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.annotationSpecId !== "") {
      obj.annotationSpecId = message.annotationSpecId;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.evaluatedExampleCount !== 0) {
      obj.evaluatedExampleCount = Math.round(message.evaluatedExampleCount);
    }
    return obj;
  },

  create(base?: DeepPartial<ModelEvaluation>): ModelEvaluation {
    return ModelEvaluation.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ModelEvaluation>): ModelEvaluation {
    const message = createBaseModelEvaluation();
    message.classificationEvaluationMetrics =
      (object.classificationEvaluationMetrics !== undefined && object.classificationEvaluationMetrics !== null)
        ? ClassificationEvaluationMetrics.fromPartial(object.classificationEvaluationMetrics)
        : undefined;
    message.translationEvaluationMetrics =
      (object.translationEvaluationMetrics !== undefined && object.translationEvaluationMetrics !== null)
        ? TranslationEvaluationMetrics.fromPartial(object.translationEvaluationMetrics)
        : undefined;
    message.imageObjectDetectionEvaluationMetrics =
      (object.imageObjectDetectionEvaluationMetrics !== undefined &&
          object.imageObjectDetectionEvaluationMetrics !== null)
        ? ImageObjectDetectionEvaluationMetrics.fromPartial(object.imageObjectDetectionEvaluationMetrics)
        : undefined;
    message.textSentimentEvaluationMetrics =
      (object.textSentimentEvaluationMetrics !== undefined && object.textSentimentEvaluationMetrics !== null)
        ? TextSentimentEvaluationMetrics.fromPartial(object.textSentimentEvaluationMetrics)
        : undefined;
    message.textExtractionEvaluationMetrics =
      (object.textExtractionEvaluationMetrics !== undefined && object.textExtractionEvaluationMetrics !== null)
        ? TextExtractionEvaluationMetrics.fromPartial(object.textExtractionEvaluationMetrics)
        : undefined;
    message.name = object.name ?? "";
    message.annotationSpecId = object.annotationSpecId ?? "";
    message.displayName = object.displayName ?? "";
    message.createTime = object.createTime ?? undefined;
    message.evaluatedExampleCount = object.evaluatedExampleCount ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
