// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/automl/v1/translation.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { TextSnippet } from "./data_items.js";

export const protobufPackage = "google.cloud.automl.v1";

/** Dataset metadata that is specific to translation. */
export interface TranslationDatasetMetadata {
  /** Required. The BCP-47 language code of the source language. */
  sourceLanguageCode: string;
  /** Required. The BCP-47 language code of the target language. */
  targetLanguageCode: string;
}

/** Evaluation metrics for the dataset. */
export interface TranslationEvaluationMetrics {
  /** Output only. BLEU score. */
  bleuScore: number;
  /** Output only. BLEU score for base model. */
  baseBleuScore: number;
}

/** Model metadata that is specific to translation. */
export interface TranslationModelMetadata {
  /**
   * The resource name of the model to use as a baseline to train the custom
   * model. If unset, we use the default base model provided by Google
   * Translate. Format:
   * `projects/{project_id}/locations/{location_id}/models/{model_id}`
   */
  baseModel: string;
  /**
   * Output only. Inferred from the dataset.
   * The source language (The BCP-47 language code) that is used for training.
   */
  sourceLanguageCode: string;
  /**
   * Output only. The target language (The BCP-47 language code) that is used
   * for training.
   */
  targetLanguageCode: string;
}

/** Annotation details specific to translation. */
export interface TranslationAnnotation {
  /** Output only . The translated content. */
  translatedContent: TextSnippet | undefined;
}

function createBaseTranslationDatasetMetadata(): TranslationDatasetMetadata {
  return { sourceLanguageCode: "", targetLanguageCode: "" };
}

export const TranslationDatasetMetadata: MessageFns<TranslationDatasetMetadata> = {
  encode(message: TranslationDatasetMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sourceLanguageCode !== "") {
      writer.uint32(10).string(message.sourceLanguageCode);
    }
    if (message.targetLanguageCode !== "") {
      writer.uint32(18).string(message.targetLanguageCode);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TranslationDatasetMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTranslationDatasetMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.sourceLanguageCode = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.targetLanguageCode = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TranslationDatasetMetadata {
    return {
      sourceLanguageCode: isSet(object.sourceLanguageCode) ? globalThis.String(object.sourceLanguageCode) : "",
      targetLanguageCode: isSet(object.targetLanguageCode) ? globalThis.String(object.targetLanguageCode) : "",
    };
  },

  toJSON(message: TranslationDatasetMetadata): unknown {
    const obj: any = {};
    if (message.sourceLanguageCode !== "") {
      obj.sourceLanguageCode = message.sourceLanguageCode;
    }
    if (message.targetLanguageCode !== "") {
      obj.targetLanguageCode = message.targetLanguageCode;
    }
    return obj;
  },

  create(base?: DeepPartial<TranslationDatasetMetadata>): TranslationDatasetMetadata {
    return TranslationDatasetMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TranslationDatasetMetadata>): TranslationDatasetMetadata {
    const message = createBaseTranslationDatasetMetadata();
    message.sourceLanguageCode = object.sourceLanguageCode ?? "";
    message.targetLanguageCode = object.targetLanguageCode ?? "";
    return message;
  },
};

function createBaseTranslationEvaluationMetrics(): TranslationEvaluationMetrics {
  return { bleuScore: 0, baseBleuScore: 0 };
}

export const TranslationEvaluationMetrics: MessageFns<TranslationEvaluationMetrics> = {
  encode(message: TranslationEvaluationMetrics, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.bleuScore !== 0) {
      writer.uint32(9).double(message.bleuScore);
    }
    if (message.baseBleuScore !== 0) {
      writer.uint32(17).double(message.baseBleuScore);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TranslationEvaluationMetrics {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTranslationEvaluationMetrics();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 9) {
            break;
          }

          message.bleuScore = reader.double();
          continue;
        case 2:
          if (tag !== 17) {
            break;
          }

          message.baseBleuScore = reader.double();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TranslationEvaluationMetrics {
    return {
      bleuScore: isSet(object.bleuScore) ? globalThis.Number(object.bleuScore) : 0,
      baseBleuScore: isSet(object.baseBleuScore) ? globalThis.Number(object.baseBleuScore) : 0,
    };
  },

  toJSON(message: TranslationEvaluationMetrics): unknown {
    const obj: any = {};
    if (message.bleuScore !== 0) {
      obj.bleuScore = message.bleuScore;
    }
    if (message.baseBleuScore !== 0) {
      obj.baseBleuScore = message.baseBleuScore;
    }
    return obj;
  },

  create(base?: DeepPartial<TranslationEvaluationMetrics>): TranslationEvaluationMetrics {
    return TranslationEvaluationMetrics.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TranslationEvaluationMetrics>): TranslationEvaluationMetrics {
    const message = createBaseTranslationEvaluationMetrics();
    message.bleuScore = object.bleuScore ?? 0;
    message.baseBleuScore = object.baseBleuScore ?? 0;
    return message;
  },
};

function createBaseTranslationModelMetadata(): TranslationModelMetadata {
  return { baseModel: "", sourceLanguageCode: "", targetLanguageCode: "" };
}

export const TranslationModelMetadata: MessageFns<TranslationModelMetadata> = {
  encode(message: TranslationModelMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.baseModel !== "") {
      writer.uint32(10).string(message.baseModel);
    }
    if (message.sourceLanguageCode !== "") {
      writer.uint32(18).string(message.sourceLanguageCode);
    }
    if (message.targetLanguageCode !== "") {
      writer.uint32(26).string(message.targetLanguageCode);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TranslationModelMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTranslationModelMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.baseModel = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.sourceLanguageCode = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.targetLanguageCode = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TranslationModelMetadata {
    return {
      baseModel: isSet(object.baseModel) ? globalThis.String(object.baseModel) : "",
      sourceLanguageCode: isSet(object.sourceLanguageCode) ? globalThis.String(object.sourceLanguageCode) : "",
      targetLanguageCode: isSet(object.targetLanguageCode) ? globalThis.String(object.targetLanguageCode) : "",
    };
  },

  toJSON(message: TranslationModelMetadata): unknown {
    const obj: any = {};
    if (message.baseModel !== "") {
      obj.baseModel = message.baseModel;
    }
    if (message.sourceLanguageCode !== "") {
      obj.sourceLanguageCode = message.sourceLanguageCode;
    }
    if (message.targetLanguageCode !== "") {
      obj.targetLanguageCode = message.targetLanguageCode;
    }
    return obj;
  },

  create(base?: DeepPartial<TranslationModelMetadata>): TranslationModelMetadata {
    return TranslationModelMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TranslationModelMetadata>): TranslationModelMetadata {
    const message = createBaseTranslationModelMetadata();
    message.baseModel = object.baseModel ?? "";
    message.sourceLanguageCode = object.sourceLanguageCode ?? "";
    message.targetLanguageCode = object.targetLanguageCode ?? "";
    return message;
  },
};

function createBaseTranslationAnnotation(): TranslationAnnotation {
  return { translatedContent: undefined };
}

export const TranslationAnnotation: MessageFns<TranslationAnnotation> = {
  encode(message: TranslationAnnotation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.translatedContent !== undefined) {
      TextSnippet.encode(message.translatedContent, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TranslationAnnotation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTranslationAnnotation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.translatedContent = TextSnippet.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TranslationAnnotation {
    return {
      translatedContent: isSet(object.translatedContent) ? TextSnippet.fromJSON(object.translatedContent) : undefined,
    };
  },

  toJSON(message: TranslationAnnotation): unknown {
    const obj: any = {};
    if (message.translatedContent !== undefined) {
      obj.translatedContent = TextSnippet.toJSON(message.translatedContent);
    }
    return obj;
  },

  create(base?: DeepPartial<TranslationAnnotation>): TranslationAnnotation {
    return TranslationAnnotation.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TranslationAnnotation>): TranslationAnnotation {
    const message = createBaseTranslationAnnotation();
    message.translatedContent = (object.translatedContent !== undefined && object.translatedContent !== null)
      ? TextSnippet.fromPartial(object.translatedContent)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
