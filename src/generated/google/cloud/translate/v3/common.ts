// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/translate/v3/common.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.cloud.translation.v3";

/** Possible states of long running operations. */
export enum OperationState {
  /** OPERATION_STATE_UNSPECIFIED - Invalid. */
  OPERATION_STATE_UNSPECIFIED = 0,
  /** OPERATION_STATE_RUNNING - Request is being processed. */
  OPERATION_STATE_RUNNING = 1,
  /** OPERATION_STATE_SUCCEEDED - The operation was successful. */
  OPERATION_STATE_SUCCEEDED = 2,
  /** OPERATION_STATE_FAILED - Failed to process operation. */
  OPERATION_STATE_FAILED = 3,
  /**
   * OPERATION_STATE_CANCELLING - Request is in the process of being canceled after caller invoked
   * longrunning.Operations.CancelOperation on the request id.
   */
  OPERATION_STATE_CANCELLING = 4,
  /** OPERATION_STATE_CANCELLED - The operation request was successfully canceled. */
  OPERATION_STATE_CANCELLED = 5,
  UNRECOGNIZED = -1,
}

export function operationStateFromJSON(object: any): OperationState {
  switch (object) {
    case 0:
    case "OPERATION_STATE_UNSPECIFIED":
      return OperationState.OPERATION_STATE_UNSPECIFIED;
    case 1:
    case "OPERATION_STATE_RUNNING":
      return OperationState.OPERATION_STATE_RUNNING;
    case 2:
    case "OPERATION_STATE_SUCCEEDED":
      return OperationState.OPERATION_STATE_SUCCEEDED;
    case 3:
    case "OPERATION_STATE_FAILED":
      return OperationState.OPERATION_STATE_FAILED;
    case 4:
    case "OPERATION_STATE_CANCELLING":
      return OperationState.OPERATION_STATE_CANCELLING;
    case 5:
    case "OPERATION_STATE_CANCELLED":
      return OperationState.OPERATION_STATE_CANCELLED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return OperationState.UNRECOGNIZED;
  }
}

export function operationStateToJSON(object: OperationState): string {
  switch (object) {
    case OperationState.OPERATION_STATE_UNSPECIFIED:
      return "OPERATION_STATE_UNSPECIFIED";
    case OperationState.OPERATION_STATE_RUNNING:
      return "OPERATION_STATE_RUNNING";
    case OperationState.OPERATION_STATE_SUCCEEDED:
      return "OPERATION_STATE_SUCCEEDED";
    case OperationState.OPERATION_STATE_FAILED:
      return "OPERATION_STATE_FAILED";
    case OperationState.OPERATION_STATE_CANCELLING:
      return "OPERATION_STATE_CANCELLING";
    case OperationState.OPERATION_STATE_CANCELLED:
      return "OPERATION_STATE_CANCELLED";
    case OperationState.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** The Google Cloud Storage location for the input content. */
export interface GcsInputSource {
  /** Required. Source data URI. For example, `gs://my_bucket/my_object`. */
  inputUri: string;
}

/** An inlined file. */
export interface FileInputSource {
  /** Required. The file's mime type. */
  mimeType: string;
  /** Required. The file's byte contents. */
  content: Buffer;
  /** Required. The file's display name. */
  displayName: string;
}

/** The Google Cloud Storage location for the output content. */
export interface GcsOutputDestination {
  /**
   * Required. Google Cloud Storage URI to output directory. For example,
   * `gs://bucket/directory`. The requesting user must have write permission to
   * the bucket. The directory will be created if it doesn't exist.
   */
  outputUriPrefix: string;
}

/** Represents a single entry in a glossary. */
export interface GlossaryEntry {
  /**
   * Identifier. The resource name of the entry.
   * Format:
   *   `projects/* /locations/* /glossaries/* /glossaryEntries/*`
   */
  name: string;
  /** Used for an unidirectional glossary. */
  termsPair?:
    | GlossaryEntry_GlossaryTermsPair
    | undefined;
  /** Used for an equivalent term sets glossary. */
  termsSet?:
    | GlossaryEntry_GlossaryTermsSet
    | undefined;
  /** Describes the glossary entry. */
  description: string;
}

/** Represents a single entry for an unidirectional glossary. */
export interface GlossaryEntry_GlossaryTermsPair {
  /** The source term is the term that will get match in the text, */
  sourceTerm:
    | GlossaryTerm
    | undefined;
  /** The term that will replace the match source term. */
  targetTerm: GlossaryTerm | undefined;
}

/**
 * Represents a single entry for an equivalent term set glossary. This is used
 * for equivalent term sets where each term can be replaced by the other terms
 * in the set.
 */
export interface GlossaryEntry_GlossaryTermsSet {
  /**
   * Each term in the set represents a term that can be replaced by the other
   * terms.
   */
  terms: GlossaryTerm[];
}

/** Represents a single glossary term */
export interface GlossaryTerm {
  /** The language for this glossary term. */
  languageCode: string;
  /** The text for the glossary term. */
  text: string;
}

function createBaseGcsInputSource(): GcsInputSource {
  return { inputUri: "" };
}

export const GcsInputSource: MessageFns<GcsInputSource> = {
  encode(message: GcsInputSource, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.inputUri !== "") {
      writer.uint32(10).string(message.inputUri);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GcsInputSource {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGcsInputSource();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.inputUri = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GcsInputSource {
    return { inputUri: isSet(object.inputUri) ? globalThis.String(object.inputUri) : "" };
  },

  toJSON(message: GcsInputSource): unknown {
    const obj: any = {};
    if (message.inputUri !== "") {
      obj.inputUri = message.inputUri;
    }
    return obj;
  },

  create(base?: DeepPartial<GcsInputSource>): GcsInputSource {
    return GcsInputSource.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GcsInputSource>): GcsInputSource {
    const message = createBaseGcsInputSource();
    message.inputUri = object.inputUri ?? "";
    return message;
  },
};

function createBaseFileInputSource(): FileInputSource {
  return { mimeType: "", content: Buffer.alloc(0), displayName: "" };
}

export const FileInputSource: MessageFns<FileInputSource> = {
  encode(message: FileInputSource, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.mimeType !== "") {
      writer.uint32(10).string(message.mimeType);
    }
    if (message.content.length !== 0) {
      writer.uint32(18).bytes(message.content);
    }
    if (message.displayName !== "") {
      writer.uint32(26).string(message.displayName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FileInputSource {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFileInputSource();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.mimeType = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.content = Buffer.from(reader.bytes());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.displayName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FileInputSource {
    return {
      mimeType: isSet(object.mimeType) ? globalThis.String(object.mimeType) : "",
      content: isSet(object.content) ? Buffer.from(bytesFromBase64(object.content)) : Buffer.alloc(0),
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
    };
  },

  toJSON(message: FileInputSource): unknown {
    const obj: any = {};
    if (message.mimeType !== "") {
      obj.mimeType = message.mimeType;
    }
    if (message.content.length !== 0) {
      obj.content = base64FromBytes(message.content);
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    return obj;
  },

  create(base?: DeepPartial<FileInputSource>): FileInputSource {
    return FileInputSource.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FileInputSource>): FileInputSource {
    const message = createBaseFileInputSource();
    message.mimeType = object.mimeType ?? "";
    message.content = object.content ?? Buffer.alloc(0);
    message.displayName = object.displayName ?? "";
    return message;
  },
};

function createBaseGcsOutputDestination(): GcsOutputDestination {
  return { outputUriPrefix: "" };
}

export const GcsOutputDestination: MessageFns<GcsOutputDestination> = {
  encode(message: GcsOutputDestination, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.outputUriPrefix !== "") {
      writer.uint32(10).string(message.outputUriPrefix);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GcsOutputDestination {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGcsOutputDestination();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.outputUriPrefix = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GcsOutputDestination {
    return { outputUriPrefix: isSet(object.outputUriPrefix) ? globalThis.String(object.outputUriPrefix) : "" };
  },

  toJSON(message: GcsOutputDestination): unknown {
    const obj: any = {};
    if (message.outputUriPrefix !== "") {
      obj.outputUriPrefix = message.outputUriPrefix;
    }
    return obj;
  },

  create(base?: DeepPartial<GcsOutputDestination>): GcsOutputDestination {
    return GcsOutputDestination.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GcsOutputDestination>): GcsOutputDestination {
    const message = createBaseGcsOutputDestination();
    message.outputUriPrefix = object.outputUriPrefix ?? "";
    return message;
  },
};

function createBaseGlossaryEntry(): GlossaryEntry {
  return { name: "", termsPair: undefined, termsSet: undefined, description: "" };
}

export const GlossaryEntry: MessageFns<GlossaryEntry> = {
  encode(message: GlossaryEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.termsPair !== undefined) {
      GlossaryEntry_GlossaryTermsPair.encode(message.termsPair, writer.uint32(18).fork()).join();
    }
    if (message.termsSet !== undefined) {
      GlossaryEntry_GlossaryTermsSet.encode(message.termsSet, writer.uint32(26).fork()).join();
    }
    if (message.description !== "") {
      writer.uint32(34).string(message.description);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GlossaryEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGlossaryEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.termsPair = GlossaryEntry_GlossaryTermsPair.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.termsSet = GlossaryEntry_GlossaryTermsSet.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.description = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GlossaryEntry {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      termsPair: isSet(object.termsPair) ? GlossaryEntry_GlossaryTermsPair.fromJSON(object.termsPair) : undefined,
      termsSet: isSet(object.termsSet) ? GlossaryEntry_GlossaryTermsSet.fromJSON(object.termsSet) : undefined,
      description: isSet(object.description) ? globalThis.String(object.description) : "",
    };
  },

  toJSON(message: GlossaryEntry): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.termsPair !== undefined) {
      obj.termsPair = GlossaryEntry_GlossaryTermsPair.toJSON(message.termsPair);
    }
    if (message.termsSet !== undefined) {
      obj.termsSet = GlossaryEntry_GlossaryTermsSet.toJSON(message.termsSet);
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    return obj;
  },

  create(base?: DeepPartial<GlossaryEntry>): GlossaryEntry {
    return GlossaryEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GlossaryEntry>): GlossaryEntry {
    const message = createBaseGlossaryEntry();
    message.name = object.name ?? "";
    message.termsPair = (object.termsPair !== undefined && object.termsPair !== null)
      ? GlossaryEntry_GlossaryTermsPair.fromPartial(object.termsPair)
      : undefined;
    message.termsSet = (object.termsSet !== undefined && object.termsSet !== null)
      ? GlossaryEntry_GlossaryTermsSet.fromPartial(object.termsSet)
      : undefined;
    message.description = object.description ?? "";
    return message;
  },
};

function createBaseGlossaryEntry_GlossaryTermsPair(): GlossaryEntry_GlossaryTermsPair {
  return { sourceTerm: undefined, targetTerm: undefined };
}

export const GlossaryEntry_GlossaryTermsPair: MessageFns<GlossaryEntry_GlossaryTermsPair> = {
  encode(message: GlossaryEntry_GlossaryTermsPair, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sourceTerm !== undefined) {
      GlossaryTerm.encode(message.sourceTerm, writer.uint32(10).fork()).join();
    }
    if (message.targetTerm !== undefined) {
      GlossaryTerm.encode(message.targetTerm, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GlossaryEntry_GlossaryTermsPair {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGlossaryEntry_GlossaryTermsPair();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.sourceTerm = GlossaryTerm.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.targetTerm = GlossaryTerm.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GlossaryEntry_GlossaryTermsPair {
    return {
      sourceTerm: isSet(object.sourceTerm) ? GlossaryTerm.fromJSON(object.sourceTerm) : undefined,
      targetTerm: isSet(object.targetTerm) ? GlossaryTerm.fromJSON(object.targetTerm) : undefined,
    };
  },

  toJSON(message: GlossaryEntry_GlossaryTermsPair): unknown {
    const obj: any = {};
    if (message.sourceTerm !== undefined) {
      obj.sourceTerm = GlossaryTerm.toJSON(message.sourceTerm);
    }
    if (message.targetTerm !== undefined) {
      obj.targetTerm = GlossaryTerm.toJSON(message.targetTerm);
    }
    return obj;
  },

  create(base?: DeepPartial<GlossaryEntry_GlossaryTermsPair>): GlossaryEntry_GlossaryTermsPair {
    return GlossaryEntry_GlossaryTermsPair.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GlossaryEntry_GlossaryTermsPair>): GlossaryEntry_GlossaryTermsPair {
    const message = createBaseGlossaryEntry_GlossaryTermsPair();
    message.sourceTerm = (object.sourceTerm !== undefined && object.sourceTerm !== null)
      ? GlossaryTerm.fromPartial(object.sourceTerm)
      : undefined;
    message.targetTerm = (object.targetTerm !== undefined && object.targetTerm !== null)
      ? GlossaryTerm.fromPartial(object.targetTerm)
      : undefined;
    return message;
  },
};

function createBaseGlossaryEntry_GlossaryTermsSet(): GlossaryEntry_GlossaryTermsSet {
  return { terms: [] };
}

export const GlossaryEntry_GlossaryTermsSet: MessageFns<GlossaryEntry_GlossaryTermsSet> = {
  encode(message: GlossaryEntry_GlossaryTermsSet, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.terms) {
      GlossaryTerm.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GlossaryEntry_GlossaryTermsSet {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGlossaryEntry_GlossaryTermsSet();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.terms.push(GlossaryTerm.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GlossaryEntry_GlossaryTermsSet {
    return {
      terms: globalThis.Array.isArray(object?.terms) ? object.terms.map((e: any) => GlossaryTerm.fromJSON(e)) : [],
    };
  },

  toJSON(message: GlossaryEntry_GlossaryTermsSet): unknown {
    const obj: any = {};
    if (message.terms?.length) {
      obj.terms = message.terms.map((e) => GlossaryTerm.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<GlossaryEntry_GlossaryTermsSet>): GlossaryEntry_GlossaryTermsSet {
    return GlossaryEntry_GlossaryTermsSet.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GlossaryEntry_GlossaryTermsSet>): GlossaryEntry_GlossaryTermsSet {
    const message = createBaseGlossaryEntry_GlossaryTermsSet();
    message.terms = object.terms?.map((e) => GlossaryTerm.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGlossaryTerm(): GlossaryTerm {
  return { languageCode: "", text: "" };
}

export const GlossaryTerm: MessageFns<GlossaryTerm> = {
  encode(message: GlossaryTerm, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.languageCode !== "") {
      writer.uint32(10).string(message.languageCode);
    }
    if (message.text !== "") {
      writer.uint32(18).string(message.text);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GlossaryTerm {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGlossaryTerm();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.languageCode = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.text = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GlossaryTerm {
    return {
      languageCode: isSet(object.languageCode) ? globalThis.String(object.languageCode) : "",
      text: isSet(object.text) ? globalThis.String(object.text) : "",
    };
  },

  toJSON(message: GlossaryTerm): unknown {
    const obj: any = {};
    if (message.languageCode !== "") {
      obj.languageCode = message.languageCode;
    }
    if (message.text !== "") {
      obj.text = message.text;
    }
    return obj;
  },

  create(base?: DeepPartial<GlossaryTerm>): GlossaryTerm {
    return GlossaryTerm.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GlossaryTerm>): GlossaryTerm {
    const message = createBaseGlossaryTerm();
    message.languageCode = object.languageCode ?? "";
    message.text = object.text ?? "";
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
}

function base64FromBytes(arr: Uint8Array): string {
  return globalThis.Buffer.from(arr).toString("base64");
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
