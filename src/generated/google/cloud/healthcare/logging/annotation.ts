// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/healthcare/logging/annotation.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Status } from "../../../rpc/status.js";

export const protobufPackage = "google.cloud.healthcare.logging";

/** A log entry for an Annotation import long-running operation. */
export interface ImportAnnotationLogEntry {
  /**
   * The source in Cloud Storage. For example,
   * `gs://{bucket_id}/{path/to/file}`.
   */
  source: string;
  /** The error code and message. */
  error: Status | undefined;
}

/** A log entry for an Annotation export long-running operation. */
export interface ExportAnnotationLogEntry {
  /** The destination in Cloud Storage or BigQuery. */
  destination: string;
  /**
   * The annotation record being exported. For example:
   * `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/annotationStores/{store_id}/annotations/{annotation_id}`.
   */
  annotationName: string;
  /** The error code and message. */
  error: Status | undefined;
}

/** A log entry for an Annotation evaluate long-running operation. */
export interface EvaluateAnnotationLogEntry {
  /** The report destination in BigQuery. */
  destination: string;
  /**
   * The eval annotation record being evaluated. For example:
   * `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/annotationStores/{eval_store_id}/annotations/{eval_annotation_id}`.
   */
  evalAnnotationName: string;
  /**
   * The golden annotation record being evaluated. For example:
   * `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/annotationStores/{golden_store_id}/annotations/{golden_annotation_id}`.
   */
  goldenAnnotationName: string;
  /** The error code and message. */
  error: Status | undefined;
}

function createBaseImportAnnotationLogEntry(): ImportAnnotationLogEntry {
  return { source: "", error: undefined };
}

export const ImportAnnotationLogEntry: MessageFns<ImportAnnotationLogEntry> = {
  encode(message: ImportAnnotationLogEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.source !== "") {
      writer.uint32(10).string(message.source);
    }
    if (message.error !== undefined) {
      Status.encode(message.error, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ImportAnnotationLogEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImportAnnotationLogEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.source = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.error = Status.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImportAnnotationLogEntry {
    return {
      source: isSet(object.source) ? globalThis.String(object.source) : "",
      error: isSet(object.error) ? Status.fromJSON(object.error) : undefined,
    };
  },

  toJSON(message: ImportAnnotationLogEntry): unknown {
    const obj: any = {};
    if (message.source !== "") {
      obj.source = message.source;
    }
    if (message.error !== undefined) {
      obj.error = Status.toJSON(message.error);
    }
    return obj;
  },

  create(base?: DeepPartial<ImportAnnotationLogEntry>): ImportAnnotationLogEntry {
    return ImportAnnotationLogEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ImportAnnotationLogEntry>): ImportAnnotationLogEntry {
    const message = createBaseImportAnnotationLogEntry();
    message.source = object.source ?? "";
    message.error = (object.error !== undefined && object.error !== null)
      ? Status.fromPartial(object.error)
      : undefined;
    return message;
  },
};

function createBaseExportAnnotationLogEntry(): ExportAnnotationLogEntry {
  return { destination: "", annotationName: "", error: undefined };
}

export const ExportAnnotationLogEntry: MessageFns<ExportAnnotationLogEntry> = {
  encode(message: ExportAnnotationLogEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.destination !== "") {
      writer.uint32(10).string(message.destination);
    }
    if (message.annotationName !== "") {
      writer.uint32(18).string(message.annotationName);
    }
    if (message.error !== undefined) {
      Status.encode(message.error, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExportAnnotationLogEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExportAnnotationLogEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.destination = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.annotationName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.error = Status.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExportAnnotationLogEntry {
    return {
      destination: isSet(object.destination) ? globalThis.String(object.destination) : "",
      annotationName: isSet(object.annotationName) ? globalThis.String(object.annotationName) : "",
      error: isSet(object.error) ? Status.fromJSON(object.error) : undefined,
    };
  },

  toJSON(message: ExportAnnotationLogEntry): unknown {
    const obj: any = {};
    if (message.destination !== "") {
      obj.destination = message.destination;
    }
    if (message.annotationName !== "") {
      obj.annotationName = message.annotationName;
    }
    if (message.error !== undefined) {
      obj.error = Status.toJSON(message.error);
    }
    return obj;
  },

  create(base?: DeepPartial<ExportAnnotationLogEntry>): ExportAnnotationLogEntry {
    return ExportAnnotationLogEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExportAnnotationLogEntry>): ExportAnnotationLogEntry {
    const message = createBaseExportAnnotationLogEntry();
    message.destination = object.destination ?? "";
    message.annotationName = object.annotationName ?? "";
    message.error = (object.error !== undefined && object.error !== null)
      ? Status.fromPartial(object.error)
      : undefined;
    return message;
  },
};

function createBaseEvaluateAnnotationLogEntry(): EvaluateAnnotationLogEntry {
  return { destination: "", evalAnnotationName: "", goldenAnnotationName: "", error: undefined };
}

export const EvaluateAnnotationLogEntry: MessageFns<EvaluateAnnotationLogEntry> = {
  encode(message: EvaluateAnnotationLogEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.destination !== "") {
      writer.uint32(10).string(message.destination);
    }
    if (message.evalAnnotationName !== "") {
      writer.uint32(18).string(message.evalAnnotationName);
    }
    if (message.goldenAnnotationName !== "") {
      writer.uint32(26).string(message.goldenAnnotationName);
    }
    if (message.error !== undefined) {
      Status.encode(message.error, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EvaluateAnnotationLogEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEvaluateAnnotationLogEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.destination = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.evalAnnotationName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.goldenAnnotationName = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.error = Status.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EvaluateAnnotationLogEntry {
    return {
      destination: isSet(object.destination) ? globalThis.String(object.destination) : "",
      evalAnnotationName: isSet(object.evalAnnotationName) ? globalThis.String(object.evalAnnotationName) : "",
      goldenAnnotationName: isSet(object.goldenAnnotationName) ? globalThis.String(object.goldenAnnotationName) : "",
      error: isSet(object.error) ? Status.fromJSON(object.error) : undefined,
    };
  },

  toJSON(message: EvaluateAnnotationLogEntry): unknown {
    const obj: any = {};
    if (message.destination !== "") {
      obj.destination = message.destination;
    }
    if (message.evalAnnotationName !== "") {
      obj.evalAnnotationName = message.evalAnnotationName;
    }
    if (message.goldenAnnotationName !== "") {
      obj.goldenAnnotationName = message.goldenAnnotationName;
    }
    if (message.error !== undefined) {
      obj.error = Status.toJSON(message.error);
    }
    return obj;
  },

  create(base?: DeepPartial<EvaluateAnnotationLogEntry>): EvaluateAnnotationLogEntry {
    return EvaluateAnnotationLogEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EvaluateAnnotationLogEntry>): EvaluateAnnotationLogEntry {
    const message = createBaseEvaluateAnnotationLogEntry();
    message.destination = object.destination ?? "";
    message.evalAnnotationName = object.evalAnnotationName ?? "";
    message.goldenAnnotationName = object.goldenAnnotationName ?? "";
    message.error = (object.error !== undefined && object.error !== null)
      ? Status.fromPartial(object.error)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
