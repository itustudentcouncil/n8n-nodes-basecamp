// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/healthcare/logging/dicom.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Status } from "../../../rpc/status.js";

export const protobufPackage = "google.cloud.healthcare.logging";

/** A log entry for a DICOM import long-running operation. */
export interface ImportDicomLogEntry {
  /** The source file, in the format `gs://{bucket-id}/{path/to/file}`. */
  source: string;
  /** The error code and message. */
  error: Status | undefined;
}

/** A log entry for a DICOM export long-running operation. */
export interface ExportDicomLogEntry {
  /** The DICOM resource being exported. */
  resourceName: string;
  /** The error code and message. */
  error: Status | undefined;
}

/** A log entry for a DICOM store Pub/Sub notification. */
export interface DicomNotificationLogEntry {
  /** The DICOM resource being created. */
  resourceName: string;
  /** The Pub/Sub topic that the notification is published on. */
  pubsubTopic: string;
  /** The error code and message. */
  error: Status | undefined;
}

/** A log entry for a DICOM streaming export notification. */
export interface DicomStreamLogEntry {
  /** The DICOM resource being exported. */
  resourceName: string;
  /**
   * The destination in BigQuery, in the format
   * `bq://{projectId}.{bqDatasetId}.{bqTableId}`.
   */
  destination: string;
  /** The error code and message. */
  error: Status | undefined;
}

function createBaseImportDicomLogEntry(): ImportDicomLogEntry {
  return { source: "", error: undefined };
}

export const ImportDicomLogEntry: MessageFns<ImportDicomLogEntry> = {
  encode(message: ImportDicomLogEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.source !== "") {
      writer.uint32(10).string(message.source);
    }
    if (message.error !== undefined) {
      Status.encode(message.error, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ImportDicomLogEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImportDicomLogEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.source = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.error = Status.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImportDicomLogEntry {
    return {
      source: isSet(object.source) ? globalThis.String(object.source) : "",
      error: isSet(object.error) ? Status.fromJSON(object.error) : undefined,
    };
  },

  toJSON(message: ImportDicomLogEntry): unknown {
    const obj: any = {};
    if (message.source !== "") {
      obj.source = message.source;
    }
    if (message.error !== undefined) {
      obj.error = Status.toJSON(message.error);
    }
    return obj;
  },

  create(base?: DeepPartial<ImportDicomLogEntry>): ImportDicomLogEntry {
    return ImportDicomLogEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ImportDicomLogEntry>): ImportDicomLogEntry {
    const message = createBaseImportDicomLogEntry();
    message.source = object.source ?? "";
    message.error = (object.error !== undefined && object.error !== null)
      ? Status.fromPartial(object.error)
      : undefined;
    return message;
  },
};

function createBaseExportDicomLogEntry(): ExportDicomLogEntry {
  return { resourceName: "", error: undefined };
}

export const ExportDicomLogEntry: MessageFns<ExportDicomLogEntry> = {
  encode(message: ExportDicomLogEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(10).string(message.resourceName);
    }
    if (message.error !== undefined) {
      Status.encode(message.error, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExportDicomLogEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExportDicomLogEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.error = Status.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExportDicomLogEntry {
    return {
      resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "",
      error: isSet(object.error) ? Status.fromJSON(object.error) : undefined,
    };
  },

  toJSON(message: ExportDicomLogEntry): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    if (message.error !== undefined) {
      obj.error = Status.toJSON(message.error);
    }
    return obj;
  },

  create(base?: DeepPartial<ExportDicomLogEntry>): ExportDicomLogEntry {
    return ExportDicomLogEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExportDicomLogEntry>): ExportDicomLogEntry {
    const message = createBaseExportDicomLogEntry();
    message.resourceName = object.resourceName ?? "";
    message.error = (object.error !== undefined && object.error !== null)
      ? Status.fromPartial(object.error)
      : undefined;
    return message;
  },
};

function createBaseDicomNotificationLogEntry(): DicomNotificationLogEntry {
  return { resourceName: "", pubsubTopic: "", error: undefined };
}

export const DicomNotificationLogEntry: MessageFns<DicomNotificationLogEntry> = {
  encode(message: DicomNotificationLogEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(10).string(message.resourceName);
    }
    if (message.pubsubTopic !== "") {
      writer.uint32(18).string(message.pubsubTopic);
    }
    if (message.error !== undefined) {
      Status.encode(message.error, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DicomNotificationLogEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDicomNotificationLogEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.pubsubTopic = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.error = Status.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DicomNotificationLogEntry {
    return {
      resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "",
      pubsubTopic: isSet(object.pubsubTopic) ? globalThis.String(object.pubsubTopic) : "",
      error: isSet(object.error) ? Status.fromJSON(object.error) : undefined,
    };
  },

  toJSON(message: DicomNotificationLogEntry): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    if (message.pubsubTopic !== "") {
      obj.pubsubTopic = message.pubsubTopic;
    }
    if (message.error !== undefined) {
      obj.error = Status.toJSON(message.error);
    }
    return obj;
  },

  create(base?: DeepPartial<DicomNotificationLogEntry>): DicomNotificationLogEntry {
    return DicomNotificationLogEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DicomNotificationLogEntry>): DicomNotificationLogEntry {
    const message = createBaseDicomNotificationLogEntry();
    message.resourceName = object.resourceName ?? "";
    message.pubsubTopic = object.pubsubTopic ?? "";
    message.error = (object.error !== undefined && object.error !== null)
      ? Status.fromPartial(object.error)
      : undefined;
    return message;
  },
};

function createBaseDicomStreamLogEntry(): DicomStreamLogEntry {
  return { resourceName: "", destination: "", error: undefined };
}

export const DicomStreamLogEntry: MessageFns<DicomStreamLogEntry> = {
  encode(message: DicomStreamLogEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(10).string(message.resourceName);
    }
    if (message.destination !== "") {
      writer.uint32(18).string(message.destination);
    }
    if (message.error !== undefined) {
      Status.encode(message.error, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DicomStreamLogEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDicomStreamLogEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.destination = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.error = Status.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DicomStreamLogEntry {
    return {
      resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "",
      destination: isSet(object.destination) ? globalThis.String(object.destination) : "",
      error: isSet(object.error) ? Status.fromJSON(object.error) : undefined,
    };
  },

  toJSON(message: DicomStreamLogEntry): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    if (message.destination !== "") {
      obj.destination = message.destination;
    }
    if (message.error !== undefined) {
      obj.error = Status.toJSON(message.error);
    }
    return obj;
  },

  create(base?: DeepPartial<DicomStreamLogEntry>): DicomStreamLogEntry {
    return DicomStreamLogEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DicomStreamLogEntry>): DicomStreamLogEntry {
    const message = createBaseDicomStreamLogEntry();
    message.resourceName = object.resourceName ?? "";
    message.destination = object.destination ?? "";
    message.error = (object.error !== undefined && object.error !== null)
      ? Status.fromPartial(object.error)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
