// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/iot/v1/device_manager.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import {
  GetIamPolicyRequest,
  SetIamPolicyRequest,
  TestIamPermissionsRequest,
  TestIamPermissionsResponse,
} from "../../../iam/v1/iam_policy.js";
import { Policy } from "../../../iam/v1/policy.js";
import { Empty } from "../../../protobuf/empty.js";
import { FieldMask } from "../../../protobuf/field_mask.js";
import {
  Device,
  DeviceConfig,
  DeviceRegistry,
  DeviceState,
  GatewayType,
  gatewayTypeFromJSON,
  gatewayTypeToJSON,
} from "./resources.js";

export const protobufPackage = "google.cloud.iot.v1";

/** Request for `CreateDeviceRegistry`. */
export interface CreateDeviceRegistryRequest {
  /**
   * Required. The project and cloud region where this device registry must be created.
   * For example, `projects/example-project/locations/us-central1`.
   */
  parent: string;
  /**
   * Required. The device registry. The field `name` must be empty. The server will
   * generate that field from the device registry `id` provided and the
   * `parent` field.
   */
  deviceRegistry: DeviceRegistry | undefined;
}

/** Request for `GetDeviceRegistry`. */
export interface GetDeviceRegistryRequest {
  /**
   * Required. The name of the device registry. For example,
   * `projects/example-project/locations/us-central1/registries/my-registry`.
   */
  name: string;
}

/** Request for `DeleteDeviceRegistry`. */
export interface DeleteDeviceRegistryRequest {
  /**
   * Required. The name of the device registry. For example,
   * `projects/example-project/locations/us-central1/registries/my-registry`.
   */
  name: string;
}

/** Request for `UpdateDeviceRegistry`. */
export interface UpdateDeviceRegistryRequest {
  /**
   * Required. The new values for the device registry. The `id` field must be empty, and
   * the `name` field must indicate the path of the resource. For example,
   * `projects/example-project/locations/us-central1/registries/my-registry`.
   */
  deviceRegistry:
    | DeviceRegistry
    | undefined;
  /**
   * Required. Only updates the `device_registry` fields indicated by this mask.
   * The field mask must not be empty, and it must not contain fields that
   * are immutable or only set by the server.
   * Mutable top-level fields: `event_notification_config`, `http_config`,
   * `mqtt_config`, and `state_notification_config`.
   */
  updateMask: string[] | undefined;
}

/** Request for `ListDeviceRegistries`. */
export interface ListDeviceRegistriesRequest {
  /**
   * Required. The project and cloud region path. For example,
   * `projects/example-project/locations/us-central1`.
   */
  parent: string;
  /**
   * The maximum number of registries to return in the response. If this value
   * is zero, the service will select a default size. A call may return fewer
   * objects than requested. A non-empty `next_page_token` in the response
   * indicates that more data is available.
   */
  pageSize: number;
  /**
   * The value returned by the last `ListDeviceRegistriesResponse`; indicates
   * that this is a continuation of a prior `ListDeviceRegistries` call and
   * the system should return the next page of data.
   */
  pageToken: string;
}

/** Response for `ListDeviceRegistries`. */
export interface ListDeviceRegistriesResponse {
  /** The registries that matched the query. */
  deviceRegistries: DeviceRegistry[];
  /**
   * If not empty, indicates that there may be more registries that match the
   * request; this value should be passed in a new
   * `ListDeviceRegistriesRequest`.
   */
  nextPageToken: string;
}

/** Request for `CreateDevice`. */
export interface CreateDeviceRequest {
  /**
   * Required. The name of the device registry where this device should be created.
   * For example,
   * `projects/example-project/locations/us-central1/registries/my-registry`.
   */
  parent: string;
  /**
   * Required. The device registration details. The field `name` must be empty. The server
   * generates `name` from the device registry `id` and the
   * `parent` field.
   */
  device: Device | undefined;
}

/** Request for `GetDevice`. */
export interface GetDeviceRequest {
  /**
   * Required. The name of the device. For example,
   * `projects/p0/locations/us-central1/registries/registry0/devices/device0` or
   * `projects/p0/locations/us-central1/registries/registry0/devices/{num_id}`.
   */
  name: string;
  /**
   * The fields of the `Device` resource to be returned in the response. If the
   * field mask is unset or empty, all fields are returned. Fields have to be
   * provided in snake_case format, for example: `last_heartbeat_time`.
   */
  fieldMask: string[] | undefined;
}

/** Request for `UpdateDevice`. */
export interface UpdateDeviceRequest {
  /**
   * Required. The new values for the device. The `id` and `num_id` fields must
   * be empty, and the field `name` must specify the name path. For example,
   * `projects/p0/locations/us-central1/registries/registry0/devices/device0`or
   * `projects/p0/locations/us-central1/registries/registry0/devices/{num_id}`.
   */
  device:
    | Device
    | undefined;
  /**
   * Required. Only updates the `device` fields indicated by this mask.
   * The field mask must not be empty, and it must not contain fields that
   * are immutable or only set by the server.
   * Mutable top-level fields: `credentials`, `blocked`, and `metadata`
   */
  updateMask: string[] | undefined;
}

/** Request for `DeleteDevice`. */
export interface DeleteDeviceRequest {
  /**
   * Required. The name of the device. For example,
   * `projects/p0/locations/us-central1/registries/registry0/devices/device0` or
   * `projects/p0/locations/us-central1/registries/registry0/devices/{num_id}`.
   */
  name: string;
}

/** Request for `ListDevices`. */
export interface ListDevicesRequest {
  /**
   * Required. The device registry path. Required. For example,
   * `projects/my-project/locations/us-central1/registries/my-registry`.
   */
  parent: string;
  /**
   * A list of device numeric IDs. If empty, this field is ignored. Maximum
   * IDs: 10,000.
   */
  deviceNumIds: Long[];
  /**
   * A list of device string IDs. For example, `['device0', 'device12']`.
   * If empty, this field is ignored. Maximum IDs: 10,000
   */
  deviceIds: string[];
  /**
   * The fields of the `Device` resource to be returned in the response. The
   * fields `id` and `num_id` are always returned, along with any
   * other fields specified in snake_case format, for example:
   * `last_heartbeat_time`.
   */
  fieldMask:
    | string[]
    | undefined;
  /** Options related to gateways. */
  gatewayListOptions:
    | GatewayListOptions
    | undefined;
  /**
   * The maximum number of devices to return in the response. If this value
   * is zero, the service will select a default size. A call may return fewer
   * objects than requested. A non-empty `next_page_token` in the response
   * indicates that more data is available.
   */
  pageSize: number;
  /**
   * The value returned by the last `ListDevicesResponse`; indicates
   * that this is a continuation of a prior `ListDevices` call and
   * the system should return the next page of data.
   */
  pageToken: string;
}

/** Options for limiting the list based on gateway type and associations. */
export interface GatewayListOptions {
  /**
   * If `GATEWAY` is specified, only gateways are returned. If `NON_GATEWAY`
   * is specified, only non-gateway devices are returned. If
   * `GATEWAY_TYPE_UNSPECIFIED` is specified, all devices are returned.
   */
  gatewayType?:
    | GatewayType
    | undefined;
  /**
   * If set, only devices associated with the specified gateway are returned.
   * The gateway ID can be numeric (`num_id`) or the user-defined string
   * (`id`). For example, if `123` is specified, only devices bound to the
   * gateway with `num_id` 123 are returned.
   */
  associationsGatewayId?:
    | string
    | undefined;
  /**
   * If set, returns only the gateways with which the specified device is
   * associated. The device ID can be numeric (`num_id`) or the user-defined
   * string (`id`). For example, if `456` is specified, returns only the
   * gateways to which the device with `num_id` 456 is bound.
   */
  associationsDeviceId?: string | undefined;
}

/** Response for `ListDevices`. */
export interface ListDevicesResponse {
  /** The devices that match the request. */
  devices: Device[];
  /**
   * If not empty, indicates that there may be more devices that match the
   * request; this value should be passed in a new `ListDevicesRequest`.
   */
  nextPageToken: string;
}

/** Request for `ModifyCloudToDeviceConfig`. */
export interface ModifyCloudToDeviceConfigRequest {
  /**
   * Required. The name of the device. For example,
   * `projects/p0/locations/us-central1/registries/registry0/devices/device0` or
   * `projects/p0/locations/us-central1/registries/registry0/devices/{num_id}`.
   */
  name: string;
  /**
   * The version number to update. If this value is zero, it will not check the
   * version number of the server and will always update the current version;
   * otherwise, this update will fail if the version number found on the server
   * does not match this version number. This is used to support multiple
   * simultaneous updates without losing data.
   */
  versionToUpdate: Long;
  /** Required. The configuration data for the device. */
  binaryData: Buffer;
}

/** Request for `ListDeviceConfigVersions`. */
export interface ListDeviceConfigVersionsRequest {
  /**
   * Required. The name of the device. For example,
   * `projects/p0/locations/us-central1/registries/registry0/devices/device0` or
   * `projects/p0/locations/us-central1/registries/registry0/devices/{num_id}`.
   */
  name: string;
  /**
   * The number of versions to list. Versions are listed in decreasing order of
   * the version number. The maximum number of versions retained is 10. If this
   * value is zero, it will return all the versions available.
   */
  numVersions: number;
}

/** Response for `ListDeviceConfigVersions`. */
export interface ListDeviceConfigVersionsResponse {
  /**
   * The device configuration for the last few versions. Versions are listed
   * in decreasing order, starting from the most recent one.
   */
  deviceConfigs: DeviceConfig[];
}

/** Request for `ListDeviceStates`. */
export interface ListDeviceStatesRequest {
  /**
   * Required. The name of the device. For example,
   * `projects/p0/locations/us-central1/registries/registry0/devices/device0` or
   * `projects/p0/locations/us-central1/registries/registry0/devices/{num_id}`.
   */
  name: string;
  /**
   * The number of states to list. States are listed in descending order of
   * update time. The maximum number of states retained is 10. If this
   * value is zero, it will return all the states available.
   */
  numStates: number;
}

/** Response for `ListDeviceStates`. */
export interface ListDeviceStatesResponse {
  /**
   * The last few device states. States are listed in descending order of server
   * update time, starting from the most recent one.
   */
  deviceStates: DeviceState[];
}

/** Request for `SendCommandToDevice`. */
export interface SendCommandToDeviceRequest {
  /**
   * Required. The name of the device. For example,
   * `projects/p0/locations/us-central1/registries/registry0/devices/device0` or
   * `projects/p0/locations/us-central1/registries/registry0/devices/{num_id}`.
   */
  name: string;
  /** Required. The command data to send to the device. */
  binaryData: Buffer;
  /**
   * Optional subfolder for the command. If empty, the command will be delivered
   * to the /devices/{device-id}/commands topic, otherwise it will be delivered
   * to the /devices/{device-id}/commands/{subfolder} topic. Multi-level
   * subfolders are allowed. This field must not have more than 256 characters,
   * and must not contain any MQTT wildcards ("+" or "#") or null characters.
   */
  subfolder: string;
}

/** Response for `SendCommandToDevice`. */
export interface SendCommandToDeviceResponse {
}

/** Request for `BindDeviceToGateway`. */
export interface BindDeviceToGatewayRequest {
  /**
   * Required. The name of the registry. For example,
   * `projects/example-project/locations/us-central1/registries/my-registry`.
   */
  parent: string;
  /**
   * Required. The value of `gateway_id` can be either the device numeric ID or the
   * user-defined device identifier.
   */
  gatewayId: string;
  /**
   * Required. The device to associate with the specified gateway. The value of
   * `device_id` can be either the device numeric ID or the user-defined device
   * identifier.
   */
  deviceId: string;
}

/** Response for `BindDeviceToGateway`. */
export interface BindDeviceToGatewayResponse {
}

/** Request for `UnbindDeviceFromGateway`. */
export interface UnbindDeviceFromGatewayRequest {
  /**
   * Required. The name of the registry. For example,
   * `projects/example-project/locations/us-central1/registries/my-registry`.
   */
  parent: string;
  /**
   * Required. The value of `gateway_id` can be either the device numeric ID or the
   * user-defined device identifier.
   */
  gatewayId: string;
  /**
   * Required. The device to disassociate from the specified gateway. The value of
   * `device_id` can be either the device numeric ID or the user-defined device
   * identifier.
   */
  deviceId: string;
}

/** Response for `UnbindDeviceFromGateway`. */
export interface UnbindDeviceFromGatewayResponse {
}

function createBaseCreateDeviceRegistryRequest(): CreateDeviceRegistryRequest {
  return { parent: "", deviceRegistry: undefined };
}

export const CreateDeviceRegistryRequest: MessageFns<CreateDeviceRegistryRequest> = {
  encode(message: CreateDeviceRegistryRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.deviceRegistry !== undefined) {
      DeviceRegistry.encode(message.deviceRegistry, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateDeviceRegistryRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateDeviceRegistryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.deviceRegistry = DeviceRegistry.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateDeviceRegistryRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      deviceRegistry: isSet(object.deviceRegistry) ? DeviceRegistry.fromJSON(object.deviceRegistry) : undefined,
    };
  },

  toJSON(message: CreateDeviceRegistryRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.deviceRegistry !== undefined) {
      obj.deviceRegistry = DeviceRegistry.toJSON(message.deviceRegistry);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateDeviceRegistryRequest>): CreateDeviceRegistryRequest {
    return CreateDeviceRegistryRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateDeviceRegistryRequest>): CreateDeviceRegistryRequest {
    const message = createBaseCreateDeviceRegistryRequest();
    message.parent = object.parent ?? "";
    message.deviceRegistry = (object.deviceRegistry !== undefined && object.deviceRegistry !== null)
      ? DeviceRegistry.fromPartial(object.deviceRegistry)
      : undefined;
    return message;
  },
};

function createBaseGetDeviceRegistryRequest(): GetDeviceRegistryRequest {
  return { name: "" };
}

export const GetDeviceRegistryRequest: MessageFns<GetDeviceRegistryRequest> = {
  encode(message: GetDeviceRegistryRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetDeviceRegistryRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDeviceRegistryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDeviceRegistryRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetDeviceRegistryRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetDeviceRegistryRequest>): GetDeviceRegistryRequest {
    return GetDeviceRegistryRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetDeviceRegistryRequest>): GetDeviceRegistryRequest {
    const message = createBaseGetDeviceRegistryRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseDeleteDeviceRegistryRequest(): DeleteDeviceRegistryRequest {
  return { name: "" };
}

export const DeleteDeviceRegistryRequest: MessageFns<DeleteDeviceRegistryRequest> = {
  encode(message: DeleteDeviceRegistryRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteDeviceRegistryRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteDeviceRegistryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteDeviceRegistryRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteDeviceRegistryRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteDeviceRegistryRequest>): DeleteDeviceRegistryRequest {
    return DeleteDeviceRegistryRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteDeviceRegistryRequest>): DeleteDeviceRegistryRequest {
    const message = createBaseDeleteDeviceRegistryRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpdateDeviceRegistryRequest(): UpdateDeviceRegistryRequest {
  return { deviceRegistry: undefined, updateMask: undefined };
}

export const UpdateDeviceRegistryRequest: MessageFns<UpdateDeviceRegistryRequest> = {
  encode(message: UpdateDeviceRegistryRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.deviceRegistry !== undefined) {
      DeviceRegistry.encode(message.deviceRegistry, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateDeviceRegistryRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateDeviceRegistryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.deviceRegistry = DeviceRegistry.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateDeviceRegistryRequest {
    return {
      deviceRegistry: isSet(object.deviceRegistry) ? DeviceRegistry.fromJSON(object.deviceRegistry) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateDeviceRegistryRequest): unknown {
    const obj: any = {};
    if (message.deviceRegistry !== undefined) {
      obj.deviceRegistry = DeviceRegistry.toJSON(message.deviceRegistry);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateDeviceRegistryRequest>): UpdateDeviceRegistryRequest {
    return UpdateDeviceRegistryRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateDeviceRegistryRequest>): UpdateDeviceRegistryRequest {
    const message = createBaseUpdateDeviceRegistryRequest();
    message.deviceRegistry = (object.deviceRegistry !== undefined && object.deviceRegistry !== null)
      ? DeviceRegistry.fromPartial(object.deviceRegistry)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseListDeviceRegistriesRequest(): ListDeviceRegistriesRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListDeviceRegistriesRequest: MessageFns<ListDeviceRegistriesRequest> = {
  encode(message: ListDeviceRegistriesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListDeviceRegistriesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListDeviceRegistriesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListDeviceRegistriesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListDeviceRegistriesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListDeviceRegistriesRequest>): ListDeviceRegistriesRequest {
    return ListDeviceRegistriesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListDeviceRegistriesRequest>): ListDeviceRegistriesRequest {
    const message = createBaseListDeviceRegistriesRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListDeviceRegistriesResponse(): ListDeviceRegistriesResponse {
  return { deviceRegistries: [], nextPageToken: "" };
}

export const ListDeviceRegistriesResponse: MessageFns<ListDeviceRegistriesResponse> = {
  encode(message: ListDeviceRegistriesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.deviceRegistries) {
      DeviceRegistry.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListDeviceRegistriesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListDeviceRegistriesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.deviceRegistries.push(DeviceRegistry.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListDeviceRegistriesResponse {
    return {
      deviceRegistries: globalThis.Array.isArray(object?.deviceRegistries)
        ? object.deviceRegistries.map((e: any) => DeviceRegistry.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListDeviceRegistriesResponse): unknown {
    const obj: any = {};
    if (message.deviceRegistries?.length) {
      obj.deviceRegistries = message.deviceRegistries.map((e) => DeviceRegistry.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListDeviceRegistriesResponse>): ListDeviceRegistriesResponse {
    return ListDeviceRegistriesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListDeviceRegistriesResponse>): ListDeviceRegistriesResponse {
    const message = createBaseListDeviceRegistriesResponse();
    message.deviceRegistries = object.deviceRegistries?.map((e) => DeviceRegistry.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseCreateDeviceRequest(): CreateDeviceRequest {
  return { parent: "", device: undefined };
}

export const CreateDeviceRequest: MessageFns<CreateDeviceRequest> = {
  encode(message: CreateDeviceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.device !== undefined) {
      Device.encode(message.device, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateDeviceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateDeviceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.device = Device.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateDeviceRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      device: isSet(object.device) ? Device.fromJSON(object.device) : undefined,
    };
  },

  toJSON(message: CreateDeviceRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.device !== undefined) {
      obj.device = Device.toJSON(message.device);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateDeviceRequest>): CreateDeviceRequest {
    return CreateDeviceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateDeviceRequest>): CreateDeviceRequest {
    const message = createBaseCreateDeviceRequest();
    message.parent = object.parent ?? "";
    message.device = (object.device !== undefined && object.device !== null)
      ? Device.fromPartial(object.device)
      : undefined;
    return message;
  },
};

function createBaseGetDeviceRequest(): GetDeviceRequest {
  return { name: "", fieldMask: undefined };
}

export const GetDeviceRequest: MessageFns<GetDeviceRequest> = {
  encode(message: GetDeviceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.fieldMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.fieldMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetDeviceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDeviceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.fieldMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDeviceRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      fieldMask: isSet(object.fieldMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.fieldMask)) : undefined,
    };
  },

  toJSON(message: GetDeviceRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.fieldMask !== undefined) {
      obj.fieldMask = FieldMask.toJSON(FieldMask.wrap(message.fieldMask));
    }
    return obj;
  },

  create(base?: DeepPartial<GetDeviceRequest>): GetDeviceRequest {
    return GetDeviceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetDeviceRequest>): GetDeviceRequest {
    const message = createBaseGetDeviceRequest();
    message.name = object.name ?? "";
    message.fieldMask = object.fieldMask ?? undefined;
    return message;
  },
};

function createBaseUpdateDeviceRequest(): UpdateDeviceRequest {
  return { device: undefined, updateMask: undefined };
}

export const UpdateDeviceRequest: MessageFns<UpdateDeviceRequest> = {
  encode(message: UpdateDeviceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.device !== undefined) {
      Device.encode(message.device, writer.uint32(18).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateDeviceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateDeviceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.device = Device.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateDeviceRequest {
    return {
      device: isSet(object.device) ? Device.fromJSON(object.device) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateDeviceRequest): unknown {
    const obj: any = {};
    if (message.device !== undefined) {
      obj.device = Device.toJSON(message.device);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateDeviceRequest>): UpdateDeviceRequest {
    return UpdateDeviceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateDeviceRequest>): UpdateDeviceRequest {
    const message = createBaseUpdateDeviceRequest();
    message.device = (object.device !== undefined && object.device !== null)
      ? Device.fromPartial(object.device)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseDeleteDeviceRequest(): DeleteDeviceRequest {
  return { name: "" };
}

export const DeleteDeviceRequest: MessageFns<DeleteDeviceRequest> = {
  encode(message: DeleteDeviceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteDeviceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteDeviceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteDeviceRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteDeviceRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteDeviceRequest>): DeleteDeviceRequest {
    return DeleteDeviceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteDeviceRequest>): DeleteDeviceRequest {
    const message = createBaseDeleteDeviceRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListDevicesRequest(): ListDevicesRequest {
  return {
    parent: "",
    deviceNumIds: [],
    deviceIds: [],
    fieldMask: undefined,
    gatewayListOptions: undefined,
    pageSize: 0,
    pageToken: "",
  };
}

export const ListDevicesRequest: MessageFns<ListDevicesRequest> = {
  encode(message: ListDevicesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    writer.uint32(18).fork();
    for (const v of message.deviceNumIds) {
      writer.uint64(v.toString());
    }
    writer.join();
    for (const v of message.deviceIds) {
      writer.uint32(26).string(v!);
    }
    if (message.fieldMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.fieldMask), writer.uint32(34).fork()).join();
    }
    if (message.gatewayListOptions !== undefined) {
      GatewayListOptions.encode(message.gatewayListOptions, writer.uint32(50).fork()).join();
    }
    if (message.pageSize !== 0) {
      writer.uint32(800).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(810).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListDevicesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListDevicesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag === 16) {
            message.deviceNumIds.push(Long.fromString(reader.uint64().toString(), true));

            continue;
          }

          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.deviceNumIds.push(Long.fromString(reader.uint64().toString(), true));
            }

            continue;
          }

          break;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.deviceIds.push(reader.string());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.fieldMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.gatewayListOptions = GatewayListOptions.decode(reader, reader.uint32());
          continue;
        case 100:
          if (tag !== 800) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 101:
          if (tag !== 810) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListDevicesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      deviceNumIds: globalThis.Array.isArray(object?.deviceNumIds)
        ? object.deviceNumIds.map((e: any) => Long.fromValue(e))
        : [],
      deviceIds: globalThis.Array.isArray(object?.deviceIds)
        ? object.deviceIds.map((e: any) => globalThis.String(e))
        : [],
      fieldMask: isSet(object.fieldMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.fieldMask)) : undefined,
      gatewayListOptions: isSet(object.gatewayListOptions)
        ? GatewayListOptions.fromJSON(object.gatewayListOptions)
        : undefined,
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListDevicesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.deviceNumIds?.length) {
      obj.deviceNumIds = message.deviceNumIds.map((e) => (e || Long.UZERO).toString());
    }
    if (message.deviceIds?.length) {
      obj.deviceIds = message.deviceIds;
    }
    if (message.fieldMask !== undefined) {
      obj.fieldMask = FieldMask.toJSON(FieldMask.wrap(message.fieldMask));
    }
    if (message.gatewayListOptions !== undefined) {
      obj.gatewayListOptions = GatewayListOptions.toJSON(message.gatewayListOptions);
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListDevicesRequest>): ListDevicesRequest {
    return ListDevicesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListDevicesRequest>): ListDevicesRequest {
    const message = createBaseListDevicesRequest();
    message.parent = object.parent ?? "";
    message.deviceNumIds = object.deviceNumIds?.map((e) => Long.fromValue(e)) || [];
    message.deviceIds = object.deviceIds?.map((e) => e) || [];
    message.fieldMask = object.fieldMask ?? undefined;
    message.gatewayListOptions = (object.gatewayListOptions !== undefined && object.gatewayListOptions !== null)
      ? GatewayListOptions.fromPartial(object.gatewayListOptions)
      : undefined;
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseGatewayListOptions(): GatewayListOptions {
  return { gatewayType: undefined, associationsGatewayId: undefined, associationsDeviceId: undefined };
}

export const GatewayListOptions: MessageFns<GatewayListOptions> = {
  encode(message: GatewayListOptions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.gatewayType !== undefined) {
      writer.uint32(8).int32(message.gatewayType);
    }
    if (message.associationsGatewayId !== undefined) {
      writer.uint32(18).string(message.associationsGatewayId);
    }
    if (message.associationsDeviceId !== undefined) {
      writer.uint32(26).string(message.associationsDeviceId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GatewayListOptions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGatewayListOptions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.gatewayType = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.associationsGatewayId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.associationsDeviceId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GatewayListOptions {
    return {
      gatewayType: isSet(object.gatewayType) ? gatewayTypeFromJSON(object.gatewayType) : undefined,
      associationsGatewayId: isSet(object.associationsGatewayId)
        ? globalThis.String(object.associationsGatewayId)
        : undefined,
      associationsDeviceId: isSet(object.associationsDeviceId)
        ? globalThis.String(object.associationsDeviceId)
        : undefined,
    };
  },

  toJSON(message: GatewayListOptions): unknown {
    const obj: any = {};
    if (message.gatewayType !== undefined) {
      obj.gatewayType = gatewayTypeToJSON(message.gatewayType);
    }
    if (message.associationsGatewayId !== undefined) {
      obj.associationsGatewayId = message.associationsGatewayId;
    }
    if (message.associationsDeviceId !== undefined) {
      obj.associationsDeviceId = message.associationsDeviceId;
    }
    return obj;
  },

  create(base?: DeepPartial<GatewayListOptions>): GatewayListOptions {
    return GatewayListOptions.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GatewayListOptions>): GatewayListOptions {
    const message = createBaseGatewayListOptions();
    message.gatewayType = object.gatewayType ?? undefined;
    message.associationsGatewayId = object.associationsGatewayId ?? undefined;
    message.associationsDeviceId = object.associationsDeviceId ?? undefined;
    return message;
  },
};

function createBaseListDevicesResponse(): ListDevicesResponse {
  return { devices: [], nextPageToken: "" };
}

export const ListDevicesResponse: MessageFns<ListDevicesResponse> = {
  encode(message: ListDevicesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.devices) {
      Device.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListDevicesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListDevicesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.devices.push(Device.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListDevicesResponse {
    return {
      devices: globalThis.Array.isArray(object?.devices) ? object.devices.map((e: any) => Device.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListDevicesResponse): unknown {
    const obj: any = {};
    if (message.devices?.length) {
      obj.devices = message.devices.map((e) => Device.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListDevicesResponse>): ListDevicesResponse {
    return ListDevicesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListDevicesResponse>): ListDevicesResponse {
    const message = createBaseListDevicesResponse();
    message.devices = object.devices?.map((e) => Device.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseModifyCloudToDeviceConfigRequest(): ModifyCloudToDeviceConfigRequest {
  return { name: "", versionToUpdate: Long.ZERO, binaryData: Buffer.alloc(0) };
}

export const ModifyCloudToDeviceConfigRequest: MessageFns<ModifyCloudToDeviceConfigRequest> = {
  encode(message: ModifyCloudToDeviceConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (!message.versionToUpdate.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.versionToUpdate.toString());
    }
    if (message.binaryData.length !== 0) {
      writer.uint32(26).bytes(message.binaryData);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ModifyCloudToDeviceConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseModifyCloudToDeviceConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.versionToUpdate = Long.fromString(reader.int64().toString());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.binaryData = Buffer.from(reader.bytes());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ModifyCloudToDeviceConfigRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      versionToUpdate: isSet(object.versionToUpdate) ? Long.fromValue(object.versionToUpdate) : Long.ZERO,
      binaryData: isSet(object.binaryData) ? Buffer.from(bytesFromBase64(object.binaryData)) : Buffer.alloc(0),
    };
  },

  toJSON(message: ModifyCloudToDeviceConfigRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (!message.versionToUpdate.equals(Long.ZERO)) {
      obj.versionToUpdate = (message.versionToUpdate || Long.ZERO).toString();
    }
    if (message.binaryData.length !== 0) {
      obj.binaryData = base64FromBytes(message.binaryData);
    }
    return obj;
  },

  create(base?: DeepPartial<ModifyCloudToDeviceConfigRequest>): ModifyCloudToDeviceConfigRequest {
    return ModifyCloudToDeviceConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ModifyCloudToDeviceConfigRequest>): ModifyCloudToDeviceConfigRequest {
    const message = createBaseModifyCloudToDeviceConfigRequest();
    message.name = object.name ?? "";
    message.versionToUpdate = (object.versionToUpdate !== undefined && object.versionToUpdate !== null)
      ? Long.fromValue(object.versionToUpdate)
      : Long.ZERO;
    message.binaryData = object.binaryData ?? Buffer.alloc(0);
    return message;
  },
};

function createBaseListDeviceConfigVersionsRequest(): ListDeviceConfigVersionsRequest {
  return { name: "", numVersions: 0 };
}

export const ListDeviceConfigVersionsRequest: MessageFns<ListDeviceConfigVersionsRequest> = {
  encode(message: ListDeviceConfigVersionsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.numVersions !== 0) {
      writer.uint32(16).int32(message.numVersions);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListDeviceConfigVersionsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListDeviceConfigVersionsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.numVersions = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListDeviceConfigVersionsRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      numVersions: isSet(object.numVersions) ? globalThis.Number(object.numVersions) : 0,
    };
  },

  toJSON(message: ListDeviceConfigVersionsRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.numVersions !== 0) {
      obj.numVersions = Math.round(message.numVersions);
    }
    return obj;
  },

  create(base?: DeepPartial<ListDeviceConfigVersionsRequest>): ListDeviceConfigVersionsRequest {
    return ListDeviceConfigVersionsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListDeviceConfigVersionsRequest>): ListDeviceConfigVersionsRequest {
    const message = createBaseListDeviceConfigVersionsRequest();
    message.name = object.name ?? "";
    message.numVersions = object.numVersions ?? 0;
    return message;
  },
};

function createBaseListDeviceConfigVersionsResponse(): ListDeviceConfigVersionsResponse {
  return { deviceConfigs: [] };
}

export const ListDeviceConfigVersionsResponse: MessageFns<ListDeviceConfigVersionsResponse> = {
  encode(message: ListDeviceConfigVersionsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.deviceConfigs) {
      DeviceConfig.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListDeviceConfigVersionsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListDeviceConfigVersionsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.deviceConfigs.push(DeviceConfig.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListDeviceConfigVersionsResponse {
    return {
      deviceConfigs: globalThis.Array.isArray(object?.deviceConfigs)
        ? object.deviceConfigs.map((e: any) => DeviceConfig.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ListDeviceConfigVersionsResponse): unknown {
    const obj: any = {};
    if (message.deviceConfigs?.length) {
      obj.deviceConfigs = message.deviceConfigs.map((e) => DeviceConfig.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ListDeviceConfigVersionsResponse>): ListDeviceConfigVersionsResponse {
    return ListDeviceConfigVersionsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListDeviceConfigVersionsResponse>): ListDeviceConfigVersionsResponse {
    const message = createBaseListDeviceConfigVersionsResponse();
    message.deviceConfigs = object.deviceConfigs?.map((e) => DeviceConfig.fromPartial(e)) || [];
    return message;
  },
};

function createBaseListDeviceStatesRequest(): ListDeviceStatesRequest {
  return { name: "", numStates: 0 };
}

export const ListDeviceStatesRequest: MessageFns<ListDeviceStatesRequest> = {
  encode(message: ListDeviceStatesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.numStates !== 0) {
      writer.uint32(16).int32(message.numStates);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListDeviceStatesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListDeviceStatesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.numStates = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListDeviceStatesRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      numStates: isSet(object.numStates) ? globalThis.Number(object.numStates) : 0,
    };
  },

  toJSON(message: ListDeviceStatesRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.numStates !== 0) {
      obj.numStates = Math.round(message.numStates);
    }
    return obj;
  },

  create(base?: DeepPartial<ListDeviceStatesRequest>): ListDeviceStatesRequest {
    return ListDeviceStatesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListDeviceStatesRequest>): ListDeviceStatesRequest {
    const message = createBaseListDeviceStatesRequest();
    message.name = object.name ?? "";
    message.numStates = object.numStates ?? 0;
    return message;
  },
};

function createBaseListDeviceStatesResponse(): ListDeviceStatesResponse {
  return { deviceStates: [] };
}

export const ListDeviceStatesResponse: MessageFns<ListDeviceStatesResponse> = {
  encode(message: ListDeviceStatesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.deviceStates) {
      DeviceState.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListDeviceStatesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListDeviceStatesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.deviceStates.push(DeviceState.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListDeviceStatesResponse {
    return {
      deviceStates: globalThis.Array.isArray(object?.deviceStates)
        ? object.deviceStates.map((e: any) => DeviceState.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ListDeviceStatesResponse): unknown {
    const obj: any = {};
    if (message.deviceStates?.length) {
      obj.deviceStates = message.deviceStates.map((e) => DeviceState.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ListDeviceStatesResponse>): ListDeviceStatesResponse {
    return ListDeviceStatesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListDeviceStatesResponse>): ListDeviceStatesResponse {
    const message = createBaseListDeviceStatesResponse();
    message.deviceStates = object.deviceStates?.map((e) => DeviceState.fromPartial(e)) || [];
    return message;
  },
};

function createBaseSendCommandToDeviceRequest(): SendCommandToDeviceRequest {
  return { name: "", binaryData: Buffer.alloc(0), subfolder: "" };
}

export const SendCommandToDeviceRequest: MessageFns<SendCommandToDeviceRequest> = {
  encode(message: SendCommandToDeviceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.binaryData.length !== 0) {
      writer.uint32(18).bytes(message.binaryData);
    }
    if (message.subfolder !== "") {
      writer.uint32(26).string(message.subfolder);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SendCommandToDeviceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSendCommandToDeviceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.binaryData = Buffer.from(reader.bytes());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.subfolder = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SendCommandToDeviceRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      binaryData: isSet(object.binaryData) ? Buffer.from(bytesFromBase64(object.binaryData)) : Buffer.alloc(0),
      subfolder: isSet(object.subfolder) ? globalThis.String(object.subfolder) : "",
    };
  },

  toJSON(message: SendCommandToDeviceRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.binaryData.length !== 0) {
      obj.binaryData = base64FromBytes(message.binaryData);
    }
    if (message.subfolder !== "") {
      obj.subfolder = message.subfolder;
    }
    return obj;
  },

  create(base?: DeepPartial<SendCommandToDeviceRequest>): SendCommandToDeviceRequest {
    return SendCommandToDeviceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SendCommandToDeviceRequest>): SendCommandToDeviceRequest {
    const message = createBaseSendCommandToDeviceRequest();
    message.name = object.name ?? "";
    message.binaryData = object.binaryData ?? Buffer.alloc(0);
    message.subfolder = object.subfolder ?? "";
    return message;
  },
};

function createBaseSendCommandToDeviceResponse(): SendCommandToDeviceResponse {
  return {};
}

export const SendCommandToDeviceResponse: MessageFns<SendCommandToDeviceResponse> = {
  encode(_: SendCommandToDeviceResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SendCommandToDeviceResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSendCommandToDeviceResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): SendCommandToDeviceResponse {
    return {};
  },

  toJSON(_: SendCommandToDeviceResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<SendCommandToDeviceResponse>): SendCommandToDeviceResponse {
    return SendCommandToDeviceResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<SendCommandToDeviceResponse>): SendCommandToDeviceResponse {
    const message = createBaseSendCommandToDeviceResponse();
    return message;
  },
};

function createBaseBindDeviceToGatewayRequest(): BindDeviceToGatewayRequest {
  return { parent: "", gatewayId: "", deviceId: "" };
}

export const BindDeviceToGatewayRequest: MessageFns<BindDeviceToGatewayRequest> = {
  encode(message: BindDeviceToGatewayRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.gatewayId !== "") {
      writer.uint32(18).string(message.gatewayId);
    }
    if (message.deviceId !== "") {
      writer.uint32(26).string(message.deviceId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BindDeviceToGatewayRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBindDeviceToGatewayRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.gatewayId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.deviceId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BindDeviceToGatewayRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      gatewayId: isSet(object.gatewayId) ? globalThis.String(object.gatewayId) : "",
      deviceId: isSet(object.deviceId) ? globalThis.String(object.deviceId) : "",
    };
  },

  toJSON(message: BindDeviceToGatewayRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.gatewayId !== "") {
      obj.gatewayId = message.gatewayId;
    }
    if (message.deviceId !== "") {
      obj.deviceId = message.deviceId;
    }
    return obj;
  },

  create(base?: DeepPartial<BindDeviceToGatewayRequest>): BindDeviceToGatewayRequest {
    return BindDeviceToGatewayRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BindDeviceToGatewayRequest>): BindDeviceToGatewayRequest {
    const message = createBaseBindDeviceToGatewayRequest();
    message.parent = object.parent ?? "";
    message.gatewayId = object.gatewayId ?? "";
    message.deviceId = object.deviceId ?? "";
    return message;
  },
};

function createBaseBindDeviceToGatewayResponse(): BindDeviceToGatewayResponse {
  return {};
}

export const BindDeviceToGatewayResponse: MessageFns<BindDeviceToGatewayResponse> = {
  encode(_: BindDeviceToGatewayResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BindDeviceToGatewayResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBindDeviceToGatewayResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): BindDeviceToGatewayResponse {
    return {};
  },

  toJSON(_: BindDeviceToGatewayResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<BindDeviceToGatewayResponse>): BindDeviceToGatewayResponse {
    return BindDeviceToGatewayResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<BindDeviceToGatewayResponse>): BindDeviceToGatewayResponse {
    const message = createBaseBindDeviceToGatewayResponse();
    return message;
  },
};

function createBaseUnbindDeviceFromGatewayRequest(): UnbindDeviceFromGatewayRequest {
  return { parent: "", gatewayId: "", deviceId: "" };
}

export const UnbindDeviceFromGatewayRequest: MessageFns<UnbindDeviceFromGatewayRequest> = {
  encode(message: UnbindDeviceFromGatewayRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.gatewayId !== "") {
      writer.uint32(18).string(message.gatewayId);
    }
    if (message.deviceId !== "") {
      writer.uint32(26).string(message.deviceId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UnbindDeviceFromGatewayRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUnbindDeviceFromGatewayRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.gatewayId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.deviceId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UnbindDeviceFromGatewayRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      gatewayId: isSet(object.gatewayId) ? globalThis.String(object.gatewayId) : "",
      deviceId: isSet(object.deviceId) ? globalThis.String(object.deviceId) : "",
    };
  },

  toJSON(message: UnbindDeviceFromGatewayRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.gatewayId !== "") {
      obj.gatewayId = message.gatewayId;
    }
    if (message.deviceId !== "") {
      obj.deviceId = message.deviceId;
    }
    return obj;
  },

  create(base?: DeepPartial<UnbindDeviceFromGatewayRequest>): UnbindDeviceFromGatewayRequest {
    return UnbindDeviceFromGatewayRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UnbindDeviceFromGatewayRequest>): UnbindDeviceFromGatewayRequest {
    const message = createBaseUnbindDeviceFromGatewayRequest();
    message.parent = object.parent ?? "";
    message.gatewayId = object.gatewayId ?? "";
    message.deviceId = object.deviceId ?? "";
    return message;
  },
};

function createBaseUnbindDeviceFromGatewayResponse(): UnbindDeviceFromGatewayResponse {
  return {};
}

export const UnbindDeviceFromGatewayResponse: MessageFns<UnbindDeviceFromGatewayResponse> = {
  encode(_: UnbindDeviceFromGatewayResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UnbindDeviceFromGatewayResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUnbindDeviceFromGatewayResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): UnbindDeviceFromGatewayResponse {
    return {};
  },

  toJSON(_: UnbindDeviceFromGatewayResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<UnbindDeviceFromGatewayResponse>): UnbindDeviceFromGatewayResponse {
    return UnbindDeviceFromGatewayResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<UnbindDeviceFromGatewayResponse>): UnbindDeviceFromGatewayResponse {
    const message = createBaseUnbindDeviceFromGatewayResponse();
    return message;
  },
};

/** Internet of Things (IoT) service. Securely connect and manage IoT devices. */
export type DeviceManagerDefinition = typeof DeviceManagerDefinition;
export const DeviceManagerDefinition = {
  name: "DeviceManager",
  fullName: "google.cloud.iot.v1.DeviceManager",
  methods: {
    /** Creates a device registry that contains devices. */
    createDeviceRegistry: {
      name: "CreateDeviceRegistry",
      requestType: CreateDeviceRegistryRequest,
      requestStream: false,
      responseType: DeviceRegistry,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              22,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              100,
              101,
              118,
              105,
              99,
              101,
              95,
              114,
              101,
              103,
              105,
              115,
              116,
              114,
              121,
            ]),
          ],
          578365826: [
            Buffer.from([
              65,
              58,
              15,
              100,
              101,
              118,
              105,
              99,
              101,
              95,
              114,
              101,
              103,
              105,
              115,
              116,
              114,
              121,
              34,
              46,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              114,
              101,
              103,
              105,
              115,
              116,
              114,
              105,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets a device registry configuration. */
    getDeviceRegistry: {
      name: "GetDeviceRegistry",
      requestType: GetDeviceRegistryRequest,
      requestStream: false,
      responseType: DeviceRegistry,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              48,
              18,
              46,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              114,
              101,
              103,
              105,
              115,
              116,
              114,
              105,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Updates a device registry configuration. */
    updateDeviceRegistry: {
      name: "UpdateDeviceRegistry",
      requestType: UpdateDeviceRegistryRequest,
      requestStream: false,
      responseType: DeviceRegistry,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              27,
              100,
              101,
              118,
              105,
              99,
              101,
              95,
              114,
              101,
              103,
              105,
              115,
              116,
              114,
              121,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              81,
              58,
              15,
              100,
              101,
              118,
              105,
              99,
              101,
              95,
              114,
              101,
              103,
              105,
              115,
              116,
              114,
              121,
              50,
              62,
              47,
              118,
              49,
              47,
              123,
              100,
              101,
              118,
              105,
              99,
              101,
              95,
              114,
              101,
              103,
              105,
              115,
              116,
              114,
              121,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              114,
              101,
              103,
              105,
              115,
              116,
              114,
              105,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes a device registry configuration. */
    deleteDeviceRegistry: {
      name: "DeleteDeviceRegistry",
      requestType: DeleteDeviceRegistryRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              48,
              42,
              46,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              114,
              101,
              103,
              105,
              115,
              116,
              114,
              105,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists device registries. */
    listDeviceRegistries: {
      name: "ListDeviceRegistries",
      requestType: ListDeviceRegistriesRequest,
      requestStream: false,
      responseType: ListDeviceRegistriesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              48,
              18,
              46,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              114,
              101,
              103,
              105,
              115,
              116,
              114,
              105,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Creates a device in a device registry. */
    createDevice: {
      name: "CreateDevice",
      requestType: CreateDeviceRequest,
      requestStream: false,
      responseType: Device,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([13, 112, 97, 114, 101, 110, 116, 44, 100, 101, 118, 105, 99, 101])],
          578365826: [
            Buffer.from([
              66,
              58,
              6,
              100,
              101,
              118,
              105,
              99,
              101,
              34,
              56,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              114,
              101,
              103,
              105,
              115,
              116,
              114,
              105,
              101,
              115,
              47,
              42,
              125,
              47,
              100,
              101,
              118,
              105,
              99,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets details about a device. */
    getDevice: {
      name: "GetDevice",
      requestType: GetDeviceRequest,
      requestStream: false,
      responseType: Device,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              127,
              90,
              67,
              18,
              65,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              114,
              101,
              103,
              105,
              115,
              116,
              114,
              105,
              101,
              115,
              47,
              42,
              47,
              103,
              114,
              111,
              117,
              112,
              115,
              47,
              42,
              47,
              100,
              101,
              118,
              105,
              99,
              101,
              115,
              47,
              42,
              125,
              18,
              56,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              114,
              101,
              103,
              105,
              115,
              116,
              114,
              105,
              101,
              115,
              47,
              42,
              47,
              100,
              101,
              118,
              105,
              99,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Updates a device. */
    updateDevice: {
      name: "UpdateDevice",
      requestType: UpdateDeviceRequest,
      requestStream: false,
      responseType: Device,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([18, 100, 101, 118, 105, 99, 101, 44, 117, 112, 100, 97, 116, 101, 95, 109, 97, 115, 107]),
          ],
          578365826: [
            Buffer.from([
              157,
              1,
              58,
              6,
              100,
              101,
              118,
              105,
              99,
              101,
              90,
              82,
              58,
              6,
              100,
              101,
              118,
              105,
              99,
              101,
              50,
              72,
              47,
              118,
              49,
              47,
              123,
              100,
              101,
              118,
              105,
              99,
              101,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              114,
              101,
              103,
              105,
              115,
              116,
              114,
              105,
              101,
              115,
              47,
              42,
              47,
              103,
              114,
              111,
              117,
              112,
              115,
              47,
              42,
              47,
              100,
              101,
              118,
              105,
              99,
              101,
              115,
              47,
              42,
              125,
              50,
              63,
              47,
              118,
              49,
              47,
              123,
              100,
              101,
              118,
              105,
              99,
              101,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              114,
              101,
              103,
              105,
              115,
              116,
              114,
              105,
              101,
              115,
              47,
              42,
              47,
              100,
              101,
              118,
              105,
              99,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes a device. */
    deleteDevice: {
      name: "DeleteDevice",
      requestType: DeleteDeviceRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              58,
              42,
              56,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              114,
              101,
              103,
              105,
              115,
              116,
              114,
              105,
              101,
              115,
              47,
              42,
              47,
              100,
              101,
              118,
              105,
              99,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** List devices in a device registry. */
    listDevices: {
      name: "ListDevices",
      requestType: ListDevicesRequest,
      requestStream: false,
      responseType: ListDevicesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              127,
              90,
              67,
              18,
              65,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              114,
              101,
              103,
              105,
              115,
              116,
              114,
              105,
              101,
              115,
              47,
              42,
              47,
              103,
              114,
              111,
              117,
              112,
              115,
              47,
              42,
              125,
              47,
              100,
              101,
              118,
              105,
              99,
              101,
              115,
              18,
              56,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              114,
              101,
              103,
              105,
              115,
              116,
              114,
              105,
              101,
              115,
              47,
              42,
              125,
              47,
              100,
              101,
              118,
              105,
              99,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Modifies the configuration for the device, which is eventually sent from
     * the Cloud IoT Core servers. Returns the modified configuration version and
     * its metadata.
     */
    modifyCloudToDeviceConfig: {
      name: "ModifyCloudToDeviceConfig",
      requestType: ModifyCloudToDeviceConfigRequest,
      requestStream: false,
      responseType: DeviceConfig,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([16, 110, 97, 109, 101, 44, 98, 105, 110, 97, 114, 121, 95, 100, 97, 116, 97])],
          578365826: [
            Buffer.from([
              185,
              1,
              58,
              1,
              42,
              90,
              96,
              58,
              1,
              42,
              34,
              91,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              114,
              101,
              103,
              105,
              115,
              116,
              114,
              105,
              101,
              115,
              47,
              42,
              47,
              103,
              114,
              111,
              117,
              112,
              115,
              47,
              42,
              47,
              100,
              101,
              118,
              105,
              99,
              101,
              115,
              47,
              42,
              125,
              58,
              109,
              111,
              100,
              105,
              102,
              121,
              67,
              108,
              111,
              117,
              100,
              84,
              111,
              68,
              101,
              118,
              105,
              99,
              101,
              67,
              111,
              110,
              102,
              105,
              103,
              34,
              82,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              114,
              101,
              103,
              105,
              115,
              116,
              114,
              105,
              101,
              115,
              47,
              42,
              47,
              100,
              101,
              118,
              105,
              99,
              101,
              115,
              47,
              42,
              125,
              58,
              109,
              111,
              100,
              105,
              102,
              121,
              67,
              108,
              111,
              117,
              100,
              84,
              111,
              68,
              101,
              118,
              105,
              99,
              101,
              67,
              111,
              110,
              102,
              105,
              103,
            ]),
          ],
        },
      },
    },
    /**
     * Lists the last few versions of the device configuration in descending
     * order (i.e.: newest first).
     */
    listDeviceConfigVersions: {
      name: "ListDeviceConfigVersions",
      requestType: ListDeviceConfigVersionsRequest,
      requestStream: false,
      responseType: ListDeviceConfigVersionsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              157,
              1,
              90,
              82,
              18,
              80,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              114,
              101,
              103,
              105,
              115,
              116,
              114,
              105,
              101,
              115,
              47,
              42,
              47,
              103,
              114,
              111,
              117,
              112,
              115,
              47,
              42,
              47,
              100,
              101,
              118,
              105,
              99,
              101,
              115,
              47,
              42,
              125,
              47,
              99,
              111,
              110,
              102,
              105,
              103,
              86,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
              18,
              71,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              114,
              101,
              103,
              105,
              115,
              116,
              114,
              105,
              101,
              115,
              47,
              42,
              47,
              100,
              101,
              118,
              105,
              99,
              101,
              115,
              47,
              42,
              125,
              47,
              99,
              111,
              110,
              102,
              105,
              103,
              86,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Lists the last few versions of the device state in descending order (i.e.:
     * newest first).
     */
    listDeviceStates: {
      name: "ListDeviceStates",
      requestType: ListDeviceStatesRequest,
      requestStream: false,
      responseType: ListDeviceStatesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              141,
              1,
              90,
              74,
              18,
              72,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              114,
              101,
              103,
              105,
              115,
              116,
              114,
              105,
              101,
              115,
              47,
              42,
              47,
              103,
              114,
              111,
              117,
              112,
              115,
              47,
              42,
              47,
              100,
              101,
              118,
              105,
              99,
              101,
              115,
              47,
              42,
              125,
              47,
              115,
              116,
              97,
              116,
              101,
              115,
              18,
              63,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              114,
              101,
              103,
              105,
              115,
              116,
              114,
              105,
              101,
              115,
              47,
              42,
              47,
              100,
              101,
              118,
              105,
              99,
              101,
              115,
              47,
              42,
              125,
              47,
              115,
              116,
              97,
              116,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Sets the access control policy on the specified resource. Replaces any
     * existing policy.
     */
    setIamPolicy: {
      name: "SetIamPolicy",
      requestType: SetIamPolicyRequest,
      requestStream: false,
      responseType: Policy,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([15, 114, 101, 115, 111, 117, 114, 99, 101, 44, 112, 111, 108, 105, 99, 121])],
          578365826: [
            Buffer.from([
              147,
              1,
              58,
              1,
              42,
              90,
              77,
              58,
              1,
              42,
              34,
              72,
              47,
              118,
              49,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              114,
              101,
              103,
              105,
              115,
              116,
              114,
              105,
              101,
              115,
              47,
              42,
              47,
              103,
              114,
              111,
              117,
              112,
              115,
              47,
              42,
              125,
              58,
              115,
              101,
              116,
              73,
              97,
              109,
              80,
              111,
              108,
              105,
              99,
              121,
              34,
              63,
              47,
              118,
              49,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              114,
              101,
              103,
              105,
              115,
              116,
              114,
              105,
              101,
              115,
              47,
              42,
              125,
              58,
              115,
              101,
              116,
              73,
              97,
              109,
              80,
              111,
              108,
              105,
              99,
              121,
            ]),
          ],
        },
      },
    },
    /**
     * Gets the access control policy for a resource.
     * Returns an empty policy if the resource exists and does not have a policy
     * set.
     */
    getIamPolicy: {
      name: "GetIamPolicy",
      requestType: GetIamPolicyRequest,
      requestStream: false,
      responseType: Policy,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([8, 114, 101, 115, 111, 117, 114, 99, 101])],
          578365826: [
            Buffer.from([
              147,
              1,
              58,
              1,
              42,
              90,
              77,
              58,
              1,
              42,
              34,
              72,
              47,
              118,
              49,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              114,
              101,
              103,
              105,
              115,
              116,
              114,
              105,
              101,
              115,
              47,
              42,
              47,
              103,
              114,
              111,
              117,
              112,
              115,
              47,
              42,
              125,
              58,
              103,
              101,
              116,
              73,
              97,
              109,
              80,
              111,
              108,
              105,
              99,
              121,
              34,
              63,
              47,
              118,
              49,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              114,
              101,
              103,
              105,
              115,
              116,
              114,
              105,
              101,
              115,
              47,
              42,
              125,
              58,
              103,
              101,
              116,
              73,
              97,
              109,
              80,
              111,
              108,
              105,
              99,
              121,
            ]),
          ],
        },
      },
    },
    /**
     * Returns permissions that a caller has on the specified resource.
     * If the resource does not exist, this will return an empty set of
     * permissions, not a NOT_FOUND error.
     */
    testIamPermissions: {
      name: "TestIamPermissions",
      requestType: TestIamPermissionsRequest,
      requestStream: false,
      responseType: TestIamPermissionsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              20,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              44,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              115,
            ]),
          ],
          578365826: [
            Buffer.from([
              159,
              1,
              58,
              1,
              42,
              90,
              83,
              58,
              1,
              42,
              34,
              78,
              47,
              118,
              49,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              114,
              101,
              103,
              105,
              115,
              116,
              114,
              105,
              101,
              115,
              47,
              42,
              47,
              103,
              114,
              111,
              117,
              112,
              115,
              47,
              42,
              125,
              58,
              116,
              101,
              115,
              116,
              73,
              97,
              109,
              80,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              115,
              34,
              69,
              47,
              118,
              49,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              114,
              101,
              103,
              105,
              115,
              116,
              114,
              105,
              101,
              115,
              47,
              42,
              125,
              58,
              116,
              101,
              115,
              116,
              73,
              97,
              109,
              80,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Sends a command to the specified device. In order for a device to be able
     * to receive commands, it must:
     * 1) be connected to Cloud IoT Core using the MQTT protocol, and
     * 2) be subscribed to the group of MQTT topics specified by
     *    /devices/{device-id}/commands/#. This subscription will receive commands
     *    at the top-level topic /devices/{device-id}/commands as well as commands
     *    for subfolders, like /devices/{device-id}/commands/subfolder.
     *    Note that subscribing to specific subfolders is not supported.
     * If the command could not be delivered to the device, this method will
     * return an error; in particular, if the device is not subscribed, this
     * method will return FAILED_PRECONDITION. Otherwise, this method will
     * return OK. If the subscription is QoS 1, at least once delivery will be
     * guaranteed; for QoS 0, no acknowledgment will be expected from the device.
     */
    sendCommandToDevice: {
      name: "SendCommandToDevice",
      requestType: SendCommandToDeviceRequest,
      requestStream: false,
      responseType: SendCommandToDeviceResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([16, 110, 97, 109, 101, 44, 98, 105, 110, 97, 114, 121, 95, 100, 97, 116, 97]),
            Buffer.from([
              26,
              110,
              97,
              109,
              101,
              44,
              98,
              105,
              110,
              97,
              114,
              121,
              95,
              100,
              97,
              116,
              97,
              44,
              115,
              117,
              98,
              102,
              111,
              108,
              100,
              101,
              114,
            ]),
          ],
          578365826: [
            Buffer.from([
              173,
              1,
              58,
              1,
              42,
              90,
              90,
              58,
              1,
              42,
              34,
              85,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              114,
              101,
              103,
              105,
              115,
              116,
              114,
              105,
              101,
              115,
              47,
              42,
              47,
              103,
              114,
              111,
              117,
              112,
              115,
              47,
              42,
              47,
              100,
              101,
              118,
              105,
              99,
              101,
              115,
              47,
              42,
              125,
              58,
              115,
              101,
              110,
              100,
              67,
              111,
              109,
              109,
              97,
              110,
              100,
              84,
              111,
              68,
              101,
              118,
              105,
              99,
              101,
              34,
              76,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              114,
              101,
              103,
              105,
              115,
              116,
              114,
              105,
              101,
              115,
              47,
              42,
              47,
              100,
              101,
              118,
              105,
              99,
              101,
              115,
              47,
              42,
              125,
              58,
              115,
              101,
              110,
              100,
              67,
              111,
              109,
              109,
              97,
              110,
              100,
              84,
              111,
              68,
              101,
              118,
              105,
              99,
              101,
            ]),
          ],
        },
      },
    },
    /** Associates the device with the gateway. */
    bindDeviceToGateway: {
      name: "BindDeviceToGateway",
      requestType: BindDeviceToGatewayRequest,
      requestStream: false,
      responseType: BindDeviceToGatewayResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              27,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              95,
              105,
              100,
              44,
              100,
              101,
              118,
              105,
              99,
              101,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              157,
              1,
              58,
              1,
              42,
              90,
              82,
              58,
              1,
              42,
              34,
              77,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              114,
              101,
              103,
              105,
              115,
              116,
              114,
              105,
              101,
              115,
              47,
              42,
              47,
              103,
              114,
              111,
              117,
              112,
              115,
              47,
              42,
              125,
              58,
              98,
              105,
              110,
              100,
              68,
              101,
              118,
              105,
              99,
              101,
              84,
              111,
              71,
              97,
              116,
              101,
              119,
              97,
              121,
              34,
              68,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              114,
              101,
              103,
              105,
              115,
              116,
              114,
              105,
              101,
              115,
              47,
              42,
              125,
              58,
              98,
              105,
              110,
              100,
              68,
              101,
              118,
              105,
              99,
              101,
              84,
              111,
              71,
              97,
              116,
              101,
              119,
              97,
              121,
            ]),
          ],
        },
      },
    },
    /** Deletes the association between the device and the gateway. */
    unbindDeviceFromGateway: {
      name: "UnbindDeviceFromGateway",
      requestType: UnbindDeviceFromGatewayRequest,
      requestStream: false,
      responseType: UnbindDeviceFromGatewayResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              27,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              95,
              105,
              100,
              44,
              100,
              101,
              118,
              105,
              99,
              101,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              165,
              1,
              58,
              1,
              42,
              90,
              86,
              58,
              1,
              42,
              34,
              81,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              114,
              101,
              103,
              105,
              115,
              116,
              114,
              105,
              101,
              115,
              47,
              42,
              47,
              103,
              114,
              111,
              117,
              112,
              115,
              47,
              42,
              125,
              58,
              117,
              110,
              98,
              105,
              110,
              100,
              68,
              101,
              118,
              105,
              99,
              101,
              70,
              114,
              111,
              109,
              71,
              97,
              116,
              101,
              119,
              97,
              121,
              34,
              72,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              114,
              101,
              103,
              105,
              115,
              116,
              114,
              105,
              101,
              115,
              47,
              42,
              125,
              58,
              117,
              110,
              98,
              105,
              110,
              100,
              68,
              101,
              118,
              105,
              99,
              101,
              70,
              114,
              111,
              109,
              71,
              97,
              116,
              101,
              119,
              97,
              121,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface DeviceManagerServiceImplementation<CallContextExt = {}> {
  /** Creates a device registry that contains devices. */
  createDeviceRegistry(
    request: CreateDeviceRegistryRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<DeviceRegistry>>;
  /** Gets a device registry configuration. */
  getDeviceRegistry(
    request: GetDeviceRegistryRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<DeviceRegistry>>;
  /** Updates a device registry configuration. */
  updateDeviceRegistry(
    request: UpdateDeviceRegistryRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<DeviceRegistry>>;
  /** Deletes a device registry configuration. */
  deleteDeviceRegistry(
    request: DeleteDeviceRegistryRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  /** Lists device registries. */
  listDeviceRegistries(
    request: ListDeviceRegistriesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListDeviceRegistriesResponse>>;
  /** Creates a device in a device registry. */
  createDevice(request: CreateDeviceRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Device>>;
  /** Gets details about a device. */
  getDevice(request: GetDeviceRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Device>>;
  /** Updates a device. */
  updateDevice(request: UpdateDeviceRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Device>>;
  /** Deletes a device. */
  deleteDevice(request: DeleteDeviceRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
  /** List devices in a device registry. */
  listDevices(
    request: ListDevicesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListDevicesResponse>>;
  /**
   * Modifies the configuration for the device, which is eventually sent from
   * the Cloud IoT Core servers. Returns the modified configuration version and
   * its metadata.
   */
  modifyCloudToDeviceConfig(
    request: ModifyCloudToDeviceConfigRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<DeviceConfig>>;
  /**
   * Lists the last few versions of the device configuration in descending
   * order (i.e.: newest first).
   */
  listDeviceConfigVersions(
    request: ListDeviceConfigVersionsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListDeviceConfigVersionsResponse>>;
  /**
   * Lists the last few versions of the device state in descending order (i.e.:
   * newest first).
   */
  listDeviceStates(
    request: ListDeviceStatesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListDeviceStatesResponse>>;
  /**
   * Sets the access control policy on the specified resource. Replaces any
   * existing policy.
   */
  setIamPolicy(request: SetIamPolicyRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Policy>>;
  /**
   * Gets the access control policy for a resource.
   * Returns an empty policy if the resource exists and does not have a policy
   * set.
   */
  getIamPolicy(request: GetIamPolicyRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Policy>>;
  /**
   * Returns permissions that a caller has on the specified resource.
   * If the resource does not exist, this will return an empty set of
   * permissions, not a NOT_FOUND error.
   */
  testIamPermissions(
    request: TestIamPermissionsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<TestIamPermissionsResponse>>;
  /**
   * Sends a command to the specified device. In order for a device to be able
   * to receive commands, it must:
   * 1) be connected to Cloud IoT Core using the MQTT protocol, and
   * 2) be subscribed to the group of MQTT topics specified by
   *    /devices/{device-id}/commands/#. This subscription will receive commands
   *    at the top-level topic /devices/{device-id}/commands as well as commands
   *    for subfolders, like /devices/{device-id}/commands/subfolder.
   *    Note that subscribing to specific subfolders is not supported.
   * If the command could not be delivered to the device, this method will
   * return an error; in particular, if the device is not subscribed, this
   * method will return FAILED_PRECONDITION. Otherwise, this method will
   * return OK. If the subscription is QoS 1, at least once delivery will be
   * guaranteed; for QoS 0, no acknowledgment will be expected from the device.
   */
  sendCommandToDevice(
    request: SendCommandToDeviceRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SendCommandToDeviceResponse>>;
  /** Associates the device with the gateway. */
  bindDeviceToGateway(
    request: BindDeviceToGatewayRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<BindDeviceToGatewayResponse>>;
  /** Deletes the association between the device and the gateway. */
  unbindDeviceFromGateway(
    request: UnbindDeviceFromGatewayRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UnbindDeviceFromGatewayResponse>>;
}

export interface DeviceManagerClient<CallOptionsExt = {}> {
  /** Creates a device registry that contains devices. */
  createDeviceRegistry(
    request: DeepPartial<CreateDeviceRegistryRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<DeviceRegistry>;
  /** Gets a device registry configuration. */
  getDeviceRegistry(
    request: DeepPartial<GetDeviceRegistryRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<DeviceRegistry>;
  /** Updates a device registry configuration. */
  updateDeviceRegistry(
    request: DeepPartial<UpdateDeviceRegistryRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<DeviceRegistry>;
  /** Deletes a device registry configuration. */
  deleteDeviceRegistry(
    request: DeepPartial<DeleteDeviceRegistryRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  /** Lists device registries. */
  listDeviceRegistries(
    request: DeepPartial<ListDeviceRegistriesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListDeviceRegistriesResponse>;
  /** Creates a device in a device registry. */
  createDevice(request: DeepPartial<CreateDeviceRequest>, options?: CallOptions & CallOptionsExt): Promise<Device>;
  /** Gets details about a device. */
  getDevice(request: DeepPartial<GetDeviceRequest>, options?: CallOptions & CallOptionsExt): Promise<Device>;
  /** Updates a device. */
  updateDevice(request: DeepPartial<UpdateDeviceRequest>, options?: CallOptions & CallOptionsExt): Promise<Device>;
  /** Deletes a device. */
  deleteDevice(request: DeepPartial<DeleteDeviceRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
  /** List devices in a device registry. */
  listDevices(
    request: DeepPartial<ListDevicesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListDevicesResponse>;
  /**
   * Modifies the configuration for the device, which is eventually sent from
   * the Cloud IoT Core servers. Returns the modified configuration version and
   * its metadata.
   */
  modifyCloudToDeviceConfig(
    request: DeepPartial<ModifyCloudToDeviceConfigRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<DeviceConfig>;
  /**
   * Lists the last few versions of the device configuration in descending
   * order (i.e.: newest first).
   */
  listDeviceConfigVersions(
    request: DeepPartial<ListDeviceConfigVersionsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListDeviceConfigVersionsResponse>;
  /**
   * Lists the last few versions of the device state in descending order (i.e.:
   * newest first).
   */
  listDeviceStates(
    request: DeepPartial<ListDeviceStatesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListDeviceStatesResponse>;
  /**
   * Sets the access control policy on the specified resource. Replaces any
   * existing policy.
   */
  setIamPolicy(request: DeepPartial<SetIamPolicyRequest>, options?: CallOptions & CallOptionsExt): Promise<Policy>;
  /**
   * Gets the access control policy for a resource.
   * Returns an empty policy if the resource exists and does not have a policy
   * set.
   */
  getIamPolicy(request: DeepPartial<GetIamPolicyRequest>, options?: CallOptions & CallOptionsExt): Promise<Policy>;
  /**
   * Returns permissions that a caller has on the specified resource.
   * If the resource does not exist, this will return an empty set of
   * permissions, not a NOT_FOUND error.
   */
  testIamPermissions(
    request: DeepPartial<TestIamPermissionsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<TestIamPermissionsResponse>;
  /**
   * Sends a command to the specified device. In order for a device to be able
   * to receive commands, it must:
   * 1) be connected to Cloud IoT Core using the MQTT protocol, and
   * 2) be subscribed to the group of MQTT topics specified by
   *    /devices/{device-id}/commands/#. This subscription will receive commands
   *    at the top-level topic /devices/{device-id}/commands as well as commands
   *    for subfolders, like /devices/{device-id}/commands/subfolder.
   *    Note that subscribing to specific subfolders is not supported.
   * If the command could not be delivered to the device, this method will
   * return an error; in particular, if the device is not subscribed, this
   * method will return FAILED_PRECONDITION. Otherwise, this method will
   * return OK. If the subscription is QoS 1, at least once delivery will be
   * guaranteed; for QoS 0, no acknowledgment will be expected from the device.
   */
  sendCommandToDevice(
    request: DeepPartial<SendCommandToDeviceRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SendCommandToDeviceResponse>;
  /** Associates the device with the gateway. */
  bindDeviceToGateway(
    request: DeepPartial<BindDeviceToGatewayRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<BindDeviceToGatewayResponse>;
  /** Deletes the association between the device and the gateway. */
  unbindDeviceFromGateway(
    request: DeepPartial<UnbindDeviceFromGatewayRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UnbindDeviceFromGatewayResponse>;
}

function bytesFromBase64(b64: string): Uint8Array {
  return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
}

function base64FromBytes(arr: Uint8Array): string {
  return globalThis.Buffer.from(arr).toString("base64");
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
