// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/runtimeconfig/v1beta1/runtimeconfig.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../longrunning/operations.js";
import { Empty } from "../../../protobuf/empty.js";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { RuntimeConfig, Variable, Waiter } from "./resources.js";

export const protobufPackage = "google.cloud.runtimeconfig.v1beta1";

/** Request for the `ListConfigs()` method. */
export interface ListConfigsRequest {
  /**
   * The [project
   * ID](https://support.google.com/cloud/answer/6158840?hl=en&ref_topic=6158848)
   * for this request, in the format `projects/[PROJECT_ID]`.
   */
  parent: string;
  /**
   * Specifies the number of results to return per page. If there are fewer
   * elements than the specified number, returns all elements.
   */
  pageSize: number;
  /**
   * Specifies a page token to use. Set `pageToken` to a `nextPageToken`
   * returned by a previous list request to get the next page of results.
   */
  pageToken: string;
}

/**
 * `ListConfigs()` returns the following response. The order of returned
 * objects is arbitrary; that is, it is not ordered in any particular way.
 */
export interface ListConfigsResponse {
  /**
   * A list of the configurations in the project. The order of returned
   * objects is arbitrary; that is, it is not ordered in any particular way.
   */
  configs: RuntimeConfig[];
  /**
   * This token allows you to get the next page of results for list requests.
   * If the number of results is larger than `pageSize`, use the `nextPageToken`
   * as a value for the query parameter `pageToken` in the next list request.
   * Subsequent list requests will have their own `nextPageToken` to continue
   * paging through the results
   */
  nextPageToken: string;
}

/** Gets a RuntimeConfig resource. */
export interface GetConfigRequest {
  /**
   * The name of the RuntimeConfig resource to retrieve, in the format:
   *
   * `projects/[PROJECT_ID]/configs/[CONFIG_NAME]`
   */
  name: string;
}

/** Creates a RuntimeConfig resource. */
export interface CreateConfigRequest {
  /**
   * The [project
   * ID](https://support.google.com/cloud/answer/6158840?hl=en&ref_topic=6158848)
   * for this request, in the format `projects/[PROJECT_ID]`.
   */
  parent: string;
  /** The RuntimeConfig to create. */
  config:
    | RuntimeConfig
    | undefined;
  /**
   * An optional but recommended unique `request_id`. If the server
   * receives two `create()` requests  with the same
   * `request_id`, then the second request will be ignored and the
   * first resource created and stored in the backend is returned.
   * Empty `request_id` fields are ignored.
   *
   * It is responsibility of the client to ensure uniqueness of the
   * `request_id` strings.
   *
   * `request_id` strings are limited to 64 characters.
   */
  requestId: string;
}

/** Request message for `UpdateConfig()` method. */
export interface UpdateConfigRequest {
  /**
   * The name of the RuntimeConfig resource to update, in the format:
   *
   * `projects/[PROJECT_ID]/configs/[CONFIG_NAME]`
   */
  name: string;
  /** The config resource to update. */
  config: RuntimeConfig | undefined;
}

/** Request for the `DeleteConfig()` method. */
export interface DeleteConfigRequest {
  /**
   * The RuntimeConfig resource to delete, in the format:
   *
   * `projects/[PROJECT_ID]/configs/[CONFIG_NAME]`
   */
  name: string;
}

/** Request for the `ListVariables()` method. */
export interface ListVariablesRequest {
  /**
   * The path to the RuntimeConfig resource for which you want to list
   * variables. The configuration must exist beforehand; the path must by in the
   * format:
   *
   * `projects/[PROJECT_ID]/configs/[CONFIG_NAME]`
   */
  parent: string;
  /**
   * Filters variables by matching the specified filter. For example:
   *
   * `projects/example-project/config/[CONFIG_NAME]/variables/example-variable`.
   */
  filter: string;
  /**
   * Specifies the number of results to return per page. If there are fewer
   * elements than the specified number, returns all elements.
   */
  pageSize: number;
  /**
   * Specifies a page token to use. Set `pageToken` to a `nextPageToken`
   * returned by a previous list request to get the next page of results.
   */
  pageToken: string;
  /**
   * The flag indicates whether the user wants to return values of variables.
   * If true, then only those variables that user has IAM GetVariable permission
   * will be returned along with their values.
   */
  returnValues: boolean;
}

/** Response for the `ListVariables()` method. */
export interface ListVariablesResponse {
  /**
   * A list of variables and their values. The order of returned variable
   * objects is arbitrary.
   */
  variables: Variable[];
  /**
   * This token allows you to get the next page of results for list requests.
   * If the number of results is larger than `pageSize`, use the `nextPageToken`
   * as a value for the query parameter `pageToken` in the next list request.
   * Subsequent list requests will have their own `nextPageToken` to continue
   * paging through the results
   */
  nextPageToken: string;
}

/** Request for the `WatchVariable()` method. */
export interface WatchVariableRequest {
  /**
   * The name of the variable to watch, in the format:
   *
   * `projects/[PROJECT_ID]/configs/[CONFIG_NAME]`
   */
  name: string;
  /**
   * If specified, checks the current timestamp of the variable and if the
   * current timestamp is newer than `newerThan` timestamp, the method returns
   * immediately.
   *
   * If not specified or the variable has an older timestamp, the watcher waits
   * for a the value to change before returning.
   */
  newerThan: Date | undefined;
}

/** Request for the `GetVariable()` method. */
export interface GetVariableRequest {
  /**
   * The name of the variable to return, in the format:
   *
   * `projects/[PROJECT_ID]/configs/[CONFIG_NAME]/variables/[VARIBLE_NAME]`
   */
  name: string;
}

/** Request for the `CreateVariable()` method. */
export interface CreateVariableRequest {
  /**
   * The path to the RutimeConfig resource that this variable should belong to.
   * The configuration must exist beforehand; the path must by in the format:
   *
   * `projects/[PROJECT_ID]/configs/[CONFIG_NAME]`
   */
  parent: string;
  /** The variable to create. */
  variable:
    | Variable
    | undefined;
  /**
   * An optional but recommended unique `request_id`. If the server
   * receives two `create()` requests  with the same
   * `request_id`, then the second request will be ignored and the
   * first resource created and stored in the backend is returned.
   * Empty `request_id` fields are ignored.
   *
   * It is responsibility of the client to ensure uniqueness of the
   * `request_id` strings.
   *
   * `request_id` strings are limited to 64 characters.
   */
  requestId: string;
}

/** Request for the `UpdateVariable()` method. */
export interface UpdateVariableRequest {
  /**
   * The name of the variable to update, in the format:
   *
   * `projects/[PROJECT_ID]/configs/[CONFIG_NAME]/variables/[VARIABLE_NAME]`
   */
  name: string;
  /** The variable to update. */
  variable: Variable | undefined;
}

/** Request for the `DeleteVariable()` method. */
export interface DeleteVariableRequest {
  /**
   * The name of the variable to delete, in the format:
   *
   * `projects/[PROJECT_ID]/configs/[CONFIG_NAME]/variables/[VARIABLE_NAME]`
   */
  name: string;
  /**
   * Set to `true` to recursively delete multiple variables with the same
   * prefix.
   */
  recursive: boolean;
}

/** Request for the `ListWaiters()` method. */
export interface ListWaitersRequest {
  /**
   * The path to the configuration for which you want to get a list of waiters.
   * The configuration must exist beforehand; the path must by in the format:
   *
   * `projects/[PROJECT_ID]/configs/[CONFIG_NAME]`
   */
  parent: string;
  /**
   * Specifies the number of results to return per page. If there are fewer
   * elements than the specified number, returns all elements.
   */
  pageSize: number;
  /**
   * Specifies a page token to use. Set `pageToken` to a `nextPageToken`
   * returned by a previous list request to get the next page of results.
   */
  pageToken: string;
}

/**
 * Response for the `ListWaiters()` method.
 * Order of returned waiter objects is arbitrary.
 */
export interface ListWaitersResponse {
  /** Found waiters in the project. */
  waiters: Waiter[];
  /**
   * This token allows you to get the next page of results for list requests.
   * If the number of results is larger than `pageSize`, use the `nextPageToken`
   * as a value for the query parameter `pageToken` in the next list request.
   * Subsequent list requests will have their own `nextPageToken` to continue
   * paging through the results
   */
  nextPageToken: string;
}

/** Request for the `GetWaiter()` method. */
export interface GetWaiterRequest {
  /**
   * The fully-qualified name of the Waiter resource object to retrieve, in the
   * format:
   *
   * `projects/[PROJECT_ID]/configs/[CONFIG_NAME]/waiters/[WAITER_NAME]`
   */
  name: string;
}

/** Request message for `CreateWaiter()` method. */
export interface CreateWaiterRequest {
  /**
   * The path to the configuration that will own the waiter.
   * The configuration must exist beforehand; the path must by in the format:
   *
   * `projects/[PROJECT_ID]/configs/[CONFIG_NAME]`.
   */
  parent: string;
  /** The Waiter resource to create. */
  waiter:
    | Waiter
    | undefined;
  /**
   * An optional but recommended unique `request_id`. If the server
   * receives two `create()` requests  with the same
   * `request_id`, then the second request will be ignored and the
   * first resource created and stored in the backend is returned.
   * Empty `request_id` fields are ignored.
   *
   * It is responsibility of the client to ensure uniqueness of the
   * `request_id` strings.
   *
   * `request_id` strings are limited to 64 characters.
   */
  requestId: string;
}

/** Request for the `DeleteWaiter()` method. */
export interface DeleteWaiterRequest {
  /**
   * The Waiter resource to delete, in the format:
   *
   *  `projects/[PROJECT_ID]/configs/[CONFIG_NAME]/waiters/[WAITER_NAME]`
   */
  name: string;
}

function createBaseListConfigsRequest(): ListConfigsRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListConfigsRequest: MessageFns<ListConfigsRequest> = {
  encode(message: ListConfigsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListConfigsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListConfigsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListConfigsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListConfigsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListConfigsRequest>): ListConfigsRequest {
    return ListConfigsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListConfigsRequest>): ListConfigsRequest {
    const message = createBaseListConfigsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListConfigsResponse(): ListConfigsResponse {
  return { configs: [], nextPageToken: "" };
}

export const ListConfigsResponse: MessageFns<ListConfigsResponse> = {
  encode(message: ListConfigsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.configs) {
      RuntimeConfig.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListConfigsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListConfigsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.configs.push(RuntimeConfig.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListConfigsResponse {
    return {
      configs: globalThis.Array.isArray(object?.configs)
        ? object.configs.map((e: any) => RuntimeConfig.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListConfigsResponse): unknown {
    const obj: any = {};
    if (message.configs?.length) {
      obj.configs = message.configs.map((e) => RuntimeConfig.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListConfigsResponse>): ListConfigsResponse {
    return ListConfigsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListConfigsResponse>): ListConfigsResponse {
    const message = createBaseListConfigsResponse();
    message.configs = object.configs?.map((e) => RuntimeConfig.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetConfigRequest(): GetConfigRequest {
  return { name: "" };
}

export const GetConfigRequest: MessageFns<GetConfigRequest> = {
  encode(message: GetConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetConfigRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetConfigRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetConfigRequest>): GetConfigRequest {
    return GetConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetConfigRequest>): GetConfigRequest {
    const message = createBaseGetConfigRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateConfigRequest(): CreateConfigRequest {
  return { parent: "", config: undefined, requestId: "" };
}

export const CreateConfigRequest: MessageFns<CreateConfigRequest> = {
  encode(message: CreateConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.config !== undefined) {
      RuntimeConfig.encode(message.config, writer.uint32(18).fork()).join();
    }
    if (message.requestId !== "") {
      writer.uint32(26).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.config = RuntimeConfig.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateConfigRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      config: isSet(object.config) ? RuntimeConfig.fromJSON(object.config) : undefined,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: CreateConfigRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.config !== undefined) {
      obj.config = RuntimeConfig.toJSON(message.config);
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateConfigRequest>): CreateConfigRequest {
    return CreateConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateConfigRequest>): CreateConfigRequest {
    const message = createBaseCreateConfigRequest();
    message.parent = object.parent ?? "";
    message.config = (object.config !== undefined && object.config !== null)
      ? RuntimeConfig.fromPartial(object.config)
      : undefined;
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseUpdateConfigRequest(): UpdateConfigRequest {
  return { name: "", config: undefined };
}

export const UpdateConfigRequest: MessageFns<UpdateConfigRequest> = {
  encode(message: UpdateConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.config !== undefined) {
      RuntimeConfig.encode(message.config, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.config = RuntimeConfig.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateConfigRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      config: isSet(object.config) ? RuntimeConfig.fromJSON(object.config) : undefined,
    };
  },

  toJSON(message: UpdateConfigRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.config !== undefined) {
      obj.config = RuntimeConfig.toJSON(message.config);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateConfigRequest>): UpdateConfigRequest {
    return UpdateConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateConfigRequest>): UpdateConfigRequest {
    const message = createBaseUpdateConfigRequest();
    message.name = object.name ?? "";
    message.config = (object.config !== undefined && object.config !== null)
      ? RuntimeConfig.fromPartial(object.config)
      : undefined;
    return message;
  },
};

function createBaseDeleteConfigRequest(): DeleteConfigRequest {
  return { name: "" };
}

export const DeleteConfigRequest: MessageFns<DeleteConfigRequest> = {
  encode(message: DeleteConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteConfigRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteConfigRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteConfigRequest>): DeleteConfigRequest {
    return DeleteConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteConfigRequest>): DeleteConfigRequest {
    const message = createBaseDeleteConfigRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListVariablesRequest(): ListVariablesRequest {
  return { parent: "", filter: "", pageSize: 0, pageToken: "", returnValues: false };
}

export const ListVariablesRequest: MessageFns<ListVariablesRequest> = {
  encode(message: ListVariablesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.filter !== "") {
      writer.uint32(18).string(message.filter);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(34).string(message.pageToken);
    }
    if (message.returnValues !== false) {
      writer.uint32(40).bool(message.returnValues);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListVariablesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListVariablesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.returnValues = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListVariablesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      returnValues: isSet(object.returnValues) ? globalThis.Boolean(object.returnValues) : false,
    };
  },

  toJSON(message: ListVariablesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.returnValues !== false) {
      obj.returnValues = message.returnValues;
    }
    return obj;
  },

  create(base?: DeepPartial<ListVariablesRequest>): ListVariablesRequest {
    return ListVariablesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListVariablesRequest>): ListVariablesRequest {
    const message = createBaseListVariablesRequest();
    message.parent = object.parent ?? "";
    message.filter = object.filter ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.returnValues = object.returnValues ?? false;
    return message;
  },
};

function createBaseListVariablesResponse(): ListVariablesResponse {
  return { variables: [], nextPageToken: "" };
}

export const ListVariablesResponse: MessageFns<ListVariablesResponse> = {
  encode(message: ListVariablesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.variables) {
      Variable.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListVariablesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListVariablesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.variables.push(Variable.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListVariablesResponse {
    return {
      variables: globalThis.Array.isArray(object?.variables)
        ? object.variables.map((e: any) => Variable.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListVariablesResponse): unknown {
    const obj: any = {};
    if (message.variables?.length) {
      obj.variables = message.variables.map((e) => Variable.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListVariablesResponse>): ListVariablesResponse {
    return ListVariablesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListVariablesResponse>): ListVariablesResponse {
    const message = createBaseListVariablesResponse();
    message.variables = object.variables?.map((e) => Variable.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseWatchVariableRequest(): WatchVariableRequest {
  return { name: "", newerThan: undefined };
}

export const WatchVariableRequest: MessageFns<WatchVariableRequest> = {
  encode(message: WatchVariableRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.newerThan !== undefined) {
      Timestamp.encode(toTimestamp(message.newerThan), writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WatchVariableRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWatchVariableRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.newerThan = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WatchVariableRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      newerThan: isSet(object.newerThan) ? fromJsonTimestamp(object.newerThan) : undefined,
    };
  },

  toJSON(message: WatchVariableRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.newerThan !== undefined) {
      obj.newerThan = message.newerThan.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<WatchVariableRequest>): WatchVariableRequest {
    return WatchVariableRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<WatchVariableRequest>): WatchVariableRequest {
    const message = createBaseWatchVariableRequest();
    message.name = object.name ?? "";
    message.newerThan = object.newerThan ?? undefined;
    return message;
  },
};

function createBaseGetVariableRequest(): GetVariableRequest {
  return { name: "" };
}

export const GetVariableRequest: MessageFns<GetVariableRequest> = {
  encode(message: GetVariableRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetVariableRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetVariableRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetVariableRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetVariableRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetVariableRequest>): GetVariableRequest {
    return GetVariableRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetVariableRequest>): GetVariableRequest {
    const message = createBaseGetVariableRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateVariableRequest(): CreateVariableRequest {
  return { parent: "", variable: undefined, requestId: "" };
}

export const CreateVariableRequest: MessageFns<CreateVariableRequest> = {
  encode(message: CreateVariableRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.variable !== undefined) {
      Variable.encode(message.variable, writer.uint32(18).fork()).join();
    }
    if (message.requestId !== "") {
      writer.uint32(26).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateVariableRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateVariableRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.variable = Variable.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateVariableRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      variable: isSet(object.variable) ? Variable.fromJSON(object.variable) : undefined,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: CreateVariableRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.variable !== undefined) {
      obj.variable = Variable.toJSON(message.variable);
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateVariableRequest>): CreateVariableRequest {
    return CreateVariableRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateVariableRequest>): CreateVariableRequest {
    const message = createBaseCreateVariableRequest();
    message.parent = object.parent ?? "";
    message.variable = (object.variable !== undefined && object.variable !== null)
      ? Variable.fromPartial(object.variable)
      : undefined;
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseUpdateVariableRequest(): UpdateVariableRequest {
  return { name: "", variable: undefined };
}

export const UpdateVariableRequest: MessageFns<UpdateVariableRequest> = {
  encode(message: UpdateVariableRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.variable !== undefined) {
      Variable.encode(message.variable, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateVariableRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateVariableRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.variable = Variable.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateVariableRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      variable: isSet(object.variable) ? Variable.fromJSON(object.variable) : undefined,
    };
  },

  toJSON(message: UpdateVariableRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.variable !== undefined) {
      obj.variable = Variable.toJSON(message.variable);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateVariableRequest>): UpdateVariableRequest {
    return UpdateVariableRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateVariableRequest>): UpdateVariableRequest {
    const message = createBaseUpdateVariableRequest();
    message.name = object.name ?? "";
    message.variable = (object.variable !== undefined && object.variable !== null)
      ? Variable.fromPartial(object.variable)
      : undefined;
    return message;
  },
};

function createBaseDeleteVariableRequest(): DeleteVariableRequest {
  return { name: "", recursive: false };
}

export const DeleteVariableRequest: MessageFns<DeleteVariableRequest> = {
  encode(message: DeleteVariableRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.recursive !== false) {
      writer.uint32(16).bool(message.recursive);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteVariableRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteVariableRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.recursive = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteVariableRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      recursive: isSet(object.recursive) ? globalThis.Boolean(object.recursive) : false,
    };
  },

  toJSON(message: DeleteVariableRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.recursive !== false) {
      obj.recursive = message.recursive;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteVariableRequest>): DeleteVariableRequest {
    return DeleteVariableRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteVariableRequest>): DeleteVariableRequest {
    const message = createBaseDeleteVariableRequest();
    message.name = object.name ?? "";
    message.recursive = object.recursive ?? false;
    return message;
  },
};

function createBaseListWaitersRequest(): ListWaitersRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListWaitersRequest: MessageFns<ListWaitersRequest> = {
  encode(message: ListWaitersRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListWaitersRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListWaitersRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListWaitersRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListWaitersRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListWaitersRequest>): ListWaitersRequest {
    return ListWaitersRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListWaitersRequest>): ListWaitersRequest {
    const message = createBaseListWaitersRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListWaitersResponse(): ListWaitersResponse {
  return { waiters: [], nextPageToken: "" };
}

export const ListWaitersResponse: MessageFns<ListWaitersResponse> = {
  encode(message: ListWaitersResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.waiters) {
      Waiter.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListWaitersResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListWaitersResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.waiters.push(Waiter.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListWaitersResponse {
    return {
      waiters: globalThis.Array.isArray(object?.waiters) ? object.waiters.map((e: any) => Waiter.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListWaitersResponse): unknown {
    const obj: any = {};
    if (message.waiters?.length) {
      obj.waiters = message.waiters.map((e) => Waiter.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListWaitersResponse>): ListWaitersResponse {
    return ListWaitersResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListWaitersResponse>): ListWaitersResponse {
    const message = createBaseListWaitersResponse();
    message.waiters = object.waiters?.map((e) => Waiter.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetWaiterRequest(): GetWaiterRequest {
  return { name: "" };
}

export const GetWaiterRequest: MessageFns<GetWaiterRequest> = {
  encode(message: GetWaiterRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetWaiterRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetWaiterRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetWaiterRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetWaiterRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetWaiterRequest>): GetWaiterRequest {
    return GetWaiterRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetWaiterRequest>): GetWaiterRequest {
    const message = createBaseGetWaiterRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateWaiterRequest(): CreateWaiterRequest {
  return { parent: "", waiter: undefined, requestId: "" };
}

export const CreateWaiterRequest: MessageFns<CreateWaiterRequest> = {
  encode(message: CreateWaiterRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.waiter !== undefined) {
      Waiter.encode(message.waiter, writer.uint32(18).fork()).join();
    }
    if (message.requestId !== "") {
      writer.uint32(26).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateWaiterRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateWaiterRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.waiter = Waiter.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateWaiterRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      waiter: isSet(object.waiter) ? Waiter.fromJSON(object.waiter) : undefined,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: CreateWaiterRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.waiter !== undefined) {
      obj.waiter = Waiter.toJSON(message.waiter);
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateWaiterRequest>): CreateWaiterRequest {
    return CreateWaiterRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateWaiterRequest>): CreateWaiterRequest {
    const message = createBaseCreateWaiterRequest();
    message.parent = object.parent ?? "";
    message.waiter = (object.waiter !== undefined && object.waiter !== null)
      ? Waiter.fromPartial(object.waiter)
      : undefined;
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseDeleteWaiterRequest(): DeleteWaiterRequest {
  return { name: "" };
}

export const DeleteWaiterRequest: MessageFns<DeleteWaiterRequest> = {
  encode(message: DeleteWaiterRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteWaiterRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteWaiterRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteWaiterRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteWaiterRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteWaiterRequest>): DeleteWaiterRequest {
    return DeleteWaiterRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteWaiterRequest>): DeleteWaiterRequest {
    const message = createBaseDeleteWaiterRequest();
    message.name = object.name ?? "";
    return message;
  },
};

/**
 * RuntimeConfig API represents configuration objects and operations on those
 * configuration objects.
 * RuntimeConfig objects consist of Variables logically grouped in the those
 * objects.
 * Variables are simple key-value pairs. Variables can be watched for changes or
 * deletions. Variable key can be hieararchical, e.g. ports/serving_port,
 * ports/monitoring_port, etc. Variable names can be hierarchical. No variable
 * name can be prefix of another.
 * Config objects represent logical containers for variables, e.g. flags,
 * passwords, etc.
 */
export type RuntimeConfigManagerDefinition = typeof RuntimeConfigManagerDefinition;
export const RuntimeConfigManagerDefinition = {
  name: "RuntimeConfigManager",
  fullName: "google.cloud.runtimeconfig.v1beta1.RuntimeConfigManager",
  methods: {
    /** Lists all the RuntimeConfig resources within project. */
    listConfigs: {
      name: "ListConfigs",
      requestType: ListConfigsRequest,
      requestStream: false,
      responseType: ListConfigsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              38,
              18,
              36,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              47,
              99,
              111,
              110,
              102,
              105,
              103,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets information about a RuntimeConfig resource. */
    getConfig: {
      name: "GetConfig",
      requestType: GetConfigRequest,
      requestStream: false,
      responseType: RuntimeConfig,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              38,
              18,
              36,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Creates a new RuntimeConfig resource. The configuration name must be
     * unique within project.
     */
    createConfig: {
      name: "CreateConfig",
      requestType: CreateConfigRequest,
      requestStream: false,
      responseType: RuntimeConfig,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              46,
              58,
              6,
              99,
              111,
              110,
              102,
              105,
              103,
              34,
              36,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              47,
              99,
              111,
              110,
              102,
              105,
              103,
              115,
            ]),
          ],
        },
      },
    },
    /** Updates a RuntimeConfig resource. The configuration must exist beforehand. */
    updateConfig: {
      name: "UpdateConfig",
      requestType: UpdateConfigRequest,
      requestStream: false,
      responseType: RuntimeConfig,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              46,
              58,
              6,
              99,
              111,
              110,
              102,
              105,
              103,
              26,
              36,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes a RuntimeConfig resource. */
    deleteConfig: {
      name: "DeleteConfig",
      requestType: DeleteConfigRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              38,
              42,
              36,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Lists variables within given a configuration, matching any provided
     * filters. This only lists variable names, not the values, unless
     * `return_values` is true, in which case only variables that user has IAM
     * permission to GetVariable will be returned.
     */
    listVariables: {
      name: "ListVariables",
      requestType: ListVariablesRequest,
      requestStream: false,
      responseType: ListVariablesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              50,
              18,
              48,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              125,
              47,
              118,
              97,
              114,
              105,
              97,
              98,
              108,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets information about a single variable. */
    getVariable: {
      name: "GetVariable",
      requestType: GetVariableRequest,
      requestStream: false,
      responseType: Variable,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              51,
              18,
              49,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              47,
              118,
              97,
              114,
              105,
              97,
              98,
              108,
              101,
              115,
              47,
              42,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Watches a specific variable and waits for a change in the variable's value.
     * When there is a change, this method returns the new value or times out.
     *
     * If a variable is deleted while being watched, the `variableState` state is
     * set to `DELETED` and the method returns the last known variable `value`.
     *
     * If you set the deadline for watching to a larger value than internal
     * timeout (60 seconds), the current variable value is returned and the
     * `variableState` will be `VARIABLE_STATE_UNSPECIFIED`.
     *
     * To learn more about creating a watcher, read the
     * [Watching a Variable for
     * Changes](/deployment-manager/runtime-configurator/watching-a-variable)
     * documentation.
     */
    watchVariable: {
      name: "WatchVariable",
      requestType: WatchVariableRequest,
      requestStream: false,
      responseType: Variable,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              60,
              58,
              1,
              42,
              34,
              55,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              47,
              118,
              97,
              114,
              105,
              97,
              98,
              108,
              101,
              115,
              47,
              42,
              42,
              125,
              58,
              119,
              97,
              116,
              99,
              104,
            ]),
          ],
        },
      },
    },
    /**
     * Creates a variable within the given configuration. You cannot create
     * a variable with a name that is a prefix of an existing variable name, or a
     * name that has an existing variable name as a prefix.
     *
     * To learn more about creating a variable, read the
     * [Setting and Getting
     * Data](/deployment-manager/runtime-configurator/set-and-get-variables)
     * documentation.
     */
    createVariable: {
      name: "CreateVariable",
      requestType: CreateVariableRequest,
      requestStream: false,
      responseType: Variable,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              60,
              58,
              8,
              118,
              97,
              114,
              105,
              97,
              98,
              108,
              101,
              34,
              48,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              125,
              47,
              118,
              97,
              114,
              105,
              97,
              98,
              108,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Updates an existing variable with a new value. */
    updateVariable: {
      name: "UpdateVariable",
      requestType: UpdateVariableRequest,
      requestStream: false,
      responseType: Variable,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              61,
              58,
              8,
              118,
              97,
              114,
              105,
              97,
              98,
              108,
              101,
              26,
              49,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              47,
              118,
              97,
              114,
              105,
              97,
              98,
              108,
              101,
              115,
              47,
              42,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Deletes a variable or multiple variables.
     *
     * If you specify a variable name, then that variable is deleted. If you
     * specify a prefix and `recursive` is true, then all variables with that
     * prefix are deleted. You must set a `recursive` to true if you delete
     * variables by prefix.
     */
    deleteVariable: {
      name: "DeleteVariable",
      requestType: DeleteVariableRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              51,
              42,
              49,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              47,
              118,
              97,
              114,
              105,
              97,
              98,
              108,
              101,
              115,
              47,
              42,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** List waiters within the given configuration. */
    listWaiters: {
      name: "ListWaiters",
      requestType: ListWaitersRequest,
      requestStream: false,
      responseType: ListWaitersResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              48,
              18,
              46,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              125,
              47,
              119,
              97,
              105,
              116,
              101,
              114,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets information about a single waiter. */
    getWaiter: {
      name: "GetWaiter",
      requestType: GetWaiterRequest,
      requestStream: false,
      responseType: Waiter,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              48,
              18,
              46,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              47,
              119,
              97,
              105,
              116,
              101,
              114,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Creates a Waiter resource. This operation returns a long-running Operation
     * resource which can be polled for completion. However, a waiter with the
     * given name will exist (and can be retrieved) prior to the operation
     * completing. If the operation fails, the failed Waiter resource will
     * still exist and must be deleted prior to subsequent creation attempts.
     */
    createWaiter: {
      name: "CreateWaiter",
      requestType: CreateWaiterRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              56,
              58,
              6,
              119,
              97,
              105,
              116,
              101,
              114,
              34,
              46,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              125,
              47,
              119,
              97,
              105,
              116,
              101,
              114,
              115,
            ]),
          ],
        },
      },
    },
    /** Deletes the waiter with the specified name. */
    deleteWaiter: {
      name: "DeleteWaiter",
      requestType: DeleteWaiterRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              48,
              42,
              46,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              47,
              119,
              97,
              105,
              116,
              101,
              114,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface RuntimeConfigManagerServiceImplementation<CallContextExt = {}> {
  /** Lists all the RuntimeConfig resources within project. */
  listConfigs(
    request: ListConfigsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListConfigsResponse>>;
  /** Gets information about a RuntimeConfig resource. */
  getConfig(request: GetConfigRequest, context: CallContext & CallContextExt): Promise<DeepPartial<RuntimeConfig>>;
  /**
   * Creates a new RuntimeConfig resource. The configuration name must be
   * unique within project.
   */
  createConfig(
    request: CreateConfigRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<RuntimeConfig>>;
  /** Updates a RuntimeConfig resource. The configuration must exist beforehand. */
  updateConfig(
    request: UpdateConfigRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<RuntimeConfig>>;
  /** Deletes a RuntimeConfig resource. */
  deleteConfig(request: DeleteConfigRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
  /**
   * Lists variables within given a configuration, matching any provided
   * filters. This only lists variable names, not the values, unless
   * `return_values` is true, in which case only variables that user has IAM
   * permission to GetVariable will be returned.
   */
  listVariables(
    request: ListVariablesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListVariablesResponse>>;
  /** Gets information about a single variable. */
  getVariable(request: GetVariableRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Variable>>;
  /**
   * Watches a specific variable and waits for a change in the variable's value.
   * When there is a change, this method returns the new value or times out.
   *
   * If a variable is deleted while being watched, the `variableState` state is
   * set to `DELETED` and the method returns the last known variable `value`.
   *
   * If you set the deadline for watching to a larger value than internal
   * timeout (60 seconds), the current variable value is returned and the
   * `variableState` will be `VARIABLE_STATE_UNSPECIFIED`.
   *
   * To learn more about creating a watcher, read the
   * [Watching a Variable for
   * Changes](/deployment-manager/runtime-configurator/watching-a-variable)
   * documentation.
   */
  watchVariable(request: WatchVariableRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Variable>>;
  /**
   * Creates a variable within the given configuration. You cannot create
   * a variable with a name that is a prefix of an existing variable name, or a
   * name that has an existing variable name as a prefix.
   *
   * To learn more about creating a variable, read the
   * [Setting and Getting
   * Data](/deployment-manager/runtime-configurator/set-and-get-variables)
   * documentation.
   */
  createVariable(request: CreateVariableRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Variable>>;
  /** Updates an existing variable with a new value. */
  updateVariable(request: UpdateVariableRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Variable>>;
  /**
   * Deletes a variable or multiple variables.
   *
   * If you specify a variable name, then that variable is deleted. If you
   * specify a prefix and `recursive` is true, then all variables with that
   * prefix are deleted. You must set a `recursive` to true if you delete
   * variables by prefix.
   */
  deleteVariable(request: DeleteVariableRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
  /** List waiters within the given configuration. */
  listWaiters(
    request: ListWaitersRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListWaitersResponse>>;
  /** Gets information about a single waiter. */
  getWaiter(request: GetWaiterRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Waiter>>;
  /**
   * Creates a Waiter resource. This operation returns a long-running Operation
   * resource which can be polled for completion. However, a waiter with the
   * given name will exist (and can be retrieved) prior to the operation
   * completing. If the operation fails, the failed Waiter resource will
   * still exist and must be deleted prior to subsequent creation attempts.
   */
  createWaiter(request: CreateWaiterRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /** Deletes the waiter with the specified name. */
  deleteWaiter(request: DeleteWaiterRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
}

export interface RuntimeConfigManagerClient<CallOptionsExt = {}> {
  /** Lists all the RuntimeConfig resources within project. */
  listConfigs(
    request: DeepPartial<ListConfigsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListConfigsResponse>;
  /** Gets information about a RuntimeConfig resource. */
  getConfig(request: DeepPartial<GetConfigRequest>, options?: CallOptions & CallOptionsExt): Promise<RuntimeConfig>;
  /**
   * Creates a new RuntimeConfig resource. The configuration name must be
   * unique within project.
   */
  createConfig(
    request: DeepPartial<CreateConfigRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<RuntimeConfig>;
  /** Updates a RuntimeConfig resource. The configuration must exist beforehand. */
  updateConfig(
    request: DeepPartial<UpdateConfigRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<RuntimeConfig>;
  /** Deletes a RuntimeConfig resource. */
  deleteConfig(request: DeepPartial<DeleteConfigRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
  /**
   * Lists variables within given a configuration, matching any provided
   * filters. This only lists variable names, not the values, unless
   * `return_values` is true, in which case only variables that user has IAM
   * permission to GetVariable will be returned.
   */
  listVariables(
    request: DeepPartial<ListVariablesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListVariablesResponse>;
  /** Gets information about a single variable. */
  getVariable(request: DeepPartial<GetVariableRequest>, options?: CallOptions & CallOptionsExt): Promise<Variable>;
  /**
   * Watches a specific variable and waits for a change in the variable's value.
   * When there is a change, this method returns the new value or times out.
   *
   * If a variable is deleted while being watched, the `variableState` state is
   * set to `DELETED` and the method returns the last known variable `value`.
   *
   * If you set the deadline for watching to a larger value than internal
   * timeout (60 seconds), the current variable value is returned and the
   * `variableState` will be `VARIABLE_STATE_UNSPECIFIED`.
   *
   * To learn more about creating a watcher, read the
   * [Watching a Variable for
   * Changes](/deployment-manager/runtime-configurator/watching-a-variable)
   * documentation.
   */
  watchVariable(request: DeepPartial<WatchVariableRequest>, options?: CallOptions & CallOptionsExt): Promise<Variable>;
  /**
   * Creates a variable within the given configuration. You cannot create
   * a variable with a name that is a prefix of an existing variable name, or a
   * name that has an existing variable name as a prefix.
   *
   * To learn more about creating a variable, read the
   * [Setting and Getting
   * Data](/deployment-manager/runtime-configurator/set-and-get-variables)
   * documentation.
   */
  createVariable(
    request: DeepPartial<CreateVariableRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Variable>;
  /** Updates an existing variable with a new value. */
  updateVariable(
    request: DeepPartial<UpdateVariableRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Variable>;
  /**
   * Deletes a variable or multiple variables.
   *
   * If you specify a variable name, then that variable is deleted. If you
   * specify a prefix and `recursive` is true, then all variables with that
   * prefix are deleted. You must set a `recursive` to true if you delete
   * variables by prefix.
   */
  deleteVariable(request: DeepPartial<DeleteVariableRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
  /** List waiters within the given configuration. */
  listWaiters(
    request: DeepPartial<ListWaitersRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListWaitersResponse>;
  /** Gets information about a single waiter. */
  getWaiter(request: DeepPartial<GetWaiterRequest>, options?: CallOptions & CallOptionsExt): Promise<Waiter>;
  /**
   * Creates a Waiter resource. This operation returns a long-running Operation
   * resource which can be polled for completion. However, a waiter with the
   * given name will exist (and can be retrieved) prior to the operation
   * completing. If the operation fails, the failed Waiter resource will
   * still exist and must be deleted prior to subsequent creation attempts.
   */
  createWaiter(request: DeepPartial<CreateWaiterRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /** Deletes the waiter with the specified name. */
  deleteWaiter(request: DeepPartial<DeleteWaiterRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
