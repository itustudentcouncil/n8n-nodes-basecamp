// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/managedidentities/v1/managed_identities_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../longrunning/operations.js";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { Domain, Trust } from "./resource.js";

export const protobufPackage = "google.cloud.managedidentities.v1";

/** Represents the metadata of the long-running operation. */
export interface OpMetadata {
  /** Output only. The time the operation was created. */
  createTime:
    | Date
    | undefined;
  /** Output only. The time the operation finished running. */
  endTime:
    | Date
    | undefined;
  /** Output only. Server-defined resource path for the target of the operation. */
  target: string;
  /** Output only. Name of the verb executed by the operation. */
  verb: string;
  /**
   * Output only. Identifies whether the user has requested cancellation
   * of the operation. Operations that have successfully been cancelled
   * have [Operation.error][] value with a [google.rpc.Status.code][google.rpc.Status.code] of 1,
   * corresponding to `Code.CANCELLED`.
   */
  requestedCancellation: boolean;
  /** Output only. API version used to start the operation. */
  apiVersion: string;
}

/**
 * Request message for
 * [CreateMicrosoftAdDomain][google.cloud.managedidentities.v1.CreateMicrosoftAdDomain]
 */
export interface CreateMicrosoftAdDomainRequest {
  /**
   * Required. The resource project name and location using the form:
   * `projects/{project_id}/locations/global`
   */
  parent: string;
  /**
   * Required. The fully qualified domain name.
   * e.g. mydomain.myorganization.com, with the following restrictions:
   *
   *  * Must contain only lowercase letters, numbers, periods and hyphens.
   *  * Must start with a letter.
   *  * Must contain between 2-64 characters.
   *  * Must end with a number or a letter.
   *  * Must not start with period.
   *  * First segement length (mydomain form example above) shouldn't exceed
   *    15 chars.
   *  * The last segment cannot be fully numeric.
   *  * Must be unique within the customer project.
   */
  domainName: string;
  /** Required. A Managed Identity domain resource. */
  domain: Domain | undefined;
}

/**
 * Request message for
 * [ResetAdminPassword][google.cloud.managedidentities.v1.ResetAdminPassword]
 */
export interface ResetAdminPasswordRequest {
  /**
   * Required. The domain resource name using the form:
   * `projects/{project_id}/locations/global/domains/{domain_name}`
   */
  name: string;
}

/**
 * Response message for
 * [ResetAdminPassword][google.cloud.managedidentities.v1.ResetAdminPassword]
 */
export interface ResetAdminPasswordResponse {
  /** A random password. See [admin][google.cloud.managedidentities.v1.Domain.admin] for more information. */
  password: string;
}

/**
 * Request message for
 * [ListDomains][google.cloud.managedidentities.v1.ListDomains]
 */
export interface ListDomainsRequest {
  /**
   * Required. The resource name of the domain location using the form:
   * `projects/{project_id}/locations/global`
   */
  parent: string;
  /**
   * Optional. The maximum number of items to return.
   * If not specified, a default value of 1000 will be used.
   * Regardless of the page_size value, the response may include a partial list.
   * Callers should rely on a response's
   * [next_page_token][google.cloud.managedidentities.v1.ListDomainsResponse.next_page_token]
   * to determine if there are additional results to list.
   */
  pageSize: number;
  /**
   * Optional. The `next_page_token` value returned from a previous ListDomainsRequest
   * request, if any.
   */
  pageToken: string;
  /**
   * Optional. A filter specifying constraints of a list operation.
   * For example, `Domain.fqdn="mydomain.myorginization"`.
   */
  filter: string;
  /**
   * Optional. Specifies the ordering of results. See
   * [Sorting
   * order](https://cloud.google.com/apis/design/design_patterns#sorting_order)
   * for more information.
   */
  orderBy: string;
}

/**
 * Response message for
 * [ListDomains][google.cloud.managedidentities.v1.ListDomains]
 */
export interface ListDomainsResponse {
  /** A list of Managed Identities Service domains in the project. */
  domains: Domain[];
  /**
   * A token to retrieve the next page of results, or empty if there are no more
   * results in the list.
   */
  nextPageToken: string;
  /** A list of locations that could not be reached. */
  unreachable: string[];
}

/** Request message for [GetDomain][google.cloud.managedidentities.v1.GetDomain] */
export interface GetDomainRequest {
  /**
   * Required. The domain resource name using the form:
   * `projects/{project_id}/locations/global/domains/{domain_name}`
   */
  name: string;
}

/**
 * Request message for
 * [UpdateDomain][google.cloud.managedidentities.v1.UpdateDomain]
 */
export interface UpdateDomainRequest {
  /**
   * Required. Mask of fields to update. At least one path must be supplied in this
   * field. The elements of the repeated paths field may only include
   * fields from [Domain][google.cloud.managedidentities.v1.Domain]:
   *  * `labels`
   *  * `locations`
   *  * `authorized_networks`
   */
  updateMask:
    | string[]
    | undefined;
  /**
   * Required. Domain message with updated fields. Only supported fields specified in
   * update_mask are updated.
   */
  domain: Domain | undefined;
}

/**
 * Request message for
 * [DeleteDomain][google.cloud.managedidentities.v1.DeleteDomain]
 */
export interface DeleteDomainRequest {
  /**
   * Required. The domain resource name using the form:
   * `projects/{project_id}/locations/global/domains/{domain_name}`
   */
  name: string;
}

/**
 * Request message for
 * [AttachTrust][google.cloud.managedidentities.v1.AttachTrust]
 */
export interface AttachTrustRequest {
  /**
   * Required. The resource domain name, project name and location using the form:
   * `projects/{project_id}/locations/global/domains/{domain_name}`
   */
  name: string;
  /** Required. The domain trust resource. */
  trust: Trust | undefined;
}

/**
 * Request message for
 * [ReconfigureTrust][google.cloud.managedidentities.v1.ReconfigureTrust]
 */
export interface ReconfigureTrustRequest {
  /**
   * Required. The resource domain name, project name and location using the form:
   * `projects/{project_id}/locations/global/domains/{domain_name}`
   */
  name: string;
  /**
   * Required. The fully-qualified target domain name which will be in trust with current
   * domain.
   */
  targetDomainName: string;
  /**
   * Required. The target DNS server IP addresses to resolve the remote domain involved
   * in the trust.
   */
  targetDnsIpAddresses: string[];
}

/**
 * Request message for
 * [DetachTrust][google.cloud.managedidentities.v1.DetachTrust]
 */
export interface DetachTrustRequest {
  /**
   * Required. The resource domain name, project name, and location using the form:
   * `projects/{project_id}/locations/global/domains/{domain_name}`
   */
  name: string;
  /** Required. The domain trust resource to removed. */
  trust: Trust | undefined;
}

/**
 * Request message for
 * [ValidateTrust][google.cloud.managedidentities.v1.ValidateTrust]
 */
export interface ValidateTrustRequest {
  /**
   * Required. The resource domain name, project name, and location using the form:
   * `projects/{project_id}/locations/global/domains/{domain_name}`
   */
  name: string;
  /** Required. The domain trust to validate trust state for. */
  trust: Trust | undefined;
}

function createBaseOpMetadata(): OpMetadata {
  return {
    createTime: undefined,
    endTime: undefined,
    target: "",
    verb: "",
    requestedCancellation: false,
    apiVersion: "",
  };
}

export const OpMetadata: MessageFns<OpMetadata> = {
  encode(message: OpMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(10).fork()).join();
    }
    if (message.endTime !== undefined) {
      Timestamp.encode(toTimestamp(message.endTime), writer.uint32(18).fork()).join();
    }
    if (message.target !== "") {
      writer.uint32(26).string(message.target);
    }
    if (message.verb !== "") {
      writer.uint32(34).string(message.verb);
    }
    if (message.requestedCancellation !== false) {
      writer.uint32(40).bool(message.requestedCancellation);
    }
    if (message.apiVersion !== "") {
      writer.uint32(50).string(message.apiVersion);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OpMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOpMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.endTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.target = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.verb = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.requestedCancellation = reader.bool();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.apiVersion = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OpMetadata {
    return {
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      endTime: isSet(object.endTime) ? fromJsonTimestamp(object.endTime) : undefined,
      target: isSet(object.target) ? globalThis.String(object.target) : "",
      verb: isSet(object.verb) ? globalThis.String(object.verb) : "",
      requestedCancellation: isSet(object.requestedCancellation)
        ? globalThis.Boolean(object.requestedCancellation)
        : false,
      apiVersion: isSet(object.apiVersion) ? globalThis.String(object.apiVersion) : "",
    };
  },

  toJSON(message: OpMetadata): unknown {
    const obj: any = {};
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.endTime !== undefined) {
      obj.endTime = message.endTime.toISOString();
    }
    if (message.target !== "") {
      obj.target = message.target;
    }
    if (message.verb !== "") {
      obj.verb = message.verb;
    }
    if (message.requestedCancellation !== false) {
      obj.requestedCancellation = message.requestedCancellation;
    }
    if (message.apiVersion !== "") {
      obj.apiVersion = message.apiVersion;
    }
    return obj;
  },

  create(base?: DeepPartial<OpMetadata>): OpMetadata {
    return OpMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<OpMetadata>): OpMetadata {
    const message = createBaseOpMetadata();
    message.createTime = object.createTime ?? undefined;
    message.endTime = object.endTime ?? undefined;
    message.target = object.target ?? "";
    message.verb = object.verb ?? "";
    message.requestedCancellation = object.requestedCancellation ?? false;
    message.apiVersion = object.apiVersion ?? "";
    return message;
  },
};

function createBaseCreateMicrosoftAdDomainRequest(): CreateMicrosoftAdDomainRequest {
  return { parent: "", domainName: "", domain: undefined };
}

export const CreateMicrosoftAdDomainRequest: MessageFns<CreateMicrosoftAdDomainRequest> = {
  encode(message: CreateMicrosoftAdDomainRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.domainName !== "") {
      writer.uint32(18).string(message.domainName);
    }
    if (message.domain !== undefined) {
      Domain.encode(message.domain, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateMicrosoftAdDomainRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateMicrosoftAdDomainRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.domainName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.domain = Domain.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateMicrosoftAdDomainRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      domainName: isSet(object.domainName) ? globalThis.String(object.domainName) : "",
      domain: isSet(object.domain) ? Domain.fromJSON(object.domain) : undefined,
    };
  },

  toJSON(message: CreateMicrosoftAdDomainRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.domainName !== "") {
      obj.domainName = message.domainName;
    }
    if (message.domain !== undefined) {
      obj.domain = Domain.toJSON(message.domain);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateMicrosoftAdDomainRequest>): CreateMicrosoftAdDomainRequest {
    return CreateMicrosoftAdDomainRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateMicrosoftAdDomainRequest>): CreateMicrosoftAdDomainRequest {
    const message = createBaseCreateMicrosoftAdDomainRequest();
    message.parent = object.parent ?? "";
    message.domainName = object.domainName ?? "";
    message.domain = (object.domain !== undefined && object.domain !== null)
      ? Domain.fromPartial(object.domain)
      : undefined;
    return message;
  },
};

function createBaseResetAdminPasswordRequest(): ResetAdminPasswordRequest {
  return { name: "" };
}

export const ResetAdminPasswordRequest: MessageFns<ResetAdminPasswordRequest> = {
  encode(message: ResetAdminPasswordRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResetAdminPasswordRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetAdminPasswordRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResetAdminPasswordRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: ResetAdminPasswordRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<ResetAdminPasswordRequest>): ResetAdminPasswordRequest {
    return ResetAdminPasswordRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ResetAdminPasswordRequest>): ResetAdminPasswordRequest {
    const message = createBaseResetAdminPasswordRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseResetAdminPasswordResponse(): ResetAdminPasswordResponse {
  return { password: "" };
}

export const ResetAdminPasswordResponse: MessageFns<ResetAdminPasswordResponse> = {
  encode(message: ResetAdminPasswordResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.password !== "") {
      writer.uint32(10).string(message.password);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResetAdminPasswordResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetAdminPasswordResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.password = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResetAdminPasswordResponse {
    return { password: isSet(object.password) ? globalThis.String(object.password) : "" };
  },

  toJSON(message: ResetAdminPasswordResponse): unknown {
    const obj: any = {};
    if (message.password !== "") {
      obj.password = message.password;
    }
    return obj;
  },

  create(base?: DeepPartial<ResetAdminPasswordResponse>): ResetAdminPasswordResponse {
    return ResetAdminPasswordResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ResetAdminPasswordResponse>): ResetAdminPasswordResponse {
    const message = createBaseResetAdminPasswordResponse();
    message.password = object.password ?? "";
    return message;
  },
};

function createBaseListDomainsRequest(): ListDomainsRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListDomainsRequest: MessageFns<ListDomainsRequest> = {
  encode(message: ListDomainsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListDomainsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListDomainsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListDomainsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListDomainsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListDomainsRequest>): ListDomainsRequest {
    return ListDomainsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListDomainsRequest>): ListDomainsRequest {
    const message = createBaseListDomainsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListDomainsResponse(): ListDomainsResponse {
  return { domains: [], nextPageToken: "", unreachable: [] };
}

export const ListDomainsResponse: MessageFns<ListDomainsResponse> = {
  encode(message: ListDomainsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.domains) {
      Domain.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListDomainsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListDomainsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.domains.push(Domain.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListDomainsResponse {
    return {
      domains: globalThis.Array.isArray(object?.domains) ? object.domains.map((e: any) => Domain.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListDomainsResponse): unknown {
    const obj: any = {};
    if (message.domains?.length) {
      obj.domains = message.domains.map((e) => Domain.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListDomainsResponse>): ListDomainsResponse {
    return ListDomainsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListDomainsResponse>): ListDomainsResponse {
    const message = createBaseListDomainsResponse();
    message.domains = object.domains?.map((e) => Domain.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetDomainRequest(): GetDomainRequest {
  return { name: "" };
}

export const GetDomainRequest: MessageFns<GetDomainRequest> = {
  encode(message: GetDomainRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetDomainRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDomainRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDomainRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetDomainRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetDomainRequest>): GetDomainRequest {
    return GetDomainRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetDomainRequest>): GetDomainRequest {
    const message = createBaseGetDomainRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpdateDomainRequest(): UpdateDomainRequest {
  return { updateMask: undefined, domain: undefined };
}

export const UpdateDomainRequest: MessageFns<UpdateDomainRequest> = {
  encode(message: UpdateDomainRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(10).fork()).join();
    }
    if (message.domain !== undefined) {
      Domain.encode(message.domain, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateDomainRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateDomainRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.domain = Domain.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateDomainRequest {
    return {
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      domain: isSet(object.domain) ? Domain.fromJSON(object.domain) : undefined,
    };
  },

  toJSON(message: UpdateDomainRequest): unknown {
    const obj: any = {};
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.domain !== undefined) {
      obj.domain = Domain.toJSON(message.domain);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateDomainRequest>): UpdateDomainRequest {
    return UpdateDomainRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateDomainRequest>): UpdateDomainRequest {
    const message = createBaseUpdateDomainRequest();
    message.updateMask = object.updateMask ?? undefined;
    message.domain = (object.domain !== undefined && object.domain !== null)
      ? Domain.fromPartial(object.domain)
      : undefined;
    return message;
  },
};

function createBaseDeleteDomainRequest(): DeleteDomainRequest {
  return { name: "" };
}

export const DeleteDomainRequest: MessageFns<DeleteDomainRequest> = {
  encode(message: DeleteDomainRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteDomainRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteDomainRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteDomainRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteDomainRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteDomainRequest>): DeleteDomainRequest {
    return DeleteDomainRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteDomainRequest>): DeleteDomainRequest {
    const message = createBaseDeleteDomainRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseAttachTrustRequest(): AttachTrustRequest {
  return { name: "", trust: undefined };
}

export const AttachTrustRequest: MessageFns<AttachTrustRequest> = {
  encode(message: AttachTrustRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.trust !== undefined) {
      Trust.encode(message.trust, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AttachTrustRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAttachTrustRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.trust = Trust.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AttachTrustRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      trust: isSet(object.trust) ? Trust.fromJSON(object.trust) : undefined,
    };
  },

  toJSON(message: AttachTrustRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.trust !== undefined) {
      obj.trust = Trust.toJSON(message.trust);
    }
    return obj;
  },

  create(base?: DeepPartial<AttachTrustRequest>): AttachTrustRequest {
    return AttachTrustRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AttachTrustRequest>): AttachTrustRequest {
    const message = createBaseAttachTrustRequest();
    message.name = object.name ?? "";
    message.trust = (object.trust !== undefined && object.trust !== null) ? Trust.fromPartial(object.trust) : undefined;
    return message;
  },
};

function createBaseReconfigureTrustRequest(): ReconfigureTrustRequest {
  return { name: "", targetDomainName: "", targetDnsIpAddresses: [] };
}

export const ReconfigureTrustRequest: MessageFns<ReconfigureTrustRequest> = {
  encode(message: ReconfigureTrustRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.targetDomainName !== "") {
      writer.uint32(18).string(message.targetDomainName);
    }
    for (const v of message.targetDnsIpAddresses) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReconfigureTrustRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReconfigureTrustRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.targetDomainName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.targetDnsIpAddresses.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReconfigureTrustRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      targetDomainName: isSet(object.targetDomainName) ? globalThis.String(object.targetDomainName) : "",
      targetDnsIpAddresses: globalThis.Array.isArray(object?.targetDnsIpAddresses)
        ? object.targetDnsIpAddresses.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ReconfigureTrustRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.targetDomainName !== "") {
      obj.targetDomainName = message.targetDomainName;
    }
    if (message.targetDnsIpAddresses?.length) {
      obj.targetDnsIpAddresses = message.targetDnsIpAddresses;
    }
    return obj;
  },

  create(base?: DeepPartial<ReconfigureTrustRequest>): ReconfigureTrustRequest {
    return ReconfigureTrustRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ReconfigureTrustRequest>): ReconfigureTrustRequest {
    const message = createBaseReconfigureTrustRequest();
    message.name = object.name ?? "";
    message.targetDomainName = object.targetDomainName ?? "";
    message.targetDnsIpAddresses = object.targetDnsIpAddresses?.map((e) => e) || [];
    return message;
  },
};

function createBaseDetachTrustRequest(): DetachTrustRequest {
  return { name: "", trust: undefined };
}

export const DetachTrustRequest: MessageFns<DetachTrustRequest> = {
  encode(message: DetachTrustRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.trust !== undefined) {
      Trust.encode(message.trust, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DetachTrustRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDetachTrustRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.trust = Trust.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DetachTrustRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      trust: isSet(object.trust) ? Trust.fromJSON(object.trust) : undefined,
    };
  },

  toJSON(message: DetachTrustRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.trust !== undefined) {
      obj.trust = Trust.toJSON(message.trust);
    }
    return obj;
  },

  create(base?: DeepPartial<DetachTrustRequest>): DetachTrustRequest {
    return DetachTrustRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DetachTrustRequest>): DetachTrustRequest {
    const message = createBaseDetachTrustRequest();
    message.name = object.name ?? "";
    message.trust = (object.trust !== undefined && object.trust !== null) ? Trust.fromPartial(object.trust) : undefined;
    return message;
  },
};

function createBaseValidateTrustRequest(): ValidateTrustRequest {
  return { name: "", trust: undefined };
}

export const ValidateTrustRequest: MessageFns<ValidateTrustRequest> = {
  encode(message: ValidateTrustRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.trust !== undefined) {
      Trust.encode(message.trust, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ValidateTrustRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseValidateTrustRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.trust = Trust.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ValidateTrustRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      trust: isSet(object.trust) ? Trust.fromJSON(object.trust) : undefined,
    };
  },

  toJSON(message: ValidateTrustRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.trust !== undefined) {
      obj.trust = Trust.toJSON(message.trust);
    }
    return obj;
  },

  create(base?: DeepPartial<ValidateTrustRequest>): ValidateTrustRequest {
    return ValidateTrustRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ValidateTrustRequest>): ValidateTrustRequest {
    const message = createBaseValidateTrustRequest();
    message.name = object.name ?? "";
    message.trust = (object.trust !== undefined && object.trust !== null) ? Trust.fromPartial(object.trust) : undefined;
    return message;
  },
};

/**
 * API Overview
 *
 * The `managedidentites.googleapis.com` service implements the Google Cloud
 * Managed Identites API for identity services
 * (e.g. Microsoft Active Directory).
 *
 * The Managed Identities service provides methods to manage
 * (create/read/update/delete) domains, reset managed identities admin password,
 * add/remove domain controllers in GCP regions and add/remove VPC peering.
 *
 * Data Model
 *
 * The Managed Identities service exposes the following resources:
 *
 * * Locations as global, named as follows:
 *   `projects/{project_id}/locations/global`.
 *
 * * Domains, named as follows:
 *   `/projects/{project_id}/locations/global/domain/{domain_name}`.
 *
 * The `{domain_name}` refers to fully qualified domain name in the customer
 * project e.g. mydomain.myorganization.com, with the following restrictions:
 *
 *  * Must contain only lowercase letters, numbers, periods and hyphens.
 *  * Must start with a letter.
 *  * Must contain between 2-64 characters.
 *  * Must end with a number or a letter.
 *  * Must not start with period.
 *  * First segement length (mydomain form example above) shouldn't exceed
 *    15 chars.
 *  * The last segment cannot be fully numeric.
 *  * Must be unique within the customer project.
 */
export type ManagedIdentitiesServiceDefinition = typeof ManagedIdentitiesServiceDefinition;
export const ManagedIdentitiesServiceDefinition = {
  name: "ManagedIdentitiesService",
  fullName: "google.cloud.managedidentities.v1.ManagedIdentitiesService",
  methods: {
    /** Creates a Microsoft AD domain. */
    createMicrosoftAdDomain: {
      name: "CreateMicrosoftAdDomain",
      requestType: CreateMicrosoftAdDomainRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([20, 10, 6, 68, 111, 109, 97, 105, 110, 18, 10, 79, 112, 77, 101, 116, 97, 100, 97, 116, 97]),
          ],
          8410: [
            Buffer.from([
              25,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              100,
              111,
              109,
              97,
              105,
              110,
              95,
              110,
              97,
              109,
              101,
              44,
              100,
              111,
              109,
              97,
              105,
              110,
            ]),
          ],
          578365826: [
            Buffer.from([
              58,
              58,
              6,
              100,
              111,
              109,
              97,
              105,
              110,
              34,
              48,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              103,
              108,
              111,
              98,
              97,
              108,
              125,
              47,
              100,
              111,
              109,
              97,
              105,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /** Resets a domain's administrator password. */
    resetAdminPassword: {
      name: "ResetAdminPassword",
      requestType: ResetAdminPasswordRequest,
      requestStream: false,
      responseType: ResetAdminPasswordResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              72,
              58,
              1,
              42,
              34,
              67,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              103,
              108,
              111,
              98,
              97,
              108,
              47,
              100,
              111,
              109,
              97,
              105,
              110,
              115,
              47,
              42,
              125,
              58,
              114,
              101,
              115,
              101,
              116,
              65,
              100,
              109,
              105,
              110,
              80,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
            ]),
          ],
        },
      },
    },
    /** Lists domains in a project. */
    listDomains: {
      name: "ListDomains",
      requestType: ListDomainsRequest,
      requestStream: false,
      responseType: ListDomainsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              50,
              18,
              48,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              103,
              108,
              111,
              98,
              97,
              108,
              125,
              47,
              100,
              111,
              109,
              97,
              105,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets information about a domain. */
    getDomain: {
      name: "GetDomain",
      requestType: GetDomainRequest,
      requestStream: false,
      responseType: Domain,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              50,
              18,
              48,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              103,
              108,
              111,
              98,
              97,
              108,
              47,
              100,
              111,
              109,
              97,
              105,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Updates the metadata and configuration of a domain. */
    updateDomain: {
      name: "UpdateDomain",
      requestType: UpdateDomainRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([20, 10, 6, 68, 111, 109, 97, 105, 110, 18, 10, 79, 112, 77, 101, 116, 97, 100, 97, 116, 97]),
          ],
          8410: [
            Buffer.from([18, 100, 111, 109, 97, 105, 110, 44, 117, 112, 100, 97, 116, 101, 95, 109, 97, 115, 107]),
          ],
          578365826: [
            Buffer.from([
              65,
              58,
              6,
              100,
              111,
              109,
              97,
              105,
              110,
              50,
              55,
              47,
              118,
              49,
              47,
              123,
              100,
              111,
              109,
              97,
              105,
              110,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              103,
              108,
              111,
              98,
              97,
              108,
              47,
              100,
              111,
              109,
              97,
              105,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes a domain. */
    deleteDomain: {
      name: "DeleteDomain",
      requestType: DeleteDomainRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              35,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              10,
              79,
              112,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              50,
              42,
              48,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              103,
              108,
              111,
              98,
              97,
              108,
              47,
              100,
              111,
              109,
              97,
              105,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Adds an AD trust to a domain. */
    attachTrust: {
      name: "AttachTrust",
      requestType: AttachTrustRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([20, 10, 6, 68, 111, 109, 97, 105, 110, 18, 10, 79, 112, 77, 101, 116, 97, 100, 97, 116, 97]),
          ],
          8410: [Buffer.from([10, 110, 97, 109, 101, 44, 116, 114, 117, 115, 116])],
          578365826: [
            Buffer.from([
              65,
              58,
              1,
              42,
              34,
              60,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              103,
              108,
              111,
              98,
              97,
              108,
              47,
              100,
              111,
              109,
              97,
              105,
              110,
              115,
              47,
              42,
              125,
              58,
              97,
              116,
              116,
              97,
              99,
              104,
              84,
              114,
              117,
              115,
              116,
            ]),
          ],
        },
      },
    },
    /** Updates the DNS conditional forwarder. */
    reconfigureTrust: {
      name: "ReconfigureTrust",
      requestType: ReconfigureTrustRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([20, 10, 6, 68, 111, 109, 97, 105, 110, 18, 10, 79, 112, 77, 101, 116, 97, 100, 97, 116, 97]),
          ],
          8410: [
            Buffer.from([
              47,
              110,
              97,
              109,
              101,
              44,
              116,
              97,
              114,
              103,
              101,
              116,
              95,
              100,
              111,
              109,
              97,
              105,
              110,
              95,
              110,
              97,
              109,
              101,
              44,
              116,
              97,
              114,
              103,
              101,
              116,
              95,
              100,
              110,
              115,
              95,
              105,
              112,
              95,
              97,
              100,
              100,
              114,
              101,
              115,
              115,
              101,
              115,
            ]),
          ],
          578365826: [
            Buffer.from([
              70,
              58,
              1,
              42,
              34,
              65,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              103,
              108,
              111,
              98,
              97,
              108,
              47,
              100,
              111,
              109,
              97,
              105,
              110,
              115,
              47,
              42,
              125,
              58,
              114,
              101,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              84,
              114,
              117,
              115,
              116,
            ]),
          ],
        },
      },
    },
    /** Removes an AD trust. */
    detachTrust: {
      name: "DetachTrust",
      requestType: DetachTrustRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([20, 10, 6, 68, 111, 109, 97, 105, 110, 18, 10, 79, 112, 77, 101, 116, 97, 100, 97, 116, 97]),
          ],
          8410: [Buffer.from([10, 110, 97, 109, 101, 44, 116, 114, 117, 115, 116])],
          578365826: [
            Buffer.from([
              65,
              58,
              1,
              42,
              34,
              60,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              103,
              108,
              111,
              98,
              97,
              108,
              47,
              100,
              111,
              109,
              97,
              105,
              110,
              115,
              47,
              42,
              125,
              58,
              100,
              101,
              116,
              97,
              99,
              104,
              84,
              114,
              117,
              115,
              116,
            ]),
          ],
        },
      },
    },
    /**
     * Validates a trust state, that the target domain is reachable, and that the
     * target domain is able to accept incoming trust requests.
     */
    validateTrust: {
      name: "ValidateTrust",
      requestType: ValidateTrustRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([20, 10, 6, 68, 111, 109, 97, 105, 110, 18, 10, 79, 112, 77, 101, 116, 97, 100, 97, 116, 97]),
          ],
          8410: [Buffer.from([10, 110, 97, 109, 101, 44, 116, 114, 117, 115, 116])],
          578365826: [
            Buffer.from([
              67,
              58,
              1,
              42,
              34,
              62,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              103,
              108,
              111,
              98,
              97,
              108,
              47,
              100,
              111,
              109,
              97,
              105,
              110,
              115,
              47,
              42,
              125,
              58,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              101,
              84,
              114,
              117,
              115,
              116,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface ManagedIdentitiesServiceImplementation<CallContextExt = {}> {
  /** Creates a Microsoft AD domain. */
  createMicrosoftAdDomain(
    request: CreateMicrosoftAdDomainRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Resets a domain's administrator password. */
  resetAdminPassword(
    request: ResetAdminPasswordRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ResetAdminPasswordResponse>>;
  /** Lists domains in a project. */
  listDomains(
    request: ListDomainsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListDomainsResponse>>;
  /** Gets information about a domain. */
  getDomain(request: GetDomainRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Domain>>;
  /** Updates the metadata and configuration of a domain. */
  updateDomain(request: UpdateDomainRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /** Deletes a domain. */
  deleteDomain(request: DeleteDomainRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /** Adds an AD trust to a domain. */
  attachTrust(request: AttachTrustRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /** Updates the DNS conditional forwarder. */
  reconfigureTrust(
    request: ReconfigureTrustRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Removes an AD trust. */
  detachTrust(request: DetachTrustRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /**
   * Validates a trust state, that the target domain is reachable, and that the
   * target domain is able to accept incoming trust requests.
   */
  validateTrust(request: ValidateTrustRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
}

export interface ManagedIdentitiesServiceClient<CallOptionsExt = {}> {
  /** Creates a Microsoft AD domain. */
  createMicrosoftAdDomain(
    request: DeepPartial<CreateMicrosoftAdDomainRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Resets a domain's administrator password. */
  resetAdminPassword(
    request: DeepPartial<ResetAdminPasswordRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ResetAdminPasswordResponse>;
  /** Lists domains in a project. */
  listDomains(
    request: DeepPartial<ListDomainsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListDomainsResponse>;
  /** Gets information about a domain. */
  getDomain(request: DeepPartial<GetDomainRequest>, options?: CallOptions & CallOptionsExt): Promise<Domain>;
  /** Updates the metadata and configuration of a domain. */
  updateDomain(request: DeepPartial<UpdateDomainRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /** Deletes a domain. */
  deleteDomain(request: DeepPartial<DeleteDomainRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /** Adds an AD trust to a domain. */
  attachTrust(request: DeepPartial<AttachTrustRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /** Updates the DNS conditional forwarder. */
  reconfigureTrust(
    request: DeepPartial<ReconfigureTrustRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Removes an AD trust. */
  detachTrust(request: DeepPartial<DetachTrustRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /**
   * Validates a trust state, that the target domain is reachable, and that the
   * target domain is able to accept incoming trust requests.
   */
  validateTrust(request: DeepPartial<ValidateTrustRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
