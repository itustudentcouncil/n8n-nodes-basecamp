// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/discoveryengine/v1beta/site_search_engine.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../protobuf/timestamp.js";

export const protobufPackage = "google.cloud.discoveryengine.v1beta";

/**
 * SiteSearchEngine captures DataStore level site search persisting
 * configurations. It is a singleton value per data store.
 */
export interface SiteSearchEngine {
  /**
   * The fully qualified resource name of the site search engine.
   * Format: `projects/* /locations/* /dataStores/* /siteSearchEngine`
   */
  name: string;
}

/** A target site for the SiteSearchEngine. */
export interface TargetSite {
  /**
   * Output only. The fully qualified resource name of the target site.
   * `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/siteSearchEngine/targetSites/{target_site}`
   * The `target_site_id` is system-generated.
   */
  name: string;
  /**
   * Required. Input only. The user provided URI pattern from which the
   * `generated_uri_pattern` is generated.
   */
  providedUriPattern: string;
  /**
   * The type of the target site, e.g., whether the site is to be included or
   * excluded.
   */
  type: TargetSite_Type;
  /**
   * Input only. If set to false, a uri_pattern is generated to include all
   * pages whose address contains the provided_uri_pattern. If set to true, an
   * uri_pattern is generated to try to be an exact match of the
   * provided_uri_pattern or just the specific page if the provided_uri_pattern
   * is a specific one. provided_uri_pattern is always normalized to
   * generate the URI pattern to be used by the search engine.
   */
  exactMatch: boolean;
  /** Output only. This is system-generated based on the provided_uri_pattern. */
  generatedUriPattern: string;
  /** Output only. Root domain of the provided_uri_pattern. */
  rootDomainUri: string;
  /** Output only. Site ownership and validity verification status. */
  siteVerificationInfo:
    | SiteVerificationInfo
    | undefined;
  /** Output only. Indexing status. */
  indexingStatus: TargetSite_IndexingStatus;
  /** Output only. The target site's last updated time. */
  updateTime:
    | Date
    | undefined;
  /** Output only. Failure reason. */
  failureReason: TargetSite_FailureReason | undefined;
}

/** Possible target site types. */
export enum TargetSite_Type {
  /**
   * TYPE_UNSPECIFIED - This value is unused. In this case, server behavior defaults to
   * [Type.INCLUDE][google.cloud.discoveryengine.v1beta.TargetSite.Type.INCLUDE].
   */
  TYPE_UNSPECIFIED = 0,
  /** INCLUDE - Include the target site. */
  INCLUDE = 1,
  /** EXCLUDE - Exclude the target site. */
  EXCLUDE = 2,
  UNRECOGNIZED = -1,
}

export function targetSite_TypeFromJSON(object: any): TargetSite_Type {
  switch (object) {
    case 0:
    case "TYPE_UNSPECIFIED":
      return TargetSite_Type.TYPE_UNSPECIFIED;
    case 1:
    case "INCLUDE":
      return TargetSite_Type.INCLUDE;
    case 2:
    case "EXCLUDE":
      return TargetSite_Type.EXCLUDE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return TargetSite_Type.UNRECOGNIZED;
  }
}

export function targetSite_TypeToJSON(object: TargetSite_Type): string {
  switch (object) {
    case TargetSite_Type.TYPE_UNSPECIFIED:
      return "TYPE_UNSPECIFIED";
    case TargetSite_Type.INCLUDE:
      return "INCLUDE";
    case TargetSite_Type.EXCLUDE:
      return "EXCLUDE";
    case TargetSite_Type.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Target site indexing status enumeration. */
export enum TargetSite_IndexingStatus {
  /** INDEXING_STATUS_UNSPECIFIED - Defaults to SUCCEEDED. */
  INDEXING_STATUS_UNSPECIFIED = 0,
  /**
   * PENDING - The target site is in the update queue and will be picked up by indexing
   * pipeline.
   */
  PENDING = 1,
  /** FAILED - The target site fails to be indexed. */
  FAILED = 2,
  /** SUCCEEDED - The target site has been indexed. */
  SUCCEEDED = 3,
  /**
   * DELETING - The previously indexed target site has been marked to be deleted. This is
   * a transitioning state which will resulted in either:
   * 1. target site deleted if unindexing is successful;
   * 2. state reverts to SUCCEEDED if the unindexing fails.
   */
  DELETING = 4,
  UNRECOGNIZED = -1,
}

export function targetSite_IndexingStatusFromJSON(object: any): TargetSite_IndexingStatus {
  switch (object) {
    case 0:
    case "INDEXING_STATUS_UNSPECIFIED":
      return TargetSite_IndexingStatus.INDEXING_STATUS_UNSPECIFIED;
    case 1:
    case "PENDING":
      return TargetSite_IndexingStatus.PENDING;
    case 2:
    case "FAILED":
      return TargetSite_IndexingStatus.FAILED;
    case 3:
    case "SUCCEEDED":
      return TargetSite_IndexingStatus.SUCCEEDED;
    case 4:
    case "DELETING":
      return TargetSite_IndexingStatus.DELETING;
    case -1:
    case "UNRECOGNIZED":
    default:
      return TargetSite_IndexingStatus.UNRECOGNIZED;
  }
}

export function targetSite_IndexingStatusToJSON(object: TargetSite_IndexingStatus): string {
  switch (object) {
    case TargetSite_IndexingStatus.INDEXING_STATUS_UNSPECIFIED:
      return "INDEXING_STATUS_UNSPECIFIED";
    case TargetSite_IndexingStatus.PENDING:
      return "PENDING";
    case TargetSite_IndexingStatus.FAILED:
      return "FAILED";
    case TargetSite_IndexingStatus.SUCCEEDED:
      return "SUCCEEDED";
    case TargetSite_IndexingStatus.DELETING:
      return "DELETING";
    case TargetSite_IndexingStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Site search indexing failure reasons. */
export interface TargetSite_FailureReason {
  /** Failed due to insufficient quota. */
  quotaFailure?: TargetSite_FailureReason_QuotaFailure | undefined;
}

/** Failed due to insufficient quota. */
export interface TargetSite_FailureReason_QuotaFailure {
  /**
   * This number is an estimation on how much total quota this project needs
   * to successfully complete indexing.
   */
  totalRequiredQuota: Long;
}

/** Verification information for target sites in advanced site search. */
export interface SiteVerificationInfo {
  /** Site verification state indicating the ownership and validity. */
  siteVerificationState: SiteVerificationInfo_SiteVerificationState;
  /** Latest site verification time. */
  verifyTime: Date | undefined;
}

/** Site verification state. */
export enum SiteVerificationInfo_SiteVerificationState {
  /** SITE_VERIFICATION_STATE_UNSPECIFIED - Defaults to VERIFIED. */
  SITE_VERIFICATION_STATE_UNSPECIFIED = 0,
  /** VERIFIED - Site ownership verified. */
  VERIFIED = 1,
  /** UNVERIFIED - Site ownership pending verification or verification failed. */
  UNVERIFIED = 2,
  /** EXEMPTED - Site exempt from verification, e.g., a public website that opens to all. */
  EXEMPTED = 3,
  UNRECOGNIZED = -1,
}

export function siteVerificationInfo_SiteVerificationStateFromJSON(
  object: any,
): SiteVerificationInfo_SiteVerificationState {
  switch (object) {
    case 0:
    case "SITE_VERIFICATION_STATE_UNSPECIFIED":
      return SiteVerificationInfo_SiteVerificationState.SITE_VERIFICATION_STATE_UNSPECIFIED;
    case 1:
    case "VERIFIED":
      return SiteVerificationInfo_SiteVerificationState.VERIFIED;
    case 2:
    case "UNVERIFIED":
      return SiteVerificationInfo_SiteVerificationState.UNVERIFIED;
    case 3:
    case "EXEMPTED":
      return SiteVerificationInfo_SiteVerificationState.EXEMPTED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SiteVerificationInfo_SiteVerificationState.UNRECOGNIZED;
  }
}

export function siteVerificationInfo_SiteVerificationStateToJSON(
  object: SiteVerificationInfo_SiteVerificationState,
): string {
  switch (object) {
    case SiteVerificationInfo_SiteVerificationState.SITE_VERIFICATION_STATE_UNSPECIFIED:
      return "SITE_VERIFICATION_STATE_UNSPECIFIED";
    case SiteVerificationInfo_SiteVerificationState.VERIFIED:
      return "VERIFIED";
    case SiteVerificationInfo_SiteVerificationState.UNVERIFIED:
      return "UNVERIFIED";
    case SiteVerificationInfo_SiteVerificationState.EXEMPTED:
      return "EXEMPTED";
    case SiteVerificationInfo_SiteVerificationState.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseSiteSearchEngine(): SiteSearchEngine {
  return { name: "" };
}

export const SiteSearchEngine: MessageFns<SiteSearchEngine> = {
  encode(message: SiteSearchEngine, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SiteSearchEngine {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSiteSearchEngine();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SiteSearchEngine {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: SiteSearchEngine): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<SiteSearchEngine>): SiteSearchEngine {
    return SiteSearchEngine.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SiteSearchEngine>): SiteSearchEngine {
    const message = createBaseSiteSearchEngine();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseTargetSite(): TargetSite {
  return {
    name: "",
    providedUriPattern: "",
    type: 0,
    exactMatch: false,
    generatedUriPattern: "",
    rootDomainUri: "",
    siteVerificationInfo: undefined,
    indexingStatus: 0,
    updateTime: undefined,
    failureReason: undefined,
  };
}

export const TargetSite: MessageFns<TargetSite> = {
  encode(message: TargetSite, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.providedUriPattern !== "") {
      writer.uint32(18).string(message.providedUriPattern);
    }
    if (message.type !== 0) {
      writer.uint32(24).int32(message.type);
    }
    if (message.exactMatch !== false) {
      writer.uint32(48).bool(message.exactMatch);
    }
    if (message.generatedUriPattern !== "") {
      writer.uint32(34).string(message.generatedUriPattern);
    }
    if (message.rootDomainUri !== "") {
      writer.uint32(82).string(message.rootDomainUri);
    }
    if (message.siteVerificationInfo !== undefined) {
      SiteVerificationInfo.encode(message.siteVerificationInfo, writer.uint32(58).fork()).join();
    }
    if (message.indexingStatus !== 0) {
      writer.uint32(64).int32(message.indexingStatus);
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(42).fork()).join();
    }
    if (message.failureReason !== undefined) {
      TargetSite_FailureReason.encode(message.failureReason, writer.uint32(74).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TargetSite {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTargetSite();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.providedUriPattern = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.exactMatch = reader.bool();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.generatedUriPattern = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.rootDomainUri = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.siteVerificationInfo = SiteVerificationInfo.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.indexingStatus = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.failureReason = TargetSite_FailureReason.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TargetSite {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      providedUriPattern: isSet(object.providedUriPattern) ? globalThis.String(object.providedUriPattern) : "",
      type: isSet(object.type) ? targetSite_TypeFromJSON(object.type) : 0,
      exactMatch: isSet(object.exactMatch) ? globalThis.Boolean(object.exactMatch) : false,
      generatedUriPattern: isSet(object.generatedUriPattern) ? globalThis.String(object.generatedUriPattern) : "",
      rootDomainUri: isSet(object.rootDomainUri) ? globalThis.String(object.rootDomainUri) : "",
      siteVerificationInfo: isSet(object.siteVerificationInfo)
        ? SiteVerificationInfo.fromJSON(object.siteVerificationInfo)
        : undefined,
      indexingStatus: isSet(object.indexingStatus) ? targetSite_IndexingStatusFromJSON(object.indexingStatus) : 0,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      failureReason: isSet(object.failureReason) ? TargetSite_FailureReason.fromJSON(object.failureReason) : undefined,
    };
  },

  toJSON(message: TargetSite): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.providedUriPattern !== "") {
      obj.providedUriPattern = message.providedUriPattern;
    }
    if (message.type !== 0) {
      obj.type = targetSite_TypeToJSON(message.type);
    }
    if (message.exactMatch !== false) {
      obj.exactMatch = message.exactMatch;
    }
    if (message.generatedUriPattern !== "") {
      obj.generatedUriPattern = message.generatedUriPattern;
    }
    if (message.rootDomainUri !== "") {
      obj.rootDomainUri = message.rootDomainUri;
    }
    if (message.siteVerificationInfo !== undefined) {
      obj.siteVerificationInfo = SiteVerificationInfo.toJSON(message.siteVerificationInfo);
    }
    if (message.indexingStatus !== 0) {
      obj.indexingStatus = targetSite_IndexingStatusToJSON(message.indexingStatus);
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.failureReason !== undefined) {
      obj.failureReason = TargetSite_FailureReason.toJSON(message.failureReason);
    }
    return obj;
  },

  create(base?: DeepPartial<TargetSite>): TargetSite {
    return TargetSite.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TargetSite>): TargetSite {
    const message = createBaseTargetSite();
    message.name = object.name ?? "";
    message.providedUriPattern = object.providedUriPattern ?? "";
    message.type = object.type ?? 0;
    message.exactMatch = object.exactMatch ?? false;
    message.generatedUriPattern = object.generatedUriPattern ?? "";
    message.rootDomainUri = object.rootDomainUri ?? "";
    message.siteVerificationInfo = (object.siteVerificationInfo !== undefined && object.siteVerificationInfo !== null)
      ? SiteVerificationInfo.fromPartial(object.siteVerificationInfo)
      : undefined;
    message.indexingStatus = object.indexingStatus ?? 0;
    message.updateTime = object.updateTime ?? undefined;
    message.failureReason = (object.failureReason !== undefined && object.failureReason !== null)
      ? TargetSite_FailureReason.fromPartial(object.failureReason)
      : undefined;
    return message;
  },
};

function createBaseTargetSite_FailureReason(): TargetSite_FailureReason {
  return { quotaFailure: undefined };
}

export const TargetSite_FailureReason: MessageFns<TargetSite_FailureReason> = {
  encode(message: TargetSite_FailureReason, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.quotaFailure !== undefined) {
      TargetSite_FailureReason_QuotaFailure.encode(message.quotaFailure, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TargetSite_FailureReason {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTargetSite_FailureReason();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.quotaFailure = TargetSite_FailureReason_QuotaFailure.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TargetSite_FailureReason {
    return {
      quotaFailure: isSet(object.quotaFailure)
        ? TargetSite_FailureReason_QuotaFailure.fromJSON(object.quotaFailure)
        : undefined,
    };
  },

  toJSON(message: TargetSite_FailureReason): unknown {
    const obj: any = {};
    if (message.quotaFailure !== undefined) {
      obj.quotaFailure = TargetSite_FailureReason_QuotaFailure.toJSON(message.quotaFailure);
    }
    return obj;
  },

  create(base?: DeepPartial<TargetSite_FailureReason>): TargetSite_FailureReason {
    return TargetSite_FailureReason.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TargetSite_FailureReason>): TargetSite_FailureReason {
    const message = createBaseTargetSite_FailureReason();
    message.quotaFailure = (object.quotaFailure !== undefined && object.quotaFailure !== null)
      ? TargetSite_FailureReason_QuotaFailure.fromPartial(object.quotaFailure)
      : undefined;
    return message;
  },
};

function createBaseTargetSite_FailureReason_QuotaFailure(): TargetSite_FailureReason_QuotaFailure {
  return { totalRequiredQuota: Long.ZERO };
}

export const TargetSite_FailureReason_QuotaFailure: MessageFns<TargetSite_FailureReason_QuotaFailure> = {
  encode(message: TargetSite_FailureReason_QuotaFailure, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.totalRequiredQuota.equals(Long.ZERO)) {
      writer.uint32(8).int64(message.totalRequiredQuota.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TargetSite_FailureReason_QuotaFailure {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTargetSite_FailureReason_QuotaFailure();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.totalRequiredQuota = Long.fromString(reader.int64().toString());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TargetSite_FailureReason_QuotaFailure {
    return {
      totalRequiredQuota: isSet(object.totalRequiredQuota) ? Long.fromValue(object.totalRequiredQuota) : Long.ZERO,
    };
  },

  toJSON(message: TargetSite_FailureReason_QuotaFailure): unknown {
    const obj: any = {};
    if (!message.totalRequiredQuota.equals(Long.ZERO)) {
      obj.totalRequiredQuota = (message.totalRequiredQuota || Long.ZERO).toString();
    }
    return obj;
  },

  create(base?: DeepPartial<TargetSite_FailureReason_QuotaFailure>): TargetSite_FailureReason_QuotaFailure {
    return TargetSite_FailureReason_QuotaFailure.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TargetSite_FailureReason_QuotaFailure>): TargetSite_FailureReason_QuotaFailure {
    const message = createBaseTargetSite_FailureReason_QuotaFailure();
    message.totalRequiredQuota = (object.totalRequiredQuota !== undefined && object.totalRequiredQuota !== null)
      ? Long.fromValue(object.totalRequiredQuota)
      : Long.ZERO;
    return message;
  },
};

function createBaseSiteVerificationInfo(): SiteVerificationInfo {
  return { siteVerificationState: 0, verifyTime: undefined };
}

export const SiteVerificationInfo: MessageFns<SiteVerificationInfo> = {
  encode(message: SiteVerificationInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.siteVerificationState !== 0) {
      writer.uint32(8).int32(message.siteVerificationState);
    }
    if (message.verifyTime !== undefined) {
      Timestamp.encode(toTimestamp(message.verifyTime), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SiteVerificationInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSiteVerificationInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.siteVerificationState = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.verifyTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SiteVerificationInfo {
    return {
      siteVerificationState: isSet(object.siteVerificationState)
        ? siteVerificationInfo_SiteVerificationStateFromJSON(object.siteVerificationState)
        : 0,
      verifyTime: isSet(object.verifyTime) ? fromJsonTimestamp(object.verifyTime) : undefined,
    };
  },

  toJSON(message: SiteVerificationInfo): unknown {
    const obj: any = {};
    if (message.siteVerificationState !== 0) {
      obj.siteVerificationState = siteVerificationInfo_SiteVerificationStateToJSON(message.siteVerificationState);
    }
    if (message.verifyTime !== undefined) {
      obj.verifyTime = message.verifyTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<SiteVerificationInfo>): SiteVerificationInfo {
    return SiteVerificationInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SiteVerificationInfo>): SiteVerificationInfo {
    const message = createBaseSiteVerificationInfo();
    message.siteVerificationState = object.siteVerificationState ?? 0;
    message.verifyTime = object.verifyTime ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
