// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/discoveryengine/v1beta/document.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Struct } from "../../../protobuf/struct.js";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { Status } from "../../../rpc/status.js";

export const protobufPackage = "google.cloud.discoveryengine.v1beta";

/**
 * Document captures all raw metadata information of items to be recommended or
 * searched.
 */
export interface Document {
  /**
   * The structured JSON data for the document. It should conform to the
   * registered [Schema][google.cloud.discoveryengine.v1beta.Schema] or an
   * `INVALID_ARGUMENT` error is thrown.
   */
  structData?:
    | { [key: string]: any }
    | undefined;
  /**
   * The JSON string representation of the document. It should conform to the
   * registered [Schema][google.cloud.discoveryengine.v1beta.Schema] or an
   * `INVALID_ARGUMENT` error is thrown.
   */
  jsonData?:
    | string
    | undefined;
  /**
   * Immutable. The full resource name of the document.
   * Format:
   * `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/branches/{branch}/documents/{document_id}`.
   *
   * This field must be a UTF-8 encoded string with a length limit of 1024
   * characters.
   */
  name: string;
  /**
   * Immutable. The identifier of the document.
   *
   * Id should conform to [RFC-1034](https://tools.ietf.org/html/rfc1034)
   * standard with a length limit of 63 characters.
   */
  id: string;
  /** The identifier of the schema located in the same data store. */
  schemaId: string;
  /**
   * The unstructured data linked to this document. Content must be set if this
   * document is under a
   * `CONTENT_REQUIRED` data store.
   */
  content:
    | Document_Content
    | undefined;
  /**
   * The identifier of the parent document. Currently supports at most two level
   * document hierarchy.
   *
   * Id should conform to [RFC-1034](https://tools.ietf.org/html/rfc1034)
   * standard with a length limit of 63 characters.
   */
  parentDocumentId: string;
  /**
   * Output only. This field is OUTPUT_ONLY.
   * It contains derived data that are not in the original input document.
   */
  derivedStructData:
    | { [key: string]: any }
    | undefined;
  /**
   * Output only. The last time the document was indexed. If this field is set,
   * the document could be returned in search results.
   *
   * This field is OUTPUT_ONLY. If this field is not populated, it means the
   * document has never been indexed.
   */
  indexTime:
    | Date
    | undefined;
  /**
   * Output only. The index status of the document.
   *
   * * If document is indexed successfully, the index_time field is populated.
   * * Otherwise, if document is not indexed due to errors, the error_samples
   *   field is populated.
   * * Otherwise, index_status is unset.
   */
  indexStatus: Document_IndexStatus | undefined;
}

/** Unstructured data linked to this document. */
export interface Document_Content {
  /**
   * The content represented as a stream of bytes. The maximum length is
   * 1,000,000 bytes (1 MB / ~0.95 MiB).
   *
   * Note: As with all `bytes` fields, this field is represented as pure
   * binary in Protocol Buffers and base64-encoded string in JSON. For
   * example, `abc123!?$*&()'-=@~` should be represented as
   * `YWJjMTIzIT8kKiYoKSctPUB+` in JSON. See
   * https://developers.google.com/protocol-buffers/docs/proto3#json.
   */
  rawBytes?:
    | Buffer
    | undefined;
  /**
   * The URI of the content. Only Cloud Storage URIs (e.g.
   * `gs://bucket-name/path/to/file`) are supported. The maximum file size
   * is 2.5 MB for text-based formats, 200 MB for other formats.
   */
  uri?:
    | string
    | undefined;
  /**
   * The MIME type of the content. Supported types:
   *
   * * `application/pdf` (PDF, only native PDFs are supported for now)
   * * `text/html` (HTML)
   * * `application/vnd.openxmlformats-officedocument.wordprocessingml.document` (DOCX)
   * * `application/vnd.openxmlformats-officedocument.presentationml.presentation` (PPTX)
   * * `text/plain` (TXT)
   *
   * See https://www.iana.org/assignments/media-types/media-types.xhtml.
   */
  mimeType: string;
}

/** Index status of the document. */
export interface Document_IndexStatus {
  /**
   * The time when the document was indexed.
   * If this field is populated, it means the document has been indexed.
   */
  indexTime:
    | Date
    | undefined;
  /**
   * A sample of errors encountered while indexing the document.
   * If this field is populated, the document is not indexed due to errors.
   */
  errorSamples: Status[];
}

function createBaseDocument(): Document {
  return {
    structData: undefined,
    jsonData: undefined,
    name: "",
    id: "",
    schemaId: "",
    content: undefined,
    parentDocumentId: "",
    derivedStructData: undefined,
    indexTime: undefined,
    indexStatus: undefined,
  };
}

export const Document: MessageFns<Document> = {
  encode(message: Document, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.structData !== undefined) {
      Struct.encode(Struct.wrap(message.structData), writer.uint32(34).fork()).join();
    }
    if (message.jsonData !== undefined) {
      writer.uint32(42).string(message.jsonData);
    }
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    if (message.schemaId !== "") {
      writer.uint32(26).string(message.schemaId);
    }
    if (message.content !== undefined) {
      Document_Content.encode(message.content, writer.uint32(82).fork()).join();
    }
    if (message.parentDocumentId !== "") {
      writer.uint32(58).string(message.parentDocumentId);
    }
    if (message.derivedStructData !== undefined) {
      Struct.encode(Struct.wrap(message.derivedStructData), writer.uint32(50).fork()).join();
    }
    if (message.indexTime !== undefined) {
      Timestamp.encode(toTimestamp(message.indexTime), writer.uint32(106).fork()).join();
    }
    if (message.indexStatus !== undefined) {
      Document_IndexStatus.encode(message.indexStatus, writer.uint32(122).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Document {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDocument();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 4:
          if (tag !== 34) {
            break;
          }

          message.structData = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.jsonData = reader.string();
          continue;
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.schemaId = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.content = Document_Content.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.parentDocumentId = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.derivedStructData = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.indexTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.indexStatus = Document_IndexStatus.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Document {
    return {
      structData: isObject(object.structData) ? object.structData : undefined,
      jsonData: isSet(object.jsonData) ? globalThis.String(object.jsonData) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      schemaId: isSet(object.schemaId) ? globalThis.String(object.schemaId) : "",
      content: isSet(object.content) ? Document_Content.fromJSON(object.content) : undefined,
      parentDocumentId: isSet(object.parentDocumentId) ? globalThis.String(object.parentDocumentId) : "",
      derivedStructData: isObject(object.derivedStructData) ? object.derivedStructData : undefined,
      indexTime: isSet(object.indexTime) ? fromJsonTimestamp(object.indexTime) : undefined,
      indexStatus: isSet(object.indexStatus) ? Document_IndexStatus.fromJSON(object.indexStatus) : undefined,
    };
  },

  toJSON(message: Document): unknown {
    const obj: any = {};
    if (message.structData !== undefined) {
      obj.structData = message.structData;
    }
    if (message.jsonData !== undefined) {
      obj.jsonData = message.jsonData;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.schemaId !== "") {
      obj.schemaId = message.schemaId;
    }
    if (message.content !== undefined) {
      obj.content = Document_Content.toJSON(message.content);
    }
    if (message.parentDocumentId !== "") {
      obj.parentDocumentId = message.parentDocumentId;
    }
    if (message.derivedStructData !== undefined) {
      obj.derivedStructData = message.derivedStructData;
    }
    if (message.indexTime !== undefined) {
      obj.indexTime = message.indexTime.toISOString();
    }
    if (message.indexStatus !== undefined) {
      obj.indexStatus = Document_IndexStatus.toJSON(message.indexStatus);
    }
    return obj;
  },

  create(base?: DeepPartial<Document>): Document {
    return Document.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Document>): Document {
    const message = createBaseDocument();
    message.structData = object.structData ?? undefined;
    message.jsonData = object.jsonData ?? undefined;
    message.name = object.name ?? "";
    message.id = object.id ?? "";
    message.schemaId = object.schemaId ?? "";
    message.content = (object.content !== undefined && object.content !== null)
      ? Document_Content.fromPartial(object.content)
      : undefined;
    message.parentDocumentId = object.parentDocumentId ?? "";
    message.derivedStructData = object.derivedStructData ?? undefined;
    message.indexTime = object.indexTime ?? undefined;
    message.indexStatus = (object.indexStatus !== undefined && object.indexStatus !== null)
      ? Document_IndexStatus.fromPartial(object.indexStatus)
      : undefined;
    return message;
  },
};

function createBaseDocument_Content(): Document_Content {
  return { rawBytes: undefined, uri: undefined, mimeType: "" };
}

export const Document_Content: MessageFns<Document_Content> = {
  encode(message: Document_Content, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.rawBytes !== undefined) {
      writer.uint32(18).bytes(message.rawBytes);
    }
    if (message.uri !== undefined) {
      writer.uint32(26).string(message.uri);
    }
    if (message.mimeType !== "") {
      writer.uint32(10).string(message.mimeType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Document_Content {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDocument_Content();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.rawBytes = Buffer.from(reader.bytes());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.uri = reader.string();
          continue;
        case 1:
          if (tag !== 10) {
            break;
          }

          message.mimeType = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Document_Content {
    return {
      rawBytes: isSet(object.rawBytes) ? Buffer.from(bytesFromBase64(object.rawBytes)) : undefined,
      uri: isSet(object.uri) ? globalThis.String(object.uri) : undefined,
      mimeType: isSet(object.mimeType) ? globalThis.String(object.mimeType) : "",
    };
  },

  toJSON(message: Document_Content): unknown {
    const obj: any = {};
    if (message.rawBytes !== undefined) {
      obj.rawBytes = base64FromBytes(message.rawBytes);
    }
    if (message.uri !== undefined) {
      obj.uri = message.uri;
    }
    if (message.mimeType !== "") {
      obj.mimeType = message.mimeType;
    }
    return obj;
  },

  create(base?: DeepPartial<Document_Content>): Document_Content {
    return Document_Content.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Document_Content>): Document_Content {
    const message = createBaseDocument_Content();
    message.rawBytes = object.rawBytes ?? undefined;
    message.uri = object.uri ?? undefined;
    message.mimeType = object.mimeType ?? "";
    return message;
  },
};

function createBaseDocument_IndexStatus(): Document_IndexStatus {
  return { indexTime: undefined, errorSamples: [] };
}

export const Document_IndexStatus: MessageFns<Document_IndexStatus> = {
  encode(message: Document_IndexStatus, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.indexTime !== undefined) {
      Timestamp.encode(toTimestamp(message.indexTime), writer.uint32(10).fork()).join();
    }
    for (const v of message.errorSamples) {
      Status.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Document_IndexStatus {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDocument_IndexStatus();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.indexTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorSamples.push(Status.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Document_IndexStatus {
    return {
      indexTime: isSet(object.indexTime) ? fromJsonTimestamp(object.indexTime) : undefined,
      errorSamples: globalThis.Array.isArray(object?.errorSamples)
        ? object.errorSamples.map((e: any) => Status.fromJSON(e))
        : [],
    };
  },

  toJSON(message: Document_IndexStatus): unknown {
    const obj: any = {};
    if (message.indexTime !== undefined) {
      obj.indexTime = message.indexTime.toISOString();
    }
    if (message.errorSamples?.length) {
      obj.errorSamples = message.errorSamples.map((e) => Status.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<Document_IndexStatus>): Document_IndexStatus {
    return Document_IndexStatus.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Document_IndexStatus>): Document_IndexStatus {
    const message = createBaseDocument_IndexStatus();
    message.indexTime = object.indexTime ?? undefined;
    message.errorSamples = object.errorSamples?.map((e) => Status.fromPartial(e)) || [];
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
}

function base64FromBytes(arr: Uint8Array): string {
  return globalThis.Buffer.from(arr).toString("base64");
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
