// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/discoveryengine/v1beta/sample_query.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../protobuf/timestamp.js";

export const protobufPackage = "google.cloud.discoveryengine.v1beta";

/** Sample Query captures metadata to be used for evaluation. */
export interface SampleQuery {
  /** The query entry. */
  queryEntry?:
    | SampleQuery_QueryEntry
    | undefined;
  /**
   * Identifier. The full resource name of the sample query, in the format of
   * `projects/{project}/locations/{location}/sampleQuerySets/{sample_query_set}/sampleQueries/{sample_query}`.
   *
   * This field must be a UTF-8 encoded string with a length limit of 1024
   * characters.
   */
  name: string;
  /**
   * Output only. Timestamp the
   * [SampleQuery][google.cloud.discoveryengine.v1beta.SampleQuery] was created
   * at.
   */
  createTime: Date | undefined;
}

/** Query Entry captures metadata to be used for search evaluation. */
export interface SampleQuery_QueryEntry {
  /** Required. The query. */
  query: string;
  /** List of targets for the query. */
  targets: SampleQuery_QueryEntry_Target[];
}

/** Defines the parameters of the query's expected outcome. */
export interface SampleQuery_QueryEntry_Target {
  /**
   * Expected uri of the target.
   *
   * This field must be a UTF-8 encoded string with a length limit of 2048
   * characters.
   *
   * Example of valid uris: `https://example.com/abc`,
   * `gcs://example/example.pdf`.
   */
  uri: string;
  /**
   * Expected page numbers of the target.
   *
   * Each page number must be non negative.
   */
  pageNumbers: number[];
  /** Relevance score of the target. */
  score?: number | undefined;
}

function createBaseSampleQuery(): SampleQuery {
  return { queryEntry: undefined, name: "", createTime: undefined };
}

export const SampleQuery: MessageFns<SampleQuery> = {
  encode(message: SampleQuery, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.queryEntry !== undefined) {
      SampleQuery_QueryEntry.encode(message.queryEntry, writer.uint32(18).fork()).join();
    }
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SampleQuery {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSampleQuery();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.queryEntry = SampleQuery_QueryEntry.decode(reader, reader.uint32());
          continue;
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SampleQuery {
    return {
      queryEntry: isSet(object.queryEntry) ? SampleQuery_QueryEntry.fromJSON(object.queryEntry) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
    };
  },

  toJSON(message: SampleQuery): unknown {
    const obj: any = {};
    if (message.queryEntry !== undefined) {
      obj.queryEntry = SampleQuery_QueryEntry.toJSON(message.queryEntry);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<SampleQuery>): SampleQuery {
    return SampleQuery.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SampleQuery>): SampleQuery {
    const message = createBaseSampleQuery();
    message.queryEntry = (object.queryEntry !== undefined && object.queryEntry !== null)
      ? SampleQuery_QueryEntry.fromPartial(object.queryEntry)
      : undefined;
    message.name = object.name ?? "";
    message.createTime = object.createTime ?? undefined;
    return message;
  },
};

function createBaseSampleQuery_QueryEntry(): SampleQuery_QueryEntry {
  return { query: "", targets: [] };
}

export const SampleQuery_QueryEntry: MessageFns<SampleQuery_QueryEntry> = {
  encode(message: SampleQuery_QueryEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.query !== "") {
      writer.uint32(10).string(message.query);
    }
    for (const v of message.targets) {
      SampleQuery_QueryEntry_Target.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SampleQuery_QueryEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSampleQuery_QueryEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.query = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.targets.push(SampleQuery_QueryEntry_Target.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SampleQuery_QueryEntry {
    return {
      query: isSet(object.query) ? globalThis.String(object.query) : "",
      targets: globalThis.Array.isArray(object?.targets)
        ? object.targets.map((e: any) => SampleQuery_QueryEntry_Target.fromJSON(e))
        : [],
    };
  },

  toJSON(message: SampleQuery_QueryEntry): unknown {
    const obj: any = {};
    if (message.query !== "") {
      obj.query = message.query;
    }
    if (message.targets?.length) {
      obj.targets = message.targets.map((e) => SampleQuery_QueryEntry_Target.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<SampleQuery_QueryEntry>): SampleQuery_QueryEntry {
    return SampleQuery_QueryEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SampleQuery_QueryEntry>): SampleQuery_QueryEntry {
    const message = createBaseSampleQuery_QueryEntry();
    message.query = object.query ?? "";
    message.targets = object.targets?.map((e) => SampleQuery_QueryEntry_Target.fromPartial(e)) || [];
    return message;
  },
};

function createBaseSampleQuery_QueryEntry_Target(): SampleQuery_QueryEntry_Target {
  return { uri: "", pageNumbers: [], score: undefined };
}

export const SampleQuery_QueryEntry_Target: MessageFns<SampleQuery_QueryEntry_Target> = {
  encode(message: SampleQuery_QueryEntry_Target, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.uri !== "") {
      writer.uint32(10).string(message.uri);
    }
    writer.uint32(18).fork();
    for (const v of message.pageNumbers) {
      writer.int32(v);
    }
    writer.join();
    if (message.score !== undefined) {
      writer.uint32(25).double(message.score);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SampleQuery_QueryEntry_Target {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSampleQuery_QueryEntry_Target();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.uri = reader.string();
          continue;
        case 2:
          if (tag === 16) {
            message.pageNumbers.push(reader.int32());

            continue;
          }

          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.pageNumbers.push(reader.int32());
            }

            continue;
          }

          break;
        case 3:
          if (tag !== 25) {
            break;
          }

          message.score = reader.double();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SampleQuery_QueryEntry_Target {
    return {
      uri: isSet(object.uri) ? globalThis.String(object.uri) : "",
      pageNumbers: globalThis.Array.isArray(object?.pageNumbers)
        ? object.pageNumbers.map((e: any) => globalThis.Number(e))
        : [],
      score: isSet(object.score) ? globalThis.Number(object.score) : undefined,
    };
  },

  toJSON(message: SampleQuery_QueryEntry_Target): unknown {
    const obj: any = {};
    if (message.uri !== "") {
      obj.uri = message.uri;
    }
    if (message.pageNumbers?.length) {
      obj.pageNumbers = message.pageNumbers.map((e) => Math.round(e));
    }
    if (message.score !== undefined) {
      obj.score = message.score;
    }
    return obj;
  },

  create(base?: DeepPartial<SampleQuery_QueryEntry_Target>): SampleQuery_QueryEntry_Target {
    return SampleQuery_QueryEntry_Target.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SampleQuery_QueryEntry_Target>): SampleQuery_QueryEntry_Target {
    const message = createBaseSampleQuery_QueryEntry_Target();
    message.uri = object.uri ?? "";
    message.pageNumbers = object.pageNumbers?.map((e) => e) || [];
    message.score = object.score ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
