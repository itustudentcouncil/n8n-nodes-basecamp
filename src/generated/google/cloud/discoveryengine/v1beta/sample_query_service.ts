// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/discoveryengine/v1beta/sample_query_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../longrunning/operations.js";
import { Empty } from "../../../protobuf/empty.js";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { ImportSampleQueriesRequest } from "./import_config.js";
import { SampleQuery } from "./sample_query.js";

export const protobufPackage = "google.cloud.discoveryengine.v1beta";

/**
 * Request message for
 * [SampleQueryService.GetSampleQuery][google.cloud.discoveryengine.v1beta.SampleQueryService.GetSampleQuery]
 * method.
 */
export interface GetSampleQueryRequest {
  /**
   * Required. Full resource name of
   * [SampleQuery][google.cloud.discoveryengine.v1beta.SampleQuery], such as
   * `projects/{project}/locations/{location}/sampleQuerySets/{sample_query_set}/sampleQueries/{sample_query}`.
   *
   * If the caller does not have permission to access the
   * [SampleQuery][google.cloud.discoveryengine.v1beta.SampleQuery], regardless
   * of whether or not it exists, a PERMISSION_DENIED error is returned.
   *
   * If the requested
   * [SampleQuery][google.cloud.discoveryengine.v1beta.SampleQuery] does not
   * exist, a NOT_FOUND error is returned.
   */
  name: string;
}

/**
 * Request message for
 * [SampleQueryService.ListSampleQueries][google.cloud.discoveryengine.v1beta.SampleQueryService.ListSampleQueries]
 * method.
 */
export interface ListSampleQueriesRequest {
  /**
   * Required. The parent sample query set resource name, such as
   * `projects/{project}/locations/{location}/sampleQuerySets/{sampleQuerySet}`.
   *
   * If the caller does not have permission to list
   * [SampleQuery][google.cloud.discoveryengine.v1beta.SampleQuery]s under this
   * sample query set, regardless of whether or not this sample query set
   * exists, a `PERMISSION_DENIED` error is returned.
   */
  parent: string;
  /**
   * Maximum number of
   * [SampleQuery][google.cloud.discoveryengine.v1beta.SampleQuery]s to return.
   * If unspecified, defaults to 100. The maximum allowed value is 1000. Values
   * above 1000 will be coerced to 1000.
   *
   * If this field is negative, an `INVALID_ARGUMENT` error is returned.
   */
  pageSize: number;
  /**
   * A page token
   * [ListSampleQueriesResponse.next_page_token][google.cloud.discoveryengine.v1beta.ListSampleQueriesResponse.next_page_token],
   * received from a previous
   * [SampleQueryService.ListSampleQueries][google.cloud.discoveryengine.v1beta.SampleQueryService.ListSampleQueries]
   * call. Provide this to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to
   * [SampleQueryService.ListSampleQueries][google.cloud.discoveryengine.v1beta.SampleQueryService.ListSampleQueries]
   * must match the call that provided the page token. Otherwise, an
   * `INVALID_ARGUMENT` error is returned.
   */
  pageToken: string;
}

/**
 * Response message for
 * [SampleQueryService.ListSampleQueries][google.cloud.discoveryengine.v1beta.SampleQueryService.ListSampleQueries]
 * method.
 */
export interface ListSampleQueriesResponse {
  /** The [SampleQuery][google.cloud.discoveryengine.v1beta.SampleQuery]s. */
  sampleQueries: SampleQuery[];
  /**
   * A token that can be sent as
   * [ListSampleQueriesRequest.page_token][google.cloud.discoveryengine.v1beta.ListSampleQueriesRequest.page_token]
   * to retrieve the next page. If this field is omitted, there are no
   * subsequent pages.
   */
  nextPageToken: string;
}

/**
 * Request message for
 * [SampleQueryService.CreateSampleQuery][google.cloud.discoveryengine.v1beta.SampleQueryService.CreateSampleQuery]
 * method.
 */
export interface CreateSampleQueryRequest {
  /**
   * Required. The parent resource name, such as
   * `projects/{project}/locations/{location}/sampleQuerySets/{sampleQuerySet}`.
   */
  parent: string;
  /**
   * Required. The
   * [SampleQuery][google.cloud.discoveryengine.v1beta.SampleQuery] to create.
   */
  sampleQuery:
    | SampleQuery
    | undefined;
  /**
   * Required. The ID to use for the
   * [SampleQuery][google.cloud.discoveryengine.v1beta.SampleQuery], which will
   * become the final component of the
   * [SampleQuery.name][google.cloud.discoveryengine.v1beta.SampleQuery.name].
   *
   * If the caller does not have permission to create the
   * [SampleQuery][google.cloud.discoveryengine.v1beta.SampleQuery], regardless
   * of whether or not it exists, a `PERMISSION_DENIED` error is returned.
   *
   * This field must be unique among all
   * [SampleQuery][google.cloud.discoveryengine.v1beta.SampleQuery]s with the
   * same
   * [parent][google.cloud.discoveryengine.v1beta.CreateSampleQueryRequest.parent].
   * Otherwise, an `ALREADY_EXISTS` error is returned.
   *
   * This field must conform to [RFC-1034](https://tools.ietf.org/html/rfc1034)
   * standard with a length limit of 63 characters. Otherwise, an
   * `INVALID_ARGUMENT` error is returned.
   */
  sampleQueryId: string;
}

/**
 * Request message for
 * [SampleQueryService.UpdateSampleQuery][google.cloud.discoveryengine.v1beta.SampleQueryService.UpdateSampleQuery]
 * method.
 */
export interface UpdateSampleQueryRequest {
  /**
   * Required. The simple query to update.
   *
   * If the caller does not have permission to update the
   * [SampleQuery][google.cloud.discoveryengine.v1beta.SampleQuery], regardless
   * of whether or not it exists, a `PERMISSION_DENIED` error is returned.
   *
   * If the [SampleQuery][google.cloud.discoveryengine.v1beta.SampleQuery] to
   * update does not exist a `NOT_FOUND` error is returned.
   */
  sampleQuery:
    | SampleQuery
    | undefined;
  /**
   * Indicates which fields in the provided imported 'simple query' to update.
   * If not set, will by default update all fields.
   */
  updateMask: string[] | undefined;
}

/**
 * Request message for
 * [SampleQueryService.DeleteSampleQuery][google.cloud.discoveryengine.v1beta.SampleQueryService.DeleteSampleQuery]
 * method.
 */
export interface DeleteSampleQueryRequest {
  /**
   * Required. Full resource name of
   * [SampleQuery][google.cloud.discoveryengine.v1beta.SampleQuery], such as
   * `projects/{project}/locations/{location}/sampleQuerySets/{sample_query_set}/sampleQueries/{sample_query}`.
   *
   * If the caller does not have permission to delete the
   * [SampleQuery][google.cloud.discoveryengine.v1beta.SampleQuery], regardless
   * of whether or not it exists, a `PERMISSION_DENIED` error is returned.
   *
   * If the [SampleQuery][google.cloud.discoveryengine.v1beta.SampleQuery] to
   * delete does not exist, a `NOT_FOUND` error is returned.
   */
  name: string;
}

function createBaseGetSampleQueryRequest(): GetSampleQueryRequest {
  return { name: "" };
}

export const GetSampleQueryRequest: MessageFns<GetSampleQueryRequest> = {
  encode(message: GetSampleQueryRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetSampleQueryRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSampleQueryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetSampleQueryRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetSampleQueryRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetSampleQueryRequest>): GetSampleQueryRequest {
    return GetSampleQueryRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetSampleQueryRequest>): GetSampleQueryRequest {
    const message = createBaseGetSampleQueryRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListSampleQueriesRequest(): ListSampleQueriesRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListSampleQueriesRequest: MessageFns<ListSampleQueriesRequest> = {
  encode(message: ListSampleQueriesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListSampleQueriesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSampleQueriesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListSampleQueriesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListSampleQueriesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListSampleQueriesRequest>): ListSampleQueriesRequest {
    return ListSampleQueriesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListSampleQueriesRequest>): ListSampleQueriesRequest {
    const message = createBaseListSampleQueriesRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListSampleQueriesResponse(): ListSampleQueriesResponse {
  return { sampleQueries: [], nextPageToken: "" };
}

export const ListSampleQueriesResponse: MessageFns<ListSampleQueriesResponse> = {
  encode(message: ListSampleQueriesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.sampleQueries) {
      SampleQuery.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListSampleQueriesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSampleQueriesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.sampleQueries.push(SampleQuery.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListSampleQueriesResponse {
    return {
      sampleQueries: globalThis.Array.isArray(object?.sampleQueries)
        ? object.sampleQueries.map((e: any) => SampleQuery.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListSampleQueriesResponse): unknown {
    const obj: any = {};
    if (message.sampleQueries?.length) {
      obj.sampleQueries = message.sampleQueries.map((e) => SampleQuery.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListSampleQueriesResponse>): ListSampleQueriesResponse {
    return ListSampleQueriesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListSampleQueriesResponse>): ListSampleQueriesResponse {
    const message = createBaseListSampleQueriesResponse();
    message.sampleQueries = object.sampleQueries?.map((e) => SampleQuery.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseCreateSampleQueryRequest(): CreateSampleQueryRequest {
  return { parent: "", sampleQuery: undefined, sampleQueryId: "" };
}

export const CreateSampleQueryRequest: MessageFns<CreateSampleQueryRequest> = {
  encode(message: CreateSampleQueryRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.sampleQuery !== undefined) {
      SampleQuery.encode(message.sampleQuery, writer.uint32(18).fork()).join();
    }
    if (message.sampleQueryId !== "") {
      writer.uint32(26).string(message.sampleQueryId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateSampleQueryRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateSampleQueryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.sampleQuery = SampleQuery.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.sampleQueryId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateSampleQueryRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      sampleQuery: isSet(object.sampleQuery) ? SampleQuery.fromJSON(object.sampleQuery) : undefined,
      sampleQueryId: isSet(object.sampleQueryId) ? globalThis.String(object.sampleQueryId) : "",
    };
  },

  toJSON(message: CreateSampleQueryRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.sampleQuery !== undefined) {
      obj.sampleQuery = SampleQuery.toJSON(message.sampleQuery);
    }
    if (message.sampleQueryId !== "") {
      obj.sampleQueryId = message.sampleQueryId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateSampleQueryRequest>): CreateSampleQueryRequest {
    return CreateSampleQueryRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateSampleQueryRequest>): CreateSampleQueryRequest {
    const message = createBaseCreateSampleQueryRequest();
    message.parent = object.parent ?? "";
    message.sampleQuery = (object.sampleQuery !== undefined && object.sampleQuery !== null)
      ? SampleQuery.fromPartial(object.sampleQuery)
      : undefined;
    message.sampleQueryId = object.sampleQueryId ?? "";
    return message;
  },
};

function createBaseUpdateSampleQueryRequest(): UpdateSampleQueryRequest {
  return { sampleQuery: undefined, updateMask: undefined };
}

export const UpdateSampleQueryRequest: MessageFns<UpdateSampleQueryRequest> = {
  encode(message: UpdateSampleQueryRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sampleQuery !== undefined) {
      SampleQuery.encode(message.sampleQuery, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateSampleQueryRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateSampleQueryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.sampleQuery = SampleQuery.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateSampleQueryRequest {
    return {
      sampleQuery: isSet(object.sampleQuery) ? SampleQuery.fromJSON(object.sampleQuery) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateSampleQueryRequest): unknown {
    const obj: any = {};
    if (message.sampleQuery !== undefined) {
      obj.sampleQuery = SampleQuery.toJSON(message.sampleQuery);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateSampleQueryRequest>): UpdateSampleQueryRequest {
    return UpdateSampleQueryRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateSampleQueryRequest>): UpdateSampleQueryRequest {
    const message = createBaseUpdateSampleQueryRequest();
    message.sampleQuery = (object.sampleQuery !== undefined && object.sampleQuery !== null)
      ? SampleQuery.fromPartial(object.sampleQuery)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseDeleteSampleQueryRequest(): DeleteSampleQueryRequest {
  return { name: "" };
}

export const DeleteSampleQueryRequest: MessageFns<DeleteSampleQueryRequest> = {
  encode(message: DeleteSampleQueryRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteSampleQueryRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteSampleQueryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteSampleQueryRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteSampleQueryRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteSampleQueryRequest>): DeleteSampleQueryRequest {
    return DeleteSampleQueryRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteSampleQueryRequest>): DeleteSampleQueryRequest {
    const message = createBaseDeleteSampleQueryRequest();
    message.name = object.name ?? "";
    return message;
  },
};

/**
 * Service for managing
 * [SampleQuery][google.cloud.discoveryengine.v1beta.SampleQuery]s,
 */
export type SampleQueryServiceDefinition = typeof SampleQueryServiceDefinition;
export const SampleQueryServiceDefinition = {
  name: "SampleQueryService",
  fullName: "google.cloud.discoveryengine.v1beta.SampleQueryService",
  methods: {
    /** Gets a [SampleQuery][google.cloud.discoveryengine.v1beta.SampleQuery]. */
    getSampleQuery: {
      name: "GetSampleQuery",
      requestType: GetSampleQueryRequest,
      requestStream: false,
      responseType: SampleQuery,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              73,
              18,
              71,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              97,
              109,
              112,
              108,
              101,
              81,
              117,
              101,
              114,
              121,
              83,
              101,
              116,
              115,
              47,
              42,
              47,
              115,
              97,
              109,
              112,
              108,
              101,
              81,
              117,
              101,
              114,
              105,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Gets a list of
     * [SampleQuery][google.cloud.discoveryengine.v1beta.SampleQuery]s.
     */
    listSampleQueries: {
      name: "ListSampleQueries",
      requestType: ListSampleQueriesRequest,
      requestStream: false,
      responseType: ListSampleQueriesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              73,
              18,
              71,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              97,
              109,
              112,
              108,
              101,
              81,
              117,
              101,
              114,
              121,
              83,
              101,
              116,
              115,
              47,
              42,
              125,
              47,
              115,
              97,
              109,
              112,
              108,
              101,
              81,
              117,
              101,
              114,
              105,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Creates a [SampleQuery][google.cloud.discoveryengine.v1beta.SampleQuery] */
    createSampleQuery: {
      name: "CreateSampleQuery",
      requestType: CreateSampleQueryRequest,
      requestStream: false,
      responseType: SampleQuery,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              35,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              115,
              97,
              109,
              112,
              108,
              101,
              95,
              113,
              117,
              101,
              114,
              121,
              44,
              115,
              97,
              109,
              112,
              108,
              101,
              95,
              113,
              117,
              101,
              114,
              121,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              87,
              58,
              12,
              115,
              97,
              109,
              112,
              108,
              101,
              95,
              113,
              117,
              101,
              114,
              121,
              34,
              71,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              97,
              109,
              112,
              108,
              101,
              81,
              117,
              101,
              114,
              121,
              83,
              101,
              116,
              115,
              47,
              42,
              125,
              47,
              115,
              97,
              109,
              112,
              108,
              101,
              81,
              117,
              101,
              114,
              105,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Updates a [SampleQuery][google.cloud.discoveryengine.v1beta.SampleQuery]. */
    updateSampleQuery: {
      name: "UpdateSampleQuery",
      requestType: UpdateSampleQueryRequest,
      requestStream: false,
      responseType: SampleQuery,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              24,
              115,
              97,
              109,
              112,
              108,
              101,
              95,
              113,
              117,
              101,
              114,
              121,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              100,
              58,
              12,
              115,
              97,
              109,
              112,
              108,
              101,
              95,
              113,
              117,
              101,
              114,
              121,
              50,
              84,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              115,
              97,
              109,
              112,
              108,
              101,
              95,
              113,
              117,
              101,
              114,
              121,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              97,
              109,
              112,
              108,
              101,
              81,
              117,
              101,
              114,
              121,
              83,
              101,
              116,
              115,
              47,
              42,
              47,
              115,
              97,
              109,
              112,
              108,
              101,
              81,
              117,
              101,
              114,
              105,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes a [SampleQuery][google.cloud.discoveryengine.v1beta.SampleQuery]. */
    deleteSampleQuery: {
      name: "DeleteSampleQuery",
      requestType: DeleteSampleQueryRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              73,
              42,
              71,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              97,
              109,
              112,
              108,
              101,
              81,
              117,
              101,
              114,
              121,
              83,
              101,
              116,
              115,
              47,
              42,
              47,
              115,
              97,
              109,
              112,
              108,
              101,
              81,
              117,
              101,
              114,
              105,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Bulk import of multiple
     * [SampleQuery][google.cloud.discoveryengine.v1beta.SampleQuery]s. Sample
     * queries that already exist may be deleted.
     *
     * Note: It is possible for a subset of the
     * [SampleQuery][google.cloud.discoveryengine.v1beta.SampleQuery]s to be
     * successfully imported.
     */
    importSampleQueries: {
      name: "ImportSampleQueries",
      requestType: ImportSampleQueriesRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              130,
              1,
              10,
              63,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              100,
              105,
              115,
              99,
              111,
              118,
              101,
              114,
              121,
              101,
              110,
              103,
              105,
              110,
              101,
              46,
              118,
              49,
              98,
              101,
              116,
              97,
              46,
              73,
              109,
              112,
              111,
              114,
              116,
              83,
              97,
              109,
              112,
              108,
              101,
              81,
              117,
              101,
              114,
              105,
              101,
              115,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              18,
              63,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              100,
              105,
              115,
              99,
              111,
              118,
              101,
              114,
              121,
              101,
              110,
              103,
              105,
              110,
              101,
              46,
              118,
              49,
              98,
              101,
              116,
              97,
              46,
              73,
              109,
              112,
              111,
              114,
              116,
              83,
              97,
              109,
              112,
              108,
              101,
              81,
              117,
              101,
              114,
              105,
              101,
              115,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          578365826: [
            Buffer.from([
              83,
              58,
              1,
              42,
              34,
              78,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              97,
              109,
              112,
              108,
              101,
              81,
              117,
              101,
              114,
              121,
              83,
              101,
              116,
              115,
              47,
              42,
              125,
              47,
              115,
              97,
              109,
              112,
              108,
              101,
              81,
              117,
              101,
              114,
              105,
              101,
              115,
              58,
              105,
              109,
              112,
              111,
              114,
              116,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface SampleQueryServiceImplementation<CallContextExt = {}> {
  /** Gets a [SampleQuery][google.cloud.discoveryengine.v1beta.SampleQuery]. */
  getSampleQuery(
    request: GetSampleQueryRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SampleQuery>>;
  /**
   * Gets a list of
   * [SampleQuery][google.cloud.discoveryengine.v1beta.SampleQuery]s.
   */
  listSampleQueries(
    request: ListSampleQueriesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListSampleQueriesResponse>>;
  /** Creates a [SampleQuery][google.cloud.discoveryengine.v1beta.SampleQuery] */
  createSampleQuery(
    request: CreateSampleQueryRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SampleQuery>>;
  /** Updates a [SampleQuery][google.cloud.discoveryengine.v1beta.SampleQuery]. */
  updateSampleQuery(
    request: UpdateSampleQueryRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SampleQuery>>;
  /** Deletes a [SampleQuery][google.cloud.discoveryengine.v1beta.SampleQuery]. */
  deleteSampleQuery(
    request: DeleteSampleQueryRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  /**
   * Bulk import of multiple
   * [SampleQuery][google.cloud.discoveryengine.v1beta.SampleQuery]s. Sample
   * queries that already exist may be deleted.
   *
   * Note: It is possible for a subset of the
   * [SampleQuery][google.cloud.discoveryengine.v1beta.SampleQuery]s to be
   * successfully imported.
   */
  importSampleQueries(
    request: ImportSampleQueriesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
}

export interface SampleQueryServiceClient<CallOptionsExt = {}> {
  /** Gets a [SampleQuery][google.cloud.discoveryengine.v1beta.SampleQuery]. */
  getSampleQuery(
    request: DeepPartial<GetSampleQueryRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SampleQuery>;
  /**
   * Gets a list of
   * [SampleQuery][google.cloud.discoveryengine.v1beta.SampleQuery]s.
   */
  listSampleQueries(
    request: DeepPartial<ListSampleQueriesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListSampleQueriesResponse>;
  /** Creates a [SampleQuery][google.cloud.discoveryengine.v1beta.SampleQuery] */
  createSampleQuery(
    request: DeepPartial<CreateSampleQueryRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SampleQuery>;
  /** Updates a [SampleQuery][google.cloud.discoveryengine.v1beta.SampleQuery]. */
  updateSampleQuery(
    request: DeepPartial<UpdateSampleQueryRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SampleQuery>;
  /** Deletes a [SampleQuery][google.cloud.discoveryengine.v1beta.SampleQuery]. */
  deleteSampleQuery(
    request: DeepPartial<DeleteSampleQueryRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  /**
   * Bulk import of multiple
   * [SampleQuery][google.cloud.discoveryengine.v1beta.SampleQuery]s. Sample
   * queries that already exist may be deleted.
   *
   * Note: It is possible for a subset of the
   * [SampleQuery][google.cloud.discoveryengine.v1beta.SampleQuery]s to be
   * successfully imported.
   */
  importSampleQueries(
    request: DeepPartial<ImportSampleQueriesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
