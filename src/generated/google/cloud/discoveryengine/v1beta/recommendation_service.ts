// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/discoveryengine/v1beta/recommendation_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Value } from "../../../protobuf/struct.js";
import { Document } from "./document.js";
import { UserEvent } from "./user_event.js";

export const protobufPackage = "google.cloud.discoveryengine.v1beta";

/** Request message for Recommend method. */
export interface RecommendRequest {
  /**
   * Required. Full resource name of a
   * [ServingConfig][google.cloud.discoveryengine.v1beta.ServingConfig]:
   * `projects/* /locations/global/collections/* /engines/* /servingConfigs/*`, or
   * `projects/* /locations/global/collections/* /dataStores/* /servingConfigs/*`
   *
   * One default serving config is created along with your recommendation engine
   * creation. The engine ID is used as the ID of the default serving
   * config. For example, for Engine
   * `projects/* /locations/global/collections/* /engines/my-engine`, you can use
   * `projects/* /locations/global/collections/* /engines/my-engine/servingConfigs/my-engine`
   * for your
   * [RecommendationService.Recommend][google.cloud.discoveryengine.v1beta.RecommendationService.Recommend]
   * requests.
   */
  servingConfig: string;
  /**
   * Required. Context about the user, what they are looking at and what action
   * they took to trigger the Recommend request. Note that this user event
   * detail won't be ingested to userEvent logs. Thus, a separate userEvent
   * write request is required for event logging.
   *
   * Don't set
   * [UserEvent.user_pseudo_id][google.cloud.discoveryengine.v1beta.UserEvent.user_pseudo_id]
   * or
   * [UserEvent.user_info.user_id][google.cloud.discoveryengine.v1beta.UserInfo.user_id]
   * to the same fixed ID for different users. If you are trying to receive
   * non-personalized recommendations (not recommended; this can negatively
   * impact model performance), instead set
   * [UserEvent.user_pseudo_id][google.cloud.discoveryengine.v1beta.UserEvent.user_pseudo_id]
   * to a random unique ID and leave
   * [UserEvent.user_info.user_id][google.cloud.discoveryengine.v1beta.UserInfo.user_id]
   * unset.
   */
  userEvent:
    | UserEvent
    | undefined;
  /**
   * Maximum number of results to return. Set this property
   * to the number of recommendation results needed. If zero, the service
   * chooses a reasonable default. The maximum allowed value is 100. Values
   * above 100 are set to 100.
   */
  pageSize: number;
  /**
   * Filter for restricting recommendation results with a length limit of 5,000
   * characters. Currently, only filter expressions on the `filter_tags`
   * attribute is supported.
   *
   * Examples:
   *
   *  * `(filter_tags: ANY("Red", "Blue") OR filter_tags: ANY("Hot", "Cold"))`
   *  * `(filter_tags: ANY("Red", "Blue")) AND NOT (filter_tags: ANY("Green"))`
   *
   * If `attributeFilteringSyntax` is set to true under the `params` field, then
   * attribute-based expressions are expected instead of the above described
   * tag-based syntax. Examples:
   *
   *  * (launguage: ANY("en", "es")) AND NOT (categories: ANY("Movie"))
   *  * (available: true) AND
   *    (launguage: ANY("en", "es")) OR (categories: ANY("Movie"))
   *
   * If your filter blocks all results, the API returns generic
   * (unfiltered) popular Documents. If you only want results strictly matching
   * the filters, set `strictFiltering` to `true` in
   * [RecommendRequest.params][google.cloud.discoveryengine.v1beta.RecommendRequest.params]
   * to receive empty results instead.
   *
   * Note that the API never returns
   * [Document][google.cloud.discoveryengine.v1beta.Document]s with
   * `storageStatus` as `EXPIRED` or `DELETED` regardless of filter choices.
   */
  filter: string;
  /**
   * Use validate only mode for this recommendation query. If set to `true`, a
   * fake model is used that returns arbitrary Document IDs.
   * Note that the validate only mode should only be used for testing the API,
   * or if the model is not ready.
   */
  validateOnly: boolean;
  /**
   * Additional domain specific parameters for the recommendations.
   *
   * Allowed values:
   *
   * * `returnDocument`: Boolean. If set to `true`, the associated Document
   *    object is returned in
   *    [RecommendResponse.RecommendationResult.document][google.cloud.discoveryengine.v1beta.RecommendResponse.RecommendationResult.document].
   * * `returnScore`: Boolean. If set to true, the recommendation score
   *    corresponding to each returned Document is set in
   *    [RecommendResponse.RecommendationResult.metadata][google.cloud.discoveryengine.v1beta.RecommendResponse.RecommendationResult.metadata].
   *    The given score indicates the probability of a Document conversion given
   *    the user's context and history.
   * * `strictFiltering`: Boolean. True by default. If set to `false`, the
   * service
   *    returns generic (unfiltered) popular Documents instead of empty if
   *    your filter blocks all recommendation results.
   * * `diversityLevel`: String. Default empty. If set to be non-empty, then
   *    it needs to be one of:
   *     *  `no-diversity`
   *     *  `low-diversity`
   *     *  `medium-diversity`
   *     *  `high-diversity`
   *     *  `auto-diversity`
   *    This gives request-level control and adjusts recommendation results
   *    based on Document category.
   * * `attributeFilteringSyntax`: Boolean. False by default. If set to true,
   *    the `filter` field is interpreted according to the new,
   *    attribute-based syntax.
   */
  params: { [key: string]: any | undefined };
  /**
   * The user labels applied to a resource must meet the following requirements:
   *
   * * Each resource can have multiple labels, up to a maximum of 64.
   * * Each label must be a key-value pair.
   * * Keys have a minimum length of 1 character and a maximum length of 63
   *   characters and cannot be empty. Values can be empty and have a maximum
   *   length of 63 characters.
   * * Keys and values can contain only lowercase letters, numeric characters,
   *   underscores, and dashes. All characters must use UTF-8 encoding, and
   *   international characters are allowed.
   * * The key portion of a label must be unique. However, you can use the same
   *   key with multiple resources.
   * * Keys must start with a lowercase letter or international character.
   *
   * See [Requirements for
   * labels](https://cloud.google.com/resource-manager/docs/creating-managing-labels#requirements)
   * for more details.
   */
  userLabels: { [key: string]: string };
}

export interface RecommendRequest_ParamsEntry {
  key: string;
  value: any | undefined;
}

export interface RecommendRequest_UserLabelsEntry {
  key: string;
  value: string;
}

/** Response message for Recommend method. */
export interface RecommendResponse {
  /**
   * A list of recommended Documents. The order represents the ranking (from the
   * most relevant Document to the least).
   */
  results: RecommendResponse_RecommendationResult[];
  /**
   * A unique attribution token. This should be included in the
   * [UserEvent][google.cloud.discoveryengine.v1beta.UserEvent] logs resulting
   * from this recommendation, which enables accurate attribution of
   * recommendation model performance.
   */
  attributionToken: string;
  /**
   * IDs of documents in the request that were missing from the default Branch
   * associated with the requested ServingConfig.
   */
  missingIds: string[];
  /**
   * True if
   * [RecommendRequest.validate_only][google.cloud.discoveryengine.v1beta.RecommendRequest.validate_only]
   * was set.
   */
  validateOnly: boolean;
}

/**
 * RecommendationResult represents a generic recommendation result with
 * associated metadata.
 */
export interface RecommendResponse_RecommendationResult {
  /** Resource ID of the recommended Document. */
  id: string;
  /**
   * Set if `returnDocument` is set to true in
   * [RecommendRequest.params][google.cloud.discoveryengine.v1beta.RecommendRequest.params].
   */
  document:
    | Document
    | undefined;
  /**
   * Additional Document metadata or annotations.
   *
   * Possible values:
   *
   * * `score`: Recommendation score in double value. Is set if
   *   `returnScore` is set to true in
   *   [RecommendRequest.params][google.cloud.discoveryengine.v1beta.RecommendRequest.params].
   */
  metadata: { [key: string]: any | undefined };
}

export interface RecommendResponse_RecommendationResult_MetadataEntry {
  key: string;
  value: any | undefined;
}

function createBaseRecommendRequest(): RecommendRequest {
  return {
    servingConfig: "",
    userEvent: undefined,
    pageSize: 0,
    filter: "",
    validateOnly: false,
    params: {},
    userLabels: {},
  };
}

export const RecommendRequest: MessageFns<RecommendRequest> = {
  encode(message: RecommendRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.servingConfig !== "") {
      writer.uint32(10).string(message.servingConfig);
    }
    if (message.userEvent !== undefined) {
      UserEvent.encode(message.userEvent, writer.uint32(18).fork()).join();
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.validateOnly !== false) {
      writer.uint32(40).bool(message.validateOnly);
    }
    Object.entries(message.params).forEach(([key, value]) => {
      if (value !== undefined) {
        RecommendRequest_ParamsEntry.encode({ key: key as any, value }, writer.uint32(50).fork()).join();
      }
    });
    Object.entries(message.userLabels).forEach(([key, value]) => {
      RecommendRequest_UserLabelsEntry.encode({ key: key as any, value }, writer.uint32(66).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RecommendRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRecommendRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.servingConfig = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.userEvent = UserEvent.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          const entry6 = RecommendRequest_ParamsEntry.decode(reader, reader.uint32());
          if (entry6.value !== undefined) {
            message.params[entry6.key] = entry6.value;
          }
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          const entry8 = RecommendRequest_UserLabelsEntry.decode(reader, reader.uint32());
          if (entry8.value !== undefined) {
            message.userLabels[entry8.key] = entry8.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RecommendRequest {
    return {
      servingConfig: isSet(object.servingConfig) ? globalThis.String(object.servingConfig) : "",
      userEvent: isSet(object.userEvent) ? UserEvent.fromJSON(object.userEvent) : undefined,
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
      params: isObject(object.params)
        ? Object.entries(object.params).reduce<{ [key: string]: any | undefined }>((acc, [key, value]) => {
          acc[key] = value as any | undefined;
          return acc;
        }, {})
        : {},
      userLabels: isObject(object.userLabels)
        ? Object.entries(object.userLabels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: RecommendRequest): unknown {
    const obj: any = {};
    if (message.servingConfig !== "") {
      obj.servingConfig = message.servingConfig;
    }
    if (message.userEvent !== undefined) {
      obj.userEvent = UserEvent.toJSON(message.userEvent);
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    if (message.params) {
      const entries = Object.entries(message.params);
      if (entries.length > 0) {
        obj.params = {};
        entries.forEach(([k, v]) => {
          obj.params[k] = v;
        });
      }
    }
    if (message.userLabels) {
      const entries = Object.entries(message.userLabels);
      if (entries.length > 0) {
        obj.userLabels = {};
        entries.forEach(([k, v]) => {
          obj.userLabels[k] = v;
        });
      }
    }
    return obj;
  },

  create(base?: DeepPartial<RecommendRequest>): RecommendRequest {
    return RecommendRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RecommendRequest>): RecommendRequest {
    const message = createBaseRecommendRequest();
    message.servingConfig = object.servingConfig ?? "";
    message.userEvent = (object.userEvent !== undefined && object.userEvent !== null)
      ? UserEvent.fromPartial(object.userEvent)
      : undefined;
    message.pageSize = object.pageSize ?? 0;
    message.filter = object.filter ?? "";
    message.validateOnly = object.validateOnly ?? false;
    message.params = Object.entries(object.params ?? {}).reduce<{ [key: string]: any | undefined }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = value;
        }
        return acc;
      },
      {},
    );
    message.userLabels = Object.entries(object.userLabels ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBaseRecommendRequest_ParamsEntry(): RecommendRequest_ParamsEntry {
  return { key: "", value: undefined };
}

export const RecommendRequest_ParamsEntry: MessageFns<RecommendRequest_ParamsEntry> = {
  encode(message: RecommendRequest_ParamsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      Value.encode(Value.wrap(message.value), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RecommendRequest_ParamsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRecommendRequest_ParamsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = Value.unwrap(Value.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RecommendRequest_ParamsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object?.value) ? object.value : undefined,
    };
  },

  toJSON(message: RecommendRequest_ParamsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<RecommendRequest_ParamsEntry>): RecommendRequest_ParamsEntry {
    return RecommendRequest_ParamsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RecommendRequest_ParamsEntry>): RecommendRequest_ParamsEntry {
    const message = createBaseRecommendRequest_ParamsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? undefined;
    return message;
  },
};

function createBaseRecommendRequest_UserLabelsEntry(): RecommendRequest_UserLabelsEntry {
  return { key: "", value: "" };
}

export const RecommendRequest_UserLabelsEntry: MessageFns<RecommendRequest_UserLabelsEntry> = {
  encode(message: RecommendRequest_UserLabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RecommendRequest_UserLabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRecommendRequest_UserLabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RecommendRequest_UserLabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: RecommendRequest_UserLabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<RecommendRequest_UserLabelsEntry>): RecommendRequest_UserLabelsEntry {
    return RecommendRequest_UserLabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RecommendRequest_UserLabelsEntry>): RecommendRequest_UserLabelsEntry {
    const message = createBaseRecommendRequest_UserLabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseRecommendResponse(): RecommendResponse {
  return { results: [], attributionToken: "", missingIds: [], validateOnly: false };
}

export const RecommendResponse: MessageFns<RecommendResponse> = {
  encode(message: RecommendResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.results) {
      RecommendResponse_RecommendationResult.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.attributionToken !== "") {
      writer.uint32(18).string(message.attributionToken);
    }
    for (const v of message.missingIds) {
      writer.uint32(26).string(v!);
    }
    if (message.validateOnly !== false) {
      writer.uint32(32).bool(message.validateOnly);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RecommendResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRecommendResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.results.push(RecommendResponse_RecommendationResult.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.attributionToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.missingIds.push(reader.string());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RecommendResponse {
    return {
      results: globalThis.Array.isArray(object?.results)
        ? object.results.map((e: any) => RecommendResponse_RecommendationResult.fromJSON(e))
        : [],
      attributionToken: isSet(object.attributionToken) ? globalThis.String(object.attributionToken) : "",
      missingIds: globalThis.Array.isArray(object?.missingIds)
        ? object.missingIds.map((e: any) => globalThis.String(e))
        : [],
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
    };
  },

  toJSON(message: RecommendResponse): unknown {
    const obj: any = {};
    if (message.results?.length) {
      obj.results = message.results.map((e) => RecommendResponse_RecommendationResult.toJSON(e));
    }
    if (message.attributionToken !== "") {
      obj.attributionToken = message.attributionToken;
    }
    if (message.missingIds?.length) {
      obj.missingIds = message.missingIds;
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    return obj;
  },

  create(base?: DeepPartial<RecommendResponse>): RecommendResponse {
    return RecommendResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RecommendResponse>): RecommendResponse {
    const message = createBaseRecommendResponse();
    message.results = object.results?.map((e) => RecommendResponse_RecommendationResult.fromPartial(e)) || [];
    message.attributionToken = object.attributionToken ?? "";
    message.missingIds = object.missingIds?.map((e) => e) || [];
    message.validateOnly = object.validateOnly ?? false;
    return message;
  },
};

function createBaseRecommendResponse_RecommendationResult(): RecommendResponse_RecommendationResult {
  return { id: "", document: undefined, metadata: {} };
}

export const RecommendResponse_RecommendationResult: MessageFns<RecommendResponse_RecommendationResult> = {
  encode(message: RecommendResponse_RecommendationResult, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.document !== undefined) {
      Document.encode(message.document, writer.uint32(18).fork()).join();
    }
    Object.entries(message.metadata).forEach(([key, value]) => {
      if (value !== undefined) {
        RecommendResponse_RecommendationResult_MetadataEntry.encode(
          { key: key as any, value },
          writer.uint32(26).fork(),
        ).join();
      }
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RecommendResponse_RecommendationResult {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRecommendResponse_RecommendationResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.document = Document.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          const entry3 = RecommendResponse_RecommendationResult_MetadataEntry.decode(reader, reader.uint32());
          if (entry3.value !== undefined) {
            message.metadata[entry3.key] = entry3.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RecommendResponse_RecommendationResult {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      document: isSet(object.document) ? Document.fromJSON(object.document) : undefined,
      metadata: isObject(object.metadata)
        ? Object.entries(object.metadata).reduce<{ [key: string]: any | undefined }>((acc, [key, value]) => {
          acc[key] = value as any | undefined;
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: RecommendResponse_RecommendationResult): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.document !== undefined) {
      obj.document = Document.toJSON(message.document);
    }
    if (message.metadata) {
      const entries = Object.entries(message.metadata);
      if (entries.length > 0) {
        obj.metadata = {};
        entries.forEach(([k, v]) => {
          obj.metadata[k] = v;
        });
      }
    }
    return obj;
  },

  create(base?: DeepPartial<RecommendResponse_RecommendationResult>): RecommendResponse_RecommendationResult {
    return RecommendResponse_RecommendationResult.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RecommendResponse_RecommendationResult>): RecommendResponse_RecommendationResult {
    const message = createBaseRecommendResponse_RecommendationResult();
    message.id = object.id ?? "";
    message.document = (object.document !== undefined && object.document !== null)
      ? Document.fromPartial(object.document)
      : undefined;
    message.metadata = Object.entries(object.metadata ?? {}).reduce<{ [key: string]: any | undefined }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = value;
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBaseRecommendResponse_RecommendationResult_MetadataEntry(): RecommendResponse_RecommendationResult_MetadataEntry {
  return { key: "", value: undefined };
}

export const RecommendResponse_RecommendationResult_MetadataEntry: MessageFns<
  RecommendResponse_RecommendationResult_MetadataEntry
> = {
  encode(
    message: RecommendResponse_RecommendationResult_MetadataEntry,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      Value.encode(Value.wrap(message.value), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RecommendResponse_RecommendationResult_MetadataEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRecommendResponse_RecommendationResult_MetadataEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = Value.unwrap(Value.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RecommendResponse_RecommendationResult_MetadataEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object?.value) ? object.value : undefined,
    };
  },

  toJSON(message: RecommendResponse_RecommendationResult_MetadataEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = message.value;
    }
    return obj;
  },

  create(
    base?: DeepPartial<RecommendResponse_RecommendationResult_MetadataEntry>,
  ): RecommendResponse_RecommendationResult_MetadataEntry {
    return RecommendResponse_RecommendationResult_MetadataEntry.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<RecommendResponse_RecommendationResult_MetadataEntry>,
  ): RecommendResponse_RecommendationResult_MetadataEntry {
    const message = createBaseRecommendResponse_RecommendationResult_MetadataEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? undefined;
    return message;
  },
};

/** Service for making recommendations. */
export type RecommendationServiceDefinition = typeof RecommendationServiceDefinition;
export const RecommendationServiceDefinition = {
  name: "RecommendationService",
  fullName: "google.cloud.discoveryengine.v1beta.RecommendationService",
  methods: {
    /** Makes a recommendation, which requires a contextual user event. */
    recommend: {
      name: "Recommend",
      requestType: RecommendRequest,
      requestStream: false,
      responseType: RecommendResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              177,
              2,
              58,
              1,
              42,
              90,
              106,
              58,
              1,
              42,
              34,
              101,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              115,
              101,
              114,
              118,
              105,
              110,
              103,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              47,
              115,
              101,
              114,
              118,
              105,
              110,
              103,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              125,
              58,
              114,
              101,
              99,
              111,
              109,
              109,
              101,
              110,
              100,
              90,
              103,
              58,
              1,
              42,
              34,
              98,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              115,
              101,
              114,
              118,
              105,
              110,
              103,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              110,
              103,
              105,
              110,
              101,
              115,
              47,
              42,
              47,
              115,
              101,
              114,
              118,
              105,
              110,
              103,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              125,
              58,
              114,
              101,
              99,
              111,
              109,
              109,
              101,
              110,
              100,
              34,
              87,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              115,
              101,
              114,
              118,
              105,
              110,
              103,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              47,
              115,
              101,
              114,
              118,
              105,
              110,
              103,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              125,
              58,
              114,
              101,
              99,
              111,
              109,
              109,
              101,
              110,
              100,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface RecommendationServiceImplementation<CallContextExt = {}> {
  /** Makes a recommendation, which requires a contextual user event. */
  recommend(request: RecommendRequest, context: CallContext & CallContextExt): Promise<DeepPartial<RecommendResponse>>;
}

export interface RecommendationServiceClient<CallOptionsExt = {}> {
  /** Makes a recommendation, which requires a contextual user event. */
  recommend(request: DeepPartial<RecommendRequest>, options?: CallOptions & CallOptionsExt): Promise<RecommendResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
