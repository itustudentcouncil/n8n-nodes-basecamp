// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/discoveryengine/v1beta/completion.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.cloud.discoveryengine.v1beta";

/**
 * Suggestion deny list entry identifying the phrase to block from suggestions
 * and the applied operation for the phrase.
 */
export interface SuggestionDenyListEntry {
  /**
   * Required. Phrase to block from suggestions served. Can be maximum 125
   * characters.
   */
  blockPhrase: string;
  /**
   * Required. The match operator to apply for this phrase. Whether to block the
   * exact phrase, or block any suggestions containing this phrase.
   */
  matchOperator: SuggestionDenyListEntry_MatchOperator;
}

/** Operator for matching with the generated suggestions. */
export enum SuggestionDenyListEntry_MatchOperator {
  /** MATCH_OPERATOR_UNSPECIFIED - Default value. Should not be used */
  MATCH_OPERATOR_UNSPECIFIED = 0,
  /** EXACT_MATCH - If the suggestion is an exact match to the block_phrase, then block it. */
  EXACT_MATCH = 1,
  /** CONTAINS - If the suggestion contains the block_phrase, then block it. */
  CONTAINS = 2,
  UNRECOGNIZED = -1,
}

export function suggestionDenyListEntry_MatchOperatorFromJSON(object: any): SuggestionDenyListEntry_MatchOperator {
  switch (object) {
    case 0:
    case "MATCH_OPERATOR_UNSPECIFIED":
      return SuggestionDenyListEntry_MatchOperator.MATCH_OPERATOR_UNSPECIFIED;
    case 1:
    case "EXACT_MATCH":
      return SuggestionDenyListEntry_MatchOperator.EXACT_MATCH;
    case 2:
    case "CONTAINS":
      return SuggestionDenyListEntry_MatchOperator.CONTAINS;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SuggestionDenyListEntry_MatchOperator.UNRECOGNIZED;
  }
}

export function suggestionDenyListEntry_MatchOperatorToJSON(object: SuggestionDenyListEntry_MatchOperator): string {
  switch (object) {
    case SuggestionDenyListEntry_MatchOperator.MATCH_OPERATOR_UNSPECIFIED:
      return "MATCH_OPERATOR_UNSPECIFIED";
    case SuggestionDenyListEntry_MatchOperator.EXACT_MATCH:
      return "EXACT_MATCH";
    case SuggestionDenyListEntry_MatchOperator.CONTAINS:
      return "CONTAINS";
    case SuggestionDenyListEntry_MatchOperator.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Autocomplete suggestions that are imported from Customer. */
export interface CompletionSuggestion {
  /**
   * Global score of this suggestion. Control how this suggestion would be
   * scored / ranked.
   */
  globalScore?:
    | number
    | undefined;
  /**
   * Frequency of this suggestion. Will be used to rank suggestions when score
   * is not available.
   */
  frequency?:
    | Long
    | undefined;
  /** Required. The suggestion text. */
  suggestion: string;
  /** BCP-47 language code of this suggestion. */
  languageCode: string;
  /**
   * If two suggestions have the same groupId, they will not be
   * returned together. Instead the one ranked higher will be returned. This can
   * be used to deduplicate semantically identical suggestions.
   */
  groupId: string;
  /** The score of this suggestion within its group. */
  groupScore: number;
  /** Alternative matching phrases for this suggestion. */
  alternativePhrases: string[];
}

function createBaseSuggestionDenyListEntry(): SuggestionDenyListEntry {
  return { blockPhrase: "", matchOperator: 0 };
}

export const SuggestionDenyListEntry: MessageFns<SuggestionDenyListEntry> = {
  encode(message: SuggestionDenyListEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.blockPhrase !== "") {
      writer.uint32(10).string(message.blockPhrase);
    }
    if (message.matchOperator !== 0) {
      writer.uint32(16).int32(message.matchOperator);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SuggestionDenyListEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSuggestionDenyListEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.blockPhrase = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.matchOperator = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SuggestionDenyListEntry {
    return {
      blockPhrase: isSet(object.blockPhrase) ? globalThis.String(object.blockPhrase) : "",
      matchOperator: isSet(object.matchOperator)
        ? suggestionDenyListEntry_MatchOperatorFromJSON(object.matchOperator)
        : 0,
    };
  },

  toJSON(message: SuggestionDenyListEntry): unknown {
    const obj: any = {};
    if (message.blockPhrase !== "") {
      obj.blockPhrase = message.blockPhrase;
    }
    if (message.matchOperator !== 0) {
      obj.matchOperator = suggestionDenyListEntry_MatchOperatorToJSON(message.matchOperator);
    }
    return obj;
  },

  create(base?: DeepPartial<SuggestionDenyListEntry>): SuggestionDenyListEntry {
    return SuggestionDenyListEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SuggestionDenyListEntry>): SuggestionDenyListEntry {
    const message = createBaseSuggestionDenyListEntry();
    message.blockPhrase = object.blockPhrase ?? "";
    message.matchOperator = object.matchOperator ?? 0;
    return message;
  },
};

function createBaseCompletionSuggestion(): CompletionSuggestion {
  return {
    globalScore: undefined,
    frequency: undefined,
    suggestion: "",
    languageCode: "",
    groupId: "",
    groupScore: 0,
    alternativePhrases: [],
  };
}

export const CompletionSuggestion: MessageFns<CompletionSuggestion> = {
  encode(message: CompletionSuggestion, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.globalScore !== undefined) {
      writer.uint32(17).double(message.globalScore);
    }
    if (message.frequency !== undefined) {
      writer.uint32(24).int64(message.frequency.toString());
    }
    if (message.suggestion !== "") {
      writer.uint32(10).string(message.suggestion);
    }
    if (message.languageCode !== "") {
      writer.uint32(34).string(message.languageCode);
    }
    if (message.groupId !== "") {
      writer.uint32(42).string(message.groupId);
    }
    if (message.groupScore !== 0) {
      writer.uint32(49).double(message.groupScore);
    }
    for (const v of message.alternativePhrases) {
      writer.uint32(58).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CompletionSuggestion {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCompletionSuggestion();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 17) {
            break;
          }

          message.globalScore = reader.double();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.frequency = Long.fromString(reader.int64().toString());
          continue;
        case 1:
          if (tag !== 10) {
            break;
          }

          message.suggestion = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.languageCode = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.groupId = reader.string();
          continue;
        case 6:
          if (tag !== 49) {
            break;
          }

          message.groupScore = reader.double();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.alternativePhrases.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CompletionSuggestion {
    return {
      globalScore: isSet(object.globalScore) ? globalThis.Number(object.globalScore) : undefined,
      frequency: isSet(object.frequency) ? Long.fromValue(object.frequency) : undefined,
      suggestion: isSet(object.suggestion) ? globalThis.String(object.suggestion) : "",
      languageCode: isSet(object.languageCode) ? globalThis.String(object.languageCode) : "",
      groupId: isSet(object.groupId) ? globalThis.String(object.groupId) : "",
      groupScore: isSet(object.groupScore) ? globalThis.Number(object.groupScore) : 0,
      alternativePhrases: globalThis.Array.isArray(object?.alternativePhrases)
        ? object.alternativePhrases.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: CompletionSuggestion): unknown {
    const obj: any = {};
    if (message.globalScore !== undefined) {
      obj.globalScore = message.globalScore;
    }
    if (message.frequency !== undefined) {
      obj.frequency = (message.frequency || Long.ZERO).toString();
    }
    if (message.suggestion !== "") {
      obj.suggestion = message.suggestion;
    }
    if (message.languageCode !== "") {
      obj.languageCode = message.languageCode;
    }
    if (message.groupId !== "") {
      obj.groupId = message.groupId;
    }
    if (message.groupScore !== 0) {
      obj.groupScore = message.groupScore;
    }
    if (message.alternativePhrases?.length) {
      obj.alternativePhrases = message.alternativePhrases;
    }
    return obj;
  },

  create(base?: DeepPartial<CompletionSuggestion>): CompletionSuggestion {
    return CompletionSuggestion.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CompletionSuggestion>): CompletionSuggestion {
    const message = createBaseCompletionSuggestion();
    message.globalScore = object.globalScore ?? undefined;
    message.frequency = (object.frequency !== undefined && object.frequency !== null)
      ? Long.fromValue(object.frequency)
      : undefined;
    message.suggestion = object.suggestion ?? "";
    message.languageCode = object.languageCode ?? "";
    message.groupId = object.groupId ?? "";
    message.groupScore = object.groupScore ?? 0;
    message.alternativePhrases = object.alternativePhrases?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
