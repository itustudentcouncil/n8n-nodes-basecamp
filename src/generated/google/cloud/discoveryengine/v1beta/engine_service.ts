// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/discoveryengine/v1beta/engine_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../longrunning/operations.js";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { Engine } from "./engine.js";

export const protobufPackage = "google.cloud.discoveryengine.v1beta";

/**
 * Request for
 * [EngineService.CreateEngine][google.cloud.discoveryengine.v1beta.EngineService.CreateEngine]
 * method.
 */
export interface CreateEngineRequest {
  /**
   * Required. The parent resource name, such as
   * `projects/{project}/locations/{location}/collections/{collection}`.
   */
  parent: string;
  /**
   * Required. The [Engine][google.cloud.discoveryengine.v1beta.Engine] to
   * create.
   */
  engine:
    | Engine
    | undefined;
  /**
   * Required. The ID to use for the
   * [Engine][google.cloud.discoveryengine.v1beta.Engine], which will become the
   * final component of the
   * [Engine][google.cloud.discoveryengine.v1beta.Engine]'s resource name.
   *
   * This field must conform to [RFC-1034](https://tools.ietf.org/html/rfc1034)
   * standard with a length limit of 63 characters. Otherwise, an
   * INVALID_ARGUMENT error is returned.
   */
  engineId: string;
}

/**
 * Metadata related to the progress of the
 * [EngineService.CreateEngine][google.cloud.discoveryengine.v1beta.EngineService.CreateEngine]
 * operation. This will be returned by the google.longrunning.Operation.metadata
 * field.
 */
export interface CreateEngineMetadata {
  /** Operation create time. */
  createTime:
    | Date
    | undefined;
  /**
   * Operation last update time. If the operation is done, this is also the
   * finish time.
   */
  updateTime: Date | undefined;
}

/**
 * Request message for
 * [EngineService.DeleteEngine][google.cloud.discoveryengine.v1beta.EngineService.DeleteEngine]
 * method.
 */
export interface DeleteEngineRequest {
  /**
   * Required. Full resource name of
   * [Engine][google.cloud.discoveryengine.v1beta.Engine], such as
   * `projects/{project}/locations/{location}/collections/{collection_id}/engines/{engine_id}`.
   *
   * If the caller does not have permission to delete the
   * [Engine][google.cloud.discoveryengine.v1beta.Engine], regardless of whether
   * or not it exists, a PERMISSION_DENIED error is returned.
   *
   * If the [Engine][google.cloud.discoveryengine.v1beta.Engine] to delete does
   * not exist, a NOT_FOUND error is returned.
   */
  name: string;
}

/**
 * Metadata related to the progress of the
 * [EngineService.DeleteEngine][google.cloud.discoveryengine.v1beta.EngineService.DeleteEngine]
 * operation. This will be returned by the google.longrunning.Operation.metadata
 * field.
 */
export interface DeleteEngineMetadata {
  /** Operation create time. */
  createTime:
    | Date
    | undefined;
  /**
   * Operation last update time. If the operation is done, this is also the
   * finish time.
   */
  updateTime: Date | undefined;
}

/**
 * Request message for
 * [EngineService.GetEngine][google.cloud.discoveryengine.v1beta.EngineService.GetEngine]
 * method.
 */
export interface GetEngineRequest {
  /**
   * Required. Full resource name of
   * [Engine][google.cloud.discoveryengine.v1beta.Engine], such as
   * `projects/{project}/locations/{location}/collections/{collection_id}/engines/{engine_id}`.
   */
  name: string;
}

/**
 * Request message for
 * [EngineService.ListEngines][google.cloud.discoveryengine.v1beta.EngineService.ListEngines]
 * method.
 */
export interface ListEnginesRequest {
  /**
   * Required. The parent resource name, such as
   * `projects/{project}/locations/{location}/collections/{collection_id}`.
   */
  parent: string;
  /** Optional. Not supported. */
  pageSize: number;
  /** Optional. Not supported. */
  pageToken: string;
  /**
   * Optional. Filter by solution type. For example:
   * solution_type=SOLUTION_TYPE_SEARCH
   */
  filter: string;
}

/**
 * Response message for
 * [EngineService.ListEngines][google.cloud.discoveryengine.v1beta.EngineService.ListEngines]
 * method.
 */
export interface ListEnginesResponse {
  /** All the customer's [Engine][google.cloud.discoveryengine.v1beta.Engine]s. */
  engines: Engine[];
  /** Not supported. */
  nextPageToken: string;
}

/**
 * Request message for
 * [EngineService.UpdateEngine][google.cloud.discoveryengine.v1beta.EngineService.UpdateEngine]
 * method.
 */
export interface UpdateEngineRequest {
  /**
   * Required. The [Engine][google.cloud.discoveryengine.v1beta.Engine] to
   * update.
   *
   * If the caller does not have permission to update the
   * [Engine][google.cloud.discoveryengine.v1beta.Engine], regardless of whether
   * or not it exists, a PERMISSION_DENIED error is returned.
   *
   * If the [Engine][google.cloud.discoveryengine.v1beta.Engine] to update does
   * not exist, a NOT_FOUND error is returned.
   */
  engine:
    | Engine
    | undefined;
  /**
   * Indicates which fields in the provided
   * [Engine][google.cloud.discoveryengine.v1beta.Engine] to update.
   *
   * If an unsupported or unknown field is provided, an INVALID_ARGUMENT error
   * is returned.
   */
  updateMask: string[] | undefined;
}

/** Request for pausing training of an engine. */
export interface PauseEngineRequest {
  /**
   * Required. The name of the engine to pause.
   * Format:
   * `projects/{project_number}/locations/{location_id}/collections/{collection_id}/engines/{engine_id}`
   */
  name: string;
}

/** Request for resuming training of an engine. */
export interface ResumeEngineRequest {
  /**
   * Required. The name of the engine to resume.
   * Format:
   * `projects/{project_number}/locations/{location_id}/collections/{collection_id}/engines/{engine_id}`
   */
  name: string;
}

/**
 * Request to manually start a tuning process now (instead of waiting for
 * the periodically scheduled tuning to happen).
 */
export interface TuneEngineRequest {
  /**
   * Required. The resource name of the engine to tune.
   * Format:
   * `projects/{project_number}/locations/{location_id}/collections/{collection_id}/engines/{engine_id}`
   */
  name: string;
}

/** Metadata associated with a tune operation. */
export interface TuneEngineMetadata {
  /**
   * Required. The resource name of the engine that this tune applies to.
   * Format:
   * `projects/{project_number}/locations/{location_id}/collections/{collection_id}/engines/{engine_id}`
   */
  engine: string;
}

/** Response associated with a tune operation. */
export interface TuneEngineResponse {
}

function createBaseCreateEngineRequest(): CreateEngineRequest {
  return { parent: "", engine: undefined, engineId: "" };
}

export const CreateEngineRequest: MessageFns<CreateEngineRequest> = {
  encode(message: CreateEngineRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.engine !== undefined) {
      Engine.encode(message.engine, writer.uint32(18).fork()).join();
    }
    if (message.engineId !== "") {
      writer.uint32(26).string(message.engineId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateEngineRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateEngineRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.engine = Engine.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.engineId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateEngineRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      engine: isSet(object.engine) ? Engine.fromJSON(object.engine) : undefined,
      engineId: isSet(object.engineId) ? globalThis.String(object.engineId) : "",
    };
  },

  toJSON(message: CreateEngineRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.engine !== undefined) {
      obj.engine = Engine.toJSON(message.engine);
    }
    if (message.engineId !== "") {
      obj.engineId = message.engineId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateEngineRequest>): CreateEngineRequest {
    return CreateEngineRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateEngineRequest>): CreateEngineRequest {
    const message = createBaseCreateEngineRequest();
    message.parent = object.parent ?? "";
    message.engine = (object.engine !== undefined && object.engine !== null)
      ? Engine.fromPartial(object.engine)
      : undefined;
    message.engineId = object.engineId ?? "";
    return message;
  },
};

function createBaseCreateEngineMetadata(): CreateEngineMetadata {
  return { createTime: undefined, updateTime: undefined };
}

export const CreateEngineMetadata: MessageFns<CreateEngineMetadata> = {
  encode(message: CreateEngineMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(10).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateEngineMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateEngineMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateEngineMetadata {
    return {
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
    };
  },

  toJSON(message: CreateEngineMetadata): unknown {
    const obj: any = {};
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<CreateEngineMetadata>): CreateEngineMetadata {
    return CreateEngineMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateEngineMetadata>): CreateEngineMetadata {
    const message = createBaseCreateEngineMetadata();
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    return message;
  },
};

function createBaseDeleteEngineRequest(): DeleteEngineRequest {
  return { name: "" };
}

export const DeleteEngineRequest: MessageFns<DeleteEngineRequest> = {
  encode(message: DeleteEngineRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteEngineRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteEngineRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteEngineRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteEngineRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteEngineRequest>): DeleteEngineRequest {
    return DeleteEngineRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteEngineRequest>): DeleteEngineRequest {
    const message = createBaseDeleteEngineRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseDeleteEngineMetadata(): DeleteEngineMetadata {
  return { createTime: undefined, updateTime: undefined };
}

export const DeleteEngineMetadata: MessageFns<DeleteEngineMetadata> = {
  encode(message: DeleteEngineMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(10).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteEngineMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteEngineMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteEngineMetadata {
    return {
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
    };
  },

  toJSON(message: DeleteEngineMetadata): unknown {
    const obj: any = {};
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteEngineMetadata>): DeleteEngineMetadata {
    return DeleteEngineMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteEngineMetadata>): DeleteEngineMetadata {
    const message = createBaseDeleteEngineMetadata();
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    return message;
  },
};

function createBaseGetEngineRequest(): GetEngineRequest {
  return { name: "" };
}

export const GetEngineRequest: MessageFns<GetEngineRequest> = {
  encode(message: GetEngineRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetEngineRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetEngineRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetEngineRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetEngineRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetEngineRequest>): GetEngineRequest {
    return GetEngineRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetEngineRequest>): GetEngineRequest {
    const message = createBaseGetEngineRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListEnginesRequest(): ListEnginesRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "" };
}

export const ListEnginesRequest: MessageFns<ListEnginesRequest> = {
  encode(message: ListEnginesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListEnginesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListEnginesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListEnginesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
    };
  },

  toJSON(message: ListEnginesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    return obj;
  },

  create(base?: DeepPartial<ListEnginesRequest>): ListEnginesRequest {
    return ListEnginesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListEnginesRequest>): ListEnginesRequest {
    const message = createBaseListEnginesRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    return message;
  },
};

function createBaseListEnginesResponse(): ListEnginesResponse {
  return { engines: [], nextPageToken: "" };
}

export const ListEnginesResponse: MessageFns<ListEnginesResponse> = {
  encode(message: ListEnginesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.engines) {
      Engine.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListEnginesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListEnginesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.engines.push(Engine.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListEnginesResponse {
    return {
      engines: globalThis.Array.isArray(object?.engines) ? object.engines.map((e: any) => Engine.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListEnginesResponse): unknown {
    const obj: any = {};
    if (message.engines?.length) {
      obj.engines = message.engines.map((e) => Engine.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListEnginesResponse>): ListEnginesResponse {
    return ListEnginesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListEnginesResponse>): ListEnginesResponse {
    const message = createBaseListEnginesResponse();
    message.engines = object.engines?.map((e) => Engine.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseUpdateEngineRequest(): UpdateEngineRequest {
  return { engine: undefined, updateMask: undefined };
}

export const UpdateEngineRequest: MessageFns<UpdateEngineRequest> = {
  encode(message: UpdateEngineRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.engine !== undefined) {
      Engine.encode(message.engine, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateEngineRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateEngineRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.engine = Engine.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateEngineRequest {
    return {
      engine: isSet(object.engine) ? Engine.fromJSON(object.engine) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateEngineRequest): unknown {
    const obj: any = {};
    if (message.engine !== undefined) {
      obj.engine = Engine.toJSON(message.engine);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateEngineRequest>): UpdateEngineRequest {
    return UpdateEngineRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateEngineRequest>): UpdateEngineRequest {
    const message = createBaseUpdateEngineRequest();
    message.engine = (object.engine !== undefined && object.engine !== null)
      ? Engine.fromPartial(object.engine)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBasePauseEngineRequest(): PauseEngineRequest {
  return { name: "" };
}

export const PauseEngineRequest: MessageFns<PauseEngineRequest> = {
  encode(message: PauseEngineRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PauseEngineRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePauseEngineRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PauseEngineRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: PauseEngineRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<PauseEngineRequest>): PauseEngineRequest {
    return PauseEngineRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PauseEngineRequest>): PauseEngineRequest {
    const message = createBasePauseEngineRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseResumeEngineRequest(): ResumeEngineRequest {
  return { name: "" };
}

export const ResumeEngineRequest: MessageFns<ResumeEngineRequest> = {
  encode(message: ResumeEngineRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResumeEngineRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResumeEngineRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResumeEngineRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: ResumeEngineRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<ResumeEngineRequest>): ResumeEngineRequest {
    return ResumeEngineRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ResumeEngineRequest>): ResumeEngineRequest {
    const message = createBaseResumeEngineRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseTuneEngineRequest(): TuneEngineRequest {
  return { name: "" };
}

export const TuneEngineRequest: MessageFns<TuneEngineRequest> = {
  encode(message: TuneEngineRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TuneEngineRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTuneEngineRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TuneEngineRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: TuneEngineRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<TuneEngineRequest>): TuneEngineRequest {
    return TuneEngineRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TuneEngineRequest>): TuneEngineRequest {
    const message = createBaseTuneEngineRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseTuneEngineMetadata(): TuneEngineMetadata {
  return { engine: "" };
}

export const TuneEngineMetadata: MessageFns<TuneEngineMetadata> = {
  encode(message: TuneEngineMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.engine !== "") {
      writer.uint32(10).string(message.engine);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TuneEngineMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTuneEngineMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.engine = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TuneEngineMetadata {
    return { engine: isSet(object.engine) ? globalThis.String(object.engine) : "" };
  },

  toJSON(message: TuneEngineMetadata): unknown {
    const obj: any = {};
    if (message.engine !== "") {
      obj.engine = message.engine;
    }
    return obj;
  },

  create(base?: DeepPartial<TuneEngineMetadata>): TuneEngineMetadata {
    return TuneEngineMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TuneEngineMetadata>): TuneEngineMetadata {
    const message = createBaseTuneEngineMetadata();
    message.engine = object.engine ?? "";
    return message;
  },
};

function createBaseTuneEngineResponse(): TuneEngineResponse {
  return {};
}

export const TuneEngineResponse: MessageFns<TuneEngineResponse> = {
  encode(_: TuneEngineResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TuneEngineResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTuneEngineResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): TuneEngineResponse {
    return {};
  },

  toJSON(_: TuneEngineResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<TuneEngineResponse>): TuneEngineResponse {
    return TuneEngineResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<TuneEngineResponse>): TuneEngineResponse {
    const message = createBaseTuneEngineResponse();
    return message;
  },
};

/**
 * Service for managing [Engine][google.cloud.discoveryengine.v1beta.Engine]
 * configuration.
 */
export type EngineServiceDefinition = typeof EngineServiceDefinition;
export const EngineServiceDefinition = {
  name: "EngineService",
  fullName: "google.cloud.discoveryengine.v1beta.EngineService",
  methods: {
    /** Creates a [Engine][google.cloud.discoveryengine.v1beta.Engine]. */
    createEngine: {
      name: "CreateEngine",
      requestType: CreateEngineRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              102,
              10,
              42,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              100,
              105,
              115,
              99,
              111,
              118,
              101,
              114,
              121,
              101,
              110,
              103,
              105,
              110,
              101,
              46,
              118,
              49,
              98,
              101,
              116,
              97,
              46,
              69,
              110,
              103,
              105,
              110,
              101,
              18,
              56,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              100,
              105,
              115,
              99,
              111,
              118,
              101,
              114,
              121,
              101,
              110,
              103,
              105,
              110,
              101,
              46,
              118,
              49,
              98,
              101,
              116,
              97,
              46,
              67,
              114,
              101,
              97,
              116,
              101,
              69,
              110,
              103,
              105,
              110,
              101,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              23,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              101,
              110,
              103,
              105,
              110,
              101,
              44,
              101,
              110,
              103,
              105,
              110,
              101,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              71,
              58,
              6,
              101,
              110,
              103,
              105,
              110,
              101,
              34,
              61,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              101,
              110,
              103,
              105,
              110,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Deletes a [Engine][google.cloud.discoveryengine.v1beta.Engine]. */
    deleteEngine: {
      name: "DeleteEngine",
      requestType: DeleteEngineRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              81,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              56,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              100,
              105,
              115,
              99,
              111,
              118,
              101,
              114,
              121,
              101,
              110,
              103,
              105,
              110,
              101,
              46,
              118,
              49,
              98,
              101,
              116,
              97,
              46,
              68,
              101,
              108,
              101,
              116,
              101,
              69,
              110,
              103,
              105,
              110,
              101,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              63,
              42,
              61,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              110,
              103,
              105,
              110,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Updates an [Engine][google.cloud.discoveryengine.v1beta.Engine] */
    updateEngine: {
      name: "UpdateEngine",
      requestType: UpdateEngineRequest,
      requestStream: false,
      responseType: Engine,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([18, 101, 110, 103, 105, 110, 101, 44, 117, 112, 100, 97, 116, 101, 95, 109, 97, 115, 107]),
          ],
          578365826: [
            Buffer.from([
              78,
              58,
              6,
              101,
              110,
              103,
              105,
              110,
              101,
              50,
              68,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              101,
              110,
              103,
              105,
              110,
              101,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              110,
              103,
              105,
              110,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Gets a [Engine][google.cloud.discoveryengine.v1beta.Engine]. */
    getEngine: {
      name: "GetEngine",
      requestType: GetEngineRequest,
      requestStream: false,
      responseType: Engine,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              63,
              18,
              61,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              110,
              103,
              105,
              110,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Lists all the [Engine][google.cloud.discoveryengine.v1beta.Engine]s
     * associated with the project.
     */
    listEngines: {
      name: "ListEngines",
      requestType: ListEnginesRequest,
      requestStream: false,
      responseType: ListEnginesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              63,
              18,
              61,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              101,
              110,
              103,
              105,
              110,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Pauses the training of an existing engine. Only applicable if
     * [SolutionType][google.cloud.discoveryengine.v1beta.SolutionType] is
     * [SOLUTION_TYPE_RECOMMENDATION][google.cloud.discoveryengine.v1beta.SolutionType.SOLUTION_TYPE_RECOMMENDATION].
     */
    pauseEngine: {
      name: "PauseEngine",
      requestType: PauseEngineRequest,
      requestStream: false,
      responseType: Engine,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              72,
              58,
              1,
              42,
              34,
              67,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              110,
              103,
              105,
              110,
              101,
              115,
              47,
              42,
              125,
              58,
              112,
              97,
              117,
              115,
              101,
            ]),
          ],
        },
      },
    },
    /**
     * Resumes the training of an existing engine. Only applicable if
     * [SolutionType][google.cloud.discoveryengine.v1beta.SolutionType] is
     * [SOLUTION_TYPE_RECOMMENDATION][google.cloud.discoveryengine.v1beta.SolutionType.SOLUTION_TYPE_RECOMMENDATION].
     */
    resumeEngine: {
      name: "ResumeEngine",
      requestType: ResumeEngineRequest,
      requestStream: false,
      responseType: Engine,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              73,
              58,
              1,
              42,
              34,
              68,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              110,
              103,
              105,
              110,
              101,
              115,
              47,
              42,
              125,
              58,
              114,
              101,
              115,
              117,
              109,
              101,
            ]),
          ],
        },
      },
    },
    /**
     * Tunes an existing engine. Only applicable if
     * [SolutionType][google.cloud.discoveryengine.v1beta.SolutionType] is
     * [SOLUTION_TYPE_RECOMMENDATION][google.cloud.discoveryengine.v1beta.SolutionType.SOLUTION_TYPE_RECOMMENDATION].
     */
    tuneEngine: {
      name: "TuneEngine",
      requestType: TuneEngineRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              40,
              10,
              18,
              84,
              117,
              110,
              101,
              69,
              110,
              103,
              105,
              110,
              101,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              18,
              18,
              84,
              117,
              110,
              101,
              69,
              110,
              103,
              105,
              110,
              101,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              71,
              58,
              1,
              42,
              34,
              66,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              110,
              103,
              105,
              110,
              101,
              115,
              47,
              42,
              125,
              58,
              116,
              117,
              110,
              101,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface EngineServiceImplementation<CallContextExt = {}> {
  /** Creates a [Engine][google.cloud.discoveryengine.v1beta.Engine]. */
  createEngine(request: CreateEngineRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /** Deletes a [Engine][google.cloud.discoveryengine.v1beta.Engine]. */
  deleteEngine(request: DeleteEngineRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /** Updates an [Engine][google.cloud.discoveryengine.v1beta.Engine] */
  updateEngine(request: UpdateEngineRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Engine>>;
  /** Gets a [Engine][google.cloud.discoveryengine.v1beta.Engine]. */
  getEngine(request: GetEngineRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Engine>>;
  /**
   * Lists all the [Engine][google.cloud.discoveryengine.v1beta.Engine]s
   * associated with the project.
   */
  listEngines(
    request: ListEnginesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListEnginesResponse>>;
  /**
   * Pauses the training of an existing engine. Only applicable if
   * [SolutionType][google.cloud.discoveryengine.v1beta.SolutionType] is
   * [SOLUTION_TYPE_RECOMMENDATION][google.cloud.discoveryengine.v1beta.SolutionType.SOLUTION_TYPE_RECOMMENDATION].
   */
  pauseEngine(request: PauseEngineRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Engine>>;
  /**
   * Resumes the training of an existing engine. Only applicable if
   * [SolutionType][google.cloud.discoveryengine.v1beta.SolutionType] is
   * [SOLUTION_TYPE_RECOMMENDATION][google.cloud.discoveryengine.v1beta.SolutionType.SOLUTION_TYPE_RECOMMENDATION].
   */
  resumeEngine(request: ResumeEngineRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Engine>>;
  /**
   * Tunes an existing engine. Only applicable if
   * [SolutionType][google.cloud.discoveryengine.v1beta.SolutionType] is
   * [SOLUTION_TYPE_RECOMMENDATION][google.cloud.discoveryengine.v1beta.SolutionType.SOLUTION_TYPE_RECOMMENDATION].
   */
  tuneEngine(request: TuneEngineRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
}

export interface EngineServiceClient<CallOptionsExt = {}> {
  /** Creates a [Engine][google.cloud.discoveryengine.v1beta.Engine]. */
  createEngine(request: DeepPartial<CreateEngineRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /** Deletes a [Engine][google.cloud.discoveryengine.v1beta.Engine]. */
  deleteEngine(request: DeepPartial<DeleteEngineRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /** Updates an [Engine][google.cloud.discoveryengine.v1beta.Engine] */
  updateEngine(request: DeepPartial<UpdateEngineRequest>, options?: CallOptions & CallOptionsExt): Promise<Engine>;
  /** Gets a [Engine][google.cloud.discoveryengine.v1beta.Engine]. */
  getEngine(request: DeepPartial<GetEngineRequest>, options?: CallOptions & CallOptionsExt): Promise<Engine>;
  /**
   * Lists all the [Engine][google.cloud.discoveryengine.v1beta.Engine]s
   * associated with the project.
   */
  listEngines(
    request: DeepPartial<ListEnginesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListEnginesResponse>;
  /**
   * Pauses the training of an existing engine. Only applicable if
   * [SolutionType][google.cloud.discoveryengine.v1beta.SolutionType] is
   * [SOLUTION_TYPE_RECOMMENDATION][google.cloud.discoveryengine.v1beta.SolutionType.SOLUTION_TYPE_RECOMMENDATION].
   */
  pauseEngine(request: DeepPartial<PauseEngineRequest>, options?: CallOptions & CallOptionsExt): Promise<Engine>;
  /**
   * Resumes the training of an existing engine. Only applicable if
   * [SolutionType][google.cloud.discoveryengine.v1beta.SolutionType] is
   * [SOLUTION_TYPE_RECOMMENDATION][google.cloud.discoveryengine.v1beta.SolutionType.SOLUTION_TYPE_RECOMMENDATION].
   */
  resumeEngine(request: DeepPartial<ResumeEngineRequest>, options?: CallOptions & CallOptionsExt): Promise<Engine>;
  /**
   * Tunes an existing engine. Only applicable if
   * [SolutionType][google.cloud.discoveryengine.v1beta.SolutionType] is
   * [SOLUTION_TYPE_RECOMMENDATION][google.cloud.discoveryengine.v1beta.SolutionType.SOLUTION_TYPE_RECOMMENDATION].
   */
  tuneEngine(request: DeepPartial<TuneEngineRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
