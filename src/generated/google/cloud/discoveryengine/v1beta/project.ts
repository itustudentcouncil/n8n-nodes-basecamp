// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/discoveryengine/v1beta/project.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../protobuf/timestamp.js";

export const protobufPackage = "google.cloud.discoveryengine.v1beta";

/** Metadata and configurations for a Google Cloud project in the service. */
export interface Project {
  /**
   * Output only. Full resource name of the project, for example
   * `projects/{project_number}`.
   * Note that when making requests, project number and project id are both
   * acceptable, but the server will always respond in project number.
   */
  name: string;
  /** Output only. The timestamp when this project is created. */
  createTime:
    | Date
    | undefined;
  /**
   * Output only. The timestamp when this project is successfully provisioned.
   * Empty value means this project is still provisioning and is not ready for
   * use.
   */
  provisionCompletionTime:
    | Date
    | undefined;
  /**
   * Output only. A map of terms of services. The key is the `id` of
   * [ServiceTerms][google.cloud.discoveryengine.v1beta.Project.ServiceTerms].
   */
  serviceTermsMap: { [key: string]: Project_ServiceTerms };
}

/** Metadata about the terms of service. */
export interface Project_ServiceTerms {
  /**
   * The unique identifier of this terms of service.
   * Available terms:
   *
   * * `GA_DATA_USE_TERMS`: [Terms for data
   * use](https://cloud.google.com/retail/data-use-terms). When using this as
   * `id`, the acceptable
   * [version][google.cloud.discoveryengine.v1beta.Project.ServiceTerms.version]
   * to provide is `2022-11-23`.
   */
  id: string;
  /**
   * The version string of the terms of service.
   * For acceptable values, see the comments for
   * [id][google.cloud.discoveryengine.v1beta.Project.ServiceTerms.id] above.
   */
  version: string;
  /**
   * Whether the project has accepted/rejected the service terms or it is
   * still pending.
   */
  state: Project_ServiceTerms_State;
  /** The last time when the project agreed to the terms of service. */
  acceptTime:
    | Date
    | undefined;
  /**
   * The last time when the project declined or revoked the agreement to terms
   * of service.
   */
  declineTime: Date | undefined;
}

/** The agreement states this terms of service. */
export enum Project_ServiceTerms_State {
  /** STATE_UNSPECIFIED - The default value of the enum. This value is not actually used. */
  STATE_UNSPECIFIED = 0,
  /** TERMS_ACCEPTED - The project has given consent to the terms of service. */
  TERMS_ACCEPTED = 1,
  /** TERMS_PENDING - The project is pending to review and accept the terms of service. */
  TERMS_PENDING = 2,
  /** TERMS_DECLINED - The project has declined or revoked the agreement to terms of service. */
  TERMS_DECLINED = 3,
  UNRECOGNIZED = -1,
}

export function project_ServiceTerms_StateFromJSON(object: any): Project_ServiceTerms_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return Project_ServiceTerms_State.STATE_UNSPECIFIED;
    case 1:
    case "TERMS_ACCEPTED":
      return Project_ServiceTerms_State.TERMS_ACCEPTED;
    case 2:
    case "TERMS_PENDING":
      return Project_ServiceTerms_State.TERMS_PENDING;
    case 3:
    case "TERMS_DECLINED":
      return Project_ServiceTerms_State.TERMS_DECLINED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Project_ServiceTerms_State.UNRECOGNIZED;
  }
}

export function project_ServiceTerms_StateToJSON(object: Project_ServiceTerms_State): string {
  switch (object) {
    case Project_ServiceTerms_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case Project_ServiceTerms_State.TERMS_ACCEPTED:
      return "TERMS_ACCEPTED";
    case Project_ServiceTerms_State.TERMS_PENDING:
      return "TERMS_PENDING";
    case Project_ServiceTerms_State.TERMS_DECLINED:
      return "TERMS_DECLINED";
    case Project_ServiceTerms_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Project_ServiceTermsMapEntry {
  key: string;
  value: Project_ServiceTerms | undefined;
}

function createBaseProject(): Project {
  return { name: "", createTime: undefined, provisionCompletionTime: undefined, serviceTermsMap: {} };
}

export const Project: MessageFns<Project> = {
  encode(message: Project, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(18).fork()).join();
    }
    if (message.provisionCompletionTime !== undefined) {
      Timestamp.encode(toTimestamp(message.provisionCompletionTime), writer.uint32(26).fork()).join();
    }
    Object.entries(message.serviceTermsMap).forEach(([key, value]) => {
      Project_ServiceTermsMapEntry.encode({ key: key as any, value }, writer.uint32(34).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Project {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProject();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.provisionCompletionTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          const entry4 = Project_ServiceTermsMapEntry.decode(reader, reader.uint32());
          if (entry4.value !== undefined) {
            message.serviceTermsMap[entry4.key] = entry4.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Project {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      provisionCompletionTime: isSet(object.provisionCompletionTime)
        ? fromJsonTimestamp(object.provisionCompletionTime)
        : undefined,
      serviceTermsMap: isObject(object.serviceTermsMap)
        ? Object.entries(object.serviceTermsMap).reduce<{ [key: string]: Project_ServiceTerms }>(
          (acc, [key, value]) => {
            acc[key] = Project_ServiceTerms.fromJSON(value);
            return acc;
          },
          {},
        )
        : {},
    };
  },

  toJSON(message: Project): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.provisionCompletionTime !== undefined) {
      obj.provisionCompletionTime = message.provisionCompletionTime.toISOString();
    }
    if (message.serviceTermsMap) {
      const entries = Object.entries(message.serviceTermsMap);
      if (entries.length > 0) {
        obj.serviceTermsMap = {};
        entries.forEach(([k, v]) => {
          obj.serviceTermsMap[k] = Project_ServiceTerms.toJSON(v);
        });
      }
    }
    return obj;
  },

  create(base?: DeepPartial<Project>): Project {
    return Project.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Project>): Project {
    const message = createBaseProject();
    message.name = object.name ?? "";
    message.createTime = object.createTime ?? undefined;
    message.provisionCompletionTime = object.provisionCompletionTime ?? undefined;
    message.serviceTermsMap = Object.entries(object.serviceTermsMap ?? {}).reduce<
      { [key: string]: Project_ServiceTerms }
    >((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = Project_ServiceTerms.fromPartial(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseProject_ServiceTerms(): Project_ServiceTerms {
  return { id: "", version: "", state: 0, acceptTime: undefined, declineTime: undefined };
}

export const Project_ServiceTerms: MessageFns<Project_ServiceTerms> = {
  encode(message: Project_ServiceTerms, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.version !== "") {
      writer.uint32(18).string(message.version);
    }
    if (message.state !== 0) {
      writer.uint32(32).int32(message.state);
    }
    if (message.acceptTime !== undefined) {
      Timestamp.encode(toTimestamp(message.acceptTime), writer.uint32(42).fork()).join();
    }
    if (message.declineTime !== undefined) {
      Timestamp.encode(toTimestamp(message.declineTime), writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Project_ServiceTerms {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProject_ServiceTerms();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.version = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.acceptTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.declineTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Project_ServiceTerms {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      version: isSet(object.version) ? globalThis.String(object.version) : "",
      state: isSet(object.state) ? project_ServiceTerms_StateFromJSON(object.state) : 0,
      acceptTime: isSet(object.acceptTime) ? fromJsonTimestamp(object.acceptTime) : undefined,
      declineTime: isSet(object.declineTime) ? fromJsonTimestamp(object.declineTime) : undefined,
    };
  },

  toJSON(message: Project_ServiceTerms): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.version !== "") {
      obj.version = message.version;
    }
    if (message.state !== 0) {
      obj.state = project_ServiceTerms_StateToJSON(message.state);
    }
    if (message.acceptTime !== undefined) {
      obj.acceptTime = message.acceptTime.toISOString();
    }
    if (message.declineTime !== undefined) {
      obj.declineTime = message.declineTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<Project_ServiceTerms>): Project_ServiceTerms {
    return Project_ServiceTerms.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Project_ServiceTerms>): Project_ServiceTerms {
    const message = createBaseProject_ServiceTerms();
    message.id = object.id ?? "";
    message.version = object.version ?? "";
    message.state = object.state ?? 0;
    message.acceptTime = object.acceptTime ?? undefined;
    message.declineTime = object.declineTime ?? undefined;
    return message;
  },
};

function createBaseProject_ServiceTermsMapEntry(): Project_ServiceTermsMapEntry {
  return { key: "", value: undefined };
}

export const Project_ServiceTermsMapEntry: MessageFns<Project_ServiceTermsMapEntry> = {
  encode(message: Project_ServiceTermsMapEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      Project_ServiceTerms.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Project_ServiceTermsMapEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProject_ServiceTermsMapEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = Project_ServiceTerms.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Project_ServiceTermsMapEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? Project_ServiceTerms.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: Project_ServiceTermsMapEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = Project_ServiceTerms.toJSON(message.value);
    }
    return obj;
  },

  create(base?: DeepPartial<Project_ServiceTermsMapEntry>): Project_ServiceTermsMapEntry {
    return Project_ServiceTermsMapEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Project_ServiceTermsMapEntry>): Project_ServiceTermsMapEntry {
    const message = createBaseProject_ServiceTermsMapEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? Project_ServiceTerms.fromPartial(object.value)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
