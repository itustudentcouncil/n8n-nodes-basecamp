// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/discoveryengine/v1/site_search_engine_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../longrunning/operations.js";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { SiteSearchEngine, TargetSite } from "./site_search_engine.js";

export const protobufPackage = "google.cloud.discoveryengine.v1";

/**
 * Request message for
 * [SiteSearchEngineService.GetSiteSearchEngine][google.cloud.discoveryengine.v1.SiteSearchEngineService.GetSiteSearchEngine]
 * method.
 */
export interface GetSiteSearchEngineRequest {
  /**
   * Required. Resource name of
   * [SiteSearchEngine][google.cloud.discoveryengine.v1.SiteSearchEngine], such
   * as
   * `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/siteSearchEngine`.
   *
   * If the caller does not have permission to access the [SiteSearchEngine],
   * regardless of whether or not it exists, a PERMISSION_DENIED error is
   * returned.
   */
  name: string;
}

/**
 * Request message for
 * [SiteSearchEngineService.CreateTargetSite][google.cloud.discoveryengine.v1.SiteSearchEngineService.CreateTargetSite]
 * method.
 */
export interface CreateTargetSiteRequest {
  /**
   * Required. Parent resource name of
   * [TargetSite][google.cloud.discoveryengine.v1.TargetSite], such as
   * `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/siteSearchEngine`.
   */
  parent: string;
  /**
   * Required. The [TargetSite][google.cloud.discoveryengine.v1.TargetSite] to
   * create.
   */
  targetSite: TargetSite | undefined;
}

/**
 * Metadata related to the progress of the
 * [SiteSearchEngineService.CreateTargetSite][google.cloud.discoveryengine.v1.SiteSearchEngineService.CreateTargetSite]
 * operation. This will be returned by the google.longrunning.Operation.metadata
 * field.
 */
export interface CreateTargetSiteMetadata {
  /** Operation create time. */
  createTime:
    | Date
    | undefined;
  /**
   * Operation last update time. If the operation is done, this is also the
   * finish time.
   */
  updateTime: Date | undefined;
}

/**
 * Request message for
 * [SiteSearchEngineService.BatchCreateTargetSites][google.cloud.discoveryengine.v1.SiteSearchEngineService.BatchCreateTargetSites]
 * method.
 */
export interface BatchCreateTargetSitesRequest {
  /**
   * Required. The parent resource shared by all TargetSites being created.
   * `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/siteSearchEngine`.
   * The parent field in the CreateBookRequest messages must either be empty or
   * match this field.
   */
  parent: string;
  /**
   * Required. The request message specifying the resources to create.
   * A maximum of 20 TargetSites can be created in a batch.
   */
  requests: CreateTargetSiteRequest[];
}

/**
 * Request message for
 * [SiteSearchEngineService.GetTargetSite][google.cloud.discoveryengine.v1.SiteSearchEngineService.GetTargetSite]
 * method.
 */
export interface GetTargetSiteRequest {
  /**
   * Required. Full resource name of
   * [TargetSite][google.cloud.discoveryengine.v1.TargetSite], such as
   * `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/siteSearchEngine/targetSites/{target_site}`.
   *
   * If the caller does not have permission to access the
   * [TargetSite][google.cloud.discoveryengine.v1.TargetSite], regardless of
   * whether or not it exists, a PERMISSION_DENIED error is returned.
   *
   * If the requested [TargetSite][google.cloud.discoveryengine.v1.TargetSite]
   * does not exist, a NOT_FOUND error is returned.
   */
  name: string;
}

/**
 * Request message for
 * [SiteSearchEngineService.UpdateTargetSite][google.cloud.discoveryengine.v1.SiteSearchEngineService.UpdateTargetSite]
 * method.
 */
export interface UpdateTargetSiteRequest {
  /**
   * Required. The target site to update.
   * If the caller does not have permission to update the
   * [TargetSite][google.cloud.discoveryengine.v1.TargetSite], regardless of
   * whether or not it exists, a PERMISSION_DENIED error is returned.
   *
   * If the [TargetSite][google.cloud.discoveryengine.v1.TargetSite] to update
   * does not exist, a NOT_FOUND error is returned.
   */
  targetSite: TargetSite | undefined;
}

/**
 * Metadata related to the progress of the
 * [SiteSearchEngineService.UpdateTargetSite][google.cloud.discoveryengine.v1.SiteSearchEngineService.UpdateTargetSite]
 * operation. This will be returned by the google.longrunning.Operation.metadata
 * field.
 */
export interface UpdateTargetSiteMetadata {
  /** Operation create time. */
  createTime:
    | Date
    | undefined;
  /**
   * Operation last update time. If the operation is done, this is also the
   * finish time.
   */
  updateTime: Date | undefined;
}

/**
 * Request message for
 * [SiteSearchEngineService.DeleteTargetSite][google.cloud.discoveryengine.v1.SiteSearchEngineService.DeleteTargetSite]
 * method.
 */
export interface DeleteTargetSiteRequest {
  /**
   * Required. Full resource name of
   * [TargetSite][google.cloud.discoveryengine.v1.TargetSite], such as
   * `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/siteSearchEngine/targetSites/{target_site}`.
   *
   * If the caller does not have permission to access the
   * [TargetSite][google.cloud.discoveryengine.v1.TargetSite], regardless of
   * whether or not it exists, a PERMISSION_DENIED error is returned.
   *
   * If the requested [TargetSite][google.cloud.discoveryengine.v1.TargetSite]
   * does not exist, a NOT_FOUND error is returned.
   */
  name: string;
}

/**
 * Metadata related to the progress of the
 * [SiteSearchEngineService.DeleteTargetSite][google.cloud.discoveryengine.v1.SiteSearchEngineService.DeleteTargetSite]
 * operation. This will be returned by the google.longrunning.Operation.metadata
 * field.
 */
export interface DeleteTargetSiteMetadata {
  /** Operation create time. */
  createTime:
    | Date
    | undefined;
  /**
   * Operation last update time. If the operation is done, this is also the
   * finish time.
   */
  updateTime: Date | undefined;
}

/**
 * Request message for
 * [SiteSearchEngineService.ListTargetSites][google.cloud.discoveryengine.v1.SiteSearchEngineService.ListTargetSites]
 * method.
 */
export interface ListTargetSitesRequest {
  /**
   * Required. The parent site search engine resource name, such as
   * `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/siteSearchEngine`.
   *
   * If the caller does not have permission to list
   * [TargetSite][google.cloud.discoveryengine.v1.TargetSite]s under this site
   * search engine, regardless of whether or not this branch exists, a
   * PERMISSION_DENIED error is returned.
   */
  parent: string;
  /**
   * Requested page size. Server may return fewer items than requested. If
   * unspecified, server will pick an appropriate default. The maximum value is
   * 1000; values above 1000 will be coerced to 1000.
   *
   * If this field is negative, an INVALID_ARGUMENT error is returned.
   */
  pageSize: number;
  /**
   * A page token, received from a previous `ListTargetSites` call.
   * Provide this to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to `ListTargetSites`
   * must match the call that provided the page token.
   */
  pageToken: string;
}

/**
 * Response message for
 * [SiteSearchEngineService.ListTargetSites][google.cloud.discoveryengine.v1.SiteSearchEngineService.ListTargetSites]
 * method.
 */
export interface ListTargetSitesResponse {
  /** List of TargetSites. */
  targetSites: TargetSite[];
  /**
   * A token that can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
  /**
   * The total number of items matching the request.
   * This will always be populated in the response.
   */
  totalSize: number;
}

/**
 * Metadata related to the progress of the
 * [SiteSearchEngineService.BatchCreateTargetSites][google.cloud.discoveryengine.v1.SiteSearchEngineService.BatchCreateTargetSites]
 * operation. This will be returned by the google.longrunning.Operation.metadata
 * field.
 */
export interface BatchCreateTargetSiteMetadata {
  /** Operation create time. */
  createTime:
    | Date
    | undefined;
  /**
   * Operation last update time. If the operation is done, this is also the
   * finish time.
   */
  updateTime: Date | undefined;
}

/**
 * Response message for
 * [SiteSearchEngineService.BatchCreateTargetSites][google.cloud.discoveryengine.v1.SiteSearchEngineService.BatchCreateTargetSites]
 * method.
 */
export interface BatchCreateTargetSitesResponse {
  /** TargetSites created. */
  targetSites: TargetSite[];
}

/**
 * Request message for
 * [SiteSearchEngineService.EnableAdvancedSiteSearch][google.cloud.discoveryengine.v1.SiteSearchEngineService.EnableAdvancedSiteSearch]
 * method.
 */
export interface EnableAdvancedSiteSearchRequest {
  /**
   * Required. Full resource name of the
   * [SiteSearchEngine][google.cloud.discoveryengine.v1.SiteSearchEngine], such
   * as
   * `projects/{project}/locations/{location}/dataStores/{data_store_id}/siteSearchEngine`.
   */
  siteSearchEngine: string;
}

/**
 * Response message for
 * [SiteSearchEngineService.EnableAdvancedSiteSearch][google.cloud.discoveryengine.v1.SiteSearchEngineService.EnableAdvancedSiteSearch]
 * method.
 */
export interface EnableAdvancedSiteSearchResponse {
}

/**
 * Metadata related to the progress of the
 * [SiteSearchEngineService.EnableAdvancedSiteSearch][google.cloud.discoveryengine.v1.SiteSearchEngineService.EnableAdvancedSiteSearch]
 * operation. This will be returned by the google.longrunning.Operation.metadata
 * field.
 */
export interface EnableAdvancedSiteSearchMetadata {
  /** Operation create time. */
  createTime:
    | Date
    | undefined;
  /**
   * Operation last update time. If the operation is done, this is also the
   * finish time.
   */
  updateTime: Date | undefined;
}

/**
 * Request message for
 * [SiteSearchEngineService.DisableAdvancedSiteSearch][google.cloud.discoveryengine.v1.SiteSearchEngineService.DisableAdvancedSiteSearch]
 * method.
 */
export interface DisableAdvancedSiteSearchRequest {
  /**
   * Required. Full resource name of the
   * [SiteSearchEngine][google.cloud.discoveryengine.v1.SiteSearchEngine], such
   * as
   * `projects/{project}/locations/{location}/dataStores/{data_store_id}/siteSearchEngine`.
   */
  siteSearchEngine: string;
}

/**
 * Response message for
 * [SiteSearchEngineService.DisableAdvancedSiteSearch][google.cloud.discoveryengine.v1.SiteSearchEngineService.DisableAdvancedSiteSearch]
 * method.
 */
export interface DisableAdvancedSiteSearchResponse {
}

/**
 * Metadata related to the progress of the
 * [SiteSearchEngineService.DisableAdvancedSiteSearch][google.cloud.discoveryengine.v1.SiteSearchEngineService.DisableAdvancedSiteSearch]
 * operation. This will be returned by the google.longrunning.Operation.metadata
 * field.
 */
export interface DisableAdvancedSiteSearchMetadata {
  /** Operation create time. */
  createTime:
    | Date
    | undefined;
  /**
   * Operation last update time. If the operation is done, this is also the
   * finish time.
   */
  updateTime: Date | undefined;
}

/**
 * Request message for
 * [SiteSearchEngineService.RecrawlUris][google.cloud.discoveryengine.v1.SiteSearchEngineService.RecrawlUris]
 * method.
 */
export interface RecrawlUrisRequest {
  /**
   * Required. Full resource name of the
   * [SiteSearchEngine][google.cloud.discoveryengine.v1.SiteSearchEngine], such
   * as `projects/* /locations/* /collections/* /dataStores/* /siteSearchEngine`.
   */
  siteSearchEngine: string;
  /**
   * Required. List of URIs to crawl. At most 10K URIs are supported, otherwise
   * an INVALID_ARGUMENT error is thrown. Each URI should match at least one
   * [TargetSite][google.cloud.discoveryengine.v1.TargetSite] in
   * `site_search_engine`.
   */
  uris: string[];
}

/**
 * Response message for
 * [SiteSearchEngineService.RecrawlUris][google.cloud.discoveryengine.v1.SiteSearchEngineService.RecrawlUris]
 * method.
 */
export interface RecrawlUrisResponse {
  /** Details for a sample of up to 10 `failed_uris`. */
  failureSamples: RecrawlUrisResponse_FailureInfo[];
  /** URIs that were not crawled before the LRO terminated. */
  failedUris: string[];
}

/**
 * Details about why a particular URI failed to be crawled. Each FailureInfo
 * contains one FailureReason per CorpusType.
 */
export interface RecrawlUrisResponse_FailureInfo {
  /** URI that failed to be crawled. */
  uri: string;
  /** List of failure reasons by corpus type (e.g. desktop, mobile). */
  failureReasons: RecrawlUrisResponse_FailureInfo_FailureReason[];
}

/**
 * Details about why crawling failed for a particular CorpusType, e.g.,
 * DESKTOP and MOBILE crawling may fail for different reasons.
 */
export interface RecrawlUrisResponse_FailureInfo_FailureReason {
  /** DESKTOP, MOBILE, or CORPUS_TYPE_UNSPECIFIED. */
  corpusType: RecrawlUrisResponse_FailureInfo_FailureReason_CorpusType;
  /** Reason why the URI was not crawled. */
  errorMessage: string;
}

/** CorpusType for the failed crawling operation. */
export enum RecrawlUrisResponse_FailureInfo_FailureReason_CorpusType {
  /** CORPUS_TYPE_UNSPECIFIED - Default value. */
  CORPUS_TYPE_UNSPECIFIED = 0,
  /** DESKTOP - Denotes a crawling attempt for the desktop version of a page. */
  DESKTOP = 1,
  /** MOBILE - Denotes a crawling attempt for the mobile version of a page. */
  MOBILE = 2,
  UNRECOGNIZED = -1,
}

export function recrawlUrisResponse_FailureInfo_FailureReason_CorpusTypeFromJSON(
  object: any,
): RecrawlUrisResponse_FailureInfo_FailureReason_CorpusType {
  switch (object) {
    case 0:
    case "CORPUS_TYPE_UNSPECIFIED":
      return RecrawlUrisResponse_FailureInfo_FailureReason_CorpusType.CORPUS_TYPE_UNSPECIFIED;
    case 1:
    case "DESKTOP":
      return RecrawlUrisResponse_FailureInfo_FailureReason_CorpusType.DESKTOP;
    case 2:
    case "MOBILE":
      return RecrawlUrisResponse_FailureInfo_FailureReason_CorpusType.MOBILE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return RecrawlUrisResponse_FailureInfo_FailureReason_CorpusType.UNRECOGNIZED;
  }
}

export function recrawlUrisResponse_FailureInfo_FailureReason_CorpusTypeToJSON(
  object: RecrawlUrisResponse_FailureInfo_FailureReason_CorpusType,
): string {
  switch (object) {
    case RecrawlUrisResponse_FailureInfo_FailureReason_CorpusType.CORPUS_TYPE_UNSPECIFIED:
      return "CORPUS_TYPE_UNSPECIFIED";
    case RecrawlUrisResponse_FailureInfo_FailureReason_CorpusType.DESKTOP:
      return "DESKTOP";
    case RecrawlUrisResponse_FailureInfo_FailureReason_CorpusType.MOBILE:
      return "MOBILE";
    case RecrawlUrisResponse_FailureInfo_FailureReason_CorpusType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * Metadata related to the progress of the
 * [SiteSearchEngineService.RecrawlUris][google.cloud.discoveryengine.v1.SiteSearchEngineService.RecrawlUris]
 * operation. This will be returned by the google.longrunning.Operation.metadata
 * field.
 */
export interface RecrawlUrisMetadata {
  /** Operation create time. */
  createTime:
    | Date
    | undefined;
  /**
   * Operation last update time. If the operation is done, this is also the
   * finish time.
   */
  updateTime:
    | Date
    | undefined;
  /**
   * Unique URIs in the request that don't match any TargetSite in the
   * DataStore, only match TargetSites that haven't been fully indexed, or match
   * a TargetSite with type EXCLUDE.
   */
  invalidUris: string[];
  /** Total number of unique URIs in the request that are not in invalid_uris. */
  validUrisCount: number;
  /** Total number of URIs that have been crawled so far. */
  successCount: number;
  /** Total number of URIs that have yet to be crawled. */
  pendingCount: number;
  /**
   * Total number of URIs that were rejected due to insufficient indexing
   * resources.
   */
  quotaExceededCount: number;
}

/**
 * Request message for
 * [SiteSearchEngineService.BatchVerifyTargetSites][google.cloud.discoveryengine.v1.SiteSearchEngineService.BatchVerifyTargetSites]
 * method.
 */
export interface BatchVerifyTargetSitesRequest {
  /**
   * Required. The parent resource shared by all TargetSites being verified.
   * `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/siteSearchEngine`.
   */
  parent: string;
}

/**
 * Response message for
 * [SiteSearchEngineService.BatchVerifyTargetSites][google.cloud.discoveryengine.v1.SiteSearchEngineService.BatchVerifyTargetSites]
 * method.
 */
export interface BatchVerifyTargetSitesResponse {
}

/**
 * Metadata related to the progress of the
 * [SiteSearchEngineService.BatchVerifyTargetSites][google.cloud.discoveryengine.v1.SiteSearchEngineService.BatchVerifyTargetSites]
 * operation. This will be returned by the google.longrunning.Operation.metadata
 * field.
 */
export interface BatchVerifyTargetSitesMetadata {
  /** Operation create time. */
  createTime:
    | Date
    | undefined;
  /**
   * Operation last update time. If the operation is done, this is also the
   * finish time.
   */
  updateTime: Date | undefined;
}

/**
 * Request message for
 * [SiteSearchEngineService.FetchDomainVerificationStatus][google.cloud.discoveryengine.v1.SiteSearchEngineService.FetchDomainVerificationStatus]
 * method.
 */
export interface FetchDomainVerificationStatusRequest {
  /**
   * Required. The site search engine resource under which we fetch all the
   * domain verification status.
   * `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/siteSearchEngine`.
   */
  siteSearchEngine: string;
  /**
   * Requested page size. Server may return fewer items than requested. If
   * unspecified, server will pick an appropriate default. The maximum value is
   * 1000; values above 1000 will be coerced to 1000.
   *
   * If this field is negative, an INVALID_ARGUMENT error is returned.
   */
  pageSize: number;
  /**
   * A page token, received from a previous `FetchDomainVerificationStatus`
   * call. Provide this to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to
   * `FetchDomainVerificationStatus` must match the call that provided the page
   * token.
   */
  pageToken: string;
}

/**
 * Response message for
 * [SiteSearchEngineService.FetchDomainVerificationStatus][google.cloud.discoveryengine.v1.SiteSearchEngineService.FetchDomainVerificationStatus]
 * method.
 */
export interface FetchDomainVerificationStatusResponse {
  /** List of TargetSites containing the site verification status. */
  targetSites: TargetSite[];
  /**
   * A token that can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
  /**
   * The total number of items matching the request.
   * This will always be populated in the response.
   */
  totalSize: number;
}

function createBaseGetSiteSearchEngineRequest(): GetSiteSearchEngineRequest {
  return { name: "" };
}

export const GetSiteSearchEngineRequest: MessageFns<GetSiteSearchEngineRequest> = {
  encode(message: GetSiteSearchEngineRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetSiteSearchEngineRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSiteSearchEngineRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetSiteSearchEngineRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetSiteSearchEngineRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetSiteSearchEngineRequest>): GetSiteSearchEngineRequest {
    return GetSiteSearchEngineRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetSiteSearchEngineRequest>): GetSiteSearchEngineRequest {
    const message = createBaseGetSiteSearchEngineRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateTargetSiteRequest(): CreateTargetSiteRequest {
  return { parent: "", targetSite: undefined };
}

export const CreateTargetSiteRequest: MessageFns<CreateTargetSiteRequest> = {
  encode(message: CreateTargetSiteRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.targetSite !== undefined) {
      TargetSite.encode(message.targetSite, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateTargetSiteRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateTargetSiteRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.targetSite = TargetSite.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateTargetSiteRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      targetSite: isSet(object.targetSite) ? TargetSite.fromJSON(object.targetSite) : undefined,
    };
  },

  toJSON(message: CreateTargetSiteRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.targetSite !== undefined) {
      obj.targetSite = TargetSite.toJSON(message.targetSite);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateTargetSiteRequest>): CreateTargetSiteRequest {
    return CreateTargetSiteRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateTargetSiteRequest>): CreateTargetSiteRequest {
    const message = createBaseCreateTargetSiteRequest();
    message.parent = object.parent ?? "";
    message.targetSite = (object.targetSite !== undefined && object.targetSite !== null)
      ? TargetSite.fromPartial(object.targetSite)
      : undefined;
    return message;
  },
};

function createBaseCreateTargetSiteMetadata(): CreateTargetSiteMetadata {
  return { createTime: undefined, updateTime: undefined };
}

export const CreateTargetSiteMetadata: MessageFns<CreateTargetSiteMetadata> = {
  encode(message: CreateTargetSiteMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(10).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateTargetSiteMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateTargetSiteMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateTargetSiteMetadata {
    return {
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
    };
  },

  toJSON(message: CreateTargetSiteMetadata): unknown {
    const obj: any = {};
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<CreateTargetSiteMetadata>): CreateTargetSiteMetadata {
    return CreateTargetSiteMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateTargetSiteMetadata>): CreateTargetSiteMetadata {
    const message = createBaseCreateTargetSiteMetadata();
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    return message;
  },
};

function createBaseBatchCreateTargetSitesRequest(): BatchCreateTargetSitesRequest {
  return { parent: "", requests: [] };
}

export const BatchCreateTargetSitesRequest: MessageFns<BatchCreateTargetSitesRequest> = {
  encode(message: BatchCreateTargetSitesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    for (const v of message.requests) {
      CreateTargetSiteRequest.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BatchCreateTargetSitesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBatchCreateTargetSitesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.requests.push(CreateTargetSiteRequest.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BatchCreateTargetSitesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      requests: globalThis.Array.isArray(object?.requests)
        ? object.requests.map((e: any) => CreateTargetSiteRequest.fromJSON(e))
        : [],
    };
  },

  toJSON(message: BatchCreateTargetSitesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.requests?.length) {
      obj.requests = message.requests.map((e) => CreateTargetSiteRequest.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<BatchCreateTargetSitesRequest>): BatchCreateTargetSitesRequest {
    return BatchCreateTargetSitesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BatchCreateTargetSitesRequest>): BatchCreateTargetSitesRequest {
    const message = createBaseBatchCreateTargetSitesRequest();
    message.parent = object.parent ?? "";
    message.requests = object.requests?.map((e) => CreateTargetSiteRequest.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetTargetSiteRequest(): GetTargetSiteRequest {
  return { name: "" };
}

export const GetTargetSiteRequest: MessageFns<GetTargetSiteRequest> = {
  encode(message: GetTargetSiteRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetTargetSiteRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetTargetSiteRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetTargetSiteRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetTargetSiteRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetTargetSiteRequest>): GetTargetSiteRequest {
    return GetTargetSiteRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetTargetSiteRequest>): GetTargetSiteRequest {
    const message = createBaseGetTargetSiteRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpdateTargetSiteRequest(): UpdateTargetSiteRequest {
  return { targetSite: undefined };
}

export const UpdateTargetSiteRequest: MessageFns<UpdateTargetSiteRequest> = {
  encode(message: UpdateTargetSiteRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.targetSite !== undefined) {
      TargetSite.encode(message.targetSite, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateTargetSiteRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateTargetSiteRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.targetSite = TargetSite.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateTargetSiteRequest {
    return { targetSite: isSet(object.targetSite) ? TargetSite.fromJSON(object.targetSite) : undefined };
  },

  toJSON(message: UpdateTargetSiteRequest): unknown {
    const obj: any = {};
    if (message.targetSite !== undefined) {
      obj.targetSite = TargetSite.toJSON(message.targetSite);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateTargetSiteRequest>): UpdateTargetSiteRequest {
    return UpdateTargetSiteRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateTargetSiteRequest>): UpdateTargetSiteRequest {
    const message = createBaseUpdateTargetSiteRequest();
    message.targetSite = (object.targetSite !== undefined && object.targetSite !== null)
      ? TargetSite.fromPartial(object.targetSite)
      : undefined;
    return message;
  },
};

function createBaseUpdateTargetSiteMetadata(): UpdateTargetSiteMetadata {
  return { createTime: undefined, updateTime: undefined };
}

export const UpdateTargetSiteMetadata: MessageFns<UpdateTargetSiteMetadata> = {
  encode(message: UpdateTargetSiteMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(10).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateTargetSiteMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateTargetSiteMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateTargetSiteMetadata {
    return {
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
    };
  },

  toJSON(message: UpdateTargetSiteMetadata): unknown {
    const obj: any = {};
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateTargetSiteMetadata>): UpdateTargetSiteMetadata {
    return UpdateTargetSiteMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateTargetSiteMetadata>): UpdateTargetSiteMetadata {
    const message = createBaseUpdateTargetSiteMetadata();
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    return message;
  },
};

function createBaseDeleteTargetSiteRequest(): DeleteTargetSiteRequest {
  return { name: "" };
}

export const DeleteTargetSiteRequest: MessageFns<DeleteTargetSiteRequest> = {
  encode(message: DeleteTargetSiteRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteTargetSiteRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteTargetSiteRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteTargetSiteRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteTargetSiteRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteTargetSiteRequest>): DeleteTargetSiteRequest {
    return DeleteTargetSiteRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteTargetSiteRequest>): DeleteTargetSiteRequest {
    const message = createBaseDeleteTargetSiteRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseDeleteTargetSiteMetadata(): DeleteTargetSiteMetadata {
  return { createTime: undefined, updateTime: undefined };
}

export const DeleteTargetSiteMetadata: MessageFns<DeleteTargetSiteMetadata> = {
  encode(message: DeleteTargetSiteMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(10).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteTargetSiteMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteTargetSiteMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteTargetSiteMetadata {
    return {
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
    };
  },

  toJSON(message: DeleteTargetSiteMetadata): unknown {
    const obj: any = {};
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteTargetSiteMetadata>): DeleteTargetSiteMetadata {
    return DeleteTargetSiteMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteTargetSiteMetadata>): DeleteTargetSiteMetadata {
    const message = createBaseDeleteTargetSiteMetadata();
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    return message;
  },
};

function createBaseListTargetSitesRequest(): ListTargetSitesRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListTargetSitesRequest: MessageFns<ListTargetSitesRequest> = {
  encode(message: ListTargetSitesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListTargetSitesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListTargetSitesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListTargetSitesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListTargetSitesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListTargetSitesRequest>): ListTargetSitesRequest {
    return ListTargetSitesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListTargetSitesRequest>): ListTargetSitesRequest {
    const message = createBaseListTargetSitesRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListTargetSitesResponse(): ListTargetSitesResponse {
  return { targetSites: [], nextPageToken: "", totalSize: 0 };
}

export const ListTargetSitesResponse: MessageFns<ListTargetSitesResponse> = {
  encode(message: ListTargetSitesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.targetSites) {
      TargetSite.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    if (message.totalSize !== 0) {
      writer.uint32(24).int32(message.totalSize);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListTargetSitesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListTargetSitesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.targetSites.push(TargetSite.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.totalSize = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListTargetSitesResponse {
    return {
      targetSites: globalThis.Array.isArray(object?.targetSites)
        ? object.targetSites.map((e: any) => TargetSite.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      totalSize: isSet(object.totalSize) ? globalThis.Number(object.totalSize) : 0,
    };
  },

  toJSON(message: ListTargetSitesResponse): unknown {
    const obj: any = {};
    if (message.targetSites?.length) {
      obj.targetSites = message.targetSites.map((e) => TargetSite.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.totalSize !== 0) {
      obj.totalSize = Math.round(message.totalSize);
    }
    return obj;
  },

  create(base?: DeepPartial<ListTargetSitesResponse>): ListTargetSitesResponse {
    return ListTargetSitesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListTargetSitesResponse>): ListTargetSitesResponse {
    const message = createBaseListTargetSitesResponse();
    message.targetSites = object.targetSites?.map((e) => TargetSite.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.totalSize = object.totalSize ?? 0;
    return message;
  },
};

function createBaseBatchCreateTargetSiteMetadata(): BatchCreateTargetSiteMetadata {
  return { createTime: undefined, updateTime: undefined };
}

export const BatchCreateTargetSiteMetadata: MessageFns<BatchCreateTargetSiteMetadata> = {
  encode(message: BatchCreateTargetSiteMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(10).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BatchCreateTargetSiteMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBatchCreateTargetSiteMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BatchCreateTargetSiteMetadata {
    return {
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
    };
  },

  toJSON(message: BatchCreateTargetSiteMetadata): unknown {
    const obj: any = {};
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<BatchCreateTargetSiteMetadata>): BatchCreateTargetSiteMetadata {
    return BatchCreateTargetSiteMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BatchCreateTargetSiteMetadata>): BatchCreateTargetSiteMetadata {
    const message = createBaseBatchCreateTargetSiteMetadata();
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    return message;
  },
};

function createBaseBatchCreateTargetSitesResponse(): BatchCreateTargetSitesResponse {
  return { targetSites: [] };
}

export const BatchCreateTargetSitesResponse: MessageFns<BatchCreateTargetSitesResponse> = {
  encode(message: BatchCreateTargetSitesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.targetSites) {
      TargetSite.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BatchCreateTargetSitesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBatchCreateTargetSitesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.targetSites.push(TargetSite.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BatchCreateTargetSitesResponse {
    return {
      targetSites: globalThis.Array.isArray(object?.targetSites)
        ? object.targetSites.map((e: any) => TargetSite.fromJSON(e))
        : [],
    };
  },

  toJSON(message: BatchCreateTargetSitesResponse): unknown {
    const obj: any = {};
    if (message.targetSites?.length) {
      obj.targetSites = message.targetSites.map((e) => TargetSite.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<BatchCreateTargetSitesResponse>): BatchCreateTargetSitesResponse {
    return BatchCreateTargetSitesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BatchCreateTargetSitesResponse>): BatchCreateTargetSitesResponse {
    const message = createBaseBatchCreateTargetSitesResponse();
    message.targetSites = object.targetSites?.map((e) => TargetSite.fromPartial(e)) || [];
    return message;
  },
};

function createBaseEnableAdvancedSiteSearchRequest(): EnableAdvancedSiteSearchRequest {
  return { siteSearchEngine: "" };
}

export const EnableAdvancedSiteSearchRequest: MessageFns<EnableAdvancedSiteSearchRequest> = {
  encode(message: EnableAdvancedSiteSearchRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.siteSearchEngine !== "") {
      writer.uint32(10).string(message.siteSearchEngine);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EnableAdvancedSiteSearchRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEnableAdvancedSiteSearchRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.siteSearchEngine = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EnableAdvancedSiteSearchRequest {
    return { siteSearchEngine: isSet(object.siteSearchEngine) ? globalThis.String(object.siteSearchEngine) : "" };
  },

  toJSON(message: EnableAdvancedSiteSearchRequest): unknown {
    const obj: any = {};
    if (message.siteSearchEngine !== "") {
      obj.siteSearchEngine = message.siteSearchEngine;
    }
    return obj;
  },

  create(base?: DeepPartial<EnableAdvancedSiteSearchRequest>): EnableAdvancedSiteSearchRequest {
    return EnableAdvancedSiteSearchRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EnableAdvancedSiteSearchRequest>): EnableAdvancedSiteSearchRequest {
    const message = createBaseEnableAdvancedSiteSearchRequest();
    message.siteSearchEngine = object.siteSearchEngine ?? "";
    return message;
  },
};

function createBaseEnableAdvancedSiteSearchResponse(): EnableAdvancedSiteSearchResponse {
  return {};
}

export const EnableAdvancedSiteSearchResponse: MessageFns<EnableAdvancedSiteSearchResponse> = {
  encode(_: EnableAdvancedSiteSearchResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EnableAdvancedSiteSearchResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEnableAdvancedSiteSearchResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): EnableAdvancedSiteSearchResponse {
    return {};
  },

  toJSON(_: EnableAdvancedSiteSearchResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<EnableAdvancedSiteSearchResponse>): EnableAdvancedSiteSearchResponse {
    return EnableAdvancedSiteSearchResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<EnableAdvancedSiteSearchResponse>): EnableAdvancedSiteSearchResponse {
    const message = createBaseEnableAdvancedSiteSearchResponse();
    return message;
  },
};

function createBaseEnableAdvancedSiteSearchMetadata(): EnableAdvancedSiteSearchMetadata {
  return { createTime: undefined, updateTime: undefined };
}

export const EnableAdvancedSiteSearchMetadata: MessageFns<EnableAdvancedSiteSearchMetadata> = {
  encode(message: EnableAdvancedSiteSearchMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(10).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EnableAdvancedSiteSearchMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEnableAdvancedSiteSearchMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EnableAdvancedSiteSearchMetadata {
    return {
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
    };
  },

  toJSON(message: EnableAdvancedSiteSearchMetadata): unknown {
    const obj: any = {};
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<EnableAdvancedSiteSearchMetadata>): EnableAdvancedSiteSearchMetadata {
    return EnableAdvancedSiteSearchMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EnableAdvancedSiteSearchMetadata>): EnableAdvancedSiteSearchMetadata {
    const message = createBaseEnableAdvancedSiteSearchMetadata();
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    return message;
  },
};

function createBaseDisableAdvancedSiteSearchRequest(): DisableAdvancedSiteSearchRequest {
  return { siteSearchEngine: "" };
}

export const DisableAdvancedSiteSearchRequest: MessageFns<DisableAdvancedSiteSearchRequest> = {
  encode(message: DisableAdvancedSiteSearchRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.siteSearchEngine !== "") {
      writer.uint32(10).string(message.siteSearchEngine);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DisableAdvancedSiteSearchRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDisableAdvancedSiteSearchRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.siteSearchEngine = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DisableAdvancedSiteSearchRequest {
    return { siteSearchEngine: isSet(object.siteSearchEngine) ? globalThis.String(object.siteSearchEngine) : "" };
  },

  toJSON(message: DisableAdvancedSiteSearchRequest): unknown {
    const obj: any = {};
    if (message.siteSearchEngine !== "") {
      obj.siteSearchEngine = message.siteSearchEngine;
    }
    return obj;
  },

  create(base?: DeepPartial<DisableAdvancedSiteSearchRequest>): DisableAdvancedSiteSearchRequest {
    return DisableAdvancedSiteSearchRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DisableAdvancedSiteSearchRequest>): DisableAdvancedSiteSearchRequest {
    const message = createBaseDisableAdvancedSiteSearchRequest();
    message.siteSearchEngine = object.siteSearchEngine ?? "";
    return message;
  },
};

function createBaseDisableAdvancedSiteSearchResponse(): DisableAdvancedSiteSearchResponse {
  return {};
}

export const DisableAdvancedSiteSearchResponse: MessageFns<DisableAdvancedSiteSearchResponse> = {
  encode(_: DisableAdvancedSiteSearchResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DisableAdvancedSiteSearchResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDisableAdvancedSiteSearchResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): DisableAdvancedSiteSearchResponse {
    return {};
  },

  toJSON(_: DisableAdvancedSiteSearchResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<DisableAdvancedSiteSearchResponse>): DisableAdvancedSiteSearchResponse {
    return DisableAdvancedSiteSearchResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<DisableAdvancedSiteSearchResponse>): DisableAdvancedSiteSearchResponse {
    const message = createBaseDisableAdvancedSiteSearchResponse();
    return message;
  },
};

function createBaseDisableAdvancedSiteSearchMetadata(): DisableAdvancedSiteSearchMetadata {
  return { createTime: undefined, updateTime: undefined };
}

export const DisableAdvancedSiteSearchMetadata: MessageFns<DisableAdvancedSiteSearchMetadata> = {
  encode(message: DisableAdvancedSiteSearchMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(10).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DisableAdvancedSiteSearchMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDisableAdvancedSiteSearchMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DisableAdvancedSiteSearchMetadata {
    return {
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
    };
  },

  toJSON(message: DisableAdvancedSiteSearchMetadata): unknown {
    const obj: any = {};
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<DisableAdvancedSiteSearchMetadata>): DisableAdvancedSiteSearchMetadata {
    return DisableAdvancedSiteSearchMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DisableAdvancedSiteSearchMetadata>): DisableAdvancedSiteSearchMetadata {
    const message = createBaseDisableAdvancedSiteSearchMetadata();
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    return message;
  },
};

function createBaseRecrawlUrisRequest(): RecrawlUrisRequest {
  return { siteSearchEngine: "", uris: [] };
}

export const RecrawlUrisRequest: MessageFns<RecrawlUrisRequest> = {
  encode(message: RecrawlUrisRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.siteSearchEngine !== "") {
      writer.uint32(10).string(message.siteSearchEngine);
    }
    for (const v of message.uris) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RecrawlUrisRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRecrawlUrisRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.siteSearchEngine = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.uris.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RecrawlUrisRequest {
    return {
      siteSearchEngine: isSet(object.siteSearchEngine) ? globalThis.String(object.siteSearchEngine) : "",
      uris: globalThis.Array.isArray(object?.uris) ? object.uris.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: RecrawlUrisRequest): unknown {
    const obj: any = {};
    if (message.siteSearchEngine !== "") {
      obj.siteSearchEngine = message.siteSearchEngine;
    }
    if (message.uris?.length) {
      obj.uris = message.uris;
    }
    return obj;
  },

  create(base?: DeepPartial<RecrawlUrisRequest>): RecrawlUrisRequest {
    return RecrawlUrisRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RecrawlUrisRequest>): RecrawlUrisRequest {
    const message = createBaseRecrawlUrisRequest();
    message.siteSearchEngine = object.siteSearchEngine ?? "";
    message.uris = object.uris?.map((e) => e) || [];
    return message;
  },
};

function createBaseRecrawlUrisResponse(): RecrawlUrisResponse {
  return { failureSamples: [], failedUris: [] };
}

export const RecrawlUrisResponse: MessageFns<RecrawlUrisResponse> = {
  encode(message: RecrawlUrisResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.failureSamples) {
      RecrawlUrisResponse_FailureInfo.encode(v!, writer.uint32(10).fork()).join();
    }
    for (const v of message.failedUris) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RecrawlUrisResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRecrawlUrisResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.failureSamples.push(RecrawlUrisResponse_FailureInfo.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.failedUris.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RecrawlUrisResponse {
    return {
      failureSamples: globalThis.Array.isArray(object?.failureSamples)
        ? object.failureSamples.map((e: any) => RecrawlUrisResponse_FailureInfo.fromJSON(e))
        : [],
      failedUris: globalThis.Array.isArray(object?.failedUris)
        ? object.failedUris.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: RecrawlUrisResponse): unknown {
    const obj: any = {};
    if (message.failureSamples?.length) {
      obj.failureSamples = message.failureSamples.map((e) => RecrawlUrisResponse_FailureInfo.toJSON(e));
    }
    if (message.failedUris?.length) {
      obj.failedUris = message.failedUris;
    }
    return obj;
  },

  create(base?: DeepPartial<RecrawlUrisResponse>): RecrawlUrisResponse {
    return RecrawlUrisResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RecrawlUrisResponse>): RecrawlUrisResponse {
    const message = createBaseRecrawlUrisResponse();
    message.failureSamples = object.failureSamples?.map((e) => RecrawlUrisResponse_FailureInfo.fromPartial(e)) || [];
    message.failedUris = object.failedUris?.map((e) => e) || [];
    return message;
  },
};

function createBaseRecrawlUrisResponse_FailureInfo(): RecrawlUrisResponse_FailureInfo {
  return { uri: "", failureReasons: [] };
}

export const RecrawlUrisResponse_FailureInfo: MessageFns<RecrawlUrisResponse_FailureInfo> = {
  encode(message: RecrawlUrisResponse_FailureInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.uri !== "") {
      writer.uint32(10).string(message.uri);
    }
    for (const v of message.failureReasons) {
      RecrawlUrisResponse_FailureInfo_FailureReason.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RecrawlUrisResponse_FailureInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRecrawlUrisResponse_FailureInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.uri = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.failureReasons.push(RecrawlUrisResponse_FailureInfo_FailureReason.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RecrawlUrisResponse_FailureInfo {
    return {
      uri: isSet(object.uri) ? globalThis.String(object.uri) : "",
      failureReasons: globalThis.Array.isArray(object?.failureReasons)
        ? object.failureReasons.map((e: any) => RecrawlUrisResponse_FailureInfo_FailureReason.fromJSON(e))
        : [],
    };
  },

  toJSON(message: RecrawlUrisResponse_FailureInfo): unknown {
    const obj: any = {};
    if (message.uri !== "") {
      obj.uri = message.uri;
    }
    if (message.failureReasons?.length) {
      obj.failureReasons = message.failureReasons.map((e) => RecrawlUrisResponse_FailureInfo_FailureReason.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<RecrawlUrisResponse_FailureInfo>): RecrawlUrisResponse_FailureInfo {
    return RecrawlUrisResponse_FailureInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RecrawlUrisResponse_FailureInfo>): RecrawlUrisResponse_FailureInfo {
    const message = createBaseRecrawlUrisResponse_FailureInfo();
    message.uri = object.uri ?? "";
    message.failureReasons =
      object.failureReasons?.map((e) => RecrawlUrisResponse_FailureInfo_FailureReason.fromPartial(e)) || [];
    return message;
  },
};

function createBaseRecrawlUrisResponse_FailureInfo_FailureReason(): RecrawlUrisResponse_FailureInfo_FailureReason {
  return { corpusType: 0, errorMessage: "" };
}

export const RecrawlUrisResponse_FailureInfo_FailureReason: MessageFns<RecrawlUrisResponse_FailureInfo_FailureReason> =
  {
    encode(
      message: RecrawlUrisResponse_FailureInfo_FailureReason,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.corpusType !== 0) {
        writer.uint32(8).int32(message.corpusType);
      }
      if (message.errorMessage !== "") {
        writer.uint32(18).string(message.errorMessage);
      }
      return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): RecrawlUrisResponse_FailureInfo_FailureReason {
      const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseRecrawlUrisResponse_FailureInfo_FailureReason();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            if (tag !== 8) {
              break;
            }

            message.corpusType = reader.int32() as any;
            continue;
          case 2:
            if (tag !== 18) {
              break;
            }

            message.errorMessage = reader.string();
            continue;
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): RecrawlUrisResponse_FailureInfo_FailureReason {
      return {
        corpusType: isSet(object.corpusType)
          ? recrawlUrisResponse_FailureInfo_FailureReason_CorpusTypeFromJSON(object.corpusType)
          : 0,
        errorMessage: isSet(object.errorMessage) ? globalThis.String(object.errorMessage) : "",
      };
    },

    toJSON(message: RecrawlUrisResponse_FailureInfo_FailureReason): unknown {
      const obj: any = {};
      if (message.corpusType !== 0) {
        obj.corpusType = recrawlUrisResponse_FailureInfo_FailureReason_CorpusTypeToJSON(message.corpusType);
      }
      if (message.errorMessage !== "") {
        obj.errorMessage = message.errorMessage;
      }
      return obj;
    },

    create(
      base?: DeepPartial<RecrawlUrisResponse_FailureInfo_FailureReason>,
    ): RecrawlUrisResponse_FailureInfo_FailureReason {
      return RecrawlUrisResponse_FailureInfo_FailureReason.fromPartial(base ?? {});
    },
    fromPartial(
      object: DeepPartial<RecrawlUrisResponse_FailureInfo_FailureReason>,
    ): RecrawlUrisResponse_FailureInfo_FailureReason {
      const message = createBaseRecrawlUrisResponse_FailureInfo_FailureReason();
      message.corpusType = object.corpusType ?? 0;
      message.errorMessage = object.errorMessage ?? "";
      return message;
    },
  };

function createBaseRecrawlUrisMetadata(): RecrawlUrisMetadata {
  return {
    createTime: undefined,
    updateTime: undefined,
    invalidUris: [],
    validUrisCount: 0,
    successCount: 0,
    pendingCount: 0,
    quotaExceededCount: 0,
  };
}

export const RecrawlUrisMetadata: MessageFns<RecrawlUrisMetadata> = {
  encode(message: RecrawlUrisMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(10).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(18).fork()).join();
    }
    for (const v of message.invalidUris) {
      writer.uint32(26).string(v!);
    }
    if (message.validUrisCount !== 0) {
      writer.uint32(32).int32(message.validUrisCount);
    }
    if (message.successCount !== 0) {
      writer.uint32(40).int32(message.successCount);
    }
    if (message.pendingCount !== 0) {
      writer.uint32(48).int32(message.pendingCount);
    }
    if (message.quotaExceededCount !== 0) {
      writer.uint32(56).int32(message.quotaExceededCount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RecrawlUrisMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRecrawlUrisMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.invalidUris.push(reader.string());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.validUrisCount = reader.int32();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.successCount = reader.int32();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.pendingCount = reader.int32();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.quotaExceededCount = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RecrawlUrisMetadata {
    return {
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      invalidUris: globalThis.Array.isArray(object?.invalidUris)
        ? object.invalidUris.map((e: any) => globalThis.String(e))
        : [],
      validUrisCount: isSet(object.validUrisCount) ? globalThis.Number(object.validUrisCount) : 0,
      successCount: isSet(object.successCount) ? globalThis.Number(object.successCount) : 0,
      pendingCount: isSet(object.pendingCount) ? globalThis.Number(object.pendingCount) : 0,
      quotaExceededCount: isSet(object.quotaExceededCount) ? globalThis.Number(object.quotaExceededCount) : 0,
    };
  },

  toJSON(message: RecrawlUrisMetadata): unknown {
    const obj: any = {};
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.invalidUris?.length) {
      obj.invalidUris = message.invalidUris;
    }
    if (message.validUrisCount !== 0) {
      obj.validUrisCount = Math.round(message.validUrisCount);
    }
    if (message.successCount !== 0) {
      obj.successCount = Math.round(message.successCount);
    }
    if (message.pendingCount !== 0) {
      obj.pendingCount = Math.round(message.pendingCount);
    }
    if (message.quotaExceededCount !== 0) {
      obj.quotaExceededCount = Math.round(message.quotaExceededCount);
    }
    return obj;
  },

  create(base?: DeepPartial<RecrawlUrisMetadata>): RecrawlUrisMetadata {
    return RecrawlUrisMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RecrawlUrisMetadata>): RecrawlUrisMetadata {
    const message = createBaseRecrawlUrisMetadata();
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.invalidUris = object.invalidUris?.map((e) => e) || [];
    message.validUrisCount = object.validUrisCount ?? 0;
    message.successCount = object.successCount ?? 0;
    message.pendingCount = object.pendingCount ?? 0;
    message.quotaExceededCount = object.quotaExceededCount ?? 0;
    return message;
  },
};

function createBaseBatchVerifyTargetSitesRequest(): BatchVerifyTargetSitesRequest {
  return { parent: "" };
}

export const BatchVerifyTargetSitesRequest: MessageFns<BatchVerifyTargetSitesRequest> = {
  encode(message: BatchVerifyTargetSitesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BatchVerifyTargetSitesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBatchVerifyTargetSitesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BatchVerifyTargetSitesRequest {
    return { parent: isSet(object.parent) ? globalThis.String(object.parent) : "" };
  },

  toJSON(message: BatchVerifyTargetSitesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    return obj;
  },

  create(base?: DeepPartial<BatchVerifyTargetSitesRequest>): BatchVerifyTargetSitesRequest {
    return BatchVerifyTargetSitesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BatchVerifyTargetSitesRequest>): BatchVerifyTargetSitesRequest {
    const message = createBaseBatchVerifyTargetSitesRequest();
    message.parent = object.parent ?? "";
    return message;
  },
};

function createBaseBatchVerifyTargetSitesResponse(): BatchVerifyTargetSitesResponse {
  return {};
}

export const BatchVerifyTargetSitesResponse: MessageFns<BatchVerifyTargetSitesResponse> = {
  encode(_: BatchVerifyTargetSitesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BatchVerifyTargetSitesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBatchVerifyTargetSitesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): BatchVerifyTargetSitesResponse {
    return {};
  },

  toJSON(_: BatchVerifyTargetSitesResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<BatchVerifyTargetSitesResponse>): BatchVerifyTargetSitesResponse {
    return BatchVerifyTargetSitesResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<BatchVerifyTargetSitesResponse>): BatchVerifyTargetSitesResponse {
    const message = createBaseBatchVerifyTargetSitesResponse();
    return message;
  },
};

function createBaseBatchVerifyTargetSitesMetadata(): BatchVerifyTargetSitesMetadata {
  return { createTime: undefined, updateTime: undefined };
}

export const BatchVerifyTargetSitesMetadata: MessageFns<BatchVerifyTargetSitesMetadata> = {
  encode(message: BatchVerifyTargetSitesMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(10).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BatchVerifyTargetSitesMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBatchVerifyTargetSitesMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BatchVerifyTargetSitesMetadata {
    return {
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
    };
  },

  toJSON(message: BatchVerifyTargetSitesMetadata): unknown {
    const obj: any = {};
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<BatchVerifyTargetSitesMetadata>): BatchVerifyTargetSitesMetadata {
    return BatchVerifyTargetSitesMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BatchVerifyTargetSitesMetadata>): BatchVerifyTargetSitesMetadata {
    const message = createBaseBatchVerifyTargetSitesMetadata();
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    return message;
  },
};

function createBaseFetchDomainVerificationStatusRequest(): FetchDomainVerificationStatusRequest {
  return { siteSearchEngine: "", pageSize: 0, pageToken: "" };
}

export const FetchDomainVerificationStatusRequest: MessageFns<FetchDomainVerificationStatusRequest> = {
  encode(message: FetchDomainVerificationStatusRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.siteSearchEngine !== "") {
      writer.uint32(10).string(message.siteSearchEngine);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FetchDomainVerificationStatusRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFetchDomainVerificationStatusRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.siteSearchEngine = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FetchDomainVerificationStatusRequest {
    return {
      siteSearchEngine: isSet(object.siteSearchEngine) ? globalThis.String(object.siteSearchEngine) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: FetchDomainVerificationStatusRequest): unknown {
    const obj: any = {};
    if (message.siteSearchEngine !== "") {
      obj.siteSearchEngine = message.siteSearchEngine;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<FetchDomainVerificationStatusRequest>): FetchDomainVerificationStatusRequest {
    return FetchDomainVerificationStatusRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FetchDomainVerificationStatusRequest>): FetchDomainVerificationStatusRequest {
    const message = createBaseFetchDomainVerificationStatusRequest();
    message.siteSearchEngine = object.siteSearchEngine ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseFetchDomainVerificationStatusResponse(): FetchDomainVerificationStatusResponse {
  return { targetSites: [], nextPageToken: "", totalSize: 0 };
}

export const FetchDomainVerificationStatusResponse: MessageFns<FetchDomainVerificationStatusResponse> = {
  encode(message: FetchDomainVerificationStatusResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.targetSites) {
      TargetSite.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    if (message.totalSize !== 0) {
      writer.uint32(24).int32(message.totalSize);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FetchDomainVerificationStatusResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFetchDomainVerificationStatusResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.targetSites.push(TargetSite.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.totalSize = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FetchDomainVerificationStatusResponse {
    return {
      targetSites: globalThis.Array.isArray(object?.targetSites)
        ? object.targetSites.map((e: any) => TargetSite.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      totalSize: isSet(object.totalSize) ? globalThis.Number(object.totalSize) : 0,
    };
  },

  toJSON(message: FetchDomainVerificationStatusResponse): unknown {
    const obj: any = {};
    if (message.targetSites?.length) {
      obj.targetSites = message.targetSites.map((e) => TargetSite.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.totalSize !== 0) {
      obj.totalSize = Math.round(message.totalSize);
    }
    return obj;
  },

  create(base?: DeepPartial<FetchDomainVerificationStatusResponse>): FetchDomainVerificationStatusResponse {
    return FetchDomainVerificationStatusResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FetchDomainVerificationStatusResponse>): FetchDomainVerificationStatusResponse {
    const message = createBaseFetchDomainVerificationStatusResponse();
    message.targetSites = object.targetSites?.map((e) => TargetSite.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.totalSize = object.totalSize ?? 0;
    return message;
  },
};

/** Service for managing site search related resources. */
export type SiteSearchEngineServiceDefinition = typeof SiteSearchEngineServiceDefinition;
export const SiteSearchEngineServiceDefinition = {
  name: "SiteSearchEngineService",
  fullName: "google.cloud.discoveryengine.v1.SiteSearchEngineService",
  methods: {
    /**
     * Gets the
     * [SiteSearchEngine][google.cloud.discoveryengine.v1.SiteSearchEngine].
     */
    getSiteSearchEngine: {
      name: "GetSiteSearchEngine",
      requestType: GetSiteSearchEngineRequest,
      requestStream: false,
      responseType: SiteSearchEngine,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              146,
              1,
              90,
              79,
              18,
              77,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              47,
              115,
              105,
              116,
              101,
              83,
              101,
              97,
              114,
              99,
              104,
              69,
              110,
              103,
              105,
              110,
              101,
              125,
              18,
              63,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              47,
              115,
              105,
              116,
              101,
              83,
              101,
              97,
              114,
              99,
              104,
              69,
              110,
              103,
              105,
              110,
              101,
              125,
            ]),
          ],
        },
      },
    },
    /** Creates a [TargetSite][google.cloud.discoveryengine.v1.TargetSite]. */
    createTargetSite: {
      name: "CreateTargetSite",
      requestType: CreateTargetSiteRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              102,
              10,
              42,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              100,
              105,
              115,
              99,
              111,
              118,
              101,
              114,
              121,
              101,
              110,
              103,
              105,
              110,
              101,
              46,
              118,
              49,
              46,
              84,
              97,
              114,
              103,
              101,
              116,
              83,
              105,
              116,
              101,
              18,
              56,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              100,
              105,
              115,
              99,
              111,
              118,
              101,
              114,
              121,
              101,
              110,
              103,
              105,
              110,
              101,
              46,
              118,
              49,
              46,
              67,
              114,
              101,
              97,
              116,
              101,
              84,
              97,
              114,
              103,
              101,
              116,
              83,
              105,
              116,
              101,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([18, 112, 97, 114, 101, 110, 116, 44, 116, 97, 114, 103, 101, 116, 95, 115, 105, 116, 101]),
          ],
          578365826: [
            Buffer.from([
              200,
              1,
              58,
              11,
              116,
              97,
              114,
              103,
              101,
              116,
              95,
              115,
              105,
              116,
              101,
              90,
              106,
              58,
              11,
              116,
              97,
              114,
              103,
              101,
              116,
              95,
              115,
              105,
              116,
              101,
              34,
              91,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              47,
              115,
              105,
              116,
              101,
              83,
              101,
              97,
              114,
              99,
              104,
              69,
              110,
              103,
              105,
              110,
              101,
              125,
              47,
              116,
              97,
              114,
              103,
              101,
              116,
              83,
              105,
              116,
              101,
              115,
              34,
              77,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              47,
              115,
              105,
              116,
              101,
              83,
              101,
              97,
              114,
              99,
              104,
              69,
              110,
              103,
              105,
              110,
              101,
              125,
              47,
              116,
              97,
              114,
              103,
              101,
              116,
              83,
              105,
              116,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Creates [TargetSite][google.cloud.discoveryengine.v1.TargetSite] in a
     * batch.
     */
    batchCreateTargetSites: {
      name: "BatchCreateTargetSites",
      requestType: BatchCreateTargetSitesRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              127,
              10,
              62,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              100,
              105,
              115,
              99,
              111,
              118,
              101,
              114,
              121,
              101,
              110,
              103,
              105,
              110,
              101,
              46,
              118,
              49,
              46,
              66,
              97,
              116,
              99,
              104,
              67,
              114,
              101,
              97,
              116,
              101,
              84,
              97,
              114,
              103,
              101,
              116,
              83,
              105,
              116,
              101,
              115,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              18,
              61,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              100,
              105,
              115,
              99,
              111,
              118,
              101,
              114,
              121,
              101,
              110,
              103,
              105,
              110,
              101,
              46,
              118,
              49,
              46,
              66,
              97,
              116,
              99,
              104,
              67,
              114,
              101,
              97,
              116,
              101,
              84,
              97,
              114,
              103,
              101,
              116,
              83,
              105,
              116,
              101,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          578365826: [
            Buffer.from([
              204,
              1,
              58,
              1,
              42,
              90,
              108,
              58,
              1,
              42,
              34,
              103,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              47,
              115,
              105,
              116,
              101,
              83,
              101,
              97,
              114,
              99,
              104,
              69,
              110,
              103,
              105,
              110,
              101,
              125,
              47,
              116,
              97,
              114,
              103,
              101,
              116,
              83,
              105,
              116,
              101,
              115,
              58,
              98,
              97,
              116,
              99,
              104,
              67,
              114,
              101,
              97,
              116,
              101,
              34,
              89,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              47,
              115,
              105,
              116,
              101,
              83,
              101,
              97,
              114,
              99,
              104,
              69,
              110,
              103,
              105,
              110,
              101,
              125,
              47,
              116,
              97,
              114,
              103,
              101,
              116,
              83,
              105,
              116,
              101,
              115,
              58,
              98,
              97,
              116,
              99,
              104,
              67,
              114,
              101,
              97,
              116,
              101,
            ]),
          ],
        },
      },
    },
    /** Gets a [TargetSite][google.cloud.discoveryengine.v1.TargetSite]. */
    getTargetSite: {
      name: "GetTargetSite",
      requestType: GetTargetSiteRequest,
      requestStream: false,
      responseType: TargetSite,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              174,
              1,
              90,
              93,
              18,
              91,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              47,
              115,
              105,
              116,
              101,
              83,
              101,
              97,
              114,
              99,
              104,
              69,
              110,
              103,
              105,
              110,
              101,
              47,
              116,
              97,
              114,
              103,
              101,
              116,
              83,
              105,
              116,
              101,
              115,
              47,
              42,
              125,
              18,
              77,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              47,
              115,
              105,
              116,
              101,
              83,
              101,
              97,
              114,
              99,
              104,
              69,
              110,
              103,
              105,
              110,
              101,
              47,
              116,
              97,
              114,
              103,
              101,
              116,
              83,
              105,
              116,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Updates a [TargetSite][google.cloud.discoveryengine.v1.TargetSite]. */
    updateTargetSite: {
      name: "UpdateTargetSite",
      requestType: UpdateTargetSiteRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              102,
              10,
              42,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              100,
              105,
              115,
              99,
              111,
              118,
              101,
              114,
              121,
              101,
              110,
              103,
              105,
              110,
              101,
              46,
              118,
              49,
              46,
              84,
              97,
              114,
              103,
              101,
              116,
              83,
              105,
              116,
              101,
              18,
              56,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              100,
              105,
              115,
              99,
              111,
              118,
              101,
              114,
              121,
              101,
              110,
              103,
              105,
              110,
              101,
              46,
              118,
              49,
              46,
              85,
              112,
              100,
              97,
              116,
              101,
              84,
              97,
              114,
              103,
              101,
              116,
              83,
              105,
              116,
              101,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([11, 116, 97, 114, 103, 101, 116, 95, 115, 105, 116, 101])],
          578365826: [
            Buffer.from([
              224,
              1,
              58,
              11,
              116,
              97,
              114,
              103,
              101,
              116,
              95,
              115,
              105,
              116,
              101,
              90,
              118,
              58,
              11,
              116,
              97,
              114,
              103,
              101,
              116,
              95,
              115,
              105,
              116,
              101,
              50,
              103,
              47,
              118,
              49,
              47,
              123,
              116,
              97,
              114,
              103,
              101,
              116,
              95,
              115,
              105,
              116,
              101,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              47,
              115,
              105,
              116,
              101,
              83,
              101,
              97,
              114,
              99,
              104,
              69,
              110,
              103,
              105,
              110,
              101,
              47,
              116,
              97,
              114,
              103,
              101,
              116,
              83,
              105,
              116,
              101,
              115,
              47,
              42,
              125,
              50,
              89,
              47,
              118,
              49,
              47,
              123,
              116,
              97,
              114,
              103,
              101,
              116,
              95,
              115,
              105,
              116,
              101,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              47,
              115,
              105,
              116,
              101,
              83,
              101,
              97,
              114,
              99,
              104,
              69,
              110,
              103,
              105,
              110,
              101,
              47,
              116,
              97,
              114,
              103,
              101,
              116,
              83,
              105,
              116,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes a [TargetSite][google.cloud.discoveryengine.v1.TargetSite]. */
    deleteTargetSite: {
      name: "DeleteTargetSite",
      requestType: DeleteTargetSiteRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              81,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              56,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              100,
              105,
              115,
              99,
              111,
              118,
              101,
              114,
              121,
              101,
              110,
              103,
              105,
              110,
              101,
              46,
              118,
              49,
              46,
              68,
              101,
              108,
              101,
              116,
              101,
              84,
              97,
              114,
              103,
              101,
              116,
              83,
              105,
              116,
              101,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              174,
              1,
              90,
              93,
              42,
              91,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              47,
              115,
              105,
              116,
              101,
              83,
              101,
              97,
              114,
              99,
              104,
              69,
              110,
              103,
              105,
              110,
              101,
              47,
              116,
              97,
              114,
              103,
              101,
              116,
              83,
              105,
              116,
              101,
              115,
              47,
              42,
              125,
              42,
              77,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              47,
              115,
              105,
              116,
              101,
              83,
              101,
              97,
              114,
              99,
              104,
              69,
              110,
              103,
              105,
              110,
              101,
              47,
              116,
              97,
              114,
              103,
              101,
              116,
              83,
              105,
              116,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Gets a list of [TargetSite][google.cloud.discoveryengine.v1.TargetSite]s. */
    listTargetSites: {
      name: "ListTargetSites",
      requestType: ListTargetSitesRequest,
      requestStream: false,
      responseType: ListTargetSitesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              174,
              1,
              90,
              93,
              18,
              91,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              47,
              115,
              105,
              116,
              101,
              83,
              101,
              97,
              114,
              99,
              104,
              69,
              110,
              103,
              105,
              110,
              101,
              125,
              47,
              116,
              97,
              114,
              103,
              101,
              116,
              83,
              105,
              116,
              101,
              115,
              18,
              77,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              47,
              115,
              105,
              116,
              101,
              83,
              101,
              97,
              114,
              99,
              104,
              69,
              110,
              103,
              105,
              110,
              101,
              125,
              47,
              116,
              97,
              114,
              103,
              101,
              116,
              83,
              105,
              116,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Upgrade from basic site search to advanced site search. */
    enableAdvancedSiteSearch: {
      name: "EnableAdvancedSiteSearch",
      requestType: EnableAdvancedSiteSearchRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              132,
              1,
              10,
              64,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              100,
              105,
              115,
              99,
              111,
              118,
              101,
              114,
              121,
              101,
              110,
              103,
              105,
              110,
              101,
              46,
              118,
              49,
              46,
              69,
              110,
              97,
              98,
              108,
              101,
              65,
              100,
              118,
              97,
              110,
              99,
              101,
              100,
              83,
              105,
              116,
              101,
              83,
              101,
              97,
              114,
              99,
              104,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              18,
              64,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              100,
              105,
              115,
              99,
              111,
              118,
              101,
              114,
              121,
              101,
              110,
              103,
              105,
              110,
              101,
              46,
              118,
              49,
              46,
              69,
              110,
              97,
              98,
              108,
              101,
              65,
              100,
              118,
              97,
              110,
              99,
              101,
              100,
              83,
              105,
              116,
              101,
              83,
              101,
              97,
              114,
              99,
              104,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          578365826: [
            Buffer.from([
              230,
              1,
              58,
              1,
              42,
              90,
              121,
              58,
              1,
              42,
              34,
              116,
              47,
              118,
              49,
              47,
              123,
              115,
              105,
              116,
              101,
              95,
              115,
              101,
              97,
              114,
              99,
              104,
              95,
              101,
              110,
              103,
              105,
              110,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              47,
              115,
              105,
              116,
              101,
              83,
              101,
              97,
              114,
              99,
              104,
              69,
              110,
              103,
              105,
              110,
              101,
              125,
              58,
              101,
              110,
              97,
              98,
              108,
              101,
              65,
              100,
              118,
              97,
              110,
              99,
              101,
              100,
              83,
              105,
              116,
              101,
              83,
              101,
              97,
              114,
              99,
              104,
              34,
              102,
              47,
              118,
              49,
              47,
              123,
              115,
              105,
              116,
              101,
              95,
              115,
              101,
              97,
              114,
              99,
              104,
              95,
              101,
              110,
              103,
              105,
              110,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              47,
              115,
              105,
              116,
              101,
              83,
              101,
              97,
              114,
              99,
              104,
              69,
              110,
              103,
              105,
              110,
              101,
              125,
              58,
              101,
              110,
              97,
              98,
              108,
              101,
              65,
              100,
              118,
              97,
              110,
              99,
              101,
              100,
              83,
              105,
              116,
              101,
              83,
              101,
              97,
              114,
              99,
              104,
            ]),
          ],
        },
      },
    },
    /** Downgrade from advanced site search to basic site search. */
    disableAdvancedSiteSearch: {
      name: "DisableAdvancedSiteSearch",
      requestType: DisableAdvancedSiteSearchRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              134,
              1,
              10,
              65,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              100,
              105,
              115,
              99,
              111,
              118,
              101,
              114,
              121,
              101,
              110,
              103,
              105,
              110,
              101,
              46,
              118,
              49,
              46,
              68,
              105,
              115,
              97,
              98,
              108,
              101,
              65,
              100,
              118,
              97,
              110,
              99,
              101,
              100,
              83,
              105,
              116,
              101,
              83,
              101,
              97,
              114,
              99,
              104,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              18,
              65,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              100,
              105,
              115,
              99,
              111,
              118,
              101,
              114,
              121,
              101,
              110,
              103,
              105,
              110,
              101,
              46,
              118,
              49,
              46,
              68,
              105,
              115,
              97,
              98,
              108,
              101,
              65,
              100,
              118,
              97,
              110,
              99,
              101,
              100,
              83,
              105,
              116,
              101,
              83,
              101,
              97,
              114,
              99,
              104,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          578365826: [
            Buffer.from([
              232,
              1,
              58,
              1,
              42,
              90,
              122,
              58,
              1,
              42,
              34,
              117,
              47,
              118,
              49,
              47,
              123,
              115,
              105,
              116,
              101,
              95,
              115,
              101,
              97,
              114,
              99,
              104,
              95,
              101,
              110,
              103,
              105,
              110,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              47,
              115,
              105,
              116,
              101,
              83,
              101,
              97,
              114,
              99,
              104,
              69,
              110,
              103,
              105,
              110,
              101,
              125,
              58,
              100,
              105,
              115,
              97,
              98,
              108,
              101,
              65,
              100,
              118,
              97,
              110,
              99,
              101,
              100,
              83,
              105,
              116,
              101,
              83,
              101,
              97,
              114,
              99,
              104,
              34,
              103,
              47,
              118,
              49,
              47,
              123,
              115,
              105,
              116,
              101,
              95,
              115,
              101,
              97,
              114,
              99,
              104,
              95,
              101,
              110,
              103,
              105,
              110,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              47,
              115,
              105,
              116,
              101,
              83,
              101,
              97,
              114,
              99,
              104,
              69,
              110,
              103,
              105,
              110,
              101,
              125,
              58,
              100,
              105,
              115,
              97,
              98,
              108,
              101,
              65,
              100,
              118,
              97,
              110,
              99,
              101,
              100,
              83,
              105,
              116,
              101,
              83,
              101,
              97,
              114,
              99,
              104,
            ]),
          ],
        },
      },
    },
    /** Request on-demand recrawl for a list of URIs. */
    recrawlUris: {
      name: "RecrawlUris",
      requestType: RecrawlUrisRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              106,
              10,
              51,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              100,
              105,
              115,
              99,
              111,
              118,
              101,
              114,
              121,
              101,
              110,
              103,
              105,
              110,
              101,
              46,
              118,
              49,
              46,
              82,
              101,
              99,
              114,
              97,
              119,
              108,
              85,
              114,
              105,
              115,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              18,
              51,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              100,
              105,
              115,
              99,
              111,
              118,
              101,
              114,
              121,
              101,
              110,
              103,
              105,
              110,
              101,
              46,
              118,
              49,
              46,
              82,
              101,
              99,
              114,
              97,
              119,
              108,
              85,
              114,
              105,
              115,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          578365826: [
            Buffer.from([
              204,
              1,
              58,
              1,
              42,
              90,
              108,
              58,
              1,
              42,
              34,
              103,
              47,
              118,
              49,
              47,
              123,
              115,
              105,
              116,
              101,
              95,
              115,
              101,
              97,
              114,
              99,
              104,
              95,
              101,
              110,
              103,
              105,
              110,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              47,
              115,
              105,
              116,
              101,
              83,
              101,
              97,
              114,
              99,
              104,
              69,
              110,
              103,
              105,
              110,
              101,
              125,
              58,
              114,
              101,
              99,
              114,
              97,
              119,
              108,
              85,
              114,
              105,
              115,
              34,
              89,
              47,
              118,
              49,
              47,
              123,
              115,
              105,
              116,
              101,
              95,
              115,
              101,
              97,
              114,
              99,
              104,
              95,
              101,
              110,
              103,
              105,
              110,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              47,
              115,
              105,
              116,
              101,
              83,
              101,
              97,
              114,
              99,
              104,
              69,
              110,
              103,
              105,
              110,
              101,
              125,
              58,
              114,
              101,
              99,
              114,
              97,
              119,
              108,
              85,
              114,
              105,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Verify target sites' ownership and validity.
     * This API sends all the target sites under site search engine for
     * verification.
     */
    batchVerifyTargetSites: {
      name: "BatchVerifyTargetSites",
      requestType: BatchVerifyTargetSitesRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              128,
              1,
              10,
              62,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              100,
              105,
              115,
              99,
              111,
              118,
              101,
              114,
              121,
              101,
              110,
              103,
              105,
              110,
              101,
              46,
              118,
              49,
              46,
              66,
              97,
              116,
              99,
              104,
              86,
              101,
              114,
              105,
              102,
              121,
              84,
              97,
              114,
              103,
              101,
              116,
              83,
              105,
              116,
              101,
              115,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              18,
              62,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              100,
              105,
              115,
              99,
              111,
              118,
              101,
              114,
              121,
              101,
              110,
              103,
              105,
              110,
              101,
              46,
              118,
              49,
              46,
              66,
              97,
              116,
              99,
              104,
              86,
              101,
              114,
              105,
              102,
              121,
              84,
              97,
              114,
              103,
              101,
              116,
              83,
              105,
              116,
              101,
              115,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          578365826: [
            Buffer.from([
              107,
              58,
              1,
              42,
              34,
              102,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              47,
              115,
              105,
              116,
              101,
              83,
              101,
              97,
              114,
              99,
              104,
              69,
              110,
              103,
              105,
              110,
              101,
              125,
              58,
              98,
              97,
              116,
              99,
              104,
              86,
              101,
              114,
              105,
              102,
              121,
              84,
              97,
              114,
              103,
              101,
              116,
              83,
              105,
              116,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Returns list of target sites with its domain verification status.
     * This method can only be called under data store with BASIC_SITE_SEARCH
     * state at the moment.
     */
    fetchDomainVerificationStatus: {
      name: "FetchDomainVerificationStatus",
      requestType: FetchDomainVerificationStatusRequest,
      requestStream: false,
      responseType: FetchDomainVerificationStatusResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              123,
              18,
              121,
              47,
              118,
              49,
              47,
              123,
              115,
              105,
              116,
              101,
              95,
              115,
              101,
              97,
              114,
              99,
              104,
              95,
              101,
              110,
              103,
              105,
              110,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              47,
              115,
              105,
              116,
              101,
              83,
              101,
              97,
              114,
              99,
              104,
              69,
              110,
              103,
              105,
              110,
              101,
              125,
              58,
              102,
              101,
              116,
              99,
              104,
              68,
              111,
              109,
              97,
              105,
              110,
              86,
              101,
              114,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              83,
              116,
              97,
              116,
              117,
              115,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface SiteSearchEngineServiceImplementation<CallContextExt = {}> {
  /**
   * Gets the
   * [SiteSearchEngine][google.cloud.discoveryengine.v1.SiteSearchEngine].
   */
  getSiteSearchEngine(
    request: GetSiteSearchEngineRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SiteSearchEngine>>;
  /** Creates a [TargetSite][google.cloud.discoveryengine.v1.TargetSite]. */
  createTargetSite(
    request: CreateTargetSiteRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Creates [TargetSite][google.cloud.discoveryengine.v1.TargetSite] in a
   * batch.
   */
  batchCreateTargetSites(
    request: BatchCreateTargetSitesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Gets a [TargetSite][google.cloud.discoveryengine.v1.TargetSite]. */
  getTargetSite(request: GetTargetSiteRequest, context: CallContext & CallContextExt): Promise<DeepPartial<TargetSite>>;
  /** Updates a [TargetSite][google.cloud.discoveryengine.v1.TargetSite]. */
  updateTargetSite(
    request: UpdateTargetSiteRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Deletes a [TargetSite][google.cloud.discoveryengine.v1.TargetSite]. */
  deleteTargetSite(
    request: DeleteTargetSiteRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Gets a list of [TargetSite][google.cloud.discoveryengine.v1.TargetSite]s. */
  listTargetSites(
    request: ListTargetSitesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListTargetSitesResponse>>;
  /** Upgrade from basic site search to advanced site search. */
  enableAdvancedSiteSearch(
    request: EnableAdvancedSiteSearchRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Downgrade from advanced site search to basic site search. */
  disableAdvancedSiteSearch(
    request: DisableAdvancedSiteSearchRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Request on-demand recrawl for a list of URIs. */
  recrawlUris(request: RecrawlUrisRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /**
   * Verify target sites' ownership and validity.
   * This API sends all the target sites under site search engine for
   * verification.
   */
  batchVerifyTargetSites(
    request: BatchVerifyTargetSitesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Returns list of target sites with its domain verification status.
   * This method can only be called under data store with BASIC_SITE_SEARCH
   * state at the moment.
   */
  fetchDomainVerificationStatus(
    request: FetchDomainVerificationStatusRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<FetchDomainVerificationStatusResponse>>;
}

export interface SiteSearchEngineServiceClient<CallOptionsExt = {}> {
  /**
   * Gets the
   * [SiteSearchEngine][google.cloud.discoveryengine.v1.SiteSearchEngine].
   */
  getSiteSearchEngine(
    request: DeepPartial<GetSiteSearchEngineRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SiteSearchEngine>;
  /** Creates a [TargetSite][google.cloud.discoveryengine.v1.TargetSite]. */
  createTargetSite(
    request: DeepPartial<CreateTargetSiteRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Creates [TargetSite][google.cloud.discoveryengine.v1.TargetSite] in a
   * batch.
   */
  batchCreateTargetSites(
    request: DeepPartial<BatchCreateTargetSitesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Gets a [TargetSite][google.cloud.discoveryengine.v1.TargetSite]. */
  getTargetSite(
    request: DeepPartial<GetTargetSiteRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<TargetSite>;
  /** Updates a [TargetSite][google.cloud.discoveryengine.v1.TargetSite]. */
  updateTargetSite(
    request: DeepPartial<UpdateTargetSiteRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Deletes a [TargetSite][google.cloud.discoveryengine.v1.TargetSite]. */
  deleteTargetSite(
    request: DeepPartial<DeleteTargetSiteRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Gets a list of [TargetSite][google.cloud.discoveryengine.v1.TargetSite]s. */
  listTargetSites(
    request: DeepPartial<ListTargetSitesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListTargetSitesResponse>;
  /** Upgrade from basic site search to advanced site search. */
  enableAdvancedSiteSearch(
    request: DeepPartial<EnableAdvancedSiteSearchRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Downgrade from advanced site search to basic site search. */
  disableAdvancedSiteSearch(
    request: DeepPartial<DisableAdvancedSiteSearchRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Request on-demand recrawl for a list of URIs. */
  recrawlUris(request: DeepPartial<RecrawlUrisRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /**
   * Verify target sites' ownership and validity.
   * This API sends all the target sites under site search engine for
   * verification.
   */
  batchVerifyTargetSites(
    request: DeepPartial<BatchVerifyTargetSitesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Returns list of target sites with its domain verification status.
   * This method can only be called under data store with BASIC_SITE_SEARCH
   * state at the moment.
   */
  fetchDomainVerificationStatus(
    request: DeepPartial<FetchDomainVerificationStatusRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<FetchDomainVerificationStatusResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
