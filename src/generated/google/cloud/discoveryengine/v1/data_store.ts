// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/discoveryengine/v1/data_store.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../protobuf/timestamp.js";
import {
  IndustryVertical,
  industryVerticalFromJSON,
  industryVerticalToJSON,
  SolutionType,
  solutionTypeFromJSON,
  solutionTypeToJSON,
} from "./common.js";
import { DocumentProcessingConfig } from "./document_processing_config.js";
import { Schema } from "./schema.js";

export const protobufPackage = "google.cloud.discoveryengine.v1";

/** DataStore captures global settings and configs at the DataStore level. */
export interface DataStore {
  /**
   * Immutable. The full resource name of the data store.
   * Format:
   * `projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}`.
   *
   * This field must be a UTF-8 encoded string with a length limit of 1024
   * characters.
   */
  name: string;
  /**
   * Required. The data store display name.
   *
   * This field must be a UTF-8 encoded string with a length limit of 128
   * characters. Otherwise, an INVALID_ARGUMENT error is returned.
   */
  displayName: string;
  /** Immutable. The industry vertical that the data store registers. */
  industryVertical: IndustryVertical;
  /**
   * The solutions that the data store enrolls. Available solutions for each
   * [industry_vertical][google.cloud.discoveryengine.v1.DataStore.industry_vertical]:
   *
   * * `MEDIA`: `SOLUTION_TYPE_RECOMMENDATION` and `SOLUTION_TYPE_SEARCH`.
   * * `SITE_SEARCH`: `SOLUTION_TYPE_SEARCH` is automatically enrolled. Other
   *   solutions cannot be enrolled.
   */
  solutionTypes: SolutionType[];
  /**
   * Output only. The id of the default
   * [Schema][google.cloud.discoveryengine.v1.Schema] asscociated to this data
   * store.
   */
  defaultSchemaId: string;
  /**
   * Immutable. The content config of the data store. If this field is unset,
   * the server behavior defaults to
   * [ContentConfig.NO_CONTENT][google.cloud.discoveryengine.v1.DataStore.ContentConfig.NO_CONTENT].
   */
  contentConfig: DataStore_ContentConfig;
  /**
   * Output only. Timestamp the
   * [DataStore][google.cloud.discoveryengine.v1.DataStore] was created at.
   */
  createTime:
    | Date
    | undefined;
  /** Configuration for Document understanding and enrichment. */
  documentProcessingConfig:
    | DocumentProcessingConfig
    | undefined;
  /**
   * The start schema to use for this
   * [DataStore][google.cloud.discoveryengine.v1.DataStore] when provisioning
   * it. If unset, a default vertical specialized schema will be used.
   *
   * This field is only used by [CreateDataStore][] API, and will be ignored if
   * used in other APIs. This field will be omitted from all API responses
   * including [CreateDataStore][] API. To retrieve a schema of a
   * [DataStore][google.cloud.discoveryengine.v1.DataStore], use
   * [SchemaService.GetSchema][google.cloud.discoveryengine.v1.SchemaService.GetSchema]
   * API instead.
   *
   * The provided schema will be validated against certain rules on schema.
   * Learn more from [this
   * doc](https://cloud.google.com/generative-ai-app-builder/docs/provide-schema).
   */
  startingSchema: Schema | undefined;
}

/** Content config of the data store. */
export enum DataStore_ContentConfig {
  /** CONTENT_CONFIG_UNSPECIFIED - Default value. */
  CONTENT_CONFIG_UNSPECIFIED = 0,
  /**
   * NO_CONTENT - Only contains documents without any
   * [Document.content][google.cloud.discoveryengine.v1.Document.content].
   */
  NO_CONTENT = 1,
  /**
   * CONTENT_REQUIRED - Only contains documents with
   * [Document.content][google.cloud.discoveryengine.v1.Document.content].
   */
  CONTENT_REQUIRED = 2,
  /** PUBLIC_WEBSITE - The data store is used for public website search. */
  PUBLIC_WEBSITE = 3,
  UNRECOGNIZED = -1,
}

export function dataStore_ContentConfigFromJSON(object: any): DataStore_ContentConfig {
  switch (object) {
    case 0:
    case "CONTENT_CONFIG_UNSPECIFIED":
      return DataStore_ContentConfig.CONTENT_CONFIG_UNSPECIFIED;
    case 1:
    case "NO_CONTENT":
      return DataStore_ContentConfig.NO_CONTENT;
    case 2:
    case "CONTENT_REQUIRED":
      return DataStore_ContentConfig.CONTENT_REQUIRED;
    case 3:
    case "PUBLIC_WEBSITE":
      return DataStore_ContentConfig.PUBLIC_WEBSITE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return DataStore_ContentConfig.UNRECOGNIZED;
  }
}

export function dataStore_ContentConfigToJSON(object: DataStore_ContentConfig): string {
  switch (object) {
    case DataStore_ContentConfig.CONTENT_CONFIG_UNSPECIFIED:
      return "CONTENT_CONFIG_UNSPECIFIED";
    case DataStore_ContentConfig.NO_CONTENT:
      return "NO_CONTENT";
    case DataStore_ContentConfig.CONTENT_REQUIRED:
      return "CONTENT_REQUIRED";
    case DataStore_ContentConfig.PUBLIC_WEBSITE:
      return "PUBLIC_WEBSITE";
    case DataStore_ContentConfig.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseDataStore(): DataStore {
  return {
    name: "",
    displayName: "",
    industryVertical: 0,
    solutionTypes: [],
    defaultSchemaId: "",
    contentConfig: 0,
    createTime: undefined,
    documentProcessingConfig: undefined,
    startingSchema: undefined,
  };
}

export const DataStore: MessageFns<DataStore> = {
  encode(message: DataStore, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.displayName !== "") {
      writer.uint32(18).string(message.displayName);
    }
    if (message.industryVertical !== 0) {
      writer.uint32(24).int32(message.industryVertical);
    }
    writer.uint32(42).fork();
    for (const v of message.solutionTypes) {
      writer.int32(v);
    }
    writer.join();
    if (message.defaultSchemaId !== "") {
      writer.uint32(58).string(message.defaultSchemaId);
    }
    if (message.contentConfig !== 0) {
      writer.uint32(48).int32(message.contentConfig);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(34).fork()).join();
    }
    if (message.documentProcessingConfig !== undefined) {
      DocumentProcessingConfig.encode(message.documentProcessingConfig, writer.uint32(218).fork()).join();
    }
    if (message.startingSchema !== undefined) {
      Schema.encode(message.startingSchema, writer.uint32(226).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DataStore {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDataStore();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.industryVertical = reader.int32() as any;
          continue;
        case 5:
          if (tag === 40) {
            message.solutionTypes.push(reader.int32() as any);

            continue;
          }

          if (tag === 42) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.solutionTypes.push(reader.int32() as any);
            }

            continue;
          }

          break;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.defaultSchemaId = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.contentConfig = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 27:
          if (tag !== 218) {
            break;
          }

          message.documentProcessingConfig = DocumentProcessingConfig.decode(reader, reader.uint32());
          continue;
        case 28:
          if (tag !== 226) {
            break;
          }

          message.startingSchema = Schema.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DataStore {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      industryVertical: isSet(object.industryVertical) ? industryVerticalFromJSON(object.industryVertical) : 0,
      solutionTypes: globalThis.Array.isArray(object?.solutionTypes)
        ? object.solutionTypes.map((e: any) => solutionTypeFromJSON(e))
        : [],
      defaultSchemaId: isSet(object.defaultSchemaId) ? globalThis.String(object.defaultSchemaId) : "",
      contentConfig: isSet(object.contentConfig) ? dataStore_ContentConfigFromJSON(object.contentConfig) : 0,
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      documentProcessingConfig: isSet(object.documentProcessingConfig)
        ? DocumentProcessingConfig.fromJSON(object.documentProcessingConfig)
        : undefined,
      startingSchema: isSet(object.startingSchema) ? Schema.fromJSON(object.startingSchema) : undefined,
    };
  },

  toJSON(message: DataStore): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.industryVertical !== 0) {
      obj.industryVertical = industryVerticalToJSON(message.industryVertical);
    }
    if (message.solutionTypes?.length) {
      obj.solutionTypes = message.solutionTypes.map((e) => solutionTypeToJSON(e));
    }
    if (message.defaultSchemaId !== "") {
      obj.defaultSchemaId = message.defaultSchemaId;
    }
    if (message.contentConfig !== 0) {
      obj.contentConfig = dataStore_ContentConfigToJSON(message.contentConfig);
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.documentProcessingConfig !== undefined) {
      obj.documentProcessingConfig = DocumentProcessingConfig.toJSON(message.documentProcessingConfig);
    }
    if (message.startingSchema !== undefined) {
      obj.startingSchema = Schema.toJSON(message.startingSchema);
    }
    return obj;
  },

  create(base?: DeepPartial<DataStore>): DataStore {
    return DataStore.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DataStore>): DataStore {
    const message = createBaseDataStore();
    message.name = object.name ?? "";
    message.displayName = object.displayName ?? "";
    message.industryVertical = object.industryVertical ?? 0;
    message.solutionTypes = object.solutionTypes?.map((e) => e) || [];
    message.defaultSchemaId = object.defaultSchemaId ?? "";
    message.contentConfig = object.contentConfig ?? 0;
    message.createTime = object.createTime ?? undefined;
    message.documentProcessingConfig =
      (object.documentProcessingConfig !== undefined && object.documentProcessingConfig !== null)
        ? DocumentProcessingConfig.fromPartial(object.documentProcessingConfig)
        : undefined;
    message.startingSchema = (object.startingSchema !== undefined && object.startingSchema !== null)
      ? Schema.fromPartial(object.startingSchema)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
