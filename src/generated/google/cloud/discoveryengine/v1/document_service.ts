// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/discoveryengine/v1/document_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../longrunning/operations.js";
import { Empty } from "../../../protobuf/empty.js";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { Document } from "./document.js";
import { ImportDocumentsRequest } from "./import_config.js";
import { PurgeDocumentsRequest } from "./purge_config.js";

export const protobufPackage = "google.cloud.discoveryengine.v1";

/**
 * Request message for
 * [DocumentService.GetDocument][google.cloud.discoveryengine.v1.DocumentService.GetDocument]
 * method.
 */
export interface GetDocumentRequest {
  /**
   * Required. Full resource name of
   * [Document][google.cloud.discoveryengine.v1.Document], such as
   * `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/branches/{branch}/documents/{document}`.
   *
   * If the caller does not have permission to access the
   * [Document][google.cloud.discoveryengine.v1.Document], regardless of whether
   * or not it exists, a `PERMISSION_DENIED` error is returned.
   *
   * If the requested [Document][google.cloud.discoveryengine.v1.Document] does
   * not exist, a `NOT_FOUND` error is returned.
   */
  name: string;
}

/**
 * Request message for
 * [DocumentService.ListDocuments][google.cloud.discoveryengine.v1.DocumentService.ListDocuments]
 * method.
 */
export interface ListDocumentsRequest {
  /**
   * Required. The parent branch resource name, such as
   * `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/branches/{branch}`.
   * Use `default_branch` as the branch ID, to list documents under the default
   * branch.
   *
   * If the caller does not have permission to list
   * [Document][google.cloud.discoveryengine.v1.Document]s under this branch,
   * regardless of whether or not this branch exists, a `PERMISSION_DENIED`
   * error is returned.
   */
  parent: string;
  /**
   * Maximum number of [Document][google.cloud.discoveryengine.v1.Document]s to
   * return. If unspecified, defaults to 100. The maximum allowed value is 1000.
   * Values above 1000 are set to 1000.
   *
   * If this field is negative, an `INVALID_ARGUMENT` error is returned.
   */
  pageSize: number;
  /**
   * A page token
   * [ListDocumentsResponse.next_page_token][google.cloud.discoveryengine.v1.ListDocumentsResponse.next_page_token],
   * received from a previous
   * [DocumentService.ListDocuments][google.cloud.discoveryengine.v1.DocumentService.ListDocuments]
   * call. Provide this to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to
   * [DocumentService.ListDocuments][google.cloud.discoveryengine.v1.DocumentService.ListDocuments]
   * must match the call that provided the page token. Otherwise, an
   * `INVALID_ARGUMENT` error is returned.
   */
  pageToken: string;
}

/**
 * Response message for
 * [DocumentService.ListDocuments][google.cloud.discoveryengine.v1.DocumentService.ListDocuments]
 * method.
 */
export interface ListDocumentsResponse {
  /** The [Document][google.cloud.discoveryengine.v1.Document]s. */
  documents: Document[];
  /**
   * A token that can be sent as
   * [ListDocumentsRequest.page_token][google.cloud.discoveryengine.v1.ListDocumentsRequest.page_token]
   * to retrieve the next page. If this field is omitted, there are no
   * subsequent pages.
   */
  nextPageToken: string;
}

/**
 * Request message for
 * [DocumentService.CreateDocument][google.cloud.discoveryengine.v1.DocumentService.CreateDocument]
 * method.
 */
export interface CreateDocumentRequest {
  /**
   * Required. The parent resource name, such as
   * `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/branches/{branch}`.
   */
  parent: string;
  /**
   * Required. The [Document][google.cloud.discoveryengine.v1.Document] to
   * create.
   */
  document:
    | Document
    | undefined;
  /**
   * Required. The ID to use for the
   * [Document][google.cloud.discoveryengine.v1.Document], which becomes the
   * final component of the
   * [Document.name][google.cloud.discoveryengine.v1.Document.name].
   *
   * If the caller does not have permission to create the
   * [Document][google.cloud.discoveryengine.v1.Document], regardless of whether
   * or not it exists, a `PERMISSION_DENIED` error is returned.
   *
   * This field must be unique among all
   * [Document][google.cloud.discoveryengine.v1.Document]s with the same
   * [parent][google.cloud.discoveryengine.v1.CreateDocumentRequest.parent].
   * Otherwise, an `ALREADY_EXISTS` error is returned.
   *
   * This field must conform to [RFC-1034](https://tools.ietf.org/html/rfc1034)
   * standard with a length limit of 63 characters. Otherwise, an
   * `INVALID_ARGUMENT` error is returned.
   */
  documentId: string;
}

/**
 * Request message for
 * [DocumentService.UpdateDocument][google.cloud.discoveryengine.v1.DocumentService.UpdateDocument]
 * method.
 */
export interface UpdateDocumentRequest {
  /**
   * Required. The document to update/create.
   *
   * If the caller does not have permission to update the
   * [Document][google.cloud.discoveryengine.v1.Document], regardless of whether
   * or not it exists, a `PERMISSION_DENIED` error is returned.
   *
   * If the [Document][google.cloud.discoveryengine.v1.Document] to update does
   * not exist and
   * [allow_missing][google.cloud.discoveryengine.v1.UpdateDocumentRequest.allow_missing]
   * is not set, a `NOT_FOUND` error is returned.
   */
  document:
    | Document
    | undefined;
  /**
   * If set to `true` and the
   * [Document][google.cloud.discoveryengine.v1.Document] is not found, a new
   * [Document][google.cloud.discoveryengine.v1.Document] is be created.
   */
  allowMissing: boolean;
  /**
   * Indicates which fields in the provided imported 'document' to update. If
   * not set, by default updates all fields.
   */
  updateMask: string[] | undefined;
}

/**
 * Request message for
 * [DocumentService.DeleteDocument][google.cloud.discoveryengine.v1.DocumentService.DeleteDocument]
 * method.
 */
export interface DeleteDocumentRequest {
  /**
   * Required. Full resource name of
   * [Document][google.cloud.discoveryengine.v1.Document], such as
   * `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/branches/{branch}/documents/{document}`.
   *
   * If the caller does not have permission to delete the
   * [Document][google.cloud.discoveryengine.v1.Document], regardless of whether
   * or not it exists, a `PERMISSION_DENIED` error is returned.
   *
   * If the [Document][google.cloud.discoveryengine.v1.Document] to delete does
   * not exist, a `NOT_FOUND` error is returned.
   */
  name: string;
}

/**
 * Request message for
 * [DocumentService.BatchGetDocumentsMetadata][google.cloud.discoveryengine.v1.DocumentService.BatchGetDocumentsMetadata]
 * method.
 */
export interface BatchGetDocumentsMetadataRequest {
  /**
   * Required. The parent branch resource name, such as
   * `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/branches/{branch}`.
   */
  parent: string;
  /**
   * Required. Matcher for the
   * [Document][google.cloud.discoveryengine.v1.Document]s.
   */
  matcher: BatchGetDocumentsMetadataRequest_Matcher | undefined;
}

/**
 * Matcher for the [Document][google.cloud.discoveryengine.v1.Document]s by
 * exact uris.
 */
export interface BatchGetDocumentsMetadataRequest_UrisMatcher {
  /** The exact URIs to match by. */
  uris: string[];
}

/**
 * Matcher for the [Document][google.cloud.discoveryengine.v1.Document]s.
 * Currently supports matching by exact URIs.
 */
export interface BatchGetDocumentsMetadataRequest_Matcher {
  /** Matcher by exact URIs. */
  urisMatcher?: BatchGetDocumentsMetadataRequest_UrisMatcher | undefined;
}

/**
 * Response message for
 * [DocumentService.BatchGetDocumentsMetadata][google.cloud.discoveryengine.v1.DocumentService.BatchGetDocumentsMetadata]
 * method.
 */
export interface BatchGetDocumentsMetadataResponse {
  /** The metadata of the [Document][google.cloud.discoveryengine.v1.Document]s. */
  documentsMetadata: BatchGetDocumentsMetadataResponse_DocumentMetadata[];
}

/** The state of the [Document][google.cloud.discoveryengine.v1.Document]. */
export enum BatchGetDocumentsMetadataResponse_State {
  /** STATE_UNSPECIFIED - Should never be set. */
  STATE_UNSPECIFIED = 0,
  /** INDEXED - The [Document][google.cloud.discoveryengine.v1.Document] is indexed. */
  INDEXED = 1,
  /**
   * NOT_IN_TARGET_SITE - The [Document][google.cloud.discoveryengine.v1.Document] is not indexed
   * because its URI is not in the
   * [TargetSite][google.cloud.discoveryengine.v1.TargetSite].
   */
  NOT_IN_TARGET_SITE = 2,
  /** NOT_IN_INDEX - The [Document][google.cloud.discoveryengine.v1.Document] is not indexed. */
  NOT_IN_INDEX = 3,
  UNRECOGNIZED = -1,
}

export function batchGetDocumentsMetadataResponse_StateFromJSON(object: any): BatchGetDocumentsMetadataResponse_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return BatchGetDocumentsMetadataResponse_State.STATE_UNSPECIFIED;
    case 1:
    case "INDEXED":
      return BatchGetDocumentsMetadataResponse_State.INDEXED;
    case 2:
    case "NOT_IN_TARGET_SITE":
      return BatchGetDocumentsMetadataResponse_State.NOT_IN_TARGET_SITE;
    case 3:
    case "NOT_IN_INDEX":
      return BatchGetDocumentsMetadataResponse_State.NOT_IN_INDEX;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BatchGetDocumentsMetadataResponse_State.UNRECOGNIZED;
  }
}

export function batchGetDocumentsMetadataResponse_StateToJSON(object: BatchGetDocumentsMetadataResponse_State): string {
  switch (object) {
    case BatchGetDocumentsMetadataResponse_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case BatchGetDocumentsMetadataResponse_State.INDEXED:
      return "INDEXED";
    case BatchGetDocumentsMetadataResponse_State.NOT_IN_TARGET_SITE:
      return "NOT_IN_TARGET_SITE";
    case BatchGetDocumentsMetadataResponse_State.NOT_IN_INDEX:
      return "NOT_IN_INDEX";
    case BatchGetDocumentsMetadataResponse_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** The metadata of a [Document][google.cloud.discoveryengine.v1.Document]. */
export interface BatchGetDocumentsMetadataResponse_DocumentMetadata {
  /**
   * The value of the matcher that was used to match the
   * [Document][google.cloud.discoveryengine.v1.Document].
   */
  matcherValue:
    | BatchGetDocumentsMetadataResponse_DocumentMetadata_MatcherValue
    | undefined;
  /** The state of the document. */
  state: BatchGetDocumentsMetadataResponse_State;
  /**
   * The timestamp of the last time the
   * [Document][google.cloud.discoveryengine.v1.Document] was last indexed.
   */
  lastRefreshedTime:
    | Date
    | undefined;
  /**
   * The data ingestion source of the
   * [Document][google.cloud.discoveryengine.v1.Document].
   *
   * Allowed values are:
   *
   * * `batch`: Data ingested via Batch API, e.g., ImportDocuments.
   * * `streaming` Data ingested via Streaming API, e.g., FHIR streaming.
   */
  dataIngestionSource: string;
}

/**
 * The value of the matcher that was used to match the
 * [Document][google.cloud.discoveryengine.v1.Document].
 */
export interface BatchGetDocumentsMetadataResponse_DocumentMetadata_MatcherValue {
  /**
   * If match by URI, the URI of the
   * [Document][google.cloud.discoveryengine.v1.Document].
   */
  uri?: string | undefined;
}

function createBaseGetDocumentRequest(): GetDocumentRequest {
  return { name: "" };
}

export const GetDocumentRequest: MessageFns<GetDocumentRequest> = {
  encode(message: GetDocumentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetDocumentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDocumentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDocumentRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetDocumentRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetDocumentRequest>): GetDocumentRequest {
    return GetDocumentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetDocumentRequest>): GetDocumentRequest {
    const message = createBaseGetDocumentRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListDocumentsRequest(): ListDocumentsRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListDocumentsRequest: MessageFns<ListDocumentsRequest> = {
  encode(message: ListDocumentsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListDocumentsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListDocumentsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListDocumentsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListDocumentsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListDocumentsRequest>): ListDocumentsRequest {
    return ListDocumentsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListDocumentsRequest>): ListDocumentsRequest {
    const message = createBaseListDocumentsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListDocumentsResponse(): ListDocumentsResponse {
  return { documents: [], nextPageToken: "" };
}

export const ListDocumentsResponse: MessageFns<ListDocumentsResponse> = {
  encode(message: ListDocumentsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.documents) {
      Document.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListDocumentsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListDocumentsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.documents.push(Document.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListDocumentsResponse {
    return {
      documents: globalThis.Array.isArray(object?.documents)
        ? object.documents.map((e: any) => Document.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListDocumentsResponse): unknown {
    const obj: any = {};
    if (message.documents?.length) {
      obj.documents = message.documents.map((e) => Document.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListDocumentsResponse>): ListDocumentsResponse {
    return ListDocumentsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListDocumentsResponse>): ListDocumentsResponse {
    const message = createBaseListDocumentsResponse();
    message.documents = object.documents?.map((e) => Document.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseCreateDocumentRequest(): CreateDocumentRequest {
  return { parent: "", document: undefined, documentId: "" };
}

export const CreateDocumentRequest: MessageFns<CreateDocumentRequest> = {
  encode(message: CreateDocumentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.document !== undefined) {
      Document.encode(message.document, writer.uint32(18).fork()).join();
    }
    if (message.documentId !== "") {
      writer.uint32(26).string(message.documentId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateDocumentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateDocumentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.document = Document.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.documentId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateDocumentRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      document: isSet(object.document) ? Document.fromJSON(object.document) : undefined,
      documentId: isSet(object.documentId) ? globalThis.String(object.documentId) : "",
    };
  },

  toJSON(message: CreateDocumentRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.document !== undefined) {
      obj.document = Document.toJSON(message.document);
    }
    if (message.documentId !== "") {
      obj.documentId = message.documentId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateDocumentRequest>): CreateDocumentRequest {
    return CreateDocumentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateDocumentRequest>): CreateDocumentRequest {
    const message = createBaseCreateDocumentRequest();
    message.parent = object.parent ?? "";
    message.document = (object.document !== undefined && object.document !== null)
      ? Document.fromPartial(object.document)
      : undefined;
    message.documentId = object.documentId ?? "";
    return message;
  },
};

function createBaseUpdateDocumentRequest(): UpdateDocumentRequest {
  return { document: undefined, allowMissing: false, updateMask: undefined };
}

export const UpdateDocumentRequest: MessageFns<UpdateDocumentRequest> = {
  encode(message: UpdateDocumentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.document !== undefined) {
      Document.encode(message.document, writer.uint32(10).fork()).join();
    }
    if (message.allowMissing !== false) {
      writer.uint32(16).bool(message.allowMissing);
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateDocumentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateDocumentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.document = Document.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.allowMissing = reader.bool();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateDocumentRequest {
    return {
      document: isSet(object.document) ? Document.fromJSON(object.document) : undefined,
      allowMissing: isSet(object.allowMissing) ? globalThis.Boolean(object.allowMissing) : false,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateDocumentRequest): unknown {
    const obj: any = {};
    if (message.document !== undefined) {
      obj.document = Document.toJSON(message.document);
    }
    if (message.allowMissing !== false) {
      obj.allowMissing = message.allowMissing;
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateDocumentRequest>): UpdateDocumentRequest {
    return UpdateDocumentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateDocumentRequest>): UpdateDocumentRequest {
    const message = createBaseUpdateDocumentRequest();
    message.document = (object.document !== undefined && object.document !== null)
      ? Document.fromPartial(object.document)
      : undefined;
    message.allowMissing = object.allowMissing ?? false;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseDeleteDocumentRequest(): DeleteDocumentRequest {
  return { name: "" };
}

export const DeleteDocumentRequest: MessageFns<DeleteDocumentRequest> = {
  encode(message: DeleteDocumentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteDocumentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteDocumentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteDocumentRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteDocumentRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteDocumentRequest>): DeleteDocumentRequest {
    return DeleteDocumentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteDocumentRequest>): DeleteDocumentRequest {
    const message = createBaseDeleteDocumentRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseBatchGetDocumentsMetadataRequest(): BatchGetDocumentsMetadataRequest {
  return { parent: "", matcher: undefined };
}

export const BatchGetDocumentsMetadataRequest: MessageFns<BatchGetDocumentsMetadataRequest> = {
  encode(message: BatchGetDocumentsMetadataRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.matcher !== undefined) {
      BatchGetDocumentsMetadataRequest_Matcher.encode(message.matcher, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BatchGetDocumentsMetadataRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBatchGetDocumentsMetadataRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.matcher = BatchGetDocumentsMetadataRequest_Matcher.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BatchGetDocumentsMetadataRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      matcher: isSet(object.matcher) ? BatchGetDocumentsMetadataRequest_Matcher.fromJSON(object.matcher) : undefined,
    };
  },

  toJSON(message: BatchGetDocumentsMetadataRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.matcher !== undefined) {
      obj.matcher = BatchGetDocumentsMetadataRequest_Matcher.toJSON(message.matcher);
    }
    return obj;
  },

  create(base?: DeepPartial<BatchGetDocumentsMetadataRequest>): BatchGetDocumentsMetadataRequest {
    return BatchGetDocumentsMetadataRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BatchGetDocumentsMetadataRequest>): BatchGetDocumentsMetadataRequest {
    const message = createBaseBatchGetDocumentsMetadataRequest();
    message.parent = object.parent ?? "";
    message.matcher = (object.matcher !== undefined && object.matcher !== null)
      ? BatchGetDocumentsMetadataRequest_Matcher.fromPartial(object.matcher)
      : undefined;
    return message;
  },
};

function createBaseBatchGetDocumentsMetadataRequest_UrisMatcher(): BatchGetDocumentsMetadataRequest_UrisMatcher {
  return { uris: [] };
}

export const BatchGetDocumentsMetadataRequest_UrisMatcher: MessageFns<BatchGetDocumentsMetadataRequest_UrisMatcher> = {
  encode(
    message: BatchGetDocumentsMetadataRequest_UrisMatcher,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    for (const v of message.uris) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BatchGetDocumentsMetadataRequest_UrisMatcher {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBatchGetDocumentsMetadataRequest_UrisMatcher();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.uris.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BatchGetDocumentsMetadataRequest_UrisMatcher {
    return { uris: globalThis.Array.isArray(object?.uris) ? object.uris.map((e: any) => globalThis.String(e)) : [] };
  },

  toJSON(message: BatchGetDocumentsMetadataRequest_UrisMatcher): unknown {
    const obj: any = {};
    if (message.uris?.length) {
      obj.uris = message.uris;
    }
    return obj;
  },

  create(
    base?: DeepPartial<BatchGetDocumentsMetadataRequest_UrisMatcher>,
  ): BatchGetDocumentsMetadataRequest_UrisMatcher {
    return BatchGetDocumentsMetadataRequest_UrisMatcher.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<BatchGetDocumentsMetadataRequest_UrisMatcher>,
  ): BatchGetDocumentsMetadataRequest_UrisMatcher {
    const message = createBaseBatchGetDocumentsMetadataRequest_UrisMatcher();
    message.uris = object.uris?.map((e) => e) || [];
    return message;
  },
};

function createBaseBatchGetDocumentsMetadataRequest_Matcher(): BatchGetDocumentsMetadataRequest_Matcher {
  return { urisMatcher: undefined };
}

export const BatchGetDocumentsMetadataRequest_Matcher: MessageFns<BatchGetDocumentsMetadataRequest_Matcher> = {
  encode(message: BatchGetDocumentsMetadataRequest_Matcher, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.urisMatcher !== undefined) {
      BatchGetDocumentsMetadataRequest_UrisMatcher.encode(message.urisMatcher, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BatchGetDocumentsMetadataRequest_Matcher {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBatchGetDocumentsMetadataRequest_Matcher();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.urisMatcher = BatchGetDocumentsMetadataRequest_UrisMatcher.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BatchGetDocumentsMetadataRequest_Matcher {
    return {
      urisMatcher: isSet(object.urisMatcher)
        ? BatchGetDocumentsMetadataRequest_UrisMatcher.fromJSON(object.urisMatcher)
        : undefined,
    };
  },

  toJSON(message: BatchGetDocumentsMetadataRequest_Matcher): unknown {
    const obj: any = {};
    if (message.urisMatcher !== undefined) {
      obj.urisMatcher = BatchGetDocumentsMetadataRequest_UrisMatcher.toJSON(message.urisMatcher);
    }
    return obj;
  },

  create(base?: DeepPartial<BatchGetDocumentsMetadataRequest_Matcher>): BatchGetDocumentsMetadataRequest_Matcher {
    return BatchGetDocumentsMetadataRequest_Matcher.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BatchGetDocumentsMetadataRequest_Matcher>): BatchGetDocumentsMetadataRequest_Matcher {
    const message = createBaseBatchGetDocumentsMetadataRequest_Matcher();
    message.urisMatcher = (object.urisMatcher !== undefined && object.urisMatcher !== null)
      ? BatchGetDocumentsMetadataRequest_UrisMatcher.fromPartial(object.urisMatcher)
      : undefined;
    return message;
  },
};

function createBaseBatchGetDocumentsMetadataResponse(): BatchGetDocumentsMetadataResponse {
  return { documentsMetadata: [] };
}

export const BatchGetDocumentsMetadataResponse: MessageFns<BatchGetDocumentsMetadataResponse> = {
  encode(message: BatchGetDocumentsMetadataResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.documentsMetadata) {
      BatchGetDocumentsMetadataResponse_DocumentMetadata.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BatchGetDocumentsMetadataResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBatchGetDocumentsMetadataResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.documentsMetadata.push(
            BatchGetDocumentsMetadataResponse_DocumentMetadata.decode(reader, reader.uint32()),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BatchGetDocumentsMetadataResponse {
    return {
      documentsMetadata: globalThis.Array.isArray(object?.documentsMetadata)
        ? object.documentsMetadata.map((e: any) => BatchGetDocumentsMetadataResponse_DocumentMetadata.fromJSON(e))
        : [],
    };
  },

  toJSON(message: BatchGetDocumentsMetadataResponse): unknown {
    const obj: any = {};
    if (message.documentsMetadata?.length) {
      obj.documentsMetadata = message.documentsMetadata.map((e) =>
        BatchGetDocumentsMetadataResponse_DocumentMetadata.toJSON(e)
      );
    }
    return obj;
  },

  create(base?: DeepPartial<BatchGetDocumentsMetadataResponse>): BatchGetDocumentsMetadataResponse {
    return BatchGetDocumentsMetadataResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BatchGetDocumentsMetadataResponse>): BatchGetDocumentsMetadataResponse {
    const message = createBaseBatchGetDocumentsMetadataResponse();
    message.documentsMetadata =
      object.documentsMetadata?.map((e) => BatchGetDocumentsMetadataResponse_DocumentMetadata.fromPartial(e)) || [];
    return message;
  },
};

function createBaseBatchGetDocumentsMetadataResponse_DocumentMetadata(): BatchGetDocumentsMetadataResponse_DocumentMetadata {
  return { matcherValue: undefined, state: 0, lastRefreshedTime: undefined, dataIngestionSource: "" };
}

export const BatchGetDocumentsMetadataResponse_DocumentMetadata: MessageFns<
  BatchGetDocumentsMetadataResponse_DocumentMetadata
> = {
  encode(
    message: BatchGetDocumentsMetadataResponse_DocumentMetadata,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.matcherValue !== undefined) {
      BatchGetDocumentsMetadataResponse_DocumentMetadata_MatcherValue.encode(
        message.matcherValue,
        writer.uint32(18).fork(),
      ).join();
    }
    if (message.state !== 0) {
      writer.uint32(24).int32(message.state);
    }
    if (message.lastRefreshedTime !== undefined) {
      Timestamp.encode(toTimestamp(message.lastRefreshedTime), writer.uint32(34).fork()).join();
    }
    if (message.dataIngestionSource !== "") {
      writer.uint32(42).string(message.dataIngestionSource);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BatchGetDocumentsMetadataResponse_DocumentMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBatchGetDocumentsMetadataResponse_DocumentMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.matcherValue = BatchGetDocumentsMetadataResponse_DocumentMetadata_MatcherValue.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.lastRefreshedTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.dataIngestionSource = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BatchGetDocumentsMetadataResponse_DocumentMetadata {
    return {
      matcherValue: isSet(object.matcherValue)
        ? BatchGetDocumentsMetadataResponse_DocumentMetadata_MatcherValue.fromJSON(object.matcherValue)
        : undefined,
      state: isSet(object.state) ? batchGetDocumentsMetadataResponse_StateFromJSON(object.state) : 0,
      lastRefreshedTime: isSet(object.lastRefreshedTime) ? fromJsonTimestamp(object.lastRefreshedTime) : undefined,
      dataIngestionSource: isSet(object.dataIngestionSource) ? globalThis.String(object.dataIngestionSource) : "",
    };
  },

  toJSON(message: BatchGetDocumentsMetadataResponse_DocumentMetadata): unknown {
    const obj: any = {};
    if (message.matcherValue !== undefined) {
      obj.matcherValue = BatchGetDocumentsMetadataResponse_DocumentMetadata_MatcherValue.toJSON(message.matcherValue);
    }
    if (message.state !== 0) {
      obj.state = batchGetDocumentsMetadataResponse_StateToJSON(message.state);
    }
    if (message.lastRefreshedTime !== undefined) {
      obj.lastRefreshedTime = message.lastRefreshedTime.toISOString();
    }
    if (message.dataIngestionSource !== "") {
      obj.dataIngestionSource = message.dataIngestionSource;
    }
    return obj;
  },

  create(
    base?: DeepPartial<BatchGetDocumentsMetadataResponse_DocumentMetadata>,
  ): BatchGetDocumentsMetadataResponse_DocumentMetadata {
    return BatchGetDocumentsMetadataResponse_DocumentMetadata.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<BatchGetDocumentsMetadataResponse_DocumentMetadata>,
  ): BatchGetDocumentsMetadataResponse_DocumentMetadata {
    const message = createBaseBatchGetDocumentsMetadataResponse_DocumentMetadata();
    message.matcherValue = (object.matcherValue !== undefined && object.matcherValue !== null)
      ? BatchGetDocumentsMetadataResponse_DocumentMetadata_MatcherValue.fromPartial(object.matcherValue)
      : undefined;
    message.state = object.state ?? 0;
    message.lastRefreshedTime = object.lastRefreshedTime ?? undefined;
    message.dataIngestionSource = object.dataIngestionSource ?? "";
    return message;
  },
};

function createBaseBatchGetDocumentsMetadataResponse_DocumentMetadata_MatcherValue(): BatchGetDocumentsMetadataResponse_DocumentMetadata_MatcherValue {
  return { uri: undefined };
}

export const BatchGetDocumentsMetadataResponse_DocumentMetadata_MatcherValue: MessageFns<
  BatchGetDocumentsMetadataResponse_DocumentMetadata_MatcherValue
> = {
  encode(
    message: BatchGetDocumentsMetadataResponse_DocumentMetadata_MatcherValue,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.uri !== undefined) {
      writer.uint32(10).string(message.uri);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): BatchGetDocumentsMetadataResponse_DocumentMetadata_MatcherValue {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBatchGetDocumentsMetadataResponse_DocumentMetadata_MatcherValue();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.uri = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BatchGetDocumentsMetadataResponse_DocumentMetadata_MatcherValue {
    return { uri: isSet(object.uri) ? globalThis.String(object.uri) : undefined };
  },

  toJSON(message: BatchGetDocumentsMetadataResponse_DocumentMetadata_MatcherValue): unknown {
    const obj: any = {};
    if (message.uri !== undefined) {
      obj.uri = message.uri;
    }
    return obj;
  },

  create(
    base?: DeepPartial<BatchGetDocumentsMetadataResponse_DocumentMetadata_MatcherValue>,
  ): BatchGetDocumentsMetadataResponse_DocumentMetadata_MatcherValue {
    return BatchGetDocumentsMetadataResponse_DocumentMetadata_MatcherValue.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<BatchGetDocumentsMetadataResponse_DocumentMetadata_MatcherValue>,
  ): BatchGetDocumentsMetadataResponse_DocumentMetadata_MatcherValue {
    const message = createBaseBatchGetDocumentsMetadataResponse_DocumentMetadata_MatcherValue();
    message.uri = object.uri ?? undefined;
    return message;
  },
};

/**
 * Service for ingesting [Document][google.cloud.discoveryengine.v1.Document]
 * information of the customer's website.
 */
export type DocumentServiceDefinition = typeof DocumentServiceDefinition;
export const DocumentServiceDefinition = {
  name: "DocumentService",
  fullName: "google.cloud.discoveryengine.v1.DocumentService",
  methods: {
    /** Gets a [Document][google.cloud.discoveryengine.v1.Document]. */
    getDocument: {
      name: "GetDocument",
      requestType: GetDocumentRequest,
      requestStream: false,
      responseType: Document,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              158,
              1,
              90,
              85,
              18,
              83,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              47,
              98,
              114,
              97,
              110,
              99,
              104,
              101,
              115,
              47,
              42,
              47,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
              18,
              69,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              47,
              98,
              114,
              97,
              110,
              99,
              104,
              101,
              115,
              47,
              42,
              47,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Gets a list of [Document][google.cloud.discoveryengine.v1.Document]s. */
    listDocuments: {
      name: "ListDocuments",
      requestType: ListDocumentsRequest,
      requestStream: false,
      responseType: ListDocumentsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              158,
              1,
              90,
              85,
              18,
              83,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              47,
              98,
              114,
              97,
              110,
              99,
              104,
              101,
              115,
              47,
              42,
              125,
              47,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              115,
              18,
              69,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              47,
              98,
              114,
              97,
              110,
              99,
              104,
              101,
              115,
              47,
              42,
              125,
              47,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /** Creates a [Document][google.cloud.discoveryengine.v1.Document]. */
    createDocument: {
      name: "CreateDocument",
      requestType: CreateDocumentRequest,
      requestStream: false,
      responseType: Document,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              27,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              44,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              178,
              1,
              58,
              8,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              90,
              95,
              58,
              8,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              34,
              83,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              47,
              98,
              114,
              97,
              110,
              99,
              104,
              101,
              115,
              47,
              42,
              125,
              47,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              115,
              34,
              69,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              47,
              98,
              114,
              97,
              110,
              99,
              104,
              101,
              115,
              47,
              42,
              125,
              47,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /** Updates a [Document][google.cloud.discoveryengine.v1.Document]. */
    updateDocument: {
      name: "UpdateDocument",
      requestType: UpdateDocumentRequest,
      requestStream: false,
      responseType: Document,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              20,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              196,
              1,
              58,
              8,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              90,
              104,
              58,
              8,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              50,
              92,
              47,
              118,
              49,
              47,
              123,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              47,
              98,
              114,
              97,
              110,
              99,
              104,
              101,
              115,
              47,
              42,
              47,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
              50,
              78,
              47,
              118,
              49,
              47,
              123,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              47,
              98,
              114,
              97,
              110,
              99,
              104,
              101,
              115,
              47,
              42,
              47,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes a [Document][google.cloud.discoveryengine.v1.Document]. */
    deleteDocument: {
      name: "DeleteDocument",
      requestType: DeleteDocumentRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              158,
              1,
              90,
              85,
              42,
              83,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              47,
              98,
              114,
              97,
              110,
              99,
              104,
              101,
              115,
              47,
              42,
              47,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
              42,
              69,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              47,
              98,
              114,
              97,
              110,
              99,
              104,
              101,
              115,
              47,
              42,
              47,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Bulk import of multiple
     * [Document][google.cloud.discoveryengine.v1.Document]s. Request processing
     * may be synchronous. Non-existing items are created.
     *
     * Note: It is possible for a subset of the
     * [Document][google.cloud.discoveryengine.v1.Document]s to be successfully
     * updated.
     */
    importDocuments: {
      name: "ImportDocuments",
      requestType: ImportDocumentsRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              114,
              10,
              55,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              100,
              105,
              115,
              99,
              111,
              118,
              101,
              114,
              121,
              101,
              110,
              103,
              105,
              110,
              101,
              46,
              118,
              49,
              46,
              73,
              109,
              112,
              111,
              114,
              116,
              68,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              115,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              18,
              55,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              100,
              105,
              115,
              99,
              111,
              118,
              101,
              114,
              121,
              101,
              110,
              103,
              105,
              110,
              101,
              46,
              118,
              49,
              46,
              73,
              109,
              112,
              111,
              114,
              116,
              68,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              115,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          578365826: [
            Buffer.from([
              178,
              1,
              58,
              1,
              42,
              90,
              95,
              58,
              1,
              42,
              34,
              90,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              47,
              98,
              114,
              97,
              110,
              99,
              104,
              101,
              115,
              47,
              42,
              125,
              47,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              115,
              58,
              105,
              109,
              112,
              111,
              114,
              116,
              34,
              76,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              47,
              98,
              114,
              97,
              110,
              99,
              104,
              101,
              115,
              47,
              42,
              125,
              47,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              115,
              58,
              105,
              109,
              112,
              111,
              114,
              116,
            ]),
          ],
        },
      },
    },
    /**
     * Permanently deletes all selected
     * [Document][google.cloud.discoveryengine.v1.Document]s in a branch.
     *
     * This process is asynchronous. Depending on the number of
     * [Document][google.cloud.discoveryengine.v1.Document]s to be deleted, this
     * operation can take hours to complete. Before the delete operation
     * completes, some [Document][google.cloud.discoveryengine.v1.Document]s might
     * still be returned by
     * [DocumentService.GetDocument][google.cloud.discoveryengine.v1.DocumentService.GetDocument]
     * or
     * [DocumentService.ListDocuments][google.cloud.discoveryengine.v1.DocumentService.ListDocuments].
     *
     * To get a list of the [Document][google.cloud.discoveryengine.v1.Document]s
     * to be deleted, set
     * [PurgeDocumentsRequest.force][google.cloud.discoveryengine.v1.PurgeDocumentsRequest.force]
     * to false.
     */
    purgeDocuments: {
      name: "PurgeDocuments",
      requestType: PurgeDocumentsRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              112,
              10,
              54,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              100,
              105,
              115,
              99,
              111,
              118,
              101,
              114,
              121,
              101,
              110,
              103,
              105,
              110,
              101,
              46,
              118,
              49,
              46,
              80,
              117,
              114,
              103,
              101,
              68,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              115,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              18,
              54,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              100,
              105,
              115,
              99,
              111,
              118,
              101,
              114,
              121,
              101,
              110,
              103,
              105,
              110,
              101,
              46,
              118,
              49,
              46,
              80,
              117,
              114,
              103,
              101,
              68,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              115,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          578365826: [
            Buffer.from([
              176,
              1,
              58,
              1,
              42,
              90,
              94,
              58,
              1,
              42,
              34,
              89,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              47,
              98,
              114,
              97,
              110,
              99,
              104,
              101,
              115,
              47,
              42,
              125,
              47,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              115,
              58,
              112,
              117,
              114,
              103,
              101,
              34,
              75,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              47,
              98,
              114,
              97,
              110,
              99,
              104,
              101,
              115,
              47,
              42,
              125,
              47,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              115,
              58,
              112,
              117,
              114,
              103,
              101,
            ]),
          ],
        },
      },
    },
    /**
     * Gets index freshness metadata for
     * [Document][google.cloud.discoveryengine.v1.Document]s. Supported for
     * website search only.
     */
    batchGetDocumentsMetadata: {
      name: "BatchGetDocumentsMetadata",
      requestType: BatchGetDocumentsMetadataRequest,
      requestStream: false,
      responseType: BatchGetDocumentsMetadataResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              190,
              1,
              90,
              101,
              18,
              99,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              47,
              98,
              114,
              97,
              110,
              99,
              104,
              101,
              115,
              47,
              42,
              125,
              47,
              98,
              97,
              116,
              99,
              104,
              71,
              101,
              116,
              68,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              115,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              18,
              85,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              47,
              98,
              114,
              97,
              110,
              99,
              104,
              101,
              115,
              47,
              42,
              125,
              47,
              98,
              97,
              116,
              99,
              104,
              71,
              101,
              116,
              68,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              115,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface DocumentServiceImplementation<CallContextExt = {}> {
  /** Gets a [Document][google.cloud.discoveryengine.v1.Document]. */
  getDocument(request: GetDocumentRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Document>>;
  /** Gets a list of [Document][google.cloud.discoveryengine.v1.Document]s. */
  listDocuments(
    request: ListDocumentsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListDocumentsResponse>>;
  /** Creates a [Document][google.cloud.discoveryengine.v1.Document]. */
  createDocument(request: CreateDocumentRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Document>>;
  /** Updates a [Document][google.cloud.discoveryengine.v1.Document]. */
  updateDocument(request: UpdateDocumentRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Document>>;
  /** Deletes a [Document][google.cloud.discoveryengine.v1.Document]. */
  deleteDocument(request: DeleteDocumentRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
  /**
   * Bulk import of multiple
   * [Document][google.cloud.discoveryengine.v1.Document]s. Request processing
   * may be synchronous. Non-existing items are created.
   *
   * Note: It is possible for a subset of the
   * [Document][google.cloud.discoveryengine.v1.Document]s to be successfully
   * updated.
   */
  importDocuments(
    request: ImportDocumentsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Permanently deletes all selected
   * [Document][google.cloud.discoveryengine.v1.Document]s in a branch.
   *
   * This process is asynchronous. Depending on the number of
   * [Document][google.cloud.discoveryengine.v1.Document]s to be deleted, this
   * operation can take hours to complete. Before the delete operation
   * completes, some [Document][google.cloud.discoveryengine.v1.Document]s might
   * still be returned by
   * [DocumentService.GetDocument][google.cloud.discoveryengine.v1.DocumentService.GetDocument]
   * or
   * [DocumentService.ListDocuments][google.cloud.discoveryengine.v1.DocumentService.ListDocuments].
   *
   * To get a list of the [Document][google.cloud.discoveryengine.v1.Document]s
   * to be deleted, set
   * [PurgeDocumentsRequest.force][google.cloud.discoveryengine.v1.PurgeDocumentsRequest.force]
   * to false.
   */
  purgeDocuments(
    request: PurgeDocumentsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Gets index freshness metadata for
   * [Document][google.cloud.discoveryengine.v1.Document]s. Supported for
   * website search only.
   */
  batchGetDocumentsMetadata(
    request: BatchGetDocumentsMetadataRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<BatchGetDocumentsMetadataResponse>>;
}

export interface DocumentServiceClient<CallOptionsExt = {}> {
  /** Gets a [Document][google.cloud.discoveryengine.v1.Document]. */
  getDocument(request: DeepPartial<GetDocumentRequest>, options?: CallOptions & CallOptionsExt): Promise<Document>;
  /** Gets a list of [Document][google.cloud.discoveryengine.v1.Document]s. */
  listDocuments(
    request: DeepPartial<ListDocumentsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListDocumentsResponse>;
  /** Creates a [Document][google.cloud.discoveryengine.v1.Document]. */
  createDocument(
    request: DeepPartial<CreateDocumentRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Document>;
  /** Updates a [Document][google.cloud.discoveryengine.v1.Document]. */
  updateDocument(
    request: DeepPartial<UpdateDocumentRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Document>;
  /** Deletes a [Document][google.cloud.discoveryengine.v1.Document]. */
  deleteDocument(request: DeepPartial<DeleteDocumentRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
  /**
   * Bulk import of multiple
   * [Document][google.cloud.discoveryengine.v1.Document]s. Request processing
   * may be synchronous. Non-existing items are created.
   *
   * Note: It is possible for a subset of the
   * [Document][google.cloud.discoveryengine.v1.Document]s to be successfully
   * updated.
   */
  importDocuments(
    request: DeepPartial<ImportDocumentsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Permanently deletes all selected
   * [Document][google.cloud.discoveryengine.v1.Document]s in a branch.
   *
   * This process is asynchronous. Depending on the number of
   * [Document][google.cloud.discoveryengine.v1.Document]s to be deleted, this
   * operation can take hours to complete. Before the delete operation
   * completes, some [Document][google.cloud.discoveryengine.v1.Document]s might
   * still be returned by
   * [DocumentService.GetDocument][google.cloud.discoveryengine.v1.DocumentService.GetDocument]
   * or
   * [DocumentService.ListDocuments][google.cloud.discoveryengine.v1.DocumentService.ListDocuments].
   *
   * To get a list of the [Document][google.cloud.discoveryengine.v1.Document]s
   * to be deleted, set
   * [PurgeDocumentsRequest.force][google.cloud.discoveryengine.v1.PurgeDocumentsRequest.force]
   * to false.
   */
  purgeDocuments(
    request: DeepPartial<PurgeDocumentsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Gets index freshness metadata for
   * [Document][google.cloud.discoveryengine.v1.Document]s. Supported for
   * website search only.
   */
  batchGetDocumentsMetadata(
    request: DeepPartial<BatchGetDocumentsMetadataRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<BatchGetDocumentsMetadataResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
