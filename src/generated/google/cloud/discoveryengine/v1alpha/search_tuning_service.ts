// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/discoveryengine/v1alpha/search_tuning_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../longrunning/operations.js";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { Status } from "../../../rpc/status.js";
import { CustomTuningModel } from "./custom_tuning_model.js";
import { ImportErrorConfig } from "./import_config.js";

export const protobufPackage = "google.cloud.discoveryengine.v1alpha";

/**
 * Request message for
 * [SearchTuningService.ListCustomModels][google.cloud.discoveryengine.v1alpha.SearchTuningService.ListCustomModels]
 * method.
 */
export interface ListCustomModelsRequest {
  /**
   * Required. The resource name of the parent Data Store, such as
   * `projects/* /locations/global/collections/default_collection/dataStores/default_data_store`.
   * This field is used to identify the data store where to fetch the models
   * from.
   */
  dataStore: string;
}

/**
 * Response message for
 * [SearchTuningService.ListCustomModels][google.cloud.discoveryengine.v1alpha.SearchTuningService.ListCustomModels]
 * method.
 */
export interface ListCustomModelsResponse {
  /** List of custom tuning models. */
  models: CustomTuningModel[];
}

/**
 * Request message for
 * [SearchTuningService.TrainCustomModel][google.cloud.discoveryengine.v1alpha.SearchTuningService.TrainCustomModel]
 * method.
 */
export interface TrainCustomModelRequest {
  /** Cloud Storage training input. */
  gcsTrainingInput?:
    | TrainCustomModelRequest_GcsTrainingInput
    | undefined;
  /**
   * Required. The resource name of the Data Store, such as
   * `projects/* /locations/global/collections/default_collection/dataStores/default_data_store`.
   * This field is used to identify the data store where to train the models.
   */
  dataStore: string;
  /**
   * Model to be trained. Supported values are:
   *
   *  * **search-tuning**: Fine tuning the search system based on data provided.
   */
  modelType: string;
  /**
   * The desired location of errors incurred during the data ingestion and
   * training.
   */
  errorConfig:
    | ImportErrorConfig
    | undefined;
  /** If not provided, a UUID will be generated. */
  modelId: string;
}

/** Cloud Storage training data input. */
export interface TrainCustomModelRequest_GcsTrainingInput {
  /**
   * The Cloud Storage corpus data which could be associated in train data.
   * The data path format is `gs://<bucket_to_data>/<jsonl_file_name>`.
   * A newline delimited jsonl/ndjson file.
   *
   * For search-tuning model, each line should have the _id, title
   * and text. Example:
   * `{"_id": "doc1", title: "relevant doc", "text": "relevant text"}`
   */
  corpusDataPath: string;
  /**
   * The gcs query data which could be associated in train data.
   * The data path format is `gs://<bucket_to_data>/<jsonl_file_name>`.
   * A newline delimited jsonl/ndjson file.
   *
   * For search-tuning model, each line should have the _id
   * and text. Example: {"_id": "query1",  "text": "example query"}
   */
  queryDataPath: string;
  /**
   * Cloud Storage training data path whose format should be
   * `gs://<bucket_to_data>/<tsv_file_name>`. The file should be in tsv
   * format. Each line should have the doc_id and query_id and score (number).
   *
   * For search-tuning model, it should have the query-id corpus-id
   * score as tsv file header. The score should be a number in `[0, inf+)`.
   * The larger the number is, the more relevant the pair is. Example:
   *
   * * `query-id\tcorpus-id\tscore`
   * * `query1\tdoc1\t1`
   */
  trainDataPath: string;
  /**
   * Cloud Storage test data. Same format as train_data_path. If not provided,
   * a random 80/20 train/test split will be performed on train_data_path.
   */
  testDataPath: string;
}

/**
 * Response of the
 * [TrainCustomModelRequest][google.cloud.discoveryengine.v1alpha.TrainCustomModelRequest].
 * This message is returned by the google.longrunning.Operations.response field.
 */
export interface TrainCustomModelResponse {
  /** A sample of errors encountered while processing the data. */
  errorSamples: Status[];
  /** Echoes the destination for the complete errors in the request if set. */
  errorConfig:
    | ImportErrorConfig
    | undefined;
  /**
   * The trained model status. Possible values are:
   *
   *  * **bad-data**: The training data quality is bad.
   *  * **no-improvement**: Tuning didn't improve performance. Won't deploy.
   *  * **in-progress**: Model training job creation is in progress.
   *  * **training**: Model is actively training.
   *  * **evaluating**: The model is evaluating trained metrics.
   *  * **indexing**: The model trained metrics are indexing.
   *  * **ready**: The model is ready for serving.
   */
  modelStatus: string;
  /** The metrics of the trained model. */
  metrics: { [key: string]: number };
  /** Fully qualified name of the CustomTuningModel. */
  modelName: string;
}

export interface TrainCustomModelResponse_MetricsEntry {
  key: string;
  value: number;
}

/**
 * Metadata related to the progress of the TrainCustomModel operation. This is
 * returned by the google.longrunning.Operation.metadata field.
 */
export interface TrainCustomModelMetadata {
  /** Operation create time. */
  createTime:
    | Date
    | undefined;
  /**
   * Operation last update time. If the operation is done, this is also the
   * finish time.
   */
  updateTime: Date | undefined;
}

function createBaseListCustomModelsRequest(): ListCustomModelsRequest {
  return { dataStore: "" };
}

export const ListCustomModelsRequest: MessageFns<ListCustomModelsRequest> = {
  encode(message: ListCustomModelsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.dataStore !== "") {
      writer.uint32(10).string(message.dataStore);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListCustomModelsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListCustomModelsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.dataStore = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListCustomModelsRequest {
    return { dataStore: isSet(object.dataStore) ? globalThis.String(object.dataStore) : "" };
  },

  toJSON(message: ListCustomModelsRequest): unknown {
    const obj: any = {};
    if (message.dataStore !== "") {
      obj.dataStore = message.dataStore;
    }
    return obj;
  },

  create(base?: DeepPartial<ListCustomModelsRequest>): ListCustomModelsRequest {
    return ListCustomModelsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListCustomModelsRequest>): ListCustomModelsRequest {
    const message = createBaseListCustomModelsRequest();
    message.dataStore = object.dataStore ?? "";
    return message;
  },
};

function createBaseListCustomModelsResponse(): ListCustomModelsResponse {
  return { models: [] };
}

export const ListCustomModelsResponse: MessageFns<ListCustomModelsResponse> = {
  encode(message: ListCustomModelsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.models) {
      CustomTuningModel.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListCustomModelsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListCustomModelsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.models.push(CustomTuningModel.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListCustomModelsResponse {
    return {
      models: globalThis.Array.isArray(object?.models)
        ? object.models.map((e: any) => CustomTuningModel.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ListCustomModelsResponse): unknown {
    const obj: any = {};
    if (message.models?.length) {
      obj.models = message.models.map((e) => CustomTuningModel.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ListCustomModelsResponse>): ListCustomModelsResponse {
    return ListCustomModelsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListCustomModelsResponse>): ListCustomModelsResponse {
    const message = createBaseListCustomModelsResponse();
    message.models = object.models?.map((e) => CustomTuningModel.fromPartial(e)) || [];
    return message;
  },
};

function createBaseTrainCustomModelRequest(): TrainCustomModelRequest {
  return { gcsTrainingInput: undefined, dataStore: "", modelType: "", errorConfig: undefined, modelId: "" };
}

export const TrainCustomModelRequest: MessageFns<TrainCustomModelRequest> = {
  encode(message: TrainCustomModelRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.gcsTrainingInput !== undefined) {
      TrainCustomModelRequest_GcsTrainingInput.encode(message.gcsTrainingInput, writer.uint32(18).fork()).join();
    }
    if (message.dataStore !== "") {
      writer.uint32(10).string(message.dataStore);
    }
    if (message.modelType !== "") {
      writer.uint32(26).string(message.modelType);
    }
    if (message.errorConfig !== undefined) {
      ImportErrorConfig.encode(message.errorConfig, writer.uint32(34).fork()).join();
    }
    if (message.modelId !== "") {
      writer.uint32(42).string(message.modelId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TrainCustomModelRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTrainCustomModelRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.gcsTrainingInput = TrainCustomModelRequest_GcsTrainingInput.decode(reader, reader.uint32());
          continue;
        case 1:
          if (tag !== 10) {
            break;
          }

          message.dataStore = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.modelType = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.errorConfig = ImportErrorConfig.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.modelId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TrainCustomModelRequest {
    return {
      gcsTrainingInput: isSet(object.gcsTrainingInput)
        ? TrainCustomModelRequest_GcsTrainingInput.fromJSON(object.gcsTrainingInput)
        : undefined,
      dataStore: isSet(object.dataStore) ? globalThis.String(object.dataStore) : "",
      modelType: isSet(object.modelType) ? globalThis.String(object.modelType) : "",
      errorConfig: isSet(object.errorConfig) ? ImportErrorConfig.fromJSON(object.errorConfig) : undefined,
      modelId: isSet(object.modelId) ? globalThis.String(object.modelId) : "",
    };
  },

  toJSON(message: TrainCustomModelRequest): unknown {
    const obj: any = {};
    if (message.gcsTrainingInput !== undefined) {
      obj.gcsTrainingInput = TrainCustomModelRequest_GcsTrainingInput.toJSON(message.gcsTrainingInput);
    }
    if (message.dataStore !== "") {
      obj.dataStore = message.dataStore;
    }
    if (message.modelType !== "") {
      obj.modelType = message.modelType;
    }
    if (message.errorConfig !== undefined) {
      obj.errorConfig = ImportErrorConfig.toJSON(message.errorConfig);
    }
    if (message.modelId !== "") {
      obj.modelId = message.modelId;
    }
    return obj;
  },

  create(base?: DeepPartial<TrainCustomModelRequest>): TrainCustomModelRequest {
    return TrainCustomModelRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TrainCustomModelRequest>): TrainCustomModelRequest {
    const message = createBaseTrainCustomModelRequest();
    message.gcsTrainingInput = (object.gcsTrainingInput !== undefined && object.gcsTrainingInput !== null)
      ? TrainCustomModelRequest_GcsTrainingInput.fromPartial(object.gcsTrainingInput)
      : undefined;
    message.dataStore = object.dataStore ?? "";
    message.modelType = object.modelType ?? "";
    message.errorConfig = (object.errorConfig !== undefined && object.errorConfig !== null)
      ? ImportErrorConfig.fromPartial(object.errorConfig)
      : undefined;
    message.modelId = object.modelId ?? "";
    return message;
  },
};

function createBaseTrainCustomModelRequest_GcsTrainingInput(): TrainCustomModelRequest_GcsTrainingInput {
  return { corpusDataPath: "", queryDataPath: "", trainDataPath: "", testDataPath: "" };
}

export const TrainCustomModelRequest_GcsTrainingInput: MessageFns<TrainCustomModelRequest_GcsTrainingInput> = {
  encode(message: TrainCustomModelRequest_GcsTrainingInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.corpusDataPath !== "") {
      writer.uint32(10).string(message.corpusDataPath);
    }
    if (message.queryDataPath !== "") {
      writer.uint32(18).string(message.queryDataPath);
    }
    if (message.trainDataPath !== "") {
      writer.uint32(26).string(message.trainDataPath);
    }
    if (message.testDataPath !== "") {
      writer.uint32(34).string(message.testDataPath);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TrainCustomModelRequest_GcsTrainingInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTrainCustomModelRequest_GcsTrainingInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.corpusDataPath = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.queryDataPath = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.trainDataPath = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.testDataPath = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TrainCustomModelRequest_GcsTrainingInput {
    return {
      corpusDataPath: isSet(object.corpusDataPath) ? globalThis.String(object.corpusDataPath) : "",
      queryDataPath: isSet(object.queryDataPath) ? globalThis.String(object.queryDataPath) : "",
      trainDataPath: isSet(object.trainDataPath) ? globalThis.String(object.trainDataPath) : "",
      testDataPath: isSet(object.testDataPath) ? globalThis.String(object.testDataPath) : "",
    };
  },

  toJSON(message: TrainCustomModelRequest_GcsTrainingInput): unknown {
    const obj: any = {};
    if (message.corpusDataPath !== "") {
      obj.corpusDataPath = message.corpusDataPath;
    }
    if (message.queryDataPath !== "") {
      obj.queryDataPath = message.queryDataPath;
    }
    if (message.trainDataPath !== "") {
      obj.trainDataPath = message.trainDataPath;
    }
    if (message.testDataPath !== "") {
      obj.testDataPath = message.testDataPath;
    }
    return obj;
  },

  create(base?: DeepPartial<TrainCustomModelRequest_GcsTrainingInput>): TrainCustomModelRequest_GcsTrainingInput {
    return TrainCustomModelRequest_GcsTrainingInput.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TrainCustomModelRequest_GcsTrainingInput>): TrainCustomModelRequest_GcsTrainingInput {
    const message = createBaseTrainCustomModelRequest_GcsTrainingInput();
    message.corpusDataPath = object.corpusDataPath ?? "";
    message.queryDataPath = object.queryDataPath ?? "";
    message.trainDataPath = object.trainDataPath ?? "";
    message.testDataPath = object.testDataPath ?? "";
    return message;
  },
};

function createBaseTrainCustomModelResponse(): TrainCustomModelResponse {
  return { errorSamples: [], errorConfig: undefined, modelStatus: "", metrics: {}, modelName: "" };
}

export const TrainCustomModelResponse: MessageFns<TrainCustomModelResponse> = {
  encode(message: TrainCustomModelResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.errorSamples) {
      Status.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.errorConfig !== undefined) {
      ImportErrorConfig.encode(message.errorConfig, writer.uint32(18).fork()).join();
    }
    if (message.modelStatus !== "") {
      writer.uint32(26).string(message.modelStatus);
    }
    Object.entries(message.metrics).forEach(([key, value]) => {
      TrainCustomModelResponse_MetricsEntry.encode({ key: key as any, value }, writer.uint32(34).fork()).join();
    });
    if (message.modelName !== "") {
      writer.uint32(42).string(message.modelName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TrainCustomModelResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTrainCustomModelResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.errorSamples.push(Status.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorConfig = ImportErrorConfig.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.modelStatus = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          const entry4 = TrainCustomModelResponse_MetricsEntry.decode(reader, reader.uint32());
          if (entry4.value !== undefined) {
            message.metrics[entry4.key] = entry4.value;
          }
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.modelName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TrainCustomModelResponse {
    return {
      errorSamples: globalThis.Array.isArray(object?.errorSamples)
        ? object.errorSamples.map((e: any) => Status.fromJSON(e))
        : [],
      errorConfig: isSet(object.errorConfig) ? ImportErrorConfig.fromJSON(object.errorConfig) : undefined,
      modelStatus: isSet(object.modelStatus) ? globalThis.String(object.modelStatus) : "",
      metrics: isObject(object.metrics)
        ? Object.entries(object.metrics).reduce<{ [key: string]: number }>((acc, [key, value]) => {
          acc[key] = Number(value);
          return acc;
        }, {})
        : {},
      modelName: isSet(object.modelName) ? globalThis.String(object.modelName) : "",
    };
  },

  toJSON(message: TrainCustomModelResponse): unknown {
    const obj: any = {};
    if (message.errorSamples?.length) {
      obj.errorSamples = message.errorSamples.map((e) => Status.toJSON(e));
    }
    if (message.errorConfig !== undefined) {
      obj.errorConfig = ImportErrorConfig.toJSON(message.errorConfig);
    }
    if (message.modelStatus !== "") {
      obj.modelStatus = message.modelStatus;
    }
    if (message.metrics) {
      const entries = Object.entries(message.metrics);
      if (entries.length > 0) {
        obj.metrics = {};
        entries.forEach(([k, v]) => {
          obj.metrics[k] = v;
        });
      }
    }
    if (message.modelName !== "") {
      obj.modelName = message.modelName;
    }
    return obj;
  },

  create(base?: DeepPartial<TrainCustomModelResponse>): TrainCustomModelResponse {
    return TrainCustomModelResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TrainCustomModelResponse>): TrainCustomModelResponse {
    const message = createBaseTrainCustomModelResponse();
    message.errorSamples = object.errorSamples?.map((e) => Status.fromPartial(e)) || [];
    message.errorConfig = (object.errorConfig !== undefined && object.errorConfig !== null)
      ? ImportErrorConfig.fromPartial(object.errorConfig)
      : undefined;
    message.modelStatus = object.modelStatus ?? "";
    message.metrics = Object.entries(object.metrics ?? {}).reduce<{ [key: string]: number }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.Number(value);
      }
      return acc;
    }, {});
    message.modelName = object.modelName ?? "";
    return message;
  },
};

function createBaseTrainCustomModelResponse_MetricsEntry(): TrainCustomModelResponse_MetricsEntry {
  return { key: "", value: 0 };
}

export const TrainCustomModelResponse_MetricsEntry: MessageFns<TrainCustomModelResponse_MetricsEntry> = {
  encode(message: TrainCustomModelResponse_MetricsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== 0) {
      writer.uint32(17).double(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TrainCustomModelResponse_MetricsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTrainCustomModelResponse_MetricsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 17) {
            break;
          }

          message.value = reader.double();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TrainCustomModelResponse_MetricsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.Number(object.value) : 0,
    };
  },

  toJSON(message: TrainCustomModelResponse_MetricsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== 0) {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<TrainCustomModelResponse_MetricsEntry>): TrainCustomModelResponse_MetricsEntry {
    return TrainCustomModelResponse_MetricsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TrainCustomModelResponse_MetricsEntry>): TrainCustomModelResponse_MetricsEntry {
    const message = createBaseTrainCustomModelResponse_MetricsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? 0;
    return message;
  },
};

function createBaseTrainCustomModelMetadata(): TrainCustomModelMetadata {
  return { createTime: undefined, updateTime: undefined };
}

export const TrainCustomModelMetadata: MessageFns<TrainCustomModelMetadata> = {
  encode(message: TrainCustomModelMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(10).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TrainCustomModelMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTrainCustomModelMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TrainCustomModelMetadata {
    return {
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
    };
  },

  toJSON(message: TrainCustomModelMetadata): unknown {
    const obj: any = {};
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<TrainCustomModelMetadata>): TrainCustomModelMetadata {
    return TrainCustomModelMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TrainCustomModelMetadata>): TrainCustomModelMetadata {
    const message = createBaseTrainCustomModelMetadata();
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    return message;
  },
};

/** Service for search tuning. */
export type SearchTuningServiceDefinition = typeof SearchTuningServiceDefinition;
export const SearchTuningServiceDefinition = {
  name: "SearchTuningService",
  fullName: "google.cloud.discoveryengine.v1alpha.SearchTuningService",
  methods: {
    /** Trains a custom model. */
    trainCustomModel: {
      name: "TrainCustomModel",
      requestType: TrainCustomModelRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              126,
              10,
              61,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              100,
              105,
              115,
              99,
              111,
              118,
              101,
              114,
              121,
              101,
              110,
              103,
              105,
              110,
              101,
              46,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              46,
              84,
              114,
              97,
              105,
              110,
              67,
              117,
              115,
              116,
              111,
              109,
              77,
              111,
              100,
              101,
              108,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              18,
              61,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              100,
              105,
              115,
              99,
              111,
              118,
              101,
              114,
              121,
              101,
              110,
              103,
              105,
              110,
              101,
              46,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              46,
              84,
              114,
              97,
              105,
              110,
              67,
              117,
              115,
              116,
              111,
              109,
              77,
              111,
              100,
              101,
              108,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          578365826: [
            Buffer.from([
              93,
              58,
              1,
              42,
              34,
              88,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              100,
              97,
              116,
              97,
              95,
              115,
              116,
              111,
              114,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              125,
              58,
              116,
              114,
              97,
              105,
              110,
              67,
              117,
              115,
              116,
              111,
              109,
              77,
              111,
              100,
              101,
              108,
            ]),
          ],
        },
      },
    },
    /** Gets a list of all the custom models. */
    listCustomModels: {
      name: "ListCustomModels",
      requestType: ListCustomModelsRequest,
      requestStream: false,
      responseType: ListCustomModelsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              86,
              18,
              84,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              100,
              97,
              116,
              97,
              95,
              115,
              116,
              111,
              114,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              125,
              47,
              99,
              117,
              115,
              116,
              111,
              109,
              77,
              111,
              100,
              101,
              108,
              115,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface SearchTuningServiceImplementation<CallContextExt = {}> {
  /** Trains a custom model. */
  trainCustomModel(
    request: TrainCustomModelRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Gets a list of all the custom models. */
  listCustomModels(
    request: ListCustomModelsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListCustomModelsResponse>>;
}

export interface SearchTuningServiceClient<CallOptionsExt = {}> {
  /** Trains a custom model. */
  trainCustomModel(
    request: DeepPartial<TrainCustomModelRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Gets a list of all the custom models. */
  listCustomModels(
    request: DeepPartial<ListCustomModelsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListCustomModelsResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
