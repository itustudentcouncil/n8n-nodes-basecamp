// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/discoveryengine/v1alpha/grounding.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.cloud.discoveryengine.v1alpha";

/** Grounding Fact. */
export interface GroundingFact {
  /** Text content of the fact. Can be at most 10K characters long. */
  factText: string;
  /**
   * Attributes associated with the fact.
   * Common attributes include `source` (indicating where the fact was sourced
   * from), `author` (indicating the author of the fact), and so on.
   */
  attributes: { [key: string]: string };
}

export interface GroundingFact_AttributesEntry {
  key: string;
  value: string;
}

/** Fact Chunk. */
export interface FactChunk {
  /** Text content of the fact chunk. Can be at most 10K characters long. */
  chunkText: string;
  /**
   * Source from which this fact chunk was retrieved. If it was retrieved
   * from the GroundingFacts provided in the request then this field will
   * contain the index of the specific fact from which this chunk was
   * retrieved.
   */
  source: string;
  /** The index of this chunk. Currently, only used for the streaming mode. */
  index: number;
  /** More fine-grained information for the source reference. */
  sourceMetadata: { [key: string]: string };
}

export interface FactChunk_SourceMetadataEntry {
  key: string;
  value: string;
}

function createBaseGroundingFact(): GroundingFact {
  return { factText: "", attributes: {} };
}

export const GroundingFact: MessageFns<GroundingFact> = {
  encode(message: GroundingFact, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.factText !== "") {
      writer.uint32(10).string(message.factText);
    }
    Object.entries(message.attributes).forEach(([key, value]) => {
      GroundingFact_AttributesEntry.encode({ key: key as any, value }, writer.uint32(18).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GroundingFact {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGroundingFact();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.factText = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          const entry2 = GroundingFact_AttributesEntry.decode(reader, reader.uint32());
          if (entry2.value !== undefined) {
            message.attributes[entry2.key] = entry2.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GroundingFact {
    return {
      factText: isSet(object.factText) ? globalThis.String(object.factText) : "",
      attributes: isObject(object.attributes)
        ? Object.entries(object.attributes).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: GroundingFact): unknown {
    const obj: any = {};
    if (message.factText !== "") {
      obj.factText = message.factText;
    }
    if (message.attributes) {
      const entries = Object.entries(message.attributes);
      if (entries.length > 0) {
        obj.attributes = {};
        entries.forEach(([k, v]) => {
          obj.attributes[k] = v;
        });
      }
    }
    return obj;
  },

  create(base?: DeepPartial<GroundingFact>): GroundingFact {
    return GroundingFact.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GroundingFact>): GroundingFact {
    const message = createBaseGroundingFact();
    message.factText = object.factText ?? "";
    message.attributes = Object.entries(object.attributes ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBaseGroundingFact_AttributesEntry(): GroundingFact_AttributesEntry {
  return { key: "", value: "" };
}

export const GroundingFact_AttributesEntry: MessageFns<GroundingFact_AttributesEntry> = {
  encode(message: GroundingFact_AttributesEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GroundingFact_AttributesEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGroundingFact_AttributesEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GroundingFact_AttributesEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: GroundingFact_AttributesEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<GroundingFact_AttributesEntry>): GroundingFact_AttributesEntry {
    return GroundingFact_AttributesEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GroundingFact_AttributesEntry>): GroundingFact_AttributesEntry {
    const message = createBaseGroundingFact_AttributesEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseFactChunk(): FactChunk {
  return { chunkText: "", source: "", index: 0, sourceMetadata: {} };
}

export const FactChunk: MessageFns<FactChunk> = {
  encode(message: FactChunk, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.chunkText !== "") {
      writer.uint32(10).string(message.chunkText);
    }
    if (message.source !== "") {
      writer.uint32(18).string(message.source);
    }
    if (message.index !== 0) {
      writer.uint32(32).int32(message.index);
    }
    Object.entries(message.sourceMetadata).forEach(([key, value]) => {
      FactChunk_SourceMetadataEntry.encode({ key: key as any, value }, writer.uint32(26).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FactChunk {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFactChunk();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.chunkText = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.source = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.index = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          const entry3 = FactChunk_SourceMetadataEntry.decode(reader, reader.uint32());
          if (entry3.value !== undefined) {
            message.sourceMetadata[entry3.key] = entry3.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FactChunk {
    return {
      chunkText: isSet(object.chunkText) ? globalThis.String(object.chunkText) : "",
      source: isSet(object.source) ? globalThis.String(object.source) : "",
      index: isSet(object.index) ? globalThis.Number(object.index) : 0,
      sourceMetadata: isObject(object.sourceMetadata)
        ? Object.entries(object.sourceMetadata).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: FactChunk): unknown {
    const obj: any = {};
    if (message.chunkText !== "") {
      obj.chunkText = message.chunkText;
    }
    if (message.source !== "") {
      obj.source = message.source;
    }
    if (message.index !== 0) {
      obj.index = Math.round(message.index);
    }
    if (message.sourceMetadata) {
      const entries = Object.entries(message.sourceMetadata);
      if (entries.length > 0) {
        obj.sourceMetadata = {};
        entries.forEach(([k, v]) => {
          obj.sourceMetadata[k] = v;
        });
      }
    }
    return obj;
  },

  create(base?: DeepPartial<FactChunk>): FactChunk {
    return FactChunk.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FactChunk>): FactChunk {
    const message = createBaseFactChunk();
    message.chunkText = object.chunkText ?? "";
    message.source = object.source ?? "";
    message.index = object.index ?? 0;
    message.sourceMetadata = Object.entries(object.sourceMetadata ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBaseFactChunk_SourceMetadataEntry(): FactChunk_SourceMetadataEntry {
  return { key: "", value: "" };
}

export const FactChunk_SourceMetadataEntry: MessageFns<FactChunk_SourceMetadataEntry> = {
  encode(message: FactChunk_SourceMetadataEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FactChunk_SourceMetadataEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFactChunk_SourceMetadataEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FactChunk_SourceMetadataEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: FactChunk_SourceMetadataEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<FactChunk_SourceMetadataEntry>): FactChunk_SourceMetadataEntry {
    return FactChunk_SourceMetadataEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FactChunk_SourceMetadataEntry>): FactChunk_SourceMetadataEntry {
    const message = createBaseFactChunk_SourceMetadataEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
