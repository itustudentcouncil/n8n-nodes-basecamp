// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/discoveryengine/v1alpha/engine.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../protobuf/timestamp.js";
import {
  IndustryVertical,
  industryVerticalFromJSON,
  industryVerticalToJSON,
  SearchAddOn,
  searchAddOnFromJSON,
  searchAddOnToJSON,
  SearchTier,
  searchTierFromJSON,
  searchTierToJSON,
  SolutionType,
  solutionTypeFromJSON,
  solutionTypeToJSON,
} from "./common.js";

export const protobufPackage = "google.cloud.discoveryengine.v1alpha";

/**
 * Metadata that describes the training and serving parameters of an
 * [Engine][google.cloud.discoveryengine.v1alpha.Engine].
 */
export interface Engine {
  /** Additional config specs for a `similar-items` engine. */
  similarDocumentsConfig?:
    | Engine_SimilarDocumentsEngineConfig
    | undefined;
  /**
   * Configurations for the Chat Engine. Only applicable if
   * [solution_type][google.cloud.discoveryengine.v1alpha.Engine.solution_type]
   * is
   * [SOLUTION_TYPE_CHAT][google.cloud.discoveryengine.v1alpha.SolutionType.SOLUTION_TYPE_CHAT].
   */
  chatEngineConfig?:
    | Engine_ChatEngineConfig
    | undefined;
  /**
   * Configurations for the Search Engine. Only applicable if
   * [solution_type][google.cloud.discoveryengine.v1alpha.Engine.solution_type]
   * is
   * [SOLUTION_TYPE_SEARCH][google.cloud.discoveryengine.v1alpha.SolutionType.SOLUTION_TYPE_SEARCH].
   */
  searchEngineConfig?:
    | Engine_SearchEngineConfig
    | undefined;
  /**
   * Configurations for the Media Engine. Only applicable on the data
   * stores with
   * [solution_type][google.cloud.discoveryengine.v1alpha.Engine.solution_type]
   * [SOLUTION_TYPE_RECOMMENDATION][google.cloud.discoveryengine.v1alpha.SolutionType.SOLUTION_TYPE_RECOMMENDATION]
   * and
   * [IndustryVertical.MEDIA][google.cloud.discoveryengine.v1alpha.IndustryVertical.MEDIA]
   * vertical.
   */
  mediaRecommendationEngineConfig?:
    | Engine_MediaRecommendationEngineConfig
    | undefined;
  /**
   * Output only. Additional information of a recommendation engine. Only
   * applicable if
   * [solution_type][google.cloud.discoveryengine.v1alpha.Engine.solution_type]
   * is
   * [SOLUTION_TYPE_RECOMMENDATION][google.cloud.discoveryengine.v1alpha.SolutionType.SOLUTION_TYPE_RECOMMENDATION].
   */
  recommendationMetadata?:
    | Engine_RecommendationMetadata
    | undefined;
  /**
   * Output only. Additional information of the Chat Engine. Only applicable
   * if
   * [solution_type][google.cloud.discoveryengine.v1alpha.Engine.solution_type]
   * is
   * [SOLUTION_TYPE_CHAT][google.cloud.discoveryengine.v1alpha.SolutionType.SOLUTION_TYPE_CHAT].
   */
  chatEngineMetadata?:
    | Engine_ChatEngineMetadata
    | undefined;
  /**
   * Immutable. The fully qualified resource name of the engine.
   *
   * This field must be a UTF-8 encoded string with a length limit of 1024
   * characters.
   *
   * Format:
   * `projects/{project_number}/locations/{location}/collections/{collection}/engines/{engine}`
   * engine should be 1-63 characters, and valid characters are
   * /[a-z0-9][a-z0-9-_]* /. Otherwise, an INVALID_ARGUMENT error is returned.
   */
  name: string;
  /**
   * Required. The display name of the engine. Should be human readable. UTF-8
   * encoded string with limit of 1024 characters.
   */
  displayName: string;
  /** Output only. Timestamp the Recommendation Engine was created at. */
  createTime:
    | Date
    | undefined;
  /** Output only. Timestamp the Recommendation Engine was last updated. */
  updateTime:
    | Date
    | undefined;
  /**
   * The data stores associated with this engine.
   *
   * For
   * [SOLUTION_TYPE_SEARCH][google.cloud.discoveryengine.v1alpha.SolutionType.SOLUTION_TYPE_SEARCH]
   * and
   * [SOLUTION_TYPE_RECOMMENDATION][google.cloud.discoveryengine.v1alpha.SolutionType.SOLUTION_TYPE_RECOMMENDATION]
   * type of engines, they can only associate with at most one data store.
   *
   * If
   * [solution_type][google.cloud.discoveryengine.v1alpha.Engine.solution_type]
   * is
   * [SOLUTION_TYPE_CHAT][google.cloud.discoveryengine.v1alpha.SolutionType.SOLUTION_TYPE_CHAT],
   * multiple [DataStore][google.cloud.discoveryengine.v1alpha.DataStore]s in
   * the same [Collection][google.cloud.discoveryengine.v1alpha.Collection] can
   * be associated here.
   *
   * Note that when used in
   * [CreateEngineRequest][google.cloud.discoveryengine.v1alpha.CreateEngineRequest],
   * one DataStore id must be provided as the system will use it for necessary
   * initializations.
   */
  dataStoreIds: string[];
  /** Required. The solutions of the engine. */
  solutionType: SolutionType;
  /**
   * The industry vertical that the engine registers.
   * The restriction of the Engine industry vertical is based on
   * [DataStore][google.cloud.discoveryengine.v1alpha.DataStore]: If
   * unspecified, default to `GENERIC`. Vertical on Engine has to match vertical
   * of the DataStore linked to the engine.
   */
  industryVertical: IndustryVertical;
  /** Common config spec that specifies the metadata of the engine. */
  commonConfig: Engine_CommonConfig | undefined;
}

/** Configurations for a Search Engine. */
export interface Engine_SearchEngineConfig {
  /**
   * The search feature tier of this engine.
   *
   * Different tiers might have different
   * pricing. To learn more, check the pricing documentation.
   *
   * Defaults to
   * [SearchTier.SEARCH_TIER_STANDARD][google.cloud.discoveryengine.v1alpha.SearchTier.SEARCH_TIER_STANDARD]
   * if not specified.
   */
  searchTier: SearchTier;
  /** The add-on that this search engine enables. */
  searchAddOns: SearchAddOn[];
}

/** Additional config specs for a `similar-items` engine. */
export interface Engine_SimilarDocumentsEngineConfig {
}

/** Additional config specs for a Media Recommendation engine. */
export interface Engine_MediaRecommendationEngineConfig {
  /**
   * Required. The type of engine. e.g., `recommended-for-you`.
   *
   * This field together with
   * [optimization_objective][Engine.optimization_objective] describe engine
   * metadata to use to control engine training and serving.
   *
   * Currently supported values: `recommended-for-you`, `others-you-may-like`,
   * `more-like-this`, `most-popular-items`.
   */
  type: string;
  /**
   * The optimization objective. e.g., `cvr`.
   *
   * This field together with
   * [optimization_objective][google.cloud.discoveryengine.v1alpha.Engine.MediaRecommendationEngineConfig.type]
   * describe engine metadata to use to control engine training and serving.
   *
   * Currently supported
   * values: `ctr`, `cvr`.
   *
   *  If not specified, we choose default based on engine type.
   * Default depends on type of recommendation:
   *
   * `recommended-for-you` => `ctr`
   *
   * `others-you-may-like` => `ctr`
   */
  optimizationObjective: string;
  /**
   * Name and value of the custom threshold for cvr optimization_objective.
   * For target_field `watch-time`, target_field_value must be an integer
   * value indicating the media progress time in seconds between (0, 86400]
   * (excludes 0, includes 86400) (e.g., 90).
   * For target_field `watch-percentage`, the target_field_value must be a
   * valid float value between (0, 1.0] (excludes 0, includes 1.0) (e.g.,
   * 0.5).
   */
  optimizationObjectiveConfig:
    | Engine_MediaRecommendationEngineConfig_OptimizationObjectiveConfig
    | undefined;
  /**
   * The training state that the engine is in (e.g.
   * `TRAINING` or `PAUSED`).
   *
   * Since part of the cost of running the service
   * is frequency of training - this can be used to determine when to train
   * engine in order to control cost. If not specified: the default value for
   * `CreateEngine` method is `TRAINING`. The default value for
   * `UpdateEngine` method is to keep the state the same as before.
   */
  trainingState: Engine_MediaRecommendationEngineConfig_TrainingState;
}

/** The training state of the engine. */
export enum Engine_MediaRecommendationEngineConfig_TrainingState {
  /** TRAINING_STATE_UNSPECIFIED - Unspecified training state. */
  TRAINING_STATE_UNSPECIFIED = 0,
  /** PAUSED - The engine training is paused. */
  PAUSED = 1,
  /** TRAINING - The engine is training. */
  TRAINING = 2,
  UNRECOGNIZED = -1,
}

export function engine_MediaRecommendationEngineConfig_TrainingStateFromJSON(
  object: any,
): Engine_MediaRecommendationEngineConfig_TrainingState {
  switch (object) {
    case 0:
    case "TRAINING_STATE_UNSPECIFIED":
      return Engine_MediaRecommendationEngineConfig_TrainingState.TRAINING_STATE_UNSPECIFIED;
    case 1:
    case "PAUSED":
      return Engine_MediaRecommendationEngineConfig_TrainingState.PAUSED;
    case 2:
    case "TRAINING":
      return Engine_MediaRecommendationEngineConfig_TrainingState.TRAINING;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Engine_MediaRecommendationEngineConfig_TrainingState.UNRECOGNIZED;
  }
}

export function engine_MediaRecommendationEngineConfig_TrainingStateToJSON(
  object: Engine_MediaRecommendationEngineConfig_TrainingState,
): string {
  switch (object) {
    case Engine_MediaRecommendationEngineConfig_TrainingState.TRAINING_STATE_UNSPECIFIED:
      return "TRAINING_STATE_UNSPECIFIED";
    case Engine_MediaRecommendationEngineConfig_TrainingState.PAUSED:
      return "PAUSED";
    case Engine_MediaRecommendationEngineConfig_TrainingState.TRAINING:
      return "TRAINING";
    case Engine_MediaRecommendationEngineConfig_TrainingState.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Custom threshold for `cvr` optimization_objective. */
export interface Engine_MediaRecommendationEngineConfig_OptimizationObjectiveConfig {
  /**
   * Required. The name of the field to target. Currently supported
   * values: `watch-percentage`, `watch-time`.
   */
  targetField: string;
  /** Required. The threshold to be applied to the target (e.g., 0.5). */
  targetFieldValueFloat: number;
}

/** Configurations for a Chat Engine. */
export interface Engine_ChatEngineConfig {
  /**
   * The configurationt generate the Dialogflow agent that is associated to
   * this Engine.
   *
   * Note that these configurations are one-time consumed by
   * and passed to Dialogflow service. It means they cannot be retrieved using
   * [EngineService.GetEngine][google.cloud.discoveryengine.v1alpha.EngineService.GetEngine]
   * or
   * [EngineService.ListEngines][google.cloud.discoveryengine.v1alpha.EngineService.ListEngines]
   * API after engine creation.
   */
  agentCreationConfig:
    | Engine_ChatEngineConfig_AgentCreationConfig
    | undefined;
  /**
   * The resource name of an exist Dialogflow agent to link to this Chat
   * Engine. Customers can either provide `agent_creation_config` to create
   * agent or provide an agent name that links the agent with the Chat engine.
   *
   * Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
   * ID>`.
   *
   * Note that the `dialogflow_agent_to_link` are one-time consumed by and
   * passed to Dialogflow service. It means they cannot be retrieved using
   * [EngineService.GetEngine][google.cloud.discoveryengine.v1alpha.EngineService.GetEngine]
   * or
   * [EngineService.ListEngines][google.cloud.discoveryengine.v1alpha.EngineService.ListEngines]
   * API after engine creation. Use
   * [ChatEngineMetadata.dialogflow_agent][google.cloud.discoveryengine.v1alpha.Engine.ChatEngineMetadata.dialogflow_agent]
   * for actual agent association after Engine is created.
   */
  dialogflowAgentToLink: string;
}

/**
 * Configurations for generating a Dialogflow agent.
 *
 * Note that these configurations are one-time consumed by
 * and passed to Dialogflow service. It means they cannot be retrieved using
 * [EngineService.GetEngine][google.cloud.discoveryengine.v1alpha.EngineService.GetEngine]
 * or
 * [EngineService.ListEngines][google.cloud.discoveryengine.v1alpha.EngineService.ListEngines]
 * API after engine creation.
 */
export interface Engine_ChatEngineConfig_AgentCreationConfig {
  /**
   * Name of the company, organization or other entity that the agent
   * represents. Used for knowledge connector LLM prompt and for knowledge
   * search.
   */
  business: string;
  /**
   * Required. The default language of the agent as a language tag.
   * See [Language
   * Support](https://cloud.google.com/dialogflow/docs/reference/language)
   * for a list of the currently supported language codes.
   */
  defaultLanguageCode: string;
  /**
   * Required. The time zone of the agent from the [time zone
   * database](https://www.iana.org/time-zones), e.g., America/New_York,
   * Europe/Paris.
   */
  timeZone: string;
  /**
   * Agent location for Agent creation, supported values: global/us/eu.
   * If not provided, us Engine will create Agent using us-central-1 by
   * default; eu Engine will create Agent using eu-west-1 by default.
   */
  location: string;
}

/** Common configurations for an Engine. */
export interface Engine_CommonConfig {
  /**
   * The name of the company, business or entity that is associated with the
   * engine. Setting this may help improve LLM related features.
   */
  companyName: string;
}

/** Additional information of a recommendation engine. */
export interface Engine_RecommendationMetadata {
  /** Output only. The serving state of the engine: `ACTIVE`, `NOT_ACTIVE`. */
  servingState: Engine_RecommendationMetadata_ServingState;
  /**
   * Output only. The state of data requirements for this engine: `DATA_OK`
   * and `DATA_ERROR`.
   *
   * Engine cannot be trained if the data is in
   * `DATA_ERROR` state. Engine can have `DATA_ERROR` state even
   * if serving state is `ACTIVE`: engines were trained successfully before,
   * but cannot be refreshed because the underlying engine no longer has
   * sufficient data for training.
   */
  dataState: Engine_RecommendationMetadata_DataState;
  /**
   * Output only. The timestamp when the latest successful tune finished. Only
   * applicable on Media Recommendation engines.
   */
  lastTuneTime:
    | Date
    | undefined;
  /**
   * Output only. The latest tune operation id associated with the engine.
   * Only applicable on Media Recommendation engines.
   *
   * If present, this operation id can be used to determine if there is an
   * ongoing tune for this engine. To check the operation status, send the
   * GetOperation request with this operation id in the engine resource
   * format. If no tuning has happened for this engine, the string is empty.
   */
  tuningOperation: string;
}

/** The serving state of the recommendation engine. */
export enum Engine_RecommendationMetadata_ServingState {
  /** SERVING_STATE_UNSPECIFIED - Unspecified serving state. */
  SERVING_STATE_UNSPECIFIED = 0,
  /** INACTIVE - The engine is not serving. */
  INACTIVE = 1,
  /** ACTIVE - The engine is serving and can be queried. */
  ACTIVE = 2,
  /**
   * TUNED - The engine is trained on tuned hyperparameters and can be
   * queried.
   */
  TUNED = 3,
  UNRECOGNIZED = -1,
}

export function engine_RecommendationMetadata_ServingStateFromJSON(
  object: any,
): Engine_RecommendationMetadata_ServingState {
  switch (object) {
    case 0:
    case "SERVING_STATE_UNSPECIFIED":
      return Engine_RecommendationMetadata_ServingState.SERVING_STATE_UNSPECIFIED;
    case 1:
    case "INACTIVE":
      return Engine_RecommendationMetadata_ServingState.INACTIVE;
    case 2:
    case "ACTIVE":
      return Engine_RecommendationMetadata_ServingState.ACTIVE;
    case 3:
    case "TUNED":
      return Engine_RecommendationMetadata_ServingState.TUNED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Engine_RecommendationMetadata_ServingState.UNRECOGNIZED;
  }
}

export function engine_RecommendationMetadata_ServingStateToJSON(
  object: Engine_RecommendationMetadata_ServingState,
): string {
  switch (object) {
    case Engine_RecommendationMetadata_ServingState.SERVING_STATE_UNSPECIFIED:
      return "SERVING_STATE_UNSPECIFIED";
    case Engine_RecommendationMetadata_ServingState.INACTIVE:
      return "INACTIVE";
    case Engine_RecommendationMetadata_ServingState.ACTIVE:
      return "ACTIVE";
    case Engine_RecommendationMetadata_ServingState.TUNED:
      return "TUNED";
    case Engine_RecommendationMetadata_ServingState.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * Describes whether this engine have sufficient training data
 * to be continuously trained.
 */
export enum Engine_RecommendationMetadata_DataState {
  /** DATA_STATE_UNSPECIFIED - Unspecified default value, should never be explicitly set. */
  DATA_STATE_UNSPECIFIED = 0,
  /** DATA_OK - The engine has sufficient training data. */
  DATA_OK = 1,
  /**
   * DATA_ERROR - The engine does not have sufficient training data. Error
   * messages can be queried via Stackdriver.
   */
  DATA_ERROR = 2,
  UNRECOGNIZED = -1,
}

export function engine_RecommendationMetadata_DataStateFromJSON(object: any): Engine_RecommendationMetadata_DataState {
  switch (object) {
    case 0:
    case "DATA_STATE_UNSPECIFIED":
      return Engine_RecommendationMetadata_DataState.DATA_STATE_UNSPECIFIED;
    case 1:
    case "DATA_OK":
      return Engine_RecommendationMetadata_DataState.DATA_OK;
    case 2:
    case "DATA_ERROR":
      return Engine_RecommendationMetadata_DataState.DATA_ERROR;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Engine_RecommendationMetadata_DataState.UNRECOGNIZED;
  }
}

export function engine_RecommendationMetadata_DataStateToJSON(object: Engine_RecommendationMetadata_DataState): string {
  switch (object) {
    case Engine_RecommendationMetadata_DataState.DATA_STATE_UNSPECIFIED:
      return "DATA_STATE_UNSPECIFIED";
    case Engine_RecommendationMetadata_DataState.DATA_OK:
      return "DATA_OK";
    case Engine_RecommendationMetadata_DataState.DATA_ERROR:
      return "DATA_ERROR";
    case Engine_RecommendationMetadata_DataState.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * Additional information of a Chat Engine.
 * Fields in this message are output only.
 */
export interface Engine_ChatEngineMetadata {
  /**
   * The resource name of a Dialogflow agent, that this Chat Engine refers
   * to.
   *
   * Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
   * ID>`.
   */
  dialogflowAgent: string;
}

function createBaseEngine(): Engine {
  return {
    similarDocumentsConfig: undefined,
    chatEngineConfig: undefined,
    searchEngineConfig: undefined,
    mediaRecommendationEngineConfig: undefined,
    recommendationMetadata: undefined,
    chatEngineMetadata: undefined,
    name: "",
    displayName: "",
    createTime: undefined,
    updateTime: undefined,
    dataStoreIds: [],
    solutionType: 0,
    industryVertical: 0,
    commonConfig: undefined,
  };
}

export const Engine: MessageFns<Engine> = {
  encode(message: Engine, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.similarDocumentsConfig !== undefined) {
      Engine_SimilarDocumentsEngineConfig.encode(message.similarDocumentsConfig, writer.uint32(74).fork()).join();
    }
    if (message.chatEngineConfig !== undefined) {
      Engine_ChatEngineConfig.encode(message.chatEngineConfig, writer.uint32(90).fork()).join();
    }
    if (message.searchEngineConfig !== undefined) {
      Engine_SearchEngineConfig.encode(message.searchEngineConfig, writer.uint32(106).fork()).join();
    }
    if (message.mediaRecommendationEngineConfig !== undefined) {
      Engine_MediaRecommendationEngineConfig.encode(message.mediaRecommendationEngineConfig, writer.uint32(114).fork())
        .join();
    }
    if (message.recommendationMetadata !== undefined) {
      Engine_RecommendationMetadata.encode(message.recommendationMetadata, writer.uint32(82).fork()).join();
    }
    if (message.chatEngineMetadata !== undefined) {
      Engine_ChatEngineMetadata.encode(message.chatEngineMetadata, writer.uint32(98).fork()).join();
    }
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.displayName !== "") {
      writer.uint32(18).string(message.displayName);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(26).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(34).fork()).join();
    }
    for (const v of message.dataStoreIds) {
      writer.uint32(42).string(v!);
    }
    if (message.solutionType !== 0) {
      writer.uint32(48).int32(message.solutionType);
    }
    if (message.industryVertical !== 0) {
      writer.uint32(128).int32(message.industryVertical);
    }
    if (message.commonConfig !== undefined) {
      Engine_CommonConfig.encode(message.commonConfig, writer.uint32(122).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Engine {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEngine();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 9:
          if (tag !== 74) {
            break;
          }

          message.similarDocumentsConfig = Engine_SimilarDocumentsEngineConfig.decode(reader, reader.uint32());
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.chatEngineConfig = Engine_ChatEngineConfig.decode(reader, reader.uint32());
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.searchEngineConfig = Engine_SearchEngineConfig.decode(reader, reader.uint32());
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.mediaRecommendationEngineConfig = Engine_MediaRecommendationEngineConfig.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.recommendationMetadata = Engine_RecommendationMetadata.decode(reader, reader.uint32());
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.chatEngineMetadata = Engine_ChatEngineMetadata.decode(reader, reader.uint32());
          continue;
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.dataStoreIds.push(reader.string());
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.solutionType = reader.int32() as any;
          continue;
        case 16:
          if (tag !== 128) {
            break;
          }

          message.industryVertical = reader.int32() as any;
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.commonConfig = Engine_CommonConfig.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Engine {
    return {
      similarDocumentsConfig: isSet(object.similarDocumentsConfig)
        ? Engine_SimilarDocumentsEngineConfig.fromJSON(object.similarDocumentsConfig)
        : undefined,
      chatEngineConfig: isSet(object.chatEngineConfig)
        ? Engine_ChatEngineConfig.fromJSON(object.chatEngineConfig)
        : undefined,
      searchEngineConfig: isSet(object.searchEngineConfig)
        ? Engine_SearchEngineConfig.fromJSON(object.searchEngineConfig)
        : undefined,
      mediaRecommendationEngineConfig: isSet(object.mediaRecommendationEngineConfig)
        ? Engine_MediaRecommendationEngineConfig.fromJSON(object.mediaRecommendationEngineConfig)
        : undefined,
      recommendationMetadata: isSet(object.recommendationMetadata)
        ? Engine_RecommendationMetadata.fromJSON(object.recommendationMetadata)
        : undefined,
      chatEngineMetadata: isSet(object.chatEngineMetadata)
        ? Engine_ChatEngineMetadata.fromJSON(object.chatEngineMetadata)
        : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      dataStoreIds: globalThis.Array.isArray(object?.dataStoreIds)
        ? object.dataStoreIds.map((e: any) => globalThis.String(e))
        : [],
      solutionType: isSet(object.solutionType) ? solutionTypeFromJSON(object.solutionType) : 0,
      industryVertical: isSet(object.industryVertical) ? industryVerticalFromJSON(object.industryVertical) : 0,
      commonConfig: isSet(object.commonConfig) ? Engine_CommonConfig.fromJSON(object.commonConfig) : undefined,
    };
  },

  toJSON(message: Engine): unknown {
    const obj: any = {};
    if (message.similarDocumentsConfig !== undefined) {
      obj.similarDocumentsConfig = Engine_SimilarDocumentsEngineConfig.toJSON(message.similarDocumentsConfig);
    }
    if (message.chatEngineConfig !== undefined) {
      obj.chatEngineConfig = Engine_ChatEngineConfig.toJSON(message.chatEngineConfig);
    }
    if (message.searchEngineConfig !== undefined) {
      obj.searchEngineConfig = Engine_SearchEngineConfig.toJSON(message.searchEngineConfig);
    }
    if (message.mediaRecommendationEngineConfig !== undefined) {
      obj.mediaRecommendationEngineConfig = Engine_MediaRecommendationEngineConfig.toJSON(
        message.mediaRecommendationEngineConfig,
      );
    }
    if (message.recommendationMetadata !== undefined) {
      obj.recommendationMetadata = Engine_RecommendationMetadata.toJSON(message.recommendationMetadata);
    }
    if (message.chatEngineMetadata !== undefined) {
      obj.chatEngineMetadata = Engine_ChatEngineMetadata.toJSON(message.chatEngineMetadata);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.dataStoreIds?.length) {
      obj.dataStoreIds = message.dataStoreIds;
    }
    if (message.solutionType !== 0) {
      obj.solutionType = solutionTypeToJSON(message.solutionType);
    }
    if (message.industryVertical !== 0) {
      obj.industryVertical = industryVerticalToJSON(message.industryVertical);
    }
    if (message.commonConfig !== undefined) {
      obj.commonConfig = Engine_CommonConfig.toJSON(message.commonConfig);
    }
    return obj;
  },

  create(base?: DeepPartial<Engine>): Engine {
    return Engine.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Engine>): Engine {
    const message = createBaseEngine();
    message.similarDocumentsConfig =
      (object.similarDocumentsConfig !== undefined && object.similarDocumentsConfig !== null)
        ? Engine_SimilarDocumentsEngineConfig.fromPartial(object.similarDocumentsConfig)
        : undefined;
    message.chatEngineConfig = (object.chatEngineConfig !== undefined && object.chatEngineConfig !== null)
      ? Engine_ChatEngineConfig.fromPartial(object.chatEngineConfig)
      : undefined;
    message.searchEngineConfig = (object.searchEngineConfig !== undefined && object.searchEngineConfig !== null)
      ? Engine_SearchEngineConfig.fromPartial(object.searchEngineConfig)
      : undefined;
    message.mediaRecommendationEngineConfig =
      (object.mediaRecommendationEngineConfig !== undefined && object.mediaRecommendationEngineConfig !== null)
        ? Engine_MediaRecommendationEngineConfig.fromPartial(object.mediaRecommendationEngineConfig)
        : undefined;
    message.recommendationMetadata =
      (object.recommendationMetadata !== undefined && object.recommendationMetadata !== null)
        ? Engine_RecommendationMetadata.fromPartial(object.recommendationMetadata)
        : undefined;
    message.chatEngineMetadata = (object.chatEngineMetadata !== undefined && object.chatEngineMetadata !== null)
      ? Engine_ChatEngineMetadata.fromPartial(object.chatEngineMetadata)
      : undefined;
    message.name = object.name ?? "";
    message.displayName = object.displayName ?? "";
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.dataStoreIds = object.dataStoreIds?.map((e) => e) || [];
    message.solutionType = object.solutionType ?? 0;
    message.industryVertical = object.industryVertical ?? 0;
    message.commonConfig = (object.commonConfig !== undefined && object.commonConfig !== null)
      ? Engine_CommonConfig.fromPartial(object.commonConfig)
      : undefined;
    return message;
  },
};

function createBaseEngine_SearchEngineConfig(): Engine_SearchEngineConfig {
  return { searchTier: 0, searchAddOns: [] };
}

export const Engine_SearchEngineConfig: MessageFns<Engine_SearchEngineConfig> = {
  encode(message: Engine_SearchEngineConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.searchTier !== 0) {
      writer.uint32(8).int32(message.searchTier);
    }
    writer.uint32(18).fork();
    for (const v of message.searchAddOns) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Engine_SearchEngineConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEngine_SearchEngineConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.searchTier = reader.int32() as any;
          continue;
        case 2:
          if (tag === 16) {
            message.searchAddOns.push(reader.int32() as any);

            continue;
          }

          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.searchAddOns.push(reader.int32() as any);
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Engine_SearchEngineConfig {
    return {
      searchTier: isSet(object.searchTier) ? searchTierFromJSON(object.searchTier) : 0,
      searchAddOns: globalThis.Array.isArray(object?.searchAddOns)
        ? object.searchAddOns.map((e: any) => searchAddOnFromJSON(e))
        : [],
    };
  },

  toJSON(message: Engine_SearchEngineConfig): unknown {
    const obj: any = {};
    if (message.searchTier !== 0) {
      obj.searchTier = searchTierToJSON(message.searchTier);
    }
    if (message.searchAddOns?.length) {
      obj.searchAddOns = message.searchAddOns.map((e) => searchAddOnToJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<Engine_SearchEngineConfig>): Engine_SearchEngineConfig {
    return Engine_SearchEngineConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Engine_SearchEngineConfig>): Engine_SearchEngineConfig {
    const message = createBaseEngine_SearchEngineConfig();
    message.searchTier = object.searchTier ?? 0;
    message.searchAddOns = object.searchAddOns?.map((e) => e) || [];
    return message;
  },
};

function createBaseEngine_SimilarDocumentsEngineConfig(): Engine_SimilarDocumentsEngineConfig {
  return {};
}

export const Engine_SimilarDocumentsEngineConfig: MessageFns<Engine_SimilarDocumentsEngineConfig> = {
  encode(_: Engine_SimilarDocumentsEngineConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Engine_SimilarDocumentsEngineConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEngine_SimilarDocumentsEngineConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Engine_SimilarDocumentsEngineConfig {
    return {};
  },

  toJSON(_: Engine_SimilarDocumentsEngineConfig): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<Engine_SimilarDocumentsEngineConfig>): Engine_SimilarDocumentsEngineConfig {
    return Engine_SimilarDocumentsEngineConfig.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<Engine_SimilarDocumentsEngineConfig>): Engine_SimilarDocumentsEngineConfig {
    const message = createBaseEngine_SimilarDocumentsEngineConfig();
    return message;
  },
};

function createBaseEngine_MediaRecommendationEngineConfig(): Engine_MediaRecommendationEngineConfig {
  return { type: "", optimizationObjective: "", optimizationObjectiveConfig: undefined, trainingState: 0 };
}

export const Engine_MediaRecommendationEngineConfig: MessageFns<Engine_MediaRecommendationEngineConfig> = {
  encode(message: Engine_MediaRecommendationEngineConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== "") {
      writer.uint32(10).string(message.type);
    }
    if (message.optimizationObjective !== "") {
      writer.uint32(18).string(message.optimizationObjective);
    }
    if (message.optimizationObjectiveConfig !== undefined) {
      Engine_MediaRecommendationEngineConfig_OptimizationObjectiveConfig.encode(
        message.optimizationObjectiveConfig,
        writer.uint32(26).fork(),
      ).join();
    }
    if (message.trainingState !== 0) {
      writer.uint32(32).int32(message.trainingState);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Engine_MediaRecommendationEngineConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEngine_MediaRecommendationEngineConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.type = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.optimizationObjective = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.optimizationObjectiveConfig = Engine_MediaRecommendationEngineConfig_OptimizationObjectiveConfig
            .decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.trainingState = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Engine_MediaRecommendationEngineConfig {
    return {
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      optimizationObjective: isSet(object.optimizationObjective) ? globalThis.String(object.optimizationObjective) : "",
      optimizationObjectiveConfig: isSet(object.optimizationObjectiveConfig)
        ? Engine_MediaRecommendationEngineConfig_OptimizationObjectiveConfig.fromJSON(
          object.optimizationObjectiveConfig,
        )
        : undefined,
      trainingState: isSet(object.trainingState)
        ? engine_MediaRecommendationEngineConfig_TrainingStateFromJSON(object.trainingState)
        : 0,
    };
  },

  toJSON(message: Engine_MediaRecommendationEngineConfig): unknown {
    const obj: any = {};
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.optimizationObjective !== "") {
      obj.optimizationObjective = message.optimizationObjective;
    }
    if (message.optimizationObjectiveConfig !== undefined) {
      obj.optimizationObjectiveConfig = Engine_MediaRecommendationEngineConfig_OptimizationObjectiveConfig.toJSON(
        message.optimizationObjectiveConfig,
      );
    }
    if (message.trainingState !== 0) {
      obj.trainingState = engine_MediaRecommendationEngineConfig_TrainingStateToJSON(message.trainingState);
    }
    return obj;
  },

  create(base?: DeepPartial<Engine_MediaRecommendationEngineConfig>): Engine_MediaRecommendationEngineConfig {
    return Engine_MediaRecommendationEngineConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Engine_MediaRecommendationEngineConfig>): Engine_MediaRecommendationEngineConfig {
    const message = createBaseEngine_MediaRecommendationEngineConfig();
    message.type = object.type ?? "";
    message.optimizationObjective = object.optimizationObjective ?? "";
    message.optimizationObjectiveConfig =
      (object.optimizationObjectiveConfig !== undefined && object.optimizationObjectiveConfig !== null)
        ? Engine_MediaRecommendationEngineConfig_OptimizationObjectiveConfig.fromPartial(
          object.optimizationObjectiveConfig,
        )
        : undefined;
    message.trainingState = object.trainingState ?? 0;
    return message;
  },
};

function createBaseEngine_MediaRecommendationEngineConfig_OptimizationObjectiveConfig(): Engine_MediaRecommendationEngineConfig_OptimizationObjectiveConfig {
  return { targetField: "", targetFieldValueFloat: 0 };
}

export const Engine_MediaRecommendationEngineConfig_OptimizationObjectiveConfig: MessageFns<
  Engine_MediaRecommendationEngineConfig_OptimizationObjectiveConfig
> = {
  encode(
    message: Engine_MediaRecommendationEngineConfig_OptimizationObjectiveConfig,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.targetField !== "") {
      writer.uint32(10).string(message.targetField);
    }
    if (message.targetFieldValueFloat !== 0) {
      writer.uint32(21).float(message.targetFieldValueFloat);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): Engine_MediaRecommendationEngineConfig_OptimizationObjectiveConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEngine_MediaRecommendationEngineConfig_OptimizationObjectiveConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.targetField = reader.string();
          continue;
        case 2:
          if (tag !== 21) {
            break;
          }

          message.targetFieldValueFloat = reader.float();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Engine_MediaRecommendationEngineConfig_OptimizationObjectiveConfig {
    return {
      targetField: isSet(object.targetField) ? globalThis.String(object.targetField) : "",
      targetFieldValueFloat: isSet(object.targetFieldValueFloat) ? globalThis.Number(object.targetFieldValueFloat) : 0,
    };
  },

  toJSON(message: Engine_MediaRecommendationEngineConfig_OptimizationObjectiveConfig): unknown {
    const obj: any = {};
    if (message.targetField !== "") {
      obj.targetField = message.targetField;
    }
    if (message.targetFieldValueFloat !== 0) {
      obj.targetFieldValueFloat = message.targetFieldValueFloat;
    }
    return obj;
  },

  create(
    base?: DeepPartial<Engine_MediaRecommendationEngineConfig_OptimizationObjectiveConfig>,
  ): Engine_MediaRecommendationEngineConfig_OptimizationObjectiveConfig {
    return Engine_MediaRecommendationEngineConfig_OptimizationObjectiveConfig.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<Engine_MediaRecommendationEngineConfig_OptimizationObjectiveConfig>,
  ): Engine_MediaRecommendationEngineConfig_OptimizationObjectiveConfig {
    const message = createBaseEngine_MediaRecommendationEngineConfig_OptimizationObjectiveConfig();
    message.targetField = object.targetField ?? "";
    message.targetFieldValueFloat = object.targetFieldValueFloat ?? 0;
    return message;
  },
};

function createBaseEngine_ChatEngineConfig(): Engine_ChatEngineConfig {
  return { agentCreationConfig: undefined, dialogflowAgentToLink: "" };
}

export const Engine_ChatEngineConfig: MessageFns<Engine_ChatEngineConfig> = {
  encode(message: Engine_ChatEngineConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.agentCreationConfig !== undefined) {
      Engine_ChatEngineConfig_AgentCreationConfig.encode(message.agentCreationConfig, writer.uint32(10).fork()).join();
    }
    if (message.dialogflowAgentToLink !== "") {
      writer.uint32(18).string(message.dialogflowAgentToLink);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Engine_ChatEngineConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEngine_ChatEngineConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.agentCreationConfig = Engine_ChatEngineConfig_AgentCreationConfig.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.dialogflowAgentToLink = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Engine_ChatEngineConfig {
    return {
      agentCreationConfig: isSet(object.agentCreationConfig)
        ? Engine_ChatEngineConfig_AgentCreationConfig.fromJSON(object.agentCreationConfig)
        : undefined,
      dialogflowAgentToLink: isSet(object.dialogflowAgentToLink) ? globalThis.String(object.dialogflowAgentToLink) : "",
    };
  },

  toJSON(message: Engine_ChatEngineConfig): unknown {
    const obj: any = {};
    if (message.agentCreationConfig !== undefined) {
      obj.agentCreationConfig = Engine_ChatEngineConfig_AgentCreationConfig.toJSON(message.agentCreationConfig);
    }
    if (message.dialogflowAgentToLink !== "") {
      obj.dialogflowAgentToLink = message.dialogflowAgentToLink;
    }
    return obj;
  },

  create(base?: DeepPartial<Engine_ChatEngineConfig>): Engine_ChatEngineConfig {
    return Engine_ChatEngineConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Engine_ChatEngineConfig>): Engine_ChatEngineConfig {
    const message = createBaseEngine_ChatEngineConfig();
    message.agentCreationConfig = (object.agentCreationConfig !== undefined && object.agentCreationConfig !== null)
      ? Engine_ChatEngineConfig_AgentCreationConfig.fromPartial(object.agentCreationConfig)
      : undefined;
    message.dialogflowAgentToLink = object.dialogflowAgentToLink ?? "";
    return message;
  },
};

function createBaseEngine_ChatEngineConfig_AgentCreationConfig(): Engine_ChatEngineConfig_AgentCreationConfig {
  return { business: "", defaultLanguageCode: "", timeZone: "", location: "" };
}

export const Engine_ChatEngineConfig_AgentCreationConfig: MessageFns<Engine_ChatEngineConfig_AgentCreationConfig> = {
  encode(
    message: Engine_ChatEngineConfig_AgentCreationConfig,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.business !== "") {
      writer.uint32(10).string(message.business);
    }
    if (message.defaultLanguageCode !== "") {
      writer.uint32(18).string(message.defaultLanguageCode);
    }
    if (message.timeZone !== "") {
      writer.uint32(26).string(message.timeZone);
    }
    if (message.location !== "") {
      writer.uint32(34).string(message.location);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Engine_ChatEngineConfig_AgentCreationConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEngine_ChatEngineConfig_AgentCreationConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.business = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.defaultLanguageCode = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.timeZone = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.location = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Engine_ChatEngineConfig_AgentCreationConfig {
    return {
      business: isSet(object.business) ? globalThis.String(object.business) : "",
      defaultLanguageCode: isSet(object.defaultLanguageCode) ? globalThis.String(object.defaultLanguageCode) : "",
      timeZone: isSet(object.timeZone) ? globalThis.String(object.timeZone) : "",
      location: isSet(object.location) ? globalThis.String(object.location) : "",
    };
  },

  toJSON(message: Engine_ChatEngineConfig_AgentCreationConfig): unknown {
    const obj: any = {};
    if (message.business !== "") {
      obj.business = message.business;
    }
    if (message.defaultLanguageCode !== "") {
      obj.defaultLanguageCode = message.defaultLanguageCode;
    }
    if (message.timeZone !== "") {
      obj.timeZone = message.timeZone;
    }
    if (message.location !== "") {
      obj.location = message.location;
    }
    return obj;
  },

  create(base?: DeepPartial<Engine_ChatEngineConfig_AgentCreationConfig>): Engine_ChatEngineConfig_AgentCreationConfig {
    return Engine_ChatEngineConfig_AgentCreationConfig.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<Engine_ChatEngineConfig_AgentCreationConfig>,
  ): Engine_ChatEngineConfig_AgentCreationConfig {
    const message = createBaseEngine_ChatEngineConfig_AgentCreationConfig();
    message.business = object.business ?? "";
    message.defaultLanguageCode = object.defaultLanguageCode ?? "";
    message.timeZone = object.timeZone ?? "";
    message.location = object.location ?? "";
    return message;
  },
};

function createBaseEngine_CommonConfig(): Engine_CommonConfig {
  return { companyName: "" };
}

export const Engine_CommonConfig: MessageFns<Engine_CommonConfig> = {
  encode(message: Engine_CommonConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.companyName !== "") {
      writer.uint32(10).string(message.companyName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Engine_CommonConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEngine_CommonConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.companyName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Engine_CommonConfig {
    return { companyName: isSet(object.companyName) ? globalThis.String(object.companyName) : "" };
  },

  toJSON(message: Engine_CommonConfig): unknown {
    const obj: any = {};
    if (message.companyName !== "") {
      obj.companyName = message.companyName;
    }
    return obj;
  },

  create(base?: DeepPartial<Engine_CommonConfig>): Engine_CommonConfig {
    return Engine_CommonConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Engine_CommonConfig>): Engine_CommonConfig {
    const message = createBaseEngine_CommonConfig();
    message.companyName = object.companyName ?? "";
    return message;
  },
};

function createBaseEngine_RecommendationMetadata(): Engine_RecommendationMetadata {
  return { servingState: 0, dataState: 0, lastTuneTime: undefined, tuningOperation: "" };
}

export const Engine_RecommendationMetadata: MessageFns<Engine_RecommendationMetadata> = {
  encode(message: Engine_RecommendationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.servingState !== 0) {
      writer.uint32(8).int32(message.servingState);
    }
    if (message.dataState !== 0) {
      writer.uint32(16).int32(message.dataState);
    }
    if (message.lastTuneTime !== undefined) {
      Timestamp.encode(toTimestamp(message.lastTuneTime), writer.uint32(26).fork()).join();
    }
    if (message.tuningOperation !== "") {
      writer.uint32(34).string(message.tuningOperation);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Engine_RecommendationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEngine_RecommendationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.servingState = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.dataState = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.lastTuneTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.tuningOperation = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Engine_RecommendationMetadata {
    return {
      servingState: isSet(object.servingState)
        ? engine_RecommendationMetadata_ServingStateFromJSON(object.servingState)
        : 0,
      dataState: isSet(object.dataState) ? engine_RecommendationMetadata_DataStateFromJSON(object.dataState) : 0,
      lastTuneTime: isSet(object.lastTuneTime) ? fromJsonTimestamp(object.lastTuneTime) : undefined,
      tuningOperation: isSet(object.tuningOperation) ? globalThis.String(object.tuningOperation) : "",
    };
  },

  toJSON(message: Engine_RecommendationMetadata): unknown {
    const obj: any = {};
    if (message.servingState !== 0) {
      obj.servingState = engine_RecommendationMetadata_ServingStateToJSON(message.servingState);
    }
    if (message.dataState !== 0) {
      obj.dataState = engine_RecommendationMetadata_DataStateToJSON(message.dataState);
    }
    if (message.lastTuneTime !== undefined) {
      obj.lastTuneTime = message.lastTuneTime.toISOString();
    }
    if (message.tuningOperation !== "") {
      obj.tuningOperation = message.tuningOperation;
    }
    return obj;
  },

  create(base?: DeepPartial<Engine_RecommendationMetadata>): Engine_RecommendationMetadata {
    return Engine_RecommendationMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Engine_RecommendationMetadata>): Engine_RecommendationMetadata {
    const message = createBaseEngine_RecommendationMetadata();
    message.servingState = object.servingState ?? 0;
    message.dataState = object.dataState ?? 0;
    message.lastTuneTime = object.lastTuneTime ?? undefined;
    message.tuningOperation = object.tuningOperation ?? "";
    return message;
  },
};

function createBaseEngine_ChatEngineMetadata(): Engine_ChatEngineMetadata {
  return { dialogflowAgent: "" };
}

export const Engine_ChatEngineMetadata: MessageFns<Engine_ChatEngineMetadata> = {
  encode(message: Engine_ChatEngineMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.dialogflowAgent !== "") {
      writer.uint32(10).string(message.dialogflowAgent);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Engine_ChatEngineMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEngine_ChatEngineMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.dialogflowAgent = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Engine_ChatEngineMetadata {
    return { dialogflowAgent: isSet(object.dialogflowAgent) ? globalThis.String(object.dialogflowAgent) : "" };
  },

  toJSON(message: Engine_ChatEngineMetadata): unknown {
    const obj: any = {};
    if (message.dialogflowAgent !== "") {
      obj.dialogflowAgent = message.dialogflowAgent;
    }
    return obj;
  },

  create(base?: DeepPartial<Engine_ChatEngineMetadata>): Engine_ChatEngineMetadata {
    return Engine_ChatEngineMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Engine_ChatEngineMetadata>): Engine_ChatEngineMetadata {
    const message = createBaseEngine_ChatEngineMetadata();
    message.dialogflowAgent = object.dialogflowAgent ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
