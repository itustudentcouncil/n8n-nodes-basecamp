// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/discoveryengine/v1alpha/acl_config_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { AclConfig } from "./acl_config.js";

export const protobufPackage = "google.cloud.discoveryengine.v1alpha";

/** Request message for GetAclConfigRequest method. */
export interface GetAclConfigRequest {
  /**
   * Required. Resource name of
   * [AclConfig][google.cloud.discoveryengine.v1alpha.AclConfig], such as
   * `projects/* /locations/* /aclConfig`.
   *
   * If the caller does not have permission to access the
   * [AclConfig][google.cloud.discoveryengine.v1alpha.AclConfig], regardless of
   * whether or not it exists, a PERMISSION_DENIED error is returned.
   */
  name: string;
}

/** Request message for UpdateAclConfig method. */
export interface UpdateAclConfigRequest {
  aclConfig: AclConfig | undefined;
}

function createBaseGetAclConfigRequest(): GetAclConfigRequest {
  return { name: "" };
}

export const GetAclConfigRequest: MessageFns<GetAclConfigRequest> = {
  encode(message: GetAclConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAclConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAclConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAclConfigRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetAclConfigRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetAclConfigRequest>): GetAclConfigRequest {
    return GetAclConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetAclConfigRequest>): GetAclConfigRequest {
    const message = createBaseGetAclConfigRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpdateAclConfigRequest(): UpdateAclConfigRequest {
  return { aclConfig: undefined };
}

export const UpdateAclConfigRequest: MessageFns<UpdateAclConfigRequest> = {
  encode(message: UpdateAclConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.aclConfig !== undefined) {
      AclConfig.encode(message.aclConfig, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateAclConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateAclConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.aclConfig = AclConfig.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateAclConfigRequest {
    return { aclConfig: isSet(object.aclConfig) ? AclConfig.fromJSON(object.aclConfig) : undefined };
  },

  toJSON(message: UpdateAclConfigRequest): unknown {
    const obj: any = {};
    if (message.aclConfig !== undefined) {
      obj.aclConfig = AclConfig.toJSON(message.aclConfig);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateAclConfigRequest>): UpdateAclConfigRequest {
    return UpdateAclConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateAclConfigRequest>): UpdateAclConfigRequest {
    const message = createBaseUpdateAclConfigRequest();
    message.aclConfig = (object.aclConfig !== undefined && object.aclConfig !== null)
      ? AclConfig.fromPartial(object.aclConfig)
      : undefined;
    return message;
  },
};

/** Service for managing Acl Configuration. */
export type AclConfigServiceDefinition = typeof AclConfigServiceDefinition;
export const AclConfigServiceDefinition = {
  name: "AclConfigService",
  fullName: "google.cloud.discoveryengine.v1alpha.AclConfigService",
  methods: {
    /**
     * Default ACL configuration for use in a location of a customer's project.
     * Updates will only reflect to new data stores. Existing data stores will
     * still use the old value.
     */
    updateAclConfig: {
      name: "UpdateAclConfig",
      requestType: UpdateAclConfigRequest,
      requestStream: false,
      responseType: AclConfig,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              73,
              58,
              10,
              97,
              99,
              108,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              50,
              59,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              97,
              99,
              108,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              99,
              108,
              67,
              111,
              110,
              102,
              105,
              103,
              125,
            ]),
          ],
        },
      },
    },
    /** Gets the [AclConfig][google.cloud.discoveryengine.v1alpha.AclConfig]. */
    getAclConfig: {
      name: "GetAclConfig",
      requestType: GetAclConfigRequest,
      requestStream: false,
      responseType: AclConfig,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              50,
              18,
              48,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              99,
              108,
              67,
              111,
              110,
              102,
              105,
              103,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface AclConfigServiceImplementation<CallContextExt = {}> {
  /**
   * Default ACL configuration for use in a location of a customer's project.
   * Updates will only reflect to new data stores. Existing data stores will
   * still use the old value.
   */
  updateAclConfig(
    request: UpdateAclConfigRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AclConfig>>;
  /** Gets the [AclConfig][google.cloud.discoveryengine.v1alpha.AclConfig]. */
  getAclConfig(request: GetAclConfigRequest, context: CallContext & CallContextExt): Promise<DeepPartial<AclConfig>>;
}

export interface AclConfigServiceClient<CallOptionsExt = {}> {
  /**
   * Default ACL configuration for use in a location of a customer's project.
   * Updates will only reflect to new data stores. Existing data stores will
   * still use the old value.
   */
  updateAclConfig(
    request: DeepPartial<UpdateAclConfigRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AclConfig>;
  /** Gets the [AclConfig][google.cloud.discoveryengine.v1alpha.AclConfig]. */
  getAclConfig(request: DeepPartial<GetAclConfigRequest>, options?: CallOptions & CallOptionsExt): Promise<AclConfig>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
