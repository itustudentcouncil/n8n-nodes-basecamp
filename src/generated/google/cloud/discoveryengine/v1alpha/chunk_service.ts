// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/discoveryengine/v1alpha/chunk_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Chunk } from "./chunk.js";

export const protobufPackage = "google.cloud.discoveryengine.v1alpha";

/**
 * Request message for
 * [ChunkService.GetChunk][google.cloud.discoveryengine.v1alpha.ChunkService.GetChunk]
 * method.
 */
export interface GetChunkRequest {
  /**
   * Required. Full resource name of
   * [Chunk][google.cloud.discoveryengine.v1alpha.Chunk], such as
   * `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/branches/{branch}/documents/{document}/chunks/{chunk}`.
   *
   * If the caller does not have permission to access the
   * [Chunk][google.cloud.discoveryengine.v1alpha.Chunk], regardless of whether
   * or not it exists, a `PERMISSION_DENIED` error is returned.
   *
   * If the requested [Chunk][google.cloud.discoveryengine.v1alpha.Chunk] does
   * not exist, a `NOT_FOUND` error is returned.
   */
  name: string;
}

/**
 * Request message for
 * [ChunkService.ListChunks][google.cloud.discoveryengine.v1alpha.ChunkService.ListChunks]
 * method.
 */
export interface ListChunksRequest {
  /**
   * Required. The parent document resource name, such as
   * `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/branches/{branch}/documents/{document}`.
   *
   * If the caller does not have permission to list
   * [Chunk][google.cloud.discoveryengine.v1alpha.Chunk]s under this document,
   * regardless of whether or not this document exists, a `PERMISSION_DENIED`
   * error is returned.
   */
  parent: string;
  /**
   * Maximum number of [Chunk][google.cloud.discoveryengine.v1alpha.Chunk]s to
   * return. If unspecified, defaults to 100. The maximum allowed value is 1000.
   * Values above 1000 will be coerced to 1000.
   *
   * If this field is negative, an `INVALID_ARGUMENT` error is returned.
   */
  pageSize: number;
  /**
   * A page token
   * [ListChunksResponse.next_page_token][google.cloud.discoveryengine.v1alpha.ListChunksResponse.next_page_token],
   * received from a previous
   * [ChunkService.ListChunks][google.cloud.discoveryengine.v1alpha.ChunkService.ListChunks]
   * call. Provide this to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to
   * [ChunkService.ListChunks][google.cloud.discoveryengine.v1alpha.ChunkService.ListChunks]
   * must match the call that provided the page token. Otherwise, an
   * `INVALID_ARGUMENT` error is returned.
   */
  pageToken: string;
}

/**
 * Response message for
 * [ChunkService.ListChunks][google.cloud.discoveryengine.v1alpha.ChunkService.ListChunks]
 * method.
 */
export interface ListChunksResponse {
  /** The [Chunk][google.cloud.discoveryengine.v1alpha.Chunk]s. */
  chunks: Chunk[];
  /**
   * A token that can be sent as
   * [ListChunksRequest.page_token][google.cloud.discoveryengine.v1alpha.ListChunksRequest.page_token]
   * to retrieve the next page. If this field is omitted, there are no
   * subsequent pages.
   */
  nextPageToken: string;
}

function createBaseGetChunkRequest(): GetChunkRequest {
  return { name: "" };
}

export const GetChunkRequest: MessageFns<GetChunkRequest> = {
  encode(message: GetChunkRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetChunkRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetChunkRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetChunkRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetChunkRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetChunkRequest>): GetChunkRequest {
    return GetChunkRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetChunkRequest>): GetChunkRequest {
    const message = createBaseGetChunkRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListChunksRequest(): ListChunksRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListChunksRequest: MessageFns<ListChunksRequest> = {
  encode(message: ListChunksRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListChunksRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListChunksRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListChunksRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListChunksRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListChunksRequest>): ListChunksRequest {
    return ListChunksRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListChunksRequest>): ListChunksRequest {
    const message = createBaseListChunksRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListChunksResponse(): ListChunksResponse {
  return { chunks: [], nextPageToken: "" };
}

export const ListChunksResponse: MessageFns<ListChunksResponse> = {
  encode(message: ListChunksResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.chunks) {
      Chunk.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListChunksResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListChunksResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.chunks.push(Chunk.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListChunksResponse {
    return {
      chunks: globalThis.Array.isArray(object?.chunks) ? object.chunks.map((e: any) => Chunk.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListChunksResponse): unknown {
    const obj: any = {};
    if (message.chunks?.length) {
      obj.chunks = message.chunks.map((e) => Chunk.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListChunksResponse>): ListChunksResponse {
    return ListChunksResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListChunksResponse>): ListChunksResponse {
    const message = createBaseListChunksResponse();
    message.chunks = object.chunks?.map((e) => Chunk.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

/**
 * Service for displaying processed
 * [Chunk][google.cloud.discoveryengine.v1alpha.Chunk] information of the
 * customer's unstructured data.
 */
export type ChunkServiceDefinition = typeof ChunkServiceDefinition;
export const ChunkServiceDefinition = {
  name: "ChunkService",
  fullName: "google.cloud.discoveryengine.v1alpha.ChunkService",
  methods: {
    /** Gets a [Document][google.cloud.discoveryengine.v1alpha.Document]. */
    getChunk: {
      name: "GetChunk",
      requestType: GetChunkRequest,
      requestStream: false,
      responseType: Chunk,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              186,
              1,
              90,
              99,
              18,
              97,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              47,
              98,
              114,
              97,
              110,
              99,
              104,
              101,
              115,
              47,
              42,
              47,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              99,
              104,
              117,
              110,
              107,
              115,
              47,
              42,
              125,
              18,
              83,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              47,
              98,
              114,
              97,
              110,
              99,
              104,
              101,
              115,
              47,
              42,
              47,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              99,
              104,
              117,
              110,
              107,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Gets a list of [Chunk][google.cloud.discoveryengine.v1alpha.Chunk]s. */
    listChunks: {
      name: "ListChunks",
      requestType: ListChunksRequest,
      requestStream: false,
      responseType: ListChunksResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              186,
              1,
              90,
              99,
              18,
              97,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              47,
              98,
              114,
              97,
              110,
              99,
              104,
              101,
              115,
              47,
              42,
              47,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
              47,
              99,
              104,
              117,
              110,
              107,
              115,
              18,
              83,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              47,
              98,
              114,
              97,
              110,
              99,
              104,
              101,
              115,
              47,
              42,
              47,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
              47,
              99,
              104,
              117,
              110,
              107,
              115,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface ChunkServiceImplementation<CallContextExt = {}> {
  /** Gets a [Document][google.cloud.discoveryengine.v1alpha.Document]. */
  getChunk(request: GetChunkRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Chunk>>;
  /** Gets a list of [Chunk][google.cloud.discoveryengine.v1alpha.Chunk]s. */
  listChunks(
    request: ListChunksRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListChunksResponse>>;
}

export interface ChunkServiceClient<CallOptionsExt = {}> {
  /** Gets a [Document][google.cloud.discoveryengine.v1alpha.Document]. */
  getChunk(request: DeepPartial<GetChunkRequest>, options?: CallOptions & CallOptionsExt): Promise<Chunk>;
  /** Gets a list of [Chunk][google.cloud.discoveryengine.v1alpha.Chunk]s. */
  listChunks(
    request: DeepPartial<ListChunksRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListChunksResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
