// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/discoveryengine/v1alpha/document_processing_config.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.cloud.discoveryengine.v1alpha";

/**
 * A singleton resource of
 * [DataStore][google.cloud.discoveryengine.v1alpha.DataStore]. It's empty when
 * [DataStore][google.cloud.discoveryengine.v1alpha.DataStore] is created, which
 * defaults to digital parser. The first call to
 * [DataStoreService.UpdateDocumentProcessingConfig][google.cloud.discoveryengine.v1alpha.DataStoreService.UpdateDocumentProcessingConfig]
 * method will initialize the config.
 */
export interface DocumentProcessingConfig {
  /**
   * The full resource name of the Document Processing Config.
   * Format:
   * `projects/* /locations/* /collections/* /dataStores/* /documentProcessingConfig`.
   */
  name: string;
  /** Whether chunking mode is enabled. */
  chunkingConfig:
    | DocumentProcessingConfig_ChunkingConfig
    | undefined;
  /**
   * Configurations for default Document parser.
   * If not specified, we will configure it as default DigitalParsingConfig, and
   * the default parsing config will be applied to all file types for Document
   * parsing.
   */
  defaultParsingConfig:
    | DocumentProcessingConfig_ParsingConfig
    | undefined;
  /**
   * Map from file type to override the default parsing configuration based on
   * the file type. Supported keys:
   *
   * * `pdf`: Override parsing config for PDF files, either digital parsing, ocr
   * parsing or layout parsing is supported.
   * * `html`: Override parsing config for HTML files, only digital parsing and
   * layout parsing are supported.
   * * `docx`: Override parsing config for DOCX files, only digital parsing and
   * layout parsing are supported.
   * * `pptx`: Override parsing config for PPTX files, only digital parsing and
   * layout parsing are supported.
   * * `xlsx`: Override parsing config for XLSX files, only digital parsing and
   * layout parsing are supported.
   */
  parsingConfigOverrides: { [key: string]: DocumentProcessingConfig_ParsingConfig };
}

/** Configuration for chunking config. */
export interface DocumentProcessingConfig_ChunkingConfig {
  /** Configuration for the layout based chunking. */
  layoutBasedChunkingConfig?: DocumentProcessingConfig_ChunkingConfig_LayoutBasedChunkingConfig | undefined;
}

/** Configuration for the layout based chunking. */
export interface DocumentProcessingConfig_ChunkingConfig_LayoutBasedChunkingConfig {
  /**
   * The token size limit for each chunk.
   *
   * Supported values: 100-500 (inclusive).
   * Default value: 500.
   */
  chunkSize: number;
  /**
   * Whether to include appending different levels of headings to chunks
   * from the middle of the document to prevent context loss.
   *
   * Default value: False.
   */
  includeAncestorHeadings: boolean;
}

/** Related configurations applied to a specific type of document parser. */
export interface DocumentProcessingConfig_ParsingConfig {
  /** Configurations applied to digital parser. */
  digitalParsingConfig?:
    | DocumentProcessingConfig_ParsingConfig_DigitalParsingConfig
    | undefined;
  /**
   * Configurations applied to OCR parser. Currently it only applies to
   * PDFs.
   */
  ocrParsingConfig?:
    | DocumentProcessingConfig_ParsingConfig_OcrParsingConfig
    | undefined;
  /** Configurations applied to layout parser. */
  layoutParsingConfig?: DocumentProcessingConfig_ParsingConfig_LayoutParsingConfig | undefined;
}

/** The digital parsing configurations for documents. */
export interface DocumentProcessingConfig_ParsingConfig_DigitalParsingConfig {
}

/** The OCR parsing configurations for documents. */
export interface DocumentProcessingConfig_ParsingConfig_OcrParsingConfig {
  /**
   * [DEPRECATED] This field is deprecated. To use the additional enhanced
   * document elements processing, please switch to `layout_parsing_config`.
   *
   * @deprecated
   */
  enhancedDocumentElements: string[];
  /**
   * If true, will use native text instead of OCR text on pages containing
   * native text.
   */
  useNativeText: boolean;
}

/** The layout parsing configurations for documents. */
export interface DocumentProcessingConfig_ParsingConfig_LayoutParsingConfig {
}

export interface DocumentProcessingConfig_ParsingConfigOverridesEntry {
  key: string;
  value: DocumentProcessingConfig_ParsingConfig | undefined;
}

function createBaseDocumentProcessingConfig(): DocumentProcessingConfig {
  return { name: "", chunkingConfig: undefined, defaultParsingConfig: undefined, parsingConfigOverrides: {} };
}

export const DocumentProcessingConfig: MessageFns<DocumentProcessingConfig> = {
  encode(message: DocumentProcessingConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.chunkingConfig !== undefined) {
      DocumentProcessingConfig_ChunkingConfig.encode(message.chunkingConfig, writer.uint32(26).fork()).join();
    }
    if (message.defaultParsingConfig !== undefined) {
      DocumentProcessingConfig_ParsingConfig.encode(message.defaultParsingConfig, writer.uint32(34).fork()).join();
    }
    Object.entries(message.parsingConfigOverrides).forEach(([key, value]) => {
      DocumentProcessingConfig_ParsingConfigOverridesEntry.encode({ key: key as any, value }, writer.uint32(42).fork())
        .join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DocumentProcessingConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDocumentProcessingConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.chunkingConfig = DocumentProcessingConfig_ChunkingConfig.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.defaultParsingConfig = DocumentProcessingConfig_ParsingConfig.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          const entry5 = DocumentProcessingConfig_ParsingConfigOverridesEntry.decode(reader, reader.uint32());
          if (entry5.value !== undefined) {
            message.parsingConfigOverrides[entry5.key] = entry5.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DocumentProcessingConfig {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      chunkingConfig: isSet(object.chunkingConfig)
        ? DocumentProcessingConfig_ChunkingConfig.fromJSON(object.chunkingConfig)
        : undefined,
      defaultParsingConfig: isSet(object.defaultParsingConfig)
        ? DocumentProcessingConfig_ParsingConfig.fromJSON(object.defaultParsingConfig)
        : undefined,
      parsingConfigOverrides: isObject(object.parsingConfigOverrides)
        ? Object.entries(object.parsingConfigOverrides).reduce<
          { [key: string]: DocumentProcessingConfig_ParsingConfig }
        >((acc, [key, value]) => {
          acc[key] = DocumentProcessingConfig_ParsingConfig.fromJSON(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: DocumentProcessingConfig): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.chunkingConfig !== undefined) {
      obj.chunkingConfig = DocumentProcessingConfig_ChunkingConfig.toJSON(message.chunkingConfig);
    }
    if (message.defaultParsingConfig !== undefined) {
      obj.defaultParsingConfig = DocumentProcessingConfig_ParsingConfig.toJSON(message.defaultParsingConfig);
    }
    if (message.parsingConfigOverrides) {
      const entries = Object.entries(message.parsingConfigOverrides);
      if (entries.length > 0) {
        obj.parsingConfigOverrides = {};
        entries.forEach(([k, v]) => {
          obj.parsingConfigOverrides[k] = DocumentProcessingConfig_ParsingConfig.toJSON(v);
        });
      }
    }
    return obj;
  },

  create(base?: DeepPartial<DocumentProcessingConfig>): DocumentProcessingConfig {
    return DocumentProcessingConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DocumentProcessingConfig>): DocumentProcessingConfig {
    const message = createBaseDocumentProcessingConfig();
    message.name = object.name ?? "";
    message.chunkingConfig = (object.chunkingConfig !== undefined && object.chunkingConfig !== null)
      ? DocumentProcessingConfig_ChunkingConfig.fromPartial(object.chunkingConfig)
      : undefined;
    message.defaultParsingConfig = (object.defaultParsingConfig !== undefined && object.defaultParsingConfig !== null)
      ? DocumentProcessingConfig_ParsingConfig.fromPartial(object.defaultParsingConfig)
      : undefined;
    message.parsingConfigOverrides = Object.entries(object.parsingConfigOverrides ?? {}).reduce<
      { [key: string]: DocumentProcessingConfig_ParsingConfig }
    >((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = DocumentProcessingConfig_ParsingConfig.fromPartial(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseDocumentProcessingConfig_ChunkingConfig(): DocumentProcessingConfig_ChunkingConfig {
  return { layoutBasedChunkingConfig: undefined };
}

export const DocumentProcessingConfig_ChunkingConfig: MessageFns<DocumentProcessingConfig_ChunkingConfig> = {
  encode(message: DocumentProcessingConfig_ChunkingConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.layoutBasedChunkingConfig !== undefined) {
      DocumentProcessingConfig_ChunkingConfig_LayoutBasedChunkingConfig.encode(
        message.layoutBasedChunkingConfig,
        writer.uint32(10).fork(),
      ).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DocumentProcessingConfig_ChunkingConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDocumentProcessingConfig_ChunkingConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.layoutBasedChunkingConfig = DocumentProcessingConfig_ChunkingConfig_LayoutBasedChunkingConfig.decode(
            reader,
            reader.uint32(),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DocumentProcessingConfig_ChunkingConfig {
    return {
      layoutBasedChunkingConfig: isSet(object.layoutBasedChunkingConfig)
        ? DocumentProcessingConfig_ChunkingConfig_LayoutBasedChunkingConfig.fromJSON(object.layoutBasedChunkingConfig)
        : undefined,
    };
  },

  toJSON(message: DocumentProcessingConfig_ChunkingConfig): unknown {
    const obj: any = {};
    if (message.layoutBasedChunkingConfig !== undefined) {
      obj.layoutBasedChunkingConfig = DocumentProcessingConfig_ChunkingConfig_LayoutBasedChunkingConfig.toJSON(
        message.layoutBasedChunkingConfig,
      );
    }
    return obj;
  },

  create(base?: DeepPartial<DocumentProcessingConfig_ChunkingConfig>): DocumentProcessingConfig_ChunkingConfig {
    return DocumentProcessingConfig_ChunkingConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DocumentProcessingConfig_ChunkingConfig>): DocumentProcessingConfig_ChunkingConfig {
    const message = createBaseDocumentProcessingConfig_ChunkingConfig();
    message.layoutBasedChunkingConfig =
      (object.layoutBasedChunkingConfig !== undefined && object.layoutBasedChunkingConfig !== null)
        ? DocumentProcessingConfig_ChunkingConfig_LayoutBasedChunkingConfig.fromPartial(
          object.layoutBasedChunkingConfig,
        )
        : undefined;
    return message;
  },
};

function createBaseDocumentProcessingConfig_ChunkingConfig_LayoutBasedChunkingConfig(): DocumentProcessingConfig_ChunkingConfig_LayoutBasedChunkingConfig {
  return { chunkSize: 0, includeAncestorHeadings: false };
}

export const DocumentProcessingConfig_ChunkingConfig_LayoutBasedChunkingConfig: MessageFns<
  DocumentProcessingConfig_ChunkingConfig_LayoutBasedChunkingConfig
> = {
  encode(
    message: DocumentProcessingConfig_ChunkingConfig_LayoutBasedChunkingConfig,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.chunkSize !== 0) {
      writer.uint32(8).int32(message.chunkSize);
    }
    if (message.includeAncestorHeadings !== false) {
      writer.uint32(16).bool(message.includeAncestorHeadings);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): DocumentProcessingConfig_ChunkingConfig_LayoutBasedChunkingConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDocumentProcessingConfig_ChunkingConfig_LayoutBasedChunkingConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.chunkSize = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.includeAncestorHeadings = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DocumentProcessingConfig_ChunkingConfig_LayoutBasedChunkingConfig {
    return {
      chunkSize: isSet(object.chunkSize) ? globalThis.Number(object.chunkSize) : 0,
      includeAncestorHeadings: isSet(object.includeAncestorHeadings)
        ? globalThis.Boolean(object.includeAncestorHeadings)
        : false,
    };
  },

  toJSON(message: DocumentProcessingConfig_ChunkingConfig_LayoutBasedChunkingConfig): unknown {
    const obj: any = {};
    if (message.chunkSize !== 0) {
      obj.chunkSize = Math.round(message.chunkSize);
    }
    if (message.includeAncestorHeadings !== false) {
      obj.includeAncestorHeadings = message.includeAncestorHeadings;
    }
    return obj;
  },

  create(
    base?: DeepPartial<DocumentProcessingConfig_ChunkingConfig_LayoutBasedChunkingConfig>,
  ): DocumentProcessingConfig_ChunkingConfig_LayoutBasedChunkingConfig {
    return DocumentProcessingConfig_ChunkingConfig_LayoutBasedChunkingConfig.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<DocumentProcessingConfig_ChunkingConfig_LayoutBasedChunkingConfig>,
  ): DocumentProcessingConfig_ChunkingConfig_LayoutBasedChunkingConfig {
    const message = createBaseDocumentProcessingConfig_ChunkingConfig_LayoutBasedChunkingConfig();
    message.chunkSize = object.chunkSize ?? 0;
    message.includeAncestorHeadings = object.includeAncestorHeadings ?? false;
    return message;
  },
};

function createBaseDocumentProcessingConfig_ParsingConfig(): DocumentProcessingConfig_ParsingConfig {
  return { digitalParsingConfig: undefined, ocrParsingConfig: undefined, layoutParsingConfig: undefined };
}

export const DocumentProcessingConfig_ParsingConfig: MessageFns<DocumentProcessingConfig_ParsingConfig> = {
  encode(message: DocumentProcessingConfig_ParsingConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.digitalParsingConfig !== undefined) {
      DocumentProcessingConfig_ParsingConfig_DigitalParsingConfig.encode(
        message.digitalParsingConfig,
        writer.uint32(10).fork(),
      ).join();
    }
    if (message.ocrParsingConfig !== undefined) {
      DocumentProcessingConfig_ParsingConfig_OcrParsingConfig.encode(message.ocrParsingConfig, writer.uint32(18).fork())
        .join();
    }
    if (message.layoutParsingConfig !== undefined) {
      DocumentProcessingConfig_ParsingConfig_LayoutParsingConfig.encode(
        message.layoutParsingConfig,
        writer.uint32(26).fork(),
      ).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DocumentProcessingConfig_ParsingConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDocumentProcessingConfig_ParsingConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.digitalParsingConfig = DocumentProcessingConfig_ParsingConfig_DigitalParsingConfig.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.ocrParsingConfig = DocumentProcessingConfig_ParsingConfig_OcrParsingConfig.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.layoutParsingConfig = DocumentProcessingConfig_ParsingConfig_LayoutParsingConfig.decode(
            reader,
            reader.uint32(),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DocumentProcessingConfig_ParsingConfig {
    return {
      digitalParsingConfig: isSet(object.digitalParsingConfig)
        ? DocumentProcessingConfig_ParsingConfig_DigitalParsingConfig.fromJSON(object.digitalParsingConfig)
        : undefined,
      ocrParsingConfig: isSet(object.ocrParsingConfig)
        ? DocumentProcessingConfig_ParsingConfig_OcrParsingConfig.fromJSON(object.ocrParsingConfig)
        : undefined,
      layoutParsingConfig: isSet(object.layoutParsingConfig)
        ? DocumentProcessingConfig_ParsingConfig_LayoutParsingConfig.fromJSON(object.layoutParsingConfig)
        : undefined,
    };
  },

  toJSON(message: DocumentProcessingConfig_ParsingConfig): unknown {
    const obj: any = {};
    if (message.digitalParsingConfig !== undefined) {
      obj.digitalParsingConfig = DocumentProcessingConfig_ParsingConfig_DigitalParsingConfig.toJSON(
        message.digitalParsingConfig,
      );
    }
    if (message.ocrParsingConfig !== undefined) {
      obj.ocrParsingConfig = DocumentProcessingConfig_ParsingConfig_OcrParsingConfig.toJSON(message.ocrParsingConfig);
    }
    if (message.layoutParsingConfig !== undefined) {
      obj.layoutParsingConfig = DocumentProcessingConfig_ParsingConfig_LayoutParsingConfig.toJSON(
        message.layoutParsingConfig,
      );
    }
    return obj;
  },

  create(base?: DeepPartial<DocumentProcessingConfig_ParsingConfig>): DocumentProcessingConfig_ParsingConfig {
    return DocumentProcessingConfig_ParsingConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DocumentProcessingConfig_ParsingConfig>): DocumentProcessingConfig_ParsingConfig {
    const message = createBaseDocumentProcessingConfig_ParsingConfig();
    message.digitalParsingConfig = (object.digitalParsingConfig !== undefined && object.digitalParsingConfig !== null)
      ? DocumentProcessingConfig_ParsingConfig_DigitalParsingConfig.fromPartial(object.digitalParsingConfig)
      : undefined;
    message.ocrParsingConfig = (object.ocrParsingConfig !== undefined && object.ocrParsingConfig !== null)
      ? DocumentProcessingConfig_ParsingConfig_OcrParsingConfig.fromPartial(object.ocrParsingConfig)
      : undefined;
    message.layoutParsingConfig = (object.layoutParsingConfig !== undefined && object.layoutParsingConfig !== null)
      ? DocumentProcessingConfig_ParsingConfig_LayoutParsingConfig.fromPartial(object.layoutParsingConfig)
      : undefined;
    return message;
  },
};

function createBaseDocumentProcessingConfig_ParsingConfig_DigitalParsingConfig(): DocumentProcessingConfig_ParsingConfig_DigitalParsingConfig {
  return {};
}

export const DocumentProcessingConfig_ParsingConfig_DigitalParsingConfig: MessageFns<
  DocumentProcessingConfig_ParsingConfig_DigitalParsingConfig
> = {
  encode(
    _: DocumentProcessingConfig_ParsingConfig_DigitalParsingConfig,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): DocumentProcessingConfig_ParsingConfig_DigitalParsingConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDocumentProcessingConfig_ParsingConfig_DigitalParsingConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): DocumentProcessingConfig_ParsingConfig_DigitalParsingConfig {
    return {};
  },

  toJSON(_: DocumentProcessingConfig_ParsingConfig_DigitalParsingConfig): unknown {
    const obj: any = {};
    return obj;
  },

  create(
    base?: DeepPartial<DocumentProcessingConfig_ParsingConfig_DigitalParsingConfig>,
  ): DocumentProcessingConfig_ParsingConfig_DigitalParsingConfig {
    return DocumentProcessingConfig_ParsingConfig_DigitalParsingConfig.fromPartial(base ?? {});
  },
  fromPartial(
    _: DeepPartial<DocumentProcessingConfig_ParsingConfig_DigitalParsingConfig>,
  ): DocumentProcessingConfig_ParsingConfig_DigitalParsingConfig {
    const message = createBaseDocumentProcessingConfig_ParsingConfig_DigitalParsingConfig();
    return message;
  },
};

function createBaseDocumentProcessingConfig_ParsingConfig_OcrParsingConfig(): DocumentProcessingConfig_ParsingConfig_OcrParsingConfig {
  return { enhancedDocumentElements: [], useNativeText: false };
}

export const DocumentProcessingConfig_ParsingConfig_OcrParsingConfig: MessageFns<
  DocumentProcessingConfig_ParsingConfig_OcrParsingConfig
> = {
  encode(
    message: DocumentProcessingConfig_ParsingConfig_OcrParsingConfig,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    for (const v of message.enhancedDocumentElements) {
      writer.uint32(10).string(v!);
    }
    if (message.useNativeText !== false) {
      writer.uint32(16).bool(message.useNativeText);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DocumentProcessingConfig_ParsingConfig_OcrParsingConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDocumentProcessingConfig_ParsingConfig_OcrParsingConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.enhancedDocumentElements.push(reader.string());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.useNativeText = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DocumentProcessingConfig_ParsingConfig_OcrParsingConfig {
    return {
      enhancedDocumentElements: globalThis.Array.isArray(object?.enhancedDocumentElements)
        ? object.enhancedDocumentElements.map((e: any) => globalThis.String(e))
        : [],
      useNativeText: isSet(object.useNativeText) ? globalThis.Boolean(object.useNativeText) : false,
    };
  },

  toJSON(message: DocumentProcessingConfig_ParsingConfig_OcrParsingConfig): unknown {
    const obj: any = {};
    if (message.enhancedDocumentElements?.length) {
      obj.enhancedDocumentElements = message.enhancedDocumentElements;
    }
    if (message.useNativeText !== false) {
      obj.useNativeText = message.useNativeText;
    }
    return obj;
  },

  create(
    base?: DeepPartial<DocumentProcessingConfig_ParsingConfig_OcrParsingConfig>,
  ): DocumentProcessingConfig_ParsingConfig_OcrParsingConfig {
    return DocumentProcessingConfig_ParsingConfig_OcrParsingConfig.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<DocumentProcessingConfig_ParsingConfig_OcrParsingConfig>,
  ): DocumentProcessingConfig_ParsingConfig_OcrParsingConfig {
    const message = createBaseDocumentProcessingConfig_ParsingConfig_OcrParsingConfig();
    message.enhancedDocumentElements = object.enhancedDocumentElements?.map((e) => e) || [];
    message.useNativeText = object.useNativeText ?? false;
    return message;
  },
};

function createBaseDocumentProcessingConfig_ParsingConfig_LayoutParsingConfig(): DocumentProcessingConfig_ParsingConfig_LayoutParsingConfig {
  return {};
}

export const DocumentProcessingConfig_ParsingConfig_LayoutParsingConfig: MessageFns<
  DocumentProcessingConfig_ParsingConfig_LayoutParsingConfig
> = {
  encode(
    _: DocumentProcessingConfig_ParsingConfig_LayoutParsingConfig,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): DocumentProcessingConfig_ParsingConfig_LayoutParsingConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDocumentProcessingConfig_ParsingConfig_LayoutParsingConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): DocumentProcessingConfig_ParsingConfig_LayoutParsingConfig {
    return {};
  },

  toJSON(_: DocumentProcessingConfig_ParsingConfig_LayoutParsingConfig): unknown {
    const obj: any = {};
    return obj;
  },

  create(
    base?: DeepPartial<DocumentProcessingConfig_ParsingConfig_LayoutParsingConfig>,
  ): DocumentProcessingConfig_ParsingConfig_LayoutParsingConfig {
    return DocumentProcessingConfig_ParsingConfig_LayoutParsingConfig.fromPartial(base ?? {});
  },
  fromPartial(
    _: DeepPartial<DocumentProcessingConfig_ParsingConfig_LayoutParsingConfig>,
  ): DocumentProcessingConfig_ParsingConfig_LayoutParsingConfig {
    const message = createBaseDocumentProcessingConfig_ParsingConfig_LayoutParsingConfig();
    return message;
  },
};

function createBaseDocumentProcessingConfig_ParsingConfigOverridesEntry(): DocumentProcessingConfig_ParsingConfigOverridesEntry {
  return { key: "", value: undefined };
}

export const DocumentProcessingConfig_ParsingConfigOverridesEntry: MessageFns<
  DocumentProcessingConfig_ParsingConfigOverridesEntry
> = {
  encode(
    message: DocumentProcessingConfig_ParsingConfigOverridesEntry,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      DocumentProcessingConfig_ParsingConfig.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DocumentProcessingConfig_ParsingConfigOverridesEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDocumentProcessingConfig_ParsingConfigOverridesEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = DocumentProcessingConfig_ParsingConfig.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DocumentProcessingConfig_ParsingConfigOverridesEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? DocumentProcessingConfig_ParsingConfig.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: DocumentProcessingConfig_ParsingConfigOverridesEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = DocumentProcessingConfig_ParsingConfig.toJSON(message.value);
    }
    return obj;
  },

  create(
    base?: DeepPartial<DocumentProcessingConfig_ParsingConfigOverridesEntry>,
  ): DocumentProcessingConfig_ParsingConfigOverridesEntry {
    return DocumentProcessingConfig_ParsingConfigOverridesEntry.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<DocumentProcessingConfig_ParsingConfigOverridesEntry>,
  ): DocumentProcessingConfig_ParsingConfigOverridesEntry {
    const message = createBaseDocumentProcessingConfig_ParsingConfigOverridesEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? DocumentProcessingConfig_ParsingConfig.fromPartial(object.value)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
