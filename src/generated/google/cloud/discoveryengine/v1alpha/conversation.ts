// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/discoveryengine/v1alpha/conversation.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { SearchResponse_Summary } from "./search_service.js";

export const protobufPackage = "google.cloud.discoveryengine.v1alpha";

/** External conversation proto definition. */
export interface Conversation {
  /**
   * Immutable. Fully qualified name
   * `projects/{project}/locations/global/collections/{collection}/dataStore/* /conversations/*`
   * or
   * `projects/{project}/locations/global/collections/{collection}/engines/* /conversations/*`.
   */
  name: string;
  /** The state of the Conversation. */
  state: Conversation_State;
  /** A unique identifier for tracking users. */
  userPseudoId: string;
  /** Conversation messages. */
  messages: ConversationMessage[];
  /** Output only. The time the conversation started. */
  startTime:
    | Date
    | undefined;
  /** Output only. The time the conversation finished. */
  endTime: Date | undefined;
}

/** Enumeration of the state of the conversation. */
export enum Conversation_State {
  /** STATE_UNSPECIFIED - Unknown. */
  STATE_UNSPECIFIED = 0,
  /** IN_PROGRESS - Conversation is currently open. */
  IN_PROGRESS = 1,
  /** COMPLETED - Conversation has been completed. */
  COMPLETED = 2,
  UNRECOGNIZED = -1,
}

export function conversation_StateFromJSON(object: any): Conversation_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return Conversation_State.STATE_UNSPECIFIED;
    case 1:
    case "IN_PROGRESS":
      return Conversation_State.IN_PROGRESS;
    case 2:
    case "COMPLETED":
      return Conversation_State.COMPLETED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Conversation_State.UNRECOGNIZED;
  }
}

export function conversation_StateToJSON(object: Conversation_State): string {
  switch (object) {
    case Conversation_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case Conversation_State.IN_PROGRESS:
      return "IN_PROGRESS";
    case Conversation_State.COMPLETED:
      return "COMPLETED";
    case Conversation_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Defines a reply message to user. */
export interface Reply {
  /**
   * DEPRECATED: use `summary` instead.
   * Text reply.
   *
   * @deprecated
   */
  reply: string;
  /**
   * References in the reply.
   *
   * @deprecated
   */
  references: Reply_Reference[];
  /** Summary based on search results. */
  summary: SearchResponse_Summary | undefined;
}

/**
 * Defines reference in reply.
 *
 * @deprecated
 */
export interface Reply_Reference {
  /** URI link reference. */
  uri: string;
  /** Anchor text. */
  anchorText: string;
  /** Anchor text start index. */
  start: number;
  /** Anchor text end index. */
  end: number;
}

/** Defines context of the conversation */
export interface ConversationContext {
  /**
   * The current list of documents the user is seeing.
   * It contains the document resource references.
   */
  contextDocuments: string[];
  /**
   * The current active document the user opened.
   * It contains the document resource reference.
   */
  activeDocument: string;
}

/** Defines text input. */
export interface TextInput {
  /** Text input. */
  input: string;
  /** Conversation context of the input. */
  context: ConversationContext | undefined;
}

/** Defines a conversation message. */
export interface ConversationMessage {
  /** User text input. */
  userInput?:
    | TextInput
    | undefined;
  /** Search reply. */
  reply?:
    | Reply
    | undefined;
  /** Output only. Message creation timestamp. */
  createTime: Date | undefined;
}

function createBaseConversation(): Conversation {
  return { name: "", state: 0, userPseudoId: "", messages: [], startTime: undefined, endTime: undefined };
}

export const Conversation: MessageFns<Conversation> = {
  encode(message: Conversation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.state !== 0) {
      writer.uint32(16).int32(message.state);
    }
    if (message.userPseudoId !== "") {
      writer.uint32(26).string(message.userPseudoId);
    }
    for (const v of message.messages) {
      ConversationMessage.encode(v!, writer.uint32(34).fork()).join();
    }
    if (message.startTime !== undefined) {
      Timestamp.encode(toTimestamp(message.startTime), writer.uint32(42).fork()).join();
    }
    if (message.endTime !== undefined) {
      Timestamp.encode(toTimestamp(message.endTime), writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Conversation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConversation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.userPseudoId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.messages.push(ConversationMessage.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.startTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.endTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Conversation {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      state: isSet(object.state) ? conversation_StateFromJSON(object.state) : 0,
      userPseudoId: isSet(object.userPseudoId) ? globalThis.String(object.userPseudoId) : "",
      messages: globalThis.Array.isArray(object?.messages)
        ? object.messages.map((e: any) => ConversationMessage.fromJSON(e))
        : [],
      startTime: isSet(object.startTime) ? fromJsonTimestamp(object.startTime) : undefined,
      endTime: isSet(object.endTime) ? fromJsonTimestamp(object.endTime) : undefined,
    };
  },

  toJSON(message: Conversation): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.state !== 0) {
      obj.state = conversation_StateToJSON(message.state);
    }
    if (message.userPseudoId !== "") {
      obj.userPseudoId = message.userPseudoId;
    }
    if (message.messages?.length) {
      obj.messages = message.messages.map((e) => ConversationMessage.toJSON(e));
    }
    if (message.startTime !== undefined) {
      obj.startTime = message.startTime.toISOString();
    }
    if (message.endTime !== undefined) {
      obj.endTime = message.endTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<Conversation>): Conversation {
    return Conversation.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Conversation>): Conversation {
    const message = createBaseConversation();
    message.name = object.name ?? "";
    message.state = object.state ?? 0;
    message.userPseudoId = object.userPseudoId ?? "";
    message.messages = object.messages?.map((e) => ConversationMessage.fromPartial(e)) || [];
    message.startTime = object.startTime ?? undefined;
    message.endTime = object.endTime ?? undefined;
    return message;
  },
};

function createBaseReply(): Reply {
  return { reply: "", references: [], summary: undefined };
}

export const Reply: MessageFns<Reply> = {
  encode(message: Reply, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.reply !== "") {
      writer.uint32(10).string(message.reply);
    }
    for (const v of message.references) {
      Reply_Reference.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.summary !== undefined) {
      SearchResponse_Summary.encode(message.summary, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Reply {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReply();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.reply = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.references.push(Reply_Reference.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.summary = SearchResponse_Summary.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Reply {
    return {
      reply: isSet(object.reply) ? globalThis.String(object.reply) : "",
      references: globalThis.Array.isArray(object?.references)
        ? object.references.map((e: any) => Reply_Reference.fromJSON(e))
        : [],
      summary: isSet(object.summary) ? SearchResponse_Summary.fromJSON(object.summary) : undefined,
    };
  },

  toJSON(message: Reply): unknown {
    const obj: any = {};
    if (message.reply !== "") {
      obj.reply = message.reply;
    }
    if (message.references?.length) {
      obj.references = message.references.map((e) => Reply_Reference.toJSON(e));
    }
    if (message.summary !== undefined) {
      obj.summary = SearchResponse_Summary.toJSON(message.summary);
    }
    return obj;
  },

  create(base?: DeepPartial<Reply>): Reply {
    return Reply.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Reply>): Reply {
    const message = createBaseReply();
    message.reply = object.reply ?? "";
    message.references = object.references?.map((e) => Reply_Reference.fromPartial(e)) || [];
    message.summary = (object.summary !== undefined && object.summary !== null)
      ? SearchResponse_Summary.fromPartial(object.summary)
      : undefined;
    return message;
  },
};

function createBaseReply_Reference(): Reply_Reference {
  return { uri: "", anchorText: "", start: 0, end: 0 };
}

export const Reply_Reference: MessageFns<Reply_Reference> = {
  encode(message: Reply_Reference, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.uri !== "") {
      writer.uint32(10).string(message.uri);
    }
    if (message.anchorText !== "") {
      writer.uint32(18).string(message.anchorText);
    }
    if (message.start !== 0) {
      writer.uint32(24).int32(message.start);
    }
    if (message.end !== 0) {
      writer.uint32(32).int32(message.end);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Reply_Reference {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReply_Reference();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.uri = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.anchorText = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.start = reader.int32();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.end = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Reply_Reference {
    return {
      uri: isSet(object.uri) ? globalThis.String(object.uri) : "",
      anchorText: isSet(object.anchorText) ? globalThis.String(object.anchorText) : "",
      start: isSet(object.start) ? globalThis.Number(object.start) : 0,
      end: isSet(object.end) ? globalThis.Number(object.end) : 0,
    };
  },

  toJSON(message: Reply_Reference): unknown {
    const obj: any = {};
    if (message.uri !== "") {
      obj.uri = message.uri;
    }
    if (message.anchorText !== "") {
      obj.anchorText = message.anchorText;
    }
    if (message.start !== 0) {
      obj.start = Math.round(message.start);
    }
    if (message.end !== 0) {
      obj.end = Math.round(message.end);
    }
    return obj;
  },

  create(base?: DeepPartial<Reply_Reference>): Reply_Reference {
    return Reply_Reference.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Reply_Reference>): Reply_Reference {
    const message = createBaseReply_Reference();
    message.uri = object.uri ?? "";
    message.anchorText = object.anchorText ?? "";
    message.start = object.start ?? 0;
    message.end = object.end ?? 0;
    return message;
  },
};

function createBaseConversationContext(): ConversationContext {
  return { contextDocuments: [], activeDocument: "" };
}

export const ConversationContext: MessageFns<ConversationContext> = {
  encode(message: ConversationContext, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.contextDocuments) {
      writer.uint32(10).string(v!);
    }
    if (message.activeDocument !== "") {
      writer.uint32(18).string(message.activeDocument);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConversationContext {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConversationContext();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.contextDocuments.push(reader.string());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.activeDocument = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConversationContext {
    return {
      contextDocuments: globalThis.Array.isArray(object?.contextDocuments)
        ? object.contextDocuments.map((e: any) => globalThis.String(e))
        : [],
      activeDocument: isSet(object.activeDocument) ? globalThis.String(object.activeDocument) : "",
    };
  },

  toJSON(message: ConversationContext): unknown {
    const obj: any = {};
    if (message.contextDocuments?.length) {
      obj.contextDocuments = message.contextDocuments;
    }
    if (message.activeDocument !== "") {
      obj.activeDocument = message.activeDocument;
    }
    return obj;
  },

  create(base?: DeepPartial<ConversationContext>): ConversationContext {
    return ConversationContext.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ConversationContext>): ConversationContext {
    const message = createBaseConversationContext();
    message.contextDocuments = object.contextDocuments?.map((e) => e) || [];
    message.activeDocument = object.activeDocument ?? "";
    return message;
  },
};

function createBaseTextInput(): TextInput {
  return { input: "", context: undefined };
}

export const TextInput: MessageFns<TextInput> = {
  encode(message: TextInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.input !== "") {
      writer.uint32(10).string(message.input);
    }
    if (message.context !== undefined) {
      ConversationContext.encode(message.context, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TextInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTextInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.input = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.context = ConversationContext.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TextInput {
    return {
      input: isSet(object.input) ? globalThis.String(object.input) : "",
      context: isSet(object.context) ? ConversationContext.fromJSON(object.context) : undefined,
    };
  },

  toJSON(message: TextInput): unknown {
    const obj: any = {};
    if (message.input !== "") {
      obj.input = message.input;
    }
    if (message.context !== undefined) {
      obj.context = ConversationContext.toJSON(message.context);
    }
    return obj;
  },

  create(base?: DeepPartial<TextInput>): TextInput {
    return TextInput.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TextInput>): TextInput {
    const message = createBaseTextInput();
    message.input = object.input ?? "";
    message.context = (object.context !== undefined && object.context !== null)
      ? ConversationContext.fromPartial(object.context)
      : undefined;
    return message;
  },
};

function createBaseConversationMessage(): ConversationMessage {
  return { userInput: undefined, reply: undefined, createTime: undefined };
}

export const ConversationMessage: MessageFns<ConversationMessage> = {
  encode(message: ConversationMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userInput !== undefined) {
      TextInput.encode(message.userInput, writer.uint32(10).fork()).join();
    }
    if (message.reply !== undefined) {
      Reply.encode(message.reply, writer.uint32(18).fork()).join();
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConversationMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConversationMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userInput = TextInput.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.reply = Reply.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConversationMessage {
    return {
      userInput: isSet(object.userInput) ? TextInput.fromJSON(object.userInput) : undefined,
      reply: isSet(object.reply) ? Reply.fromJSON(object.reply) : undefined,
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
    };
  },

  toJSON(message: ConversationMessage): unknown {
    const obj: any = {};
    if (message.userInput !== undefined) {
      obj.userInput = TextInput.toJSON(message.userInput);
    }
    if (message.reply !== undefined) {
      obj.reply = Reply.toJSON(message.reply);
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<ConversationMessage>): ConversationMessage {
    return ConversationMessage.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ConversationMessage>): ConversationMessage {
    const message = createBaseConversationMessage();
    message.userInput = (object.userInput !== undefined && object.userInput !== null)
      ? TextInput.fromPartial(object.userInput)
      : undefined;
    message.reply = (object.reply !== undefined && object.reply !== null) ? Reply.fromPartial(object.reply) : undefined;
    message.createTime = object.createTime ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
