// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/discoveryengine/v1alpha/data_store_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../longrunning/operations.js";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { DataStore } from "./data_store.js";
import { DocumentProcessingConfig } from "./document_processing_config.js";

export const protobufPackage = "google.cloud.discoveryengine.v1alpha";

/**
 * Request for
 * [DataStoreService.CreateDataStore][google.cloud.discoveryengine.v1alpha.DataStoreService.CreateDataStore]
 * method.
 */
export interface CreateDataStoreRequest {
  /**
   * Required. The parent resource name, such as
   * `projects/{project}/locations/{location}/collections/{collection}`.
   */
  parent: string;
  /**
   * Required. The [DataStore][google.cloud.discoveryengine.v1alpha.DataStore]
   * to create.
   */
  dataStore:
    | DataStore
    | undefined;
  /**
   * Required. The ID to use for the
   * [DataStore][google.cloud.discoveryengine.v1alpha.DataStore], which will
   * become the final component of the
   * [DataStore][google.cloud.discoveryengine.v1alpha.DataStore]'s resource
   * name.
   *
   * This field must conform to [RFC-1034](https://tools.ietf.org/html/rfc1034)
   * standard with a length limit of 63 characters. Otherwise, an
   * INVALID_ARGUMENT error is returned.
   */
  dataStoreId: string;
  /**
   * A boolean flag indicating whether user want to directly create an advanced
   * data store for site search.
   * If the data store is not configured as site
   * search (GENERIC vertical and PUBLIC_WEBSITE content_config), this flag will
   * be ignored.
   */
  createAdvancedSiteSearch: boolean;
  /**
   * A boolean flag indicating whether to skip the default schema creation for
   * the data store. Only enable this flag if you are certain that the default
   * schema is incompatible with your use case.
   *
   * If set to true, you must manually create a schema for the data store before
   * any documents can be ingested.
   *
   * This flag cannot be specified if `data_store.starting_schema` is specified.
   */
  skipDefaultSchemaCreation: boolean;
}

/**
 * Request message for
 * [DataStoreService.GetDataStore][google.cloud.discoveryengine.v1alpha.DataStoreService.GetDataStore]
 * method.
 */
export interface GetDataStoreRequest {
  /**
   * Required. Full resource name of
   * [DataStore][google.cloud.discoveryengine.v1alpha.DataStore], such as
   * `projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}`.
   *
   * If the caller does not have permission to access the
   * [DataStore][google.cloud.discoveryengine.v1alpha.DataStore], regardless of
   * whether or not it exists, a PERMISSION_DENIED error is returned.
   *
   * If the requested
   * [DataStore][google.cloud.discoveryengine.v1alpha.DataStore] does not exist,
   * a NOT_FOUND error is returned.
   */
  name: string;
}

/**
 * Metadata related to the progress of the
 * [DataStoreService.CreateDataStore][google.cloud.discoveryengine.v1alpha.DataStoreService.CreateDataStore]
 * operation. This will be returned by the google.longrunning.Operation.metadata
 * field.
 */
export interface CreateDataStoreMetadata {
  /** Operation create time. */
  createTime:
    | Date
    | undefined;
  /**
   * Operation last update time. If the operation is done, this is also the
   * finish time.
   */
  updateTime: Date | undefined;
}

/**
 * Request message for
 * [DataStoreService.ListDataStores][google.cloud.discoveryengine.v1alpha.DataStoreService.ListDataStores]
 * method.
 */
export interface ListDataStoresRequest {
  /**
   * Required. The parent branch resource name, such as
   * `projects/{project}/locations/{location}/collections/{collection_id}`.
   *
   * If the caller does not have permission to list
   * [DataStore][google.cloud.discoveryengine.v1alpha.DataStore]s under this
   * location, regardless of whether or not this data store exists, a
   * PERMISSION_DENIED error is returned.
   */
  parent: string;
  /**
   * Maximum number of
   * [DataStore][google.cloud.discoveryengine.v1alpha.DataStore]s to return. If
   * unspecified, defaults to 10. The maximum allowed value is 50. Values above
   * 50 will be coerced to 50.
   *
   * If this field is negative, an INVALID_ARGUMENT is returned.
   */
  pageSize: number;
  /**
   * A page token
   * [ListDataStoresResponse.next_page_token][google.cloud.discoveryengine.v1alpha.ListDataStoresResponse.next_page_token],
   * received from a previous
   * [DataStoreService.ListDataStores][google.cloud.discoveryengine.v1alpha.DataStoreService.ListDataStores]
   * call. Provide this to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to
   * [DataStoreService.ListDataStores][google.cloud.discoveryengine.v1alpha.DataStoreService.ListDataStores]
   * must match the call that provided the page token. Otherwise, an
   * INVALID_ARGUMENT error is returned.
   */
  pageToken: string;
  /**
   * Filter by solution type .
   * For example: `filter = 'solution_type:SOLUTION_TYPE_SEARCH'`
   */
  filter: string;
}

/**
 * Response message for
 * [DataStoreService.ListDataStores][google.cloud.discoveryengine.v1alpha.DataStoreService.ListDataStores]
 * method.
 */
export interface ListDataStoresResponse {
  /**
   * All the customer's
   * [DataStore][google.cloud.discoveryengine.v1alpha.DataStore]s.
   */
  dataStores: DataStore[];
  /**
   * A token that can be sent as
   * [ListDataStoresRequest.page_token][google.cloud.discoveryengine.v1alpha.ListDataStoresRequest.page_token]
   * to retrieve the next page. If this field is omitted, there are no
   * subsequent pages.
   */
  nextPageToken: string;
}

/**
 * Request message for
 * [DataStoreService.DeleteDataStore][google.cloud.discoveryengine.v1alpha.DataStoreService.DeleteDataStore]
 * method.
 */
export interface DeleteDataStoreRequest {
  /**
   * Required. Full resource name of
   * [DataStore][google.cloud.discoveryengine.v1alpha.DataStore], such as
   * `projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}`.
   *
   * If the caller does not have permission to delete the
   * [DataStore][google.cloud.discoveryengine.v1alpha.DataStore], regardless of
   * whether or not it exists, a PERMISSION_DENIED error is returned.
   *
   * If the [DataStore][google.cloud.discoveryengine.v1alpha.DataStore] to
   * delete does not exist, a NOT_FOUND error is returned.
   */
  name: string;
}

/**
 * Request message for
 * [DataStoreService.UpdateDataStore][google.cloud.discoveryengine.v1alpha.DataStoreService.UpdateDataStore]
 * method.
 */
export interface UpdateDataStoreRequest {
  /**
   * Required. The [DataStore][google.cloud.discoveryengine.v1alpha.DataStore]
   * to update.
   *
   * If the caller does not have permission to update the
   * [DataStore][google.cloud.discoveryengine.v1alpha.DataStore], regardless of
   * whether or not it exists, a PERMISSION_DENIED error is returned.
   *
   * If the [DataStore][google.cloud.discoveryengine.v1alpha.DataStore] to
   * update does not exist, a NOT_FOUND error is returned.
   */
  dataStore:
    | DataStore
    | undefined;
  /**
   * Indicates which fields in the provided
   * [DataStore][google.cloud.discoveryengine.v1alpha.DataStore] to update.
   *
   * If an unsupported or unknown field is provided, an INVALID_ARGUMENT error
   * is returned.
   */
  updateMask: string[] | undefined;
}

/**
 * Metadata related to the progress of the
 * [DataStoreService.DeleteDataStore][google.cloud.discoveryengine.v1alpha.DataStoreService.DeleteDataStore]
 * operation. This will be returned by the google.longrunning.Operation.metadata
 * field.
 */
export interface DeleteDataStoreMetadata {
  /** Operation create time. */
  createTime:
    | Date
    | undefined;
  /**
   * Operation last update time. If the operation is done, this is also the
   * finish time.
   */
  updateTime: Date | undefined;
}

/**
 * Request for
 * [DataStoreService.GetDocumentProcessingConfig][google.cloud.discoveryengine.v1alpha.DataStoreService.GetDocumentProcessingConfig]
 * method.
 */
export interface GetDocumentProcessingConfigRequest {
  /**
   * Required. Full DocumentProcessingConfig resource name. Format:
   * `projects/{project_number}/locations/{location_id}/collections/{collection_id}/dataStores/{data_store_id}/documentProcessingConfig`
   */
  name: string;
}

/**
 * Request for
 * [DataStoreService.UpdateDocumentProcessingConfig][google.cloud.discoveryengine.v1alpha.DataStoreService.UpdateDocumentProcessingConfig]
 * method.
 */
export interface UpdateDocumentProcessingConfigRequest {
  /**
   * Required. The
   * [DocumentProcessingConfig][google.cloud.discoveryengine.v1alpha.DocumentProcessingConfig]
   * to update.
   *
   * If the caller does not have permission to update the
   * [DocumentProcessingConfig][google.cloud.discoveryengine.v1alpha.DocumentProcessingConfig],
   * then a PERMISSION_DENIED error is returned.
   *
   * If the
   * [DocumentProcessingConfig][google.cloud.discoveryengine.v1alpha.DocumentProcessingConfig]
   * to update does not exist, a NOT_FOUND error is returned.
   */
  documentProcessingConfig:
    | DocumentProcessingConfig
    | undefined;
  /**
   * Indicates which fields in the provided
   * [DocumentProcessingConfig][google.cloud.discoveryengine.v1alpha.DocumentProcessingConfig]
   * to update. The following are the only supported fields:
   *
   * * [DocumentProcessingConfig.ocr_config][google.cloud.discoveryengine.v1alpha.DocumentProcessingConfig.ocr_config]
   *
   * If not set, all supported fields are updated.
   */
  updateMask: string[] | undefined;
}

function createBaseCreateDataStoreRequest(): CreateDataStoreRequest {
  return {
    parent: "",
    dataStore: undefined,
    dataStoreId: "",
    createAdvancedSiteSearch: false,
    skipDefaultSchemaCreation: false,
  };
}

export const CreateDataStoreRequest: MessageFns<CreateDataStoreRequest> = {
  encode(message: CreateDataStoreRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.dataStore !== undefined) {
      DataStore.encode(message.dataStore, writer.uint32(18).fork()).join();
    }
    if (message.dataStoreId !== "") {
      writer.uint32(26).string(message.dataStoreId);
    }
    if (message.createAdvancedSiteSearch !== false) {
      writer.uint32(32).bool(message.createAdvancedSiteSearch);
    }
    if (message.skipDefaultSchemaCreation !== false) {
      writer.uint32(56).bool(message.skipDefaultSchemaCreation);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateDataStoreRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateDataStoreRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.dataStore = DataStore.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.dataStoreId = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.createAdvancedSiteSearch = reader.bool();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.skipDefaultSchemaCreation = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateDataStoreRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      dataStore: isSet(object.dataStore) ? DataStore.fromJSON(object.dataStore) : undefined,
      dataStoreId: isSet(object.dataStoreId) ? globalThis.String(object.dataStoreId) : "",
      createAdvancedSiteSearch: isSet(object.createAdvancedSiteSearch)
        ? globalThis.Boolean(object.createAdvancedSiteSearch)
        : false,
      skipDefaultSchemaCreation: isSet(object.skipDefaultSchemaCreation)
        ? globalThis.Boolean(object.skipDefaultSchemaCreation)
        : false,
    };
  },

  toJSON(message: CreateDataStoreRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.dataStore !== undefined) {
      obj.dataStore = DataStore.toJSON(message.dataStore);
    }
    if (message.dataStoreId !== "") {
      obj.dataStoreId = message.dataStoreId;
    }
    if (message.createAdvancedSiteSearch !== false) {
      obj.createAdvancedSiteSearch = message.createAdvancedSiteSearch;
    }
    if (message.skipDefaultSchemaCreation !== false) {
      obj.skipDefaultSchemaCreation = message.skipDefaultSchemaCreation;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateDataStoreRequest>): CreateDataStoreRequest {
    return CreateDataStoreRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateDataStoreRequest>): CreateDataStoreRequest {
    const message = createBaseCreateDataStoreRequest();
    message.parent = object.parent ?? "";
    message.dataStore = (object.dataStore !== undefined && object.dataStore !== null)
      ? DataStore.fromPartial(object.dataStore)
      : undefined;
    message.dataStoreId = object.dataStoreId ?? "";
    message.createAdvancedSiteSearch = object.createAdvancedSiteSearch ?? false;
    message.skipDefaultSchemaCreation = object.skipDefaultSchemaCreation ?? false;
    return message;
  },
};

function createBaseGetDataStoreRequest(): GetDataStoreRequest {
  return { name: "" };
}

export const GetDataStoreRequest: MessageFns<GetDataStoreRequest> = {
  encode(message: GetDataStoreRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetDataStoreRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDataStoreRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDataStoreRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetDataStoreRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetDataStoreRequest>): GetDataStoreRequest {
    return GetDataStoreRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetDataStoreRequest>): GetDataStoreRequest {
    const message = createBaseGetDataStoreRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateDataStoreMetadata(): CreateDataStoreMetadata {
  return { createTime: undefined, updateTime: undefined };
}

export const CreateDataStoreMetadata: MessageFns<CreateDataStoreMetadata> = {
  encode(message: CreateDataStoreMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(10).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateDataStoreMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateDataStoreMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateDataStoreMetadata {
    return {
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
    };
  },

  toJSON(message: CreateDataStoreMetadata): unknown {
    const obj: any = {};
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<CreateDataStoreMetadata>): CreateDataStoreMetadata {
    return CreateDataStoreMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateDataStoreMetadata>): CreateDataStoreMetadata {
    const message = createBaseCreateDataStoreMetadata();
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    return message;
  },
};

function createBaseListDataStoresRequest(): ListDataStoresRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "" };
}

export const ListDataStoresRequest: MessageFns<ListDataStoresRequest> = {
  encode(message: ListDataStoresRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListDataStoresRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListDataStoresRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListDataStoresRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
    };
  },

  toJSON(message: ListDataStoresRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    return obj;
  },

  create(base?: DeepPartial<ListDataStoresRequest>): ListDataStoresRequest {
    return ListDataStoresRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListDataStoresRequest>): ListDataStoresRequest {
    const message = createBaseListDataStoresRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    return message;
  },
};

function createBaseListDataStoresResponse(): ListDataStoresResponse {
  return { dataStores: [], nextPageToken: "" };
}

export const ListDataStoresResponse: MessageFns<ListDataStoresResponse> = {
  encode(message: ListDataStoresResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.dataStores) {
      DataStore.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListDataStoresResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListDataStoresResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.dataStores.push(DataStore.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListDataStoresResponse {
    return {
      dataStores: globalThis.Array.isArray(object?.dataStores)
        ? object.dataStores.map((e: any) => DataStore.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListDataStoresResponse): unknown {
    const obj: any = {};
    if (message.dataStores?.length) {
      obj.dataStores = message.dataStores.map((e) => DataStore.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListDataStoresResponse>): ListDataStoresResponse {
    return ListDataStoresResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListDataStoresResponse>): ListDataStoresResponse {
    const message = createBaseListDataStoresResponse();
    message.dataStores = object.dataStores?.map((e) => DataStore.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseDeleteDataStoreRequest(): DeleteDataStoreRequest {
  return { name: "" };
}

export const DeleteDataStoreRequest: MessageFns<DeleteDataStoreRequest> = {
  encode(message: DeleteDataStoreRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteDataStoreRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteDataStoreRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteDataStoreRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteDataStoreRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteDataStoreRequest>): DeleteDataStoreRequest {
    return DeleteDataStoreRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteDataStoreRequest>): DeleteDataStoreRequest {
    const message = createBaseDeleteDataStoreRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpdateDataStoreRequest(): UpdateDataStoreRequest {
  return { dataStore: undefined, updateMask: undefined };
}

export const UpdateDataStoreRequest: MessageFns<UpdateDataStoreRequest> = {
  encode(message: UpdateDataStoreRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.dataStore !== undefined) {
      DataStore.encode(message.dataStore, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateDataStoreRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateDataStoreRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.dataStore = DataStore.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateDataStoreRequest {
    return {
      dataStore: isSet(object.dataStore) ? DataStore.fromJSON(object.dataStore) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateDataStoreRequest): unknown {
    const obj: any = {};
    if (message.dataStore !== undefined) {
      obj.dataStore = DataStore.toJSON(message.dataStore);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateDataStoreRequest>): UpdateDataStoreRequest {
    return UpdateDataStoreRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateDataStoreRequest>): UpdateDataStoreRequest {
    const message = createBaseUpdateDataStoreRequest();
    message.dataStore = (object.dataStore !== undefined && object.dataStore !== null)
      ? DataStore.fromPartial(object.dataStore)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseDeleteDataStoreMetadata(): DeleteDataStoreMetadata {
  return { createTime: undefined, updateTime: undefined };
}

export const DeleteDataStoreMetadata: MessageFns<DeleteDataStoreMetadata> = {
  encode(message: DeleteDataStoreMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(10).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteDataStoreMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteDataStoreMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteDataStoreMetadata {
    return {
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
    };
  },

  toJSON(message: DeleteDataStoreMetadata): unknown {
    const obj: any = {};
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteDataStoreMetadata>): DeleteDataStoreMetadata {
    return DeleteDataStoreMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteDataStoreMetadata>): DeleteDataStoreMetadata {
    const message = createBaseDeleteDataStoreMetadata();
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    return message;
  },
};

function createBaseGetDocumentProcessingConfigRequest(): GetDocumentProcessingConfigRequest {
  return { name: "" };
}

export const GetDocumentProcessingConfigRequest: MessageFns<GetDocumentProcessingConfigRequest> = {
  encode(message: GetDocumentProcessingConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetDocumentProcessingConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDocumentProcessingConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDocumentProcessingConfigRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetDocumentProcessingConfigRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetDocumentProcessingConfigRequest>): GetDocumentProcessingConfigRequest {
    return GetDocumentProcessingConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetDocumentProcessingConfigRequest>): GetDocumentProcessingConfigRequest {
    const message = createBaseGetDocumentProcessingConfigRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpdateDocumentProcessingConfigRequest(): UpdateDocumentProcessingConfigRequest {
  return { documentProcessingConfig: undefined, updateMask: undefined };
}

export const UpdateDocumentProcessingConfigRequest: MessageFns<UpdateDocumentProcessingConfigRequest> = {
  encode(message: UpdateDocumentProcessingConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.documentProcessingConfig !== undefined) {
      DocumentProcessingConfig.encode(message.documentProcessingConfig, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateDocumentProcessingConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateDocumentProcessingConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.documentProcessingConfig = DocumentProcessingConfig.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateDocumentProcessingConfigRequest {
    return {
      documentProcessingConfig: isSet(object.documentProcessingConfig)
        ? DocumentProcessingConfig.fromJSON(object.documentProcessingConfig)
        : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateDocumentProcessingConfigRequest): unknown {
    const obj: any = {};
    if (message.documentProcessingConfig !== undefined) {
      obj.documentProcessingConfig = DocumentProcessingConfig.toJSON(message.documentProcessingConfig);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateDocumentProcessingConfigRequest>): UpdateDocumentProcessingConfigRequest {
    return UpdateDocumentProcessingConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateDocumentProcessingConfigRequest>): UpdateDocumentProcessingConfigRequest {
    const message = createBaseUpdateDocumentProcessingConfigRequest();
    message.documentProcessingConfig =
      (object.documentProcessingConfig !== undefined && object.documentProcessingConfig !== null)
        ? DocumentProcessingConfig.fromPartial(object.documentProcessingConfig)
        : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

/**
 * Service for managing
 * [DataStore][google.cloud.discoveryengine.v1alpha.DataStore] configuration.
 */
export type DataStoreServiceDefinition = typeof DataStoreServiceDefinition;
export const DataStoreServiceDefinition = {
  name: "DataStoreService",
  fullName: "google.cloud.discoveryengine.v1alpha.DataStoreService",
  methods: {
    /**
     * Creates a [DataStore][google.cloud.discoveryengine.v1alpha.DataStore].
     *
     * DataStore is for storing
     * [Documents][google.cloud.discoveryengine.v1alpha.Document]. To serve these
     * documents for Search, or Recommendation use case, an
     * [Engine][google.cloud.discoveryengine.v1alpha.Engine] needs to be created
     * separately.
     */
    createDataStore: {
      name: "CreateDataStore",
      requestType: CreateDataStoreRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              110,
              10,
              46,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              100,
              105,
              115,
              99,
              111,
              118,
              101,
              114,
              121,
              101,
              110,
              103,
              105,
              110,
              101,
              46,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              46,
              68,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              18,
              60,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              100,
              105,
              115,
              99,
              111,
              118,
              101,
              114,
              121,
              101,
              110,
              103,
              105,
              110,
              101,
              46,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              46,
              67,
              114,
              101,
              97,
              116,
              101,
              68,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              31,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              100,
              97,
              116,
              97,
              95,
              115,
              116,
              111,
              114,
              101,
              44,
              100,
              97,
              116,
              97,
              95,
              115,
              116,
              111,
              114,
              101,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              146,
              1,
              58,
              10,
              100,
              97,
              116,
              97,
              95,
              115,
              116,
              111,
              114,
              101,
              90,
              79,
              58,
              10,
              100,
              97,
              116,
              97,
              95,
              115,
              116,
              111,
              114,
              101,
              34,
              65,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              34,
              51,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets a [DataStore][google.cloud.discoveryengine.v1alpha.DataStore]. */
    getDataStore: {
      name: "GetDataStore",
      requestType: GetDataStoreRequest,
      requestStream: false,
      responseType: DataStore,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              122,
              90,
              67,
              18,
              65,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              125,
              18,
              51,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Lists all the [DataStore][google.cloud.discoveryengine.v1alpha.DataStore]s
     * associated with the project.
     */
    listDataStores: {
      name: "ListDataStores",
      requestType: ListDataStoresRequest,
      requestStream: false,
      responseType: ListDataStoresResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              122,
              90,
              67,
              18,
              65,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              18,
              51,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Deletes a [DataStore][google.cloud.discoveryengine.v1alpha.DataStore]. */
    deleteDataStore: {
      name: "DeleteDataStore",
      requestType: DeleteDataStoreRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              85,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              60,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              100,
              105,
              115,
              99,
              111,
              118,
              101,
              114,
              121,
              101,
              110,
              103,
              105,
              110,
              101,
              46,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              46,
              68,
              101,
              108,
              101,
              116,
              101,
              68,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              122,
              90,
              67,
              42,
              65,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              125,
              42,
              51,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Updates a [DataStore][google.cloud.discoveryengine.v1alpha.DataStore] */
    updateDataStore: {
      name: "UpdateDataStore",
      requestType: UpdateDataStoreRequest,
      requestStream: false,
      responseType: DataStore,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              22,
              100,
              97,
              116,
              97,
              95,
              115,
              116,
              111,
              114,
              101,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              168,
              1,
              58,
              10,
              100,
              97,
              116,
              97,
              95,
              115,
              116,
              111,
              114,
              101,
              90,
              90,
              58,
              10,
              100,
              97,
              116,
              97,
              95,
              115,
              116,
              111,
              114,
              101,
              50,
              76,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              100,
              97,
              116,
              97,
              95,
              115,
              116,
              111,
              114,
              101,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              125,
              50,
              62,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              100,
              97,
              116,
              97,
              95,
              115,
              116,
              111,
              114,
              101,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Gets a
     * [DocumentProcessingConfig][google.cloud.discoveryengine.v1alpha.DocumentProcessingConfig].
     */
    getDocumentProcessingConfig: {
      name: "GetDocumentProcessingConfig",
      requestType: GetDocumentProcessingConfigRequest,
      requestStream: false,
      responseType: DocumentProcessingConfig,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              172,
              1,
              90,
              92,
              18,
              90,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              47,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              80,
              114,
              111,
              99,
              101,
              115,
              115,
              105,
              110,
              103,
              67,
              111,
              110,
              102,
              105,
              103,
              125,
              18,
              76,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              47,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              80,
              114,
              111,
              99,
              101,
              115,
              115,
              105,
              110,
              103,
              67,
              111,
              110,
              102,
              105,
              103,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Updates the
     * [DocumentProcessingConfig][google.cloud.discoveryengine.v1alpha.DocumentProcessingConfig].
     * [DocumentProcessingConfig][google.cloud.discoveryengine.v1alpha.DocumentProcessingConfig]
     * is a singleon resource of
     * [DataStore][google.cloud.discoveryengine.v1alpha.DataStore]. It's empty
     * when [DataStore][google.cloud.discoveryengine.v1alpha.DataStore] is
     * created. The first call to this method will set up
     * [DocumentProcessingConfig][google.cloud.discoveryengine.v1alpha.DocumentProcessingConfig].
     */
    updateDocumentProcessingConfig: {
      name: "UpdateDocumentProcessingConfig",
      requestType: UpdateDocumentProcessingConfigRequest,
      requestStream: false,
      responseType: DocumentProcessingConfig,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              38,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              95,
              112,
              114,
              111,
              99,
              101,
              115,
              115,
              105,
              110,
              103,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              155,
              2,
              58,
              26,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              95,
              112,
              114,
              111,
              99,
              101,
              115,
              115,
              105,
              110,
              103,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              90,
              147,
              1,
              58,
              26,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              95,
              112,
              114,
              111,
              99,
              101,
              115,
              115,
              105,
              110,
              103,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              50,
              117,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              95,
              112,
              114,
              111,
              99,
              101,
              115,
              115,
              105,
              110,
              103,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              47,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              80,
              114,
              111,
              99,
              101,
              115,
              115,
              105,
              110,
              103,
              67,
              111,
              110,
              102,
              105,
              103,
              125,
              50,
              103,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              95,
              112,
              114,
              111,
              99,
              101,
              115,
              115,
              105,
              110,
              103,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              47,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              80,
              114,
              111,
              99,
              101,
              115,
              115,
              105,
              110,
              103,
              67,
              111,
              110,
              102,
              105,
              103,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface DataStoreServiceImplementation<CallContextExt = {}> {
  /**
   * Creates a [DataStore][google.cloud.discoveryengine.v1alpha.DataStore].
   *
   * DataStore is for storing
   * [Documents][google.cloud.discoveryengine.v1alpha.Document]. To serve these
   * documents for Search, or Recommendation use case, an
   * [Engine][google.cloud.discoveryengine.v1alpha.Engine] needs to be created
   * separately.
   */
  createDataStore(
    request: CreateDataStoreRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Gets a [DataStore][google.cloud.discoveryengine.v1alpha.DataStore]. */
  getDataStore(request: GetDataStoreRequest, context: CallContext & CallContextExt): Promise<DeepPartial<DataStore>>;
  /**
   * Lists all the [DataStore][google.cloud.discoveryengine.v1alpha.DataStore]s
   * associated with the project.
   */
  listDataStores(
    request: ListDataStoresRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListDataStoresResponse>>;
  /** Deletes a [DataStore][google.cloud.discoveryengine.v1alpha.DataStore]. */
  deleteDataStore(
    request: DeleteDataStoreRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Updates a [DataStore][google.cloud.discoveryengine.v1alpha.DataStore] */
  updateDataStore(
    request: UpdateDataStoreRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<DataStore>>;
  /**
   * Gets a
   * [DocumentProcessingConfig][google.cloud.discoveryengine.v1alpha.DocumentProcessingConfig].
   */
  getDocumentProcessingConfig(
    request: GetDocumentProcessingConfigRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<DocumentProcessingConfig>>;
  /**
   * Updates the
   * [DocumentProcessingConfig][google.cloud.discoveryengine.v1alpha.DocumentProcessingConfig].
   * [DocumentProcessingConfig][google.cloud.discoveryengine.v1alpha.DocumentProcessingConfig]
   * is a singleon resource of
   * [DataStore][google.cloud.discoveryengine.v1alpha.DataStore]. It's empty
   * when [DataStore][google.cloud.discoveryengine.v1alpha.DataStore] is
   * created. The first call to this method will set up
   * [DocumentProcessingConfig][google.cloud.discoveryengine.v1alpha.DocumentProcessingConfig].
   */
  updateDocumentProcessingConfig(
    request: UpdateDocumentProcessingConfigRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<DocumentProcessingConfig>>;
}

export interface DataStoreServiceClient<CallOptionsExt = {}> {
  /**
   * Creates a [DataStore][google.cloud.discoveryengine.v1alpha.DataStore].
   *
   * DataStore is for storing
   * [Documents][google.cloud.discoveryengine.v1alpha.Document]. To serve these
   * documents for Search, or Recommendation use case, an
   * [Engine][google.cloud.discoveryengine.v1alpha.Engine] needs to be created
   * separately.
   */
  createDataStore(
    request: DeepPartial<CreateDataStoreRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Gets a [DataStore][google.cloud.discoveryengine.v1alpha.DataStore]. */
  getDataStore(request: DeepPartial<GetDataStoreRequest>, options?: CallOptions & CallOptionsExt): Promise<DataStore>;
  /**
   * Lists all the [DataStore][google.cloud.discoveryengine.v1alpha.DataStore]s
   * associated with the project.
   */
  listDataStores(
    request: DeepPartial<ListDataStoresRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListDataStoresResponse>;
  /** Deletes a [DataStore][google.cloud.discoveryengine.v1alpha.DataStore]. */
  deleteDataStore(
    request: DeepPartial<DeleteDataStoreRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Updates a [DataStore][google.cloud.discoveryengine.v1alpha.DataStore] */
  updateDataStore(
    request: DeepPartial<UpdateDataStoreRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<DataStore>;
  /**
   * Gets a
   * [DocumentProcessingConfig][google.cloud.discoveryengine.v1alpha.DocumentProcessingConfig].
   */
  getDocumentProcessingConfig(
    request: DeepPartial<GetDocumentProcessingConfigRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<DocumentProcessingConfig>;
  /**
   * Updates the
   * [DocumentProcessingConfig][google.cloud.discoveryengine.v1alpha.DocumentProcessingConfig].
   * [DocumentProcessingConfig][google.cloud.discoveryengine.v1alpha.DocumentProcessingConfig]
   * is a singleon resource of
   * [DataStore][google.cloud.discoveryengine.v1alpha.DataStore]. It's empty
   * when [DataStore][google.cloud.discoveryengine.v1alpha.DataStore] is
   * created. The first call to this method will set up
   * [DocumentProcessingConfig][google.cloud.discoveryengine.v1alpha.DocumentProcessingConfig].
   */
  updateDocumentProcessingConfig(
    request: DeepPartial<UpdateDocumentProcessingConfigRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<DocumentProcessingConfig>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
