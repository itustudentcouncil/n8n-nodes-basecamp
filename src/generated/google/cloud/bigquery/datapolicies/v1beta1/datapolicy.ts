// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/bigquery/datapolicies/v1beta1/datapolicy.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import {
  GetIamPolicyRequest,
  SetIamPolicyRequest,
  TestIamPermissionsRequest,
  TestIamPermissionsResponse,
} from "../../../../iam/v1/iam_policy.js";
import { Policy } from "../../../../iam/v1/policy.js";
import { Empty } from "../../../../protobuf/empty.js";
import { FieldMask } from "../../../../protobuf/field_mask.js";

export const protobufPackage = "google.cloud.bigquery.datapolicies.v1beta1";

/** Request message for the CreateDataPolicy method. */
export interface CreateDataPolicyRequest {
  /**
   * Required. Resource name of the project that the data policy will belong to. The
   * format is `projects/{project_number}/locations/{location_id}`.
   */
  parent: string;
  /**
   * Required. The data policy to create. The `name` field does not need to be
   * provided for the data policy creation.
   */
  dataPolicy: DataPolicy | undefined;
}

/** Response message for the UpdateDataPolicy method. */
export interface UpdateDataPolicyRequest {
  /**
   * Required. Update the data policy's metadata.
   *
   * The target data policy is determined by the `name` field.
   * Other fields are updated to the specified values based on the field masks.
   */
  dataPolicy:
    | DataPolicy
    | undefined;
  /**
   * The update mask applies to the resource. For the `FieldMask` definition,
   * see
   * https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask
   * If not set, defaults to all of the fields that are allowed to update.
   *
   * Updates to the `name` and `dataPolicyId` fields are not allowed.
   */
  updateMask: string[] | undefined;
}

/** Request message for the DeleteDataPolicy method. */
export interface DeleteDataPolicyRequest {
  /**
   * Required. Resource name of the data policy to delete. Format is
   * `projects/{project_number}/locations/{location_id}/dataPolicies/{data_policy_id}`.
   */
  name: string;
}

/** Request message for the GetDataPolicy method. */
export interface GetDataPolicyRequest {
  /**
   * Required. Resource name of the requested data policy. Format is
   * `projects/{project_number}/locations/{location_id}/dataPolicies/{data_policy_id}`.
   */
  name: string;
}

/** Request message for the ListDataPolicies method. */
export interface ListDataPoliciesRequest {
  /**
   * Required. Resource name of the project for which to list data policies. Format is
   * `projects/{project_number}/locations/{location_id}`.
   */
  parent: string;
  /**
   * The maximum number of data policies to return. Must be a value between 1
   * and 1000.
   * If not set, defaults to 50.
   */
  pageSize: number;
  /**
   * The `nextPageToken` value returned from a previous list request, if any. If
   * not set, defaults to an empty string.
   */
  pageToken: string;
}

/** Response message for the ListDataPolicies method. */
export interface ListDataPoliciesResponse {
  /** Data policies that belong to the requested project. */
  dataPolicies: DataPolicy[];
  /**
   * Token used to retrieve the next page of results, or empty if there are no
   * more results.
   */
  nextPageToken: string;
}

/** Represents the label-policy binding. */
export interface DataPolicy {
  /**
   * Policy tag resource name, in the format of
   * `projects/{project_number}/locations/{location_id}/taxonomies/{taxonomy_id}/policyTags/{policyTag_id}`.
   */
  policyTag?:
    | string
    | undefined;
  /** The data masking policy that specifies the data masking rule to use. */
  dataMaskingPolicy?:
    | DataMaskingPolicy
    | undefined;
  /**
   * Output only. Resource name of this data policy, in the format of
   * `projects/{project_number}/locations/{location_id}/dataPolicies/{data_policy_id}`.
   */
  name: string;
  /** Type of data policy. */
  dataPolicyType: DataPolicy_DataPolicyType;
  /**
   * User-assigned (human readable) ID of the data policy that needs to be
   * unique within a project. Used as {data_policy_id} in part of the resource
   * name.
   */
  dataPolicyId: string;
}

/** A list of supported data policy types. */
export enum DataPolicy_DataPolicyType {
  /** DATA_POLICY_TYPE_UNSPECIFIED - Default value for the data policy type. This should not be used. */
  DATA_POLICY_TYPE_UNSPECIFIED = 0,
  /**
   * COLUMN_LEVEL_SECURITY_POLICY - Used to create a data policy for column-level security, without data
   * masking.
   */
  COLUMN_LEVEL_SECURITY_POLICY = 3,
  /** DATA_MASKING_POLICY - Used to create a data policy for data masking. */
  DATA_MASKING_POLICY = 2,
  UNRECOGNIZED = -1,
}

export function dataPolicy_DataPolicyTypeFromJSON(object: any): DataPolicy_DataPolicyType {
  switch (object) {
    case 0:
    case "DATA_POLICY_TYPE_UNSPECIFIED":
      return DataPolicy_DataPolicyType.DATA_POLICY_TYPE_UNSPECIFIED;
    case 3:
    case "COLUMN_LEVEL_SECURITY_POLICY":
      return DataPolicy_DataPolicyType.COLUMN_LEVEL_SECURITY_POLICY;
    case 2:
    case "DATA_MASKING_POLICY":
      return DataPolicy_DataPolicyType.DATA_MASKING_POLICY;
    case -1:
    case "UNRECOGNIZED":
    default:
      return DataPolicy_DataPolicyType.UNRECOGNIZED;
  }
}

export function dataPolicy_DataPolicyTypeToJSON(object: DataPolicy_DataPolicyType): string {
  switch (object) {
    case DataPolicy_DataPolicyType.DATA_POLICY_TYPE_UNSPECIFIED:
      return "DATA_POLICY_TYPE_UNSPECIFIED";
    case DataPolicy_DataPolicyType.COLUMN_LEVEL_SECURITY_POLICY:
      return "COLUMN_LEVEL_SECURITY_POLICY";
    case DataPolicy_DataPolicyType.DATA_MASKING_POLICY:
      return "DATA_MASKING_POLICY";
    case DataPolicy_DataPolicyType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** The data masking policy that is used to specify data masking rule. */
export interface DataMaskingPolicy {
  /** A predefined masking expression. */
  predefinedExpression?: DataMaskingPolicy_PredefinedExpression | undefined;
}

/**
 * The available masking rules. Learn more here:
 * https://cloud.google.com/bigquery/docs/column-data-masking-intro#masking_options.
 */
export enum DataMaskingPolicy_PredefinedExpression {
  /**
   * PREDEFINED_EXPRESSION_UNSPECIFIED - Default, unspecified predefined expression. No masking will take place
   * since no expression is specified.
   */
  PREDEFINED_EXPRESSION_UNSPECIFIED = 0,
  /** SHA256 - Masking expression to replace data with SHA-256 hash. */
  SHA256 = 3,
  /** ALWAYS_NULL - Masking expression to replace data with NULLs. */
  ALWAYS_NULL = 5,
  /**
   * DEFAULT_MASKING_VALUE - Masking expression to replace data with their default masking values.
   * The default masking values for each type listed as below:
   *
   * * STRING: ""
   * * BYTES: b''
   * * INTEGER: 0
   * * FLOAT: 0.0
   * * NUMERIC: 0
   * * BOOLEAN: FALSE
   * * TIMESTAMP: 0001-01-01 00:00:00 UTC
   * * DATE: 0001-01-01
   * * TIME: 00:00:00
   * * DATETIME: 0001-01-01T00:00:00
   * * GEOGRAPHY: POINT(0 0)
   * * BIGNUMERIC: 0
   * * ARRAY: []
   * * STRUCT: NOT_APPLICABLE
   * * JSON: NULL
   */
  DEFAULT_MASKING_VALUE = 7,
  UNRECOGNIZED = -1,
}

export function dataMaskingPolicy_PredefinedExpressionFromJSON(object: any): DataMaskingPolicy_PredefinedExpression {
  switch (object) {
    case 0:
    case "PREDEFINED_EXPRESSION_UNSPECIFIED":
      return DataMaskingPolicy_PredefinedExpression.PREDEFINED_EXPRESSION_UNSPECIFIED;
    case 3:
    case "SHA256":
      return DataMaskingPolicy_PredefinedExpression.SHA256;
    case 5:
    case "ALWAYS_NULL":
      return DataMaskingPolicy_PredefinedExpression.ALWAYS_NULL;
    case 7:
    case "DEFAULT_MASKING_VALUE":
      return DataMaskingPolicy_PredefinedExpression.DEFAULT_MASKING_VALUE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return DataMaskingPolicy_PredefinedExpression.UNRECOGNIZED;
  }
}

export function dataMaskingPolicy_PredefinedExpressionToJSON(object: DataMaskingPolicy_PredefinedExpression): string {
  switch (object) {
    case DataMaskingPolicy_PredefinedExpression.PREDEFINED_EXPRESSION_UNSPECIFIED:
      return "PREDEFINED_EXPRESSION_UNSPECIFIED";
    case DataMaskingPolicy_PredefinedExpression.SHA256:
      return "SHA256";
    case DataMaskingPolicy_PredefinedExpression.ALWAYS_NULL:
      return "ALWAYS_NULL";
    case DataMaskingPolicy_PredefinedExpression.DEFAULT_MASKING_VALUE:
      return "DEFAULT_MASKING_VALUE";
    case DataMaskingPolicy_PredefinedExpression.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseCreateDataPolicyRequest(): CreateDataPolicyRequest {
  return { parent: "", dataPolicy: undefined };
}

export const CreateDataPolicyRequest: MessageFns<CreateDataPolicyRequest> = {
  encode(message: CreateDataPolicyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.dataPolicy !== undefined) {
      DataPolicy.encode(message.dataPolicy, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateDataPolicyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateDataPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.dataPolicy = DataPolicy.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateDataPolicyRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      dataPolicy: isSet(object.dataPolicy) ? DataPolicy.fromJSON(object.dataPolicy) : undefined,
    };
  },

  toJSON(message: CreateDataPolicyRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.dataPolicy !== undefined) {
      obj.dataPolicy = DataPolicy.toJSON(message.dataPolicy);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateDataPolicyRequest>): CreateDataPolicyRequest {
    return CreateDataPolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateDataPolicyRequest>): CreateDataPolicyRequest {
    const message = createBaseCreateDataPolicyRequest();
    message.parent = object.parent ?? "";
    message.dataPolicy = (object.dataPolicy !== undefined && object.dataPolicy !== null)
      ? DataPolicy.fromPartial(object.dataPolicy)
      : undefined;
    return message;
  },
};

function createBaseUpdateDataPolicyRequest(): UpdateDataPolicyRequest {
  return { dataPolicy: undefined, updateMask: undefined };
}

export const UpdateDataPolicyRequest: MessageFns<UpdateDataPolicyRequest> = {
  encode(message: UpdateDataPolicyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.dataPolicy !== undefined) {
      DataPolicy.encode(message.dataPolicy, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateDataPolicyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateDataPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.dataPolicy = DataPolicy.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateDataPolicyRequest {
    return {
      dataPolicy: isSet(object.dataPolicy) ? DataPolicy.fromJSON(object.dataPolicy) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateDataPolicyRequest): unknown {
    const obj: any = {};
    if (message.dataPolicy !== undefined) {
      obj.dataPolicy = DataPolicy.toJSON(message.dataPolicy);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateDataPolicyRequest>): UpdateDataPolicyRequest {
    return UpdateDataPolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateDataPolicyRequest>): UpdateDataPolicyRequest {
    const message = createBaseUpdateDataPolicyRequest();
    message.dataPolicy = (object.dataPolicy !== undefined && object.dataPolicy !== null)
      ? DataPolicy.fromPartial(object.dataPolicy)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseDeleteDataPolicyRequest(): DeleteDataPolicyRequest {
  return { name: "" };
}

export const DeleteDataPolicyRequest: MessageFns<DeleteDataPolicyRequest> = {
  encode(message: DeleteDataPolicyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteDataPolicyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteDataPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteDataPolicyRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteDataPolicyRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteDataPolicyRequest>): DeleteDataPolicyRequest {
    return DeleteDataPolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteDataPolicyRequest>): DeleteDataPolicyRequest {
    const message = createBaseDeleteDataPolicyRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseGetDataPolicyRequest(): GetDataPolicyRequest {
  return { name: "" };
}

export const GetDataPolicyRequest: MessageFns<GetDataPolicyRequest> = {
  encode(message: GetDataPolicyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetDataPolicyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDataPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDataPolicyRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetDataPolicyRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetDataPolicyRequest>): GetDataPolicyRequest {
    return GetDataPolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetDataPolicyRequest>): GetDataPolicyRequest {
    const message = createBaseGetDataPolicyRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListDataPoliciesRequest(): ListDataPoliciesRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListDataPoliciesRequest: MessageFns<ListDataPoliciesRequest> = {
  encode(message: ListDataPoliciesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListDataPoliciesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListDataPoliciesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListDataPoliciesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListDataPoliciesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListDataPoliciesRequest>): ListDataPoliciesRequest {
    return ListDataPoliciesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListDataPoliciesRequest>): ListDataPoliciesRequest {
    const message = createBaseListDataPoliciesRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListDataPoliciesResponse(): ListDataPoliciesResponse {
  return { dataPolicies: [], nextPageToken: "" };
}

export const ListDataPoliciesResponse: MessageFns<ListDataPoliciesResponse> = {
  encode(message: ListDataPoliciesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.dataPolicies) {
      DataPolicy.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListDataPoliciesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListDataPoliciesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.dataPolicies.push(DataPolicy.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListDataPoliciesResponse {
    return {
      dataPolicies: globalThis.Array.isArray(object?.dataPolicies)
        ? object.dataPolicies.map((e: any) => DataPolicy.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListDataPoliciesResponse): unknown {
    const obj: any = {};
    if (message.dataPolicies?.length) {
      obj.dataPolicies = message.dataPolicies.map((e) => DataPolicy.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListDataPoliciesResponse>): ListDataPoliciesResponse {
    return ListDataPoliciesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListDataPoliciesResponse>): ListDataPoliciesResponse {
    const message = createBaseListDataPoliciesResponse();
    message.dataPolicies = object.dataPolicies?.map((e) => DataPolicy.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseDataPolicy(): DataPolicy {
  return { policyTag: undefined, dataMaskingPolicy: undefined, name: "", dataPolicyType: 0, dataPolicyId: "" };
}

export const DataPolicy: MessageFns<DataPolicy> = {
  encode(message: DataPolicy, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.policyTag !== undefined) {
      writer.uint32(34).string(message.policyTag);
    }
    if (message.dataMaskingPolicy !== undefined) {
      DataMaskingPolicy.encode(message.dataMaskingPolicy, writer.uint32(42).fork()).join();
    }
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.dataPolicyType !== 0) {
      writer.uint32(16).int32(message.dataPolicyType);
    }
    if (message.dataPolicyId !== "") {
      writer.uint32(26).string(message.dataPolicyId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DataPolicy {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDataPolicy();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 4:
          if (tag !== 34) {
            break;
          }

          message.policyTag = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.dataMaskingPolicy = DataMaskingPolicy.decode(reader, reader.uint32());
          continue;
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.dataPolicyType = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.dataPolicyId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DataPolicy {
    return {
      policyTag: isSet(object.policyTag) ? globalThis.String(object.policyTag) : undefined,
      dataMaskingPolicy: isSet(object.dataMaskingPolicy)
        ? DataMaskingPolicy.fromJSON(object.dataMaskingPolicy)
        : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      dataPolicyType: isSet(object.dataPolicyType) ? dataPolicy_DataPolicyTypeFromJSON(object.dataPolicyType) : 0,
      dataPolicyId: isSet(object.dataPolicyId) ? globalThis.String(object.dataPolicyId) : "",
    };
  },

  toJSON(message: DataPolicy): unknown {
    const obj: any = {};
    if (message.policyTag !== undefined) {
      obj.policyTag = message.policyTag;
    }
    if (message.dataMaskingPolicy !== undefined) {
      obj.dataMaskingPolicy = DataMaskingPolicy.toJSON(message.dataMaskingPolicy);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.dataPolicyType !== 0) {
      obj.dataPolicyType = dataPolicy_DataPolicyTypeToJSON(message.dataPolicyType);
    }
    if (message.dataPolicyId !== "") {
      obj.dataPolicyId = message.dataPolicyId;
    }
    return obj;
  },

  create(base?: DeepPartial<DataPolicy>): DataPolicy {
    return DataPolicy.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DataPolicy>): DataPolicy {
    const message = createBaseDataPolicy();
    message.policyTag = object.policyTag ?? undefined;
    message.dataMaskingPolicy = (object.dataMaskingPolicy !== undefined && object.dataMaskingPolicy !== null)
      ? DataMaskingPolicy.fromPartial(object.dataMaskingPolicy)
      : undefined;
    message.name = object.name ?? "";
    message.dataPolicyType = object.dataPolicyType ?? 0;
    message.dataPolicyId = object.dataPolicyId ?? "";
    return message;
  },
};

function createBaseDataMaskingPolicy(): DataMaskingPolicy {
  return { predefinedExpression: undefined };
}

export const DataMaskingPolicy: MessageFns<DataMaskingPolicy> = {
  encode(message: DataMaskingPolicy, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.predefinedExpression !== undefined) {
      writer.uint32(8).int32(message.predefinedExpression);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DataMaskingPolicy {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDataMaskingPolicy();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.predefinedExpression = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DataMaskingPolicy {
    return {
      predefinedExpression: isSet(object.predefinedExpression)
        ? dataMaskingPolicy_PredefinedExpressionFromJSON(object.predefinedExpression)
        : undefined,
    };
  },

  toJSON(message: DataMaskingPolicy): unknown {
    const obj: any = {};
    if (message.predefinedExpression !== undefined) {
      obj.predefinedExpression = dataMaskingPolicy_PredefinedExpressionToJSON(message.predefinedExpression);
    }
    return obj;
  },

  create(base?: DeepPartial<DataMaskingPolicy>): DataMaskingPolicy {
    return DataMaskingPolicy.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DataMaskingPolicy>): DataMaskingPolicy {
    const message = createBaseDataMaskingPolicy();
    message.predefinedExpression = object.predefinedExpression ?? undefined;
    return message;
  },
};

/** Data Policy Service provides APIs for managing the label-policy bindings. */
export type DataPolicyServiceDefinition = typeof DataPolicyServiceDefinition;
export const DataPolicyServiceDefinition = {
  name: "DataPolicyService",
  fullName: "google.cloud.bigquery.datapolicies.v1beta1.DataPolicyService",
  methods: {
    /**
     * Creates a new data policy under a project with the given `dataPolicyId`
     * (used as the display name), policy tag, and data policy type.
     */
    createDataPolicy: {
      name: "CreateDataPolicy",
      requestType: CreateDataPolicyRequest,
      requestStream: false,
      responseType: DataPolicy,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([18, 112, 97, 114, 101, 110, 116, 44, 100, 97, 116, 97, 95, 112, 111, 108, 105, 99, 121])],
          578365826: [
            Buffer.from([
              68,
              58,
              11,
              100,
              97,
              116,
              97,
              95,
              112,
              111,
              108,
              105,
              99,
              121,
              34,
              53,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              100,
              97,
              116,
              97,
              80,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Updates the metadata for an existing data policy. The target data policy
     * can be specified by the resource name.
     */
    updateDataPolicy: {
      name: "UpdateDataPolicy",
      requestType: UpdateDataPolicyRequest,
      requestStream: false,
      responseType: DataPolicy,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              23,
              100,
              97,
              116,
              97,
              95,
              112,
              111,
              108,
              105,
              99,
              121,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              80,
              58,
              11,
              100,
              97,
              116,
              97,
              95,
              112,
              111,
              108,
              105,
              99,
              121,
              50,
              65,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              100,
              97,
              116,
              97,
              95,
              112,
              111,
              108,
              105,
              99,
              121,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              80,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes the data policy specified by its resource name. */
    deleteDataPolicy: {
      name: "DeleteDataPolicy",
      requestType: DeleteDataPolicyRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              55,
              42,
              53,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              80,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Gets the data policy specified by its resource name. */
    getDataPolicy: {
      name: "GetDataPolicy",
      requestType: GetDataPolicyRequest,
      requestStream: false,
      responseType: DataPolicy,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              55,
              18,
              53,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              80,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** List all of the data policies in the specified parent project. */
    listDataPolicies: {
      name: "ListDataPolicies",
      requestType: ListDataPoliciesRequest,
      requestStream: false,
      responseType: ListDataPoliciesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              55,
              18,
              53,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              100,
              97,
              116,
              97,
              80,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets the IAM policy for the specified data policy. */
    getIamPolicy: {
      name: "GetIamPolicy",
      requestType: GetIamPolicyRequest,
      requestStream: false,
      responseType: Policy,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              75,
              58,
              1,
              42,
              34,
              70,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              80,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              42,
              125,
              58,
              103,
              101,
              116,
              73,
              97,
              109,
              80,
              111,
              108,
              105,
              99,
              121,
            ]),
          ],
        },
      },
    },
    /** Sets the IAM policy for the specified data policy. */
    setIamPolicy: {
      name: "SetIamPolicy",
      requestType: SetIamPolicyRequest,
      requestStream: false,
      responseType: Policy,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              75,
              58,
              1,
              42,
              34,
              70,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              80,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              42,
              125,
              58,
              115,
              101,
              116,
              73,
              97,
              109,
              80,
              111,
              108,
              105,
              99,
              121,
            ]),
          ],
        },
      },
    },
    /** Returns the caller's permission on the specified data policy resource. */
    testIamPermissions: {
      name: "TestIamPermissions",
      requestType: TestIamPermissionsRequest,
      requestStream: false,
      responseType: TestIamPermissionsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              81,
              58,
              1,
              42,
              34,
              76,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              80,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              42,
              125,
              58,
              116,
              101,
              115,
              116,
              73,
              97,
              109,
              80,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface DataPolicyServiceImplementation<CallContextExt = {}> {
  /**
   * Creates a new data policy under a project with the given `dataPolicyId`
   * (used as the display name), policy tag, and data policy type.
   */
  createDataPolicy(
    request: CreateDataPolicyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<DataPolicy>>;
  /**
   * Updates the metadata for an existing data policy. The target data policy
   * can be specified by the resource name.
   */
  updateDataPolicy(
    request: UpdateDataPolicyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<DataPolicy>>;
  /** Deletes the data policy specified by its resource name. */
  deleteDataPolicy(
    request: DeleteDataPolicyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  /** Gets the data policy specified by its resource name. */
  getDataPolicy(request: GetDataPolicyRequest, context: CallContext & CallContextExt): Promise<DeepPartial<DataPolicy>>;
  /** List all of the data policies in the specified parent project. */
  listDataPolicies(
    request: ListDataPoliciesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListDataPoliciesResponse>>;
  /** Gets the IAM policy for the specified data policy. */
  getIamPolicy(request: GetIamPolicyRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Policy>>;
  /** Sets the IAM policy for the specified data policy. */
  setIamPolicy(request: SetIamPolicyRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Policy>>;
  /** Returns the caller's permission on the specified data policy resource. */
  testIamPermissions(
    request: TestIamPermissionsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<TestIamPermissionsResponse>>;
}

export interface DataPolicyServiceClient<CallOptionsExt = {}> {
  /**
   * Creates a new data policy under a project with the given `dataPolicyId`
   * (used as the display name), policy tag, and data policy type.
   */
  createDataPolicy(
    request: DeepPartial<CreateDataPolicyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<DataPolicy>;
  /**
   * Updates the metadata for an existing data policy. The target data policy
   * can be specified by the resource name.
   */
  updateDataPolicy(
    request: DeepPartial<UpdateDataPolicyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<DataPolicy>;
  /** Deletes the data policy specified by its resource name. */
  deleteDataPolicy(
    request: DeepPartial<DeleteDataPolicyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  /** Gets the data policy specified by its resource name. */
  getDataPolicy(
    request: DeepPartial<GetDataPolicyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<DataPolicy>;
  /** List all of the data policies in the specified parent project. */
  listDataPolicies(
    request: DeepPartial<ListDataPoliciesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListDataPoliciesResponse>;
  /** Gets the IAM policy for the specified data policy. */
  getIamPolicy(request: DeepPartial<GetIamPolicyRequest>, options?: CallOptions & CallOptionsExt): Promise<Policy>;
  /** Sets the IAM policy for the specified data policy. */
  setIamPolicy(request: DeepPartial<SetIamPolicyRequest>, options?: CallOptions & CallOptionsExt): Promise<Policy>;
  /** Returns the caller's permission on the specified data policy resource. */
  testIamPermissions(
    request: DeepPartial<TestIamPermissionsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<TestIamPermissionsResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
